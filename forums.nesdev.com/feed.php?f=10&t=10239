<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=10239" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-07-03T11:17:19-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=10239</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-07-03T11:17:19-07:00</updated>
<published>2013-07-03T11:17:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114533#p114533</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114533#p114533"/>
<title type="html"><![CDATA[Re: Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114533#p114533"><![CDATA[
<div class="quotetitle">CrowleyBluegrass wrote:</div><div class="quotecontent"><br />I've never used the + operator before. I assume it just replaces the task of adding x to the address by just adding a number to the address directly in the assembler?<br /></div><br />Yes. Since the base address is explicitly given 4 times, nothing stops you from incrementing the address each time instead of incrementing the index register, the end result is the same (the final address will be base + x, so it doesn't matter whether you increment the base address or the index register). Then in the end you increment the index register by 4 units at once, to catch up.<br /><br />This trick is useful for accessing arrays of structures. If you think about it, the OAM is an array of 4-byte structures, so when you load an index register with 0, 4, 8, etc. you can have free access to any byte withing the structure just by incrementing the base address.<br /><br />The same technique could be used for processing game objects, for example. Say that each active object in your game has 16 bytes of RAM. Then, by loading X with 0, 16, 32, 48, 64, etc. you can have free access to any attribute of that object. Like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;this specifies which object bytes correspond to which attributes:<br /><br />PositionX = 0<br />PositionY = 1<br />Health = 3<br />Speed = 4<br />(...)<br />Strength = 15<br /><br />;this is an example of how to take one health point from the 3rd object (index 2, because we count from 0):<br /><br />ldx #(16 * 2)<br />dec ObjectRAM+Health, x</div><br />This allows you to have generic subroutines to manipulate objects, you just have to supply the routines with an index.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jul 03, 2013 11:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-07-03T11:15:57-07:00</updated>
<published>2013-07-03T11:15:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114532#p114532</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114532#p114532"/>
<title type="html"><![CDATA[Re: Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114532#p114532"><![CDATA[
And in some cases, there's an even slicker advanced way to avoid increments at all, which I call a &quot;pop slide&quot; (by analogy with a <a href="https://en.wikipedia.org/wiki/NOP_slide" class="postlink">nop slide</a>). It's no faster than an absolute indexed loop like what Movax12 posted, but it may allow deeper unrolling in a given amount of ROM space. I just described it on the wiki's <a href="http://wiki.nesdev.com/w/index.php/Stack" class="postlink">article about the stack</a>. Don't worry if you don't understand all of it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jul 03, 2013 11:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2013-07-03T11:06:51-07:00</updated>
<published>2013-07-03T11:06:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114530#p114530</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114530#p114530"/>
<title type="html"><![CDATA[Re: Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114530#p114530"><![CDATA[
You can save a few more cycles by only incrementing the counter once, then compare against 4 instead of 16.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Wed Jul 03, 2013 11:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CrowleyBluegrass]]></name></author>
<updated>2013-07-03T10:48:30-07:00</updated>
<published>2013-07-03T10:48:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114528#p114528</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114528#p114528"/>
<title type="html"><![CDATA[Re: Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114528#p114528"><![CDATA[
Thanks guys. I wouldn't be surprised if the amount of clock cycles saved was incorrect, if anyone can tell from a glance why (obviously my lackluster arithmetic) I'd be interested to know.<br /><br />I've never used the + operator before. I assume it just replaces the task of adding x to the address by just adding a number to the address directly in the assembler? In other words, in the first run, adding x to the address doesn't do anything because x is 0 and incrementing the address is done with the + operator? Then the second time, each address is incremented by an additional 4 (due to the ADC from the end of the previous run) and so on? The CMP just checks to see if the zero flag is set before moving on. <br /><br />Many thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6057">CrowleyBluegrass</a> — Wed Jul 03, 2013 10:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2013-07-03T09:32:29-07:00</updated>
<published>2013-07-03T09:32:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114523#p114523</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114523#p114523"/>
<title type="html"><![CDATA[Re: Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114523#p114523"><![CDATA[
The idea is right but the cycle counts seem off to me. I got 60 cycles saved. The easiest way to calculate it is to see that the 2nd loop gets rid of 3 pairs of CPX+BNE per each 4 iterations, so a total of 12 CPX+BNE pairs. Those CPX+BNE take a total of 2+3 = 5 cycles, so the number of cycles saved is 12*5 = 60.<br /><br />But really the easiest way to do this stuff is to use something like NintendulatorDX. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> No more second guessing if you got it right or not.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Jul 03, 2013 9:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2013-07-03T09:19:12-07:00</updated>
<published>2013-07-03T09:19:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114522#p114522</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114522#p114522"/>
<title type="html"><![CDATA[Re: Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114522#p114522"><![CDATA[
You got the idea. You are saving cycles on not have to branch as often. You can save more cycles though, depending on what is happening in a given loop and thinking about it logically.<br /><br /><br />You could make things a bit quicker here:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />LDA #$00<br />CLC<br />LoadSpritesLoop:<br /><br />  TAX<br /><br />  LDY sprites, x<br />  STY $0200, x<br /><br />  LDY sprites+1, x<br />  STY $0200+1, x<br /><br />  LDY sprites+2, x<br />  STY $0200+2, x<br /><br />  LDY sprites+3, x<br />  STY $0200+3, x<br /><br />  ADC #$04<br />  CMP #$10<br />  BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br /><br />  ; if compare was equal to 16, continue down<br /></div><br /><br />You should also try to start loops from the end and count backwards to zero when possible so you don't have to use a compare instruction (a zero value will set the zero flag). As well, though this may just be an example, if the data you are copying to the sprite shadow OAM is raw sprite data, you should just put it there in the first place.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Wed Jul 03, 2013 9:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CrowleyBluegrass]]></name></author>
<updated>2013-07-03T08:42:22-07:00</updated>
<published>2013-07-03T08:42:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114521#p114521</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114521#p114521"/>
<title type="html"><![CDATA[Unrolling loops?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10239&amp;p=114521#p114521"><![CDATA[
Can somebody give me a simple (6502 is my first foray into programming) explanation of what loop unrolling is? These concepts are quite hard to understand because (it seems) a lot of prior programming knowledge is assumed in many online explanations. Makes sense though I guess, why would someone with no programming experience care about what loop unrolling is?<br /><br />At the risk of sounding like a right numpty, is it something like this? (original code from Nerdy Nights 5)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;INSTEAD OF DOING THIS<br /><br />LoadSprites:<br /><br />  LDX #$00              ; start at 0<br /><br />LoadSpritesLoop:<br /><br />  LDA sprites, x        ; load data from address (sprites + x)<br /><br />  STA $0200, x          ; store into RAM address ($0200 + x)<br /><br />  INX                   ; X = X + 1<br /><br />  CPX #$10              ; Compare X to hex $10, decimal 16<br /><br />  BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br /><br />                        ; if compare was equal to 16, continue down<br /><br />;DO THIS?<br /><br />LoadSprites:<br /><br />  LDX #$00              ; start at 0<br /><br />LoadSpritesLoop:<br /><br />  LDA sprites, x        ; load data from address (sprites + x)<br /><br />  STA $0200, x          ; store into RAM address ($0200 + x)<br /><br />  INX                   ; X = X + 1<br /><br />  LDA sprites, x        ; load data from address (sprites + x)<br /><br />  STA $0200, x          ; store into RAM address ($0200 + x)<br /><br />  INX                   ; X = X + 2<br /><br />  LDA sprites, x        ; load data from address (sprites + x)<br /><br />  STA $0200, x          ; store into RAM address ($0200 + x)<br /><br />  INX                   ; X = X + 3<br /><br />  LDA sprites, x        ; load data from address (sprites + x)<br /><br />  STA $0200, x          ; store into RAM address ($0200 + x)<br /><br />  INX                   ; X = X + 4<br /><br />  CPX #$10              ; Compare X to hex $10, decimal 16<br /><br />  BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br /><br />                        ; if compare was equal to 16, continue down</div><br />The way I see it (with my very limited math skills) instead of repeating the loop 15 times and loading 1 address each iteration, you load 4 addresses. This way, the loop is only repeated 4 times (4*4=16).<br /><br />I work out the total clock cycles for the first loop to be 18 if the branch is taken, and 17 if the branch is not taken. So 18*15=270 and then add 17 for the last run through in which the branch is not taken 270+17=287.<br /><br />I work out the second loop as taking 51 cycles if the branch is taken, 50 if the branch is not taken. So 51*3=153 and then add 50 for the last run through in which the branch is not taken 153+50=203.<br /><br />Therefore, ya save 84 cycles?<br /><br />The last time I did any serious math (though I doubt you guys would consider this serious) was when I was in school, so please, be nice!<br />Thanks y'all <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6057">CrowleyBluegrass</a> — Wed Jul 03, 2013 8:42 am</p><hr />
]]></content>
</entry>
</feed>