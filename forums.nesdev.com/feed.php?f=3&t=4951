<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=4951" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-03-15T05:38:19-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=4951</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-15T05:38:19-07:00</updated>
<published>2009-03-15T05:38:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44306#p44306</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44306#p44306"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44306#p44306"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />So in other words, pretend the X86 is an ARM processor?  Except one without those cool shift and add instructions...<br /></div><br /><a href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_6/CH06-1.html#HEADING1-136" class="postlink">LEA</a> with "scaled indexed addressing" gives you some of your shift-and-adds back.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 15, 2009 5:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-03-15T02:14:20-07:00</updated>
<published>2009-03-15T02:14:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44299#p44299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44299#p44299"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44299#p44299"><![CDATA[
So in other words, pretend the X86 is an ARM processor?  Except one without those cool shift and add instructions...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Mar 15, 2009 2:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2009-03-14T17:08:04-07:00</updated>
<published>2009-03-14T17:08:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44274#p44274</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44274#p44274"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44274#p44274"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">temp = &#40;unsigned long&#41;tempfunc - &#40;&#40;unsigned long&#41;Cache+5&#41;</div><br />Worked! Thanks for that, although I did just read on a site that there is no x86 equivalent of the 6502 $20/$4C opcodes.<br /><br />Which is faster by the way, the $E8 or the $FF $15 way?<br /><br />(Now I need a site with x86 timings that are POST 80486...)<br /></div><br />There are three styles: U-V pipes (Pentium, Pentium MMX, Larrabee), 4-1-1 pipes (Pentium Pro, Pentium II, Pentium III, Pentium M), and NetBurst (Pentium 4). At some point, the pipes become so deep that you might have to use a sort of profile-guided optimization: generate the code several different ways, test them all, and link only the fastest correct version into the final binary.</div><br />By the way, I would ignore NetBurst -- the Pentium 4 is an evolutionary dead-end, and modern Intel chips other than Larrabee are all based on Core2 which is an enhancement of the original PPro/P2/P3 out-of-order architecture.  I think on Core2 the 4-1-1 decoding template is actually more like 4-1-1-1 or something...but its a lot less important anyways because of micro-op fusion; decoding will usually not be a bottleneck, but rather loads (even cache hits) and execution and branch mispredictions.<br /><br />Here's a couple of suggestions to get good performance on modern x86 chips:<br />(1) avoid cache misses when you can, especially L2 cache misses which will waste a hundred cycles or more.<br />(2) avoid long dependence chains (several instructions in a row each depending on the results of the previous instruction).  Dependence chains are okay, but you want to have several of them going at once and keep them short where you can.<br />(3) don't use obsolete (slow) instructions, and don't use the AH/BH/CH/DH registers.  Be careful with INC and DEC for example, they only write to a subset of the flags so they can cause extra dependencies which slow down your code (which you can avoid by using the larger ADD and SUB instructions instead).<br />(4) don't do any of the "slow" things with loads and stores: unaligned access that crosses a cacheline boundary, large load after small store with overlapping addresses, etc.<br />(5) Be careful with partial registers.  If you want to load a 16-bit value, load it into a 32-bit register with MOVZX EAX,[word ptr foo] or whatever, and then do 32-bit math on it.  Its better to do shifts and adds on some 32-bit registers than to write something like MOV AH,[byte ptr foo] ; ADD EBX, EAX.<br />(6) Try to avoid unpredictable branches.  Random branches will be mispredicted 50% of the time, but it can sometimes be even worse.  Note that indirect branches (jumps and calls) are hard for the CPU to predict if they can go to a lot of different addresses; the classic case is the opcode dispatch in a bytecode interpreter.  You might be able to mitigate the penalty by loading the target address into a register as early as possible (I remember something about jumps and calls through a register being "nearly free" on PPro/P2/P3 if register was loaded around 40 cycles in advance).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Sat Mar 14, 2009 5:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-14T16:57:56-07:00</updated>
<published>2009-03-14T16:57:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44273#p44273</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44273#p44273"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44273#p44273"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">temp = &#40;unsigned long&#41;tempfunc - &#40;&#40;unsigned long&#41;Cache+5&#41;</div><br />Worked! Thanks for that, although I did just read on a site that there is no x86 equivalent of the 6502 $20/$4C opcodes.<br /><br />Which is faster by the way, the $E8 or the $FF $15 way?<br /><br />(Now I need a site with x86 timings that are POST 80486...)<br /></div><br />There are three styles: U-V pipes (Pentium, Pentium MMX, Larrabee), 4-1-1 pipes (Pentium Pro, Pentium II, Pentium III, Pentium M), and NetBurst (Pentium 4). At some point, the pipes become so deep that you might have to use a sort of profile-guided optimization: generate the code several different ways, test them all, and link only the fastest correct version into the final binary.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 14, 2009 4:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2009-03-14T16:52:30-07:00</updated>
<published>2009-03-14T16:52:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44272#p44272</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44272#p44272"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44272#p44272"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">temp = &#40;unsigned long&#41;tempfunc - &#40;&#40;unsigned long&#41;Cache+5&#41;</div><br />Worked! Thanks for that, although I did just read on a site that there is no x86 equivalent of the 6502 $20/$4C opcodes.<br /><br />Which is faster by the way, the $E8 or the $FF $15 way?<br /><br />(Now I need a site with x86 timings that are POST 80486...)<br /></div><br /><br />E8 is often faster because the target address is right in the instruction stream.  FF 15 has to read its target address from a memory address.<br /><br />However, x86 timings are much, much MUCH more complicated than those of the 6502 and similar processors.  Modern x86 processors have RISC cores with pipelines dozens of stages long and many dozens of internal registers.  They perform aggressive register renaming and can decode, dispatch, execute and retire multiple instructions per cycle.  Decoded instructions are split into micro-ops that go to reservation stations from which they are issued to execution units out-of-order as soon as their operands are available.  They use extremely clever branch prediction algorithms to try and guess where a jump or call instruction will transfer control to (which they typically succeed at &gt;90% of the time on most "normal" code); when they guess wrong, partially-executed instructions after the jump or call have to be flushed, giving a penalty of at least a dozen cycles.  All of this complexity is one of the reason that modern CPUs have hundreds of millions of transistors in them.  The point I'm trying to make is, if you want your x86 code to run "fast" then you are going to have to consider a LOT of other factors besides instruction selection.  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />For the hardcore, <a href="http://www.agner.org/optimize/" class="postlink">Agner Fog's optimization website</a> contains some very detailed docs about the performance of modern x86 chips.  You can also read the optimization manuals from Intel and AMD (I'm lazy to google them right now).  But since modern x86 chips are so fast, maybe you should not worry TOO much about the performance of this code!<br /><br />[Edit: be sure to read the warnings about "self-modifying code"... basically it will work, but performance can suffer whenever you modify instructions and then try to execute them shortly after.  So you don't want to be generating single basic blocks and immediately executing them, if you can avoid it.  Also, be careful NOT to put generated code right next to other NON-code such as global variables.  Make sure there is at least 64 bytes between them.  Otherwise, you can end up with a situation where the CPU is trying to decode that non-code into valid instructions, and performance can suffer.]<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Sat Mar 14, 2009 4:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2009-03-14T16:37:22-07:00</updated>
<published>2009-03-14T16:37:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44271#p44271</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44271#p44271"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44271#p44271"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">temp = &#40;unsigned long&#41;tempfunc - &#40;&#40;unsigned long&#41;Cache+5&#41;</div><br />Worked! Thanks for that, although I did just read on a site that there is no x86 equivalent of the 6502 $20/$4C opcodes.<br /><br />Which is faster by the way, the $E8 or the $FF $15 way?<br /><br />(Now I need a site with x86 timings that are POST 80486...)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Sat Mar 14, 2009 4:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2009-03-14T16:23:49-07:00</updated>
<published>2009-03-14T16:23:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44270#p44270</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44270#p44270"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44270#p44270"><![CDATA[
I forgot to mention, that calls using E8 (and jumps using E9) use an *offset* from the location of the instruction, not a raw address.  You should subtract that address of the byte after the instruction from it.  (Or in this case, subtract (addressOfCallInstruction+5)).<br /><br />Try this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   temp = &#40;unsigned long&#41;tempfunc - &#40;&#40;unsigned long&#41;Cache+5&#41;;</div><br /><br />Edit: this is just like a relative jump instruction.  If you assemble something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">L0:     jmp short L1<br />        xor eax,eax<br />L1:     xor eax,eax</div><br /><br />Then the first two bytes are probably "EB 02".  (Going from memory, I didn't actually check...)  The relative jumps and calls, use an 8- or 32-bit offset  (which back in the 8086 days was a 16-bit offset).  The offset is from the address that the instruction would fall through to if the jump was NOT taken.<br /><br />Similarly,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">L0:     call near L1<br />        xor eax,eax<br />L1:     xor eax,eax</div><br /><br />will probably produce E8 02 00 00 00 as the first five bytes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Sat Mar 14, 2009 4:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2009-03-14T16:01:24-07:00</updated>
<published>2009-03-14T16:01:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44266#p44266</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44266#p44266"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44266#p44266"><![CDATA[
Thanks for that, although using $E8 xx xx xx xx still crashes.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &lt;conio.h&gt;<br />#include &lt;stdio.h&gt;<br /><br />unsigned char Cache&#91;10&#93;;<br />unsigned long temp;<br />unsigned char F1, F2, F3, F4;<br /><br />void tempfunc&#40;&#41;<br />&#123;<br />   cputs&#40;&quot;Yeah!&quot;&#41;;<br />   getch&#40;&#41;;<br />&#125;<br /><br />void main&#40;&#41;<br />&#123;<br />   temp = &#40;unsigned long&#41;tempfunc;<br /><br />   __asm &#123;<br />      mov ebx, temp<br />      mov F1, bl<br />      shr ebx, 8<br />      mov F2, bl<br />      shr ebx, 8<br />      mov F3, bl<br />      shr ebx, 8<br />      mov F4, bl<br />   &#125;<br /><br />   Cache&#91;0&#93; = 0xE8;<br />   Cache&#91;1&#93; = F1;<br />   Cache&#91;2&#93; = F2;<br />   Cache&#91;3&#93; = F3;<br />   Cache&#91;4&#93; = F4;<br />   Cache&#91;5&#93; = 0xC3;<br /><br />   __asm &#123;<br />      mov ebx, offset Cache<br />      call ebx<br />   &#125;<br /><br />   getch&#40;&#41;;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Sat Mar 14, 2009 4:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2009-03-14T15:52:11-07:00</updated>
<published>2009-03-14T15:52:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44265#p44265</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44265#p44265"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44265#p44265"><![CDATA[
"Near" and "far" usually refer to the old 16-bit segmented memory model that was the only choice on the 8086.  A "near" pointer means just an offset within the segment; it was a 16-bit offset in those days.  A "far" pointer was a combination of a 16-bit segment value and a 16-bit offset.  In real mode, they were combined like  "seg * 16 + ofs" effectively letting you address a little more than 20 bits worth of memory (it wrapped around at 1 MB, I think).<br /><br />With 80386 and up, it became possible to use "protected mode" where the 16-bit segment value was actually a "selector" and could point to a segment starting anywhere in the 4 GB address space.  The "selector" identified a particular "segment descriptor" in a table maintained by the operating system, which gave the start address (and length!) of each segment.  Also, 32-bit mode enlarged the offsets to 32 bits so that within a segment you were not limited to 64 KB anymore, but could now address really large segments up to 4 GB.<br /><br />Then, Windows 95 and other operating systems began a convention that is now called "flat mode": they set CS, DS and SS to point to segment descriptors that all point to the beginning of the 4 GB and had their length set to nearly the entire 4 GB.  ["DOS Extenders" did the same thing to give real-mode programs access to more than 1MB of memory.]  So instead of your stack addresses, your code addresses and your data addresses being incompatible (because they used to be in three different segments), suddenly all you needed was the "near" 32-bit offset and you could access anything using any of the segment registers.  The only exception (at least in Windows) is that they use one of the extra segment registers (FS maybe?) to point to a thread-local data block.  Flat mode was vastly preferred by programmers because it was much simpler to work with, and the 80386 and up had other mechanisms (like page tables) that could still be used to provide security, virtual memory, etc.  So nearly all modern systems don't use the segment stuff and they don't use "far" pointers.  (There's a tonne of other legacy stuff in x86 chips that they don't use either; weird IDT stuff like task gates that perform complex context-switching stuff but take hundreds of cycles to do it... they were intended for use by OSes, but it turns out to be faster for the OS to do the context switching itself using much more basic instructions like MOV).<br /><br />So anyway, "far" pointers are a legacy thing that you should not need to use in modern 32- or 64-bit operating systems.  In fact x86-64 maintains backward compatibility with all this complex segment crap when running in 32-bit mode, but when you switch to 64-bit mode it ONLY supports flat mode.<br /><br />To get back to your other question, FF 15 aa bb cc dd  is a "call near [ddccbbaa]" instruction, in other words, its an INDIRECT call.  It doesn't transfer control to the address ddccbbaa -- for that you would want E8 aa bb cc dd.  What the FF 15 instruction does, is read a NEAR pointer (i.e. a 32-bit address) from the address ddccbbaa, and then call that address.  Its sort of equivalent to:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  mov  temp32BitRegister, &#91;ddccbbaa&#93;<br />  call temp32BitRegister</div><br /><br /><a href="http://www.sandpile.org/ia32/index.htm" class="postlink">Lastly, there is a site called sandpile.org that has a lot of useful info about x86 instructions, here is the link.</a>  If you start from the main page, they cover x86-64 too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Sat Mar 14, 2009 3:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anes]]></name></author>
<updated>2009-03-14T15:49:38-07:00</updated>
<published>2009-03-14T15:49:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44264#p44264</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44264#p44264"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44264#p44264"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Can someone please explain to me what is meant by 'near' and 'far' when it comes down to assembler?<br /></div><br /><br />All i remember it had sense in 16 bit real mode since "near" ment it was in the same "segment" pointed by a segment register (DS.ES, etc ...).<br />"Far" ment that could be (you could make reference) to any memory location. <br />Don't know protected mode<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=72">Anes</a> — Sat Mar 14, 2009 3:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2009-03-14T11:29:17-07:00</updated>
<published>2009-03-14T11:29:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44259#p44259</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44259#p44259"/>
<title type="html"><![CDATA[Binary Translation to x86]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4951&amp;p=44259#p44259"><![CDATA[
Can someone please explain to me what is meant by 'near' and 'far' when it comes down to assembler?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Sat Mar 14, 2009 11:29 am</p><hr />
]]></content>
</entry>
</feed>