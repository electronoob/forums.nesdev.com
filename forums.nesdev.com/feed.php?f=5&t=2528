<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=2528" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-01-05T12:26:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=2528</id>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2007-01-05T12:26:55-07:00</updated>
<published>2007-01-05T12:26:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20953#p20953</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20953#p20953"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20953#p20953"><![CDATA[
I guess there's no way due to 2 aspects: the pitch change and the rate calculation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Fri Jan 05, 2007 12:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-01-05T11:45:35-07:00</updated>
<published>2007-01-05T11:45:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20952#p20952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20952#p20952"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20952#p20952"><![CDATA[
To change the playback rate in Allegro, use <a href="http://alleg.sourceforge.net/stabledocs/en/alleg026.html#voice_set_frequency" class="postlink">voice_set_frequency()</a>. This takes a voice number; use audioOut-&gt;voice. If you are overflowing your sample buffer, increase the rate; if Allegro gives you an empty buffer when you don't have enough data, reduce the rate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jan 05, 2007 11:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2007-01-05T04:26:34-07:00</updated>
<published>2007-01-05T04:26:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20946#p20946</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20946#p20946"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20946#p20946"><![CDATA[
Err... don't get me bad, but I'm trying like crazy. I understood the mentioned things, but Allegro is really annoying. It's been a long time trying to figure out the way to manage Allegro's sound output though... o.O<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Fri Jan 05, 2007 4:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-01-05T02:45:22-07:00</updated>
<published>2007-01-05T02:45:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20945#p20945</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20945#p20945"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20945#p20945"><![CDATA[
Someone just needs to write a code example of how to do this, perhaps generating a sine wave (which makes any doubled/lost samples very audible). It would answer all questions in this thread, and those of anyone else using it. That would also make it easy to adjust the number of samples generated per second. I'll see if allegro works on my machine...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jan 05, 2007 2:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-01-04T20:48:38-07:00</updated>
<published>2007-01-04T20:48:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20940#p20940</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20940#p20940"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20940#p20940"><![CDATA[
<div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><br />- Let's assume an audiostream with 735 samples long, and a sound cache 735*3 samples long. No matter how the audiostream is polled, sometimes the buffer (1 of 3) is full and the audiostream is still playing, meaning a <em>sound frameskip</em>. If such frameskip occurs, I *should* transfer this lost update *plus* the next one (735*2 samples, instead of regular 735), or else, the sound skipping becomes <strong>accumulating</strong>. <br /><br />- Do you see the problem now?<br /></div><br />If you get a sound frameskip, adjust the playback rate so that it does not happen again.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jan 04, 2007 8:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2007-01-04T19:47:05-07:00</updated>
<published>2007-01-04T19:47:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20937#p20937</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20937#p20937"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20937#p20937"><![CDATA[
Still with no success... <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /> <br />From the start: 44100/60 = 735 samples per sync. Both PPU and pAPU are always running together, meaning I'm unable to stop one of these units in prior to another. In other words, the audiostream / sound buffer error is quite obvious: <br /><br />- Let's assume an audiostream with 735 samples long, and a sound cache 735*3 samples long. No matter how the audiostream is polled, sometimes the buffer (1 of 3) is full and the audiostream is still playing, meaning a <em>sound frameskip</em>. If such frameskip occurs, I *should* transfer this lost update *plus* the next one (735*2 samples, instead of regular 735), or else, the sound skipping becomes <strong>accumulating</strong>. <br /><br />- Do you see the problem now?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Thu Jan 04, 2007 7:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-01-02T21:20:50-07:00</updated>
<published>2007-01-02T21:20:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20863#p20863</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20863#p20863"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20863#p20863"><![CDATA[
<div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><br />2. I'm using 2048 samples for the buffer (or 4096 bytes, due to 16-bit size of each sample). As far as I understand it, there's around 735 samples being generated for each 1/60th second. Is OK to keep filling the sound buffer with those 735 samples while the audiostream isn't ready?<br /></div><br />Make a ring buffer at least as big as your audio stream, and as you run the APU, write the ca. 735 sample blocks to that. Then copy the second buffer to the audio stream.<br /><br />If the audio stream needs filling up before the sample buffer fills up, then the virtual frame rate is set too low.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 02, 2007 9:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2007-01-02T13:49:27-07:00</updated>
<published>2007-01-02T13:49:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20852#p20852</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20852#p20852"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=20852#p20852"><![CDATA[
I have a few questions regarding the Allegro's audiostream updates:<br /><br />1. It's OK to poll the audiostream at every 1/60th second. When it returns NULL, fine... but what should I do when it returns non-NULL and the buffer isn't filled up yet?<br /><br />2. I'm using 2048 samples for the buffer (or 4096 bytes, due to 16-bit size of each sample). As far as I understand it, there's around 735 samples being generated for each 1/60th second. Is OK to keep filling the sound buffer with those 735 samples while the audiostream isn't ready? Plus, when ready, how many samples should I use: 735 or 735 x N, with N=number of frames to cache... ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Jan 02, 2007 1:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-11-12T19:51:57-07:00</updated>
<published>2006-11-12T19:51:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19392#p19392</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19392#p19392"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19392#p19392"><![CDATA[
<div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><br />I didn't got what you mean <em>in terms of Allegro</em>, because you're <strong>always</strong> sending the same amount of samples at every "requested" update.<br /></div><br />Yes, the "read" end of the ring buffer always grabs the same number of samples. But you can change the number of samples you put in per frame at the "write" end, or you can change the underlying voice's playback rate (which changes how often Allegro requests samples from the "read" end).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Nov 12, 2006 7:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2006-11-12T16:35:35-07:00</updated>
<published>2006-11-12T16:35:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19387#p19387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19387#p19387"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19387#p19387"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Sure, an <a href="http://en.wikipedia.org/wiki/Open-loop_controller" class="postlink">open loop</a> will produce drift due to the inherent variation in sound cards. But if your Allegro front end monitors the ring buffer fullness and slightly adjusts the playback rate based on the ratio between buffer writes (by the emulation engine) and buffer reads (by the Allegro front end), then what produces the "drift" you're talking about?<br /></div><br /><br />I didn't got what you mean <em>in terms of Allegro</em>, because you're <strong>always</strong> sending the same amount of samples at every "requested" update. No matter if it uses a ring or open buffer, it doesn't matter for audio stream updates... or am I wrong? Where? <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Sun Nov 12, 2006 4:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-11-12T15:44:42-07:00</updated>
<published>2006-11-12T15:44:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19384#p19384</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19384#p19384"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19384#p19384"><![CDATA[
Sure, an <a href="http://en.wikipedia.org/wiki/Open-loop_controller" class="postlink">open loop</a> will produce drift due to the inherent variation in sound cards. But if your Allegro front end monitors the ring buffer fullness and slightly adjusts the playback rate based on the ratio between buffer writes (by the emulation engine) and buffer reads (by the Allegro front end), then what produces the "drift" you're talking about?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Nov 12, 2006 3:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hyde]]></name></author>
<updated>2006-11-12T12:35:18-07:00</updated>
<published>2006-11-12T12:35:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19375#p19375</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19375#p19375"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19375#p19375"><![CDATA[
I also had numerous problems while working on the audio portion of my emulator using Allegro. At best, you will get great sound in sync with graphics for a couple of minutes. Since this is not what you are looking for, avoid the Allegro audio routines at all costs. Go with something like portaudio.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=22">Hyde</a> — Sun Nov 12, 2006 12:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2006-11-10T17:48:54-07:00</updated>
<published>2006-11-10T17:48:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19322#p19322</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19322#p19322"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19322#p19322"><![CDATA[
Well, if you have an optional thing for sound output which must be easy-to-use-as-Allegro-is... so, it's welcome. DirectX routines are quite complex, and even the 'most advanced' Windows emus have the sound latency problem, well... most of them.<br /><br />Since Allegro is a DLL library (no clue if makes sense this), so wouldn't the <strong>entire</strong> library being executed into a separated thread?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Fri Nov 10, 2006 5:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[randilyn]]></name></author>
<updated>2006-11-09T19:03:41-07:00</updated>
<published>2006-11-09T19:03:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19294#p19294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19294#p19294"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19294#p19294"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Blocking your main thread on the audio stream like that is a bad idea. Allegro provides non-blocking way to check for audio stream updates, yet you still block on it. The right way to do this, used by DUMB and LJVorbis libraries, is to use non-blocking checks. Do something like the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned short OUTSAMPLE;<br />#define samplesPerBuf 1024<br /><br />void pollAudioOutput&#40;&#41; &#123;<br />  OUTSAMPLE *outBuf = &#40;OUTSAMPLE *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />  if &#40;outBuf&#41; &#123;<br />    memcpy&#40;outBuf, buffer, sizeof&#40;OUTSAMPLE&#41; * samplesPerBuf&#41;;<br />    ringBufferTail += samplesPerBuf;<br />    free_audio_stream_buffer&#40;sound_stream&#41;;<br />  &#125;<br />&#125;<br /></div><br />Then call pollAudioOutput() once a frame after updating your ring buffer.<br /></div><br /><br /><div class="quotetitle">randilyn wrote:</div><div class="quotecontent"><br />This isn't too noticible if you do it right, and use a framebuffer.<br />...<br /><br />With buffer checks occuring every frame.<br /></div><br /><br />Indeed, tepples solution can work if you just want a quick fix, but it is by no means the "right" way to do it.<br /><br />get_audio_stream_buffer() is *designed* for hard polling, since it simply doesn't return a buffer is none is available.  This means that if you're not polling it constantly, you might miss the buffer, and end up with some skipping while the sound playback timer (inside of Allegro) waits for you to grab the buffer.  Like I said, this is okay, and not generally noticeable if you poll it often enough. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />That's why my solution uses threads, because in a thread you could poll it constantly. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />  (Though I really wonder now if Allegro 4.2 is "thread-safe" enough for this.)<br /><br />Also, there may still be emulation/output drift that needs to be accounted for, since you are no longer synchronizing them when using "no wait" code.  I'm not entirely sure. <img src="http://forums.nesdev.com/images/smilies/icon_mad.gif" alt=":x" title="Mad" /><br /><br />I would just use OpenAL in a dedicated thread myself.  I've come to hate Allegro's audio. &gt;_&lt;<br /><br />wark on. <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=379">randilyn</a> — Thu Nov 09, 2006 7:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-11-09T18:50:42-07:00</updated>
<published>2006-11-09T18:50:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19293#p19293</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19293#p19293"/>
<title type="html"><![CDATA[Allegro sound]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2528&amp;p=19293#p19293"><![CDATA[
<div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><br />The basic thing is...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">do &#123;<br />      sound_buffer = &#40;unsigned short *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />//      rest&#40;0&#41;;<br />   &#125; while&#40;!sound_buffer&#41;;<br />   memcpy&#40;sound_buffer, buffer, bytes_per_sample&#41;;<br />   free_audio_stream_buffer&#40;sound_stream&#41;;</div><br /></div><br />Blocking your main thread on the audio stream like that is a bad idea. Allegro provides non-blocking way to check for audio stream updates, yet you still block on it. The right way to do this, used by DUMB and LJVorbis libraries, is to use non-blocking checks. Do something like the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned short OUTSAMPLE;<br />#define samplesPerBuf 1024<br /><br />void pollAudioOutput&#40;&#41; &#123;<br />  OUTSAMPLE *outBuf = &#40;OUTSAMPLE *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />  if &#40;outBuf&#41; &#123;<br />    memcpy&#40;outBuf, buffer, sizeof&#40;OUTSAMPLE&#41; * samplesPerBuf&#41;;<br />    ringBufferTail += samplesPerBuf;<br />    free_audio_stream_buffer&#40;sound_stream&#41;;<br />  &#125;<br />&#125;<br /></div><br />Then call pollAudioOutput() once a frame after updating your ring buffer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />What happens? It always copies <strong>the same amount of bytes</strong>, as written in the Allegro docs, and the stream buffer size "must be" a power of two, like 2048 bytes.<br /></div><br />In Allegro 4.2.0, <a href="http://alleg.sourceforge.net/onlinedocs/en/alleg028.html" class="postlink">this "must" has been downgraded to "should"</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Here, once the buffer is full, this "infinity" loop is called to update the sound. That's what Allegro's docs teach you.<br /></div><br />You have a "producer" that makes 730 to 740 samples at a time. You have a "consumer" that wants 1,024 samples at a time. The canonical way to mate input and output block sizes that don't match is a "ring buffer".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />In other words, even if I specify a large buffer based on 'frames' (44100/60 = 735 samples per sync), there's no way to send less or more buffers AFAIK.<br /></div><br />You can send a buffer only when Allegro needs one and don't send a buffer otherwise.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The things you said about the timer looks correct, but two answers were given. Anyway, it would work for a program that LACKS sound. Plus, I already tried out to call <em>get_audio_stream_buffer</em> per frames, but it didn't work for the previous reasons... -_-;;;<br /></div><br />I didn't catch why they didn't work. Calling get_audio_stream_buffer() once a frame worked for me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Nov 09, 2006 6:50 pm</p><hr />
]]></content>
</entry>
</feed>