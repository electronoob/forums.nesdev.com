<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Got any tips for Early NES Emulator Development?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Got any tips for Early NES Emulator Development?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3964">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3964</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Fri Mar 21, 2008 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">void ADC&#40;unsigned char Value&#41;<br />&#123;<br />&nbsp; &nbsp;unsigned char Carry=CPU_P&amp;0x01;<br />&nbsp; &nbsp;// Check for Carry<br />&nbsp; &nbsp;if&#40; &#40;CPU_A + Value + Carry &#41; &gt; 0xFF&#41;&nbsp; &nbsp;// Check if Carry will Result<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU_SETC=1;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU_SETC=0;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;// Check for Zero<br />&nbsp; &nbsp;if&#40; &#40;CPU_A + Value + Carry&#41;==0 &#41;&nbsp; &nbsp;&nbsp; &nbsp;// Check if Zero will Result, Set Flag accordingly.<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;SetZero&#40;&#41;;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;ClearZero&#40;&#41;;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;// Check for Overflow<br />&nbsp; &nbsp;CPU_TEMP=CPU_A + Value + Carry;<br />&nbsp; &nbsp;CPU_SETV=0;<br />&nbsp; &nbsp;if&#40;!&#40;&#40;CPU_A ^ Value&#41;&amp;0x80&#41; &amp;&amp; !&#40;&#40;CPU_A ^ CPU_TEMP&#41;&amp;0x80&#41;&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU_SETV=1;<br />&nbsp; &nbsp;if&#40;CPU_SETV&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;SetOverflow&#40;&#41;;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;ClearOverflow&#40;&#41;;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;// Do ADC Operation<br />&nbsp; &nbsp;CPU_A = CPU_A + Value + Carry;<br /><br />&nbsp; &nbsp;if&#40;CPU_SETC==1&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;SetCarry&#40;&#41;;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;ClearCarry&#40;&#41;;<br />&nbsp; &nbsp;&#125;<br /><br />&#125;<br /><br />void SBC&#40;unsigned char Value&#41;<br />&#123;<br />&nbsp; &nbsp;ADC&#40;Value ^ 0xFF&#41;;<br />&#125;<br /></div></div><br /><br />A simply hideous amount of code if I may say, for something as simple as ADC. Here is WedNESday's code;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CPU.TMP2 = &#40;char&#41;CPU.A + &#40;char&#41;CPU.Databus + CPU.CF;<br />if&#40; CPU.TMP2 &lt; -128 || CPU.TMP2 &gt; 127 &#41;<br />&nbsp; &nbsp;CPU.OF = 0x40; else CPU.OF = 0x00;<br />CPU.NF = CPU.ZF = CPU.A = CPU.CF = CPU.A + CPU.Databus + CPU.CF;<br />CPU.CF &gt;&gt;= 8;</div>
<br />
<br />No memory addressing provided, and CPU.TMP2 holds the byte fetched. In my experience if's and else's are what slows down an emulator the most, especially in any pixel-rendering functions. And as for calling ADC(Value ^ 0xFF) for your SBC code, you should really __forceinline everything to make sure that it is as fast as possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Mar 21, 2008 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">you should really __forceinline everything to make sure that it is as fast as possible.</div>
<br />
<br />__forceinline is not a C++ keyword, but rather one of those "MSVS only" keywords that VC++ adds.  I would recommend against using any sort of compiler addon that isn't part of the standard (any function/keyword that is preceeded by underscores should throw a red flag -- avoid all of them).  "inline" should suffice... and is probably better than __forceinline anyway -- since inlining doesn't always produce faster code, and 'inline' will detect these instances whereas __forceinline will not.
<br />
<br />Preferably, I would even #define calling conventions elsewhere in the code and use the #defines rather than using the calling convention directly.  This way if you run into calling convention problems with other compilers or platforms you can easily change the #define and remove all related problems:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />// what I would recommend against<br />void inline BadExample&#40;&#41;<br />&#123;<br />&#125;<br /><br />// what I would recommend<br /><br />// in some header file<br />#define NES_INLINE&nbsp; inline<br /><br />// in source<br />void NES_INLINE GoodExample&#40;&#41;<br />&#123;<br />&#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Mar 21, 2008 3:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Fx3's ADC code:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CPUOP&#40;ADC0&#41;<br />&nbsp; &nbsp;offset = cpu-&gt;A + value;<br />&nbsp; &nbsp;if&#40;cpu-&gt;status &amp; C_BIT&#41;<br />&nbsp; &nbsp; &nbsp; offset++;<br />&nbsp; &nbsp;cpu-&gt;status &amp;= ~&#40;C_BIT | V_BIT&#41;;<br />&nbsp; &nbsp;if&#40;offset &amp; 0xFF00&#41;<br />&nbsp; &nbsp; &nbsp; cpu-&gt;status |= C_BIT;<br />&nbsp; &nbsp;if&#40;&#40;cpu-&gt;A ^ offset&#41; &amp; &#40;value ^ offset&#41; &amp; 0x80&#41;<br />&nbsp; &nbsp; &nbsp; cpu-&gt;status |= V_BIT;<br />&nbsp; &nbsp;cpu-&gt;A = &#40;unsigned char&#41;&#40;offset&#41;;<br />&nbsp; &nbsp;set_sz_flags&#40;cpu-&gt;A&#41;;<br />OPEND</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Mar 21, 2008 4:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes well this is the first emulator I've ever written. Thus I'm not concerned with code being huge or slow, only understandable and functioning. If I really wanted to make it all small and efficant that'd be somethign to worry about later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Mar 21, 2008 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Yes well this is the first emulator I've ever written. Thus I'm not concerned with code being huge or slow, only understandable and functioning. If I really wanted to make it all small and efficant that'd be somethign to worry about later.</div>
<br />
<br />Right, I agree. Anyway, I sense a grain of salt in your commentary... we're just showing examples for you, as advice/tips only, which <strong>can</strong> target some optimization and I bet you're not allowed to kick off. <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Mar 21, 2008 4:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's fully portable version written for clarity. All variables are of type int. Who says efficiency and clarity are always at odds?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">overflow = &#40;&#40;a ^ 0x80&#41; + &#40;operand ^ 0x80&#41; + carry - 0x80&#41; &amp; 0x100;<br />temp&nbsp; &nbsp; &nbsp;= a + operand + carry;<br />carry&nbsp; &nbsp; = temp &gt;&gt; 8;<br />a&nbsp; &nbsp; &nbsp; &nbsp; = temp &amp; 0xFF;<br />// update negative and zero flags based on a<br />// ...</div><br /><strong>EDIT:</strong> Actually, Wednesday's overflow checking is clearer. Untested:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">temp&nbsp; &nbsp; &nbsp;= &#40;int8_t&#41; a + &#40;int8_t&#41; operand + carry;<br />overflow = &#40;temp &lt; -128 || temp &gt; 127&#41;;<br />carry&nbsp; &nbsp; = temp &gt;&gt; 8 &amp; 1;<br />a&nbsp; &nbsp; &nbsp; &nbsp; = temp &amp; 0xFF;<br />// update negative and zero flags based on a<br />// ...</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Mar 21, 2008 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Yes well this is the first emulator I've ever written. Thus I'm not concerned with code being huge or slow, only understandable and functioning. If I really wanted to make it all small and efficant that'd be somethign to worry about later.</div><br /><br />Right, I agree. Anyway, I sense a grain of salt in your commentary... we're just showing examples for you, as advice/tips only, which <strong>can</strong> target some optimization and I bet you're not allowed to kick off. <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /></div>
<br />
<br />Not at all. I was mainly addressing WedNESday who was insulting my code. :p
<br />
<br />I do appreciate all the help and insight.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Mar 21, 2008 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm... It's <a href="http://en.wikipedia.org/wiki/Critic" class="postlink">criticism</a>, as far as I can tell you. ^_^;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Mar 21, 2008 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I suppose, I just took offensive to the word hidious considering this is a topic about n00b emulator tips. :p
<br />
<br />My emulator runs alot of games now, but I'm having issue with Sprite 0. I can't seem to get any luck so far with implementing an accurate emulation of it which is important for alot of games. Right now I just sort of fake it so it works decently enough. 
<br />
<br />I also went and added support for AxROM (Mapper 7) so I could try out BattleToads. The scroll was very much messed up. Part of it seems to have to do with updating scroll at Sprite 0 in the non-standard way. I tried added that in and it helped but it wasn't always right. I didn't put on it too much though since the Sprite 0 timing is bs anyway. 
<br />
<br />I'm not really sure what I want to do next. Ideally though it would be getting cycle accurate (atleast close to it) sprite 0 hit. Might require some more rendering adjustments and such. I had tried doing it one way that should have worked but for some reason didn't seem to help at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Mar 22, 2008 2:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent"><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Yes well this is the first emulator I've ever written. Thus I'm not concerned with code being huge or slow, only understandable and functioning. If I really wanted to make it all small and efficant that'd be somethign to worry about later.</div><br /><br />Right, I agree. Anyway, I sense a grain of salt in your commentary... we're just showing examples for you, as advice/tips only, which <strong>can</strong> target some optimization and I bet you're not allowed to kick off. <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /></div><br /><br />Not at all. I was mainly addressing WedNESday who was insulting my code. :p<br /><br />I do appreciate all the help and insight.</div>
<br />I wasn't being insulting, it was just a bit shocking to see so much code that's all. Btw Fx3's ADC code is just as big, but blargg's seems nice and small. And yes you're right, it's your first emulator so you don't have to worry to much about efficiency at this stage, just get the damn games to work, and worry about other things later. As for inline/__forceinline, since the opcodes are only called once in the emulator, __forceinline is the best option IMO.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat Mar 22, 2008 6:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- I like to discuss programming skills and optimizations. Mr.Wed, by considerating the number of ADC opcodes in a game, well... it's quite rare if you compare it with the LDA, as example. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> And I don't think my code is as big as the previous one, heh ^_^;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Mar 22, 2008 8:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- I like to discuss programming skills and optimizations. Mr.Wed, by considerating the number of ADC opcodes in a game, well... it's quite rare if you compare it with the LDA, as example. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> And I don't think my code is as big as the previous one, heh ^_^;;</div>
<br /> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Of course it's not as big. And I know that certain opcodes are called more times than others, but I have spent ages constantly refining each opcode to make it as fast as I can. Btw Disch, since the opcodes are called only once in the CPU code, you would want them to be inlined as they as they are only called once. You don't need to worry too much about the code getting too big etc. That's only if you are constantly calling the same function inline too many times. If you write an opcode and only call it once inside of the swith(WhichOpcode) bit, then the code would be exactly the same size. I must admit, I stole the concept of __forceinline rather the just inline from Nintendulator anyway  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Mar 22, 2008 11:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What does __forceinline do? It sounds to me like it replaces the function call with inline code? So it sounds to me like the compiler doesn't actually call your function but instead any part of code that uses it actually has it placed right in there? Let me know if my idea is close. :p 
<br />
<br />Anyway, curious what do you guys know about BattleToads? It seems to be one of the best games to test emulator accuracy and conviently uses one of the most simple memory mappers. 
<br />
<br />I've read you need pretty accurate Sprite 0# Hit Flag timing. And just timing in general. The game runs on my emulator, but the problem I'm having is scroll offset. The game appears to use the scrolling technique that Loopy's document is about. I "tried" to implement scrolling adjustments mid-frame for Battletoads. It was close but not correct. 
<br />
<br />I do seem to have the name table switching by writing to 2006 correct, atleast enough so that Super Mario's status bar doesn't flicker. But I'm not clear on how you change the scroll offset.
<br />
<br />I think was I did was I was taking the first write to 2006$, masking for the lower 2 bits. Then shifted those left bit 3 bits. I saved that number till the second write. Then I would combine those 2 bits, with the second write masking for the upper 3 bits, shifted right 5 bits. Then I would set ScrollY to that value * 8. 
<br />
<br />As I said it was close and in some places it was correct but not everywhere.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Mar 22, 2008 12:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">__forceinline is the best option IMO.</div><br /><br />Just to reiterate...<br /><br />__forceinline is not a standard C++ keyword.  I'd say it's never a good idea to use it simply because it may give you trouble with compilers that don't support it -- which will make portability or even public source release somewhat problematic.<br /><br />Plus inline (which <em>is</em> a standard keyword) does the same job.  The only difference is that __forceinline doesn't detect conditions where inlining <em>isn't favorable</em>.  You say it's favorable for CPU functions and I don't disagree -- but the truth is you shouldn't substitute your judgement for the compiler's.  Inline doesn't always mean faster... and in the offchance you happen to make a function inline where inlining reduces performance, the compiler will correct that (that's its job) -- whereas with __forceinline you end up screwing yourself.<br /><br />Any situation where it <em>is</em> favorable to have stuff inlined, inline works just as well as __forceinline.<br /><br />So yeah -- __forceinline should never be the way to go, IMO.<br /><br />But again -- this is another reason to #define calling conventions, since whoever compiles your source can change the define to inline rather than __forceinline if they choose -- rather than having to go and change every function.<br /><br />EDIT (MottZilla replied while I was typing)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What does __forceinline do? It sounds to me like it replaces the function call with inline code? So it sounds to me like the compiler doesn't actually call your function but instead any part of code that uses it actually has it placed right in there? Let me know if my idea is close. :p</div><br /><br />Yeah sounds like you have it right.  Function inlining makes it so that when you call a function, it doesn't actually jump to that function -- rather, the function gets sort of copy/pasted into the area that calls it.<br /><br />This is good because there's a little overhead for function calling (variables pushed on stack and whatnot) which is avoided if the function is inlined.<br /><br />But it can also be bad because it can greatly bloat code size, which may cause the program to run slower.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway, curious what do you guys know about BattleToads?</div><br /><br />It's very picky about timing.  If your NMI isn't timed just right, or if your sprite 0 hit is little off, the game can very easily deadlock on level 2.  It's also picky about when in the scanline you reset the horizontal scroll and increment the Y scroll, etc.  Doing these at the wrong times can cause it to deadlock.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I do seem to have the name table switching by writing to 2006 correct, atleast enough so that Super Mario's status bar doesn't flicker. But I'm not clear on how you change the scroll offset.<br /></div>
<br />
<br />How it works is the PPU address set by $2006 is the same address that the PPU uses to fetch tiles to render.  During rendering, every time the PPU fetches a tile it increments the address so that the next tile to be displayed is pointed to.  I'm not really sure it helps to think of it in terms of scroll offset.
<br />
<br />For example... if the game sets the PPU address to $1234 by writing to $2006, this means that the next tile fetched comes from $2234 ($0234 + $2000) and with a fine Y scroll of 1 ($1000 &gt;&gt; 12).  In effect this translates to:
<br />
<br />Y scroll:  $89
<br />X scroll:  $A0 (to $A7... depending on the fine X scroll set by $2005)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Mar 22, 2008 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">I have spent ages constantly refining each opcode to make it as fast as I can.</div><br />Only a handful of opcodes are used regularly, while some are virtually never used. Optimization effort is best spent on the former.<br /><br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">Btw Disch, since the opcodes are called only once in the CPU code, you would want them to be inlined as they as they are only called once. You don't need to worry too much about the code getting too big etc. That's only if you are constantly calling the same function inline too many times. If you write an opcode and only call it once inside of the swith(WhichOpcode) bit, then the code would be exactly the same size.</div><br />The inline version would probably even be smaller, since the outline one would have function call overhead. But, you sometimes want a once-called function outlined, if it's used rarely. If it were inline, it'd use more of the cache since its beginning and end would be kept in the cache by the often-used code around it, and branches over it would have to hit a different cache line. It might also stress the optimizer out enough that it can't optimize other parts of the function as well. As Disch says below, by using regular inline, you allow the compiler to detect things like this.<br /><br /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">[...] the truth is you shouldn't substitute your judgement for the compiler's. Inline doesn't always mean faster... and in the offchance you happen to make a function inline where inlining reduces performance, the compiler will correct that (that's its job) -- whereas with __forceinline you end up screwing yourself.</div>
<br />I'd normally say that the programmer sometimes knows best, but in this case, you have a very good point. With profiler-guided optimization (often called PGO), it really can decide best as to what should be inlined.
<br />
<br />But like I always say, with optimization, the <em>only</em> authority is how something affects the speed of the actual program. If something really does speed up your program, then it's good. WedNESday, do you have any numbers for speedups you've gotten with your techniques?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>