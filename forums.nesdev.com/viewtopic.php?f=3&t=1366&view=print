<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Where to start DMA</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Where to start DMA</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1366">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1366</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Apr 10, 2006 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Where to start DMA</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Logic tells me that $4014 would start copying data from the given address and putting it in OAM, starting at the sprite address specified by $2003.  For example:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$80<br />STA $2003<br />LDA #$02<br />STA $4014<br /></div><br /><br />That would copy $0200-&gt;OAM[$80], $0201-&gt;OAM[$81], etc<br /><br />However various games give me trouble when emulating like this -- and I find I have to start DMA at OAM[0], REGARDLESS of the sprite address.  In my most recent example....  Akira (J) does the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C130:&nbsp; A2 00&nbsp; &nbsp; &nbsp; LDX&nbsp; #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 30 20 10&nbsp; &#91;..I.C&#93;&nbsp; FD<br />C132:&nbsp; 8E 03 20&nbsp; &nbsp;STX&nbsp; $2003&nbsp; &nbsp; &#91;2003=BA&#93;&nbsp; 30 00 10&nbsp; &#91;..IZC&#93;&nbsp; FD<br />C135:&nbsp; BD DA C1&nbsp; &nbsp;LDA&nbsp; $C1DA,X&nbsp; &#91;C1DA=7F&#93;&nbsp; 30 00 10&nbsp; &#91;..IZC&#93;&nbsp; FD<br />C138:&nbsp; 8D 04 20&nbsp; &nbsp;STA&nbsp; $2004&nbsp; &nbsp; &#91;2004=BA&#93;&nbsp; 7F 00 10&nbsp; &#91;..I.C&#93;&nbsp; FD<br />C13B:&nbsp; E8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7F 00 10&nbsp; &#91;..I.C&#93;&nbsp; FD<br />C13C:&nbsp; E0 04&nbsp; &nbsp; &nbsp; CPX&nbsp; #$04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7F 01 10&nbsp; &#91;..I.C&#93;&nbsp; FD<br />C13E:&nbsp; 90 F5&nbsp; &nbsp; &nbsp; BCC&nbsp; $F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#91;C135&#93;&nbsp; 7F 01 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C135:&nbsp; BD DA C1&nbsp; &nbsp;LDA&nbsp; $C1DA,X&nbsp; &#91;C1DB=81&#93;&nbsp; 7F 01 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C138:&nbsp; 8D 04 20&nbsp; &nbsp;STA&nbsp; $2004&nbsp; &nbsp; &#91;2004=BA&#93;&nbsp; 81 01 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C13B:&nbsp; E8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81 01 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C13C:&nbsp; E0 04&nbsp; &nbsp; &nbsp; CPX&nbsp; #$04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81 02 10&nbsp; &#91;..I..&#93;&nbsp; FD<br />C13E:&nbsp; 90 F5&nbsp; &nbsp; &nbsp; BCC&nbsp; $F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#91;C135&#93;&nbsp; 81 02 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C135:&nbsp; BD DA C1&nbsp; &nbsp;LDA&nbsp; $C1DA,X&nbsp; &#91;C1DC=21&#93;&nbsp; 81 02 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C138:&nbsp; 8D 04 20&nbsp; &nbsp;STA&nbsp; $2004&nbsp; &nbsp; &#91;2004=BA&#93;&nbsp; 21 02 10&nbsp; &#91;..I..&#93;&nbsp; FD<br />C13B:&nbsp; E8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 21 02 10&nbsp; &#91;..I..&#93;&nbsp; FD<br />C13C:&nbsp; E0 04&nbsp; &nbsp; &nbsp; CPX&nbsp; #$04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 21 03 10&nbsp; &#91;..I..&#93;&nbsp; FD<br />C13E:&nbsp; 90 F5&nbsp; &nbsp; &nbsp; BCC&nbsp; $F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#91;C135&#93;&nbsp; 21 03 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C135:&nbsp; BD DA C1&nbsp; &nbsp;LDA&nbsp; $C1DA,X&nbsp; &#91;C1DD=F0&#93;&nbsp; 21 03 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br />C138:&nbsp; 8D 04 20&nbsp; &nbsp;STA&nbsp; $2004&nbsp; &nbsp; &#91;2004=BA&#93;&nbsp; F0 03 10&nbsp; &#91;N.I..&#93;&nbsp; FD<br /></div>
<br />
<br />After that code, the game writes to $4014 some time later -- however between the above code and the DMA, there is no further writes to $2003 or $2004.  That above code leaves the sprite address at $04, so my emu currently is copying sprite data starting at OAM[4] (making sprite 0 use the last 4 bytes copied instead of the first 4).
<br />
<br />Of course... this is causing sprite 0 to never be rendered, and the game falls into an infinite wait-for-sprite-0-hit loop afterwards.
<br />
<br />Any clarification on this?  Does the DMA write $00 to $2003 before copying bytes (perhaps that's why it takes 513 cycles instead of 512)?  Or does the DMA just ignore the sprite address completely (seems less likely)?  Or is there some other reason behind this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 10, 2006 9:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How many CPU cycles elapse between the last write to $2003/$2004 and the writes to $4014?
<br />Perhaps the OAM destination address, like OAM itself, is DRAM that leaks down to $00.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Apr 10, 2006 10:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Between the last $2004 write and the next $4014 write, it's about 5 scanlines.
<br />
<br />There are 5 $4014 writes total after the $2004 write (one every frame)... then the game gets stuck.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 10, 2006 10:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My <a href="http://www.slack.net/~ant/nes-tests/blargg_ppu_tests.zip" class="postlink">misc PPU test ROMs</a> one tests sprite DMA and shows that the value in $2003 is used, and left intact after DMA (since it copies 256 bytes). In my emulator I clear $2003 at the beginning of VBL and am pretty sure I found this to be the case on the NES. Where in the frame does this trace occur?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Apr 10, 2006 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The $2003 write occurs around cycle 279 of scanline 234 (where 0-239 are rendered scanline)
<br />
<br />The PPU is off at the time the above code is run.
<br />
<br />In game -- the hang happens after you press Start at the title screen (Start/Continue)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 10, 2006 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried Akira (J) (after quickly implementing its mapper) and it hangs when I don't have my PPU clear $2003 at the beginning of VBL. Based on the timing you stated, 5 scanlines would put the $4014 write just after VBL where $2003 is cleared. What am I missing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Apr 10, 2006 12:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is it possible that screen rendering messes with $2003?  Perhaps the PPU changes it as it fetches sprite data from OAM for rendering, and by the end of the frame it's found its way back to $00?
<br />
<br />&lt;/wild guess&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 10, 2006 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it possible that screen rendering messes with $2003? Perhaps the PPU changes it as it fetches sprite data from OAM for rendering, and by the end of the frame it's found its way back to $00?</div>
<br />
<br />Looks to be the case. PPU rendering disabled for several frames, $2003 unchanged. Enabling rendering at VBL+29544 (scanline 259, 316 PPU clocks) then disabling causes sprite address to become zero. Enabling rendering one CPU clock later leaves sprite address unaffected. Also enabling then disabling before the end of the frame leaves various values in the sprite address (not shown).
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda&nbsp; #0<br />sta&nbsp; $2001<br /><br />lda&nbsp; #$EA<br />sta&nbsp; $2003<br />jsr&nbsp; sync_ppu_20&nbsp; &nbsp; ; after return, time = VBL-20<br />ldy&nbsp; #140&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 29559 delay<br />lda&nbsp; #41&nbsp; &nbsp; &nbsp; &nbsp;<br />jsr&nbsp; delay_ya2<br />lda&nbsp; #$18<br />sta&nbsp; $2001&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; writes at VBL+29544<br />lda&nbsp; #0<br />sta&nbsp; $2001<br />ldy&nbsp; #57&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 30000 delay<br />lda&nbsp; #104&nbsp; &nbsp; &nbsp; <br />jsr&nbsp; delay_ya1<br />jsr&nbsp; determine_spr_addr<br />jsr&nbsp; print_y&nbsp; &nbsp; &nbsp; &nbsp; ; prints $00<br /><br />lda&nbsp; #$EA<br />sta&nbsp; $2003<br />jsr&nbsp; sync_ppu_20&nbsp; &nbsp; ; after return, time = VBL-20<br />ldy&nbsp; #140&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 29560 delay<br />lda&nbsp; #41&nbsp; &nbsp; &nbsp; &nbsp;<br />jsr&nbsp; delay_ya3<br />lda&nbsp; #$18<br />sta&nbsp; $2001&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; writes at VBL+29545<br />lda&nbsp; #0<br />sta&nbsp; $2001<br />ldy&nbsp; #57&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 30000 delay<br />lda&nbsp; #104&nbsp; &nbsp; &nbsp; <br />jsr&nbsp; delay_ya1<br />jsr&nbsp; determine_spr_addr<br />jsr&nbsp; print_y&nbsp; &nbsp; &nbsp; &nbsp; ; prints $34<br /><br />jmp&nbsp; forever<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Apr 10, 2006 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Enabling rendering at VBL+29544 (scanline 259, 316 PPU clocks) then disabling causes sprite address to become zero. Enabling rendering one CPU clock later leaves sprite address unaffected. </div><br /><br />That kind of makes sense when you think about it.  For the PPU to check in-range values for sprites, it needs cycles from pretty much the whole scanline.  If you flip the PPU on mid-scanline, it might already be past the time it would need to start in-range checks, so they might not be performed until the next scanline.<br /><br />Since the end of scanline 259 is near the start of the last rendered scanline -- I guess enabling sprites past that point makes it impossible to do sprite evaluations on the next line<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also enabling then disabling before the end of the frame leaves various values in the sprite address (not shown).</div>
<br />
<br />I would assume these values reflect the OAM fetches made during sprite evaluations.  Kind of like how reading $2004 during rendering exposes what OAM byte the PPU is using -- turning the PPU off during rendering exposes the OAM address the PPU was using.
<br />
<br />Ah well -- more assumptions and guessing on my part.  Thanks for shedding some light on this mystery blargg.  Does this mean we'll be fortunate enough to get a new batch of test ROMs soon?  ;D

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Mon Apr 10, 2006 3:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />According to the nesdev wiki:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Cycles 0-63: Secondary OAM &#40;32-byte buffer for current sprites on scanline&#41; is initialized to $FF - attempting to read $2004 will return $FF</div><br /><br />And...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">On even cycles, data is read from &#40;primary&#41; OAM <br />On odd cycles, data is written to secondary OAM &#40;unless writes are inhibited, in which case it will read the value in secondary OAM instead&#41;</div>
<br />
<br />Perhaps $2003 is used as an index pointer into both primary and secondary OAM by the PPU's internal logic? This would explain why the PPU needs two cycles to copy a single byte from primary to secondary OAM. It would also mean that $2003 would be reset to zero not only at the beginning of the screen, but at the beginning of each active scanline (so that secondary OAM, starting at index $00, could be reset). This could be checked by disabling rendering at carefully timed intervals within a scanline, and then determining whether $2003 points to the location that would be predicted by this hypothesis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Mon Apr 10, 2006 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alternatively, it's possible that $2003 is only used for reads from the primary OAM. After all, during evaluation, the first byte read from the main OAM is OAM[n][0], which is the first byte of OAM (index $00). Obviously, empirical testing on a real NES will be needed in order to determine what exactly the PPU is doing, but I think it's highly likely given the design philosophy of the PPU that $2003 serves a dual use as both a user register and an internal register during rendering (just as $2004 and the PPU VRAM address do).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Apr 10, 2006 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does this mean we'll be fortunate enough to get a new batch of test ROMs soon?</div>
<br />
<br />I (currently) care little about the details of mid-scanline PPU operation. There are too many details that have little practical use. If it's something that has a significant effect on many games, like clearing $2003 (near) the end of the frame, I'm interested in the general result, but not the details.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Apr 10, 2006 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Fair enough.
<br />
<br />Clearing $2003 at the end of the frame when the PPU is on will suffice for Akira and the games like it (iirc, some Donkey Kong Country pirate had a similar problem, and some other pirate RPG game.... Phantasy Star I think?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Wed Apr 12, 2006 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, are we sure that $2003 is cleared at the *end* of the frame, rather than the beginning? Also, do we know if $2003 is cleared *only* at the end of the frame, or is it cleared at the end of each scanline rendered?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Apr 12, 2006 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Josh wrote:</div><div class="quotecontent">So, are we sure that $2003 is cleared at the *end* of the frame, rather than the beginning?</div><br /><br />Its value likely fluxuates as the screen is rendering.  As blargg has mentioned, turning the PPU off mid-frame leaves $2003 with different values (presumably with what the PPU set it to last)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, do we know if $2003 is cleared *only* at the end of the frame, or is it cleared at the end of each scanline rendered?</div>
<br />
<br />Probably every scanline.  Most likely it repeats a similar pattern every scanline as it does sprite fetches (I'd even assume that $2003 reflects the address of the OAM byte the PPU is fetching at any given cycle on the scanline).
<br />
<br />
<br />Since $2003 cannot be written to or utilized by the CPU during rendering... how it changes mid-frame doesn't really impact emulation at all.  Therefore from an emulator standpoint -- the only thing that really matters is what $2003 is at the end of the frame... and when the PPU is turned off mid-frame.
<br />
<br />We already know the former is 00... and an educated guess could be made on the latter using the known OAM fetches during the scanlines.  But as of yet the latter is unknown.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>