<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6985" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-10-04T12:01:02-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6985</id>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-10-04T12:01:02-07:00</updated>
<published>2010-10-04T12:01:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=68109#p68109</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=68109#p68109"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=68109#p68109"><![CDATA[
I've just come up with an idea of how to store enemies for a level!<br />This is basically designed for my game, but if it works for you too, great.<br />I might be using the terms Objects, Enemies, and Monsters interchangeably, you get the idea.<br /><br />Divide the level into 8x8 square sectors.  I'm using a 16x16 map of 8x8 sectors, so there are up to 256 sectors.  No, these are not like Doom's sectors, it's just a name I'm making up for the 8x8 tile areas.  And there will also be up to 256 different objects.<br />Have a sorted list at the beginning of all sectors which have objects.  So sector #0 might have objects, or sector #26 may have objects...<br />Then have a corresponding list of the first object # for that sector.  So sector #0 would start at object #0, or sector #26 may start at object #3, etc...  Also have one more byte indicating the last object number.<br /><br />Then have an object coordinates table.  3 bits for X position within that sector, 3 bits for y position within that sector, leaving 2 bits to select the color of the object.  Then have another table to tell what kind of object it is, one byte should be enough.<br /><br />So that's 4 arrays:<br />* Sorted list of sector numbers for the objects<br />* List of each first object # corresponding to the sector number list  (happens to be sorted as well)<br />* Object coordinates within a sector and color<br />* Object type<br /><br />Now for the other part, activating and deactivating the enemies...<br />We have an array of 256 bits to indicate that scrolling should not spawn a monster.  The bits are set whenever a monster is created, and cleared whenever a monster leaves the area.  When you kill a monster, the bit is not cleared, so that enemy doesn't come back.<br />Whenever you expose a new sector while scrolling, create all objects at that sector.  So you create a row of up to 3 sectors worth while scrolling vertically, and a column of up to 3 sectors worth when scrolling horizontally.  You can use binary search to find the sector, then look up its first enemy number.<br />When an object is more than 64 pixels off the screen, destroy it and clear the bit.  But it might still be offscreen... Oh well, then move it back to its starting location as long as the starting location is still offscreen but within the exposed area.<br /><br />This also makes all objects in the same sector "buddies" which will be created at the same time so the player can't take them out one at a time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Oct 04, 2010 12:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-30T14:37:07-07:00</updated>
<published>2010-09-30T14:37:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67990#p67990</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67990#p67990"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67990#p67990"><![CDATA[
We obviously aren't understanding each other. Let's just leave this sprite business for another occasion, shall we?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 30, 2010 2:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-09-30T14:28:15-07:00</updated>
<published>2010-09-30T14:28:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67989#p67989</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67989#p67989"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67989#p67989"><![CDATA[
Well I have to read sprite data from ROM before mazig it into the OAM page (with modified flags and coordinates). You can't maze sprites form no data as you seem to imply... exept if all enemies have their OWN hardwired independant sprite mazing routine but not only it'd be very complicated to code and end up a huge waste of ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Sep 30, 2010 2:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-30T12:01:07-07:00</updated>
<published>2010-09-30T12:01:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67983#p67983</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67983#p67983"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67983#p67983"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I recall correctly you first write all the data to shuffle it later, meaning that you are making a lot of accesses to that memory (write, read, then write again).<br /></div><br />Huh ? I don't do that. (...) I first sort the sprites so they are drawn in the desired order (top-down graphics) (...) Then it just mazes sprites (...) For each hardware sprite, it adds one constants to the X/Y coordinates, check if it's on screen, etc...</div><br />Well, maybe I'm not fully understanding your method, but when you say that you "first sort the sprites" I understand that they are being written down once, and when you say that "for each hardware sprite, it adds..." I understand that you are reading the data, modifying it and writing down again...<br /><br />I understand that your game has a top-down view that requires closer objects to be in front of distant ones, and this complicates the sprite cycling process, but I'm sure there is a "good enough" method that requires writing the data down only once.<br /><br />You see, in my opinion there is no possible way flickering will ever look good. If it's flickering, the scene is already "ruined" in a way, so I think that any effort to make it look better is futile, which means that an overly sophisticated sprite cycling method is unnecessary. As long as the play can tell where the objects are you should be OK.<br /><br />I'm not telling you to change your game or anything, each programmer uses what he thinks is best for his games, I'm just saying this because you often blame the "sprite mazing" for huge CPU usage, while this isn't necessarily the general case, it's just your particular case.<br /><br />This sprite cycling thing is pretty off-topic though, so we'd better drop it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 30, 2010 12:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-09-30T08:47:52-07:00</updated>
<published>2010-09-30T08:47:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67977#p67977</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67977#p67977"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67977#p67977"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If I recall correctly you first write all the data to shuffle it later, meaning that you are making a lot of accesses to that memory (write, read, then write again).<br /></div><br />Huh ? I don't do that. What I do for my "current" game (that I haven't worked on at all since about than 6 months) is that I first sort the sprites so they are drawn in the desired order (top-down graphics) which is an unnecessary step for side view games. Then it just mazes sprites, and I made sure the method is as quick as possible. For each hardware sprite, it adds one constants to the X/Y coordinates, check if it's on screen, etc... I made sure it's fast, and use some self-modifying code to do the cycling without loosing much time. Yet it still take some time. I'm not saying its terribly slow, I can have a large amount of enemies (about 6/7) before the game lags, something that not many NES games I know can do (and those who does are space shooters).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Wasting computational resources on things that are too far to be noticed by the player is not professional at all. It's quick and straightforward and will work well on a handful of occasions, but will introduce several limitations to your program because you are wasting resources that could be better spent elsewhere.<br /></div><br />This is right - if it works for you by all means go for it ! The longer time spent to implement correctly enemies that goes far to the camera is a trade-off to have an engine supporting very large areas without re-loading anything. I guess it all depends on the game you're willing to make. I was just pointing out it wasn't necessarly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Sep 30, 2010 8:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[strat]]></name></author>
<updated>2010-09-29T23:01:02-07:00</updated>
<published>2010-09-29T23:01:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67970#p67970</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67970#p67970"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67970#p67970"><![CDATA[
My game uses two 6-bit linear-feed back shift registers, one seeds the other.  That places all the sprites into random OAM slots with all except sprite 0 being used.  I haven't torture tested it yet and hope that when there's overflow it won't just repeatedly put the same sprites in the lower slots.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3506">strat</a> — Wed Sep 29, 2010 11:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-29T16:47:05-07:00</updated>
<published>2010-09-29T16:47:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67964#p67964</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67964#p67964"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67964#p67964"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />If you have levels this big without any kind of separation, you're going to run out of memory anyway as the NES is only 2k and cannot load so many enemies or pointers to map data at a time (assuming no SRAM or wathever).<br /></div><br />My game has no SRAM and can handle levels up to 32768x16384 pixels, with up to 512 objects. That doesn't mean it needs any more RAM than games with smaller levels. The whole level map is in ROM, as are the object definitions.<br /><br />Wasting computational resources on things that are too far to be noticed by the player is not professional at all. It's quick and straightforward and will work well on a handful of occasions, but will introduce several limitations to your program because you are wasting resources that could be better spent elsewhere.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Mazing the sprites in OAM is what really draw some significant CPU time.<br /></div><br />That's because your method of "mazing" the OAM is slow. If I recall correctly you first write all the data to shuffle it later, meaning that you are making a lot of accesses to that memory (write, read, then write again). There are sprite cycling methods that require a single write to RAM (no need to post-shuffle the sprites) which are probably much quicker than what you are using.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Sep 29, 2010 4:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-09-29T16:44:59-07:00</updated>
<published>2010-09-29T16:44:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67963#p67963</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67963#p67963"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67963#p67963"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I know, that was my first suggestion. Did you read my first post? Are my English writing skills that bad?<br /></div><br />No, my skills are that bad. I should have just said "QFT".<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />NES CPU is 1.789 Mhz, maybe it can be compared somewhat to the C64, which has a lot of impressive stuff done on it, but it has a 6502 running at 1Mhz.<br /></div><br />And a lot more bandwidth from the CPU to the VRAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Sep 29, 2010 4:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-09-29T16:10:54-07:00</updated>
<published>2010-09-29T16:10:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67959#p67959</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67959#p67959"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67959#p67959"><![CDATA[
<div class="quotetitle">cartlemmy wrote:</div><div class="quotecontent"><br /><div class="quotetitle">p1xl wrote:</div><div class="quotecontent">But (in my naivety) sometimes simplicity is a fair trade for extra CPU.  G<br /></div><br /><br />I could be wrong (I have little to no experience programming the NES), but from what I've read you pretty much should never do anything that uses extra CPU on the NES if there is an alternative; The NES is extremely limited on CPU resources. Am I correct in saying that?</div><br /><br />Yeah, but it's not too bad.  OAM-cycling ('mazing', as Bregalad had said) is one thing that is pretty intensive.  That means shifting around 256 bytes (for all 64 sprites) so they won't vanish when &gt;8 of them are on a line.  Things like hit detection can also suck up some CPU time, so that's a good place to optimize, but you may find that there's plenty of time leftover.<br /><br />NES CPU is 1.789 Mhz, maybe it can be compared somewhat to the C64, which has a lot of impressive stuff done on it, but it has a 6502 running at 1Mhz.  Atari 2600 is 1Mhz also, but it's kept very busy handling the display, while maybe all the game logic runs during vblank.<br /><br />NES CPU speed can visualized as scanlines, literally also, using the PPU 'emphasis' bits in monochrome mode.  Average instruction length is (just a wild guess) 3.5 cycles, and with NTSC there's 262 scanlines (including vblank) and each scanline takes 113.666 CPU cycles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Wed Sep 29, 2010 4:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-09-29T13:59:07-07:00</updated>
<published>2010-09-29T13:59:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67955#p67955</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67955#p67955"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67955#p67955"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You do realize that depending on the size of the level you could have, I don't know, say, up to 70 enemies? Definitely way too much to process (CPU bottleneck) and to maintain states of (RAM bottleneck). Your idea would only work if the levels were really small and had only 20 or so enemies.<br /></div><br />If you have levels this big without any kind of separation, you're going to run out of memory anyway as the NES is only 2k and cannot load so many enemies or pointers to map data at a time (assuming no SRAM or wathever).<br /><br />But even if about 20 enemies are loaded at a time, the execution of all off-screen enemies might end up so fast it wouldn't be a bother. Even if it is too slow, just implement a "if far to the camera then don't move nor do any kind of collision detect" thing. When logging code from my game I figured that most of the time I had time to compute player and even a few enemies before VBlank even finishes ! Mazing the sprites in OAM is what really draw some significant CPU time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Sep 29, 2010 1:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-29T13:56:20-07:00</updated>
<published>2010-09-29T13:56:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67953#p67953</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67953#p67953"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67953#p67953"><![CDATA[
<div class="quotetitle">p1xl wrote:</div><div class="quotecontent"><br />Type is stored in the state, as is animation frames. Fractional coors could be stored as fixed point in the x,y words.  Speed is built into the state as well.  You're pretty much substituting rom space for the extra ram by hard coding constants.  Hit count would probably need another byte or nybble.<br /></div><br />I guess this could work for a very simple game, where levels have few enemies of few different types that do few different things. Maybe something like SMB?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Sep 29, 2010 1:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cartlemmy]]></name></author>
<updated>2010-09-29T13:54:58-07:00</updated>
<published>2010-09-29T13:54:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67952#p67952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67952#p67952"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67952#p67952"><![CDATA[
<div class="quotetitle">p1xl wrote:</div><div class="quotecontent"><br />But (in my naivety) sometimes simplicity is a fair trade for extra CPU.  G<br /></div><br /><br />I could be wrong (I have little to no experience programming the NES), but from what I've read you pretty much should never do anything that uses extra CPU on the NES if there is an alternative; The NES is extremely limited on CPU resources. Am I correct in saying that?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4574">cartlemmy</a> — Wed Sep 29, 2010 1:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[p1xl]]></name></author>
<updated>2010-09-29T13:16:54-07:00</updated>
<published>2010-09-29T13:16:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67949#p67949</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67949#p67949"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67949#p67949"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I think 6 bytes in not enough for an active object/enemy. Where will you store his type? Health/hit count? Animation frame? Fractional coordinate? Speed?<br /></div><br /><br />Type is stored in the state, as is animation frames. Fractional coors could be stored as fixed point in the x,y words.  Speed is built into the state as well.  You're pretty much substituting rom space for the extra ram by hard coding constants.  Hit count would probably need another byte or nybble.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I honestly don't think that iterating over all the objects in the level every frame is practical at all, even if all you do is check how far from the camera they are. You'd have to subtract the camera's coordinates from the object's coordinates, compare the results against a threshold to separate the close objects from the distant ones, and then you still have to run the AI for the close ones. That looks like a lot of wasted CPU if you have 50+ enemies in the level.<br /></div><br /><br />Now this is where I don't have experience.  You're probably correct.  But (in my naivety) sometimes simplicity is a fair trade for extra CPU.  Good thoughts tho.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4379">p1xl</a> — Wed Sep 29, 2010 1:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-29T12:18:21-07:00</updated>
<published>2010-09-29T12:18:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67947#p67947</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67947#p67947"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67947#p67947"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I honestly don't think that iterating over all the objects in the level every frame is practical at all, even if all you do is check how far from the camera they are.<br /></div><br />You wouldn't have to if they're sorted by the primary scroll direction. Then you'd only have to iterate when your sliding window moves, and only over the areas that have been added to or removed from the sliding window.</div><br />I know, that was my first suggestion. Did you read my first post? Are my English writing skills that bad?<br /><br />What you have quoted there is a reply to p1xl's suggestion, which involves no sliding window.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Sep 29, 2010 12:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-29T12:14:10-07:00</updated>
<published>2010-09-29T12:14:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67946#p67946</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67946#p67946"/>
<title type="html"><![CDATA[Spawning and deactiviting enemies as you scroll?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6985&amp;p=67946#p67946"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />And if you want, keep a bitmap of which enemy indices have been destroyed, and check that before spawning. For 256 enemies, this takes 32 bytes.<br /></div><br />If you do that, you don't have to do this:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />When you spawn an enemy, first check that the enemy's index in the array doesn't belong to any active enemy; if so, fail. This check shouldn't take more than 12 cycles per element in the array.<br /></div><br />I'd rather not spend 12 * (active objects) cycles every time an object is loaded, since changing the bitmap to pretend it was destroyed would be much faster.<br /><br />You could conceptually see the bitmap as load/don't load instead of dead/alive. The object having been destroyed is a reason to not load it, but so is the fact that it is already loaded.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If an enemy falls out of a sliding window surrounding the camera, remove the enemy from the table so that it can respawn when the player returns to its spawn point.<br /></div><br />Both the enemy and its spawn point must be outside of the window for it to be unloaded. If you check only its current position, his spawn point might still be inside the window and the enemy will appear to have vanished if you decide to chase it after it went off screen. If you check only the spawn point, the enemy might disappear while still on screen.<br /><br />Anyway, I said all of this in my first reply to this thread. Maybe I wasn't clear enough.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Sep 29, 2010 12:14 pm</p><hr />
]]></content>
</entry>
</feed>