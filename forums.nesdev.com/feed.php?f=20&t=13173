<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=20&amp;t=13173" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-08-25T19:28:48-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=20&amp;t=13173</id>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2015-08-25T19:28:48-07:00</updated>
<published>2015-08-25T19:28:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154058#p154058</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154058#p154058"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154058#p154058"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />For chr-ram parallax scrolling, vertical positioning is free because you just change which byte offset you copy from.<br /></div><br />This is what I thought at first, but then I remembered that the DMA addresses (both source and destination) have to be aligned to 16 bytes (the size of a tile). So the vertical granurality is as bad as the horizontal one (i.e. steps of 8 pixels).<br /><br />Still, worst case would be 64 different copies, i.e. 64KB. Given the ROM size being mentioned before, that doesn't sound as bad as it may seem at first.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Tue Aug 25, 2015 7:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-08-25T18:22:03-07:00</updated>
<published>2015-08-25T18:22:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154050#p154050</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154050#p154050"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154050#p154050"><![CDATA[
Try this: Store half the pattern offset by 4 pixels (or by 2 in the compromise version). Then the number of shift operations is constant no matter what the offset is: 0+4, 1+3, or 2+2.<br /><br />I'm about to split the discussion of Toki Tori's scrolling.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Aug 25, 2015 6:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2015-08-25T17:10:14-07:00</updated>
<published>2015-08-25T17:10:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154046#p154046</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154046#p154046"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154046#p154046"><![CDATA[
For chr-ram parallax scrolling, vertical positioning is free because you just change which byte offset you copy from. Horizontal positioning is free every 8th increment, because again, you just change which byte offset you copy from. From here, you have two choices. One choice is to store 8 versions of the original background, each offset horizontally by one pixel, and the other is to shift the pixels in software. For a 64x64 pixel graphic, the worst case scenario is to shift 4 pixels (Instead of shifting 5 pixels, you move to the next byte (effectively shifting 8 pixels) and shift 3 pixels in the opposite direction), which would equate to 4 (shifts) * 8 (bytes per row) * 8 (rows per tile) * 8 (rows of tiles) * 2 (bits per pixel) = 4096 shifts.<br /><br />A compromise between shift and CPU effort is to store two copies of the 64x64 graphic, with one copy offset by 4 pixels. Here, the worst case scenario is 2 shifts (for 3 shifts, you move to the other table (effectively shifting 4 pixels) and shift once in the opposite direction). Instead of 8 copies of the 64x64 graphic, you only have 2, and instead of a maximum shift of 4 pixels, it's now a max of 2.<br /><br />I'm not sure how comfortable I'd personally be with a subroutine that burns a variable amount of operations between 0 and 2048 depending on the screen's scroll position, but if it can be proven to not negatively impact the game, then this would be a feasible solution.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Tue Aug 25, 2015 5:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-08-25T08:17:21-07:00</updated>
<published>2015-08-25T08:17:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154002#p154002</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154002#p154002"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154002#p154002"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />GBC games of this era were huge, like 2MB minimum.<br /></div><br />And anybody who wanted to make a smaller game had to pad it out with GIFs and stuff. <em>The Adventures of Elmo in Grouchland</em> is 2 Mbit (256 KiB), the same size as <em>Battletoads</em>, but according to <a href="https://tcrf.net/The_Adventures_of_Elmo_in_Grouchland_%28Game_Boy_Color%29" class="postlink">its TCRF article</a>, Nintendo wouldn't manufacture anything smaller than 8 Mbit (1 MiB) anymore.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Aug 25, 2015 8:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-08-25T08:10:20-07:00</updated>
<published>2015-08-25T08:10:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154001#p154001</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154001#p154001"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=154001#p154001"><![CDATA[
Toki Tori in particular is 1MB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Aug 25, 2015 8:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2015-08-25T07:06:49-07:00</updated>
<published>2015-08-25T07:06:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153998#p153998</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153998#p153998"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153998#p153998"><![CDATA[
GBC games of this era were huge, like 2MB minimum.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Aug 25, 2015 7:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2015-08-25T06:54:42-07:00</updated>
<published>2015-08-25T06:54:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153997#p153997</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153997#p153997"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153997#p153997"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I don't. A 64x64-pixel area has 4096 possible rotations, times 1KB for the 64 tiles equals 4MB of RAM.<br /></div><br />Or you could split it into 16 DMAs and only have to keep 8 rotations, for a grand total of 8KB.<br /><br />But now that I think about it though the GBC's DMA is aligned to 16 byte addresses, right? So that ruins the fine vertical scrolling part... (that'd still be way more feasible to rotate with the Z80 than doing the full scrolling, because it's just moving bytes around instead of manipulating them - bit rotations are slow since they happen one bit at a time only).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Tue Aug 25, 2015 6:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-08-25T06:43:44-07:00</updated>
<published>2015-08-25T06:43:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153995#p153995</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153995#p153995"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153995#p153995"><![CDATA[
<div class="quotetitle">Sik wrote:</div><div class="quotecontent"><br />But that'd be too slow<br /></div><br />Yes, but it's not like the gameplay in Toki Tori is incredibly complex... I bet they have the CPU time to do the rotation at run time.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />unless you mean rotating at load time and keeping the rotated versions cached in RAM<br /></div><br />I don't. A 64x64-pixel area has 4096 possible rotations, times 1KB for the 64 tiles equals 4MB of RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />How much RAM does the GBC have, anyway? (I know it's more than the GB, that's for sure)<br /></div><br />I think it's 32KB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Aug 25, 2015 6:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2015-08-25T05:46:26-07:00</updated>
<published>2015-08-25T05:46:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153993#p153993</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153993#p153993"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153993#p153993"><![CDATA[
But that'd be too slow, unless you mean rotating at load time and keeping the rotated versions cached in RAM. How much RAM does the GBC have, anyway? (I know it's more than the GB, that's for sure)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Tue Aug 25, 2015 5:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-08-24T22:16:31-07:00</updated>
<published>2015-08-24T22:16:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153982#p153982</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153982#p153982"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153982#p153982"><![CDATA[
<div class="quotetitle">Sik wrote:</div><div class="quotecontent"><br />The issue is more the ROM space usage just for that<br /></div><br />In some cases it makes more sense to rotate the pattern in RAM at run time rather than store all the rotations in ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Aug 24, 2015 10:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2015-08-24T21:34:27-07:00</updated>
<published>2015-08-24T21:34:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153980#p153980</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153980#p153980"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153980#p153980"><![CDATA[
The issue is more the ROM space usage just for that =P (how big were GBC games in general, anyway? also this is a late GBC game too, being from 2001)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Mon Aug 24, 2015 9:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2015-08-24T21:05:55-07:00</updated>
<published>2015-08-24T21:05:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153979#p153979</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153979#p153979"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153979#p153979"><![CDATA[
The GBC has no problem doing a 1K DMA transfer.  Transfer speed is 1 byte per CPU cycle.  It can either transfer 16 bytes during HBLANK time for 144 scanlines (up to 2304 bytes), or transfer more during vblank.  Vblank period is about 9000 cycles long.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Aug 24, 2015 9:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2015-08-24T09:34:30-07:00</updated>
<published>2015-08-24T09:34:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153942#p153942</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153942#p153942"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153942#p153942"><![CDATA[
Was looking closer (including other levels) and the parallax layer seems to be <em>64×64</em> (Shantae's is just 8×8, people!). How the heck did they pull off <em>that</em>? Only thing that comes to my mind is to have 8 copies (for each of the possible pixel-level tile rotations) and then do several DMAs, and that'd require 8KB of ROM space (assuming it's uncompressed), although only 1KB of CHR-RAM. That may have been feasible, though...<br /><br />Still, <em>yikes</em>.<br /><br />EDIT: oh, and just to put it into context: on the Mega Drive I can pull off 32×32 software scrolling in about 34 scanlines (out of 262). That's with a 68000 manipulating an entire 32-pixel row at once (when I do crazy stuff I take it to the extreme :v). Here it's a Z80 (admittedly a sorta fast one) handling <em>four times as many pixels</em>, and on a planar system. So huh yeah, some clever trickery is going on. The method I mentioned is pretty much the first one that came to my mind that seems feasible (and it wastes space, but I guess 8KB by that time wasn't much of a problem, and there's only a handful of different backgrounds).<br /><br />So yeah, it's actually kind of revolutionary just because of the sheer size of the parallax. Now to figure out how Prehistorik Man does it (since the parallax is infinitely tall), but that one may be cheating more heavily, especially since it's only 32px wide, and a huge chunk seems to be either blank or horizontal stripes (only a tiny portion is an actual bitmap).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Mon Aug 24, 2015 9:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-08-24T08:43:24-07:00</updated>
<published>2015-08-24T08:43:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153938#p153938</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153938#p153938"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153938#p153938"><![CDATA[
It's a lot easier on the GBC than on the NES or original Game Boy because the GBC has <a href="http://bgb.bircd.org/pandocs.htm#lcdvramdmatransferscgbonly" class="postlink">CHR HDMA</a>, which copies 16 bytes to video memory in every hblank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Aug 24, 2015 8:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-08-23T22:06:09-07:00</updated>
<published>2015-08-23T22:06:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153926#p153926</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153926#p153926"/>
<title type="html"><![CDATA[Re: GBjam Pirate Pop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13173&amp;p=153926#p153926"><![CDATA[
Parallax scrolling is when there are multiple layers scrolling at different speeds to simulate depth, but this effect in particular is special because it has overlapping layers in a system that only has 1 background layer. When the layers don't have overlapping details, parallax scrolling is just a cheap effect that can be achieved with a simple mid-screen scroll change, but with overlapping details you have to manipulate the patterns according to the movement of the camera. There's nothing revolutionary about this trick being used in a GBC game though, seeing as several NES games used it, including <a href="https://youtu.be/QLxXmnqaJtw?t=9m53s" class="postlink">Battletoads</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Aug 23, 2015 10:06 pm</p><hr />
]]></content>
</entry>
</feed>