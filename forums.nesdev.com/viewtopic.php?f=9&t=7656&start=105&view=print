<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NESDEV1 Community Development Board, Initial Planning</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NESDEV1 Community Development Board, Initial Planning</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7656">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7656</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>8</strong> of <strong>14</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Apr 30, 2011 3:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe a dual-pic could work. One for the PRG and CHR mapping, and one to keep track of the IRQ. Adding 8 IO's, one for each chip (PRG and CHR) would be plenty of room for expansion, the hardest thing would be having one 16KB bank, one 8K bank, and a fixed bank. But I would bet with some optimization, there'd be time to do the needed calculatons.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>socram8888</b> [ Sat Apr 30, 2011 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Remember that the average of each 6502 instruction is 4 clocks, so a PIC running at 32MHz gives us more than 50 instructions for each 6502 instructions. That's a lot!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 30, 2011 4:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">socram8888 wrote:</div><div class="quotecontent">Remember that the average of each 6502 instruction is 4 clocks, so a PIC running at 32MHz gives us more than 50 instructions for each 6502 instructions. That's a lot!</div>
<br />What about CHR-ROM fetches? Those occur at a much higher frequency, would it really be possible to modify the higher CHR address lines based on the memory range being accessed in time?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Apr 30, 2011 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If each instruction is 30 or so clocks on the pic, that means we have 30 instructions to process it. That seems reasonable to me. If you had an IRQ for read, and one for writes, it should be easy....right? Just have to use only 30 instructions, but it wouldn't be too bad, would it? C'mon, you're the guy who can tell exactly how much RAM you need for a routine on Atari 2600, and you don't know the least amount of instructions for a PIC mapper handler? Heh. ^_^ <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />
<br />And CHR-ROM fetches are 3x as fast, but with an 80Mhz pic on that side if there's 3 pics, that's 20 or so instructions. All this is probably going to be is just a converter for the higher 8 pins or however many we can add. It shouldn't take 20 instructions to process anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Sat Apr 30, 2011 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You folks are not really thinking about how the 6502 (and the PPU) access memory. The shortest instruction may be four clocks, but the first of those clock cycles is always a memory fetch. The timing of that memory fetch is such that you have roughly 135 ns from the time M2 goes high until you have to have data stable on the data lines.
<br />
<br />Even if you are using 40 ns Flash memory that leaves you with 95 ns to:
<br />
<br />1. Detect that M2 has gone high
<br />2. Read the address bus
<br />3. Assert the appropriate high address on the PRG bus
<br />
<br />95 ns is roughly three clocks at 32 MHZ.
<br />
<br />Also, the documentation I can find on modern PIC architecture states that a minimum of two clock cycles are required for every instruction because the decoder is implemented as a Look Up Table. Also external interrupt sources take four cycles to synchronize and acknowledge.
<br />
<br />Now that I review the timing my old AVR code would not have worked either. For some reason I forgot about the M2 delay and was using the entire read cycle wave.
<br />
<br />Anyhow, this is the reason we have programmable logic. You can do an awful lot with a micro (I have generated 1/2 resolution NTSC video with an AVR), but it cannot replace fast logic. It can replace slow logic, but even that is very hard.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Apr 30, 2011 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But the PIC or whatever would be used, two cycles would be 1/20th of the time, would it not? And is there any device that uses only one clock per instruction?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Apr 30, 2011 6:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Using the PIC for a mapper was what the original Squeedo did.  Started it with the PIC16F877, then to 18F452 and even later to 18F4525.  On the later board I want to move to PIC32.  I actually have maybe 35 of those boards left (the version that use all DIP parts), if anyone wants a DIY PIC18 <a href="http://www.parodius.com/~memblers/nes/squeedo/pics/rev1.jpg" class="postlink">dev board</a>.  Bummer that it doesn't have an ICD (in-circuit-debugger) hookup, so you either use a bootloader (easy), or remove the chip from the socket to reprogram, and do the debugging in the MPLAB software.  I actually wrote and tested the main part of the software in the debugger before I even made the board.
<br />
<br />And yeah, it is faster than the NES, but not in a huge way.  You can't emulate an actual mapper, so you'd use a 74hc139 or something for the actual address decoding.  On Squeedo what I did with the PIC was use it's outputs to control the bankswitching (PRG was just 32kB, but you could use whatever logic parts to make different pages).  The NES reads/writes to the PIC's parallel port peripheral, there's a significant amount of latency while the PIC gets interrupted and finds out what it is you're doing.  So the NES has to wait a little bit before the bank is actually switched.  There are some advantages to this though, you can have the PIC changes the CHR switching mid-frame without an NES interrupt.  One thing I tested out successfully was an MMC3-style scanline counter that takes a CHR address as an input to a timer.  You set the PIC register to pre-divide by 8 I think it was, and then your timer is 1:1 with scanline counts.  Another timer peripheral had the M2 line connected to it, for a CPU-cycle counter.
<br />
<br />On top of that, I also wrote code that had the PIC generating sound, which was sent to the NES to write to $4011.  Everything worked fine in real-time, just with some delays on the NES-side for some stuff.  So you can really do a lot with a cheap PIC.  Something like the cheap CPLD mapper I'm working on is, if I had know how at the time, what I would have used instead of the address decoding logic on the original Squeedo.  A PIC can complement a CPLD/mapper, but not replace it.  Looks like qbradq made that point before I finished this post, though. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Apr 30, 2011 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">But the PIC or whatever would be used, two cycles would be 1/20th of the time, would it not?</div>
<br />
<br />It is faster, but importantly, they can't be synchronized (PIC will have to run on it's own clock, NES doesn't give it anything usable - there is that 21Mhz output pin that exists only on front-loaders, but I'm very doubtful it's usable - you'd have to run the PIC much slower than it's maximum, if it was usable).  Even if they could be, you'd still be faced with the task of covering every possible situation within a very small number of instructions (just not enough time for anything else).  It'd be too fast to use a timer, or an interrupt in a reasonable way, so it'd have to be all timed code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>socram8888</b> [ Sun May 01, 2011 6:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It was just an idea. Going for glue logic or something like that, cheap and easy to build, will be a better way

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Sun May 01, 2011 9:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well like, if you want cheap and easy, I'd recommend discrete parts. All you need are a couple of latches to hold bank numbers, a decoder to go to the /OE pins of the latches (or some other way to select which latch's output gets used), a counter tied to M2 for IRQs, and potentially a 4-bit latch to control mirroring (each bit selects Nametable A or B for each quadrant of the screen). To make it more simple, you could even hardwire the mirroring up to a switch on the cart.
<br />
<br />I can almost guarantee that this configuration would be satisfactory for 99% of the homebrew developed on this forum.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun May 01, 2011 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">I can almost guarantee that this configuration would be satisfactory for 99% of the homebrew developed on this forum.</div>
<br />I don't think the goal is to make something suitable for the kind of software that we're currently making, but something that will offer us NEW possibilities.
<br />
<br />In all honesty, all I miss is a scanline/cycle counter (without the serious limitations of the one in the MMC3), and, to a lesser degree, CHR-ROM bankswitching in 1KB or 2KB chunks (without that I'd rather use CHR-RAM, like I do now).
<br />
<br />I imagine that PRG-RAM is something that a lot of developers miss (I personally don't), not so much because of the extra work RAM but because they want to use a battery with it in order to save games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun May 01, 2011 9:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">socram8888 wrote:</div><div class="quotecontent">Remember that the average of each 6502 instruction is 4 clocks, so a PIC running at 32MHz gives us more than 50 instructions for each 6502 instructions. That's a lot!</div><br />What about CHR-ROM fetches? Those occur at a much higher frequency, would it really be possible to modify the higher CHR address lines based on the memory range being accessed in time?</div>
<br />Maybe it would be possible to go at this from a different angle... don't even try to modify the CHR addr lines based on realtime input, but have some kind of list of "instructions" that starts executing in the PIC every NMI (kind of like the copper list on Amiga OCS). So instructions would be something like "wait for X cycles, set CHR addr lines to X", and PIC would use timed code to run them.
<br />
<br />I mean, there's no reason why the PIC mappers should try to emulate mappers based on digital logic.. there are a wealth of other possibilites.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Sun May 01, 2011 10:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Drag wrote:</div><div class="quotecontent">I can almost guarantee that this configuration would be satisfactory for 99% of the homebrew developed on this forum.</div><br />I don't think the goal is to make something suitable for the kind of software that we're currently making, but something that will offer us NEW possibilities.<br /><br />In all honesty, all I miss is a scanline/cycle counter (without the serious limitations of the one in the MMC3), and, to a lesser degree, CHR-ROM bankswitching in 1KB or 2KB chunks (without that I'd rather use CHR-RAM, like I do now).<br /><br />I imagine that PRG-RAM is something that a lot of developers miss (I personally don't), not so much because of the extra work RAM but because they want to use a battery with it in order to save games.</div>
<br />Unless the point of this thread changed (I haven't been keeping up much, because there's been too much fantasizing going on here), I was under the impression that this thread was about coming up with a new mapper that was feature rich and was a cheaper, more compatable alternative for development (specifically) than other solutions currently available.
<br />
<br />Everyone was trying to rip off the FME too much, and now I'm hearing talk about a PIC, and all I can think about is how a lot of the people here can barely code Tic Tac Toe, how in the hell is anyone going to use 4MB of PRG rom, and why is anyone going to need a math co-processor capable of fourier transformations?
<br />
<br />I mean, there's extending the NES's capability, and there's extending the NES's capability <em>practically</em>. You don't need anything fancy to make a mapper. With a few simple latches, and a counter, you could get functionality that would rival the MMC3, and <em>trust me</em>, most software developed here would be well suited for it.
<br />
<br />All I was doing was bringing that fact up. I don't care what you guys want to stick on it, you can stick a damn x86 on it for all I care, but you're not going to get anywhere unless you have a good base to go off of.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Sun May 01, 2011 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^^what he said <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>socram8888</b> [ Sun May 01, 2011 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">socram8888 wrote:</div><div class="quotecontent">I don't know why do you want to use a very complex mapper. This is a NES, not a Nintendo 64. NES programmers didn't have these complex mappers; they had to exploit NES features to the limit.</div>
<br />
<br />I think we should use CHR-RAM because this simplifies the design a lot (nor CHR banking), and allows to make tiles on the-fly
<br />
<br />All we need is something like Wisdom Tree's mapper using a simple octal latch, and with this as base, add some features (IRQ, PRG-RAM, mirroring control...)
<br />
<br />These thing should fit easily on a CPLD (or at least is what I think, because I never worked with them)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>8</strong> of <strong>14</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>