<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="https://forums.nesdev.com/feed.php?f=3&amp;t=8738" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="https://forums.nesdev.com/index.php" />
<updated>2012-04-02T08:28:08-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>https://forums.nesdev.com/feed.php?f=3&amp;t=8738</id>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-04-02T08:28:08-07:00</updated>
<published>2012-04-02T08:28:08-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92094#p92094</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92094#p92094"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92094#p92094"><![CDATA[
Thanks for the explanation, it all makes a lot more sense now.<br /><br /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br />Not at all; yours was the time wasted here. Thank you for the effort.<br />But this just furthermore concludes that attempting to read the OAM is unrealiable at its best. When we eventually get a PPU delayered and traced, perhaps we will get our answers as to why the case is so.<br /></div><br /><br />Oh no, time was spent learning not wasted <img src="https://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Apr 02, 2012 8:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-04-02T01:13:17-07:00</updated>
<published>2012-04-02T01:13:17-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92089#p92089</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92089#p92089"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92089#p92089"><![CDATA[
<div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br />I will leave the OAM test like that though; I don't think I can improve it in any way except by adding more opcodes into the test or by making the opcode tests not depend on earlier tests, as is in the PPU memory version.<br /></div><br />Which, I later actually did.<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />I'm a bit unclear with what/howl your testing everything (I'm not asking you to explain, just wanted to preface with that in efforts to not sound too stupid)<br /></div><br />Just for the sake of documentation, I will explain it anyway.<br /><br />The OAM version writes a predictable pattern into the PPU's sprite memory (the OAM), and does a series of reads to determine whether the content that is read from the memory actually is what was earlier written there. Aside from just comparing read data to written data, it also tests whether the OAM memory pointer (set by $2003) is properly incremented with writes and not incremented with reads. The initial filling of the memory is done byte by byte, setting the address separately each time.<br /><br />In the actual test, it subjects the OAM memory ($2004) to a number of read-modify-write opcodes by the CPU, such as INC, DEC or ROR. Those opcodes are supposed to first issue a read from the affected address, then write back a value, and write back another value. The first write should go to the same OAM slot that was read, but the second write should go into the next OAM slot. After executing the opcode, the program reads the OAM to determine which contents were written into which slots.<br />This is repeated for all read-modify-write opcodes that can adress 16-bit addresses, both official and unofficial ones.<br /><br /><br />The PPU test begins with an open bus test: It first writes a random byte (with some bits cleared for sanity) into each address between $2000..$2007, and reads a byte from $2002 and $2007, and after each read or write, attempts reading $2000, $2001, $2003, $2005 and $2006. The value read should show retain / some of the bits that were written / read previously. Each test (50 of them) is repeated 15 times, for a total of 750 tests, and the number of failures is shown. A "0" indicates it never failed, and "F" indicates it failed all 15 times.<br />Then it verifies that basic $2005/$2006/$2007 access works as supposed to, i.e. that there is an one-byte buffer in reads, and that the memory address gets properly incremented when supposed to, and that there's a flipflop for the high/low address bytes, and so on.<br /><br />The PPU test populates the second name/attribute table (addresses $2400-$27FF) with predictable contents.  The first name/attribute table is reserved for the console that is shown on the screen; it is not touched. This memory region was also chosen in order to not depend on VRAM. The initial filling of the memory is done byte by byte, setting the address separately each time.<br /><br />In the actual test, it subjects the PPU memory ADDRESS register ($2006) to a number of read-modify-write opcodes by the CPU, such as INC, DEC or ROR. Those opcodes are supposed to first issue a read from the affected address, then write back a value, and write back another value.  If the CPU works as supposed to, two writes are issued into $2006. Otherwise, only one write is issued. By reading from $2007 the program exactly determine what the CPU wrote into $2006. It was previously verified that a single write to $2006 will not affect the address used by $2007; two writes are needed for that.<br />This is repeated for all read-modify-write opcodes that can adress 16-bit addresses, both official and unofficial ones.<br /><br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />Anyways if this is all useless info sorry for wasting your time.<br /></div><br />Not at all; yours was the time wasted here. Thank you for the effort.<br />But this just furthermore concludes that attempting to read the OAM is unrealiable at its best. When we eventually get a PPU delayered and traced, perhaps we will get our answers as to why the case is so.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Mon Apr 02, 2012 1:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-04-02T00:52:33-07:00</updated>
<published>2012-04-02T00:52:33-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92088#p92088</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92088#p92088"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=92088#p92088"><![CDATA[
<div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br />I will leave the OAM test like that though; I don't think I can improve it in any way except by adding more opcodes into the test or by making the opcode tests not depend on earlier tests, as is in the PPU memory version.<br /></div><br /><br />I was curious about all this and was out of town last week and unable to test it out on the NESDEV1.  But some of this is a little over my head, I grasp the basics of whats going on with the open bus and double writes and the opcodes and such.  I'm a bit unclear with what/howl your testing everything (I'm not asking you to explain, just wanted to preface with that in efforts to not sound too stupid)<br /><br />Anyways I figured since the powerpak Tepples tested with has open bus issues I would try my cart out that holds bus capacitance well.  I did get some similar results to tepples on the OAM test but heres a breakdown:<br /><br />3418 failed, #2 failed:    First power up and a few other resets.<br />127 failed, 42 opcodes failed, #2 failed:  atleast 3 times.<br />73 failed, #2 failed:  once<br />OK: 42 opcodes failed, #5 failed: atleast twice, I didn't see this one listed from tepples' results.<br />a few others one timers: 102 fail, 113 fail, 112 fail  all with #2 fail on the last line.<br /><br />Anyways if this is all useless info sorry for wasting your time.  I just thought getting a couple OK's that tepples hadn't reported in the thread may have been new info.  Looks like I had 42 opcodes fail eachtime that it actually got to the point of performing that portion of the test.  Everything looked good with the ppu_mem test and had consistent results everytime.<br /><br />Let me know if anything is of value and you'd like more details I can retest with video if needed.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Apr 02, 2012 12:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-03-29T13:17:39-07:00</updated>
<published>2012-03-29T13:17:39-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91971#p91971</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91971#p91971"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91971#p91971"><![CDATA[
<div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br /><div class="quotetitle">crudelios wrote:</div><div class="quotecontent">Turns out it was a really stupid bug (aren't they all?), I was allowing writes to the PRG ROM in mapper 0.<br /></div><br />Hehe. Now I added a subtest that first verifies that ROM is not writable <img src="https://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":-)" title="Smile" /></div><br />Suggested error message if ROM is writable:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">IT IS A SERIOUS CRIME<br />TO COPY VIDEO GAMES.</div><p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 29, 2012 1:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-03-29T12:31:00-07:00</updated>
<published>2012-03-29T12:31:00-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91967#p91967</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91967#p91967"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91967#p91967"><![CDATA[
<div class="quotetitle">crudelios wrote:</div><div class="quotecontent"><br />Incidentally, the test_cpu_exec_space_apu.nes error was indeed an open bus error.<br />Good catch!<br /></div><br />That was the point of the test :-) It verifies that 1) the CPU can execute code from any location that it can address and that 2) data read from write-only locations is what was last placed on the bus.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Thu Mar 29, 2012 12:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[crudelios]]></name></author>
<updated>2012-03-29T12:26:56-07:00</updated>
<published>2012-03-29T12:26:56-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91966#p91966</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91966#p91966"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91966#p91966"><![CDATA[
Nice going <img src="https://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> Incidentally, the test_cpu_exec_space_apu.nes error was indeed an open bus error.<br /><br />Good catch!<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5192">crudelios</a> — Thu Mar 29, 2012 12:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-03-29T09:46:05-07:00</updated>
<published>2012-03-29T09:46:05-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91962#p91962</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91962#p91962"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91962#p91962"><![CDATA[
<div class="quotetitle">crudelios wrote:</div><div class="quotecontent"><br />Turns out it was a really stupid bug (aren't they all?), I was allowing writes to the PRG ROM in mapper 0. I feel silly! :oops:<br /><br />I now pass the test without any problem.<br /></div><br />Hehe. Now I added a subtest that first verifies that ROM is not writable :-)<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Thu Mar 29, 2012 9:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[crudelios]]></name></author>
<updated>2012-03-29T08:22:59-07:00</updated>
<published>2012-03-29T08:22:59-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91959#p91959</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91959#p91959"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91959#p91959"><![CDATA[
Thanks for all your help and patience, I finally found what the bug was.<br /><br />Turns out it was a really stupid bug (aren't they all?), I was allowing writes to the PRG ROM in mapper 0. I feel silly! <img src="https://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><br /><br />I now pass the test without any problem.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5192">crudelios</a> — Thu Mar 29, 2012 8:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-03-29T03:41:16-07:00</updated>
<published>2012-03-29T03:41:16-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91953#p91953</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91953#p91953"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91953#p91953"><![CDATA[
<div class="quotetitle">crudelios wrote:</div><div class="quotecontent"><br />Something's really amiss... If it's not too much of a hassle, could you please attach the complete test log? That way I can compare instruction by instruction, hopefully it should shed some light...<br /></div><br />You can run it yourself in e.g. Nintendulator and take an instruction trace.<br />I would not use my own emulator as reference material yet. In small quantities, it is useful, but it is not an authoritative reference for NES timings.<br />In that regard, Quietust's Nintendulator is better.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Edit: The test_cpu_exec_space_apu.nes test fails with the error.<br /><br />Code:<br />4000 00 ERROR<br />Mysteriously landed at $4002<br /></div><br />Related, I don't think so. A sign of another error (open bus not properly implemented), yes..<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Thu Mar 29, 2012 3:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[crudelios]]></name></author>
<updated>2012-03-29T03:07:42-07:00</updated>
<published>2012-03-29T03:07:42-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91948#p91948</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91948#p91948"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91948#p91948"><![CDATA[
Hey, sorry for the long delay, no time to test until now...<br /><br />The whole thing is borked. My emu never executes "stx num_fails". Here's the log from a few cycles before.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">E406 A5 14     LDA $14 = 37                    A:8B X:04 Y:01 P:A5 SP:F0 CYC: 2791<br />E408 49 B8     EOR #$B8                        A:37 X:04 Y:01 P:25 SP:F0 CYC: 2800<br />E40A 85 14     STA $14 = 37                    A:8F X:04 Y:01 P:A5 SP:F0 CYC: 2806<br />E40C A5 13     LDA $13 = 06                    A:8F X:04 Y:01 P:A5 SP:F0 CYC: 2815<br />E40E 49 83     EOR #$83                        A:06 X:04 Y:01 P:25 SP:F0 CYC: 2824<br />E410 85 13     STA $13 = 06                    A:85 X:04 Y:01 P:A5 SP:F0 CYC: 2830<br />E412 A5 12     LDA $12 = 70                    A:85 X:04 Y:01 P:A5 SP:F0 CYC: 2839<br />E414 49 20     EOR #$20                        A:70 X:04 Y:01 P:25 SP:F0 CYC: 2848<br />E416 CA        DEX                             A:50 X:04 Y:01 P:25 SP:F0 CYC: 2854<br />E417 D0 DC     BNE $E3F5                       A:50 X:03 Y:01 P:25 SP:F0 CYC: 2860<br />E3F5 46 15     LSR $15 = 8B                    A:50 X:03 Y:01 P:25 SP:F0 CYC: 2872<br />E3F7 66 14     ROR $14 = 8F                    A:50 X:03 Y:01 P:25 SP:F0 CYC: 2887<br />E3F9 66 13     ROR $13 = 85                    A:50 X:03 Y:01 P:A5 SP:F0 CYC: 2902<br />E3FB 6A        ROR                             A:50 X:03 Y:01 P:A5 SP:F0 CYC: 2917<br />E3FC 90 18     BCC $E416                       A:A8 X:03 Y:01 P:A4 SP:F0 CYC: 2923<br />E416 CA        DEX                             A:A8 X:03 Y:01 P:A4 SP:F0 CYC: 2935<br />E417 D0 DC     BNE $E3F5                       A:A8 X:02 Y:01 P:24 SP:F0 CYC: 2941<br />E3F5 46 15     LSR $15 = 45                    A:A8 X:02 Y:01 P:24 SP:F0 CYC: 2953<br />E3F7 66 14     ROR $14 = C7                    A:A8 X:02 Y:01 P:25 SP:F0 CYC: 2968<br />E3F9 66 13     ROR $13 = C2                    A:A8 X:02 Y:01 P:A5 SP:F0 CYC: 2983<br />E3FB 6A        ROR                             A:A8 X:02 Y:01 P:A4 SP:F0 CYC: 2998<br />E3FC 90 18     BCC $E416                       A:54 X:02 Y:01 P:24 SP:F0 CYC: 3004<br />E416 CA        DEX                             A:54 X:02 Y:01 P:24 SP:F0 CYC: 3016<br />E417 D0 DC     BNE $E3F5                       A:54 X:01 Y:01 P:24 SP:F0 CYC: 3022<br />E3F5 46 15     LSR $15 = 22                    A:54 X:01 Y:01 P:24 SP:F0 CYC: 3034<br />E3F7 66 14     ROR $14 = E3                    A:54 X:01 Y:01 P:24 SP:F0 CYC: 3049<br />E3F9 66 13     ROR $13 = E1                    A:54 X:01 Y:01 P:25 SP:F0 CYC: 3064<br />E3FB 6A        ROR                             A:54 X:01 Y:01 P:A5 SP:F0 CYC: 3079<br />E3FC 90 18     BCC $E416                       A:AA X:01 Y:01 P:A4 SP:F0 CYC: 3085<br />E416 CA        DEX                             A:AA X:01 Y:01 P:A4 SP:F0 CYC: 3097<br />E417 D0 DC     BNE $E3F5                       A:AA X:00 Y:01 P:26 SP:F0 CYC: 3103<br />E419 85 12     STA $12 = 70                    A:AA X:00 Y:01 P:26 SP:F0 CYC: 3109<br />E41B A6 16     LDX $16 = 01                    A:AA X:00 Y:01 P:26 SP:F0 CYC: 3118<br />E41D 68        PLA                             A:AA X:01 Y:01 P:24 SP:F0 CYC: 3127<br />E41E 60        RTS                             A:CA X:01 Y:01 P:A4 SP:F1 CYC: 3139<br />E233 48        PHA                             A:CA X:01 Y:01 P:A4 SP:F3 CYC: 3157<br />E234 4A        LSR                             A:CA X:01 Y:01 P:A4 SP:F2 CYC: 3166<br />E235 4A        LSR                             A:65 X:01 Y:01 P:24 SP:F2 CYC: 3172<br />E236 4A        LSR                             A:32 X:01 Y:01 P:25 SP:F2 CYC: 3178<br />E237 4A        LSR                             A:19 X:01 Y:01 P:24 SP:F2 CYC: 3184<br />E238 20 44 E2  JSR $E244                       A:0C X:01 Y:01 P:25 SP:F2 CYC: 3190<br />E244 C9 0A     CMP #$0A                        A:0C X:01 Y:01 P:25 SP:F0 CYC: 3208<br />E246 90 02     BCC $E24A                       A:0C X:01 Y:01 P:25 SP:F0 CYC: 3214<br />E248 69 06     ADC #$06                        A:0C X:01 Y:01 P:25 SP:F0 CYC: 3220<br />E24A 69 30     ADC #$30                        A:13 X:01 Y:01 P:24 SP:F0 CYC: 3226<br />E24C 4C 53 E6  JMP $E653                       A:43 X:01 Y:01 P:24 SP:F0 CYC: 3232<br />E653 20 3B E6  JSR $E63B                       A:43 X:01 Y:01 P:24 SP:F0 CYC: 3241<br />E63B 8C 23 02  STY $0223 = 00                  A:43 X:01 Y:01 P:24 SP:EE CYC: 3259<br />E63E A0 01     LDY #$01                        A:43 X:01 Y:01 P:24 SP:EE CYC: 3271<br />E640 48        PHA                             A:43 X:01 Y:01 P:24 SP:EE CYC: 3277<br />E641 A9 00     LDA #$00                        A:43 X:01 Y:01 P:24 SP:ED CYC: 3286<br />E643 91 1C     STA &#40;$1C&#41;,Y = 63BC @ 63BD = 00  A:00 X:01 Y:01 P:26 SP:ED CYC: 3292<br />E645 88        DEY                             A:00 X:01 Y:01 P:26 SP:ED CYC: 3310<br />E646 68        PLA                             A:00 X:01 Y:00 P:26 SP:ED CYC: 3316<br />E647 91 1C     STA &#40;$1C&#41;,Y = 63BC @ 63BC = 00  A:43 X:01 Y:00 P:24 SP:EE CYC: 3328<br />E649 E6 1C     INC $1C = BC                    A:43 X:01 Y:00 P:24 SP:EE CYC: 3346<br />E64B D0 02     BNE $E64F                       A:43 X:01 Y:00 P:A4 SP:EE CYC: 3361<br />E64F AC 23 02  LDY $0223 = 01                  A:43 X:01 Y:00 P:A4 SP:EE CYC: 3370<br />E652 60        RTS                             A:43 X:01 Y:01 P:24 SP:EE CYC: 3382<br />E656 4C 77 E5  JMP $E577                       A:43 X:01 Y:01 P:24 SP:F0 CYC: 3400<br />E577 C9 0A     CMP #$0A                        A:43 X:01 Y:01 P:24 SP:F0 CYC: 3409<br />E579 F0 1F     BEQ $E59A                       A:43 X:01 Y:01 P:25 SP:F0 CYC: 3415<br />E57B 86 1A     STX $1A = 00                    A:43 X:01 Y:01 P:25 SP:F0 CYC: 3421<br />E57D A6 18     LDX $18 = 1B                    A:43 X:01 Y:01 P:25 SP:F0 CYC: 3430<br />E57F 10 0D     BPL $E58E                       A:43 X:1B Y:01 P:25 SP:F0 CYC: 3439<br />E58E 18        CLC                             A:43 X:1B Y:01 P:25 SP:F0 CYC: 3448<br />E58F 65 1B     ADC $1B = E0                    A:43 X:1B Y:01 P:24 SP:F0 CYC: 3454<br />E591 9D 04 02  STA $0204,X @ 021F = 00         A:23 X:1B Y:01 P:25 SP:F0 CYC: 3463<br />E594 CA        DEX                             A:23 X:1B Y:01 P:25 SP:F0 CYC: 3478<br />E595 86 18     STX $18 = 1B                    A:23 X:1A Y:01 P:25 SP:F0 CYC: 3484<br />E597 A6 1A     LDX $1A = 01                    A:23 X:1A Y:01 P:25 SP:F0 CYC: 3493<br />E599 60        RTS                             A:23 X:01 Y:01 P:25 SP:F0 CYC: 3502<br />E23B 68        PLA                             A:23 X:01 Y:01 P:25 SP:F2 CYC: 3520<br />E23C 48        PHA                             A:CA X:01 Y:01 P:A5 SP:F3 CYC: 3532<br />E23D 29 0F     AND #$0F                        A:CA X:01 Y:01 P:A5 SP:F2 CYC: 3541<br />E23F 20 44 E2  JSR $E244                       A:0A X:01 Y:01 P:25 SP:F2 CYC: 3547<br />E244 C9 0A     CMP #$0A                        A:0A X:01 Y:01 P:25 SP:F0 CYC: 3565<br />E246 90 02     BCC $E24A                       A:0A X:01 Y:01 P:27 SP:F0 CYC: 3571<br />E248 69 06     ADC #$06                        A:0A X:01 Y:01 P:27 SP:F0 CYC: 3577<br />E24A 69 30     ADC #$30                        A:11 X:01 Y:01 P:24 SP:F0 CYC: 3583<br />E24C 4C 53 E6  JMP $E653                       A:41 X:01 Y:01 P:24 SP:F0 CYC: 3589<br />E653 20 3B E6  JSR $E63B                       A:41 X:01 Y:01 P:24 SP:F0 CYC: 3598<br />E63B 8C 23 02  STY $0223 = 01                  A:41 X:01 Y:01 P:24 SP:EE CYC: 3616<br />E63E A0 01     LDY #$01                        A:41 X:01 Y:01 P:24 SP:EE CYC: 3628<br />E640 48        PHA                             A:41 X:01 Y:01 P:24 SP:EE CYC: 3634<br />E641 A9 00     LDA #$00                        A:41 X:01 Y:01 P:24 SP:ED CYC: 3643<br />E643 91 1C     STA &#40;$1C&#41;,Y = 63BD @ 63BE = 00  A:00 X:01 Y:01 P:26 SP:ED CYC: 3649<br />E645 88        DEY                             A:00 X:01 Y:01 P:26 SP:ED CYC: 3667<br />E646 68        PLA                             A:00 X:01 Y:00 P:26 SP:ED CYC: 3673<br />E647 91 1C     STA &#40;$1C&#41;,Y = 63BD @ 63BD = 00  A:41 X:01 Y:00 P:24 SP:EE CYC: 3685<br />E649 E6 1C     INC $1C = BD                    A:41 X:01 Y:00 P:24 SP:EE CYC: 3703<br />E64B D0 02     BNE $E64F                       A:41 X:01 Y:00 P:A4 SP:EE CYC: 3718<br />E64F AC 23 02  LDY $0223 = 01                  A:41 X:01 Y:00 P:A4 SP:EE CYC: 3727<br />E652 60        RTS                             A:41 X:01 Y:01 P:24 SP:EE CYC: 3739<br />E656 4C 77 E5  JMP $E577                       A:41 X:01 Y:01 P:24 SP:F0 CYC: 3757<br />E577 C9 0A     CMP #$0A                        A:41 X:01 Y:01 P:24 SP:F0 CYC: 3766<br />E579 F0 1F     BEQ $E59A                       A:41 X:01 Y:01 P:25 SP:F0 CYC: 3772<br />E57B 86 1A     STX $1A = 01                    A:41 X:01 Y:01 P:25 SP:F0 CYC: 3778<br />E57D A6 18     LDX $18 = 1A                    A:41 X:01 Y:01 P:25 SP:F0 CYC: 3787<br />E57F 10 0D     BPL $E58E                       A:41 X:1A Y:01 P:25 SP:F0 CYC: 3796<br />E58E 18        CLC                             A:41 X:1A Y:01 P:25 SP:F0 CYC: 3805<br />E58F 65 1B     ADC $1B = E0                    A:41 X:1A Y:01 P:24 SP:F0 CYC: 3811<br />E591 9D 04 02  STA $0204,X @ 021E = 00         A:21 X:1A Y:01 P:25 SP:F0 CYC: 3820<br />E594 CA        DEX                             A:21 X:1A Y:01 P:25 SP:F0 CYC: 3835<br />E595 86 18     STX $18 = 1A                    A:21 X:19 Y:01 P:25 SP:F0 CYC: 3841<br />E597 A6 1A     LDX $1A = 01                    A:21 X:19 Y:01 P:25 SP:F0 CYC: 3850<br />E599 60        RTS                             A:21 X:01 Y:01 P:25 SP:F0 CYC: 3859<br />E242 68        PLA                             A:21 X:01 Y:01 P:25 SP:F2 CYC: 3877<br />E243 60        RTS                             A:CA X:01 Y:01 P:A5 SP:F3 CYC: 3889<br />EA95 D0 0F     BNE $EAA6                       A:CA X:01 Y:01 P:A5 SP:F5 CYC: 3907<br />EAA6 A6 34     LDX $34 = 02                    A:CA X:01 Y:01 P:A5 SP:F5 CYC: 3916<br />EAA8 E8        INX                             A:CA X:02 Y:01 P:25 SP:F5 CYC: 3925<br />EAA9 E8        INX                             A:CA X:03 Y:01 P:25 SP:F5 CYC: 3931<br />EAAA D0 A0     BNE $EA4C                       A:CA X:04 Y:01 P:25 SP:F5 CYC: 3937<br />EA4C 20 21 EB  JSR $EB21                       A:CA X:04 Y:01 P:25 SP:F5 CYC: 3946<br />EB21 E6 25     INC $25 = 25                    A:CA X:04 Y:01 P:25 SP:F3 CYC: 3964<br />EB23 D0 02     BNE $EB27                       A:CA X:04 Y:01 P:25 SP:F3 CYC: 3979<br />EB27 A0 00     LDY #$00                        A:CA X:04 Y:01 P:25 SP:F3 CYC: 3988<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F026 @ F026 = FA  A:CA X:04 Y:00 P:27 SP:F3 CYC: 3994<br />EB2B 60        RTS                             A:FA X:04 Y:00 P:A5 SP:F3 CYC: 4009<br />EA4F F0 46     BEQ $EA97                       A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4027<br />EA51 C9 02     CMP #$02                        A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4033<br />EA53 F0 57     BEQ $EAAC                       A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4039<br />EA55 90 44     BCC $EA9B                       A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4045<br />EA57 85 27     STA $27 = CA                    A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4051<br />EA59 85 2B     STA $2B = CA                    A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4060<br />EA5B 20 21 EB  JSR $EB21                       A:FA X:04 Y:00 P:A5 SP:F5 CYC: 4069<br />EB21 E6 25     INC $25 = 26                    A:FA X:04 Y:00 P:A5 SP:F3 CYC: 4087<br />EB23 D0 02     BNE $EB27                       A:FA X:04 Y:00 P:25 SP:F3 CYC: 4102<br />EB27 A0 00     LDY #$00                        A:FA X:04 Y:00 P:25 SP:F3 CYC: 4111<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F027 @ F027 = 25  A:FA X:04 Y:00 P:27 SP:F3 CYC: 4117<br />EB2B 60        RTS                             A:25 X:04 Y:00 P:25 SP:F3 CYC: 4132<br />EA5E 85 29     STA $29 = CA                    A:25 X:04 Y:00 P:25 SP:F5 CYC: 4150<br />EA60 20 21 EB  JSR $EB21                       A:25 X:04 Y:00 P:25 SP:F5 CYC: 4159<br />EB21 E6 25     INC $25 = 27                    A:25 X:04 Y:00 P:25 SP:F3 CYC: 4177<br />EB23 D0 02     BNE $EB27                       A:25 X:04 Y:00 P:25 SP:F3 CYC: 4192<br />EB27 A0 00     LDY #$00                        A:25 X:04 Y:00 P:25 SP:F3 CYC: 4201<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F028 @ F028 = CA  A:25 X:04 Y:00 P:27 SP:F3 CYC: 4207<br />EB2B 60        RTS                             A:CA X:04 Y:00 P:A5 SP:F3 CYC: 4222<br />EA63 85 28     STA $28 = 2E                    A:CA X:04 Y:00 P:A5 SP:F5 CYC: 4240<br />EA65 20 21 EB  JSR $EB21                       A:CA X:04 Y:00 P:A5 SP:F5 CYC: 4249<br />EB21 E6 25     INC $25 = 28                    A:CA X:04 Y:00 P:A5 SP:F3 CYC: 4267<br />EB23 D0 02     BNE $EB27                       A:CA X:04 Y:00 P:25 SP:F3 CYC: 4282<br />EB27 A0 00     LDY #$00                        A:CA X:04 Y:00 P:25 SP:F3 CYC: 4291<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F029 @ F029 = CB  A:CA X:04 Y:00 P:27 SP:F3 CYC: 4297<br />EB2B 60        RTS                             A:CB X:04 Y:00 P:A5 SP:F3 CYC: 4312<br />EA68 85 33     STA $33 = 20                    A:CB X:04 Y:00 P:A5 SP:F5 CYC: 4330<br />EA6A 20 21 EB  JSR $EB21                       A:CB X:04 Y:00 P:A5 SP:F5 CYC: 4339<br />EB21 E6 25     INC $25 = 29                    A:CB X:04 Y:00 P:A5 SP:F3 CYC: 4357<br />EB23 D0 02     BNE $EB27                       A:CB X:04 Y:00 P:25 SP:F3 CYC: 4372<br />EB27 A0 00     LDY #$00                        A:CB X:04 Y:00 P:25 SP:F3 CYC: 4381<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F02A @ F02A = 4E  A:CB X:04 Y:00 P:27 SP:F3 CYC: 4387<br />EB2B 60        RTS                             A:4E X:04 Y:00 P:25 SP:F3 CYC: 4402<br />EA6D 85 30     STA $30 = 06                    A:4E X:04 Y:00 P:25 SP:F5 CYC: 4420<br />EA6F 20 21 EB  JSR $EB21                       A:4E X:04 Y:00 P:25 SP:F5 CYC: 4429<br />EB21 E6 25     INC $25 = 2A                    A:4E X:04 Y:00 P:25 SP:F3 CYC: 4447<br />EB23 D0 02     BNE $EB27                       A:4E X:04 Y:00 P:25 SP:F3 CYC: 4462<br />EB27 A0 00     LDY #$00                        A:4E X:04 Y:00 P:25 SP:F3 CYC: 4471<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F02B @ F02B = 20  A:4E X:04 Y:00 P:27 SP:F3 CYC: 4477<br />EB2B 60        RTS                             A:20 X:04 Y:00 P:25 SP:F3 CYC: 4492<br />EA72 85 31     STA $31 = 00                    A:20 X:04 Y:00 P:25 SP:F5 CYC: 4510<br />EA74 20 21 EB  JSR $EB21                       A:20 X:04 Y:00 P:25 SP:F5 CYC: 4519<br />EB21 E6 25     INC $25 = 2B                    A:20 X:04 Y:00 P:25 SP:F3 CYC: 4537<br />EB23 D0 02     BNE $EB27                       A:20 X:04 Y:00 P:25 SP:F3 CYC: 4552<br />EB27 A0 00     LDY #$00                        A:20 X:04 Y:00 P:25 SP:F3 CYC: 4561<br />EB29 B1 25     LDA &#40;$25&#41;,Y = F02C @ F02C = 06  A:20 X:04 Y:00 P:27 SP:F3 CYC: 4567<br />EB2B 60        RTS                             A:06 X:04 Y:00 P:25 SP:F3 CYC: 4582<br />EA77 85 32     STA $32 = 25                    A:06 X:04 Y:00 P:25 SP:F5 CYC: 4600<br />EA79 86 34     STX $34 = 02                    A:06 X:04 Y:00 P:25 SP:F5 CYC: 4609<br />EA7B A9 00     LDA #$00                        A:06 X:04 Y:00 P:25 SP:F5 CYC: 4618<br />EA7D 85 2F     STA $2F = 00                    A:00 X:04 Y:00 P:27 SP:F5 CYC: 4624<br />EA7F 18        CLC                             A:00 X:04 Y:00 P:27 SP:F5 CYC: 4633<br />EA80 20 E7 EA  JSR $EAE7                       A:00 X:04 Y:00 P:26 SP:F5 CYC: 4639<br />EAE7 08        PHP                             A:00 X:04 Y:00 P:26 SP:F3 CYC: 4657<br />EAE8 A0 00     LDY #$00                        A:00 X:04 Y:00 P:26 SP:F2 CYC: 4666<br />EAEA 20 2B 00  JSR $002B                       A:00 X:04 Y:00 P:26 SP:F2 CYC: 4672<br />002B FA       *NOP                             A:00 X:04 Y:00 P:26 SP:F0 CYC: 4690<br />002C F0 EA     BEQ $0018                       A:00 X:04 Y:00 P:26 SP:F0 CYC: 4696<br /></div><br /><br />Something's really amiss... If it's not too much of a hassle, could you please attach the complete test log? That way I can compare instruction by instruction, hopefully it should shed some light...<br /><br />Thanks!<br /><br /><br /><strong>Edit: </strong>The test_cpu_exec_space_apu.nes test fails with the error.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">4000 00 ERROR<br />Mysteriously landed at $4002</div><br /><br />Could that have something to do with it?<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5192">crudelios</a> — Thu Mar 29, 2012 3:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-03-26T17:33:07-07:00</updated>
<published>2012-03-26T17:33:07-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91849#p91849</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91849#p91849"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91849#p91849"><![CDATA[
Here is the first run of the opcode loop, beginning from stx num_fails and ending at the first successful invocation of opcode_buffer.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">EA46  86 21     stx $21 = 00                    A:20 X:00 Y:00 P:26 SP:FB CYC:137 SL:254<br />EA48  86 22     stx $22 = 00                    A:20 X:00 Y:00 P:26 SP:FB CYC:146 SL:254<br />EA4A  86 23     stx $23 = 00                    A:20 X:00 Y:00 P:26 SP:FB CYC:155 SL:254<br />EA4C  20 21 EB  jsr $EB21                       A:20 X:00 Y:00 P:26 SP:FB CYC:164 SL:254<br />EB21  E6 25     inc $25 = 17                    A:20 X:00 Y:00 P:26 SP:F9 CYC:182 SL:254<br />EB23  D0 02     bne $EB27                       A:20 X:00 Y:00 P:24 SP:F9 CYC:197 SL:254<br />EB27  A0 00     ldy #$00                        A:20 X:00 Y:00 P:24 SP:F9 CYC:206 SL:254<br />EB29  B1 25     lda &#40;$25&#41;,y = F018 @ F018 = 0E  A:20 X:00 Y:00 P:26 SP:F9 CYC:212 SL:254<br />EB2B  60        rts                             A:0E X:00 Y:00 P:24 SP:F9 CYC:227 SL:254<br />EA4F  F0 46     beq $EA97                       A:0E X:00 Y:00 P:24 SP:FB CYC:245 SL:254<br />EA51  C9 02     cmp #$02                        A:0E X:00 Y:00 P:24 SP:FB CYC:251 SL:254<br />EA53  F0 57     beq $EAAC                       A:0E X:00 Y:00 P:25 SP:FB CYC:257 SL:254<br />EA55  90 44     bcc $EA9B                       A:0E X:00 Y:00 P:25 SP:FB CYC:263 SL:254<br />EA57  85 27     sta $27 = 00                    A:0E X:00 Y:00 P:25 SP:FB CYC:269 SL:254<br />EA59  85 2B     sta $2B = 00                    A:0E X:00 Y:00 P:25 SP:FB CYC:278 SL:254<br />EA5B  20 21 EB  jsr $EB21                       A:0E X:00 Y:00 P:25 SP:FB CYC:287 SL:254<br />EB21  E6 25     inc $25 = 18                    A:0E X:00 Y:00 P:25 SP:F9 CYC:305 SL:254<br />EB23  D0 02     bne $EB27                       A:0E X:00 Y:00 P:25 SP:F9 CYC:320 SL:254<br />EB27  A0 00     ldy #$00                        A:0E X:00 Y:00 P:25 SP:F9 CYC:329 SL:254<br />EB29  B1 25     lda &#40;$25&#41;,y = F019 @ F019 = 20  A:0E X:00 Y:00 P:27 SP:F9 CYC:335 SL:254<br />EB2B  60        rts                             A:20 X:00 Y:00 P:25 SP:F9 CYC:  9 SL:255<br />EA5E  85 29     sta $29 = 00                    A:20 X:00 Y:00 P:25 SP:FB CYC: 27 SL:255<br />EA60  20 21 EB  jsr $EB21                       A:20 X:00 Y:00 P:25 SP:FB CYC: 36 SL:255<br />EB21  E6 25     inc $25 = 19                    A:20 X:00 Y:00 P:25 SP:F9 CYC: 54 SL:255<br />EB23  D0 02     bne $EB27                       A:20 X:00 Y:00 P:25 SP:F9 CYC: 69 SL:255<br />EB27  A0 00     ldy #$00                        A:20 X:00 Y:00 P:25 SP:F9 CYC: 78 SL:255<br />EB29  B1 25     lda &#40;$25&#41;,y = F01A @ F01A = 06  A:20 X:00 Y:00 P:27 SP:F9 CYC: 84 SL:255<br />EB2B  60        rts                             A:06 X:00 Y:00 P:25 SP:F9 CYC: 99 SL:255<br />EA63  85 28     sta $28 = 00                    A:06 X:00 Y:00 P:25 SP:FB CYC:117 SL:255<br />EA65  20 21 EB  jsr $EB21                       A:06 X:00 Y:00 P:25 SP:FB CYC:126 SL:255<br />EB21  E6 25     inc $25 = 1A                    A:06 X:00 Y:00 P:25 SP:F9 CYC:144 SL:255<br />EB23  D0 02     bne $EB27                       A:06 X:00 Y:00 P:25 SP:F9 CYC:159 SL:255<br />EB27  A0 00     ldy #$00                        A:06 X:00 Y:00 P:25 SP:F9 CYC:168 SL:255<br />EB29  B1 25     lda &#40;$25&#41;,y = F01B @ F01B = 00  A:06 X:00 Y:00 P:27 SP:F9 CYC:174 SL:255<br />EB2B  60        rts                             A:00 X:00 Y:00 P:27 SP:F9 CYC:189 SL:255<br />EA68  85 33     sta $33 = 00                    A:00 X:00 Y:00 P:27 SP:FB CYC:207 SL:255<br />EA6A  20 21 EB  jsr $EB21                       A:00 X:00 Y:00 P:27 SP:FB CYC:216 SL:255<br />EB21  E6 25     inc $25 = 1B                    A:00 X:00 Y:00 P:27 SP:F9 CYC:234 SL:255<br />EB23  D0 02     bne $EB27                       A:00 X:00 Y:00 P:25 SP:F9 CYC:249 SL:255<br />EB27  A0 00     ldy #$00                        A:00 X:00 Y:00 P:25 SP:F9 CYC:258 SL:255<br />EB29  B1 25     lda &#40;$25&#41;,y = F01C @ F01C = 25  A:00 X:00 Y:00 P:27 SP:F9 CYC:264 SL:255<br />EB2B  60        rts                             A:25 X:00 Y:00 P:25 SP:F9 CYC:279 SL:255<br />EA6D  85 30     sta $30 = 00                    A:25 X:00 Y:00 P:25 SP:FB CYC:297 SL:255<br />EA6F  20 21 EB  jsr $EB21                       A:25 X:00 Y:00 P:25 SP:FB CYC:306 SL:255<br />EB21  E6 25     inc $25 = 1C                    A:25 X:00 Y:00 P:25 SP:F9 CYC:324 SL:255<br />EB23  D0 02     bne $EB27                       A:25 X:00 Y:00 P:25 SP:F9 CYC:339 SL:255<br />EB27  A0 00     ldy #$00                        A:25 X:00 Y:00 P:25 SP:F9 CYC:  7 SL:256<br />EB29  B1 25     lda &#40;$25&#41;,y = F01D @ F01D = FA  A:25 X:00 Y:00 P:27 SP:F9 CYC: 13 SL:256<br />EB2B  60        rts                             A:FA X:00 Y:00 P:A5 SP:F9 CYC: 28 SL:256<br />EA72  85 31     sta $31 = 00                    A:FA X:00 Y:00 P:A5 SP:FB CYC: 46 SL:256<br />EA74  20 21 EB  jsr $EB21                       A:FA X:00 Y:00 P:A5 SP:FB CYC: 55 SL:256<br />EB21  E6 25     inc $25 = 1D                    A:FA X:00 Y:00 P:A5 SP:F9 CYC: 73 SL:256<br />EB23  D0 02     bne $EB27                       A:FA X:00 Y:00 P:25 SP:F9 CYC: 88 SL:256<br />EB27  A0 00     ldy #$00                        A:FA X:00 Y:00 P:25 SP:F9 CYC: 97 SL:256<br />EB29  B1 25     lda &#40;$25&#41;,y = F01E @ F01E = 25  A:FA X:00 Y:00 P:27 SP:F9 CYC:103 SL:256<br />EB2B  60        rts                             A:25 X:00 Y:00 P:25 SP:F9 CYC:118 SL:256<br />EA77  85 32     sta $32 = 00                    A:25 X:00 Y:00 P:25 SP:FB CYC:136 SL:256<br />EA79  86 34     stx $34 = 00                    A:25 X:00 Y:00 P:25 SP:FB CYC:145 SL:256<br />EA7B  A9 00     lda #$00                        A:25 X:00 Y:00 P:25 SP:FB CYC:154 SL:256<br />EA7D  85 2F     sta $2F = 00                    A:00 X:00 Y:00 P:27 SP:FB CYC:160 SL:256<br />EA7F  18        clc                             A:00 X:00 Y:00 P:27 SP:FB CYC:169 SL:256<br />EA80  20 E7 EA  jsr $EAE7                       A:00 X:00 Y:00 P:26 SP:FB CYC:175 SL:256<br />EAE7  08        php                             A:00 X:00 Y:00 P:26 SP:F9 CYC:193 SL:256<br />EAE8  A0 00     ldy #$00                        A:00 X:00 Y:00 P:26 SP:F8 CYC:202 SL:256<br />EAEA  20 2B 00  jsr $002B                       A:00 X:00 Y:00 P:26 SP:F8 CYC:208 SL:256<br />002B  0E F0 EA  asl $EAF0 = 28                  A:00 X:00 Y:00 P:26 SP:F6 CYC:226 SL:256<br />002E  60        rts                             A:00 X:00 Y:00 P:24 SP:F6 CYC:244 SL:256</div> Where does your code lose sync?<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Mon Mar 26, 2012 5:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[crudelios]]></name></author>
<updated>2012-03-26T17:30:00-07:00</updated>
<published>2012-03-26T17:30:00-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91848#p91848</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91848#p91848"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91848#p91848"><![CDATA[
Well, you're right, the most recent version does jump to $002B, however it still loads the FA opcode instead of 0E.<br /><br />The culprit seems to be this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">EB29 B1 25     LDA &#40;$25&#41;,Y = F026 @ F026 = FA  A:CA X:04 Y:00 P:27 SP:F3 CYC: 3994</div><br /><br />Later it STAs that FA to $2B...<br /><br />Edit: I'll try to figure it out, it should be something rather straightforward once I find the bug. Thanks for all your help!<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5192">crudelios</a> — Mon Mar 26, 2012 5:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-03-26T17:30:32-07:00</updated>
<published>2012-03-26T17:15:33-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91847#p91847</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91847#p91847"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91847#p91847"><![CDATA[
Here is a "egrep -A2 'st[axy] \$2[789ABCDE]|jsr \$00' " of the assembly trace of my emulator running the test, capturing all the JSRs into RAM locations, as well as the writes into the opcode_buffer.<br /><a href="http://bisqwit.iki.fi/src/nes_tests/cpu_dummy_writes_ram_jsr_grep.txt" class="postlink">Full log here</a><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">EAEA  20 2B 00  jsr $002B                       A:00 X:00 Y:00 P:26 SP:F8 CYC:208 SL:256<br />002B  0E F0 EA  asl $EAF0 = 28                  A:00 X:00 Y:00 P:26 SP:F6 CYC:226 SL:256<br />002E  60        rts                             A:00 X:00 Y:00 P:24 SP:F6 CYC:244 SL:256<br />--<br />EB0A  20 27 00  jsr $0027                       A:25 X:00 Y:00 P:26 SP:F9 CYC: 61 SL:242<br />0027  0E 06 20  asl $2006 = FF                  A:25 X:00 Y:00 P:26 SP:F7 CYC: 79 SL:242<br />002A  60        rts                             A:25 X:00 Y:00 P:24 SP:F7 CYC: 97 SL:242</div><br />EDIT: I do suddenly recall I removed a redundant double-byte variable earlier today, explaining the address difference of $002D v.s. $002B. Still, try to figure out what causes the wrong byte to be put into the opcode buffer. There should not be anything special in it; it's just reading bytes from a stream and interpreting them. The $FA byte is part of that stream, but it is never placed in opcode_buffer unless there is an undiagnosed malfunction.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Mon Mar 26, 2012 5:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[crudelios]]></name></author>
<updated>2012-03-26T17:05:54-07:00</updated>
<published>2012-03-26T17:05:54-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91846#p91846</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91846#p91846"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91846#p91846"><![CDATA[
Thanks for your suggestion!<br /><br />However, I have unofficial opcodes implemented and working (they pass blargg's tests), but I double-checked just in case and the ones you use shouldn't cause problems.<br /><br />I've been doing a little disassembling and found out that "jsr opcode_buffer+4" lands at memory addr $002D, and executes the FA opcode, which is an unofficial single byte NOP. I believe it really shouldn't be FA.<br /><br />Then the emu reads F0 EA from $002E (the correct values for opcode_buffer+5 and opcode_buffer+6), which translates to BEQ $001A. All hell breaks loose from there.<br /><br />Something subtle is definitely going on...<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5192">crudelios</a> — Mon Mar 26, 2012 5:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-03-26T16:32:54-07:00</updated>
<published>2012-03-26T16:32:54-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91845#p91845</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91845#p91845"/>
<title type="html"><![CDATA[CPU-test: cpu_dummy_writes [DONE]]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=8738&amp;p=91845#p91845"><![CDATA[
<div class="quotetitle">crudelios wrote:</div><div class="quotecontent"><br />My emu is hanging on the "Verifying opcodes.." part of the ppuwrite test :(<br /><br />Do you know what might be wrong? The culprit seems to be the "jsr opcode_buffer+4" at the @opcode_test_once routine...<br /></div><br />The "jsr opcode_buffer+4" is a dry-run of the opcode. The purpose is to allow the user to see something on the screen, in case the emulator does not support the opcode, rather than having the screen blanked out while it crashes.<br />You have not implemented unofficial opcodes. If you do not want to implement the opcodes properly, just implement them as various-size NOPs.<br />The opcodes tested in these tests are:<div class="codetitle"><b>Code:</b></div><div class="codecontent">        ; Opcodes to test:<br />        ; * 0E &#40;RMW&#41; ASL abs    U 0F &#40;RMW&#41; SLO abs  &#40;ASL+ORA&#41;<br />        ; * 2E &#40;RMW&#41; ROL abs    U 2F &#40;RMW&#41; RLA abs  &#40;ROL+AND&#41;<br />        ; * 4E &#40;RMW&#41; LSR abs    U 4F &#40;RMW&#41; SRE abs  &#40;LSR+EOR&#41;<br />        ; * 6E &#40;RMW&#41; ROR abs    U 6F &#40;RMW&#41; RRA abs  &#40;ROR+ADC&#41;<br />        ; * CE &#40;RMW&#41; DEC abs    U CF &#40;RMW&#41; DCP abs  &#40;DEC+CMP&#41;<br />        ; * EE &#40;RMW&#41; INC abs    U EF &#40;RMW&#41; ISB abs  &#40;INC+SBC&#41;<br />        ;<br />        ; * 1E &#40;RMW&#41; ASL absx   U 1F &#40;RMW&#41; SLO absx  &#40;ASL+ORA&#41;  U 1B &#40;RMW&#41; SLO absy  &#40;ASL+ORA&#41;<br />        ; * 3E &#40;RMW&#41; ROL absx   U 3F &#40;RMW&#41; RLA absx  &#40;ROL+AND&#41;  U 3B &#40;RMW&#41; RLA absy  &#40;ROL+AND&#41;<br />        ; * 5E &#40;RMW&#41; LSR absx   U 5F &#40;RMW&#41; SRE absx  &#40;LSR+EOR&#41;  U 5B &#40;RMW&#41; SRE absy  &#40;LSR+EOR&#41;<br />        ; * 7E &#40;RMW&#41; ROR absx   U 7F &#40;RMW&#41; RRA absx  &#40;ROR+ADC&#41;  U 7B &#40;RMW&#41; RRA absy  &#40;ROR+ADC&#41;<br />        ; * DE &#40;RMW&#41; DEC absx   U DF &#40;RMW&#41; DCP absx  &#40;DEC+CMP&#41;  U DB &#40;RMW&#41; DCP absy  &#40;DEC+CMP&#41;<br />        ; * FE &#40;RMW&#41; INC absx   U FF &#40;RMW&#41; ISB absx  &#40;INC+SBC&#41;  U FB &#40;RMW&#41; ISB absy  &#40;INC+SBC&#41;<br />        ;<br />        ; K 12 &#40;RMW&#41; ASL ix     U 03 &#40;RMW&#41; SLO ix   &#40;ASL+ORA&#41;  U 13 &#40;RMW&#41; SLO iy  &#40;ASL+ORA&#41;<br />        ; K 32 &#40;RMW&#41; ROL ix     U 23 &#40;RMW&#41; RLA ix   &#40;ROL+AND&#41;  U 33 &#40;RMW&#41; RLA iy  &#40;ROL+AND&#41;<br />        ; K 52 &#40;RMW&#41; LSR ix     U 43 &#40;RMW&#41; SRE ix   &#40;LSR+EOR&#41;  U 53 &#40;RMW&#41; SRE iy  &#40;LSR+EOR&#41;<br />        ; K 72 &#40;RMW&#41; ROR ix     U 63 &#40;RMW&#41; RRA ix   &#40;ROR+ADC&#41;  U 73 &#40;RMW&#41; RRA iy  &#40;ROR+ADC&#41;<br />        ; K D2 &#40;RMW&#41; DEC ix     U C3 &#40;RMW&#41; DCP ix   &#40;DEC+CMP&#41;  U D3 &#40;RMW&#41; DCP iy  &#40;DEC+CMP&#41;<br />        ; K F2 &#40;RMW&#41; INC ix     U E3 &#40;RMW&#41; ISB ix   &#40;INC+SBC&#41;  U F3 &#40;RMW&#41; ISB iy  &#40;INC+SBC&#41;</div><br />With "*" indicating an official opcode, "U" indicating an unofficial opcode, and "K" indicating a buggy KIL/JAM/HLT opcode which obviously can not be tested (and is not tested).<br />All of the "abs", "absx" and "absy" opcodes are three bytes long. All of the "ix" and "iy" opcodes are two bytes long.<br />The SLO opcode does an ASL followed by an ORA. The ASL result is stored into memory, and the ORA result is shown in the register. (The register contents are ignored in this test.)<br />Similarly, RLA does ROL followed by AND; SRE does LSR followed by EOR; RRA does ROR followed by ADC; DCP does a DEC followed by CMP; and ISB does an INC followed by an SBC.<br />If the test is crashing while processing an <em>official</em> opcode, your emulator may have a problem allowing code to be executed from RAM. The official opcodes are tested first, and the test displays the hexadecimal number corresponding to each opcode as it has been tested.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Mon Mar 26, 2012 4:32 pm</p><hr />
]]></content>
</entry>
</feed>