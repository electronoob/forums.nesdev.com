<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Random Number Generation?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Random Number Generation?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6757">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6757</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 06, 2010 6:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Seven pieces. He used 3 bits. Seven of the possibilities deal the piece it corresponds to. (1= I, 2 = O, etc.) When the eighth possibility comes up he increments (or decrements) and wraps around a variable and deals the piece that corresponds to the current value of the variable.</div>
<br />I used this method, which I called "possession arrow", to simulate a uniform randomizer in versions of LJ65 (then called tetramino) prior to 0.33. In that version, I switched to the LRU system to reduce repetition, following Arika's TGM games that use a conceptually similar system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neilbaldwin</b> [ Sat Aug 07, 2010 12:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@Tetris randomiser : just ace! I wish I could think like that <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Sat Aug 07, 2010 2:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This question comes up a lot, so I've thought about it some.
<br /> I'm not sure I'm analyzing it correctly (and I haven't actually
<br /> tested it so take this with agrain of salt <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> )
<br />
<br /> My thought is to take a random number MOD your range and then
<br /> accumulate and hope that the bias accumulates and distributes
<br /> itself over the range. (or the bias ends up "diluted" in the
<br /> accumulation, depending on how you look at it)
<br />
<br /> Choose a range of random numbers that's easy to MOD to your target
<br /> range.
<br />
<br /> So eg if you random number generator returns numbers 0-FF,  
<br /> and you want random numbers in the range 0-1B mask off the lower
<br /> five bits (the next higher power of two, and if you start with
<br /> a range that's a power of two and MOD for a range thats a power
<br /> of two that shouldn't introduce any bias)
<br /> 
<br /> MOD that to your target range
<br />
<br /> Add it to your random number accumulator
<br />
<br /> MOD that to your target range.
<br />
<br /> something like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; return a number in the range 0-1B <br />&nbsp;; start with a random number 0-FF in a<br />&nbsp;; myrand needs to be intialized to be in range<br /><br />&nbsp;; MOD to an easier power of two<br />&nbsp;and #$1F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; the assumption is if a is random in a range<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; that's a power of two this result should be random<br /><br />&nbsp;; MOD that to the target range<br />&nbsp;cmp #$1C<br />&nbsp;bcs ACCUMULATE <br />&nbsp;sbc #$1B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; biased to account for carry clear <br /><br />ACCUMULATE<br />&nbsp;clc<br />&nbsp;adc myrand<br /><br />&nbsp;; MOD to the target range<br />&nbsp;cmp #$1C<br />&nbsp;bcs SAVE_MYRAND <br />&nbsp;sbc #$1B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; biased to account for carry clear <br /><br />SAVE_MYRAND<br />&nbsp;sta myrand<br />&nbsp;rts</div>
<br />
<br />Edit:
<br />
<br /> I forgot to mention you could use the next lesser power of two
<br /> to start and save some MODing.
<br />
<br /> My gut says that the larger the range you start with the better
<br /> off you'll be distribution wise.
<br /> So it becomes something of a trade off between the size of the range
<br /> and the effort spent doing the MOD.
<br />
<br /> I'd guess that using the next lesser power of two probably
<br /> wouldn't make a lot of difference especially if it's close to 
<br /> your target range.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Aug 07, 2010 4:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's one I came up with for use to generate a random value between 0-79, with uniform distribution (for use in Litewall, which has a 10x8 grid it wants to generate random coordinates into):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">random_80:<br />@retry:<br />&nbsp; &nbsp; jsr random_256 ; A = random 8-bit value<br />&nbsp; &nbsp; sec<br />&nbsp; &nbsp; sbc #80<br />&nbsp; &nbsp; bcc @done<br />&nbsp; &nbsp; sbc #80<br />&nbsp; &nbsp; bcc @done<br />&nbsp; &nbsp; sbc #80<br />&nbsp; &nbsp; bcs @retry<br />@done:<br />&nbsp; &nbsp; adc #80<br />&nbsp; &nbsp; rts</div>
<br />It divides by 80 and takes the modulus. This takes care of the first 240 values, leaving 16 extra. In that case, it gets a new random value and tries again. The probability of retrying the first time is 16 in 256, or 1 in 16. The probability of it retrying two times in a row is 1 in 16*16 = 1 in 256, and so on. This means that on average, it takes only slightly longer than random_256, but worst-case, it could take forever, assuming random_256 has an infinite period. If random_256 is a simple 8-bit LFSR, this routine will always terminate, since random_256 would then generate each value every 256 calls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Aug 07, 2010 6:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or in C:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned char rand80&#40;&#41; &#123;<br />&nbsp; unsigned char raw;<br />&nbsp; do &#123;<br />&nbsp; &nbsp; raw = random_256&#40;&#41;;<br />&nbsp; &#125; while &#40;raw &gt;= 240&#41;;<br />&nbsp; return raw % 80;<br />&#125;</div>
<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">If random_256 is a simple 8-bit LFSR, this routine will always terminate</div>
<br />In a video game or a real-time demo, you want the RNG to terminate within a guaranteed amount of cycles so that you don't overflow frame time. In this case, I'd recommend something similar to possession arrow logic for cases where the base RNG returns 240-255: increment a counter by 16 (mod 80) and then combine that with the low bits of the remainder. Or 3 bits for Y and 3 bits plus an LRU unit for X.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dafydd</b> [ Tue Mar 05, 2013 4:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for the necro post, but I didn't see another thread on the topic.<br /><br />I want to produce a large number of random sequences of the numbers 0-15 where each number must occur exactly once. A 4-bit LSFR would make the sequence predictable very quickly, and an 8-bit LSFR (which would be much less predictable) doesn't guarantee that any 4 bits I choose (the last 4 out of 8, for example) do not have the same combination of values in a 16 values long sequence, as far as I know.<br /><br />One solution could be to run fisher-yates on an array of the numbers I want, where the random number (i.e. the index) is taken from the last 4 bits of an 8-bit LSFR (picking the next value or truncating it should it be out of range) that is periodically seeded by the unknowing player by counting the number of frames passed between certain actions (in this case, pulling the trigger on the Zapper). That should give pretty good randomness, but I could be wrong, and I don't even know whether there's a way I could prove myself right or wrong.<br /><br />Another solution could be to keep a table of sequences that are chosen from by the aforementioned frame counter, but that seems like a pretty bad idea considering, uh, [grabs a calculator] there are nearly 21 trillion different possible sequences and each sequence would need 8 bytes of memory for storage. So yeah, very bad idea.<br /><br />So... does anyone feel right away that the 8-bit LSFR + Fisher-Yates solution is also a bad idea, for any reason? In particular, is anyone good enough at math to tell me whether or the sequences that are produced by this method are equally likely to happen, or whether there's a tendency to prefer a particular set of sequences? The delay between trigger pulls is likely to have some kind of normal distribution around 60 frames or so, but other than that... not sure whether I should investigate further or just try it and see how well it works. It's going to be in silico either way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 05, 2013 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What I'd use is a 16-bit LFSR (use Greg Cook's CRC16 from 6502.org) feeding Fisher-Yates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Mar 05, 2013 5:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there any reason you can't do a straightforward shuffle of 16 values in RAM? Write an array with 0-15, then step through each of the 16 entries and swap it with a random entry from the array.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dafydd</b> [ Tue Mar 05, 2013 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How is a &quot;straightforward&quot; shuffle different from Fisher-Yates? It swaps with any value, not just the remaining ones? How does that ensure I don't get more than one of the same value in the sequence?<br /><br />EDIT: Oh, wait. I'm stupid. Sorry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dafydd</b> [ Tue Mar 05, 2013 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now I'm really confused. When swapping a[i] with a[j] in an array of length N, what is the purpose of having 0 &lt;= j &lt;= i (as in Fisher-Yates) when it might as well be 0 &lt;= j &lt;= N-1 (as blargg suggests)? It should have something to do with breaking the (un-)bias, but I don't know for sure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 05, 2013 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In theory, there's a bias in the case of 0 &lt;= j &lt; N. Proof: There are N! distinct permutations after the algorithm. With 0 &lt;= j &lt;= i, there are also N! distinct paths to these permutations. But with 0 &lt;= j &lt; N, there are N^N equally distributed paths. Because N! does not generally divide N^N (example: N = 3; 3! = 6 does not divide 3^3 = 27), these states don't all have the same number of paths to them; therefore bias.<br /><br />But in practice, I dare someone else to prove that this bias is any more noticeable than the limitation that a CRC16 can generate only 65536 of the 2.1×10¹³ distinct permutations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dafydd</b> [ Tue Mar 05, 2013 6:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I drew a trinary tree of possibilities for the array of [1, 2, 3] (i.e. length 3) and came up with 27 leaves, distributed like so:<br /><br />123 x 4<br />132 x 5<br />213 x 5<br />231 x 5<br />312 x 4<br />321 x 4<br /><br />I came up with a more elegant explanation, but tepples beat me to it.<br /><br />Anyway, in this particular case, as tepples suggests, I think I'll run with blargg's version, because it's much easier to implement, and because the bias isn't going to matter, especially since the input will be shuffled from last time anyway.<br /><br />Thanks, guys!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Mar 09, 2013 1:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used ARCFOUR, running several times per frame when nothing else is doing, and including the microphone if it is available.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Tue Mar 12, 2013 5:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Random Number Generation?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is not exactly NES stuff but in my MD game &quot;Glass Breaker&quot; I used this to create some garbage for random enemy business :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MOVE.W (GARBAGE), D0<br />MOVE.W D0, D1<br />NOT.W&nbsp; D1<br />ROR.W&nbsp; #3, D0<br />EOR.W&nbsp; D1, D2<br />ADD.W&nbsp; D1, D0<br />ROL.W&nbsp; #7, D1<br />ADD.W&nbsp; D1, D0<br />EOR.W&nbsp; D2, D0<br />MOVE.W D0, (GARBAGE)</div><br /><br />It takes quite little time and provided me adequate enough output for the things I needed.<br />I did not really spend much time on, just arranged some instructions until I got satisfying result...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>