<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=8549" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-01-24T10:13:06-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=8549</id>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-01-24T10:13:06-07:00</updated>
<published>2012-01-24T10:13:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89222#p89222</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89222#p89222"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89222#p89222"><![CDATA[
Yes, swizzling is another name for it. I don't know about Dreamcast, but that's the word for it in the XBox 360 docs. It's also called "Morton Code" in some academic circles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Jan 24, 2012 10:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-01-24T06:39:15-07:00</updated>
<published>2012-01-24T06:39:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89221#p89221</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89221#p89221"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89221#p89221"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />This organization is good for textures in modern games too, which are often z-order in memory to improve cache coherence.<br /></div><br />Is <a href="http://en.wikipedia.org/wiki/Z-order_curve" class="postlink">Z-order</a> what was called "swizzling" or "twiddling" on the Dreamcast?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 24, 2012 6:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-01-24T05:10:54-07:00</updated>
<published>2012-01-24T05:10:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89218#p89218</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89218#p89218"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89218#p89218"><![CDATA[
Another way people try to reduce the entropy of image data before compression is to traverse the data with a space-filling curve instead of linearly, so that nearby pixels are clumped together instead of favouring horizontal only. (Look up the Hilbert Curve, or Z-Order Curve for examples.)<br /><br />Again, this is something that is kinda specific; good in some cases, waste of time in others, but in the general case for image compression it can provide a significant benefit. CHR memory order already groups things by 8x8 tile, but these curves will group larger and smaller blocks by powers of two (4x4, 16x16, 32x32, etc.) which can be a natural way to organize your tiles anyway. (This organization is good for textures in modern games too, which are often z-order in memory to improve cache coherence.) If you're talking about generic 256x256 pictures (like automatically converted photographs, or something) and not typical game tiles, the benefits might be smaller.<br /><br />This presumes there's something about pixels that are close to each other in the image that can reduce their entropy when grouped together. In practice I don't know how well this holds up for 2-bit images (I'm more used to dealing with larger resolutions / full-colour). If you do end up implementing a generic compression algorithm like LZW or Huffman, it might be worth trying it out with your data traversed in z-order, just to see if it comes out smaller.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Jan 24, 2012 5:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2012-01-23T23:32:43-07:00</updated>
<published>2012-01-23T23:32:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89214#p89214</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89214#p89214"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89214#p89214"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />How exactly would a 6502 take care of bits that don't fit neatly within 8-bit address slots?<br /></div><br />Like this for example (from an INFLATE routine):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Read one bit, return in the C flag<br />getBit:<br />   lsr      bitbuffer<br />   bne      +<br />   lda      &#91;source&#93;,y <br />   inc      source<br />   bne      ++<br />   inc      source+1<br />++:<br />   sec<br />   ror      a <br />   sta      bitbuffer<br />+:<br />   rts<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Mon Jan 23, 2012 11:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-01-23T17:25:36-07:00</updated>
<published>2012-01-23T17:25:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89193#p89193</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89193#p89193"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89193#p89193"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />How exactly would a 6502 take care of bits that don't fit neatly within 8-bit address slots?<br /></div><br />When I work with bits in compression formats I simply use a single stream of data, where bytes (if used) are interleaved with bits. Both the encoder and the decoder have a bit buffer which is nothing but a byte, and as long as this buffer is written to the file (encoder) or read from it (decoder) at the correct times, everything works out beautifully. If there are not enough bits to fill a byte at the end of the stream, I just pad it until the byte is full. At most 7 bits will be wasted this way, and this is not a big deal at all.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jan 23, 2012 5:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-01-23T17:20:46-07:00</updated>
<published>2012-01-23T17:20:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89192#p89192</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89192#p89192"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89192#p89192"><![CDATA[
What do you mean? There are a large number of instructions that operate on bits specifically. (AND, OR, EOR, BIT, ASL, LSR, ROL, ROR...)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Jan 23, 2012 5:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2012-01-23T17:13:55-07:00</updated>
<published>2012-01-23T17:13:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89191#p89191</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89191#p89191"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89191#p89191"><![CDATA[
How exactly would a 6502 take care of bits that don't fit neatly within 8-bit address slots?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Jan 23, 2012 5:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-01-23T15:41:07-07:00</updated>
<published>2012-01-23T15:41:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89188#p89188</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89188#p89188"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89188#p89188"><![CDATA[
Yeah, I know what Codemasters the company is, I was just referring to the compression technique that was being talked about.<br /><br />Oh I didn't realize OP was talking about 2-bit CHR data. I was thinking for nametables. For CHR stuff differencing probably wouldn't help at all. (The best compression application for differencing I've seen in games was for animation data; but I don't know if that would really apply to NES.)<br /><br />Huffman is a pretty good generic compression algorithm. It's not always a good replacement for RLE, but for this purpose it'd probably do much better. (Plus you can do huffman and RLE together, if you really want to... I think fax machines did this?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Jan 23, 2012 3:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-01-23T11:57:52-07:00</updated>
<published>2012-01-23T11:57:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89178#p89178</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89178#p89178"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89178#p89178"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />I don't know what codemasters is<br /></div><br /><a href="http://en.wikipedia.org/wiki/Codemasters" class="postlink"><img src="http://www.codemasters.co.uk/images/layout/age-gate.png" alt="Image" /></a><br />Video game developer. During the NES era, it developed unlicensed NES games such as <a href="http://en.wikipedia.org/wiki/Bee_52" class="postlink">Bee 52</a>, which used a fairly space-efficient image codec that <a href="http://nesdev.com/bbs/viewtopic.php?p=54230#54230" class="postlink">tokumaru reverse engineered</a>. (Not to be confused with <a href="http://en.wikipedia.org/wiki/Action_52" class="postlink">something else 52</a>.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />but a simple scheme that sometimes works well is converting the image byte stream into differences first, so that new[n] = original[n] - original[n-1]. Then to decode it you just need the last value decoded, and you add the new difference byte.<br /></div><br />Difference as a would probably work well for grayscale or truecolor images, which are typically stored with one byte per component. But on planar images such as NES tiles, it's probably better to implement the additions and subtractions bitwise (that is, EOR). Otherwise, differences in more significant (leftmost) bits tend to mask correlations on the less significant (rightmost) bits. PNG gets this wrong.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There needs to be control messages in the stream telling you when to switch bit sizes, or reset the accumulated value, or you could probably combine it with RLE<br /></div><br />Huffman coding on the byte-to-byte differences would produce a short code for a difference of zero, which in turn would end up incorporating some of the desirable aspects of RLE automatically.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />So for pixel values, you can make 0 by itself encode a zero value, 10 encode 1, 110 encode 2, and 111 encode 3.<br /></div><br />What you describe is very similar to what the Codemasters codec does, except it uses the 1-bit code for zero instead of triggered RLE. It's just that anything that handles a pixel at a time instead of a byte at a time is bound to be slow.<br /><br />Making a multicart of NROM games, on the other hand, requires special consideration. A lot of NROM games use a repeated tile (such as a little X) to mark unused space in CHR ROM, so a "repeat last tile" command helps save space. And a lot of tiles use only two colors (0 and 1, 0 and 2, 0 and 3, 1 and 2, 1 and 3, or 2 and 3), so it's useful to have short codes for a plane that's solid $00 or $FF or for a second plane that's a copy or inverted copy of the first. Finally, Shiru's games tend to have a lot of tiles repeated between the two 4 KiB banks of the pattern table ($0000-$0FFF and $1000-$1FFF) for use in tile animation, so it ends up very useful to have a code for repeating 16 bytes starting 4096 bytes back. There are about four ways to decode such 4096-byte repeats, depending on how much free RAM you have and whether you can leave the screen off.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 23, 2012 11:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-01-23T11:23:40-07:00</updated>
<published>2012-01-23T11:23:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89175#p89175</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89175#p89175"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89175#p89175"><![CDATA[
There's <a href="https://hbfs.wordpress.com/2009/04/14/ad-hoc-compression-methods-rle/" class="postlink">an article</a> that talks about predicting pixels and triggered RLE compression.<br /><br />To summarize the article:<br /><br />It's all about looking at pixels above and to the left.<br />You use those two pixels to predict what the pixel will be.  Sort it by how frequently it occurrs.<br />For example, you have 2 to the left and 3 above.  You add your current color to the dedicated list of "2 left, 3 above".  Then you sort every list.  Eventually you know what the most common color for "2 left, 3 above" is.  That becomes 0.  Then the second place becomes 1, third place becomes 2, etc.  So you end up with "predicted image", and a table to go from predictions back to the original.<br /><br />Then you can do "triggered RLE" on that image.  Triggered RLE means that there are no escape codes or anything else to signal an RLE run, instead you look for a value repeating.  That makes it work better for 2bpp data.<br /><br />The compression scheme mentioned in the article missed one major optimization:  Because everything is sorted by how often is occurs, you end up with a lot more zeroes than anything else, and 3s are rarer, since they are what appears least often, so you can optimize the triggered RLE for the case of zeroes.  So for pixel values, you can make 0 by itself encode a zero value, 10 encode 1, 110 encode 2, and 111 encode 3.<br /><br />I also tried this out on 1-bit images, where you get yet another optimization: Every RLE run will alternate between 1s and 0s.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Jan 23, 2012 11:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-01-23T11:01:35-07:00</updated>
<published>2012-01-23T11:01:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89174#p89174</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89174#p89174"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89174#p89174"><![CDATA[
I don't know what codemasters is, but a simple scheme that sometimes works well is converting the image byte stream into differences first, so that new[n] = original[n] - original[n-1]. Then to decode it you just need the last value decoded, and you add the new difference byte.<br /><br />Where the compression applies, is the differences are often small, (a lot of adjacent tiles will probably use tiles that are close in CHR map address). So, you can start representing the differences with a small number of bits (e.g. 1 or 2).<br /><br />There needs to be control messages in the stream telling you when to switch bit sizes, or reset the accumulated value, or you could probably combine it with RLE, but that's implementation details.<br /><br />Anyhow, I've never implemented this on NES, but it is a fairly simple scheme that I've seen work okay in the past. I've only tried it with full-colour images, but I think it would be just as applicable to tiles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Jan 23, 2012 11:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-01-23T09:56:12-07:00</updated>
<published>2012-01-23T09:56:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89172#p89172</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89172#p89172"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89172#p89172"><![CDATA[
<div class="quotetitle">mic_ wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">RLE is bytes to bytes.<br /></div><br />You can RLE units of any size, it doesn't necessarily have to be bytes.</div><br />True, the Codemasters codec can be thought of as like RLE of pixels. What I was trying to say but failed is that most "RLE" image codecs used in the NES's commercial era appear to have operated on a byte level for the sake of speed, despite the loss of horizontal correlation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 23, 2012 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2012-01-23T09:09:55-07:00</updated>
<published>2012-01-23T09:09:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89171#p89171</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89171#p89171"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89171#p89171"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />RLE is bytes to bytes.<br /></div><br />You can RLE units of any size, it doesn't necessarily have to be bytes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Mon Jan 23, 2012 9:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-01-23T08:21:54-07:00</updated>
<published>2012-01-23T08:21:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89169#p89169</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89169#p89169"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89169#p89169"><![CDATA[
RLE is bytes to bytes. Codemasters is bits to bits. Perhaps bytes to bits might be a good compromise: Huffman encode the bytes so that more common horizontal runs are encoded with fewer bits. If I come up with something, I'll let you all know.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 23, 2012 8:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-01-22T23:05:17-07:00</updated>
<published>2012-01-22T23:05:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89155#p89155</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89155#p89155"/>
<title type="html"><![CDATA[Good graphics compression]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8549&amp;p=89155#p89155"><![CDATA[
Anything that works on bytes, rather than bits or pixels, will perform poorly on NES graphics because it won't take advantage of horizontal redundancy in the graphics. LZ is obviously better than RLE, but the best you'll get out of it is 30% of compression or so if you work with bytes. With bit/pixel-oriented schemes you can go as high as 40~45% of compression. These are rough estimates, since this largely depends on the actual graphics being compressed.<br /><br />The Codemasters codec works directly on pixels, which is why it performs so well. It basically tries to define pixels using less bits (yes, less than 2) based on the chances of pixel values following other pixel values in any given section of the CHR data. It also has a kind of RLE that makes it easy to repeat rows.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jan 22, 2012 11:05 pm</p><hr />
]]></content>
</entry>
</feed>