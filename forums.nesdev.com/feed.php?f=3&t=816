<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=816" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-12-13T21:34:14-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=816</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-12-13T21:34:14-07:00</updated>
<published>2005-12-13T21:34:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7410#p7410</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7410#p7410"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7410#p7410"><![CDATA[
diff:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">-  jmp &#40;brktable,x&#41;<br />+  lda brktable,x<br />+  sta zp_lr<br />+  lda brktable+1,x<br />+  sta zp_lr+1<br />+  jmp &#40;zp_lr&#41;</div><br />Of course it becomes an order of magnitude simpler in the degenerate case where the syscall number does not matter (BRK $00 is the same as BRK $01 is the same as BRK $FF), but how is that useful?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 13, 2005 9:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2005-12-13T20:54:58-07:00</updated>
<published>2005-12-13T20:54:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7409#p7409</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7409#p7409"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7409#p7409"><![CDATA[
There's just one problem: there is no "JMP (addr,X)" instruction on the 6502, so you'll have to load the address manually.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Tue Dec 13, 2005 8:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-12-13T20:43:57-07:00</updated>
<published>2005-12-13T20:43:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7408#p7408</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7408#p7408"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7408#p7408"><![CDATA[
<div class="quotetitle">Anonymous wrote:</div><div class="quotecontent"><br />BRK can be useful as a subroutine call.  The BRK handler wouldn't have to check the B flag, nor would it necessarily need to preserve registers (particularly if they are parameters).<br /></div><br />Wouldn't it still need to use A, X, and Y in order to get the syscall number from the byte after the BRK opcode?<br /><br />Same code with IRQ support deleted and with an optimization to use the rare (d,x) mode:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">brkvector:<br />  ; First copy the return address to the zero page, giving a<br />  ; pointer to the syscall number &#40;e.g. $69 in BRK $69&#41;.<br />  pha<br />  txa<br />  pha  ; stack state after: SP | X | A | P | LR_low | LR_high | ...<br />  tsx<br />  lda $104,x<br />  sta zp_lr<br />  lda $105,x<br />  sta zp_lr+1<br /><br />  ; Now read the syscall number.<br />  ldx #0<br />  lda &#40;zp_lr,x&#41;<br /><br />  ; Look up the syscall in the jump table.<br />  asl a<br />  tax<br />  jmp &#40;brktable,x&#41;<br /><br />  ; Each entry in brktable is responsible for pulling arguments that<br />  ; were originally passed in X, A, and P, and then doing RTS.<br />  ; This new BRK handler does not modify the Y register.<br />  ; This code is NOT reentrant because there's a race condition on<br />  ; zp_lr. <br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 13, 2005 8:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-13T14:21:40-07:00</updated>
<published>2005-12-13T14:21:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7400#p7400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7400#p7400"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7400#p7400"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I know that some newer architectures (such as PowerPC) will always consider opcode 0 as illegal and trigger an exception, since a PC pointed to unused memory often causes a zero to be read for the next instruction.<br /></div><br /><br />Modern architectures offer both an MMU to mark unmapped pages as invalid, and bus signals to signal an error for the memory transaction. Taking an exception for undefined instructions is to allow detection of erroneous execution, and emulation of unsupported instructions and modes (for example, unaligned access support and older complex instructions are sometimes removed from the silicion and put in the operating system instead).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Dec 13, 2005 2:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-12-13T10:22:30-07:00</updated>
<published>2005-12-13T10:22:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7387#p7387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7387#p7387"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7387#p7387"><![CDATA[
If you don't implement IRQs in any way (as is the case with most pre-MMC3 games), then BRK can be useful as a subroutine call.  The BRK handler wouldn't have to check the B flag, nor would it necessarily need to preserve registers (particularly if they are parameters).<br /><br />I noticed that some games that don't use IRQs set the IRQ vector to match the RESET vector.  In this scenario, should a bug cause the PC to get corrupted, there's a chance that the game would reset, particularly if the PC ends up in RAM that was cleared to zero and since unused.  I know that some newer architectures (such as PowerPC) will always consider opcode 0 as illegal and trigger an exception, since a PC pointed to unused memory often causes a zero to be read for the next instruction.<p>Statistics: Posted by Guest — Tue Dec 13, 2005 10:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2005-12-13T05:56:10-07:00</updated>
<published>2005-12-13T05:56:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7380#p7380</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7380#p7380"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7380#p7380"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br />Does anyone know of any games that actually use the BRK opcode? I can't imagine so, as the vector is the same as the sound's, unless you wanted to prematurely process sound code...<br /></div><br /><br />Dragon Warrior 1 uses it, I don't know of any other games that do, but I'm sure there are a few.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Tue Dec 13, 2005 5:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-12T21:11:58-07:00</updated>
<published>2005-12-12T21:11:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7372#p7372</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7372#p7372"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7372#p7372"><![CDATA[
Ugh, I get your point. I guess BRK isn't much use beyond invoking a debugger by changing a single byte.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Dec 12, 2005 9:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-12-12T14:22:40-07:00</updated>
<published>2005-12-12T14:22:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7365#p7365</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7365#p7365"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7365#p7365"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />The way an IRQ handler determines whether the cause was an IRQ of BRK is by examining bit 4 of the byte at the top of the stack (which also contains the saved status flags in other bits).<br /></div><br />Like this?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irqvector:<br />  pha<br />  txa<br />  pha  ; stack state after: SP | X | A | P | LR_low | LR_high | ...<br />  tsx<br />  lda #$10<br />  and $103,x<br />  beq irqhandler<br />  lda $104,x<br />  sta zp_lr<br />  lda $105,x<br />  sta zp_lr+1<br />  tya<br />  pha  ; stack state after: SP | Y | X | A | P | LR_low | LR_high | ...<br />  ldy #0<br />  lda &#40;zp_lr&#41;,y<br />  asl a<br />  tax<br />  jmp &#40;brktable,x&#41;<br /><br />  ; Each entry in brktable is responsible for pulling arguments that<br />  ; were originally passed in Y, X, A, and P, and then doing RTS.<br /><br />irqhandler:<br />  ; &#91;omitted IRQ handler code&#93;<br />  pla<br />  tax<br />  pla<br />  rti<br /></div><br />But then I don't see the point of BRK if it means wasting all this time to save one byte of code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Dec 12, 2005 2:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-12T13:39:54-07:00</updated>
<published>2005-12-12T13:39:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7358#p7358</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7358#p7358"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7358#p7358"><![CDATA[
BRK could be useful as a space-saver; using the second byte as a selector allows calling one of 256 subroutines using two bytes, or one subroutine using only one byte.<br /><br />BRK uses the same vector as IRQ, and the IRQ vector itself is used for more than just the APU interrupts. The scanline interrupts of various mappers (MMC3 for one) also use this vector. Most sound code runs on NMI anyway, so the IRQ vector handler doesn't usually have to decode the source.<br /><br />The way an IRQ handler determines whether the cause was an IRQ of BRK is by examining bit 4 of the byte at the top of the stack (which also contains the saved status flags in other bits). If set, BRK caused invocation, otherwise IRQ. Be sure to ignore all the wrong documentation that claims the existence of a B status flag; there is no such thing, only the confusion created around its non-existence.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Dec 12, 2005 1:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2005-12-12T12:51:14-07:00</updated>
<published>2005-12-12T12:51:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7353#p7353</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7353#p7353"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7353#p7353"><![CDATA[
Does anyone know of any games that actually use the BRK opcode? I can't imagine so, as the vector is the same as the sound's, unless you wanted to prematurely process sound code...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Mon Dec 12, 2005 12:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-11T23:39:06-07:00</updated>
<published>2005-12-11T23:39:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7344#p7344</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7344#p7344"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7344#p7344"><![CDATA[
I have tested reset behavior and reported the result that the stack pointer is decremented by 3, but that the stack is not modified. Maybe the CPU clock is disabled as long as reset is asserted.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Dec 11, 2005 11:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-12-11T19:31:04-07:00</updated>
<published>2005-12-11T19:31:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7343#p7343</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7343#p7343"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7343#p7343"><![CDATA[
Testing #1 would be easy: On reset, skip 'ldx #$ff; txs'; instead, play a tone with $4002=SP and $4003=1.<br /><br />I think RESET can be serviced after 'stp' because unlike 'brk', IRQ, and NMI, RESET loads all the control unit state registers with their initial values.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 11, 2005 7:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-12-11T19:18:38-07:00</updated>
<published>2005-12-11T19:18:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7342#p7342</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7342#p7342"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7342#p7342"><![CDATA[
So if I understand that right, when RESET is asserted, the CPU handles the interrupt repeatedly, over and over, without executing any other instructions, until the RESET line is released, at which point it finishes the current interrupt sequence, executes one more interrupt sequence (since RESET was low for part of the previous sequence), then finally starts executing instructions.  This would result in a delay of anywhere from 8 to 14 clock cycles (11 on average).<br /><br />There are still a couple of things that don't make sense to me:<br /><br />1. It was measured that if the system was reset, the stack pointer was decremented by 3, and that on powerup it was initialized to $FD (with other registers initialized to $00 ).  If RESET were processed multiple times, would that not cause SP to change repeatedly, ending at an unpredictable state?<br /><br />2. Interrupts can only be serviced after an instruction completes (i.e. IRQs and NMIs won't occur at all if a bad opcode (HLT) is executed).  Why, then, can RESET be serviced when the CPU is locked up?<p>Statistics: Posted by Guest — Sun Dec 11, 2005 7:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kevtris]]></name></author>
<updated>2005-12-10T20:03:08-07:00</updated>
<published>2005-12-10T20:03:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7331#p7331</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7331#p7331"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7331#p7331"><![CDATA[
<div class="quotetitle">teaguecl wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Reset takes longer than 7 cycles because it takes a long time for the player to press and release the reset button. Or are you talking about something more subtle?<br /></div><br /><br />I think they mean it takes 7 cycles, starting from when the RESET signal is de-asserted.  When a user holds the reset button, the RESET signal is asserted, and the cpu can be considered "in reset", a condition that will persist until the RESET signal become de-asserted.  Though I don't know how to test that reset lasts 7 cycles without manually clocking your CPU.</div><br /><br />All interrupts function pretty much the same on the 6502...  reset, NMI, IRQ, and BRK are all interrupts.  Judging from the 6502 chip schematic, the opcode 00h is forced into the opcode latch for ANY interrupt.  Think of reset as a high priority level sensitive NMI.  One small quirk of reset is that it still tries to push the return address onto the stack, but R/W is forced high, preventing the write.  The SP still decrements and all that just like it does on any other interrupt.<br /><br />The reset thus should take as many cycles as any other "real" interrupt.  The only difference between NMI, reset, and IRQ is the enabling circuitry and edge detection (on NMI only) and the I flag of course... all of which are done before the interrupt signals are fed to a priority encoder which selects the desired vector.  fffeh is the "default" vector, which is why IRQ and BRK share the vector.  The B flag is not a flag at all, but a signal from the opcode fetch circuitry.  <br /><br />So, getting back to the APU thinger, the seemingly random number of cycles that it delays for the APU is most likely caused by when the reset signal is de-asserted during the interrupt sequence... theoretically you could get a lag of up to 6-7 cycles.  The APU's counters are probably just connected to /RST like everything else so when reset is deasserted there, it happens "instantly" with respect to the 6502 core.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=230">kevtris</a> — Sat Dec 10, 2005 8:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-12-10T15:37:24-07:00</updated>
<published>2005-12-10T15:37:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7329#p7329</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7329#p7329"/>
<title type="html"><![CDATA[BRK flag alterations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=816&amp;p=7329#p7329"><![CDATA[
One thing I remember hearing was that on reset, the APU frame counter begins running 9 to 12 cycles before program execution starts.  Since the APU is part of the CPU, I would suspect that it would start in sync with the CPU starting.<br /><br />I cannot think of a software solution that could be used to measure RESET length, unless the lockout chip's exact timing is known (which I doubt).  A hardware solution could be done by manually controlling RESET and, upon releasing it, watching M2 and seeing how many times it is clocked before $FFFC and $FFFD are read.<p>Statistics: Posted by Guest — Sat Dec 10, 2005 3:37 pm</p><hr />
]]></content>
</entry>
</feed>