<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Progress Thread - Project Blue</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Progress Thread - Project Blue</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=33&amp;t=16785">http://forums.nesdev.com/viewtopic.php?f=33&amp;t=16785</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>toggle switch</b> [ Wed Feb 07, 2018 8:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />honestly i'll probably need some help moving to another mapper. <br /><br />is there a document somewhere that covers linker files and how they work? or a sample GTROM project in NESICIDE? i can't seem to find any relevant pages on how this stuff works and how to set it up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Feb 07, 2018 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The official documentation of linker configuration files is <a href="https://cc65.github.io/doc/ld65.html" class="postlink">ld65 Users Guide</a>. You'll need a MEMORY area for each 32K bank and probably for the pseudo-fixed bank. If you want, I could make a BNROM version of my <a href="https://github.com/pinobatch/snrom-template/" class="postlink">SNROM/UNROM template</a>. This should help because GTROM is the same as BNROM except for the port moved down to $5000 and bank switching of CHR RAM and nametable memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Wed Feb 07, 2018 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I setup a gtrom configuration for ca65 last week. You also need to do some trickery to setup the fixed segments. I can post that too if you want.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY {<br />&nbsp; &nbsp; ZP:&nbsp; &nbsp; &nbsp;start = $00, size = $100, type = rw;<br />&nbsp; &nbsp; HEADER: start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;<br />&nbsp; &nbsp; RAM:&nbsp; &nbsp; start = $0300, size = $0500, type = rw;<br /><br />&nbsp; &nbsp; PRG0:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $0, bank=0;<br />&nbsp; &nbsp; PRG1:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $1, bank=1;<br />&nbsp; &nbsp; PRG2:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $2, bank=2;<br />&nbsp; &nbsp; PRG3:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $3, bank=3;<br />&nbsp; &nbsp; PRG4:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $4, bank=4;<br />&nbsp; &nbsp; PRG5:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $5, bank=5;<br />&nbsp; &nbsp; PRG6:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $6, bank=6;<br />&nbsp; &nbsp; PRG7:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $7, bank=7;<br />&nbsp; &nbsp; PRG8:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $8, bank=8;<br />&nbsp; &nbsp; PRG9:&nbsp; &nbsp; &nbsp;start = $8000, size = $8000, file = %O, fill = yes, fillval = $9, bank=9;<br />&nbsp; &nbsp; PRG10:&nbsp; &nbsp; start = $8000, size = $8000, file = %O, fill = yes, fillval = $A, bank=10;<br />&nbsp; &nbsp; PRG11:&nbsp; &nbsp; start = $8000, size = $8000, file = %O, fill = yes, fillval = $B, bank=11;<br />&nbsp; &nbsp; PRG12:&nbsp; &nbsp; start = $8000, size = $8000, file = %O, fill = yes, fillval = $C, bank=12;<br />&nbsp; &nbsp; PRG13:&nbsp; &nbsp; start = $8000, size = $8000, file = %O, fill = yes, fillval = $D, bank=13;<br />&nbsp; &nbsp; PRG14:&nbsp; &nbsp; start = $8000, size = $8000, file = %O, fill = yes, fillval = $E, bank=14;<br />&nbsp; &nbsp; PRG15:&nbsp; &nbsp; start = $8000, size = $8000, file = %O, fill = yes, fillval = $F, bank=15;<br /><br />}<br /><br />SEGMENTS {<br />&nbsp; &nbsp; INESHDR:&nbsp; load = HEADER, type = ro, align = $10;<br />&nbsp; &nbsp; ZEROPAGE: load = ZP, type = zp;<br />&nbsp; &nbsp; BSS:&nbsp; &nbsp; &nbsp; load = RAM, type = bss, define = yes, align = $100;<br /><br />&nbsp; &nbsp; FIXED0:&nbsp; &nbsp;load = PRG0, type = ro, align = $100;<br />&nbsp; &nbsp; B0:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG0, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS0: load = PRG0, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED1:&nbsp; &nbsp;load = PRG1, type = ro, align = $100;<br />&nbsp; &nbsp; B1:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG1, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS1: load = PRG1, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED2:&nbsp; &nbsp;load = PRG2, type = ro, align = $100;<br />&nbsp; &nbsp; B2:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG2, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS2: load = PRG2, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED3:&nbsp; &nbsp;load = PRG3, type = ro, align = $100;<br />&nbsp; &nbsp; B3:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG3, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS3: load = PRG3, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED4:&nbsp; &nbsp;load = PRG4, type = ro, align = $100;<br />&nbsp; &nbsp; B4:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG4, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS4: load = PRG4, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED5:&nbsp; &nbsp;load = PRG5, type = ro, align = $100;<br />&nbsp; &nbsp; B5:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG5, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS5: load = PRG5, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED6:&nbsp; &nbsp;load = PRG6, type = ro, align = $100;<br />&nbsp; &nbsp; B6:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG6, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS6: load = PRG6, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED7:&nbsp; &nbsp;load = PRG7, type = ro, align = $100;<br />&nbsp; &nbsp; B7:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG7, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS7: load = PRG7, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED8:&nbsp; &nbsp;load = PRG8, type = ro, align = $100;<br />&nbsp; &nbsp; B8:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG8, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS8: load = PRG8, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED9:&nbsp; &nbsp;load = PRG9, type = ro, align = $100;<br />&nbsp; &nbsp; B9:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG9, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS9: load = PRG9, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED10:&nbsp; &nbsp;load = PRG10, type = ro, align = $100;<br />&nbsp; &nbsp; B10:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG10, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS10: load = PRG10, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED11:&nbsp; &nbsp;load = PRG11, type = ro, align = $100;<br />&nbsp; &nbsp; B11:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG11, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS11: load = PRG11, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED12:&nbsp; &nbsp;load = PRG12, type = ro, align = $100;<br />&nbsp; &nbsp; B12:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG12, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS12: load = PRG12, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED13:&nbsp; &nbsp;load = PRG13, type = ro, align = $100;<br />&nbsp; &nbsp; B13:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG13, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS13: load = PRG13, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED14:&nbsp; &nbsp;load = PRG14, type = ro, align = $100;<br />&nbsp; &nbsp; B14:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG14, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS14: load = PRG14, type = ro, start = $FFFA;<br /><br />&nbsp; &nbsp; FIXED15:&nbsp; &nbsp;load = PRG15, type = ro, align = $100;<br />&nbsp; &nbsp; B15:&nbsp; &nbsp; &nbsp; &nbsp;load = PRG15, type = ro, align = $100;<br />&nbsp; &nbsp; VECTORS15: load = PRG15, type = ro, start = $FFFA;<br />}<br /><br />FILES {<br />&nbsp; &nbsp; %O: format = bin;<br />}<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Feb 07, 2018 8:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ideally you'd want to be able to<br /><br />1)define your &quot;pseudo fixed bank&quot; as a segment.<br />2)in source, place whatever needs to be fixed (ie the bare game engine + probably also music driver) in that segment.<br />3)instruct the linker to paste that segment at the same addr in each bank it needs to be in.<br /><br />That way the &quot;fixed bank&quot; is always the size of the engine and not a byte more, which leaves optimal and maximized space for level/song data - and any plausible extras; like if there were level-specific functions or tables for example.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Wed Feb 07, 2018 9:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Having the engine in the fixed bank makes the programming easier, but it wastes a lot of space. Each fixed byte takes up 16 bytes in the ROM, which is a lot!<br /><br />Technically, all you need in the fixed bank is the vectors, their handlers, and a trampoline for bank switches. Also  DPCM data, if you're using that. The engine code can be placed in a separate 32k bank, and the music engine + songs can exist in their own 32 bank. I think this is how Lizard does things. <br /><br />But this is venturing off into a tangent. My apologies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Feb 07, 2018 9:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Might be a tangent for the compo, but it's a very useful discussion for the project, so please don't feel you need to hold back! It's all very informative, so thanks!<br /><br />Hadn't even considered that. I don't have the source and am not sure i could make sense of it either, but i think we're pretty tight on cycles, NMI-wise especially. <br />Would trampolines like that be a significant increase in cycles?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Each fixed byte takes up 16 bytes in the ROM, which is a lot!</div><br />Only if you need to paste the engine across all banks. As i see it, you'd only need to do so across in-game engine/level banks. A bank strictly for storing graphics to be loaded in bulk between levels wouldn't need it, and titles, cutscenes and such wouldn't need it either. But yeah, i think we'd be looking at 12-14 bytes per &quot;fixed&quot; byte with this method. Fortunately, there's 512k of them if we go this path. On the other hand, *some* trampoline would need to be written at least for loading stuff at certain points.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>toggle switch</b> [ Wed Feb 07, 2018 9:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />honestly, the efficiency of data storage is on the bottom rung of things i care about here. most important is to free up some space, any space. even the inefficient way should yield about 8k, which is far more than i need.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Having the engine in the fixed bank makes the programming easier,</div><br /><br />priority #1. i'm a beginner here, this is my first real project. i'm not interested in making the best thing ever, just a fun game that people can enjoy in a style that i like.<br /><br />thanks for the help, though, i really do appreciate it!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Feb 07, 2018 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's a good thing we can throw lots of inexpensive ROM on the problem post compo.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>toggle switch</b> [ Wed Feb 07, 2018 9:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />do you just keep the 'fixed' bank in it's own file, and the use .incbin to include it in each separate bank, or what?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Feb 07, 2018 9:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">toggle switch wrote:</div><div class="quotecontent">do you just keep the 'fixed' bank in it's own file, and the use .incbin to include it in each separate bank, or what?</div><br />With regard to detailed working steps for causing ca65 and ld65 to emit the code repeated in all banks, I cannot give an authoritative answer for several hours because I am not at a PC on which my NESdev toolchain (Git, Make, cc65, Python, GIMP, Windows or Wine, and FCEUX debugger) is installed. In the meantime, I'll answer the following question:<br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">Would trampolines like that be a significant increase in cycles?</div><br />I'll sketch an untested trampoline for BNROM here for the purpose of estimating how many cycles it would use. Some changes are needed for GTROM because PRG bank is in the same port as CHR and nametable switching, but they should be minimal.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; These parts go in all banks, using a method to be determined<br />; once I am at a PC on which my NESdev toolchain is installed<br /><br />; A ROM location reflecting which bank is currently switched in<br />current_bank: .byte I<br /><br />.proc nmi_handler_prolog<br />&nbsp; pha<br />&nbsp; txa<br />&nbsp; pha<br />&nbsp; tya<br />&nbsp; pha<br /><br />&nbsp; ; Save previous bank<br />&nbsp; lda current_bank&nbsp; ; a location in ROM<br />&nbsp; pha<br />immediate_stmt:<br />&nbsp; lda #&lt;.bank(nmi_handler_body)<br />&nbsp; sta immediate_stmt<br /><br />&nbsp; jmp nmi_handler_body<br />.endproc<br /><br />.proc nmi_handler_epilog<br />&nbsp; pla<br />&nbsp; tax<br />&nbsp; sta identity,x<br /><br />&nbsp; pla<br />&nbsp; tay<br />&nbsp; pla<br />&nbsp; tax<br />&nbsp; pla<br />&nbsp; rti<br />.endproc<br /><br />; This part goes in any bank<br />.segment &quot;MUSICCODE&quot;<br />.proc nmi_handler_body<br />&nbsp; ; TODO: Push display list to OAM<br />&nbsp; ; TODO: Push VRAM changes to CHR RAM and nametable<br />&nbsp; ; TODO: Call music engine<br />&nbsp; ; (Watch out for reentrancy when the NMI might interrupt<br />&nbsp; ; changing music or playing a sound effect!)<br />&nbsp; jmp nmi_handler_epilog<br />.endproc<br /><br />identity:<br />&nbsp; .byte 0, 1, 2, 3<br /></div><br /><br />An NMI handler that does significant work will already be saving and restoring AXY. The parts of this not in a &quot;typical&quot; NMI handler are saving the old bank, switching to the new bank, and the JMP in and out of the body, and restoring the old bank, which total about 30 cycles.<br /><br />The preceding doesn't include the logic to put the prolog and epilog in all banks. To make that, I would need to be at a PC on which my NESdev toolchain is installed.<br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">A bank strictly for storing graphics to be loaded in bulk between levels wouldn't need it</div><br />It'd still need the trampolines in case graphics loading is interrupted, and it'd need the code for decompressing said graphics.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Feb 07, 2018 10:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">do you just keep the 'fixed' bank in it's own file, and the use .incbin to include it in each separate bank, or what?<br /></div><br /><br />i think there are three ways; somewhat combinable:<br /><br />.segment [name] = anything between this directive and the next .segment can be used by the linker to paste the segment exactly where you want it in ROM. this should give you the most convenient control.<br /><br />.inc or .include [filename] = includes a separate source file - you still need to define a .segment, though. <br /><br />.incbin [filename] = includes a separate binary as raw data. This isn't preferable imo as you need to pre-assemble it. It's mainly for assets. also, .segment is still what gives you control over where it is placed in ROM. <br /><br />Correct me if i'm wrong, but I don't think you can escape using .segment in any way without complicating stuff further.<br /><br /><br />Still, i've seen at least one instance where <a href="https://partytimehexcellent.itch.io/" class="postlink">partytimehexcellent</a> .incbinned the famitracker driver + music data at a specified ROM addr to be done with it. This was done to a simpler mapper using another assembler without a linker, though. with the cc65 suite (nesicide included), the linker is supposed to do ROM organization stuff for you - via the linker cfg.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Wed Feb 07, 2018 10:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">honestly, the efficiency of data storage is on the bottom rung of things i care about here</div><br />You could just code it as a 256K UNROM and then use membler's converter program to convert it into 512K GTROM. <br /><br /><div class="quotetitle">toggle switch wrote:</div><div class="quotecontent">do you just keep the 'fixed' bank in it's own file, and the use .incbin to include it in each separate bank, or what?</div><br /><br />I put the code in a macro then do the fixed banks like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro fixed_impl<br />&nbsp; &nbsp; ; fixed code goes here<br />.endmacro<br /><br />.repeat 16, i<br />&nbsp; &nbsp; .segment .concat(&quot;FIXED&quot;, .string(i))<br />&nbsp; &nbsp; .byt i ; Store the current bank at $8000<br />&nbsp; &nbsp; .if i = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; fixed_impl<br />&nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; .scope .ident(.concat(&quot;dummy_scope&quot;, .string(i)))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fixed_impl<br />&nbsp; &nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; .endif<br />.endrepeat</div><br /><br />I've had problems when I tried the include/incbin approach.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>toggle switch</b> [ Wed Feb 07, 2018 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks. i think the macro method should work for me... wasn't aware i could have a macro containing procs and other macros.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Feb 07, 2018 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would be a waste to replicate the entire engine across multiple banks! What I normally do is put data and functions that use that specific type of data in their own banks. For example, all banks that contain level maps will include copies of the routines that prepare rows and columns of tiles for scrolling, and also the routines that test for collisions between objects and level geometry. Banks with compressed graphics will have a copy of the decompression routine, and so on. It's the same principle of having audio data in the same bank as the audio driver.<br /><br />Switching banks in simple mappers like GTROM is pretty fast, so that shouldn't have a significant impact on your vblank bandwidth. I'm obsessed with making the most out of the vblank time myself, so I don't even push A, X and Y to the stack during an expected vblank, I only do it on unexpected vblanks (i.e. lag frames). This is controlled by a flag on bit 7 of some variable (e.g. &quot;FrameRead&quot;) so that it can be checked with BIT without corrupting any registers. The main thread waits for vblank by waiting for this flag to be cleared, and the NMI handler will only bother saving A, X and Y when the flag is already clear when the NMI fires.<br /><br />In the main thread:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; dec FrameReady ;$00 -&gt; $ff<br />WaitForVblank:<br />&nbsp; bit FrameReady<br />&nbsp; bmi WaitForVblank</div><br /><br />In the NMI: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">HandleLagFrame:<br />&nbsp; pha<br />&nbsp; txa<br />&nbsp; pha<br />&nbsp; tya<br />&nbsp; pha<br />&nbsp; jmp DoCommonStuff<br /><br />NMI:<br />&nbsp; bit FrameReady<br />&nbsp; bpl HandleLagFrame<br />&nbsp; ;(update vram)<br /><br />DoCommonStuff:<br />&nbsp; ;(handle the scroll and other raster effects)<br />&nbsp; ;(handle audio updates)<br /><br />&nbsp; inc FrameReady<br />&nbsp; beq Return<br />&nbsp; dec FrameReady<br />&nbsp; pla<br />&nbsp; tay<br />&nbsp; pla<br />&nbsp; tax<br />&nbsp; pla<br /><br />Return:<br />&nbsp; rti</div><br />Something along these lines. Saves a few cycles if you're really really tight on vblank time.<br /><br />As for simulating a fixed bank when using 32KB PRG-ROM switching, you can .include the &quot;fixed bank&quot;, but you have to do something about the repeated labels. One thing you can do is include the file normally only once, and all other times surround it in a new scope:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;FIXED0&quot;<br />.scope<br />&nbsp; .include &quot;fixed.asm&quot;<br />.endscope<br /><br />.segment &quot;FIXED1&quot;<br />.scope<br />&nbsp; .include &quot;fixed.asm&quot;<br />.endscope<br /><br />.segment &quot;FIXED2&quot;<br />.scope<br />&nbsp; .include &quot;fixed.asm&quot;<br />.endscope<br /><br />;(...)<br />.segment &quot;FIXED15&quot;<br />.include &quot;fixed.asm&quot;</div><br />It's similar to the macro approach, but with includes. If you need to put the bank number in each bank, you can just do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.byte &lt;.bank&#40;*&#41;</tt>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Wed Feb 07, 2018 12:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Progress Thread - Project Blue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ld65 does not support pasting a segment to multiple places.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>