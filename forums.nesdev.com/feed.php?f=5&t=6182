<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=6182" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-03-18T22:09:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=6182</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-18T22:09:50-07:00</updated>
<published>2010-03-18T22:09:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58608#p58608</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58608#p58608"/>
<title type="html"><![CDATA[[C] right shifting an int number]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58608#p58608"><![CDATA[
<div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent"><br />In C (and C++) you can just right shift an ordinary signed integral type, it will extend the sign bit (MSB) and the value will be rounded toward negative infinity (that is, -1 &gt;&gt; 1 == 1) -- what you could call a ASR.<br /></div><br />That's implementation-defined, as tepples noted. You could just as well have -1&gt;&gt;1 == INT_MAX. If you want divide by two, write i/2 (unfortunately C99 has standardized on round to zero, rather than the more useful round to negative, which can be implemented by ASR).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Mar 18, 2010 10:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2010-03-18T19:35:09-07:00</updated>
<published>2010-03-18T19:35:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58602#p58602</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58602#p58602"/>
<title type="html"><![CDATA[[C] right shifting an int number]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58602#p58602"><![CDATA[
In C (and C++) you can just right shift an ordinary signed integral type, it will extend the sign bit (MSB) and the value will be rounded toward negative infinity (that is, -1 &gt;&gt; 1 == 1) -- what you could call a ASR. If you right shift a unsigned integral type though, it will just put a zero at the MSB -- like a LSR.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Thu Mar 18, 2010 7:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-16T17:25:04-07:00</updated>
<published>2010-03-16T17:25:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58481#p58481</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58481#p58481"/>
<title type="html"><![CDATA[[C] right shifting an int number]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58481#p58481"><![CDATA[
If you want a portable semi-equivalent, divide by 2. A smart compiler will convert a divide by 2 into a shift and round internally.<br /><br />If you must have a shift but want it portable and don't trust the compiler to optimize /2, convert to offset binary, shift right, then convert back to signed (you might note that the last operation is equivalent to sign the last step of sign extension on the <a href="http://graphics.stanford.edu/~seander/bithacks.html#VariableSignExtend" class="postlink">Bit Twiddling Hacks page</a>):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// equivalent to i&gt;&gt;1 with sign preservation, without depending on<br />// host platform performing said preservation. Can be generalized<br />// to i&gt;&gt;n easily.<br />inline int fast_right_shift&#40; int i &#41;<br />&#123;<br />    // i: INT_MIN   ...   -1          0         ... INT_MAX<br />    unsigned u = &#40;unsigned&#41; i; // no-op on most CPUs<br />    // u: INT_MAX+1 ... UINT_MAX      0         ... INT_MAX<br />    u += &#40;unsigned&#41; INT_MIN;<br />    // u: 0         ... INT_MAX   INT_MAX+1     ... UINT_MAX<br />    u &gt;&gt;= 1;<br />    // u: 0         ... INT_MAX/2 &#40;INT_MAX+1&#41;/2 ... UINT_MAX/2<br />    i = &#40;int&#41; u - &#40;int&#41; &#40;&#40;unsigned&#41; INT_MIN &gt;&gt; 1&#41;;<br />    // i: INT_MIN/2 ...   -1          0         ... INT_MAX/2<br />    return i;<br />&#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Mar 16, 2010 5:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-16T16:47:22-07:00</updated>
<published>2010-03-16T16:47:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58477#p58477</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58477#p58477"/>
<title type="html"><![CDATA[[C] right shifting an int number]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58477#p58477"><![CDATA[
This behavior is implementation-defined. You cannot rely on it if you expect your program to be portable to all platforms capable of running C or C++ programs.<br /><br />But if you care only about popular compilers for popular architectures (x86, PowerPC, ARM), operator &gt;&gt; behaves as follows: <ul><li>Shifting an unsigned integer zero-extends the result. </li><li>Shifting a signed integer sign-extends the result. </li><li>Both shifts "round" toward negative infinity. </li></ul><br />You'll want to use a compile-time assertion in any module that relies on this theoretically nonportable behavior.<br /><br />But your shifting decay itself looks suspect. Ask yourself this: what happens once it gets within (1&lt;&lt;n) of the zero? The behavior becomes inconsistent for positive and negative numbers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Mar 16, 2010 4:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2010-03-16T16:41:08-07:00</updated>
<published>2010-03-16T16:41:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58476#p58476</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58476#p58476"/>
<title type="html"><![CDATA[[C] right shifting an int number]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6182&amp;p=58476#p58476"><![CDATA[
- From what I know, for an integer number (let's say 32bit long), the MSB is 1 if the value is negative; else, equals to 0.<br /><br />- By using a shifting decay, like value -= value &gt;&gt; n; does the MSB take effect? In code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> let's say the binary 1000 0000 0000 0000 0000 0000 0000 0000<br /><br />would right shift 1 result... 0100 0000 0000 0000 0000 0000 0000 0000 ?</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Mar 16, 2010 4:41 pm</p><hr />
]]></content>
</entry>
</feed>