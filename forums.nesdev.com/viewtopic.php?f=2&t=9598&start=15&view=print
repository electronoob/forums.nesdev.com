<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CRC routines as PRNGs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CRC routines as PRNGs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9598">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9598</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Dec 11, 2012 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Super Mario Bros. Pseudo code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if ( (PseudoRandom&#91;0&#93; &amp; 2) ^ (PseudoRandom&#91;1&#93; &amp; 2) ) == 0<br />&nbsp; &nbsp; clc<br />else<br />&nbsp; &nbsp; sec<br />endif<br /><br />for x = 0 to 6 {<br />&nbsp; ror PseudoRandom&#91; x &#93;<br />}<br /></div><br /><br />I should add: PseudoRandom[0] is initialized with $A5.<br /><br />Also you could say:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">c = ( (PseudoRandom&#91;0&#93; &amp; 2) ^ (PseudoRandom&#91;1&#93; &amp; 2) )<br /><br />for x = 0 to 6 {<br />&nbsp; ror PseudoRandom&#91; x &#93;<br />}<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Dec 11, 2012 6:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All LFSRs must have the first bit set.<br /><br /><!-- m --><a class="postlink" href="http://www.newwaveinstruments.com/resources/articles/m_sequence_linear_feedback_shift_register_lfsr/32stages.txt">http://www.newwaveinstruments.com/resou ... stages.txt</a><!-- m --> is a list of many different 32-bit LFSRs; they don't know of any with fewer taps.<br /><br />If you're willing to use a 31-bit LFSR there's a few with just 2 taps: <!-- m --><a class="postlink" href="http://www.newwaveinstruments.com/resources/articles/m_sequence_linear_feedback_shift_register_lfsr/31stages.txt">http://www.newwaveinstruments.com/resou ... stages.txt</a><!-- m --><br /><br />Also, the sequence of all maximal-length LFSRs contain 2ⁿ different 2ⁱ-bit-long sequences of both 1 and 0, where 2⁽ⁿ⁺ⁱ⁾-1=LFSR period length.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Tue Dec 11, 2012 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">It works wonders to me, and is very fast.</div><br />I checked my code few times (difficult to make a mistake), and what I'm getting from this is this picture - totally not random. I'm just generating two 8-bit number with this code to get X,Y for a point, and putting many thousands of them on the screen (points are black). Normal C rand or the code that I posted above both fill the whole screen leaving no gaps, as it expected from a properly working random generator.<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=227" alt="random.png" /><br />
			<span class="gensmall">random.png [ 1.62 KiB | Viewed 547 times ]</span>
		

		<br />
	</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Tue Dec 11, 2012 6:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">Well yeah, unless I can find a decent 32-bit polynomial (decent meaning maximal-length, as few 1s as possible, ideally with them spread out and away from the most significant 8 bits, while also allowing a good random distribution), it's probably a lot easier to just use a traditional LFSR instead of trying to come up with an optimized one. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><br /><br />I think the general rule of thumb is you want about half 1s to stirr things up.<br />(dunno if that's valid)<br /><br />Google &quot;Galois LFSR&quot; if you don't know what that is.<br /><br />A common ploy is to combine two different types of PRNGs<br />in the hopes that they'll hide each others deficiencies.<br />Say, an LFSR and an LCG XORed toghether<br /><br />So instead of a 32 bit PRNG you might combine two 16 bit ones<br /><br />Here are lists of polynomials:<br /><!-- m --><a class="postlink" href="http://www.ece.cmu.edu/~koopman/lfsr/">http://www.ece.cmu.edu/~koopman/lfsr/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Dec 11, 2012 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://en.wikipedia.org/wiki/Linear_feedback_shift_register#Galois_LFSRs" class="postlink">Galois</a> and <a href="http://en.wikipedia.org/wiki/Linear_feedback_shift_register#Fibonacci_LFSRs" class="postlink">Fibonacci</a> are just two &quot;opposite&quot; ways to implement a particular LFSR (with Galois being simpler in software).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Dec 11, 2012 8:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bogax wrote:</div><div class="quotecontent">A common ploy is to combine two different types of PRNGs<br />in the hopes that they'll hide each others deficiencies.<br />Say, an LFSR and an LCG XORed toghether</div><br /><br />I would not recommend this. A better quality generator will be superior to the XOR of two crappy generators, and it's not likely you're saving performance/complexity vs the alternative. It may sometimes be an improvement over using just one crappy generator (provided they don't have overlapping/dependent failings-- and you really need to test this to make sure, because it's more likely than you might think), but it's a poor way to solve the problem of low-quality random numbers.<br /><br /><br />Two points though:<br /><br />1. For a lot of gameplay situations, a crummy random generator is sufficient, since a lot of the randomness comes from the timing of the human player and when they cause random decisions to happen. A lot of logical decisions are binary anyway, so 1 random bit from an LFSR can be totally fine. There are situations where you might need better quality numbers however, such as a turn based battle system, or trying to procedurally generate a level / background (shiru's test is one of many that will quickly show a poor generator). Consider how good you need the numbers to be before you decide to seek a more complex, higher quality PRNG.<br /><br />2. How often is the PRNG being used? If we're talking about a big batch during level load only, or if they're only being used once a frame, or not even every frame, there's no reason to be skimpy about performance if quality random numbers would be preferred. You probably only need a fast PRNG if you have a continual stream of random numbers during gameplay.<br /><br />Long story short, &quot;good&quot; and &quot;fast&quot; PRNGs both have their place. If you're going to cut and paste somebody else's code without evaluating, I'd say it's probably better to err on the side of &quot;good&quot; rather than &quot;fast&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Dec 11, 2012 10:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">All LFSRs must have the first bit set.<br /><br /><!-- m --><a class="postlink" href="http://www.newwaveinstruments.com/resources/articles/m_sequence_linear_feedback_shift_register_lfsr/32stages.txt">http://www.newwaveinstruments.com/resou ... stages.txt</a><!-- m --> is a list of many different 32-bit LFSRs; they don't know of any with fewer taps.<br /><br />If you're willing to use a 31-bit LFSR there's a few with just 2 taps: <!-- m --><a class="postlink" href="http://www.newwaveinstruments.com/resources/articles/m_sequence_linear_feedback_shift_register_lfsr/31stages.txt">http://www.newwaveinstruments.com/resou ... stages.txt</a><!-- m --><br /><br />Also, the sequence of all maximal-length LFSRs contain 2ⁿ different 2ⁱ-bit-long sequences of both 1 and 0, where 2⁽ⁿ⁺ⁱ⁾-1=LFSR period length.</div><br />Thanks lidnariq! I actually ended up using one of the polynomials from 32stages.txt. Specifically, [32, 23, 21, 16].<br />Ok everybody, I have a working 32-bit lfsr using the shortcut method I figured out. I'll need to see if I can improvie it at all, since this was just quick and dirty. However, it runs in constant time, and it probably could be simplified even more, I'd just need to look at it some more.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">game_random2<br />&nbsp;txa<br />&nbsp;pha<br />&nbsp;lda rnd4&nbsp; &nbsp;;3<br />&nbsp;tax&nbsp; &nbsp;&nbsp; &nbsp;;2&nbsp; 5<br />&nbsp;eor rnd2&nbsp; &nbsp;;3&nbsp; 8<br />&nbsp;sta rnd2&nbsp; &nbsp;;3&nbsp; 11<br />&nbsp;lsr rnd4&nbsp; &nbsp;;5&nbsp; 16<br />&nbsp;ror&nbsp; &nbsp;&nbsp; &nbsp;;2&nbsp; 18<br />&nbsp;lsr rnd4&nbsp; &nbsp;;5&nbsp; 23<br />&nbsp;ror&nbsp; &nbsp;&nbsp; &nbsp;;2&nbsp; 25<br />&nbsp;pha&nbsp; &nbsp;&nbsp; &nbsp;;3&nbsp; 28<br />&nbsp;txa&nbsp; &nbsp;&nbsp; &nbsp;;2&nbsp; 30<br />&nbsp;eor rnd4&nbsp; &nbsp;;3&nbsp; 33<br />&nbsp;sta rnd4&nbsp; &nbsp;;3&nbsp; 36<br />&nbsp;pla&nbsp; &nbsp;&nbsp; &nbsp;;4&nbsp; 40<br />&nbsp;lsr rnd4&nbsp; &nbsp;;5&nbsp; 45<br />&nbsp;ror&nbsp; &nbsp;&nbsp; &nbsp;;2&nbsp; 47<br />&nbsp;and #$e0&nbsp; &nbsp;;2&nbsp; 49<br />&nbsp;eor rnd2&nbsp; &nbsp;;3&nbsp; 52<br />&nbsp;pha&nbsp; &nbsp;&nbsp; &nbsp;;3&nbsp; 55<br />&nbsp;lda rnd4&nbsp; &nbsp;;3&nbsp; 58<br />&nbsp;eor rnd3&nbsp; &nbsp;;3&nbsp; 61<br />&nbsp;sta rnd4&nbsp; &nbsp;;3&nbsp; 64<br />&nbsp;pla&nbsp; &nbsp;&nbsp; &nbsp;;4&nbsp; 68<br />&nbsp;sta rnd3&nbsp; &nbsp;;3&nbsp; 71<br />&nbsp;lda random&nbsp; &nbsp;;3&nbsp; 74<br />&nbsp;sta rnd2&nbsp; &nbsp;;3&nbsp; 77<br />&nbsp;txa&nbsp; &nbsp;&nbsp; &nbsp;;2&nbsp; 79<br />&nbsp;sta random&nbsp; &nbsp;;3&nbsp; 82<br />&nbsp;pla<br />&nbsp;tax<br />&nbsp;lda random<br />&nbsp;rts<br /></div><br />I've had a simple NES program (the one this routine is for, actually) running a loop where it begins by copying 8 random bytes generated from this routine, and then repeatedly reads from the routine, looking for anything that matches this 8-byte string. After 10 minutes, it's still looking, so I think this has more than enough of a period for non-repeating randomness. However, I don't know how well the values are distributed; they look pretty random to me! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />For the record, the above code is the equivalent of a Galois LFSR that uses $00A10001 as its XOR, where each byte of output is the result of 8 shifts.<br /><br />If anyone wants to use this code or run some tests on it, be my guest. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> (Also, if anyone wants me to explain how I came up with this code, I'll be happy to explain; I just don't want to post a wall of text if nobody's interested. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />)<br /><br />Edit: One last thing! You need to initialize this routine by writing a nonzero value to random, rnd2, rnd3, or rnd4. I did it by writing $80 to rnd4.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Dec 11, 2012 11:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Remember the trick someone mentioned a while back here (Bregalad?) of continuously writing the result to $4011 and listening for any audible patterns.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Dec 11, 2012 11:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://en.wikipedia.org/wiki/RANDU" class="postlink">RANDU: A Cautionary Tale</a><br /><br />Also, it may be worth running your PRNG for a while before you start testing for cycles. It is possible to enter a cycle from a seed value outside that cycle. (Also, obviously if you want to test longer cycles you can reimplement it on a modern computer. I usually do this first, and then implement it on the target hardware after.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Dec 12, 2012 12:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Remember the trick someone mentioned a while back here (Bregalad?) of continuously writing the result to $4011 and listening for any audible patterns.</div><br />Hah, that's a pretty cool idea. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I don't hear any buzzing or any subconsciously repeating tones or anything, it just sounds like white noise. It sounds even better than the APU's noise channel if you can believe it (which you probably can). <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Though, comparing with the PRNG I was using before this, I can tell this newer run runs faster. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><a href="http://en.wikipedia.org/wiki/RANDU" class="postlink">RANDU: A Cautionary Tale</a><br /><br />Also, it may be worth running your PRNG for a while before you start testing for cycles. It is possible to enter a cycle from a seed value outside that cycle. (Also, obviously if you want to test longer cycles you can reimplement it on a modern computer. I usually do this first, and then implement it on the target hardware after.)</div><br />I did think of that, so I had the tester generate 4 random numbers before saving the initial string of 8. Hypothetically, if the polynomial I chose is indeed a maximal-length one, then that means the number of unique states for the shift register is (2^32)-1, meaning, the shift register should cycle between every possible combination of 32 bits, minus the all-zeros one. That means, the only closed-off cycle is the all-zeros one.<br /><br />As for testing on a modern computer, I would have, but I don't have any IDEs conveniently set up at the moment, other than for NES programming. I guess it saves me the need to convert my routine back and forth. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Wed Dec 12, 2012 12:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">bogax wrote:</div><div class="quotecontent">A common ploy is to combine two different types of PRNGs<br />in the hopes that they'll hide each others deficiencies.<br />Say, an LFSR and an LCG XORed toghether</div><br /><br />I would not recommend this.</div><br />Not sure I'd go so far as to recommend it, but it certainly is a common ploy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A better quality generator will be superior to the XOR of two crappy generators,</div><br />Right no true scotsman would use a crappy generator  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> and it's not likely you're saving performance/complexity vs the alternative.</div><br />I definetly disagree with that.  What's your idea of the alternative? (ie a better generator<br />that's as simple and fast as an LFSR and an LCG)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It may sometimes be an improvement over using just one crappy generator (provided they don't have overlapping/dependent failings-- and you really need to test this to make sure, because it's more likely than you might think),</div><br />I have no argument with that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">but it's a poor way to solve the problem of low-quality random numbers.</div><br />Where do you get that idea?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Dec 12, 2012 1:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">then that means the number of unique states for the shift register is (2^32)-1, meaning, the shift register should cycle between every possible combination of 32 bits, minus the all-zeros one. That means, the only closed-off cycle is the all-zeros one.</div>Right. LFSRs are <em>extremely</em> well characterized (and bleed state, so it's <a href="http://en.wikipedia.org/wiki/Berlekamp-Massey_algorithm" class="postlink">easy to calculate the next bit and taps</a> after watching the output for a while, but that's different from what we perceive as predictable): they are white, wide-sense stationary noise source with a too-perfect distribution of runs.<br /><br />As a tangent, I managed to wikiwalk my way to <a href="http://en.wikipedia.org/wiki/Shrinking_generator" class="postlink">the shrinking generator</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Dec 12, 2012 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tested with a seed that I grabbed from a minute's worth of random numbers, $C83C5447, and after another ten minutes of random numbers (starting with that seed), there still haven't been any cycles detected.<br /><br />The only reason there'd be a closed-off cycle is if I messed up when converting the polynomial into its hexadecimal representation: I took [32, 23, 21, 16] (which is supposed to be a maximal-length polynomial), interpreted it as (x^32 + x^23 + x^21 + x^16 + x^0), which I then interpreted as $00A10001 (I used x^0 instead of x^32). I wasn't sure if I was allowed to use x^0 instead of x^32, but it seems to be working so far.<br /><br />So if everything is correct, this prng should give you 4,294,967,295 random numbers before it repeats the cycle. The only danger would be if it somehow got stuck in the all-zeros state, which I don't think is supposed to be naturally possible with an LFSR, be it Galois or Fibonacci.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Dec 12, 2012 2:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bogax wrote:</div><div class="quotecontent">Right no true scotsman would use a crappy generator  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><br />I'm not sure how this was a &quot;no true scotsman&quot; argument. If faced with a choice of XORing two 16 bit generators, or one equivalent 32 bit generator (or even a 24 bit generator), I believe you would find with empirical testing that the latter will give better results, and can be done with equivalent performance.<br /><br /><div class="quotetitle">bogax wrote:</div><div class="quotecontent">What's your idea of the alternative? (ie a better generator that's as simple and fast as an LFSR and an LCG)</div><br />A 32 bit LFSR or LCG will give better 16-bit results than a 16 bit LFSR XORed with a 16 bit LCG.<br /><br /><div class="quotetitle">bogax wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">it's a poor way to solve the problem of low-quality random numbers.</div><br />Where do you get that idea?</div><br />The idea comes from my experience with random number generators used for a variety of purposes. I've tried this technique before and I call it a poor solution because I think you can get better results from a single generator of similar computational complexity.<br /><br />The reason I don't think XORing two generators together is that both signals have a periodicity that is much-much-much shorter than the equivalent single 32 bit generator. Even though they are interfering with each other via XOR, there are situations where both periods will show through this operation.<br /><br />There are also many situations where the difference doesn't matter, and it's not a big deal how you build your PRNG, but I'm talking about the case where all else is more or less equal, and if your goal is to produce a more uniform, less predictable PRNG, I think the XOR approach is a bad idea. There are better ways to improve the output of your PRNG for equivalent computational cost.<br /><br />I'm sorry to be dismissive of the idea, but this is my honest opinion of it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Dec 12, 2012 2:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CRC routines as PRNGs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shiru, did you remember to take only the 8 most significant bits of the result when you plotted this ?<br />I think the least significant bits are not random but the most significant bits are.<br /><br />At least I tested this RNG with the $4011 white noise technique before using it and it worked fine.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>