<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - moving objects (sprites) off screen / accurate collisions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">moving objects (sprites) off screen / accurate collisions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7484">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7484</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Tue Feb 15, 2011 8:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>moving objects (sprites) off screen / accurate collisions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok so it's time for my first noob questions I guess.. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />
<br />I've been working through the nerdy nights tutorials and I feel pretty good about where I am. But now I want to improve what I have.
<br />
<br />I'm wanting to improve on the basic object collision in the pong game. 
<br />The basic logic was pretty easy to figure out based on the tutorial:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if ball x &lt; paddle1x<br />&nbsp; &nbsp; if ball y &gt; paddle y top<br />&nbsp; &nbsp; &nbsp; if ball y &lt; paddle y bottom<br />&nbsp; &nbsp; &nbsp; &nbsp; bounce, ball now moving right<br /></div>
<br />
<br />BUT it's not exactly accurate since the ball can get behind the paddle and technically all those rules are true and a bounce happens. I've searched the forums and read a lot of posts on object collision and I think I have a good idea of what needs to happen. I need to create a collision bounding box instead of using the single x,y coordinates for each object. Maybe just a suggestion (provide link) of which of the previous posts in the forum I should really look at for inspiration would help me. I tried looking at other example code people had posted but most of the links are broken now..
<br />
<br />
<br />
<br />The other thing I'm having trouble understanding is moving objects off screen. How do games like double dragon keep the enemies from wrapping around to the other side when they are knocked off screen? And more specifically related to the pong game how can you register a score every time no matter how fast the ball is moving?
<br />
<br />
<br />If I check the balls x position to see if it's past one of the paddles there's an 8pixel gap that it would need to be in for that to register a score. So what if the ball gets moving really fast 16pixels/frame? now it's too fast and will skip over this area wrapping around to the other side of the screen and only registers a score sometimes. So how do I make this bulletproof so it will always register a score?
<br />
<br />
<br />Thanks guys this forum is amazing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 15, 2011 8:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As for off-screen, scrolling games calculate the location of each sprite in 16-bit coordinates and draw only those sprites whose lower coordinate is 0. Sprites not drawn have their Y coordinate set to $EF-$FF so that the PPU ignores them.
<br />
<br />As for the ball moving past the paddle, you want to check for collisions only in the <em>first</em> frame that this could happen. Do you understand the following pseudocode, or should I explain further?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if ball_x &lt; paddle1x and ball_dx &lt; 0 and loss_timer == 0:<br />&nbsp; &nbsp; if ball_y &gt; paddle1y and ball_y &lt; paddle1y + paddle1ht:<br />&nbsp; &nbsp; &nbsp; &nbsp; setVelocity&#40;right, ball_y - paddle1y, paddle1ht&#41;<br />&nbsp; &nbsp; else:<br />&nbsp; &nbsp; &nbsp; &nbsp; loss_timer = 1<br />elif loss_timer &gt;= 30:<br />&nbsp; &nbsp; game_state = STATE_LOST_BALL<br />elif loss_timer &gt; 0:<br />&nbsp; &nbsp; loss_timer += 1<br /></div>
<br />When the ball is moving at 16 pixels per frame, it will cross the screen in a quarter second. Could <em>you</em> react and place the paddle that fast, especially without the rare, expensive Arkanoid Vaus controller?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Feb 15, 2011 9:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: moving objects (sprites) off screen / accurate collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitmatt wrote:</div><div class="quotecontent">If I check the balls x position to see if it's past one of the paddles there's an 8pixel gap that it would need to be in for that to register a score. So what if the ball gets moving really fast 16pixels/frame? now it's too fast and will skip over this area wrapping around to the other side of the screen and only registers a score sometimes. So how do I make this bulletproof so it will always register a score?<br /></div>
<br />
<br />Every time you add, and every time you subtract, the carry flag is messed with.
<br />
<br />If the ball passes 0, it's a score for the paddle on the right, right? And if the ball passes 255 it's  a score for the paddle on the left?
<br />
<br />So...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//Ball is traveling left.<br />ballleft:<br />&nbsp; &nbsp; &nbsp;lda ballpositionx<br />&nbsp; &nbsp; &nbsp;sec<br />&nbsp; &nbsp; &nbsp;sbc ballvelocityx<br />&nbsp; &nbsp; &nbsp;sta ballpositionx<br />&nbsp; &nbsp; &nbsp;bcs nopointleft;If the carry is still set after the subtract, the ball did not pass 0<br /><br />&nbsp; &nbsp; &nbsp;inc leftscore<br /><br />nopointleft:<br />&nbsp; &nbsp; &nbsp;rts<br />//Ball is traveling right.<br />ballright:<br />&nbsp; &nbsp; &nbsp;lda ballpositionx<br />&nbsp; &nbsp; &nbsp;clc<br />&nbsp; &nbsp; &nbsp;adc ballvelocityx<br />&nbsp; &nbsp; &nbsp;sta ballpositionx<br />&nbsp; &nbsp; &nbsp;bcc nopointright;If the carry is still clear after the add, the ball did not pass 255<br /><br />&nbsp; &nbsp; &nbsp;inc rightscore<br /><br />nopointright:<br />&nbsp; &nbsp; &nbsp;rts<br /></div>
<br />
<br />This works no matter what ballvelocityx is. If the ball is right before the paddle, (Say... 17) and is traveling at 255 pixels that frame, it will still register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Tue Feb 15, 2011 9:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">As for the ball moving past the paddle, you want to check for collisions only in the <em>first</em> frame that this could happen. Do you understand the following pseudocode, or should I explain further?</div>
<br />
<br />I'd like a little deeper explanation if you don't mind. (I understand how to read the pseudocode syntax but want more clarification on the use of ball_dx, loss_timer, etc)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Tue Feb 15, 2011 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: moving objects (sprites) off screen / accurate collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//Ball is traveling left.<br />ballleft:<br />&nbsp; &nbsp; &nbsp;lda ballpositionx<br />&nbsp; &nbsp; &nbsp;sec<br />&nbsp; &nbsp; &nbsp;sbc ballvelocityx<br />&nbsp; &nbsp; &nbsp;sta ballpositionx<br />&nbsp; &nbsp; &nbsp;bcs nopointleft;If the carry is still set after the subtract, the ball did not pass 0<br /><br />&nbsp; &nbsp; &nbsp;inc leftscore<br /><br />nopointleft:<br />&nbsp; &nbsp; &nbsp;rts<br />//Ball is traveling right.<br />ballright:<br />&nbsp; &nbsp; &nbsp;lda ballpositionx<br />&nbsp; &nbsp; &nbsp;clc<br />&nbsp; &nbsp; &nbsp;adc ballvelocityx<br />&nbsp; &nbsp; &nbsp;sta ballpositionx<br />&nbsp; &nbsp; &nbsp;bcc nopointright;If the carry is still clear after the add, the ball did not pass 255<br /><br />&nbsp; &nbsp; &nbsp;inc rightscore<br /><br />nopointright:<br />&nbsp; &nbsp; &nbsp;rts<br /></div><br /><br />This works no matter what ballvelocityx is. If the ball is right before the paddle, (Say... 17) and is traveling at 255 pixels that frame, it will still register.</div>
<br />
<br />I like this, it seems simple and bulletproof. I really need to start thinking outside of the box more when it comes to using flags.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 15, 2011 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ball_dx is a number that is negative if the ball is moving left and positive if the ball is moving right. For example, it could be the X component of the ball's velocity.
<br />
<br />loss_timer is a variable stating how many frames before the animation for a lost ball begins. During play it's zero; once the ball is lost, it's positive. This way, collisions between the paddle and ball are ignored after the ball has broken the plane of the paddle.
<br />
<br />Which etc?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Feb 15, 2011 10:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Box Collision Psuedo Code:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//ob1width is how many pixels wide the ball is<br />//ob1height is how many pixels tall the ball is<br />//ob2width is how many pixels wide the paddle is<br />//ob2height is how many pixels tall the paddle is<br /><br />if ob1x + ob1width &lt; ob2x&#123;<br />//No Collision occurred<br />&#125;<br /><br />if ob1x &gt; ob2x + ob2width&#123;<br />//No collision occurred.<br />&#125;<br /><br />if ob1y + ob1height &lt; ob2y&#123;<br />//No collision occurred.<br />&#125;<br /><br />if ob1y &gt; ob2y + ob2height&#123;<br />//No collision occurred<br />&#125;<br /><br />//If NONE of the above if statements were true, then a collision DID occur. <br /></div><br /><br />At least, I think that's it. I didn't check it too much. <br /><br />This might be a little off topic, but...<br /><br />I take it you're used to C or something similar? This might help for 16 bit coordinates. (Forgive my syntax if it's wrong, I'm switching between three languages for my current project.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int carryflag;<br />uint8 accumulator;//A type that can only hold 0-255<br /><br />void clc&#40;&#41;&#123;<br />&nbsp; &nbsp; &nbsp;carryflag = 0;<br />&#125;<br /><br />void sec&#40;&#41;&#123;<br />&nbsp; &nbsp; &nbsp;carryflag = 1;<br />&#125;<br /><br />void adc&#40;uint8 add&#41;&#123;//add is the number we're adding to the accumulator<br />&nbsp; &nbsp; &nbsp;if&#40; &#40;int&#41;add + &#40;int&#41;accumulator + carryflag &gt;= 256&#41;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; accumulator = add + accumulator + carryflag;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sec&#40;&#41;;<br />&nbsp; &nbsp; &nbsp;&#125;else&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; accumulator = add + accumulator + carryflag;<br />&nbsp; &nbsp; &nbsp;&#125;<br />&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp;<br />&#125;<br /><br />void sbc&#40;uint8 sub&#41;&#123;//sub is the number we're subtracting from the accumulator<br />&nbsp; &nbsp; &nbsp;if&#40; &#40;int&#41;accumulator - &#40;int&#41;sub - &#40;&#40;carryflag-1&#41;*-1&#41; &lt; 0&#41;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; accumlator = accumulator - sub - &#40;&#40;carryflag-1&#41;*-1&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clc&#40;&#41;;<br />&nbsp; &nbsp; &nbsp;&#125;else&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; accumlator = accumulator - sub - &#40;&#40;carryflag-1&#41;*-1&#41;;<br />&nbsp; &nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp; &nbsp;<br />&#125;<br /><br />void lda&#40;uint8 num&#41;&#123;//num is what we're loading<br />&nbsp; &nbsp; &nbsp;accumulator = num;<br />&#125;<br />uint8 highbyte1 = 0;<br />uint8 lowbyte1 = 0;<br /><br />uint8 highbyte2 = 0;<br />uint8 lowbyte2 = 255;<br /><br />int main&#40;&#41;&#123;<br />&nbsp; &nbsp; &nbsp;clc&#40;&#41;;<br />&nbsp; &nbsp; &nbsp;lda&#40;lowbyte1&#41;;<br />&nbsp; &nbsp; &nbsp;adc&#40;lowbyte2&#41;;<br />&nbsp; &nbsp; &nbsp;lowbyte1 = accumulator;//This would be sta. I didn't want to make another function, since I'd need pointers and such and I can't be bothered with that right now.<br /><br />&nbsp; &nbsp; &nbsp;lda&#40;highbyte1&#41;;<br />&nbsp; &nbsp; &nbsp;adc&#40;highbyte2&#41;;<br />&nbsp; &nbsp; &nbsp;highbyte1 = accumulator;//This would be sta. I didn't want to make another function, since I'd need pointers and such and I can't be bothered with that right now.<br /><br />//So at this point highbyte1 is 0, lowbyte1 is 255. 255 + 1 should mean the highbyte should be 1, and the low byte is 0. highbyte * 256 + lowbyte gives you the 16bit number contained in your two high and low bytes.<br /><br />&nbsp; &nbsp; &nbsp;clc&#40;&#41;;<br />&nbsp; &nbsp; &nbsp;lda&#40;lowbyte1&#41;;<br />&nbsp; &nbsp; &nbsp;adc&#40;1&#41;;<br />&nbsp; &nbsp; &nbsp;lowbyte1 = accumulator;<br /><br />&nbsp; &nbsp; &nbsp;lda&#40;highbyte1&#41;;<br />&nbsp; &nbsp; &nbsp;adc&#40;0&#41;;//Even though this is 0, we're actually adding &#40;0+1&#41;, because the carry flag was set by the last addition.<br />&nbsp; &nbsp; &nbsp;highbyte1 = accumulator;<br /><br />return 0;<br /><br />&#125;<br /></div>
<br />
<br />Not sure if that helps, I hope you're a C guy. Even if it doesn't, would something like this be useful for the wiki,Tepples/Others? Creating a C "library" of all the 6502 mnemonics so people used to higher level languages could directly see what's going on?
<br />
<br />Please correct any mistakes. I found a pretty bad bug in my C mnemonics, and there may be more  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Wed Feb 16, 2011 11:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">ball_dx is a number that is negative if the ball is moving left and positive if the ball is moving right. For example, it could be the X component of the ball's velocity.<br /><br />loss_timer is a variable stating how many frames before the animation for a lost ball begins. During play it's zero; once the ball is lost, it's positive. This way, collisions between the paddle and ball are ignored after the ball has broken the plane of the paddle.<br /><br />Which etc?</div>
<br />
<br />The etc... why 30? what's the significance of 30 frames? 
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">elif loss_timer &gt;= 30: <br />&nbsp; &nbsp; game_state = STATE_LOST_BALL <br /></div>
<br />
<br />And I'm guessing after the game state is changed to STATE_LOST_BALL , within that section of code I need to reset loss_timer to 0 for this to all continue working? correct?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Feb 16, 2011 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitmatt wrote:</div><div class="quotecontent">why 30? what's the significance of 30 frames?</div><br />The NTSC NES PPU generates a 240p video signal with 60.0988 frames per second. This means there are about 30 frames in a half second: long enough for the player to have noticed that the ball has left the table.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And I'm guessing after the game state is changed to STATE_LOST_BALL , within that section of code I need to reset loss_timer to 0 for this to all continue working? correct?</div>
<br />Yes. The loss_timer gets reset to 0 when you launch a ball.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Wed Feb 16, 2011 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />This might be a little off topic, but...<br /><br />I take it you're used to C or something similar? This might help for 16 bit coordinates. (Forgive my syntax if it's wrong, I'm switching between three languages for my current project.)<br /><br /></div>
<br />
<br />
<br />Actually I'm not a C or Java guy or anything really. I don't have a huge background in programming. My day job is front-end web development (UI design, CSS, Javascript), but I do have some experience with some web based languages (php, coldfusion, asp.net). Anyway enough about me...
<br />
<br />I couldn't really follow your example on 16 bit coords that well since I'm no good with C,  but I have been researching this and came across  <a href="http://nesdev.com/bbs/viewtopic.php?p=15144&amp;sid=0b74c905f7b23d3648cd1664bfa6fe08#15144" class="postlink">this post</a> which I think I understand. The high byte of the 16 bit coord is the actual x position of the sprite on screen (and is like your whole number). The low byte is like a fraction. So essentially with the 16 bit math you are adjusting the amount of time it takes to move in the 8bit coords of the NES? is this right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Feb 16, 2011 1:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitmatt wrote:</div><div class="quotecontent">The high byte of the 16 bit coord is the actual x position of the sprite on screen (and is like your whole number). The low byte is like a fraction. So essentially with the 16 bit math you are adjusting the amount of time it takes to move in the 8bit coords of the NES? is this right?</div>
<br />
<br />Not exactly, for scrolling, unless I'm misunderstanding you. That post seems to have detailed subpixel movements (moving a sprite &lt; 1 pixel a frame), not scrolling. One would need a 24 bit number to do subpixel movement that way if one also had scrolling. It shows another use of 16bit numbers though, which can be used for many interesting things.
<br />
<br />Ignoring the fact that a byte can only hold up to 255 for a moment. Ignoring Y position. (For an object to display with Y, the equation is much the same as for X. And naturally both its Y and X position must be on screen for the object to be displayed.)
<br />
<br />You have an object's X position. You have the scroll's X position. You subtract the scroll's X position from the object's X position and it gives you where the object should be on the screen.
<br />
<br />The screen is 256 pixels across. 0-255 are the only possible locations on screen. So if the result of the above equation is  &lt; 0 or &gt;255 for any object X/scroll X position pair, the object is not drawn to the screen.
<br />
<br />Object X is 0. 
<br />
<br />Scroll X is 0.
<br />
<br />0-0 = 0. 0 is the object's position on screen.
<br />
<br />Object X is 0. 
<br />
<br />Scroll X is 1.
<br />
<br />0-1 = -1. -1 &lt; 0. Object is not displayed.
<br />
<br />Object X is 257.
<br />
<br />Scroll X is 0. 
<br />
<br />257-0 = 257. 257 &gt; 255. Object is not displayed.
<br />
<br />Object X is 596
<br />
<br />Scroll X is 584
<br />
<br />596-584 = 12. Object is displayed on pixel 12 of the screen. 
<br />
<br />But one can only store 0-255 in a single byte. So how does one store a number like 584?
<br />
<br />Lowbyte*256^0+highbyte*256^1(+higherbyte*256^2, etc if you want more than 16 bits.) This equation only shows the "default" way to look at them, though. The example you linked above had it so that it was (lowbyte/256+highbyte). If you understand how 16 bit numbers really work, you can get creative.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;I'm not indenting the mnemonics.<br />;One adds numbers that are greater than 8 bits by adding lowest byte pair of bytes together, than adding a higher pair of bytes together, until you've reached the highest pair of bytes. One only clears the carry on the addition of the lowest pair of bytes.<br />lda #$00<br />sta highbyte<br />lda #$FF<br />sta lowbyte<br />;#$FF*255^0+0*256^1= 255. That is the value in the 16 bit number<br /><br />lda lowbyte<br />clc<br />adc #$01;Sets carry flag, so the next addition will add one plus whatever number we give it.<br />sta lowbyte<br /><br />lda highbyte<br />adc #$00;Carry is cleared for next addition, because we didn't exceed 255 for this addition<br />sta highbyte;High byte is 01. 0 &#40;high byte+0 &#40;number&#41; + 1 &#40;carry flag&#41; = 1<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;$00|FF &#40;the high and low bytes&#41;<br />+$00|01&#40;the immediate number I added with the two adcs in the above example<br />=$01|00<br /><br />The | shows the split between the high and low bytes.<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Wed Feb 16, 2011 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;$00|FF &#40;the high and low bytes&#41;<br />+$00|01&#40;the immediate number I added with the two adcs in the above example<br />=$01|00<br /><br />The | shows the split between the high and low bytes.<br /></div></div>
<br />
<br />
<br />Thanks man. Yea I understand how the 16 bit math works.. I guess what I don't understand is how that 16 bit number we end up with translates into something usable on the 8bit (256 pixel) grid. Because a sprite can only be at one of those 256 pixel locations on screen. So realistically there's not a true "subpixel" value that the sprite would have as it's x location?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Feb 16, 2011 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitmatt wrote:</div><div class="quotecontent"><br /><br />Thanks man. Yea I understand how the 16 bit math works..</div><br />My bad. <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I guess what I don't understand is how that 16 bit number we end up with translates into something usable on the 8bit (256 pixel) grid.</div><br />The equation above shows it. Object X minus scroll X gives the position on the 256 pixel grid. If result is too big for the grid (&gt;256) or too small for the grid (&lt;0) the object's not displayed.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because a sprite can only be at one of those 256 pixel locations on screen. So realistically there's not a true "subpixel" value that the sprite would have as it's x location?</div>
<br />
<br />You need one more byte than needed for the amount of pixel positions in your level for subpixel. Makes sense, right?
<br />
<br />If you don't scroll, you need two bytes. One to hold the actual X pixel position, and one to hold the subpixel. If you do scroll, but have levels less than 65,536 wide, you need three bytes. Two for the actual X position, and one for the subpixel. 
<br />
<br />You add the movement speed to the subpixel movement, and possibly the lowest x position byte. Say you have 16 bit movement speed. It's $0100. That means you'll be adding 1 to the low X position each frame, and the subpixel won't change. $0080 is half a pixel every frame. #$80 is added to the subpixel, which by itself doesn't change the pixel position of the object. But if it sets the carry, the object will be moved when the X position is updated by adding #$00 (the high byte of the movement speed) (plus carry) to it. 
<br />
<br />Got it now?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitmatt</b> [ Wed Feb 16, 2011 3:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Got it now?</div>
<br />
<br />I think so. Here's  a visual to help explain how I understand it.
<br />
<br /><img src="http://arcade.publishpath.com/Websites/arcade/Images/nesdev/subpixel.gif" alt="Image" />
<br />
<br />
<br />So maybe I wasn't good at explaining it before but I think what I was saying was correct and we were talking about the same thing.
<br />
<br />The highbyte is the whole number (actual x position on the 8bit grid "$20"), the low byte is the fraction (subpixel value "$00"). By using 16 bit math we are adjusting the amount of time it takes to move the same 2 pixel distance, thus this change in timing is perceived by the player as a smoother subpixel animation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Feb 16, 2011 4:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes. All correct, if you don't scroll.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>