<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=10613" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-10-24T12:43:40-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=10613</id>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2013-10-24T12:43:40-07:00</updated>
<published>2013-10-24T12:43:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10613&amp;p=119816#p119816</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10613&amp;p=119816#p119816"/>
<title type="html"><![CDATA[Need help with SPC2ROM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10613&amp;p=119816#p119816"><![CDATA[
SPC2ROM Source: <a href="http://alpha-ii.com/Source/SPC2R11s.rar" class="postlink">http://alpha-ii.com/Source/SPC2R11s.rar</a><br /><br />I am using SPC2ROM to test various SPC700 instructions on my SNES console. However, I've run into an issue when trying to test the BRK/TCALL instructions.  In my SPC700 source file I am defining some vector addresses for the various BRK/TCALL vectors from $FFC0-$FFDF. However, when I run spc2rom on my .spc file and I look at the resulting .sfc my vectors are nowhere to be found. In fact, anything at all that I put in the region from $FFC0-$FFFF is replaced with all-zeros in the final .sfc rom file that is generated.<br /><br />Being that the region in question is the IPL ROM area I did some investigation into the SPC2ROM source code and here is what I found...<br /><br />In the file SPC2ROM.cpp a structure is defined called APURAM which is exactly 64Kbytes in size:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct APURAM<br />{<br />   u8   dp0&#91;0xF0&#93;;                        //Direct Page 0<br />   u8   testReg;                        //Test register (no use)<br />   u8   control;                        //Control register<br />   u8   dspAddr;                        //DSP Address<br />   u8   dspData;                        //DSP Data<br />   u8   port0;                           //In port 0<br />   u8   port1;                           //In port 1<br />   u8   port2;                           //In port 2<br />   u8   port3;                           //In port 3<br />   u8   unused1;                        //unused<br />   u8   unused2;                        //unused<br />   u8   t0;                              //Timer 0<br />   u8   t1;                              //Timer 1<br />   u8   t2;                              //Timer 2<br />   u8   c0;                              //Counter 0<br />   u8   c1;                              //Counter 1<br />   u8   c2;                              //Counter 2<br /><br />   u8   dp1&#91;0x100&#93;;                        //Direct Page 1 (Stack)<br /><br />   u8   gp&#91;0xFD00&#93;;                        //General Pages 2-254<br /><br />   u8   up&#91;0x0C0&#93;;                        //Uppermost Page 255<br />   u8   ipl&#91;0x40&#93;;                        //Program used to transfer memory<br />};</div><br />An instance of APU RAM is created:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">APURAM   ram;</div><br />The APURAM instance is filled with the contents of my .spc file that I specified on the command line (called 'fh'):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//Read various components ------------------<br />   fread(&amp;spc,0x100,1,fh);<br />   fread(&amp;ram,0x10000,1,fh); -- line A<br />   fread(&amp;dsp,0x80,1,fh);<br />   fseek(fh,0x40,SEEK_CUR); -- line B<br />   fread(&amp;ram.ipl,0x40,1,fh); -- line C<br />   fclose(fh);</div><br />On line A the contents of the 64K of SPC ram are placed into the APURAM struct. This is good. At this point. All of my vectors from $FFC0-$FFDF still exist (I know because I inserted debug statements to check).<br /><br />However, on lines B and C we find the problem. On line A the .spc file pointer skips over the 64 bytes of &quot;unused&quot; space and is placed at the &quot;Extra RAM&quot; region of the SPC file header. You can see the &quot;unused&quot; and &quot;Extra RAM&quot; regions in the SPC file format here: <a href="http://www.romhacking.net/documents/221/" class="postlink">http://www.romhacking.net/documents/221/</a><br /><br />After line C is executed my BRK/TCALL vectors from $FFC0-$FFDF have been filled with all zeros (since that is the contents of my SPC file header in the &quot;Extra RAM&quot; region).  If I comment out line C and re-run SPC2ROM all of my BRK/TCALL vectors are exactly where they should be. Additionally, when I run the new ROM on an emulator or on my real console it works perfectly and all of the BRK/TCALL vectors work just like they should.<br /><br />So now that I understand how SPC2ROM is wiping out all of my BRK/TCALL vectors, my question is why is it doing this? And why does the SPC file format specify this 64-byte &quot;Extra RAM&quot; region that overwrites the region from $FFC0-$FFFF? Shouldn't it just fill that region with the contents of the 64Kbytes of ram in my .spc file like it does with the data in every other page of ram?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Thu Oct 24, 2013 12:43 pm</p><hr />
]]></content>
</entry>
</feed>