<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - First steps in writing an emulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">First steps in writing an emulator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10558">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10558</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Tue Oct 08, 2013 6:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent"><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">You can look in <!-- m --><a class="postlink" href="http://nesdev.com/6502_cpu.txt">http://nesdev.com/6502_cpu.txt</a><!-- m --> to see what reads/writes are done for different instructions. Implementing the instructions like in that doc is feasible, and makes the timing work out &quot;automagically&quot; without tables. You can also factor out the fetch of the opcode and the byte after that, since all instructions do it.</div><br /><br />Thanks, that's a pretty helpful page.  I hadn't read that one before.  But I'm a little confused.  It says, &quot;The processors also use a sort of pipelining. If an instruction does not store data in memory on its last cycle, the processor can fetch the opcode of the next instruction while executing the last cycle.&quot;  So only the opcodes that don't store data in memory on the last cycle do that, or do all of them?  Is it necessary to emulate that behavior?</div><br /><br />It's invisible above the hardware level and does not need to be emulated. The most useful part of that doc is the timing charts near the end.<br /><br />In case you're interested though, it has to do with the 6502 being able to overlap the final cycles of one instruction with the opcode and operand fetch for the next instruction. This is possible for instructions that change state internally within the CPU during their final cycles and don't need to access memory. For example, <strong>LDA #constant</strong> really takes three cycles internally rather than two, but the move of the fetched value (from an internal register) into the A register is overlapped with the opcode fetch for the next instruction, making it effectively a two-cycle instruction. From an emulation standpoint it's not important exactly when A is set though, as long as it happens before the next instruction can use the value, so it's easier to just set A before fetching the next opcode.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Oct 08, 2013 7:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent">I got it working now, and it executes a lot of code until it hits a loop.</div><br />The PPU needs some time to &quot;warm up&quot; and become usable (roughly a frame), so programs often have loops to wait a couple of VBlanks before using the PPU. You will remain stuck in these loops until you implement (or fake) the VBlank flag in register $2002 (PPUSTATUS).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Tue Oct 08, 2013 12:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@ulfalizer  So by overlapping, you mean they happen at the same time?  There's so many quirks that make this stuff hard to understand.  I'm definitely gonna need to keep reading up on this stuff.  <br /><br />@tokumaro  I checked the correct log file and compared it to mine.  There's a bug in an opcode somewhere, but I'm not sure where yet.  It's gonna help when I have the CPU log the opcodes and registers for each cycle in a file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Tue Oct 08, 2013 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">janzdott wrote:</div><div class="quotecontent">@ulfalizer  So by overlapping, you mean they happen at the same time?  There's so many quirks that make this stuff hard to understand.  I'm definitely gonna need to keep reading up on this stuff.</div><br /><br />Yup, the CPU carries out the final cycles of some instructions at the same time that it fetches the next instruction (a simple form of pipelining). Another example is ADC #immediate, which seems to actually be a four-cycle instruction internally, but overlaps the last two cycles with fetches for the next instruction (the opcode byte and the byte after that). The reason this is safe is that no other instruction looks at the value of A within the first two cycles.<br /><br />This is just trivia though, and not something you will need to be aware of when writing an emulator (I learned how it works pretty recently). You can pretend that A holds the sum after the second cycle of ADC #immediate, and that's what all emulators do in practice. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Wed Oct 09, 2013 3:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well its good I don't have to worry about emulating that then  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />I spent a lot of time on a class for logging CPU instructions.  It can be enabled or disabled, because I suspect it'll effect performance down the road.  For each instruction executed, the program counter, instruction, and register values are pushed to a circular buffer of a fixed length.  The current buffer index is kept track of, so when I dump to a file, it writes them in the correct order.<br /><br />I used a circular buffer so I could limit the number of instructions that are dumped to the file.  If my emulator is running for 10 minutes and I want to dump the instructions to a file, it won't dump 100,000,000 instructions.  Instead it'll only dump the 1000 most recent ones.  It works great, and outputs to a nice format like this...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C000&nbsp; &nbsp; 4C F5 C5&nbsp; &nbsp; JMP $C5F5&nbsp; &nbsp; &nbsp; A:00&nbsp; X:00&nbsp; Y:00&nbsp; P:24&nbsp; S:FD</div><br /><br />It was a pain to convert the bytes into text that shows correct assembly instructions, but I felt it was necessary.  I'm running nestest and looking at my log file.  It seems to be executing most instructions correctly (Surprisingly  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> ).  Though, it does go off track at some point.  I'll have to spend a lot of time looking through the log files to find where the problems are.  I'm excited though.  Things are coming along well  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Oct 09, 2013 5:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why in the world would you not output the same format as the other logs, compare them, and fix the ones that go off? It's not that hard at all to get CPU running, honestly, it's cake compared to PPU and audio.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Wed Oct 09, 2013 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">Why in the world would you not output the same format as the other logs, compare them, and fix the ones that go off? It's not that hard at all to get CPU running, honestly, it's cake compared to PPU and audio.</div><br /><br />Isn't my format the same as the others?  I'm comparing it to a log from nintendulator and it's the same, except I left out the cycle number, and one other number which I don't know the meaning of.  But I decided I'm going to write a program to compare the logs for me, and just give me the first address where they differ.  I would rather spend my time fixing bugs than reading through log files haha

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Oct 09, 2013 6:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You won't find the debugs if you don't compare the logs though, see how you this is a needed step? I mean, I haven't written an emu, but I've written enough programs to know how to design them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 09, 2013 6:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When I was verifying a Python 6502 simulator against neatest, I just read register values, PC, and CYC from each line of the Nintendulator log and compared those. That way I don't need to worry about disassembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Wed Oct 09, 2013 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">You won't find the debugs if you don't compare the logs though, see how you this is a needed step? I mean, I haven't written an emu, but I've written enough programs to know how to design them.</div><br />But I AM comparing the logs.  I just said I was writing a program to do it for me, so I don't have to read through the files by hand.  My computer reads much faster than I do  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">When I was verifying a Python 6502 simulator against neatest, I just read register values, PC, and CYC from each line of the Nintendulator log and compared those. That way I don't need to worry about disassembly.</div><br />^^This is exactly what I'm doing, except I added disassembly for readability

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Thu Oct 10, 2013 3:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm utterly stuck  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />  Could someone with their own emulator PLEASE help me out?  I've been trying, and there's no way for me to find the source of my problem.  This is from Nintendulator's log of nestest.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CFBF&nbsp; 85 FF&nbsp; &nbsp; &nbsp;STA $FF = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:55 Y:69 P:27 SP:FB CYC: 16 SL:1<br />CFC1&nbsp; A9 04&nbsp; &nbsp; &nbsp;LDA #$04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:55 Y:69 P:27 SP:FB CYC: 25 SL:1<br />CFC3&nbsp; 85 00&nbsp; &nbsp; &nbsp;STA $00 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:04 X:55 Y:69 P:25 SP:FB CYC: 31 SL:1<br />CFC5&nbsp; A9 5A&nbsp; &nbsp; &nbsp;LDA #$5A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:04 X:55 Y:69 P:25 SP:FB CYC: 40 SL:1<br />CFC7&nbsp; 8D 00 02&nbsp; STA $0200 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5A X:55 Y:69 P:25 SP:FB CYC: 46 SL:1<br />CFCA&nbsp; A9 5B&nbsp; &nbsp; &nbsp;LDA #$5B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5A X:55 Y:69 P:25 SP:FB CYC: 58 SL:1<br />CFCC&nbsp; 8D 00 03&nbsp; STA $0300 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5B X:55 Y:69 P:25 SP:FB CYC: 64 SL:1<br />CFCF&nbsp; A9 5C&nbsp; &nbsp; &nbsp;LDA #$5C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5B X:55 Y:69 P:25 SP:FB CYC: 76 SL:1<br />CFD1&nbsp; 8D 03 03&nbsp; STA $0303 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5C X:55 Y:69 P:25 SP:FB CYC: 82 SL:1<br />CFD4&nbsp; A9 5D&nbsp; &nbsp; &nbsp;LDA #$5D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5C X:55 Y:69 P:25 SP:FB CYC: 94 SL:1<br />CFD6&nbsp; 8D 00 04&nbsp; STA $0400 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5D X:55 Y:69 P:25 SP:FB CYC:100 SL:1<br />CFD9&nbsp; A2 00&nbsp; &nbsp; &nbsp;LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5D X:55 Y:69 P:25 SP:FB CYC:112 SL:1<br />CFDB&nbsp; A1 80&nbsp; &nbsp; &nbsp;LDA ($80,X) @ 80 = 0200 = 5A&nbsp; &nbsp; A:5D X:00 Y:69 P:27 SP:FB CYC:118 SL:1<br />CFDD&nbsp; C9 5A&nbsp; &nbsp; &nbsp;CMP #$5A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5A X:00 Y:69 P:25 SP:FB CYC:136 SL:1<br />CFDF&nbsp; D0 1F&nbsp; &nbsp; &nbsp;BNE $D000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:5A X:00 Y:69 P:27 SP:FB CYC:142 SL:1<br />CFE1&nbsp; E8&nbsp; &nbsp; &nbsp; &nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:5A X:00 Y:69 P:27 SP:FB CYC:148 SL:1<br />CFE2&nbsp; E8&nbsp; &nbsp; &nbsp; &nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:5A X:01 Y:69 P:25 SP:FB CYC:154 SL:1<br />CFE3&nbsp; A1 80&nbsp; &nbsp; &nbsp;LDA ($80,X) @ 82 = 0300 = 5B&nbsp; &nbsp; A:5A X:02 Y:69 P:25 SP:FB CYC:160 SL:1<br />CFE5&nbsp; C9 5B&nbsp; &nbsp; &nbsp;CMP #$5B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5B X:02 Y:69 P:25 SP:FB CYC:178 SL:1<br />CFE7&nbsp; D0 17&nbsp; &nbsp; &nbsp;BNE $D000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:5B X:02 Y:69 P:27 SP:FB CYC:184 SL:1<br />CFE9&nbsp; E8&nbsp; &nbsp; &nbsp; &nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:5B X:02 Y:69 P:27 SP:FB CYC:190 SL:1<br />CFEA&nbsp; A1 80&nbsp; &nbsp; &nbsp;LDA ($80,X) @ 83 = 0303 = 5C&nbsp; &nbsp; A:5B X:03 Y:69 P:25 SP:FB CYC:196 SL:1<br />CFEC&nbsp; C9 5C&nbsp; &nbsp; &nbsp;CMP #$5C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5C X:03 Y:69 P:25 SP:FB CYC:214 SL:1<br />CFEE&nbsp; D0 10&nbsp; &nbsp; &nbsp;BNE $D000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:5C X:03 Y:69 P:27 SP:FB CYC:220 SL:1<br />CFF0&nbsp; A2 00&nbsp; &nbsp; &nbsp;LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5C X:03 Y:69 P:27 SP:FB CYC:226 SL:1<br />CFF2&nbsp; A1 FF&nbsp; &nbsp; &nbsp;LDA ($FF,X) @ FF = 0400 = 5D&nbsp; &nbsp; A:5C X:00 Y:69 P:27 SP:FB CYC:232 SL:1<br />CFF4&nbsp; C9 5D&nbsp; &nbsp; &nbsp;CMP #$5D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:5D X:00 Y:69 P:25 SP:FB CYC:250 SL:1</div><br /><br />The instruction at CFBF stores the value 00 at the address FF.  In my emulator, this is the ONLY time this address is written to, up until my problem.  My problem is the instruction at CFF2.  X = 0, so this instruction looks up an address at FF and 0100.  The thing is, FF is 0, and 0100 is never written to in my emulator.  If both of them were 00, that points to address 0000, which is 04.  That's the number my emulator loads into the accumulator.  It's not right, because Nintendulator's log says it should be 5D.<br /><br />I've tried and tried, and there's no way for me to find the source of the problem.  It could be an instruction writing the wrong value to an address, or it could be an instruction writing a value to the wrong address.  Since it's a problem with an instruction that uses indirect x addressing, that makes it even harder to find the problem.  I've tracked the memory reads and writes, and that didn't help.  Basically I need someone with a working emulator to help me.  If someone could just tell me one thing...<br /><br />1.  Which instructions write to the addresses 0000, 00FF, and 0100?<br /><br />If someone could just add a check for writes to those addresses before CFF4, that would help me SO MUCH.  I'm horribly stuck and I don't know how to find the source of the problem<br /><br />EDIT:  I just thought of something...  Does indirect addressing wrap around back to 00 when you go over FF?  If so, that could be my problem.  I'll have to try it out tomorrow because I'm exhausted.  I'll let you guys know when I find out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 10, 2013 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Zero page indexing wraps within zero page. ($80,X) with X=$7F reads the low byte from $00FF and the high byte from $0000.<br /><br />Two of the writes that set up this test are at $CFBF and $CFC3.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Thu Oct 10, 2013 10:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Zero page indexing wraps within zero page. ($80,X) with X=$7F reads the low byte from $00FF and the high byte from $0000.<br /><br />Two of the writes that set up this test are at $CFBF and $CFC3.</div><br /><br />Sure enough, that was the problem  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I've made it almost half way through the test, and now I'm stuck on another one which should be simple, but doesn't seem to make any sense at all.  My problem is at DBB5, the instuction JMP ($02FF).  The value at the address 02FF is A900.  I know this is correct, because that's the value in my emulator, and the Nintendulator log conveniently shows the value after the instruction like so, &quot;JMP ($02FF) = A900&quot;.<br /><br />Correct me if I'm wrong, but doesn't that mean jump to A900?  My emulator correctly executes an indirect jump at DB7B just before this...  I know my indirect addressing is working correctly, and my emulator jumps to A900.  The Nintendulator log shows that it should jump to 0300.  I don't understand...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DB7B&nbsp; 6C 00 02&nbsp; JMP ($0200) = DB7E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:DB X:07 Y:00 P:E5 SP:FB CYC:326 SL:62<br />DB7E&nbsp; A9 00&nbsp; &nbsp; &nbsp;LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:DB X:07 Y:00 P:E5 SP:FB CYC:&nbsp; 0 SL:63<br />DB80&nbsp; 8D FF 02&nbsp; STA $02FF = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:07 Y:00 P:67 SP:FB CYC:&nbsp; 6 SL:63<br />DB83&nbsp; A9 01&nbsp; &nbsp; &nbsp;LDA #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:07 Y:00 P:67 SP:FB CYC: 18 SL:63<br />DB85&nbsp; 8D 00 03&nbsp; STA $0300 = 89&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:01 X:07 Y:00 P:65 SP:FB CYC: 24 SL:63<br />DB88&nbsp; A9 03&nbsp; &nbsp; &nbsp;LDA #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:01 X:07 Y:00 P:65 SP:FB CYC: 36 SL:63<br />DB8A&nbsp; 8D 00 02&nbsp; STA $0200 = 7E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:03 X:07 Y:00 P:65 SP:FB CYC: 42 SL:63<br />DB8D&nbsp; A9 A9&nbsp; &nbsp; &nbsp;LDA #$A9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:03 X:07 Y:00 P:65 SP:FB CYC: 54 SL:63<br />DB8F&nbsp; 8D 00 01&nbsp; STA $0100 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:A9 X:07 Y:00 P:E5 SP:FB CYC: 60 SL:63<br />DB92&nbsp; A9 55&nbsp; &nbsp; &nbsp;LDA #$55&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:A9 X:07 Y:00 P:E5 SP:FB CYC: 72 SL:63<br />DB94&nbsp; 8D 01 01&nbsp; STA $0101 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:55 X:07 Y:00 P:65 SP:FB CYC: 78 SL:63<br />DB97&nbsp; A9 60&nbsp; &nbsp; &nbsp;LDA #$60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:55 X:07 Y:00 P:65 SP:FB CYC: 90 SL:63<br />DB99&nbsp; 8D 02 01&nbsp; STA $0102 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:60 X:07 Y:00 P:65 SP:FB CYC: 96 SL:63<br />DB9C&nbsp; A9 A9&nbsp; &nbsp; &nbsp;LDA #$A9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:60 X:07 Y:00 P:65 SP:FB CYC:108 SL:63<br />DB9E&nbsp; 8D 00 03&nbsp; STA $0300 = 01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:A9 X:07 Y:00 P:E5 SP:FB CYC:114 SL:63<br />DBA1&nbsp; A9 AA&nbsp; &nbsp; &nbsp;LDA #$AA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:A9 X:07 Y:00 P:E5 SP:FB CYC:126 SL:63<br />DBA3&nbsp; 8D 01 03&nbsp; STA $0301 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:AA X:07 Y:00 P:E5 SP:FB CYC:132 SL:63<br />DBA6&nbsp; A9 60&nbsp; &nbsp; &nbsp;LDA #$60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:AA X:07 Y:00 P:E5 SP:FB CYC:144 SL:63<br />DBA8&nbsp; 8D 02 03&nbsp; STA $0302 = 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:60 X:07 Y:00 P:65 SP:FB CYC:150 SL:63<br />DBAB&nbsp; 20 B5 DB&nbsp; JSR $DBB5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:60 X:07 Y:00 P:65 SP:FB CYC:162 SL:63<br />DBB5&nbsp; 6C FF 02&nbsp; JMP ($02FF) = A900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:60 X:07 Y:00 P:65 SP:F9 CYC:180 SL:63<br />0300&nbsp; A9 AA&nbsp; &nbsp; &nbsp;LDA #$AA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:60 X:07 Y:00 P:65 SP:F9 CYC:195 SL:63</div><br /><br />My emulator correctly executes DB7B &quot;JMP ($0200) = DB7E&quot; by jumping to DB7E.  At DBB5, my emulator executes &quot;JMP ($02FF) = A900&quot; and jumps to A900 instead of 0300 like the Nintendulator log says it should.  I'm absolutely clueless here.  Is the Nintendulator log correct?  There has to be an explanation for this...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br />EDIT:  The guys on EFnet explained the &quot;hardware quirk&quot; with the indirect jump.  I've gotta say, it amazes me how active and helpful the nesdev community is.  Thank you guys for helping out a noob like me  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>janzdott</b> [ Thu Oct 10, 2013 12:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A little after halfway through nestest, I hit some weird NOPs that I wasn't expecting (opcodes 04, 44, and 64).  Those are unofficial opcodes right?  I wasn't planning on implementing unoffical ones until my emulator is running.  If I'm hitting those, is it safe to say my official ones are working and I can move on?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 10, 2013 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: First steps in writing an emulator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are both homebrew and commercial games that use unofficial opcodes. Among them are Puzznic, Super Cars, Driar, and STREEMERZ: Super Strength Emergency Squad Zeta. They're used because <a href="http://wiki.nesdev.com/w/index.php/Programming_with_unofficial_opcodes" class="postlink">they're useful</a>.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>