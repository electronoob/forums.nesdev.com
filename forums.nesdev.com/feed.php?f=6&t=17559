<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=17559" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-08-02T03:20:04-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=17559</id>
<entry>
<author><name><![CDATA[ap9]]></name></author>
<updated>2018-08-02T03:20:04-07:00</updated>
<published>2018-08-02T03:20:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=222529#p222529</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=222529#p222529"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=222529#p222529"><![CDATA[
Accounting for all cycles and, when resampling, an accurate lowpass filter are needed for accurate results. Some box car interpolation can speed up the process, but the larger the ratio, the more inconsistent the attenuation. In my own tests, however, I've found that FIR alone can deliver messy results. So I've found a balance between the two.<br /><br />Attached is 96 KHz, a box car of 4:1, followed by FIR (Blackman-Nutall, 160 taps). The results are pretty clean, although the mixed channel portions differ from the hardware render.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6020">ap9</a> — Thu Aug 02, 2018 3:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-07-23T07:56:30-07:00</updated>
<published>2018-07-23T07:56:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221796#p221796</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221796#p221796"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221796#p221796"><![CDATA[
<div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent"><br />Once I get around to re-implementing the NES audio chips, I'll rip out my NES CPU emulator, make it spit out a write log, and let the audio emulation run in batches as large as it likes.<br /></div><br />That's the paradigm I've been recommending for quite a while: one process emulates the CPU, outputting a stream of writes to another process that emulates the APU signal generation. I concede that parts of the APU would need to be emulated on the CPU side of the pipe as well, such as length counters if the program reads $4015.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jul 23, 2018 7:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Rahsennor]]></name></author>
<updated>2018-07-23T00:57:17-07:00</updated>
<published>2018-07-23T00:57:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221784#p221784</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221784#p221784"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221784#p221784"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />It's <em>also</em> oversampling for the output device.<br /></div><br />No. Oversampling is when you sample a signal at a higher rate than the <em>signal</em> requires, not whatever your desired output is. To quote <a href="https://en.wikipedia.org/wiki/Oversampling" class="postlink">Wikipedia</a>:<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />In signal processing, oversampling is the process of sampling a signal with a sampling frequency significantly higher than the Nyquist rate. [...] The Nyquist rate is defined as twice the highest frequency component in the signal.<br /></div> The Nyquist rate of the NES's audio is also, surprise surprise, its sample rate. The fact that it contains frequencies all the way up to half that rate is exactly why a resampler is needed.<br /><br />But you're right, arguing semantics isn't helpful. I just don't want people to hear &quot;oversampled&quot; and think it's either a) something unnecessary that the NES itself doesn't do, or b) some kind of enhancement that makes your implementation better than other emulators (or actual hardware) that don't &quot;oversample&quot;.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Actually, to give you an idea why this affects performance so much for NSFPlay, how often it has to jump back and forth between CPU emulation and generating samples really adds a lot of overhead, and as a side effect negatively affects code caching / branch prediction / etc. at the same time. One of my planned ideas for performance improvement will be to institute the concept of CPU&lt;-&gt;audio sync points so it can operate on longer buffers at a time, but that's going to be a big overhaul of the how original code worked. I suspect eventually, the idea of needing to undersample the NES might even be able to disappear, but for now it's deeply rooted in how it works. (If you look at other old NSF players, like NotSoFatso, this was pretty commonly done.)<br /></div><br />Yep, repeat does that too. One cycle at a time. One word: ouch.<br /><br />That's why I stopped working on it, in favour of a VGM player that uses logs and batching to run hundreds or thousands of cycles of each channel before moving onto the next. Once I get around to re-implementing the NES audio chips, I'll rip out my NES CPU emulator, make it spit out a write log, and let the audio emulation run in batches as large as it likes. But that's a ways off yet.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />As for integer vs float... yeah I mean we have good vector hardware for floats these days. I'm not sure if NSFPlay will ever make it to float, but it's something that could be done in theory at least. If this were a starting-from-scratch situation it would be a lot easier to write something from the beginning that would be easier to switch to one or the other with a #define. (...maybe for NSFPlay 3.)<br /></div><br />Would it be helpful to anyone if I put my resampler code up somewhere? It needs a good cleanup, but I feel obliged to put my money (or rather code) where my mouth is, so to speak.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7168">Rahsennor</a> — Mon Jul 23, 2018 12:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-23T00:41:09-07:00</updated>
<published>2018-07-23T00:41:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221782#p221782</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221782#p221782"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221782#p221782"><![CDATA[
I feel obliged to point out that I get a factor of 2 change in processor load between using FCEUX with &quot;low&quot; quality sound emulation and &quot;very high&quot; quality sound emulation.<br /><br />On my previous computer, this was enough to be noticeable. (Like 15% vs 30%)<br /><br /><br />Also, it's not actually correct to say that converting the output of the noise channel into its spectral components is a &quot;hack&quot;. It is quite literally just precalculating and caching the results. The only question is whether the complexity gets any performance benefit (unclear) or if the maintenance cost overwhelms any performance benefit (quite likely)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jul 23, 2018 12:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-07-22T21:21:32-07:00</updated>
<published>2018-07-22T21:21:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221776#p221776</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221776#p221776"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221776#p221776"><![CDATA[
<div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent"><br />People were talking about prefiltering tables and silencing channels on certain periods and other hacks.<br /></div><br />Oh that, well, I don't think myself or lidnariq was taking the pre-filtered periodic noise table idea as a serious option. It was just interesting to think about out loud.<br /><br /><div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent"><br />This is the pedant in me talking, but please stop calling it 'oversampling'. It's the native sample rate of the chip. Anything else is <em>under</em>sampling. That's kind of the the point I was trying to make.<br /></div><br />No, I'm going to continue to call it oversampling, but yes it is very much undersampling for the NES. It's <em>also</em> oversampling for the output device. We could debate the semantics of this but I don't think it'd be an interesting debate.<br /><br />Actually, to give you an idea why this affects performance so much for NSFPlay, how often it has to jump back and forth between CPU emulation and generating samples really adds a lot of overhead, and as a side effect negatively affects code caching / branch prediction / etc. at the same time. One of my planned ideas for performance improvement will be to institute the concept of CPU&lt;-&gt;audio sync points so it can operate on longer buffers at a time, but that's going to be a big overhaul of the how original code worked. I suspect eventually, the idea of needing to undersample the NES might even be able to disappear, but for now it's deeply rooted in how it works. (If you look at other old NSF players, like NotSoFatso, this was pretty commonly done.)<br /><br />As for integer vs float... yeah I mean we have good vector hardware for floats these days. I'm not sure if NSFPlay will ever make it to float, but it's something that could be done in theory at least. If this were a starting-from-scratch situation it would be a lot easier to write something from the beginning that would be easier to switch to one or the other with a #define. (...maybe for NSFPlay 3.)<br /><br />Thanks for the recording and description of your method. Always good to have something to compare to and consider.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Jul 22, 2018 9:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Rahsennor]]></name></author>
<updated>2018-07-22T20:24:22-07:00</updated>
<published>2018-07-22T20:24:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221773#p221773</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221773#p221773"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221773#p221773"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />&quot;A resampler&quot; isn't very descriptive, there's a million ways to resample and they're far from equivalent (...except when extended to extremes where everything is the same). The problem I'm having isn't deciding to use a resampler (there has to be one), it's <em>which one</em> is most appropriate for the situation. But a step back from that, really the problem is just that I haven't taken the time to do that work to review this yet... partly because the one that's already there is doing a pretty good job, and nobody until now has been intentionally throwing un-hearable frequencies at it and complaing about them. It's a subtle problem that isn't particularly pressing.<br /></div><br />Sorry, I was unclear - this is exactly what I was getting at. People were talking about prefiltering tables and silencing channels on certain periods and other hacks. What I meant to say is just that - they're all hacks. Doing anything other than emulating the chip's actual behaviour at its actual clock rate is a hack. You need a resampler in any case, and this is literally its entire job.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />&quot;Less than half&quot; of your CPU usage sounds like a very significant part of it to me?<br /></div><br />It's a VGM player. The only other thing running is the audio chip emulation. Total CPU is low enough that I can't get an exact figure on it due to CPU frequency scaling. It's in the same ballpark as similar programs so I haven't bothered optimizing anything yet. In that context, it's not significant, to me anyway.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Several people have complained to me that NSFPlay is too CPU intensive, and I do think it deserves a good performance pass over the whole code, but again not something I've gotten around to yet. (I've had other priorities... and am coming back from several years hiatus.)<br /></div><br />Ah. If NSFPlay is too CPU intensive then I'm in deep shit, and the hack camp may have a point. All a matter of perspective I guess. <img src="http://forums.nesdev.com/images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /><br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />So... no, I don't really agree that this is trivially solved, or that performance is a non-issue with this, but I absolutely do agree that a CPU-frequency oversampling mode is an important option to have.<br /></div><br />This is the pedant in me talking, but please stop calling it 'oversampling'. It's the native sample rate of the chip. Anything else is <em>under</em>sampling. That's kind of the the point I was trying to make.<br /><br />Unless of course you do mean higher than native sampler rate, but I don't get why you'd want to...?<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />I would, though, be interested to know how your implementation of this sounds with the given test, and what resampling method it uses.<br /></div><br />Sure. I haven't got around to implementing the NES chipset in my new player, so this is with repeat. Polyphase FIR filter, 16 taps, Nuttall windowed sinc. It runs &quot;backwards&quot;, scattering instead of gathering samples, the table is pre-integrated, and the input signal is differentiated, making it a simple table-driven BLEP resampler.<br /><br />My newer resampler dumps the BLEP nonsense and uses double-precision floating-point, which is faster (yes, really) and has a vastly lower noise floor. It does still operate 'backwards', making it technically a BLIP resampler, but only because I was too lazy to change it. If you put a differentiator before it and a leaky integrator afterwards, you'd get a BLEP resampler, which might be worth a speed boost, but my new player is mostly about FM chips so I haven't tried it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7168">Rahsennor</a> — Sun Jul 22, 2018 8:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-07-21T20:35:20-07:00</updated>
<published>2018-07-21T20:35:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221694#p221694</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221694#p221694"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221694#p221694"><![CDATA[
<div class="quotetitle">Rahsennor wrote:</div><div class="quotecontent"><br />Just generate 1.6 MHz audio and shove it into a resampler.<br /><br />Seriously, on a modern PC the resampling isn't the bottleneck. The 40+ tap, stereo, double-precision floating point resampling in my VGM player accounts for less than half of an already tiny CPU budget. And it all fits in 240 lines of plain C, so it's not like it's hard to do. If you want to support low-end hardware, well, there are plenty of smarter ways to write a resampler.<br /></div><br />&quot;A resampler&quot; isn't very descriptive, there's a million ways to resample and they're far from equivalent (...except when extended to extremes where everything is the same). The problem I'm having isn't deciding to use a resampler (there has to be one), it's <em>which one</em> is most appropriate for the situation. But a step back from that, really the problem is just that I haven't taken the time to do that work to review this yet... partly because the one that's already there is doing a pretty good job, and nobody until now has been intentionally throwing un-hearable frequencies at it and complaing about them. It's a subtle problem that isn't particularly pressing.<br /><br />&quot;Less than half&quot; of your CPU usage sounds like a very significant part of it to me?<br /><br />I said above that I do plan to implement an all-cycles-oversampling mode into NSFPlay. That oversampling definitely isn't cheap, though, and is of course separate from resampling too. The amount of oversampling is already a setting in NSFPlay, and you can see how much impact it makes on performance by adjusting it.<br /><br />Several people have complained to me that NSFPlay is too CPU intensive, and I do think it deserves a good performance pass over the whole code, but again not something I've gotten around to yet. (I've had other priorities... and am coming back from several years hiatus.)<br /><br />So... no, I don't really agree that this is trivially solved, or that performance is a non-issue with this, but I absolutely do agree that a CPU-frequency oversampling mode is an important option to have.<br /><br />I would, though, be interested to know how your implementation of this sounds with the given test, and what resampling method it uses.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sat Jul 21, 2018 8:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Rahsennor]]></name></author>
<updated>2018-07-21T19:42:35-07:00</updated>
<published>2018-07-21T19:42:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221691#p221691</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221691#p221691"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221691#p221691"><![CDATA[
Just generate 1.6 MHz audio and shove it into a resampler.<br /><br />Seriously, on a modern PC the resampling isn't the bottleneck. The 40+ tap, stereo, double-precision floating point resampling in my VGM player accounts for less than half of an already tiny CPU budget. And it all fits in 240 lines of plain C, so it's not like it's hard to do. If you want to support low-end hardware, well, there are plenty of smarter ways to write a resampler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7168">Rahsennor</a> — Sat Jul 21, 2018 7:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-20T20:57:35-07:00</updated>
<published>2018-07-20T20:57:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221656#p221656</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221656#p221656"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221656#p221656"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />at the same time special case muting turns a clean and continuous implementation into something with a lot of bumps. :S<br /></div>Absolutely agreed! For no good reason I just want additive synthesis to actually turn out to be useful. Somewhere. At all.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Jul 20, 2018 8:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-07-20T20:50:21-07:00</updated>
<published>2018-07-20T20:50:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221655#p221655</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221655#p221655"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221655#p221655"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />There are ceil(32767÷93) = 352 different unique bitstreams that the tonal noise LFSR can generate. You only need to care about aliasing (and filtering) when the sample rate of the noise channel approaches the sample rate.<br /></div><br />Ah, yes I hadn't considered that there's 93 trivial rotations of the 2^15 starting states. That probably does lower it to a somewhat practical problem. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />I was thinking about the other cases where muting can't solve the problem, or maybe where it shouldn't.<br /><br />Like, yeah I can mute frequencies above a certain point, but there's a continuum going right up to there where the aliasing gets fairly bad. That's more or less a problem for all the channels that can go to a high frequency (most of them), but it's just pretty rare to see them used in practice because that sound sucks to listen to. The noise channel on the other hand gets up in there all the time, so I'd been giving it some cheap extra oversampling anyway.<br /><br />Also, realizing that B00daW's recordings were 96kHz reminds me that NSFPlay uses the exact same kind of filter for 96kHz as it does for 48/44.1kHz, and it really shouldn't. I'm sure I could make a more robust filter with the wider falloff from the human range that 96kHz permits, and it would also permit analysis tools to see that extended spectrum that we can't hear. (Also on my to-do list is investigating Blargg's bandlimited synthesis method. I'm still curious how well it does with the high end frequencies like this.)<br /><br />Changing samplerates also means that with muting it's maybe appropriate to do it &gt;= the nyquist frequency, which is going to be dependent on that sample rate. Even more logic for this rare special case. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> I do get the point that it's silly to intentionally generate frequencies you can't render, and then throw a powerful downsampling filter at it, but at the same time special case muting turns a clean and continuous implementation into something with a lot of bumps. :S<br /><br />Anyhow, I'd wanna weigh my filter options again carefully before I decide to add dozens of special case high frequency mutes to the code. The triangle mute special case I already implemented was specifically only for period value 0, which isn't based on nyquist/human-hearing but just that it's the one value that a developer would actually <em>use</em> to silence the triangle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Fri Jul 20, 2018 8:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[NewRisingSun]]></name></author>
<updated>2018-07-21T01:17:32-07:00</updated>
<published>2018-07-20T12:42:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221639#p221639</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221639#p221639"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221639#p221639"><![CDATA[
<div class="quotetitle">B00daW wrote:</div><div class="quotecontent"><br />Nintendulator (latest):  Plays tones on both channels and freezes sound generation.  (BUGGED!)<br /></div>The NSF enables Frame IRQs, which the Nintendulator NSF player is not expecting. Try my <a href="http://symphoniae.com/nrs/nesdev/NintendulatorNRS2018-07-21.7z" class="postlink">Nintendulator-NRS build</a>. (I used the occasion to also add the MMC5 hardware multiplier to the MMC5 NSF playback code, necessary for Just Breed.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=133">NewRisingSun</a> — Fri Jul 20, 2018 12:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-20T10:52:56-07:00</updated>
<published>2018-07-20T10:52:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221634#p221634</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221634#p221634"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221634#p221634"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />(esp. the noise unit) that hare harder to address in this way... like it's probably not practical to store a pre-filtered version of every possible periodic noise loop.<br /></div>Tangenting, because this is kinda interesting to me.<br /><br />There are ceil(32767÷93) = 352 different unique bitstreams that the tonal noise LFSR can generate. You only need to care about aliasing (and filtering) when the sample rate of the noise channel approaches the sample rate. Last time I looked into this, it turned out there were <a href="https://forums.nesdev.com/viewtopic.php?p=132615#p132615" class="postlink">208</a> different tone colors it could generate.<br /><br />So assuming 44kHz mixing, you can probably assume you only care about LFSR sample rates at 22kHz and above (i.e. the fastest 5). At this point, the repeat frequency is high enough that you shouldn't need to worry about subsonic (rhythmic) effects, and I bet phase doesn't matter either.<br /><br />Whether lookup tables from the 32767 states to the 208 tone colors, and one from those 208 tone colors to the lowest 33 harmonics (since 10kHz÷300 = 33), and then using straight additive synthesis (for the subset of harmonics that are in the nominally-audible band) makes any sense... well, I dunno. Probably not.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Jul 20, 2018 10:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[B00daW]]></name></author>
<updated>2018-07-20T09:19:54-07:00</updated>
<published>2018-07-20T09:19:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221630#p221630</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221630#p221630"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221630#p221630"><![CDATA[
I was going to program an NSF that coerces dogs to bark and interact... ;X<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3466">B00daW</a> — Fri Jul 20, 2018 9:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-07-19T11:12:39-07:00</updated>
<published>2018-07-19T11:12:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221545#p221545</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221545#p221545"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221545#p221545"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />This is actually the correct audio synthesis method <em>anyway</em>. There's no reason to bother to emulate purely ultrasonic sound and then run it through a filter that will completely filter it out. You may as well memo-ize the result (namely, a DC value that is the produce of the duty cycle and the nominal volume) and just emit that instead.<br /></div><br />Yes, that's correct output for these particular cases that are only generating frequencies above that range, but there are also significant high frequencies like this being generated elsewhere (esp. the noise unit) that hare harder to address in this way... like it's probably not practical to store a pre-filtered version of every possible periodic noise loop.<br /><br />However, and this was kind of the last point I was making, there's not really much reason to use these values on the MMC5 anyway. If they're working correctly you won't hear anything. Use of this would most plausibly be a bug/accident. The reason I implemented that workaround for triangle was just that it actually came up in some games. Ignoring the problem for the others seems like a reasonably simple and effective solution too, since it doesn't actually come up. Less special cases for the code and less cycles spent that way. ;P<br /><br />I mean, even though this is a known thing on my to-do list to think about improving, I also consider the current &quot;no solution&quot; solution to be a good indicator/diagnostic of what the MMC5 part of the hardware does; even though it's producing a spurious sound, that sound lets you know that it does in fact function in that way... so there's a side effect benefit that it shows you something you can't hear directly from your TV.<br /><br /><br />(And of course, the emulators that stop MMC5 at 8 as if it had the sweep unit are just getting that wrong, but that's still kind of a moot point w.r.t. real world usage, just a little bit less moot.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Thu Jul 19, 2018 11:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-07-19T10:51:27-07:00</updated>
<published>2018-07-19T10:51:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221543#p221543</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221543#p221543"/>
<title type="html"><![CDATA[Re: Ultrasonic pulse behaviors for 2a0x and MMC5.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17559&amp;p=221543#p221543"><![CDATA[
<div class="quotetitle">B00daW wrote:</div><div class="quotecontent"><br />The tones generated by the MMC5 from the hardware render do seem to be ultrasonic...  ImATrackMan says that he's able to hear the frequencies of the hardware render clip up to 0x05.  I can hear them up to 0x07.<br /></div>Timer=5 (period 6) is 19kHz. I can basically guarantee you that no-one older than about 20 can hear that.<br />Timer=7 (period 8) is 14kHz. This is plausibly audible (in favorable testing conditions), but unlikely.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />this is not easy to combat properly without a lot more CPU usage (oversampling + filtering).<br />[...]<br />...though, a hack that mutes the channel in the emulated output before filtering if the frequency is known to be above human hearing is also possible. That's what the &quot;mute triangle at pitch 0&quot; option in NSFPlay does. Maybe there should be a blanket option for muting all too-high frequency emulation like that. Of course this just hides the filter problem (which will still exist, just with a more subtle effect).<br /></div>This is actually the correct audio synthesis method <em>anyway</em>. There's no reason to bother to emulate purely ultrasonic sound and then run it through a filter that will completely filter it out. You may as well memo-ize the result (namely, a DC value that is the produce of the duty cycle and the nominal volume) and just emit that instead.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu Jul 19, 2018 10:51 am</p><hr />
]]></content>
</entry>
</feed>