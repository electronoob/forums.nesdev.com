<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sending data to NES through controller port</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sending data to NES through controller port</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11518">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11518</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Aug 31, 2014 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nestendo wrote:</div><div class="quotecontent">Awesome, thank you.<br /><br />I'm hoping I can use this to make a set of general send/receive functions I can use inside a game to stream in small amounts of data between frames or larger amounts if the screen is turned off. Not a bootloader just some way to signal the PC and then pick up a stream of bytes of whatever length, so that the NES doesn't have to keep polling the data line to wait for the PC to send something.<br /><br />If anybody has anything like that, let me know!<br /><br />I've got a vertical scrolling ski-free sort of game started, I'm thinking of trying to stream in the level from a PC.</div><br /><br />You'll need a hardware UART, the NES polling is really a software implementation of the same thing.  The old Squeedo board had one, as did MIDINES.  The Everdrive seems to have USB (so inevitably a UART of some type), but I don't know how it's set up.  The next NES board I make will have one.<br /><br />Depending on your CPU requirements, I think streaming may still work even with a soft UART though.  You lose the CPU time for the transfer, but you should nearly double that because you'll have to wait for the start of the data (and triple it if you want extra data to buffer).  What I imagine is like a simple packet, that would be the start byte (not used in the data) followed by the data.  The PC would just send those bytes repeatedly, until it received an acknowledgement from the NES.  In a safer setup, you would include a packet number, and checksum or CRC (and then it's basically XMODEM format).  Ideally, you'd want enough time to receive 2 packets per frame so you could start buffering them in RAM.<br /><br />So the setup I imagine with that is, game runs in NMI, soft UART runs in main loop running forever, and it disables NMIs after detecting the start of a byte (so to avoid data corruption).  If that byte happens to be the 'start byte', then it keeps NMIs disabled and receives the packet, then acknowledges (send PC an incrementing packet number).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 31, 2014 3:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure async serial is necessarily the most efficient protocol for this, at least after the bootloader has finished. I'd prefer the SPI-like protocol of the OP, with some sort of MCU in the middle to act as a FIFO because both the NES and the PC want to be a master: the NES with modified SPI and the PC with USB. You'd need an MCU anyway to run async serial.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Aug 31, 2014 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unless you're going to run it over the controller port, IMSNHO you should use something that appears to the NES as a parallel interface. Deserializing something is a large amount of overhead for no obvious benefit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nestendo</b> [ Mon Sep 01, 2014 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sending data to NES through controller port</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">So the setup I imagine with that is, game runs in NMI, soft UART runs in main loop running forever, and it disables NMIs after detecting the start of a byte (so to avoid data corruption). If that byte happens to be the 'start byte', then it keeps NMIs disabled and receives the packet, then acknowledges (send PC an incrementing packet number).</div><br />That's what I'd like to do. The controller port is still pretty fast at 115200 or 57600bps. If you have to turn the screen off to get any real amount of data through I think it would still be useful. You could stream in different rooms with a little fade to black, load whole levels with a slightly longer one.<br /><br />For smaller bits of data I was hoping there might be a way to squeeze a byte or two though without disabling NMI. Would it be possible to get enough time per frame to grab a few packets in NMI after screen updates? and still finish in time for the next NMI?<br /><br />If I could get two bytes through that would be enough for a PC to signal my vertical skiing game to drop a specific object at a specific x coordinate (at the bottom of the screen).<br /><br />I'll see what I can come up with but it'll probably take me a while.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>