<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=7436" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-01-31T04:43:28-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=7436</id>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2011-01-31T04:43:28-07:00</updated>
<published>2011-01-31T04:43:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73364#p73364</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73364#p73364"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73364#p73364"><![CDATA[
Don't really get how it could help. Usually there is no real need to have register update before VRAM magic (on NTSC NES at least), because the VRAM magic could only take relatively short time, jitter not going to be noticeable. The problem is when you have VRAM update in main 'thread', not in NMI handler, and the code could lag (take more than one frame) - the lag is the reason why you could need to have VRAM update outside of the NMI handler, and the reason why you need to have sound update in the interrupt (NMI or other).<br /><br />If you have VRAM update in NMI, there is no problem with sound update, you just need different project design and more complex code.<br /><br />Anyway, judging by what people have said in this thread, the NMI way is the correct one. Seems that other way I've thought of as the most promising one - using frame counter interrupt - will not work. It almost works, but not good enough - it misses updates, so music lags sometimes, rarely and at random places, but too noticeable to be acceptable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Mon Jan 31, 2011 4:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2011-01-31T02:31:00-07:00</updated>
<published>2011-01-31T02:31:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73361#p73361</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73361#p73361"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73361#p73361"><![CDATA[
One solution to the sound updates problem would happen by making a "delayed" system :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">InterruptHandler:<br />*Update Sound registers<br />*Do VRAM magic<br />*Manage sound stuff and prepare sound registers for update on next frame</div><br /><br />Register updates should take very little time, and you should have plenty of time left for doing VRAM updates and things like that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Mon Jan 31, 2011 2:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2011-01-29T22:12:33-07:00</updated>
<published>2011-01-29T22:12:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73337#p73337</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73337#p73337"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73337#p73337"><![CDATA[
You turn the screen off, and you get to use the Prerender line for vram updates.  Otherwise you can't.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Jan 29, 2011 10:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-01-29T20:18:25-07:00</updated>
<published>2011-01-29T20:18:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73334#p73334</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73334#p73334"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73334#p73334"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />If you have multiple "engines", such as one for one menu, one for another menu, and one for the game, you can put each NMI handler next to each respective engine's buffer filler.<br /></div><br />Exactly. The same way you can have a single loop with the VBlank waiting and PPU updates at the end, you can separate the PPU updates into their own routine, but still keep them in the same file, at the exact same position. There doesn't need to be a difference in code size or organization between techniques.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Enable DMC playback every frame? Does that game (ab)use DMC as a rough scanline timer so that sprite 0 waiting can take place in an IRQ handler?<br /></div><br />I think this is the case, yes.<br /><br /><div class="quotetitle">clueless wrote:</div><div class="quotecontent"><br />What is the point in turning off the PPU?<br /></div><br />I'm wondering the same thing. AFAIK, VRAM can be accessed freely during VBlank without the need to turn rendering off. Unless the updates go past the end of VBlank, like you said.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Jan 29, 2011 8:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-01-29T08:49:49-07:00</updated>
<published>2011-01-29T08:49:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73321#p73321</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73321#p73321"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73321#p73321"><![CDATA[
<div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><br />Here is an outline of The Guardian Legend's NMI routine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ;push regs onto stack<br />  ;turn off bg/sprite rendering<br />  ;set NMI flag &#40;tells the main program that NMI has run&#41;<br />  ;sprite DMA<br />  ;write #$1F to $4015<br />  ;unload generalized drawing buffer to VRAM - there is some flag checking and branching depending on game mode<br />  ;update palettes<br />  ;do some Sprite 0 stuff<br />  ;set scroll<br />  ;turn bg/sprite rendering on<br />  ;bankswitch to sound bank<br />  ;run sound engine driver<br />  ;bankswitch back<br />  ;do some random number noodling<br />  ;pull regs off stack<br />  ;rti</div><br /></div><br /><br />What is the point in turning off the PPU?<br /><br />Is the game guarding against overrunning the real vblank during updates, or is there another reason?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Sat Jan 29, 2011 8:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-01-29T07:56:23-07:00</updated>
<published>2011-01-29T07:56:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73320#p73320</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73320#p73320"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73320#p73320"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />If you have just one place in project where you need to update VRAM, there is nothing to discuss. I'm talking about complex projects with many such places.<br /></div><br />If you have multiple "engines", such as one for one menu, one for another menu, and one for the game, you can put each NMI handler next to each respective engine's buffer filler.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Every sound effect channel could have a flag that shows it is 'active' (you probably have one to tell the player to not process the channel when there is no effect).<br /></div><br />In my engine, for example, this flag represents the number of frames left in the current effect: if 0 then no effect is playing.<br /><br /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><br />;write #$1F to $4015<br /></div><br />Enable DMC playback every frame? Does that game (ab)use DMC as a rough scanline timer so that sprite 0 waiting can take place in an IRQ handler?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jan 29, 2011 7:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2011-01-29T04:32:47-07:00</updated>
<published>2011-01-29T04:32:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73314#p73314</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73314#p73314"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73314#p73314"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />Anyway, I got idea that you prefer NMI way. I would like to hear what others use and what commercial games used (if someone examined them) - to get idea what is common, what is not, etc.<br /></div><br /><br />I use the NMI way.  I have a generalized VRAM update buffer that gets filled with updates in the game logic.  When NMI occurs my NMI routine dumps the buffer to VRAM.  My sound driver is called in the NMI after the VRAM updates are finished.<br /><br />The only commercial game I have ever examined in any depth is The Guardian Legend, which I think is a pretty complex game.  They use the NMI approach too.  Here is an outline of The Guardian Legend's NMI routine:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ;push regs onto stack<br />  ;turn off bg/sprite rendering<br />  ;set NMI flag &#40;tells the main program that NMI has run&#41;<br />  ;sprite DMA<br />  ;write #$1F to $4015<br />  ;unload generalized drawing buffer to VRAM - there is some flag checking and branching depending on game mode<br />  ;update palettes<br />  ;do some Sprite 0 stuff<br />  ;set scroll<br />  ;turn bg/sprite rendering on<br />  ;bankswitch to sound bank<br />  ;run sound engine driver<br />  ;bankswitch back<br />  ;do some random number noodling<br />  ;pull regs off stack<br />  ;rti</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Sat Jan 29, 2011 4:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2011-01-29T01:06:56-07:00</updated>
<published>2011-01-29T01:06:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73313#p73313</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73313#p73313"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73313#p73313"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />An NMI handler doesn't have to be in a separate file. It can be right below the subroutine that prepares the data that the NMI handler copies to VRAM. They can be next to each other in source code even if they have to be in separate banks because of how ca65 segments work.<br /></div><br />Thanks, I know how assemblers work. If you have just one place in project where you need to update VRAM, there is nothing to discuss. I'm talking about complex projects with many such places.<br /><br /><div class="quotetitle">Tom wrote:</div><div class="quotecontent"><br />IMHO, the tricky part is making sure the sound code is robust to timing conflicts, like if your 'start sound effect' routine get interrupted by an NMI.<br /></div><br />This exact problem could be avoided easily. Every sound effect channel could have a flag that shows it is 'active' (you probably have one to tell the player to not process the channel when there is no effect). Initially it reset, you also reset it when a sound effect ends and <em>starts</em> (i.e. in the very beginning of 'play effect' routine). You only set it when you have initialized the effect, so all the variables are set already. Player will not process a half-initialized effect then.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Sat Jan 29, 2011 1:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Tom]]></name></author>
<updated>2011-01-28T19:00:57-07:00</updated>
<published>2011-01-28T19:00:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73306#p73306</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73306#p73306"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73306#p73306"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />It basically describes that I've meant under words 'a general VRAM update system'. Is there actual games that uses this method?<br /></div><br />GemVenture uses a similar system, as do my other works in progress.  Wraith also used such a system, but it was much cruder.  My understanding is that BattleToads also used something like it, although I've never looked myself so I could be wrong.<br /><br />IMHO, the tricky part is making sure the sound code is robust to timing conflicts, like if your 'start sound effect' routine get interrupted by an NMI.  But it was discussed earlier and I think tokumaru came up with a pretty good solution: <a href="http://nesdev.com/bbs/viewtopic.php?p=70941#70941" class="postlink">http://nesdev.com/bbs/viewtopic.php?p=70941#70941</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=120">Tom</a> — Fri Jan 28, 2011 7:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-01-28T15:59:07-07:00</updated>
<published>2011-01-28T15:59:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73297#p73297</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73297#p73297"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73297#p73297"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />If you have switching handlers or pointers, there is not only some code to switch them (not much), but also need to switch them safely. Otherwise you can have wrong handler for a moment, or even non-existant handler address (updated LSB, NMI happened, crash).<br /></div><br />Personally, to solve this problem I just wait for VBlank before modifying the pointer, that way I know for sure that the process will not be interrupted. Another solution in my particular case is to temporally clear bit 7 of the high byte of the pointer (that will make the NMI know that there's no custom handler defined, so none will be called) and then set the lower byte followed by the high byte. I guess I prefer to wait for VBlank though. I have also used tepples' solution in other programs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jan 28, 2011 3:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-01-28T15:26:31-07:00</updated>
<published>2011-01-28T15:26:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73293#p73293</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73293#p73293"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73293#p73293"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />That's it, code located in other place. Drawback is that it makes code more difficult to mantain when you have a lot of t - look here for one part of a single thing, look there for other part, try to find related code in thousands of lines in few files, etc.<br /></div><br />An NMI handler doesn't have to be in a separate file. It can be right below the subroutine that prepares the data that the NMI handler copies to VRAM. They can be next to each other in source code even if they have to be in separate banks because of how ca65 segments work.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you have switching handlers or pointers, there is not only some code to switch them (not much), but also need to switch them safely. Otherwise you can have wrong handler for a moment, or even non-existant handler address (updated LSB, NMI happened, crash). It could be source of weird bugs.<br /></div><br />Good idea. I added an (untested) example of ISR-switching code to the wiki article. It reserves three bytes of RAM, changing the first to RTI while the address is half written.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jan 28, 2011 3:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-01-28T14:38:37-07:00</updated>
<published>2011-01-28T14:38:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73289#p73289</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73289#p73289"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73289#p73289"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />Anyway, I got idea that you prefer NMI way.<br /></div><br />Sure do! <img src="http://forums.nesdev.com/images/smilies/icon_cool.gif" alt="8)" title="Cool" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I would like to hear what others use<br /></div><br />I believe most just wait for VBlank, as that's what all beginner tutorials seem to use (and many beginners end up polling $2002 instead of using NMIs to wait for VBlank, because a lot of old tutorials were made before we knew that frames can be missed that way). Most homebrew projects released so far don't even need very complex game logic, so many developers don't even realize that bad things could happen if there was any lag.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />and what commercial games used (if someone examined them) - to get idea what is common, what is not, etc.<br /></div><br />I think most commercial games use the NMI for PPU updates and critical things that can't lag, with a few earlier games (like, before 1989) having everything inside the NMI (which has the same shortcomings of waiting for VBlank in case there is lag). I'm not aware of any commercial games "waiting for VBlank" like many homebrewers do, but there probably are some. Let's see what others have to say.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jan 28, 2011 2:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2011-01-28T14:17:37-07:00</updated>
<published>2011-01-28T14:17:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73288#p73288</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73288#p73288"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73288#p73288"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />if inside every loop you have a different code for PPU updates, how's that any different from having all of that as separate NMI handlers? It's practically the same amount of code, it's just ordered differently.<br /></div><br />That's it, code located in other place. Drawback is that it makes code more difficult to mantain when you have a lot of t - look here for one part of a single thing, look there for other part, try to find related code in thousands of lines in few files, etc.<br /><br />If you use general VRAM update code, instead of straightforward VRAM update code pieces you have update setup code and (that's the overhead) the update code in NMI. Drawback here is that you need to design that system and always remember how it works, it is additional layer of complexity.<br /><br />If you have switching handlers or pointers, there is not only some code to switch them (not much), but also need to switch them safely. Otherwise you can have wrong handler for a moment, or even non-existant handler address (updated LSB, NMI happened, crash). It could be source of weird bugs.<br /><br />What I'm telling is not that this approach, with different handlers or general update code, is wrong, or bad, etc. I just think it is more complex.<br /><br />Anyway, I got idea that you prefer NMI way. I would like to hear what others use and what commercial games used (if someone examined them) - to get idea what is common, what is not, etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Fri Jan 28, 2011 2:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-01-28T13:57:10-07:00</updated>
<published>2011-01-28T13:57:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73286#p73286</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73286#p73286"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73286#p73286"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />In your example there is just GameLoop, but actual game could have many loops (one for menu, other for game, other for pause, other for a cutscene).<br /></div><br />But just like you might need specialized NMI handlers, wouldn't you have all these different kinds of updates next to their respective loops if you used the "newbie-friendly" method? I mean, if inside every loop you have a different code for PPU updates, how's that any different from having all of that as separate NMI handlers? It's practically the same amount of code, it's just ordered differently.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />with switchable handlers or general update system you need more code to do the same.<br /></div><br />That might be the case with a general update system, but for switchable handlers, I fail to see how this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Loop1:<br />   ;RUN FRAME LOGIC FOR LOOP 1;<br />   ;WAIT FOR VBLANK;<br />   ;PPU UPDATES EXCLUSIVE TO LOOP 1;<br />   jmp Loop1<br /><br />Loop2:<br />   ;RUN FRAME LOGIC FOR LOOP 2;<br />   ;WAIT FOR VBLANK;<br />   ;PPU UPDATES EXCLUSIVE TO LOOP 2;<br />   jmp Loop2<br /><br />NMI:<br />   ;INDICATE THAT VBLANK STARTED<br />   ;rti</div><br />is significantly simpler or any more efficient than this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Loop1:<br />   ;RUN FRAME LOGIC FOR LOOP 1;<br />   ;WAIT FOR THE NMI HANDLER TO FINISH;<br />   jmp Loop1<br /><br />Loop1NMI:<br />   ;PPU UPDATES EXCLUSIVE TO LOOP 1;<br />   rti<br /><br />Loop2:<br />   ;RUN FRAME LOGIC FOR LOOP 2;<br />   ;WAIT FOR THE NMI HANDLER TO FINISH;<br />   jmp Loop2<br /><br />Loop2NMI:<br />   ;PPU UPDATES EXCLUSIVE TO LOOP 2;<br />   rti<br /><br />NMI:<br />   ;JUMP TO CURRENT NMI HANDLER;</div><br />It's practically the same code, it's just ordered differently. The only real overhead to the switchable NMIs is that you have to setup the pointer to the NMI handler, but that's something you can do once and really quickly during the initialization phase of each loop, and the stability you get more than makes up for that IMO. You can even reuse NMI handlers if different loops need similar kinds of updates. And like I said, you don't even have to sacrifice the other technique, you can use both. Here's the NMI routine I use in my game:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br /><br />   ;branch if the program is just waiting for VBlank<br />   bit WaitingVBlank<br />   bmi +FlipFlag<br /><br />   ;branch if there is no custom interrupt routine defined<br />   bit CustomNMI+1<br />   bpl +Return<br /><br />   ;transfer control to the the custom routine<br />   jmp &#40;CustomNMI&#41;<br /><br />+FlipFlag:<br /><br />   ;indicate that the interrupt happened<br />   inc WaitingVBlank<br /><br />+Return:<br /><br />   ;return from the interrupt<br />   rti</div><br /><br />I can either define custom NMI handlers for each section of my game, or wait for VBlank with this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   dec WaitingVBlank<br />-   bit WaitingVBlank<br />   bmi -</div><br />And I can even do that while a custom handler is still defined, as this flag is checked first, so it takes precedence over the custom handler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jan 28, 2011 1:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2011-01-28T13:19:03-07:00</updated>
<published>2011-01-28T13:19:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73284#p73284</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73284#p73284"/>
<title type="html"><![CDATA[Sound update timing problems]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7436&amp;p=73284#p73284"><![CDATA[
In your example there is just GameLoop, but actual game could have many loops (one for menu, other for game, other for pause, other for a cutscene). I think that this is where things turns to be more complex with VRAM update code in NMI, with switchable handlers or general update system you need more code to do the same.<br /><br />Raster effects like splits are special case, I think - if game could lag, and no scanline IRQ available, there is just no other way than use NMI.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Fri Jan 28, 2011 1:19 pm</p><hr />
]]></content>
</entry>
</feed>