<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Enemy placement in screen-by-screen top-down game</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Enemy placement in screen-by-screen top-down game</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16590">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16590</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Tue Oct 17, 2017 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">While it's possible that there could be dozens of tests with a &quot;not allowed&quot; result, I doubt it would cause a big delay as the screen is loading.</div><br /><br />This is true. You can test a LOT of tries in the transition between rooms without causing a delay would bother the player.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Oct 17, 2017 3:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Having a low number of spawn points per room is probably the most straightforward way to limit randomness. If you are reusing rooms, you also have to decide wether that is unique to each actual room clone, or just the room type (like how spawn points are decided in metroid).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 17, 2017 3:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">All in all, the only really important part of your code is this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; If position is not possible:<br />&nbsp; lda xyposition<br />&nbsp; asl a<br />&nbsp; bcc :+<br />&nbsp; &nbsp; eor #$D9<br />&nbsp; :<br />&nbsp; ; Check again.</div><br />Although I still don't get why it's the value $D9. This is probably some mathematical stuff.</div><br />That's what I hinted at with the name &quot;Galois&quot;. <a href="https://en.wikipedia.org/wiki/%C3%89variste_Galois" class="postlink">Ã‰variste Galois</a> was a French mathematician who developed group theory and <a href="https://en.wikipedia.org/wiki/Finite_field" class="postlink">finite field theory</a>, on which <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register" class="postlink">linear feedback shift registers</a> (LFSRs) are based. You can try any of several numbers to ensure that you don't hit a loop too fast. In fact, I may have made an error in the choice of $D9.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Oct 18, 2017 2:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><br />Then there's the problem that they shouldn't be allowed to be placed in tiles that are walls, unless they can fly.<br /><br />I have an array of 16 x 15 bytes that defines which tiles are walls and which are walking ground.<br />So, generating a random number from 0 to 239 isn't a problem.<br />After generating it, I could adjust the value and move the position up, down left or right if the character would be too close to the player's side.</div><br /><br />Well, if you're going to place enemies semi-randomly, you can just pick a random place, and see if it is excluded. Then, if the place is excluded, you just repeat the random number generation again, and loop until you end up having a place which is not excluded. It is excluded if it falls in one of the cases you mentionned : Too close to the player, a non-flying enemy on a solid tile, or another randomly placed enemy already being there.<br /><br />This can take more time but since it's when the room is loading and not during action, this is a non-issue.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Oct 18, 2017 3:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />About the whole issue of &quot;pick random spot, if it doesn't work, pick another one&quot;: The problem that I have with this is the unpredictability. Moving away from an unallowed tile in a specific fashion will eventually reach a valid tile. But doing another random value means that this could potentially happen very, very often.<br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">No, i mean the array would cover all coarse positions on the playfield (except outer walls etc, if any) that are nominally eligible for placement, but have their order shuffled in a way decided by the game designer.</div><br />I still don't quite understand how you mean it.<br /><br /><div class="quotetitle">Sumez wrote:</div><div class="quotecontent">What kind of game is this? Is it a completely designed interconnected world where you want to apply randomness to the enemy spawning in order to keep the game challenging and keeping the player on their toes?</div><br />It's &quot;Zelda&quot;-like, i.e. completely designed. Fixed positions for certain enemies are of course also possible, but that's a mundane thing to program and doesn't require a thread. (Likewise, enemy movement is a totally different topic altogether.) But I'm looking for good ways for randomly or semi-randomly appearing enemies.<br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">Having a low number of spawn points per room is probably the most straightforward way to limit randomness. If you are reusing rooms, you also have to decide wether that is unique to each actual room clone, or just the room type (like how spawn points are decided in metroid).</div><br />Fixed points per room is the simplest to program, but it requires a lot of ROM space. And if I only use six positions or so, that's pretty limited.<br /><br />I assume rooms on the overworld won't be reused that much. Although I might consider this for dungeons. But even then, it's only the layout, not the enemy placement.<br /><br /><br />What algorithms does &quot;The Legend of Zelda&quot; use?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Oct 18, 2017 4:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I still don't quite understand how you mean it.</div><br /><br />Suppose all spawn points are aligned to the attribute grid (they don't have to, but for the sake of making an example). <br />You'd have all possible spots labeled* like so:<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=10473&amp;mode=view"><img src="./download/file.php?id=10473&amp;t=1" alt="Untitled.png" /></a><br />
			<span class="gensmall">Untitled.png [ 22.58 KiB | Viewed 1326 times ]</span>
		

		<br />
	</div><br />That's our imagined table of spawn point ID:s. <br /><br />A row is 0-F for making it easy for us to understand what position it represents. <br /><br />Now, we create a shuffled array:<br />11, A1, AE, 1E,<br />22, 92, 9D, 2D,<br />11, A1, AE, 1E,<br />33, 83, 8C, 3C,<br />(add in all you want - but exlude outer walls and doorways)<br /><br />The array points to which of tile an enemy is spawned. In this example, since 11, A1, AE, 1E appear twice as often as the other ones, they (the corners) are twice as likely to be positions where enemies spawn. It's like having a modified deck of cards where some cards would appear twice, thrice or not at all. Also, the deck is rigged in a certain order.<br /><br />With the one and only array-approach, you'd want all legit positions to appear at least once. With more arrays, they can be smaller and exclude certain spots if you want to. For example, it could be enough for a certain enemy type to only be able to spawn in corners, in which case you'd need only 4 bytes for that monster type. You'd better move their priority up in the list, then, as their spots are few. Another monster type may only spawn in a centered quarter of the screen. You get the idea. <br /><br />The pick position procedure could be as follows: <br /><br />Randomize an index.<br />Start there. <br />Vacant spot?  <br />- if yes, place enemy, dec index (or alternately randomize index again). if index = 0, start from top, pick next enemy to place. <br />- if no, dec index. If index = 0, start from top.<br />Loop until all enemies in the list are placed or in case there are no vacant spots left to place in (fail level count?), escape. <br /><br />This way you could tailor 'randomness' pretty efficiently, at the cost of having at least one array. With more arrays, you can have varied &quot;patterns of likelihood&quot;.<br /><br /><br />*It's a mental labeling - you don't need to store this information in ROM. The integers stored in the array can be used for moving the spawn decision to the correspondent position. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What algorithms does &quot;The Legend of Zelda&quot; use?</div><br />I don't know, but there's a disassembly here:<br /><!-- m --><a class="postlink" href="http://computerarcheology.com/NES/Zelda/">http://computerarcheology.com/NES/Zelda/</a><!-- m --><br /><br /><br />Post script&#058;<br />I originally got this idea when contemplating the fortunate/unfortunate side features of the 'random table' in the Lone Wolf adventure book series. <br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=10474&amp;mode=view"><img src="./download/file.php?id=10474&amp;t=1" alt="AC297c1.jpg" /></a><br />
			<span class="gensmall">AC297c1.jpg [ 66.71 KiB | Viewed 1319 times ]</span>
		

		<br />
	</div><br />It was the game constructors' intention to work as a makeshift die. You'd close your eyes and point your pen, and see what you got. <br />The fact is that the player will get familiar with the table and know what regions have high numbers, low numbers, high risk, low risk and so on. In this particular game, i think it's bad because it is meant to substitute a ten-sided dice but works nothing like it. There is potential, however. You can modify the chances of certain numbers by modifying their rate of appearance. You can modify the width of relations to neighboring numbers. You can modify the algorithm which picks a cell (you could have a set of methods how to pick a number). And the fact that the player can learn patterns can be used for good, because what you want is not randomness - it is patterns with a touch of chance large enough to keep the player alert/previously explored areas fresh.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Oct 18, 2017 7:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">About the whole issue of &quot;pick random spot, if it doesn't work, pick another one&quot;: The problem that I have with this is the unpredictability. Moving away from an unallowed tile in a specific fashion will eventually reach a valid tile. But doing another random value means that this could potentially happen very, very often.</div><br /><br />Is your concern getting stuck in an endless or very long loop where you keep testing random tiles that aren't allowed?<br /><br />If your RNG code is pretty reliable, this shouldn't be an issue, as eventually all tiles will be tested in a time span that is not perceivable to the player. I do understand the paranoia, and lack of comfort relying on something random, because even though it's super unlikely, the player could &quot;win the lottery&quot; and be forced to wait through a hundred thousand tests that result in &quot;not allowed&quot;. The funny thing is that even that might take less than one second.<br /><br />The main problem I suppose is that you might test the same tile more than once if you just leave it random. A simple solution is to have an array with values 0-239, and shuffle that array. Start at the beginning of the array and test that value. No matter what the result is (&quot;allowed&quot; or &quot;not allowed&quot;), you just move on to the next value. This would also simplify the criteria for &quot;not allowed&quot;, because you wouldn't need to check if an enemy has taken one of the random tiles. Once a tile is tested, it's never tested again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Oct 18, 2017 10:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">The problem that I have with this is the unpredictability.</div><br />If you're relying on a RNG the result is <em>obviously</em> going to be unpredictable. However, for reasons mentionned by Celius, this is acceptable when loading a new room. It would not be acceptable during action.<br /><br />Personally in my game which is also screen-by-screen and top-down, I have enemy placement with one nybble (4 bits) for each of X and Y placement. It's not like it's a LOT of ROM space to waste one byte per enemy... Since the bosses and possibly teasure chests have to be placed at a specific place, you need a way to have non-random placement anyway, so I doubt adding random placement on top of that saves any ROM space, even if it saves one or two bytes per enemy who uses it, the code doing it might largely compensate that. However purely gameplay wise I imagine random enemy placement might be much more interesting and less repetitive, especially for replaying the game a 2nd time. You could also have difficulty levels, and more easily add new enemies without changing much else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Wed Oct 18, 2017 8:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Since the bosses and possibly teasure chests have to be placed at a specific place, you need a way to have non-random placement anyway, so I doubt adding random placement on top of that saves any ROM space, even if it saves one or two bytes per enemy who uses it, the code doing it might largely compensate that. However purely gameplay wise I imagine random enemy placement might be much more interesting and less repetitive</div><br /><br />That's exactly why I supported both.  Some rooms really need a specific placement to work correctly. Some benefit from randomness to keep them interesting.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Thu Oct 19, 2017 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My solution would be probably randomizing position again until it isn't near the player or in a wall.<br /><br />So the algorithm would be (in pseudo code)<br /><br />1. Randomize enemy's position<br />2. If the enemy is in the wall or too close to player, go to 1, else carry on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Fri Oct 20, 2017 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Honestly, I don't think saving cartridge space is a good enough excuse to make enemy spawning completely procedural. You need at least some kind of setting for how spawning behaves in each room if you want the game to work well, though of course I guess that's just my opinion. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />If cartridge space is an issue, find a way to compress the data.<br />With my previous suggestion of having some preset spawn points chosen at random, one effective way to save space would be to make each zone relatively large, for example a 32x32 bit tile, or even 64x64 (meaning each enemy type's spawn map could be contained in a single 16bit bitmap per room!), and just make sure at least one tile within that larger tile is always a valid location (so if you spawn a 16x16 enemy on a 64x64 tile, you'd just pick a new random number &amp; $0F, and increase the index until you find a valid tile).<br />You could also have more complex spawn maps but reuse the same ones across multiple rooms or enemy types, since you'll probably often find yourself repeating very similar spawn patterns even in rooms that are otherwise very different in their deisgns. Then each spawn map would always be a single 8 bit index at worst.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Fri Oct 20, 2017 6:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the suggestions.<br /><br />In the end, we decided for a pretty simple way that has also been mentioned here:<br /><br />I will generate a random number and if it isn't a valid spot, I'll do this a few times more. If it still doesn't work after, for example, 10 times, this specific opponent will not trigger at all and the player was lucky.<br /><br />This way, the algorithm is very easy, without lookup tables or some additional rules. And it has a definite finish point for the rare case where the randomizer really cannot find a suitable location.<br /><br /><div class="quotetitle">Sumez wrote:</div><div class="quotecontent">Honestly, I don't think saving cartridge space is a good enough excuse to make enemy spawning completely procedural. You need at least some kind of setting for how spawning behaves in each room if you want the game to work well, though of course I guess that's just my opinion. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />I don't think that's necessary. If the monster can walk to any point on the map that's not a wall, it can also spawn on any point of the map. If I have soldiers who attack in formation, I will skip the radomization in the first place and simply put them in fixed positions. But if I have a horde of wolves, why shouldn't they be in completely random locations?<br /><br /><div class="quotetitle">Sumez wrote:</div><div class="quotecontent">If cartridge space is an issue, find a way to compress the data.</div><br />It's not only the cartridge space, it's also the hazzle to define this for every screen.<br />So, you don't just have the actual layout of the screen, but also tactical rectangles for enemy placement. Nah, that's too complicated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Oct 20, 2017 7:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">If it still doesn't work after, for example, 10 times, this specific opponent will not trigger at all and the player was lucky.</div><br />I think it's a very good call to have a fallback like this.<br /><br />There are simple cases where you can guarantee your PRNG will eventually produce a valid result, but it's very easy for edge cases to slip through the cracks when you start adding all the little constraints that come up in a real system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Fri Oct 20, 2017 8:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Enemy placement in screen-by-screen top-down game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But if I have a horde of wolves, why shouldn't they be in completely random locations?</div><br /><br />I think that's a good approximation of a &quot;disorganized&quot;, &quot;chaotic&quot; or even &quot;wild&quot; trait, and wolves would fall in the third category. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />one could also think of wolves having a lookput at the point with the best view, and it will call its pack when in line of sight. Those could either be randomly placed or come in from the edge of the field.<br /><br />I think that's the options i'd consider for spawning wolves.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>