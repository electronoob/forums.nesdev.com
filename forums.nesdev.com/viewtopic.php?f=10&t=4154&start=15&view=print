<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Question about NES vectors and PPU</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Question about NES vectors and PPU</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4154">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4154</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Jun 14, 2008 5:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, I thought about something similar to tokumaru, to ensure that music will not lag. So I'm not dummy...
<br />
<br />Do you think that it is even possible to design such a engine that calculate time to processing the current frame and if it is too big to be performed and ready in that frame, just calculate the next frame and then render it after the skipped frame (so the engine do frame skipping when necessary) ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Jun 14, 2008 6:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">My engines increment a retrace count on NMI and do nothing else (like FF1 does). The main code relies on this retrace count changing 60 times a second. It waits for the retrace count to change, then updates VRAM, reads the controller, and does game logic.</div><br />This is fine as long as you're sure your frame calculations won't go beyond the time at which the NMI fires. If the code takes longer than that, you'll misdetect the start of VBlank and will possibly mess with the PPU while the next frame is already rendering.</div>
<br />This will synchronize to NMI just fine:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:&nbsp; &nbsp; inc nmi_count<br />&nbsp; &nbsp; &nbsp; &nbsp; rti<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />wait_nmi:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda nmi_count<br />loop:&nbsp; &nbsp;cmp nmi_count<br />&nbsp; &nbsp; &nbsp; &nbsp; beq loop<br />&nbsp; &nbsp; &nbsp; &nbsp; rts</div>
<br />The reason to poll nmi_count is that it simplifies code to a single thread, so you don't have to worry about NMI interrupting and reading half-updated data structures.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Jun 14, 2008 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I suppose I never thought about having the main loop wait for the next NMI, so you're right, it would probably be best in the main loop, since it won't happen more than once a frame if you wait for the NMI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 15, 2008 7:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">This will synchronize to NMI just fine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:&nbsp; &nbsp; inc nmi_count<br />&nbsp; &nbsp; &nbsp; &nbsp; rti<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />wait_nmi:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda nmi_count<br />loop:&nbsp; &nbsp;cmp nmi_count<br />&nbsp; &nbsp; &nbsp; &nbsp; beq loop<br />&nbsp; &nbsp; &nbsp; &nbsp; rts</div><br />The reason to poll nmi_count is that it simplifies code to a single thread, so you don't have to worry about NMI interrupting and reading half-updated data structures.</div><br />I see what you mean. You can only get out of this loop when the value is different from when you first read it. The only problem is that you can't, for example, prevent your music code from lagging in frames where the game logic takes too long. In practice, this is just an updated version of the old "wait for VBlank" used in the old days but has been proved unreliable. Works great for simpler games, but is not the perfect choice for games with occasional slowdowns.<br /><br /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">Anyway, my approach would probably be something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Main Game:<br />- poll joypads<br />- process game logic<br />- compile a list of PPU writes that need to be done so that NMI can quickly just dump the stuff from the list into VRAM, without having to really compute anything<br />- set a &quot;waiting for NMI&quot; flag<br />- wait for said flag to become clear<br />- repeat the process<br /><br /><br />NMI:<br />- Check &quot;wait for NMI&quot; flag, do the following only if set:<br />--- Sprite DMA<br />--- read from precompiled list and do necessary PPU writes<br />--- clear &quot;wait for NMI&quot; flag<br /><br />&#40;do the rest regardless of that flag's state&#41;<br />- set scroll values appropriately<br />- set up whatever IRQs need to be set up &#40;do this first if they're CPU cycle based -- here otherwise&#41;<br />- JSR to music<br />- RTI<br /></div></div>
<br />This is <strong>exactly</strong> what I do, even the IRQ stuff, I just wasn't clear enough in my last post.
<br />
<br />EDIT: Just a note on how tricky the "set scroll values appropriately" step can be when frames haven't been fully processed yet. The scroll is one of the first things my main loop calculates (this probably happens in other engines as well), so the new scrolling values are always ready by the time the NMI fires, but if the rest is not, and the scroll is updated but no tiles or sprites are, you can get glitches or even that annoying effect where sprites that should be perfectly aligned to the background appear to shake a bit.
<br />
<br />This happens in many commercial games (I've seen this on the Master System a lot, but also in some NES games), but is very annoying in my opinion. My solution was to, inside the part of the NMI that executes only when frames are complete, make a copy of the current scroll values. Then, in the part that is always executed, the copies are sent to the PPU. This means that while a frame is not completed, the PPU will keep using the old scroll values, until the frame is complete and they are updated with the new ones.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 15, 2008 7:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">You can only get out of this loop [that changes the retrace count] when the value is different from when you first read it. The only problem is that you can't, for example, prevent your music code from lagging in frames where the game logic takes too long.</div>
<br />The music engine can store the current nmi_count, subtract the old nmi_count, and be able to reliably skip more than a second of missed vblanks. I'm pretty sure Pokemon Blue for GB uses this technique. But why is the game logic taking too long when games like Recca can run at 60 fps?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 15, 2008 8:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The music engine can store the current nmi_count, subtract the old nmi_count, and be able to reliably skip more than a second of missed vblanks.</div><br />That is one solution, true. I know I'm no sound guru, but wouldn't skipping sound worse than actually playing everything at a constant rate? I mean, there must be some perceptible distortion.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm pretty sure Pokemon Blue for GB uses this technique. But why is the game logic taking too long when games like Recca can run at 60 fps?</div>
<br />Wow, it sure is hard to imagine a Pokemon game lagging... Maybe it happens when walking through the map and many character are walking around at once, I don't know.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 15, 2008 8:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The music engine can store the current nmi_count, subtract the old nmi_count, and be able to reliably skip more than a second of missed vblanks.</div><br />That is one solution, true. I know I'm no sound guru, but wouldn't skipping sound worse than actually playing everything at a constant rate? I mean, there must be some perceptible distortion.</div><br />Yes, it's perceptible, but just barely, like when a game slows from 60 fps to 30 fps and the game moves things twice as fast to keep up. When the audio update routine is delayed, all channels continue to play at their old pitch, timbre, and volume. Except for note-on or note-off events, most frames don't bring major changes to the PSG parameters.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm pretty sure Pokemon Blue for GB uses this technique. But why is the game logic taking too long when games like Recca can run at 60 fps?</div><br />Wow, it sure is hard to imagine a Pokemon game lagging... Maybe it happens when walking through the map and many character are walking around at once, I don't know.</div>
<br />Pokemon Blue lags mostly when it loads new CHR and maps into VRAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Jun 15, 2008 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">You can only get out of this loop [wait_nmi] when the value is different from when you first read it. The only problem is that you can't, for example, prevent your music code from lagging in frames where the game logic takes too long.</div>
<br />You can use a hybrid approach. Run the music engine off NMI, since it has very little communication with the game logic, thus making data synchronization easy (basically just "start music X" and "play sound effect Y" commands). If you had some mid-frame PPU operations, like split-screen for a status bar, that could also be done with NMI, since it involves little coordination with the game logic. This scheme still keeps things like sprites, tile updating, scroll position, etc. in the game thread, without the need for <a href="http://en.wikipedia.org/wiki/Atomic_%28computer_science%29" class="postlink">atomic updates</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 15, 2008 10:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">You can use a hybrid approach. Run the music engine off NMI</div>
<br />You have to run graphics updates before everything else because they must fit in the roughly 2,270 cycles of vertical blanking. So if you move music to NMI, you have to move nametable, palette, and OAM updates to NMI too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Jun 15, 2008 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would definitely run the music engine in the NMI, since like Blargg said, there is very little game logic involved. I really don't see any reason for the music not to be updated every frame.
<br />
<br />Oh, and RPGs lagging might have something to do with RLE maps being decoded, since you can't mathematically predict where any tile is, you have to check every single byte in each row of the map to get to a specific tile. This can take thousands of cycles, especially when you have to update columns, in which case you have to decompress to one tile for 15 different rows, if you're using 2x2 metatiles, which many RPGs do. It's much easier/faster for games that compress maps into blocks to update, since you can calculate and not have to guess and check positions of tiles.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>