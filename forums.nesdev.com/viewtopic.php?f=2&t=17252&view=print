<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - BCH-21,31 implementation for 6502</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">BCH-21,31 implementation for 6502</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17252">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17252</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Apr 11, 2018 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>BCH-21,31 implementation for 6502</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I got around to porting the <a href="https://en.wikipedia.org/wiki/BCH_code" class="postlink">BCH-21,31</a> forward-error-correction routines I have to the NES.<br /><br />Included is a trivial demonstration of both generation and correction working.<br /><br />FEC let you detect when data corruption has happened, and to a limited extent lets you repair that damage. BCH-21,31 is specifically used in a wide variety of radio protocols (including POCSAG, FLEX, and the <a href="https://github.com/CFSworks/wavebird-reversing" class="postlink">GameCube's WaveBird</a>). In the NES, this might be useful in passwords, or perhaps for storage on audio cassette.<br /><br />Because calculating BCH involves a lot of work on just one bit at a time, I've stored all the numbers in &quot;transposed&quot; manner, one bit per byte, big-endian. However, my routines correctly let you pack multiple bits into those 31 bytes. Note that because this FEC can correct at most two bits, you'll want to plan based on the specific kind of data corruption you anticipate; in RF contexts this transposed layout is beneficial because it distributes single bits of noise over multiple protected words.<br /><br />Hopefully someone finds this useful.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=12358">BCH2131.zip</a> [7.17 KiB]
			</span><br />
			<span class="gensmall">Downloaded 71 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 11, 2018 3:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BCH-21,31 implementation for 6502</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In my opinion, passwords should be short enough for error detection alone. An 8-character password over a 32-character alphabet holds 32 bits of payload and 8 bits of message authentication. Forward error <em>correction</em> on passwords would mean more randomly guessed passwords would be correctable to valid code words. If we set it to correct up to 1 bit flip, how many errors can BCH 21 of 31 <em>detect</em>?<br /><br />I guess it could be used for ensuring transients at power-off don't corrupt saved games in battery RAM, or for a 2D barcode to upload your high score to a server. I imagine the FEC used in Denso's QR Code (the most commonly seen 2D barcode) is a bit more complex though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Apr 18, 2018 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BCH-21,31 implementation for 6502</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If we set it to correct up to 1 bit flip, how many errors can BCH 21 of 31 <em>detect</em>?<br /></div>Either you edited this, or I simply failed at reading when you replied...<br /><br />BCH-21,31 can do any one of:<br />Correct 0 and detect 5 bits of error<br />Correct 1 and detect 4 bits of error<br />Correct 2 and detect 3 bits of error<br /><br />(The hamming distance between any two valid words is at least 6 bits)<br /><br />Alternatively, you could specifically consume one bit worth of error correction to store an additional 5 bits. (The correction algorithm specifically finds which bits have errors and toggles them, so one could intentionally add an error to store more state: toggle any of of 31 bits or don't toggle any). The &quot;correct 2&quot; state doesn't let you know which bit error was the one that was supposed to be data, so you can't correct additional errors in this case.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>