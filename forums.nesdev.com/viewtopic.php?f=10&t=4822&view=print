<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Adapting a NESASM tutorial for ASM6</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Adapting a NESASM tutorial for ASM6</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4822">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4822</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>noattack</b> [ Mon Feb 02, 2009 9:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Adapting a NESASM tutorial for ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just getting my feet wet, so bear with me...
<br />
<br />As the title suggests, I was attempting to translate bunny's first NESASM tutorial into ASM6 syntax.  After rearranging and fiddling a bit, I was able to get my source to compile, but it doesn't produce the proper output.  More specifically, it produces a blank gray screen in the emulator (it should be blue).  The tutorial is basically flipping an emphasis bit to change the background color.  
<br />
<br />Here's my source:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />; iNES identifier<br />.byte &quot;NES&quot;,$1a<br />.byte $01 ; 1 PRG-ROM block<br />.byte $01 ; 1 CHR-ROM block<br />.byte $00 ; unsure about these...which is mapper?<br />.byte $00 ;<br /><br />;;;;;;;;;;;;;;<br /><br />&nbsp; .org $0000<br />&nbsp; .incbin mario.chr&nbsp; &nbsp;;includes 8KB graphics file from SMB1<br /><br />;;;;;;;;;;;;;;<br /><br />&nbsp; .org $C000<br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0200, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0300, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br /><br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br />&nbsp; LDA #%01000000&nbsp; &nbsp;;intensify emphasis bit<br />&nbsp; STA $2001<br /><br />Forever:<br />&nbsp; JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop<br /><br />NMI:<br />&nbsp; RTI<br /><br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens &#40;once per frame if enabled&#41; the<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br /><br /><br /></div>
<br />
<br />So I'm not sure what's going wrong here.  I omitted the 'bank' directives, as I understand that ASM6 doesn't require them.  The header was cobbled together from a different tutorial (which also explains why chr data is there as well).  I'm not sure how this should look in ASM6.  The source also wouldn't compile until I put my .org statements in order.
<br />
<br />This is all elementary, but where am I screwing up?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beneficii</b> [ Mon Feb 02, 2009 10:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You have the .orgs and ordering messed up.  First, the .incbin for the CHR-ROM should go at the end, after the PRG-ROM, just the same as the order in the actual ROM itself.  (Remember, ASM6 isn't designed exclusively for the NES/Famicom.)  Get rid of the .org statement before the .incbin.
<br />
<br />The remaining .org statement ".org $C000" should be fine, though you can also replace it with "$ = $C000" in ASM6.  The ".org $FFFA" should also be fine, because the second and subsequent .ORG statements are treated like .PAD statements in ASM6.  (In ASM6, I recommend using a combination of "$ = addr" and ".PAD addr" to control the addressing, because that allows you good control over the ROM.)
<br />
<br />With these changes, try assembling the ROM again.
<br />
<br />EDIT: Also, the iNES header needs to be exactly 16 bytes long.  Pad the end with 0's if needed be.  I would recommend, before the header, putting "$ = $0000", then after the header putting ".PAD 16, 0."  Then, before the code, putting "$ = $C000".  That should do the program fine.
<br />
<br />EDIT 2: It might be safe to put ".pad $FFFA" to replace the ".org $FFFA" if it's still not working properly, fixing the possible error of the program treating the ".org $FFFA" as the first .org statement, treating it like the "$ = $FFFA" statement.  Or you could just follow loopy's advice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>loopy</b> [ Mon Feb 02, 2009 10:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Adapting a NESASM tutorial for ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Header should be 16 bytes, and chr data should be moved to the end.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />; iNES identifier<br />.byte &quot;NES&quot;,$1a<br />.byte $01 ; 1 PRG-ROM block<br />.byte $01 ; 1 CHR-ROM block<br />.byte $00 ; unsure about these...which is mapper?<br />.byte $00 ;<br />.byte 0,0,0,0,0,0,0,0&nbsp; ; pad header to 16 bytes<br /><br />;;;;;;;;;;;;;;<br /><br />&nbsp; .org $C000<br />RESET:<br /><br />&nbsp; ......<br />&nbsp; ......<br />&nbsp; ......<br /><br />NMI:<br />&nbsp; RTI<br /><br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens &#40;once per frame if enabled&#41; the<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br /><br /><br />;;;;;;;;;;;;;;<br /><br />&nbsp; .incbin mario.chr&nbsp; &nbsp;;includes 8KB graphics file from SMB1<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>noattack</b> [ Mon Feb 02, 2009 11:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you both.  Everything is working properly now.
<br />
<br />So, if I understand correctly, an .ORG statement should only be used once, since it 'sets the starting address'?  Or not at all, since it seems easier to use the "$ = ADDR" format instead.
<br />
<br />.PAD, on the other hand, fills a particular memory location, rather than moving to that address in the actual execution of code, right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beneficii</b> [ Mon Feb 02, 2009 11:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />noattack:
<br />
<br />Basically, when you set a label like "label:", when the assembler reaches that label definition, it will assign an address to it based on the current ROM address it calculates.  When you set ".org addr" for the first time or "$ = addr", it tells the assembler what address to start counting from as it assembles each instruction and each byte.  If an instruction takes up 3 bytes in the ROM, then it counts 3 bytes from where it was.  Doing "$ = addr" again simply tells the assembler to start counting from that new address.
<br />
<br /> ".org addr" the second or subsequent times or ".pad addr" will cause the assembler to fill bytes from the address the .org or .pad statement is at, counting each byte along the way, until it reaches the address specified as "addr".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>loopy</b> [ Tue Feb 03, 2009 12:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">noattack wrote:</div><div class="quotecontent">Thank you both.  Everything is working properly now.<br /><br />So, if I understand correctly, an .ORG statement should only be used once, since it 'sets the starting address'?  Or not at all, since it seems easier to use the "$ = ADDR" format instead.</div><br /><br />Yes, use it once at the beginning of your code to set the starting address.  You'll see it multiple times in the same NESASM code, to set the address of each bank.  I would keep using .ORG since it's the standard way of doing things and understood by everyone, whereas the "$=addr" thing is specific to ASM6.<br /><br />Regarding .ORG, perhaps I should mention ASM6 diverges from other assemblers in another way - it allows you to output data before an origin is set, where other assemblers might complain or assume a default value. This is only allowed in cases where an ambiguous address doesn't matter.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; iNES identifier <br />.byte &quot;NES&quot;,$1a <br />.byte $01 ; 1 PRG-ROM block <br />.byte $01 ; 1 CHR-ROM block <br />.byte $00 ; unsure about these...which is mapper? <br />.byte $00 ; <br />.byte 0,0,0,0,0,0,0,0&nbsp; ; pad header to 16 bytes <br /><br />;;;;;;;;;;;;;; <br /><br />&nbsp; .org $C000 <br />RESET:<br />&nbsp; &nbsp;SEI<br /></div><br /><br />With your code here for example, it outputs 16 header bytes, then starts assembling at $C000.  With another assembler, you might be expected to have ".org $C000-16" before the header.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">foo:&nbsp; &nbsp; .byte 0<br />&nbsp; &nbsp; &nbsp; &nbsp; .org $8000<br />&nbsp; &nbsp; &nbsp; &nbsp; lda foo<br /></div><br /><br />This, on the other hand, does make ASM6 throw an error since it doesn't know where foo is located.  (I suppose I could be clever and make it infer an origin of $7fff, but I digress...)<br /><br /><div class="quotetitle">noattack wrote:</div><div class="quotecontent">.PAD, on the other hand, fills a particular memory location, rather than moving to that address in the actual execution of code, right?</div>
<br />.PAD fills memory UP TO a particular address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>noattack</b> [ Tue Feb 03, 2009 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So in the following snippet:
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; <br />.org $C000 <br />RESET: <br /><br />&nbsp; ...... <br />&nbsp; ...... <br />&nbsp; ...... <br /><br />NMI: <br />&nbsp; RTI <br /><br />&nbsp; .pad $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here <br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens &#40;once per frame if enabled&#41; the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI: <br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET: <br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial <br /><br /><br /></div>
<br />
<br />the initial .ORG sets the ROM address at $C000, then executes the code directly following.  Then the .PAD tells the assembler to fill all bytes past the code <em>up to</em> address $FFFA, at which point the three vectors are defined?
<br />
<br />And then even if I had a second .ORG in lieu of the .PAD, ASM6 assembles as if it were the latter, since it is the second .ORG in the source.
<br />
<br />I appreciate the help.  It's taking a while to wrap my brain around the concept of addressing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Feb 03, 2009 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">noattack wrote:</div><div class="quotecontent">the initial .ORG sets the ROM address at $C000, then executes the code directly following.  Then the .PAD tells the assembler to fill all bytes past the code <em>up to</em> address $FFFA, at which point the three vectors are defined?<br /></div><br /><br />Correct<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And then even if I had a second .ORG in lieu of the .PAD, ASM6 assembles as if it were the latter, since it is the second .ORG in the source.<br /></div>
<br />
<br />The best way to visualize this is to look at the assembled file in a hex editor.  Given the following example:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $C000<br />foo:<br />&nbsp; LDA #1<br /><br />.pad $C008<br />bar:<br />&nbsp; LDA #2<br /></div><br /><br />This would Assemble to the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A9 01 00 00 00 00 00 00 A9 02<br /></div><br /><br />If you replace that .pad with an .org, you'd get the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A9 01 A9 02<br /></div>
<br />
<br />However in both cases... 'foo' would be a constant in the assembler representing the address $C000 -- and 'bar' would be $C008.
<br />
<br />The reason you need to pad is because label names and .org statements are simply for the assembler's use and are not assembled into the final binary.  Once your ROM is assembled, all the data is just clumped together in a mesh.  The emulator (or NES) will take the data as-is and stick it in ROM addressing space (in this case, $C000 since you only have 1 PRG bank).
<br />
<br />The latter example without the .pad would result in the bytes "A9 01 A9 02" appearing at address $C000 in an emulator, which means the code in the 'bar' label is <em>really</em> at address $C002.  However because you told the assembler to .org over to $C008, all the references to that label in your code will jump to address $C008 instead of $C002.
<br />
<br />This is a pretty long winded explanation.  Hopefully I didn't confuse you more than help you.  Heh.  The key thing to remember is that the NES doesn't see any of this .org/.pad crap.. that stuff just configures the assembler to assemble the code a certain way.  You need to get your code to match the file format accepted by the NES and emulators.  In this case, that means exactly $4000 bytes of data, starting at address $C000.  With the last 6 bytes (address $FFFA) being the vector table.  To accomplish this, you need to fill/pad unused space between $C000-FFFA with zeros, otherwise the vector table will be in the wrong spot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>noattack</b> [ Tue Feb 03, 2009 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, that makes a lot of sense. 
<br />
<br />So that explains why the CHR-ROM/RAM sits at the end of the source code, since it's not in that $4000 memory space allocated to the single bank of PRG.  It sits on separate hardware, so it has its own memory allocation.  I assume the .chr file is padded as well, since it's expected to fill 8k.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Feb 03, 2009 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Correct @ all of that.
<br />
<br />The iNES file is layed out like so:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$10 byte header<br />X * $4000 PRG-ROM banks<br />X * $2000 CHR-ROM banks<br /></div>
<br />
<br />The example in loopy's first post works the assembler to output all the data in this format.  First with the $10 byte header, then the PRG (code/data) which is padded to be exactly $4000 bytes with the .pad directive.  Followed by the $2000 bytes of CHR with the .incbin line.
<br />
<br />And yes -- your .chr file should be exactly 8K ($2000 bytes) in size.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gil-Galad</b> [ Mon May 18, 2009 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there any ASM6 NES program source files that I can look at for reference? That way I can get a better idea on how to use this assembler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Tue May 19, 2009 6:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Personally I found it instructive to translate Michael Martin's NES101 tut from P65 to NESASM and then to ASM6 (using ASM6's readme). In retrospect, it may have been easier to go straight from P65 to ASM6. They share some features.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Tue May 19, 2009 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />here's nes101 in asm6
<br />
<br /><!-- m --><a class="postlink" href="http://home.comcast.net/~olimar/NES/NES101_asm6.zip">http://home.comcast.net/~olimar/NES/NES101_asm6.zip</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>eleventhirtyfour</b> [ Mon May 25, 2009 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, how the hell can you get ASM6 to work on Windows Vista? (or most everything else for that matter?!)
<br />
<br />It seems like most programs that I try to run (including ASM6) do this thing where they pop up for about a half-second and then disappear.
<br />
<br />If anyone knows what I'm talking about and has a suggestion (besides a different OS) let me know. Thanks. Sorry for slightly off-topic rant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 25, 2009 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">eleventhirtyfour wrote:</div><div class="quotecontent">It seems like most programs that I try to run (including ASM6) do this thing where they pop up for about a half-second and then disappear.</div>
<br />It's a command-line program. It prints a message to the screen, probably giving hints on how to use it, but when it finishes, Windows closes its window. If you want the message to stay on the screen, you have to run it from the Windows command prompt. If you have never used MS-DOS or the Windows command prompt, try reading the "command line interface" section of <a href="http://nesdevwiki.org/wiki/Before_the_basics" class="postlink">this page</a> and some of <a href="http://www.google.com/search?q=ms-dos+tutorial" class="postlink">these tutorials</a>.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>