<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MSU1 Specs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MSU1 Specs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11004">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11004</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qwertymodo</b> [ Wed Feb 12, 2014 10:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I believe the main compression gain provided by solid compression is when multiple files in the archive are similar, like the ROM sets that include every variant ever dumped, over/underdumps, bad dumps, etc, but the bulk of the files are identical, resulting in HUGE compression gains from solid archiving.  7z without solid compression is still better than zip on average, though I don't know off the top of my head by how much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Wed Feb 12, 2014 11:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If the majority of the MSU-1 data is PCM, there's not much sense in using a general-purpose compressor.<br /><br />A quick test across a few audio files suggests that both zip (deflate) and 7z (LZMA2) typically hit around 90% of the original size, whereas FLAC compresses to around 60% and has the added benefit of allowing random access so that the whole track need not be decompressed at once.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu Feb 13, 2014 2:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wait before removing the second initialization step! It does look as intended. That <em>for(unsigned addr = 0x2000; addr &lt;= 0x2007; addr++) mmio_write(addr, 0x00);</em> loop does actually do what is described in <!-- m --><a class="postlink" href="http://sd2snes.de/blog/">http://sd2snes.de/blog/</a><!-- m --> Firmware v0.1.4 release notes: <em>Data offset 0 and audio track 0 are automatically requested on reset. This causes the busy flags to become 0 shortly after reset/startup.</em><br />Without the mmio_write's in the loop, there would be no track/data seeks invoked, and the busy flags would stay set forever.<br /><br />Yes, it shouldn't matter how the division is implemented. The floating point stuff just looks useless, as the result is rounded to integer samples. And right shifting would just need to drop the LSBs (as done by SNES master brightness, or Nintendo DS audio volume). While division by 255 would require a maths coprocessor in the cartridge (unless the idea was to use separate D/A converts for samples &amp; volume, and then use some analog amplifier with analog volume input to 'multiply' the sample voltage by the volume voltage).<br /><br />Apropos, how is the MSU1 output volume in relation to the SNES output volume? Both have 16bit outputs, so I guess are each meant to get the same volume... and one would just add 16bit_msu_sample + 16bit_snes_sample?<br />And then one would need to do something to get the sum kept in 16bit range: Like dividing the sum by 2, or (probably more suitable) saturating the sum on 16bit overflow.<br /><br />For the data address corner cases: It would be easiest if it would be implemented this way:<br />1) non-incrementing seek address register<br />2) incrementing current fileposition<br />currently <em>both</em> are incrementing, which is wasting hardware resources, and risks those (rare) corner cases.<br />I don't know how it's implemented in sd2snes, ir might be completely different there since it would need to deal logical fileposition &amp; physical sector addresses.<br />Best solution would be just saying &quot;results are unpredictable when not writing all 4 address bytes&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Feb 13, 2014 3:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oooooooooh yeah, now I remember. Sorry man, I haven't touched this code in 3+ years.<br /><br />Yeah, the reason we seek data and audio at reset was by request of d4s for Super Road Blaster. (He made the game, and then after provided feedback on his likes / dislikes, and I tried to address them without breaking the old specification, which I succeeded in.)<br /><br />From my perspective, you'd use MSU1 like this:<br />* write 2003<br />* wait until data busy flag is clear<br /><br />But if we left the flags busy at reset, and someone inverted that loop, like so:<br />* wait until data busy flag is clear<br />* write 2003<br /><br />Then the program would deadlock forever. So the idea was to change the behavior so that the busy flags were only busy during seeking, and would always clear as soon as was practical. So busy means &quot;seeking&quot;, not &quot;seeking or uninitialized.&quot;<br /><br />&gt; The floating point stuff just looks useless, as the result is rounded to integer samples.<br /><br />Yeah it was more laziness / apathy on my part.<br /><br />So the exact effect I want is again: 255 = 100%, 0 = 0%. So what is the integral math equivalent?<br /><br />(sample * 255) &gt;&gt; 8 would turn 65535 into 65279.<br /><br />The sample value is also signed, so whatever integral math we come up with would need to support negative numbers properly as well. Or we'd have to do signed-&gt;unsigned-&gt;volume adjust-&gt;signed.<br /><br />Perhaps this?<br />uint32_t scaled_volume = ((uint8_t)volume_register &lt;&lt; 16) / 255;  //add +127 after &lt;&lt; 16 and before / 255?<br />int16_t output = ((int16_t)sample * scaled_volume) &gt;&gt; 16;<br />[courtesy of Ryphecha]<br /><br />Divide by 255 will still be quite annoying on real hardware, but it's integral so not that horrible. Especially since people aren't going to be implementing MSU1 with raw LS chips or something. They'll be using MCUs that are capable of integral divison, almost assuredly.<br /><br />See? That's why I was being lazy with sample * volume / 255.0 :P<br /><br />&gt; Apropos, how is the MSU1 output volume in relation to the SNES output volume?<br /><br />I asked ikari to test this. He said that when the SMP master volume was set to 0, he still heard the MSU1 volume, so it appears it's a straight mixin at the final stage output, right before the SMP mute flag can knock out both SMP+external audio together.<br /><br />Now as for the relative volume of each ... that's honestly a damn good question. I don't know. I don't have the equipment or expertise necessary to even gauge this for myself. SNES audio really is pretty quiet. I remember I had to lower Game Boy audio a bit for it to sound correct with the Super Game Boy (it has SNES sound effects on the menu, which were way too quiet compared to the GB at first.)<br /><br />If you can help with this, I'm all for coming up with a volume scale in the MSU1 code.<br /><br />&gt; I guess are each meant to get the same volume... and one would just add 16bit_msu_sample + 16bit_snes_sample?<br /><br />See, my understanding of audio is absolute shit. It's my Achillees Heel.<br /><br />This is the way MSU1 (and SGB) works in bsnes:<br /><br />SNES produces samples at 32040hz, SGB at 2.048MHz, MSU1 at 44100Hz. The PC speaker output sample ratio is variable, but let's just say 96000hz for the sake of example.<br /><br />So internally, I resample SGB and MSU1 down to the base 32040hz. Now each time both have at least one sample in queue, I do: output_sample((snes_sample[0] + coprocessor_sample[0]) / 2); with the division intended to prevent overflow. I realize that audio doesn't really work that way, and that I'm reducing the SNES audio this way, but I don't know how else to do it. Like I said, I positively suck at audio. I can't even find good information online that I can understand that tells me how to mix two channels into one properly.<br /><br />The way I really should do it is to scale the 32040hz and 44100hz audio to both match the native PC speaker rate, and then output samples from there. Otherwise I am lopping off fidelity and defeating some of the purpose of redbook audio.<br /><br />But to do that, I'd have to have the emulator cores always handle resampling everywhere, and not allow direct sample output for all of the platforms that only have one output audio stream to worry about, so ... sucky situation all around.<br /><br />&gt; currently both are incrementing, which is wasting hardware resources, and risks those (rare) corner cases.<br /><br />If I don't increment the MMIO offset, then deserializing off that MMIO address will point me back to the initial seek.<br /><br />So the way I am going to have to do it from my end is to keep two counters. Base address + Index/Offset address.<br /><br />The implementation details aren't important to a generic MSU1 implementation, so long as the net effect is the same. sd2snes doesn't even have save states to worry about.<br /><br />&gt; Best solution would be just saying &quot;results are unpredictable when not writing all 4 address bytes&quot;.<br /><br />Definitely not. I abhor undefined behavior.<br /><br />&gt; I don't know how it's implemented in sd2snes<br /><br />I found a post on ikari's blog that I hadn't noticed from your link.<br /><br /><!-- m --><a class="postlink" href="http://sd2snes.de/blog/status#comment-8264">http://sd2snes.de/blog/status#comment-8264</a><!-- m --><br /><br />He says that I ignored his concern about flow control. I honestly don't remember it being brought up, but oh well. I feel bad if he felt I was ignoring him, I certainly didn't mean to give that impression.<br /><br />I suppose that's why he requires MSU1 games to hold reset to save the SRAM to the SD card.<br /><br />I don't really understand what he means by flow control, but I presume he means a way to turn off the 'ready' state so that he can write SRAM to the SD card without fear that the game will try and read from it at the same time. Probably a bandwidth concern there, putting a third parallel access onto the same device.<br /><br />It's true that I don't really have any good solutions for that. I didn't design the device to have an on/off flag, nor do I think it'd be appropriate. If a game is playing a background song on the MSU1, the device would have to keep pulling data from the SD card non-stop.<br /><br />If someone is DMA streaming a movie, they can't keep checking some bits to see if the device is busy repeatedly.<br /><br />So I don't know of a solution to his problem. He's undoubtedly writing the contents of RAM to the SD card every minute or so, which means he'd need three parallel streams: two read streams, one write stream. The MSU1 wasn't really designed specifically for a flash cart with one SD card implementation. It was designed as though it were a standalone cart. So SRAM would have been its own chip with its own battery, data would be a NOR (parallel) ROM, and audio could be a CD (attached to the base of the SNES) or another NOR ROM or whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 13, 2014 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">They'll be using MCUs that are capable of integral divison, almost assuredly.</div><br />ARM isn't, but 1/255 is very close to 257/65536.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (volume_register &lt; 255) {<br />&nbsp; int32_t attenuated = sample * (int32_t)volume_register;<br />&nbsp; sample = (attenuated &gt;&gt; 8) + (attenuated &gt;&gt; 16);<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu Feb 13, 2014 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">But if we left the flags busy at reset, and someone inverted that loop, like so:<br />* wait until data busy flag is clear<br />* write 2003</div><br />I wonder why somebody could do that (and at which point one would try do the data reads in that case).<br />One possible advantage for auto-seek upon reset is that hardware has only two states: &quot;ready&quot; and &quot;busy&quot; (without &quot;uninitialized&quot; as a third state).<br /><br />Yes, the SNES master volume doesn't affect the external MSU sound, only the MUTE flag does affect it. You can see it in the SNES schematic, I've also some sound block diagram in fullsnes.htm.<br /><br />I am not good at audio and analog stuff, too. But I guess simply adding the SNES + MSU outputs should be more or less okay.<br />Dividing the result by 2 would have one drawback: The SNES audio would be only half as loud as for normal SNES games (unless you do the same divide by 2 thing even for games that do NOT have any external audio).<br />That's why saturation seemed more suitable to me, it won't drop to half volume. Drawback is that it would chop off some spikes when both SNES and MSU are outputting loud samples simultaneously. Real hardware might do something similar (assuming that it cannot exceed some certain voltage limit).<br /><br />In the schematic the all three sound source (SNES + Cart + Expansion) are mixed the same way, so they are probably all allowed to span the same voltage ranges, so they should be all able to gain the same max volume. But I don't know if sd2snes is following that theory. Also possible that it does it differently - intentionally or unintentionally.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">If I don't increment the MMIO offset, then deserializing off that MMIO address will point me back to the initial seek.</div><br />What do you mean by deserializing? The savestate loading case where you need to reapply the fileposition to the operating system?<br />For that purpose you would actually need an incrementing address. But that incrementing value shouldn't be located in the 2000h..2003h registers (because writes to the lower 3 bytes should NOT affect the fileposition).<br />Hence, if you can't use 2000h..2003h for that purpose, then it would be pointless to increment 2000h..2003h at all. And it would be best to keep them constant (always containing the most recently written value).<br /><br />For the actual current incrementing fileposition: You could let the OS keep track of it, and/or duplicate in an incrementing internal variable (you would need that variable only for saving savestates; whereas the OS should also allow you to obtain it via some GetFilePosition function).<br /><br />Currently (aside from savestates) your source code does actually solely rely on the OS fileposition. Which brings up another corner case : - ) what happens when exceeding the filesize? Does it return dummy bytes? Does it keep incrementing the fileposition (and eventually wrap it to zero after reaching FFFFFFFFh)? Currently that is handled by the OS in whichever way.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">So the way I am going to have to do it from my end is to keep two counters. Base address + Index/Offset address.</div><br />Base would be the 2000h..2003h value? An it would be a NON-incrementing &quot;counter&quot;? And Index would be incrementing from 0 upwards? And Offset is just an alias for Index, or is the third of your two counters?<br />Basically that should do it. Using a &quot;CurrentAddress&quot; instead of the &quot;BaseAddress+IndexAddress&quot; calculation would be faster (*)<br />Ie. on 2003h writes: Set CurrentAddress = [2000h..2003]<br />And on 2001h reads: Do the read, and increment CurrentAddress<br /><br />(*) Though currently one doesn't ever need to calculate it except for savestate saving. But it would be needed to be calculated more often when checking for exceeding the filesize.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I abhor undefined behavior.</div><br />Yup. But in this case it does also depend how it is implemented in existing emulators and existing hardware.<br />Did somebody contact the sd2snes designer and ask how it's implemented there?<br /><br />In worst case it's using the MSBs as index to current cluster, used to internally to seek new sectors on cluster boundaries, and with behaviour depending on the filesystem's cluster size. Which, I would call that clearly undefined, and being impossible to emulate that.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">if (volume_register &lt; 255) {<br />&nbsp; int32_t attenuated = sample * (int32_t)volume_register;<br />&nbsp; sample = (attenuated &gt;&gt; 8) + (attenuated &gt;&gt; 16);<br />}</div></div><br />Nice solution. That comes up without division, does only need a small 8bit multiplier, and the extra &quot;+ (attenuated &gt;&gt; 16)&quot; doesn't take that much hardware resources.<br /><br />Without the &quot;+ (attenuated &gt;&gt; 16)&quot; it would sound same as on Nintendo DS (with a small gap between MAX and MAX-1). Which, I think that is good enough, too. In no$sns I will just make it as so. Ie. &quot;if volume&lt;255 then sample=(sample*volume) sar 8&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Sun Feb 16, 2014 1:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The <!-- m --><a class="postlink" href="http://helmet.kafuka.org/msu1.htm">http://helmet.kafuka.org/msu1.htm</a><!-- m --> page states that .pcm files are containing UNSIGNED samples. But that seems to be wrong. When implementing msu1 in no$sns, I have (rather accidently) treated the 16bit pcm samples as SIGNED values - and it sounded quite fine. And after viewing some .pcm files in a hex editor, I am very sure that the samples are really meant to be in SIGNED format.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Feb 16, 2014 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Correct, 16-bit signed, just like SNES samples and Redbook audio.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Sun Feb 16, 2014 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Reminds me of another (rather unimportant) detail: Are positive samples producing positive or negative voltages?<br />The answer to that question isn't that simple because the SNES post amplifier is applying phase inversion to the audio signals.<br />So, if I am not mistaken, a positive voltage on cartridge slot would produce a negative voltage on final SNES audio output.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Feb 16, 2014 11:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have no idea there.<br /><br />Whatever makes the audio sound good is the correct answer :P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Mon Feb 17, 2014 2:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Whatever makes the audio sound good is the correct answer <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><br />If you don't define it could lead to edge cases where it sounds good in one emulator but not on the other.<br /><br />Suppose you are playing the same sample at the same time on both the s-dsp and the msu1, if one of the signals is negated it could cancel the other out.<br />So if you implement this differently it would be possible to create a game that has sound in no$sns but not in higan, even though both follows the specifications. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Feb 17, 2014 2:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The initial volume on reset is unclear to me. The relevant parts in bsnes source code should be this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; create(MSU1::Enter, 44100);<br />&nbsp; mmio.audio_volume = 255;<br />&nbsp; for(unsigned addr = 0x2000; addr &lt;= 0x2007; addr++) mmio_write(addr, 0x00);</div><br />Going by that, the volume setting would be ZERO (from the mmio_write) at time when track seeking has completed.<br />Only, it's confusing why the volume has been previously initialized to 255.<br />Accordingly, I couldn't even guess how it's implemented in sd2snes. Can somebody test that? (seek a track, wait for Busy=0, then set Play=1, and listen if the track is audible with uninitialized volume)<br /><br />And that &quot;create(MSU1::Enter, 44100);&quot; line is also confusing me. I don't know what is doing exactly, but &quot;create&quot; sounds like something that is done only ONCE. On the other hand, the reset function (and it's &quot;create&quot; subfunction) should be called EACH time when somebody is resetting the game (?)<br /><br />I've contacted the sd2snes guy about some details yesterday, but didn't receive a reply yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Feb 17, 2014 7:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">Accordingly, I couldn't even guess how it's implemented in sd2snes. Can somebody test that? (seek a track, wait for Busy=0, then set Play=1, and listen if the track is audible with uninitialized volume)<br /><br />And that &quot;create(MSU1::Enter, 44100);&quot; line is also confusing me. I don't know what is doing exactly, but &quot;create&quot; sounds like something that is done only ONCE. On the other hand, the reset function (and it's &quot;create&quot; subfunction) should be called EACH time when somebody is resetting the game (?)<br /><br />I've contacted the sd2snes guy about some details yesterday, but didn't receive a reply yet.</div><br />sd2snes is open-sourced nowadays: <!-- m --><a class="postlink" href="https://github.com/mrehkopf/sd2snes/blob/develop/verilog/sd2snes/msu.v">https://github.com/mrehkopf/sd2snes/blo ... snes/msu.v</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Feb 17, 2014 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">sd2snes is open-sourced nowadays: <!-- m --><a class="postlink" href="https://github.com/mrehkopf/sd2snes/blob/develop/verilog/sd2snes/msu.v">https://github.com/mrehkopf/sd2snes/blo ... snes/msu.v</a><!-- m --></div><br />Thanks, good to know!<br /><br />MSU1 stuff seems to be in &quot;<span style="color: #00FF00">msu.v</span>&quot; and &quot;<span style="color: #00FF00">main.v</span>&quot; (and maybe also in some further files).<br /><br />The data seek address is stored in &quot;<span style="color: #00FF00">addr_out_r</span>&quot; (on port 2000h..2003h writes). But I can't see where &quot;<span style="color: #00FF00">addr_out_r</span>&quot; is used for seeking and/or reading actual data. I guess it <em>must</em> be used somewhere, but I don't see where (and don't know if the &quot;<span style="color: #00FF00">addr_out_r</span>&quot; value is incremented or left unchanged during data reads).<br /><br />Volume seems to be initialized in this line: &quot;<span style="color: #00FF00">volume_r = 8'h00;</span>&quot;, but I've no clue if that is done on /RESET or on Power-Up (or both). And there's also a &quot;<span style="color: #00FF00">volume_start_r</span>&quot; flag used on volume changes, but that flag doesn't seem to be initialized alongside with the initial &quot;<span style="color: #00FF00">volume_r = 8'h00;</span>&quot; line.<br /><br />Does anybody have a better understanding of that verilog source code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Feb 17, 2014 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MSU1 Specs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The nice thing about MSU1 is that we can say definitively how it should behave, regardless of any specific implementations.<br /><br />Initialize all eight registers to 0x00 (so yes, volume=0) on power -and- on reset. You're right, I have volume=255 prior to write(volume, 0x00) because initially it was set to 255. But the net effect now is that both bsnes and sd2snes initialize it to 0, so go with zero.<br /><br />End users should always, always initialize the volume reg anyway. But power+reset = 0 if they don't.<br /><br />&gt; And that &quot;create(MSU1::Enter, 44100);&quot; line is also confusing me.<br /><br />All of my emulators are based around libco, which is a cooperative-threading library. create() allocates a new stack frame and sets the entry point to MSU1::Enter.<br /><br />As emulation runs, the scheduler cooperatively switches between processors. The MSU1 runs at a frequency of 44100hz, which should be obvious enough why: write out one sample per clock tick.<br /><br />You don't have to simulate that detail of the chip in your emulator, just get the audio mixing well.<br /><br />&gt; If you don't define it could lead to edge cases where it sounds good in one emulator but not on the other.<br /><br />Well, right now I lack the technical skill and tools to verify this information.<br /><br />If anyone else could please verify it, I'll be sure to match the behavior and we'll define it in the spec.<br /><br />If bsnes and/or sd2snes need to be changed, it's easy to do both thanks to the firmware.<br /><br />I think MSU1+SNES audio together sounds just fine currently (Super Mario Odyssey is a good test here) in higan, so I think just adding + clamping the samples is fine.<br /><br />If the SNES is really inverting the audio, I don't even emulate that at all in the first place. So I guess if you have hardware MSU1 and you need to invert the MSU1 samples, do so. If you have an emulator that doesn't invert the DSP output, then don't invert your PCM samples prior to mixing. That should cover the bases.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>