<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Game Boy emulator input issue [solved]</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Game Boy emulator input issue [solved]</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=10752">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=10752</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Dec 04, 2013 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Game Boy emulator input issue [solved]</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Anyone knowledgeable with writing Game Boy emulators here?<br /><br />Have a strange problem in Metroid II: Return of Samus.<br /><br /><img src="http://i.imgur.com/CSPWsSY.png" alt="Image" /><br /><br />If you hold left and then switch to holding right, or right and then left, Samus gets stuck in the turning state between the two directions, and ends up sliding around like in the above picture with no animation.<br /><br />This is *not* because of allowing left+right at the same time, I explicitly filtered that out and made certain that wasn't the case.<br /><br />I think it might have something to do with slow decay/transition states of the real hardware buttons, but I'm not sure how to emulate that to prevent this behavior.<br /><br />Any insight would be greatly appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 04, 2013 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are you making sure to emulate the lack of an inverter on Game Boy, GBC, and GBA controllers (1=released, 0=pressed)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Dec 04, 2013 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah you wouldn't be moving at all without that. Input seems fine other than this one issue.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void CPU::mmio_joyp_poll() {<br />&nbsp; unsigned button = 0, dpad = 0;<br /><br />&nbsp; //inputPoll() returns 1 when pressed, 0 when released<br />&nbsp; button |= interface-&gt;inputPoll(0, 0, (unsigned)Input::Start) &lt;&lt; 3;<br />&nbsp; button |= interface-&gt;inputPoll(0, 0, (unsigned)Input::Select) &lt;&lt; 2;<br />&nbsp; button |= interface-&gt;inputPoll(0, 0, (unsigned)Input::B) &lt;&lt; 1;<br />&nbsp; button |= interface-&gt;inputPoll(0, 0, (unsigned)Input::A) &lt;&lt; 0;<br /><br />&nbsp; //hacky just to be 100% sure it wasn't allowing left+right at the same time<br />&nbsp; if(interface-&gt;inputPoll(0, 0, (unsigned)Input::Up)) dpad |= 4;<br />&nbsp; else if(interface-&gt;inputPoll(0, 0, (unsigned)Input::Down)) dpad |= 8;<br />&nbsp; if(interface-&gt;inputPoll(0, 0, (unsigned)Input::Left)) dpad |= 2;<br />&nbsp; else if(interface-&gt;inputPoll(0, 0, (unsigned)Input::Right)) dpad |= 1;<br /><br />&nbsp; status.joyp = 0x0f;<br />&nbsp; //it's supposed to act wonky like this when p15 and p14 are both clear ... but I verified Metroid II isn't doing this<br />&nbsp; if(status.p15 == 0) status.joyp &amp;= button ^ 0x0f;<br />&nbsp; if(status.p14 == 0) status.joyp &amp;= dpad ^ 0x0f;&nbsp; //inversion is here<br />&nbsp; if(status.joyp != 0x0f) interrupt_raise(Interrupt::Joypad);<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Thu Dec 05, 2013 1:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I think it might have something to do with slow decay/transition states of the real hardware buttons, but I'm not sure how to emulate that to prevent this behavior.</div>The only transition states that exist are between when you select a line and when you read out the button state. On a DMG, when you write a 0 to activate one of the lines, this signal is propagated through the ribbon cable up to the display board and back to the relevant input pin on the CPU. Because of capacitance and series resistance, it may take a couple of microseconds for the state to propagate. This is why you see games read out $FF00 multiple times. This is nothing more than a delay, and only the last read does anything. As you might have noticed, the button group usually has a longer delay in the readout routine than the D-pad group, likely because the start/select group has a longer propagation delay than the other buttons, especially if it's worn/dirty. (I've tested this.)<br /><br />That said, the propagation delay never needs to be emulated for gameplay of licensed ROMs. The only time when it would matter is if a program is actively checking for it, as in reading the button input early and making sure the input hasn't propagated. Even then, GBC completely lacks this delay, as it has 8 input pins and this switching is handled in logic inside the chip, which means there's no propagation delay. However, I convinced beware to implement it into BGB, to discourage people from writing ROMs that don't work on real hardware. (As a primary use of BGB is as a development tool.)<br /><br />One theory I had was that the problem might happen if only left was pressed in one frame, and then only right was pressed the next frame, a situation unlikely to occur on a real console as it would likely take a human more than one frame to pivot the D-pad from one side to the other. But this would be trivially reproducible in BGB by single frame stepping, and that's not it.<br /><br />I tried to reproduce this in Higan 093 (the latest publicly available version as of writing this) and this game has another problem, which is the implementation of the priority sprite bit, which makes Samus almost invisible for the first screen. I don't know if you've fixed this in the beta you're working on or if this happens to me because of different settings.<br /><br />I cannot reproduce the reported problem in Higan 093, however. If you stand against a wall facing right, and press right+left, Samus' animation gets stuck in the turning state, which is consistent with BGB, and probably hardware if you could press left+right. But not when walking freely.<br /><br />Maybe you should consider the possibility that this bug is due to something other than the joypad input, for example that the sprites are not getting updated properly in the rendering pipeline, or in the ROM, for whatever reason, and that the turning animation that is normally visible for two frames sticks. Try firing a shot and see if that animates normally while Samus is in this state.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Dec 05, 2013 2:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you for the help!<br /><br />Yes, Samus being invisible was a huge bug, too. I was relying on BG-over-OAM mode allowing OAM only when the pixel color was 0. But it's supposed to be only when the palette color is 0. Really wish we had better GB docs than pandocs :(<br /><br />And very, very, very weird. You're right, this bug doesn't happen on Windows. It only happens on Linux (even with v093 official, so no WIP modifications are at fault.)<br /><br />Per your question, I can't shoot while walking straight, but I can shoot after jumping.<br /><br /><img src="http://i.imgur.com/4BmEGTn.png" alt="Image" /><br /><br />Now I am really terrified. What kind of insane bug would cause an emulation input bug, but only on Linux?<br />Again, I am 100% certain that JOYP is never returning left+right set at the same time.<br /><br />Side question: I noticed in gambatte that it was re-reading the keyboard/gamepad inputs every time you read $ff00 (JOYP), rather than latching them on write like the SNES. Is that correct behavior? (I trust gambatte 100x more than anything I've done, so I'll go with gambatte's method unless you know that's wrong.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Thu Dec 05, 2013 3:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you say you can't shoot, is this true only graphically speaking, ie. do you hear the shooting sound even if you can't see the the shot? My hypothesis was that this was a purely graphical bug where the sprites are not being updated while (perhaps) the CPU continues to be emulated normally.<br /><br />As for your question about reading input. $FF00 is literally a 2 out, 4 in digital IO port, so what you're reading back is immediate. (Subject only to the microsecond delays explained above.) <br /><br />The SNES controller readout is not immediate like that, as data has to be shifted in from a shift register in the controller. This is done by sending a number of clock pulses to read out one bit at a time. And then there's the automatic mode to read out the controller on VBlank, but you probably know that better than I do considering you've written a SNES emulator and I haven't touched SNES. I only know this process from the hardware side. (I've interfaced a SNES controller from the Gameboy's link port for example.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Dec 05, 2013 8:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Man, it gets even weirder.<br /><br />This happens on both of my development machine OSes, but not on my laptop.<br /><br />Both the dev machine and laptop are Windows 7, running the stock v093 official release 64-bit balanced binary.<br />Game Boy binary hash is identical on both machines, so it's not a corrupted game image.<br /><br />Looks like my only option is going to be to create an input playback and run trace logs against both machines to see where the code is branching differently. That'll be a treat.<br /><br />Craziest bug ever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Dec 05, 2013 8:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do the config files for the emulator differ across the machines?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Dec 05, 2013 8:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue [solved]</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just figured it out.<br /><br />I didn't realize that I had a &quot;multi-jump&quot; cheat code active still on my dev machine. Obviously I know cheat codes screw games up, just didn't realize it was on because it's not an obvious one unless you try it. Dev machine shares the same cheat file for both OSes.<br /><br />Apparently this code has the side-effect of making Samus moonwalk.<br /><br />Well I feel stupid now. Sorry for the trouble :(

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Mon Dec 09, 2013 11:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Game Boy emulator input issue [solved]</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just an addendum of the input latency question, since you asked. As far as the GB CPU is concerned, it's instant. On a SGB it is, of course, dependent on the SNES CPU. Data will only arrive at the SGB CPU when the SNES CPU propagates it to the cartridge, through the controller chip, however that works exactly from the SNES side.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>