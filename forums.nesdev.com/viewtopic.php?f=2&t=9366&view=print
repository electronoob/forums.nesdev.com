<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Assignment macro</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Assignment macro</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9366">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9366</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Oct 02, 2012 8:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Assignment macro</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was reading rainwarrior's thread on using start for randomness. ( <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9364">viewtopic.php?f=2&amp;t=9364</a><!-- l --> )<br /><br />I noticed this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro stb&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;val, addr<br />; - store immediate byte using A as temporary register<br />&nbsp; &nbsp; LDA #val<br />&nbsp; &nbsp; STA addr<br />.endmacro<br />; ....<br />&nbsp;stb $0f, $2007<br />&nbsp;stb $12, $2007<br />;...etc..<br /></div><br /><br />I understand this was from a quick example, but seems I like writing macros, maybe see what you think of this syntax:<br /><br />wb, for write byte<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">wb $2007 := #$0f<br /><br />;or<br />PPU_DATA = $2007<br />wb PPU_DATA := #$0f<br />;or<br />lda #$0f<br />ldx #$02<br />wb PPU_DATA := a<br />wb PPU_DATA := x<br />wb PPU_DATA := a<br /><br /></div><br /><br />There is also a decent ww (write word) macro.<br /><br /><!-- m --><a class="postlink" href="http://mynesdev.blogspot.ca/2012/10/assignment-macro.html">http://mynesdev.blogspot.ca/2012/10/ass ... macro.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Oct 02, 2012 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assignment macro</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, my goal there was not so much to change the syntax as it was to do two lines of work in one line, for readability. I don't think I'd want to switch to pascal style assignment operators, since it doesn't appear to save any space.<br /><br />Actually, something I might appreciate more is a compact way to express storing a string of bytes to a memory mapped register:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">repstb $2007, $01, $02, $03<br /><br />; equivalent to:<br /><br />lda #$01<br />sta $2007<br />lda #$02<br />sta $2007<br />lda #$03<br />sta $2007</div><br /><br />I haven't looked into whether ca65 supports variadic macros though. I presume it does.<br /><br />This could be useful for pregenerated display lists, or CHR changes that need to occur quickly during vblank. It wouldn't be as optimal as using all 3 registers and skipping unnecessary loads, but it would be suitable for quick testing at least. In my example I could have written my palette assignment in one or a few neat lines, instead of one line per byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Oct 02, 2012 12:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assignment macro</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I realize that you were just trying to make the code a bit nicer to look at. That's my goal too, I prefer an assignment operator to a comma. It's trivial to change the assignment to just an equals sign, just change it to such in the macro. I used to code in pascal so I went with that operator. Save space in the source or code? The result of the macro is similar to yours.<br /><br />You could do what you posted easily, with the benefit of checking if the next byte is the same as the last and skipping the next lda #XX instruction if so. (Which is the motivation in my macro for allowing you to assign the value in a register.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />.macro repstbs port, b1, b2, b3, b4, b5, b6, b7, b8, b9, lastbyte<br />&nbsp; &nbsp;.if (.paramcount &gt; 10) .and&nbsp; (.not .blank({b9}))<br />&nbsp; &nbsp;&nbsp; .error &quot;Too many parameters&quot;<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.if .not .xmatch({lastbyte}, {b1})<br />&nbsp; &nbsp; &nbsp;lda b1<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;sta port<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank b2<br />&nbsp; &nbsp; &nbsp;repstbs port, b2, b3, b4, b5, b6, b7, b8, b9 ,,b1<br />&nbsp; &nbsp;.endif<br />.endmacro<br /><br /></div><br /><br />If you want a variable number of parameters, I think you are going to have to define something else for a delimiter, or enclose your list of values in { } and use pseudo functions to evaluate them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Oct 02, 2012 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assignment macro</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ca65 macros can be recursive? that's pretty neat.<br /><br />that's weird that it has .paramcount but not .param, which I could turn into something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro rebstb<br />&nbsp; &nbsp; .repeat .paramcount(-1), I<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #.param(I+1)<br />&nbsp; &nbsp; &nbsp; &nbsp; sta .param(0)<br />&nbsp; &nbsp; .endrepeat<br />.endmacro</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri Nov 30, 2012 11:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assignment macro</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I expanded on this idea quite a bit, I'll link code soonish. It's pretty useful imo at this point and I think most bugs are fixed.<br /><br />I decided to name the macro 'mb' so it's easy to type primarily. It stands for Move Byte, since that is mostly what is does.<br />I guess you could also define an underscore to do the same thing perhaps for readability to make it look like more natural code in the source.<br /><br />So what it does is figure out what is on the right side of an assignment and assign it to whatever is on the left. It's pretty flexible at figuring out what to do, and should work as expected:<br /><br />mb foo := bar <br /><br />So, foo and bar can both be either a 6502 register or memory address (variable). If for example you did:<br /><br />mb x :=  a <br /><br />It will output a tax instruction. The left side is limited to a memory address or register, but the right side can also be a simple expression:<br /><br />mb x := CurrentWorld + #1 &amp; #%00000111<br /><br />It will figure out the right side is going to have to use the accumulator, output the correct code, then do a tax. If the assignment was the accumulator, there would be no output for the assignment (since the accumulator is already holding the result).<br /><br />If you have two variable names and no indication of the register to use, the default is to use the accumulator. This can be overridden as:<br /><br />mb x, var1 := var2<br /><br />This will output: ldx var2 \ stx var1<br /><br />This only forces the register on the right side - if the left side is a different register assignment still happens with the register indicated.<br /><br />Forcing is only useful where it is not obvious what must be used, though you could force it all the time if you wanted to be explicit - you will get an error if you try to force an index register with functionality that requires the accumulator. Code that specifies a register 1st after the := will behave the same as a forced register. ( y := x + 3 will force using reg x on the right side... see below)<br /><br />Support for the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&amp;&nbsp; &nbsp; &nbsp;bit and<br />|&nbsp; &nbsp; &nbsp;bit or<br />^&nbsp; &nbsp; &nbsp;bit eor<br />+&nbsp; &nbsp; &nbsp;add, clear carry 1st<br />++&nbsp; &nbsp; add with carry <br />-&nbsp; &nbsp; &nbsp;sub, set carry 1st <br />--&nbsp; &nbsp; sbc with carry<br />&lt;&lt;&nbsp; &nbsp; shift reg a left<br />&gt;&gt;&nbsp; &nbsp; shift reg a right<br />*&nbsp; &nbsp; &nbsp;multiply<br />/&nbsp; &nbsp; &nbsp;divide<br /><br /></div><br /><br />Shifting requires a plain constant value after the operator and will output that many asl or lsr commands. Multiply or divide also require a constant value of power of 2 (same as shifting of course.)<br /><br />You can also use a single - or + with x and y followed by a plain constant value - that is how many decrement or increment commands will be output.<br /><br />This is intended for simple, very close to assembly type code, so there is no support for brackets in the expressions or trying to use more than one register at a time in a single expression, though brackets will be skipped if you want to use the operators to write a constant expression.<br /><br />I have also integrated this into the logical block code, as in this part of the timer code from smb:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp; &nbsp; ; if game timer not yet at digits at 000<br />&nbsp; &nbsp; if GameTimerDisplay | GameTimerDisplay&#91;1&#93; | GameTimerDisplay&#91;2&#93; == not zero<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ; if timer = 100<br />&nbsp; &nbsp; &nbsp; &nbsp; if ( y := GameTimerDisplay - 1 == zero )&nbsp; &amp;&amp; ( GameTimerDisplay&#91;1&#93; | GameTimerDisplay&#91;2&#93; == zero )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mb EventMusicQueue := #TimeRunningOutMusic<br />&nbsp; &nbsp; &nbsp; &nbsp; endif<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; mb GameTimerCtrlTimer := #$18&nbsp; &nbsp; &nbsp; &nbsp;; reset game timer control<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; mb y := #$23&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set offset for last digit<br />&nbsp; &nbsp; &nbsp; &nbsp; mb DigitModifier&#91; 5 &#93; := #$ff&nbsp; &nbsp;; set value to decrement game timer digit<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr DigitsMathRoutine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; do sub to decrement game timer slowly<br />&nbsp; &nbsp; &nbsp; &nbsp; mb a := #$a4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; set status nybbles to update game timer display<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp PrintStatusBarNumbers&nbsp; &nbsp; &nbsp;; do sub to update the display<br /><br />&nbsp; &nbsp; endif<br /></div><br /><br />The expression in the if condition share the same code as 'mb'.<br />As well, the <strong>[ constant ]</strong> syntax can be used rather that <strong>+ constant</strong>. You can also include x or y:<br /><br />mb VRAM_Buffer1[ x - 1 ] := WSelectBufferTemplate[ x ]<br /><br />For indexed (I find it more readable.)<br /><br />Any questions, feedback or criticisms welcome.<br /><br />BTW I agree that would be nice to have .param as rainwarrior described. You can mostly get that functionality with .mid and recursive calls, but not as nicely.<br /><br />EDIT: This macro is included as a part of ca65hl.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>