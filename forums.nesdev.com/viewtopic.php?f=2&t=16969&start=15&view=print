<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New technique for pushing video data faster</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New technique for pushing video data faster</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16969">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16969</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slembcke</b> [ Wed Jan 24, 2018 8:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />RTS Chaining, I think they meant this:<br /><!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/RTS_Trick">http://wiki.nesdev.com/w/index.php/RTS_Trick</a><!-- m --><br /><br />I've was experimenting with this stuff yesterday and had pretty good luck. Other than it being non-obvious, it's pretty easy to do. Basically just writing a 2 byte command token instead of just one. You can easily avoid interfering with the stack if you write to the very bottom. My terminator function restores the stack, so to execute the buffer I just write the terminator func and the current stack pointer, then reset the stack pointer to FF and return. Voila! It like it.<br /><br /><div class="quotetitle">pubby wrote:</div><div class="quotecontent">One trick that can come in handy for stuff like this is using jsr to push addresses onto the stack. It's slightly faster than using lda+pha, especially if you're pushing multiple addresses in a row.</div><br /><br />Say what? How does that work? Won't you end up jumping to the address you push? Not sure I understand.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Wed Jan 24, 2018 9:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">slembcke wrote:</div><div class="quotecontent">I've was experimenting with this stuff yesterday and had pretty good luck. Other than it being non-obvious, it's pretty easy to do. Basically just writing a 2 byte command token instead of just one. You can easily avoid interfering with the stack if you write to the very bottom. My terminator function restores the stack, so to execute the buffer I just write the terminator func and the current stack pointer, then reset the stack pointer to FF and return. Voila! It like it.<br /></div><br /><br />Yup, that's the beauty of it. If you add more stuff later in the frame you simply overwrite the terminator function and write a new terminator function at the new offset in the stack.<br /><br />I've decided to use 127 bytes for my video stack so that I can use the BMI instruction to quickly check if the video stack pointer has become too large each time I try to push in more.<br /><br />I've also been experimenting with making the terminator function's address be symmetrical to speed it up further (something like $C0C0), since then you can just mindlessly fill the bottom of the stack in advance (with an unrolled loop), and not have to bother appending it after have written in your &quot;2 byte command token&quot;. It speeds up high-video update situations but slows down low-video update situations, which is generally a good tradeoff.<br /><br />Another cool trick I've mentioned earlier is that you can jump an arbitrary length into any of your subroutines as a starting point, which can be used in very neat ways.<br /><br /><div class="quotetitle">slembcke wrote:</div><div class="quotecontent"><div class="quotetitle">pubby wrote:</div><div class="quotecontent">One trick that can come in handy for stuff like this is using jsr to push addresses onto the stack. It's slightly faster than using lda+pha, especially if you're pushing multiple addresses in a row.</div><br /><br />Say what? How does that work? Won't you end up jumping to the address you push? Not sure I understand.</div><br /><br />Yeah, I've been twisting my head trying to figure out how it would work, but I just can't see it. Does he somehow exit out of the routines with a JMP? But even if he did that it would be the wrong part of the stack that's filled up.  <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Wed Jan 24, 2018 9:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Nah<br /><br />Put your On X table at the bottom of the Stack so $100 + then you do a 1 byte stack dispatch<br /><br />get X to have value x2<br />txs<br />rts<br /><br />If all your code runs in 1 frame then the stack position should be fixed per frame, so you can always just restore the same point at the end of the NMI.<br /></div><br /><br />You are going to have to explain that again, I'm not able to follow.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> If you go over a frame and interrupt yourself X_X</div><br />Now that's a pretty good point. I guess I should either make really sure that no interrupt can happen while my video routine does it's work, or that interrupts are disabled while it works.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The other catch with RTS chaining is you can't use the stack, not really a problem if you are just doing speed code from an NMI, but as a general system it not very practical</div><br />That's not completely true, if you leave yourself some room you can still use the faux video stack as a regular stack as long as you are careful. JSR, RTS, PHA and PLA will work just as expected as long as you don't push the stack past the $0/$FF point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and making a self mod JSR chain(+6 per call) gives almost as much speed without the limitations.</div><br />It increases the static cost of each video &quot;segment&quot; from 6 to 12 cycles, and you lose the ability to cram in extra values for each video subroutine to pull out with PLA, and each &quot;jump entry&quot; in your queue takes 4 bytes of RAM intead of 2.<br /><br />Not so sure I agree it's almost as good, it seems like an inferior technique (but with the added bonus of being able to place it anywhere in RAM, or even have ROM versions for cutscenes and the like where things are exactly the same)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 24, 2018 10:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Which what you are saying is true in the strict technical sense, I'm not sure I agree with your overall point.<br /></div><br />Well there's nothing to agree or disagree upon. I was just trying to explain why using stack as VRAM-buffer is not so common even though we all agree it's a cool trick. My point was that while this trick is indeed very cool, it's neither the fasest nor the easiest. To which you respond, &quot;but this trick is so cool&quot; - I never said it wasn't !<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But if you are making an actual real game, which sometimes has a screen full of text, sometimes scrolls horizontally, sometimes vertically, sometimes cycles colors for shiny treasures, sometimes prints one and one letter in dialog, I'm not so certain you could beat the RTS technique.</div><br />Doing it with normal buffers without any optimisation allows a bandwith of aprox 80 bytes + sprite DMA, which is enough to update one line of nametable plus one line of attribute table plus palettes, or two lines of nametables plus attribute table but without palettes. With some partially unrolled loops or zero-page usage, it's possible easily to update two lines + attribute table + palettes + sprite DMA, with only light optimization. So the only application where further optimization is needed is for CHR-RAM updates, or maybe if updating a really large NT area in a single frame is needed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jan 24, 2018 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Adding another subroutine is super trivial, you don't have to dig into popslide's source code to carefully figure out where to insert your new functionality. So I'd personally grade it easier and faster.</div><br />Popslide uses the same packet format as <em>Super Mario Bros.</em>, which is described on both <a href="http://datacrystal.romhacking.net/wiki/Super_Mario_Bros.:Notes" class="postlink">Data Crystal</a> and <a href="https://wiki.nesdev.com/w/index.php/Tile_compression#NES_Stripe_Image_RLE" class="postlink">NESdev Wiki</a>. There are four packet types (horizontal literal, horizontal run, vertical literal, and vertical run). It's designed to be generic, where you can make your own subroutine that adds packets in a particular shape to the list without having to touch the updater code. The stuff in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nstripe.s</tt> is mostly convenience for forming packets based on shapes that arose during the development of <em>The Curse of Possum Hollow</em>.<br /><br />Having only one interpreter also simplifies the NMI handler, which is important to reduce the size of code in the fixed bank or the pseudo-fixed repeating area in a game using 32K switching.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pubby</b> [ Wed Jan 24, 2018 4:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Yeah, I've been twisting my head trying to figure out how it would work, but I just can't see it. Does he somehow exit out of the routines with a JMP? But even if he did that it would be the wrong part of the stack that's filled up.  <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /></div><br /><br />It's just a jmp to a jsr which jumps back, and is only useful in a few very specific situations. I did use it in my music engine though. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; jmp foo<br />continue:<br /><br />; ...<br /><br />foo:<br />&nbsp; &nbsp; jsr continue<br />&nbsp; &nbsp; ; some code<br />&nbsp; &nbsp; rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rahsennor</b> [ Wed Jan 24, 2018 11:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">You rang?</div><br />Sorry...<br /><br /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Are you sure you got it off the wiki? I can't find a single instance of the phrase &quot;RTS chaining&quot; or even &quot;chaining&quot; on the wiki. Heck, I can't even find &quot;RTS chaining&quot; related to programming <strong>anywhere</strong> on the web. Are you sure that's the proper name for the technique, and that you aren't just mixing it up with the &quot;RTS Trick&quot;? (or is my google-fu too weak?)<br /><br /><strong>Edit:</strong> Oh wait, I read that wrong, <strong>you </strong> called it RTS chaining. Any idea what it was called in the wiki?</div><br />I can't find it on the wiki now either. My devlog notes the technique on 2016-05-18 as &quot;RTS-display-list-on-stack&quot; and then never mentions it again, but it's definitely right there in the source:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $C000<br /><br />bank .byte 0,1,2,3,4,5,6,7 ; UNROM conflict-avoidance table<br /><br />irq:<br />reset:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta $2000&nbsp; ; disable NMI<br />&nbsp; &nbsp;sta $2001&nbsp; ; disable rendering<br />&nbsp; &nbsp;sta bank+0 ; switch in bank 0<br />&nbsp; &nbsp;jmp init<br /><br /><br />.dsb $FF00 - *<br /><br />; copy 0-32 bytes to the PPU<br />nmi_copy:<br />&nbsp; &nbsp;nop ; offset for RTS (I'm lazy)<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20 ; PLA/STA x32<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20 ; 4 bytes each<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20<br />.byte $68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20,$68,$8D,$07,$20<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;rts<br /><br />; write 32 zeroes to the PPU<br />nmi_zero:<br />&nbsp; &nbsp;nop<br />&nbsp; &nbsp;ldy #8<br />&nbsp; &nbsp;lda #0<br />&nbsp;nmi_zero1:<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;bne nmi_zero1<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;rts<br /><br />; close the RTS chain<br />nmi_end:<br />&nbsp; &nbsp;nop<br /><br />&nbsp; &nbsp;lda scroll_x<br />&nbsp; &nbsp;sta $2005<br />&nbsp; &nbsp;lda scroll_y<br />&nbsp; &nbsp;sta $2005<br />&nbsp; &nbsp;lda #$88&nbsp; &nbsp; &nbsp;; TODO: nametable select<br />&nbsp; &nbsp;sta $2000<br /><br />&nbsp; &nbsp;ldx nmi_s<br />&nbsp; &nbsp;txs<br />&nbsp; &nbsp;ldy nmi_y<br />&nbsp; &nbsp;ldx nmi_x<br />&nbsp; &nbsp;lda nmi_a<br />nmi_abort:<br />&nbsp; &nbsp;rti<br /><br />nmi:<br />&nbsp; &nbsp;lsr nmi_flag<br />&nbsp; &nbsp;bcc nmi_abort<br />&nbsp; &nbsp;sta nmi_a<br />&nbsp; &nbsp;stx nmi_x<br />&nbsp; &nbsp;sty nmi_y<br />&nbsp; &nbsp;tsx<br />&nbsp; &nbsp;stx nmi_s<br />&nbsp; &nbsp;lda #&gt;oam<br />&nbsp; &nbsp;sta $4014<br />&nbsp; &nbsp;ldx #$FF<br />&nbsp; &nbsp;txs<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;rts<br /><br />.dsb $FFFA - *&nbsp; &nbsp; &nbsp; &nbsp;; pad to interrupt vectors<br /><br />.word nmi<br />.word reset<br />.word irq<br /></div><br />I also used this method on PC a fair bit, back when I was doing assembler coding for DOS and so on, so maybe I mentally inserted it into the &quot;RTS Trick&quot; page as a matter of course?<br /><br />EDIT: I also saw <a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=13285" class="postlink">Tokumaru's thread</a> the day it was posted, so I may have got it from there. My treatment of $2006 is identical so it's likely that was it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Thu Jan 25, 2018 4:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Well there's nothing to agree or disagree upon. I was just trying to explain why using stack as VRAM-buffer is not so common even though we all agree it's a cool trick. My point was that while this trick is indeed very cool, it's neither the fasest nor the easiest. To which you respond, &quot;but this trick is so cool&quot; - I never said it wasn't !<br /></div><br /><br />Ah, my bad, sorry!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Doing it with normal buffers without any optimisation allows a bandwith of aprox 80 bytes + sprite DMA, which is enough to update one line of nametable plus one line of attribute table plus palettes, or two lines of nametables plus attribute table but without palettes. With some partially unrolled loops or zero-page usage, it's possible easily to update two lines + attribute table + palettes + sprite DMA, with only light optimization. So the only application where further optimization is needed is for CHR-RAM updates, or maybe if updating a really large NT area in a single frame is needed.</div><br /><br />Thanks, that's a pretty good point. It didn't occur to me that a game's scope might allow it to push everything to vram on every frame without hitting the ceiling, my mental idea of how much you could push was much much lower.<br /><br /><div class="quotetitle">pubby wrote:</div><div class="quotecontent">It's just a jmp to a jsr which jumps back, and is only useful in a few very specific situations. I did use it in my music engine though. </div><br />Ah, I see. That does indeed shave off 1 cycle (10 vs 9).<br /><br />If you REALLY wanna go crazy on the savings you can do LDA, PHA, PHA if the subroutine is placed on an address where it's high and low byte are identical, then you have it down to 8 cycles.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jan 25, 2018 9:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I definitely posted a method exactly like this a while back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Thu Jan 25, 2018 9:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent"><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Nah<br /><br />Put your On X table at the bottom of the Stack so $100 + then you do a 1 byte stack dispatch<br /><br />get X to have value x2<br />txs<br />rts<br /><br />If all your code runs in 1 frame then the stack position should be fixed per frame, so you can always just restore the same point at the end of the NMI.<br /></div><br /><br />You are going to have to explain that again, I'm not able to follow.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> </div><br />Its a One Byte dispatch method. I.e your $100 looks like<br />$100 &lt;MyFunc-1<br />$101 &gt;MyFunc-1<br />$102 &lt;OtherFunc-1<br />$103 &gt;OtherFunc-1<br /><br />then if you want to dispatch OtherFunc you do<br />LDX #2<br />TXS<br />RTS<br />however normally you would not immed load X and put it on some &quot;on X&quot; variable. <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The other catch with RTS chaining is you can't use the stack, not really a problem if you are just doing speed code from an NMI, but as a general system it not very practical</div><br />That's not completely true, if you leave yourself some room you can still use the faux video stack as a regular stack as long as you are careful. JSR, RTS, PHA and PLA will work just as expected as long as you don't push the stack past the $0/$FF point.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and making a self mod JSR chain(+6 per call) gives almost as much speed without the limitations.</div><br />It increases the static cost of each video &quot;segment&quot; from 6 to 12 cycles, and you lose the ability to cram in extra values for each video subroutine to pull out with PLA, and each &quot;jump entry&quot; in your queue takes 4 bytes of RAM intead of 2.<br /><br />Not so sure I agree it's almost as good, it seems like an inferior technique (but with the added bonus of being able to place it anywhere in RAM, or even have ROM versions for cutscenes and the like where things are exactly the same)</div>I was imagining that you would have a mostly fixed &quot;display list&quot; as things move, but don't get added or removed from the screen that often. Thus you save time by not regenerating the whole list each frame. If you are regenerating it each frame then sure any other stack use, will trash stuff, but you don't care as you are going to rebuilt it before next NMI. However if you FRAME out and don't get all the stack rebuilt before the NMI and some of your other systems have &quot;trashed&quot; the display list X_X

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 26, 2018 3:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I definitely posted a method exactly like this a while back.</div><br /><br />Indeed you did, so I'm calling it tokumaru's video stack from now on, if you don't mind  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />In <a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=13285" class="postlink">your thread</a> you asked for improvements, and there are a couple:<br /><br />1. Your stack format is 2 bytes for the desired vram address, and then 2 bytes for the desired subroutine, chaining that for as much as you need, and then ending with 2 bytes for a fake vram address $0000 and then 2 bytes for the terminator function that restores the stack.<br /><br />You can improve this by putting the vram address AFTER the desired subroutine address in your stack, and letting the subroutine itself PLA out the vram address and set it. Why? Because we can create hundreds of different subroutines if we desire, to do specialized tasks. For instance, we can make one to change the background fill color in the PPU, which is always $3F00, so it's better to write LDA #$3F, LDA #$00 than to use PLA, PLA. Not only is it faster cyclewise during the vblank, but it uses up less of the faux stack.<br /><br />But even more important than that....<br /><br />2. To loop back and continue to the next subroutine, you use &quot;JMP UpdateVRAM -&gt; PLAx2 vram address -&gt; RTS&quot;, but now that the vram address isn't in the way you can drop all that and just use a normal &quot;RTS&quot; at the end of each subroutine, and it will magically jump to the next subroutine! This shaves off a LOT of cycles and simplifies the code as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 26, 2018 7:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Indeed you did, so I'm calling it tokumaru's video stack from now on, if you don't mind  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div><br />If this is supposed to be immortalized in the wiki or something I don't mind being credited somewhere, but having it named after me is a bit too much IMO. <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. Your stack format is 2 bytes for the desired vram address, and then 2 bytes for the desired subroutine, chaining that for as much as you need, and then ending with 2 bytes for a fake vram address $0000 and then 2 bytes for the terminator function that restores the stack.<br /><br />You can improve this by putting the vram address AFTER the desired subroutine address in your stack, and letting the subroutine itself PLA out the vram address and set it.</div><br />The reason I did it like that was so I could reuse the same 32x unrolled loop of PLA+STA to transfer any number of bytes from 1 to 32, by simply JSRing to the middle of the sequence. If I were to set the address inside the routine, I'd need 32 separate routines for the same functionality without any loss of performance.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why? Because we can create hundreds of different subroutines if we desire, to do specialized tasks.</div><br />I did end up ditching the generic approach in favor of completely specialized routines myself, but aside from the rare instances where you'd use hardcoded addresses, my old method could do specialized routines too, which could set other VRAM addresses if needed.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2. To loop back and continue to the next subroutine, you use &quot;JMP UpdateVRAM -&gt; PLAx2 vram address -&gt; RTS&quot;, but now that the vram address isn't in the way you can drop all that and just use a normal &quot;RTS&quot; at the end of each subroutine, and it will magically jump to the next subroutine! This shaves off a LOT of cycles and simplifies the code as well.</div><br />Sure, that's much cleaner and straightforward, but like I said, setting the VRAM address before calling the next routine is merely a ROM saving feature so that the same generic transfer routine can deal with data lengths from 1 to 32. The superfluous address setting at the end of the chain will waste a few cycles, but that's all.<br /><br />I wasn't 100% satisfied with that solution either, but someone looking for a completely generic VRAM update system of &quot;copy X bytes from the stack to PPU address $XXXX&quot; that doesn't have much ROM space might want to go with that.<br /><br />I ended up switching to completely specialized update routines, so I have complete freedom to store the data in whatever format is more convenient for each task (many times outside of the stack, even), but I still have the RTS directly call the next update routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 26, 2018 7:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">The reason I did it like that was so I could reuse the same 32x unrolled loop of PLA+STA to transfer any number of bytes from 1 to 32, by simply JSRing to the middle of the sequence. If I were to set the address inside the routine, I'd need 32 separate routines for the same functionality without any loss of performance.</div><br /><br />You can solve this by first queuing up a specialized &quot;set address&quot; subroutine, and then queuing up the unrolled loop subroutine right after (plus the offset to get the desired amount of loops). It adds 6 cycles (the extra RTS) to do this, but just the unnecessary JMP statement at the end of the old solution costs 3 cycles, so this technique's unrolled loop only really costs 6 - 3 = 3 cycles more. As long as you do a few more video operations queued up afterwards you end up using less cycles, by avoiding the extra JMP each time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 26, 2018 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But the extra JMP and the bogus VRAM address are used only once, and that's during a not so precious time (i.e. they can safely take place during the pre-render scanline) but an extra 6 cycles <span style="text-decoration: underline">per update routine call</span> when CPU time is at a premium (i.e. vblank), that's much worse IMO.<br /><br />Note that I'm not arguing that this is the best possible solution, just that there might be demand out there for all of these solutions. The VRAM address presetting is for those who're looking for a fast generic vblank handler but don't have much ROM to spare (e.g. NROM projects with more VRAM updates than typical).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 26, 2018 8:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I'm misunderstanding you, or you are misunderstanding me.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />Here is the gist what I understood you to be saying:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">We have to arrange the stack so that it's [videoaddress] first and [subroutineaddress-1] afterwards. When it's vblank time, we pull out the [videoaddress], use it to set $2006 correctly, and then we use RTS to jump to our [subroutineaddress-1], which now begins pushing data into $2007. When it's done, it calls JMP UpdateVRAM to begin the process again.<br /><br />The reason we cannot do the opposite order, beginning by using RTS to jump to [subroutineaddress-1], and then have the subroutine itself pull the [videoaddress] and set $2006 correctly, and then begin pushing data into $2007, is because the subroutine might be an unrolled loop, and we might want to jump to [subroutineaddress-1+60] to skip a bunch of the unrolled loop.<br /><br />If we did that, we'd be jumping past the part of the subroutine that pulls out the [videoaddress] and set $2006 correctly. Therefore that part cannot be inside the subroutine.</div><br /><br />And here is the gist what I'm saying:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To solve this issue, we simply have to avoid setting the address in the unrolled loop's subroutine. We do this by setting the stack like this: [subroutineSetAddress-1][videoaddress][subroutineUnrolledLoop-1+60]<br /><br />What happens now is that our first RTS jumps us to subroutineSetAddress, which uses two PLA to set $2006 correctly, and then calls RTS, which jumps us to subroutineUnrolledLoop (plus the offset!) with the address already set.<br /><br />This means we are using an additional RTS instruction for unrolled loops, which costs 6 more cycles, but we save 3 cycles for every single video subroutine by avoiding the &quot;JMP UpdateVRAM&quot;, which means it more than makes up for it, and we end up using less cycles in the long run.</div><br /><br />Edit: Actually, re-reading a couple of times, what do you mean &quot;But the extra JMP and the bogus VRAM address are used only once&quot;, how does that work? What exactly do you do to end your video subroutines if you are only using the JMP one time during the entire sequence? Don't you have to do it one time per subroutine?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>