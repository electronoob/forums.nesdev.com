<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=2786" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-03-09T13:55:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=2786</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-03-09T13:55:49-07:00</updated>
<published>2007-03-09T13:55:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=22371#p22371</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=22371#p22371"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=22371#p22371"><![CDATA[
<div class="quotetitle">rbudrick wrote:</div><div class="quotecontent"><br />As for flipping FDS disk sides, a button may not be enough unless a menu pops up.<br /></div><br />What about a button and four LEDs?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Mar 09, 2007 1:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rbudrick]]></name></author>
<updated>2007-03-09T11:34:50-07:00</updated>
<published>2007-03-09T11:34:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=22369#p22369</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=22369#p22369"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=22369#p22369"><![CDATA[
As for flipping FDS disk sides, a button may not be enough unless a menu pops up.  Without a menu, a three bit switch could emulate up to 8 disk sides.  Iirc, the largest FDS game was 4 disks, but I could be wrong.  I'm sure there were 2 disk games and possibly 3. A 4 bit switch could leave open possibilities for experimental FDS dev work.<br /><br />-Rob<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=200">rbudrick</a> — Fri Mar 09, 2007 11:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-01-23T10:17:26-07:00</updated>
<published>2007-01-23T10:17:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21505#p21505</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21505#p21505"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21505#p21505"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The first order approximation involves eight flip-flops and one 8-bit adder. Each cycle, add the linear PCM value created by the sound emulation circuit to the internal register. If there is a carry out, produce a 1 on the output; otherwise, produce a zero.<br /></div><br />Heh, that is pretty cool. As long as only 2 MMC5 channels are emulated, that means 5-bit adder and only 5 flip-flops. Sounds easy.<br />Since M2 oscillates at 1.5 or 1.7k, this will make plenty of pulses even for a 20kHz square wave (approximately 40 pulses per high or low state).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Slew rate will show up as a loss of high frequencies, similar to overload in DPCM, but CD players manage to pull it off as long as slew-related phenomena are kept above 20 kHz.<br /></div><br />Yeah, after all even if there is some low-gabrage oscillation above 20kHz nobody will hear it exept cats and dogs (without counting that there is probably other filters from the NES output to the TV), so I think it's okay.<br />This could be improved by increasing the filter's order, however I don't know if this is needed or not. I guess some test should be done on this before any implementation in hardware is done.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jan 23, 2007 10:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-01-22T17:09:57-07:00</updated>
<published>2007-01-22T17:09:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21488#p21488</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21488#p21488"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21488#p21488"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Sounds good, however I've doubt when it comes to make good quality square waves with only pulse coding. The filter will add serious slew rate, and break all the nice sounding of square wave. Maybe not, but I'm afraid it will.<br /></div><br />Slew rate will show up as a loss of high frequencies, similar to overload in DPCM, but CD players manage to pull it off as long as slew-related phenomena are kept above 20 kHz.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also I have no idea how complicated it is to split from standard digital sound (created inside a FPGA or so), to SDPCM sound (on a single pin).<br /></div><br />The first order approximation involves eight flip-flops and one 8-bit adder. Each cycle, add the linear PCM value created by the sound emulation circuit to the internal register. If there is a carry out, produce a 1 on the output; otherwise, produce a zero. Commercial implementations use noise shaping to move more of the noise into frequencies above 20 kHz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 22, 2007 5:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rbudrick]]></name></author>
<updated>2007-01-22T08:47:49-07:00</updated>
<published>2007-01-22T08:47:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21472#p21472</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21472#p21472"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=21472#p21472"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't like the idea of having one FPGA with hundreds of mappers inside, the benefit of having programmable logic is so that you can change it! This way people can develop their own mappers and upload them as simply as the ROM data.<br /></div><br /><br />Good idea, but I would definitely pay more for the more expensive chip that emulates all.  I wouldn't even think twice about it.  Plus, the average joe user non-technophile would dig it more two.  Best bet?  Offer both.  Those with the cash can pay it.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I wouldn't touch FDS at all on this project if I were you. Even if you rewrote the BIOS, some FDS games perform disk I/O directly, so those games will still not work. Further, the user will need to be able to switch sides/disks during play, which would most likely require either a button on the cartridge or something plugged into the expansion port.<br /></div><br /><br />I think it would be acceptable to just make that an entirely different cart.  You would have to emulate the FDS the same way FDSLoadr does, only without a real RAM adapter on the NES side.  As for disk switching, you could make a physical switch if you felt you really had to emulate it (eject, flip), rather than use hot keys.  No one wants to get up and hit a switch, but back in my day we had to get up and flip disks around by ourselves uphill both ways in the snow, and we liked it!  Also, why rewrite the bios completely, when one could load the FDS Bios on there themselves?  I would imagine that could take a lot of work out of it.  Another option for hot keys would be to bring up a menu ala  Game Action Replay that displays the selectable disk sides and maybe some other info about the image.   Such a menu might be useful to show info on any game, really.<br /><br />But anyway, in FDSLoadr, You send a game to the RAM Adapter, and when you want to switch disk sides, you press 2 on the keyboard for side B (or 3 for side C or 4 for side D, etc)  and then space to send the side to the RAM adapter.<br /><br />But like I said, a seperate cart for FDS might be better, but just throwing some ideas out there.  I'd love to have a replacement for FDSLaodr, since it only works in true DOS, and it is somewhat limited.  USB would be nice too.<br /><br />-Rob<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=200">rbudrick</a> — Mon Jan 22, 2007 8:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-12-27T09:25:58-07:00</updated>
<published>2006-12-27T09:25:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20666#p20666</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20666#p20666"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20666#p20666"><![CDATA[
Sounds good, however I've doubt when it comes to make good quality square waves with only pulse coding. The filter will add serious slew rate, and break all the nice sounding of square wave. Maybe not, but I'm afraid it will. And most custom sound mapper uses very-low-slew-rate waveforms (at least MMC5 and VRC6, the most popular extra sound chips arround).<br /><br />Also I have no idea how complicated it is to split from standard digital sound (created inside a FPGA or so), to SDPCM sound (on a single pin).<br /><br />Oh, and in case M2 would be too slow there is always the CIC 4MHz clock... however it won't work on top-loaders, and any chances of getting it working on a famicom are gone.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Dec 27, 2006 9:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-12-26T16:33:45-07:00</updated>
<published>2006-12-26T16:33:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20643#p20643</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20643#p20643"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20643#p20643"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Well, if you insist why not, but then what speed would your mapper logic have to send audio data to the DSM filter to have an acceptable quality ?<br /></div><br />M2 should be fast enough. It's almost as fast as Sony's Super Audio CD.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And how could FC analog signals (trough an adaptater) pass the inverter as if they were digital without serious alteration ?<br /></div><br />Separate pins.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 26, 2006 4:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-12-26T14:56:03-07:00</updated>
<published>2006-12-26T14:56:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20642#p20642</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20642#p20642"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20642#p20642"><![CDATA[
Well, if you insist why not, but then what speed would your mapper logic have to send audio data to the DSM filter to have an acceptable quality ? And how could FC analog signals (trough an adaptater) pass the inverter as if they were digital without serious alteration ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Dec 26, 2006 2:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-12-26T14:46:18-07:00</updated>
<published>2006-12-26T14:46:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20641#p20641</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20641#p20641"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20641#p20641"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I think I could port the sound to a device that would mix it with the NES audio on the bottom of the thing. I just don't know if it should be analog or digital, or both.<br /></div><br />If you make your audio hardware output a <a href="http://en.wikipedia.org/wiki/Delta-sigma_modulation" class="postlink">delta-sigma modulated</a> signal on one pin, then you do have both. The DAC for ΔΣ is just an inverter (to remove noise) and a low-pass filter (to turn it into analog).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 26, 2006 2:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-12-26T14:12:23-07:00</updated>
<published>2006-12-26T14:12:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20639#p20639</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20639#p20639"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20639#p20639"><![CDATA[
I don't know about FDS support, but the cart is great anyway, and 95% of FDS games have their cartridge equivalent, either hack or official version.<br /><br />I think the best for sound would be to create a device that plug on the bottom of the NES inside the connector and take it as a standard for future homebrew developpement.<br /><br />I was planning to use extra MMC5 sound in Ecological Evolution, a game I'm planning to make (only some design is done right now, no game engine programming at all). If I use more channels, it would be great to not have people need to modify their hardware for it to work. On running on a real MMC5, I think all 72-pins carts needs additional wires form the MMC5 to the cartridge connector to work with a (modified) console. With a custom cart, I think I could port the sound to a device that would mix it with the NES audio on the bottom of the thing. I just don't know if it should be analog or digital, or both. FC carts uses analog format (sound is already mixed on the cart and ready to go on the connector), but I think using a different digital format could be better and increase noise immunity if done proprely. However, that would require some device that send data asynchronously to the expansion device, and the expansion device with a DAC on it mixing it with the NES audio output.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Dec 26, 2006 2:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2006-12-26T13:58:47-07:00</updated>
<published>2006-12-26T13:58:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20637#p20637</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20637#p20637"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20637#p20637"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />At this point, it might just be better to rewrite the BIOS and damn the compatibility with games that do direct disk access.<br /></div><br />It would be better to make a drop in replacement for it capable of being used with FDS games and hardware which use the FDS. This would require a new BIOS and the old BIOS. If the device had a 60 pin connector, it could directly switch to the FDS BIOS and not illegally contain it inside and also allow sound  register writes to go to the extra 60 pin. As I understand it, FDS sound isn't fully understood yet.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Tue Dec 26, 2006 1:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bunnyboy]]></name></author>
<updated>2006-12-24T13:21:56-07:00</updated>
<published>2006-12-24T13:21:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20606#p20606</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20606#p20606"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20606#p20606"><![CDATA[
Or build another board using the same tech.  Would be cheaper because of the smaller fpga and less ram needed.  Audio stuff could also be added more easily.  Must get this board done first!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=228">bunnyboy</a> — Sun Dec 24, 2006 1:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-12-24T10:24:20-07:00</updated>
<published>2006-12-24T10:24:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20603#p20603</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20603#p20603"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20603#p20603"><![CDATA[
At this point, it might just be better to rewrite the BIOS and damn the compatibility with games that do direct disk access.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 24, 2006 10:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dvdmth]]></name></author>
<updated>2006-12-24T10:15:03-07:00</updated>
<published>2006-12-24T10:15:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20602#p20602</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20602#p20602"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20602#p20602"><![CDATA[
If cannot change all of the address lines with the FPGA, then you'll need to "trap" accesses to the I/O registers.<br /><br />When the FDS is in write mode, trap accesses to the write register by injecting a BRK on the following cycle.  The FPGA should maintain the value written, which the handler can access in order to update the FDS image.  When ddone, subtract 2 from the return address, then RTI.<br /><br />For reads, trap the read register in the same manner.  Place the next byte of data in a register, subtract 5 from the return address (assuming absolute addressing was used), then RTI.  When the instruction re-executes, the register contents can then be sent to the game.<br /><br />This method will slow things down, however, but it's the only way I can think of that you can do FDS without having control over all address lines.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=360">dvdmth</a> — Sun Dec 24, 2006 10:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bunnyboy]]></name></author>
<updated>2006-12-23T11:02:54-07:00</updated>
<published>2006-12-23T11:02:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20595#p20595</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20595#p20595"/>
<title type="html"><![CDATA[Universal NES flash cartridge considerations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2786&amp;p=20595#p20595"><![CDATA[
Finally remembered why FDS wont work on my board and its pretty simple.  The game reads disk data from one register.  The easy thing would be to just have an incrementing 16 bit counter in the fpga that points to where in ram that register byte will come from.  The problem is the fpga only controls the upper address bits (A18-A13) and not the lower address bits so the counter cannot set the full address.  There is probably a simple answer but I havent thought about it yet, almost got boot rom updating from CopyNES done instead...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=228">bunnyboy</a> — Sat Dec 23, 2006 11:02 am</p><hr />
]]></content>
</entry>
</feed>