<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Overall status of NES emulation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Overall status of NES emulation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1641">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1641</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Jun 12, 2006 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. Nesticle is not accurate. It uses a scanline emulator to draw instead of all of those complicated PPU fetches.</div><br /><br />Ouch. I can't think of a single system more complex than the NES that has a dot-based renderer implemented for it in any available emulator :/<br /><br />I imagine video circuitry / memory fetches will continue to increase in complexity for each new system, too. So the majority of accurate NES emulators really render dot-by-dot, eh? Interesting. What kind of speed loss does this incur from scanline-based renderers?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Optimization and features like tile editors and debuggers are things that need to be taken into consideration with future emulators, there's only so far that you can push vital "core emulation" accuracy before you're wasting the users cycles.</div>
<br />
<br />Why is that? As real NES hardware continues to become more and more scarce, eventually there will be no one left to verify things on the real system. This will probably be a good 10-30 years from now.
<br />
<br />After this happens, I expect future emulators to become more and more sketchy on how they implement things. Causing some games (especially PD/fanmade ones) to have increasingly varying behavior between emulators.
<br />
<br />Perfect documentation would avoid this, but let's face it: nobody can write crystal clear documentation that everyone will understand.
<br />
<br />Likewise, computing power will continue to increase, making this less and less of an issue.
<br />
<br />The NES simply isn't complicated enough to warrant sacrifing accuracy on. We could eventually create a BSD/PD library such as blargg's, and eliminate the need for developing a "perfectly"-accurate NES emulator, excepting for sheer fun. And then everyone else could just add on all of their tile editors, debuggers, GUIs, etc to make it do whatever they want.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Mon Jun 12, 2006 9:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Libraries? No, not the best idea. I wouldn't like to build up a new emulator using libraries just because they're supposely accurate, so giving me less headaches. If I can write something really good OR something as exercise, so this is nice. In other words...
<br />
<br />- I was using an 'accurate' CPU emulator years ago... Wrote my own.
<br />- I was using an 'accurate' sound emulator... Wrote my own.
<br />- I started my emu using an old project... Wrote my own.
<br />- What's next? ^_^;;..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Jun 12, 2006 11:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Why is that? As real NES hardware continues to become more and more scarce, eventually there will be no one left to verify things on the real system. This will probably be a good 10-30 years from now.</div>
<br />I don't understand why everyone thinks this, in 30 years there will probably be 1 hour-IC decappers who for an extra fee can derive perfect logic from die photos while you wait. If there is such a concern about every minutia, the obvious answer is to get the real thing which software can never replace.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Mon Jun 12, 2006 2:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I'd like to see separation of the backend from the front end. This way, the backend can range in accuracy and CPU use from Nesticle to Nintendulator, while the frontend can range from spartan to Nesticle.<br /><br />The backend's job: Given a PRG ROM, a CHR ROM, starting state of hardware, and a stream of controller input, generate a sequence of 256x240 pixel frames and a stream of audio.<br /><br />The frontend's job: Translate DirectInput into NES controls, pass them to the backend, and translating NES video and audio into a DirectX video stream and audio stream. Share NES controls over a network (for LAN play). Edit parts of the ROM (tiles, cheats, even levels in specialized emulators). An NSF player can use the same backend, just telling it not to generate video.</div>
<br />I had a split like this in mind for my multi-emulator project (if I ever get going on it... I'm still working on source code generation for the cores, in my copious free time).  In my case, the front-end / back-end split is necessary because there's only one front end, but 3+ backends planned (NES, SNES and some day Gameboy).
<br />
<br />I'm hoping to make some inroads on the "cycle-accurate but still efficient" emulation front, too.  There's no reason we can't have the accuracy of Nintendulator / BSNES with performance in the same ballpark as Nesticle /  ZSNES.  Its not impossible, its just hard.  I don't have anything real yet, my project is still in the hopes-and-dreams phase.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 12, 2006 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Anes wrote:</div><div class="quotecontent">Thats true i remember running nesticle in a 486 dx-4 100, but im agree with Wednesday, today people have at last a 700 mghz celeron (and im talking from a country where pcs are not cheap.</div><br />True, but is it handheld? Getting an emulator to run on a 100 MHz PC is the first step toward getting an emulator to run on a 100 MHz handheld.<br /><br /><div class="quotetitle">Anes wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Something with a built-in tile editor for games that use CHR ROM. </div><br />I dont want to hurt anybody, but that is for kids, its a "toy" in a emulator.</div><br />Users demand toys, and users demand inaccurate backends if toys are available only in frontends for emulators with inaccurate backends.<br /><br /><div class="quotetitle">Anes wrote:</div><div class="quotecontent">Here i think there is one issue: Will my emulator be for entertaiment/nostalgia/etc or for Nes development?</div><br />Separate frontends for developers and end users.<br /><br /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- I was using an 'accurate' CPU emulator years ago... Wrote my own.<br />- I was using an 'accurate' sound emulator... Wrote my own.<br />- I started my emu using an old project... Wrote my own.<br />- What's next? ^_^;;..</div>
<br />Separating your emulator into a backend and a frontend so that others can use your emulator as a starting point before writing their own backend and frontend, and then so that users can pick and choose which backend to mate with a given frontend. In fact, an appropriate front/back split could allow the same frontend to be used with backends that represent completely different consoles, as mozz pointed out. Think MAME or MESS.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Jun 12, 2006 5:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">I don't understand why everyone thinks this, in 30 years there will probably be 1 hour-IC decappers who for an extra fee can derive perfect logic from die photos while you wait.</div><br /><br />I'll believe that when I see it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If there is such a concern about every minutia, the obvious answer is to get the real thing which software can never replace.</div><br /><br />The hardware <em>will</em> fail. Even ROMs only have a rated shelflife of ~30 years or so.<br /><br />We can just say that about emulation as a whole and we can all quit working on our projects, too. So your point is that you're happy that people are willing to emulate as much as you, but mad that people are willing to emulate more than you? It's a hobby. To some, getting the games playing is the hobby. To people like me, getting perfect digital results and hardware-perfect H/V counters to the real hardware is the hobby. You make the compromise emulator between totally accurate and NESticle, and I'll go for perfection.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's no reason we can't have the accuracy of Nintendulator / BSNES with performance in the same ballpark as Nesticle / ZSNES. Its not impossible, its just hard. I don't have anything real yet, my project is still in the hopes-and-dreams phase.</div>
<br />
<br />At any rate, I look forward to the competition :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Jun 12, 2006 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">What kind of speed loss does this incur from scanline-based renderers?</div><br /><br />What it boils down to is how fine your "catch up" system has to be.  Per-cycle renderers have to be fine and do the certain operations on specific cycles, whereas scanline renderers can mesh everything together and do it all at once.  Per-cycle renderers need to be able to enter and exit on any given cycle within the scanline (which requires many additional time checks) whereas scanline renderers know they will always start and stop at specific times.<br /><br />The performance difference varies by game, but if you employ a hybrid scheme in your emulator (using the scanline renderer whenever possible and only using the fine renderer when the game does something mid-scanline) I don't think the speed impact is all that much of a difference.  It really does depend on the game, though.  Games which poll for sprite-0 hit, for example, might trick the emu into catching up the PPU every 2 instructions (making it use the fine renderer for several scanlines, and constantly entering/exiting)... whereas a game which uses an IRQ counter might only use the fine renderer twice (on the scanline being split by the split-screen function), and the other scanlines can all be quickly slopped together.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's no reason we can't have the accuracy of Nintendulator / BSNES with performance in the same ballpark as Nesticle /  ZSNES.  Its not impossible, its just hard.</div>
<br />
<br />Nope -- I'm sure it's impossible.
<br />
<br />The degree of complexity is proportional to the CPU power required.  Programming can only be optimized to a point... then it's pretty much as fast as it's going to get.  I'm not saying that you can make a "perfect" fully optimized emulator -- but let's face it, once you reach that plateau, futher optimizations are going to be relatively minor.
<br />
<br />Doing a hybrid emu may be possible...  like a hack-and-slash NESticle-esque emu which is built optimized for specific games (via a hash check or something) -- and a slower, more precise, more generic emulator for games which aren't recognized.  But it's arguable whether this is really getting the best of both worlds, or if it's just falling back to speed hacks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Mon Jun 12, 2006 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- I was using an 'accurate' CPU emulator years ago... Wrote my own.<br />- I was using an 'accurate' sound emulator... Wrote my own.<br />- I started my emu using an old project... Wrote my own.<br />- What's next? ^_^;;..</div>
<br />I'd say you should have a go at writing your own 'accurate' GUI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 12, 2006 9:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">The performance difference varies by game, but if you employ a hybrid scheme in your emulator (using the scanline renderer whenever possible and only using the fine renderer when the game does something mid-scanline) I don't think the speed impact is all that much of a difference.  It really does depend on the game, though.  Games which poll for sprite-0 hit, for example, might trick the emu into catching up the PPU every 2 instructions</div><br />But if the PPU code can compute in advance the lines on which $2002 may change, then it can run the scanline renderer for all scanlines that do not contain sprite 0 or eight sprites.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The degree of complexity is proportional to the CPU power required.</div><br />But how much complexity is there really inside an NES CPU and PPU?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Doing a hybrid emu may be possible...  like a hack-and-slash NESticle-esque emu which is built optimized for specific games (via a hash check or something) -- and a slower, more precise, more generic emulator for games which aren't recognized.</div>
<br />Such speed hacks are backends, and the frontend can turn them on or off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Jun 13, 2006 7:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But if the PPU code can compute in advance the lines on which $2002 may change, then it can run the scanline renderer for all scanlines that do not contain sprite 0 or eight sprites.</div><br /><br />Right.  That's actually a great optimization to employ in such an emu.  The trickiest part of that is sprite-0, since that's the only thing you can't exactly predict until it's actually being rendered (since it can change very quickly by something as simple as a CHR swap, or by a pattern table flip).<br /><br />Even if you optimize it down to the scanline that Sprite 0 is on... checks will still be causing the emu to split those 8 scanlines every 2 instructions.  Super Mario Bros for example, has it's sprite 0 hit around the middle of the screen and on the 6th scanline of the screen, which means you'll have at least 6 or 7 scanlines going in and out of the fine renderer several times instead of just 1 like you'd have with a game which is driven by an IRQ.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But how much complexity is there really inside an NES CPU and PPU?</div>
<br />
<br />I am constantly being suprised.  When I look at the documentation for things like Pirate Mapper 90, which has an IRQ counter which can be driven by PPU reads and CPU writes...  efficiently tracking all of that inside an emulator can make things extraordinarily complicated extremely fast.
<br />
<br />There's CPU quirks with Read/Modify/Write instructions where the dummy value being written isn't what is expected, it seems like there's dozens of insane APU quirks (I mean just look at all of blargg's tests -- and that's only the stuff that's been discovered), and it seems like there's endless PPU quirks.  Getting it all "accurate" will lead to a very complicated program.  And there's no way such a program will ever be in the same performance ballpark as something that simplified and optimized it all as much as NESticle did.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue Jun 13, 2006 7:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">There's no reason we can't have the accuracy of Nintendulator / BSNES with performance in the same ballpark as Nesticle / ZSNES. Its not impossible, its just hard.</div>
<br />I stand by this statement, but feel free to disagree until someone manages to build one and prove me right  =)
<br />
<br />Take BSNES for example.  The fundamental reason its way slower than ZSNES is not because it has to do more work than ZSNES does to emulate accurately.  (It does have to do more work, but probably less than 2x or 3x).  The main reason BSNES is so slow is because it was written to be clear and maintainable, rather than to be high-performance.  An emulator engineered from the ground up to be high-performance could be much closer to ZSNES in performance, while still including all the work that BSNES does to emulate accurately (such as certain dots in the middle of scanlines being 6 clocks instead of 4).
<br />
<br />Having looked through ZSNES code, I don't even think a lot of it is optimal---the assembly cores for example, contain a lot of 8-bit register use and look like they would incur plenty of partial register stalls on P2/P3 hardware, and could probably be speeded up 10-20% or more simply by rewriting them to avoid that.  (Disclaimer: its been months since I looked at that code and I know the ZSNES team has been actively reworking stuff, so my claim might no longer apply).
<br />
<br />Anyway, there is precedent for stuff like this.  Consider microkernels.  Research on <a href="http://en.wikipedia.org/wiki/L4_microkernel_family" class="postlink">the L4 microkernel</a> proved that you could get performance matching and in some cases even exceeding monolithic kernels, if you paid very careful attention to the engineering of the microkernel and engineered it for a specific processor (but then the rest of the system was largely processor-independent).  To offer its benefits (separation/protection/whatever) over monolithic kernels, the microkernel had to "do more work" in the sense that it had to transition between user mode and supervisor mode more often, and move data between the layers more often.  Through careful engineering, they "trimmed the fat" from these operations and made them extremely efficient, so the "more work" part did not actually lead to worse performance.  I think this is similar to the situation with today's emulation scene.  We can build emulators that "do more work" than Nesticle or ZSNES, and if we design them right and engineer them very carefully we can probably get their performance close to that of Nesticle/ZSNES.  (It might even be possible to exceed them but I'm not counting on that.  If I could get an emulator within 1.5x of ZSNES while still having the accuracy of BSNES, I would count that as a whopping success).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jun 13, 2006 8:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Take BSNES for example. The fundamental reason its way slower than ZSNES is not because it has to do more work than ZSNES does to emulate accurately. The main reason BSNES is so slow is because it was written to be clear and maintainable, rather than to be high-performance.</div><br /><br />Right. I intentionally implement things in a way I know won't be as fast sometimes. The APU is the "perfect black box" that all other emus enslave to the CPU clock. I treat it like real hardware would and make them independant of each other. I don't optimize based on guessing/probability/etc, eg I won't emulate the same thing two ways and switch between the more accurate and faster version depending on whether or not the game needs it at a certain point. That gets sloppy real quick, and you waste too much time maintaining rather than discovering new hardware quirks and such.<br />Not to mention the code is very object-oriented. Lots of virtual function calls abound. But at the same time, I can swap between two CPU cores by modifying a single word in the main header file. Or do it at runtime.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Having looked through ZSNES code, I don't even think a lot of it is optimal---the assembly cores for example, contain a lot of 8-bit register use and look like they would incur plenty of partial register stalls on P2/P3 hardware, and could probably be speeded up 10-20% or more simply by rewriting them to avoid that.</div><br /><br />I'm sure you're aware why it is "slow", but for those who aren't: it was written nearly ten years ago. Processors continue to get more and more psychotic. Nowadays, you execute an xchg opcode and it's <em>sixteen times</em> slower than three mov opcodes on Pentium IVs. That kind of thing didn't happen on the 386es ZSNES was designed for.<br /><br />Optimizing for a generic x86 target is a journey into madness. It's best to just follow a few simple rules (don't use obscure opcodes, try and use the full register sizes whenever possible, etc) and go with that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I could get an emulator within 1.5x of ZSNES while still having the accuracy of BSNES, I would count that as a whopping success.</div>
<br />
<br />I'd be happy to see that. Keep in mind you have another challenge for newer versions, splitting each opcode <em>cycle</em> in half for bus-accurate CPU&lt;&gt;APU&lt;&gt;PPU communication :)
<br />
<br />I'll still continue to go for simplicity, and my emulator has always been more of a self-documenting reference platform than a true user-friendly emu. And I anticipate it always remaining easier to implement new findings into my design than any emu aiming for speed. I just added on a bunch of UI stuff since I had about 10,000 people using it anyway. Heck, I use it myself since it runs at 2-3x speed on my PC, so why not?
<br />
<br />I really think this will become less and less of a concern in the future. Once even Pocket PCs run at 3ghz, who will care if an emu eats up 1% or 10% when the backlight eats 20x the battery life either way? Certainly less people than will care that the emus source code is nigh unmaintainable and looks like it belongs in the IOCCC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue Jun 13, 2006 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I'd be happy to see that. Keep in mind you have another challenge for newer versions, splitting each opcode cycle in half for bus-accurate CPU&lt;&gt;APU&lt;&gt;PPU communication <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> </div>
<br />My strategy for that is to count time in CPU cycles but whenever two different devices have to interact (e.g. CPU writes to a port that will be read from the APU, or CPU writes to some PPU register), only then will it figure out the actual "tick" (machine cycle) during which the write occurred, and translate it onto the clock of the APU and figure out what tick the APU will first see the effects of that write at.  (in theory writes are less common than reads; there's no reason why you couldn't choose to do this on reads instead).  For the majority of reads and writes, the CPU is the only thing that can interact with that memory so there's no need to calculate the exact time the read or write would occur at.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jun 13, 2006 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I'm pretty sure that method would work for CPU&lt;&gt;APU. Maybe keep 64 before&lt;&gt;after mirrors for CPU&lt;&gt;PPU as well. You'll still need to split the CPU core up into cycles in order to get DMA synchronization timing correct, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jun 13, 2006 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for the long post.
<br />
<br /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">Even if you optimize it down to the scanline that Sprite 0 is on... checks will still be causing the emu to split those 8 scanlines every 2 instructions.</div><br /><br />OK, so a simple version's worst-case performance could be 16 scanlines out of 240 rendered lines, 7% of the total. That leaves 93% of the scanlines potentially rendered in an optimal way. What if you predict exactly when the sprite 0 hit will occur? Then you don't have to switch to fine rendering mode unless this prediction gets invalidated by PPU writes, something that is uncommon.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">[Pirate Mapper 90] has an IRQ counter which can be driven by PPU reads and CPU writes... efficiently tracking all of that inside an emulator can make things extraordinarily complicated extremely fast.</div><br /><br />This is a problem; even simple hardware driven by odd sets of signals can be very difficult to optimize. The general divide-and-conquer optimization strategy will probably help as usual: optimize for the common case and the few exceptions will just be slower.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Getting it all "accurate" will lead to a very complicated program. And there's no way such a program will ever be in the same performance ballpark as something that simplified and optimized it all as much as NESticle did.</div><br /><br />The question is, are these quirks actually invoked in common NES programs? It would be an interesting study to seek out consequential quirks invoked by NES programs, as a way to prove that such an emulator is impossible (rather than speculate as we are).<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I won't emulate the same thing two ways and switch between the more accurate and faster version depending on whether or not the game needs it at a certain point. That gets sloppy real quick, and you waste too much time maintaining rather than discovering new hardware quirks and such. </div><br /><br />What's being proposed here by tepples and others is not this; the proposal is to use optimized code where it has no side-effects. For example, if a game doesn't touch the PPU registers for the entire frame, you can use optimized tile and sprite rendering, without any effect on accuracy.<br /><br />There seems to be significant negativity towards designs that optimize performance of an emulator. In the past people had to focus on efficiency, and they often did this in ways that unnecessarily sacrificed accuracy. I think the activity is enjoyable, though it has nothing to do with emulation in specific. In my emulator I've had fun keeping it efficient while still passing some of my most rigorous test ROMs (and not just "passing" them in a hacky way). It's a more general activity of doing software engineering and examining possible tradeoffs.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Processors continue to get more and more psychotic. Nowadays, you execute an xchg opcode and it's sixteen times slower than three mov opcodes on Pentium IVs. That kind of thing didn't happen on the 386es ZSNES was designed for.  Optimizing for a generic x86 target is a journey into madness. It's best to just follow a few simple rules (don't use obscure opcodes, try and use the full register sizes whenever possible, etc) and go with that.</div><br /><br />Correction: the x86 architecture is psychotic. If you've used other architectures, you'd find them infinitely refreshing in their regularity and efficiency (the same way the 6502 and 65816 are). I take it using a compiler for x86 these days is generally a win?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'll still continue to go for simplicity, and my emulator has always been more of a self-documenting reference platform than a true user-friendly emu. And I anticipate it always remaining easier to implement new findings into my design than any emu aiming for speed. I just added on a bunch of UI stuff since I had about 10,000 people using it anyway. Heck, I use it myself since it runs at 2-3x speed on my PC, so why not? </div><br /><br />There's nothing wrong with an emulator design that favors ease-of-maintenance over ultimate efficiency. In these discussions there seems to be the notion that only one design is right, and the others are wrong and should be avoided. All designs involve tradeoffs and each one emphasizes some things over others, like programming skill needed to implement it, target platforms, clarity, language of implementation, efficiency, etc. There's no need to trivialize other designs as a way to justify your decisions; the fact that there is a tradeoff means that neither can meet all the demands equally and that each design has its merits and is worth being implemented by someone.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I really think this will become less and less of a concern in the future. Once even Pocket PCs run at 3ghz, who will care if an emu eats up 1% or 10% when the backlight eats 20x the battery life either way?</div>
<br />
<br />What about special features that require a fast emulator, like arbitrary seeking in a movie, real-time reverse playback, or showing a wall of emulators all running at full speed? (all of which are quite cool features to see)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>