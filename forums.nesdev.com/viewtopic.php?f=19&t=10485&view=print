<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Help ! can anyone see the mistake ?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Help ! can anyone see the mistake ?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=19&amp;t=10485">http://forums.nesdev.com/viewtopic.php?f=19&amp;t=10485</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>turboninja</b> [ Wed Sep 11, 2013 3:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello everybody,<br /><br />I am new here, I looked into this forum and tutos regarding my problem but I could not find anything similar. So here I am. <br /><br />I am developing a Tron game (the one with the motorcycles seen from above, I always dreamt on playing this game on an actual NES, don't know why) with NESASM (it does not seem to be the best assembler but it has so many tutos and sources). I am now trying to constrain the user to move along a grid (grid defined as the border of the tiles composing the screen). So what I did is quite simple : save the input in the keypad and load it into the &quot;actual&quot; variables (the speed of the motorbike on every axis) every 8 time the program goes through the main loop. Here is the thing I am doing.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">infinite:&nbsp; ; a label to start our infinite loop<br />&nbsp; &nbsp; waitblank:<br />&nbsp; &nbsp; &nbsp; &nbsp; bit $2002&nbsp; ; these 3 lines wait for VBlank, this loop will actually miss VBlank<br />&nbsp; &nbsp; &nbsp; &nbsp; bpl waitblank ; alot, in a later Day, I'll give a better way.<br /><br />&nbsp; &nbsp; jsr disp_Sprites_DMA<br />&nbsp; &nbsp; jsr move_charac1&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr move_charac2&nbsp; &nbsp; ; this is optional<br />&nbsp; &nbsp; jsr strobe_keypad1<br />&nbsp; &nbsp; jsr strobe_keypad2 ; this is optional<br />&nbsp; &nbsp; jsr update_keypad1&nbsp; &nbsp;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ldx loop_count<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; stx loop_count<br />&nbsp; &nbsp; txa<br />&nbsp; &nbsp; cmp #8<br />&nbsp; &nbsp; beq modulo<br />&nbsp; &nbsp; jmp infinite<br /><br />modulo:<br />&nbsp; &nbsp; jsr update_speed1<br />&nbsp; &nbsp; ldx #0<br />&nbsp; &nbsp; stx loop_count<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; jmp infinite<br /></div><br /><br />However, with this cmp line, the motorbike has a strange diagonal direction when I press the left and right keys (that should not happen at all) but works perfectly fine with up and down keys (which confuses me a lot). And without the cmp (just jumping to &quot;modulo&quot;) everything works perfectly fine as well. <br /><br />So, here is my question, is it possible, by any chance, that I am overwriting some of my speed variables doing something that I do not suspect affects the &quot;speed&quot; variables ? (I am not very familiar with assembler, I don't know the kind of bugs it can produce)<br /><br />If somebody wants to try the whole code, here it is, with the files needed. Any help would be more than welcome  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ;;--- CODE START ---;;<br />&nbsp; &nbsp; .inesprg 1<br />&nbsp; &nbsp; .inesmap 0<br />&nbsp; &nbsp; .inesmir 1<br />&nbsp; &nbsp; .ineschr 1<br /><br />&nbsp; &nbsp; .bank 1<br />&nbsp; &nbsp; .org $FFFA<br />&nbsp; &nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no VBlank<br />&nbsp; &nbsp; .dw Start&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever<br />&nbsp; &nbsp; .bank 0<br />&nbsp; &nbsp; .org $0000<br /><br /><br />;; What follows will be useful to make sure the cycle follows the grid<br /><br /><br />&nbsp; &nbsp; .org $0300 ; OAM Copy location $0300<br />;; THE FIRST TWO SPRITES REPRESENT THE MOTORBIKES<br />Sprite1_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite1_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite1_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite1_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br />Sprite2_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; same thing, same order for sprite #2<br />Sprite2_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; note that I numbered 1 2 ...<br />Sprite2_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; some people may actually prefer starting<br />Sprite2_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; the count at 0, but it doesn't really matter.<br />;; THESE SPRITES WILL REPRESENT THE SCORE OF EACH PLAYER<br />;; BETWEEN 0 AND 9<br />Sprite3_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite3_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite3_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite3_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br />Sprite4_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; same thing, same order for sprite #2<br />Sprite4_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; note that I numbered 1 2 ...<br />Sprite4_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; some people may actually prefer starting<br />Sprite4_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; the count at 0, but it doesn't really matter.<br /><br />&nbsp; &nbsp; .org $0500<br />;; This part allows variables declarations (or definition)<br />speed1_Up:&nbsp; &nbsp;.db 0<br />speed1_Left:&nbsp; &nbsp;.db 0<br />speed1_Down:&nbsp; &nbsp;.db 0<br />speed1_Right:&nbsp; &nbsp;.db 0<br />speed2_Up:&nbsp; &nbsp;.db 0<br />speed2_Down:&nbsp; &nbsp;.db 0<br />speed2_Left:&nbsp; &nbsp;.db 0<br />speed2_Right:&nbsp; &nbsp;.db 0<br /><br />speed1_Up_To_Be:&nbsp; &nbsp;.db 0<br />speed1_Down_To_Be:&nbsp; &nbsp;.db 0<br />speed1_Left_To_Be:&nbsp; &nbsp;.db 0<br />speed1_Right_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Up_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Down_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Left_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Right_To_Be:&nbsp; &nbsp;.db 0<br />loop_count: .db 0<br /><br /><br />&nbsp; &nbsp; .org $8000&nbsp; ; code starts at $8000 or $C000<br />Start:<br />&nbsp; &nbsp; lda #1;<br />&nbsp; &nbsp; sta speed1_Up_To_Be;<br />&nbsp; &nbsp; sta speed2_Up;<br />&nbsp; &nbsp; sta Sprite2_T<br />&nbsp; &nbsp; sta Sprite1_S;<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; sta Sprite2_S;<br />&nbsp; &nbsp; sta Sprite1_T;<br />&nbsp; &nbsp; sta speed1_Down;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed1_Right;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed1_Left;<br />&nbsp; &nbsp; sta speed2_Down;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed2_Right;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed2_Left;<br />&nbsp; &nbsp; ;lda #0<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #80;<br />&nbsp; &nbsp; sta Sprite1_X;<br />&nbsp; &nbsp; sta Sprite2_X<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #80<br />&nbsp; &nbsp; sta Sprite1_Y<br />&nbsp; &nbsp; lda #120<br />&nbsp; &nbsp; sta Sprite2_Y<br /><br />&nbsp; &nbsp; lda #%00001000&nbsp; ;<br />&nbsp; &nbsp; sta $2000&nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; lda #%00011110&nbsp; ; Our typical PPU Setup code.<br />&nbsp; &nbsp; sta $2001&nbsp; &nbsp; &nbsp; &nbsp;;<br /><br />&nbsp; &nbsp; ldx #$00&nbsp; &nbsp; ; clear X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; start of palette loading code<br />&nbsp; &nbsp; lda #$3F&nbsp; &nbsp; ; have $2006 tell<br />&nbsp; &nbsp; sta $2006&nbsp; &nbsp;; $2007 to start<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp; ; at $3F00 (palette).<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; <br />loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this is a freaky loop<br />&nbsp; &nbsp; lda palette, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp; sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp; cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp; bne loadpal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br />;; end of palette loading code<br />&nbsp;;;--- CODE START ---;;<br /><br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr dispBackground&nbsp; ; calls the routine to display the background<br /><br /><br />;; THE MAIN LOOP<br /><br />infinite:&nbsp; ; a label to start our infinite loop<br />&nbsp; &nbsp; waitblank:<br />&nbsp; &nbsp; &nbsp; &nbsp; bit $2002&nbsp; ; these 3 lines wait for VBlank, this loop will actually miss VBlank<br />&nbsp; &nbsp; &nbsp; &nbsp; bpl waitblank ; alot, in a later Day, I'll give a better way.<br /><br />&nbsp; &nbsp; jsr disp_Sprites_DMA<br />&nbsp; &nbsp; jsr move_charac1&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr move_charac2&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr strobe_keypad1<br />&nbsp; &nbsp; jsr strobe_keypad2<br />&nbsp; &nbsp; jsr update_keypad1&nbsp; &nbsp;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ldx loop_count<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; stx loop_count<br />&nbsp; &nbsp; txa<br />&nbsp; &nbsp; cmp #8<br />&nbsp; &nbsp; beq modulo<br />&nbsp; &nbsp; jmp infinite<br /><br />modulo:<br />&nbsp; &nbsp; jsr update_speed1<br />&nbsp; &nbsp; ldx #0<br />&nbsp; &nbsp; stx loop_count<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; jmp infinite<br /><br />&nbsp;update_keypad1:<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Abutton Status ; note that whatever we ain't interested&nbsp; &nbsp;<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Bbutton Status ; in we just load so it'll go to the next one.<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Select button status<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Start button status<br />&nbsp; &nbsp; lda $4016&nbsp; ; load UP button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp; ; AND status with #1<br />&nbsp; &nbsp; bne UPKEYdown&nbsp; ; for some reason (not gonna reveal yet), need to use NotEquals<br />&nbsp; &nbsp; ;with ANDs. So it'll jump (branch) if key was down.<br />&nbsp; &nbsp; lda $4016&nbsp; ; load DOWN button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp; bne DOWNKEYdown<br />&nbsp; &nbsp; lda $4016&nbsp; ; load LEFT button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp; bne LEFTKEYdown<br />&nbsp; &nbsp; lda $4016&nbsp; ; load RIGHT button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp; bne RIGHTKEYdown<br />&nbsp; &nbsp; ;ldy $0<br />&nbsp; &nbsp; jmp NOTHINGdown2&nbsp; ; if nothing was down, we just jump (no check for conditions)<br />&nbsp; &nbsp; ; down past the rest of everything.<br />&nbsp; &nbsp; UPKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Down;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown2&nbsp; ; jump over the rest of the handling code<br />&nbsp; &nbsp; DOWNKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Up;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #2<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown ; jump over the rest of handling code.<br />&nbsp; &nbsp; NOTHINGdown2:<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown<br />&nbsp; &nbsp; LEFTKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Right;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #3<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown<br />&nbsp; &nbsp; RIGHTKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Left;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; NOTHINGdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />;; Kind of &quot;function&quot; in assembly style, used to relieve the main loop<br />move_charac1:<br />&nbsp; &nbsp; lda Sprite1_Y ; load A with Y position<br />&nbsp; &nbsp; sbc speed1_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite1_Y; store back to memory<br />&nbsp; &nbsp; lda Sprite1_Y<br />&nbsp; &nbsp; adc speed1_Down&nbsp; ; add 1 to A. ADC (Add with Carry)((to A register))<br />&nbsp; &nbsp; sta Sprite1_Y<br />&nbsp; &nbsp; lda Sprite1_X<br />&nbsp; &nbsp; sbc speed1_Left<br />&nbsp; &nbsp; sta Sprite1_X<br />&nbsp; &nbsp; lda Sprite1_X<br />&nbsp; &nbsp; adc speed1_Right<br />&nbsp; &nbsp; sta Sprite1_X<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />move_charac2:<br />&nbsp; &nbsp; lda Sprite2_Y ; load A with Y position<br />&nbsp; &nbsp; sbc speed2_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite2_Y; store back to memory<br />&nbsp; &nbsp; lda Sprite2_Y<br />&nbsp; &nbsp; adc speed2_Down&nbsp; ; add 1 to A. ADC (Add with Carry)((to A register))<br />&nbsp; &nbsp; sta Sprite2_Y<br />&nbsp; &nbsp; lda Sprite2_X<br />&nbsp; &nbsp; sbc speed2_Left<br />&nbsp; &nbsp; sta Sprite2_X<br />&nbsp; &nbsp; lda Sprite2_X<br />&nbsp; &nbsp; adc speed2_Right<br />&nbsp; &nbsp; sta Sprite2_X<br />&nbsp; &nbsp; rts<br /><br />update_speed1:<br />&nbsp; &nbsp; ldx speed1_Up_To_Be<br />&nbsp; &nbsp; stx speed1_Up<br />&nbsp; &nbsp; ldx speed1_Down_To_Be<br />&nbsp; &nbsp; stx speed1_Down<br />&nbsp; &nbsp; ldx speed1_Left_To_Be<br />&nbsp; &nbsp; stx speed1_Left<br />&nbsp; &nbsp; ldx speed1_Right_To_Be<br />&nbsp; &nbsp; stx speed1_Right<br />&nbsp; &nbsp; ldx #0;<br />&nbsp; &nbsp; ldy #0;<br />&nbsp; &nbsp; rts<br /><br />disp_Sprites_DMA:<br />&nbsp; &nbsp; lda #3<br />&nbsp; &nbsp; sta $4014<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; rts<br />;; ----------------------------------------------------<br /><br />strobe_keypad1:<br />&nbsp; &nbsp; lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp; sta $4016&nbsp; ; lines<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp;; setup/strobe the<br />&nbsp; &nbsp; sta $4016&nbsp; ; keypad.<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; rts<br /><br />strobe_keypad2:<br />&nbsp; &nbsp; lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp; sta $4017&nbsp; ; lines<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp;; setup/strobe the<br />&nbsp; &nbsp; sta $4017&nbsp; ; keypad.$<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; rts<br /><br /><br />palette: <br />&nbsp; &nbsp; ; this upper line is used for the background palette<br />&nbsp; &nbsp; .db $0F,$2D,$20,$20,$0F,$3D,$3D,$3D,$0F,$3D,$3D,$3D,$0F,$3D,$3D,$3D<br />&nbsp; &nbsp; ; this lower line is used for the sprites palette<br />&nbsp; &nbsp; .db $0F,$08,$07,$06,$0F,$01,$03,$02,$0F,$3A,$3A,$3A,$0F,$3A,$3A,$3A<br /><br /><br />;; -------------------------------------------------------------------------<br />;; THE FOLLOWING LOOPS ENABLE TO DISPLAY THE BACKGROUND <br />;; -------------------------------------------------------------------------<br />dispBackground: <br />&nbsp; &nbsp; lda #$20<br />&nbsp; &nbsp; sta $2006 ; give $2006 both parts of address $2020.<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta $2006<br /><br />&nbsp; &nbsp; ;; This displays the background using ourMap, defined ways below<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; loadNames1:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap1, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames1; if not all 64 done, loop and do some more<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; loadNames2:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap2, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames2; if not all 64 done, loop and do some more<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; loadNames3:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap2, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames3; if not all 64 done, loop and do some more<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; loadNames4:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap2, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames4; if not all 64 done, loop and do some more<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; loadNames5:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap2, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames5; if not all 64 done, loop and do some more<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; loadNames6:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap2, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames6; if not all 64 done, loop and do some more<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #$00<br />&nbsp; &nbsp; loadNames7:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ourMap3, X ; load A with a byte from address (ourMap + X)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #128 ; map in previous section 64 bytes long<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadNames7; if not all 64 done, loop and do some more<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; lda #%00011110 ; enable sprites, enable background<br />&nbsp; &nbsp; sta $2001<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; rts<br />;; -------------------------------------------------------------------------<br /><br /><br />ourMap1: <br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 30,26,15,39,19,32,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,26,15,39,19,32,0,7,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />ourMap2: <br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />ourMap3: <br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4<br /><br /><br />&nbsp; &nbsp; .bank 2<br />&nbsp; &nbsp; .org $0000<br />&nbsp; &nbsp; .incbin &quot;bkg.nes&quot;<br />&nbsp; &nbsp; .incbin &quot;sprites.nes&quot;<br />;;--- END OF CODE FILE ---;<br /></div>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> The background</span><br />
		
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=849">bkg.nes</a> [4 KiB]
			</span><br />
			<span class="gensmall">Downloaded 195 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> The sprites</span><br />
		
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=848">sprites.nes</a> [4 KiB]
			</span><br />
			<span class="gensmall">Downloaded 186 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Sep 12, 2013 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, with this cmp line, the motorbike has a strange diagonal direction when I press the left and right keys (that should not happen at all) but works perfectly fine with up and down keys (which confuses me a lot). And without the cmp (just jumping to &quot;modulo&quot;) everything works perfectly fine as well. </div><br />Sounds like you don't understand the carry flag. When you add (adc) or subtract (sbc) on the 6502, the state of the carry flag is taken into account to possibly add or subtract 1 more than the actual value given.<br /><br />To get the true value that will end up in the accumulator (A) for adc, the equation is A+value+C. (where C is the value of the carry flag.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$00<br />clc;Clears the carry<br />adc #$00<br />;A = #$00<br />A+value+C<br />#$00+#$00+#0 (because we cleared the carry flag) = #$00<br /></div><br />Now see this example where we set the carry instead, but change nothing else:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$00<br />sec;Sets the carry<br />adc #$00<br />;A = #$01<br />A+value+C<br />#$00+#$00+#1 (because we set the carry flag) = #$01<br /></div><br /><br />For SBC, it subtracts the OPPOSITE of the carry. So if the carry is 1 (set), sbc will subtract the value, and if it is 0 (clear) it will subtract the value and then it will subtract 1.<br /><br />Additionally, the carry is set or cleared after ADC and SBC depending on the result of the instruction. (Other instructions affect it as well, like cmp.) Here's a post that explains the carry in very great detail: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=112830#p112830">viewtopic.php?p=112830#p112830</a><!-- l --><br />Edit: Wait... that may not be the best post on the subject since it covers mainly 16 bit stuff. I swear I've written a good general one, and will look for it.<br /><br />So when you have this code here: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">move_charac1:<br />&nbsp; &nbsp; lda Sprite1_Y ; load A with Y position<br /><br /><br />;What is the state of the carry before the following sbc? <br />;Because you don't set it, it's whatever the CPU last had it as. Effectively unknown!<br />;So you could be subtracting speed1_Up if it was last set, or speed1_Up and then another 1 if it was last clear!<br />;To remove this ambiguity, just use sec before an SBC when you don't know the<br />;state of the carry<br /><br /><br />&nbsp; &nbsp; sbc speed1_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite1_Y; store back to memory<br /></div><br /><br />Like so:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">move_charac1:<br />&nbsp; &nbsp; lda Sprite1_Y ; load A with Y position<br />&nbsp; &nbsp; sec<br />&nbsp; &nbsp; sbc speed1_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite1_Y; store back to memory<br /></div><br /><br />You should read this post right here for great detail: <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=112830#p112830">viewtopic.php?p=112830#p112830</a><!-- l --> <br /><br />Edit: Wait... that may not be the best post on the subject since it covers mainly 16 bit stuff. I swear I've written a good general one, and will look for it.<br /><br />But the general rule is to set the carry before subtractions and clear it before additions if you don't know the state of it.<br /><br />Interesting tidbit: You say everything works fine without the cmp. Cmp affects the carry flag! So check this out:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; cmp #8<br />&nbsp; &nbsp; beq modulo<br />&nbsp; &nbsp; jmp infinite<br /></div><br />In the case A = 8, we jump to modulo. This means the carry is guaranteed set when we get to modulo. (cmp would set the carry in that case)<br />Nothing in update_speed1 affects it, so it's still set. Nothing in the rest of modulo affects it. So we jmp to infinite with it still set.<br /><br />In the case that A &lt; 8, we jump to infinite. (if A &lt; 8 when it hits the cmp, the carry would be cleared by cmp #8). So we jmp to infinite with it clear.<br /><br />Nothing in disp_Sprites_DMA affects it... <br /><br />Then we get to here: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">move_charac1:<br />&nbsp; &nbsp; lda Sprite1_Y ; load A with Y position<br />&nbsp; &nbsp; sbc speed1_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite1_Y; store back to memory<br /></div><br /><br />Because nothing has changed the carry between that cmp #8 and that code, when A = 8, we subtract speed1_Up, and when A &lt; 8 (i.e. most of the time), it's subtracting speed1_Up and another one.<br /><br />To fix, put a sec before that sbc. <br /><br />Put a sec before all your sbcs unless you're doing 16bit math or really know what you're doing.<br />Put a clc before all your adcs unless you're doing 16bith math or really know what you're doing.<br /><br />And I'll plug it a third time  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> : <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=112830#p112830">viewtopic.php?p=112830#p112830</a><!-- l --><br />Edit: Wait... that may not be the best post on the subject since it covers mainly 16 bit stuff. I swear I've written a good general one, and will look for it.<br />Edit2: Yep... sadly that's all I got. It should still explain things, if not ask some questions!<br /><br />Read that for full understanding.<br /><br />PS: I could be totally wrong about this being the cause of the problem, but your lack of sec/clc before additions and subtractions is definitely a problem on its own. If there's still a problem after you fix that, we'll solve it then.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>turboninja</b> [ Thu Sep 19, 2013 7:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok ! Thank you so much ! I had time to realize my mistake reading some code that I found here and there. Indeed, I was lacking of clc and did not realize how important it was (this game is actually my first experience with assembly).<br /><br />Anyway, T H A N K  Y O U !

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>turboninja</b> [ Fri Oct 04, 2013 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello everybody,<br /><br />I am here because I have another problem with my code <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> hope I will be able to propose a clear release someday for the people who (just as me) want to play this Tron game on their old NES.<br /><br />Here is where I get stuck : switching from NES ROM to NES RAM. I definitely need to keep track of the tiles that have been visited and the other ones. So, I just tried to switch from NES ROM to NES RAM (to start with). But I am getting a lot of graphic mistakes (the graphical output has a totally unpredictable behaviour), though we can still play &quot;decently&quot;.<br /><br />Changing x in the line : (in the load_to_ppu routine)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx #32&nbsp; ; number of 256-byte chunks to load<br />&nbsp; &nbsp; &nbsp;ldy #0<br /></div><br /><br />definitely modifies the behaviour of the game once compiled (for 32, we have decent sprites, for 16, something that looks like the title screen I had before trying to switch). I guess there must be some limitations I am not respecting, but I cannot figure out which one ! Some help would be more than welcome ! The whole code is below<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ;;--- CODE START ---;;<br />&nbsp; &nbsp; .inesprg 1<br />&nbsp; &nbsp; .inesmap 0<br />&nbsp; &nbsp; .inesmir 1<br />&nbsp; &nbsp; .ineschr 0<br /><br />&nbsp; &nbsp; .bank 1<br /><br />&nbsp; &nbsp; .org $FFFA<br />&nbsp; &nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no VBlank<br />&nbsp; &nbsp; .dw Start&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever<br />&nbsp; &nbsp; .bank 0<br />&nbsp; &nbsp; .org $0000<br />&nbsp; &nbsp; <br />reset:<br />&nbsp; &nbsp; sei&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; &nbsp; ldx #$40<br />&nbsp; &nbsp; stx $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; &nbsp; ldx #$FF<br />&nbsp; &nbsp; txs&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; &nbsp; stx $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; &nbsp; stx $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; &nbsp; stx $4010&nbsp; &nbsp; ; disable DMC IRQs<br /><br />nmi:<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp; &nbsp; #$00<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp; &nbsp; $2003&nbsp; &nbsp; &nbsp; &nbsp; ; Set the low byte (00) of the ram address<br />&nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp; &nbsp; #$02<br />&nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp; &nbsp; $4014&nbsp; &nbsp; &nbsp; &nbsp; ; Set the high byte (02) of the RAM address,<br />&nbsp; &nbsp; <br />; actually, these variables could be stored in only one byte<br />; maybe a little bit less...<br /><br />PPUMASK = $2001<br />PPUADDR = $2006<br />PPUDATA = $2007<br /><br />speed1_Up:&nbsp; &nbsp;.db 0<br />speed1_Left:&nbsp; &nbsp;.db 0<br />speed1_Down:&nbsp; &nbsp;.db 0<br />speed1_Right:&nbsp; &nbsp;.db 0<br />speed2_Up:&nbsp; &nbsp;.db 0<br />speed2_Down:&nbsp; &nbsp;.db 0<br />speed2_Left:&nbsp; &nbsp;.db 0<br />speed2_Right:&nbsp; &nbsp;.db 0<br />; actually, these variables could be stored in only one byte<br />speed1_Up_To_Be:&nbsp; &nbsp;.db 0<br />speed1_Down_To_Be:&nbsp; &nbsp;.db 0<br />speed1_Left_To_Be:&nbsp; &nbsp;.db 0<br />speed1_Right_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Up_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Down_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Left_To_Be:&nbsp; &nbsp;.db 0<br />speed2_Right_To_Be:&nbsp; &nbsp;.db 0<br /><br />Sprite1_T_To_Be:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite2_T_To_Be:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br /><br />edge_horiz1_pos:&nbsp; &nbsp; &nbsp;.db 0<br />edge_vert1_pos:&nbsp; &nbsp; &nbsp;.db 0<br />edge_horiz2_pos:&nbsp; &nbsp; .db 0<br />edge_vert2_pos:&nbsp; &nbsp; &nbsp;.db 0<br /><br />loop_count: .db 0<br /><br />addrLO: .db 0&nbsp; ; make &quot;variable&quot;s for our indirect addressing<br />addrHI: .db 0<br /><br />vidlow: .db 0<br />vidhigh: .db 0<br /><br />src: .db 0<br /><br />&nbsp; &nbsp; .org $0200 ; OAM Copy location $0300<br />;; THE FIRST TWO SPRITES REPRESENT THE MOTORBIKES<br />Sprite1_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Y value<br />Sprite1_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite1_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite1_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's X value<br />Sprite2_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; same thing, same order for sprite #2<br />Sprite2_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; note that I numbered 1 2 ...<br />Sprite2_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; some people may actually prefer starting<br />Sprite2_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; the count at 0, but it doesn't really matter.<br />;; THESE SPRITES WILL REPRESENT THE SCORE OF EACH PLAYER<br />;; BETWEEN 0 AND 9<br />Sprite3_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; <br />Sprite3_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; This will be the score of P1<br />Sprite3_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; <br />Sprite3_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; <br />Sprite4_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;;<br />Sprite4_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; This will be the score of P2<br />Sprite4_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;;<br />Sprite4_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;;<br /><br />&nbsp; &nbsp; .org $8000&nbsp; ; code starts at $8000 or $C000<br />Start:<br />&nbsp; &nbsp; cld ; supposedly useless but, let's keep it for now<br /><br />&nbsp; &nbsp; ldx #$00&nbsp; &nbsp; ; clear X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; start of palette loading code<br />&nbsp; &nbsp; lda #$3F&nbsp; &nbsp; ; have $2006 tell<br />&nbsp; &nbsp; sta $2006&nbsp; &nbsp;; $2007 to start<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp; ; at $3F00 (palette).<br />&nbsp; &nbsp; sta $2006&nbsp; &nbsp; <br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr init_pal<br /><br />&nbsp; &nbsp; jsr load_to_ppu<br />&nbsp; &nbsp; jsr turn_on_PPU<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr init_background&nbsp; ; calls the routine to load the backgrounds<br />&nbsp; &nbsp; jsr init_players_positions<br />&nbsp; &nbsp; jsr init_scores<br />&nbsp; &nbsp; jsr init_sound<br />&nbsp; &nbsp; jsr title_screen ; loads the title_screen<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; <br />;; THE MAIN LOOP<br />infinite:&nbsp; ; a label to start our infinite loop<br /><br />&nbsp; &nbsp; jsr disp_Sprites_DMA<br />&nbsp; &nbsp; jsr strobe_keypad1<br />&nbsp; &nbsp; jsr update_keypad1&nbsp; &nbsp;<br />&nbsp; &nbsp; jsr move_charac1<br /><br />&nbsp; &nbsp; inc loop_count ; this variable will enable to distribute operations over different steps of the loop_count<br /><br />&nbsp; &nbsp; lda loop_count<br />&nbsp; &nbsp; cmp #2<br />&nbsp; &nbsp; beq modulo2<br /><br />&nbsp; &nbsp; lda loop_count<br />&nbsp; &nbsp; cmp #4<br />&nbsp; &nbsp; beq modulo4<br /><br />&nbsp; &nbsp; lda loop_count<br />&nbsp; &nbsp; cmp #8<br />&nbsp; &nbsp; beq modulo8<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jmp infinite<br /><br />modulo8:<br />&nbsp; &nbsp; clc ;; THIS THING IS FUCKING MANDATORY AFTER A CMP<br />&nbsp; &nbsp; ;; OTHERWISE, ODD EFFECTS WILL APPEAR<br />&nbsp; &nbsp; jsr update_speed1<br />&nbsp; &nbsp; ldx #0<br />&nbsp; &nbsp; stx loop_count<br />&nbsp; &nbsp; jmp infinite<br />&nbsp; &nbsp; <br />modulo4:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; ldy Sprite1_Y<br />&nbsp; &nbsp; cpy #24<br />&nbsp; &nbsp; bne south_test<br />&nbsp; &nbsp; jsr player1_loose<br />south_test:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; cpy #224<br />&nbsp; &nbsp; bne west_test<br />&nbsp; &nbsp; jsr player1_loose<br />west_test:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; ldy Sprite1_X<br />&nbsp; &nbsp; cpy #248<br />&nbsp; &nbsp; bne modulo4rts<br />&nbsp; &nbsp; jsr player1_loose<br />modulo4rts:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; jmp infinite<br />&nbsp; &nbsp; <br />modulo2:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; ldy Sprite1_X<br />&nbsp; &nbsp; cpy #2<br />&nbsp; &nbsp; bne modulo2rts<br />&nbsp; &nbsp; jsr player1_loose<br />modulo2rts:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; jmp infinite<br />&nbsp; &nbsp; <br />update_keypad1:<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Abutton Status ; note that whatever we ain't interested&nbsp; &nbsp;<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Bbutton Status ; in we just load so it'll go to the next one.<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Select button status<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Start button status<br />&nbsp; &nbsp; lda $4016&nbsp; ; load UP button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp; ; AND status with #1<br />&nbsp; &nbsp; bne UPKEYdown&nbsp; ; for some reason (not gonna reveal yet), need to use NotEquals<br />&nbsp; &nbsp; ;with ANDs. So it'll jump (branch) if key was down.<br />&nbsp; &nbsp; lda $4016&nbsp; ; load DOWN button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp; bne DOWNKEYdown<br />&nbsp; &nbsp; lda $4016&nbsp; ; load LEFT button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp; bne LEFTKEYdown<br />&nbsp; &nbsp; lda $4016&nbsp; ; load RIGHT button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp; bne RIGHTKEYdown<br />&nbsp; &nbsp; ;ldy $0<br />&nbsp; &nbsp; jmp NOTHINGdown2&nbsp; ; if nothing was down, we just jump (no check for conditions)<br />&nbsp; &nbsp; ; down past the rest of everything.<br />&nbsp; &nbsp; UPKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Down;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown2&nbsp; ; jump over the rest of the handling code<br />&nbsp; &nbsp; DOWNKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Up;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #2<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown ; jump over the rest of handling code.<br />&nbsp; &nbsp; NOTHINGdown2:<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown<br />&nbsp; &nbsp; LEFTKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Right;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #3<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp NOTHINGdown<br />&nbsp; &nbsp; RIGHTKEYdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Left;_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda speed1_Left_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; and #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne NOTHINGdown<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Sprite1_T_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; &nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; NOTHINGdown:<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />move_charac1:<br />&nbsp; &nbsp; lda Sprite1_Y ; load A with Y position<br />&nbsp; &nbsp; sbc speed1_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite1_Y; store back to memory<br />&nbsp; &nbsp; lda Sprite1_Y<br />&nbsp; &nbsp; adc speed1_Down&nbsp; ; add 1 to A. ADC (Add with Carry)((to A register))<br />&nbsp; &nbsp; sta Sprite1_Y<br />&nbsp; &nbsp; lda Sprite1_X<br />&nbsp; &nbsp; sbc speed1_Left<br />&nbsp; &nbsp; sta Sprite1_X<br />&nbsp; &nbsp; lda Sprite1_X<br />&nbsp; &nbsp; adc speed1_Right<br />&nbsp; &nbsp; sta Sprite1_X<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />move_charac2:<br />&nbsp; &nbsp; lda Sprite2_Y ; load A with Y position<br />&nbsp; &nbsp; sbc speed2_Up&nbsp; ; subtract 1 from A. Only can do math on A register. SBC (Subtract with Borrow)<br />&nbsp; &nbsp; sta Sprite2_Y; store back to memory<br />&nbsp; &nbsp; lda Sprite2_Y<br />&nbsp; &nbsp; adc speed2_Down&nbsp; ; add 1 to A. ADC (Add with Carry)((to A register))<br />&nbsp; &nbsp; sta Sprite2_Y<br />&nbsp; &nbsp; lda Sprite2_X<br />&nbsp; &nbsp; sbc speed2_Left<br />&nbsp; &nbsp; sta Sprite2_X<br />&nbsp; &nbsp; lda Sprite2_X<br />&nbsp; &nbsp; adc speed2_Right<br />&nbsp; &nbsp; sta Sprite2_X<br />&nbsp; &nbsp; rts<br /><br />player1_loose:&nbsp; ;; the following could (and will) be improved, a loop would be cleaner !<br />&nbsp; &nbsp; jsr make_sound<br />&nbsp; &nbsp; ldx #16<br />&nbsp; &nbsp; stx Sprite1_T<br />&nbsp; &nbsp; ldy #16&nbsp; &nbsp; <br />loopAnim:<br />&nbsp; &nbsp; jsr disp_Sprites_DMA<br />&nbsp; &nbsp; inc Sprite1_T<br />&nbsp; &nbsp; jsr disp_Sprites_DMA<br />&nbsp; &nbsp; nop<br />&nbsp; &nbsp; dey<br />&nbsp; &nbsp; bne loopAnim&nbsp; <br />&nbsp; &nbsp; jsr init_players_positions<br />&nbsp; &nbsp; inc Sprite4_T ;Recall that Sprite4_T is also the score of P2<br />&nbsp; &nbsp; ldy #0<br />&nbsp; &nbsp; sty loop_count<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />player2_loose:<br />&nbsp; &nbsp; jsr init_players_positions<br />&nbsp; &nbsp; inc Sprite3_T<br />&nbsp; &nbsp; ldy #0<br />&nbsp; &nbsp; sty loop_count<br />&nbsp; &nbsp; rts<br /><br />update_speed1:<br />&nbsp; &nbsp; ldx speed1_Up_To_Be<br />&nbsp; &nbsp; stx speed1_Up<br />&nbsp; &nbsp; ldx speed1_Down_To_Be<br />&nbsp; &nbsp; stx speed1_Down<br />&nbsp; &nbsp; ldx speed1_Left_To_Be<br />&nbsp; &nbsp; stx speed1_Left<br />&nbsp; &nbsp; ldx speed1_Right_To_Be<br />&nbsp; &nbsp; stx speed1_Right<br />&nbsp; &nbsp; ldx Sprite1_T_To_Be<br />&nbsp; &nbsp; stx Sprite1_T<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />update_speed2:<br />&nbsp; &nbsp; ldx speed2_Up_To_Be<br />&nbsp; &nbsp; stx speed2_Up<br />&nbsp; &nbsp; ldx speed2_Down_To_Be<br />&nbsp; &nbsp; stx speed2_Down<br />&nbsp; &nbsp; ldx speed2_Left_To_Be<br />&nbsp; &nbsp; stx speed2_Left<br />&nbsp; &nbsp; ldx speed2_Right_To_Be<br />&nbsp; &nbsp; stx speed2_Right<br />&nbsp; &nbsp; ldx Sprite2_T_To_Be<br />&nbsp; &nbsp; stx Sprite2_T<br />&nbsp; &nbsp; rts<br /><br />disp_Sprites_DMA: ;; Displays all the sprites using Direct Memory Access. So cool<br />&nbsp; &nbsp; waitblank:<br />&nbsp; &nbsp; &nbsp; &nbsp; bit $2002&nbsp; ; these 3 lines wait for VBlank, this loop will actually miss VBlank<br />&nbsp; &nbsp; &nbsp; &nbsp; bpl waitblank ; alot, in a later Day, I'll give a better way.<br />&nbsp; &nbsp; lda #2<br />&nbsp; &nbsp; sta $4014<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; rts<br /><br />strobe_keypad1:<br />&nbsp; &nbsp; lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp; sta $4016&nbsp; ; lines<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp;; setup/strobe the<br />&nbsp; &nbsp; sta $4016&nbsp; ; keypad.<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; rts<br /><br />strobe_keypad2:<br />&nbsp; &nbsp; lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp; sta $4017&nbsp; ; lines<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp;; setup/strobe the<br />&nbsp; &nbsp; sta $4017&nbsp; ; keypad.$<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; rts<br /><br />init_pal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this is a freaky loop<br />&nbsp; &nbsp; lda palette, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp; sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp; cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp; bne init_pal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br />&nbsp; &nbsp; rts<br /><br />palette: <br />&nbsp; &nbsp; ; this upper line is used for the background palette<br />&nbsp; &nbsp; .db $0F,$2D,$16,$2C,$0F,$2D,$16,$2C,$0F,$2D,$16,$2C,$0F,$2D,$16,$2C<br />&nbsp; &nbsp; ; this lower line is used for the sprites palette<br />&nbsp; &nbsp; .db $0F,$08,$07,$06,$0F,$01,$03,$02,$0F,$3A,$3A,$3A,$0F,$3A,$3A,$3A<br /><br /><br />title_screen:<br />&nbsp; &nbsp; jsr turn_off_PPU<br />&nbsp; &nbsp; lda #255 ; These lines allow to scroll the background<br />&nbsp; &nbsp; sta $2005 ; X POS first<br />&nbsp; &nbsp; lda #0 ; Y POS <br />&nbsp; &nbsp; sta $2005 ; store it at the same address<br />&nbsp; &nbsp; jsr turn_on_PPU<br />title_screen_loop:&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr strobe_keypad1<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Abutton Status ; note that whatever we ain't interested&nbsp; &nbsp;<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Bbutton Status ; in we just load so it'll go to the next one.<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Select button status<br />&nbsp; &nbsp; lda $4016&nbsp; ; load Start button status<br />&nbsp; &nbsp; and #1&nbsp; &nbsp; &nbsp; ; AND status with #1<br />&nbsp; &nbsp; bne jump_to_rts_title_screen; for some reason (not gonna reveal yet), need to use NotEquals<br />&nbsp; &nbsp; jmp title_screen_loop<br />&nbsp; &nbsp; <br />jump_to_rts_title_screen:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; jsr turn_off_PPU<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta $2005 ; This address regards scrolling<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta $2005 <br />&nbsp; &nbsp; jsr turn_on_PPU<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />;; THE SOUND PART<br />init_sound:<br />&nbsp; &nbsp; lda #$FF&nbsp; &nbsp;; typical<br />&nbsp; &nbsp; sta $4000&nbsp; ; write<br />&nbsp; &nbsp; lda #%11011011&nbsp; ; % means binary number, remember the '#' for immediate values.<br />&nbsp; &nbsp; sta $4001&nbsp; ; immediate means &quot;not an address, just a number&quot;.<br />&nbsp; &nbsp; rts<br />;; THIS COULD BE SOMEHOW IMPROVED, BUT IT IS NOT THE PRIORITY<br />make_sound: <br />&nbsp; &nbsp; lda #$A5<br />&nbsp; &nbsp; sta $4002<br />&nbsp; &nbsp; lda #$AB<br />&nbsp; &nbsp; sta $4003<br />&nbsp; &nbsp; lda #%00000001<br />&nbsp; &nbsp; sta $4015<br />&nbsp; &nbsp; rts<br /><br />&nbsp; &nbsp; <br />init_players_positions:<br />&nbsp; &nbsp; clc ; once again, removing it would cause nasty bugs<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta loop_count<br />&nbsp; &nbsp; sta Sprite2_S;<br />&nbsp; &nbsp; sta Sprite1_T;<br />&nbsp; &nbsp; sta Sprite1_T_To_Be<br />&nbsp; &nbsp; lda #1;<br />&nbsp; &nbsp; sta Sprite2_T<br />&nbsp; &nbsp; sta Sprite1_S;<br />&nbsp; &nbsp; lda #124;<br />&nbsp; &nbsp; sta Sprite1_X;<br />&nbsp; &nbsp; sta Sprite2_X<br />&nbsp; &nbsp; lda #164<br />&nbsp; &nbsp; sta Sprite1_Y<br />&nbsp; &nbsp; lda #124<br />&nbsp; &nbsp; sta Sprite2_Y<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta speed1_Down;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed1_Right;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed1_Left;<br />&nbsp; &nbsp; sta speed1_Up;<br />&nbsp; &nbsp; sta speed2_Down;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed2_Right;&nbsp; &nbsp; <br />&nbsp; &nbsp; sta speed2_Left;<br />&nbsp; &nbsp; sta speed2_Up;<br />&nbsp; &nbsp; sta speed1_Down_To_Be<br />&nbsp; &nbsp; sta speed1_Right_To_Be<br />&nbsp; &nbsp; sta speed1_Left_To_Be<br />&nbsp; &nbsp; sta speed2_Up_To_Be<br />&nbsp; &nbsp; sta speed2_Right_To_Be<br />&nbsp; &nbsp; sta speed2_Left_To_Be<br />&nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; sta speed1_Up_To_Be<br />&nbsp; &nbsp; sta speed2_Down_To_Be<br />&nbsp; &nbsp; rts <br />&nbsp; &nbsp; <br />init_scores:<br />&nbsp; &nbsp; lda #6<br />&nbsp; &nbsp; sta Sprite3_T<br />&nbsp; &nbsp; sta Sprite4_T<br />&nbsp; &nbsp; lda #0;<br />&nbsp; &nbsp; sta Sprite3_S<br />&nbsp; &nbsp; sta Sprite4_S<br />&nbsp; &nbsp; lda #15<br />&nbsp; &nbsp; sta Sprite3_Y<br />&nbsp; &nbsp; sta Sprite4_Y<br />&nbsp; &nbsp; lda #72<br />&nbsp; &nbsp; sta Sprite3_X<br />&nbsp; &nbsp; lda #238<br />&nbsp; &nbsp; sta Sprite4_X<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />init_background: ; uses indirect addressing<br />&nbsp; &nbsp; ldx #0<br />&nbsp; &nbsp; lda #$20&nbsp; ; set the destination address in PPU memory<br />&nbsp; &nbsp; sta $2006&nbsp; ; should be $2000<br />&nbsp; &nbsp; stx $2006<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #low(background)&nbsp; &nbsp;; put the high and low bytes of the address &quot;backg&quot;<br />&nbsp; &nbsp; sta addrLO&nbsp; &nbsp; &nbsp; &nbsp; ; into the variables so we can use indirect addressing.<br />&nbsp; &nbsp; lda #high(background)<br />&nbsp; &nbsp; sta addrHI<br />&nbsp; &nbsp; ldx #16&nbsp; ; number of 256-byte chunks to load<br />&nbsp; &nbsp; ldy #0<br />loopIndirectAddressing:<br />&nbsp; &nbsp; lda &#91;addrLO&#93;,y<br />&nbsp; &nbsp; sta $2007&nbsp; &nbsp; &nbsp;; load 256 bytes<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; bne loopIndirectAddressing<br />;--------------------<br />&nbsp; &nbsp; inc addrHI&nbsp; ; increment high byte of address backg to next 256 byte chunk<br />&nbsp; &nbsp; dex&nbsp; &nbsp; &nbsp; &nbsp; ; one chunk done so X = X - 1.<br />&nbsp; &nbsp; bne loopIndirectAddressing&nbsp; &nbsp;; if X isn't zero, do again<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; rts<br /><br />;; OKAY, this is a little bit scarying, but it is ways better than using the strange<br />;; programs proposed to create the .bin files..<br /><br />load_to_ppu:<br />&nbsp; &nbsp; ldy #0&nbsp; &nbsp; &nbsp; &nbsp;;; starting index into the first page<br />&nbsp; &nbsp; sty PPUMASK&nbsp; ;; turn off rendering just in case<br />&nbsp; &nbsp; sty PPUADDR&nbsp; ;; load the destination address into the PPU<br />&nbsp; &nbsp; sty PPUADDR<br /><br />&nbsp; &nbsp;lda #0&nbsp; ; set the destination address in PPU memory<br />&nbsp; &nbsp; &nbsp;sta $2006&nbsp; ; should be $0000<br />&nbsp; &nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp; &nbsp;lda #low(ppumem)&nbsp; &nbsp;; put the high and low bytes of the address ppumem<br />&nbsp; &nbsp; &nbsp;sta vidlow&nbsp; &nbsp; &nbsp; &nbsp; ; into the variables so we can use indirect addressing.<br />&nbsp; &nbsp; &nbsp;lda #high(ppumem)<br />&nbsp; &nbsp; &nbsp;sta vidhigh<br /><br />&nbsp; &nbsp;ldx #32&nbsp; ; number of 256-byte chunks to load<br />&nbsp; &nbsp; &nbsp;ldy #0<br />ppuloop:<br />&nbsp; &nbsp; &nbsp;lda &#91;vidlow&#93;,y<br />&nbsp; &nbsp; &nbsp;sta $2007&nbsp; &nbsp; &nbsp;; load 256 bytes<br />&nbsp; &nbsp; &nbsp;iny<br />&nbsp; &nbsp; &nbsp;bne ppuloop<br />&nbsp; &nbsp; &nbsp;inc vidhigh&nbsp; ; increment high byte of address vidhigh to next 256 byte chunk<br />&nbsp; &nbsp; &nbsp;dex&nbsp; &nbsp; &nbsp; &nbsp; ; one chunk done so X = X - 1.<br />&nbsp; &nbsp; &nbsp;bne ppuloop&nbsp; &nbsp;; if X isn't zero, do again<br />&nbsp; &nbsp;rts<br /><br />turn_on_PPU:<br />&nbsp; &nbsp; lda #%00001000&nbsp; ;<br />&nbsp; &nbsp; sta $2000&nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; lda #%00011110&nbsp; ; Our typical PPU Setup code.<br />&nbsp; &nbsp; sta $2001&nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; rts<br /><br />turn_off_PPU:<br />&nbsp; &nbsp; lda #%00000000&nbsp; ;<br />&nbsp; &nbsp; sta $2000&nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; lda #%00000000&nbsp; ; Our typical PPU Setup code.<br />&nbsp; &nbsp; sta $2001&nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; rts<br /><br />title:<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,42,43,44,47,48,55,56,57,64,65,66,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,45,0,49,50,63,0,62,67,68,69,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,45,0,51,54,58,0,62,70,71,72,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,46,0,52,53,59,60,61,73,74,75,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,76,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,84,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,78,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,80,81,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,88,89,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,30,32,19,33,33,0,33,34,15,32,34,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; <br />background:&nbsp; &nbsp; <br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,16,39,0,24,35,26,23,19,28,0,32,19,36,19,26,26,19,0,0,0,0,0,0,0,7,5,6,8,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 30,26,15,39,19,32,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,30,26,15,39,19,32,0,7,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2&nbsp; &nbsp; <br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2&nbsp; &nbsp; <br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2<br />&nbsp; &nbsp; .db 0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />&nbsp; &nbsp; .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br /><br />ppumem: .incbin &quot;bkg.nes&quot;<br />my_sprites: .incbin &quot;sprites.nes&quot;<br /><br /><br /></div>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=869">tron_game.nes</a> [16.02 KiB]
			</span><br />
			<span class="gensmall">Downloaded 180 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=868">sprites.nes</a> [4 KiB]
			</span><br />
			<span class="gensmall">Downloaded 171 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=867">bkg.nes</a> [4 KiB]
			</span><br />
			<span class="gensmall">Downloaded 178 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Oct 04, 2013 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's some things that I immediately see:<br /><br />1- Don't leave the old stubs (from &quot;reset&quot; through &quot;nmi&quot;) in your code). They're misleading (and currently horrifically wrong)<br />2- You need to wait two vblanks before you start writing to any PPU register: see <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_power_up_state">http://wiki.nesdev.com/w/index.php/PPU_power_up_state</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>turboninja</b> [ Fri Oct 04, 2013 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the quick answer ! I just tried and unfortunately this does not solve the problem <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>turboninja</b> [ Sun Oct 06, 2013 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, my bad. It actually works. I had forgotten to turn off the rendering everywhere when I first did it. However, my sprites are not displayed any more now... Instead, I just have big squares. Help please <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Oct 06, 2013 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help ! can anyone see the mistake ?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Try running it inside an emulator with a debugger, such as FCEUX (windows build only), NO$NES, or Nintendulator. They should all let you look at the CHR-RAM and sprite memory and trace back why you're seeing squares.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>