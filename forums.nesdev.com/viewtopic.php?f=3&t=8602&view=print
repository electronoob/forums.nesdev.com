<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Basic DSP and NES APU emulation.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Basic DSP and NES APU emulation.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8602">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8602</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Thu Feb 09, 2012 3:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Basic DSP and NES APU emulation.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Moved from <a href="http://nesdev.com/bbs/viewtopic.php?p=89745#89745" class="postlink">here</a>.
<br />
<br /><div class="quotetitle">James wrote:</div><div class="quotecontent"><div class="quotetitle">neet wrote:</div><div class="quotecontent">For the sound: as I'm very familiar with DSP it's of course generated at the original sample rate and resampled correctly.</div><br />Care to share?  I've casually looked into this in the past and am interesting in learning how to do it properly/the DSP way.<br /><br />Thanks,<br />James</div>
<br />
<br />Ok. Here's some fundamental DSP knowledge (Part I):
<br />
<br />Well, as far as the NES's APU is concerned, realistic emulation is quite simple but performance hungry.
<br />
<br />All the old sound chips nearly worked the same. As the budget for chip design was't that high during the good old days and the things you could do on an IC were really limited most sound chips are really simple in its inner workings.
<br />
<br />One of the major problems when doing digital audio (and this is what NES APU, YM, SID, Paula do) is aliasing. There's this Nyquist theorem which basically says: Don't use a harmonic higher or equal to half your sample rate. So for e.g. 44.1kHz sample rate, you can go up to 20.05kHz.
<br />
<br />All classic waveforms (like sawtooth, pulse/square and triangle) have lots of overtones/harmonics. These are sine waves at (normally) an integer multiple of the fundamental frequency. These harmonics is the stuff which makes digital audio really hard^^ Every 'hard edge' (i.e. like sawtooth's restart or the 'sides' of a pulse wave) contains lots of harmonics.
<br />So what happens if you use a frequency/harmonic which is greater than half your sample rate? The frequency gets mirrored back. E.g. if you try to play a sine wave at 30kHz using 44.1kHz sample rate it will be mirrored back to ~10kHz (22.05kHz is the mirroring point).
<br />As said earlier the pulse wave contains lots of harmonics at multiples of the fundamental frequency. These harmonics are also mirrored and the audible effect you get from this mirroring is what you would call aliasing.
<br />
<br />There's a technique called bandlimited synthesis which generates the waveforms with just enough harmonics to prevent any mirroring, but this was science fiction back in the 80s. So the chip designers made their lives simple and just clocked their sound chips at e.g. the CPU clock's rate.
<br />The SID runs at about 1MHz, the APU at 1.8MHz. Using souch high sample rates suppresses the aliasing noise and renders it nearly inaudible. (Nyquist frequencies of 500kHz (SID) and 900kHz (APU)).
<br />Thats why those sound chips sounded great even if they were 'cheap' and did all sound generation the naive way.
<br />
<br />Another thing was: Digital to analogue changers.
<br />Nearly all of the chips use the cheap variant of only positive voltage DACs, but an audio wave 'swings' between positive and negative voltage. The cheapest way to get a signal from 'positive-only' to 'swing-between-negative-and-positive' is a so called DC blocker filter.
<br />A DC blocker is nothing but a simple high-pass filter. Such a filter attenuates lower frequencies and lets higher frequency content pass through. DC is just a constant value/voltage ... and a constant value/voltage has a frequency of 0. So any high-pass filter with a cutoff frequency higher than zero will remove the DC. 
<br />The cutoff frequency of a filter is the splitting point for it's pass- and stop-band. The pass-band is the range where frequencies may pass nearly unaltered, the stop-band is the range where frequencies are attenuated.
<br />In case of a high-pass filter the stop-band is below its cutoff, the pass-band above.
<br />Filters have a slope or transition width from stop-band to pass-band, i.e. you don't have a sharp edge which attenuates all frequencies below cutoff by -96dB, but you have an increasing attenuation from the cutoff point downwards (in case of a high pass filter).
<br />
<br />More later, I have to leave the train ... work time^^

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Thu Feb 09, 2012 5:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Filters continued:
<br />There are two kinds of filters FIR and IIR, which means 'finite impulse response' and 'infinite impulse response'.
<br />
<br />The most important differences between those two types are:
<br />FIR always operates on a fixed size of samples
<br />IIR always operates on the current sample and a buffer of its previous state
<br />
<br />IIR filters are faster to calculate but it is harder to get a steep cutoff slope, they also alter the phase of the signal in strange ways.
<br />
<br />FIR filters can model any filter you like, can have super steep cutoff slope, don't alter the phase of the signal (well, a bit, but not as a IIR) but are more performance hungry.
<br />
<br />A simple IIR filter might look like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">output = &#40;buffer += f * &#40;input - buffer&#41;&#41;</div><br />and a 3 tap FIR filter like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">output = f0 * input&#91;x - 2&#93; + f1 * input&#91;x - 1&#93; + f2 * input&#91;x - 0&#93;</div><br />NES APU: The easiest way to emulate the APU is to generate the signal the same way as the original does, i.e. outputting ~1.8M samples per second.<br />As no soundcard I know of can handle such a sampling rate, we need to choose a lower rate and downsample the signal, i.e. reducing the 1.8M samples to<br />e.g. 44.1k samples.<br /><br />If we would now just take every ~40th sample from the APU's output we will get heavy aliasing because we did not reduce the frequency content and so the signal still contains frequencies above out<br />r 22.05kHz nyquist frequency. Now we need another filter type, the low-pass filter. This filter lets frequncies below its cutoff pass and attenuates frequencies above its cutoff.<br /><br />To have a perfectly downsampled signal we would need a low-pass filter that runs on our 1.8MHz rate and has a cutoff of exactly 22.05kHz without any cutoff slope (a transtion width of 0 Hz). This is impossible to design. But we can get close enough^^ <br /><br />My first choice for downsampling is always this: A ringbuffer with a FIR filter. Each time an output sample needs to be generated I query the ringbuffer for how many samples it needs to apply the FIR filter, generate the required amount of APU output samples, put them in the ringbuffer and let the FIR filter do its work.<br /><br />FIR filters might seem a bad choice at first look, because they seem to need more operations to perform its work, but that's not really the case.<br /><br />A filters cutoff slope is measured in dB per octave, which means if the frequency doubles (or halfes) the signal is x dB more attenuated. <br />6dB means double the volume, -6dB means half the volume. An easy (though not official) formula for calculating a factor from dB is:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">vol = pow&#40;2, dB / 6&#41;</div>
<br />The example IIR filter I provided has a slope of 6dB. We can chain more of those blocks to create steeper slopes. Each block adds another 6dB. For sufficient stop-band attenuation we need at least 60dB slope (10 filter blocks). These need to be performed for every of our 40 samples, to generate 1 output sample. So it's 40x10 blocks, with each having 1 sub, 1 mul and 1 add.
<br />Getting the same slope with a FIR filter will take approx. 400 to 500 taps with each having 1 add and 1 mul. FIR filter can also easily be accelerated by using SSE. Adding more taps to a FIR filter means steeper slope, or narrower transition width (transition width is the range between stop and pass band). 
<br />
<br />(I will post some images to visualize this stuff later)
<br />
<br />So, as you can see, FIR filters are the perfect choice for APU downsampling. FIR filters are also used in image processing, e.g. for blur, sharpen, edge detect, ... (aliasing and nyquist also apply to images^^)
<br />
<br />... again: more later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Thu Feb 09, 2012 6:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been talking a lot about FIR filters and its taps, but didn't provide any method to calculate the taps/coefficients for a given sample rate and cutoff frequency. <a href="http://rjeschke.tumblr.com/post/8382596050/fir-filters-in-practice" class="postlink">Here</a> is a blog post of mine which gives some Java code to calculated FIR filter coefficients for all filter types.
<br />
<br />Of course you could just use a so-called box filter for FIR filtering. A box filter is just averaging:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">output = &#40;input&#91;x-2&#93; + input&#91;x-1&#93; + input&#91;x-0&#93;&#41; / 3</div>
<br />But I don't recommend that, here are some images displaying why you should not use 'just-sum-all-40-samples-and-divide-by-40':
<br />
<br />Short explanantion for the images: These are frequency responses. They show a filters attenuation for various frequencies. The vertical lines from left to right are logarithmic frequencies, i.e. the image starts a 0 hz, next lines are 1 to 10 Hz, 20 to 1,000, 2,000 to 10,000, 20,000 to 100,000 and up to 900k.  The horizontal lines are dB values. Top is +12 dB, lines are +6, +0, -6, -12, -24, -48, -96.
<br />
<br />This is the sum-40-and-divide box filter:
<br /><img src="http://dl.dropbox.com/u/11133993/box40.png" alt="Image" />
<br />
<br />and this is a blackman windowed, 801 tap lowpass with a cutoff of 15kHz:
<br /><img src="http://dl.dropbox.com/u/11133993/fir800.png" alt="Image" />
<br />
<br />The first filter has an attenuation of about 3dB at 20kHz, the second has ~40dB. The box filter also does not attenuate higher frequencies very well, so you will get lots of aliasing noise.
<br />
<br />More later (I'll also write about APU emulation later), <strong>and please, feel free to ask questions</strong>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 09, 2012 7:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should understand the concept of <a href="http://en.wikipedia.org/wiki/Sample_and_hold" class="postlink">sample and hold</a> and what a <a href="http://en.wikipedia.org/wiki/Heaviside_step_function" class="postlink">Heaviside step function</a> and <a href="http://en.wikipedia.org/wiki/Step_response" class="postlink">step response</a> look like before reading the rest of this post.
<br />
<br />Got it? Good.
<br />
<br />Each of the five channels in the NES APU outputs a signal consisting of sample-and-hold segments. Each change in the signal level is a scaled, time-shifted step. Therefore, you can represent the APU's output as a sum of such steps, which reduces the problem to band-limiting each step. It turns out that you can render a step at each of 40 or so time-shifts and apply a low-pass filter and decimation to each, producing a bank of step responses. Then sum the step responses corresponding to each step in the APU's output. This is the approach taken by blargg's <a href="http://slack.net/~ant/libs/audio.html#Blip_Buffer" class="postlink">Blip Buffer library</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Thu Feb 09, 2012 8:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yep,thanks I'm familiar with BLIT, BLEP, minBLEP and most other band limited synthesis techniques. I could also implement the APU's sound generation as quasi band limited direct digital synthesis (which is faster than any other band limited approach). But that is (at least for me) no option here.
<br />I want to emulate, not improve the NES sound, and the NES did it non band limited.
<br />Nevertheless I will have a look at blargg's library. Didn't know such thing existed and I'm always curious about new synthesis stuff <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 09, 2012 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neet wrote:</div><div class="quotecontent">I want to emulate, not improve the NES sound, and the NES did it non band limited.</div>
<br />I was under the impression that the RF block in the original Famicom and the NES did some low-pass filtering when modulating audio into a TV signal. When you filter audio using Blip Buffer or any other BLEP library, you're just emulating the low-pass characteristic inherent in the amplifier and speaker in the TV to which an NES was typically connected.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Thu Feb 09, 2012 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">neet wrote:</div><div class="quotecontent">I want to emulate, not improve the NES sound, and the NES did it non band limited.</div><br />I was under the impression that the RF block in the original Famicom and the NES did some low-pass filtering when modulating audio into a TV signal. When you filter audio using Blip Buffer or any other BLEP library, you're just emulating the low-pass characteristic inherent in the amplifier and speaker in the TV to which an NES was typically connected.</div>
<br />
<br />The NES will of course do some lowpass filtering, it can't mix an audio signal with 1.8MHz bandwidth into the composite signal, this is totally correct.
<br />
<br />But, the NES does the following:
<br />1. Generate non band limited digital audio (with aliasing)
<br />2. Low pass filter it (aliasing ist still there!)
<br />
<br />And with blip_buffer:
<br />1. Generate filtered, bandlimited digital audio (no aliasing)
<br />
<br />You lose the aliasing the real NES produced (even if it should be nearly inaudible).
<br />
<br />... I'm a bit picky about audio^^ I like it authentic <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Feb 09, 2012 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neet wrote:</div><div class="quotecontent">You lose the aliasing the real NES produced (even if it should be nearly inaudible).<br /><br />... I'm a bit picky about audio^^ I like it authentic <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div>
<br />Have you actually calculated the volume(s) of the aliased harmonics? They're bound the pretty damn low. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 09, 2012 1:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neet wrote:</div><div class="quotecontent">But, the NES does the following:<br />1. Generate non band limited digital audio (with aliasing)<br />2. Low pass filter it (aliasing ist still there!)</div>
<br />Let me guess: German?
<br />
<br />You could characterize the output of each APU channel as piecewise periodic, with the period and amplitude changing after each update usually once a frame. But if the period of a periodic signal divides evenly into the sample rate, which is the case with all PSGs in the APU, the aliases fall right back on the same frequencies. This means the aliasing is not only "nearly inaudible" but actually inaudible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Thu Feb 09, 2012 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Let me guess: German?</div><br />Yep <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But if the period of a periodic signal divides evenly into the sample rate ... the aliases fall right back on the same frequencies.</div>
<br />What the frell ... you're so right^^
<br />This is a fact which I really have forgotten. That's the thing about doing bandlimited synthesis for VSTi's at 44.1kHz ... there's nearly no frequency an integer multiple of the sampling rate.
<br />
<br />Now that I have that back in memory I can admit that using bandlimited 'building blocks' for emulating the NES APU sound is totally correct <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />Thanks <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Thu Feb 09, 2012 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neet wrote:</div><div class="quotecontent">Yep,thanks I'm familiar with BLIT, BLEP, minBLEP and most other band limited synthesis techniques. I could also implement the APU's sound generation as quasi band limited direct digital synthesis (which is faster than any other band limited approach). But that is (at least for me) no option here.<br />I want to emulate, not improve the NES sound, and the NES did it non band limited.<br />Nevertheless I will have a look at blargg's library. Didn't know such thing existed and I'm always curious about new synthesis stuff <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div>
<br />
<br />I'm very familiar with direct digital synthesis, but could you explain a bit what is your `quasi band limited direct digital synthesis' ? The problem with simple DDS is obviously easy aliasing with square/saw waves, does it involve something different than oversampling then down-sampling with any method you like (either FIR with windowed sinc or CIC filter (simpler))?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Fri Feb 10, 2012 3:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent">I'm very familiar with direct digital synthesis, but could you explain a bit what is your `quasi band limited direct digital synthesis' ? The problem with simple DDS is obviously easy aliasing with square/saw waves, does it involve something different than oversampling then down-sampling with any method you like (either FIR with windowed sinc or CIC filter (simpler))?</div>
<br />
<br />The trick is to filter only transitions in a wave, and on a per-sample basis. I've used this method for square, saw and triangle. Even hard sync should be possible without aliasing.
<br />Explanation: Given is a 32 bit phase accumulator and some 32 bit step. The phase accu is directly used to generate the output wave (as in the MOS SID). Now, when rendering a square wave we know that the transitions from low to high and backwards have the highest harmonics and are responsible for the aliasing noise, so we're just focusing on those 2 cases:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; _____<br />&nbsp; &nbsp;|<br />&nbsp; &nbsp;|<br />___|<br />0&nbsp; 1&nbsp; &nbsp; &nbsp;2</div><br /><br />0 is the last phase (on last sample output)<br />1 is the duty cycle position<br />2 is our next phase (which is: last phase + step)<br /><br />We can detect if there was a transition from low to high and do a simple box filter on the transition:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">out = &#40;0 * &#40;pw - lastPhase&#41; + 1 * &#40;lastPhase + step - pw&#41;&#41; / step</div>
<br />
<br />I'm using 0 for low and 1 for high here because it really simplifies some calculations and do a simple (out * 2 - 1) in the end.
<br />
<br />So, it's just box filtering the transitions ... a bit tricky to cover all cases for all classic waveforms, but it works, is fast and give good sounding results (no ringing from downsampling).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 10, 2012 5:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, your technique of box filtering the transitions is the same as "coverage based antialiasing" used in most SVG and TTF renderers. Coverage-based AA introduces gaps in adjacent polygons, just as the assumption of only one transition per output sample might screw with high-frequency noise samples (NES noise frequencies 0-3). BLEP is just the next step on top of that, using a better approximation to sinc instead of a box filter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Fri Feb 10, 2012 5:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Fine then, so it works with `classical waveforms' but it is not a general solution *... Still nice because of its little computational power needed to do this. Will try this when I get the time.
<br />
<br />* FM sound has no clear transitions in it, yet it generates aliasing, and the above technique wouldn't apply to these waveforms.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neet</b> [ Fri Feb 10, 2012 6:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Yeah, your technique of box filtering the transitions is the same as "coverage based antialiasing" used in most SVG and TTF renderers. Coverage-based AA introduces gaps in adjacent polygons, just as the assumption of only one transition per output sample might screw with high-frequency noise samples (NES noise frequencies 0-3). BLEP is just the next step on top of that, using a better approximation to sinc instead of a box filter.</div><br /><br />Yep, therefore even the square wave accounts for 6 cases:<br />1. no transition, low<br />2. no transition, high<br />3. low-&gt;high<br />4. high-&gt;low<br />5. low-&gt;high-&gt;low (1 - pw &lt; step)<br />6. high-&gt;low-&gt;high (pw &lt; step)<br /><br />That's not a problem if you handle edge cases correctly <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent">Fine then, so it works with `classical waveforms' but it is not a general solution *... Still nice because of its little computational power needed to do this. Will try this when I get the time.<br /><br />* FM sound has no clear transitions in it, yet it generates aliasing, and the above technique wouldn't apply to these waveforms.</div>
<br />
<br />Yep, doesn't work for FM ... FM is really hard to do without aliasing ... but if you're emulating old FM systems ... they all had aliasing <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>