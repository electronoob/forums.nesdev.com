<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NESmaker update</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NESmaker update</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=17084">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=17084</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Feb 23, 2018 8:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not sure the best place to put this - moderators feel free to move.  I just wanted to provide a link to the latest NESmaker update, which shows how we handle input management, and open to custom ASM routines.  <br /><br />If you're interested or curious, check it out here: <a href="https://youtu.be/3NMbWhGs-ck" class="postlink">https://youtu.be/3NMbWhGs-ck</a><br /><br />Especially for all of you who have been constantly in the trenches, would love to know your thoughts on if and how this might speed up rapid prototyping for you, even if you're only using it for proof of concepts and whatnot.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />You guys rock.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Fri Feb 23, 2018 10:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaer update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks Joe. I didn't know you worked on Sydney Hunter.<br /><br />BTW. You can edit the title of a thread by clicking on the EDIT button of the first post of that thread.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Feb 23, 2018 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey friend - didn't work myself on Sydney Hunter at all.  Just friends with the Collectorvision guys, and since they just released the SNES Sydney Hunter, and I was doing this video anyway, I asked if they would like the plug as I demonstrated our input manager.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Sun Feb 25, 2018 3:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The amount of configurability for input looks impressive, seems like this project is headed the right way! <br /><br />One thing I found curious though is that the video seems to indicate that a full byte is used for the actor direction. This seems a bit wasteful with the tiny 2kB of RAM the NES has. A common technique is to use a &quot;flags&quot; byte which stores the horizontal direction in the MSB, and use other bits for palette selection and background priority.  Perhaps worth considering?<br /><br />And then, I've also thought about the configurability of NESmaker, and as an advanced user I'd really appreciate if the NMI (and ideally also IRQ) address was configurable. i.e., a common programming pattern is to store the address of the handler in 2 bytes of zeropage RAM, and have the ROM address do an indirect jump with this address. <br /><br />While you spend 2 bytes and a few cycles of RAM with this method, it allows you to easier change game state completely. So if I were to say have a very specific cut-scene which needs perfect NMI/IRQ timing, I wouldn't have to figure out how to best shoehorn my code into the NESmaker code (which may change between versions). I'd just set my own handlers, and restore them when done (together with other game state pushed on the stack).<br /><br />And yes, I know I could always do this by hacking the existing NESmaker code. But having to patch the main engine is a bit of a hurdle when collaborating, so it'd be way better if this use-case was natively supported.<br /><br />A tangential request to the above one would also be to have a clear deifinition of permanent vs temporary game state. For my imagined awesome-scrollery-trick cutscene, I will undoubtly need to use some RAM, and will have to consider what RAM used by NESmaker is the permanent gameplay state I must preserve, and what is data that could be restored by re-initialisation. Examples of the latter would be the spritepage, screen and attribute shadows, music data and so on. Having this clearly defined would be helpful for extending NESmaker.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Sun Feb 25, 2018 7:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bananmos - thanks for the feedback!<br /><br />We are still working with definable byte structures, effectively making *classes* of objects, so during the main-game cycle, during applicable parts, updates are happening for the bytes being affected for that class.  For instance, an enemy projectile - type - class of object doesn't need nearly the object info that a player object does.  We're working on making a class system so you might be able to determine bytes - used - by-  class based on an individual particular game needs.  It's a super complicated beast from a CONCEPTUALLY standpoint, let alone getting good cross talk between the tool and engine.  Small things at a time.  But sometimes, that's why it's harder to be more efficient with bytes, that may or may not be present.  A power up may not need directionality, for instance, but might need the other bits in that byte.  You can see the conundrum. <br /><br />Right now, we have to do a lot of weighting ease against flexibility against conformity.  Our animation engine, for instance, is super inefficient compared to what it could be, but it also is super regimented and user friendly and intuitive.  So...that's a trade off.  Our main demographic here are people who have zero ASM experience (and only limited coding experience), while hopefully providing enough back doors to more easily hack the engine for the needs of those who are much more confident.  Essentially, we want to use this tool to take a complete newcomer through that grueling period of self doubt to give them the confidence to WANT to jettison our tool and build from scratch!  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />Also, generally speaking, we have it broken out into GameState and subGameState, which could allow you to utilize the subGameState to still carry on common game state needs (Drawing whatever, for instance), but also allow you particulars between sub-game-states.  That's how Mystic Searches handles it, so we're just sort of porting that concept over.  In most things, we're using the experience we gleaned from working with COMPLETELY green folks sitting at the tool, and my years of experience teaching GameMaker and Unity to people who had never seen programming languages before, to make something that's as intuitive as it can be for NES development, even though it may not be the most efficient or best optimized way to do any one particular thing.  Does that make sense?<br /><br />Even still, even if current devs just use this for rapid prototyping or for the level editor or music editor or pixel editor...that's awesome.  But yeah, feedback like this is awesome for sure.  Any time you see something like that, feel free to point it out in case it's something we haven't thought of (but know that there was probably some trade off reason we did a thing in a particular way).  You rock!  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Mon Feb 26, 2018 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does that make sense?</div><br /><br />Well, to be honest: Not really... <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />I asked 3 questions and you only answered the least interesting one of them, while leaving the two more important ones out. OTOH, I readily admit it was a very chatty post from my side, so I'll try again and be more focused in what I'm asking about&#058;<br /><br />Question1) Would you consider optimising the object direction to occupy just 1 bit.<br />- You've already answered this by saying it's not much of a priority, and that your pseudo-OOP allocation of gameobject RAM might make it a special case only some objects anyway. And that's perfectly fine as micro-optimisations may not be necessary - just keep that option in mind if RAM usage does become an issue.<br /><br />Question2) Could we please have the NMI in NESmaker consist of a &quot;JMP (NMIaddr)&quot; instruction, so that we can more easily inject our own? (and same for IRQ)<br /><br />Question3) Will we have some documentation on the RAM usage of NESmaker, so we know what RAM contains crucial gameplay state and what we can trash for our own use?<br /><br />Oh, and I forgot to throw in another question that I'm curious about&#058;<br /> <br />Question4) Which assembler is NESmaker? Is it CA65, or some other one?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Erockbrox</b> [ Mon Feb 26, 2018 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can tell that there are probably some NES ASM programmers who will take NESmaker and then rewrite certain parts of the code to personalize it in their own specific way. <br /><br />I could see an expert ASM coder look at the code in NESmaker and say &quot;why did they do this&quot; or &quot;this is not optimized&quot; because different coders have their own style of doing things. <br /><br />For me, I don't even know how to put graphics or anything up on the screen so I would be adapting to the style of programming that NESmaker offers, but to a master ASM coder NESmaker might be harder to adapt to.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Mon Feb 26, 2018 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>Question2) Could we please have the NMI in NESmaker consist of a &quot;JMP (NMIaddr)&quot; instruction, so that we can more easily inject our own? (and same for IRQ)</strong><br />Hm - I mean...if anyone knows what they're looking at to this degree, it's not like this would be hard to customize.  I'm not sure we'll set it up that way...but I guess I can look at it?  There is no IRQ, using Mapper 30.  Again though - if someone is to that degree of proficiency, I'm not sure this would be too difficult a problem on the code side even if we don't implement it...I wonder how many things would be truly integral, though, if someone were to write their own NMI.  I guess it would depend on what you're really using to tool for.  Again, that sort of goes back to our main demographic for use, being people who would never make use of this functionality.  <br /><br /><strong>Question3) Will we have some documentation on the RAM usage of NESmaker, so we know what RAM contains crucial gameplay state and what we can trash for our own use?</strong><br />Sure, and it's relatively easy to track, too.  The addresses for various things are pretty clearly lain out as constants at the top of the code (though subject to change).  I'll obviously make things as documented as possible, but with all of the variability, I'll likely be more documenting conceptual things, as they may be different from genre module to genre module...advanced coders such as yourself would be able to recognize what they're looking at upon knowing where to look...drag and drop level users would have no use for this info, because they wouldn't even know what to do with it if they found it.  <br /><br /><strong>Question4) Which assembler is NESmaker? Is it CA65, or some other one?</strong><br />ASM6<br /><br />Thanks for the feedback <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 26, 2018 3:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JoeGtake2 wrote:</div><div class="quotecontent"><strong>Question2) Could we please have the NMI in NESmaker consist of a &quot;JMP (NMIaddr)&quot; instruction, so that we can more easily inject our own? (and same for IRQ)</strong><br />[...] There is no IRQ, using Mapper 30.</div><br />A raster split (ab)using the DMC is possible. See <a href="http://forums.nesdev.com/viewtopic.php?p=65871#p65871" class="postlink">DPCM Letterbox</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Mon Feb 26, 2018 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">if someone is to that degree of proficiency, I'm not sure this would be too difficult a problem on the code side even if we don't implement it...</div><br /><br />Yes, but as I said earlier in this thread the reasons why I'd prefer native support are:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">...I wouldn't have to figure out how to best shoehorn my code into the NESmaker code (which may change between versions). <br />[...]<br />And yes, I know I could always do this by hacking the existing NESmaker code. But having to patch the main engine is a bit of a hurdle when collaborating, so it'd be way better if this use-case was natively supported.<br /></div><br /><br />So if I am collaborating with someone less technical that uses NESmaker, then without a settable IRQ-address I would have to first find some free zeropage bytes (which in worst case may not even be available), and then I would either need to:<br />1) Ask my fellow NESmaker user to manually modify their output code according to my instructions - tedious and error-prone.<br />2) Write a program that tries to do the patching of the output code automatically - likely to break with NESmaker version changes.<br /><br />None of those options seem very appealing TBH.<br /><br />In contrast, if there was native support for a configurable NMI/IRQ address, I'd just ask the NESmaker user to INCBIN my precompiled 16kB binary in one of the PRG banks, then do a JSR $8000 to give control to my code for doing the cool screen transition/cutscene I've provided for them. <br />(and perhaps even adding the INCBIN/JSR $8000 wouldn't be necessary, if NESmaker would allow a feature for inserting &quot;plugin code&quot; like this)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is no IRQ, using Mapper 30</div><br /><br />Tepples's DMC IRQ was indeed what I was having in mind. The forum thread linked to is quite long though, so I think <a href="https://wiki.nesdev.com/w/index.php/APU_DMC#Usage_of_DMC_for_syncing_to_video" class="postlink">the wiki about the DMC</a> summarizes it better if you're short on time.<br /><br />An even simpler variant of this that I've used successfully is to combine a coarse DMC IRQ which waits for a sprite#0 hit. That way you make sure the DMC will interrupt code that takes a variables amount of cycles, while still relying on the sprite#0 hit to get the finer timing needed for PPU register writes.<br /><br />Both methods are obviously a lot more cumbersome than a proper scanline IRQ like the MMC3 has, but do enable screen-effects that would otherwise be very difficult to do on mapper's that have no IRQ support.<br /><br />There's also other neat uses of the DMC IRQ, such as [url=Blargg's DMC saw wave]http://www.slack.net/~ant/misc/nes-saw/[/url]<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Our main demographic here are people who have zero ASM experience (and only limited coding experience), while hopefully providing enough back doors to more easily hack the engine for the needs of those who are much more confident.</div><br /><br />Yeah, that's fair enough. But my hope was that this tool would also allow easy collaboration between people with less programming knowledge (who can use the NESmaker tool without touching the asm output) and those with more programming knowledge (who'd like to add more bells&amp;whistles to the NESmaker-made game, but would prefer using their own tools/assembler). And having to do loads of error-prone patching to glue these things together sounds like not a lot of fun. And seems unnecessary, as it can be avoided with just a little bit of foresight... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NovaSquirrel</b> [ Mon Feb 26, 2018 9:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't see why interrupt pointers need to be in zeropage? JMP indirect always takes a 16-bit address, so all you're doing is saving like two cycles when updating the address at the cost of precious zeropage memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Mon Feb 26, 2018 11:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> 	Post subject: 	Re: NESmaker update	 Reply with quote<br />I don't see why interrupt pointers need to be in zeropage? JMP indirect always takes a 16-bit address, so all you're doing is saving like two cycles when updating the address at the cost of precious zeropage memory.</div><br /><br />Heh, that just shows I'm getting old and don't know my 6502 instructions as well as I used to! <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />That means it's even less of a cost then, as you wouldn't be wasting zeropage RAM. So yeah, 2*2 = 4 bytes of RAM to make NESmaker a lot easier to extend with 16kB &quot;plugins&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Tue Feb 27, 2018 9:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Forgive me for being dense on this point...I admit, I completely am not sure the benefit, still.  <br /><br />If there is an <div class="codetitle"><b>Code:</b></div><div class="codecontent">.include &quot;Routines\NMIroutines\NMIcode.asm&quot;</div>, and that NMIcode.asm is exposed in the tool...what functional benefit would be gained from determining its address or making that address changeable again?  If the question is about including custom NMI code...you could just put that in that code, no?  I'm not sure variable NMI address makes that any easier.<br /><br />Maybe I'm completely missing the use here.  Sorry for being dense on this point!  haha

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Tue Feb 27, 2018 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you had a game that had minigames, it might make sense to have multiple NMI routines, to handle the different PPU update needs of each mini-game.<br /><br />Or perhaps if had designed a Title screen (or Ninja Gaiden style cutscene) that involved a highly optimized PPU loading system...for fast changing animations...it might have different NMI needs than the in-game one.<br /><br />But, for a general purpose game maker, I wouldn't. Options will just confuse newer / less skilled users.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Tue Feb 27, 2018 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NESmaker update</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Interesting.  Yeah, I can see that.<br /><br />I mean, you'd lose a few NMI cycles, but you could likely do a quick table read in custom NMI code to achieve the same results, no?  Rather than variable NMIs, variable places to jump within an NMI?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>