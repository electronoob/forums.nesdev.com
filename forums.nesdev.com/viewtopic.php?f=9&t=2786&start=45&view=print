<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Universal NES flash cartridge considerations</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Universal NES flash cartridge considerations</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=2786">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=2786</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Dec 12, 2006 11:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nothing but the game knows when it's time to switch disks. The disk drive only communicates that there is a disk inserted or not. Having a physical button is the closest you'll get to a real drive since you must manually eject and insert disks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lord Nightmare</b> [ Tue Dec 12, 2006 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FDS is not gonna happen. Unless theres enough ram on the board to stre an entire disk image, and then write it back to the CF card when swapping sides, its not possible, since you're forgetting an important feature of FDS disks: they're WRITABLE, and MOST games do this SEVERAL TIMES during play. unless you can do byte-granularity writes on a CF card, its pretty much impossible.
<br />
<br />Lord Nightmare

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Dec 12, 2006 1:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have very few idea on how the FDS works, but the CF card is very close to what a disk system would be I think. If the game takes very long write and read times to/from the disc, those acess would just acess the CF card instead. I don't know how hard this is to do, but that'd be fine.
<br />And with 512kb PRGRAM, you can most certainly hold a whole disc, wich are 128kb.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Tue Dec 12, 2006 1:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On a different subject, I put some thought into how one might be able to add save state support to the PowerPAK.  Here's what I'm thinking of:
<br />
<br />First, allow the user to assign a hotkey that will interrupt the game.  The user should also be able to disable the hotkey if he/she doesn't want one.  The cart would monitor $4016 accesses until it finds the hotkey, then interrupt the cart at the next NMI.  It's best to wait for NMI before the interruption to simplify state play resumption (a mere RTI right before V-Blank would be sufficient to get the game going again).  I am only aware of one commercial game that didn't use NMI (a number of homebrew games don't, however), so this solution should be highly compatible.
<br />
<br />Upon interruption, an options screen would appear, giving the user choices like the following:
<br />1. Resume Play
<br />2. Save Battery RAM
<br />3. Save State
<br />4. Load State
<br />5. Software Reset
<br />6. Hardware Reset
<br />7. Change Game Genie
<br />8. Exit Game
<br />
<br />The cart will need to monitor writes to $2000, $2001, and $2005/2006.  The registers should be restored during the scanline before V-Blank, when the PPU is idle.  APU resoration may be tricky though, particularly if a game relies on frame IRQs or DMC IRQs.
<br />
<br />Saving the mapper state should be fairly easy since all mapper registers are directly accessible in the FPGA.  When the cart is interrupted, the mapper hardware should be suspended (particularly any IRQ counters that may be active) so that it can be saved in the condition it was in at the time of the NMI.
<br />
<br />This solution isn't perfect, as it does require that (a) NMIs are enabled and (b) the game is actively reading controller input at the time the user wishes to interrupt the game.  However, it should prove good enough for most games and situations, as the games I looked at usually keep NMIs active at all times (except when the screen is off) and will usually read controller input on every frame, whether it's used or not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Dec 12, 2006 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Lord Nightmare wrote:</div><div class="quotecontent">FDS is not gonna happen. Unless theres enough ram on the board to stre an entire disk image</div>
<br />Not difficult. Even 128 KiB of RAM can hold 40 KiB for BIOS + PRG RAM and 68 KiB for a disk side (including 4 KiB of headroom for overburning) with 20 KiB to spare.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Dec 12, 2006 2:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I have very few idea on how the FDS works, but the CF card is very close to what a disk system would be I think. If the game takes very long write and read times to/from the disc, those acess would just acess the CF card instead. I don't know how hard this is to do, but that'd be fine.<br />And with 512kb PRGRAM, you can most certainly hold a whole disc, wich are 128kb.</div>
<br />FDS disks work more like an audio cassette tape, after reading in 8 bits it raises a flag or interrupts the program so it can read that byte.
<br />
<br />Using the counter method, the commands that would normally move the head could just move the counter. The counter would address a single byte in memory sort of like bankswitching. Once the game starts the reading routine, the counter would reset, raise the flag. After the CPU reads the byte the counter could be incremented and the process would go on. This would speed up disk reading immensely since the drive speed is normally around 96000 bits/s. If a game used timed reads the counter could be clocked at roughly the real disk speed using Phi2 and a divider.
<br />Really it's just a hardware implementation of what emulators do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bunnyboy</b> [ Tue Dec 12, 2006 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The PowerPak has a total of 544KB of prg ram which is enough for bios and many disk sides at once.  It is all sram instead of flash so there is no write time penalty.  When the game is done it would be easy to write that data back to the CF card, just like the battery ram handling now.
<br />
<br />The CF card access is done in large blocks of 512bytes, and real file access is usually in 512b-8KB blocks depending on the FAT system.  It definitely does not match the way the FDS works, which is closest to a tape drive (start at beginning, read until you find what you want).  Navigating through the dir tree to find where to save data is slow so it cant really be used for swapping in game.  Byte access is possible but not usable when the file system is there and the card has long read/write delays.  A game could be written to use the PowerPak bios to get access to files for more storage tho.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Dec 12, 2006 3:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bunnyboy wrote:</div><div class="quotecontent">[Block device access] definitely does not match the way the FDS works, which is closest to a tape drive (start at beginning, read until you find what you want).  Navigating through the dir tree to find where to save data is slow so it cant really be used for swapping in game.</div>
<br />Not if the .fds files are contiguous on disk (that is, not fragmented). Then it's just base_sector+byte_position/512. If a game starts writing in the same sector that it had read from, just write to the last (cached) sector. But loading the entire side into RAM would still probably be a better idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bunnyboy</b> [ Tue Dec 12, 2006 4:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Not if the .fds files are contiguous on disk (that is, not fragmented).</div>
<br />
<br />Definitely true but that is something that can't be assumed any time you plug the card into a computer.  I have seen Windows rearrange blocks for no reason, when no files were added or changed.  Not having to keep checking the fat tables would make loading games a bit faster too but one of my main points was to never need special apps to modify the card or the games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bunnyboy</b> [ Sat Dec 23, 2006 11:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Finally remembered why FDS wont work on my board and its pretty simple.  The game reads disk data from one register.  The easy thing would be to just have an incrementing 16 bit counter in the fpga that points to where in ram that register byte will come from.  The problem is the fpga only controls the upper address bits (A18-A13) and not the lower address bits so the counter cannot set the full address.  There is probably a simple answer but I havent thought about it yet, almost got boot rom updating from CopyNES done instead...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Sun Dec 24, 2006 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If cannot change all of the address lines with the FPGA, then you'll need to "trap" accesses to the I/O registers.
<br />
<br />When the FDS is in write mode, trap accesses to the write register by injecting a BRK on the following cycle.  The FPGA should maintain the value written, which the handler can access in order to update the FDS image.  When ddone, subtract 2 from the return address, then RTI.
<br />
<br />For reads, trap the read register in the same manner.  Place the next byte of data in a register, subtract 5 from the return address (assuming absolute addressing was used), then RTI.  When the instruction re-executes, the register contents can then be sent to the game.
<br />
<br />This method will slow things down, however, but it's the only way I can think of that you can do FDS without having control over all address lines.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 24, 2006 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />At this point, it might just be better to rewrite the BIOS and damn the compatibility with games that do direct disk access.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bunnyboy</b> [ Sun Dec 24, 2006 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or build another board using the same tech.  Would be cheaper because of the smaller fpga and less ram needed.  Audio stuff could also be added more easily.  Must get this board done first!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Dec 26, 2006 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">At this point, it might just be better to rewrite the BIOS and damn the compatibility with games that do direct disk access.</div>
<br />It would be better to make a drop in replacement for it capable of being used with FDS games and hardware which use the FDS. This would require a new BIOS and the old BIOS. If the device had a 60 pin connector, it could directly switch to the FDS BIOS and not illegally contain it inside and also allow sound  register writes to go to the extra 60 pin. As I understand it, FDS sound isn't fully understood yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Dec 26, 2006 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know about FDS support, but the cart is great anyway, and 95% of FDS games have their cartridge equivalent, either hack or official version.
<br />
<br />I think the best for sound would be to create a device that plug on the bottom of the NES inside the connector and take it as a standard for future homebrew developpement.
<br />
<br />I was planning to use extra MMC5 sound in Ecological Evolution, a game I'm planning to make (only some design is done right now, no game engine programming at all). If I use more channels, it would be great to not have people need to modify their hardware for it to work. On running on a real MMC5, I think all 72-pins carts needs additional wires form the MMC5 to the cartridge connector to work with a (modified) console. With a custom cart, I think I could port the sound to a device that would mix it with the NES audio on the bottom of the thing. I just don't know if it should be analog or digital, or both. FC carts uses analog format (sound is already mixed on the cart and ready to go on the connector), but I think using a different digital format could be better and increase noise immunity if done proprely. However, that would require some device that send data asynchronously to the expansion device, and the expansion device with a DAC on it mixing it with the NES audio output.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>