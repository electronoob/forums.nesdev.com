<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=4733" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-01-16T00:00:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=4733</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-16T00:00:45-07:00</updated>
<published>2009-01-16T00:00:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=42008#p42008</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=42008#p42008"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=42008#p42008"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Game states also help prevent spaghetti code. This whole "if this jump there" thing can make the code pretty unreadable after a while.[/quote<br />Well, I'd say it helps to avoid spaghetti code instead (but is not sufficient to completely avoid it).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">IMO, coding the different sections of the game as individual routines is a pretty clean way of handling game states, specially if you have different source files for each one.<br /></div></div><br />That's pretty much exactly what I was saying.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Jan 16, 2009 12:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-01-15T17:42:47-07:00</updated>
<published>2009-01-15T17:42:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41999#p41999</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41999#p41999"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41999#p41999"><![CDATA[
Game states also help prevent spaghetti code. This whole "if this jump there" thing can make the code pretty unreadable after a while.<br /><br />The Sonic games have a very interesting scheme where each section has a starting address, and these are arranged in a jump table, so each section has an index. A variable indicates the index of the current section, which is coded as a routine, and the main loop simply jumps to the indicated routine repeatedly. Each section does whatever it needs, and whenever it's done, it sets the index of the next one and ends itself by returning from the routine. <br /><br />IMO, coding the different sections of the game as individual routines is a pretty clean way of handling game states, specially if you have different source files for each one.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Jan 15, 2009 5:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-01-15T15:37:31-07:00</updated>
<published>2009-01-15T15:37:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41994#p41994</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41994#p41994"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41994#p41994"><![CDATA[
You need a game state variable if the two players can enter states independently, like in Klax for NES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jan 15, 2009 3:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-15T15:24:38-07:00</updated>
<published>2009-01-15T15:24:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41988#p41988</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41988#p41988"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41988#p41988"><![CDATA[
Maybe he's referring to something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;In title screen...<br />if StartPressed = 1<br />    jmp MainGameLoop    ;switch loops<br />else<br />    do other stuff and loop<br /><br />...<br /><br />MainGameLoop:<br />....<br />if StartPressed = 1<br />  jmp PausedLoop     ;switch loops<br />else<br /> jmp MainGameLoop<br /><br />PausedLoop:<br />....<br />if StartPressed = 1<br />   jmp MainGameLoop   ;switch loops<br />else<br />   jmp PausedLoop<br /><br /></div><br /><br />Where you don't check directly which game state you're in; you're just in a loop. Once something happens, go to another loop. This kind of eliminates the need for a game state variable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu Jan 15, 2009 3:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2009-01-15T15:13:53-07:00</updated>
<published>2009-01-15T15:13:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41986#p41986</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41986#p41986"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41986#p41986"><![CDATA[
Then I think one or both of us are confused.  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />A state system in the way I am talking about it is literally just determining what to do next based on a variable, involving a lot of subroutines.  The game starts out in a title screen state, and when the player moves past that the state changes to the game, etc.<br /><br />I think what we are talking about here is just the difference beteen an extended if-then statement and a select case.<br /><br />Like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if titlescreen = 1 then<br />     jsr title<br />else<br />     jsr gameplay<br /><br />gameplay:<br />     if statusscreen = 1 then<br />          jsr status<br />     else<br />          jsr maingame</div><br /><br />vs.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">x = gamestate<br />jsr statetable,x<br /><br />statetable:<br />.db title, status, maingame</div><br /><br />Is that about right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Thu Jan 15, 2009 3:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-15T02:04:33-07:00</updated>
<published>2009-01-15T02:04:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41963#p41963</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41963#p41963"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41963#p41963"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't know if it is more or less effective to do so on the NES, but a state setup is just naturally how you do programming. It's organized, efficient, and emphasizes code reusability.<br /></div><br />It's fun because I'd almost say the exact opposite. Working with gamestate method would be a huge mess because all code would be merged at the same place and doing lots of indirect jumps. This would be hard to modify and unorganized. Plus, the programm have to read a variable, do an indirect jump in function of it, read another, re-do an indirect jump, etc... It's unefficient when you could just jsr to the desired routine straight away. Code reusability ? Well, as long as you use subroutines instead of just in-linging code, there is nothing to worry about that (no matter if you jump to them directly or indirectly).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />¨<br />If everything is just a lot of loops in a straight line, what if you want to display the title screen again for some reason? Yes you could jump to the title screen code, but after that the game starts over at level one automatically, right? With a state you can change a variable and go right back into gameplay again.<br /></div><br />Don't worry, my loops are *not* in a straight line. If I wanted to show the title screen again during gameplay, I would just make the code that draw the title screen in a routine, and do "jsr DrawTitle" again. I don't see the problem here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm not entirely sure I understand the setup Bregalad is talking about...it sounds a lot like there are states anyway, just without a single variable.<br /></div><br />Well, I guess there *is* gamestates anyway no matter if you want them or not... but it's just I don't worry about that, and just keep things separed if they must be separed.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Of course what is most important is that your game runs quickly and smoothly. Smile<br /></div><br />Yes you're right. Konami used the "state" method and does a lot of indirect jumps all the time, yet most of their games runs quickly and smoothly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You can blame bunnyboy, since I jumped into writing my own game after finishing his tutorials. Smile His pong game uses the gamestate method: <!-- m --><a class="postlink" href="http://www.nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=8747">http://www.nintendoage.com/forum/messag ... eadid=8747</a><!-- m -->. I'm a newbie so I don't really know if this gamestate method has any advantages over your own.<br /></div><br />Well, I don't know what will work the best for you. I think the state method worked because a pong clone is extremely simple to code, and so the negative effect of the game state method didn't show up.<br /><br />I don't remember if I mentionned it yet, but I originally wanted to make a RPG on the NES based on a "Game State" variable, where 0 = Title Screen, 1 = Menu sub-screen, 2 = Field screen and 3 = Battle. In the NMI I just did an indirect jump (altough I only implemented 0 and 1 before giving up that programm).<br />It worked very well for 0, as nothing very spectacular had to be done. However, for 1, I had a long hard time to figure how to draw text-boxes with this engine. I made a "sub-game state" variable to get more entry points in my routines, but that was still too limited. In the end I ended up using an indirect jump pointer, and whenever a frame was complete, I set this pointer so that on next frame it would do an indirect jump to it. But even that was a headache to handle, so I gave up and made another project <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />That was long ago tough so I don't really remember the details. Maybe what I wrote above isn't exactly correct also. I think I thrown away the source so I can't even look back to see why that was such a pain. I was a newbie to programming back then, so how painfull this was could also be done to my lack of programming skills.<br /><br />However, more recently I found myself having headache with enemy AI because I had only one entry point, and needed to do lot of switch and if/else branches in function of enemy's state variable. I hated it because while it worked fine, each time I wanted to modify the code to add something to enemy's AI, it was a headache. Now I found a way to trick the stak in order to have a variable entry point, and everything fixes up  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br />There is sill the inconvenient that if I wanted to call a routine in all cases no matter the enemy's state, I had to do it only once before the indirect jump with the old system, and I have to do it a lot of times with the new. However, again a simple use of the jsr opcode can fix that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />What if you have some side scroller levels and some racing levels, with different drawing and input routines?<br /></div><br />Well, you'd probably have only one routine reading the controller, but a different engine reading it and interfacing with it.<br />As for drawing routines, they don't really need to be different. I have a routine that allows me to draw up to 2 name table rows + 1 attribute table rows in NMI (or less if I need less), and another that allows me to draw a metatile without changing the rest. That does all the drawing for me and I never felt any limited with that (other than what the hardware limits you). If I were to do completely disconnected engine where more special screen updates would be needed, I guess I'd still opt for different NMI routines.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Jan 15, 2009 2:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2009-01-14T16:28:18-07:00</updated>
<published>2009-01-14T16:28:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41945#p41945</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41945#p41945"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41945#p41945"><![CDATA[
I don't know if it is more or less effective to do so on the NES, but a state setup is just naturally how you do programming.  It's organized, efficient, and emphasizes code reusability.<br /><br />I see a stateless program as just one long stream of consciousness, where every new thing that happens is a result of what came before.  Ideally, you want every routine you have to be a self-contained function that takes a number of arguments and results in a predictable output.  It needs to be modular so that in the future you could drag and drop that one function into a new program and it would work the same way that it used to, as long as you gave it the same arguments.<br /><br />In the end I think it is mainly different structures, though.  What Bregalad describes sounds point to point, finish-this-then-move-on-to-that.  A game state setup is more like nested folders: you open the main folder, then decide which folder to open next, navigating an ordered list of functions that can you can change at any time based on variables.  You are in control, you don't have to move entire loops around if you want to change the order of things.  Just call a different subroutine.<br /><br />If everything is just a lot of loops in a straight line, what if you want to display the title screen again for some reason?  Yes you could jump to the title screen code, but after that the game starts over at level one automatically, right?  With a state you can change a variable and go right back into gameplay again.<br /><br />I'm not entirely sure I understand the setup Bregalad is talking about...it sounds a lot like there are states anyway, just without a single variable.<br /><br />What if you have some side scroller levels and some racing levels, with different drawing and input routines?  If you have anything in your game to detect which type of level it is and how the routines change, that's a game state.  Whenever the player pauses the game, that is a game state (everything is processed differently for the duration).  You're probably already following the basic principles without realizing it.  My way of organizing things is just taking it a little further than GameIsPaused = 1.<br /><br />Of course what is most important is that your game runs quickly and smoothly.  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Wed Jan 14, 2009 4:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2009-01-14T15:09:03-07:00</updated>
<published>2009-01-14T15:09:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41943#p41943</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41943#p41943"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41943#p41943"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I don't think indirect jump is overly complicated, but what the other guy described seemed to be. Why do you want only one loop that does only indirect jumps for all your programm when you could have separate sections with separate loops that does normal jsr ? I really don't see the point. There is no advantage of that game state thing.<br />When I'm on title screen, I'm in a loop that wait for the player to press "start".<br />When I'm on a stage introduction screen, I'm in a loop that show some graphic effects and wait for a timer to overflow.<br />When I'm in gameplay I do a lot of jsr and repeat until I have a game over or stage beaten flag set.<br /><br />All of these are loops, but they are completely separated, and I have no such thing as a "gamestate" variable. If I wanted to make all those loops into a single "game loop" and check a "game state" and do indirect jsr so that it would have the same effect as the original programm, it would be overly complicated and inneficient to implement. However, if this works for you, go away.<br /></div><br /><br />You can blame bunnyboy, since I jumped into writing my own game after finishing his tutorials.  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  His pong game uses the gamestate method: <a href="http://www.nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=8747" class="postlink">http://www.nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=8747</a>.  I'm a newbie so I don't really know if this gamestate method has any advantages over your own.<br /><br />One thing I want to make clear is that I haven't made any decision to use indirect jumps yet.  This was just a new idea that Celius introduced to me in this thread.  Right now my design documents show a gamestate setup using normal JSR.   There's just one jump at the beginning of the main loop to choose the right gamestate codeblock.<br /><br />Anyway I personally don't think gamestates are too complicated, but you bring up a good question: why bother?<br /><br />I haven't started coding at all yet as I'm just designing the game, so it would be very easy to change my mind and get away from the gamestate method of organizing it.  Thanks for bringing this up!<br /><br />Does anybody know of any advantages to using the gamestate method over a using series of loops like Bregalad?  If there aren't any, maybe I should change my design documents.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Wed Jan 14, 2009 3:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-14T13:31:22-07:00</updated>
<published>2009-01-14T13:31:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41941#p41941</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41941#p41941"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41941#p41941"><![CDATA[
I don't think indirect jump is overly complicated, but what the other guy described seemed to be. Why do you want only one loop that does only indirect jumps for all your programm when you could have separate sections with separate loops that does normal jsr ? I really don't see the point. There is no advantage of that game state thing.<br />When I'm on title screen, I'm in a loop that wait for the player to press "start".<br />When I'm on a stage introduction screen, I'm in a loop that show some graphic effects and wait for a timer to overflow.<br />When I'm in gameplay I do a lot of jsr and repeat until I have a game over or stage beaten flag set.<br /><br />All of these are loops, but they are completely separated, and I have no such thing as a "gamestate" variable. If I wanted to make all those loops into a single "game loop" and check a "game state" and do indirect jsr so that it would have the same effect as the original programm, it would be overly complicated and inneficient to implement. However, if this works for you, go away.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 14, 2009 1:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-14T13:19:12-07:00</updated>
<published>2009-01-14T13:19:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41940#p41940</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41940#p41940"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41940#p41940"><![CDATA[
Oh, no, it's not really a time thing. It's mostly because there is no indirect JSR. It'd be AWESOME if there was a JSR ($xx), because I'd do away with JMP ($xx) all together. I only use it because I can jump to a variable address. You really don't have to use it. It's actually a good idea to have this somewhere in RAM:<br /><br />JSR $XXXX<br />RTI<br /><br />For your NMI Routine. That way you can make $XXXX any address you want, since it's RAM, and still be doing a JSR. I think I might switch to this method instead of using indirect jumps. Oh, but make sure if you're outside of the NMI, and you are changing the address, first make the opcode for "JSR" "RTI" so that if the NMI is executed while you are updating the $XXXX part, it's not partially updated/interrupted, in which case it would crash.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Jan 14, 2009 1:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2009-01-14T04:35:12-07:00</updated>
<published>2009-01-14T04:35:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41923#p41923</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41923#p41923"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41923#p41923"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />What exactly do you mean by a program that "flows normally"? And how is using indirect jumping to allow you to execute different segments of code depending on the "gamestate" (Title screen mode, main gameplay, etc.) overly complicated? It's not so different from my NMI where I do just a bunch of indirect jumps, and in fact, it's a lot simpler.<br /></div><br /><br />BTW Celius, is there an advantage of using indirect jumps instead of JSRs?  Is it a speed thing?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Wed Jan 14, 2009 4:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-14T04:19:38-07:00</updated>
<published>2009-01-14T04:19:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41922#p41922</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41922#p41922"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41922#p41922"><![CDATA[
What exactly do you mean by a program that "flows normally"? And how is using indirect jumping to allow you to execute different segments of code depending on the "gamestate" (Title screen mode, main gameplay, etc.) overly complicated? It's not so different from my NMI where I do just a bunch of indirect jumps, and in fact, it's a lot simpler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Jan 14, 2009 4:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-14T03:04:31-07:00</updated>
<published>2009-01-14T03:04:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41920#p41920</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41920#p41920"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41920#p41920"><![CDATA[
I haven't understood most of those "game state" or "module" thing, but my opinion is that you guys are complicating it a lot.<br /><br />My game engine is just a programm that flows normally, there is none of theese things, and it works very well and I don't feel limited. I admit I had to find a big trick for ennemies AI to trick the stack in order to make the programm much easier to write, and I'm still limited to 1 object = 1 metasprite, which I may get rid of if I feel like it without adding any crap to my game engine.<br /><br />If your title screen is different of your main gameplay (it should unless you're cloning SMB) just make it a different part of the programm and I don't see any problem. I don't understand what you want crappy thing you want to do with jsr in function of game state. However if that woks for you go ahead, I can't force anyone to use my programming technique.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 14, 2009 3:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-01-13T23:58:23-07:00</updated>
<published>2009-01-13T23:58:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41913#p41913</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41913#p41913"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41913#p41913"><![CDATA[
Oh I see. It's my fault, I'm kinda sleepy (nearly 5AM now) and probably read the post too quickly. Sorry about that.<br /><br />My opinion on that is that if the input must be handled differently in different program sections, everything else probably will be different too, so these sections are basically different sets of main loops.<br /><br />I handle those in my programs as "program modules". They all set themselves up and eventually enter their main loops. Each of them is free to select which NMI routine to use and whatever else they'd like. Switching to a new module is just a matter of jumping to its reset address, and that's how the program jumps from module to module.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Jan 13, 2009 11:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2009-01-13T23:14:03-07:00</updated>
<published>2009-01-13T23:14:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41910#p41910</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41910#p41910"/>
<title type="html"><![CDATA[Controller Input Subroutines: How many?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4733&amp;p=41910#p41910"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Why on earth would you have multiple input routines? The normal is to read all the bits from the joypad and put them in a byte, since, conveniently enough, there are exactly 8 buttons in a NES controller. This routine is always the same, but each "game state" will read this byte and do different things based on its contents.<br /><br />Unless you are confused by those awkward demos where the programmer branches to different action immediately after reading the bit from the controller register... is that it? That is an awful way to control games. You'd better just stuff the input into a byte (for each controller) and use that to make decisions.<br /></div><br /><br />I think you misunderstood my question, which is my fault since I didn't express it clearly enough.  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I'll quote from my original message:<br /><br /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><br />I will have <strong>one ReadController subroutine</strong> that will be called outside of gamestates and store button status in RAM.<br /></div><br /><br />This is where I read the joypad and store the button status in one byte.<br /><br /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><br />Then within the gamestates I will want to handle that input, so...<br /></div><br /><br />Here, "handle" means "do stuff based on the input you got from reading the joypad".<br /><br />So this thread is really asking how to organize the "do stuff after you read the joypad" part.  Sorry for the confusion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Tue Jan 13, 2009 11:14 pm</p><hr />
]]></content>
</entry>
</feed>