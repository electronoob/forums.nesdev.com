<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=4052" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-04-22T05:32:28-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=4052</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-04-22T05:32:28-07:00</updated>
<published>2008-04-22T05:32:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32918#p32918</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32918#p32918"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32918#p32918"><![CDATA[
What you all says applies with the marker byte on X Pos + Attribute + Tile #, or with it only on Tile # ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Apr 22, 2008 5:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2008-04-21T14:46:58-07:00</updated>
<published>2008-04-21T14:46:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32893#p32893</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32893#p32893"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32893#p32893"><![CDATA[
Rendering doesn't occur immediately after evalutaion of those sprites, though.  Especially not if only 3 sprites on the line are found.  There'd be a gap between when sprite 63 is evaluated and when the first in-range data is fetched.<br /><br />Though I'm sure it still syncs up in a similar fashion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Apr 21, 2008 2:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-04-21T13:12:57-07:00</updated>
<published>2008-04-21T13:12:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32891#p32891</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32891#p32891"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32891#p32891"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />Then again blargg is apparently getting steady results with only 3 sprites when I calculated you'd need 5 sprites -- so perhaps I'm being overly cautious.<br /></div><br />Three sprites at the end pass for all cases. This is at the end of evaluation. The --##- line shows which bytes are the key (#) and not (-). The R line shows when the $2004 reads occur. Slide it around and one always falls on a #.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   v-----evaluation-------vv------rendering-------v<br />...YYTTAAXXYYTTAAXXYYTTAAXXYTAXXXXXYTAXXXXXYTAXXXXXYFFFFFFFYFFFFFFFYF...<br />...--######--######--######-#######-#######-#######------------------...<br /> R                    R                    R</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Apr 21, 2008 1:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2008-04-21T12:11:02-07:00</updated>
<published>2008-04-21T12:11:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32889#p32889</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32889#p32889"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32889#p32889"><![CDATA[
I don't see why having there be an integer number of dots between polls is benefitial.  It doesn't matter that 3.2 isn't an even number -- it's still best to have the smallest gap between polls.  That gives you the best chance of hitting a window of any size.<br /><br />The only number that would be bad is a multiple of 8 (in which case if you miss one sprite, you'll miss all of them because you'll hit each sprite at the same point).  Since 22.4 (3.2 * 7) is not divisible by 8, I don't see a problem.<br /><br />Because the PAL CPU is slower, you'll probably need at least 1 more sprite to get steady results.  Then again blargg is apparently getting steady results with only 3 sprites when I calculated you'd need 5 sprites -- so perhaps I'm being overly cautious.<br /><br />I'm quite sure that even in a worst case scenario, though, using all 8 sprites and the normal 7 CPU cycle loop will work just fine even on PAL.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Apr 21, 2008 12:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lft]]></name></author>
<updated>2008-04-21T11:01:33-07:00</updated>
<published>2008-04-21T11:01:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32882#p32882</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32882#p32882"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32882#p32882"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />This is loop is 10 clocks, also a multiple of 5:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:   bit 0     ; 3<br />        cmp $2004 ; 4<br />        bne loop  ; 3</div><br /></div><br /><br />That's true, but it takes 10 cycles between every read, so it will require more sprites in order to guarantee a hit, compared to my loop. But we'd have to draw a timing diagram for the PAL case to find out if it crosses the 8-sprite limit or not, and that means work...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3519">lft</a> — Mon Apr 21, 2008 11:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-04-21T09:03:30-07:00</updated>
<published>2008-04-21T09:03:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32879#p32879</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32879#p32879"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32879#p32879"><![CDATA[
This is loop is 10 clocks, also a multiple of 5:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:   bit 0     ; 3<br />        cmp $2004 ; 4<br />        bne loop  ; 3</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Apr 21, 2008 9:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lft]]></name></author>
<updated>2008-04-21T07:55:34-07:00</updated>
<published>2008-04-21T07:55:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32877#p32877</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32877#p32877"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32877#p32877"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />However, one sad thing is that they are only valable on NTSC, as PAL doesn't have 3 dots per cycle, but 3.2, or in other word while the CPU run 5 cycles the PPU run 16 pixels, and not 15 as in NTSC. So the 7 cycle loop would be a non integer number of PPU cycles (22 + 2/5), completely screwing the thing up. The only way to get integer number of pixels on PAL is to have a loop whose cycles in a multiple of 5, since a 5-cycle loop sound impossible we'd have to make a 10-cycle loop that reads $2004, and catch a value each 32 PPU cycles, which is each 16 fetches. I don't know if 8 sprites are enough at all in that case.<br /></div><br /><br />But what if you write the loop like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">                lda #$fe<br />find_marker:    cmp $2004<br />                nop<br />                beq found<br />                cmp $2004<br />                bne find_marker<br />found:          ...<br /></div><br /><br />The loop takes 15 cycles, which is divisible by 5, but the maximum delay between bus peeks is 8 cycles. This way, 8 sprites might be sufficient on a PAL system as well. Anyone feel like working out a new diagram? =)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3519">lft</a> — Mon Apr 21, 2008 7:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-04-19T14:29:48-07:00</updated>
<published>2008-04-19T14:29:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32827#p32827</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32827#p32827"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32827#p32827"><![CDATA[
My tests focus on using this to delay enabling PPU rendering. For that, 3 sprites work very reliably, and 2 sprites work decently (a little more variance in timing). I haven't tried it for mid-rendered-frame switches yet.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Apr 19, 2008 2:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-04-19T13:23:04-07:00</updated>
<published>2008-04-19T13:23:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32823#p32823</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32823#p32823"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32823#p32823"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I'm not that sure. All 256 sprites are fetched every scanline, no matter if you're reading $2004 or not. So any sprite below the marker ones would also be fetched.<br /></div><br />It's 64 sprites, not 256... =) Anyway, only the Y coordinate of every sprite is fetched every scanline, the other values are only fetched if the Y coordinate indicates it's in range for the next scanline. So it's safe to use the key value for X coordinates after the tricky spot.<br /><br />Anyway, I think this is great. It probably is just a matter of using a value that doesn't affect your X coordinates very much. In some aspects this is better than sprite 0 hits, such as reusability, but there's the big disadvantage of wasting up to 8 sprites, instead of only one.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Apr 19, 2008 1:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-04-19T10:11:11-07:00</updated>
<published>2008-04-19T10:11:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32819#p32819</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32819#p32819"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32819#p32819"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />To elaborate further, you would be able to use $E3 for X/attributes for sprites below your marker sprites (kind of like how you can break the MMC3 rules once you're no longer using the IRQ counter -- once you already found your marker tiles, you can break the "can't use $E3 rule").<br /></div><br />I'm not that sure. All 256 sprites are fetched every scanline, no matter if you're reading $2004 or not. So any sprite below the marker ones would also be fetched.<br /><br />Also, your timings diagrams are great, you did an excellent job ! However, one sad thing is that they are only valable on NTSC, as PAL doesn't have 3 dots per cycle, but 3.2, or in other word while the CPU run 5 cycles the PPU run 16 pixels, and not 15 as in NTSC. So the 7 cycle loop would be a non integer number of PPU cycles (22 + 2/5), completely screwing the thing up. The only way to get integer number of pixels on PAL is to have a loop whose cycles in a multiple of 5, since a 5-cycle loop sound impossible we'd have to make a 10-cycle loop that reads $2004, and catch a value each 32 PPU cycles, which is each 16 fetches. I don't know if 8 sprites are enough at all in that case.<br /><br />Also I cannot try anything on hardware because I have no EPROM programmer nor EPROMs, something should test this with powerpak probably (since it's not mapper related it should be trustable).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Apr 19, 2008 10:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-04-19T10:15:32-07:00</updated>
<published>2008-04-19T10:06:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32818#p32818</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32818#p32818"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32818#p32818"><![CDATA[
Disch, very nifty scheme. Seems to work with only 3 sprites set aside for it. Plus, a "key" of $00 instead of $E3 seems to work just as well. With the last 3 sprites at line Y, I'm able to have all the other sprites at Y+1; the other 3 bytes of all 256 sprites are filled with the key value. I haven't written a thorough test, but this one at least runs for 255 frames and adjusts the delay before starting polling for each frame. It looks like for some values of Y, the timing can vary up to around 50 PPU clocks, probably when enabling sprite rendering at more pathological times during the scanline (my test waits a scanline after enabling sprite rendering, before polling, otherwise I get much worse glitches).<br /><br />Let's discuss this on #nesdev on EFNet, if anyone's around...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Apr 19, 2008 10:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2008-04-19T08:01:18-07:00</updated>
<published>2008-04-19T08:01:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32816#p32816</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32816#p32816"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32816#p32816"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Yeah but then you couldn't write to $2007 during that time, which is as far I know the only real reason to "extend VBlank". Hide scrolling glitches maybe ? Bleh, not worth the trouble mentionned above.<br /></div><br /><br />The thing that makes turning the PPU on late hard is that the scroll gets funked up unless you set it explicitily with crafty $2006 writes and turn it on at a very specific scanline.  This can't normally be done without timed code because you have no way of knowing what scanline the PPU is on, and thus can't adjust your scroll appropriately.<br /><br />However with this method, you can use the sprite trick to find the desired scanline, then fix the scroll and turn on the BG, letting you turn the PPU on late without any scroll glitches.<br /><br />Example:  You want to turn the PPU on 20 scanlines late.  If you give yourself 2 scanlines padding, this means you can leave the PPU off for 18 extra scanlines:<br /><br />- turn PPU off in VBlank<br />- allow your writes to spill out past end of VBlank (but don't go past scanline 18)<br />- once your writes are complete, turn on sprite rendering (but not BG rendering)<br />- begin looking for marker sprites<br />- once marker sprites are found, you know what scanline you're on... so you can now adjust your scroll and turn BG rendering on.<br /><br /><br />To elaborate further, you <em>would</em> be able to use $E3 for X/attributes for sprites below your marker sprites (kind of like how you can break the MMC3 rules once you're no longer using the IRQ counter -- once you already found your marker tiles, you can break the "can't use $E3 rule").<br /><br />$E3 would still be a forbidden Y coord for any sprite, though, simply because all the Y coords are fetched every scanline<br /><br /><br />You might be able to use an attribute un-friendly value like $FE as the marker value.  This would leave more gaps in your window since you'd only be able to catch X coord and tile fetches, so to compensate you'd have to have more marker sprites (probably all 8).  I don't feel like doing the math to figure out the minimum though.<br /><br />Also I'm not so sure about the 3 sprite thing anymore -- you might need more.  I may have been tired when I came up with those numbers.  I'll double-check my math and repost later.<br /><br />EDIT:<br /><br />I was right -- 3 sprites isn't enough.  I must've been tired.<br /><br />Here is some crap I did in notepad:<br /><br />--------------------------------------------------<br /><br />Y = Y coord fetch<br />A = attribute fetch<br />T = tile fetch<br />X = X coord fetch<br />- = bad/unimportant fetch<br />O = OK to catch here<br />u = OK to catch here only if attribute friendly value used<br /><br /><br />CMP $2004<br />BNE loop    = 7 cycles = 21 dots<br /><br /><br />Trying to catch marker during sprite evaluation (dots 64-255):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">YYTTAAXXYYTTAAXXYYTTAAXXYYTTAAXXYYTTAAXXYYTTAAXXYYTTAAXXYYTTAAXX &lt;-- fetches<br />--OOuuOO--OOuuOO--OOuuOO--OOuuOO--OOuuOO--OOuuOO--OOuuOO--OOuuOO<br />-                    u                    O                       &lt;-- check every 21 dots<br /> -                    O                    O                      &lt;--  and every possible sync sequence<br />  O                    O                    u<br />   O                    -                    u<br />    u                    -                    O<br />     u                    O                    O<br />      O                    O                    -<br />       O                    u                    -<br />        -                    u                    O<br />         -                    O                    O<br />          O                    O                    u<br />           O                    -                    u<br />            u                    -                    O<br />             u                    O                    O<br />              O                    O                    -<br />               O                    u                    -<br />                -                    u                    O<br />                 -                    O                    O<br />                  O                    O                    u<br />                   O                    -                    u<br />                    u                    -                    O<br /></div><br /><br />This means:<br />- would need minimum of 5 marker sprites for attribute friendly key values ($E3).  This is true because there is always an 'O' or 'u' in the first two checks.  And the first two checks examine 5 sprites.<br /><br />- would need all 8 marker sprites for attribute unfriendly key values ($FE).  This is true because all three checks are needed (sometimes an 'O' isn't found until the 3rd check), and the third check requires all 8 sprites.<br /><br /><br />---------------------------------------------------<br /><br />Trying to catch marker during sprite fetches (dots 256-319):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">YTAXXXXXYTAXXXXXYTAXXXXXYTAXXXXXYTAXXXXXYTAXXXXXYTAXXXXXYTAXXXXX<br />-OuOOOOO-OuOOOOO-OuOOOOO-OuOOOOO-OuOOOOO-OuOOOOO-OuOOOOO-OuOOOOO<br />-                    O                    u<br /> O                    O                    O<br />  u                    O                    O<br />   O                    -                    O<br />    O                    O                    O<br />     O                    u                    O<br />      O                    O                    -<br />       O                    O                    O<br />        -                    O                    u<br />         O                    O                    O<br />          u                    O                    O<br />           O                    -                    O<br />            O                    O                    O<br />             O                    u                    O<br />              O                    O                    -<br />               O                    O                    O<br />                -                    O                    u<br />                 O                    O                    O<br />                  u                    O                    O<br />                   O                    -                    O<br />                    O                    O                    O<br /></div><br /><br />This means:<br />  - Only 5 marker sprites needed, even with attribute unfriendly value!<br />  - Additionally, the X coord is always caught!  So don't need to rely on a tile or attribute fetch!<br /><br /><br />The problem with catching during this part of the scanline is that the other part is run first, so you may catch your desired value there rather than here, which would make finding HBlank more difficult with timed code alone -- you'd need another method.<br /><br />-----------------------------------------------<br /><br /><br /><br />Once you find your scanline, you can sync to HBlank by looking for two consecutive $FF values read from $2004 (since the first 64 dots in a scanline will give $FF).  Time wasted between these checks should be minimalized to avoid muckups.  So something like the following code could be used:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$FE  ; marker value<br />LDX #$FF  ; FF to sync with HBlank<br /><br />find_marker:<br />   CMP $2004<br />   BNE find_marker<br /><br />find_hblank:<br />   CPX $2004<br />   BNE find_hblank<br />   CPX $2004<br />   BNE find_hblank<br /><br />; here, you are between dots 36 and 57 on your desired scanline.<br />;  you can then use some timed code to find HBlank, where you'd reset your scroll<br />;  and turn BG rendering on<br /></div><br /><br />Since catching marker during sprite fetches doesn't require the key value to be attribute friendly, $FE seems like the ideal choice, since it won't conflict with attributes, it's not a good X coord (sprites that would have that coord would be mostly invisible anyway), and it will never be a Y coord ($F0 or $F8 are just as good to hide off-screen sprites)<br /><br />One thing to note about this HBlank sync method is that $FF can be read back during dots 256-319 if less than 8 sprites are found to be in range on the scanline.  Since this increases the sync window, I would recommend you have 8 marker sprites just to fill this out so that you won't ever get $FF until the start of the next scanline.  This will make HBlank syncing easier.<br /><br /><br />Just remember the rules:<br /><br />1)  you need 5 marker sprites (though I recommend 8 to make HBlank syncing more reliable)<br />2)  All marker sprites must be consecutive in OAM*<br />3)  All marker sprites must be found to be in-range.  Don't let them get bumped off by visible sprites with higher priority!<br />4)  Use $FE as a key value -- give all your marker sprites an X coord of $FE<br />5)  Marker sprites attribute and tile can be anything (but you might as well use $FE as the tile and have it be transparent)<br />6)  Never use $FE as a Y coord for any sprite<br />7)  Don't use $FE as a Tile number or X coord of any sprite until you're done with all these checks for the frame<br />8)  Refrain from using $FF as a Y coord to hide off-screen sprites to make HBlank syncing more reliable (don't want Y coords to be read back as false positives).  $F0 or $F8 are just as good (in fact... better!)<br />9)  Marker sprites should be relatively high priorty (low sprite numbers).  Sprites 1-9 are good.<br /><br /><br />*rule 2 isn't really true.  As long as all marker sprites are found to be in range consecutively (that is, you can have sprites 1,2,3,4,6 be marker sprites, as long as sprite 5 is not in-range on the scanline).  But that's a hypertechnicality.  It's best to just have them consecutive... so I would say treat that like a rule.<br /><br /><br /><br />With this new info -- the restrictions don't seem nearly as bad.  Attribute conflicts were the biggest problem, IMO, and now that that's out of the way, the biggest problem is making sure sprites don't end up with an X coord of $FE.  If this actually <em>works</em> (read:  I didn't test any of this, it's all still theoretical at this point... until someone actually makes a ROM to try this) I could see this being <em>very</em> useful.<br /><br /><br />EDIT AGAIN:<br /><br />Crap -- just realized that you could get false positives if marker sprites are found to be in range as a 9th+ sprite (which could happen because the PPU gets funky after 8 sprites are found).  To avoid this... I added rule 9 above.<br /><br /><br />ONE LAST EDIT:<br /><br />I figured this is given, but I should mention it anyway.<br /><br />This stuff would be applicable to NTSC only.  You could do a similer thing on PAL, but due to the slower CPU clock you'd probably need more thank 5 marker sprites and some other timing stuff would be different.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat Apr 19, 2008 8:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-04-19T04:06:22-07:00</updated>
<published>2008-04-19T04:06:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32814#p32814</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32814#p32814"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32814#p32814"><![CDATA[
In my opinion, these limitations are no worse than, say, the ones MMC3's scanline counter imposes you. I think this idea has potential, specially if it's possible with only 3 sprites. Meaning you can still have some sprite action at the same point.<br /><br />Any tile could be made transparent, so the number usued shouldn't matter for the tile index. And since the tile is transparent anyway, the ettributes do not matter either. The only serious limitation is the X coordinate. If it was possible to pick an unlikely attribute combination that placed the sprites near the left or roght edges of the screen, that would be great.<br /><br />A value of 0 would be ideal for the X coordinate, but preventing the use of unflipped sprites in front of the background using palette 0 could be a problem... On the other hand, since it's just one of the palettes, there might be a way to avoid a situation like this, through careful use of that palette. It could, for example, be used for a HUD or such things, but not be available for general use by game objects.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Apr 19, 2008 4:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-04-19T00:51:26-07:00</updated>
<published>2008-04-19T00:51:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32807#p32807</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32807#p32807"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32807#p32807"><![CDATA[
Oh yeah. This is interesting, but terribly impratical. Even if it worked, the limitations are horrible. Cannot use tile $e3 is okay since it would most likely be transparent, but cannot use attributes $e3 and X-Pos $e3 for real sprites seems like a real limitation. Okay, you could cheaply substitute X-Pos $e3 for $e4, hoping nobody notices it. But for attributes, that's more a pain. However, you could just made all your sprites always in front of BG no matter what (most games does this), so the attribute will never be $e3 because that's back of background.<br /><br />So we can kind of work arround those limitations, but then if you reserve the last n sprites (4 or 8 ?) for this, then they can be bypassed by normal sprites on the same scanline, and wouldn't be fetched. So they have to be front priority, and if there is 8 of them "hide" other sprites (this could actually be usefull in some cases).<br /><br />So yeah if that works it could be usefull in a case or two, but is really hard to work on, since it imposes limitations on valid sprites.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You could do that by putting the marker sprites near the top of the screen, then after you finish VBlank, enable sprite rendering only (leave BG rendering disabled) -- then poll $2004 to find the scanline and once it's found, turn BG rendering on.<br /></div><br />Yeah but then you couldn't write to $2007 during that time, which is as far I know the only real reason to "extend VBlank". Hide scrolling glitches maybe ? Bleh, not worth the trouble mentionned above.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Apr 19, 2008 12:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2008-04-18T18:53:58-07:00</updated>
<published>2008-04-18T18:53:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32802#p32802</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32802#p32802"/>
<title type="html"><![CDATA[Super Cars / $2004 reads]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4052&amp;p=32802#p32802"><![CDATA[
I just thought of a way to make this work.<br /><br />Rather than hooking the Y coord, which is next to impossible, perhaps you could hook the X+attribute+tile fetches.<br /><br />Consider the following:<br /><br />1)  OAM Y coords are fetched<br />2)  If Y coord is in range, tile, attribute and X coord are fetched successively<br />3)  Next Sprite's Y coord is fetched afterward<br />4)  Process repeats<br /><br /><br />Since tile+X+attribute fetches are all consecutive, this gives you a 6 dot window instead of a 2 dot window to catch the desired value.  Not much of an improvement on its own, but if you have 8 identical sprites on the same line, this gives you about a 6*8=48 dot window (with 16 of those dots being the Y coord -- so not quite 48 dots)<br /><br />If the tile ID, X coord, and attribute fetches are all the same key value -- catching this window is a good possibility.  Finding HBlank from here could involve the Micromachines style "look for FF" or whatever it does, but I don't know how reliable that'd be.<br /><br /><br />Blah... I'm not organizing my thoughts very well in this post... but basically here's my idea<br /><br />- reserve a key value in OAM.  "$E3" is probably good because this is something the attribute byte can represent (doesn't use any unimplimented bits)<br /><br />- reserve 8 sprites (not just 1) to be the marker sprites<br /><br />- make sure these sprites are stored consectutively in OAM (like reserve the last 8 sprites or something)<br /><br />- give all these sprites an X position of $E3, set their attributes to $E3, and set them to draw tile $E3, and put them all on the same Y coord (note:  Y cannot be $E3!)<br /><br />- don't let ANY OTHER sprite have any value of E3.  This means you can't let sprites have X coords of E3.. nor can they use tile E3, etc, etc.  Doing so may allow false positives.<br /><br /><br />Then... at any time $2004 returns $E3, you know it's fetching one of your key tiles, which means you found the desired scanline.  And since there's multiples sprites, the window is bigger, so you'll be able to reliably catch the sprite every time.<br /><br />Note that you can't use the Y coord as the key value.  It may seem like a good idea since this would have the window be gap-less, but since Y is fetched on every scanline, it would lead to false positives.  You also can't use values the attribute bits can't represent.  $E4 is no good, for example, since this would be stored in OAM (and read back) as $E0.<br /><br /><br /><br />Actually I don't even think you'd need 8 marker sprites...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$E3<br />loop:<br />  CMP $2004    ; 4 cycles &#40;6 fetches&#41;<br />  BNE loop       ; 3 cycles &#40;4.5 fetches&#41;<br /></div><br /><br />So you'd be polling every 10.5 fetches -- which means you would only need 3 marker sprites to ensure you don't skip over the window.<br /><br /><br /><br />I'm too lazy to write a test ROM to try it out ... but in theory it should work.  I don't think it'd be any better than sprite-0 hit for most things, though.  The only way I can see this being a good option is for turning the PPU on late (to extend VBlank).<br /><br />You could do that by putting the marker sprites near the top of the screen, then after you finish VBlank, enable sprite rendering only (leave BG rendering disabled) -- then poll $2004 to find the scanline and once it's found, turn BG rendering on.<br /><br />It's also repeatable.  That is, you can put marker tiles on multple scanlines and do the check several times (but they would have to be at least 9+ scanlines apart, or 17+ if you're using 8x16 sprites).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Apr 18, 2008 6:53 pm</p><hr />
]]></content>
</entry>
</feed>