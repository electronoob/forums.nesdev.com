<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Generic compression on NES - *done*</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Generic compression on NES - *done*</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8045">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8045</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Tue Feb 26, 2013 3:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for fixing it.<br />I tried compiling CompressTools (1.1) using GCJ, and it compiles, but I get the following error when I run it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">block = 0<br />java.util.ConcurrentModificationException<br />&nbsp; &nbsp;at java.util.AbstractList$3.checkMod(libgcj.so.13)<br />&nbsp; &nbsp;at java.util.AbstractList$3.next(libgcj.so.13)<br />&nbsp; &nbsp;at java.util.AbstractList$1.next(libgcj.so.13)<br />&nbsp; &nbsp;at java.util.ArrayList.addAll(libgcj.so.13)<br />&nbsp; &nbsp;at java.util.ArrayList.addAll(libgcj.so.13)<br />&nbsp; &nbsp;at compressTools.RAM_LZ77.addToSlidingWin(RAM_LZ77.java:276)<br />&nbsp; &nbsp;at compressTools.RAM_LZ77.DecodeBlock(RAM_LZ77.java:260)<br />&nbsp; &nbsp;at compressTools.RAM_LZ77.Decode(RAM_LZ77.java:204)<br />&nbsp; &nbsp;at compressTools.Main.main(Main.java:185)</div><br />This happens in the RAM_LZ77 method only, and it happens on <em>nearly</em> all data that I tried (but not all).<br /><br />That aside, here's my contribution, RLEINC1 and RLEINC2 for CompressTools. <!-- m --><a class="postlink" href="http://bisqwit.iki.fi/src/rleinc_compresstools.zip">http://bisqwit.iki.fi/src/rleinc_compresstools.zip</a><!-- m --><br />I would submit a patch instead, if you had a Git repository for it.<br />This marks the first time ever that I write something in Java and publish it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Feb 27, 2013 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This marks the first time ever that I write something in Java and publish it.</div><br />Congratulations for this ! Java is a really cool language, I hope you'll continue to use it for other things.<br /><br />Also, thank you for your submission. The format is not described in the source which is a problem but you explained it very well in your post so I guess I could just copy/paste your post in the source before including it with CompressTools officially. Is it ok with you ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I would submit a patch instead, if you had a Git repository for it.</div><br />Well I'm not familiar with this kind of stuff, but you're right that it would be a neat idea to have a repository, if several people starts to use this and it gets updated regularly. It would also allow people to contribute to the project without contacting me explicitly, and to continue the project if I die of a heart attack. (since it's probably the first &quot;compression compiler&quot; ever made, I never heard of anything like this before).<br /><br />It is funny how the project evolved because originally I just made this to see which compression algorithms works better for which data, and finally thefox had the idea to make it usable directly in the compiling process, by fixing the used algorithm and forcing the output file name.<br />The next logical extension would be to scrap off those &quot;header blocks&quot; which are made of just one byte and replace them by define statements. It would be nicer, however I did it the way it is currently made to have a &quot;one to one&quot; compression, i.e. each algorithm compresses a bidirectional byte array into another bidirectional byte array, of different dimensions. I like this orthogonal approach. However I'd definitely have to think of a way to make the &quot;define&quot; approach and still have things be nice and clean. I am open to suggestions too.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This happens in the RAM_LZ77 method only, and it happens on nearly all data that I tried (but not all).</div><br />I don't quite understood how you managed to get that problem, because I tried the compiler on many data and never encountered into a similar problem. (as far as I can remember)<br />Apparently this is a problem with the &quot;addAll&quot; function. I don't see how it can be a problem for java as it's always possible to add data to an existing vector (i.e. no possible index out of bounds exception or any crap like this).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Wed Feb 27, 2013 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Java is a really cool language, I hope you'll continue to use it for other things.</div><br /><br />Nah, I felt dirty enough using it for just this. <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, thank you for your submission. The format is not described in the source which is a problem but you explained it very well in your post so I guess I could just copy/paste your post in the source before including it with CompressTools officially. Is it ok with you ?</div><br /><br />That is fine.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This happens in the RAM_LZ77 method only, and it happens on nearly all data that I tried (but not all).</div><br />I don't quite understood how you managed to get that problem, because I tried the compiler on many data and never encountered into a similar problem. (as far as I can remember)<br />Apparently this is a problem with the &quot;addAll&quot; function. I don't see how it can be a problem for java as it's always possible to add data to an existing vector (i.e. no possible index out of bounds exception or any crap like this).</div><br /><br />I can't even begin to guess the cause of that problem, so you're on your own on this, sorry. I just reported what I got. If it helps to know, it was a 64-bit system that I compiled it on, and this was the command line: &quot;gcj --main=compressTools.Main -o com -g compressTools/*.java&quot;  (optimization / debugging options made no difference). gcj is version 4.7.2, and it is the default installation that comes with gcj when I say &quot;apt-get install gcj-jre&quot; in Debian testing. It also installed ecj, but I don't know for what purpose.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Mar 02, 2013 6:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just realized that appack.exe does not actually produce self-extracting executables like aPACK does. I have thus added appack.exe results to my previous table, and added a note of this in the executable compression tests table.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Mar 03, 2013 1:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />By the way, appack.exe results also have a 24 byte header that's not required for decompression.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jul 21, 2013 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Version 2.0 of CompressTools is now released !<br /><br />Improvements that were made :<br />- Strings and chars can use all unicode chars, and they can be mapped with bytes.<br />- Escape sequences are now implemented within strings.<br />- The StaticDictionary algorithm is now much improved, it is still the slowest, especially for large data where it can take a dozen of minutes to compress, however, it is still &quot;usuable&quot;, as opposed to it's previous version.<br />- A tool to convert from plaintext to input scripts has been made.<br />- No single byte blocks added any longer for compression parameters, now they are handled as defines<br /><br />However, be careful, there is some incompatibilities with scripts from versions 1.x, notably with special characters in strings and with .map directives.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Thu Aug 15, 2013 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, this seems pretty neat and I ran the example (which spat out some warnings about unknown escape sequence \*) but I don't understand how I'm supposed to use the files that it outputs.  Where is the 6502 decompression code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Aug 16, 2013 12:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are supposed to fully understand how the algorithm you pick works and to write your own decompression code. It is not an &quot;advanced&quot; tools for nothing <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> You have a java decompression code available.<br /><br />There is multiple reasons I did it this way. First, I don't want to restrict usage of CompressTools for the NES. Second, there is more than one way to decompress data using a known algorithm, for example there might be a fast way that uses a lot of RAM and a slow way that uses few RAM. Finally, it's extremely hard to make 6502 ASM code generic, as it will not even port from one assembler to another, let alone be easily included in someone's project.<br /><br />The resulting generated files can however easily be &quot;.include&quot;ed with most assemblers, as there is options to change how the data is defined (with .db, .byte, etc...) and at worse you can always include it as binary (.incbin) with a table of pointers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Fri Aug 16, 2013 5:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">You are supposed to fully understand how the algorithm you pick works and to write your own decompression code. It is not an &quot;advanced&quot; tools for nothing <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> You have a java decompression code available.<br /><br />There is multiple reasons I did it this way. First, I don't want to restrict usage of CompressTools for the NES. Second, there is more than one way to decompress data using a known algorithm, for example there might be a fast way that uses a lot of RAM and a slow way that uses few RAM. Finally, it's extremely hard to make 6502 ASM code generic, as it will not even port from one assembler to another, let alone be easily included in someone's project.<br /><br />The resulting generated files can however easily be &quot;.include&quot;ed with most assemblers, as there is options to change how the data is defined (with .db, .byte, etc...) and at worse you can always include it as binary (.incbin) with a table of pointers.</div><br /><br />I guess that make sense ... Did you choose only algos that are feasible on 6502?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Aug 16, 2013 6:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Because the 6502 is turing complete, any algorithm that is feasible with a computer is feasible with 6502.<br /><br />However I picked algorithms that are feasible easily and that would take relatively few memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Aug 16, 2013 7:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Because the 6502 is turing complete, any algorithm that is feasible with a computer is feasible with 6502.</div><br />I'm pretty sure that by &quot;feasible&quot; he meant algorithms with reasonable memory consumption that won't hog the CPU for long periods of time, that can coexist with game engines.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 16, 2013 8:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Because the 6502 is turing complete</div><br />Nothing is Turing complete, as a Turing machine has unbounded memory. Adding a physical limitation to a Turing machine results in a linear bounded automaton, and what you probably meant is that the 6502 is LBA-complete. This brings me to the second half of your comment:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I picked algorithms [...] that would take relatively few memory.</div><br />Even computer vs. NES is a big difference. Apple II, Commodore 64, Atari 800, and FDS have a relatively large RAM that allows fairly distant references to previous compressed data in LZ77-style algorithms.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Fri Aug 16, 2013 10:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Because the 6502 is turing complete</div><br />Nothing is Turing complete, as a Turing machine has unbounded memory. Adding a physical limitation to a Turing machine results in a linear bounded automaton, and what you probably meant is that the 6502 is LBA-complete. This brings me to the second half of your comment:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I picked algorithms [...] that would take relatively few memory.</div><br />Even computer vs. NES is a big difference. Apple II, Commodore 64, Atari 800, and FDS have a relatively large RAM that allows fairly distant references to previous compressed data in LZ77-style algorithms.</div><br /><br />This.  But my biggest concern is ROM - can the decompression algorithm be small enough to still get a net savings?  This project seems to presume that you're willing to use 2 or more compression algorithms for your different types of data.  All the more reason to be careful about cost-versus-return not only in net byte savings but man-hours spent researching and developing the code.<br /><br />And my second biggest one is - can it use little to no RAM?  I'm using extended SRAM but I *still* am miserly about it.  I'm less concerned about speed.  If you're decompressing text, then you're usually decompressing 20-100 characters at a time.  That could even be staggered across frames so no hiccups.  For a map, you're probably doing it between map switches.  Unless you're Metroid, or SMB, and then you're using an efficient but restrictive proprietary format.  In my mind, a generic compression algorithm will always either need more RAM, or be slow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Aug 16, 2013 12:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm still a huge fan of APLIB.  APLIB is very good at what it does, it often beats ZIP.  It's a decompression format that relies on references to previously decompressed data, so you need enough RAM to hold the complete decompressed file.  But you don't need much more than that, besides a few variables.<br />When you're constrained for RAM, you might not want to use compression formats that require you to hold the entire decompressed data in memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Aug 16, 2013 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was half kidding about the turing complete sentence. I just like to remember this fact to people who seems to think the 6502 CPU is a limitation. Like I like to turn down people who claim 6502 can't do multiplication and division  <img src="./images/smilies/icon_cool.gif" alt="8-)" title="Cool" /> <br /><br />Back on topic, @sonder, your concerns are very close to mines when I decided to create CompressTools (see my original post), because there is no tool available that comes any close to this.<br /><br />The constraint that appears when compressing something for a NES game is completely different than the constraints for a C64 tech demo for instance, even if both uses the same CPU.<br /><br />Almost all of the algorithm can decompress with almost no RAM if you divide your data into small blocks (the whole point of CompressTools was to make this &quot;block&quot; system).<br /><br />The blocks could represent a sentence of text, a screen of map data, a row of map data, a column of map data, or a musical track, or even a 6502 routine (you'll have to pre-assemble it or write directly in hex though - it would be amazing to do compile-compress as a single step but it would increase the complexity of CompressTools dramatically and make it too NES dependant).<br /><br />In all algorithms exept RAM-LZ77, you only need RAM for a single block and several variables in the worst case. In some cases you could even strip the buffer for a single block if you access bytes sequentially, but then it's not pseudo-random access any longer.<br /><br />When it comes to ROM, the arrays that are needed for decompression are already taken into account for the compression ratio, but not the decompression code. It would however be doable in a few hundreds bytes at the very worst. LZ based algorithms are probably the most complicated ones of the lot to implement so they would probably be the worst in this regard, but I made sure to implement simple variants of them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> it often beats ZIP</div><br />(I'm just being a bastard on purpose) ZIP is not a compression algorithm, but a packaging archive format, supporting mutiple algorithm for every file. You could have a completely uncompressed ZIP for instance.<br />I doubt any ZIP compressor does the trick to try each algorithm on each file and takes the best one, trashing the others. Well CompressTools does that internally for some algorithms that have variable bit sizes for stuff. It just uses the optimal bit size.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>