<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=8383" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-12-07T17:28:32-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=8383</id>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-12-07T17:28:32-07:00</updated>
<published>2011-12-07T17:28:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87268#p87268</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87268#p87268"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87268#p87268"><![CDATA[
I use macros all the time, of course it's not absolutely necessary, but it helps a lot.  It's just text substitution (with variables), and for me, it makes code easier to read and easier to edit.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Wed Dec 07, 2011 5:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-12-07T17:25:44-07:00</updated>
<published>2011-12-07T17:25:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87266#p87266</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87266#p87266"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87266#p87266"><![CDATA[
Up until a while ago I didn't use macros at all, but more recently I've been learning to appreciate their value. Like some have already said, unrolling repetitive tasks is a great use for macros. I also use them for interfacing with mappers, where small series of register writes are necessary to accomplish tasks.<br /><br />I have also used macros to define subroutines that I wanted to place in the same file but needed to be distant from each other in the ROM. That would probably be classified as macro abuse though, because I'm sure some assemblers have better solutions for this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 07, 2011 5:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Ian A]]></name></author>
<updated>2011-12-07T17:05:13-07:00</updated>
<published>2011-12-07T17:05:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87264#p87264</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87264#p87264"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87264#p87264"><![CDATA[
I use macros quite a bit.<br /><br />More standard applications are for unrolled loops, or for small sections of code that repeat so I can use a quicker addressing mode, though this is usually combined with the whole unrolled loop deal...<br /><br />I actually have a section of my code that is partially generated by a macro.  It was much cleaner to have the macro do the work than copy, paste and edit, especially if I went back to change it later.<br /><br />Also:<br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />I think macros are absolutely essential. For me it mostly comes down to keeping the same functionality in only one place, e.g. handling multiple directions in a scrolling engine or an object spawner often requires very similar code for each direction, but not quite the same. If using copy &amp; paste, it really sucks to update all the routines separately if changes need to be made later.<br /><br />Also, many things, such as 16-bit arithmetic on 6502, don't suffer any kind of penalties when done with macros, as the code produced by the macros is/can be exactly the same as what would be done manually. They simply make the code easier to read and maintain.<br /></div><br /><br />+1<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4250">Ian A</a> — Wed Dec 07, 2011 5:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2011-12-07T13:30:27-07:00</updated>
<published>2011-12-07T13:30:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87252#p87252</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87252#p87252"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87252#p87252"><![CDATA[
speaking of repetitive SNES DMA codes, I came up with this:<br /><br /><!-- m --><a class="postlink" href="http://en.wikibooks.org/wiki/Super_NES_Programming/Animated_Sprites">http://en.wikibooks.org/wiki/Super_NES_ ... ed_Sprites</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Wed Dec 07, 2011 1:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hamtaro126]]></name></author>
<updated>2011-12-07T12:54:28-07:00</updated>
<published>2011-12-07T12:54:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87251#p87251</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87251#p87251"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87251#p87251"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I personally prefer banging out a quick C/Python/whatever script and INCBIN'ing it than worrying about learning some assembler's obtuse, non-portable, ad-hoc, limited, and often buggy macro language.<br /></div><br /><br />Including BINaries in the source code are usually for use if you want Characters. Name tables, Attribute tables, LUTs or palettes to be included inside code without mess! <br /><br />Otherwise it is meant for patchable code (or if not, it is a very bad practice)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Which reminds me - another case against macros is that they're deeply non-portable. Most pure asm code can easily be translated between assemblers without too much trouble; different assemblers, on the other hand, have wildly different macro languages and conversion between them is often non-trivial.<br /></div><br /><br />If I understand this, You said ''Macros cannot be converted to another format'' It is Partially True,<br /><br />But if you convert Macros to certain 65xxx assemblers or such (I.e. WLA-DX to CA65), You can convert easily as long as you know how they work!<br /><br />They're convertable, but not by tools, just by hand!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=287">Hamtaro126</a> — Wed Dec 07, 2011 12:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[adam_smasher]]></name></author>
<updated>2011-12-07T11:42:53-07:00</updated>
<published>2011-12-07T11:42:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87242#p87242</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87242#p87242"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87242#p87242"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />Also the argument "who needs macros" just because you've written a new assembler that doesn't support them is...   <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><br /></div><br />Funny, circumstantial <em>argumenta ad hominem</em> produce a similar response from me <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />At any rate, the claim was never "who needs macros?"; it was always "I've never needed macros! (and based on this observation, I suspect that maybe you don't as badly as you think you do)". <br /><br /><div class="quotetitle">Hamtaro126 wrote:</div><div class="quotecontent"><br />Macros are nessicary for DMAing stuff in SNES and GB code, as well as LUTs.<br /></div><br />Case in point: macros are not "necessary" for DMA on either the SNES or the GB - they only make DMA work very slightly tidier. And while they can certainly be useful for generating simple LUTs (again, not strictly necessary), I personally prefer banging out a quick C/Python/whatever script and INCBIN'ing it than worrying about learning some assembler's obtuse, non-portable, ad-hoc, limited, and often buggy macro language.<br /><br />Which reminds me - another case against macros is that they're deeply non-portable. Most pure asm code can easily be translated between assemblers without too much trouble; different assemblers, on the other hand, have wildly different macro languages and conversion between them is often non-trivial.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4826">adam_smasher</a> — Wed Dec 07, 2011 11:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-07T11:03:15-07:00</updated>
<published>2011-12-07T11:03:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87239#p87239</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87239#p87239"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87239#p87239"><![CDATA[
There are ways to compromise between the speed advantage of a macro and the size advantage of a subroutine. Say you have a macro that has a common short path and that usually branches across an uncommon longer path. You can put the short path in a macro and the long path in a subroutine.<br /><br />The data decompression code that's used in a few of my unreleased projects has a macro to pull one bit from a stream. The code to pull one bit from a 1-byte temporary buffer is short, and the code to load another byte into that buffer is longer. So I put the code to pull one bit into a macro, which calls a subroutine to get the next byte if needed. So in 7 of 8 cases, I save 12 cycles on a JSR/RTS.<br /><br />The 8-bit binary to decimal conversion routine in Concentration Room and Thwaite is unrolled with the help of a macro:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro bcd8bit_iter value<br />  .local skip<br />  cmp value<br />  bcc skip<br />  sbc value<br />skip:<br />  rol highDigits<br />.endmacro<br /><br />.proc bcd8bit<br />highDigits = 0<br />  pha<br />  lda #0<br />  sta 0<br />  pla<br /><br />  bcd8bit_iter #200<br />  bcd8bit_iter #100<br />  bcd8bit_iter #80<br />  bcd8bit_iter #40<br />  bcd8bit_iter #20<br />  bcd8bit_iter #10<br />  rts<br />.endproc<br /></div><br />To do this without a macro while retaining the same clarity, I'd have to use a lookup table and the X register.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 07, 2011 11:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hamtaro126]]></name></author>
<updated>2011-12-07T10:54:02-07:00</updated>
<published>2011-12-07T10:54:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87238#p87238</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87238#p87238"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87238#p87238"><![CDATA[
Macros are nessicary for DMAing stuff in SNES and GB code, as well as LUTs. They are also good for those easy-way-outs!<br /><br />PC Engine has a very good reason too for macros!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=287">Hamtaro126</a> — Wed Dec 07, 2011 10:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2011-12-07T09:50:14-07:00</updated>
<published>2011-12-07T09:50:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87236#p87236</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87236#p87236"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87236#p87236"><![CDATA[
I admit I never used macros, they are of no use for me.<br />Exept sutff like when you create a LUT by telling the formula to the assembler and make it in a loop, this should be the only times I've used macros.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Dec 07, 2011 9:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2011-12-07T09:07:30-07:00</updated>
<published>2011-12-07T09:07:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87234#p87234</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87234#p87234"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87234#p87234"><![CDATA[
Also the argument "who needs macros" just because you've written a new assembler that doesn't support them is...   <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Wed Dec 07, 2011 9:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-12-06T20:40:08-07:00</updated>
<published>2011-12-06T20:40:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87225#p87225</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87225#p87225"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87225#p87225"><![CDATA[
I think macros are absolutely essential. For me it mostly comes down to keeping the same functionality in only one place, e.g. handling multiple directions in a scrolling engine or an object spawner often requires very similar code for each direction, but not quite the same. If using copy &amp; paste, it really sucks to update all the routines separately if changes need to be made later.<br /><br />Also, many things, such as 16-bit arithmetic on 6502, don't suffer any kind of penalties when done with macros, as the code produced by the macros is/can be exactly the same as what would be done manually. They simply make the code easier to read and maintain.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Tue Dec 06, 2011 8:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[adam_smasher]]></name></author>
<updated>2011-12-06T13:49:22-07:00</updated>
<published>2011-12-06T13:49:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87219#p87219</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87219#p87219"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87219#p87219"><![CDATA[
In assembler, I see three primary uses for macros - MIPS-style pseudo-instructions or other small snippets of code; certain low-level speed-vs-size optimizations, such as loop unrolling or procedure inling; and to substitute for subroutines for reasons other than speed.<br /><br />More precisely, when I said that the value of macros are overstated, what I mean is:<br /><br />In the case of pseudo-instructions, the eye quickly adjusts to common idioms like "CLC; ADC". Anyone with any experience coding the 6502/65816 will immediately understand the intention of such code. For people without any experience on these chips, hiding the workings of the processor does them no good.<br /><br />Ultimately I think hyper-clarifying common idioms and small-scale code like that is unnecessary. Most of the time the difficulty in understanding code isn't in figuring out the meaning of very local, mechanical behaviour (adding, pushing arguments onto the stack, etc.), but in understanding the meaning of tricky algorithms or complex systems of interlocking parts - which requires more than a few cheap macros to document.<br /><br />(contrariwise, when I wrote <a href="https://github.com/adamsmasher/ema" class="postlink">a MIPS assembler</a>, I did indeed implement some basic macro functionality - partly because my programming language/assembler design made it very easy to, but more significantly because trying to code in MIPS without pseudo-instructions would drive a person nuts, its instruction set is so impoverished)<br /><br />In the case of pseudo-subroutines, these in almost all cases do more harm than good and constitute abuse.<br /><br />In the case of optimization (loop unrolling, procedure inlining, code generation), there is a case for them. But a part of me still says that, when speed is so critical that you're willing to sacrifice small and clean code for it, extreme care and understanding of the trade-offs are needed - and rather than pretend like that's not the case, one should put all the ugliness out on display in full, so that the trade-offs being made are fully evident.<br /><br />Kasumi's approach is interesting, but I think (?) fairly uncommon. I'd also argue that, unless the code is performance critical, the ability to logically divide of code into discrete chunks like that is precisely what calls for subroutines.<br /><br />So there's a case for macros, but it's not huge - probably not as large as the tendency to abuse them. As I said in the other thread, I personally never use them and get by just fine, and I don't think of myself as a particularly exceptional asm coder.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4826">adam_smasher</a> — Tue Dec 06, 2011 1:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-12-06T13:21:13-07:00</updated>
<published>2011-12-06T13:21:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87218#p87218</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87218#p87218"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87218#p87218"><![CDATA[
I don't use macros. I don't ever have the use for them and also trying to use those would add another layer of complexity my code which is not needed. To keep code shorter and out of my way when I don't need it I put it in another file just for that main routine. No macros, but the code isn't hard to figure out. Besides, I never have that much code that is the same anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Tue Dec 06, 2011 1:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-06T11:38:34-07:00</updated>
<published>2011-12-06T11:38:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87212#p87212</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87212#p87212"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87212#p87212"><![CDATA[
Macros can make it easier for one to rewrite certain functions. <br /><br />If I'm writing a function that I'm not sure will work as quickly or as well as I'd like, I divide it into macros. Then I can be sure parts of it work, and use the macros for those parts when I rethink my logic. It also makes it easier to test two versions of the same function at once.<br /><br />Admittedly, this only saves some copy paste time but it makes me <em>much</em> less frustrated when I have to optimize my method for the task at hand.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Tue Dec 06, 2011 11:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-06T10:59:09-07:00</updated>
<published>2011-12-06T10:59:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87209#p87209</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87209#p87209"/>
<title type="html"><![CDATA[The value of macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8383&amp;p=87209#p87209"><![CDATA[
A "macro" (assembly language) or an "inline function" (C) is a short piece of code that is substituted literally instead of being called as a subroutine.<br /><br /><div class="quotetitle">In <a href="http://nesdev.com/bbs/viewtopic.php?p=87207#87207" class="postlink">this post</a>, adam_smasher wrote:</div><div class="quotecontent"><br />I've always found the value of macros to be overstated.<br /></div><br />One advantage of macros in assembly language is that they allow the programmer intent of <a href="http://wiki.nesdev.com/w/index.php/Synthetic_instructions" class="postlink">a few extremely common instruction sequences</a> to be made explicit. MIPS has <a href="http://en.wikipedia.org/wiki/MIPS_architecture#Pseudo_instructions" class="postlink">quite a few of them</a> and even reserves one register for use by the assembler to expand macros. Likewise in 6502: <ul><li>ADD is clearer than CLC ADC, and SUB is clearer than SEC SBC. </li><li>RSB (reverse subtract, as seen on ARM) is clearer than EOR #$FF SEC ADC, and RSC (reverse subtract with carry) is clearer than EOR #$FF ADC. </li><li>ASR (arithmetic shift right) is clearer than CMP #$80 ROR. </li></ul><br />An advantage in C is that it allows certain optimizations, such as peephole, common subexpression elimination and elimination of unused results, to be applied between the inline function's body and that of the function calling it.<br /><br />Other advantages and disadvantages of macros are similar to those of loop unrolling. Macros mean less time spent jumping around. The 6502, for example, has a 12-cycle subroutine call penalty, and in C, pushing a load of arguments to the stack can likewise cause slowdowns. Thus, macros can be a win if the body of the macro isn't much bigger than the code to get in and out of a subroutine. But misused macros can indeed make the code larger, and on architectures with cache and good branch prediction, this can slow the program down more than the jumping penalty if several inclusions of the macro's body make the inner loop not fit into cache.<br /><br />Did I miss any?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Dec 06, 2011 10:59 am</p><hr />
]]></content>
</entry>
</feed>