<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Static, semi-static, or dynamic allocation of OAM</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Static, semi-static, or dynamic allocation of OAM</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17212">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17212</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 31, 2018 11:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the NES, I've gathered that it's considered best practice not to hardcode a particular game object's starting position in the display list. For example, don't always draw the main character using sprites 1-8, enemy 1 using sprites 9-14, enemy 2 using sprites 15-20, etc. Instead, NES games are supposed to reassign slots every frame, especially if there's a possibility that more than eight will be displayed on the same scanline. This also allows the game to make enemies intentionally Z-fight if they overlap.<br /><br />But in the Game Boy community (gbdev.gg8.se and the related Discord server), it's common to hardcode OAM indices for actors or at least not shuffle them from frame to frame, and I'm trying to understand why they do that. The Game Boy sprite system differs from that of the NES as follows:<br /><br /><ul><li>There is enough secondary OAM to draw 10 8-pixel-wide sprites per 160-pixel scanline. Thus sprites can cover nearly half of the screen's width rather than one-fourth like on the NES.</li><li>The PPU determines which sprites to draw by finding the 10 lowest-numbered sprites in OAM whose Y range overlaps each scanline, just as the NES PPU does. But then according to Pan Docs, the monochrome Game Boy sorts these frontmost 10 sprites by their X coordinate before displaying them. Sprites to the left are drawn in front, with position in OAM only breaking ties.</li><li>The memory controller responsible for OAM isn't a rushed, buggy mess. This means OAM can be randomly accessed at $FE00-$FE9F during blanking periods.</li><li>Horizontal blanking on the Game Boy is much longer than on the NES. OAM on the Game Boy can be accessed not only during vertical blanking but also during most of horizontal blanking. </li></ul><br />On the Game Boy, with more relative overdraw and less control of sprite-to-sprite priority, would it be less of a bad practice to statically allocate OAM space? Does random access to OAM even during horizontal blanking have anything to do with it by reducing the need to always use OAM DMA?<br /><br /><br /><span style="font-size: 85%; line-height: normal">Relationship to <a href="https://forums.nesdev.com/viewtopic.php?f=2&amp;t=17211" class="postlink">other topic</a>: This one also includes the random access instead of DMA as an additional factor.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Mar 31, 2018 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know why this was a whole new topic, but my <a href="https://forums.nesdev.com/viewtopic.php?p=216044#p216044" class="postlink">previous response</a> applies more or less equally here with a <em>minor edit</em>:<br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I would say it's quite common for new NES developers to hardcode OAM indices too. It's just that they probably pretty quickly get beat back by the problems that creates. On a system with wider tolerance you wouldn't necessarily create a problem at all.<br /><br />Overlap is often a big problem in a platform game with a flat plane of play, since gravity brings everything to the same level. But... 4 sprites on one platform is usually a pretty busy situation in NES games already... <s>8</s> <em>5</em> sprites <em>(on a smaller screen)</em> ? How crowded is this?</div><br /><br />I think pretty much everyone's reply in that thread is still relevant here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Sun Apr 01, 2018 7:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">On the Game Boy, with more relative overdraw and less control of sprite-to-sprite priority, would it be less of a bad practice to statically allocate OAM space? Does random access to OAM even during horizontal blanking have anything to do with it by reducing the need to always use OAM DMA?</div><br /><br />Yes, it's probably less of a &quot;bad practice&quot;, mostly because of the first point in your list: visual glitches are less likely to happen, so why bother?<br /><br />I don't understand what you're talking about w.r.t. hblank and DMA, but I doubt it's a factor. My understanding is that most games do use the shadow OAM/OAM DMA method (IIRC the official docs prescribe it). hblank on the GB is still incredibly short and not useful for much besides raster effects.<br /><br />My engine doesn't shuffle OAM slots right now, but it's something I'd like for it to do eventually. I don't know off the top of my head what any commercial games do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Apr 01, 2018 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">I don't know off the top of my head what any commercial games do.</div><br /><br />Teenage Mutant Ninja Turtles: Fall of the Foot Clan is one commercial game that appears to have OAM cycling:<br /><a href="https://youtu.be/V9g3abNwXO8?t=5m25s" class="postlink">https://youtu.be/V9g3abNwXO8?t=5m25s</a><br /><br />I'm sure there are many others. There are also plenty of NES games that don't need to. I think we're just so used to NES games having &quot;flicker&quot; that it's an obvious feature. Less so on GB. Even less so on SNES.<br /><br />The plant boss from Gradius III always made me suspect it might not cycle OAM. (In many other places overlap order appears to be fixed, as well.)<br /><a href="https://youtu.be/pjQ1_8hbp9I?t=21m40s" class="postlink">https://youtu.be/pjQ1_8hbp9I?t=21m40s</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Apr 02, 2018 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dynamic OAM doesn't necessarily mean no flicker.  My old Gunstar Heros demo used a dynamic OAM but no alternating flicker.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 02, 2018 8:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">hblank on the GB is still incredibly short and not useful for much besides raster effects.</div><br />That's what I thought, until I found a reason to push 14 1bpp tiles over the course of 14 hblank lines. It's a variable width font (VWF) engine, and unlike on the NES, the 8.5 lines of vblank that remain after OAM DMA aren't long enough without stack abuse. Here's what I ended up doing, with no exceptions in BGB.<br /><br /><ol style="list-style-type: decimal"><li>Wait for LY not 153 or 0, to avoid a vblank followed immediately by OAM scan with no intervening hblank.</li><li>Wait for LY not LYC - 2 or LYC - 1, to avoid the stat interrupt handler throwing off the timing of the following steps.</li><li>Wait for STAT.D0 = 1, meaning vblank or draw.</li><li>Wait for STAT.D1 = 0, meaning vblank or hblank; this loop has a 6-cycle granularity.</li><li>You have about 44 cycles (for OAM) or 62 cycles (for VRAM) to write bytes. This should be enough to push one OAM entry, one 1bpp tile (alternating write and skip), half a 2bpp tile, or one group of four tiles in the tilemap. </li></ol><br />Thus someone might be tempted to write a sprite update routine that pushes out changes immediately in hblank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Thu Apr 05, 2018 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Static, semi-static, or dynamic allocation of OAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was going to write a reply about a routine I've written, but the post quickly became so long that I posted it in its own thread instead: <a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=17232" class="postlink">16 byte per line hblank copy routine</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>