<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - The awkward stage between beginner and intermediate</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">The awkward stage between beginner and intermediate</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8015">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8015</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>booker</b> [ Sun Jul 31, 2011 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>Alt. Title: How the hell do I even start making a text box?</em>
<br />
<br />So I'm sort of new to NES development, but I just can't figure out how to structure my programs. I am not a complete newbie; I've coded something <a href="http://pastebin.com/UqHfNYrH" class="postlink">a bit more elaborate</a> than a simple Hello, World! program. But after that, I'm a bit lost. Sure, I've read a lot of material on NES development so far (including borrowing some code from various nesdev places, like tokumaro's ASM6 template), but yeah...
<br />
<br />What are the patterns used to structure code for games, programs and demos? How do I switch from controlling a character, making a text box, scripting cutscenes and all that fun stuff? Could someone point me to the intermediate tutorials on this stuff?
<br />
<br />Sorry for the numerous questions. I've just kind of reached a roadblock in my epic quest of NES development.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sun Jul 31, 2011 12:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">booker wrote:</div><div class="quotecontent"><em>Alt. Title: How the hell do I even start making a text box?</em><br /><br />So I'm sort of new to NES development, but I just can't figure out how to structure my programs. I am not a complete newbie; I've coded something <a href="http://pastebin.com/UqHfNYrH" class="postlink">a bit more elaborate</a> than a simple Hello, World! program. But after that, I'm a bit lost. Sure, I've read a lot of material on NES development so far (including borrowing some code from various nesdev places, like tokumaro's ASM6 template), but yeah...<br /><br />What are the patterns used to structure code for games, programs and demos? How do I switch from controlling a character, making a text box, scripting cutscenes and all that fun stuff? Could someone point me to the intermediate tutorials on this stuff?<br /><br />Sorry for the numerous questions. I've just kind of reached a roadblock in my epic quest of NES development.</div>
<br />
<br />Try looking at the NESDEV Wiki, under Jump Table or RTS trick. Then look at SMBDIS from Romhacking.Net

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>booker</b> [ Sun Jul 31, 2011 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. I've actually got the RTS/Jump trick implemented in that ROM.
<br />
<br />I suppose the way to do it is to have multiple gameloops and then have a pointer to each one. Then, at the end have a <div class="codetitle"><b>Code:</b></div><div class="codecontent">jmp &#40;gameloopPointer&#41;</div> and just switch the pointer between modes. Am I on the right track?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Sun Jul 31, 2011 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are many ways to do it, but here's a quick breakdown of how I structure my code (this is from a LoZ type game I'm working on):
<br />
<br />I tend to keep my main states (states that are not really related to each other) separate and use absolute JMP/JSR to get there. "RESET" actually falls into "Sub_TitleScreen" and then into "Sub_MainMenu," but they could be jumped to from anywhere in the code. The name entry screen is contained within "Sub_NewGame."
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">RESET:<br />&nbsp; &nbsp;; init hardware, variables<br /><br />Sub_TitleScreen:<br /><br />&nbsp; &nbsp;; reset variables<br />&nbsp; &nbsp;; do title screen stuff<br />&nbsp; &nbsp;; loop until player presses start<br /><br />Sub_MainMenu:<br /><br />&nbsp; &nbsp;; do menu stuff<br />&nbsp; &nbsp;; loop untill player makes a choice<br />&nbsp; &nbsp;if &#40; choice == 0 &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr Sub_NewGame<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr Sub_LoadGame<br />&nbsp; &nbsp;jsr Sub_GameplayMain<br />&nbsp; &nbsp;jmp Sub_TitleScreen<br /></div><br /><br /><br />This is my main(), and also where I start breaking things down into gamestates and use <strong>jmp ($n)</strong>.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Sub_GameplayMain:<br /><br />&nbsp; &nbsp;; init gamestate<br /><br />_loop_gameplayMain:<br />&nbsp; &nbsp;; check player-&gt;actor collsion<br />&nbsp; &nbsp;; run actor ai<br />&nbsp; &nbsp;; scroll camera if needed<br />&nbsp; &nbsp;; check area transition<br />&nbsp; &nbsp;; run map script<br />&nbsp; &nbsp;; fill oam<br /><br />&nbsp; &nbsp;lda #TRUE<br />&nbsp; &nbsp;sta frameFinished<br />_loop_wait:<br />&nbsp; &nbsp;lda frameFinished<br />&nbsp; &nbsp;bne _loop_wait<br />&nbsp; &nbsp;jmp _loop_gameplayMain<br />&nbsp; &nbsp;<br />_loop_exit:<br />&nbsp; &nbsp;; death scene or game ending<br />&nbsp; &nbsp;rts<br /></div><br /><br />frameFinished is cleared in the NMI handler after the vram buffer has been written and sprite dma is finished.<br /><br /><br />Moving actors (players, enemies, etc) is done in "run actor ai." Text boxes are a substate of the player. The reason for choosing to structure it that way was because the player should not be able to do anything but acknowledge the text box when it's on screen. This may not work for your design, I know there are some RPGs that let you walk around while being talked to. This is how I handle the state of actors:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldy Object_Type, X&nbsp; &nbsp;&nbsp; &nbsp; ;<br />&nbsp; &nbsp;lda objAI_ptrlo, Y&nbsp; &nbsp;&nbsp; &nbsp; ;&nbsp; &nbsp;get pointer to object<br />&nbsp; &nbsp;sta t0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ;&nbsp; &nbsp;state table<br />&nbsp; &nbsp;lda objAI_ptrhi, Y&nbsp; &nbsp;&nbsp; &nbsp; ;<br />&nbsp; &nbsp;sta t0 + 1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;<br />&nbsp; &nbsp;lda Object_State, X&nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;get object state pointer<br />&nbsp; &nbsp;asl&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ;<br />&nbsp; &nbsp;tay&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ;<br />&nbsp; &nbsp;lda &#40;t0&#41;, Y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ;<br />&nbsp; &nbsp;sta IndJump&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp;iny&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ;<br />&nbsp; &nbsp;lda &#40;t0&#41;, Y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ;<br />&nbsp; &nbsp;sta IndJump + 1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ;<br />&nbsp; &nbsp;jsr Func_IndirectJump&nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;goto ai handler<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Func_IndirectJump:&nbsp; &nbsp;jmp &#40;IndJump&#41;<br /></div>
<br />
<br />Scripting of any kind is handled in "run map script." A pointer is set when an area is loaded and is jumped to every frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 31, 2011 2:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">booker wrote:</div><div class="quotecontent">How do I switch from controlling a character, making a text box, scripting cutscenes and all that fun stuff?</div>
<br />Each section of your game should have an initialization block followed by a loop (sections that are similar enough could share the code though). Each of these sections should have this basic structure:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1. initialize the game section;<br />2. read the controllers;<br />3. update the game world;<br />4. wait for the vertical blank;<br />5. update the video;<br />6. update the audio;<br />7. go back to step 2;</div>
<br />
<br />The part that varies greatly is updating the game world, because the tasks you would perform during a menu are very different than those you'd perform during action gameplay. You just have to do whatever you need to make your game world move one step/frame forward. During this process you'll also have to buffer video information (such as sprite data and background data) that will be written to VRAM during the next vertical blank.
<br />
<br />Common tasks such as reading the controllers, clearing sprites, etc. can be put into subroutines, so that they are easily accessible from any part of your game.
<br />
<br />The last part (audio and video updates) can be shared among all the game sections if you want to. If you consistently use a standardized buffer system that satisfies all parts of the game you can utilize it for the whole program.
<br />
<br />To move from one game section to another, just jump between them. You can JSR to a new section (which will actually be a sub-section) if you plan to return later (something you would do with an in-game menu, for example) or just JMP to it (like when you die and go back to the title screen). You can use jump tables (and the RTS trick) to navigate between game sections too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>booker</b> [ Sun Jul 31, 2011 3:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you consistently use a standardized buffer system that satisfies all parts of the game you can utilize it for the whole program. </div>
<br />
<br />I implemented a really weird system that's really inflexible for this. I was wondering if you have any designs for such a system. The new one I'm working on is like a queue that takes up the entire $0300 RAM page. In it, you load the PPU address hibyte and lobyte, amount of tiles, and then the actual tile data. At VBlank, the address is copied, the tiles are read and copied, until there are no more chunks like these to copy. I was wondering if there is a better method than this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sun Jul 31, 2011 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">booker wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you consistently use a standardized buffer system that satisfies all parts of the game you can utilize it for the whole program. </div><br /><br />I implemented a really weird system that's really inflexible for this. I was wondering if you have any designs for such a system. The new one I'm working on is like a queue that takes up the entire $0300 RAM page. In it, you load the PPU address hibyte and lobyte, amount of tiles, and then the actual tile data. At VBlank, the address is copied, the tiles are read and copied, until there are no more chunks like these to copy. I was wondering if there is a better method than this.</div>
<br />
<br />What about using a new mapper with MMC1 or MMC3, put the ram address from the routine as RAM $6x00-6xFF or such, and keep $300-$3FF free.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Jul 31, 2011 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">booker wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you consistently use a standardized buffer system that satisfies all parts of the game you can utilize it for the whole program. </div><br /><br />I implemented a really weird system that's really inflexible for this. I was wondering if you have any designs for such a system. The new one I'm working on is like a queue that takes up the entire $0300 RAM page. In it, you load the PPU address hibyte and lobyte, amount of tiles, and then the actual tile data. At VBlank, the address is copied, the tiles are read and copied, until there are no more chunks like these to copy. I was wondering if there is a better method than this.</div>
<br />
<br />That's the way to go I think, as long as it never takes longer than vblank.  And make sure your buffer stuffer code is safe to be interrupted by NMI, in case that can happen.  If you use this for nametables also, you will want to have the 'VRAM address inc-by-32' feature available for drawing columns.  There's a lot of ways to optimize the buffer-unloading code, but it probably only matters if you're wanting to rewrite tiles during vblank (16 bytes per tile adds up fast).
<br />
<br />In my NMI routine, I normally rewrite the palette every vblank, copying from RAM.  I've found that it makes palette cycling easy to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sun Jul 31, 2011 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MMC5 seems to be a great mapper for your text routine, Just re-implent it in ExRAM and enable the ExAttribute mode for it! Saves you some space in both RAM areas too,
<br />
<br />Or you can use the option that I said before, No big deal.
<br />
<br />Memblers: I have to really agree with you, His implentation is really good. I may even use that system somehow. Credit goes to him, though, if I use this ASM file or modify it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Jul 31, 2011 5:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">booker wrote:</div><div class="quotecontent">I was wondering if you have any designs for such a system. The new one I'm working on is like a queue that takes up the entire $0300 RAM page. In it, you load the PPU address hibyte and lobyte, amount of tiles, and then the actual tile data. At VBlank, the address is copied, the tiles are read and copied, until there are no more chunks like these to copy. I was wondering if there is a better method than this.</div>
<br />Yeah this is pretty much the standard thing to do.
<br />
<br />One trick is to place the buffer on the lower part of the stack memory area ($100-$1EF or something, depending on how big a buffer/how much stack space you need), since most of the time the stack doesn't grow very big. Then you can also use PLA/PHA to pull/push stuff to/from the buffer.
<br />
<br />Also remember that since the PPU address is only 14 bits, you can use the top two bits for stuff like the inc1/inc32 flag. 12 bits is enough if you only need nametable addresses.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 31, 2011 6:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The awkward stage between beginner and intermediate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">booker wrote:</div><div class="quotecontent">I was wondering if you have any designs for such a system.</div>
<br />Like others have said, your way is the most straightforward. I often have a bunch of custom code for this, because I'm a little more ambitious with the amount of bytes I transfer to VRAM than most people, so I really need a few unrolled loops.
<br />
<br />One advice I have though is that you allow the program to pick different VBlank handlers. In my game, the main gameplay needs the specialized code I mentioned earlier, but the rest of the program can do with a standard handler, so I just switch as needed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>booker</b> [ Sun Jul 31, 2011 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great advice in this thread. Thanks, everybody!
<br />
<br /><div class="quotetitle">Hamtaro126 wrote:</div><div class="quotecontent">MMC5 seems to be a great mapper for your text routine, Just re-implent it in ExRAM and enable the ExAttribute mode for it! Saves you some space in both RAM areas too,</div>
<br />
<br />But isn't MMC5 a rare mapper? If ever I wanted to convert my ROM into an actual cart, that would be difficult. Not that I really think I'll do many ROM to cart conversions, but it is a consideration. Apparently it doesn't even work on the PowerPak!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 31, 2011 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sane homebrewers will avoid the MMC5. The PowerPak doesn't have an MMC5 implementation, few games used it, it hasn't been cloned by the community, it doesn't work on clone systems... The list of disadvantages is endless.
<br />
<br />I don't know why Hamtaro126 brought mappers to this discussion, that just needlessly complicates things and doesn't have anything to do with the original question.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Sun Jul 31, 2011 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Sane homebrewers will avoid the MMC5. The PowerPak doesn't have an MMC5 implementation, few games used it, it hasn't been cloned by the community, it doesn't work on clone systems... The list of disadvantages is endless.<br /><br />I don't know why Hamtaro126 brought mappers to this discussion, that just needlessly complicates things and doesn't have anything to do with the original question.</div>
<br />
<br />Sorry, Someone else thought of the term ''Takes a lot of RAM'' before me, so I'd thought it would help, but it did not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Jul 31, 2011 9:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Adding 8K of PRGRAM at $6000 makes more sense if you need more RAM than to use MMC5 to get a fraction of that with EXRAM.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>