<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES hardware debugging board</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES hardware debugging board</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=17090">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=17090</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Sat Feb 24, 2018 10:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I recently purchased a cheap USB logic analyser (which I have yet to try out) for getting a bit more of a debugging tool for Everdrive/Powerpak experiments. But I quickly realised that trying to connect the probes to the NES cartridge edge would not be a fun task.<br /><br />So with the kind guidance of Paul@infiniteneslives, I've spent some late evenings of my vacation designing a simple pass-through PCB that would allow easy-and-obvious access to all the signals on the cartridge edge.<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=12017&amp;mode=view"><img src="./download/file.php?id=12017&amp;t=1" alt="nesdebugboard.png" /></a><br />
			<span class="gensmall">nesdebugboard.png [ 52.37 KiB | Viewed 1984 times ]</span>
		

		<br />
	</div><br /><br />The idea is that after soldering on a 72-pin connector and some break away IDC pins and putting on a bunch of jumpers on those, the board can be used in these ways:<br />1) Pass-through mode for debugging signals. Plug in any cartridge, and you can easily put on a debugging probe on any signal, by connecting it to either the top of the jumper, or to the pin (would slightly depend on which way you've chosen to have your jumpers, they could be either on the top or the bottom of the PCB)<br /><br />2) Cartridge prototyping mode. Get two IDC34 ribbon cables and attach the board to a (wired or soldered) prototyping board. Would allow creating a new prototype board design from scratch without designing a new PCB for it.<br /><br />3) Pimp an existing mapper design. If you have a new mapper in mind that is a slight variation on an existing one, then rather than designing it from scratch it *might* be possible (depending on what modifications you intend to do) to prototype this by plugging an existing cartridge into this debug board, and selectively removing jumpers from the IDC-pins, connecting them to a smaller prototyping board.<br /><br />I plan to have the board manufactured by &quot;itead studio&quot;, as recommended by Paul. The minimal order should give me at least 10pcs of them, which gives me one or two for personal use and a few to pass around. If a lot of people are interested then I might do multiple orders - but only after I've confirmed the first one works without problems. Although if a lot of people in the US want one, then we might save on customs if someone just clones my order and orders PCBs/components to distribute to others.<br /><br />For the first run I'll go with 1.2mm board thickness, as that plays nicely with toploaders (even though I don't have one myself) and is still usable on a front-loader if you have a Game Genie at hand. But I am also considering ordering a 1.6mm version to make the Game Genie redundant.<br /><br />The Designspark PCB file, a slightly modified version of Paul's NES component library (just adds a 72-pin IDC connector) and the Gerber files can be found <a href="https://drive.google.com/open?id=1fOkWQxJkopOxG8yvpNogjFs0Yn3Z5RS0" class="postlink">here</a> if you want to have a closer look around.<br /><br />The design is close to done but not 100% final yet. So any feedback/suggestions for improvments is welcome. And also do let me know if you're really keen on having one to play with soon, and you might be able to have one from the first order... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Sun Apr 08, 2018 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So looks like there was zero interest. Oh well - it's made my own experiments easier at least. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />But if anyone might be interested in the future, here's the final version:<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=12342&amp;mode=view"><img src="./download/file.php?id=12342&amp;t=1" alt="naked_board.jpg" /></a><br />
			<span class="gensmall">naked_board.jpg [ 2.17 MiB | Viewed 1599 times ]</span>
		

		<br />
	</div><br /><br />And here's how an assembled board looks attached to an Everdrive N8 and fitted with probes from a <a href="https://www.amazon.co.uk/Hobby-Components-24MHz-Logic-Analyser/dp/B00DAYAREW" class="postlink">cheap logic analyser</a>:<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=12343&amp;mode=view"><img src="./download/file.php?id=12343&amp;t=1" alt="assembled_board_with_probes.jpg" /></a><br />
			<span class="gensmall">assembled_board_with_probes.jpg [ 1.89 MiB | Viewed 1599 times ]</span>
		

		<br />
	</div><br /><br />Designspark files (based on InfiniteNESLives template) are <a href="https://drive.google.com/open?id=0B6EYzIa5DHbxa2ZqWnFHNk1SRXZoU0JYUTJWaHRyVkU5NW4w" class="postlink">here</a><br /><br />And Gerber files - useful to clone the order I made at <a href="https://www.itead.cc" class="postlink">ITEAD Studio</a> are <a href="https://drive.google.com/open?id=16yVZIEr-mdTlddZbNN0_qJF-P-slHUJ9" class="postlink">here</a><br /><br />Besides that, there's still a few spare boards around at mine that could use a new home. Not the quickest thing to solder together, but saves frustration in the long run when doing hardware debugging.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Apr 08, 2018 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really like the variant of those logic analyzers that also supports 12MHz / 16 channel. (<a href="https://sigrok.org/wiki/Lcsoft_Mini_Board" class="postlink">e.g.</a>)<br /><br />Unfortunately, I find myself really wanting more than 16 channels when I'm working with these old systems. I'd probably have to pick up one of the HP logic analyzers to really benefit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Apr 09, 2018 6:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Congrats on completing your project!  I'm looking forward to tinkering around with the one you sent my way. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Unfortunately, I find myself really wanting more than 16 channels when I'm working with these old systems.</div><br />For my basic needs to date I get by pretty well with my 4 channel ikalogic, my more advanced logic analyzer needs are typically for serial anyway.  But I've been thinking about doing some more advanced parallel bus analysis for things like advanced mapper/coprocessor reverse engineering and such, 4 channels just wont cut it.  I've got a 16 channel LA on my scope but that thing is such a pain to interface with and 16 channels will still not be enough to capture the whole bus, and the interface is a PITA.  Has me thinking of taking on a project similar to Bananmos' pass through board with a bus analyzer integrated into it.<br /><br />Something along the lines of putting all signals on level shifters fed to a CPLD with ~100io.  Then some fast parallel SRAM or few for a capture buffer that the CPLD would route the desired signals to for capture.  That would make a trade off between number of captured channels and capture rate/length.  But might be easier to simply pony up for a massive FPGA that could keep a sizable internal buffer.  The tool development time would be pretty high though, it can often be best to throw hardware at the problem when developing tools..  Perhaps it would be worthwhile in the end especially as the time consuming parts would be system independent allowing it to be migrated to other systems fairly easily.<br /><br />I'm still not even sure what I would specifically want to look at.  Just when I think capturing the entire CPU or PPU bus alone would be enough, there would be some case I would want to see both at the same time at least for a brief period.  The other problem with the level shifter -&gt; CPLD -&gt; SRAM idea is the delays introduced.  If you want some more accurate timing analysis especially between channels it may make a mess of things to the point where you can't even trust your data.<br /><br />10-12nsec 5v 256kbit x8 SRAM that I typically use for CHR-RAM is pretty cheap stuff though.  Wouldn't be the craziest idea to drop ~8 of those SRAMs onto a pass through board with the data pins wired directly to all signals.  That would get 64 channels with no trade offs between capture width/length.  Could get by with just a counter for the address incrementing.  But then there's the challenge if pulling the SRAM off the bus to read the captured data back out again.  Plus you want to have advanced triggering on specific address accesses and such.  While there are 5v tolerant CPLDs that could dump the capture after removing the device from the console or holding reset perhaps it would be annoying.  Probably makes sense to put the level shifters back on.  But now the data isn't going through the CPLD/FPGA as in my original idea.  The capture SRAMs just have a level shifter buffering immediately in front of them.  The 3v CPLD could now 'sit from behind' while watching all signals and control the capture sequence.  Throwing all the SRAM at the problem has me thinking it wouldn't take much design time to create something like this in comparison to what I was previously thinking.  This setup is also much simpler in terms of the data path and would have me more confident that the captured data was accurate and not corrupted by a bug in the data path.<br /><br />Then it would only really need a relatively small mcu with USB to configure the CPLD for the desired trigger and dump the capture data to host PC for analysis.  Making all this hardware sounds like fun, but writing a massive GUI to display all that data intelligibly doesn't...  Should suffice to convert to a text file as a simple log of the bus transactions.  The other use case I had in mind was comparison testing between original chips and replicas, in that case you would really only need to compare file outputs to see where they differ.<br /><br />Anyway, sorry for rambling too long on that side tangent.  Just got me thinking and one thing led to a somewhat related other...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Apr 09, 2018 9:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">10-12nsec 5v 256kbit x8 SRAM that I typically use for CHR-RAM is pretty cheap stuff though.  Wouldn't be the craziest idea to drop ~8 of those SRAMs onto a pass through board with the data pins wired directly to all signals.  That would get 64 channels with no trade offs between capture width/length.<br /></div>There is this glorious hack using SDRAM... <a href="https://hackaday.com/2016/03/15/sdram-logic-analyzer-uses-an-avr-and-a-dirty-trick/" class="postlink">writeup #1</a> and <a href="https://hackaday.com/2016/07/19/hackaday-prize-entry-the-cheapest-logic-analyzer/" class="postlink">#2</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Plus you want to have advanced triggering on specific address accesses and such.<br /></div>I think borrowing from the various FX2-based options might be the right idea. With Sigrok, these support 24MB/sec captures, natively either 24MS/s at 8bit or 12MS/s at 16bit. The NES runs at 5.3MHz (more or less), so it should be possible to stuff 35 bits at 5.5MHz. Not quite enough to get all 54 signals from both buses, and it would lose information about microstep-by-microstep phase effects...<br /><br />But then there's the (newer, more expensive, USB3-only) FX3 that was recently <a href="https://hackaday.com/2018/01/03/spite-thrift-and-the-virtues-of-an-affordable-logic-analyzer/" class="postlink">programmed into being a logic analyzer</a>—cnlohr got it to reliably supporting 64MS/s at 32bit. Much more total bandwidth than we need here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then it would only really need a relatively small mcu with USB to configure the CPLD for the desired trigger and dump the capture data to host PC for analysis.<br /></div>The FX2/3 have said MCU inside the USB PHY.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Making all this hardware sounds like fun, but writing a massive GUI to display all that data intelligibly doesn't...  Should suffice to convert to a text file as a simple log of the bus transactions.<br /></div><em>definitely</em> take a closer look at Sigrok. It's basically what you're describing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Apr 09, 2018 5:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is this glorious hack using SDRAM</div>Yeah I thought about DRAM but SRAM is so much easier to work with in terms of control, commands, refresh etc.  If using an FPGA to capture the data SDRAM is the obvious solution for expanding it's RAM.<br /><br />There's definitely merit to the FX2/3 based solution and free running data over USB to let the host deal with storing.  Not sure if I'll ever be so motivated to tackle a project like this, I guess it depends on how long I can get by without it.  Thanks for the tip on sigrok, definitely looks like the best way to go for signal/data analysis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Apr 09, 2018 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is this glorious hack using SDRAM</div>Yeah I thought about DRAM but SRAM is so much easier to work with in terms of control, commands, refresh etc.  If using an FPGA to capture the data SDRAM is the obvious solution for expanding it's RAM.<br /></div>No, no, it's better than that. It's not just DRAM; it's specifically using SDRAM and setting up a feedback loop so that it the data in it is treated as commands to it, and starts a write cycle. Hence &quot;hack&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rahsennor</b> [ Mon Apr 09, 2018 6:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">There is this glorious hack using SDRAM... <a href="https://hackaday.com/2016/03/15/sdram-logic-analyzer-uses-an-avr-and-a-dirty-trick/" class="postlink">writeup #1</a> and <a href="https://hackaday.com/2016/07/19/hackaday-prize-entry-the-cheapest-logic-analyzer/" class="postlink">#2</a></div><br />I think my brain just melted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Apr 09, 2018 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES hardware debugging board</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">No, no, it's better than that. It's not just DRAM; it's specifically using SDRAM and setting up a feedback loop so that it the data in it is treated as commands to it, and starts a write cycle. Hence &quot;hack&quot;</div><br /><br />No I got that and picked up on what he was doing in the overly drawn out video too.  I wasn't commenting on the hack as much as synchronous DRAM in general.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>