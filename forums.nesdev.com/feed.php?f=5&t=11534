<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=11534" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-08-18T19:53:18-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=11534</id>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-08-18T19:53:18-07:00</updated>
<published>2014-08-18T19:53:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132745#p132745</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132745#p132745"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132745#p132745"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />I saw this on reddit earlier, seems like a relevant example, showing how AI was approached for Pac-Man.<br /><br /><a href="http://gameinternals.com/post/2072558330/understanding-pac-man-ghost-behavior" class="postlink">http://gameinternals.com/post/2072558330/understanding-pac-man-ghost-behavior</a><br /></div><br /><br /> Thanks for the link <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> That was pretty interesting. <br /><br /> Of course, not all the AI/NPCs I have in the game will have chase mode - but for the ones that do, this gives me some ideas.<br /><br /> I implemented what I thought would be 'wanderer', but it turned out more like 'cockroach'... heh. It'd also tend to stay in a corner sometimes. I'm definitely gonna need to add some layers to the AI, checking things and timers, etc.<br /><br /> I looked at Neutopia, and the wandering enemy type tends to walk in longer straight paths, and never stays on one corner/area too long. I have a few ideas of how to implement this. Now that I have a simple bug 'AI' up and working, I can better judge some other types of overhead type AI for enemies by observing some games.<br /><br /> So far Zelda: A link to the Past (I like the patrolling soldiers) and Neutopia have some good variety and examples. Any other overhead action games that have good or distinct AI?<br /><br /> Edit: Vid - <!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=OQmg1WniTUo">https://www.youtube.com/watch?v=OQmg1WniTUo</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Aug 18, 2014 7:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2014-08-18T16:28:55-07:00</updated>
<published>2014-08-18T16:28:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132728#p132728</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132728#p132728"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132728#p132728"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />The oooold game creation softwares ZZT and Megazeux have a grid-based gameplay for a vaguely roguelike universe, and provide a simple scripting language (&quot;ZZT-OOP&quot; and &quot;Robotic&quot; respectively) that allows you to specify things like &quot;go towards player&quot;, &quot;go clockwise of towards the player&quot;, and so on. Might be useful for a few ideas, if that sounds like the same approximate engine.<br /></div> Indeed, 3/4 of the time a custom enemy's just going to GO SEEK (and/or SHOOT SEEK) <span style="font-size: 50%; line-height: normal">i.e. go towards player. The use of modifiers like CW [clockwise] made it easy to circle around.</span> But, of course, lacking such shortcuts, you probably need it to consider such things as &quot;Where am I?&quot; and &quot;Where is the player character?&quot; and more importantly derive &quot;Which direction is the player from me?&quot; (Of course, one may not use this directly for deciding where to go if we also have &quot;Have I seen the player character?&quot; or more complicated &quot;Where have I seen the player character?&quot;<br /><br />Other simple AI patterns are &quot;Follow left wall&quot;, &quot;go straight until hitting wall, then turn left&quot;...now, you probably want to save the player's last few grid-locations to produce much of anything smarter like &quot;attempt to cut off&quot;- though the Pac-Man example shows how this isn't necessarily true.<br /><br />Slightly more complicated would be patrol routes which check line-of-sight and substitute the player character's location for &quot;where am I going&quot; when spotted; with a &quot;look around&quot; on reaching any patrol-route point.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Mon Aug 18, 2014 4:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-08-17T20:03:49-07:00</updated>
<published>2014-08-17T20:03:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132680#p132680</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132680#p132680"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132680#p132680"><![CDATA[
I saw this on reddit earlier, seems like a relevant example, showing how AI was approached for Pac-Man.<br /><br /><a href="http://gameinternals.com/post/2072558330/understanding-pac-man-ghost-behavior" class="postlink">http://gameinternals.com/post/2072558330/understanding-pac-man-ghost-behavior</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Aug 17, 2014 8:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-08-17T08:24:09-07:00</updated>
<published>2014-08-17T08:24:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132655#p132655</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132655#p132655"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132655#p132655"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />I could go into an infinite loop (re-get random value; test direction is legal) if no movement was available.<br />...<br />Another instance, where it might be in a corner or even just facing a non-continual path. I don't want the redirection to be biased. I want it to appear random rather than 'preferred'; if the NPC moves up and blocked, it checks right first, then down, left, etc.<br /></div><br />The infinite loop can easily be broken by cancelling to some default after some number of failed attempts. If you want to do a systematic check, you could do a few random ones and then just go through a complete list if they fail.<br /><br /><div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />Little things like this. I figured this kind of stuff would be more generalized.<br /></div><br />In a most of cases, the small-scale behaviour you're looking for has been done before somewhere. The reason they're not really generalized is because this one piece has to interact with the other hundred pieces of your game logic. It's hard to encapsulate stuff like this because it depends upon and affects so much that is external to it.<br /><br />Sometimes engines come with built in pieces of AI to try and stick together, but even that I find of limited use. It tends to get complex and weird as soon as you go beyond the very basic combinations, and often it's more useful just to start from scratch and make a solution specifically made for your game's particular problem once that happens.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Aug 17, 2014 8:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-08-17T03:17:43-07:00</updated>
<published>2014-08-17T03:17:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132652#p132652</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132652#p132652"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132652#p132652"><![CDATA[
Hmm, I'm probably gonna ditch the idea of fitting the game logic in just that window of time, and use the whole frame. But that means spending a couple of nights changing things. Not looking forward to that.<br /><br /><br /> That aside..<br /><br /> Even for the 'wanderer' type (no chase), I found a few things that didn't come up when designing the logic side of it on paper (outside of coding it). My game currently has grid movement; the NPC will walk along 16x16 units (directions/changes/etc are made upon alignment). This aligns up with the 16x16 unit of the collision map. <br /><br /> I ran into this scenario:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> XXX<br /> X@X<br /> XXX </div><br />(X=collision blocks, @=NPC/Enemy).<br />Originally, I just had it chose another direction if the one is blocked (or hits the edges of the screen). But I could go into an infinite loop (re-get random value; test direction is legal) if no movement was available.<br /><br /> Another instance, where it might be in a corner or even just facing a non-continual path. I don't want the redirection to be biased. I want it to appear random rather than 'preferred'; if the NPC moves up and blocked, it checks right first, then down, left, etc.<br /><br /> Little things like this. I figured this kind of stuff would be more generalized.<br /><br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />The oooold game creation softwares ZZT and Megazeux have a grid-based gameplay for a vaguely roguelike universe, and provide a simple scripting language (&quot;ZZT-OOP&quot; and &quot;Robotic&quot; respectively) that allows you to specify things like &quot;go towards player&quot;, &quot;go clockwise of towards the player&quot;, and so on. Might be useful for a few ideas, if that sounds like the same approximate engine.<br /></div><br /> I remember that game. I'll have to check that out.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sun Aug 17, 2014 3:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-08-15T12:31:52-07:00</updated>
<published>2014-08-15T12:31:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132604#p132604</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132604#p132604"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132604#p132604"><![CDATA[
AI programming is very specific to the situations that arise in your particular game. As such, I don't think there is very much that can be generically applied, other than a few very broad categories of things to do (e.g. pathfinding on a grid or mesh).<br /><br />Every game I've worked on has required dozens of unique solutions for the AI, and very little of it could be carried over to another project.<br /><br />In general, most of my AI has had a collection of &quot;states&quot;, where each state is some high-level goal (e.g. walk left, turn, seek toward player, jump, fall, die). Each state has a different piece of code that operates the character while it's in that state, and various conditions will cause the state to change (e.g. timeout, random test, proximity to player).<br /><br />I'd suggest by starting simple and one by one add a new condition/state to it.<br />1. Walk left.<br />2. Hurt player if overlapping.<br />3. Turn around at a wall.<br />4. Fall if no floor.<br />5. Walk faster is player is in front.<br />6. Jump if a bullet is inbound.<br />etc.<br /><br />The behaviour can begin to feel complicated with only a few states, especially if there is some randomness keeping it slightly unpredictable.<br /><br />Eventually you'll probably find you have too many conditions/states and the character gets stuck in bad/degenerate ways a lot of the time. It's hard to avoid this happening once you get to a certain complexity. Usually the best thing to do at this time is to try to simplify, but the alternative is to add more and more code trying to avoid these increasingly obscure problems.<br /><br />If you want specific examples, inspect the source code for a game that you want to know about. I don't know how to tutorialize AI, the solution really has to fit the situation at hand, so I could show you how I made AI for something specific in a game I made, but I don't know how to teach the approach to it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Fri Aug 15, 2014 12:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-08-15T12:11:00-07:00</updated>
<published>2014-08-15T12:11:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132603#p132603</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132603#p132603"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132603#p132603"><![CDATA[
I see. Since this is an NES board I assumed this was for the NES, even if it's in the General Stuff section. Anyway, this clears up some of the time limitation concerns I had.<br /><br />I haven't personally coded much in the way of enemy A.I. (never got that far with any of my projects), but from my experience playing games I can only assume most of them don't have such complex intelligence routines. Most enemies appear to follow a very strict set of rules, not even necessarily influenced by the player object in any way. My experience comes primarily from platformers though, where enemies are usually confined to small areas and there usually aren't any direct confrontations with the player... Enemies are probably more intelligent in top-view games, where they could theoretically go anywhere in the map and constantly have to find the player in order to attack him.<br /><br />I think you should avoid real path finding algorithms, because they're probably too complex and slow for old game consoles. I would probably check for the distance between the enemy and the player in order to decide whether to attack (maybe you don't want them to attack if they're too far), and compare the coordinates in order to know how much the enemy has to walk in each axis to reach the player. The ratio between X and Y distances will tell you the direction (angle) the enemy must go to. There will be obstacles they'll have to handle. One way to do that would be to put them in &quot;walking around an obstacle&quot; mode when movement in a certain direction is not successful for a couple of frames. You'd then have it walk either left or right of the obstacle until it's able to keep going in the direction it wanted to in the first place.<br /><br />I don't think there's much to the A.I. in games for old game consoles, because there isn't enough horsepower to do the real smart things, so you have to make do with the dumb rules. I guess the secret is to come up with the appropriate set of rules for each enemy, and not make decisions too hard. State machines are particularly useful here, where several types of behaviors are programmed for each enemy (wandering, following player, attacking, etc) and decisions based on the environment and the player (and possibly other enemies/objects) have him jump from mode to mode.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Aug 15, 2014 12:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-08-15T10:52:45-07:00</updated>
<published>2014-08-15T10:52:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132600#p132600</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132600#p132600"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132600#p132600"><![CDATA[
Let me translate this constraint into NES-speak:<br /><br />On this platform, DMA to OAM takes place automatically at the beginning of vertical blanking, as if $4014 writes were queued until NMI. Someone wants to run all game logic in the part of the screen occupied by the status bar, perhaps because he's doing a full-screen raster effect. This is feasible because the TG16's 65C02 CPU is clocked four times as fast as the NES's 6502.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Aug 15, 2014 10:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-08-15T10:48:19-07:00</updated>
<published>2014-08-15T10:48:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132599#p132599</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132599#p132599"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132599#p132599"><![CDATA[
The oooold game creation softwares ZZT and Megazeux have a grid-based gameplay for a vaguely roguelike universe, and provide a simple scripting language (&quot;ZZT-OOP&quot; and &quot;Robotic&quot; respectively) that allows you to specify things like &quot;go towards player&quot;, &quot;go clockwise of towards the player&quot;, and so on. Might be useful for a few ideas, if that sounds like the same approximate engine.<br /><br />I read someone talking about route planning (using A* search) for a platformer for an enemy that had to jump platforms the same way a player would, but that sounds out of scope.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Aug 15, 2014 10:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-08-15T09:59:29-07:00</updated>
<published>2014-08-15T09:59:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132597#p132597</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132597#p132597"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132597#p132597"><![CDATA[
Sorry for the confusion, it's for PC-Engine not NES (which is why I put it in this section). I didn't mention target platform, because that wasn't really what I wanted to discuss. I just wanted to discuss/get ideas about easy AI in general (for said style).<br /><br /> But yeah, I was trying to fit it into pseudo vblank area. PCE has no limits when writing to the SAT in vram, or vram itself (tilemap, tiles, sprites, etc) - but there is a catch; SAT from VRAM is transferred to the internal VDC (PPU equiv) regs on the very first 'defined' line of vblank. So I put the status bar at the bottom of the screen, fire a H-int 64 scanlines before the real vblank (which I have set to line 240) and clear the vblank variable flag. That gives me ~30k cycles for that window of 64 scanlines. The screen is fixed, like Zelda and other japanese 8bit home computer softs of BITD. So I'm not scrolling while running game logic. The map for logic is just the window size (8bit coords, etc). The game is fairly simple. The sprites (as of right now) are 16x16, so that means no meta-sprite cell decoding overhead (although I do use spritesheets for the animation tables). 7% cpu resource is 8k cycles. Way more than I'll probably need for AI itself. I was originally figuring AI+object collision+map collision at 1k cycles per enemy. The spritesheet decode and write to vram SAT has its own time allocation that I already figured for, separate from the 1k figure. <br /><br /> Like I said, it's a simple little game. I just wanted to fit the game logic into that pseudo vblank area (which is about the time for a whole NTSC frame on the NES).<br /><br /><br /> Anyway, I'm just looking for some ideas for doing some AI for enemies - varieties and such. Or quite ways to implement the logic (65x preferably, since the PCE cpu is based on that). Like I mentioned previously, zelda-ish style (legend of xanadu, neutopia, hylide, alttp, soul blazer, etc).<br /><br /><strong><em><span style="text-decoration: underline"> Edit:</span></em></strong><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Ah, AI is *THE* hardest thing to make about a game. I have the exact same problem as you.<br /><br />However I managed to partially solve it. The first thing is to have a working &quot;wandering&quot; enemy. Then you copy it and add new features or extra states. Now and then you'll want to have an enemy that is not based on this one, it can either chase the player, or flee, or not move and shoot homing projectiles, or whathever.<br /><br />For bosses I simply prefer relying on patterns, sometimes with simple random factors. This makes them more predictible therefore easier to defeat and more fun.<br /></div><br /><br /> Did you find some decent AI routines? I could create more, but I want some polished AI routines. Or at least what devs did back in the day. I don't want it to come off as generic or such. I figured there would be some info out there, or observations/etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Fri Aug 15, 2014 9:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-08-15T09:56:26-07:00</updated>
<published>2014-08-15T09:56:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132596#p132596</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132596#p132596"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132596#p132596"><![CDATA[
Ah, AI is *THE* hardest thing to make about a game. I have the exact same problem as you.<br /><br />However I managed to partially solve it. The first thing is to have a working &quot;wandering&quot; enemy. Then you copy it and add new features or extra states. Now and then you'll want to have an enemy that is not based on this one, it can either chase the player, or flee, or not move and shoot homing projectiles, or whathever.<br /><br />For bosses I simply prefer relying on patterns, sometimes with simple random factors. This makes them more predictible therefore easier to defeat and more fun.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Aug 15, 2014 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-08-15T09:29:23-07:00</updated>
<published>2014-08-15T09:29:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132595#p132595</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132595#p132595"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132595#p132595"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Why do you have so little time dedicated to the game logic anyway? Are you by any chance running all of it in the NMI handler BEFORE the PPU updates?<br /></div><br />Referring to tables stored in CHR ROM perhaps? Or storing a lot of game state in CHR RAM, like Videomation, Oeka Kids, and RacerMate Challenge?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Aug 15, 2014 9:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-08-15T08:46:01-07:00</updated>
<published>2014-08-15T08:46:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132593#p132593</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132593#p132593"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132593#p132593"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />I was gonna devote about 7% cpu resource per frame total, for up to 8 NPCs (enemies).<br /></div><br />I don't think that's possible.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If I need more, I'll have to move it to non-vblank area (which makes it more complex to setup - as it currently is).<br /></div><br />It's either that or having way way less than 8 enemies. Game logic is not supposed to be done during VBlank, that time should be dedicated to video updates (unless you're programming for the Atari 2600, then it's the other way around!). Object processing isn't just A.I, you have to also consider the time it takes to generate/manipulate all their individual sprites in the OAM, which takes a considerable amount of time.<br /><br />Why do you have so little time dedicated to the game logic anyway? Are you by any chance running all of it in the NMI handler BEFORE the PPU updates? If that's the case, simply moving the game logic AFTER the PPU updates will buy you a lot of extra time, because you can safely let the NMI handler keep running past the end of VBlank, as long as all the PPU-related stuff was taken care of before VBlank ended.<br /><br />The only complication this solution introduces is that the very first NMI that fires will not have any display data to upload, because the game logic hasn't ran yet. This is easy to solve with a flag though, that indicates whether there's data to send to the PPU or not. Initially this flag is clear, but after the game logic runs you can set it so that subsequent NMIs will update the PPU.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Aug 15, 2014 8:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-08-14T17:41:31-07:00</updated>
<published>2014-08-14T17:41:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132581#p132581</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132581#p132581"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132581#p132581"><![CDATA[
I was gonna devote about 7% cpu resource per frame total, for up to 8 NPCs (enemies). If I need more, I'll have to move it to non-vblank area (which makes it more complex to setup - as it currently is).<br /><br />I have the generic 'wanderer' down, and working on variations of it. I have a basic idea of how to do the 'stupid' chaser type (with aggro radius). <br /><br /> I need a sporadic/twitchy 'fly' type AI, with possible aggro radius/chaser. The 'scout'. 'Archer' type (backs away, shoots from a distance if player is spotted). Etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Thu Aug 14, 2014 5:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2014-08-14T16:53:29-07:00</updated>
<published>2014-08-14T16:53:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132576#p132576</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132576#p132576"/>
<title type="html"><![CDATA[Re: Enemy AI for a small homebrew game]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11534&amp;p=132576#p132576"><![CDATA[
Intelligence is a hard goal, but stupidity is much more achievable. Other than that, I don't have much useful input.<br />How much spare CPU time do you have ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Thu Aug 14, 2014 4:53 pm</p><hr />
]]></content>
</entry>
</feed>