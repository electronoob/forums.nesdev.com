<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Programming languages behind games</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Programming languages behind games</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12314">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12314</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Sun Feb 01, 2015 4:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I only worked with that of UE1 anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Feb 01, 2015 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I remember seeing some source code to something by Color Dreams, I couldn't find it online today but I did have it saved on my computer.  I only have this one &quot;yourcode.asm&quot; file which is obviously incomplete, but it has 4300 lines of code/script that all looks like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DUDEMAKE:<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;DUMMY,MAKER<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;0,-1,0,0,0<br /><br />MAKER:<br />;FIRST DO A WHOLE BUNCH 'O CRAP...<br /><br />&nbsp; &nbsp;.DB&nbsp; &nbsp;INSTRUCTIONS,22<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;GRAVITY,0<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;DISSCROLL,UP|DOWN<br /><br />&nbsp; &nbsp;.DB&nbsp; &nbsp;SETREG,0,0<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;STORE,50 &nbsp; &nbsp;;ZERO HAND COUNT<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;STORE,51&nbsp; &nbsp;;ZERO COUNTER<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;STORE,25&nbsp; &nbsp;;ZERO GOAL COUNT<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;STORE,53 &nbsp; &nbsp;;ZERO SAVED COUNT<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;STORE,55&nbsp; &nbsp;;ZERO LAUNCH COUNT<br /><br />&nbsp; &nbsp;.DB&nbsp; &nbsp;WRITEVID<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;SCORES<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;15,1,0,5<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;WRITEVID<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;CAUGHT<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;19,1,0,6<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;WRITEVID<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;HANDTEXT<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;23,1,0,5<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;GETHEROS,JOY1<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;SHOWREG,24,1,0<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;WRITEVID<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;TIME<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;15,26,0,5<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;WRITEVID<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;SAVED<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;19,26,0,5<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;LOAD,53<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;SHOWREG,20,26,0&nbsp; &nbsp;&nbsp; &nbsp;;PRINT OUT NUMBER SAVED (ZERO)<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;WRITEVID&nbsp; &nbsp;;PRINT OUT &quot;QUOTA&quot; AND RESPECTIVE NUMBER<br />&nbsp; &nbsp;.DRW&nbsp; &nbsp;GOAL<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;23,26,0,5<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;FETCHREG,PARAM2<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;STORE,25<br />&nbsp; &nbsp;.DB&nbsp; &nbsp;SHOWREG,24,26,0<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Feb 01, 2015 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">(I only have experience with UE3, by the way. I can't comment on UE4.)</div><br />UE4 is C++ all the way, and some sort of visual scripting thingy (&quot;blueprints&quot; they call it) thrown on top.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 01, 2015 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sweet Jesus, how many languages are there! What even warrants so many different ones?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Mon Feb 02, 2015 2:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Final Fantasy Legend II on GB uses a BASIC-like interpreted language (Someone confirmed with hacking).<br /><br /><!-- m --><a class="postlink" href="http://www.gamefaqs.com/boards/585710-final-fantasy-legend-ii/41541049">http://www.gamefaqs.com/boards/585710-f ... i/41541049</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Feb 02, 2015 5:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Apparently, interpreted bytecode is quite common, so it's not surprising I wrote my own system using interpreted bytecode to save ROM (as opposed to 6502 native code).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Final Fantasy Legend II on GB uses a BASIC-like interpreted language (Someone confirmed with hacking).</div><br />This bugs me. How can they know the language looked like BASIC before compilation, if all they can see is the resulting bytecode ? This makes not much sense. It could any other language, really.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Feb 02, 2015 10:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />BASIC was usually compiled to some form of &quot;pseudo-bytecode&quot; where the opcodes are not instructions to be run as-is but rather the tokens making up each instruction (so e.g. LET A = B + 2 would be stored as 6 tokens) - sorta like a makeshift compression scheme. If the bytecode looks something like this then it's usually safe to assume the language must have been BASIC-like, at least in how it worked.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cyc</b> [ Mon Feb 02, 2015 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I remember seeing some source code to something by Color Dreams, I couldn't find it online today but I did have it saved on my computer.  I only have this one &quot;yourcode.asm&quot; file ...</div><br />you can find it in <a href="http://gilgalad.arc-nova.org/vgscr/nes/Freefall.zip" class="postlink">this archive.</a> but there are many other sources <a href="http://gilgalad.arc-nova.org/vgscr/nes.html" class="postlink">on the site.</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Feb 02, 2015 1:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">BASIC was usually compiled to some form of &quot;pseudo-bytecode&quot; where the opcodes are not instructions to be run as-is but rather the tokens making up each instruction (so e.g. LET A = B + 2 would be stored as 6 tokens) - sorta like a makeshift compression scheme. If the bytecode looks something like this then it's usually safe to assume the language must have been BASIC-like, at least in how it worked.</div><br /><br />What makes something BASIC-like? How would, say, an interpreted LISP subset look different at the bytecode level?<br /><br />Consider these two claims:<br />1. &quot;Here's a BASIC-like language I constructed to represent what these bytecodes are doing.&quot;<br />2. &quot;A BASIC-like language was used to construct these bytecodes.&quot;<br /><br />The first one is easy to make. The second I think is a lot harder.<br /><br />I expect most bytecodes look something like: Function opcode, followed by the required number of parameter codes, possibly with recursive expansion on parameters, repeat. Alternatively, instead of recursive expansion, the compiler could expand/unwind the parameters itself. More or less any programming language can be compiled down to something like this. There's nothing unique about BASIC in this respect.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Feb 02, 2015 9:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In most cases bytecode is basically similar to CPU instruction sets on their own, so for example you have operations like load, store, add, substract, compare, etc. BASIC usually gets tokenized instead, where the source code is stored as tokens to save space (so you have stuff like print, input, let, etc., i.e. higher level instructions). Basically just take the different parts making up a sentence and encode them into something more compact than plain text (in theory you should even be able to recover something akin to the original source code from this as well, this is exactly what the LIST command in old computers did in fact).<br /><br />Every language can be handled both ways, but since tokenization was something done mostly with BASIC, it's safe to assume it was probably something similar to BASIC when that method is used. Now, if the bytecode resembles more CPU instructions, yeah the assumption is pretty stupid.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Mon Feb 02, 2015 10:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm reminded that Earthbound had most of its stuff in its dialogue-scripting language. Past a certain point, if you want varying functionalities, you pretty much have to have your own language; while some RPGs just have &quot;I can do this and this and this with these probabilities of each&quot; others allow more complicated control structures. Final Fantasy 6's enemy scripts are pretty-well documented, for instance.<br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Sweet Jesus, how many languages are there! What even warrants so many different ones?</div><br /><div class="quotetitle"><a href="https://en.wikipedia.org/wiki/Lists_of_programming_languages" class="postlink">wikipedia's Lists of Programming Languages</a> (emphasis added) wrote:</div><div class="quotecontent">There are <strong>thousands</strong> of computer programming languages. These are listed in various ways:</div><br />Of course, their <a href="https://en.wikipedia.org/wiki/List_of_programming_languages" class="postlink">main list</a> doesn't include <a href="https://en.wikipedia.org/wiki/Esoteric_programming_language" class="postlink">kind intentionally designed to screw with your head</a><br /><br />There are many, many reasons to have different programming languages. Machine code is instructions  to processors (which depends on what said processor can do); assembly languages (in broad strokes) are human-readable.<br /><br />One can focus on making programs correspond simply to what the computer does, just automating simple tasks. Or, one can focus on corresponding simply to results, automating far more things.<br /><br /><a href="https://en.wikipedia.org/wiki/BASIC" class="postlink">BASIC</a> (and its <a href="https://en.wikipedia.org/wiki/List_of_BASIC_dialects" class="postlink">hundreds of dialects</a>) and <a href="https://en.wikipedia.org/wiki/Logo_%28programming_language%29" class="postlink">Logo</a> were designed to be easy-to-learn. <span style="font-size: 75%; line-height: normal"> (Logo also has the operation of a particular kind of drawing robot in mind, but this is optional.)</span><br /><br /><a href="https://en.wikipedia.org/wiki/Fortran" class="postlink">Fortran</a> was basically designed for numeric computation.<br /><br />Verilog and other <strong>H</strong>ardware <strong>D</strong>escription <strong>L</strong>anguages are for...well, describing what you want an integrated circuit to do.<br /><br />One might design a language to operate your (new) tools. One might design a language so that nobody else knows it and stealing your code doesn't help spies if they can't also get the compiler. <br /><span style="font-size: 50%; line-height: normal">One might design a <a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)" class="postlink">language</a> to compete and lure others to buy your products from other languages, yet make it so they can't readily go back; perhaps also make it not run on other platforms for monopolizing power.</span><br /><br />One might design languages for automating I/O processing, including tokenizing of strings and matching to regular expressions (which are, of course, their own kind of language).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">tokenization was something done mostly with BASIC,</div>I think you'll have to unpack that a little.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 03, 2015 1:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">In most cases bytecode is basically similar to CPU instruction sets on their own, so for example you have operations like load, store, add, substract, compare, etc. BASIC usually gets tokenized instead, where the source code is stored as tokens to save space (so you have stuff like print, input, let, etc., i.e. higher level instructions). Basically just take the different parts making up a sentence and encode them into something more compact than plain text (in theory you should even be able to recover something akin to the original source code from this as well, this is exactly what the LIST command in old computers did in fact).</div><br />I think you are confusing two completely different things : Tokenized source code and bytecode. I am by no means a specialist, however tokenized source code is not bytecode ! It is just a compressed source code, where a token is replaced by a single byte, for the sole purpose of saving memory. The comments for example are still here and intact, and the variable and function names are also present in RAW format.<br /><br />Bytecode on the other hand can take many different forms but in most case it will be low-level instructions, where the comments are removed and there is no plain text anymore, the comments, the variables and functions names are gone, they are replaced by addresses or offsets.<br /><br />Thus a &quot;BASIC-like bytecode&quot; is not possible, either it is a bytecode that comes from an unknown language, or it is tokenized BASIC where all variable and function names are apparent (the comments might have been removed for the release though).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Verilog and other Hardware Description Languages are for...well, describing what you want an integrated circuit to do.</div><br />This is probably controversial, but in my opinion Hardware Description Languages are not programming languages (although they look similar) : They are not written to describe <strong>programs</strong>, but hardware. The verification / test bench part of them could be considered a programming language, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Tue Feb 03, 2015 2:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games: Devil's Advocacy</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You may not have a <strong>program</strong> on the resultant FPGA/what have you, but the Verilog is/is used to<br /><div class="quotetitle">googled program definitions wrote:</div><div class="quotecontent">n. 4. a series of coded software instructions to control the operation of a computer or other machine.<br />v. 1. provide (a computer or other machine) with coded instructions for the automatic performance of a particular task.</div>It at least is a set of &quot;do-this-when-that&quot; that gets boiled down to instructions to the device to &quot;connect-this-to-that&quot; and &quot;fill-this-LUT-with-that&quot; etc...<br /><br />Mind, this loosely-defined, staff music is a programming language, as is English (for you can write the programme of the evening's entertainment with it...) <br /><br />I'll agree that Verilog is probably not a language you can use to make the computer you wrote it on perform arbitrary operations.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thus a &quot;BASIC-like bytecode&quot; is not possible, either it is a bytecode that comes from an unknown language, or it is tokenized BASIC where all variable and function names are apparent</div>Dictionary-indexing of names seems like a sensible lossless size-reducing option; why would this be any less sensible to do for the arbitrary variable/function(/subroutine/label) names than for the fixed instruction and operator names? Aren't both of them necessary steps for executing the program anyway?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 03, 2015 3:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Dictionary-indexing of names seems like a sensible lossless size-reducing option; why would this be any less sensible to do for the arbitrary variable/function(/subroutine/label) names than for the fixed instruction and operator names? Aren't both of them necessary steps for executing the program anyway?</div><br />I said I wasn't an expert, some variants of tokenized BASIC more advanced than C64's could very well do that, but then the variable's and function's names have to be present at least once in order to retrieve the original source code exactly like it was, when running &quot;LIST&quot; for instance.<br /><br />The point is that tokenized BASIC has a 1:1 relationship with the original sourcecode, whether a compiled bytecode does not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Tue Feb 03, 2015 10:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Programming languages behind games</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">Sik wrote:</div><div class="quotecontent">In most cases bytecode is basically similar to CPU instruction sets on their own, so for example you have operations like load, store, add, substract, compare, etc. BASIC usually gets tokenized instead, where the source code is stored as tokens to save space (so you have stuff like print, input, let, etc., i.e. higher level instructions). Basically just take the different parts making up a sentence and encode them into something more compact than plain text (in theory you should even be able to recover something akin to the original source code from this as well, this is exactly what the LIST command in old computers did in fact).</div><br />I think you are confusing two completely different things : Tokenized source code and bytecode. I am by no means a specialist, however tokenized source code is not bytecode ! It is just a compressed source code, where a token is replaced by a single byte, for the sole purpose of saving memory. The comments for example are still here and intact, and the variable and function names are also present in RAW format.<br /><br />Bytecode on the other hand can take many different forms but in most case it will be low-level instructions, where the comments are removed and there is no plain text anymore, the comments, the variables and functions names are gone, they are replaced by addresses or offsets.<br /><br />Thus a &quot;BASIC-like bytecode&quot; is not possible, either it is a bytecode that comes from an unknown language, or it is tokenized BASIC where all variable and function names are apparent (the comments might have been removed for the release though).</div><br />You're making the assumption the original quote didn't also use the wrong term as well (I keep saying &quot;bytecode&quot; to stay consistent with what has been mentioned before).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>