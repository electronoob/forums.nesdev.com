<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=2817" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-12-25T12:09:25-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=2817</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-12-25T12:09:25-07:00</updated>
<published>2006-12-25T12:09:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20617#p20617</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20617#p20617"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20617#p20617"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'd guess that the extra cycle is necessary to avoid a clash between the byte just read (lower 8 bits of new PC) and the byte about to be written (upper 8 bits of old PC). There are no other opcodes that write to the stack immediately after an important read operation.<br /></div>But there are instructions which write to memory immediately after reading the high byte of the address to write to.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Just a guess - It was originally to put the status register on the stack like interrupts does, and was tricky disabled.<br /></div>If this were the case the status would probably be pushed last, like in an interrupt.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Dec 25, 2006 12:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-12-25T02:17:39-07:00</updated>
<published>2006-12-25T02:17:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20616#p20616</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20616#p20616"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20616#p20616"><![CDATA[
Just a guess - It was originally to put the status register on the stack like interrupts does, and was tricky disabled.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Dec 25, 2006 2:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dvdmth]]></name></author>
<updated>2006-12-24T10:24:54-07:00</updated>
<published>2006-12-24T10:24:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20604#p20604</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20604#p20604"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20604#p20604"><![CDATA[
If I were to venture a guess, I'd guess that the extra cycle is necessary to avoid a clash between the byte just read (lower 8 bits of new PC) and the byte about to be written (upper 8 bits of old PC).  There are no other opcodes that write to the stack immediately after an important read operation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=360">dvdmth</a> — Sun Dec 24, 2006 10:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-12-24T11:16:03-07:00</updated>
<published>2006-12-23T17:49:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20600#p20600</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20600#p20600"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20600#p20600"><![CDATA[
It doesn't make sense, as the stack pointer is immediately available at all times, and (for example) the absolute addressing mode is able to put the just-read 16-bit address on the bus immediately after it's read, without a one cycle delay. The 6502 manual doesn't offer help either:<br /><div class="quotetitle">6502 Manual wrote:</div><div class="quotecontent"><br />During the third cycle, the microprocessor puts the stack pointer onto the address lines and on the fourth writes the contents of the current value of the program counter high into the memory location indicated by the stack pointer address.<br /></div><br />The folks on <a href="http://6502.org/" class="postlink">6502.org</a> might have more insight.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Dec 23, 2006 5:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2006-12-23T15:43:46-07:00</updated>
<published>2006-12-23T15:43:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20599#p20599</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20599#p20599"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20599#p20599"><![CDATA[
It <em>must</em> have some purpose. I mean, I know that the 6502 can waste some cycles, but never in this manner. It just seems to bear no resemblance to the rest of the opcode, bearing in mind that saving the one cycle would mean a lot for the programmer for such a speed restricted CPU.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Sat Dec 23, 2006 3:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-12-23T15:20:37-07:00</updated>
<published>2006-12-23T15:20:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20598#p20598</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20598#p20598"/>
<title type="html"><![CDATA[Re: JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20598#p20598"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR<br /><br />        #  address R/W description<br />       --- ------- --- -------------------------------------------------<br />        1    PC     R  fetch opcode, increment PC<br />        2    PC     R  fetch low address byte, increment PC<br />        3  $0100,S  R  internal operation &#40;predecrement S?&#41;<br />        4  $0100,S  W  push PCH on stack, decrement S<br />        5  $0100,S  W  push PCL on stack, decrement S<br />        6    PC     R  copy low address byte to PCL, fetch high address<br />                       byte to PCH</div><br />Does anyone know what actually happens on the third cycle? What gets read into the databus?<br /></div><br />According to the table, the CPU reads and discards the memory or I/O location whose address is (0x0100 plus the stack pointer). In the NES, this is always RAM[0x0100 + regS].<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Dec 23, 2006 3:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-12-23T15:20:35-07:00</updated>
<published>2006-12-23T15:20:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20597#p20597</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20597#p20597"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20597#p20597"><![CDATA[
It isn't known what it's trying to do, but it's probably safe to just do the stack access and ignore it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Sat Dec 23, 2006 3:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2006-12-23T15:17:26-07:00</updated>
<published>2006-12-23T15:17:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20596#p20596</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20596#p20596"/>
<title type="html"><![CDATA[JSR]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2817&amp;p=20596#p20596"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR<br /><br />        #  address R/W description<br />       --- ------- --- -------------------------------------------------<br />        1    PC     R  fetch opcode, increment PC<br />        2    PC     R  fetch low address byte, increment PC<br />        3  $0100,S  R  internal operation &#40;predecrement S?&#41;<br />        4  $0100,S  W  push PCH on stack, decrement S<br />        5  $0100,S  W  push PCL on stack, decrement S<br />        6    PC     R  copy low address byte to PCL, fetch high address<br />                       byte to PCH</div><br />Does anyone know what actually happens on the third cycle? What gets read into the databus?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Sat Dec 23, 2006 3:17 pm</p><hr />
]]></content>
</entry>
</feed>