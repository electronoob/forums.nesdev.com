<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NMI/BRK timing and such</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NMI/BRK timing and such</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10006">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10006</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Wed Apr 10, 2013 11:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm assuming NMI can hijack IRQ in a similar way too, and that IRQ can hijack BRK (though it wouldn't be as visible since they use the same interrupt vector. Might cause you to &quot;miss&quot; the IRQ perhaps...).</div><br />Wouldn't matter with BRK and IRQ, since BRK hijacking IRQ would just mean that it would just delay the real IRQ vectoring until the BRK returned. IRQ hijacking BRK would be nasty, since it would be as if the CPU skipped the BRK. I believe this is what happens, though looks like ROM doesn't test it.<br /><br /><a href="http://wiki.nesdev.com/w/index.php/Emulator_tests#CPU" class="postlink">cpu_interrupts_v2</a><br /><br />It even checks an NMI occurring during each cycle of an IRQ. And even checks the interrupt-delaying effect of the last cycle of a taken branch. Crazy.</div><br /><br />Nice. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Could copy the same info to the wiki so it's a bit easier to find I guess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Wed Apr 10, 2013 11:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just realized I've been misreading the Visual 6502 traces. You get the previous opcode in the Execute field (which I'm guessing is the instruction reg) while the opcode fetch is taking place, which threw me off.<br /><br />If you consider the opcode fetch as part of the instruction (like most docs do) the timing is actually like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --------------------<br />&#91;CLI&#93;&#91;CLI&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;</div><br /><br />And similarly:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --------------------<br />&#91;LDX zero,y&#93;&#91;LDX zero,y&#93;&#91;LDX zero,y&#93;&#91;LDX zero,y&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;&#91;BRK&#93;<br /></div><br /><br />This in turn gives<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;#&nbsp; address R/W description<br />--- ------- --- -----------------------------------------------<br />&nbsp;1&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp;2&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; read next instruction byte (and throw it away),<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; increment PC<br />&nbsp;3&nbsp; $0100,S&nbsp; W&nbsp; push PCH on stack, decrement S<br />&nbsp;4&nbsp; $0100,S&nbsp; W&nbsp; push PCL on stack, decrement S<br />*** At this point, the signal status is queried to determine which interrupt vector to use ***<br />&nbsp;5&nbsp; $0100,S&nbsp; W&nbsp; push P on stack (with B flag set), decrement S<br />&nbsp;6&nbsp; &nbsp;$FFFE&nbsp; &nbsp;R&nbsp; fetch PCL<br />&nbsp;7&nbsp; &nbsp;$FFFF&nbsp; &nbsp;R&nbsp; fetch PCH</div><br /><br />Bit more intuitive.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Apr 11, 2013 2:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I created a wiki page at <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/CPU_interrupt_quirks">http://wiki.nesdev.com/w/index.php/CPU_interrupt_quirks</a><!-- m --> (linked from <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/CPU">http://wiki.nesdev.com/w/index.php/CPU</a><!-- m -->). Please check for inaccuracies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Thu Apr 11, 2013 3:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Wiki wrote:</div><div class="quotecontent">The RTI instruction affects IRQ inhibition immediately. If an IRQ is pending and an RTI is executed that clears the I flag, the CPU will invoke the IRQ handler immediately after RTI finishes executing.<br />The CLI, SEI, and PLP instructions effectively delay changes to the I flag until after the next instruction. For example, if an interrupt is pending and the I flag is currently set, executing CLI will execute the next instruction before the CPU invokes the IRQ handler. This delay only affects inhibition, not the value of the I flag itself; CLI followed by PHP will leave the I flag cleared in the saved status byte on the stack (bit 2), as expected.</div><br /><br />This is easily explainable. /IRQ and /NMI are latched internally during the first half of each cycle. The actions that occur during CLI, SEI, and PLP occur during the second half. Because of this, the old value of the i flag is used when masking /IRQ. Any interrupt that is pending when CLI is executed will be masked, then i will be cleared, and one more instruction will execute (during which, i will now be clear, and /IRQ will not be masked, and the interrupt will be executed afterwards).<br /><br />RTI on the other hand has 2 cycles after pulling the flags off the stack (Pull pcl, pull pch), so it will mask /IRQ with the expected value. And interrupts will occur immediately after, if they are now enabled.<br /><br />EDIT: The latching process mentioned above should be:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irq_latch = irq &amp; ~i;<br />nmi_latch = nmi &amp; ~nmi_latch;<br /><br />the above assumes irq and nmi aren't inverted, and that a value of 1 means &quot;active&quot;</div><br /><br />EDIT2: The above also explains why reading $2002 will &quot;suppress&quot; NMI. NMI will be pulled low, $2002 will be read with bit 7 set, clear bit 7 (and thus pulling NMI back up) before the CPU notices that it was ever low. Effectively suppressing the NMI, even though VBL was read as set. I assume some race condition also explains why reading $2002 will &quot;suppress&quot; setting the flag too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>proxy</b> [ Thu Apr 11, 2013 6:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very good stuff guys. Back to me trying to pass the test ROMs, I've gotten closer but not quite right. When running blargg's VBL/NMI test suite I get the following results now:<br /><br />01-vbl_basics.nes = PASS<br />02-vbl_set_time.nes = PASS<br />03-vbl_clear_time.nes = PASS<br />04-nmi_control.nes = PASS<br />05-nmi_timing.nes = PASS<br />06-suppression.nes = PASS<br />07-nmi_on_timing.nes = FAIL<br />08-nmi_off_timing.nes = PASS<br />09-even_odd_frames.nes = PASS<br />10-even_odd_timing.nes = FAIL<br /><br /><br />But here's the weird thing. The only way I was able to make it pass 5 and 6 was by slightly delay the PPU triggering an NMI. <br /><br />Here's the timing I used to have (Timing is in : PPU(y, x) notation, I consider VBLANK start to be y == 0):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPU (0,0) = idle<br />PPU (0,1) = status_ |= 0x80; if ($2002 &amp; 0x80) NMI(); execute_0_or_1_cpu_cycle();<br />...<br /></div><br /><br />Which was always a cycle or two off in either direction when running the NMI/VBL tests (depending on tweaks I made to my core.<br /><br />But when I changed it to this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPU (0,0) = idle<br />PPU (0,1) = status_ |= 0x80; execute_0_or_1_cpu_cycle();<br />PPU (0,2) = execute_0_or_1_cpu_cycle(); if ($2002 &amp; 0x80 &amp;&amp; status_ &amp; 0x80) NMI();<br />...<br /></div><br /><br />or equally as far as the CPU is concerned:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPU (0,0) = idle<br />PPU (0,1) = status_ |= 0x80; execute_0_or_1_cpu_cycle();<br />PPU (0,2) = execute_0_or_1_cpu_cycle();<br />PPU (0,3) = if ($2002 &amp; 0x80 &amp;&amp; status_ &amp; 0x80) NMI(); execute_0_or_1_cpu_cycle();<br />...<br /></div><br /><br /><br />Suddenly I pass more tests! I would have figured that the NMI was tied directly to the both status &amp; 0x80 and $2002 &amp; 0x80 both being set and would happen IMMEDIATE. Is there actually supposed to be a 1 or 2 PPU tick delay?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Thu Apr 11, 2013 1:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I pass all the tests with no delay whatsoever. I used to have a two dot delay, but I recently rewrote all my interrupt stuff to make it deadly accurate and it passes all the tests. The biggest change I made was emulating the processors on half cycles. Each read/write I run the PPU for 6 master cycles (for ntsc), poll the interrupt flags, then run the PPU for another 6. So basically 1.5 dots, check flags, another 1.5 dots. AFAIK there is no important delay associated with NMI, IRQ and RST.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>proxy</b> [ Thu Apr 11, 2013 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm, I don't get it then :-/.<br /><br />I run the PPU 1 dot at a time, every 3rd PPU dot, I run the CPU for 1 cycle. In other words, since right now I'm only concerned with NTSC, single PPU cycles are my basic unit of execution. I'm not sure where I'm going wrong with that.<br /><br />What I was doing previously was on the first line of the vblank @ dot 1, I set  $2002.7 and at that same dot, if $2000.7 is also set, I would signal the CPU to do an NMI. So the absolute earliest an NMI could occur is literally on dot 1 of the first line of the vblank (assume that the CPU was about the fetch a new instruction when it happened).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Thu Apr 11, 2013 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And just to clarify, given a zero-based numbering system, your vblank would occur on scanline 241, dot 1?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Apr 11, 2013 4:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">beannaich wrote:</div><div class="quotecontent">I pass all the tests with no delay whatsoever. I used to have a two dot delay, but I recently rewrote all my interrupt stuff to make it deadly accurate and it passes all the tests. The biggest change I made was emulating the processors on half cycles. Each read/write I run the PPU for 6 master cycles (for ntsc), poll the interrupt flags, then run the PPU for another 6. So basically 1.5 dots, check flags, another 1.5 dots. AFAIK there is no important delay associated with NMI, IRQ and RST.</div><br /><br />So to clarify, you poll the interrupt flags after the first half-cycle of each CPU cycle? I'm guessing the real 6502 does that, but I wasn't sure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Apr 11, 2013 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, I suspect the interrupt delay behavior after CLI and PLP might not require half-cycles at all to understand. Check the following Visual 6502 log (CLI + NOP + NOP + ...):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; cycle&nbsp; &nbsp;ab&nbsp; &nbsp; &nbsp; db&nbsp; &nbsp; &nbsp; rw&nbsp; &nbsp; &nbsp; Fetch&nbsp; &nbsp;pc&nbsp; &nbsp; &nbsp; a&nbsp; &nbsp; &nbsp; &nbsp;x&nbsp; &nbsp; &nbsp; &nbsp;y&nbsp; &nbsp; &nbsp; &nbsp;s&nbsp; &nbsp; &nbsp; &nbsp;p&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Execute irq<br />C---0&nbsp; &nbsp; &nbsp; &nbsp;0000&nbsp; &nbsp; 58&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;CLI&nbsp; &nbsp; &nbsp;0000&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdIZc&nbsp; &nbsp; &nbsp; &nbsp; BRK&nbsp; &nbsp; &nbsp;1 &lt;- Interrupt poll #1<br />L&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0000&nbsp; &nbsp; 58&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;CLI&nbsp; &nbsp; &nbsp;0000&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdIZc&nbsp; &nbsp; &nbsp; &nbsp; BRK&nbsp; &nbsp; &nbsp;1<br />I&nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdIZc&nbsp; &nbsp; &nbsp; &nbsp; CLI&nbsp; &nbsp; &nbsp;0 &lt;- Interrupt poll #2<br />&nbsp;\--1&nbsp; &nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdIZc&nbsp; &nbsp; &nbsp; &nbsp; CLI&nbsp; &nbsp; &nbsp;0<br />N---2&nbsp; &nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;NOP&nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdiZc&nbsp; &nbsp; &nbsp; &nbsp; CLI&nbsp; &nbsp; &nbsp;0 &lt;- Interrupt poll #3<br />O&nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;NOP&nbsp; &nbsp; &nbsp;0001&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdiZc&nbsp; &nbsp; &nbsp; &nbsp; CLI&nbsp; &nbsp; &nbsp;0<br />P&nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑BdiZc&nbsp; &nbsp; &nbsp; &nbsp; NOP&nbsp; &nbsp; &nbsp;0 &lt;- Interrupt poll #4<br />&nbsp;\--3&nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; NOP&nbsp; &nbsp; &nbsp;0<br />I---4&nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;NOP&nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; NOP&nbsp; &nbsp; &nbsp;0 &lt;- Interrupt poll #5<br />R&nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;NOP&nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; NOP&nbsp; &nbsp; &nbsp;0<br />Q&nbsp; &nbsp;5&nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; BRK&nbsp; &nbsp; &nbsp;0 &lt;- Interrupt poll #6<br />|&nbsp; &nbsp;5&nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; BRK&nbsp; &nbsp; &nbsp;0<br />|&nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp;01fd&nbsp; &nbsp; ea&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; BRK&nbsp; &nbsp; &nbsp;0 &lt;- Interrupt poll #7<br />|&nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp;01fd&nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0002&nbsp; &nbsp; aa&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; 00&nbsp; &nbsp; &nbsp; fd&nbsp; &nbsp; &nbsp; nv‑bdiZc&nbsp; &nbsp; &nbsp; &nbsp; BRK&nbsp; &nbsp; &nbsp;0<br /></div><br /><br />Notice that the I flag only drops <em>after</em> the CLI finishes executing. Hence interrupt poll #2 during the CLI won't trigger the &quot;do IRQ&quot; logic, and once it does trigger at interrupt poll #3, the NOP has already begun executing, and so will need to finish.<br /><br />(Note that instructions begin when they are Fetch'd and not when they are Execute'd. That tripped me up at first.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Thu Apr 11, 2013 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">Note that instructions begin when they are Fetch'd and not when they are Execute'd. That tripped me up at first.</div><br /><br />I have to take issue with this, call it nitpicking if you want. But each instruction ends by fetching the next instruction. It doesn't begin by fetching itself. If you look at the Execute column, which is actually executing the PLA lines for the opcode stored in IR, then you'll see that the 2nd cycle of CLI clears the i flag, as it's fetching the NOP. This cycle (opcode fetch) won't poll the flags. It also won't increment PC if there was a hardware interrupt pending and nothing is inhibiting it. Instead IR will be forced to $00 (BRK).<br /><br />EDIT: Moderators feel free to break this into two topics so we aren't hijacking proxy's thread.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Apr 11, 2013 7:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">beannaich wrote:</div><div class="quotecontent"><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">Note that instructions begin when they are Fetch'd and not when they are Execute'd. That tripped me up at first.</div><br /><br />I have to take issue with this, call it nitpicking if you want. But each instruction ends by fetching the next instruction. It doesn't begin by fetching itself. If you look at the Execute column, which is actually executing the PLA lines for the opcode stored in IR, then you'll see that the 2nd cycle of CLI clears the i flag, as it's fetching the NOP. This cycle (opcode fetch) won't poll the flags. It also won't increment PC if there was a hardware interrupt pending and nothing is inhibiting it. Instead IR will be forced to $00 (BRK).<br /><br />EDIT: Moderators feel free to break this into two topics so we aren't hijacking proxy's thread.</div><br /><br />Are you sure the fetch cycle won't poll the flags? Maybe it's just considered too late at that point to take effect immediately.<br /><br />It gets a bit confusing since e.g. <!-- m --><a class="postlink" href="http://nesdev.com/6502_cpu.txt">http://nesdev.com/6502_cpu.txt</a><!-- m --> does list the opcode read cycle as part of the instruction, and looking at that, no other useful work seems to get done during an opcode fetch. Seems fair to consider the fetch as part of the instruction to me at least, other than perhaps from a hw perspective (not sure how it's handled there. Does each instruction have &quot;fetch next instruction&quot; as an explicit step or something?).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Thu Apr 11, 2013 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ulfalizer wrote:</div><div class="quotecontent">Are you sure the fetch cycle won't poll the flags? Maybe it's just considered too late at that point to take effect immediately..</div><br /><br />Means the same thing, they aren't polled because it would be too late. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>proxy</b> [ Fri Apr 12, 2013 6:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@beannaich, that's exactly when it happens. I've made my PPU timing match ulfalizer's PPU.svg chart exactly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beannaich</b> [ Sun Apr 14, 2013 11:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI/BRK timing and such</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">proxy wrote:</div><div class="quotecontent">@beannaich, that's exactly when it happens. I've made my PPU timing match ulfalizer's PPU.svg chart exactly.</div><br />The only thing that I can suggest at this point, is making a debugger. See exactly why the test is failing you. I've had tests fail before because individual lines of code were executing in the wrong order. Not because anything was functionally wrong, it was just a small oversight that made me believe my emulator was WAY off in execution. Failing a test doesn't always mean you failed it for the reason given, that's just what it detected.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>