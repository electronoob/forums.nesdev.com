<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=8277" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-04-07T02:31:44-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=8277</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-04-07T02:31:44-07:00</updated>
<published>2012-04-07T02:31:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=92248#p92248</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=92248#p92248"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=92248#p92248"><![CDATA[
Yeah - in other words the 2kb CHR bank select registers select a 2kb bank, but with the corresponding 1kb bank number, ignoring the LSB, just like the MMC1 in 8kb CHR bank modes uses 4kb page numbers.<br /><br />This make sense as it simplifies the inside logic.<br /><br />Only the MMC5 does it the complex way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Apr 07, 2012 2:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-04-06T10:57:17-07:00</updated>
<published>2012-04-06T10:57:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=92216#p92216</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=92216#p92216"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=92216#p92216"><![CDATA[
Well I've still got a bug to figure out with my MMC1 before I publish my design.  Something is wrong when I test out zelda, other SNROM games are fine like metroid but zelda has issues when drawing the first map screen with the cave and everything.<br /><br />I decided to jump into MMC3 and found something that may be wrong with your MMC3 Bregalad.  I think it's due to some ambiguity in all the MMC3 docs (wiki, kevtris, &amp; disch).  The issue is with the first two CHR registers/bank numbers.<br /><br />I made the same assumption as Bregalad that those two 7bit wide registers ignore the MSB from PRG D7.  Which is similar to the PRG banks which are only 6 bits wide.  But it appears that they ignore the LSB (PRG D0) as they use CHR A10 in it's place.  All the docs I found were ambiguous as to which 7 of the 8 bits are used for holding the bank number.  I did some agreement with what I'm saying in the mapper 118 wiki impling that D7 is always mapped to CHR A17.  Thinking about it like this makes a little sense now.  Basically Bregalad's design shouldn't shift the first two CHR banks by 1 bit, they should stay as is.  The value of D7 always corresponds to CHR A17.  And all the games I'm testing with look MUCH better after I implemented this change so I'm pretty sure I'm not mistaken.<br /><br />I know you made mention of it Bregalad, it's probably common knowledge to most, but I think it's worth pointing out that your design WILL NOT WORK as you've posted it because you're clocking your scanline counter with each positive edge of CHR A12.  This behavior really isn't pointed out in Kevtris' docs well and your design led me further down the garden path.  I didn't realize how the MMC3 ignores closely timed CHR A12 posedges until checking things with disch's docs, so a more explanatory note would have been helpful to me at least.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Fri Apr 06, 2012 10:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-03-22T01:04:17-07:00</updated>
<published>2012-03-22T01:04:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91690#p91690</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91690#p91690"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91690#p91690"><![CDATA[
Good news.  I got my MMC1 working <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Thanks for making your logisim version Bregalad.  I didn't copy it exactly with some of my differences noted previously.   But your design was a great reference and starting point to help me to understand how things worked when the docs left details to be desired.<br /><br />I'll post my design and everything soon in another thread.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Thu Mar 22, 2012 1:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-03-20T01:34:25-07:00</updated>
<published>2012-03-20T01:34:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91570#p91570</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91570#p91570"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91570#p91570"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />OK so what does happen if I write for example at $2000, then immediately I write at $8000. Is the second write ignored by the MMC1, or is it taken in account.<br /></div><br /><br />My guess is yes it will be ignored.  But I do have that down as one thing to check.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also you didn't mention the possibility for the shift register to be clocked by R/W logically AND-ed with /ROMSEL.<br /><br />If this were to be the case, R/W would not go high between two consecutive writes, so this means the shift register is not clocked. But if you do what you experimented, that is, if I understood it well, toggle both M2 and R/W (but keep R/W low during write cycles when M2 is high) then the shift register will ignore writes even though R/W is cycling, because /ROMSEL is held low.<br /></div><br /><br />Actually I did account for this.  I didn't explicitly state it but it's what I was implying when I said this:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Well what if we DON'T clock M2 but still do everything else normally (for the writes to the MMC1 shift register). It turns out that consecutive writes WILL be acknowledged if we do this. Regardless if M2 is held high or low. This also further proves that PRG R/W can be held low between writes and still get each write acknowledged.<br /></div><br /><br />So for that test I operated PRG /CE and PRG R/W naturally and did a test with M2 held high and another with it low.  Basically if you disconnect M2 you can get it ACKNOWLEDGE consecutive writes.  PRG R/W stayed low for the entirety of several sequential writes and ALL of those writes were acknowledged even though they occured one 'cycle' (less M2 toggling) after another.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I didn't understand the last bug you mentionned at all. It sounds completely new to me.<br /></div><br /><br />Basically it appears to me that the shift register to reg0-3 coping happens partially (bits 4-0) on the STA instruction read the CPU clock cycle preceeding the STA's write cycle.  Then on the write cycle the same bits4-0 plus the final 5th bit from that cycle's write are copied as well.  Additionally It looks like the 5th unaccounted for bit of the first copy during the read cycle is always a 1.  So if the STA instruction is read from a different ROM location (A14-13) than the register location you're trying to write to; you'll end up writting to BOTH registers with that single (5 bit) MMC1 write operation.  Sorry I know it's a bit confusing I'll have to come up with an example...<br /><br />Yes I've never heard of it either, I think it's safe to say this is the first time it's came to light.  But it's definitely there to some degree, I need to further characterize it.  Once I modify my design a bit it may make more sense as to why it's happening.  I tested it with writing to reg0 and reg3 at the same time.  And additionally I tested it with reg1 and reg2 with similar behavior (I don't know enough to say it's identical for all registers yet but I'm guessing so).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Tue Mar 20, 2012 1:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-03-20T01:03:47-07:00</updated>
<published>2012-03-20T01:03:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91566#p91566</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91566#p91566"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91566#p91566"><![CDATA[
OK so what does happen if I write for example at $2000, then immediately I write at $8000. Is the second write ignored by the MMC1, or is it taken in account.<br /><br />Also you didn't mention the possibility for the shift register to be clocked by R/W AND /ROMSEL<br /><br />If this were to be the case, R/W would not go high between two consecutive writes, so this means the shift register is not clocked. But if you do what you experimented, that is, if I understood it well, toggle both M2 and R/W (but keep R/W low during write cycles when M2 is high) then the shift register will ignore writes even though R/W is cycling, because /ROMSEL is held low.<br /><br />I didn't understand the last bug you mentionned at all. It sounds completely new to me.<br /><br />I'll definitely fix my logisim model when this MMC1 behavior will get definitive.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Mar 20, 2012 1:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-03-19T20:05:17-07:00</updated>
<published>2012-03-19T20:05:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91562#p91562</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91562#p91562"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91562#p91562"><![CDATA[
Okay well the more I dig around the more interesting things I find... It also appears this is stirring things up a bit more around here than I expected.  As of now my plan is to keep probing away at this thing.  I'll post what I find here, but keep in mind this is still experimental data.  I could have broke something inside my MMC1 at some point, have a bad connection somewhere, or anything really.  At risk of being wrong about something I'll still post it here.  If I should start a new thread just let me know.  But I don't see why to right now.  <br /><br />Once I figure things out as best I can if someone wants to write a test rom to verify these things on other MMC1's while running on the NES etc I would think it's a good idea before considering any of this official.  I'm just performing experiments to try and figure out how this thing is actually built.  Once things have been verified, I'll release what my official design is of the MMC1 that is as accurate as I can tell.  With all that said hopefully no body gets their panties in a wad...<br /><br />To answer your question Bregalad.  Like we discussed earlier if the double write ignore isn't intentional then they wouldn't have added extra logic to check for double (or more than double) consecutive writes and only acknowledge the first.  So some optimization or 'don't care' would have had to be made use of if it was unintentional.  There are only a few ways to do this.  Here are some possibilities that I disproved in my experiments.<br /><br />The biggest possibility I saw was the fact that PRG R/W stays low between sequential writes.  It will only go high when a read is done.  So maybe they are clocking something with PRG R/W (even though it sounds like a bad idea).  With my tests I was able to actually pull PRG R/W high between the two writes without changing M2 or PRG /CE.  Even if I did this, the follow on writes were ignored.<br /><br />Another idea is some bad circuit or something that a capacitance or something that requires time to discharge so the second write is ignored.  But since I can wait seconds between writes this is disproved because it didn't matter how much time I wait between writes (usually 50msec for my rig).<br /><br />The real kicker for me was the question, "what if I perform 3, 4, 5 or more writes concecutively?"  What I found, only the FIRST will be acknowledged.  ALL follow on writes are ignored.<br /><br />Then I asked, "what if I write to ROM (MMC1), then WRAM, then ROM?  Even though it's impossible to do with the NES, It turns out only the first will still be acknowledged.  Even if you write below where the MMC1 can see ($0000-$5FFF) for several cycles but then come back and write to ROM.  It still only acknowledges the first write. <br /><br />I then asked "Well if it isn't checking PRG R/W solely (based on my earlier statement.)  How is it sensing the follow on writes?"  I the only thing I could figure is that it uses M2 and only checks PRG R/W when clocked.  But how to check this?  Well what if we DON'T clock M2 but still do everything else normally.  It turns out that consecutive writes WILL be acknowledged if we do this.  Regardless if M2 is held high or low.  This also further proves that PRG R/W can be held low between writes and still get each write acknowledged.  This also means M2 is used for more than just WRAM CE.  It's not used for clocking the Shift register, but is used for checking for consecutive writes.<br /><br />And if they did this, then the MUST have ignored consecutive writes on purpose.  Unless they somehow accidentally threw in an extra flipflop to create an 'enable write' signal by clocking PRG R/W each CPU clock cycle.  Which I think everyone will agree isn't plausible.<br /><br />One question I have yet to answer yet though is, "will blocked writes with D7=1 cause resets or not?"  So really this could also be asked, "will DEC $00 cause a reset or cause a 0 to be loaded into the shift register with no reset."  I'll get around to this at some point.<br /><br /><br />I also did some testing today to check into the details of how only the address of the last write matters as stated in Kevtris' docs.  Turns out this is only true to a certain point.  I found this out accidentally at first, but it turns out it's actually possible to write TWO Registers at ONCE.  Well almost, You can write to one full register and bits 4-0 of a second.  If one were to implement this the 5th bit of the second register appears to always be set to 1.  Now the exact details of this I'm not 100% certain of yet but here's what it looks like to me.<br /><br />So according to kevtris:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #&#91;data to load&#93;<br />STA 08000h  ;It does not matter where these first 4 writes occur. only the last write matters.<br />LSR A<br />STA 08000h<br />LSR A<br />STA 08000h<br />LSR A<br />STA 08000h<br />LSR A<br />STA 0E000h  ;NOTE: register 3 is what gets loaded!</div><br /><br />But what I've found is that if the last 'STA 0E000h' instruction is located in $E000-FFFF this is true.  However if this instruction were in $8000-9FFF, I believe that in addition to reg3 getting loaded as normal, bits 4-0 (F, H, and M1, M0) would also get loaded with the same value that we loaded reg3 bits 4-0 with.  The one thing I'm not certain of is what the 5th bit gets set to.  I did some similar testing with CHR registers (Reg1 and Reg2) and the 5th bit always gets set to 1.<br /><br />I found this by only changing the address the last byte is written to, and keeping the address of the previous cycle's read the same as the previous writes.  Implementing this on the NES the read that occurs the cycle before the write of a STA is from the address of the STA instruction.  So wherever that read is performed from, the associated register gets partially written to.  Looking at the opcodes this is only true for addressing modes that read from PC (+) before the write.  Looks like you might get something funky for some addressing modes.<br /><br />So it would seem this is somewhat of a bug and I wouldn't think it's intentional.  But it gives hits as to how it's constructed.  Looks like the copying from the Shift register to the other registers gets enabled a little early as a result of an optimization from not caring about this issue.<br /><br />Well I thats all I've got for now, at this point I'm not sure how much I care to dig deeper.  I should have enough info to get mine working atleast.  It's been fun solving some of this puzzle but I don't think it's very fruitful to dig around much deeper.  Most of this register stuff could be checked with ROM testing on the NES it just takes a lot longer to check each step compared to my set up.  If someone wants something specific tested let me know.  I can also burn eproms and test on the NES also.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Mar 19, 2012 8:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2012-03-19T16:05:25-07:00</updated>
<published>2012-03-19T16:05:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91552#p91552</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91552#p91552"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91552#p91552"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Why did you remove the schematic anyways?<br /></div><br />Mostly because it was wrong, and 74 series couldn't fit the design efficiently so I didn't think it was very elegant.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Yes and this thread is about simulating it's behavior. The fact the chip is well understood doesn't prevent one to do a simulation of the chip, does it? Note that I didn't do only the MMC1 but I did all the MMCs except MMC5 (for now).<br /></div><br />Of course not, anyone should carry out whatever experiments they wish. I think a thread like this should be definitive though if it's going to be made, and especially if it's referenced. I could draw a very rough and incomplete MMC5 now but it's useless if it only shows that I know how to design a kind-of-working mapper and doesn't bring anything new to the table (either new mapper behavior or clever insight to the logic's implementation).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Mon Mar 19, 2012 4:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-03-19T15:13:11-07:00</updated>
<published>2012-03-19T15:13:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91551#p91551</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91551#p91551"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91551#p91551"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Maybe I'm cranky because I started a thread like this 5.5 years ago (though I was inexperienced and the logic was wrong): <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=1866">http://nesdev.com/bbs/viewtopic.php?t=1866</a><!-- m --><br /></div><br />Why did you remove the schematic anyways?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />about one of the simplest ASIC mappers and one that is already very well understood.<br /></div><br />Yes and this thread is about simulating it's behavior. The fact the chip is well understood doesn't prevent one to do a simulation of the chip, does it? Note that I didn't do only the MMC1 but I did all the MMCs except MMC5 (for now).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Mar 19, 2012 3:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2012-03-19T12:19:43-07:00</updated>
<published>2012-03-19T12:19:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91550#p91550</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91550#p91550"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91550#p91550"><![CDATA[
I wasn't meaning to mapper bash, it was more of a complaint that we've received a lot of progress updates and conjecture, some of which has been wrong, about one of the simplest ASIC mappers and one that is already very well understood. I'm interested in new behavioral details as long as they're factual, but I can't imagine there being much left to discover about something so beaten to death. Maybe I'm cranky because I started a thread like this 5.5 years ago (though I was inexperienced and the logic was wrong): <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=1866">http://nesdev.com/bbs/viewtopic.php?t=1866</a><!-- m --><br /><br /><br /><br />Maybe I should point out something that I haven't noticed being taken into consideration: the MMC1 isn't likely to be a fully-custom chip, it's probably an early, very low capacity CMOS gate array by Sharp. It would be implemented in CAD using idiot-proof megafunctions provided by Sharp, like a low-tech FP<strong>GA</strong>. Any errors or wonky behavior are almost certain to be logical, not poor analog characteristics. And yes conserving logic is important because gate arrays are inefficient at routing so a significant amount of the array is typically not usable. Megafunction blocks are however designed at the transistor level so are more efficient than the same function being implemented in gates so there isn't a big penalty for a DFFE vs a DFF for example, but you might run into grid/placement issues depending on the shape of the block I guess.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Mon Mar 19, 2012 12:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-03-19T09:58:09-07:00</updated>
<published>2012-03-19T09:58:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91541#p91541</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91541#p91541"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91541#p91541"><![CDATA[
This thread was made to discuss the simulation of the MMC1 in logisim, not to debate what mappers are good/bad or wathever. People not interested in this particular mapper are pleased to stay away of this thread instead of making dumb non-constructive bashing posts. Thank you.<br />Also this thread is significant to accurate emulation, so please at least respect this.<br /><br />Back on the topic, @infinitelives, how can you be so sure two consecutive writes were blocked intentionally ? I don't really follow you on this point. And yes I read the other thread about this subject, I just didn't understand what leaded you to this conclusion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Mar 19, 2012 9:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-03-19T09:56:43-07:00</updated>
<published>2012-03-19T09:56:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91540#p91540</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91540#p91540"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91540#p91540"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />MMC1 can do more than the extant mapper 2 boards:<br /><ul><li>Twice the PRG ROM capacity (512 KiB) </li><li>Up to 32 KiB of PRG RAM </li><li>Nametable mirroring switch (1-screen $000, 1-screen $400, H, V) </li></ul><br /></div><br />Even though a discrete logic board with these features doesn't exist, they could all be implemented with few chips.<br /><br /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br />I want to ACCURATELY replicate/emulate all of these mappers in hardware/emulators and it doesn't appear that the documentation is currently not available to do so.<br /></div><br />Okay, I get what you mean. Getting these properly documented is indeed a good thing to do.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />Man, 4 extra writes and 4 LSR A's make the mappper automatically terrible?<br /></div><br />I guess all of my designs require more frequent bankswitching than most people are used to... If you switch banks less than a dozen times per frame I guess the MMC1 isn't such a bad deal, but when you need more than that the overhead starts making a difference.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It's the best thing between a surface mount MMC3 and a crap logic board.<br /></div><br />One of the most advanced NES games ever, Battletoads, uses a crap logic board, and it's better than a shitload of MMC3 games.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Mar 19, 2012 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-03-19T09:30:34-07:00</updated>
<published>2012-03-19T09:30:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91538#p91538</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91538#p91538"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91538#p91538"><![CDATA[
Man, 4 extra writes and 4 LSR A's make the mappper automatically terrible? It's the best thing between a surface mount MMC3 and a crap logic board. AKA, The best mapper for tweeners that need more than UNROM and less than MMC3.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Mon Mar 19, 2012 9:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-03-19T08:52:12-07:00</updated>
<published>2012-03-19T08:52:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91534#p91534</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91534#p91534"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91534#p91534"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">So much talk about MMC1, it's frickin MMC1!<br /></div><br />Amen! I really don't see why so much interest in a mapper that can do little more than the discrete logic ones can and must have its registers written to in such a clumsy/slow way.</div><br /><br />Well before anyone else decides to get on their high horse...<br /><br />Perhaps I should say I am merely starting with the MMC1.  I've got all the discrete mappers down which obviously didn't take much.  My end goal is to do something like this for the MMC5.  But I can't just jump into the MMC5 acting like I really know what I'm doing.  Gotta start simple.  Lots of things are well understood about how to program with most of the MMC's but not much info as to how the hardware works or was designed.  Lots of things that are a mystery about these mappers are fairly simple to figure out with proper test equipment.<br /><br />I want to ACCURATELY replicate/emulate all of these mappers in hardware/emulators and it doesn't appear that the documentation is currently not available to do so.  Everyone's solution seems to be 'just' decap it, but there is still a lot that can be found by stimulus and response testing outside the NES.  And if I can make it look identical from the outside I would think that's good enough for most people.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Mar 19, 2012 8:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-03-19T07:38:22-07:00</updated>
<published>2012-03-19T07:38:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91527#p91527</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91527#p91527"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91527#p91527"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I really don't see why so much interest<br /></div><br />Some of what might be called "archivists" frequent this board, and they want to preserve these games exactly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />in a mapper that can do little more than the discrete logic ones can and must have its registers written to in such a clumsy/slow way.<br /></div><br />MMC1 can do more than the extant mapper 2 boards:<br /><ul><li>Twice the PRG ROM capacity (512 KiB) </li><li>Up to 32 KiB of PRG RAM </li><li>Nametable mirroring switch (1-screen $000, 1-screen $400, H, V) </li></ul><br />I know Rad Racer used SGROM just for switchable mirroring. (<a href="http://nesdev.com/bbs/viewtopic.php?t=8588" class="postlink">Another topic</a> delves into how it draws its road.) I guess much of the rest of the <a href="http://bootgod.dyndns.org:7777/search.php?pcb_op=LIKE+%60%25%40%25%60&amp;pcb=SGROM&amp;group=groupid&amp;field=2&amp;order=asc&amp;rfa=1+2+11+3+9+20+41+53" class="postlink">SGROM game list</a> used it for much the same reason.<br />720°, Bad Street Brawler, Battle Chess, Battle of Olympus, Bionic Commando, Defender of the Crown, Faxanadu, Ikari Warriors 2, Indiana Jones and the Last Crusade, Kid Niki, Mega Man 2, Muppet Adventure: Chaos at the Carnival, Phantom Fighter, Princess Tomato, Robin Hood: Prince of Thieves, Rocket Ranger, The Rocketeer, Space Shuttle Project, Strider, Tecmo Baseball, Tombs and Treasure, Win Lose or Draw, and Winter Games<br /><br />And there are a bunch of games that use SNROM just for PRG RAM. No Nintendo board modified mapper 2 with PRG RAM in the way that Family BASIC modified mapper 0 with PRG RAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Mar 19, 2012 7:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-03-19T06:37:31-07:00</updated>
<published>2012-03-19T06:37:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91524#p91524</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91524#p91524"/>
<title type="html"><![CDATA[MMC1 simulated in Logisim]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8277&amp;p=91524#p91524"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">So much talk about MMC1, it's frickin MMC1!<br /></div><br />Amen! I really don't see why so much interest in a mapper that can do little more than the discrete logic ones can and must have its registers written to in such a clumsy/slow way.</div><br /><br />Yeesh.  When did this forum start hatin'?   <img src="http://forums.nesdev.com/images/smilies/icon_surprised.gif" alt=":o" title="Surprised" /> <br /><br />FWIW, quirky "why the hell did they do it that way?" logic sorta turns me on...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Mon Mar 19, 2012 6:37 am</p><hr />
]]></content>
</entry>
</feed>