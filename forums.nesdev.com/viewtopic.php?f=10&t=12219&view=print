<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Need Help Converting A Nerdy Nights Tutorial to ASM6</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Need Help Converting A Nerdy Nights Tutorial to ASM6</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12219">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12219</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>That_Nintendo_Guy</b> [ Wed Jan 07, 2015 12:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys. This is my first post, so... yeah, I hope I don't sound too n00bish or anything.  <img src="./images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /> Also, I'm not very good at keeping forum posts compact, so if you get bored with reading this probably over-winded post, just JMP down to theTL:DR section at the bottom...<br /><br />Anyway, so, recently I started becoming interested in programming games for the NES (obviously). My original wish was to make games for the N64, which I'll probably get around to eventually, but which I also can't do right now because all the compilers I've found are for PC, and all I have ATM is an Android tablet  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> . Fortunately enough for me, someone else on this site did an indirect jump to my rescue (haha, see what I did there) and compiled a copy of ASM6 that will work for Android with a command line tool. Not *exactly* what I was looking for, but at least I can make retro Nintendo games. Plus, it gives me an excuse to learn a new programming language <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Besides, the homebrew scene for the N64 seems to  be pretty bunk, and I'm afraid that if I ever have any trouble with something along that front, I wont be able to receive too terribly much aid.<br /><br />So, after doing some looking about, I found Bunnyboy's Nerdy Nights tutorials, which from what I've read\heard are some of the best. So, I read them, and they indeed are very good at explaining things related to NES programming (and 6502 programming in general). But of course, reading something doesn't matter a bit (or a byte) unless you can actually put what you read to use. Aaand unfortunately for me, the Nerdy Nights tutorials are designed for NESASM, not ASM6. Which is what I'm writing here about.<br /><br />So, I downloaded a ZIP file that contained the source for this NN sound engine tutorial. I'm a pretty big fan of chiptune music, so I wanted to write my own tunes and get them bumping right away. Unfortunately I can't  for the life of me get the code to correctly assemble mainly because it uses a lot of NESASM specific directives (.bank, inesprg, etc). Not to mention the slightly different syntax for things like indirection.  I tried reworking the code quite a bit to make it more ASM6 friendly, but it still doesn't assemble correctly. What the program is SUPPOSED to be is a simple music player that lets you listen to your songs and change songs with the controller. At best, all I get when I assemble it and run it in an emulator is a black screen and this annoying sound on the noise channel. I know the code itself isn't bad (unless I screwed it up somehow by tinkering with it), so the issue is probably with how the assembler is building it, meaning the directives I'm using are probably off. Here's a copy of the main file. There are includes in there, but those don't have much of anything that would get in the way. PS: sorry if it looks a little messy. I commented out the NESASM code and left it in there so that I could see what my own stuff needed to look like.<br /><br /><span style="color: #BF4000">TL:DR:</span>  ;reader got bored, so they'll read this<br />   I need help with modifying a Nerdy Nights source code file so that it assembles in ASM6. I've included a copy of the file so that you can see what's up.<br /><br />Edit: Damn, the file browser on my tab won't open when I click Choose File. Looks like I'll have to copy-paste it in a separate post <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>That_Nintendo_Guy</b> [ Wed Jan 07, 2015 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />K, here is the code, from &quot;drums.ask&quot;:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; .inesprg 2 ;2x 16kb PRG code<br />&nbsp; &nbsp; .ineschr 1 ;1x 8kb CHR data<br />&nbsp; &nbsp; .inesmap 0 ; mapper 0 = NROM, no bank swapping<br />&nbsp; &nbsp; .inesmir 1 ;background mirroring (vertical mirroring = horizontal scrolling)<br /><br />&nbsp; &nbsp; .rsset $0000<br />joypad1 .rs 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;button states for the current frame<br />joypad1_old .rs 1&nbsp; &nbsp; &nbsp; &nbsp;;last frame's button states<br />joypad1_pressed .rs 1&nbsp; &nbsp;;current frame's off_to_on transitions<br />sleeping .rs 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;main program sets this and waits for the NMI to clear it.&nbsp; Ensures the main program is run only once per frame.&nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp;for more information, see Disch's document: http://nesdevhandbook.googlepages.com/theframe.html<br />needdraw .rs 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;drawing flag.<br />dbuffer_index .rs 1&nbsp; &nbsp; &nbsp;;current position in the drawing buffer<br />ptr1 .rs 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;a pointer<br />sound_ptr .rs 2<br />sound_ptr2 .rs 2<br />current_song .rs 1<br />&nbsp; &nbsp; <br />;----- first 8k bank of PRG-ROM<br />&nbsp; &nbsp; .bank 0<br />&nbsp; &nbsp; .org $8000&nbsp; ;we have two 16k PRG banks now.&nbsp; We will stick our sound engine in the first one, which starts at $8000.<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; .include &quot;sound_engine.asm&quot;<br /><br />;----- second 8k bank of PRG-ROM&nbsp; &nbsp; <br />&nbsp; &nbsp; .bank 1<br />&nbsp; &nbsp; .org $A000<br />&nbsp; &nbsp; <br />;----- third 8k bank of PRG-ROM&nbsp; &nbsp; <br />&nbsp; &nbsp; .bank 2<br />&nbsp; &nbsp; .org $C000<br />&nbsp; &nbsp; <br />irq:<br />&nbsp; &nbsp; rti<br />NMI:<br />&nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp;;save registers<br />&nbsp; &nbsp; txa<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; tya<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;do sprite DMA<br />&nbsp; &nbsp; ;update palettes if needed<br />&nbsp; &nbsp; ;draw stuff on the screen<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda needdraw<br />&nbsp; &nbsp; beq .drawing_done&nbsp; &nbsp;;if drawing flag is clear, skip drawing<br />&nbsp; &nbsp; lda $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;else, draw<br />&nbsp; &nbsp; jsr draw_dbuffer<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;finished drawing, so clear drawing flag<br />&nbsp; &nbsp; sta needdraw<br />&nbsp; &nbsp; <br />.drawing_done:&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta $2005<br />&nbsp; &nbsp; sta $2005&nbsp; &nbsp;;set scroll<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr sound_play_frame&nbsp; &nbsp; ;run our sound engine after all drawing code is done.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;this ensures our sound engine gets run once per frame.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta sleeping&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;wake up the main program<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp;;restore registers<br />&nbsp; &nbsp; tay<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; tax<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; rti<br /><br />RESET:<br />&nbsp; &nbsp; sei<br />&nbsp; &nbsp; cld<br />&nbsp; &nbsp; ldx #$FF<br />&nbsp; &nbsp; txs<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; <br />vblankwait1:<br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait1<br />&nbsp; &nbsp; <br />clearmem:<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta $0000, x<br />&nbsp; &nbsp; sta $0100, x<br />&nbsp; &nbsp; sta $0300, x<br />&nbsp; &nbsp; sta $0400, x<br />&nbsp; &nbsp; sta $0500, x<br />&nbsp; &nbsp; sta $0600, x<br />&nbsp; &nbsp; sta $0700, x<br />&nbsp; &nbsp; lda #$FE<br />&nbsp; &nbsp; sta $0200, x<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne clearmem<br />&nbsp; &nbsp; <br />&nbsp;vblankwait2:<br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait2<br />&nbsp; &nbsp; <br />;set a couple palette colors.&nbsp; This demo only uses two<br />&nbsp; &nbsp; lda $2002&nbsp; &nbsp;;reset PPU HI/LO latch<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$3F<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta $2006&nbsp; &nbsp;;palette data starts at $3F00<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$0F&nbsp; &nbsp; ;black<br />&nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; lda #$30&nbsp; &nbsp; ;white<br />&nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr draw_background<br />&nbsp; &nbsp; <br />;Enable sound channels<br />&nbsp; &nbsp; jsr sound_init<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$01<br />&nbsp; &nbsp; sta current_song<br />&nbsp; &nbsp; ;jsr sound_load<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$88<br />&nbsp; &nbsp; sta $2000&nbsp; &nbsp;;enable NMIs<br />&nbsp; &nbsp; lda #$18<br />&nbsp; &nbsp; sta $2001&nbsp; &nbsp;;turn PPU on<br /><br />forever:<br />&nbsp; &nbsp; inc sleeping ;go to sleep (wait for NMI).<br />.loop:<br />&nbsp; &nbsp; lda sleeping<br />&nbsp; &nbsp; bne .loop ;wait for NMI to clear the sleeping flag and wake us up<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ;when NMI wakes us up, handle input, fill the drawing buffer and go back to sleep<br />&nbsp; &nbsp; jsr read_joypad<br />&nbsp; &nbsp; jsr handle_input<br />&nbsp; &nbsp; jsr prepare_dbuffer<br />&nbsp; &nbsp; jmp forever ;go back to sleep<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; <br />;----------------------------<br />; read_joypad will capture the current button state and store it in joypad1.&nbsp; <br />;&nbsp; &nbsp; &nbsp; &nbsp;Off-to-on transitions will be stored in joypad1_pressed<br />read_joypad:<br />&nbsp; &nbsp; lda joypad1<br />&nbsp; &nbsp; sta joypad1_old ;save last frame's joypad button states<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$01<br />&nbsp; &nbsp; sta $4016<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta $4016<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ldx #$08<br />.loop:&nbsp; &nbsp; <br />&nbsp; &nbsp; lda $4016<br />&nbsp; &nbsp; lsr a<br />&nbsp; &nbsp; rol joypad1&nbsp; ;A, B, select, start, up, down, left, right<br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bne .loop<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda joypad1_old ;what was pressed last frame.&nbsp; EOR to flip all the bits to find ...<br />&nbsp; &nbsp; eor #$FF&nbsp; &nbsp; ;what was not pressed last frame<br />&nbsp; &nbsp; and joypad1 ;what is pressed this frame<br />&nbsp; &nbsp; sta joypad1_pressed ;stores off-to-on transitions<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; rts<br /><br />;---------------------<br />; handle_input will perform actions based on input:<br />;&nbsp; &nbsp;up - play current song<br />;&nbsp; &nbsp;down - stop playing the song<br />;&nbsp; &nbsp;left - cycle down a song<br />;&nbsp; &nbsp;right - cycle up a song<br />handle_input:<br />&nbsp; &nbsp; lda joypad1_pressed<br />&nbsp; &nbsp; and #$0F ;check d-pad only<br />&nbsp; &nbsp; beq .done<br />.check_up:<br />&nbsp; &nbsp; and #$08 ;up<br />&nbsp; &nbsp; beq .check_down<br />&nbsp; &nbsp; lda current_song<br />&nbsp; &nbsp; jsr sound_load<br />.check_down:<br />&nbsp; &nbsp; lda joypad1_pressed<br />&nbsp; &nbsp; and #$04 ;down<br />&nbsp; &nbsp; beq .check_left<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; jsr sound_load<br />.check_left:<br />&nbsp; &nbsp; lda joypad1_pressed<br />&nbsp; &nbsp; and #$02 ;left<br />&nbsp; &nbsp; beq .check_right<br />&nbsp; &nbsp; jsr song_down<br />.check_right:<br />&nbsp; &nbsp; lda joypad1_pressed<br />&nbsp; &nbsp; and #$01 ;right<br />&nbsp; &nbsp; beq .done<br />&nbsp; &nbsp; jsr song_up&nbsp; &nbsp; <br />.done:<br />&nbsp; &nbsp; rts<br /><br />;--------------------<br />; song_down will move selection down a song.&nbsp; Song 1 wraps around to last song<br />song_down:<br />&nbsp; &nbsp; dec current_song<br />&nbsp; &nbsp; lda current_song<br />&nbsp; &nbsp; bne .done<br />&nbsp; &nbsp; lda #NUM_SONGS-1&nbsp; &nbsp; ;last song.&nbsp; We wrapped from Song 1<br />&nbsp; &nbsp; sta current_song<br />.done:<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />;----------------------<br />; song_up will move selection up a song.&nbsp; Last song will wrap to song 1&nbsp; &nbsp;<br />song_up:<br />&nbsp; &nbsp; inc current_song<br />&nbsp; &nbsp; lda current_song<br />&nbsp; &nbsp; cmp #NUM_SONGS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;did we move past the last song?<br />&nbsp; &nbsp; bne .done&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if not, no problem<br />&nbsp; &nbsp; lda #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;but if we did, wrap around to song 1<br />&nbsp; &nbsp; sta current_song<br />.done:<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />;-------------------------------<br />; prepare_dbuffer fills the drawing buffer with the text strings we need <br />prepare_dbuffer:&nbsp; &nbsp; <br />&nbsp; &nbsp; ;write either &quot;playing&quot; or &quot;not playing&quot; to the dbuffer<br />&nbsp; &nbsp; lda stream_status<br />&nbsp; &nbsp; ora stream_status+1<br />&nbsp; &nbsp; ora stream_status+2<br />&nbsp; &nbsp; ora stream_status+3<br />&nbsp; &nbsp; ora stream_status+4<br />&nbsp; &nbsp; ora stream_status+5<br />&nbsp; &nbsp; and #$01<br />&nbsp; &nbsp; beq .sound_not_playing&nbsp; ;if all streams disabled, write &quot;NOT PLAYING&quot; on the screen<br />&nbsp; &nbsp; lda sound_disable_flag<br />&nbsp; &nbsp; bne .sound_not_playing&nbsp; ;if the disable flag is set, we want to write &quot;NOT PLAYING&quot; too<br />.sound_playing:<br />&nbsp; &nbsp; lda #LOW(text_playing)&nbsp; ;set ptr1 to point to beginning of text string<br />&nbsp; &nbsp; sta ptr1<br />&nbsp; &nbsp; lda #HIGH(text_playing)<br />&nbsp; &nbsp; sta ptr1+1<br />&nbsp; &nbsp; jmp .dbuffer<br />.sound_not_playing:<br />&nbsp; &nbsp; lda #LOW(text_not_playing)<br />&nbsp; &nbsp; sta ptr1<br />&nbsp; &nbsp; lda #HIGH(text_not_playing)<br />&nbsp; &nbsp; sta ptr1+1<br />.dbuffer:<br />&nbsp; &nbsp; lda #$21&nbsp; &nbsp; ;target PPU address.&nbsp; add_to_dbuffer expects the HI byte in A and the LO byte in Y<br />&nbsp; &nbsp; ldy #$0B<br />&nbsp; &nbsp; jsr add_to_dbuffer<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; jsr song_num_to_dbuffer<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; lda #$01<br />&nbsp; &nbsp; sta needdraw&nbsp; &nbsp; ;set drawing flag so the NMI knows to draw<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; rts<br /><br />;-------------------------<br />; add_to_dbuffer will convert a text string into a dbuffer string and add it to the drawing buffer.<br />;&nbsp; &nbsp;add_to_dbuffer expects:<br />;&nbsp; &nbsp; &nbsp; &nbsp;HI byte of the target PPU address in A, <br />;&nbsp; &nbsp; &nbsp; &nbsp;LO byte of the target PPU address in Y<br />;&nbsp; &nbsp; &nbsp; &nbsp;pointer to the source text string in ptr1<br />;&nbsp; &nbsp;dbuffer string format:<br />;&nbsp; &nbsp; &nbsp; &nbsp;byte 0: length of data (ie, length of the text string)<br />;&nbsp; &nbsp; &nbsp; &nbsp;byte 1-2: target PPU address (HI byte first)<br />;&nbsp; &nbsp; &nbsp; &nbsp;byte 3-n: bytes to copy<br />;&nbsp; &nbsp;Note:&nbsp; &nbsp;dbuffer starts at $0100.&nbsp; This is the stack page.&nbsp; The<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stack counts backwards from $1FF, and this program is small enough that there<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;will never be a conflcit.&nbsp; But for larger programs, watch out.<br />add_to_dbuffer:<br />&nbsp; &nbsp; ldx dbuffer_index<br />&nbsp; &nbsp; sta $0101, x&nbsp; &nbsp; ;write target PPU address to dbuffer<br />&nbsp; &nbsp; tya<br />&nbsp; &nbsp; sta $0102, x<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ldy #$00<br />.loop:<br />&nbsp; &nbsp; lda &#91;ptr1&#93;, y<br />&nbsp; &nbsp; cmp #$FF<br />&nbsp; &nbsp; beq .done<br />&nbsp; &nbsp; sta $0103, x&nbsp; &nbsp; ;copy the text string to dbuffer,<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne .loop<br />.done:<br />&nbsp; &nbsp; ldx dbuffer_index<br />&nbsp; &nbsp; tya<br />&nbsp; &nbsp; sta $0100, x&nbsp; &nbsp; &nbsp; &nbsp; ;store string length at the beginning of the string header<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc dbuffer_index<br />&nbsp; &nbsp; adc #$03&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; sta dbuffer_index&nbsp; &nbsp;;update buffer index.&nbsp; new index = old index + 3-byte header + string length<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; tax<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; sta $0100, x&nbsp; &nbsp; &nbsp; &nbsp; ;stick a 0 on the end to terminate dbuffer.<br />&nbsp; &nbsp; rts<br /><br />;----------------------------------------------<br />; song_num_to_dbuffer tells the drawing buffer to write the currently selected song number on the screen.<br />song_num_to_dbuffer:<br />&nbsp; &nbsp; ldx dbuffer_index<br />&nbsp; &nbsp; lda #$01&nbsp; &nbsp; &nbsp; &nbsp; ;write one byte<br />&nbsp; &nbsp; sta $0100, x<br />&nbsp; &nbsp; lda #$21&nbsp; &nbsp; &nbsp; &nbsp; ;destination PPU $214A<br />&nbsp; &nbsp; sta $0101, x<br />&nbsp; &nbsp; lda #$4A<br />&nbsp; &nbsp; sta $0102, x<br />&nbsp; &nbsp; lda current_song ;which byte to write<br />&nbsp; &nbsp; sta $0103, x<br />&nbsp; &nbsp; lda #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;terminate the dbuffer with 0<br />&nbsp; &nbsp; sta $0104,x<br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;update our index<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc #$04<br />&nbsp; &nbsp; sta dbuffer_index<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />;------------------------<br />; draw_dbuffer will write the contents of the drawing buffer to the PPU<br />;&nbsp; &nbsp; &nbsp; &nbsp;dbuffer is made up of a series of drawing strings.&nbsp; dbuffer is 0-terminated.<br />;&nbsp; &nbsp; &nbsp; &nbsp;See add_to_dbuffer for drawing string format.<br />draw_dbuffer:<br />&nbsp; &nbsp; ldy #$00<br />.header_loop:<br />&nbsp; &nbsp; lda $0100, y<br />&nbsp; &nbsp; beq .done&nbsp; &nbsp; &nbsp; &nbsp;;if 0, we are at the end of the dbuffer, so quit<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;else this is how many bytes we want to copy to the PPU<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; lda $0100, y&nbsp; &nbsp; ;set the target PPU address<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; lda $0100, y<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; iny<br />.copy_loop:<br />&nbsp; &nbsp; lda $0100, y&nbsp; &nbsp; ;copy the contents of the drawing string to PPU<br />&nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bne .copy_loop<br />&nbsp; &nbsp; beq .header_loop&nbsp; &nbsp; ;when we finish copying, see if there is another drawing string.&nbsp; &nbsp; <br />.done:<br />&nbsp; &nbsp; ldy #$00<br />&nbsp; &nbsp; sty dbuffer_index&nbsp; &nbsp;;reset index and &quot;empty&quot; the dbuffer by sticking a zero in the first position<br />&nbsp; &nbsp; sty $0100<br />&nbsp; &nbsp; rts<br /><br />;----------------------------<br />; draw_background will draw some background strings on the screen<br />;&nbsp; &nbsp;this hard-coded routine is called only once in RESET<br />draw_background:<br /><br />&nbsp; &nbsp; lda #$21<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; lda #$04<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; ldy #$00<br />.loop:<br />&nbsp; &nbsp; lda text_sound, y<br />&nbsp; &nbsp; bmi .sound_done<br />&nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; bne .loop<br />.sound_done:<br />&nbsp; &nbsp; lda #$21<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; lda #$44<br />&nbsp; &nbsp; sta $2006<br />&nbsp; &nbsp; ldy #$00<br />.loop2:<br />&nbsp; &nbsp; lda text_song, y<br />&nbsp; &nbsp; bmi .done<br />&nbsp; &nbsp; sta $2007<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; bne .loop2<br />.done:<br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp; <br />;----- fourth 8k bank of PRG-ROM&nbsp; &nbsp; <br />&nbsp; &nbsp; .bank 3<br />&nbsp; &nbsp; .org $E000<br /><br />;these are our text strings.&nbsp; They are all terminated by $FF<br /><br />text_song:<br />&nbsp; &nbsp; .byte $22, $1E, $1D, $16, $0D, $FF ;&quot;SONG:&quot;<br />&nbsp; &nbsp; <br />text_sound:<br />&nbsp; &nbsp; .byte $22, $1E, $24, $1D, $13, $0D, $FF ;&quot;SOUND:&quot;<br />text_not_playing:<br />&nbsp; &nbsp; .byte $1D, $1E, $23, $00 ;&quot;NOT &quot;<br />text_playing:<br />&nbsp; &nbsp; .byte $1F, $1B, $10, $28, $18, $1D, $16, $00, $00, $00, $00, $FF ;&quot;PLAYING&nbsp; &nbsp; &quot;<br /><br />&nbsp; &nbsp; <br />;---- vectors<br />&nbsp; &nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; &nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; &nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; &nbsp; .dw irq&nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; .bank 4<br />&nbsp; &nbsp; .org $0000<br />&nbsp; &nbsp; .incbin &quot;drums.chr&quot;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikaelmoizt</b> [ Wed Jan 07, 2015 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh. I personally think it would be a lot easier to help if you uploaded your black screen version of this, possibly with everything needed to run it. A black screen version that assembles is a lot less work than getting the code you posted to work (yes, I tried for about half an hour, but it is just so many local labels and missing source file <strong>&quot;sound_engine.asm&quot;</strong> alone gives a lot of undef'd variables to complicate things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>That_Nintendo_Guy</b> [ Wed Jan 07, 2015 4:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh. I personally think it would be a lot easier to help if you uploaded your black screen version of this, possibly with everything needed to run it. A black screen version that assembles is a lot less work than getting the code you posted to work (yes, I tried for about half an hour, but it is just so many local labels and missing source file &quot;sound_engine.asm&quot; alone gives a lot of undef'd variables to complicate things.</div><br />Yeeeeah, not having all the code can complicate things just a little bit lol. And yeah, BB could've went a little lighter on the local labelling. Oh well, I fixed that in my version (which took a good couple of hours).<br /><br />Anyway, here is my version of the main file and sound engine. There's also CHR that goes with it, but its not really that important, you can use pretty much any 8K CHR you want, as long as its 8K.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> Like the main file, all local labels removed.</span><br />
		
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2399">sound_engine_ASM6.asm</a> [15.27 KiB]
			</span><br />
			<span class="gensmall">Downloaded 17 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> The source for my version of the program. The NESASM directives are commented out and replaced with my ASM6 ones. Also, all local labels are removed and replaced with unique non local names (makes it a lot easier to read IMO :D)</span><br />
		
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2398">DrumsASM6.txt</a> [10.9 KiB]
			</span><br />
			<span class="gensmall">Downloaded 16 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 07, 2015 4:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The <a href="http://forums.nesdev.com/viewtopic.php?t=6160" class="postlink">ASM6</a> templates I posted a few years ago should give you some tips on how to make this conversion.<br /><br />The header must be created using .db/.byte/whatever statements, instead of .inesprg and such. You can copy that part stright out of my template, along with the constants at the very top, which you can change according to your configuration.<br /><br />Then there's .rsset, which can be replaced with .enum, and you need a matching .ende after the variables are declared. Instead of .rs, you must use .dsb to reserve bytes for variables.<br /><br />ASM6 doesn't work with banks like NESASM does, so get rid of .bank statements. You can keep the .org as is, but in ASM6 you can also use .base to set or reset the PC, so it's useful when you use bankswitching and have different code that will be mapped to the same address. You don't need the .org $A000 in ASM6, because it doesn't force you to use 8KB banks, so you don't have to explicitely make that section blank. You can keep it if you still wish to divide the PRG into 4 8KB banks though.<br /><br />As for the ASM code itself, there are a few differences: indirection is represented with (), not [], so change all <strong>xxx [xx], y</strong> instructions into <strong>xxx (xx), y</strong>. Instead of #LOW() and #HIGH(), use &lt; and &gt; to get the low and high bytes of a 16-bit word. Use &quot;@&quot;, not &quot;.&quot; at the start of temporary labels.<br /><br />After the vectors, remove the .org $0000 or replace it with .base $0000. Resetting the PC here is only necessary if you plan on accessing tiles in the pattern table using labels, but that's hardly ever the case.<br /><br />Now, about sound_engine.asm, is that in ASM6 format already? If it isn't you'll have to convert it as well. EDIT: Oh, I that it's already in ASM6 format, which is probably the reason you want to modify your program, so that you can use that sound engine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>That_Nintendo_Guy</b> [ Wed Jan 07, 2015 4:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The header must be created using .db/.byte/whatever statements, instead of .inesprg and such. You can copy that part stright out of my template, along with the constants at the very top, which you can change according to your configuration.<br /><br />Then there's .rsset, which can be replaced with .enum, and you need a matching .ende after the variables are declared. Instead of .rs, you must use .dsb to reserve bytes for variables.<br /><br />ASM6 doesn't work with banks like NESASM does, so get rid of .bank statements. You can keep the .org as is, but in ASM6 you can also use .base to set or reset the PC, so it's useful when you use bankswitching and have different code that will be mapped to the same address. You don't need the .org $A000 in ASM6, because it doesn't force you to use 8KB banks, so you don't have to explicitely make that section blank. You can keep it if you still wish to divide the PRG into 4 8KB banks though.<br /><br />As for the ASM code itself, there are a few differences: indirection is represented with (), not [], so change all xxx [xx], y instructions into xxx (xx), y. Instead of #LOW() and #HIGH(), use &lt; and &gt; to get the low and high bytes of a 16-bit word. Use &quot;@&quot;, not &quot;.&quot; at the start of temporary labels.<br /><br />After the vectors, remove the .org $0000 or replace it with .base $0000. Resetting the PC here is only necessary if you plan on accessing tiles in the pattern table using labels, but that's hardly ever the case.<br /><br />Now, about sound_engine.asm, is that in ASM6 format already? If it isn't you'll have to convert it as well. EDIT: Oh, I that it's already in ASM6 format, which is probably the reason you want to modify your program, so that you can use that sound engine.</div><br /><br />Actually, I already knew about all this stuff, like about the .reset -&gt;enum thing and changing the header info and what not. If you look at the version of the source that I just posted you can see that. Also, I replaced all local label declarations with unique label names that are non local (which has the added benefit of making the code that much easier to look through). Obviously though, its not working, so I've done something wrong somewhere. Please feel free to enlighten me on what that is. And while you're doing that, I can go take a peek at those templates of yours. Oh, and BTW, was it you that made that one colored raycasting engine demo that I saw in this one Youtube video? If so, good job! I had no idea the NES was capable of such things.<br />EDIT: Well, based on your template, I can definetly say that I most likely declared the variables the wrong way. According to the README, you define them like this: &quot;foo: db 0&quot; but in your template they are defined like &quot;variable .DSB 3&quot;. I should probably get to changing at least that much.There are probably other things, but I don't have time for those at the moment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 07, 2015 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">That_Nintendo_Guy wrote:</div><div class="quotecontent">Also, I replaced all local label declarations with unique label names that are non local (which has the added benefit of making the code that much easier to look through).</div><br />Local labels are pretty useful... I'd absolutely hate if I had to think of unique names for all labels! Well, you can keep using local labels (in the newest version of ASM6, there's an older version that doesn't have local labels), just have them start with &quot;@&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Obviously though, its not working, so I've done something wrong somewhere. Please feel free to enlighten me on what that is.</div><br />I can't see anything wrong at first glance, but I can't assemble it myself because the sound engine includes a bunch of files I don't have. My advice is that you look at the errors being reported by the assembler. What does it say when it fails to create your ROM? Or does it create the ROM but it doesn't work? In this case, is the ROM the correct size (16 + 32768 + 8192 = 40976 bytes)? I really can't tell much from &quot;it's not working&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh, and BTW, was it you that made that one colored raycasting engine demo that I saw in this one Youtube video? If so, good job! I had no idea the NES was capable of such things.</div><br />Yeah, I did make a raycasting demo. In fact we've been discussing different approaches to raycasting since <a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=12180" class="postlink">Celius posted a new demo he made</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">EDIT: Well, based on your template, I can definetly say that I most likely declared the variables the wrong way. According to the README, you define them like this: &quot;foo: db 0&quot; but in your template they are defined like &quot;variable .DSB 3&quot;. I should probably get to changing at least that much.</div><br />The .db method should work too, it's just not recommended (I didn't even notice this was in the readme, I wouldn't encourage the use of that method) because .db declares a value, and you can't put a value in RAM like that. This means that the number that comes after .db is meaningless, it doesn't go anywhere or does anything, and this is confusing. also, if you wanted to declare a 16-bit variable you'd have to do <strong>.db 0, 0</strong> or <strong>.dw 0</strong>, which just adds to the confusion. What about arrays? <strong>.db 0, 0, 0, 0, 0, 0, 0, 0</strong>? Hell no. .dsb and .dsw are the directives that should be used for reserving bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Jan 07, 2015 8:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd suggest using the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-l</tt> (dash-lowercase-ELL) or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-L</tt> (dash-uppercase-ELL) flag to generate a listing, and then go through that.  If something is being assembled not quite how you expect (thus generating code that doesn't work how you intended), it'd be in there.<br /><br />Also try running the code under an emulator (e.g. FCEUX) and see what happens, as well as setting a breakpoint at the location the RESET vector points to (assuming you know what address that is in ROM (listing file should help)) and step through things to see what may be misbehaving.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jan 08, 2015 7:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In FCEUX, you can set a reset breakpoint without needing to look at the listing file.<br /><ol style="list-style-type: decimal"><li>Open FCEUX for Windows. </li><li>Open your ROM. </li><li>Debug &gt; Debugger </li><li>In the debugger window, click Step Into to stop the program. </li><li>In the game window, NES &gt; Reset. </li><li>In the debugger window, click Step Into again, and the PC will be at the reset vector. </li><li>If expected code isn't here, then either your assembler is configured incorrectly or you've done something wrong in mapper support. </li></ol><br />The &quot;Run Line&quot; and &quot;128 Lines&quot; buttons will be your friend when skipping past spinning on $2002 reads in your init code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jan 08, 2015 12:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can also type in &quot;RESET&quot; (or &quot;NMI&quot;, or &quot;IRQ&quot;) as an address in the FCEUX debugger and it will automatically be changed to the value currently in the reset vector.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jan 08, 2015 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">You can also type in &quot;RESET&quot; (or &quot;NMI&quot;, or &quot;IRQ&quot;) as an address in the FCEUX debugger and it will automatically be changed to the value currently in the reset vector.</div><br />I did not know that, thanks! Now I can stop scrolling all the way down the disassembly to check out the vectors.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikaelmoizt</b> [ Thu Jan 08, 2015 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; contents of sound_engine_ASM6<br /><br />&nbsp; &nbsp; .include &quot;sound_opcodes.asm&quot;&nbsp; &nbsp; ;our opcode subroutines, jump table and aliases<br />&nbsp; &nbsp; .include &quot;note_table.i&quot; ;period lookup table for notes<br />&nbsp; &nbsp; .include &quot;note_length_table.i&quot;<br />&nbsp; &nbsp; .include &quot;vol_envelopes.i&quot;<br />&nbsp; &nbsp; .include &quot;song0.i&quot;&nbsp; ;holds the data for song 0 (header and data streams)<br />&nbsp; &nbsp; .include &quot;song1.i&quot;&nbsp; ;holds the data for song 1<br />&nbsp; &nbsp; .include &quot;song2.i&quot;<br />&nbsp; &nbsp; .include &quot;song3.i&quot;<br />&nbsp; &nbsp; .include &quot;song4.i&quot;<br />&nbsp; &nbsp; .include &quot;song5.i&quot;<br />&nbsp; &nbsp; .include &quot;song6.i&quot;<br />&nbsp; &nbsp; .include &quot;song7.i&quot;<br />&nbsp; &nbsp; .include &quot;song8.i&quot;</div><br />Still unable to assemble this   <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>That_Nintendo_Guy</b> [ Thu Jan 08, 2015 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok ok, so HERE is a full ZIP of all the files, including ALL of the includes this time. Unfortunately, now that I've tried to set up the file the way Tokumaru showed in his template, I keep getting &quot;Value Out of Range&quot; errors during assembly for the second song data (Song1.i) <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br />*Oh, and for songs 3 and 6, along with one error apiece for both 7 and 8...

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2403">drumsASM6.zip</a> [16.85 KiB]
			</span><br />
			<span class="gensmall">Downloaded 11 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>That_Nintendo_Guy</b> [ Thu Jan 08, 2015 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, and about FCEU. As I said before, this Android tablet is all I have right now. I mean, I guess I could use the PCs at my town's library, but that would require that FCEU not need any sort of install process, which I highly doubt it doesn't... Or, if there happens to be an NES emulator for Androids that boasts a realtime debugger, please be my guest and elaborate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Jan 08, 2015 3:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Need Help Converting A Nerdy Nights Tutorial to ASM6</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">That_Nintendo_Guy wrote:</div><div class="quotecontent">Oh, and about FCEU. As I said before, this Android tablet is all I have right now. I mean, I guess I could use the PCs at my town's library, but that would require that FCEU not need any sort of install process, which I highly doubt it doesn't... Or, if there happens to be an NES emulator for Androids that boasts a realtime debugger, please be my guest and elaborate.</div><br />FCEUX is what's called a &quot;standalone app&quot;.  It does not require installation.  You can unpack the .7z/.zip file into a local directory of your choice and run it from there.  Settings/etc. get stored in fceux.cfg (written to the same dir as the .exe).  Debug statefiles, if enabled in the debugger, get stored in the same directory as the ROM.<br /><br />As for the &quot;Value out of range&quot; errors, that's because the code is using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.include</tt> (a.k.a. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.incsrc</tt>) rather than <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.incbin</tt> (a.k.a. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.bin</tt>).  In asm6, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.include</tt> is intended to include source code, and safe to say <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">songX.i</tt> are actual binary files.  Hence the error.<br /><br />I assume you've read the README.TXT that comes with asm6?  All assembler directives are described there.  Those should be easier to fix than actual 6502 syntax changes between assemblers, and the iNES header ordeal (which tokumaru already helped address).  There aren't that many directives (compared to other assemblers I'm used to), so it isn't that long of a read, and it's very easy to refer to.  <br /><br />P.S. -- How is it you're able to run asm6, which is a Win32 executable, on Android then?<br /><br />P.P.S. -- Since your driving force here is making NES music, is there some reason you're going through all this pain when FamiTracker already provides you what you need (it can export both .NSF, .NES, as well as .BIN files if you wanted to make your own stuff)?  Music code/sequencers are painful.  I guess now we're back to the Win32 vs. Android thing.  I think you're going to find doing full-on NES development on Android to be a lot more tedious/ridiculous than if you actually had a small workstation.  Would a netbook interest you?  Say, a Dell Inspiron Mini 10?  I have one I was given a few months ago which works but is lacking an AC adapter (which I can buy somewhere I'm sure), and I'd be happy to donate it to you.  It runs Windows XP.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>