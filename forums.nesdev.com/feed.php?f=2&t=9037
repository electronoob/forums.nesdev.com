<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9037" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-06-22T18:58:56-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9037</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-06-22T18:58:56-07:00</updated>
<published>2012-06-22T18:58:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95938#p95938</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95938#p95938"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95938#p95938"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />Big Nose Freaks Out uses DMC IRQs too.<br /></div><br />Oh yeah, I think that The Guardian Legend works the same way. BTW, the reason I said this method was less efficient is because it's harder to pull off (DMC IRQs + moving solid tile + sprite 0 hit = too many things to manage) and it doesn't completely eliminate the visual glitches (the solid tile used for the sprite 0 hit looks like a glitch).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jun 22, 2012 6:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-06-22T17:32:45-07:00</updated>
<published>2012-06-22T17:32:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95935#p95935</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95935#p95935"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95935#p95935"><![CDATA[
Big Nose Freaks Out uses DMC IRQs too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Fri Jun 22, 2012 5:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-06-22T17:00:23-07:00</updated>
<published>2012-06-22T17:00:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95934#p95934</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95934#p95934"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95934#p95934"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />And sometimes you pretty much have to leave a glitch, such as if you're scrolling in all four directions and your mapper has no scanline counter.<br /></div><br />I disagree.<br /><br />I deal with it with by abusing the sprite overflow to mask the sprites at the top of the screen and to detect the start of the frame to enable background rendering a fixed number of scanlines later.<br /><br />Alfred Chicken and Felix the Cat use horizontal mirroring to avoid vertical scrolling glitches and hide the leftmost column with a PPU option and the rightmost column with high priority sprites.<br /><br />Big Nose Freaks Out uses a sprite 0 hit at the bottom of the screen to disable rendering early, masking out scrolling glitches at the bottom of the screen (this method is not as efficient as the previous two, though).<br /><br />See? There are many ways around the scrolling glitches, even without special mapper features. I guess it just depends on how much the glitches bother the programmer. They bother me a lot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jun 22, 2012 5:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-06-22T15:42:21-07:00</updated>
<published>2012-06-22T15:42:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95931#p95931</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95931#p95931"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95931#p95931"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Furthermore, there are actual guidelines in the official developer documentation (bare minimum for the SNES/SFC)<br /></div><br />In the NES era, the safe area boundary was 24 pixels from the top and bottom and 16 from the left and right, according to the "background planning sheets" used during the development of <em>Super Mario Bros.</em> and <em>The Legend of Zelda</em>. TVs made in the 1970s weren't made as precisely. Nowadays, if you're developing for NTSC NES, it should be safe to put text out to 8 pixels from the left and right, 16 from the top, and 11 from the bottom.<br /><br />And sometimes you pretty much have to leave a glitch, such as if you're scrolling in all four directions and your mapper has no scanline counter.<br /><br />See also <a href="http://en.wikipedia.org/wiki/Overscan" class="postlink">Overscan on Wikipedia</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Jun 22, 2012 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-06-22T15:28:51-07:00</updated>
<published>2012-06-22T15:28:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95929#p95929</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95929#p95929"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95929#p95929"><![CDATA[
Details are also covered here:<br /><br /><!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_ntsc_pal_difference">http://wiki.nesdev.com/w/index.php/PPU_ ... difference</a><!-- m --><br /><!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Overscan">http://wiki.nesdev.com/w/index.php/Overscan</a><!-- m --><br /><br />Furthermore, there are actual guidelines in the official developer documentation (bare minimum for the SNES/SFC) that state when developing games you should try to avoid putting anything too close to the borders of the screen (horizontally or vertically) given difference in television set/CRT behaviour and what's actually visible on-screen.<br /><br />TL;DR version is: that's just the way it goes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Jun 22, 2012 3:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-06-22T14:43:20-07:00</updated>
<published>2012-06-22T14:43:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95926#p95926</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95926#p95926"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95926#p95926"><![CDATA[
The console always renders 240 scanlines, but most NTSC TVs cut some of the top and bottom, so emulators tend to crop the picture. The number of hidden scanlines varies a lot from TV to TV though. PAL video has higher vertical resolution, so all 240 scanlines are usually visible, so the emulator doesn't cut anything in PAL mode.<br /><br />Personally, I find this a little stupid. I prefer to see everything the console is rendering, specially when developing, because I might accidentally leave some trash that the emulator will hide and another person with an emulator configured differently or a TV that shows more scanlines will see those unintentional glitches.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jun 22, 2012 2:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-06-22T13:41:29-07:00</updated>
<published>2012-06-22T13:41:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95920#p95920</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95920#p95920"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95920#p95920"><![CDATA[
I see 8 lines cut off at the edges.<br /><br />It always displays them, just normally they don't show on NTSC TV's. It's best for both sides as it'll then make sure people who make homebrew but don't know the system won't put stuff where it probably wouldn't show. I even allow 16 pixels on the top and bottom becaue I did have my games cart # start on tile (1,1) and it was off the screen on two Tv's of mine, and on on one other at the time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Fri Jun 22, 2012 1:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[JimDaBim]]></name></author>
<updated>2012-06-22T13:38:54-07:00</updated>
<published>2012-06-22T13:38:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95919#p95919</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95919#p95919"/>
<title type="html"><![CDATA[Pixel lines: 224 vs. 240]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9037&amp;p=95919#p95919"><![CDATA[
What's the deal with the additional scanlines in a game? By default, the emulators always have a resolution of 256x224, cutting off the top and bottom eight rows:<br /><img src="http://i46.tinypic.com/4pxfnl.png" alt="Image" /><br /><br />When I choose PAL emulation, then those lines are re-inserted, giving the game a resolution of 256x240:<br /><img src="http://i48.tinypic.com/1zg3n5v.png" alt="Image" /><br /><br />So, the initial suspection might be that an NTSC TV cannot display those top and bottom rows while a PAL TV can. But when I watch the Angry Video Game Nerd playing "Super Mario Bros.", the TV clearly shows all the scanlines and you are able to see two whole rows of blocks at the bottom, not just one and a half:<br /><img src="http://i46.tinypic.com/2djsd1s.jpg" alt="Image" /><br /><br />So, if NTSC TVs are able to display all 240 pixel lines, why does that emulator option to cut the first and last eight rows away even exist in the first place? And why is it always enabled by default? What relation does that emulator feature have to a real NES and TV?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5334">JimDaBim</a> — Fri Jun 22, 2012 1:38 pm</p><hr />
]]></content>
</entry>
</feed>