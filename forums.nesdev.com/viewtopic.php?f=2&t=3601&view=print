<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - RTK's guide: Assembly in one step</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">RTK's guide: Assembly in one step</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3601">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3601</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Fri Sep 21, 2007 4:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,
<br />i'm reading <!-- m --><a class="postlink" href="http://nesdev.com/6502guid.txt">http://nesdev.com/6502guid.txt</a><!-- m --> and i have a couple of questions these were originaly parts of an email thread i started to someone who's been really nice to help me, but i think i might be able to cut him a bit of slack if i post on these boards(thanks blargg)
<br />
<br />ok first thing i noticed was in the section about stack pointers in
<br />the third section of the tutorial, not far from the beginning. it says
<br />it keeps info about where to return to after a JSR is executed, and
<br />that this info is kept in low memory from $0100 - $01FF, which is 256
<br />- 511 in decimal format, right? so why does the next statement say,
<br />"The stack grows down from $01FF and makes it possible to nest
<br />subroutines up to 128 levels deep."
<br />
<br />erm i'm not exactly sure if this is really 256, my math might be off,
<br />but it's definately more than 128 isn't it? or is it that a subroutine
<br />takes up-2 bits of memory a peice?
<br />
<br />
<br />
<br />ok here's a tricky one, has to do with binary numbers, maybe it's been
<br />a while but i cant remember this trick:
<br />
<br />it talks about relative addressing then goes to say that:
<br />
<br />If the
<br />  value is &gt; $7F (negative) then it is the 2's compliment of the given
<br />  value in the negative direction.
<br />
<br />i'll pastebin the section:
<br /><!-- m --><a class="postlink" href="http://rafb.net/p/L9BOR095.html">http://rafb.net/p/L9BOR095.html</a><!-- m -->
<br />
<br />why would 0000 0001 would make it -1?
<br />is this just saying that it wraps around? if it's over 256?
<br />and if so, what's the relation of this example to absolute addressing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Sep 21, 2007 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Whenever you JSR, the "return address" is two bytes, and that gets pushed onto the stack.  Stack is 256 bytes large, so that's 128 nested calls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Fri Sep 21, 2007 6:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Whenever you JSR, the "return address" is two bytes, and that gets pushed onto the stack.  Stack is 256 bytes large, so that's 128 nested calls.</div>
<br />
<br />cool so i kinda guessed the first one right, thanks!!!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Sep 21, 2007 9:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">i'll pastebin the section:<br /><!-- m --><a class="postlink" href="http://rafb.net/p/L9BOR095.html">http://rafb.net/p/L9BOR095.html</a><!-- m --><br /><br />why would 0000 0001 would make it -1?<br /></div>
<br />
<br />The way he words it is a little confusing.  2's compliment is actually very simple:
<br />
<br />$00 = 0
<br />$01 = 1
<br />$02 = 2
<br />...
<br />$7E = +126
<br />$7F = +127
<br />$80 = -128
<br />$81 = -127
<br />$82 = -126
<br />...
<br />$FE = -2
<br />$FF = -1
<br />
<br />
<br />A way which might help you figure it out would be if the number is &gt;= $80, subtract $100 from it
<br />
<br />$FE = -2   .... because  .....  $FE - $100 = -2

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Fri Sep 21, 2007 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />nice trick.
<br />i'll have to keep that one in mind as i practice. i'm sure i'll have plenty of chances to work that out very soon.(opens up calc.exe)
<br />
<br />-edit-
<br />hmm...
<br />$FE - $100 = 18446744073709551614, in calc.exe <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> 
<br />
<br />i guess cause there's no number threshold for it to be aware of?
<br />
<br />well, darn, FE isn't such a small number in windows calculator either!
<br />in fact, it seems to be 256 bigger <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />lol man the noobs can make people have so much fun laughing at the obvious, can't we?!
<br />hmmmmm <img src="./images/smilies/icon_question.gif" alt=":?:" title="Question" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Sep 21, 2007 10:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">$FE - $100 = 18446744073709551614, in calc.exe :roll: <br /><br />i guess cause there's no number threshold for it to be aware of?</div>
<br />
<br />it's because it treats everything as unsigned when in hex mode
<br />
<br />1)  enter hex mode
<br />2)  input FE
<br />3)  press -
<br />4)  input 100
<br />5)  switch to dec mode
<br />6)  hit =
<br />
<br />result:   -2
<br />
<br />or input FE, switch to dec, then subtract 256.  Either or.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Sep 22, 2007 5:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />With an unsigned value, expanding it to a larger number of bits means just adding zero bits on the left. 11111111 = 255. Expanding that to 16 bits gives 0000000011111111. With two's complement (also called signed since it can represent negative values), expanding to more bits is called sign extension, since you have to fill the upper bits with the sign bit (the top bit). 11111111 = -1. Expanding that to 16 bits gives 1111111111111111. That should make sense since all the bits have to be 1 to cause a 16-bit value to wrap around to one less. But if you have 01111111 = +127, expanding that to 16 bits gives 0000000001111111.
<br />
<br />So, when using the hex calculator it's going to give you the result in however many bits it uses, so negative values will be very large. This is easy to deal with in hex since you just ignore the upper digits. FF = 255 (unsigned) or -1 (signed). FFFFFFFF = -1 (signed) as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sat Sep 22, 2007 7:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: RTK's guide: Assembly in one step</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">$FE - $100 = 18446744073709551614, in calc.exe <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> <br /><br />i guess cause there's no number threshold for it to be aware of?</div><br /><br />it's because it treats everything as unsigned when in hex mode<br /><br />1)  enter hex mode<br />2)  input FE<br />3)  press -<br />4)  input 100<br />5)  switch to dec mode<br />6)  hit =<br /><br />result:   -2<br /><br />or input FE, switch to dec, then subtract 256.  Either or.</div><br /><br />hmm coulda swore i was doing it right, but your way worked! thanks!<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">With an unsigned value, expanding it to a larger number of bits means just adding zero bits on the left. 11111111 = 255. Expanding that to 16 bits gives 0000000011111111. With two's complement (also called signed since it can represent negative values), expanding to more bits is called sign extension, since you have to fill the upper bits with the sign bit (the top bit). 11111111 = -1. Expanding that to 16 bits gives 1111111111111111. That should make sense since all the bits have to be 1 to cause a 16-bit value to wrap around to one less. But if you have 01111111 = +127, expanding that to 16 bits gives 0000000001111111. <br /><br />So, when using the hex calculator it's going to give you the result in however many bits it uses, so negative values will be very large. This is easy to deal with in hex since you just ignore the upper digits. FF = 255 (unsigned) or -1 (signed). FFFFFFFF = -1 (signed) as well.</div>
<br />
<br />wow tricky stuff but i've already read this 2 or 3 times and it's becoming a bit clrearer. maybe if i review the whole thread it'll start to make more sense <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Sep 22, 2007 9:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />another way (which is probably easier) would be to do -($100-$FE).  $100 - $FE = 2, negate that and you have -2.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 22, 2007 10:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Programmatically, the easiest way to negate a byte is to XOR it with $FF (inverting all the bits: 1's become 0's and 0's become 1's) and then add 1.
<br />
<br />Take the number 2, for example. In binary it is 00000010. After XOR'ing it with 11111111 you get 11111101. Add 1 and you get 11111110, which is $FE. 
<br />
<br />Converting it back works exactly the same: 11111110 XOR 11111111 = 00000001, 00000001 + 1 = 00000010, which is 2. You will sure need to do this once in a while when programming games.
<br />
<br />In 6502 assembly, the instruction used to XOR is "EOR". Windows calculator uses "XOR", if you're willing to try it out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 22, 2007 10:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">In 6502 assembly, the instruction used to XOR is "EOR".</div>
<br />Other than 6502/65816 and ARM, does any CPU architecture's official datasheets use "EOR"?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sat Sep 22, 2007 11:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Programmatically, the easiest way to negate a byte is to XOR it with $FF (inverting all the bits: 1's become 0's and 0's become 1's) and then add 1.<br /><br />Take the number 2, for example. In binary it is 00000010. After XOR'ing it with 11111111 you get 11111101. Add 1 and you get 11111110, which is $FE. <br /><br />Converting it back works exactly the same: 11111110 XOR 11111111 = 00000001, 00000001 + 1 = 00000010, which is 2. You will sure need to do this once in a while when programming games.<br /><br />In 6502 assembly, the instruction used to XOR is "EOR". Windows calculator uses "XOR", if you're willing to try it out.</div>
<br />
<br />windows calc gives me 1 if i type 1110 xor 1111
<br />
<br />just got 110 after trying 1001 xor 1111, i think it's returning the values in decimal format

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Sat Sep 22, 2007 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">In 6502 assembly, the instruction used to XOR is "EOR".</div><br />Other than 6502/65816 and ARM, does any CPU architecture's official datasheets use "EOR"?</div>
<br />Not that i know of. ARM's Thumb instruction set uses EOR because Thumb is modeled after 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gannon</b> [ Sat Sep 22, 2007 9:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">just got 110 after trying 1001 xor 1111, i think it's returning the values in decimal format</div>
<br />Windows Calculator drops the leading 0s

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sat Sep 22, 2007 9:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">gannon wrote:</div><div class="quotecontent"><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">just got 110 after trying 1001 xor 1111, i think it's returning the values in decimal format</div><br />Windows Calculator drops the leading 0s</div>
<br />gotcha, thanks.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>