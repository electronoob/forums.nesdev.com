<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=13334" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-03-06T10:55:42-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=13334</id>
<entry>
<author><name><![CDATA[CLChambers00]]></name></author>
<updated>2018-03-06T10:55:42-07:00</updated>
<published>2018-03-06T10:55:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214746#p214746</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214746#p214746"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214746#p214746"><![CDATA[
Thanks again folks for helping me understand all this a little better. Thankfully, with several trials with a top loader, two front loaders, a Metroid cart, and an Everdrive, I have been able to gather some data and the power off for 10 seconds with the cart was very consistent, like 10 out of 10 consistent in getting a certain pattern. All the info here has helped me so I greatly appreciate all of your time, as usual! <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8601">CLChambers00</a> — Tue Mar 06, 2018 10:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2018-03-06T10:01:24-07:00</updated>
<published>2018-03-06T10:01:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214745#p214745</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214745#p214745"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214745#p214745"><![CDATA[
<div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />as long as it was not powered off for too long<br /></div><br />&quot;Too long&quot; can have very different meanings for a human and for a computer. One second is a very short time for a human, but an eternity for a computer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Mar 06, 2018 10:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-03-06T09:44:34-07:00</updated>
<published>2018-03-06T09:44:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214744#p214744</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214744#p214744"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214744#p214744"><![CDATA[
If you can get permission from a game's publisher to perform a speedrun of its copyrighted game publicly in the stream or VOD of a tournament, why can't you get permission from the same publisher to produce and use a hack that fixes memory initialization errors?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Mar 06, 2018 9:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2018-03-06T09:38:54-07:00</updated>
<published>2018-03-06T09:38:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214743#p214743</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214743#p214743"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214743#p214743"><![CDATA[
<div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />So from your first paragraph you seem to be saying that when you power off, this 002D address value is not retained but reverts to some kind of default value that is particular to the brand of chip used? And if so, why does it change or revert back this state, if it is power cycled quickly. Does it really bleed off so quickly?<br /></div><br />There's nothing special about &quot;this 002D address&quot; (meaning: $002D isn't anything unique, it's just a memory address) when talking about the NES.  It may be unique for a specific game, but not the console.  It's just an address located within the $0000 to $07FF memory region of the NES, which is mapped to a physical 2KByte SRAM chip within the NES console itself.  The NES memory map is here: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/CPU_memory_map">https://wiki.nesdev.com/w/index.php/CPU_memory_map</a><!-- m --><br /><br />Nintendo used whatever SRAM chips were available on the market at the time (this is not uncommon even today, for any company).  They didn't stick with just one company, but they probably used a set list of manufacturers (i.e. they probably didn't just go to Akihabara and buy random chips some shady guy on the street was selling ;-) ); I believe some companies/brands were mentioned in the past but I can't remember who they were.  Anyway, unbeknownst to folks who weren't old enough to remember, during the 80s, particularly around the time of the Famicom and NES, there were IC shortages occurring (<a href="https://en.wikipedia.org/wiki/Chip_famine" class="postlink">reference</a>), which is why in a lot of electronics from that time period you'll find differences in IC manufacturer (ex. some expensive 80s gadget might have Sony chips, but the one your friend bought a month later might have Mitsubishi chips).<br /><br />Different manufacturers' chips behave slightly differently.  Yes, they're all SRAM, but power-on values and how fast values dissipate from SRAM once voltage has been lost vary.  Voltage, timing/interval/duration, and overall manufacturing implementation all seem to matter.  There was <a href="https://electronics.stackexchange.com/questions/248950/sram-isnt-blank-on-powerup-is-this-normal" class="postlink">a StackExchange discussion about this very thing</a> (warning: low-level hardware discussion).  I'm not a hardware engineer -- there are many here better suited to talk about this behaviour in detail.  My point is that there are several factors involved, and it's impossible to get a 100% reproducible test case that can be used reliably (re: for speedrunners).<br /><br />rainwarrior writing a program that shows RAM contents on reset (particularly for power-on) is useful because possibly someone with a lot of time and money (i.e. possession of many variations of NES consoles, Famicom consoles, Dendy consoles, etc.) could potentially see if there is a common behaviour.  At this time all that's known is what's been discussed here on the nesdev forum, and <a href="https://wiki.nesdev.com/w/index.php/CPU_power_up_state" class="postlink">what's on the Wiki</a>.<br /><br />The one exception are devices like the PowerPak, which use sthe NES's RAM for several purposes (ex. menu interface, etc.), and as such, $0000-07FF may contain values that the PowerPak itself set/used (i.e. different than ones at power-on).  I assume the EverDrive N8 is the same way.  From a software (game developer) perspective, non-battery-backed RAM contents on power-on should be treated as unstable/unknown, so if a constant startup value is needed, the game code must initialise it.  The NES (in software) does not have a way to differentiate power-on vs. pressing of the reset button.  Common practise is for a game to zero $0000-07FF on reset, but some games didn't do this, while others *intentionally* don't zero certain addresses -- a good example is Zanac, where <a href="https://tcrf.net/Zanac_(NES)#Area_Select" class="postlink">if you press Reset thirteen (13) times, you can get a stage select</a> -- the way this works is that the game's reset handler increments a value in RAM every time reset is pressed, and has code to say if the value &gt;= 13 then allow for a stage select.  Could that RAM location used for storing how many times reset has been pressed happen to have a power-on value of, say, 11 due to SRAM variance, thus the person would only have to hit Reset 2 times?  Sure, absolutely.  That's just the reality (risk) of the programmer doing that.  The same risk applies to games which tried to use &quot;random power-on values in RAM&quot; as a form of RNG seed -- it's a bizarre/faulty thought process, but it's what some did.<br /><br /><div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />Even the runners who have biased outcomes experience some variance. So maybe, if it is powered off for 10 or more seconds, it will go back to this natural raw state, but if you do 5 to 9 second wait time between power cycles maybe there is some retention. This would explain both a kind of consistency, and the variance. <br /><br />Does this seem to be a fair assessment?<br /></div><br />Sure, I suppose.  Just understand there's not going to be any kind of 100% reliable consistency to it, because there are just too many factors.  Games which don't initialise RAM on power-on/reset are &quot;dangerous&quot; like that.  The best you can do is tell all speedrunners to power off the NES units for some arbitrary time (10 seconds seems reasonable), power the systems on, and pray the values in RAM are all zero.  If that's good enough for a tournament (I don't make the rules), then thumbs up!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue Mar 06, 2018 9:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CLChambers00]]></name></author>
<updated>2018-03-06T06:48:26-07:00</updated>
<published>2018-03-06T06:48:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214731#p214731</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214731#p214731"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214731#p214731"><![CDATA[
So from your first paragraph you seem to be saying that when you power off, this 002D address value is not retained but reverts to some kind of default value that is particular to the brand of chip used? And if so, why does it change or revert back this state, if it is power cycled quickly. Does it really bleed off so quickly?<br /><br />Even the runners who have biased outcomes experience some variance. So maybe, if it is powered off for 10 or more seconds, it will go back to this natural raw state, but if you do 5 to 9 second wait time between power cycles maybe there is some retention. This would explain both a kind of consistency, and the variance. <br /><br />Does this seem to be a fair assessment?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8601">CLChambers00</a> — Tue Mar 06, 2018 6:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2018-03-06T05:31:48-07:00</updated>
<published>2018-03-06T05:31:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214725#p214725</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214725#p214725"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214725#p214725"><![CDATA[
IIRC, there was discussion on this forum sometime in the past about different SRAM chips (brands) having different values on fresh power-on.  It's certain that game developers didn't know this, nor did they really care (and nor should they) -- they either wrote their code based on behaviours they saw at the time on their own consoles, or the code was buggy (e.g. they forgot to zero or pre-initialise some particular RAM value, but didn't notice the bug because most of the time the game worked).  <a href="http://wiki.nesdev.com/w/index.php/Game_bugs#Reliance_on_RAM_values" class="postlink">There are plenty of cases of this</a>, and that list is far from thorough!<br /><br />Aside from weird edge cases, ex. games that rely on some pre-initialised values (i.e. these games are actually buggy -- this has been discussed before in <a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10845" class="postlink">this thread</a> (warning: long and difficult to follow, cannot be reliably skimmed, is mainly with emulators in mind, and gets very technical very quickly; Metroid is mentioned, just not with regards to ZP/RAM but rather CHR-RAM), literally the only community that cares about this are speedrunners.  I understand why, but the obsession starts to become excessive.  Eventually said community will have to accept reality: there are going to be a small subset of games where, depending on their programming (WRT the subject we're discussing), variance in behaviour because of either bugs or intentional design happens.  You can't have a truly &quot;fair&quot; competition if Person X ends up getting lucky with a power-on value that gives them an advantage, while Person Y gets screwed over.  Solving this is easy: <span style="text-decoration: underline">remove said game(s) from the competitive list</span>.  The technical users in speedrun and TAS communities are incredibly good at finding games that are subject to this type of thing, so if anything, they should be contributing to the Wiki to list off technical details of quirks/bugs they find of this type.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue Mar 06, 2018 5:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CLChambers00]]></name></author>
<updated>2018-03-06T04:36:09-07:00</updated>
<published>2018-03-06T04:36:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214724#p214724</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214724#p214724"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214724#p214724"><![CDATA[
I am still a bit confused about the retention of RAM addresses. If someone plays Metroid and then powers off and back on at a point when the address 002D is say 62, then wouldn't this be the value upon power on as long as it was not powered off for too long, in theory. IF this is so then I am having a hard time integrating the experience that people have with either having a consistently bad RNG or consistently good RNG. If 002D, which changes once per frame, is retained then this should be random and not yield consistency for anyone. But if someone powered off and this value was 62 but then defaulted to say 0 immediately, or 255 immediately, then that would explain the observation of these folks. What are your thoughts?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8601">CLChambers00</a> — Tue Mar 06, 2018 4:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-03-03T11:59:26-07:00</updated>
<published>2018-03-03T11:59:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214545#p214545</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214545#p214545"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214545#p214545"><![CDATA[
<div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />I still don't completely understand from our discussion of Who Framed Roger Rabbit. <br />[...]<br />I bought up a lot of $20 - $40 NES consoles from Ebay to see if I can find a good NES that will help him in this matter. I plan to clean and replace 72 pin connector and resell them.<br /></div>There are several different sources of randomness available to an NES, but I believe only two were used by commercial-era games:<br />* Value of RAM when it first turns on<br />* Exact timing and values of user input<br /><br />There are a few others that we've discovered since, but I don't think they're used even by any modern games:<br />* Value of OAM RAM when it first turns on<br />* Values returned from reading $2007 during rendering<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I must ask, if you happen to know, just before the ROM is loaded, does the PowerPak or Everdrive preset the RAM state to all 00 or FF or something similar in prep to load the ROM, or does it simply load the ROM over what was change only by the operating system from power on?<br /></div>The PowerPak boot process involves loading a series of 1 KiB programs into NES RAM from $0400-$07FF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Mar 03, 2018 11:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-03-03T11:32:11-07:00</updated>
<published>2018-03-03T11:32:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214544#p214544</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214544#p214544"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214544#p214544"><![CDATA[
PowerPak and Everdrive both need to initialize at least some of RAM (if not all of it) to run their menu programs, etc. You could check the source code for their menus to be sure, or run this test ROM to investigate.<br /><br />I don't think either of them explicitly leaves it cleared as 00s or FFs before running the game, it just boots the game with whatever was leftover. Probably you would have filenames and stuff scattered across it.<br /><br />So, no, the RAM values at boot from a flash cart are going to be completely different than what you'd get at power-on directly. Probably you'd get the same result every time if you used the same CF/SD card contents and booted from the menu in the same way, not dependent on the underlying NES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sat Mar 03, 2018 11:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CLChambers00]]></name></author>
<updated>2018-03-03T11:23:46-07:00</updated>
<published>2018-03-03T11:23:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214543#p214543</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214543#p214543"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214543#p214543"><![CDATA[
Thanks for the response. It was very informative and good enough to read again in the future to deepen my understanding of it.<br /><br />Also, I will sign up for the newsletter.<br /><br />Additionally, for whatever reason the japan release of Metroid was better programmed because the US release seems to have broken its RNG. In the Japan version the RNG is calculated each frame yielding different results per frame. But in the US version, I am told, that the RNG is broken in that the first comparison of these two ram addresses sets the RNG, and no matter all subsequent comparisons the same outcomes is the result. This is how people have been able to get the same Ridley fireball pattern every time based on this phenomenon with certain consoles. <br /><br />What has really interested the Metroid speedrunning community is that one of these memory addresses is initialized while the other is not, which gives some people a default good pattern or bad pattern. The present world record holder has a top loader that always gives bad pattern on power on, with slight change of good due to power on variance, which I still don't completely understand from our discussion of Who Framed Roger Rabbit. <br /><br />I bought up a lot of $20 - $40 NES consoles from Ebay to see if I can find a good NES that will help him in this matter. I plan to clean and replace 72 pin connector and resell them. <br /><br />We have also been discussing the influence of PowerPak and Everdrive on this one RNG related uninitialized memory address. Some have reported that they can get a good pattern from power on with their PowerPak and so the discussion has gravitated to the legitimacy of using a flash cart for Metroid since it is &quot;modifying&quot; this address, instead of reliance upon what value is attained through original hardware alone. <br /><br />I must ask, if you happen to know, just before the ROM is loaded, does the PowerPak or Everdrive preset the RAM state to all 00 or FF or something similar in prep to load the ROM, or does it simply load the ROM over what was change only by the operating system from power on?<br /><br />Also, speaking of Everdrive, I wonder if there is a way to determine precisely how it compiles its save state file. If someone could find this, and figure out how to convert it to a save file for use with say Bizhawk, we could hypothetically do a save state with the Everdrive of Who Framed Roger Rabbit at the earliest possible moment, and then load this up in Bizhawk with a Lua Script to map out the results we could get from original hardware and confirm that there are actually 4 distinct RNG paths for that game, based on what I read from our other discussion that even if I pressed start on the same frame I would still only have a 25% chance of getting the right RNG.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8601">CLChambers00</a> — Sat Mar 03, 2018 11:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2018-03-02T11:59:25-07:00</updated>
<published>2018-03-02T11:59:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214513#p214513</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214513#p214513"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214513#p214513"><![CDATA[
Doing everything I can to get new manufacturing of new programmers ramped up and released by end of this month (March 2018).  I failed to get board files out before CNY which caused me to fall short of this goal last month..  If you sign up for the newletter on my <a href="http://infiniteneslives.com/" class="postlink">homepage</a> you'll get email notification when new products release including the new inlretro/kazzo programmer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Fri Mar 02, 2018 11:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-03-02T10:22:32-07:00</updated>
<published>2018-03-02T10:22:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214509#p214509</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214509#p214509"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214509#p214509"><![CDATA[
<div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />Which specific item would I need on <!-- m --><a class="postlink" href="http://www.infiniteneslives.com/nessupplies.php">http://www.infiniteneslives.com/nessupplies.php</a><!-- m --><br /></div><br />This specific test is NROM.<br /><br /><div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />The item shown at <!-- m --><a class="postlink" href="http://www.infiniteneslives.com/kazzo.php">http://www.infiniteneslives.com/kazzo.php</a><!-- m --> is not available. And the TOP853 USB Universal Programmer is not being sold on Ebay at the moment, do you have another recommendation?<br /></div><br />For programming INL's flash boards, you need the kazzo specifically, so I guess wait for new ones to become available.<br /><br />For programming EPROM generically, there are a lot of different EPROM programmers. Willem makes some popular ones. I can't recommend a specific one. The TOP853 I have is not a &quot;good&quot; one, but there's not really a difference in the end result between one programmer and another as long as they function correctly. I think some people have managed to build an inexpensive one using an arduino as a base.<br /><br /><div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />So basically I would buy one of these boards from INL, remove the chip and use a EPROM programmer on it, and then put the chip back in, no soldering needed. Very easy to do?<br /></div><br />With INL the boards are designed to be flashed via the carrtridge connector. There is no need to remove the chip.<br /><br />With non-Flash boards, generally what you want to do is install (solder) a chip socket where the chips go so you can put the EPROM in and out without having to do any soldering between tests.<br /><br />Here's one alternative board: <!-- m --><a class="postlink" href="https://www.game-tech.us/product/reprox/">https://www.game-tech.us/product/reprox/</a><!-- m --><br />Though the ReproPak is not being sold anymore, its manual may give you some idea of how these kinds of boards are used: <!-- m --><a class="postlink" href="http://www.retrousb.com/product_info.php?products_id=42">http://www.retrousb.com/product_info.php?products_id=42</a><!-- m --><br />There's others too, just search for NES reproduction boards: <!-- m --><a class="postlink" href="https://www.muramasaentertainment.com/index.php/nes-nrom.html">https://www.muramasaentertainment.com/i ... -nrom.html</a><!-- m --><br />Or you can cannibalize an existing NES game: <!-- m --><a class="postlink" href="http://callanbrown.com/index.php/basic-nes-reproduction">http://callanbrown.com/index.php/basic-nes-reproduction</a><!-- m --><br /><br />They're all basically the same design and work the same way, so learning about one will gain useful information about the other.<br /><br /><div class="quotetitle">CLChambers00 wrote:</div><div class="quotecontent"><br />Also I just read what you wrote about seeing lots of variance on your RAM state at power on. I know with some games, Metroid in particular, which has at least one memory address value taken from the initial state that influences RNG, that some people can get a certain pattern from power on each time, which leads me to believe that this particular address seems to go back to a starting value instead of retaining its last value, though I don't understand how that can be.<br /></div><br />I'll make a sort of simplified description, probably a little inaccurate but should give the idea:<br /><br />Bits in RAM are a device that take an existing charge and continually amplify it to maintain it at 0 or 1. When you're powering it on, the signal is very weak, and the circuit is deciding whether a signal that's in a very questionable range should be driven toward 0 or 1.<br /><br />This is a device with many thousands of those bits. They're made to be reliable within a certain tolerance, but it doesn't matter if the bit splits between 0 and 1 at 0.5, or if it split at 0.4 or 0.6, etc... that doesn't really matter whenever the input signal coming in is strong. To split at exactly 0.5 you'd need the two sides of the amplifier to be perfectly balanced, but in practice you only need them balanced well <em>enough</em> for tolerantly reliable behaviour, so it doesn't have to be that accurate. This difference only really has an effect at power-on, where some particular bits might have a tendency to power on in a 0 or 1 more often.<br /><br />The weak starting signal is subject to all sorts of noise, existing static charges in the chip, temperature and ambient or interfering electromagnetic radiation in the environment, etc. When the signal is weak enough all sorts of things can be affecting it. When you power off and on an SRAM very quickly, it tends to retain most of the bits it last had in it. When you power it off for longer, the charges tend to drain out and balance into a potentially more consistent starting state. The longer it's powered off, the closer you'll get to the chip's natural starting equilibrium and have the best chance of powering on with a consistent value. (Still only a chance though.)<br /><br />Not all RAM is created equally, some have stronger tendencies than others. The contents at power-on aren't something the chip has to do anything consistent with, by design it doesn't matter, so there's a ton of variation here. Some might tend tend to have mostly 0, or mostly 1 bits, for example, if the bias is consistent.<br /><br /><br />Anyhow, this test ROM was designed to to take a look at this kind of thing. The results I found were that mine are indeed pretty random. I didn't even see much tendency when they were powered off for longer times.<br /><br />As for looking at specific games, you should know that this program initialized a few bytes of RAM in order to operate, but you could easily rebuild it to move those bytes elsewhere if by bad luck they overlap the bytes the games you're interested in use for their uninitialized behaviour that you're trying to target. (This is one reason why it's useful to have a socketed board, or use a flashable one that you can rewrite the chips for. You may need to try different tests. You could also use it to try other mapper-compatible games and experiments as well.)<br /><br />I don't know about uninitialized behaviour in Metroid, but I do know that it gathers some randomness from how many frames it spends on the title screen, so even if it was a consistent startup value it might need frame perfect input to be consistent after that anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Fri Mar 02, 2018 10:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CLChambers00]]></name></author>
<updated>2018-03-02T08:11:56-07:00</updated>
<published>2018-03-02T08:11:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214505#p214505</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214505#p214505"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214505#p214505"><![CDATA[
Also I just read what you wrote about seeing lots of variance on your RAM state at power on. I know with some games, Metroid in particular, which has at least one memory address value taken from the initial state that influences RNG, that some people can get a certain pattern from power on each time, which leads me to believe that this particular address seems to go back to a starting value instead of retaining its last value, though I don't understand how that can be.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8601">CLChambers00</a> — Fri Mar 02, 2018 8:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CLChambers00]]></name></author>
<updated>2018-03-02T08:03:48-07:00</updated>
<published>2018-03-02T08:03:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214504#p214504</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214504#p214504"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214504#p214504"><![CDATA[
Thanks for the reply. Which specific item would I need on <!-- m --><a class="postlink" href="http://www.infiniteneslives.com/nessupplies.php">http://www.infiniteneslives.com/nessupplies.php</a><!-- m --><br /><br />The item shown at <!-- m --><a class="postlink" href="http://www.infiniteneslives.com/kazzo.php">http://www.infiniteneslives.com/kazzo.php</a><!-- m --> is not available. And the TOP853 USB Universal Programmer is not being sold on Ebay at the moment, do you have another recommendation?<br /><br />So basically I would buy one of these boards from INL, remove the chip and use a EPROM programmer on it, and then put the chip back in, no soldering needed. Very easy to do?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8601">CLChambers00</a> — Fri Mar 02, 2018 8:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-03-02T01:05:27-07:00</updated>
<published>2018-03-02T01:05:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214492#p214492</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214492#p214492"/>
<title type="html"><![CDATA[Re: Simple ROM to test power on or reset RAM state]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=13334&amp;p=214492#p214492"><![CDATA[
You can use an old NES board and remove/replace parts from it if you know what you're doing and want to destroy an old game, but I personally would prefer using a new board.<br /><br />Myself, I had an old <a href="http://www.retrousb.com/product_info.php?products_id=42" class="postlink">ReproPak</a> board from RetroUSB that I soldered chip sockets into. I burned two EPROMs of appropriate size with an old <a href="http://www.primrosebank.net/computers/maint/tools/top853.htm" class="postlink">TOP853</a> EPROM programmer, and put them in the sockets.<br /><br />The ReproPak isn't available anymore but there are lots of people selling similar NES boards. There's a variety of inexpensive EPROM programmers as well. Old UV EPROM chips are pretty easy to get from eBay. Flash EPROM is easier to get new and can be erased more easily.<br /><br />If you don't know how to solder, you can get a board with flash EPROM chips already on it, and an inexpensive programmer from INL:<br /><!-- m --><a class="postlink" href="http://www.infiniteneslives.com/nessupplies.php">http://www.infiniteneslives.com/nessupplies.php</a><!-- m --><br /><!-- m --><a class="postlink" href="http://www.infiniteneslives.com/kazzo.php">http://www.infiniteneslives.com/kazzo.php</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Fri Mar 02, 2018 1:05 am</p><hr />
]]></content>
</entry>
</feed>