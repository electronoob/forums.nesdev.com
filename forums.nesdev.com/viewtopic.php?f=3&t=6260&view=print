<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New emu: SMB status bar flashes when scrolling</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New emu: SMB status bar flashes when scrolling</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6260">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6260</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sun Apr 04, 2010 4:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>New emu: SMB status bar flashes when scrolling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been putting together my first emulator over the past week. So far I have SMB working just about right... except that the status bar flashes on and off when scrolling.
<br />
<br />I know that the status bar is maintained in the $2000 name table, and when scrolling, the game uses $2400 as well, necessitating the sprite0 flag check at scanline 30-31 or so. On VINT, the SMB rom sets the name table address flag (D1-D0 of $2000) to 0, and then sets it back to 1 after sprite0. 
<br />
<br />But half of the time the game almost immediately after setting D1-D0 to 0, sets it to 1 again.
<br />
<br />The difference between setting it to 0 and exiting, and resetting it to 1 (which happens twice(!) sometimes) is a BNE check at $8EE4; this should, I believe, not branch when the code is executing correctly.
<br />
<br />Key:
<br />+1: PC + 1
<br />+2: PC + 2
<br />$0: Mem @ $0000
<br />$1: Mem @ $0001
<br />
<br />Here's what happen's when D0-D1 is set once, to 0:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PC__&nbsp; OP_____________________&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+1 +2 A_ X_ Y_ SP P_ $0 R1<br />80C3&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DD 8E 03 00 00 FC 09 01 03<br />8EDD&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 02 20 03 00 00 FA 09 01 03<br />8EE0&nbsp; A0&nbsp; LDY_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 B1 03 00 00 FA 0B 01 03<br />8EE2&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 D0 03 00 00 FA 0B 01 03<br />*** SCANLINE 243&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; D0 AC 00 00 00 FA 0B 01 03<br />8EE4&nbsp; D0&nbsp; BNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AC 8D 00 00 00 FA 0B 01 03<br />8EE6&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 05 20 00 00 00 FA 0B 01 03<br />8EE9&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 05 20 00 00 00 FA 0B 01 03<br />8EEC&nbsp; 60&nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8D 00 00 00 00 FA 0B 01 03<br /></div><br /><br />Here's what happens when D0-D1 is set to 1 (erroneously I believe):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PC__&nbsp; OP_____________________&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+1 +2 A_ X_ Y_ SP P_ $0 R1<br />80C3&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DD 8E 03 00 00 FC 09 01 03&nbsp; ;update screen with buffer contents<br />8EDD&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 02 20 03 00 00 FA 09 01 03&nbsp; ;reset flip-flop<br />8EE0&nbsp; A0&nbsp; LDY_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 B1 03 00 00 FA 0B 01 03&nbsp; ;load first byte from indirect as a pointer<br />8EE2&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 D0 03 00 00 FA 0B 01 03&nbsp; <br />*** SCANLINE 243&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; D0 AC 3F 00 00 FA 09 01 03<br />8EE4&nbsp; D0&nbsp; BNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AC 8D 3F 00 00 FA 09 01 03&nbsp; ;if byte is zero we have no further updates to make here<br />8E92&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 06 20 3F 00 00 FA 09 01 03&nbsp; ;store high byte of vram address<br />8E95&nbsp; C8&nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B1 00 3F 00 00 FA 09 01 03<br />8E96&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 8D 3F 00 01 FA 09 01 03&nbsp; ;load next byte &#40;second&#41;<br />8E98&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 06 20 0C 00 01 FA 09 01 03&nbsp; ;store low byte of vram address<br />8E9B&nbsp; C8&nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B1 00 0C 00 01 FA 09 01 03&nbsp; <br />8E9C&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00 0A 0C 00 02 FA 09 01 03&nbsp; ;load next byte &#40;third&#41;<br />8E9E&nbsp; 0A&nbsp; ASL_Accumulator&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;48 AD 04 00 02 FA 09 01 03&nbsp; ;shift to left and save in stack<br />8E9F&nbsp; 48&nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AD 78 08 00 02 FA 08 01 03<br />8EA0&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 78 07 08 00 02 F9 08 01 03&nbsp; ;load mirror of $2000,<br />8EA3&nbsp; 09&nbsp; ORA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;04 B0 11 00 02 F9 08 01 03&nbsp; ;set ppu to increment by 32 by default<br />8EA5&nbsp; B0&nbsp; BCS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;02 29 15 00 02 F9 08 01 03&nbsp; ;if d7 of third byte was clear, ppu will<br />8EA7&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FB 20 15 00 02 F9 08 01 03&nbsp; ;only increment by 1<br />8EA9&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ED 8E 11 00 02 F9 08 01 03&nbsp; ;write to register<br />8EED&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 00 20 11 00 02 F7 08 01 03<br />PPU.4000 : 17&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8D 78 11 00 02 F7 08 01 03<br /></div>
<br />
<br />I've been staring this error down for a couple of hours now - it's the first major stumbling block I've run up against, and I have no idea what's going wrong. Could someone give me a hint as to what I'm doing wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Apr 04, 2010 5:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />it might help if your tracer  printed what address the CPU was reading/writing instead of just the instruction and addressing mode.  As it is now, the tracer doesn't really do much of a job of illustrating what's going on.
<br />
<br />Where are the $2000 writes in this code?
<br />
<br />I assume those columns on the right are A,X,Y, but which is which?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sun Apr 04, 2010 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">it might help if your tracer  printed what address the CPU was reading/writing instead of just the instruction and addressing mode.  As it is now, the tracer doesn't really do much of a job of illustrating what's going on.<br /><br />Where are the $2000 writes in this code?<br /><br />I assume those columns on the right are A,X,Y, but which is which?</div>My bad, I forgot a key. The values are +1, +2, A, X, Y, SP, P, $0, $1.
<br />+1: PC + 1 
<br />+2: PC + 2 
<br />$0: Mem @ $0000 
<br />$1: Mem @ $0001 
<br />
<br />So the second instruction, LDX_Absolute   02 20 loads $2002 into X.
<br />
<br />I'll work on better tracer output, but for the moment, this is what I have. :)
<br />
<br />Here's better output. Key is: last mem address accessed, last mem value, a, x, y, sp, p. I've indicated ppu address writes to $2000 with "PPU.4000 : value" (which appear before the instructions in the traced code.
<br />Correct:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">*** SCANLINE 242&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8059 80&nbsp; &nbsp; 91 0D D0 FF 89<br />8082&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0778 11&nbsp; &nbsp; 11 0D D0 FC 09<br />8085&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8086 7F&nbsp; &nbsp; 11 0D D0 FC 09<br />8087&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0778 11&nbsp; &nbsp; 11 0D D0 FC 09<br />808A&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;808B 7E&nbsp; &nbsp; 10 0D D0 FC 09<br />PPU.4000 : 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2000 10&nbsp; &nbsp; 10 0D D0 FC 09<br />808C&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2000 10&nbsp; &nbsp; 10 0D D0 FC 09<br />808F&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0779 1E&nbsp; &nbsp; 1E 0D D0 FC 09<br />8092&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8093 E6&nbsp; &nbsp; 06 0D D0 FC 09<br />8094&nbsp; AC&nbsp; LDY_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0774 00&nbsp; &nbsp; 06 0D 00 FC 0B<br />8097&nbsp; D0&nbsp; BNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8097 D0&nbsp; &nbsp; 06 0D 00 FC 0B<br />8099&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0779 1E&nbsp; &nbsp; 1E 0D 00 FC 09<br />809C&nbsp; 09&nbsp; ORA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;809D 1E&nbsp; &nbsp; 1E 0D 00 FC 09<br />809E&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0779 1E&nbsp; &nbsp; 1E 0D 00 FC 09<br />80A1&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80A2 E7&nbsp; &nbsp; 06 0D 00 FC 09<br />80A3&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2001 06&nbsp; &nbsp; 06 0D 00 FC 09<br />80A6&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2002 80&nbsp; &nbsp; 06 80 00 FC 89<br />80A9&nbsp; A9&nbsp; LDA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80AA 00&nbsp; &nbsp; 00 80 00 FC 0B<br />80AB&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FB AD&nbsp; &nbsp; 00 80 00 FA 0B<br />8EE6&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2005 00&nbsp; &nbsp; 00 80 00 FA 0B<br />8EE9&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2005 00&nbsp; &nbsp; 00 80 00 FA 0B<br />8EEC&nbsp; 60&nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FC 80&nbsp; &nbsp; 00 80 00 FC 0B<br />80AE&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2003 00&nbsp; &nbsp; 00 80 00 FC 0B<br />80B1&nbsp; A9&nbsp; LDA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80B2 02&nbsp; &nbsp; 02 80 00 FC 09<br />80B3&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4014 02&nbsp; &nbsp; 02 80 00 FC 09<br />80B6&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0773 00&nbsp; &nbsp; 02 00 00 FC 0B<br />80B9&nbsp; BD&nbsp; LDA_AbsoluteX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;805A 01&nbsp; &nbsp; 01 00 00 FC 09<br />80BC&nbsp; 85&nbsp; STA_ZeroPage&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0000 01&nbsp; &nbsp; 01 00 00 FC 09<br />80BE&nbsp; BD&nbsp; LDA_AbsoluteX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;806D 03&nbsp; &nbsp; 03 00 00 FC 09<br />80C1&nbsp; 85&nbsp; STA_ZeroPage&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0001 03&nbsp; &nbsp; 03 00 00 FC 09<br />80C3&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FB C5&nbsp; &nbsp; 03 00 00 FA 09<br />8EDD&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2002 00&nbsp; &nbsp; 03 00 00 FA 0B<br />8EE0&nbsp; A0&nbsp; LDY_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EE1 00&nbsp; &nbsp; 03 00 00 FA 0B<br />8EE2&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0301 00&nbsp; &nbsp; 00 00 00 FA 0B<br />*** SCANLINE 243&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0301 00&nbsp; &nbsp; 00 00 00 FA 0B<br />8EE4&nbsp; D0&nbsp; BNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EE4 D0&nbsp; &nbsp; 00 00 00 FA 0B<br />8EE6&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2005 00&nbsp; &nbsp; 00 00 00 FA 0B<br />8EE9&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2005 00&nbsp; &nbsp; 00 00 00 FA 0B<br />8EEC&nbsp; 60&nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FC 80&nbsp; &nbsp; 00 00 00 FC 0B</div><br />Incorrect:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">8082&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0778 11&nbsp; &nbsp; 11 05 04 FC 09<br />8085&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8086 7F&nbsp; &nbsp; 11 05 04 FC 09<br />8087&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0778 11&nbsp; &nbsp; 11 05 04 FC 09<br />808A&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;808B 7E&nbsp; &nbsp; 10 05 04 FC 09<br />PPU.4000 : 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2000 10&nbsp; &nbsp; 10 05 04 FC 09<br />808C&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2000 10&nbsp; &nbsp; 10 05 04 FC 09<br />808F&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0779 1E&nbsp; &nbsp; 1E 05 04 FC 09<br />8092&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8093 E6&nbsp; &nbsp; 06 05 04 FC 09<br />8094&nbsp; AC&nbsp; LDY_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0774 00&nbsp; &nbsp; 06 05 00 FC 0B<br />8097&nbsp; D0&nbsp; BNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8097 D0&nbsp; &nbsp; 06 05 00 FC 0B<br />8099&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0779 1E&nbsp; &nbsp; 1E 05 00 FC 09<br />809C&nbsp; 09&nbsp; ORA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;809D 1E&nbsp; &nbsp; 1E 05 00 FC 09<br />809E&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0779 1E&nbsp; &nbsp; 1E 05 00 FC 09<br />80A1&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80A2 E7&nbsp; &nbsp; 06 05 00 FC 09<br />80A3&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2001 06&nbsp; &nbsp; 06 05 00 FC 09<br />80A6&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2002 80&nbsp; &nbsp; 06 80 00 FC 89<br />80A9&nbsp; A9&nbsp; LDA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80AA 00&nbsp; &nbsp; 00 80 00 FC 0B<br />80AB&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FB AD&nbsp; &nbsp; 00 80 00 FA 0B<br />8EE6&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2005 00&nbsp; &nbsp; 00 80 00 FA 0B<br />8EE9&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2005 00&nbsp; &nbsp; 00 80 00 FA 0B<br />8EEC&nbsp; 60&nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FC 80&nbsp; &nbsp; 00 80 00 FC 0B<br />80AE&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2003 00&nbsp; &nbsp; 00 80 00 FC 0B<br />80B1&nbsp; A9&nbsp; LDA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;80B2 02&nbsp; &nbsp; 02 80 00 FC 09<br />80B3&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4014 02&nbsp; &nbsp; 02 80 00 FC 09<br />80B6&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0773 00&nbsp; &nbsp; 02 00 00 FC 0B<br />80B9&nbsp; BD&nbsp; LDA_AbsoluteX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;805A 01&nbsp; &nbsp; 01 00 00 FC 09<br />80BC&nbsp; 85&nbsp; STA_ZeroPage&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0000 01&nbsp; &nbsp; 01 00 00 FC 09<br />80BE&nbsp; BD&nbsp; LDA_AbsoluteX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;806D 03&nbsp; &nbsp; 03 00 00 FC 09<br />80C1&nbsp; 85&nbsp; STA_ZeroPage&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0001 03&nbsp; &nbsp; 03 00 00 FC 09<br />80C3&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FB C5&nbsp; &nbsp; 03 00 00 FA 09<br />8EDD&nbsp; AE&nbsp; LDX_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2002 00&nbsp; &nbsp; 03 00 00 FA 0B<br />8EE0&nbsp; A0&nbsp; LDY_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EE1 00&nbsp; &nbsp; 03 00 00 FA 0B<br />8EE2&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0301 3F&nbsp; &nbsp; 3F 00 00 FA 09<br />*** SCANLINE 243&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0301 3F&nbsp; &nbsp; 3F 00 00 FA 09<br />8EE4&nbsp; D0&nbsp; BNE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EE5 AC&nbsp; &nbsp; 3F 00 00 FA 09<br />8E92&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2006 3F&nbsp; &nbsp; 3F 00 00 FA 09<br />8E95&nbsp; C8&nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8E95 C8&nbsp; &nbsp; 3F 00 01 FA 09<br />8E96&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0302 0C&nbsp; &nbsp; 0C 00 01 FA 09<br />8E98&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2006 0C&nbsp; &nbsp; 0C 00 01 FA 09<br />8E9B&nbsp; C8&nbsp; INY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8E9B C8&nbsp; &nbsp; 0C 00 02 FA 09<br />8E9C&nbsp; B1&nbsp; LDA_IndirectY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0303 04&nbsp; &nbsp; 04 00 02 FA 09<br />8E9E&nbsp; 0A&nbsp; ASL_Accumulator&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8E9E 0A&nbsp; &nbsp; 08 00 02 FA 08<br />8E9F&nbsp; 48&nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01FA 08&nbsp; &nbsp; 08 00 02 F9 08<br />8EA0&nbsp; AD&nbsp; LDA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0778 11&nbsp; &nbsp; 11 00 02 F9 08<br />8EA3&nbsp; 09&nbsp; ORA_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EA4 04&nbsp; &nbsp; 15 00 02 F9 08<br />8EA5&nbsp; B0&nbsp; BCS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EA5 B0&nbsp; &nbsp; 15 00 02 F9 08<br />8EA7&nbsp; 29&nbsp; AND_Immediate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8EA8 FB&nbsp; &nbsp; 11 00 02 F9 08<br />8EA9&nbsp; 20&nbsp; JSR&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01F8 AB&nbsp; &nbsp; 11 00 02 F7 08<br />PPU.4000 : 17&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2000 11&nbsp; &nbsp; 11 00 02 F7 08<br />8EED&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2000 11&nbsp; &nbsp; 11 00 02 F7 08<br />8EF0&nbsp; 8D&nbsp; STA_Absolute&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0778 11&nbsp; &nbsp; 11 00 02 F7 08<br />8EF3&nbsp; 60&nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;01F9 8E&nbsp; &nbsp; 11 00 02 F9 08</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Apr 04, 2010 6:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- This isn't an human-friendly readable disassembled code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NickMass</b> [ Sun Apr 04, 2010 6:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The emulator I've been working on has exactly the same issue with the blinking status bar, and it seems my tracer output is identical but a bit more verbose, here's what mine outputs if it can help diagnose what is going on.
<br />
<br />Correct:
<br /><a href="http://nickmass.com/emu/correct.txt" class="postlink">http://nickmass.com/emu/correct.txt</a>
<br />
<br />Incorrect:
<br /><a href="http://nickmass.com/emu/incorrect.txt" class="postlink">http://nickmass.com/emu/incorrect.txt</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sun Apr 04, 2010 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">- This isn't an human-friendly readable disassembled code.</div>Apologies for that.
<br />
<br />NickMass, your output and mine both have the same problem: instruction $8EE2 reads from $0301, which should be zero. If it is non-zero, then this bug appears (I've noticed values $3F and $26 in $0301, although certainly other values may be possible).
<br />
<br />This value is loaded at $8AF5 ($26) and $89F2 ($3F).
<br />
<br />Per the smb disassembly (at <!-- m --><a class="postlink" href="http://www.romhacking.net/docs/344/">http://www.romhacking.net/docs/344/</a><!-- m -->), the routines at these two addresses are ColorRotation and MushroomIconData
<br />
<br />$89F2
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ColorRotation:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda FrameCounter&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;get frame counter<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; and #$07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;mask out all but three LSB<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bne ExitColorRot&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;branch if not set to zero to do this every eighth frame<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx VRAM_Buffer1_Offset&nbsp; ;check vram buffer offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cpx #$31<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bcs ExitColorRot&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if offset over 48 bytes, branch to leave<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;otherwise use frame counter's 3 LSB as offset here<br />GetBlankPal:&nbsp; lda BlankPalette,y&nbsp; &nbsp; &nbsp; &nbsp;;get blank palette for palette 3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1,x&nbsp; &nbsp; &nbsp; &nbsp;;store it in the vram buffer *** WRITE TO 0301<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;increment offsets<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cpy #$08<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bcc GetBlankPal&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;do this until all bytes are copied<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx VRAM_Buffer1_Offset&nbsp; ;get current vram buffer offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$03<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;set counter here<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda AreaType&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;get area type<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;multiply by 4 to get proper offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;save as offset here<br />GetAreaPal:&nbsp; &nbsp;lda Palette3Data,y&nbsp; &nbsp; &nbsp; &nbsp;;fetch palette to be written based on area type<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1+3,x&nbsp; &nbsp; &nbsp;;store it to overwrite blank palette in vram buffer<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dec $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;decrement counter<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl GetAreaPal&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;do this until the palette is all copied<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx VRAM_Buffer1_Offset&nbsp; ;get current vram buffer offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldy ColorRotateOffset&nbsp; &nbsp; ;get color cycling offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda ColorRotatePalette,y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1+4,x&nbsp; &nbsp; &nbsp;;get and store current color in second slot of palette<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda VRAM_Buffer1_Offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;add seven bytes to vram buffer offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; adc #$07<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1_Offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc ColorRotateOffset&nbsp; &nbsp; ;increment color cycling offset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda ColorRotateOffset<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp #$06&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;check to see if it's still in range<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bcc ExitColorRot&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if so, branch to leave<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta ColorRotateOffset&nbsp; &nbsp; ;otherwise, init to keep it in range<br />ExitColorRot: rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;leave<br /></div><br />$8AF5:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MushroomIconData:<br />&nbsp; &nbsp; &nbsp; .db $07, $22, $49, $83, $ce, $24, $24, $00<br /><br />DrawMushroomIcon:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldy #$07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;read eight bytes to be read by transfer routine<br />IconDataRead: lda MushroomIconData,y&nbsp; ;note that the default position is set for a<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1-1,y&nbsp; &nbsp; ;1-player game *** WRITE TO 0301<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dey<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl IconDataRead<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda NumberOfPlayers&nbsp; &nbsp; &nbsp;;check number of players<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; beq ExitIcon&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if set to 1-player game, we're done<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;otherwise, load blank tile in 1-player position<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1+3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$ce&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;then load shroom icon tile in 2-player position<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta VRAM_Buffer1+5<br />ExitIcon:&nbsp; &nbsp; &nbsp;rts<br /></div>
<br />
<br />[edit]
<br />Memory location 0301 is set to zero again at instruction $80D8... which is after the offending branch. I don't think it's reset anywhere else...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Apr 04, 2010 9:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I figured it out guys.
<br />
<br />The "incorrect" code is really correct.  What's going on is the game is writing new map data.  I'm guessing the screen is flickering when the screen scrolls, right?   As in new data is being drawn.
<br />
<br />The game may not write to $2000 after drawing, but from looking at the smb disassembly, it <em>DOES</em> zero $2006.  See my notes at the beginning and end of this code snippit:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;**<br />;; HERE IS THE PROBLEM JSR TO THE CODE THAT WRITES TO $2000<br />;;**<br /><br />SetupWrites:&nbsp; &nbsp;jsr WritePPUReg1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;write to register<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;pull from stack and shift to left again<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc GetLength&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if d6 of third byte was clear, do not repeat byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #%00000010&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;otherwise set d1 and increment Y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iny<br />GetLength:&nbsp; &nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;shift back to the right to get proper length<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;note that d1 will now be in carry<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tax<br />OutputToVRAM:&nbsp; bcs RepeatByte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if carry set, repeat loading the same byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;otherwise increment Y to load next byte<br />RepeatByte:&nbsp; &nbsp; lda &#40;$00&#41;,y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;load more data from buffer and write to vram<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_DATA<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;done writing?<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne OutputToVRAM<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tya<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;adc $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;add end length plus one to the indirect at $00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to allow this routine to read another set of updates<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;adc $01<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta $01<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$3f&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;sets vram address to $3f00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;then reinitializes it for some reason<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta PPU_ADDRESS<br />;;**<br />;; THE ABOVE STA'S CLEAR $2006<br />;;**</div>
<br />
<br />You guys must not be doing the scrolling properly.  Remember that $2006, $2005, <em>and the low 2 bits of $2000</em> all change the same register ("loopy_t").  So by writing zero to $2006 twice, the low 2 bits of $2000 are effectively zero'd as well.
<br />
<br />
<br />Edit:  wtf @ double line breaks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sun Apr 04, 2010 10:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your solution worked perfectly Disch. I really appreciate your help.
<br />
<br />I hacked your solution into my emulator so that if VRAM_Address = 0 after $2006 is written to with the latch set, I clear the Name table base address (D1-D0 of $2000)... and while this works perfectly for SMB, I should obviously look into emulating loopy_t. So I'll be diving into <!-- m --><a class="postlink" href="http://h1.ripway.com/blargg/temp/nes_ppu_scrolling.txt">http://h1.ripway.com/blargg/temp/nes_ppu_scrolling.txt</a><!-- m --> tomorrow. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Apr 04, 2010 10:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah that page you linked outlines exactly what you need to do.
<br />
<br />Glad I could help  =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 05, 2010 4:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">Edit:  wtf @ double line breaks</div>
<br />I get this too on GNOME when I copy a Windows-line-ending text file from Gedit to Firefox.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>