<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hex noob question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hex noob question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10332">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10332</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>1RX</b> [ Tue Jul 30, 2013 7:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, I've been trying to understand hexadecimal banking and addressing but every info I find is too basic or too advanced.<br /><br />I just want to know how to calculate the real physical addresses given the &quot;bank-bank:address-address&quot; notation.<br /><br />for example:<br /><br />Bank	        Address	      Usage<br />00-7F 	8000-FFFF	      ROM<br />70-7F 	0000-7FFF	      RAM<br />80-FF 	8000-FFFF	      ROM (MIRROR)<br />F0-FF 	0000-7FFF	      RAM (MIRROR)<br /><br /><br />It seems that every snes document I find has this notation and I cannot understand it.<br /><br />another example:<br /><br />(from a mad-1 doc I was reading...)<br /><br />addresses that fit this:<br />($20-$3F):(6000-7FFF)<br />($20-$3F):(E000-FFFF)<br />($A0-$BF):(6000-7FFF)<br />($A0-$BF):(E000-FFFF)<br /><br />Again, I know this is &quot;from here to here&quot; notation but cannot understand how to get the physical address...<br /><br />At first I thought it was like this:<br /><br />40-7D	0000-FFFF <br />00-3F        8000-FFFF   <br /><br />(my guessing) physical addresses:<br /><br />400000 -&gt; 7DFFFF <br />008000 -&gt; 3FFFFF<br /><br />but then I saw:<br />(from the same mad-1 doc)<br /><br />40:0000-7FFF &lt;---	ROM 200000-207FFF<br />41:0000-7FFF &lt;---	ROM 208000-20FFFF<br />43:8000-FFFF &lt;---	ROM 218000-21FFFF<br /><br />so I know it is not like that.<br /><br />I don't know how noob this might be, but I want to learn this, so any help is much appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jul 30, 2013 8:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />From what I understand,<br /><br />00-7F 8000-FFFF ROM<br /><br />means that ROM lies at :<br />$008000 - $00fff, $018000 - $01fff, $028000 - $02fff and so on.<br /><br />This may seem a bit weird because the ROM is &quot;exploded&quot; into non-contiguous 32kb banks instead of being continuous. I don't really know why they did that, but apparently HiROM fixed that problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Jul 30, 2013 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What Bregalad said is correct.<br /><br />It would probably help you to actually look at a visual depiction of the SNES memory map (and it varies depending upon mode (mode 20 vs. mode 21)).  I urge you to <a href="http://www.romhacking.net/documents/226/" class="postlink">get this</a> (contains 2 PDFs) and look at pages 2-21-2 to 2-21-5.  Pages 1-2-24 to 1-2-35 may also interest you, but I'd recommend sticking with 2-21-2 to 2-21-5 (to a programmer/developer they're more useful).<br /><br />Also, I do not understand what you mean by &quot;physical address&quot; -- there is no &quot;virtual&quot; memory addressing like on the x86.  The memory model of the 65816 is linear and very easy to understand.  Just think of the bank + address as a 24-bit value, e.g. &quot;bank $7f, address $1234&quot; is $7f1234.  And rollover is linear as well, as I said, e.g. $7ffffe, $7fffff, $800000, $800001, etc...<br /><br />If the term &quot;mirror&quot; or &quot;shadow&quot; confuses you and you need that explained to you, just ask.<br /><br />As for Breglad's ponderings over mode 20 and why it &quot;masks (chops) off&quot; the lower $0000-7ffff portion of banks $00-7d and banks $80-ff -- that almost certainly has to do with being &quot;NES compatible&quot;, where the console was released with features that allowed developers familiar with the NES (where PRG is generally limited to $8000-ffff) to migrate over to the SNES with a bit more ease.  There are other features on the SNES that indicate this as well (e.g. registers $4016 and $4017 -- see page 2-28-9).  That's just the reality of the system, no sense in getting OCD about it.  :-)  There are more important things to worry about.  If it bothers you, just use mode 21 and rely on $c00000-$ffffff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jul 30, 2013 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Also, I do not understand what you mean by &quot;physical address&quot; -- there is no &quot;virtual&quot; memory addressing like on the x86.</div><br />Physical address in this case appears to mean the address as seen by the PRG ROM, or (in the case of an emulator) the address within the headerless .sfc file.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As for Breglad's ponderings over mode 20 and why it &quot;masks (chops) off&quot; the lower $0000-7ffff portion of banks $00-7d and banks $80-ff -- that almost certainly has to do with being &quot;NES compatible&quot;</div><br />There are two kinds of address in the operand of a 6502 instruction.<br /><ul><li>Direct: 8-bit offset within $0000-$00FF. </li><li>Absolute: 16-bit offset from $0000.</li></ul><br />There are three kinds of address in the operand of a 65816 instruction.<br /><ul><li>Direct: 8-bit offset from the frame pointer (D, corresponding to x86 BP) or stack pointer (S, corresponding to x86 SP). </li><li>Absolute: 16-bit offset from the start of the bank (B, corresponding to x86 DS). </li><li>Absolute long: 24-bit &quot;far&quot; address. </li></ul><br />The Super NES mirrors the I/O registers ($21xx and $43xx) and the first 8192 bytes of work RAM ($0000-$1FFF) in banks $00-$3F and banks $80-$BF. This brings the registers and the start of RAM within the range of an absolute address no matter what B is set to. Having some of RAM always available can prove useful even without the attempt at partial source compatibility with the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>1RX</b> [ Tue Jul 30, 2013 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Also, I do not understand what you mean by &quot;physical address&quot; -- there is no &quot;virtual&quot; memory addressing like on the x86. <br /></div><br /><br /><br />Hi again, thank you all for the quick replys!!<br /><br />I'm reading the manual Koitsu provided and it seems I could get to understand this subject after all  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> <br /><br />I was reading a ppt presentation, and the term &quot;physical address&quot; was supposed to be the address that could be seen in an hexadecimal editor. My noob hexadecimal skills betray me <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /> <br /><br />This whole thing is about something I read some time ago about SNES cartmodding, specifically about building a 96Mbit Star Ocean....<br /><br />I wanted to understand the mechanism to split the file given the hexadecimal addresses in the format I commented in the first post.<br /><br />it says:<br /><br />ROM 3(00-3F/80-BF:8000-FFFF) <br />ROM 1(C0-FF:0000-FFFF) <br />ROM 2(40-7D:0000-FFFF) <br /><br />I've been making some nice snes romhacks and rom translations into real cartridges and this caught my attention, but untill today this is beyond my knowledge.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Jul 30, 2013 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While everything you said is correct, Tepples, the argument for keeping $xx0000-xx7fff &quot;reserved&quot; for things like RAM/etc. (so in 65816 you don't have to use long addressing modes, e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STA $002100</tt> and can instead just do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STA $2100</tt>) is questionable once you look at the memory map a bit more closely.<br /><br />Mode 20 has $0000-1fff available (including mirroring) for RAM/registers through banks $00-3f and $80-8f.  However, the ROM (PRG) (despite being in $8000-ffff only) spans across more than just those banks: it spans banks $00-7d.  Banks $40-5f don't contain the RAM mapping, and banks $60-6f also don't contain the RAM mapping (for carts with DSPs), and finally banks $70-7d use $0000-7fff for SRAM.  It's fairly obvious that this was a design choice on the part of Nintendo, where someone decided that mode 20 games would only go up to 24mbit in size (in other words: that 24mbit &quot;choice&quot; explains why didn't they mirror the RAM/registers in banks $40-5f) -- though to be fair, I only remember seeing mode 20 games reaching up to 16mbit anyway, where anything larger was always mode 21.  (I would not be surprised if there were some mode 20 games larger than 16mbit though)<br /><br />Likewise, with mode 21, I find it interesting that only the upper half ($xx0000-xx7ffff) of the ROM from banks $c0-ff is mirrored into banks $00-7d.<br /><br />Then there's the fact that the mirroring &quot;cuts off&quot; 128KB early (at bank $7d, rather than $7f) due to someone deciding to place the extra 128KB of RAM in banks $7e-7f.  (I never will understand why they did that -- right in the smack dab middle of the addressing range, what the heck).<br /><br />Then there's the whole high speed vs. normal speed complexity as well.<br /><br />Just see the screenshots.<br /><br />And I won't even talk about mode 25 -- and equally disgusting and horrible mess (it makes mode 20 look like a walk in the park).<br /><br />I would have gone with this memory layout, quite honestly:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$000000-001fff -- RAM (8KB)<br />$002000-005000 -- registers<br />$008000-00ffff -- mirror of $058000-05ffff (needed for IRQ/NMI/RESET/ABORT/COP vectors)<br />$010000-02ffff -- RAM (128KB)<br />$030000-04ffff -- DSP<br />$050000-ffffff -- ROM<br /></div><br />It has all the same &quot;gotchas&quot; as the other modes but with a linear memory layout, and would allow for games exceeding that of 64mbit as well (slightly under 128mbit).  The only catch would be high speed mode, which I'd have solved by mirroring banks $05-7f to banks $85-ff (for high speed).  This would mean the maximum ROM size you'd be able to use for high speed mode is 64mbit, but hey, that's already the maximum limit on the SNES without a mapper, and you'd get a linear memory layout.  And I refuse to believe power-of-2-alignment is needed here because the existing memory models stick the 128K work RAM region at bank $7e.  :P

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<a href="./download/file.php?id=732&amp;mode=view"><img src="./download/file.php?id=732&amp;t=1" alt="mode21.png" /></a><br />
			<span class="gensmall">mode21.png [ 106.3 KiB | Viewed 806 times ]</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<a href="./download/file.php?id=731&amp;mode=view"><img src="./download/file.php?id=731&amp;t=1" alt="mode20.png" /></a><br />
			<span class="gensmall">mode20.png [ 100 KiB | Viewed 806 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Jul 30, 2013 1:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">1RX wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Also, I do not understand what you mean by &quot;physical address&quot; -- there is no &quot;virtual&quot; memory addressing like on the x86. <br /></div><br /><br />I was reading a ppt presentation, and the term &quot;physical address&quot; was supposed to be the address that could be seen in an hexadecimal editor. My noob hexadecimal skills betray me :mrgreen: <br /><br />This whole thing is about something I read some time ago about SNES cartmodding, specifically about building a 96Mbit Star Ocean....<br /><br />I wanted to understand the mechanism to split the file given the hexadecimal addresses in the format I commented in the first post.<br /><br />it says:<br /><br />ROM 3(00-3F/80-BF:8000-FFFF) <br />ROM 1(C0-FF:0000-FFFF) <br />ROM 2(40-7D:0000-FFFF) <br /><br />I've been making some nice snes romhacks and rom translations into real cartridges and this caught my attention, but untill today this is beyond my knowledge.</div><br />You keep saying &quot;hexadecimal editor&quot;, which means you're talking about <strong>file offsets</strong>.  The fact they're shown in decimal or hexadecimal has no bearing.<br /><br />What Bregalad, Tepples, and myself are talking about is the actual memory map of the SNES/SFC itself, meaning &quot;where in memory&quot; all of the portions of the ROM file &quot;get loaded&quot; before starting the game (for tech readers: I'm intentionally wording this badly/slightly inaccurately so the OP can understand).<br /><br />Essentially what you're needing is to make a file-offset-to-memory-map chart/table so you know what portion of the file &quot;gets loaded&quot; where.<br /><br />Before anyone can give you any kind of advice, we need to know what <strong>exact</strong> game it is you're working on, and if you could provide a link to the ROM image (this would be best, then those of us familiar with the console can look at it and tell you -- please do not upload the ROM to the board, I will delete the attachment if you do this).  The &quot;mode&quot; we're talking about (mode 20, 21, etc.) is what ultimately defines the memory model/layout, and that &quot;mode&quot; is both stored in the ROM image (in the cartridge header) as well as often hard-wired on the cartridge itself.  It varies per game, so to tell you &quot;file offset abc to xyz maps to memory $xxyyyy&quot; we need this information.<br /><br />Finally: a 96mbit Star Ocean cart would have to contain a memory mapper, which is a physical chip on the cartridge itself that would allow the SNES to exceed the existing addressing size limitations (meaning no more 32mbit (or 64mbit if using mode 25) limit).  You're walking into something that's extremely complex if that's the game you're working on, and I would strongly suggest you take a step back and work on a game that's 16mbit or less to get started/learn the ropes.  There are only a couple games that I know of which use mappers on the SNES, while on the NES this is incredibly common (since the memory layout is limited to 32KBytes).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>1RX</b> [ Tue Jul 30, 2013 11:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello, thanks for the detailed explanation.<br /><br />The thread about 96 Mbit Star ocean is here:<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4380&amp;start=15">viewtopic.php?f=12&amp;t=4380&amp;start=15</a><!-- l --><br /><br />A normal ROM of Star ocean is compressed to 48Mbit to work with S-DD1.<br /><br />The user Neviksti created an xdelta patch to expand the rom so it can be played on real hardware using a GF7 backup unit. <br /><br />Theoretically an uncompressed Star ocean rom file wouldn't need any special hardware to work on a real cartridge and it seems that some people got it to work using 3 x 4MB memory like 29f032  and one 74LS139 decoder in a Hirom PCB with a MAD-1 decoder on it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Jul 30, 2013 11:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't link to ROMS unless they're PD.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jul 30, 2013 11:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">though to be fair, I only remember seeing mode 20 games reaching up to 16mbit anyway, where anything larger was always mode 21. (I would not be surprised if there were some mode 20 games larger than 16mbit though)</div><br />Tactics Ogre is LoRom (mode 20) and 24mbit. The weird thing is that the cartridge actually contains only a single ROM chip, probably it's a 32mbit chip with 8mbit of it being unused. That or the ROM I have on my PC is an overdump.<br /><br />PS : I hope this is not <em>yet another</em> &quot;please help me to make bootleg Star Ocean carts so I can sell them for very expensive on eBay&quot; thread. For some reason Star Ocean, Earthbound and Final Fantasy 3 are very popular games for this kind of stuff ^^

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>1RX</b> [ Wed Jul 31, 2013 5:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">PS : I hope this is not <em>yet another</em> &quot;please help me to make bootleg Star Ocean carts so I can sell them for very expensive on eBay&quot; thread. For some reason Star Ocean, Earthbound and Final Fantasy 3 are very popular games for this kind of stuff ^^</div></div><br /><br /><br />I know some times it is like that and some people get advantage of the good will of many users of this forum and the free information on the internet. I stated at the first post that I don't understand this and I'm new to romhacking, I asked about hexadecimal stuff because I want to understand something that seems basic but for some reason I cannot find any info that helps me to learn this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Mon Aug 05, 2013 12:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex noob question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">1RX wrote:</div><div class="quotecontent">40-7D	0000-FFFF <br />00-3F        8000-FFFF   <br /><br />(my guessing) physical addresses:<br /><br />400000 -&gt; 7DFFFF <br />008000 -&gt; 3FFFFF<br /></div><br /><br />That's right actually  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">but then I saw:<br />(from the same mad-1 doc)<br /><br />40:0000-7FFF &lt;---	ROM 200000-207FFF<br />41:0000-7FFF &lt;---	ROM 208000-20FFFF<br />43:8000-FFFF &lt;---	ROM 218000-21FFFF<br /></div><br />Actually, here's the difference.<br /><br />The code on the actual black chip called a ROM. if the chip was alone, no SNES, there's memory on there from say $0000-$8000. then the SNES gets its hands on this black chip, and <strong>Memory Maps</strong> the ROM's $0000-$8000 to, SNES location 00:$8000-ffff  | thus, SNES $00:8000-ffff == ROM $0000-8000. still the same $8000 block, just a different location. Continuing, the ROM's memory at $8000-$FFFF is actually mapped to SNES $01:8000-FFFF. That's actually what happens.<br /><br /><br /> when it's memory mapped to SNES, the blocks get broken up, and so if you wanted to read the ROM in a continuous fashion from it being connected to a SNES cart, you would then have to be sure to read only $8000-$FFFF of each bank. since as we already clarified that is how the SNES breaks up ROM in the lower banks. ($00-$3f at the least)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>