<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Best way to pass arguments</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Best way to pass arguments</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16611">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16611</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Sun Oct 22, 2017 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've recently found that passing arguments can prove to be somewhat troublesome depending on what you have in mind. Obviously, one might go for a route where each CPU register holds one of the arguments assuming there are up to 3 arguments. Some situations might call for a method that only uses 'A' to pass arguments, especially whenever it's important to be able to use instructions with indexed addressing. I see two ways it might be done, and I'd be interested to know which of these works better, or if there's a better way of doing it.<br />For example, this is an ASM6 macro I have in my game that can be used in any entity's AI to accelerate the entity over time:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro ACCELERATE Xhi,Xlo,Yhi,Ylo<br />&nbsp; &nbsp;; accelerate the current object<br />&nbsp; &nbsp;; pass arguments via the stack<br />&nbsp; &nbsp;lda #&gt;(accelreturn-1) ; push return address in advance<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda #&lt;(accelreturn-1) ; push return address in advance<br />&nbsp; &nbsp;pha<br /><br />; recognize and avoid unnecessary lda-s<br /><br />&nbsp; &nbsp;lda #Yhi<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.if Yhi != Ylo<br />&nbsp; &nbsp;lda #Ylo<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.if Ylo != Xhi<br />&nbsp; &nbsp;lda #Xhi<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.if Xhi != Xlo<br />&nbsp; &nbsp;lda #Xlo<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;jmp AccelerateObject<br />&nbsp; &nbsp;accelreturn:<br />.endm</div><br />I have no choice but to push the return address in advance (<em>AccelerateObject</em> ends with an RTS), otherwise the arguments get buried under it and messing with 'S' seems to be a lot less optimal.<br /><br />The other method I've used before was to pass arguments using zero page temporaries:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro LOADPALETTE target,palID,amount<br />&nbsp; &nbsp;; Load palettes and raise the update flag<br />&nbsp; &nbsp;load=PaletteSet+(palID*4)<br />&nbsp; &nbsp;lda #&lt;load<br />&nbsp; &nbsp;sta temp+14<br />&nbsp; &nbsp;lda #&gt;load<br />&nbsp; &nbsp;sta temp+15 ; set up indirect vector<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #amount ; number of extra palettes to load<br />&nbsp; &nbsp;sta temp+1<br /><br />&nbsp; &nbsp;lda #target ; target in the buffer<br />&nbsp; &nbsp;jsr LoadThePalette<br />.endm</div><br />Now both of these are sort of &quot;hybrids&quot;, mixing the the 'registers-method' with the other one respectively, but of course this avoids a pointless PHA-PLA pair in the end.<br /><br />All in all, is there a generally acceptable &quot;best way&quot; of doing this, or is it always situational?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Oct 22, 2017 10:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think what you've just described is the best way. In registers is best, then over the ZP if that's not possible. Go to the stack in the rare case you need re-entrant/recursion and have exhausted the registers.<br /><br />Macros are great for easy call setups, too.<br /><br />One other useful place for arguments and return values is the flags (especially carry or V). Sort of like having some extra 1 bit registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 22, 2017 11:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, this is one of the common problems of 6502 development. While there are a few decent generic solutions out there (usually involving manipulation of the hardware stack, or the use of a software stack), they're often pretty slow. If you want speed, registers, flags and ZP are the way to go. Unfortunately, the ZP way doesn't allow for recursion (thankfully we hardly ever need recursion in NES games), and avoiding ZP collisions as you go deeper and deeper with the subroutine calls can be a problem too.<br /><br />I've created a pair of ca65 macros (StartScratchpad and EndScratchpad) to help me with declaring function arguments and local variables in the scratchpad area of ZP. The arguments to this macro are an offset into the scratchpad area, and the names of other functions that run alongside the one being defined. These macros keep track of the start and size of the scratchpad variables of every function that uses them, and they'll warn me about any collisions so I can adjust the offsets until there are no more collisions.<br /><br />I also implemented another pair of macros to manage named memory counters. If I start declaring a block of variables using a memory counter, the counter is updated accordingly when the block ends. This means I can have all functions that are in the same &quot;call tree&quot; share a memory counter, so that there are no scratchpad overlaps between them. This is not optimal though, since functions A, B and C being in the same call tree doesn't necessarily mean that they'll all use scratchpad RAM at the same time, maybe A runs alongside B and B alongside C, but A and C are never used together, so they could in fact share scratchpad space just fine.<br /><br />But yeah, I just end up mixing all the different ways depending on what's best for each specific part of the program, but I usually go with registers, flags, and ZP. A generic solution is too costly to be used all throughout a program, specially with the smaller subroutines. I'll personally only consider using the stack for arguments if I ever need recursion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Mon Oct 23, 2017 1:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />See my 6502 stacks treatise at <!-- m --><a class="postlink" href="http://wilsonminesco.com/stacks/">http://wilsonminesco.com/stacks/</a><!-- m -->, especially chapters 4, 5, and 6.  Chapter 6 is titled &quot;Parameter-passing methods.&quot;<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unfortunately, the ZP way doesn't allow for recursion</div><br />Actually, it does, although you'll use X for the pointer.  The method is also shown in the stacks treatise above, being introduced in chapter 4, &quot;Virtual stacks and various ways to implement them.&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Mon Oct 23, 2017 6:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While using registers is obviously the most effective way to go, I almost always end up swapping out my X/Y register arguments with zero page addresses somewhere along the road, so in retrospect I might have been better off just starting out with those. Using ZP variables also allows me to make use of some better naming, instead of having to remember what X or Y does, and whether I have to be careful about preserving it. The Y register especially can be extremely useful to preserve through an entire volley of subroutines when you're working with object arrays.<br /><br />What I tend to do, is assigning short names for each number from 0 to F and use them as makeshift registers - by always using the same ones for similar purposes, there's a much lower risk of accidentally interfering with eachother. The 6502 is super fast at working with ZP, and loading a value into the accumulator only takes one more cycle than transferring from X or Y.<br />I'm currently working on porting a Z80 game to NES, and the Z80 has a crapton of registers, with most of them being able to do 16bit operations. I was afraid I'd end up wasting a ton of CPU cycles trying to maintain exact functionality, but the 6502 works with the zero page faster than the Z80 works with any of its registers, and my version of the game actually runs most of the logic much faster than the original code! It's really a lovely CPU once you learn how it prefers to be handled.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Mon Oct 23, 2017 1:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />But yeah, I just end up mixing all the different ways depending on what's best for each specific part of the program, but I usually go with registers, flags, and ZP. A generic solution is too costly to be used all throughout a program, specially with the smaller subroutines. I'll personally only consider using the stack for arguments if I ever need recursion.</div><br /><br />This.  It all depends on the specifics of the routine and when it's called.  I never use the stack, but will miss and match between zero page and registers depending on the situation.  (Particularly, I have a handful of routines that take 2 16-bit parameters. At that point, you can't fit them all in registers anyway)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Oct 23, 2017 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And even when the arguments do fit in the registers and flags you have available, you have to consider the work the subroutine has to do, which might end up needing RAM anyway, so in this case it may be better to pass the arguments directly through RAM, as someone mentioned.<br /><br />Sometimes you can be a bit creative and avoid using RAM. For example, the other day I was coding a simple subroutine that can be called from many places, so using RAM in it would mean dodging the local variables of many other subroutines, so I decided I'd code it to not use any RAM. It takes an argument that's a value to subtract from a global variable, so the obvious thing to do would be this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sta Temp ;3<br />sec ;2<br />lda Global ;3<br />sbc Temp ;3<br />sta Global ;3 = 14 cycles</div><br />But this requires a temporary variable in RAM, so I figured I could negate the value and add it to the global instead:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">eor #$ff ;2<br />sec ;2<br />adc Global ;3<br />sta Global ;3 = 10 cycles</div><br />In addition to not using any scratchpad RAM, this is actually faster than the obvious solution.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>keldon</b> [ Mon Oct 23, 2017 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to pass arguments</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've a few virtual registers in zero page with a few contracts when functions are called and I need more than just A/X/Y.<br /><br />Argument registers (a0-a7) are preserved by the called function. Use to pass parameters to methods, or to store variables if you've run out of work registers <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />Temporary registers (t0-t3) are not preserved by the called function. Use these to carry out calculations without the need to preserve its value on the stack.<br />Return registers (r0-r3) are not preserved by the called function<br />Work registers (w0-w7) are preseved by the called function. Use these to store variables needed throughout your function.<br /><br />Argument and work registers are preserved on the stack (allowing recursion) while temp registers can be used for throwaway values.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>