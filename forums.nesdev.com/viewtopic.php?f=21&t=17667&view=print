<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - nesst, import metasprite data in asm/c format possible?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">nesst, import metasprite data in asm/c format possible?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=21&amp;t=17667">http://forums.nesdev.com/viewtopic.php?f=21&amp;t=17667</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Aug 16, 2018 8:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>nesst, import metasprite data in asm/c format possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />since I converted my old data to C array with at first the same format that neslib was using, the data is very similar to what nesst is creating.  I want to change the origin of my sprites and the tool would be the one that make the most sense, if I could find a way to import the data.<br /><br />I looked in the menu and there is an option to export in either asm/c but import doesn't seems possible. So my guess is there isn't one then?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Thu Aug 16, 2018 10:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: nesst, import metasprite data in asm/c format possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, that assumption is right. It sounds like a typical job for a py script to convert text to a .msb binary file. <br /><br />This is what i know about the .msb file format:<br />-Most of my files seem to start with a header (if that's what it is) of $40 $40, though one starts with $40 $38. I'm not sure what that is about.<br />-Metasprites can contain up to 64 sprites, 4 bytes data each, ordered like so:<br />Ypos, TileID, attributes, Xpos. In other words same sequence as raw OAM, but with offset position values. Interestingly, this is not the order NESST exports metatile data as asm or c text btw, which is a little backwards imo. <br />-Ypos and Xpos are relative to center position (which btw is $40,$40, striking similarity to the usual two first bytes in a file) and can be offset from -64 to +191. The visual representation bugs out at +64 though, so the practical range is -64 to 63. <br />-Each metasprite is padded to a page start +2, ie addr 0x000002, 0x000102 and so on. <br />-The padding is filled with $FF in case there aren't enough sprite entries. I'd assume a repeat of four $FF:s tell NESST to ignore these entries from being interpreted as sprite entries, or maybe it just looks at the value of Attribute to tell. Position values can be $FF, at least, and you can still use tileID $FF. <br /><br /><br /><br />...but if you can wait a bit, i know Lukasz and M-tee are working on a more dedicated metasprite editor. I'm not clear on what the exact feature set will land, but i was invited to come with ideas and suggestions and assembly text imports was one of them. I'm sure they'll chime in on the details whenever it is ready to go into the wild.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Aug 16, 2018 6:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: nesst, import metasprite data in asm/c format possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For the format, my original data was following OAM based one but since I started to switch some code to C and started with neslib, I adapted my data to the same one in neslib. The only reason that the data is different is maybe it makes it easier to update x/y by hands since they are now the 2 first values for a row. In OAM format, it's a lot easier to make mistake unintentionally. <br /><br /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">...but if you can wait a bit, i know Lukasz and M-tee are working on a more dedicated metasprite editor. I'm not clear on what the exact feature set will land, but i was invited to come with ideas and suggestions and assembly text imports was one of them. I'm sure they'll chime in on the details whenever it is ready to go into the wild.</div><br /><br />I will be interested at a later stage but for now the meta sprite data is only for the main actor so I guess for testing different origins (right now it is located in top/left position), I think it will be faster to just remake the data manually.  If the msb file was just some xml/json etc, that would have been quite convenient. My old map editor file format was all text based for that reason: if someday, someone wants to parse the data, they can with any scripting language they like.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Thu Aug 16, 2018 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: nesst, import metasprite data in asm/c format possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think the main reason for NESST organizing sprite data like that is because it is a bit more readable in a text editor. <br /><br />let's say we have a metasprite consisting of 2 sprites for simplicitys' sake. <br /><br />shiru's order:<br /> xpos, ypos, tileID, attribute<br /><br />so, we've maybe got something like<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte -4, -8, $00, 0 <br />.byte -4,&nbsp; 0, $01, 1 | VFLIP</div><br />That makes for even columns, since the OR appendage on the palette with all the attribute constants gets last in line. <br /><br />in raw oam format, we've got<br />ypos, tileID, attribute, xpos<br /><br />so that would be<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte -8, $00, 0, -4<br />.byte&nbsp; 0, $01, 1 | VFLIP, -4</div><br /><br />Which, well, you can read it, but it takes time to make out what it is. <br /><br />On the other hand, both ease of editing and ease of reading is what the <em>editor</em> is for. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  Once exported it shouldn't be touched again and the editor ought to be the canonical source for edits, IMO. Text edits not represented in the editor project file is messy to keep track of and you'd risk overwriting manual changes if you need to go back to the editor. Personally, the only time i'd go about editing in a text file with such data is to make a quick, temporary a/b check. <br /><br />So with that in mind, i'd prefer if the output of the editor was directly digestible for the PPU. that's what the output is for - again IMO. Everyones' got their own workflow. <br /><br />As it is, text exports always need to be edited or processed to comply to the PPU directly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Aug 16, 2018 7:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: nesst, import metasprite data in asm/c format possible?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Even though I didn't have an editor ready yet for that (never had the chance to make it that far), my format was originally OAM based and done by hand. The OAM format seems un-natural when you are used to structure things by group. The new format made it easier to read and edit for the time being. I may go back to older format later but for now that is not an important detail.<br /><br />As for editor, I agree, once edited it should never be touched again by again because it's make the project harder to manage.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>