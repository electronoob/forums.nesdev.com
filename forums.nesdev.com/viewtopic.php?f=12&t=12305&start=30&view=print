<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Dynamic Sprite Vram Routine Ideas</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Dynamic Sprite Vram Routine Ideas</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12305">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=12305</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Feb 22, 2015 2:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">I'm not sure if you can change OBSEL during HBlank (though I certainly hope so, and I should probably test this), but I know you can change it between frames.</div><br />Well, last night I decided to check this, and now I'm sure.  You <em>can</em> change at least the table locations by writing to OBSEL during HBlank.  Transition is seamless, so far as I can tell.<br /><br />(This test ROM lets you move a red square around the screen.  Halfway down, it turns green.  No modifications to CGRAM are involved.)<br /><br />It's probable I'm not the first to find this out, since every emulator I tried (even ZSNES) gets it right.  But I wanted to be certain, because this was one of the few remaining potential wrenches in the works that could have derailed my porting project.  I have a lot of sprites that never move, and even without anything else going on they don't fit in 16 kB...  unless I waste a lot of 8x8 sprites to avoid tile duplication, in which case they seem to just barely fit in 16 kB with little or no room for anything else...<br /><br />EDIT:  replaced .rar with .7z in deference to the moderators.  Also note that this doesn't quite work properly in the latest version of higan; the switch seems to be reversed (green on top, red on bottom).  In the accuracy core, the switches seem to happen one scanline late, the most obvious effect of which is that the top scanline is rendered in the same colours as the bottom half of the screen; this happens as far back as bsnes v072.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2850">spritetest.7z</a> [68.83 KiB]
			</span><br />
			<span class="gensmall">Downloaded 13 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 22, 2015 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you were doing this though, wouldn't you have to duplicate a bunch of tiles to be on both sprite tables? Basically, you have to reserve half of vram for sprites even if you really only need about 24KB. The main problem I see with this though is that you'd have to update vram twice for one object. Maybe your code could look to see where you object is vertically and only update the table that corresponds to what part of the screen it's on? You'd still have to write to both if it is in the dead center.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Feb 22, 2015 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the general case, yes, it'd be tricky.  My game is a unique case in that a lot of the sprites have a defined position on the screen that doesn't change during gameplay.<br /><br />It's a bullet hell port, that can easily have hundreds of bullets onscreen, and some of the backgrounds really want to be in Mode 7.  This means (a) I need the Super FX chip or something similar to blit the bullets to a surface, and (b) the blitted surface sometimes has to be a tiled sprite layer, because Mode 7 doesn't let you use any other background layers.  The sprites in the bullet layer never move, so they only need to be stored once for a given frame.<br /><br />Plus, the sidebar with score and lives and whatnot would eat too many sprites if I just overlaid it on Mode 7, so I need to switch from Mode 7 to Mode 1 about two-thirds of the way across the screen.  This generates a column of garbage a few tiles wide, which needs to be masked with - you guessed it - more sprites.  Which also never move...<br /><br />...<br /><br />I figure I can probably get away with using one sprite table for all of the stuff that can show up anywhere plus maybe one or two of the 32x32 mode switch masking sprites.  Then I can simply modify the offset of the second table to give me 3/2 buffering for the bullet layer, in which I use two tables for a frame, overwrite the third table during VBlank, use the same two tables (giving me 30 fps), overwrite one of the just-used tables, and then change to using the two newly-overwritten tables for the third frame; rinse and repeat.  Minimal duplication.  I may have to reserve more space for BG tiles, which would cut into the space available for Mode 7 data, but I'll cross that bridge when I come to it.<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Maybe your code could look to see where you object is vertically and only update the table that corresponds to what part of the screen it's on? You'd still have to write to both if it is in the dead center.</div><br />Depending on what you were doing, you might even want to move the table switch up and down depending on where stuff is...  That wouldn't work for my game, but I'm sure it's theoretically possible to come up with a scenario in which it'd be useful...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 22, 2015 10:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />At how much stuff you are doing (enhancement chips, buffers, changing object tables) couldn't you just have it to where the entire playing field is just a buffer, similar to Doom? If you're worried about frame rate, you could always flip the image on it's side for more DMA bandwidth. Off course, the pictures on its side. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Feb 22, 2015 10:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />According to my calculations a GSU2 in high-speed mode (Super FX2) would be fairly heavily loaded just drawing the bullets at 4bpp and 30 fps.  In fact I'm still not certain it's possible to do a 1:1 port, though I think it's close enough that if it comes to it, a few tricks ought to get me over the line.  We'll see.  If all else fails I might have to accept a bit of slowdown.<br /><br />In any case doing a scaling/rotating background at the same time, especially an 8bpp one, would completely blow away my processor time budget.  And if it were 8bpp, it would take twice as long to DMA.  Flipping it on its side really isn't an option; the feel would be completely different, which isn't really acceptable for a port.<br /><br />I could scale it down and not use Mode 7 for the backgrounds, but I don't want to, and I think the system can handle what I want to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Feb 22, 2015 10:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Who said you had to use the SuperFX... Anyway, If you run out of time using the normal SuperFX chip, you could use the version that's clocked twice as fast, unless you're still afraid of running out of time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Feb 22, 2015 10:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I <em>am</em> using the version that's clocked twice as fast.  And there are no other programmable special chips for the Super NES that are better at bitplane blitting.  I'd have to make something up, which would essentially render this project non-executable.<br /><br />(I've been busy with work, but I really should mock up a bullet-rendering engine and start getting a feel for what the real-world performance is like.  Last I heard, emulated Super FX chips weren't exactly the same as real ones, but I think higan is pretty close...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Mar 02, 2015 10:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I might as well use Espozo's idea since I ran into a little trouble today with vram overload in my Alisha's Adventure, though I want to fix some other issues first.<br /><br />-players collision box is too big.<br />-kicks look weird.<br />-explosions cause too much flicker and clutter up the view too much.<br />-button scheme needs a little reworking.<br />-BG collision routine takes too much CPU time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Tue Mar 03, 2015 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I might as well use Espozo's idea since I ran into a little trouble today with vram overload in my Alisha's Adventure, though I want to fix some other issues first.</div><br />Hold on now! You still need to pay me the royalties. (It's patented. <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> )<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">-explosions cause too much flicker and clutter up the view too much.</div><br />Honestly, I don't think explosions really fit for what you're using them for. I would recommend using a spikey cloud like thing you would see in a comic book for whenever you hit an enemy, like the affect that plays whenever you jump on an enemy in DKC. You could use and explosion for when the enemy is defeated though, and make it to where it isn't permanently in vram like it is now.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">kicks look weird.</div><br />Would you be interested in someone helping you with artwork?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Mar 03, 2015 10:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe I'll use a forward flying kick as the normal attack, instead of half of a roundhouse kick.<br /><br />Heck, it could be that I just over-animated it, and if I cut a frame or two out, it will look right.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Apr 05, 2015 3:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><span style="font-size: 75%; line-height: normal"><div class="codetitle"><b>Code:</b></div><div class="codecontent">animation:<br /><br />lda {graphics_address_request}<br />cmp {graphics_address}<br />bne +<br /><br />lda {metasprite_request}<br />cmp {metasprite}<br />beq no_metasprite_pattern<br /><br />+;<br /><br />lda #$0000<br />ldy {metasprite_request}<br />beq no_animation_slot<br />lda $0008,y<br />beq no_animation_slot<br /><br /><br /><br />sep #$20<br />lda $000a,y<br />sta $4202<br />lda $000c,y<br />sta $4203<br />nop #3<br />rep #$20<br />lda $4216<br />+;<br /><br />sta {vram_size}<br />clc<br />adc {total_dma_legnth}<br />cmp #$0060<br />bcc yes_metasprite_pattern<br /><br />lda {first_object_to_dma}<br />bne +<br />tdc<br />sta {first_object_to_dma}<br />+;<br /><br />jmp no_metasprite_pattern<br /><br />yes_metasprite_pattern:<br /><br /><br /><br /><br /><br /><br />jsr clear_vram_slot<br /><br />ldy {metasprite_request}<br />lda $000a,y<br />sta {vram_width}<br />lda $000c,y<br />sta {vram_height}<br /><br />bra dynamic_animation<br /><br /><br /><br /><br />no_animation_slot:<br />ldy {metasprite_request}<br />sty {metasprite}<br />tdc<br />tax<br />-;<br />lda $000e,y<br />sta {metasprite_table},x<br />beq +<br />lda $0010,y<br />sta {metasprite_table}+2,x<br />lda $0012,y<br />sta {metasprite_table}+4,x<br />lda $0014,y<br />sta {metasprite_table}+6,x<br />txa<br />clc<br />adc #$000a<br />tax<br />tya<br />clc<br />adc #$0008<br />tay<br />bra -<br /><br />+;<br /><br /><br />no_metasprite_pattern:<br /><br />rts<br /><br /><br /><br />dynamic_animation:<br /><br />lda {graphics_address_request}<br />sta {graphics_address}<br /><br /><br />lda {metasprite_request}<br />sta {metasprite}<br />tay<br />tdc<br />tax<br />-;<br />lda $000e,y<br />sta {metasprite_table},x<br />beq +<br />lda $0010,y<br />sta {metasprite_table}+2,x<br />lda $0012,y<br />sta {metasprite_table}+4,x<br />lda $0014,y<br />sta {metasprite_table}+8,x<br /><br />jsr find_vram_slot<br /><br /><br /><br />txa<br />clc<br />adc #$000a<br />tax<br />tya<br />clc<br />adc #$0008<br />tay<br />bra -<br /><br />+;<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />ldy {metasprite}<br />lda $0006,y<br />clc<br />adc {graphics_address}<br />sta {temp}<br />lda $0008,y<br />sta {temp2}<br /><br />tdc<br />tax<br /><br />ldy {dma_updates}<br /><br />-;<br /><br />lda {metasprite_table},x<br />beq +<br />asl<br />sta {dma_rows},y<br />asl #5<br />sta {dma_legnth},y<br /><br />lda {vram_width}<br />asl #5<br />sta {dma_increment},y<br /><br />lda {metasprite_table}+8,x<br />and #$01f0<br />lsr #4<br />sep #$20<br />sta $4202<br />lda {vram_width}<br />sta $4203<br />nop #3<br />rep #$20<br />lda {metasprite_table}+8,x<br />and #$000f<br />clc<br />adc $4216<br />asl #5<br />clc<br />adc {temp}<br />sta {dma_address},y<br />lda {temp2}<br />sta {dma_bank},y<br /><br /><br />lda {metasprite_table}+6,x<br />and #$01ff<br />asl #4<br />sta {dma_destination},y<br /><br />iny #2<br /><br />lda #$0000<br />sta {dma_legnth},y<br /><br />txa<br />clc<br />adc #$000a<br />tax<br />bra -<br /><br />+;<br />sty {dma_updates}<br />lda {vram_size}<br />clc<br />adc {total_dma_legnth}<br />sta {total_dma_legnth}<br /><br />jmp no_metasprite_pattern<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />find_vram_slot:<br />phx<br />lda {metasprite_table},x<br />cmp #$0002<br />beq ++<br /><br />sep #$20<br />ldx #$0000<br />-;<br />lda {vram_slot_table},x<br />beq +<br />inx<br />cpx #$0080<br />bne -<br />rep #$20<br />pla<br />sec<br />sbc #$000a<br />tax<br />rts<br /><br />+;<br />lda #$01<br />sta {vram_slot_table},x<br /><br />rep #$20<br />stx {temp}<br />txa<br />and #$0078<br />clc<br />adc {temp}<br />asl<br />plx<br />sta {temp}<br /><br />lda $0014,y<br />and #$fe00<br />ora {temp}<br />sta {metasprite_table}+6,x<br />rts<br /><br /><br /><br /><br /><br />+;<br />ldx #$0000<br />phy<br />ldy #$0007<br />-;<br />lda {vram_slot_table},x<br />ora {vram_slot_table}+8,x<br />beq +<br />inx<br />dey<br />bne -<br />inx<br />ldy #$0007<br />cpx #$0030<br />bne -<br />ldx #$0040<br />-;<br />lda {vram_slot_table},x<br />ora {vram_slot_table}+8,x<br />beq +<br />inx<br />dey<br />bne -<br />inx<br />ldy #$0007<br />cpx #$0070<br />bne -<br />ply<br />pla<br />sec<br />sbc #$000a<br />tax<br /><br />rts<br />+;<br />ply<br />lda #$0101<br />sta {vram_slot_table},x<br />sta {vram_slot_table}+8,x<br /><br />stx {temp}<br />txa<br />and #$0078<br />clc<br />adc {temp}<br />asl<br />plx<br />sta {temp}<br /><br />lda $0014,y<br />and #$fe00<br />ora {temp}<br />sta {metasprite_table}+6,x<br /><br />rts<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />clear_vram_slot:<br />php<br /><br /><br />ldy {metasprite}<br />beq no_slot_to_clear<br />lda $0008,y<br />beq no_slot_to_clear<br /><br /><br />tdc<br />tax<br />-;<br />lda {metasprite_table},x<br />beq no_slot_to_clear<br />tay<br />phx<br /><br />lda {metasprite_table}+6,x<br />and #$01e0<br />lsr<br />sta {temp}<br />lda {metasprite_table}+6,x<br />and #$000e<br />ora {temp}<br />lsr<br /><br />tax<br /><br />cpy #$0002<br />beq +<br />sep #$20<br />lda #$00<br />sta {vram_slot_table},x<br />rep #$20<br /><br /><br /><br />bra ++<br />+;<br />lda #$0000<br />sta {vram_slot_table},x<br />sta {vram_slot_table}+8,x<br /><br /><br />+;<br /><br /><br /><br /><br />pla<br />clc<br />adc #$000a<br />tax<br />jmp -<br /><br />no_slot_to_clear:<br /><br />tdc<br />tax<br />lda #$0000<br />sta {metasprite_table},x<br /><br /><br />plp<br />rts<br /></div></span><br /><br />I just revamped my animation code to use your idea of individual 16x16s and 32x32s getting their own vram slot.  I had the idea of giving each object slot, it's own metasprite table, just to make it easier to build the oam afterwords.  I think the code could be simplified and optimized a bit more though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Apr 05, 2015 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I just revamped my animation code to use your idea of individual 16x16s and 32x32s getting their own vram slot.  I had the idea of giving each object slot, it's own metasprite table, just to make it easier to build the oam afterwords.</div>Didn't I say that earlier? I said you could reserve 16 or so bytes with one for each sprite.<br /><br />This is pretty off topic, (and was actually the main reason I was going to post) but how do you use direct page without having to do this stuff?<br /><br />stz <span style="text-decoration: underline">a:</span>HFlipMask<br /><br />I know someone explained it at some point, but I can't find where... I was thinking about having objects being offset by direct page instead of y like I am know, so I have x and y free instead of just x.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Khaz</b> [ Sun Apr 05, 2015 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wish I could comment on how ca65 does things, but the bottom line is that to use direct page you need to use instructions that have a one-byte address for an operand.  In WLA at least, this should happen automatically when you use a label that's defined as one byte, like, &quot;.EQU label  $08&quot;.  Later when you write &quot;LDA label&quot;, it will translate that to &quot;LDA $08&quot; which will use direct page.  (WLA is just a dick about it so that if you write &quot;.EQU label $0008&quot; it will still interpret it as &quot;LDA $08&quot; which is wrong - for any address under $0100 you need to explicitly tell WLA that you mean TWO BYTES.)<br /><br />In other words, I don't THINK you should need the &quot;a:&quot; at all just to use direct page, so long as HFlipMask is defined as a single byte.  I think the easiest way to figure it out would probably be to just try it, and then look at either a listing file or a trace to see if it correctly translated your direct page instructions to a one-byte-operand instruction.<br /><br />I think that's what you were asking anyways...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Sun Apr 05, 2015 7:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, whenever you use direct page, the things you want to use direct page for are using a &quot;&lt;&quot; and the things that aren't are using a &quot;a:&quot;. Otherwise, it seems that things get loaded from the wrong location. I think I remember something about moving something out of the BSS segment?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Khaz</b> [ Sun Apr 05, 2015 7:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Dynamic Sprite Vram Routine Ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hope someone can confirm my assumption here, but sounds like the &quot;&lt;&quot; is the same as WLA's &quot;.b&quot; and &quot;a:&quot; is WLA's &quot;.w&quot; - it's &quot;operand hinting&quot; to explicitly tell the assembler whether to take one or two bytes as the operand.<br /><br />In other words, you only &quot;need&quot; those when ca65 isn't interpreting it the way you want by default.  I would imagine, generally speaking, that you shouldn't require the &quot;a:&quot;s ever and only the &lt;s, if ca65 always defaults to a two-byte (&quot;absolute&quot;) address.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>