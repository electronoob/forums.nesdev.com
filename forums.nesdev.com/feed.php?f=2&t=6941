<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6941" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-09-23T20:31:13-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6941</id>
<entry>
<author><name><![CDATA[p1xl]]></name></author>
<updated>2010-09-23T20:31:13-07:00</updated>
<published>2010-09-23T20:31:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67774#p67774</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67774#p67774"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67774#p67774"><![CDATA[
I just built a cable tonight and got the tone.bin to execute.<br />Pretty cool stuff!  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I'd be happy to test out the RPC code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4379">p1xl</a> — Thu Sep 23, 2010 8:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-09-23T09:15:04-07:00</updated>
<published>2010-09-23T09:15:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67752#p67752</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67752#p67752"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67752#p67752"><![CDATA[
Argh, my tester's equipment is non-operational at the moment. Does anyone else even have a PC link cable and want to try out the remote procedure call library before I post what I've got, untested on anything except my setups?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Sep 23, 2010 9:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-09-20T01:14:20-07:00</updated>
<published>2010-09-20T01:14:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67679#p67679</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67679#p67679"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67679#p67679"><![CDATA[
We're going to have to re-asses this thing from scratch, at least if I'm going to be able to do much. I'm also working on something else now, having spend enough time on this (and the RPC, which I should be releasing in a couple of days). I'm not sure how well I can accommodate all these extensions, and I'm not even sure they make sense for this boot loader. But that's OK, I think re-assessment of how this fits in the grand scheme of things is good. So for now, this only supports $4017.D0 for serial input. I'll try to start another thread on this bigger picture today.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Sep 20, 2010 1:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-09-19T21:43:50-07:00</updated>
<published>2010-09-19T21:43:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67675#p67675</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67675#p67675"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67675#p67675"><![CDATA[
I've figured out which bits I will use, $4017.D1 for output to the NES, and OUT1 ($4016.D1) for input from the NES, instead of OUT0 (strobe).  This should keep every kind of NES controller port device out of the way, and would work just as well on Famicom.<br /><br />I also noticed on the PIC32, the UART and SPI peripherals share the same I/O pins.  That works out pretty well here, it could use either mode just as easily.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sun Sep 19, 2010 9:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-09-16T10:15:32-07:00</updated>
<published>2010-09-16T10:15:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67571#p67571</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67571#p67571"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67571#p67571"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I seem to remember tracing the input code in Super Mario Bros. (JU), and it assumes so.<br /></div><br />Several (U) games I checked in the past use both D0 and D1.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 16, 2010 10:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-09-16T10:07:13-07:00</updated>
<published>2010-09-16T10:07:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67570#p67570</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67570#p67570"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67570#p67570"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />My only concern is junk data on D1. Can we assume that it always reads back as 0 when not connected, and on a NES?<br /></div><br />I seem to remember tracing the input code in Super Mario Bros. (JU), and it assumes so.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Sep 16, 2010 10:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-09-16T10:05:09-07:00</updated>
<published>2010-09-16T10:05:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67569#p67569</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67569#p67569"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67569#p67569"><![CDATA[
Oh also, I believe the Famicom expansion D1 will be on $4016 (I think so, but I'm not sure).  So it's a different bit and a different register.  Still, not too bad though.<br /><br />As for noise on the lines, kevtris said some NES games (such as Spelunker) already check this bit.  So it must be stable, but I suppose the NES version could be ignoring it afterwards (not sure at the moment, but I doubt that it's been changed - this is probably common on famicom games).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Sep 16, 2010 10:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-09-16T09:52:42-07:00</updated>
<published>2010-09-16T09:52:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67567#p67567</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67567#p67567"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67567#p67567"><![CDATA[
My only concern is junk data on D1. Can we assume that it always reads back as 0 when not connected, and on a NES? If we're going for multiple bits, what about D3 and D4 as well? That way you could have a pass-through serial cable on a NES as well, that connected the controller normally to D0 and serial to D3 or D4. Code-wise doing multiple bits requires doing an LDA, AND, CMP anyway, so supporting arbitrary bits is easy enough (and if you use the fast-and-loose CPX $4017 approach, you automatically support serial on any of the 8 bits that are normally zero).<br /><br />So what's really at the core of this is a set of input lines to use as a baseline bit-bang serial standard.<br /><br />I'll have to see how this affects the tiny boot loader implementations. There's going to be some expansion, unfortunately. But oh well, one can always use these smaller ones in specialized situations where the serial interface is known. We just want a more capable one to put on homebrew cartridges etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Sep 16, 2010 9:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-09-16T09:12:53-07:00</updated>
<published>2010-09-16T09:12:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67566#p67566</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67566#p67566"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67566#p67566"><![CDATA[
I was just talking this over with kevtris, and he came up with what I think is a great solution - have the initial bootloader use both D0 and D1.  The only thing AFAIK that uses D1 is Famicom expansion controllers (where it is the 'normal' data-in).  So between D0 and D1, the bootloader would then be compatible with controller port serial adapters, NES expansion port serial adapters, and Famicom expansion port serial adapters (Famicom has hard-wired controllers), all at the same time.  Can't beat that for flexibility and compatibility.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Sep 16, 2010 9:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-09-16T06:42:03-07:00</updated>
<published>2010-09-16T06:42:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67563#p67563</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67563#p67563"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67563#p67563"><![CDATA[
I've almost got the RPC library ready for release. It's all fit together so well. The first version won't have live interaction, merely "recording" of routine calls into a file that you then send to the NES to "replay" them. You can read things back from the NES though. The next version will have full interaction, where you can make calls and get data back interactively. The nice thing about the recording approach is that it gives more flexibility in how you get it to the NES, and is simpler to code for.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />EDIT - Sorry, nevermind what I said about the block size, I wasn't considering that it's only one block, heheh. Still seems a little odd, but any arbitrary amount is fine in that case.<br /></div><br />Yeah, I guess the term "block" implies there's more than one. I guess I should avoid using that word. <br /><br />See the <a href="http://blargg.parodius.com/nes-code/bootloader/spec.html#Design%20rationale" class="postlink">Design Rationale</a> section of the specification for more about each decision. I've tried to examine every aspect of this and choose a design that's a best fit for them all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I've been thinking about this lately, about hooking this up on the expansion port version of my Squeedo board. Given the choice between synchronous SPI and async UART, I'm definitely going to try synchronous. What I'm hoping would work, is on MCU it could do an async bit-bang to be compatible with just the initial loader. After it gets the proper comms code loaded from that, then it should be OK to use any kind of hardware whatsoever, right?<br /></div><br />Yeah. Once your code starts executing at address $0007, it's free to do whatever it wants. Of course if there's not the standard serial connection, the code won't be able to do that much.<br /><br />I'm thinking a second level of loader is really needed, one that hides how serial transfer is done, etc. This boot loader is mainly meant to reduce the amount of code needed in ROM on a system with the D0-based serial connection. It's not suited for other connections to the PC.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I guess my biggest concern (with my hardware as I imagine it), is wondering wtf happens if a controller is in port 2 at the same time the MCU (or anything for that matter) is bit-banging the same lines on the expansion port.. On the expansion port though it would be really easy to move to the other bits. I kind of wish the "standard" serial adapter didn't use D0. So I'll have to look for a work-around, probably.<br /></div><br />One reason to use D0 is that every controller cable connects it. It's also easier to use for optimized serial code where it just does LSR $4017 to move the bit into carry. I'll have to think more about this, as you raise a good issue.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Despite whatever issues I may or may not run into, a standard bootloader like this is a really great idea. I figured XMODEM would just be the standard<br /></div><br />I had realized that XMODEM is meant for unreliable connections. At least here, 57600 has been very reliable, so error checking merely needs to catch that rare error (or bad cabling), rather than automatically retry.<br /><br />The main goal of this boot loader was being really small yet still (optionally) robust. There could be a second level of loader that sits on this one, or is implemented directly by for example Squeedo, where you don't even have the first-level loader because you've got the space/easy reprogrammability. As long as you can bootstrap to a common environment, then it doesn't matter.<br /><br />kyuusaku, heh, that's sort of like one of the send routines I have in the upcoming remote procedure call library. There's also an equivalent one that CRC-16s a byte as it's receiving another. Doing those in parallel is definitely the way to go.<br /><br /><strong>EDIT:</strong> OK, I figured out how this fits in with Memblers' points about other hardware. I'll be adding this to the specification:<br /><br />This boot loader is meant to allow control of a NES connected to the host via serial on the second controller port's D0 input. It isn't suitable for other host connection schemes, for example serial connected to a different input on the expansion connector.<br /><br />Serial over D0 is very easy to wire up, since standard controller cables connect that pin, and the circuitry is just a few resistors and a transistor. The standard boot loader protocol allows it to be put on a cartridge easily, and it doesn't need to be updated, so the user doesn't need the ability to re-burn it. It could for example be included on homebrew cartridges as an extra feature. Anyone can build the serial cable, but getting the boot loader burned on a ROM is the biggest hurdle.<br /><br />In normal use, a secondary loader will be sent, which then loads the actual program to be executed. The user doesn't directly write programs to send to the boot loader. This secondary loader can be implemented for other host connection cable types, so that the user has the same host tools regardless of the connection. This boot laoder thus is only used for those connected with the simple serial cable described here.<br /><br />[the further loading might be handled by something like the upcoming RPC library, or perhaps something simpler]<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Sep 16, 2010 6:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2010-09-16T07:42:37-07:00</updated>
<published>2010-09-16T00:16:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67557#p67557</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67557#p67557"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67557#p67557"><![CDATA[
I hacked out some NES-&gt;PC code, maybe it's of some use to someone. It's a little big but it sends up to 64k as fast as possible (8N1 @ 57600 baud, no gaps in between bytes) while generating a 16-bit checksum.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />dw count         ; byte count, $0000 will send 64k<br />dw tcheck        ; temp checksum<br />dw checksum   ; final checksum<br />dw ptr             ; start address<br />db byte           ; holds read byte<br />db invert         ; set to $FF for direct connection, $00 for MAX232/FTDI<br /><br /><br />    ldy #0<br />    sty &lt;tcheck        ; temp checksum<br />    sty &gt;tcheck<br />startbit:<br />    ; pla, branch to here  6<br />    lda &lt;count    ; 3<br />    beq skip    ; 2<br />    nop        ; 2<br />    dec &lt;count    ; 5<br />    jmp here    ; 4<br />skip:            ; 3<br />    dec &lt;count    ; 5<br />    dec &gt;count    ; 5<br />here:            ; ----- 16<br />    nop        ; 2<br />    lda invert    ; 3<br />    sta $4016    ; 4 ---- 31<br /><br /><br />    lda &#40;ptr&#41;,y    ; 5<br />    sta byte    ; 3<br />    inc &lt;ptr    ; 5<br />    beq one        ; 2<br />    nop        ; 2<br />    jmp two        ; 4<br />one:            ; 3<br />    inc &gt;ptr    ; 5<br />two:            ; ------ 13<br />    lda byte    ; 3<br />    eor invert    ; 3<br />    sta $4016    ; 4 ---- 31<br /><br /><br />`    lda byte    ; 3<br />    clc        ; 2<br />    adc &lt;tcheck    ; 3<br />    sta &lt;tcheck    ; 3<br />    lda &gt;tcheck    ; 3<br />    adc #0        ; 2<br />    sta &gt;tcheck    ; 3<br />    lda byte    ; 3<br />    eor invert    ; 3<br />    lsr a        ; 2<br />    sta $4016    ; 4 ---- 31 <br />    <br />    ; waste 3 cycles<br />    pha        ; 3<br />    ldx #7        ; 2<br />loop:<br />    pha    ; 3<br />    pla    ; 3<br />    pha    ; 3<br />    pla    ; 3<br />    pha    ; 3<br />    pla    ; 3<br />    nop    ; 2 -- 20<br />    lsr a        ; 2<br />    sta $4016    ; 4 -- 31<br />    dex        ; 2<br />    bne loop    ; 3<br /><br />stopbit:<br />            ; 2 added cycles from bne<br />    lsr a        ; 2<br />    sta byte    ; 3 --- byte should be clear, maybe useful<br />    pla        ; 3<br />    lda &lt;count    ; 3<br />    ora &gt;count    ; 3 --- this is a done flag<br />    pha        ; 3<br />    lda invert    ; 3<br />    eor #1        ; 2    <br />    sta $4016    ; 4 -- 31<br /><br />    pla        ; 3<br />    bne startbit<br />    lda &lt;tcheck<br />    sta &lt;checksum<br />    lda &gt;tcheck<br />    sta &gt;checksum<br />    rts</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Thu Sep 16, 2010 12:16 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-09-15T09:29:30-07:00</updated>
<published>2010-09-15T09:29:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67537#p67537</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67537#p67537"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67537#p67537"><![CDATA[
Why not do 256 bytes of data, 249 byte blocks is kind of a weird size, I would think that the header and error-checking stuff will discarded immediately after it checks out OK.  XMODEM by comparison is 128 bytes of data + 2 bytes of CRC-16, which is super easy to handle - no problems crossing page boundaries.<br /><br />I've been thinking about this lately, about hooking this up on the expansion port version of my Squeedo board.  Given the choice between synchronous SPI and async UART, I'm definitely going to try synchronous.  What I'm hoping would work, is on MCU it could do an async bit-bang to be compatible with just the initial loader.  After it gets the proper comms code loaded from that, then it should be OK to use any kind of hardware whatsoever, right?<br /><br />See any potential problems with this idea?  Seems OK, as far as I can tell so far.<br /><br />EDIT - Sorry, nevermind what I said about the block size, I wasn't considering that it's only one block, heheh.  Still seems a little odd, but any arbitrary amount is fine in that case.<br /><br />I guess my biggest concern (with my hardware as I imagine it), is wondering wtf happens if a controller is in port 2 at the same time the MCU (or anything for that matter) is bit-banging the same lines on the expansion port..  On the expansion port though it would be really easy to move to the other bits.  I kind of wish the "standard" serial adapter didn't use D0.  So I'll have to look for a work-around, probably.<br /><br />Despite whatever issues I may or may not run into, a standard bootloader like this is a really great idea.  I figured XMODEM would just be the standard (as it has been since before I was even born), but XMODEM has it's faults (no filename, or filesize given, no auto-start transfers) so this could handle things a lot better, while still being standard enough.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Wed Sep 15, 2010 9:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2010-09-15T05:44:04-07:00</updated>
<published>2010-09-15T05:44:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67534#p67534</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67534#p67534"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67534#p67534"><![CDATA[
Hows the RPC API coming along, blargg? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Sep 15, 2010 5:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-09-08T11:42:01-07:00</updated>
<published>2010-09-08T11:42:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67388#p67388</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67388#p67388"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67388#p67388"><![CDATA[
Yeah, the secondary one I'm rebuilding will be fabulous. First version I've been using is really fun to program from C. You basically get a clean API for accessing the NES, for example write_chr( addr, ptr, size ) and it writes that from your C program to the NES CHR. Internally it just does a generalized RPC, sending the NES code for a small routine that loads the CHR, along with the CHR data. When that returns, this secondary loader is running, waiting for the next RPC call. Just to be clear, this isn't for writing games or anything (the latency would be too great), just for manipulating the NES hardware/loading things from the host in a very streamlined fashion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Sep 08, 2010 11:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[p1xl]]></name></author>
<updated>2010-09-08T11:20:56-07:00</updated>
<published>2010-09-08T11:20:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67387#p67387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67387#p67387"/>
<title type="html"><![CDATA[NES boot loader specification]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6941&amp;p=67387#p67387"><![CDATA[
Very nice work on the bootloader, Blargg.  And I really like the idea of supporting a developer and getting a game and a programmable cart.<br /><br />Is it possible to have a second stage boot loader that writes directly to CHR-RAM?  If so, something 'official' would be nice.  That way you could write little ram games without having to worry about compressing tiles into your code space.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4379">p1xl</a> — Wed Sep 08, 2010 11:20 am</p><hr />
]]></content>
</entry>
</feed>