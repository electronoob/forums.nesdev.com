<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=11920" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-10-16T21:06:28-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=11920</id>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2014-10-16T21:06:28-07:00</updated>
<published>2014-10-16T21:06:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135167#p135167</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135167#p135167"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135167#p135167"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />NB:  Everything I've said thus far assumes an NTSC system.  The numbers will be different for PAL; somewhat better, though the same general conclusions should hold.<br /></div><br />Vblank time in PAL is gigantic compared to vblank time in NTSC, it's not just somewhat better, it's a lot better. The obvious downside is the lower framerate =P (to put it simple: if you were to trim 16 pixels from the top and the bottom, you'd be nearly doubling blanking time in NTSC without it really being noticeable on the screen size - it's that bad)<br /><br />Also on top of all this: how much processing time is left to render to such a bitmap in the first place? I guess this would resort to a coprocessor because otherwise I see no way how one could want such a high framerate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Thu Oct 16, 2014 9:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2014-10-16T20:50:39-07:00</updated>
<published>2014-10-16T20:50:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135166#p135166</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135166#p135166"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135166#p135166"><![CDATA[
Yeah, even with general DMA and HDMA combined there isn't enough time in a single frame to do this.  You'd have to settle for actual 30fps.  This is how and why arcade games with dedicated hardware for massive sprite or BG overlays and/or lots of ROM space were made.  Why does this whole thing make me think of Metal Slug?  *cringe*  :P<br /><br />Edit: hey, if every pixel was 1 bit (meaning black-and-white quite literally), you could pull it off. Bad Apple demo for SNES.  (I'm certain Tepples will latch on to this, LOL)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Thu Oct 16, 2014 8:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-10-16T20:43:43-07:00</updated>
<published>2014-10-16T20:43:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135165#p135165</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135165#p135165"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135165#p135165"><![CDATA[
Paging means using half the VRAM for the frame being displayed and half for the next frame as it is being loaded into video memory, then switching the VRAM bank once the frame is completely loaded. At least Elite and Tank Demo use a form of paging.<br /><br />Tearing means showing a picture on the screen that is only partially updated. Tetris for NES has some visible tearing when updating the matrix after a line clear. And during some particularly fast maneuvers, I've even got Zoop for Super NES to visibly tear.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Oct 16, 2014 8:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-10-16T20:37:04-07:00</updated>
<published>2014-10-16T20:37:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135163#p135163</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135163#p135163"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135163#p135163"><![CDATA[
Oh, I was being an Idiot... I was thinking that every pixel was 1 bit, not 1 byte.  <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> <br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />And since the data is still too big to page, you'll still get tearing<br /></div><br /><br />What do you mean by paging and tearing?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Thu Oct 16, 2014 8:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2014-10-16T20:28:25-07:00</updated>
<published>2014-10-16T20:28:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135161#p135161</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135161#p135161"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135161#p135161"><![CDATA[
Not enough bandwidth.  You've only got 224 scanlines; with all 8 HDMA channels firing on every line, that's 7,168 bytes.  Add that to the 6 kB or so from VBlank, and you're still well short of what would be necessary to update the whole screen in one frame.  And since the data is still too big to page, you'll still get tearing.<br /><br />This is all assuming you can actually do this stunt with force blank and HDMA at all...<br /><br />Your best bet, if you insist on a flat-rendered 8bpp display, is to make it smaller.  This simultaneously increases the DMA bandwidth and reduces the amount of data you need to transfer with it.  Getting 60 frames per second would require an unreasonably small display, but you can probably use an adequate amount of the screen at 20 frames per second without the HDMA trick, or 30 with it.<br /><br />...<br /><br />NB:  Everything I've said thus far assumes an NTSC system.  The numbers will be different for PAL; somewhat better, though the same general conclusions should hold.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Thu Oct 16, 2014 8:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-10-16T19:03:34-07:00</updated>
<published>2014-10-16T19:03:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135158#p135158</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135158#p135158"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135158#p135158"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Even if forced blanking during horizontal blanking is possible, this would mean no sprites.<br /></div><br /><br />I don't plan on halving any sprites, because I want to put everything on BG1 and I would not even have enough vram for a full 8bpp screen and sprites. Just thinking, couldn't you actually update the whole screen in one frame with DMA and several HDMA channels? If I am correct, I am guessing you would load as much of the graphics on the top of the screen with DMA, and also at the top of the screen, you would have several HDMA channels loading graphics at the rest of the screen that DMA does not cover. For every 8 rows of pixels, you could update 1 row using HDMA because each row of pixels in 8bpp mode is 32 bytes, and in HDMA, you can transfer 4 bytes in every row, so 32/4 = 8. Every new HDMA channel would then decrease the amount of rows of HDMA for every row of graphics written. (Sorry for my poorly worded and generally confusing post, I just had trouble writing what I wanted to say.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Thu Oct 16, 2014 7:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-10-16T17:52:01-07:00</updated>
<published>2014-10-16T17:52:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135154#p135154</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135154#p135154"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135154#p135154"><![CDATA[
Even if forced blanking during horizontal blanking is possible, this would mean no sprites.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Oct 16, 2014 5:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-10-16T16:08:49-07:00</updated>
<published>2014-10-16T16:08:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135153#p135153</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135153#p135153"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135153#p135153"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />Since we had good luck changing bg modes mid scanline, would it be possible to use force blank during H-blank, and use DMA then.<br /></div><br /><br />If that is possible, then wouldn't you be able to DMA twice as much graphics?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Thu Oct 16, 2014 4:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2014-10-16T12:36:42-07:00</updated>
<published>2014-10-16T12:36:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135150#p135150</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135150#p135150"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135150#p135150"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">in theory scaling in mode 7 would work (thereby reducing memory usage even less), but no idea if Doom is doing that.<br /></div><br />I think it's using Mode 3.</div><br />Correct, Doom for the SNES/SFC uses mode 3.  I verified it in SNES9x's debugger.  All of Doom's scaling, as I remember it, is purely 100% software; there isn't any &quot;HDMA trickery&quot; or anything else that I know of.  Using NO$SNS check out the VRAM, tab &quot;Tiles 8bpp&quot;, and watch the window when moving/panning around (even a slight bit) -- all software.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Thu Oct 16, 2014 12:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-10-16T10:21:49-07:00</updated>
<published>2014-10-16T10:21:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135145#p135145</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135145#p135145"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135145#p135145"><![CDATA[
Since we had good luck changing bg modes mid scanline, would it be possible to use force blank during H-blank, and use DMA then.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu Oct 16, 2014 10:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2014-10-16T05:19:42-07:00</updated>
<published>2014-10-16T05:19:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135133#p135133</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135133#p135133"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135133#p135133"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />I think it's using Mode 3.  Actually, I've seen no evidence that the Super FX's PLOT instruction even knows about Mode 7; it seems to be only for bitplanes.  You could always render normally in software, I suppose...<br /></div><br />The docs say &quot;256-color mode&quot; without ever mentioning to which mode it's referring to =/ Seriously, Nintendo's documentation is atrocious.<br /><br />Also PLOT only advances forward horizontally (more specifically, after PLOT is executed the X coordinate advances by 1 while the Y coordinate is untouched), so using PLOT would mean having to substract 1 from R1 and add 1 to R2 after every pixel, so I'd imagine PLOT isn't even used in the first place, it'd be just wasteful.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />That's not how bitplanes work, unfortunately.  Each byte contains data for all eight pixels in the row.<br /></div><br />Ouch, right, for some reason I was under the impression that 8bpp modes were always packed instead of planar (I know that's definitely the case in mode 7).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Thu Oct 16, 2014 5:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2014-10-16T02:27:07-07:00</updated>
<published>2014-10-16T02:27:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135131#p135131</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135131#p135131"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135131#p135131"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />I am just thinking about how 93143 said that I would take over 9 frames to update an entire 8bpp screen, but some Super FX games I know , like Doom, are 8bpp and run at a (somewhat) reasonable speed. Does the Super FX chip have anything to do with the fast DMA transfers, or am I crazy and they actually only run at about 10 frames per second?<br /></div><br />My &quot;9 frames&quot; number is for a standard full-screen display, where the active region is 256 dots wide and takes up 224 lines out of 262, giving you about (262-224)*(1364-40)/8 = 6,289 bytes of DMA per frame to transfer 57,344 bytes of graphical data.  If you want to refresh the entire screen, that's about six and a half frames per second, with visible tearing because the screen is too big for any paging strategy.<br /><br />Doom seems to run at 216x176, with a 32-pixel-high status display at the bottom reducing the actual rendered area to 216x144.  This means that in principle up to (262-176)*1324/8 = 14,233 bytes of DMA per frame is available to transfer 31,104 bytes of graphical data.  That's plenty for 20 frames per second, with ample headroom for OAM and CGRAM updates, so you can use 5/3 buffering regardless of frame rate as long as the Super FX has enough RAM to hold up its end (a 30 kB layer still seems a little big to naïvely double buffer if you want anything else on screen)...<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />SuperFX is replacing the 3Mhz 65816 with a 10Mhz 65816, and later 21Mhz, so that's why games run better and needed it for the complex graphics and 3D math.<br /></div><br />Uh, the Super FX was a custom RISC chip by Argonaut.  The SA-1 was a 65816 at 10.74 MHz, but it was never (so far as I know) upgraded to 21 MHz as the Super FX was.<br /><br />Also, while I believe Super FX games tended to leave the SNES CPU mostly idle, the SA-1 was designed to cooperate with the CPU rather than outright replace it.<br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><br />in theory scaling in mode 7 would work (thereby reducing memory usage even less), but no idea if Doom is doing that.<br /></div><br />I think it's using Mode 3.  Actually, I've seen no evidence that the Super FX's PLOT instruction even knows about Mode 7; it seems to be only for bitplanes.  You could always render normally in software, I suppose...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I suppose mosaic can be used to make the SNES skip every other pixel, so that'd mean even less bandwidth needed if you can make it transfer into every other byte, right?<br /></div><br />That's not how bitplanes work, unfortunately.  Each byte contains data for all eight pixels in the row.<br /><br />As a matter of fact, the VRAM port is two bytes wide, and you <em>can</em> set the word address to increment after writing either the low or high byte.  This doesn't really help with the cunning plan I had a while back re: DMAing only the first two bitplanes of a sprite table (if anyone has any great ideas on how to do that without having to reset the DMA every 16 bytes, I'm all ears), but it does mean you can write to either the tilemap or the tiledata in Mode 7 without wasting bandwidth writing to both...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Thu Oct 16, 2014 2:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2014-10-15T22:45:59-07:00</updated>
<published>2014-10-15T22:45:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135127#p135127</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135127#p135127"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135127#p135127"><![CDATA[
SNES Doom definitely isn't rendering to the entire screen though, I imagine that gets rid of a rather big chunk of the memory needed. Also stupid question, but in what mode does Doom show the graphics? I mean, it isn't full resolution so in theory scaling in mode 7 would work (thereby reducing memory usage even less), but no idea if Doom is doing that.<br /><br />EDIT: oh, also I suppose mosaic can be used to make the SNES skip every other pixel, so that'd mean even less bandwidth needed if you can make it transfer into every other byte, right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Wed Oct 15, 2014 10:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-10-15T22:02:08-07:00</updated>
<published>2014-10-15T22:02:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135125#p135125</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135125#p135125"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135125#p135125"><![CDATA[
That helps with the 3D calculations, but what about transferring data to VRAM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Oct 15, 2014 10:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2014-10-15T20:44:34-07:00</updated>
<published>2014-10-15T20:44:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135121#p135121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135121#p135121"/>
<title type="html"><![CDATA[Re: Would it be feasable to put everything on one 8bpp BG la]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11920&amp;p=135121#p135121"><![CDATA[
SuperFX is replacing the 3Mhz 65816 with a 10Mhz 65816, and later 21Mhz, so that's why games run better and needed it for the complex graphics and 3D math.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Wed Oct 15, 2014 8:44 pm</p><hr />
]]></content>
</entry>
</feed>