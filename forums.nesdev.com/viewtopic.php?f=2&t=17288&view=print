<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Culling</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Culling</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17288">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17288</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bleubleu</b> [ Tue Apr 24, 2018 4:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi.<br /><br />My objects keep their position in 16-bit, world space. When it comes time to draw them, I simply subtract the camera position and draw the metasprite.<br /><br />how do you guys handle culling off-screen objects? There seems to be 2 levels : <br /><br /><ul><li>First cull the object using a simple bounding box, to see if the whole thing is off camera.</li><li>If it is at least partially on screen, draw it, and cull the individual 8x8 tiles to avoid stuff wrapping around the screen.</li></ul><br />Do you guys have a clever way of doing this while minimizing the number of 16-bit operations (ideally after the camera transform, everything would be back to 8-bit...).<br /><br />-Mat

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Apr 24, 2018 6:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Assume the position is the top left corner. Assume the widest or tallest an object can be is 256 pixels. Assume that sprite offsets are always positive. (If you need negative offsets, add the maximum negative offset before drawing, and subtract it after drawing. Then offset your offset data accordingly so it can be exclusively positive.)<br /><br />Subtract the camera position from the object's position and store the low byte. (The high byte is in A. I guess store this too if you don't want a lot of duplicated similar code.)<br /><br />If the high byte is zero, add the width of the metasprite to the low byte. If the carry is clear, individual clipping is not needed for the sprites in that dimension. It is fully on screen for that dimension. Otherwise it is partially off screen on the right. <br /><br />If the high byte is 255, add the width of the metasprite to the low byte. If the carry is set, the object is partially on screen on the left, otherwise it is fully offscreen. Return and do nothing if fully offscreen.<br /><br />If the high byte was anything but 0 or 255, the object is fully offscreen. Return and do nothing.<br /><br />The high byte check could look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda OBJxlow,x<br />sec<br />sbc scrollxlow<br />sta templow<br /><br />lda OBJxhigh,x<br />sbc scrollxhigh<br />beq partiallyonscreenleft<br />cmp #255<br />bne fullyoffscreen<br />lda templow<br />clc<br />adc OBJwidth,x<br />bcc fullyoffscreen<br />;If here, object is partially on screen on the right<br /><br /><br />partiallyonscreenleft:<br />lda templow<br />clc<br />adc OBJwidth,x<br />bcc fullyonscreenx<br />;If here, object is partially on screen on the left<br /><br /><br />fullyonscreenx:<br />;If here, the object is fully on screen in the X dimension<br /><br />fullyoffscreen:<br />rts<br /></div><br />If you know the object is fully onscreen, you can just add and store your offsets.<br />If you know the object is partially on screen with a high byte of zero, you add the low byte to the offset, and branch on carry set to not drawing the sprite.<br />If you know the object is partially on screen with a high byte of 255, you add the low byte to the offset, and branch on carry clear to not drawing the sprite.<br /><br />So: You use the high byte of the initial 16bit subtract to find out if the object is fully on screen, fully offscreen, partially off screen on the right, or partially off screen on the left.<br />If fully offscreen, you don't even need to check the other dimension. No drawing should happen.<br />If fully on screen, you only need to add the low byte to the offset and store it. No high byte check at all.<br />If partially off screen on the left, you need to add the low byte to the offset but only store if the carry is set.<br />If partially on screen on the right, you need to add the low byte to the offset but only store if the carry is clear.<br /><br />Obviously this requires multiple drawing algorithms for the fastest possible result. I had two. One for fully on screen (the high byte in both dimensions was zero, and there was no carry set after adding the width for either) and one for partially on screen. (Which meant I had to do the 16 bit add even if one of the dimensions was fully on screen.) I figured that was fine.<br /><br />Edit: If you don't have duplicate routines for each type of partial offscreen, you still have to do a 16bit add for every sprite, but you just do a non zero branch.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda &#91;reserved4&#93;,y;X Offset<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc &lt;reserved0;X Position<br />&nbsp; &nbsp;sta OAM+3,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;reserved1<br />&nbsp; &nbsp;adc #$00<br />&nbsp; &nbsp;bne dms.partial.skipsprite.twoiny<br /></div><br />Edit2: Knowing the direction of partially offscreen saves you the load of the high byte and the add. (You just need to branch depending on carry from the low byte.)<br />Fully on screen is just this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;35 bytes<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y;Y position<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc &lt;reserved2<br />&nbsp; &nbsp;sta OAM,x<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y;X Position<br />&nbsp; &nbsp;;clc<br />&nbsp; &nbsp;adc &lt;reserved0<br />&nbsp; &nbsp;sta OAM+3,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y<br />&nbsp; &nbsp;;clc<br />&nbsp; &nbsp;adc &lt;reserved7;This should guarantee a clear carry<br />&nbsp; &nbsp;sta OAM+1,x<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &#91;reserved4&#93;,y<br />&nbsp; &nbsp;sta OAM+2,x<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;;clc;guaranteed clear above<br />&nbsp; &nbsp;adc #4<br />&nbsp; &nbsp;tax;Carry not guaranteed anything after that add since oampos wraps<br /></div><br />Which I also unrolled.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Apr 24, 2018 6:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I always assume the object is on screen, and do the following:<br /><br /><ul><li>Subtract the camera's coordinates from the object's to find the &quot;center&quot; of the sprite, while also adjusting for flipping and the <a href="https://forums.nesdev.com/viewtopic.php?f=10&amp;t=17080#p214031" class="postlink">excess-128</a> format that will be used later;</li><li>Set up masks to invert the sprite offsets in case of flipping (EOR masks that are either $00 or $FF);</li><li>Iterate over the individual sprites of the metasprite, EOR'ing the excess-128 offsets against the respective masks and adding the result to the reference coordinates;</li><li>A final coordinate with a high byte other then $00 means the sprite is off screen, so just move on to the next sprite;</li><li>If the sprite is on screen, copy the remaining bytes (attributes - EOR'ed against another flipping mask - and the tile index) to the current OAM position and advance to the next position;</li></ul><br />In the end I compare the OAM index to what it was in the beginning, to detect whether any sprites were output, and use this information when deciding whether to deactivate objects (I have two conditions for this to happen: the object has to be off screen and its spawn point outside of the active area).<br /><br />My biggest tip for reducing the overhead of 16-bit math is using the excess-128 format in the metasprite definitions, so you don't have to worry about selecting/forming a high byte for them (it will always be 0 in excess-128 format, even when there's flipping), but you still need the 16-bit result to tell whether the resulting coordinates are on screen (you can obviously throw the high byte away after detecting that, there's no need to save it anywhere).<br /><br />Of course things will have to be a little different if your metasprites are stored in grids rather than free sprites.<br /><br />EDIT: Kasumi's method has some similarities to mine, but there are a lot of things that differ depending on the format in which you want to store the data and the limitations you impose on how the sprites can be formed. I personally don't like to use the top left corner as the reference point because I find that too restrictive. For example, you can't easily make a character that grows upward (such as <a href="https://youtu.be/oPm3AqBkPg4?t=3m17s" class="postlink">James Pond</a>) because you'd have to awkwardly manipulate the object's position in addition to its size while it's actually standing still. I don't think this is always good for physics either, specially if you're doing any sort of rotation - I prefer to have the hotspot at the center of the character's feet, so I can easily rotate around that when running up steep slopes and such. The best thing about metasprites made of free sprites IMO is that the hotspot can be anywhere really, so you can use whatever makes the most sense for each character, taking into account how they behave and interact with the level map.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Apr 24, 2018 8:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For Lizard, I handled this by dividing the screen into halves and quarters, and using that as sort of a parity for whether draw a tile or not. I'll talk about this in one dimension, but you could do the same process independently in both dimensions.<br /><br />The 16-bit position that goes in is generally the centre of the object, partly because that makes flipping simple, but the main requirement here is that the sprite should not extend more than 64 pixels -/+ this centre position. (Internally I call this centre position a &quot;<a href="https://en.wikipedia.org/wiki/Pivot_point" class="postlink">pivot point</a>&quot;, being used to that term from 3D animation.)<br /><br />In this example I will use <em><strong>^</em></strong> to represent an exclusive-or operation (<strong>EOR</strong>).<br /><br /><br />Step 1: Figure out its relationship to the screen. Subtract pivot from camera to find the screen relative position, with 16 bit result <em><strong>X</em></strong>. This leaves a few categories of where it might appear:<br /><br />1. <em><strong>X</em></strong> &lt; -64 or <em><strong>X</em></strong> &gt;= 256+64  --- completely offscreen, return early (far outside screen)<br />2. 64 =&lt; <em><strong>X</em></strong> &lt; 196 --- completely onscreen, draw with no culling (middle two quadrants)<br />3. <em><strong>X</em></strong> &lt; 64 or <em><strong>X</em></strong> &gt;= 196 --- onscreen but could be partially culled (outer two quadrants)<br />4. <em><strong>X</em></strong> &lt; 0 or <em><strong>X</em></strong> &gt;= 256 --- offscreen but could be partially onscreen, i.e. inverse culling (two quadrants adjacent to visible screen)<br /><br />At this point, reduce <em><strong>X</em></strong> to an 8-bit value <em><strong>x</em></strong>. 16-bit math is no longer required.<br /><br />The high bit of <em><strong>x</em></strong> (i.e. representing <em><strong>x</em></strong> &gt;= 128) will become the parity we will use for culling. We want to create a parity value <em><strong>p</em></strong> so that if the high bit of <em><strong>x ^ p</em></strong> = 0, the position is considered offscreen (culled), and if it = 1, the position is onscreen.<br /><br />So, if <em><strong>X</em></strong> was onscreen (case 3), <em><strong>p</em></strong> = <em><strong>x ^ $80</em></strong>. If it was offscreen (case 4), <em><strong>p</em></strong> = <em><strong>x</em></strong>. Store <em><strong>p</em></strong> on the zero page for easy use.<br /><br /><br />Step 2: Cull the metatiles. (Case 3 and 4 only.)<br /><br />For each tile, add its signed 8-bit position to <em><strong>x</em></strong>. I'll call this result <em><strong>u</em></strong>. The result is still 8-bit; we never need to go back to 16-bits, the only additional information we needed was <em><strong>p</em></strong>.<br /><br />So, calculate <em><strong>u ^ p</em></strong> and inspect the high bit of the result (<strong>BMI</strong>/<strong>BPL</strong>). If the high bit is 1, add the tile to your OAM buffer. If it's 0, skip it (culled).<br /><br /><br />That's basically it. The whole point is doing 16-bit operations only once (on the pivot point), and then from there taking advantage of the constraint that sprites won't ever be wide enough to end up on more than half of the quadrants of the screen to encode the leftover information needed to decide onscreen/offscreen, represented with that single parity.<br /><br />Even differentiating the 4 cases doesn't require more 16-bit compares beyond the intial pivot - camera subtraction (i.e. you can obtain quadrant from the high 2 bits of the low 8-bit result, and a little bit of logic on the high result). I didn't outline all of that here to keep it simple, but really there's only one 16-bit subtract (per axis) for the whole metasprite.<br /><br />Case 1 resulted in skipping the whole metasprite. Case 2 requires parity to be ignored and just to draw all tiles; this can either be a separate routine, or maybe an extra <strong>ORA</strong> with a second flag to force the result to always say &quot;onscreen&quot;. Case 3 and 4 can be rendered with the same code, the input <em><strong>p</em></strong> controls which half of the 8-bit &quot;screen&quot; (reduced by wrapping) is considered &quot;onscreen&quot; or &quot;offscreen&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bleubleu</b> [ Wed Apr 25, 2018 5:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank a lot everybody. <br /><br />I think ill be able to figure out an algorithm using some of the ideas you suggested. rainwarrior's suggestion seems more in-line with how my data is stored right now and is simple to implement.<br /><br />As a somewhat related question, something obvious i *wasn't* doing (since all i had was one guy in a room) is clear the OAM every frame. <br /><br />What do you guys do? Do you take the lazy way and clear it at the beginning of the frame? Of clear the unused entries at the end? Whats the fastest OAM-clearning loop you guys can think of ? <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />-Mat

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Apr 25, 2018 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have an index to the OAM buffer as it gets filled up. It starts at 0. Every tile added increases it by 4, etc. This tells me exactly where the leftover OAM that needs to be cleared is. So, when I'm done adding sprites, I call a &quot;finish&quot; routine that just puts Y=$FF in all the remaining tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 25, 2018 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Everything I've made since Zap Ruder has used the following finish routine to clear remaining OAM entries (source: <a href="https://github.com/pinobatch/nrom-template/blob/master/src/ppuclear.s" class="postlink">ppuclear.s</a>).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">OAM=$0200<br />;;<br />; Moves all sprites starting at address X (e.g, $04, $08, ..., $FC)<br />; below the visible area.<br />; X is 0 at the end.<br />.proc ppu_clear_oam<br /><br />&nbsp; ; First round the address down to a multiple of 4 so that it won't<br />&nbsp; ; freeze should the address get corrupted.<br />&nbsp; txa<br />&nbsp; and #%11111100<br />&nbsp; tax<br />&nbsp; lda #$FF&nbsp; ; Any Y value from $EF through $FF will work<br />loop:<br />&nbsp; sta OAM,x<br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; inx<br />&nbsp; bne loop<br />&nbsp; rts<br />.endproc<br /></div><br /><br />On the Game Boy I use something similar:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;<br />; Moves sprites in the display list from SOAM+a through<br />; SOAM+$9C offscreen by setting their Y coordinate to 0, which is<br />; completely above the screen top (16).<br />lcd_clear_oam::<br />&nbsp; ; Destination address in shadow OAM<br />&nbsp; ld h,high(SOAM)<br />&nbsp; and $FC<br />&nbsp; ld l,a<br /><br />&nbsp; ; iteration count<br />&nbsp; rrca<br />&nbsp; rrca<br />&nbsp; add 256 - 40<br />&nbsp; ld c,a<br /><br />&nbsp; xor a<br />.rowloop:<br />&nbsp; ld &#91;hl+&#93;,a<br />&nbsp; inc l<br />&nbsp; inc l<br />&nbsp; inc l<br />&nbsp; inc c<br />&nbsp; jr nz, .rowloop<br />&nbsp; ret<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bleubleu</b> [ Wed Apr 25, 2018 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Culling</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I have an index to the OAM buffer as it gets filled up. It starts at 0. Every tile added increases it by 4, etc. This tells me exactly where the leftover OAM that needs to be cleared is. So, when I'm done adding sprites, I call a &quot;finish&quot; routine that just puts Y=$FF in all the remaining tiles.</div><br /><br />Yeah that's what i just did. If i were really motivated I would keep track how how far I need to clear based on the previous frame, but that's not gonna happen tonight. You culling algorithm works great. It's all implemented and working. Real cool stuff.<br /><br />-Mat

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>