<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=8739" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-03-28T10:39:18-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=8739</id>
<entry>
<author><name><![CDATA[AsmDever]]></name></author>
<updated>2012-03-28T10:39:18-07:00</updated>
<published>2012-03-28T09:53:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91912#p91912</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91912#p91912"/>
<title type="html"><![CDATA[Need help with snippet code (from emulator source)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91912#p91912"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />But this is kind of dumb, because there's a simpler way to do it with bitfields:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">union<br />&#123;<br />  u8 val;<br />  struct<br />  &#123;<br />    u8 val0:1;<br />    u8 val1:1;<br />  &#125;;<br />&#125;;<br /></div><br /><br />But EVEN THAT is bad because the C/C++ standard says you can only use one field of a union at a time.  Trying to manipulate unions like this is not guaranteed to work and may fail horribly.<br /></div><br /><br />Yes, there's no guarantee that compiler will pack bitfield data in strictly specific bytes (either bits), because it depends on implementation.<br />Though, it seem that you can be more confident if you'll do this way<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">union<br />&#123;<br />  u8 val;<br />  struct<br />  &#123;<br />    u8 val0:1;<br />    u8 val1:1,<br />               :6;<br />  &#125;;<br />&#125;;<br /></div><br /><br />If particular compiler supports unnamed bitfields.<br /><br />I read somewhere that sometimes it is used to align data to word/byte border.<br /><br />_____________________________________________________________<br /><br />I'm also interested in another issue from emulator code. Problem is function pointers used as handlers that make memory accesses.<br /><br />I take example from amphetamines emulator. In CPU class you have 2<br />mysterious fields:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">readfuncptr readptr&#91;16 * 2&#93;;      //read handlers<br />writefuncptr writeptr&#91;16 * 2&#93;;      //write handlers</div><br /><br />Ok, at the beginning of header file with this class you have clearer definitions:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef u8 &#40;*readfuncptr&#41;&#40;u32&#41;;<br />typedef void &#40;*writefuncptr&#41;&#40;u32,u8&#41;;</div><br /><br />I see the fact that there are pointers to functions returning u8 and void (nothing) types and have two or one parameter. <br /><br />Acceses to these fields you have for example inside OpRead() method (CPU class)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">u8 Ccpu::OpRead&#40;u32 addr&#41;<br />&#123;<br />  lastread = addr;<br />  if&#40;addr &lt; 0x8000&#41;<br />  &#123;<br />   switch&#40;addr &amp; 0xe000&#41;<br />      &#123;<br />      case 0x0000:                     //ram read<br />         if&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93; == 0&#41;<br />            return&#40;romptr&#91;addr &gt;&gt; &#40;12 - 1&#41;&#93;&#91;addr &amp; ~0xf800&#93;&#41;;<br />         return&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93;&#40;addr&#41;&#41;;<br />      case 0x2000:                     //ppu read<br />         if&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93; == 0&#41;<br />            return&#40;ppu-&gt;Read&#40;addr &amp; 7&#41;&#41;;<br />         return&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93;&#40;addr&#41;&#41;;<br />      case 0x4000:                     //apu read<br />         if&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93; == 0&#41;<br />            return&#40;apu-&gt;Read&#40;addr&#41;&#41;;<br />         return&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93;&#40;addr&#41;&#41;;<br />      case 0x6000:                     //sram read<br />         if&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93; == 0&#41;<br />            &#123;<br />            if&#40;romptr&#91;addr &gt;&gt; &#40;12 - 1&#41;&#93;&#41;<br />               return&#40;romptr&#91;addr &gt;&gt; &#40;12 - 1&#41;&#93;&#91;addr &amp; ~0xf800&#93;&#41;;<br />            return&#40;0&#41;;<br />            &#125;<br />         return&#40;readptr&#91;addr &gt;&gt; &#40;12-1&#41;&#93;&#40;addr&#41;&#41;;<br />      &#125;<br />  &#125;<br />  return&#40;romptr&#91;addr &gt;&gt; &#40;12 - 1&#41;&#93;&#91;addr &amp; ~0xf800&#93;&#41;;<br />&#125;</div><br /><br /><br />romptr[]  table and masking its indexes was explained by blargg in his emulation notes. <br /><br />My question is what is idea of function pointers and associated with them  access handlers and how it can work (in general, not for this particular implementation).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4565">AsmDever</a> — Wed Mar 28, 2012 9:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-03-21T16:02:18-07:00</updated>
<published>2012-03-21T16:02:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91669#p91669</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91669#p91669"/>
<title type="html"><![CDATA[Need help with snippet code (from emulator source)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91669#p91669"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />Besides... this doesn't change the fact that doing what he's doing is going against what the standard defines.  A compiler could be 100% standards compliant and "break" that code.<br /></div><br />Yeah, and there are standard-conforming compilers targeting 16-bit platforms where INT_MAX is 32767, standard-conforming compilers where calloc(100, 700) is guaranteed to return (void*)0 (also largely 16-bit), and standard-conforming compilers for DSPs and the like where both char and int are 32 bits. That doesn't stop people from making assumptions and then verifying them at compile time with assertions similar to the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">extern const char CHAR_BIT_ACCEPTABLE&#91;CHAR_BIT == 8 ? 1 : -1&#93;;<br />extern const char INT_ACCEPTABLE&#91;sizeof&#40;int&#41; * CHAR_BIT &gt;= 32 ? 1 : -1&#93;;</div><br />So when a shortcut stops working in a particular environment, it fails early (at compile time) rather than late (at run time).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Mar 21, 2012 4:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-03-21T15:50:48-07:00</updated>
<published>2012-03-21T15:50:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91668#p91668</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91668#p91668"/>
<title type="html"><![CDATA[Need help with snippet code (from emulator source)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91668#p91668"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The C and C++ standards also don't say video output, audio output, or nonblocking input is possible.<br /></div><br /><br />Those are all API related and have absolutely nothing to do with C or C++ (as in, the languages themselves).<br /><br />I'm talking about actual language rules.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Every implementation of C must document the behavior of several "implementation defined" items, and most extend C and C++ to define at least some of the many behaviors that the standard calls "unspecified" or "undefined".<br /></div><br /><br />I highly doubt that all such cases are documented.  I also highly doubt that their behavior is consistent between versions - or even build settings.<br /><br />Besides... this doesn't change the fact that doing what he's doing is going against what the standard defines.  A compiler could be 100% standards compliant and "break" that code.<br /><br />Just because it's working in his version of his compiler doesn't mean it work break in another compiler or in a newer version of his compiler.<br /><br /><br /><br />The question is... is it worth the risk?  Do you write standard compliant code that you know will always work?  Or do you take a shortcut that happens to work now and cross your fingers on the assumption that it will always work in the future?<br /><br />I prefer to play it safe.  And I encourage other programmers to do the same.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Mar 21, 2012 3:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-03-21T14:55:14-07:00</updated>
<published>2012-03-21T14:55:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91666#p91666</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91666#p91666"/>
<title type="html"><![CDATA[Need help with snippet code (from emulator source)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91666#p91666"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />But EVEN THAT is bad because the C/C++ standard says you can only use one field of a union at a time.<br /></div><br />The C and C++ standards also don't say video output, audio output, or nonblocking input is possible. Every implementation of C must document the behavior of several "implementation defined" items, and most extend C and C++ to define at least some of the many behaviors that the standard calls "unspecified" or "undefined".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Trying to manipulate unions like this is not guaranteed to work and may fail horribly.<br /></div><br />Unless you're relying on the manual for the compiler for each of your supported platforms.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Mar 21, 2012 2:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-03-21T08:28:33-07:00</updated>
<published>2012-03-21T08:28:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91653#p91653</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91653#p91653"/>
<title type="html"><![CDATA[Need help with snippet code (from emulator source)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91653#p91653"><![CDATA[
I've seen this before.<br /><br />This is an overly complicated and standards-defiant way to set individual bits in a byte.<br /><br />The reason 'mask' is an enum instead of a variable is so that it isn't stored as part of the structure.  This way the structure (supposedly) contains only 'T', which means it can (supposedly) be put in a union with other structures.<br /><br />He probably is doing something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">union<br />&#123;<br />  u8 val;<br />  RegBit&lt;0&gt; val0;<br />  RegBit&lt;1&gt; val1;<br />  //...<br />&#125;;<br /><br />val = 0x02;<br />// now val0 == 0<br />// and val1 == 1<br />//  &#40;supposedly&#41;<br /></div><br /><br />But this is kind of dumb, because there's a simpler way to do it with bitfields:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">union<br />&#123;<br />  u8 val;<br />  struct<br />  &#123;<br />    u8 val0:1;<br />    u8 val1:1;<br />  &#125;;<br />&#125;;<br /></div><br /><br />But EVEN THAT is bad because the C/C++ standard says you can only use one field of a union at a time.  Trying to manipulate unions like this is not guaranteed to work and may fail horribly.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />*nbits - is amount 1's i mask<br />*mask - is bit mask that consists of 1's (ex. if nbits=2 then mask=00000011)<br /></div><br /><br />Correct.  You seem to understand this part.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />*RegBit&amp; operator=(T2 val) - overloading "=" operator<br />*operator unsigned() const - overloading casting operator<br />*RegBit&amp; operator++ () - simple preincrementing<br />*unsigned operator++ (int) - postincrementing (I'm not sure ?)<br /></div><br /><br />Yes, that last one is the postfix increment operator.  These operators allow you to use the value as if it were an actual 'T' type instead of a struct.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />data = (data &amp; ~(mask &lt;&lt; bitno)) | ((nbits &gt; 1 ? val &amp; mask : !!val) &lt;&lt; bitno);<br /></div><br /><br />(data &amp; ~(mask &lt;&lt; bitno))<br /><br />This masks out the bits we want to change, so that other bits in 'data' are not altered.<br /><br /><br />(nbits &gt; 1 ? val &amp; mask : !!val)<br /><br />This code takes the written value, and masks it down to 'nbits' number of bits.... to ensure that too many bits are not written to 'data'.<br /><br />The reason for the ?: crap is to allow any nonzero value be treated as '1' if nbits==1<br /><br />So if nbits is 1, the !! ensures that the result is either 0 (if val is 0) or 1 (if val is nonzero).  Say for instance, val=5.  !val would be 0, so !!val would be !0, which is 1<br /><br />If nbits is greater than 1, it simply masks the low bits and discards the rest.<br /><br /><br />&lt;&lt; bitno)<br /><br />This simply shifts the 'trimmed' val bits into the desired position.  They are then OR'd with the original 'data' bits.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Mar 21, 2012 8:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AsmDever]]></name></author>
<updated>2012-03-20T14:03:05-07:00</updated>
<published>2012-03-20T14:03:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91605#p91605</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91605#p91605"/>
<title type="html"><![CDATA[Need help with snippet code (from emulator source)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8739&amp;p=91605#p91605"><![CDATA[
My problem is code put below. This snippet comes from this tutorial:<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=y71lli8MS8s">http://www.youtube.com/watch?v=y71lli8MS8s</a><!-- m -->.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">template&lt;unsigned bitno, unsigned nbits=1, typename T=u8&gt;<br />struct RegBit<br />&#123;<br />    T data;<br />    enum &#123; mask = &#40;1u &lt;&lt; nbits&#41; - 1u &#125;;<br />    template&lt;typename T2&gt;<br />    RegBit&amp; operator=&#40;T2 val&#41;<br />    &#123;<br />        data = &#40;data &amp; ~&#40;mask &lt;&lt; bitno&#41;&#41; | &#40;&#40;nbits &gt; 1 ? val &amp; mask : !!val&#41; &lt;&lt; bitno&#41;;<br />        return *this;<br />    &#125;<br />    operator unsigned&#40;&#41; const &#123; return &#40;data &gt;&gt; bitno&#41; &amp; mask; &#125;<br />    RegBit&amp; operator++ &#40;&#41;     &#123; return *this = *this + 1; &#125;<br />    unsigned operator++ &#40;int&#41; &#123; unsigned r = *this; ++*this; return r; &#125;<br />&#125;;</div><br /><br /><br />I understand that's template of structure which generate code depending on values bitno and nbits. This structure representing register.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum &#123; mask = &#40;1u &lt;&lt; nbits&#41; - 1u &#125;;</div><br /><br />*<strong>nbits</strong> - is amount 1's i mask<br />*<strong>mask</strong> - is bit mask that consists of 1's (ex. if nbits=2 then mask=00000011)<br /><br />Next part of code is overloading operators for register (struct) datatype.<br />*<strong>RegBit&amp; operator=(T2 val)</strong> - overloading "=" operator<br />*<strong>operator unsigned() const</strong> - overloading casting operator<br />*<strong>RegBit&amp; operator++ ()</strong> - simple preincrementing<br />*<strong>unsigned operator++ (int)</strong> - postincrementing (I'm not sure ?)<br /><br />I'd be grateful if you can help me to figure this snippet out line to line and explain how it works.<br /><br />Most puzzling for me is idea of this scheme:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">data = &#40;data &amp; ~&#40;mask &lt;&lt; bitno&#41;&#41; | &#40;&#40;nbits &gt; 1 ? val &amp; mask : !!val&#41; &lt;&lt; bitno&#41;;</div><br /><br />I understand that construction [ ? : ] is "if" statement and returns two possible values:<br />*<strong>val &amp; mask</strong><br />*<strong>!!val </strong>(LSB of val)<br /><br /><br />Sorry for my English and thanks for any help.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4565">AsmDever</a> — Tue Mar 20, 2012 2:03 pm</p><hr />
]]></content>
</entry>
</feed>