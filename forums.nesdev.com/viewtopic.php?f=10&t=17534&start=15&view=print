<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Editing ROM Instructions/ Creating Game Genie Codes?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Editing ROM Instructions/ Creating Game Genie Codes?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17534">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17534</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Spindaboy</b> [ Sat Jul 14, 2018 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to find RAM addresses/ How to make Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">But, to answer your question...<br />(I used to make game genie codes as a hobby.)<br /><br />Basically, when the CPU reads a byte from a specific location in the ROM, instead of getting that byte, you can force it to see another byte.<br /><br />like if the game code says...<br />Load the #5 and store it at the &quot;lives left&quot; RAM address, you can tell it to load a 6, or 7, or whatever.<br /><br />So, step 1 is to figure out which RAM address you want to change, then to locate some code which modifies that RAM address. For me, I like to use a debugger, and set a breakpoint for writes to that address.<br /><br />Then use a game genie encoder (FCEUX has one), and write a new value to be loaded to that address.<br /><br />Other things you can do, are changing &quot;conditional branches&quot; to always skip some code, or always do some code.<br /><br />You could change code to $ea to erase it. ea means NOP, no operation (ie, do nothing).<br /><br />Lots of options.</div><br /><br />Yes! I think this is more what I'm looking for. If you don't mind, could you link a good tutorial for using a debugger in FCEUX/ how to use breakpoints?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sat Jul 14, 2018 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to find RAM addresses/ How to make Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I discussed it in this video<br /><br /><!-- m --><a class="postlink" href="https://youtu.be/d2XkJQFs0OQ">https://youtu.be/d2XkJQFs0OQ</a><!-- m --><br /><br />between 14 and 19 minutes. And I make a game genie code, but I don't explain how the code works, or how I know it will work. Sorry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jul 14, 2018 8:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to find RAM addresses/ How to make Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just to make it clear: nothing permanently overwrites the ROM, the ROM will only appear different to the console as long as the Game Genie sits between the console and the cartridge and the codes are active.<br /><br />Every time the CPU needs to read from the cartridge (which is hundreds of thousands of times per second), it tells the cartridge which address it needs to read, and the cartridge responds with the value. When the Game Genie is between the console and the cartridge, every time it received and address, it checks whether there are any cheat codes enabled for that address, and then decides whether to let the original value go through or respond with the value specified in the cheat code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Spindaboy</b> [ Sat Jul 14, 2018 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to find RAM addresses/ How to make Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So after doing a bit of messing around in the debugger and I've found some offsets and values that I'm looking for, but that's about the extent to which I can use the debugger right now. I still don't understand how to use breakpoints, the (assembly?) code in the following column, or pretty much anything else in the debug menu. But based on what people have been saying I can edit any ROM address which writes to that RAM offset and still get my desired result? I just really need a thorough explanation of how to find the offsets for the instructions I need to edit &gt;&lt;<br /><br />For example, in FF II Firion starts the game with 10 Strength. Thanks to <a href="https://gamefaqs.gamespot.com/nes/563414-final-fantasy-ii/faqs/26081" class="postlink">this guide</a> I know that the RAM address for this value is at 6120. So I open up the debugger, go to that address, and sure enough the value there is 0A in hex which is of course 10 in decimal. But now I'm at in-pass because I don't know which instructions right to that value. In this example if I knew where the code was which told the game to start Firion with 10 Strength then I could modify it to my desired value and translate it into a Game Genie code.<br /><br />Thank you for the help so far though! I'm sure this process will become a lot easier once I learn more about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Jul 30, 2018 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Editing ROM Instructions/ Creating Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Put a write breakpoint on the address you say is $6120. Start your new game and watch for $0A to be written to the address. The breakpoint will stop execution whenever $6120 is written which it might be written to more than just once. You'll want to see when it has the value you want to replace being written. Then you'll need to scroll up in the disassembly window to see where it go your $0A value from. It's either in an instruction or data fetched from ROM. Once you find where the value came from you can create a Game Genie code to replace that value with whatever you choose. <br /><br />I ran the Japanese rom and it reads and then writes here:<br /><br /> 00:9C71:BD 80 8F  LDA $8F80,X @ $8FA0 = #$0A<br />&gt;00:9C74:9D 00 61  STA $6100,X @ $6120 = #$00<br /><br />Which is part of a bigger sort of copying of data from ROM to PRG-RAM:<br /><br />00:9C6F:A2 3F     LDX #$3F<br /> 00:9C71:BD 80 8F  LDA $8F80,X @ $8FA0 = #$0A<br />&gt;00:9C74:9D 00 61  STA $6100,X @ $6120 = #$0A<br /> 00:9C77:BD 00 90  LDA $9000,X @ $9020 = #$05<br /> 00:9C7A:9D 40 61  STA $6140,X @ $6160 = #$05<br /> 00:9C7D:BD 80 90  LDA $9080,X @ $90A0 = #$0F<br /> 00:9C80:9D 80 61  STA $6180,X @ $61A0 = #$0F<br /> 00:9C83:BD 80 8F  LDA $8F80,X @ $8FA0 = #$0A<br /> 00:9C86:9D C0 61  STA $61C0,X @ $61E0 = #$0A<br /> 00:9C89:BD C0 8F  LDA $8FC0,X @ $8FE0 = #$00<br /> 00:9C8C:9D 00 62  STA $6200,X @ $6220 = #$00<br /> 00:9C8F:BD 40 90  LDA $9040,X @ $9060 = #$00<br /> 00:9C92:9D 40 62  STA $6240,X @ $6260 = #$00<br /> 00:9C95:BD C0 90  LDA $90C0,X @ $90E0 = #$00<br /> 00:9C98:9D 80 62  STA $6280,X @ $62A0 = #$00<br /> 00:9C9B:BD C0 8F  LDA $8FC0,X @ $8FE0 = #$00<br /> 00:9C9E:9D C0 62  STA $62C0,X @ $62E0 = #$00<br /> 00:9CA1:CA        DEX<br /> 00:9CA2:10 CD     BPL $9C71<br /><br />However modifying that $0A seems to get replaced by something that happens in the first battle. I think it comes from $6110. Which comes from $8F90 in ROM. So you need to use a Game Genie code like: AKOAENZA [ 0F90 40 0A ]<br /><br />I hope this helps. In theory you should be able to alter any starting game stat in ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Spindaboy</b> [ Tue Jul 31, 2018 12:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Editing ROM Instructions/ Creating Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">I ran the Japanese rom and it reads and then writes here:<br /><br /> 00:9C71:BD 80 8F  LDA $8F80,X @ $8FA0 = #$0A<br />&gt;00:9C74:9D 00 61  STA $6100,X @ $6120 = #$00<br /><br />Which is part of a bigger sort of copying of data from ROM to PRG-RAM:<br /><br />00:9C6F:A2 3F     LDX #$3F<br /> 00:9C71:BD 80 8F  LDA $8F80,X @ $8FA0 = #$0A<br />&gt;00:9C74:9D 00 61  STA $6100,X @ $6120 = #$0A<br /> 00:9C77:BD 00 90  LDA $9000,X @ $9020 = #$05<br /> 00:9C7A:9D 40 61  STA $6140,X @ $6160 = #$05<br /> 00:9C7D:BD 80 90  LDA $9080,X @ $90A0 = #$0F<br /> 00:9C80:9D 80 61  STA $6180,X @ $61A0 = #$0F<br /> 00:9C83:BD 80 8F  LDA $8F80,X @ $8FA0 = #$0A<br /> 00:9C86:9D C0 61  STA $61C0,X @ $61E0 = #$0A<br /> 00:9C89:BD C0 8F  LDA $8FC0,X @ $8FE0 = #$00<br /> 00:9C8C:9D 00 62  STA $6200,X @ $6220 = #$00<br /> 00:9C8F:BD 40 90  LDA $9040,X @ $9060 = #$00<br /> 00:9C92:9D 40 62  STA $6240,X @ $6260 = #$00<br /> 00:9C95:BD C0 90  LDA $90C0,X @ $90E0 = #$00<br /> 00:9C98:9D 80 62  STA $6280,X @ $62A0 = #$00<br /> 00:9C9B:BD C0 8F  LDA $8FC0,X @ $8FE0 = #$00<br /> 00:9C9E:9D C0 62  STA $62C0,X @ $62E0 = #$00<br /> 00:9CA1:CA        DEX<br /> 00:9CA2:10 CD     BPL $9C71<br /><br />However modifying that $0A seems to get replaced by something that happens in the first battle. I think it comes from $6110. Which comes from $8F90 in ROM. So you need to use a Game Genie code like: AKOAENZA [ 0F90 40 0A ]<br /><br />I hope this helps. In theory you should be able to alter any starting game stat in ROM.</div><br /><br />Thank you for taking the time to write all this out!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />I think I have a good grasp on how to use breakpoints now, but I don't understand any of the 6502 instructions. For example you said that the game reads and writes to &gt;00:9C74:9D 00 61  STA $6100,X @ $6120 = #$00 but I can only give an educated guess as to what all that means. When I tested this myself I also noticed the value is written to again when the first battle starts. You said it (the value?) comes from $6110 (the instruction?) which comes from $8F90, how do you know this?<br /><br />Also did you mean for the Game Genie code to write to address $0F90 or was that a typo? The list you provided definitely seems to load all Firion's starting stats and weapon levels, but I'm not sure how you knew those were all part of the same list. If I want to use a code to change each and every single stat at the start of the game will the GG even be able to deal with that many codes at once? Finally, for values that I don't know the offsets for (that have yet to be documented), how can I locate them on my own?<br /><br />I apologize in advance for asking so many questions ^^,

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Jul 31, 2018 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Editing ROM Instructions/ Creating Game Genie Codes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LDA is the instruction Load Accumulator. It is the primary register on the 6502 cpu family. STA is Store Accumulator. <br /><br />X and Y are Index registers which can be used to access a memory location plus the value of the index. This way you can access a string or array of values by adding the index to the start of the data. That's why it is doing LDA $8F80,X.<br /><br />The big block of addresses and instructions is just copied from FCEUX. So it tells you the ROM bank, Address, instruction bytes, the disassembled instruction, and then the effective address and what value is located there.<br /><br />So the reason I knew where that value came from is I assigned an execution breakpoint further up in code execution so I could see where the value that was being written came from. So When it trips the write breakpoint for $6120 during the first battle I just scrolled up to see where I should put my code execution breakpoint so I could watch what was happening. By doing so you can see that the value eventually written to $6120 came from $6110.<br /><br />If you look at the big block I posted you can clearly see where it's loading values from in ROM and where it is writing them into RAM. That's how you can use Game Genie to alter the values.<br /><br />The address having a 0 in the first section was due to the online Game Genie code encoder I used. I did not test the code but merely provided it for you to try. The address as you know is supposed to be 8F90, with 40 being a replacement value, and 0A being the &quot;compare&quot; value. The Game Genie code letters should be correct for this. Hopefully you can learn from this. Maybe try making some codes for other games to learn more. Basic assembly code knowledge will help a great deal. You don't have to know very much for basic cheats.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>