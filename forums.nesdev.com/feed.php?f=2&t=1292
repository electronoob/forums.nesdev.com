<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=1292" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-03-29T02:41:24-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=1292</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-03-29T02:41:24-07:00</updated>
<published>2006-03-29T02:41:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11297#p11297</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11297#p11297"/>
<title type="html"><![CDATA[NES Multithreading Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11297#p11297"><![CDATA[
The people over on the <a href="http://www.6502.org/forum/" class="postlink">6502.org forum</a> discuss operating system implementation on the 65xxx series. Some are pretty hard-core about it. I think <em>Solomon's Key</em> might use some kind of multithreading, or at least a prioritization scheme for giving time to enemy objects. On some rooms the enemies go slower when there are lots of them, but the game speed never changes.<br /><br />One thing to remember is that the main benefit of multithreading is the ability to write some kinds of code in a clearer way. It's all about which execution structure is most straightforward. The message-based scheme has objects responding to inputs via subroutine calls, while a multithreaded scheme gives each object its own thread from which it actively checks for things and responds to them.<br /><br />It generally doesn't work very well to give every on-screen object its own thread, but it can help to have two or three threads in a program, each performing specific tasks. An interesting example would be a thread doing some lengthy calculation over the span of multiple frames during whatever free time there was. Using a pre-emptive thread would allow it to be written without constant checks for "is it time to go to sleep yet".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Mar 29, 2006 2:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[oRBIT2002]]></name></author>
<updated>2006-03-29T01:59:08-07:00</updated>
<published>2006-03-29T01:59:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11296#p11296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11296#p11296"/>
<title type="html"><![CDATA[NES Multithreading Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11296#p11296"><![CDATA[
Multithreading on a NES? This is cool stuff. What's next? A multi-threaded operating system? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />(Hm well, that'd be cool for developing.. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=353">oRBIT2002</a> — Wed Mar 29, 2006 1:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-03-28T22:48:40-07:00</updated>
<published>2006-03-28T22:48:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11282#p11282</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11282#p11282"/>
<title type="html"><![CDATA[NES Multithreading Demo]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1292&amp;p=11282#p11282"><![CDATA[
I wrote a simple demo of how to support multiple threads on the NES, both cooperative and pre-emptive. The latter are implemented using the APU's 60 Hz interrupt, and another version using the DMC interrupt running at 4000 times per second for finer switching granularity. Source is generously commented and assembles with NESASM. It has been tested on my NES.<br /><br /><a href="http://www.slack.net/~ant/nes-hacks/nes_threads.zip" class="postlink">nes_threads.zip</a><br /><br />The cooperative version could be implemented on modern architectures without much difficulty. Using it an emulator could simplify things a lot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Mar 28, 2006 10:48 pm</p><hr />
]]></content>
</entry>
</feed>