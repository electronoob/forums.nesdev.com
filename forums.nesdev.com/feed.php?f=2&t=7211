<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7211" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-12-01T14:06:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7211</id>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-12-01T14:06:09-07:00</updated>
<published>2010-12-01T14:06:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70861#p70861</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70861#p70861"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70861#p70861"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That got me confused because the PPU address register is actually $2006<br /></div> Yes, you all right it's effectively $2006. It's just an error from my part.<br /><br />My code is confusing I know, that's why I reorganize it.<br />I remake the buffer function, for being able to draw an amount of columns. Like this I could pass for initial 32 columns for the first nametable.<br /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Another problem is that I don't see any writes to register $2000 (PPUCTRL)<br /></div><br /><br />Yes that's because, I do just initialize in the head of the program (before main loop). This refers to an separate file for subroutines:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ScreenDisplayOFF EQU #%11110111   ; With AND force ScreenDisplay    bit to 0 = DisplayOFF<br />DisableNMI    EQU #%01111111 ; With AND force Execute NMI    bit to 0 = DisableNMI<br /><br />Register2000     EQU  #%10001100<br />;         76543210<br />;         ||||||||<br />;         ||||||++----$10   Name Table Select               <br />;         ||||||      00=$2000  10=$2800               <br />;         ||||||      01=$2400  11=$2C00               <br />;         ||||||<br />;         |||||+-------$2 PPU Address Read/Write Increment         <br />;         |||||      = 1 Increment by 1               <br />;         |||||      = 0 Increment by 32               <br />;         |||||<br />;         ||||+--------$3 Sprite Pattern Table Address            <br />;         ||||      0=$0000  1=$1000               <br />;         ||||<br />;         |||+---------$4 Screen Pattern Table Address            <br />;         |||      0=$0000 1=$1000                  <br />;         |||<br />;         ||+----------$5 Sprite Size                  <br />;         ||      0=8x8  1=8x16                  <br />;         ||<br />;         |+-----------$6 Execute NMI on Sprite Hit            <br />;         |      0=Disable  1=Enable               <br />;         |<br />;         +------------$7 Execute NMI on VBlank               <br />;               0=Disable 1=Enable               <br /><br />Register2001     EQU  #%00001110<br />;         76543210<br />;         ||||||||<br />;         |||||||+-----$0   Color Display                  <br />;         |||||||      0=All colors                  <br />;         |||||||      1=Mono Color                  <br />;         |||||||<br />;         ||||||+------$1 Image Clip                  <br />;         ||||||      0 = Don't show the left 8 pixels of the screen      <br />;         ||||||      1 = Show the left 8 pixels            <br />;         ||||||<br />;         |||||+-------$2 Sprite Clip                  <br />;         |||||      0 = Don't Show sprites in the left 8-pixel column    <br />;         |||||      1 = Show Everywhere                <br />;         |||||<br />;         ||||+--------$3 Screen Display                  <br />;         ||||      0=OFF 1=ON                  <br />;         ||||<br />;         |||+---------$4 Sprite Display                   <br />;         |||      0=Hide 1=Show                  <br />;         |||<br />;         +++--------$765 Full Background Color               <br />;               000 = NONE   010 = Green            <br />;               001 = Red   100 = Blue            <br /><br />;   PPU_CTRL   = $2000<br />;   PPU_MASK   = $2001<br />;   PPU_STATUS   = $2002<br />;   PPU_SCROLL   = $2005<br />;   PPU_ADDR   = $2006<br />;   PPU_DATA   = $2007<br /><br /><br /><br />;---------------------------------------------------------------------------------------<br />;VBlankWait                              <br />;---------------------------------------------------------------------------------------<br />VBlankWait:            ; wait for Vblank, PPU is ready after this      <br />   bit PPUSTATUS      ; if %2002 = LastPaletteByte then N = 1         <br />   bpl VBlankWait      ; if  N = 0 goto VblankWait            <br />   rts         ; return form subroutine            <br /><br />;---------------------------------------------------------------------------------------<br />;SetNameTableAt2000                           <br />;---------------------------------------------------------------------------------------<br /><br />SetNameTable$2000:<br />   <br />   ; write Address NameTable1 &gt; $2000<br />   lda #$20<br />   sta PPUADDR<br />   lda #$00<br />   sta PPUADDR<br />   <br />   ; fix first line place<br />   lda #$00<br />   sta PPUADDR<br />   rts<br /><br />;---------------------------------------------------------------------------------------<br />;Screen Turn On                              <br />;---------------------------------------------------------------------------------------<br />DisplayScreen:<br />   jsr VBlankWait      ; Wait VBlank Routine   <br />   lda Register2000   ; execute NMI on Vblank &amp; Sprite Pattern Table Address = $1000      <br />   sta PPUCTRL      ; set Control Register #1                  <br />        lda Register2001   ; screen display &amp; Show sprites everywhere &amp; Show the left 8 pixels   <br />   sta PPUMASK      ; set Control Register #2                  <br />   rts<br /><br />;---------------------------------------------------------------------------------------<br />;DisableScreen                              <br />;---------------------------------------------------------------------------------------<br />DisableScreen:         ;DisableDisplay needed before writing NameTable<br /><br />   lda DisableNMI      ; Bit Force to DisableNMI<br />   and Register2000<br />   sta PPUCTRL<br /><br />   lda ScreenDisplayOFF   ; Bit Force to ScreenDisplayOFF   <br />   and Register2001<br />   sta PPUMASK<br />   rts<br /><br />;---------------------------------------------------------------------------------------<br />;WaitNextVblankTime                           <br />;---------------------------------------------------------------------------------------<br /><br />WaitNextVblankTime:<br /><br />   lda VBlank_nCycles<br />   -<br />   cmp VBlank_nCycles<br />   beq -<br />      <br />   rts<br /><br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />since your level is longer than 256 pixels, that variable must be 16-bits large. I assume you know how to handle 16-bit values.<br /></div><br />Yes I will use it !<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Anyway, the tiles are 8 pixels wide, so you must detect when the camera crosses an 8 pixel barrier in order to know when to draw a new column.<br /></div><br />Hum I think of that a little. Yes, good tips to use the 3th bit detect to see when the number becomes 8. I will use same thing for 31 to swap nametables, yes it's ok, I understand.<br /><br />Thanks for the code<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">so if you are having a hard time with this maybe you should consider not using scrolling for your first project.</div><br /><br />No, even if that take some times to do, I want do that.<br />And I will thanks you again to help, for sure I will share my entire scrolling system with other when it will work!<br /><br />It's not my real first project, I have made some stuff before.<br />I have made an drawing system which build large objects: sorts of Meta-tiles where I can chose predefined parts sizes for start, "repeated" middle, end parts. With a "level" table of different objects positions, and sizes, it will calculate all tiles and render. It's difficult to explain, but this is not optimized for scrolling and work for only one nametable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Wed Dec 01, 2010 2:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-12-01T12:26:49-07:00</updated>
<published>2010-12-01T12:26:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70848#p70848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70848#p70848"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70848#p70848"><![CDATA[
There are a few inconsistencies in your code that are bothering be a bit. For example, in the part where yoy set the PPU address before writing tiles, there's a comment that says "PPUADDR = $2000 ". That got me confused because the PPU address register is actually $2006, and in the rest of the code you are not using registers' names you are using their addresses ($2007, $2005, etc), so you should either use only their addresses, or give them all names, making sure that they point to the correct addresses.<br /><br />Another problem is that I don't see any writes to register $2000 (PPUCTRL). There should be a write to it next to the $2005 writes, because the lower 2 bits of PPUCTRL have an important part in the scrolling too. Since you are using vertical mirroring, and your name tables are arranged side by side, there will be times when you will be showing the one on the left and there will be times when you'll be showing the one on the right, and you will need to use PPUCTRL to indicate that.<br /><br />About calculating the target address for your columns: you will have to use the "Scroll_x" variable for that. One important thing to change is that since your level is longer than 256 pixels, that variable must be 16-bits large. I assume you know how to handle 16-bit values.<br /><br />Anyway, the tiles are 8 pixels wide, so you must detect when the camera crosses an 8 pixel barrier in order to know when to draw a new column. Look at the binary numbers and you will see that 0 is %00000000, 7 is %00000111, and 8 is %00001000. If you pay attention, you'll see that numbers 1 through 7 have the 4th bit as 0, and only when the number becomes 8 that bit changes to 1. Because of that, that is the bit that will tells us that the scroll crosses an 8 pixel barrier. The code could look something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda Scroll_x+0 ;load the lower byte of Scroll_x<br />   pha ;save it to the stack<br /><br />   ;UPDATE Scroll_x HERE<br /><br />   pla ;get the old Scroll_x<br />   eor Scroll_x ;XOR it with the new Scroll_x<br />   and #%00001000<br />   beq +Skip<br /><br />   ;DECODE A NEW COLUMN HERE<br /><br />+Skip:</div><br /><br />Once you have decided that a new column must be rendered, it's time to find out where in the level map this column is and where in the name tables it should be rendered to. Scroll_x will also help you with this.<br /><br />Scroll_x tells you which part of the name tables should be displayed at the leftmost side of the screen, so if you you scrolled left, that's the column that has to be updated. If you scrolled right (to detect whether you scrolled right or left you have to compare the old Scroll_x to the new one and see which one is larger), you have to add 256 to Scroll_x to find which column needs updating, because the right side of the screen is 256 pixels to the right of the left side.<br /><br />I don't know how your level map is stored, so it's up to you to convert Scroll_x to a format that allows you to read from it, but I can tell you about calculating the destination address in the name tables. Once you have defined the X coordinate of the column (it's either Scroll_x or Scroll_x + 256), you have to get rid of the lower 3 bits to convert it from pixel units to tile units. Then, the next 5 bits (a number between 0 and 31) will indicate what name table column to use. The next bit will tell you if you should write the column to the first name table ($2000) or to the second ($2400).<br /><br />When setting the scroll, you have to write the lower byte of Scroll_x to $2005, and the first bit of the high byte to bit 0 of PPUCTRL, in order to select the name table where scrolling should start.<br /><br />I know that's a lot of information, and I don't think I can make it any simpler. This stuff isn't so trivial, so if you are having a hard time with this maybe you should consider not using scrolling for your first project.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 01, 2010 12:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-12-01T07:27:24-07:00</updated>
<published>2010-12-01T07:27:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70831#p70831</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70831#p70831"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70831#p70831"><![CDATA[
I continue, I am just in reflexion about reading my level table, and build my buffer. ( I think it's the hard part)<br /><br /><br />Just for show my RAM part :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;---------------------------------------------------------------------------------------<br />; RAM                                  <br />;---------------------------------------------------------------------------------------<br /><br />;   ; BUFFER                           <br />   Buffer_Data   EQU $00         ; 60 bytes = 2 Columns of 15*2 tiles<br />   Buffer_Shift   EQU $3F         ; shift write data<br /><br />;   ; JOYPAD                           <br />   Joypad_State   EQU $50      ; Hold states of each buttons<br /><br />;   ; SCROLL                           <br />   Scroll_x    EQU $51<br />   Scroll_y    EQU $52<br />   acc       EQU $53<br /><br />;   ; NAMETABLE                           <br />   TableData_Shift   EQU $60         ; Shift bytes in NameTableScreen<br />   <br />;   ; PPU DRAW                           <br />   PPU_ShiftColumn      EQU $61         ; PPU Column Position from 0 to 32<br />   PPU_Address      EQU $62   ; 2 BYTES   ; PPU Column Position Address<br />   PPU_DoDrawBuffer   EQU $64         ; To know when Buffer need to be draw<br /><br />   VBlank_nCycles      EQU $6F         ; Count n Cycles for one VblankTime<br /></div><br /><br />My main, and my NIM:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;---------------------------------------------------------------------------------------<br />;MAIN LOOP                              <br />;---------------------------------------------------------------------------------------<br /><br /><br /><br />MainLoop:         ; Loop Forever         <br /><br />   include &quot;Joypad.asm&quot;<br />   <br /><br />   WaitNextVblankTime:<br />      lda VBlank_nCycles<br />      -<br />      cmp VBlank_nCycles<br />      beq -<br /><br />   jmp MainLoop      ; jump to Main_Loop<br /><br />;---------------------------------------------------------------------------------------<br />; NMI                                 <br />;---------------------------------------------------------------------------------------<br /><br /><br />NMI:   ; Signal generated by PPU for a VBlank Time<br />   <br />   SaveRegisters:<br />      pha   ; Push A on Stack<br />      txa   <br />      pha   ; Push X on Stack<br />      tya<br />      pha   ; Push Y on Stack<br />      <br />   DrawPPURow:<br />      lda PPU_DoDrawBuffer   ; Need to Draw a Row ?<br />      beq Return_DrawPPURow   ; PPU_DoDrawBuffer=0 goto Return_DrawPPURow<br />      <br />      lda PPU_Address+1<br />      sta PPUADDR      ; PPUADDR = $2000<br />      lda PPU_Address<br />      sta PPUADDR<br />      <br />      sta $FF         ; DEBUG = just for read write at $FF to know when execute this<br />   <br />      ldx #&#40;128-30&#41; <br />      - <br />      lda Buffer_Data-&#40;128-30&#41;, x <br />      sta $2007 <br />      inx <br />      bpl -<br />      <br />      dec PPU_DoDrawBuffer   ; Drawing is made<br /><br />      Return_DrawPPURow:<br />   <br />   <br />   Scrooling:      <br />      ldx Scroll_x<br />      stx $2005<br />      ldx #00<br />      stx $2005<br />   <br />   CountVBlankCycles:<br />      inc VBlank_nCycles   ; from 0 to 255 one VblankTime ?<br /><br />   RetrieveRegisters:<br />      pla   <br />      tay   ; Pull Stack on Y<br />      pla   <br />      tax   ; Pull Stack on X<br />      pla   ; Pull Stack on A<br />      <br />      <br />   rti      ; Return from Interrupt<br /><br /></div><br /><br />And just before Main Loop, my some tests wich draw only 2 colums (I use MetaTile 2x2 tiles) :<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;---------------------------------------------------------------------------------------<br />; TEST RENDER BUFFER                              <br />;---------------------------------------------------------------------------------------<br /><br />   jsr Render         ;draw one column x1 tile<br />   <br />      WaitNextVblankTime2:<br />      lda VBlank_nCycles<br />      -<br />      cmp VBlank_nCycles<br />      beq -<br />   <br />   jsr IncrementColumnAddress<br />   jsr WriteBuffer<br /><br />;---------------------------------------------------------------------------------------<br />; RENDER                              <br />;---------------------------------------------------------------------------------------<br />   Render:<br /><br />   jsr Initializes      <br />   jsr ReadObject<br />   jsr ClearBuffer<br />   jsr WriteBuffer<br /><br />   Return_Render:<br />      rts<br /></div><br /><br />Maybe you need to see my Level Data, and my Metatiles (I name this tileSet)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; OBJECT DEFINITION<br />;Byte n°1    $RL = nRow, nLine      POSITION   <br />;Byte n°2    $TS = nTileSet of Bank      CHR      <br />;nColumn  Position : #0 -&gt; 16 &#40;32 tiles&#41;<br />;nLine      Position : #0 -&gt; 15 &#40;30 tiles&#41;, #16 = $F = New column increment<br /><br />TableData:.byte $02,$00<br /><br /><br />   ;BANK of TILESET &#40;64 max X 4 bytes = 256 = $FF&#41;<br />   BankOfTileSet:<br />   Plateform_TopRight   : .byte $00,$10,$01,$11      ; $00<br />   Plateform_TopMiddle   : .byte $02,$12,$01,$11      ; $01<br />   Plateform_TopLeft   : .byte $02,$12,$03,$13      ; $02<br />   <br />   Plateform_BottomRight   : .byte $10,$10,$11,$11      ; $03<br />   Plateform_BottomMiddle   : .byte $12,$12,$11,$11      ; $04<br />   Plateform_BottomLeft   : .byte $13,$13,$12,$12      ; $05</div><br /><br />It's not really clear like this, if you want see more, I can do an entire ZIP.<br /><br />I will post screenshot of my 2 columns in fews minutes:<br /><br /><a href="http://img812.imageshack.us/img812/5673/view2columns.png" class="postlink"><img src="http://img812.imageshack.us/img812/5673/view2columns.th.png" alt="Image" /></a><br /><br />You can see the RAM getting in FCEUX.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Wed Dec 01, 2010 7:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-11-30T17:51:22-07:00</updated>
<published>2010-11-30T17:51:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70790#p70790</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70790#p70790"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70790#p70790"><![CDATA[
For the moment, I use just MMC1 mapper with vertical mirroring.<br />I will do some basics test before doing all the great stuff.<br /><br />Tomorrow, i show you my code regarding $2000 and $2005. (it is very late at night in France !)<br /><br />Thanks for your help again <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Tue Nov 30, 2010 5:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-11-30T16:45:27-07:00</updated>
<published>2010-11-30T16:45:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70780#p70780</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70780#p70780"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70780#p70780"><![CDATA[
<div class="quotetitle">Raccoon wrote:</div><div class="quotecontent"><br />I just need to calculate PPU_Address_low and PPU_Address_high (you answer me thanks)<br /></div><br />Yes, that's what you have to do.<br /><br />I can only help you if you tell me what kind of mirroring you are using, vertical (the two name tables are side by side) or horizontal (one name table on top of the other). Vertical mirroring is better when scrolling horizontally, since there are no visible glitches. If you use horizontal mirroring, there will be color glitches at the sides of the screen (like in Kirby's adventure or SMB3, for example).<br /><br />I also need to know how you are updating the scroll during VBlank (I need to see the code that writes to $2000 and $2005).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Nov 30, 2010 4:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-11-30T16:18:36-07:00</updated>
<published>2010-11-30T16:18:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70776#p70776</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70776#p70776"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70776#p70776"><![CDATA[
Sure it will help me.<br />It's true reverse my buffer need just more time like this (it isn't in my NMI loop):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      ; Buffer_Shift = Line position<br /><br />      ; Fix for backwards write<br />      lda #30      ; load one column<br />      sec               ; set the carry<br />      sbc Buffer_Shift      ; subtract Buffer_Shift<br />      sta Buffer_Shift   ; save the low byte<br /></div><br /><br /><br />I try it to offset base address, but don't know how do this.<br />Thanks for the code, and good explains.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This is almost correct... the only problem is that it will not copy the byte at position 0<br /></div><br /><br />Yes I realize it, i have try this, there just one minute last.<br />I read my txt doc 6502guid about BPL.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If by "indirect addressing" you mean something like "STA $2007, X"<br /></div><br /><br />No I mean exactly "Indirect Indexed Addressing", like this :<br />lda (PPU_Address),y<br />But it doesn't work or it will be complicated for nothing.<br />I just need to calculate PPU_Address_low and PPU_Address_high (you answer me thanks)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Tue Nov 30, 2010 4:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-11-30T15:41:20-07:00</updated>
<published>2010-11-30T15:41:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70771#p70771</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70771#p70771"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70771#p70771"><![CDATA[
<div class="quotetitle">mic_ wrote:</div><div class="quotecontent"><br />Either that, or you can offset your counter so that it ends at zero when counting upward (i.e. start at 256-30), and offset your base address accordingly.<br /></div><br />Yes, you can do that too, but there is a cycle penalty if you cross a page while reading the data. Instead of the Z flag you can use the N flag to detect the end of the buffer, so you start at 128-30 instead, reducing the chances of crossing a page. The code would look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ldx #&#40;128-30&#41;<br />-<br />   lda Buffer-&#40;128-30&#41;, x<br />   sta $2007<br />   inx<br />   bpl -</div><br />As long as the buffer is smaller than 129 bytes and starts after 128-30 in a memory page, that will not cause a cycle penalty. This way the buffer doesn't need to be reversed.<br /><br /><div class="quotetitle">Raccoon wrote:</div><div class="quotecontent"><br />I was thinking that I can do one column drawing during VblankTime. This must happen when scroll !<br /></div><br />Yes, all updates must be done during VBlank, and by using this type of basic loop you can transfer about 150 bytes to the PPU per VBlank. Since a column is only 30 bytes, there's still a lot of time left. Remember that you also have to use that time to update the sprites (a sprite DMA takes 513 cycles plus the time needed to trigger it) and the attribute tables (so that your tiles use the correct palettes).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I want to implement probably an indirect addressing.<br /></div><br />If by "indirect addressing" you mean something like "STA $2007, X", that's not going work. What you have to do is calculate where in the PPU your new column will start, and when the time comes write that to $2006 before copying the column. Like I said in my last message, the first column starts at $2000, the second at $2001, the third at $2002, and so on.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #29<br />-<br />lda Buffer_Data,x          ; first time read the 29° byte of the buffer<br />sta $2007<br />dex<br />bne -<br /></div><br /></div><br />This is almost correct... the only problem is that it will not copy the byte at position 0, because of the BNE you used at the end. Change that to BPL and it will work, because the loop will only finish when the index reaches 255, after you've copied the byte at position 0.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It's because , i was thinking a vector is for example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Block : .byte $AB, $CH</div><br /><br />$AB: the n line position of my block ( 1 -&gt; 15 )<br />$CH: the CHR byte to write<br /></div><br />Sorry, I still can't see the purpose of this. What is this position that ranges between 1 and 15?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Yest I know, but I was thinking without an buffer.<br /></div><br />Without a buffer? Do you mean copying data directly from the level map to the screen? That's not a good idea, because decoding data from the map usually takes time, and you can't spend your precious VBlank time doing that kind of stuff. The rule is that you do all the reading/decoding/converting outside of VBlank and store all the results into buffers, so that when the time comes you can just copy that data to the PPU as fast as you can.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Nov 30, 2010 3:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-11-30T14:13:08-07:00</updated>
<published>2010-11-30T14:13:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70768#p70768</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70768#p70768"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70768#p70768"><![CDATA[
For sure, it's a good idea. I will simply use a backwards buffer.<br /><br />Thanks for your helps<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Tue Nov 30, 2010 2:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2010-11-30T12:28:09-07:00</updated>
<published>2010-11-30T12:28:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70761#p70761</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70761#p70761"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70761#p70761"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Maybe you thinking I will reverse my buffer during it's build function.<br /></div><br />Either that, or you can offset your counter so that it ends at zero when counting upward (i.e. start at 256-30), and offset your base address accordingly. I don't remember whether the 6502 has a penalty for crossing a page boundary with an absolute-indexed address, so this may or may not be a good idea.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Tue Nov 30, 2010 12:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-11-30T13:44:21-07:00</updated>
<published>2010-11-30T12:15:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70760#p70760</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70760#p70760"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70760#p70760"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Since you don't have a lot of data to update<br /></div><br /><br />That's right for the moment. I was thinking that I can do one column drawing during VblankTime. This must happen when scroll !<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Don't you mean "column" instead of "row"?<br /></div><br /><br />Ho sorry for my understanding, it's a bad french translation from my part. It's ok, I mean "column". Thanks to point this <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The problem with your code is that it always writes to the address $2000<br /></div><br /><br />Yes, I know, it will be just for test redraw at the same column. I want to implement probably an indirect addressing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />A simple optimization that saves a good amount of time is counting down instead of up.<br /></div><br /><br />I know but this reverse my buffer no ?:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #29<br />-<br />lda Buffer_Data,x          ; first time read the 29° byte of the buffer<br />sta $2007<br />dex<br />bne -<br /></div><br /><br />Maybe you thinking I will reverse my buffer during it's build function.<br /><br />Ho sorry I don't see you say this :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You just have to fill your buffer backwards as well.<br /></div><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I have no idea why you are talking about vectors<br /></div><br /><br />It's because , i was thinking a vector is for example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Block : .byte $AB, $CH</div><br /><br />$AB: the n line position of my block ( 1 -&gt; 15 )<br />$CH: the CHR byte to write<br /><br />It's not clear (and not optimized like this), but you can imagine, it's like a command line I will send in my NMI PPU draw function. <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You can just overwrite name table data, there is no need to clear anything first.<br /></div><br /><br />Yest I know, but I was thinking without an buffer. But you said me : "just get it working however you can."<br />I realize that Dwedit use buffer in his thread : <a href="http://nesdev.com/bbs/viewtopic.php?t=6752" class="postlink">Working on a new game for that compo</a><br /><br /><br />Thanks for your time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Tue Nov 30, 2010 12:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-11-30T11:14:10-07:00</updated>
<published>2010-11-30T11:14:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70758#p70758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70758#p70758"/>
<title type="html"><![CDATA[Re: Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70758#p70758"><![CDATA[
<div class="quotetitle">Raccoon wrote:</div><div class="quotecontent"><br />I know how to do, but I don't know what is the most optimized method.<br /></div><br />Since you don't have a lot of data to update, don't worry about the "optimal" way yet, just get it working however you can.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />For the moment, I use a Buffer of 30 bytes in RAM which represents 30 tiles of a PAL row.<br /></div><br />Don't you mean "column" instead of "row"? A row is horizontal, and there are 32 tiles in a name table row, columns are vertical, and there are 30 tiles in each one. The numbers are the same for PAL and NTSC by the way, there is no difference regarding screen sizes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This is part of my code :<br /></div><br />The problem with your code is that it always writes to the address $2000, which is the first column/row of the screen. As the screen scrolls you have to draw your column/row to other addresses, the one that is near the edge of the screen.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      lda Buffer_Data,x<br />      sta $2007<br />      inx<br />      cpx #30<br />      bne -</div><br /></div><br />A simple optimization that saves a good amount of time is counting down instead of up. You'd load X with #$29 instead of #$00 and DEX instead of INX. This way, after you have copied the byte at index 0, the 0 will decrement to $FF (255) and set the N flag (because 255 is the same as -1), so you can use BPL instead of BNE and get rid of the CPX, which is why you save time. You just have to fill your buffer backwards as well.<br /><br />In 6502 assembly, whenever possible we count down instead of up, because you can detect when indexes reach 0 or -1 without having to compare anything.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I expected it use vectors for drawing ? (I'm not sure of this, because I think I saw CHR data in RAM)<br /></div><br />I have no idea why you are talking about vectors and CHR-RAM, and I don't see how that has anything to do with scrolling.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />But how clear a row? Or how clear parts where there is nothing ?<br /></div><br />You can just overwrite name table data, there is no need to clear anything first.<br /><br />What you have to do is calculate the correct PPU address for the row/column you want to update, based on the scrolling position. If you are drawing columns, the first one begins at $2000, the second at $2001, the third at $2002, and so on, until $201F, the 32nd column. For rows, the first one begins at $2000, the second at $2020, the third at $2040, and so on, until $23A0, the 30th row.<br /><br />Also note that depending on the mirroring, you will also have to draw columns/rows to the other name table, the one at $2400.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Nov 30, 2010 11:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Raccoon]]></name></author>
<updated>2010-11-30T10:18:32-07:00</updated>
<published>2010-11-30T10:18:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70755#p70755</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70755#p70755"/>
<title type="html"><![CDATA[Drawing row regarding future scrolling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7211&amp;p=70755#p70755"><![CDATA[
Hello everyone. I'm just a new member, and I read lost of posts.<br /><br />I need your help about method, I know how to do, but I don't know what is the most optimized method.<br /><br />It's just about drawing one row per NMI event, that's for begin able to do scrolling.<br />For the moment, I use a Buffer of 30 bytes in RAM which represents 30 tiles of a PAL row.<br />This is part of my code : <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   DrawPPURow:<br />      lda PPU_DoDrawBuffer   ; Need to Draw a Row ?<br />      beq Return_DrawPPURow   ; If PPU_DoDrawBuffer=0 dont draw a row and goto Return_DrawPPURow<br />      <br />      lda #$20<br />      sta PPUADDR<br />      lda #$00<br />      sta PPUADDR<br />      <br />      sta $FF         ; DEBUG = just for read write at $FF to know when execute this<br />      <br />      ldx #00<br />      -<br />      lda Buffer_Data,x<br />      sta $2007<br />      inx<br />      cpx #30<br />      bne -<br />      <br />      dec PPU_DoDrawBuffer   ; Drawing is made<br /><br />      Return_DrawPPURow:</div><br /><br /><br /> I have seen in the SBM sources at ROOMHACKING, and I expected it use vectors for drawing ? (I'm not sure of this, because I think I saw CHR data in RAM)<br />Also I see our great post : <a href="http://nesdev.com/bbs/viewtopic.php?t=7049&amp;highlight=buffer+nametable+ppu" class="postlink">Scrollin'</a><br /><br />My problem is regarding using vector or PPUADDR addressing like you do. (I think it will be useless, because it keep free lots of RAM spaces)<br /><br />But how clear a row? Or how clear parts where there is nothing ?<br />With buffer it is easy to do it (just clear the buffer).<br />But with addressing, for an already written row, how you do it ?<br /><br />Maybe I can use 1 NMI event for clear the entire row, and 1 NMI event to draw my CHRs datas (using addressing).<br /><br />Thanks for you Helps, I will continue my search.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4644">Raccoon</a> — Tue Nov 30, 2010 10:18 am</p><hr />
]]></content>
</entry>
</feed>