<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Another person needing music/sound engine help!</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Another person needing music/sound engine help!</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=5024">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=5024</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Mon Apr 06, 2009 7:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Another person needing music/sound engine help!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Despite my love for using NerdTracker2, I've decided that it is too hard for me to use in a game. The only way I can figure out how to get sound effects to play while using the NT2 engine is to completely write out all the accesses to the noise channel. That really limits the sounds I can do, and the music as well :/
<br />
<br />So I have started on a music engine for myself, but I am still in the learning stages of using the sound registers. Here is a pastey of what I have at this point (I am planning to rewrite the whole thing, because I realize this is horrible):
<br />
<br /><!-- m --><a class="postlink" href="http://pastey.net/111765">http://pastey.net/111765</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://robertlbryant.com/temp/music_engine_test.nes">http://robertlbryant.com/temp/music_engine_test.nes</a><!-- m -->
<br />
<br />What I am asking for is advice on how to do this stuff. I have a few ideas from a couple of IRC folk, but I figured it'd be nice to get everyone's input from here, as well. For instance, data access and storage, initialization stuff... I'm really lost when it comes to sound on the NES, but I think I'm to a decent start here.
<br />
<br />Thanks guys!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Apr 06, 2009 11:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Creating a music engine can be a challenging task. Basically the main goal in creating a good music engine is to get as much space, time, and flexibility out of it as possible.
<br />
<br />The most important thing in making a music engine for the NES is cutting down on space consumption. It is easy to make a fast and flexible engine, like the one you demonstrated. If everything is just a bunch of raw values to store into all of the sound registers, you have probably as much flexibility as you can get. However, in the long run that will take A LOT of space, if you do everything you want to do. So you'll have to come up with a different plan.
<br />
<br />For a music engine, I currently have the music data separate for each channel, so each channel gets their own "sheet" of music. In this "sheet", I tell the music engine all it needs to know to make music with a particular channel. This sheet usually contains a "command byte" (or command bytes) followed by data bytes. The command byte tells the music engine everything like "change note" or "change length of note", and the data bytes that follow say what note to play, or how long I should play it. The command byte uses each bit as a command:
<br />
<br />;Example square wave sheet command byte
<br />
<br />7 - Loop Song
<br />6 - Change note
<br />5 - Change length of note
<br />4 - Change instrument
<br />3 - blah blah
<br />2 - etc.
<br />
<br />For example, I would have a line that looks like this:
<br />
<br />.db $60, $07, $40
<br />
<br />The first byte is the command byte. Since bit 5 and 6 are set, I'm saying I want to change the note and the length of the note. The bytes that follow are data bytes. I'm saying I want to change to note "$07" and play it for "$40". When I say I want to play note $07, I'm actually giving the engine an index to a look up table that contains 11-bit entries, which are the pitch values to store into $4002/$4003. So the 8th entry ($07 represents the 8th entry) would give the engine the pitch to play an E on the lowest octave. This saves me space to define notes with 1 byte instead of 2 by creating a notes table. Then when I say "play for $40", I'm saying play for 64 tempo ticks. I think from looking at your example code, you know probably what I mean by that. If not, a tempo tick is the smallest measurement of time in music, like a pixel is to the screen. There is no such thing as "half of a tick". It's either a tick, or it's not. In my code, I specify the tempo as an 8 bit value, and I add it to another 8-bit value every frame. If that value wraps around, there's a tick. So if I specify the tempo as $F0, here's what will happen:
<br />
<br />Tempo = $F0
<br />Counter = $00
<br />
<br />Frame 0: $00 (Counter) + $F0 (Tempo) = $F0 ;no tick
<br />Frame 1: $F0 (Counter) + $F0 (Tempo) = $E0 ;tick
<br />Frame 2: $E0 + $F0 = $D0 ;tick
<br />Frame 3: $D0 + $F0 = $C0 ;tick
<br />Frame 4: $C0 + $F0 = $B0 ;tick
<br />...
<br />Frame 14: $20 + $F0 = $10 ;tick
<br />Frame 15: $10 + $F0 = $00 ;tick
<br />Frame 16: $00 + $F0 = $F0 ;no tick
<br />
<br />With the tempo at $F0, there is nearly a tick every frame. All music logic happens ONLY if a tick happens. Everything is counted in ticks. Like I said, it's the pixel of time. If you want a tick to happen every frame, set the tempo value to $FF. But when adding it to the counter over and over, set the carry before adding instead of clearing. This will guarantee a tick every frame. But yeah, that's how that works.
<br />
<br />That's usually the system for making music data. You have a collection of command bytes followed by data. It's up to you how you want to set the command byte up though. You could do it like me, and have each bit represent a different command. But I've also seen people squeeze a note and note length into a single byte, sacrificing certain values as command bytes. For example, values $00-$DF represent different note/length combinations, and $E0-$FF represent individual commands. This might be a better approach to doing things for real space conservation.
<br />
<br />You might also be interested in using the concept of instruments. Of course, you're only given the square waves, triangle waves, noise and limited sampling, but you can simulate different instruments with these channels. For example, you will manipulate the volume differently for an electric guitar-like sound rather than a piano-like sound. I use instruments in my engine. All you can do for defining these "instruments" is really define what kind of pitch distortion or volume envelopes they have (and duty cycle), and apply these to every note that's played. I'm actually creating an engine with Bregalad that uses more than one channel for some instruments. This engine will be really awesome, hopefully, but it's getting pretty complicated by that point.
<br />
<br />Also it's pretty important that you do everything yourself. Okay, by this I mean don't let the hardware do things for you, such as volume decay. Don't use hardware volume decay! In my engine, I set up the registers for the square waves to play one big endless note at the same volume until the end of time. But of course, I want some volume decay, so I <em>manually</em> update the volume registers to do that. Also, I would stay away from sweeps and manually adjust the pitch each frame to get the same effect. Get as much control as you can get; don't rely on the hardware to do very much for you.
<br />
<br />I can't think of anything else to say right now. I hope this helps some, and ask if anything is too confusing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Apr 06, 2009 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I love writing music engines so if you have a specific question go ahead and ask. You don't seem to ask specific questions here so it's hard to answer.
<br />
<br />If the question is "how do I make a sound engine" it's long to answer so I don't want if that wasn't the problem...
<br />
<br />Celius and I are currently working on a portable standard and guideline for sound engines. You have to obey some cross-platforms standards, but functionnal algoritms would be given in pseudo-code and any programmer could write it's own driver for any machine.
<br />
<br />Altough I'm relly very very busy those days (I have to pass 1st grade at university this summer and this is extremely hard), so I'm not really progressing at it, nor am I on my NES game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Apr 06, 2009 11:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Step 1: Make a lookup table with the periods corresponding to each note of the chromatic scale, and then make a subroutine to load this period into $4002+x and $4003+x.
<br />
<br />Step 2: Make a subroutine that does this for each channel x=0, 4, 8, 12:
<br />1. Call instrument subroutine
<br />2. Call sound effects subroutine
<br />3. Copy volume-duty from into $4000+x, and use the subroutine of step 1 to set the pitch. (Only write to $4003+x if it has changed, or if you are starting a new note.)
<br />
<br />The instrument and sound effects subroutine update two variables in zero page: desired volume-duty and desired pitch. You might want to get the sound effects done first.
<br />
<br />Step 3: Make a counter to advance through a table of note pitches, one table for each channel. When you get to a note number, start a note on the instrument. When you get to the value for "rest", end the note.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Apr 06, 2009 12:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As someone who's written a music engine himself, I think I could help you out. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />The barebones basic concept that you need to know is that music, in terms of programming, is just simply a list of pitches and durations. "Play pitch xx for yy frames". For example, my music engine's data format is &lt;note&gt; &lt;duration&gt; &lt;note&gt; &lt;duration&gt; etc etc.
<br />
<br />So, in order to iterate through this list, for each channel, you're going to need:
<br />- Two bytes, for a pointer that points to your current location within the list
<br />- One byte, for a counter that keeps track of the duration the note needs to play for.
<br />
<br />Other bytes can be for added features, like looping, wavetable-based envelopes, and other complex stuff that you shouldn't worry about for your first time programming a music engine.
<br />
<br />Next, each song is going to need a header, which contains the pointers to the data for each of the channels. The idea is that you pass the pointer to a song's header, and then from that header, you grab the pointers for the channels.
<br />
<br />Ok, so for the notes, like Tepples said, you'll need a table of the periods, to feed to the second and third registers of each of the channels. I personally have a table for the lowest A, A#, B, C, C#, ..., G, G#, and then I just LSR those entries X times, to achieve octave X.
<br />
<br />Definitely feel free to ask me about this on IRC, I'll be willing to help you further. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> (especially if I'm being too confusing in this post :S)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Mon Apr 06, 2009 2:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When the main game engine tells my sound engine to load a new song, it passes it a value which you could think of as a song number.  This value is asl'd and used as an index into a table of pointers.  These pointers point to the header information for each song.
<br />
<br />The header has basic information about the song/sfx: how many streams (Celius used the word "sheet" for what I am calling a "stream") it has, what channels those streams use, initial values for each stream (tempo, volume envelope, etc), and most importantly a pointer to that stream's data.
<br />
<br />Stream data consists of 3 (well, 4) types:
<br />
<br />1) note values (these signal you to look in your note lookup table and pull an 11-bit value)
<br />2) note lengths (I also have these laid out in a table, but some games just use the number directly)
<br />3) opcodes/control codes (these tell the engine to do things that 1) and 2) can't do.  Like loop, jump, change the volume envelope, etc)
<br />3.5) operands/arguments for opcodes.   These are values that come after the opcodes, which the opcode will read to perform its function.
<br />
<br />Then you just read from the streams in a loop, branching and doing stuff and updating your pointers along the way.  The way I have it now, I have memory reserved in 6's:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">stream_curr_sound: .res 6&nbsp; ;what song/sfx number the stream is playing<br />stream_channel: .res 6&nbsp; &nbsp; &nbsp; &nbsp;;what channel the stream is updating<br />stream_ptr_LO: .res 6&nbsp; &nbsp; &nbsp; &nbsp;;ptr to current location in the stream<br />stream_ptr_HI: .res 6&nbsp; &nbsp; &nbsp; &nbsp;;same<br /><br />stream_tempo:&nbsp; &nbsp; &nbsp; .res 6&nbsp; &nbsp; ;tempo of the stream<br />stream_ticker:&nbsp; &nbsp; &nbsp;.res 6 ;current tick counter position for stream<br />etc..</div><br /><br />Each variable "set" holds the data for up to 6 streams.  Songs use the first four (i.e. stream_curr_sound+0, +1, +2, +3) and the 5th and 6th are reserved for SFX.  This is nice because I can do a little x loop from 5 to 0 and then do stuff like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda &#40;temp_ptr&#41;, y<br />&nbsp; sta stream_tempo, x&nbsp; &nbsp;;x is the stream number<br /></div>
<br />
<br />If you have any more specific questions, just ask.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Wed Apr 08, 2009 9:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the input so far guys!
<br />
<br />It's funny, but before anything was posted, this was an idea that was pitched to me by someone else, and I had decided to try my hand at it:
<br />
<br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">But I've also seen people squeeze a note and note length into a single byte, sacrificing certain values as command bytes.</div>
<br />
<br />So far it's working out... mmm... not too bad. I have a general question though. Is there anything special that I need to know about the triangle channel, or any other channel, for that matter? You know, along the lines of the way that you should only write to $4003 when it needs to be changed. Any little quirks for any others?
<br />
<br />Thanks again for all the input, this is some good stuff to read!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Apr 08, 2009 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're interested in memory efficiency, one of the rather interesting articles I'd read was in the C=Hacking zine (a C64 dev publication).  There was an Ultima-type game that won of the of minigame compos (the first one?), but it had nice music and the article in C=Hacking by the author was entirely about memory-optimized sound engine ideas.
<br />
<br /><a href="http://www.ffd2.com/fridge/chacking/" class="postlink">http://www.ffd2.com/fridge/chacking/</a>
<br />issue #21
<br />
<br />Man, I've got tons and tons of ideas for a sound engine.  I wrote it once, but only implemented it on one channel.  It was more complex than trackers or MML (it's much like a combination of the two), but it could do some wild stuff.  With clever usage of transposing, and combined channel instruments, the data hopefully could've stayed fairly small too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Wed Apr 08, 2009 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Roth wrote:</div><div class="quotecontent">Is there anything special that I need to know about the triangle channel, or any other channel, for that matter? You know, along the lines of the way that you should only write to $4003 when it needs to be changed. Any little quirks for any others?</div>
<br />
<br />You can use the same period table for the triangle as you do the squares, but the triangle channel will produce tones that are an octave lower than the squares. You *could* silence the triangle channel by setting the period to 0, but that results in an ugly pop, so you should instead silence the channel by flipping its bit off in 4015. It's a good idea to use this method to silence any of the channels. I *think* you could get away with flipping the channel off, and then back on right after, and it'll still silence, unless there's another stupid undiscovered quirk.
<br />
<br />The noise channel will need a different table, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Apr 09, 2009 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah the same frequencies can be used by all channels exept noise, knowning that triangle will automatically play things one octave lower (no need to adjust, just set your octave values one more to compensate for that).
<br />
<br />The "proper" way to silent the triangle channel is to write $00 or $80 to $4008 (using $4015 is correct too but it's often best to keep all chennels enabled via $4015 and to change their first register to change the volume).
<br />So for square/noise channels, take the volume and or it with the duty cycle in before writing to $4000, $4004 or $400c. For triangle channel or with $80 instead, so a volume of zero automatically results in silence. You don't have to do that of course, but I find it's a nice trick. So "force" the triangle duty cycle to $80 is a nice trick.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Apr 09, 2009 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another tip: if you're tracking the last $4003+x value for each channel in a variable, set it to $FF whenever the volume is 0 so that the note restarts properly. My own music engine wouldn't play consecutive notes on the triangle channel until I fixed this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Thu Apr 09, 2009 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The "proper" way to silent the triangle channel is to write $00 or $80 to $4008</div>
<br />
<br />When I tried that, I kept running into problems where the triangle channel wouldn't silence exactly when I needed it to. It'd play for a bit of (random) extra time, and I couldn't use that. Using the 4015 method worked, especially since all I'm doing is literally:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;LDA #$0B<br />&nbsp;STA $4015<br />&nbsp;LDA #$0F<br />&nbsp;STA $4015<br /></div>
<br />and that works the way I want it to, unless there's some kind of quirk on the actual hardware that keeps that from working properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Apr 09, 2009 1:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">When I tried that, I kept running into problems where the triangle channel wouldn't silence exactly when I needed it to.</div>
<br />I ran into that. I think I fixed it by resetting the linear counter first: writing $80 then $00, or $81 then $00, or something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Apr 09, 2009 1:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Many games do seem to use $4008 for triangle control.  When I wrote my NSF player, the triangle channel was fine in 90% of NSFs when I only enabled/disabled it based on that.
<br />
<br />NT2 I believe uses $4015.  Sometimes you'll see some really strange stuff, like Recca and how it disables the triangle channel by setting the frequency bits to all 1s.  Instead of going silent, it just plays the lowest possible frequency.  I found it very annoying once I was aware of it (sorry, heheh).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Apr 09, 2009 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Sometimes you'll see some really strange stuff, like Recca and how it disables the triangle channel by setting the frequency bits to all 1s.  Instead of going silent, it just plays the lowest possible frequency.  I found it very annoying once I was aware of it (sorry, heheh).</div>
<br />Some old BPS games do the same thing. I've heard this problem in at least Tetris for Famicom (especially in the first six seconds of Technotris) and Hatris.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>