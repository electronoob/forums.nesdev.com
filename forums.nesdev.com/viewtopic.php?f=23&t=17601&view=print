<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprites: SNES vs Genesis</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprites: SNES vs Genesis</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17601">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17601</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Sun Jul 29, 2018 1:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was thinking about 16-bit systems lately, which mostly comes down to the SNES versus the Sega Genesis/Mega Drive.<br />And today, actually I was just thinking about rendering sprites.  Wasn't that one of the categories where Sega beat Nintendo hands down?  Or was it not so hands-down, or am I mistaken entirely?<br />I definitely notice that Genesis games frequently made use of having creations built out of many sprites, (eg Vectorman) and I was under the impression that this was something the Genesis did better than the SNES, that the Genesis could render more sprites on the screen than the SNES could.<br /><br />Well I was trying to look up some technical data, but I couldn't find much that was presented in a way that was easy to understand.<br />I did gather that the Genesis could draw 80 sprites on the screen with up to 20 on a scanline, (some oddly non-power-of-2 numbers,) and sprites could be drawn in any multiple-of-eight size up to 32x32.  (More correctly, any size of 1 to 4 tiles per dimension, and tiles are stored as 8x8.)<br />Having 80 32x32 sprites on the screen does sound impressive, (though I don't know if the system would get slow-down before then,) but it doesn't give me much more information.  What kind of palettes do these sprites have access to?  (What size and how many?) And how much memory does the system have that can be used for sprites; how many tiles could be used for sprite data?<br /><br />And then for the SNES, well honestly I can't find anything about what the SNES could do.  I'm getting conflicting data about what size tiles it even stores in its memory.  (16x16 or the standard 8x8?)<br /><br />But I figure if any place on the internet knows what these systems can do, it's this site.  I'm sure someone here knows.<br /><br />Also since we're on the subject, what about other systems from the era?  If anyone here knows about the capabilities of other 16-bit systems, I'm interested in hearing about them too.  I love this stuff and never get tired of it!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jul 29, 2018 2:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Having 80 32x32 sprites on the screen does sound impressive,</div><br />SNES can do this as well, actually it can fit the entiere screen with sprites, (however trying to overlap yet extra sprites on top of that will fail, see below)<br /><br />A good reference on what the SNES can do is here <a href="http://problemkaputt.de/fullsnes.htm#snesppuspritesobjs" class="postlink">http://problemkaputt.de/fullsnes.htm#snesppuspritesobjs</a><br />I also have the so called &quot;SNES-dev started kit&quot; with lots of documentation, which I'll also use as reference.<br /><br />SNES can have 128 sprites, and two sizes between 8x8, 16x16, 32x32 and 64x64. Only two sizes can be picked for a particular screen, and each individual sprite can be individually set to either &quot;large&quot; or &quot;small&quot;.<br /><br />SNES can draw 32 sprites per line, and up to 34 sprites converted down to 8x8 sprites, per scanline. Having more will result in lower priority sprites disapearing. This is visible in Secret of Mana for example where it's common to see sprites disappear that way, especially if you use the whip weapon horizontally.<br /><br />So for example if you increase the sprite size it only increase the number of sprites that the screen can show in total, but it does only barely increase what can be shown on a scanline.<br /><br />Many games simulates a simple background using sprites when using mode 7, because the only background has to be used for the rotating and scaling object. Any game with a mode-7 boss is almost required to have this, Super Mario World, Super Castlevania IV (fighting stone golem) and Secret of Mana (slime fight) comes to mind.<br /><br />Secret of Mana is especially impressive as they even made the menu text window being a sprite for this particular boss fight, this is alas hitting the sprite limit and when the boss attacks you with it's rain attack the window start disappearing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jul 29, 2018 6:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">I did gather that the Genesis could draw 80 sprites on the screen with up to 20 on a scanline, (some oddly non-power-of-2 numbers,) and sprites could be drawn in any multiple-of-eight size up to 32x32.  (More correctly, any size of 1 to 4 tiles per dimension, and tiles are stored as 8x8.)</div><br />It's non-power-of-2 because sprite evaluation is interleaved with screen rendering, whose width is also allowed to be not a power of 2. That's 1 OAM entry per 4 screen pixels and 1 sprite per 16 screen pixels. You get fewer in 256px mode than in 320px mode.<br /><br /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">Having 80 32x32 sprites on the screen does sound impressive, (though I don't know if the system would get slow-down before then,)</div><br />Slowdown is largely a function of 1. calculating the positions of sprites before drawing them to OAM (which depends on the CPU) and 2. uploading their cels to VRAM (which depends on video memory bandwidth). For many kinds of computations used in video games, the 65816 and 68000 are on par when used by competent programmers. But with 65816 only really ever used in the Super NES and Apple IIGS, there wasn't a huge pool of competent programmers to hire from, so you ended up getting inefficient code out of many of them. And in multiplication- and division-heavy loads, such as anything with 3D rotation, the 68000 wins. See for example <em>Ballz</em>, whose Super NES port needs a DSP-1 coprocessor; a Super NES version of <em>Vectorman</em> would probably have needed a DSP-1 or CX4 as well.<br /><br />In addition, though DMA to VRAM is similar in speed on the Genesis and Super NES, it's also possible to upload tiles to VRAM during rendering on Genesis because of a write queue in the VDP. This is noticeably slower than DMA but convenient for tile decompression. The Super NES has no such write queue; all uploads to video memory must happen during vertical blanking. Though Nintendo could have implemented a write queue, such as by reserving specific background tile numbers as having no picture or by using otherwise unused rendering time on scanlines with few sprites, the engineers probably didn't see it as that important.<br /><br /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">What kind of palettes do these sprites have access to?  (What size and how many?)</div><br />Genesis: Four 15-color palettes, shared with background<br />Super NES: Eight dedicated 15-color palettes, not shared with background except in 256-color modes (3, 4, and 7)<br />Neo Geo: More 15-color palettes than you know what to do with<br /><br /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">And how much memory does the system have that can be used for sprites; how many tiles could be used for sprite data?</div><br />Genesis: 64 KiB; always shared with background<br />Super NES: 16 KiB out of 64 KiB; can optionally be changed mid-screen or shared with background<br />Neo Geo: Direct access to a CHR ROM that can be tens of megabytes. Most &quot;VRAM&quot; in the system is really OAM, storing the list of tile numbers that make up each sprite.<br /><br /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">And then for the SNES, well honestly I can't find anything about what the SNES could do.  I'm getting conflicting data about what size tiles it even stores in its memory.  (16x16 or the standard 8x8?)</div><br />Tiles on Super NES are always 8x8 pixels, and sprites are always square and a power of two pixels on a side. Two sprite sizes can be used at once, and most games set them to either A. 8x8 and 16x16 or B. 16x16 and 32x32. Up to 32 sprites on a line, up to 272 sprite pixels (34 8x1-pixel slivers) on a line.<br /><br /><div class="quotetitle">Marscaleb wrote:</div><div class="quotecontent">If anyone here knows about the capabilities of other 16-bit systems, I'm interested in hearing about them too.  I love this stuff and never get tired of it!</div><br />Neo Geo: Sprites 16 pixels wide and as tall as the screen, with each stored as a column of tile numbers. Sprites may be linked horizontally for quick position updates of multiple columns at once. Sprites may be drawn smaller but not larger than they are stored, using a set of sliver-scaling lookup tables inside the video chip.[1] Up to 380 sprites per scene and 96 per scanline. But in practice, that's not quite as much because sprites are also needed to simulate a background map, as the only tilemap on the Neo Geo is a fixed, always-on-top layer mostly used for score display and safe area framing.<br /><br /><br /><span style="font-size: 85%; line-height: normal">[1] It's also practical to implement this LUT-driven scaling method in software on NES, Sega Master System, TurboGrafx-16, Game Boy, Super NES, or any other system with CHR RAM and 8x8-pixel planar tiles.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Jul 29, 2018 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Small sprites: SNES wins<br />Medium sprites: Genesis wins<br />Large sprites: tie

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 29, 2018 2:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm under the impression that the main advantage the Genesis has, regarding sprites, are the configurable dimensions per sprite, which meant less space wasted on transparent pixels.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Jul 29, 2018 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I'm under the impression that the main advantage the Genesis has, regarding sprites, are the configurable dimensions per sprite, which meant less space wasted on transparent pixels.</div><br />There were also situations (mostly beat-em-ups) where the SNES' 16 KB sprite data limit was relevant.  Switching data areas partway down the screen is possible, but mostly useful for faking background layers with sprites because it's extremely difficult to apply to moving objects without blowing up your VRAM usage and DMA bandwidth.  On the Mega Drive you could use the whole 64 KB for sprite data if you wanted to.<br /><br /><s>And of course in H40 mode the Mega Drive could have more 8x8 sprites on a line without dropout &#40;40 vs. 34&#41;, which might be useful in a bullet-heavy game.</s> <span style="color: #FFFFFF">EDIT:  Wow, I wasn't paying attention.  20 sprites per scanline.  The SNES trounces that; you can do 32.</span>  In terms of overdraw ratio, the SNES wins (slightly), because it can cover a whole scanline with sprites with 16 pixels left over, whereas if you fill a scanline on the Mega Drive it has nothing left over in either H32 mode (32 tiles) or H40 mode (40 tiles).  The Mega Drive maintains its overdraw ratio because it upclocks the VDP for H40 mode, which among other things results in more sprites (80 vs. 64) at a slightly higher resolution.  The S-PPU is fixed-speed and achieves hi-res mode by abusing parts of the colour blending hardware (namely the fact that it was already handling two pixels per pixel anyway), which doesn't improve VRAM bandwidth, so the SNES maintains its overdraw ratio by simply not upgrading sprites to hi-res.<br /><br />The SNES had a fiddly sprite attribute table format that tended to cost CPU time, especially with naïve or unoptimized sprite routines; I believe one game actually included a special chip to help build the OAM data.<br /><br />The VRAM data format for sprites on SNES is a bit unintuitive for some.  Each 8 KB table is a square grid 16 tiles on a side, so you can plan out your sprite VRAM with graph paper (a holdover from the NES).  This means that individual sprites 16x16 and larger cannot be loaded in one DMA transfer, because the tiles aren't all in a row.  This can be very aggravating and may require special handling to maximize bandwidth.  On the Mega Drive, you can just DMA all the tiles for a sprite at once because they're all in a row regardless of the size of the sprite.<br /><br /><br />Basically, the SNES sprite system was more powerful on paper (128 sprites, max size 64x64 as opposed to 80 sprites, max size 32x32), but in practice it had enough restrictions and oddities that which system held an advantage depended on what you were trying to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Sun Jul 29, 2018 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Genesis: 64 KiB; always shared with background<br />Super NES: 16 KiB out of 64 KiB; can optionally be changed mid-screen or shared with background<br /></div><br /><br />That sounds needlessly complicated without offering any real advantages.  If the SNES can just operate with 64 KiB shared with the background, why would you want to have 26 KiB dedicated to the sprites?  I mean, it's pulling out of the same pool of 64 KiB anyway, right?  Why would you hardware-dedicate a portion of the memory to the sprites when you could just freely use the memory as you see fit?<br />Or is there some other advantage to using 16 KiB for sprites that I am unaware of?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Jul 29, 2018 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The sprite attribute table specifies a top-left tile for the sprite.  It's 8-bit.  There's also a nametable bit that selects which array of 256 tiles to pick the sprite from.  You'd need two more bits to span all of VRAM, and that would have expanded OAM from 544 bytes to 576 bytes.<br /><br />I'm sure I don't need to elaborate on the economic catastrophe the addition of that extra 32 bytes of memory would have wreaked on all of Japan, not to mention the world.  And adding <em>even more</em> memory to permit per-sprite per-axis size selection is just unthinkable.<br /><br />...I don't know; maybe there's something about the S-PPU design that made it necessary to impose these restrictions.  I don't know if the fact that the undocumented sprite size settings give you non-square sprites proves they could have done it, or if the fact that the non-square sprites don't flip properly proves they couldn't...<br /><br />...<br /><br />Note that I said a wrong thing in my post above, because I forgot (if I ever knew) that the Mega Drive sprite limit per scanline is dramatically lower than its tile limit.  (Also, I wasn't thinking and confused the SNES tile and sprite limits.)  SNES crushes the Mega Drive when using 8x8 sprites, apparently.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Mon Jul 30, 2018 4:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's 16 or 20 sprites processed per line, and up to 256 or 320 pixels rendered, depending on if you're in H256 or H320. Half the sprite list is cached (vertical coordinate and size+link) while attributes and horizontal coord are read out of VRAM during BG rendering process. At end of active line the cached data is went through and 16/20 visible sprites are extracted to an intermediate list, when active line starts again those 16/20 entries have their corresponding X and attribs fetched out of VRAM, then the new data is used to actually render the whole line to be shown when the active line ends again. Search and rendering happen at the same time, while X+attr fetches coexist with BG rendering and rendered sprite line display. VDP always renders 256 or 320 sprite pixels, even if it didn't find enough sprites, if it didn't do that you could get bunch of extra DMA bandwidth during horizontal blanking when there's time left over from sprite rendering.<br /><br />Each sprite can be from 8x8 to 32x32, use any part of the 64KB of VRAM (in 128KB mode only half is usable) and there's the linked list aspect that IMO gets in the way as it is one extra parameter to write and more often than not you have a sequence without any gaps or other irregularities.<br /><br />Main problem with SNES is the X coordinate being split up, that's an aspect you have to actively fight. Two sprite sizes per frame is mainly an inconvenience. Some of the larger sprites are pretty much waste of VRAM though, different size selections would have made more sense with emphasis on smaller non square sizes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Mon Jul 30, 2018 6:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll chime in with the Turbografx / PC-Engine, just because.  It has one or two advantages over the Genesis, and... 1 over the SNES.<br /><br />TG/PCE can have 64 sprites, and each of them can be any size between 16x16, 16x32, 16x64, 32x16, 32x32 and 32x64.  Sprite tiles can use 64K of VRAM.<br /><br />TG/PCE can draw 16 sprites per line at most, each scanline having a maximum of 256 pixels of sprite data.  Thus some games use sprites as a screen-covering pseudo-background, since the PCE has a single BG tile layer otherwise.<br /><br />TG/PCE: Sixteen dedicated 15-color palettes, not shared with background.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 30, 2018 9:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ccovell wrote:</div><div class="quotecontent">TG/PCE: Sixteen dedicated 15-color palettes, not shared with background.</div><br />And yet somehow, even with 2 video chips stacked together, they still couldn't afford one measly skin tone for Arthur's face in what is probably the <a href="https://youtu.be/DwBKqABy7jg" class="postlink">best home port of Ghouls 'n Ghosts</a>. Go figure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Mon Jul 30, 2018 11:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">And yet somehow, even with 2 video chips stacked together, they still couldn't afford one measly skin tone for Arthur's face in what is probably the <a href="https://youtu.be/DwBKqABy7jg" class="postlink">best home port of Ghouls 'n Ghosts</a>. Go figure.</div><br />You can blame the developer NEC Avenue for that.  They tended to bring over the graphics as-is on many arcade-to-PCE ports, and obviously run simple math on the palette downconversion -- as opposed to tweaking by eye.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gilbert</b> [ Mon Jul 30, 2018 11:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Honestly, being able to display so many simultaneous colours at once, the PCE missed an opportunity by not using a larger master palette, such as a 4096 one, which was used by a number of arcade boards.<br /><br />As <a href="https://en.wikipedia.org/wiki/Tieguanyin" class="postlink">Tetgannon</a>(the video colour encoder) is a separate chip from <a href="https://en.wikipedia.org/wiki/7_Up" class="postlink">7UP</a>(the video display chip), the system could theoretically be upgraded to using another master palette.<br /><br />In designing the SGX, if they didn't just double the number of video chips (and double the VRAM to a full 128kb that the original system really deserved to have, and, more system RAM), it would curb stomp the MD and SFC if they upgraded the master palette(without the transparency effects, at least; I'm not a fan of the other fancy features such as Mode 7 and screen pixellation) and could make arcade conversions look even better. This may even add up more to the cost though, and I think one main reason they abandoned the SGX was its high cost.<br /><br />Still, I'm more biased towards the PCE as I am an owner and not very much a fan of the other two consoles.<br /><br /><strong>Ninja'ed:</strong><br />Actually Dai Makaimura was developed by <a href="http://www.highriskrevolution.com/gamelife/index.php?e=305" class="postlink">Hudson</a> itself (more accurately mostly handled by Alfa System programmers), but for some reasons published by NEC Avenue.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jul 31, 2018 3:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Main problem with SNES is the X coordinate being split up, that's an aspect you have to actively fight.</div><br />I could name quite a few games that do a NES-style left clip of the leftmost 8 pixels (often also rightmost, for symetry). I suspect one of the reasons they did that, when using 8x8 sprites, they don't have to worry about the MSB of X position and can just use 0-255, not touching the separate small OAM.<br /><br />Final Fantasy IV only clips one pixel on each side (go figure) but still have sprites misteriously &quot;disapear&quot; when their position is supposed to be in the [-8...-1] range, this is quite ugly but apparently they didn't care.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Marscaleb</b> [ Tue Aug 07, 2018 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprites: SNES vs Genesis</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So from looking at the stats, the SNES seems to beat the Genesis in terms of sprites.<br />But there's one thing I'm still left to wonder.<br /><br />Why then, was it so much more common to see things built out several smaller sprites on the Genesis than the SNES?<br />Was this just a style thing?  Or was there some other hardware factor that I'm missing?<br /><br />Of course, lots of games on both systems had things built out of &quot;many sprites,&quot; but on the SNES they tried to make things look like single larger sprites.  Mega Man X, for example, has separate sprites for all his upgradable components, and many of the larger enemies are building out of &quot;parts&quot; that can move independently.  But each of those sprites looks different from each other; each one is a unique &quot;part.&quot;<br />But on the Genesis, so many games had characters (especially bosses) built out of repeated sprites, in a style like Vectorman.  Bosses in Monster World 4, Gunstar Heroes, Castlevania Bloodlines, all the Sonic games.  And yet I'm struggling to think of more than one example on the SNES.<br /><br />The SNES seems more capable of handling many sprites on the screen.  They both are looking at the same amount of memory for sprites, so there isn't a need to repeat objects to conserve memory.  And honestly the Genesis's ability to use more sizes in sprites seems like the kind of thing that would benefit having enemies that look like single large sprites.<br /><br />So where is this coming from?  Is there a hardware reason or was it just a style that the Sega people leaned to more than the Nintendo people?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>