<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Stuff I don't like with object oriented programming...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Stuff I don't like with object oriented programming...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10350">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10350</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Aug 08, 2013 4:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While I'm feeling ranty, I think people tend to overdo accessors too, at least for purely internal code. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Sometimes the risk of something not staying a direct member variable with a predictable type is so miniscule that fuglying up the code with a ton of get_x() or whatever everywhere just isn't worth it. For languages that can translate .x into an accessor call it's kinda moot though...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ulfalizer</b> [ Thu Aug 08, 2013 5:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">About encapsulation, I perfectly get your point. This is great if you're writing a library.<br /><br />HOWEVER if you're just writing something for yourself, no library, and nobody else is supposed to use your code without having full access to it (in which case he's in his right to modify it as his liking), then I see no point of having such strict encapsulation, other than &quot;because it's good practice&quot;.</div><br /><br />Encapsulation to me is just a fancy way of saying abstraction. You usually don't want every part of your system knowing about and relying on the precise internals of all the other parts, since it quickly gets overwhelming and makes changing internals or swapping out parts messy. Instead you partition your program into logical components that communicate via abstract interfaces. That just seems like a good idea in general though, and not really specific to OOP. There's many ways those interfaces could be defined.<br /><br />In a way C++ classes sometimes expose more internals than other approaches would (though they're declared private), since every compilation unit that uses the class needs the full definition (unless it's just for a pointer or reference or the like). <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 08, 2013 7:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jarhmander wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But what types does <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">std::make_tuple</tt> use? How does it know to make char instead of int? Or is one implicit conversion happening?</div>Yes, a tuple can be converted into another one if the types of the rhs can be converted to the types of the lhs.<br /><br />On the topic of OO, I find too many people using getter/setter for <em>every</em> attributes in classes; also, I prefer:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />&nbsp; &nbsp; &nbsp; double radius() const;<br />&nbsp; &nbsp; &nbsp; void radius(double r);<br />...</div>much more than<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">...<br />&nbsp; &nbsp; &nbsp; double getRadius() const;<br />&nbsp; &nbsp; &nbsp; void setRadius(double r);<br />...</div><br />which is more typing and more verbose for nothing. Because of my preference in the naming of getters/setters, as a convention I put trailing underscores in attribute names, so they don't clash with method names.</div><br />Qt uses something inbetween: radius() for getting and setRadius() for setting. I tend to prefer this style because it reads better than (e.g.) <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">foo.radius&#40; 5 &#41;</tt>. I also think <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">int bar = foo.radius&#40;&#41; * 10;</tt> reads better than <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">int bar = foo.getRadius&#40;&#41; * 10;</tt><br /><br />I think there's a small problem with languages that allow hiding the getters and setters (like C#), it's the fact that user no longer knows whether he's accessing a variable (fast) or invoking a method (potentially slow). Of course in a perfect world the possible slowness would be documented, and of course other languages like C++ suffer from the same problem if getter and setter methods are used everywhere and documentation is lacking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 08, 2013 7:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I think there's a small problem with languages that allow hiding the getters and setters (like C#), it's the fact that user no longer knows whether he's accessing a variable (fast) or invoking a method (potentially slow).</div><br />Some people coming from C aren't big fans of C++'s operator overloading sugar for the same reason. They're used to operators being fairly fast (except possibly integer division and float arithmetic on embedded CPUs). See <a href="http://yosefk.com/c++fqa/operator.html" class="postlink">C++ FQA Lite's page about abuse of operator overloading</a>. Anyway, a standard nomenclature for public getters and setters allows IDEs to do some reasoning about an object's properties. Java, for example, has long had the <a href="https://en.wikipedia.org/wiki/JavaBeans" class="postlink">&quot;bean&quot; concept</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course in a perfect world the possible slowness would be documented</div><br /><a href="https://www.youtube.com/watch?v=WIkOVe0MF1k" class="postlink">I feel a Huey Lewis and the News song coming on</a>. In the real world, even <a href="http://developers.slashdot.org/story/07/11/17/0552247/c-memory-leak-torpedoed-princetons-darpa-chances" class="postlink">C#'s counterpart to memory leaks isn't conspicuously documented</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Aug 08, 2013 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">HOWEVER if you're just writing something for yourself, no library, and nobody else is supposed to use your code without having full access to it (in which case he's in his right to modify it as his liking), then I see no point of having such strict encapsulation, other than &quot;because it's good practice&quot;.</div><br />Agreed that doing something only &quot;because it's correct&quot; is a poor practice. Everything has costs and benefits and when the costs outweigh them, it's not worth using. Plenty of people use OO as a rule rather than a tool among others.<br /><br />Even if you are your own user, though, hiding things is useful. When I write things I want to depend as little as possible on other things of mine I'm using, because later I may want to improve them without breaking my other stuff. Rather than merely documenting what I can depend on, OO languages allow expression in code and enforcement by the compiler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Thu Aug 08, 2013 6:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I think there's a small problem with languages that allow hiding the getters and setters (like C#), it's the fact that user no longer knows whether he's accessing a variable (fast) or invoking a method (potentially slow). Of course in a perfect world the possible slowness would be documented, and of course other languages like C++ suffer from the same problem if getter and setter methods are used everywhere and documentation is lacking.</div><br /><br />I think I've seen this kind of hiding in MFC.  Accessing CFileDialog::m_pOFN &quot;data member&quot; causes a function call.  I haven't traced it yet but I imagine it is some kind of #define trickery.  Whatever it is, I certainly  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> when I discovered it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>