<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Drawing, Vblank, and NMI - A doc I whipped up</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Drawing, Vblank, and NMI - A doc I whipped up</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5062">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5062</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Thu Apr 16, 2009 4:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ooo lots of potential here
<br />
<br />instead of doing it all in HTML you might consider doing it wiki-style.. especially if it might end up on the future nesdev wiki

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Apr 16, 2009 4:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">OAM cycling, compression are things I was already thinking about.  I like the idea of touching on collision detection too.</div>
<br />Although compression and collision detection are completely platform-independent. If you do decide to talk about more general concepts like these, I think you should create a very clear distinction between them and the NES-specific stuff. What you have so far (NMI, etc) fall into the "guidelines" category, while compression and collision detection are more like "algorithms", IMO.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Apr 16, 2009 5:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Although compression and collision detection are completely platform-independent.</div>
<br />Not entirely. Some algorithms are more practical on some platforms than on others. You use a different sort of compression for 2bpp tiles than for 24bpp photoreal images. And you use a different sort of compression in a machine with a 6502 CPU and 32 KiB of ROM, 2 KiB of RAM, and a parallel port to 2 KiB of VRAM (NES) than in a machine with a 6502 CPU and 64 KiB of unified RAM+VRAM (Apple IIe or C64).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Apr 16, 2009 9:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Old tepples and his obsession with finding exceptions... Well, I get what you mean. There certainly are better ways to approach general game programming aspects when we're talking about a specific platform, and I believe that's what Disch is seeking to present.
<br />
<br />I guess my point was that those subjects were somewhat beyond the scope of what I thought he was trying to achieve. He tried to explain once and for all a very common newbie problem, which is how to set up the basic structure of a game program. That's a huge problem for someone that never made a game before, specially in assembly.
<br />
<br />Compression, however, is not a such a critical subject. One can make a NES game and not bother with any type of compression. The fact that one stores all screens as 1KB blocks of name + attribute data does not prevent a game to be made, it will just not have that many screens.
<br />
<br />Collision detection also seems a bit advanced when we consider the initial "lesson". Maybe the person doesn't even know how to make some game entities yet, let alone make them collide. I kinda feel like those subjects are improvements, and that the goal of the document was to help people get off the ground for not understanding how all that technical stuff turns into a game. People gotta have something done before they can improve it.
<br />
<br />Maybe there are more critical matters to discuss first, such as the concept of updating the game world a step at a time every frame. Most people have problems with that, even programmers. Most programmers today deal with tasks that are performed in one go, so they have a really hard time understanding that to make something move from point a to point b they can't just use a "for" statement on the coordinate, since (as any game programmer knows) that would freeze all other actions. Most programmers just don't know how to program events that seem to occur simultaneously.
<br />
<br />I'm not saying Disch shouldn't talk about those other subjects, but maybe leave them for later, in an "optimizations" chapter for instance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Petruza</b> [ Fri Apr 17, 2009 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice doc!
<br />What about the following: for those of us that will use a generic runtime made in assembler but will code our games in c, thus not being able to write custom NMI routines, would it be fine just updating a zeropage var in NMI which means the start of vblank by being non-zero, and then wait for this to happen in the main thread, do graphics, and then set that var to zero?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Apr 17, 2009 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Petruza wrote:</div><div class="quotecontent">would it be fine just updating a zeropage var in NMI which means the start of vblank by being non-zero, and then wait for this to happen in the main thread, do graphics, and then set that var to zero?</div>
<br />This works fine, and is exactly what Dwedit wrote in <a href="http://nesdev.com/bbs/viewtopic.php?p=45714#45714" class="postlink">this post</a>. This is the ideal replacement to $2002 polling (which misses frames).
<br />
<br />There is only one serious flaw with this method though: If the frame calculations of your game take longer than a NES frame, the whole program will suffer from slowdown. With a custom NMI you can choose to perform some tasks even when a game frame isn't complete. This is the reason why most games slow down when there are many calculations to do (such as when there are many enemies active at once) but their music still plays normally.
<br />
<br />If you are sure your frame calculations will never take too long or you don't want any events to happen at a steady 60Hz (50Hz for PAL), just use that solution.
<br />
<br />However, like Disch said, it should be possible to write an NMI routine generic enough to be used through the whole game. If you have any hopes of making complex/fast games in C, you'd better code a very generic and optimized NMI routine in assembly, and provide a set of C functions fill the buffers and things like that. If you actually code the drawing routines in C, I don't think you'll be able to do much during VBlank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Fri Apr 17, 2009 11:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />here is a buffer read routine i came up with based on a simplified version of SMB's routine.. this could be a useful bit of code to include on the wiki about this subject
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldy #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; reset counter<br />&nbsp; &nbsp;jmp +start:<br />-setADDR:&nbsp; &nbsp;<br />&nbsp; &nbsp;sta PPUADDR&nbsp; &nbsp; &nbsp; &nbsp;; set up PPU ADDR<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda buffer, y<br />&nbsp; &nbsp;sta PPUADDR&nbsp; &nbsp; <br />-writeData:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda buffer, y&nbsp; &nbsp; &nbsp;; load data length<br />&nbsp; &nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set up counter<br />-DataLoop:<br />&nbsp; &nbsp;lda buffer, y&nbsp; &nbsp; &nbsp;; load data<br />&nbsp; &nbsp;sta PPUDATA&nbsp; &nbsp; &nbsp; &nbsp;; store data in PPUDATA<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; decrease counter, loop until done with data<br />&nbsp; &nbsp;bne -DataLoop:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />+start:<br />&nbsp; &nbsp;lda buffer, y&nbsp; &nbsp; &nbsp;; load next value in buffer<br />&nbsp; &nbsp;bmi -writeData:&nbsp; &nbsp;; if value is negative, we'll just continue writing <br />&nbsp; &nbsp;bne -setADDR:&nbsp; &nbsp; &nbsp;; if value &gt; 0, we'll write the PPU address&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; reset buffer<br />&nbsp; &nbsp;sta buffer<br /><br /></div>
<br />
<br />
<br />the data in the buffer should be formatted like so:
<br />
<br />[ppu addr] [length] [data]
<br />or
<br />[FF] [length] [data]
<br />
<br />the final byte in the buffer should be 00
<br />
<br />This is a valid buffer:
<br />
<br />20 00 05 11 22 33 44 55 
<br />FF 03 AA BB CC 
<br />3F 00 04 01 02 03 04 
<br />00

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Apr 17, 2009 11:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For max speed, and assurance that I don't spill outside of Vblank, I have individual routines for tile columns, tile rows, attribute columns, attribute rows, the palette, and CHR RAM tiles (if applicable). These routines are each given a PPU address and it writes a buffer of data to the PPU. So this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #24<br />ldy #0<br />jsr WriteTileColumn<br /></div>
<br />
<br />Writes a column of tiles located in a specific area of RAM to $2400 (30 tiles, assuming vertical mirroring). To make things even faster, for this routine, I set it up so that the address fed can only be one that adheres to the top of the name table. This way I won't have to deal with calculating different PPU addresses and name table boundary crossing, etc. Though this does require that I position the tile data in the array copied exactly right. Though this isn't that hard. That particular routine is 270 cycles, or if I put the array in zero page, it's 238 cycles. So in terms of Vblank time, it saves a lot. Though it might be kind of a pain to work with (definitely not for calculating PPU addresses though; just positioning tiles in the array exactly right is).
<br />
<br />I mainly wrote these routines for extended Vblank code, so I could update 10 different CHR RAM tiles, a row of tiles, a column of tiles, a row of attributes, a column of attributes, the entire palette, and sprite DMA all in one frame. Yeah, this ended up spilling 12 scanlines outside of Vblank, but it's okay. You don't really notice the blanked top of the screen, especially if you're playing on an NTSC TV. I just needed to be sure exactly how long these routines were taking, so by eliminating name table border complications, the cycle count is constant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 18, 2009 12:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">frantik wrote:</div><div class="quotecontent">here is a buffer read routine i came up with based on a simplified version of SMB's routine..</div>
<br />The only problem with your code is that it's quite slow... INY, DEX and BNE for every copied byte is terribly inneficient. Unfortunately I don't have a better suggestion that doesn't require much more ROM.
<br />
<br />If there's more ROM available, I can always recommend my <a href="http://nesdev.com/bbs/viewtopic.php?p=32622#32622" class="postlink">pseudo-DMA idea</a>. In my current project, I use a variation of it that is limited to 32 bytes at a time, so it doesn't need so much ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sat Apr 18, 2009 12:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yeah I suppose if you know how long your buffer will be each time, an unrolled loop would be faster.  
<br />
<br />right now i'm just happy to have some kind of display buffer going <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  now i can work on LOCATE and PRINT type commands to further simplify development

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 18, 2009 1:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">frantik wrote:</div><div class="quotecontent">yeah I suppose if you know how long your buffer will be each time, an unrolled loop would be faster.</div>
<br />If you pay attention to my code you'll see that the cool thing about it is that it's actually an unrolled loop that copies a variable amount of bytes. Just the total amount of bytes is limited to 128, but you can read variable amounts of data from those 128.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sat Apr 18, 2009 1:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i have to admit i'm having a hard time understanding all of your code... but thats ok for now.
<br />
<br />with the code snippet I posted, I can see a way to output null terminated strings which would save a dex operation each byte... but then you can't use the 00 tile for anything
<br />
<br />edit:  actutally i improved my code so that if the first byte is positive, it writes that byte and the following byte to PPUADDR.  If the first byte is negative, it uses that value as the length of the string to write.   this will make it much easier to make locate and print commands, and also saves a byte in the buffer when appending strings
<br />
<br />edit2: eh.. having to deal with string lengths for everything is a pain.. worth it to have 00 be a null character to save time in a lot of places <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>No Carrier</b> [ Sun Apr 19, 2009 9:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great stuff, Disch! Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Apr 20, 2009 12:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">frantik wrote:</div><div class="quotecontent">here is a buffer read routine i came up with based on a simplified version of SMB's routine..</div><br />The only problem with your code is that it's quite slow... INY, DEX and BNE for every copied byte is terribly inneficient. Unfortunately I don't have a better suggestion that doesn't require much more ROM.<br /><br />If there's more ROM available, I can always recommend my <a href="http://nesdev.com/bbs/viewtopic.php?p=32622#32622" class="postlink">pseudo-DMA idea</a>. In my current project, I use a variation of it that is limited to 32 bytes at a time, so it doesn't need so much ROM.</div>
<br />
<br />You could kinda compromise and do it both ways at the same time, like StarTropics II. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />Assume X is the loop count (the number of bytes remaining that we need to transfer).
<br />
<br />Basically, it has an unrolled loop of:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&lt;subtract 8 from X&gt;<br />LDA buffer,Y<br />STA $2007<br />LDA buffer+1,Y<br />STA $2007<br />...<br />LDA buffer+7,Y<br />STA $2007<br />&lt;add 8 to Y&gt;<br /></div><br /><br />plus the normal loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA buffer,Y<br />STA $2007<br />INY<br />DEX<br />BNE -<br /></div>
<br />
<br />The unrolled loop is the equivalent of a loop of 8, so what the program does is use the unrolled loop, copying 8 bytes each time, (subtracting 8 from the loop count each time), until the loop count is &lt; 8, in which it just uses the normal loop for the remaining bytes.
<br />
<br />So basically, if you need to transfer 5 bytes, it uses the normal loop with an X of 5.
<br />If you need to transfer 8 bytes, it uses the unrolled loop once.
<br />For 16 bytes, it uses the unrolled loop twice.
<br />For 20 bytes, it's the unrolled loop twice, and the normal loop with an X of 4.
<br />
<br />It doesn't rely on huge unrolled loops, indirect jumps, tables, or anything of the sort, yet offers a better efficiency for transfers that are &gt;= 8 bytes in length.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Mon Apr 20, 2009 3:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^ hey i like that idea <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>