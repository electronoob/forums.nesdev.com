<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Unsigned Integer Division Routines</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Unsigned Integer Division Routines</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11336">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11336</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 14, 2014 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have written a number of division routines in 6502 assembly, and I'm posting them here for other people to use. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />These routines start with any value (0-255) in the accumulator and finish with the integer division result in the accumulator. They are all constant cycles and do not use X or Y. Most do require 1 temp register. I've listed all divisions from 2 to 32 below, including the trivial divide by powers of 2 cases (for sake of completion).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Unsigned Integer Division Routines<br />; by Omegamatrix<br /><br /><br />;Divide by 2<br />;1 byte, 2 cycles<br />&nbsp; lsr<br /><br /><br />;Divide by 3<br />;18 bytes, 30 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #21<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br /><br /><br />;Divide by 4<br />;2 bytes, 4 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 5<br />;18 bytes, 30 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #13<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 6<br />;17 bytes, 30 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br /><br /><br />;Divide by 7 (From December '84 Apple Assembly Line)<br />;15 bytes, 27 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 8<br />;3 bytes, 6 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 9<br />;17 bytes, 30 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 10<br />;17 bytes, 30 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 11<br />;20 bytes, 35 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 12<br />;17 bytes, 30 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br /><br /><br />; Divide by 13<br />; 21 bytes, 37 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; clc<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 14<br />;1/14 = 1/7 * 1/2<br />;16 bytes, 29 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 15<br />;14 bytes, 24 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #4<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 16<br />;4 bytes, 8 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 17<br />;18 bytes, 30 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; #0<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 18 = 1/9 * 1/2<br />;18 bytes, 32 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 19<br />;17 bytes, 30 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 20<br />;18 bytes, 32 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 21<br />;20 bytes, 36 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 22<br />;21 bytes, 34 cycles<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;cmp&nbsp; #33<br />&nbsp; &nbsp;adc&nbsp; #0<br />&nbsp; &nbsp;sta&nbsp; temp<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;adc&nbsp; temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;adc&nbsp; temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;adc&nbsp; temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br /><br /><br />;Divide by 23<br />;19 bytes, 34 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 24<br />;15 bytes, 27 cycles<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;sta&nbsp; &nbsp;temp<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;adc&nbsp; &nbsp;temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;adc&nbsp; &nbsp;temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;lsr<br /><br /><br />;Divide by 25<br />;16 bytes, 29 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 26<br />;21 bytes, 37 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 27<br />;15 bytes, 27 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 28<br />;14 bytes, 24 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #2<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 29<br />;20 bytes, 36 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 30<br />;14 bytes, 26 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sec<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 31<br />;14 bytes, 26 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /><br />;Divide by 32<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Jun 14, 2014 10:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jun 14, 2014 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Didn't want to continue off topic in <a href="http://forums.nesdev.com/viewtopic.php?p=129791#p129791" class="postlink">the other thread,</a> but cool! The latest divide by 5 was in the atariage thread, but I do wish I had seen more of the others. Might as well say what I'm using them for. My game detects 49 slope heights. (flat, and 24 facing downward left, 24 facing downward right) I did the trig for the angles of those heights to find what percentage of the speed should be kept. Then I used whatever divide routine was the closest to what it would really be out of the ones I could find. <br /><br />1/2 (0.5)<br />1/4(0.25)<br />1/8(0.125)<br />etc are already accounted for obviously.<br />Then<br />3/4(.75)<br />7/8(0.875) <br />Because you can do the divide, then subtract it from the original. (In fact I do this for 1/2, because I wanted a speed of 1 to not be scaled to zero.) You can do 2/5 with divide by 5 asl etc.I could probably get a little closer with the other divides, but the biggest difference is like 0.04 and I've already gotten used to the feel of the game as is.<br /><br />I'm also using the divide by 5 for a bouncing ball that decays in strength. I looked up the coefficient of restitution for a basketball bouncing on concrete and it was .88ish. So I tried original-original/10, but that felt wrong to interact with in game, so now it's original-original/5.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Sat Jun 14, 2014 12:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Omegamatrix wrote:</div><div class="quotecontent">I have written a number of division routines in 6502 assembly, and I'm posting them here for other people to use. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />These routines start with any value (0-255) in the accumulator and finish with the integer division result in the accumulator. They are all constant cycles and do not use X or Y. Most do require 1 temp register. I've listed all divisions from 2 to 32 below, including the trivial divide by powers of 2 cases (for sake of completion).<br /><br /></div><br /><br />I always thought it was a pity that you didn't keep<br />(or maybe even look for) routines of less accuracy.<br />eg if you know your dividend will never be &gt;40<br />you might get by with less code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jun 14, 2014 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Might you add some for calculating modulo as well? As well as 16-bit routines?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 14, 2014 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bogax wrote:</div><div class="quotecontent"><div class="quotetitle">Omegamatrix wrote:</div><div class="quotecontent">I have written a number of division routines in 6502 assembly, and I'm posting them here for other people to use. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />These routines start with any value (0-255) in the accumulator and finish with the integer division result in the accumulator. They are all constant cycles and do not use X or Y. Most do require 1 temp register. I've listed all divisions from 2 to 32 below, including the trivial divide by powers of 2 cases (for sake of completion).<br /><br /></div><br /><br />I always thought it was a pity that you didn't keep<br />(or maybe even look for) routines of less accuracy.<br />eg if you know your dividend will never be &gt;40<br />you might get by with less code.</div><br />Funny you should mention that, as I was just staring at the routines I posted and it occurred to me that in some cases I might be able to go quicker by doing a division up front to reduce the sum, and follow with a cruder approximation second. As simple as that sound it never occurred to me when I wrote them.<br /><br /><br />So... I was immediately able to make five of the routines better. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> I am going to update the first post but in summary here are the updated routines:<br /><br />Old:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by 6<br />;1/6 = 1/3 * 1/2<br />;19 bytes, 32 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #21<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 10<br />;1/10 = 1/5 * 1/2<br />;19 bytes, 32 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #13<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 20<br />;1/20 = 1/5 * 1/4<br />;20 bytes, 34 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #13<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 24<br />;1/24 = 1/3 * 1/8<br />;21 bytes, 36 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #21<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 26<br />;1/26 = 1/13 * 1/2<br />;22 bytes, 39 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; clc<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr</div><br /><br /><br />And new:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by 6<br />;17 bytes, 30 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br /><br />;Divide by 10<br />;17 bytes, 30 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 20<br />;18 bytes, 32 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 24<br />;15 bytes, 27 cycles<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;sta&nbsp; &nbsp;temp<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;adc&nbsp; &nbsp;temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;adc&nbsp; &nbsp;temp<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;lsr<br /><br />;Divide by 26<br />;21 bytes, 37 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /></div><br /><br /><br />I am very happy that a new solution for divide by 10 has been found. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><br />Edit - Divide by 12 has also been superseded! <br />Double Edit - Divide by 28 too!<br /><br />old:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by 12<br />;1/12 = 1/3 * 1/4<br />;20 bytes, 34 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #21<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br /><br />;Divide by 28<br />;1/28 = 1/7 * 1/4<br />;17 bytes, 31 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr</div><br /><br />new:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by 12<br />;17 bytes, 30 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br /><br />;Divide by 28<br />;14 bytes, 24 cycles<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #2<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 14, 2014 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Didn't want to continue off topic in <a href="http://forums.nesdev.com/viewtopic.php?p=129791#p129791" class="postlink">the other thread,</a> but cool! The latest divide by 5 was in the atariage thread, but I do wish I had seen more of the others. Might as well say what I'm using them for. My game detects 49 slope heights. (flat, and 24 facing downward left, 24 facing downward right) I did the trig for the angles of those heights to find what percentage of the speed should be kept. Then I used whatever divide routine was the closest to what it would really be out of the ones I could find. <br /><br />1/2 (0.5)<br />1/4(0.25)<br />1/8(0.125)<br />etc are already accounted for obviously.<br />Then<br />3/4(.75)<br />7/8(0.875) <br />Because you can do the divide, then subtract it from the original. (In fact I do this for 1/2, because I wanted a speed of 1 to not be scaled to zero.) You can do 2/5 with divide by 5 asl etc.I could probably get a little closer with the other divides, but the biggest difference is like 0.04 and I've already gotten used to the feel of the game as is.<br /><br />I'm also using the divide by 5 for a bouncing ball that decays in strength. I looked up the coefficient of restitution for a basketball bouncing on concrete and it was .88ish. So I tried original-original/10, but that felt wrong to interact with in game, so now it's original-original/5.</div><br />Kasumi, as much as I do love writing these routines, it makes me feel even more glad to hear from people making use of them! Thank you for sharing and one day hopefully we will all be able to play your game!!<br /><br /><br />Jeff

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 14, 2014 1:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Might you add some for calculating modulo as well? As well as 16-bit routines?</div><br />With modulo, most of the time it should be easy enough to run the division routine, times the result, and subtract from the original sum. Multiplication is generally pretty easy... but sometimes can gobble up a lot of cycles.<br /><br /><br />I have written a modulo six routine before. I know I posted one on Atariage a long time ago, but IIRC it wasn't correct and I made one a few months ago that was. I will look for it. Modulo six is useful for games simulating dice rolls. I can't remember how good or bad the routine was that I came up with.<br /><br /><br />For 16-bit routines, I have written one for 10 bit division. It is in my blog here:<br /><br /><!-- m --><a class="postlink" href="http://atariage.com/forums/blog/563/entry-11044-16-bit-division-fast-divide-by-10/">http://atariage.com/forums/blog/563/ent ... ide-by-10/</a><!-- m --><br /><br />After finding that new divide by 10 today I know that the 16 bit routine can also be improved. In general 16 bit division is neither fast in terms of cycles, and cheap in terms of bytes.<br /><br /><br />Edit - found my Modulo 6 routine. It looks like I'm just integer dividing by 6, times by 6, and subtracting from the original sum:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Mod 6<br />;28 bytes, 43 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #21<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; and&nbsp; #$FC<br />&nbsp; sta&nbsp; temp2<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp2<br />&nbsp; sbc&nbsp; temp<br />&nbsp; eor&nbsp; #$FF</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chitselb</b> [ Sat Jun 14, 2014 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />These are great!  I needed a divide by 40 and modulo 40 for a <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/DEC_Radix-50">http://en.wikipedia.org/wiki/DEC_Radix-50</a><!-- m --> decoder in a game I'm writing for the Commodore PET 2001( <!-- m --><a class="postlink" href="http://pettil.tumblr.com">http://pettil.tumblr.com</a><!-- m --> ) and the divide by 10 here looks like a good start.  Thank you!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Jun 14, 2014 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How does this work?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 14, 2014 9:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chitselb wrote:</div><div class="quotecontent">These are great!  I needed a divide by 40 and modulo 40 for a <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/DEC_Radix-50">http://en.wikipedia.org/wiki/DEC_Radix-50</a><!-- m --> decoder in a game I'm writing for the Commodore PET 2001( <!-- m --><a class="postlink" href="http://pettil.tumblr.com">http://pettil.tumblr.com</a><!-- m --> ) and the divide by 10 here looks like a good start.  Thank you!</div><br />The good thing here is that the 6502 was used by so many systems. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />As you know, once you have divided by 10 then you are just two shifts away from a divide by 40. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by 40<br />;19 bytes, 34 cycles<br />&nbsp; lsr<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror&nbsp; <br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; lsr</div><br /><br />But here is an alternate code. It costs 1 more byte, but saves two cycles... so use whichever one bests suites you.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by 40<br />;20 bytes, 32 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; #1<br />&nbsp; adc&nbsp; temp<br />&nbsp; and&nbsp; #$C0<br />&nbsp; rol<br />&nbsp; rol<br />&nbsp; rol</div><br /><br />And a modulo routine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Mod 40<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; #13<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; and&nbsp; #$E0<br />&nbsp; sta&nbsp; temp2&nbsp; ;x32<br />&nbsp; lsr<br />&nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;x8<br />&nbsp; adc&nbsp; temp2&nbsp; ;x40<br />&nbsp; sbc&nbsp; temp<br />&nbsp; eor&nbsp; #$FF</div><br /><br />Or both:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; #1<br />&nbsp; adc&nbsp; temp<br />&nbsp; and&nbsp; #$C0<br />&nbsp; rol<br />&nbsp; rol<br />&nbsp; rol<br /><br />&nbsp; sta&nbsp; divideResult&nbsp; &nbsp;; divide 40 result... TAY, TAX, PHA could be used<br /><br />&nbsp; asl<br />&nbsp; asl<br />&nbsp; asl<br />&nbsp; sta&nbsp; temp2&nbsp; ;x8<br />&nbsp; asl<br />&nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;x32<br />&nbsp; adc&nbsp; temp2&nbsp; ;x40<br />&nbsp; sbc&nbsp; temp<br />&nbsp; eor&nbsp; #$FF<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; mod 40 result</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jun 14, 2014 10:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're dividing by 10 to make a binary to decimal converter, there are ways to do that other than div/mod.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sat Jun 14, 2014 10:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">How does this work?</div><br />You are dividing and adding that result to your original sum, and then repeating the process. The key is find the correct and shortest sequence of divisions you have to do.<br /><br />I had a simple idea for finding the divisions. I used a brute attack approach running every possible combination in an excel sheet. I only tested for 1/x and ignored truncation... I just looked for division combinations that were the most accurate under perfect circumstances. Those were the routines I focused on testing<br /><br />From there I built a bunch of tools. I made another excel sheet to test division for all input values (0-255), some C programs to do the same thing as both excel sheets, a rom for the 2600 to test for verification and help solve correction factors for some routines. Whenever you see ADC #xx in one of the routines you are looking at a correction factor I had to introduce. Sometimes I found I could also use just CLC or SEC at certain points in the routine to do the correction.<br /><br /><br />The usage of the routines is easy. The accumulator starts with the value to be divided, and ends with the integer division result.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 12:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Final thoughts on divide by 40 before I go to bed. This is such a big number that you are approaching the limit where it is simply better to do a looped divide... if you don't mind the extra cycles and spending X or Y.<br /><br /><br />I had another idea, this time using both X and Y. This routine takes 3 more bytes then the combined Div 40 and Mod 40 routine, but it is faster (45 cycles vs 56). It does a comparison and add to get the integer divide. After that I times the result by 4, as I'm reusing the bytes in the comparison as a look up table. The values are already there and nicely spread apart by 4 bytes so why not? I had to add a dummy load at the beginning to get first look up value, that's why the extra LDA #0 is in there.<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Divide by and Mod 40 combined<br />;38 bytes, 45 cycles<br />;Y = value to be divided<br /><br />InterlacedMultiplyByFortyTable:<br />&nbsp; lda&nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; ; dummy load, #0 used in LUT<br />&nbsp; lda&nbsp; #0<br />&nbsp; cpy&nbsp; #40<br />&nbsp; adc&nbsp; #0<br />&nbsp; cpy&nbsp; #80<br />&nbsp; adc&nbsp; #0<br />&nbsp; cpy&nbsp; #120<br />&nbsp; adc&nbsp; #0<br />&nbsp; cpy&nbsp; #160<br />&nbsp; adc&nbsp; #0<br />&nbsp; cpy&nbsp; #200<br />&nbsp; adc&nbsp; #0<br />&nbsp; cpy&nbsp; #240<br />&nbsp; adc&nbsp; #0<br />&nbsp; <br />&nbsp; sta&nbsp; divideResult&nbsp; &nbsp; &nbsp; ; Integer divide 40<br />&nbsp; <br />&nbsp; asl<br />&nbsp; asl<br />&nbsp; tax<br />&nbsp; tya<br />&nbsp; sec<br />&nbsp; sbc&nbsp; InterlacedMultiplyByFortyTable+1,X<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = Mod 40</div><br /><br />Right away I look at this routine and think of putting in some branching to save bytes, but that would destroy the look-up table that's built in. It's a neat if not convoluted routine on its own... I'm just not to sure if it is really useful, but I like to be creative.  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jun 15, 2014 2:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Unsigned Integer Division Routines</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The most useful in the case of the NES is probably divide-by-15, as a nametable can show 15 2x2 metatiles vertically, so you'll need to divide by 15 before knowing where to write your metatile when scrolling vertically. (yes I know there are workaround this, but still this is one of the ways to do this).<br /><br />As for divide by power of two, you don't have to remind us they're shifts, I think everyone already knowns.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>