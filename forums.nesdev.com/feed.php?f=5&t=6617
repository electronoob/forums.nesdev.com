<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=6617" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-07-25T05:34:46-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=6617</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-07-25T05:34:46-07:00</updated>
<published>2010-07-25T05:34:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64845#p64845</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64845#p64845"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64845#p64845"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I think that if both techniques are equivalent mathematically, it's likely both are about the same amount of computations so are about the same slowness.<br /></div><br />Unless one kind of computation is faster on a given piece of hardware than another kind of computation. For example, 6502 family has hardware adds and software muls unless you're using a memory-mapped multiplier (like the one in the MMC5 or Super NES). See <a href="http://en.wikipedia.org/wiki/Strength_reduction" class="postlink">Strength reduction on Wikipedia</a>. Perhaps the steps "read texel here" and "write pixel" overwhelmed "find next texture coordinate".<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 25, 2010 5:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-07-25T05:24:44-07:00</updated>
<published>2010-07-25T05:24:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64842#p64842</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64842#p64842"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64842#p64842"><![CDATA[
I'd like to know if this really is any faster. I think that if both techniques are equivalent mathematically, it's likely both are about the same amount of computations so are about the same slowness. I might be wrong - but I tried to go the "add" way to scale a bitmap on the NES and I kind of failed it was slow as well too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jul 25, 2010 5:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-07-25T05:21:29-07:00</updated>
<published>2010-07-25T05:21:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64841#p64841</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64841#p64841"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64841#p64841"><![CDATA[
For rotation, you don't need any matrix muls in the inner loop, just two adds per pixel and two adds per scanline. I've implemented a software mode 7 engine on the PC before.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 25, 2010 5:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-07-25T02:43:44-07:00</updated>
<published>2010-07-25T02:43:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64835#p64835</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64835#p64835"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64835#p64835"><![CDATA[
I wrote a demo that did that 2 years ago. Too bad I suck and don't have it on my HD any longer but I'm pretty sure thanks god someone made a back-up of at least the ROM somewhere so you'd be able to find it on the net.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't think that the actual rotation is the slow part, since a lot of it could be sped up with look up tables (for example a table indicating the coordinates of the pixel to use for each position at all needed angles), it's the pixel manipulation that's a killer, at least in the NES. I think that dynamic sprite rotation is out of the question for actual games on the NES... If anyone really needs it, better pre-render the sprites at the needed angles.<br /></div><br />In fact, to rotate a X*Y sized image, you need to multiply X*Y vectors by a 2*2 matrix (3*3 if you need to change the origin of the rotation but that's another story) - resulting in a 4*X*Y multiplications operations per frame (or 9*X*Y if you want to change the center point). Of course, symetries inside the matrix allows to fast things up a bit - but that's still easily a crazy number of multiplications, that even if done fast with lockup tables takes up a crazy amount of CPU time.<br /><br />As you say, dressing individual pixels is also a complex and you'd definitely want to use some lockup tables for it. I remember it was a headache when I wrote that demo 2 years ago.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jul 25, 2010 2:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-20T13:00:01-07:00</updated>
<published>2010-07-20T13:00:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64525#p64525</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64525#p64525"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64525#p64525"><![CDATA[
It would take another approx 30 cycles to convert a packed pixel into a planar pixel.  So it's more like 1k pixels.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Tue Jul 20, 2010 1:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[smkd]]></name></author>
<updated>2010-07-20T11:58:32-07:00</updated>
<published>2010-07-20T11:58:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64521#p64521</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64521#p64521"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64521#p64521"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />This method takes approximately 30 cycles per pixel, without planar conversion.  That's 3,600,000 / 60 / 30 = 2,000 pixels or almost 2 32x32 sprites.  Too bad Super Nintendo uses planar mapping, and would take a little longer.<br /></div><br /><br />you'll get much less than 2k pixels after bitplane conversion and all those reads  + writes to RAM happening at 2.68Mhz.  FastROM can only help so much there.  If it had the Genesis packed pixel format it would've been nicer.  It must have helped plenty for the games that did 3D with nothing but the 68k.  Buffering pre-rotated and/or scaled graphics in RAM to use on demand is the only use I can see for this and it's alot of RAM to burn depending on the graphics required.  Would be nice on ROM space though.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />If you look at arcade games that do lots of scaling and rotation, it seems like they often had 2 (or 3) 68000 CPUs running at 10 or 12mhz and probably varying degrees of hardware assistance.<br /></div><br /><br />Sega Y board seems to be really powerful in this regard.  Triple 68k each with 'instant' multiply and divide custom chips along with sprite scaling in hardware for fast pseudo-3D.  Galaxy Force II looks great running at 60FPS.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3295">smkd</a> — Tue Jul 20, 2010 11:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-20T08:56:06-07:00</updated>
<published>2010-07-20T08:56:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64509#p64509</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64509#p64509"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64509#p64509"><![CDATA[
I just thought of an easy way of doing this with a 65816.  Use the memory like a 256x256 bitmap image, where the low address byte is X pixel and the high address byte is Y pixel.  Instead of doing it in a tight loop pixel by pixel, an easier method is to do calculate every row of pixels as a whole.<br /><br />First calculate the starting X and Y position of the first pixel of the row of pixels.  (low bytes are decimals, high bytes are actual pixel locations)  Then calculate the Y position of every pixel in the row, by loading the accumulator with the Y position, then repeatedly add a constant to the accumulator and store the results in a list with an unused byte between results.  After that do the same with the X position, but store the results exactly one byte before the Y position.  Now the high byte of the X position is stored over the low byte of the Y position and now makes the memory address of the pixel.  Now  all you have to do is copy and paste the pixels from the calculated memory addresses to wherever your storing the rotated sprite.<br /><br />This method takes approximately 30 cycles per pixel, without planar conversion.  That's 3,600,000 / 60 / 30 = 2,000 pixels or almost 2 32x32 sprites.  Too bad Super Nintendo uses planar mapping, and would take a little longer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Tue Jul 20, 2010 8:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-19T18:23:21-07:00</updated>
<published>2010-07-19T18:23:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64478#p64478</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64478#p64478"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64478#p64478"><![CDATA[
A common bottleneck in a lot of early computers when it comes to cpu pixel manipulation is lack of 8-bit packed pixel mode.  Most computers used nibbles to defined colors, or even worse used planar format.<br /><br />Maybe 4-bit packed pixel mode isn't that bad, since you can do dual-pixel rotation, but too much of that would get pretty obvious if you rotate to far either direction.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Jul 19, 2010 6:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-07-19T16:45:46-07:00</updated>
<published>2010-07-19T16:45:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64474#p64474</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64474#p64474"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64474#p64474"><![CDATA[
I was writing a game that used sprite rotation on the NES a while back and pre-rendered was the way to go.  That also means you can do touch-ups on the graphics since there's sure to be at least one odd-looking pixel in one of the frames.  Just simply moving the data will always be the fastest.<br /><br />If you look at arcade games that do lots of scaling and rotation, it seems like they often had 2 (or 3) 68000 CPUs running at 10 or 12mhz and probably varying degrees of hardware assistance.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Jul 19, 2010 4:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-19T11:50:49-07:00</updated>
<published>2010-07-19T11:50:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64464#p64464</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64464#p64464"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64464#p64464"><![CDATA[
I tried it earlier on the year, and I managed to pixel rotate a little 8x8 sprite, but I also tried a 16x16 sprite and it caused lagging.  Since I was planning on rotating big sprites, I tried to find a way to divide the work of rotating sprites between frames, but it got pretty complicated and I gave up.<br /><br />Now I'm just using a combination of prerendered sprites, and metasprite placement + dynamic tile scrolling tricks.  If my game takes up too much memory, I might use the cpu to rotate sprites at 90 degree angles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Jul 19, 2010 11:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-07-19T10:40:20-07:00</updated>
<published>2010-07-19T10:40:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64462#p64462</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64462#p64462"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64462#p64462"><![CDATA[
I don't think that the actual rotation is the slow part, since a lot of it could be sped up with look up tables (for example a table indicating the coordinates of the pixel to use for each position at all needed angles), it's the pixel manipulation that's a killer, at least in the NES. I think that dynamic sprite rotation is out of the question for actual games on the NES... If anyone really needs it, better pre-render the sprites at the needed angles.<br /><br />On the SNES it might be possible for a few sprites at a time I think, but I don't know enough about it to make more specific comments.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jul 19, 2010 10:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2010-07-19T10:25:34-07:00</updated>
<published>2010-07-19T10:25:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64461#p64461</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64461#p64461"/>
<title type="html"><![CDATA[How fast of a cpu is needed to rotate sprites in realtime?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6617&amp;p=64461#p64461"><![CDATA[
This might be an interesting topic.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Jul 19, 2010 10:25 am</p><hr />
]]></content>
</entry>
</feed>