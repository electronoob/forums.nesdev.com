<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - .db question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">.db question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=432">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=432</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nathaniel</b> [ Sun Jul 24, 2005 12:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>.db question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to understand why the following code doesn't work the way it is described to (this is slightly modified code from one of GBAGuy's tutorials). I'm trying to use variables to set the x and y position of my sprite, instead of immediate numbers (#50 and such). Here's what I'm doing:
<br />
<br />        .bank 0   ; bank 0 - our place for code.
<br />	.org $0000
<br />X_Pos:	.db	50
<br />Y_Pos:	.db	50
<br />	.org $8000  ; code starts at $8000
<br />Start:  (more code here)
<br />
<br />I'm setting X_Pos and Y_Pos to 50. Later in the code I'm setting the X and Y values with these labels:
<br />
<br />        lda Y_Pos  ; load Y value
<br />	sta $2004 ; store Y value
<br />	lda #$01  ; tile number 1
<br />	sta $2004 ; store tile number
<br />	lda #$00 ; no special junk
<br />	sta $2004 ; store special junk
<br />	lda X_Pos  ; load X value
<br />	sta $2004 ; store X value
<br />
<br />When I run this in FCEUltra or Nestopia, the sprite doesn't display at 50, 50 but 0,0 instead.
<br />
<br />Can someone tell me why this is happening? I used the debugger in FCEUltra, and it looks like the memory at $0000 and $0001 (x and y pos) doesn't get set to 50 like it's supposed to.
<br />
<br />Thanks in advance!
<br />
<br />Nathaniel
<br />
<br />Full code below:
<br />
<br />
<br />;;--- CODE START ---;;
<br />
<br />	; INES header stuff
<br />	.inesprg 1   ; 1 bank of code
<br />	.ineschr 1   ; 1 bank of spr/bkg data
<br />	.inesmir 1   ; something always 1
<br />	.inesmap 0   ; we use mapper 0
<br />
<br />	.bank 1   ; following goes in bank 1
<br />	.org $FFFA  ; start at $FFFA
<br />	.dw 0    ; dw stands for Define Word and we give 0 as address for NMI routine
<br />	.dw Start ; give address of start of our code for execution on reset of NES.
<br />	.dw 0   ; give 0 for address of VBlank interrupt handler, we tell PPU not to
<br />	; make an interrupt for VBlank.
<br />
<br />	.bank 0   ; bank 0 - our place for code.
<br />	.org $0000
<br />X_Pos:	.db	50
<br />Y_Pos:	.db	50
<br />	.org $8000  ; code starts at $8000
<br />Start:  
<br />	lda #%00001000  ; do the setup of PPU
<br />	sta $2000       ; that we
<br />	lda #%00011110  ; talked about
<br />	sta $2001       ; on a previous day
<br />
<br />	ldx #$00    ; clear X
<br />
<br />	lda #$3F    ; have $2006 tell
<br />	sta $2006   ; $2007 to start
<br />	lda #$00    ; at $3F00 (pallete).
<br />	sta $2006
<br />
<br />loadpal:                ; this is a freaky loop
<br />	lda tilepal, x  ; that gives 32 numbers
<br />	sta $2007       ; to $2007, ending when
<br />	inx             ; X is 32, meaning we
<br />	cpx #32         ; are done.
<br />	bne loadpal     ; if X isn't =32, goto "loadpal:" line.
<br />
<br />waitblank:         ; this is the wait for VBlank code from above
<br />	lda $2002  ; load A with value at location $2002
<br />	bpl waitblank  ; if bit 7 is not set (not VBlank) keep checking
<br />
<br />	lda #$00   ; these lines tell $2003
<br />	sta $2003  ; to tell
<br />	lda #$00   ; $2004 to start
<br />	sta $2003  ; at $0000.
<br />
<br />	lda Y_Pos  ; load Y value
<br />	sta $2004 ; store Y value
<br />	lda #$01  ; tile number 1
<br />	sta $2004 ; store tile number
<br />	lda #$00 ; no special junk
<br />	sta $2004 ; store special junk
<br />	lda X_Pos  ; load X value
<br />	sta $2004 ; store X value
<br />	; and yes, it MUST go in that order.
<br />
<br />infin:
<br />	jmp infin   ; JuMP to infin. note that this loop never ends. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />tilepal: .incbin "our.pal" ; include and label our pallete
<br />
<br />	.bank 2   ; switch to bank 2
<br />	.org $0000  ; start at $0000
<br />	.incbin "our.bkg"  ; empty background first
<br />	.incbin "our.spr"  ; our sprite pic data
<br />	; note these MUST be in that order.
<br />
<br />	;;--- WERE DONE / CODE END ---;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jul 24, 2005 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You MUST wait 2 VBlanks before doing anything with the PPU : First write #$00 to both $2000 and $2001 then check for two VBlanks via $2002.7
<br />Eventually, it's not good to write the sprite data trough $2004, use $4014 instead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nathaniel</b> [ Sun Jul 24, 2005 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>.db question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">You MUST wait 2 VBlanks before doing anything with the PPU : First write #$00 to both $2000 and $2001 then check for two VBlanks via $2002.7<br />Eventually, it's not good to write the sprite data trough $2004, use $4014 instead.</div>
<br />
<br />Okay, so I have changed the code to the following:
<br />
<br />;;--- CODE START ---;;
<br />
<br />	; INES header stuff
<br />	.inesprg 1   ; 1 bank of code
<br />	.ineschr 1   ; 1 bank of spr/bkg data
<br />	.inesmir 1   ; something always 1
<br />	.inesmap 0   ; we use mapper 0
<br />
<br />	.bank 1   ; following goes in bank 1
<br />	.org $FFFA  ; start at $FFFA
<br />	.dw 0    ; dw stands for Define Word and we give 0 as address for NMI routine
<br />	.dw Start ; give address of start of our code for execution on reset of NES.
<br />	.dw 0   ; give 0 for address of VBlank interrupt handler, we tell PPU not to
<br />	; make an interrupt for VBlank.
<br />
<br />	.bank 0   ; bank 0 - our place for code.
<br />	.org $0000
<br />X_Pos:	.db	50
<br />Y_Pos:	.db	50
<br />	.org $8000  ; code starts at $8000
<br />Start:  
<br />	lda #%00000000  ; do the setup of PPU
<br />	sta $2000       ; that we
<br />	lda #%00000000  ; talked about
<br />	sta $2001       ; on a previous day
<br />	
<br />waitblank:         ; this is the wait for VBlank code from above
<br />	lda $2002  ; load A with value at location $2002
<br />	bpl waitblank  ; if bit 7 is not set (not VBlank) keep checking
<br />	
<br />waitblank2:
<br />	lda $2002  ; load A with value at location $2002
<br />	bpl waitblank2  ; if bit 7 is not set (not VBlank) keep checking
<br />	
<br />	lda #%00001000  ; do the setup of PPU
<br />	sta $2000       ; that we
<br />	lda #%00011110  ; talked about
<br />	sta $2001       ; on a previous day
<br />
<br />
<br />	ldx #$00    ; clear X
<br />
<br />	lda #$3F    ; have $2006 tell
<br />	sta $2006   ; $2007 to start
<br />	lda #$00    ; at $3F00 (pallete).
<br />	sta $2006
<br />
<br />loadpal:                ; this is a freaky loop
<br />	lda tilepal, x  ; that gives 32 numbers
<br />	sta $2007       ; to $2007, ending when
<br />	inx             ; X is 32, meaning we
<br />	cpx #32         ; are done.
<br />	bne loadpal     ; if X isn't =32, goto "loadpal:" line.
<br />	
<br />waitblank3:         ; this is the wait for VBlank code from above
<br />	lda $2002  ; load A with value at location $2002
<br />	bpl waitblank3  ; if bit 7 is not set (not VBlank) keep checking
<br />
<br />
<br />	lda #$00   ; these lines tell $2003
<br />	sta $2003  ; to tell
<br />	lda #$00   ; $2004 to start
<br />	sta $2003  ; at $0000.
<br />
<br />	lda Y_Pos  ; load Y value
<br />	sta $2004 ; store Y value
<br />	lda #$01  ; tile number 1
<br />	sta $2004 ; store tile number
<br />	lda #$00 ; no special junk
<br />	sta $2004 ; store special junk
<br />	lda X_Pos  ; load X value
<br />	sta $2004 ; store X value
<br />	; and yes, it MUST go in that order.
<br />
<br />infin:
<br />	jmp infin   ; JuMP to infin. note that this loop never ends. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />tilepal: .incbin "our.pal" ; include and label our pallete
<br />
<br />	.bank 2   ; switch to bank 2
<br />	.org $0000  ; start at $0000
<br />	.incbin "our.bkg"  ; empty background first
<br />	.incbin "our.spr"  ; our sprite pic data
<br />	; note these MUST be in that order.
<br />
<br />	;;--- WERE DONE / CODE END ---;;
<br />
<br />
<br />However, this makes no difference. The sprite still appears at 0, 0. The thing is, if I change:
<br />
<br />        lda Y_Pos  ; load Y value
<br />	sta $2004 ; store Y value
<br />	lda #$01  ; tile number 1
<br />	sta $2004 ; store tile number
<br />	lda #$00 ; no special junk
<br />	sta $2004 ; store special junk
<br />	lda X_Pos  ; load X value
<br />	sta $2004 ; store X value
<br />	; and yes, it MUST go in that order.
<br />
<br />To:
<br />
<br />        lda #50  ; load Y value
<br />	sta $2004 ; store Y value
<br />	lda #$01  ; tile number 1
<br />	sta $2004 ; store tile number
<br />	lda #$00 ; no special junk
<br />	sta $2004 ; store special junk
<br />	lda #50  ; load X value
<br />	sta $2004 ; store X value
<br />	; and yes, it MUST go in that order.
<br />
<br />then the code works perfectly, displaying the sprite at 50, 50 like it's supposed to. It's the variables that I'm setting up (X_Pos and Y_Pos) that aren't working (and don't work in the tutorial, either, hence the question). Another funny thing is if I change:
<br />
<br />        .bank 0   ; bank 0 - our place for code.
<br />	.org $0000
<br />X_Pos:	.db	50
<br />Y_Pos:	.db	50
<br />	.org $8000  ; code starts at $8000
<br />Start:  (more code here)
<br />
<br />To:
<br />
<br />        .bank 0   ; bank 0 - our place for code
<br />	.org $8000  ; code starts at $8000
<br />X_Pos:	.db	50
<br />Y_Pos:	.db	50
<br />Start:  (more code here)
<br />
<br />this works just fine as well, showing the sprite at 50, 50 when I use the variable names X_Pos and Y_Pos. Thing is, I shouldn't have to put my variable in my code space.
<br />
<br />I'm using NESASM to assemble this, if that makes any difference.
<br />
<br />Thanks again for the timely response!
<br />
<br />Nathaniel

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Jul 24, 2005 1:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been following GBA guy's tutorials since I started NES developement, and I've noticed he puts together unreliable, sloppy, messy code. Something with his code is always an unreliable system, and I know he's just explaining it to give you the general idea, but he needs to explain the stuff that is reliable on most emulators and whatnot. Ya know what I'm saying? like his horribly slapped together "easy large loads" where he sets up the PPU on the bottom? What is that? I just used the typical ppu set up with rewriting that code, and it worked fine. Maybe I just hate looking at his codes because I hate looking at commented code, because it's messy, and confusing. I don't even know why I'm talking, so I'm going to stop. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Jul 24, 2005 3:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your variables are .org'd to be at $0000 -- that's RAM.  .db does not work for initializing RAM, you have to initialize it yourself through code.  .db will only store bytes in the binary (since RAM does not go in the binary, it looks like .db does nothing more than give you a label to reference your variables).
<br />
<br />If you keep your vars .org'd at $0000, you can put the following code in your reset vector to init them:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #50<br />STA X_Pos<br />STA Y_Pos<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Jul 26, 2005 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm sorry, did I read you correctly when you said $0000 was RAM? <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  Doesn't RAM start a $0200?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Tue Jul 26, 2005 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />RAM exists at $0000-$1FFF, though only $0000-$07FF is unique data ($0800-$0FFF/$1000-$17FF/$1800-$1FFF are simply mirrors of $0000-$07FF). $0000-$00FF is <strong>zero page</strong> memory (instructions using zero page memory are both smaller and faster; also, zero page memory is the ONLY memory that can hold pointers to be used with the indirect addressing modes) and $0100-$01FF is the stack page (which you'll probably want to avoid using).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>