<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=4908" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-03-03T11:51:28-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=4908</id>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-03-03T11:51:28-07:00</updated>
<published>2009-03-03T11:51:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43861#p43861</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43861#p43861"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43861#p43861"><![CDATA[
Sorry, I didn't mean for that to sound like "what the heck?". And believe it or not, I know all about your compression scheme. I think it's pretty cool, actually. Mine is similar, but not as extreme (I have screens made up of 8x8 metatiles, so it's 2 steps behind your compression scheme). The only reason I asked that the index was 8 bits was because I was thinking you might be able to get away with precalculating a certain amount. I was thinking you might have something like a 64 by 4 level, in which case just precalculate 4 values at the beginning of the level and stick them in RAM.<br /><br />I've dealt with a similar size limit before, though I ditched it for a constant size. Would you feel bad forcing your Y to be limited to something like 32 blocks? Because if you didn't, then you could use that space in RAM for a look up table 32 bytes in length rather than the code. Then just do a simple:<br /><br />ldx YHigh<br />lda LUT,x<br />clc<br />adc XHigh<br /><br />But I could understand if you felt bad forcing your limit to be 32 screens high, like if you wanted a big vertical level that's only 1 screen wide.<br /><br />Actually, it's even possible that you could use those 32 values to do a simple calculation to get the desired values for a Y number larger than 32. I mean, if Y = 64, you can just shift the value for Y = 32 over once. But when you start needing to calculate for things like Y = 53, then you might as well just skip the complexity of that and do what you're doing.<br /><br />EDIT: Oh, and nonchalantly is a really strange sounding word. It sounds like some sort of taco or burrito I think. It basically means "carelessly", or without concern (kind of lazy too). Like "I nonchalantly walked into work 2 hours late" or "I nonchalantly sat down in the business meeting and drank a can of beer, farting and burping the whole time." Does the meaning make more sense now?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Tue Mar 03, 2009 11:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-03-03T02:13:39-07:00</updated>
<published>2009-03-03T02:13:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43857#p43857</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43857#p43857"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43857#p43857"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />who said anything about <em>nonchalantly</em>?<br /></div><br />I must confess I have no idea what this word means, so I may have misinterpreted what Celius said.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So <em>y* width</em> is never going to result in a value greater than 8bit?<br /></div><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I second tomaitheous's question: the result is 8 bits? If that's the case, then what are your max X/Y dimensions?<br /></div><br />I know, it may seem strange that an index into a level map is only 8 bits, but you may remember that in my level compression scheme, the level map indexes blocks that are 256x256 pixels in size, and with 256 of those the levels can be quite big (larger than anything I've already seen on the NES). Once I reach this large block, I can decompose it into smaller ones to get tile and attribute data to write to the PPU, as well as collision data.<br /><br />The limit is 128 for each dimension, I just have to watch out and never use more than 256 blocks in a level map. So, if a level is 128 blocks wide (32768 pixels), it can be at most 2 blocks tall (512 pixels).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Mar 03, 2009 2:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-03-03T00:32:29-07:00</updated>
<published>2009-03-03T00:32:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43855#p43855</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43855#p43855"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43855#p43855"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />Umm.. who said anything about <em>nonchalantly</em>?<br /></div><br /><br />Well I guess it's my bad. I sort of interpreted "You don't have 256bytes to spare in RAM for a dynamic LUT?" as "Don't you have 256bytes to spare in RAM for a dynamic LUT?", which would imply that it should be common to have 256 spare bytes, in which case you could nonchalantly use it.<br /><br />I second tomaitheous's question: the result is 8 bits? If that's the case, then what are your max X/Y dimensions?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Tue Mar 03, 2009 12:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2009-03-02T23:57:35-07:00</updated>
<published>2009-03-02T23:57:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43853#p43853</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43853#p43853"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43853#p43853"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />256 bytes of RAM is not something you nonchalantly assign to something on the NES.<br /></div><br /><br /> Umm.. who said anything about <em>nonchalantly</em>?<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />(y * width + x)<br /></div><br /><br /> So <em>y* width</em> is never going to result in a value greater than 8bit?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Mar 02, 2009 11:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-03-02T18:24:16-07:00</updated>
<published>2009-03-02T18:24:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43843#p43843</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43843#p43843"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43843#p43843"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />Could you post a little more about your method? I'm not sure I understand? Also, what's the cycle count for it?<br /></div><br />I'll post the code at the end, and the cycle count varies too much depending on the numbers, but I'd think the generated code is at least twice as fast, but very often, more than that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You don't have 256bytes to spare in RAM for a dynamic LUT?<br /></div><br />No, I don't.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />How many different possible multipliers are there? If there are only a few, just have a routine for each constant.<br /></div><br />I considered that. The code is used to calculate the index of a particular screen in the level map (y * width + x), so I considered using a different multiplication routine per level, pointed by the header of the level. However, as far as I can tell, I can't make anything faster than the generated codes, so I fail to see any advantage besides saving some RAM (with the disadvantage of using quite a bit of ROM).<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />256 bytes of RAM is not something you nonchalantly assign to something on the NES.<br /></div><br />That sums up my opinion on using so much memory. This is a platformer, and uses only the stock 2KB of RAM, so wasting 256 bytes is simply out of the question.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I think the idea of dynamic code generation is cool (especially for Vblank updates like Dwedit said)<br /></div><br />I disagree. The amount of memory limits how many bytes you can update with this method (if you're not using extra RAM), so I fail so see why you'd want do much speed if the amount of data you can write is limited... you could probably write more data with slower code, because more data would be available. I do all my PPU writing wlike <a href="http://nesdev.com/bbs/viewtopic.php?p=32622#32622" class="postlink">this</a>, and it's pretty fast.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />It's self-modifying code, other than changing JMP addresses (NMI/IRQ vectors pointing to RAM) I don't use it much.<br /></div><br />Yeah, before this, I didn't either.<br /><br />Here is the code I used to test the idea (meaning it's not polished at all), if anyone is interested. It runs on the 6502 similator:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Temp = $00<br />LevelWidth = $34<br />MultiplicationRoutine = $100<br /><br />   .org $8000<br /><br />   ;this the multiplier<br />   lda #$34<br />   sta LevelWidth<br /><br />   ;start generating code<br />   ldx #$00<br />   lda #$01<br />   cmp LevelWidth<br />   beq Done<br /><br />DoShifts:<br />   lsr LevelWidth<br />   bcs ShiftsDone<br />   lda #$0A ;asl<br />   sta MultiplicationRoutine, x<br />   inx<br />   bcc DoShifts<br />ShiftsDone:<br /><br />   lda LevelWidth<br />   beq Done<br /><br />   ;write the code to shift the accumulator left<br />   lda #$0A ;asl<br />   sta MultiplicationRoutine, x<br />   inx<br /><br />   ;write the code to store the accumulator<br />   lda #$85 ;sta<br />   sta MultiplicationRoutine, x<br />   inx<br />   lda #Temp<br />   sta MultiplicationRoutine, x<br />   inx<br /><br />   ;write the code to rotate the accumulator right<br />   lda #$6A ;ror<br />   sta MultiplicationRoutine, x<br />   inx<br /><br />DoAdditions:<br />   lsr LevelWidth<br />   bcc NoAddition<br />   ;write the code to add the accumulator to the stored value<br />   lda #$65 ;adc<br />   sta MultiplicationRoutine, x<br />   inx<br />   lda #Temp<br />   sta MultiplicationRoutine, x<br />   inx<br />NoAddition:<br />   lda LevelWidth<br />   beq Done<br />   ;write the code to shift the stored value left<br />   lda #$06 ;asl<br />   sta MultiplicationRoutine, x<br />   inx<br />   lda #Temp<br />   sta MultiplicationRoutine, x<br />   inx<br />   jmp DoAdditions<br /><br />Done:<br />   ;write the code to return<br />   lda #$4C ;jmp<br />   sta MultiplicationRoutine, x<br />   inx<br />   lda #&lt;MultiplicationDone<br />   sta MultiplicationRoutine, x<br />   inx<br />   lda #&gt;MultiplicationDone<br />   sta MultiplicationRoutine, x<br /><br /><br />   ;test the generated code<br />   lda #$03<br />   jmp MultiplicationRoutine<br />MultiplicationDone:<br />   ;accumulator holds the result</div><br />After running the code, open the disassembly window and go to $0100 to see the generated code. I'm not sure I'm creating the absolute optimal code, but it's the best I could do so far.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Mar 02, 2009 6:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2009-03-02T17:56:42-07:00</updated>
<published>2009-03-02T17:56:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43842#p43842</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43842#p43842"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43842#p43842"><![CDATA[
It's self-modifying code, other than changing JMP addresses (NMI/IRQ vectors pointing to RAM) I don't use it much.  I've used unrolled self-modifying code for VRAM updates, for the speed.  It can waste a lot of memory, but that's cheap and easy to come by, especially ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Mar 02, 2009 5:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-03-02T17:00:52-07:00</updated>
<published>2009-03-02T17:00:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43839#p43839</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43839#p43839"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43839#p43839"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />You don't have 256bytes to spare in RAM for a dynamic LUT?<br /></div><br /><br />256 bytes of RAM is not something you nonchalantly assign to something on the NES. Though I do find myself doing that given the 5k of SRAM I can work with that's not used for saving games, I would really hesitate to use it for a look up table.<br /><br />I think the idea of dynamic code generation is cool (especially for Vblank updates like Dwedit said), but consider the amount of complexity it adds to the program in terms of space consumption. Now that you may have to do more checks and stuff, how many bytes does that accumulate to? Is it more than if you wrote individual routines like Blargg suggested? If so, then you should do what Blargg suggested and write individual routines and save yourself the trouble. But I am curious as to what kind of complexity this really adds. Is it not just as simple as a JSR to RAM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Mon Mar 02, 2009 5:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2009-03-02T15:34:59-07:00</updated>
<published>2009-03-02T15:34:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43837#p43837</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43837#p43837"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43837#p43837"><![CDATA[
Generating code to run in RAM is farily common for games which want to do lots of writes during VBLANK.  You just modify the second byte of LDA #XX instructions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Mar 02, 2009 3:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-03-02T09:45:04-07:00</updated>
<published>2009-03-02T09:45:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43831#p43831</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43831#p43831"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43831#p43831"><![CDATA[
It sounds cool to have code that generate some other code in RAM for the NES; but I admit it's hard to see many cases where this is really usefull, but it sure is cool. I have already used techniques where some code is initialised from ROM to RAM and then modified afterwards, and code that generate an unrolled loop but not a routine that generate code on it's own.<br /><br />For your case you could just use 256 bytes of RAM and generate a table for the multiplication, altough if you can waste less RAM that way then I guess it's good.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Mar 02, 2009 9:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2009-03-02T02:25:27-07:00</updated>
<published>2009-03-02T02:25:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43823#p43823</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43823#p43823"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43823#p43823"><![CDATA[
1/8th? How do you know he's not using 8k SRAM at $6000?<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If a 32-byte dynamically recompiled code can do the work of a 256-byte table, reclaiming those extra 224 bytes can free up space for all sorts of things, especially on such a low memory environment as the NES.<br /></div><br /><br /> Unless you need the speed over than space.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Mar 02, 2009 2:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2009-03-02T02:21:50-07:00</updated>
<published>2009-03-02T02:21:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43822#p43822</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43822#p43822"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43822#p43822"><![CDATA[
How many different possible multipliers are there? If there are only a few, just have a routine for each constant.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Mar 02, 2009 2:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-01T21:39:16-07:00</updated>
<published>2009-03-01T21:39:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43818#p43818</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43818#p43818"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43818#p43818"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />You don't have 1/8 of your RAM for a dynamic LUT?<br /></div><br />If a 32-byte dynamically recompiled code can do the work of a 256-byte table, reclaiming those extra 224 bytes can free up space for all sorts of things, especially on such a low memory environment as the NES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 01, 2009 9:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2009-03-01T21:27:23-07:00</updated>
<published>2009-03-01T21:27:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43816#p43816</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43816#p43816"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43816#p43816"><![CDATA[
Could you post a little more about your method? I'm not sure I understand? Also, what's the cycle count for it?<br /><br /> You don't have 256bytes to spare in RAM for a dynamic LUT?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sun Mar 01, 2009 9:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2009-03-01T19:37:51-07:00</updated>
<published>2009-03-01T19:37:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43801#p43801</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43801#p43801"/>
<title type="html"><![CDATA[Opinions on dynamic code generation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4908&amp;p=43801#p43801"><![CDATA[
So, there is a part of the game I'm working on that needs to multiply a number by another one that doesn't change while a level is played (only between levels). It's a simple 8x8=8 multiplication and with an unrolled loop it was quite fast. But I need to do this so many times during a frame that I figured I had to make the process as fast as I could.<br /><br />Since I have no space for a look-up table that large, I made a routine that generates the optimal code to multiply any number by the number in question. Since the number I'm multiplying for is constant, the generated uses the accumulator as much as it can before using a RAM variable, and it knows when to add the doubling value to the accumulator without having to check any bits.<br /><br />The results are very good, the generated code works flawlessly and it's much faster than the old routine, even if you consider the JMPs necessary to call it and return (it's used only in one place, so there is no need for JSR and RTS). I'm just not sure this solution is worth the 30 something bytes the dynamic code occupies, or even if it's worth the complexity it adds to the program. I can't think of any technical reason not to do this (if the RAM gets corrupted somehow, it would be just as catastrophic as, say, if a pointer got screwed up). Do you guys have any considerations on this subject? Reasons for using or not using dynamic code?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Mar 01, 2009 7:37 pm</p><hr />
]]></content>
</entry>
</feed>