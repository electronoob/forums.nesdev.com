<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprite shearing to fake rotation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprite shearing to fake rotation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=21&amp;t=9678">http://forums.nesdev.com/viewtopic.php?f=21&amp;t=9678</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 06, 2013 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A radian is the angle whose arc length is the same length as the circle's radius. For example, if something moves through an arc of 0.4 radians, it'll have moved through a distance 40% of that to the center. If your game has 16-direction movement, there's a gap of (2*Pi/16) = about 0.4 radians between positions. For example, if something has 16 frames of rotation and a lever arm 20 pixels long, the end will move by 8 pixels between one angle and the next.<br /><br />In this figure, an angle close to 22.5 degrees or 0.4 radians is marked in red, and a distance of 40 percent of the radius is marked in green.<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=281" alt="0.4_radians.png" /><br />
			<span class="gensmall">0.4_radians.png [ 3.76 KiB | Viewed 6899 times ]</span>
		

		<br />
	</div><br /><br />Now say I have something spinning on an off-center axis, such as a ball on a chain or a character swinging on a trapeze. From the axis of rotation to the active part is 20 pixels. But with 16 frames of animation (8 stored, 8 flipped), that's still about 0.4 radian per frame. So when the object rotates through 1/16 of a circle, its active part instantly moves about 8 pixels, enough to confuse collision detection, eject the object the wrong way, and cause it to glitch through a wall.<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=282" alt="all16frames.gif" /><br />
			<span class="gensmall">all16frames.gif [ 2.14 KiB | Viewed 6899 times ]</span>
		

		<br />
	</div> <div class="attachtitle">Attachment:</div><div class="attachcontent">
			<span class="gensmall"><b>File comment:</b> Onion skinned: previous frame semitransparent</span><br />
		
			<img src="./download/file.php?id=283" alt="all16onion.gif" /><br />
			<span class="gensmall">all16onion.gif [ 2.88 KiB | Viewed 6899 times ]</span>
		

		<br />
	</div><br /><br />I could try shearing the rotating sprite by sliding the 8-pixel strips. This is analogous to how games use &quot;Y offset per column&quot; background modes of the Super NES PPU and Sega Genesis VDP to fake rotation; <a href="http://forums.nesdev.com/viewtopic.php?p=64801#p64801" class="postlink">psycopathicteen could tell you more about these modes</a>. Sliding each strip by 1 pixel works for up to 1/8 radian (7.16 degrees) either way.<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<span class="gensmall"><b>File comment:</b> With one frame of shear before and after each</span><br />
		
			<img src="./download/file.php?id=284" alt="all48framesfast.gif" /><br />
			<span class="gensmall">all48framesfast.gif [ 6.26 KiB | Viewed 6899 times ]</span>
		

		<br />
	</div><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=285" alt="all48framesslow.gif" /><br />
			<span class="gensmall">all48framesslow.gif [ 6.26 KiB | Viewed 6899 times ]</span>
		

		<br />
	</div><br /><br />Or I could try decoupling the collision position from the display position so that the active part moves smoothly despite discrete angle changes in the sprite.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Sun Jan 06, 2013 10:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is neat, but in the context of the Famicom/NES what would be the best way to set about implementing the idea without eating a lot of cycles figuring out how to position sprites that compose a larger meta-sprite in order to achieve the smoother rotation? To slide individual rows could be done I suppose, but vertical strips of pixels would mean eating up a lot more CHR in order to fit these modified tiles, unless you propose modifying CHR-RAM directly for this purpose, though such an operation would not be very quick, I would presume.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Jan 07, 2013 12:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm guessing you simply use tables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Jan 07, 2013 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent">This is neat, but in the context of the Famicom/NES what would be the best way to set about implementing the idea without eating a lot of cycles figuring out how to position sprites that compose a larger meta-sprite in order to achieve the smoother rotation? To slide individual rows could be done I suppose, but vertical strips of pixels would mean eating up a lot more CHR in order to fit these modified tiles, unless you propose modifying CHR-RAM directly for this purpose, though such an operation would not be very quick, I would presume.</div><br />Yeah, it wouldn't make much sense to do this if it requires new graphics anyway. If this was e.g. moving the individual tiles of the sprite separately, it'd make more sense (indeed Treasure did this on <a href="http://www.youtube.com/watch?v=qauZtr1GNNc#t=89s" class="postlink">Yuu Yuu Hakusho</a>, albeit for scaling).<br /><br />EDIT: I always keep up mixing the names of the two Yuu Yuu Hakusho games on the system -_-'

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Jan 07, 2013 9:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could use the CPU to do software vertical scrolling, while doing horizontal scrolling with the oam x coordinates.  Of course, you'll need enough vblank time to write the sprite patterns to vram.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Jan 07, 2013 10:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">You could use the CPU to do software vertical scrolling, while doing horizontal scrolling with the oam x coordinates.  Of course, you'll need enough vblank time to write the sprite patterns to vram.</div><br />Try doing the horizontal scrolling thing with several sprites and you'll see how messy it gets (and you'll probably run out of cycles if you try to use a general approach, you'll need to impose some special restrictions). Also that assumes the use of CHR-RAM, if you use CHR-ROM it won't work since you can't generate graphics on the fly (obviously).<br /><br />Also wouldn't software horizontal line scrolling be faster than software vertical line scrolling? May as well do both in the CPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 07, 2013 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent">in the context of the Famicom/NES what would be the best way to set about implementing the idea without eating a lot of cycles figuring out how to position sprites that compose a larger meta-sprite in order to achieve the smoother rotation? To slide individual rows could be done I suppose, but vertical strips of pixels would mean eating up a lot more CHR in order to fit these modified tiles, unless you propose modifying CHR-RAM directly for this purpose, though such an operation would not be very quick, I would presume.</div><br />A metasprite in such an engine is stored either as a set of 8xn pixel columns (if it is wider than tall) or as a set of nx8 pixel rows (if it is taller than wide). A shear of +1/8 or -1/8 would slide an individual row or column of 8x8 pixel sprites by one pixel. They'd be slid around in OAM, not in CHR RAM, which means this technique would work as well with CHR ROM assuming fine-grained bank switching. Compare to what's done in the first two levels of <em>Battletoads</em>. The walkers' legs in level 1 are sheared for smooth movement, as is the rope in level 2.<br /><br />Shall I draw another illustration of this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Jan 07, 2013 1:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So what you want seems to be what I mentioned: move around the individual sprites to make the illusion of a smoother animation (even though the actual amount of graphics is smaller).<br /><br />Something like in here? (but possibly with intersecting sprites so gaps aren't obvious)<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=e6z14xfCHV4#t=147s">http://www.youtube.com/watch?v=e6z14xfCHV4#t=147s</a><!-- m --><br /><br />Or heck, something like the swinging wires here:<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=YptU9ig9R9A#t=14s">http://www.youtube.com/watch?v=YptU9ig9R9A#t=14s</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jan 07, 2013 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So you're suggesting to shear a sprite into two or more sprites as a tween between two key sprites that are rotations of each other? I guess it's possible, but without hardware support it sounds like it would take up a lot of probably-precious sprite resources. On the NES you can do shearing of background tiles via scrolling, perhaps.<br /><br />In the example you provided pictures of, I'd say the 8-directions worth of sprites for the two components (with flipping I guess it's really 3 sprites each) are probably what I'd stick with. I would leave the inner sprite where it is, coarsely sticking to those 8 directions, and the outer sprite can move smoothly in a circle. Even though it would only have 8 rotations, the motion of its position can be very smooth. With <a href="http://www.youtube.com/watch?v=lfr0VkasGoc#t=0m16s" class="postlink">sprites that are carefully drawn to work with a varying amount of overlap</a>, it can look pretty good, and the smoothness of motion might make up for the lack of rotation granularity. I'm also reminded of the common <a href="http://www.youtube.com/watch?v=I7lbNgOun44#t=11m50s" class="postlink">vectorball</a> technique, where sprite rotations are abandoned entirely, but the motion is quite smooth. (Edit: I just remembered the NES port of the <a href="http://www.youtube.com/watch?v=bE7ObOKddWg#t=15m02s" class="postlink">vectorball example</a>.)<br /><br />I guess Sik is suggesting the same thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Jan 07, 2013 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />8 directions usually looks ugly, it's better to stick to 16 =P (which with flipping gets reduced to 5) Also even with 16 it can be quite noticeable, it depends on how fast the sprite rotates (if it spins quite fast it probably won't be very noticeable, if it spins slowly it will still be quite blatant).<br /><br />EDIT: and before I forget, that dragon example has 16 rotations, not 8 =P<br /><br />EDIT 2: also if the sprite is constantly spinning in a given direction you probably don't care if the sprite ever ends up aligned to the axes, so you can shift the rotation such that you only would need 4 sprites instead of 5.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Jan 07, 2013 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">You could use the CPU to do software vertical scrolling, while doing horizontal scrolling with the oam x coordinates.  Of course, you'll need enough vblank time to write the sprite patterns to vram.</div><br /><br />Also wouldn't software horizontal line scrolling be faster than software vertical line scrolling? May as well do both in the CPU.</div><br /><br />Vertical tile scrolling is just a matter of loading and storing bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Jan 07, 2013 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">EDIT: and before I forget, that dragon example has 16 rotations, not 8 =P<br /><br />EDIT 2: also if the sprite is constantly spinning in a given direction you probably don't care if the sprite ever ends up aligned to the axes, so you can shift the rotation such that you only would need 4 sprites instead of 5.</div><br /><br />Yes, Dragon Breed has 16 rotation sprites, none of them flipped. I wasn't referring to its sprite count, just that it is using the sprite position to get extra smoothness between the rotation sprites, and the overlap between sprites allows visual continuity between segments even though the positions are shifting irregularly.<br /><br />Not aligning to the axes can have an aesthetic appeal as well, so that's a good suggestion not just for extra smoothness, but breaking up the look of 8-pointy things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 07, 2013 4:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">8 directions usually looks ugly, it's better to stick to 16 =P (which with flipping gets reduced to 5)</div><br />That depends on how symmetric the object is. If it isn't left-right symmetric, you need 8 anyway to produce 16, as only half of them can be computed through vh-flipping. Flipping only vertically or only horizontally produces a sprite facing the other direction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jan 07, 2013 8:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another game to look at for this, by the way, is Syvalion.  Compare, say, the Amiga or SNES version to that of the arcade (arcade is a lot smoother but can't figure out if the sprites are significantly different), and look at the Chinese dragon's segments during movement.<br /><br />Yeah, the game is similar to Dragon Breed (which I own :-) ) in that it has a Chinese dragon.  HAI I LIEK DAGRONS.  I give them milk and sugar and in return they give me good luck and the ability to manipulate water.  (This line added just to try and get Tepples to go on a link spree, probably involving pictures of Spyro or strange child-like dragons with baseball hats carrying bento boxes while fishing).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Jan 07, 2013 8:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite shearing to fake rotation</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">You could use the CPU to do software vertical scrolling, while doing horizontal scrolling with the oam x coordinates.  Of course, you'll need enough vblank time to write the sprite patterns to vram.</div><br /><br />Also wouldn't software horizontal line scrolling be faster than software vertical line scrolling? May as well do both in the CPU.</div><br /><br />Vertical tile scrolling is just a matter of loading and storing bytes.</div><br />This was on the assumption of scrolling each column of pixels separately. Then you're moving individual bits.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>