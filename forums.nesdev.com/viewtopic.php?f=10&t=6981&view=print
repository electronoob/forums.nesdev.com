<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Tile moving</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Tile moving</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6981">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6981</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-Basti-</b> [ Sun Sep 26, 2010 10:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Tile moving</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, I want to make am tile smoothly move after hitting the A button. This is my code, but it doesnÂ´t work, can anybody help me?: 
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController: <br /><br />LDA #$01 <br />STA $4016 <br />LDA #$00 <br />STA $4016 ; tell both the controllers to latch buttons <br /><br /><br />ReadA: <br />LDA $4016 ; player 1 - A <br />AND #%00000001 ; only look at bit 0 <br />BEQ ReadADone ; branch to ReadADone if button is NOT pressed &#40;0&#41; <br /><br />fire: <br />LDA sprite_RAM+68 ;$D8 <br />SBC #$01 <br />STA sprite_RAM+68 <br /><br />LDA sprite_RAM+68 <br />CMP $50 <br />BNE fire <br /><br />ReadADone:</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Sep 27, 2010 3:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Tile moving</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">-Basti- wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController: <br /><br />LDA #$01 <br />STA $4016 <br />LDA #$00 <br />STA $4016 ; tell both the controllers to latch buttons <br /><br /><br />ReadA: <br />LDA $4016 ; player 1 - A <br />AND #%00000001 ; only look at bit 0 <br />BEQ ReadADone ; branch to ReadADone if button is NOT pressed &#40;0&#41; <br /><br />fire: <br />LDA sprite_RAM+68 ;$D8 <br />SBC #$01 <br />STA sprite_RAM+68 <br /><br />LDA sprite_RAM+68 <br />CMP $50 <br />BNE fire <br /><br />ReadADone:</div></div>
<br />There are a couple of things wrong.
<br />
<br />First, you are doing a subtraction with an unknown value in the carry flag, so your subtraction will sometimes subtract 1 (if the carry is set) and sometimes 2 (if the carry is clear). In the 6502, all additions and subtractions make use of the carry flag, so if you are not sure of it's value, you should clear it (CLC) before additions and set it (SEC) before subtractions. Since you could be accidentally subtracting 2 sometimes, that could cause the sprite to go past the point you are checking for (i.e., if you want it to reach position $50 but it goes straight from $51 to $4F without ever actually being $50).
<br />
<br />Second, are you sure that line is supposed to be CMP $50? Because that will compare the accumulator with the byte at memory location $0050, not screen position $50. If you have the actual destination of the sprite stored at $0050, that's fine (although I'd suggest you always use variable names when referencing memory locations to avoid this sort of confusion), but if you want the sprite to move until position $50 you have to change that to CMP #$50.
<br />
<br />Also, you are moving the sprite all at once. Your loop there will only finish when the sprite has moved all the way, so in the best case you'll see it magically teleport from the source to the destination when you hit the button.
<br />
<br />Animation in video games consoles is frame-based. You have to move things little by little each frame, so that the user/player has a chance to see every step of the animation. Also, you can't get stuck in a loop moving a single object, because a game has many active objects at once doing different things and they all must appear to move at the same time.
<br />
<br />The idea is that a part of your code, your main game loop, runs once per frame, at 60fps, and there you update all the active objects a little step at a time. So in your case it the main loop would look something like this:
<br />
<br />1. check for input and skip to 3 if the button is not pressed;
<br />2. move the sprite by 1 pixel;
<br />3. wait for VBlank;
<br />4. use a sprite DMA to update the positions of the sprites on the screen;
<br />5. go back to 1;
<br />
<br />The above will move the sprite whenever you press the button, as long as the button keeps pressed. If you want to press the button only once and move the sprite all the way, the could would look like this:
<br />
<br />1. check for input and skip to 3 if the button is not pressed;
<br />2. set a flag indicating that the sprite must move;
<br />3. check the value of the flag and skip to 5 if it's clear;
<br />4. if the sprite is not at the destination, move it;
<br />5. wait for VBlank;
<br />6. use a sprite DMA to update the positions of the sprites on the screen;
<br />7. go back to 1;
<br />
<br />In every game, the general structure of the main loop is:
<br />
<br />1. check for input;
<br />2. update the main character based on that input;
<br />3. update the other objects (enemies, items, etc);
<br />4. wait for vblank;
<br />5. draw the frame;
<br />6. go back to 1;
<br />
<br />Note that all object updates are in very small steps. Each frame you move the objects according to their speed, check for collisions with other objects and things like that. But always <strong>one step at a time</strong>, so that during VBlank you have the chance to show the state of the game to the user/player. If you move an object several steps without updating the screen every step, there will be no visible animation.
<br />
<br />Don't wait for VBlank by polling $2002 though, that will cause you to miss some frames. Instead, make your NMI routine modify a flag, and have your main loop poll that flag instead. That way you will detect every VBlank.
<br />
<br />I suggest you play with variations of the loop structures above to get acquainted with how game logic works. Does that make sense?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-Basti-</b> [ Mon Sep 27, 2010 4:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well thats a lot of input for a newbie <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> 
<br />
<br />could you do a code with many comments for better understanding?
<br />Or can I send you my code and you can fix some mistakes of mine?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Sep 27, 2010 5:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't usually give code out, because I don't think that's a good way to teach. When you give code out people usually start using it as a template for their programs rather than studying material.
<br />
<br />Did you at least understand what I said about updating objects little steps at a time? That's the crucial part of any game.
<br />
<br />What's your programming experience anyway? Are you familiar with any programming language? What have you coded so far?
<br />
<br />If you didn't understand most of what I said, you still have some theory to learn about the NES. Do you know what VBlank is? You should know that the NES generates 60 pictures/frames per second, and the little changes you make to the background and the sprites every frame is what creates the illusion of animation. The vertical blank, or VBlank, is the time between when the NES finishes rendering a full picture and when it starts drawing the next one. This is the only time you have to modify the picture, the time when the NES is "taking a break" between frames.
<br />
<br />To help us make use of that time and make sure we don't miss any of it, the NES generates an NMI to inform us that VBlank has started. An NMI is an interrupt, it interrupts whatever the program is doing to execute the NMI routine. When the NMI routine is over, what was executing before resumes.
<br />
<br />If you have ever made an animation in your life (and since you like to draw sprites I imagine you have), you know that they run at a certain rate, usually measured in frames per second. Since a game is basically an animation that responds to input, and the console generates 60 pictures per second, it makes sense to synchronize our animation/game to that rate. We do that by waiting for VBlank (which happens 60 times per second) before processing the next frame.
<br />
<br />Since the NMI routine is called every frame, you can use it to signal that Vblank has started. Your NMI routine can be as simple as:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br />&nbsp; &nbsp; inc FrameCount<br />&nbsp; &nbsp; rti</div><br />Then, whenever you need to wait for VBlank in your code you can do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda FrameCount<br />Wait:<br />&nbsp; &nbsp; cmp FrameCount<br />&nbsp; &nbsp; beq Wait</div>
<br />Which is basically a loop that waits for the variable "FrameCount" to change, something that will only happen when the waiting loop is interrupted by the NMI when VBlank starts.
<br />
<br />Now, if <strong>nothing</strong> of what I'm saying makes sense, you have to study little more. You have to understand more about how the NES generates a picture, and more specifically how the sprites work, since you are trying to move them around.
<br />
<br />One important detail I've seen people getting wrong in the past is assuming that the sprites would move if they just modified their coordinates in RAM. The RAM memory used for sprites (the one labeled as "sprite_RAM" in your code), is just regular RAM, it's not tied to the sprites in any way. To actually affect the sprites you have to transfer that RAM to OAM using a sprite DMA (look up register $4014) every Vblank, otherwise your sprites will never move.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-Basti-</b> [ Mon Sep 27, 2010 5:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I basically understand what you said.
<br />I have some programming experiences yet (a Mario Clone in Python, Space Invaders in c++ and iÂ´m working on an Adventure in AGS).
<br />
<br />My problem is, that iÂ´m new in Assembler and doing things very basically.
<br />
<br />I will study your advice very carefully the next few days and post my new code after i fixed it.
<br />
<br />Thank you for your help

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>