<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 65C02 plus lots of external logic yields similar to 65816</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">65C02 plus lots of external logic yields similar to 65816</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17055">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17055</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Feb 13, 2018 11:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>65C02 plus lots of external logic yields similar to 65816</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="http://laughtonelectronics.com/Arcana/KimKlone/Kimklone_intro.html">http://laughtonelectronics.com/Arcana/K ... intro.html</a><!-- m --><br /><br />For something that was developed independently of the 65816, it's shockingly reminiscent.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Feb 14, 2018 3:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 65C02 plus lots of external logic yields similar to 6581</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just to give a TL;DR (although I thought it was a quick read):<br /><br />* Use two 74'670s to yield four bank registers (he calls them K0 through K3)<br />* The /SYNC output on the 65C02 lets him capture, intercept, and replace opcodes from memory before it enters the CPU. This is microcoded using external ROMs<br />* Forces all stack and direct-page accesses to only bank 0, while normal execution happens from K0<br />* Opcode prefixes (like the Z80 or x86) let him force the following instruction to always use a different bank register for the data portions of that instruction<br />* special hardware-optimized implementation of NEXT for fast FORTH performance<br />* function to copy just the computed address from (zpg,X) into a pair of zeropage registers<br />* special ZX80-like &quot;emit bytes starting at this address as a scanline of pixel data&quot; instruction<br /><br />And one last interesting bit:<br />* This 65C02 retains several of the &quot;multibyte nop that does memory accesses&quot; of the NMOS 6502, specifically: $82, $C2, and $E2 are still <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NOP #imm</tt>, $44 is still <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NOP zpg</tt>, $54, $D4, and $F4 are still <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NOP zpg,X</tt>. However, $DC and $FC are now just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NOP abs</tt>, not indexed by X, and $5C is now extra bonus weird.<br />* He decided on the same &quot;LoaD and Discard&quot; mnemonic that I had thought of when we were discussing these instructions

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Feb 15, 2018 8:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 65C02 plus lots of external logic yields similar to 6581</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was rather intrigued by this idea when I found the article ~year ago.  Had thought about how it would be interesting to apply some of these methods to the NES with a mapper.  Utilizing undocumented NOP's to create new 8/16bit registers, far addressing, and other functionality could be of great benefit to a C compiler if one were so motivated to put in all the hardware and software development required.  Problem with that idea is assembly isn't actually as bad as many make it out to be, and you could make a number of games/tools with the work involved with something like that and not become dependent on high end hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 15, 2018 9:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 65C02 plus lots of external logic yields similar to 6581</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">Utilizing undocumented NOP's to create new 8/16bit registers, far addressing, and other functionality could be of great benefit to a C compiler if one were so motivated to put in all the hardware and software development required.  Problem with that idea is assembly isn't actually as bad as many make it out to be</div><br />The one thing C does is let you share game logic with a PC, Sega Genesis, or Game Boy Advance version of the same game, even if you do write all the graphical and audio output in assembly language.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Feb 16, 2018 4:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 65C02 plus lots of external logic yields similar to 6581</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Pretty neat.  Not having worked with the 65C02, I didn't realize it has a single-cycle NOP.<br /><br />Previously I had considered making an NES mapper with separate program and data banks.  My idea would have just been memory-mapped registers and not anything as fancy as what that guy made.  We don't have the SYNC signal, but you could emulate a 6502 inside the mapper to generate one.  Considering that though, to me made it sound more attractive to just add some memory and run the emulated 6502 independently and faster.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dr Jefyll</b> [ Fri Apr 13, 2018 4:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 65C02 plus lots of external logic yields similar to 6581</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">* Use two 74'670s to yield four bank registers (he calls them K0 through K3)<br />* The /SYNC output on the 65C02 lets him capture, intercept, and replace opcodes from memory before it enters the CPU. This is microcoded using external ROMs<br />* Forces all stack and direct-page accesses to only bank 0, while normal execution happens from K0<br />* Opcode prefixes (like the Z80 or x86) let him force the following instruction to always use a different bank register for the data portions of that instruction<br />* special hardware-optimized implementation of NEXT for fast FORTH performance<br />* function to copy just the computed address from (zpg,X) into a pair of zeropage registers<br />* special ZX80-like &quot;emit bytes starting at this address as a scanline of pixel data&quot; instruction</div><br />Thanks for your interest, lidnariq, and for the summary you wrote -- I was glad to get your take on the project.<br /><br />I notice you linked to the KK Computer <a href="http://laughtonelectronics.com/Arcana/KimKlone/Kimklone_intro.html" class="postlink">main article</a>, which is over eight pages long.  In case anyone finds that too long -- but found your summary too short -- <a href="http://laughtonelectronics.com/Arcana/KimKlone/Kimklone_short_summary.html" class="postlink">here</a> is a summary I wrote myself. It's just one page, so hopefully in the Goldilocks zone, lengthwise. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> The KK Computer appeared on NesDev <a href="https://forums.nesdev.com/viewtopic.php?p=68051#p68051" class="postlink">before</a> but basically got ignored. (That was before I added the summary.)<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">He decided on the same <strong>&quot;LoaD and Discard&quot;</strong> mnemonic that I had thought of when we were discussing these instructions</div>No kidding, you called 'em that, too?  That's funny. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  But I never realized LDD was among the undefined  instructions <em>on the NMOS chip</em>. I only studied the Rockwell 65C02 undefined  instructions. (BTW, recent tests reveal KK also works with a modern WDC 65C02 installed, confirming its undefined  instructions are identical to Rockwell's. Well, almost identical. There are two less, as WDC added the STP and WAI opcodes.)<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Not having worked with the 65C02, I didn't realize it has a single-cycle NOP.</div>Yeah, and the single-cycle NOP's have terrific potential for hardware hacking, mainly because they're so easy to decode. Garth Wilson posted an example of this (below). Not exactly mainstream for a NES forum, but maybe some of you will find it interesting. <br /> -- Jeff<br /><br /><a href="http://wilsonminesco.com/6502primer/potpourri.html#Jeff" class="postlink">Some tricks from Jeff Laughton (Dr Jefyll on 6502.org's forum)</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>