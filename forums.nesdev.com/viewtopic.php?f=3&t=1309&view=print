<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - C/C++ speed differences</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">C/C++ speed differences</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1309">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1309</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Fri Mar 31, 2006 2:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>C/C++ speed differences</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Has anyone written an emulator in C and then later converted it to C++, or vice versa? Is C++ significantly slower, or is the speed difference negligible? If a cycle accurate emulator like Nintendulator were written in C++, would it be too slow for most systems?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Mar 31, 2006 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Language doesn't matter, whether or not you use classes does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Fri Mar 31, 2006 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I probably should have been more specific in my question. I'm referring to the speed difference between basic procedural C, and object-oriented C++ using classes and subclasses (i.e. a NES virtual machine class with CPU, APU, PPU, MMC, etc. subclasses). Does the latter drastically slow things down?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Fri Mar 31, 2006 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Language doesn't matter, whether or not you use classes does.</div>
<br />
<br />When it comes down to what we do then there is very little difference. The following is C++, and if I were to rewrite the code in C, there would be no difference. C++ is C with a bit extra. Speed optimization would be down to the compiler options.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void OperationCodeB0&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;if&#40; CPU.CF &#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40; &#40;unsigned char&#41;CPU.PC + Relative &gt; 0xFF || &#40;unsigned char&#41;CPU.PC + Relative &lt; 0 &#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CPU.CC++;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC += Relative;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU.CC += 3;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU.PC += 2;<br />&nbsp; &nbsp;&nbsp; &nbsp;CPU.CC += 2;<br />&nbsp; &nbsp;&#125;<br />&#125;</div><br /><br />I mean the only difference that I can think of is;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline void OperationCodeB0&#40;&#41;;</div>
<br />
<br />Now I don't think that the semicolon on the end is going to make a difference...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Mar 31, 2006 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bjarne Stroustrup has written some <a href="http://public.research.att.com/~bs/" class="postlink">good articles</a> about the performance possible using C++ features, though I'm not sure exactly where. The <a href="http://www.research.att.com/~bs/performanceTR.pdf" class="postlink">Technical Report on C++ Performance</a> looks like a good read. Remember that the language itself has no speed, only programs written with it. I'd recommend avoiding all pages with "Speed of X versus Y", since they are invariably filled with useless comparisons and false claims.
<br />
<br />These should generate the exact same code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct X &#123;<br />&nbsp; &nbsp; int i;<br />&#125;;<br /><br />void x_func&#40; X* x, int x &#41;<br />&#123;<br />&nbsp; &nbsp; x-&gt;i = x;<br />&#125;<br /><br />class XX &#123;<br />&nbsp; &nbsp; int i;<br />public:<br />&nbsp; &nbsp; void func&#40; int &#41;; // not virtual<br />&#125;;<br /><br />void X::func&#40; int x &#41;<br />&#123;<br />&nbsp; &nbsp; i = x;<br />&#125;<br /></div><br /><br />As for polymorphism, if you need it then it's going to require some cycles no matter what:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum &#123; player, enemy &#125;;<br />struct Object &#123;<br />&nbsp; &nbsp; int type;<br />&nbsp; &nbsp; int i;<br />&#125;;<br /><br />void do_action&#40; Object* x &#41;<br />&#123;<br />&nbsp; &nbsp; switch &#40; x-&gt;type &#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; case player:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; case enemy:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />&nbsp; &nbsp; &#125;<br />&#125;<br /><br />class Object &#123;<br />&nbsp; &nbsp; int i;<br />public:<br />&nbsp; &nbsp; virtual void action&#40;&#41;;<br />&#125;;<br /><br />class Player : public Object &#123;<br />public:<br />&nbsp; &nbsp; void action&#40;&#41;;<br />&#125;;<br /><br />class Enemy : public Object &#123;<br />public:<br />&nbsp; &nbsp; void action&#40;&#41;;<br />&#125;;<br /><br />void do_action&#40; X* x &#41;<br />&#123;<br />&nbsp; &nbsp; x-&gt;action&#40;&#41;;<br />&#125;<br /></div><br /><br />The C++ version typically involves reading a hidden pointer in the object to get to a table of function pointers, then a read of the function pointer and function call, something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">class Object &#123;<br />&nbsp; &nbsp; func_t* vtable;<br />&nbsp; &nbsp; ...<br />&#125;;<br /><br />// object-&gt;action&#40;&#41;<br />object-&gt;vtable &#91;3&#93;&#40; object &#41;;<br /></div>
<br />
<br />In many cases the cost of this is insignificant due to the amount of work actually being in the function. Where this is not the case, you can fall back on manual dispatch like in do_action(); C++ is a multi-paradigm language that gives you a choice of constructs without making you pay for those you don't use. The C++ solution is generally the most beneficial because it is less error-prone and allows better modularity. You can add new object types without having to update every invocation of operations on them.
<br />
<br />Derived classes don't add any overhead to virtual dispatch. Each class typically has a single table of virtual functions associated with it, and each object of that class a pointer to this table. The best way to find the cost of constructs on your machine is to code them and measure their performance. Nothing else will give you as accurate an idea of what it will cost.
<br />
<br />I've found that it's best to actively choose whether to use polymorphism (virtual functions) or other forms of run-time decision making, rather than go crazy and make everything virtual. The point of the mechanism isn't that it magically solves problems; it's to provide specific functionality where it's been deemed useful. Since C++ is a statically-typed language, in many cases you don't need any run-time dispatch where the type of the object can be determined during compilation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Fri Mar 31, 2006 5:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the detailed overview. It sounds like the speed hit would be negligible for most of what I had in mind. The only place I would be using polymorphism would be in the MMC emulation (since each mapper would have its own read/write/cycle/bus functions). However, this might still result in a speed hit, since some MMC routines might need to be called each clock cycle (many mappers use M2-based counters).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 31, 2006 5:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Josh wrote:</div><div class="quotecontent">However, this might still result in a speed hit, since some MMC routines might need to be called each clock cycle (many mappers use M2-based counters).</div>
<br />Wouldn't a cycle-counting IRQ timer be something that the mapper implementation can easily predict well in advance, just like the DMC IRQ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Fri Mar 31, 2006 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Perhaps it could be predicted in advance if some sort of queuing/timestamp system were used. However, I'm going for a relatively simple model, where one opcode is executed at a time and the PPU/APU/MMC states are updated on each clock cycle. Thus, the MMC routine would be called every single cycle to decrement (or increment) the clock cycle counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Mar 31, 2006 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It sounds like the speed hit would be negligible for most of what I had in mind.</div><br /><br />What are you comparing the speeds of here?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, this might still result in a speed hit, since some MMC routines might need to be called each clock cycle (many mappers use M2-based counters).</div>
<br />
<br />A design which requires calling a function every clock cycle is going to incur a performance penalty no matter how you code it. If you're taking this approach, I'd recommend using custom dispatch for these operations. They wouldn't be good candidates for a virtual call because they'd be doing little more than modifying a counter and seeing if it reached a certain value. You could even code up a generic "increment/decrement X until it reaches the value Y, then call another function" that each MMC could configure appropriately. This is an example of removing the need for polymorphism by finding a one-size-fits-all set of behavior. It might do a little more than some mappers need, but this inefficiency is more than offset by the lack of having to select behavior at run-time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sat Apr 01, 2006 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since I've used C and C++ for a long time, here's my own 2 cents about this issue.
<br />
<br />It's possible to use C++ as if it were C with a few extra nice features (such as being able to declare variables in the middle of your methods).  If you do that, the performance is about the same.
<br />
<br />It's also possible to use C++ as if it were "C with classes"---i.e. turn your structs into classes and convert your functions which manipulate those classes, into methods of the class.  As long as they are not virtual methods, the performance should be the same.
<br />
<br />Its even possible to use C++ as "C with classes and lots of inline methods"---i.e. instead of directly accessing the fields of a struct, you can create accessor methods which give you better encapsulation and keep the complexities in one place.  Think of inline methods as being sort of like typesafe macros---semantically they are just like other methods, but the compiler will expand them inline at the call sites and then be able to optimize that code as well as if you had used a macro.  The key thing is that once the compiler expands the code inline, it can optimize it as if it were part of the enclosing function.
<br />
<br />Now, if you have a good optimizing C++ compiler, you can even use more advanced C++ features---such as templates and partial template specialization---without taking a performance hit.  However, if your compiler is not so good at optimizing, then those features will start to cost you.
<br />
<br />You see, the C language is simple enough to compile that most C compilers can do a decent job of compiling and optimizing nearly any C code.  But the C++ language, by its nature, <strong>relies on a good optimizing compiler</strong> to achieve the kind of good performance that C programs achieve.  This is good in some ways--it allows you to write higher-level code, with better abstractions, making it more object-oriented, etc. and still have good performance.  It's a bad thing in other ways--C++ compilers are slower, extremely complex and difficult to write, and thus less widely available (though I think g++ is available on all the platforms gcc is available on).
<br />
<br />C++ offers a large library (the STL, or Standard Template Library) which has good, generic implementations of containers (hash tables, maps, vectors, lists, strings of characters, streams, etc) and algorithms (searching, sorting, etc).  It is often a lot easier to use these than to code all that stuff yourself (and it may even perform better since the STL implementations are highly optimized).  Be aware that using lots of templated code in your program (such as several different specializations of STL container classes) can cause code bloat, making your executable rather large.  Most people (including emu authors!) don't seem to care about that these days, but keep in mind that every extra 4K in your executable code is another page the operationg system might have to load from disk, page out when it seems to no longer be part of the working set, etc.  Keeping things small has some advantages.
<br />
<br />C++ also includes features that you should stay away from if you're writing low-level, performance-sensitive programs.  Things like RTTI and exception handling, and multiple inheritance with virtual base classes.  If you enable those features, they will slow things down somewhat.  
<br />
<br />Even though virtual methods are a cornerstone of polymorphism in C++, you should be careful about their use in performance-critical code.  Overusing virtual methods will slow things down somewhat---every time you make a call to a virtual method, imagine that you were instead dereferencing a pointer into a function table array and then calling a function through a function pointer.  Cause that's basically what you're doing.
<br />
<br />In summary:  If you know C, you can use C++ as a "better C" and use only a few of its features and it will be just as good as using C.  You can even use the more advanced features of C++ and still get the same performance as C (or even better performance in some specific cases---if you were hard-coding a bunch of linear algebra calculations, template metaprogramming might yield faster code than anything you could directly express in C).  But if you are going to fully embrace C++, you have to learn what features are cheap or "free" (thanks to compiler optimizations) and what features will potentially slow down your program.
<br />
<br />For example:  if you changed your CPU dispatch loop to use a table lookup and a virtual method call instead of a switch statement--that would be stupid.  It would probably be twice as slow or something.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Apr 01, 2006 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">Since I've used C and C++ for a long time, here's my own 2 cents about this issue.</div>
<br />
<br />2 cents? That was more like 50 bucks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Apr 01, 2006 12:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mozz wrote:</div><div class="quotecontent">For example:  if you changed your CPU dispatch loop to use a table lookup and a virtual method call instead of a switch statement--that would be stupid.  It would probably be twice as slow or something.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /></div>
<br />Except don't C compilers emit that kind of code for a big @$$ switch statement?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Apr 01, 2006 1:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The compiler I use emits a binary search when the number of cases is small (8 or so), then switches to a table for large cases. That is the single biggest performance bottleneck in my NES emulator, taking about 12% of emulation time dispatching the switch (which isn't helped by my compiler's stupid implementation that stalls the pipeline). I've tried adding a few if statements for the most common instructions (before the switch), but that didn't help.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sat Apr 01, 2006 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">mozz wrote:</div><div class="quotecontent">For example:  if you changed your CPU dispatch loop to use a table lookup and a virtual method call instead of a switch statement--that would be stupid.  It would probably be twice as slow or something.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /></div><br />Except don't C compilers emit that kind of code for a big @$$ switch statement?</div>
<br />Most C compilers (and C++ compilers) will examine the values of your case labels and recognize that they're pretty densely packed.  They will generate a range check or two, followed by a table lookup and an indirect branch.  I'm not sure if any compilers are even clever enough to avoid the range check if you switch on a byte-sized variable and include cases for every value the variable can take---I have heard of people using GCC to generate assembly source code and then running their own filtering tool over the assembly to patch out the unnecessary range check, for a little extra speed.
<br />
<br />On the other hand if you look up a table of 256 objects and then make a virtual method call on them... there would be TWO table lookups (the second one being the vtable lookup for the virtual function call).  The index of the second table lookup is always the same.  You can think of the virtual function call cost as two extra pointer dereferences before the indirect branch--one to get the vtable and another to get the function address out of the vtable slot.  At any rate, you're now reading 3 addresses instead of one before the indirect branch.  It's a longer dependency chain and greater likelihood of an L1 cache miss.
<br />
<br />Another thing to consider is that with a switch statement, the compiler is optimizing the code of the entire function at once (including each case of the switch).  For example, it can put variables in registers and do intraprocedural optimizations across the dispatch part of the switch.  If you used a virtual method call to do the dispatch, it could not optimize like that.  So overall, I think it would definitely be slower than a switch statement.
<br />
<br />A handy rule of thumb is to think of memory accesses as being 10x slower than everything else (unless you have good reason to believe they will hit the L1 cache).  The other common thing that slow is mispredicted branches.  When looking at a branch instruction, ask yourself if it is highly predictable, or not?  If it is, it will be cheap (typically one cycle).  If it isn't, it will usually be mispredicted, causing a pipeline flush and wasting tens of cycles.
<br />
<br />In the past, it was often worth pre-calculating certain stuff into a table and replacing the calculations with a memory lookup.  On today's modern machines, the amount of calculation you can do in the same time as an L2 cache miss is surprising!  Memory accesses are often the bottleneck.  It's worth going out of your way to avoid having large lookup tables of values if you could just compute the values on the fly with a handful of instructions.  Even if it takes you 15 instructions to compute the value, thats still probably faster than a memory lookup that misses the cache.
<br />
<br />Edit: I forgot to mention, there's another reason to avoid big lookup tables: not only will you likely be looking up values that were not in the cache (causing a cache miss), but the lookup then evicts some *other* piece of cached data to make room for your table value.  So you are increasing the likelihood of cache misses somewhere else.  For something like a CPU core this is not a big deal, but something accessing numerous streams of memory at once--say, a PPU renderer--might suffer from this.
<br />
<br />Sometimes a large lookup table can be simplified into a much smaller table plus a small amount of calculation.  For example, the chess engine Crafty uses (or used to, anyway, I haven't looked for years) a set of bitboard tables that were something like 256K.  I developed an x86-specific technique that accomplished the same thing, except it used a handful of extra bit-scan instructions.  With the aid of the bit-scan instructions I was able to shrink the table to 2,560 bytes, and lookups in the reduced table were about 100 times more likely to hit the cache (besides which, the entire table could now fit easily in the L1 cache).  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />
<br />
<br />What sort of tables tend to be large in an emulator?  Well, the dispatch table for 256 opcode bytes is 1K.  If your CPU core was written in assembly you could try to shrink that table, but that may be a waste of time.  What about caches of graphics tiles?  I know SNES emulators typically cache the tiles in a form that is easier to render, and the cache can be kinda big.  Lookup tables for graphics filters are also good candidates.  (Unfortunately its often hard to shrink those kind of tables without increasing the needed number of lookups...)
<br />
<br />But anyway, to get back on topic... C++ can be fast but unless you learn the language thoroughly and understand how the compiler implements the language constructs, its easy to shoot yourself in the foot with it, performance-wise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Sat Apr 01, 2006 10:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />agreed.
<br />
<br />and i find the best way to determine the fastest code is to benchmark it your self and use profiling tools such as valgrind.  they can show what line of code is a cach miss.  as i posted already i found a cach miss and removed it.  got alot of speed from fixing it.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>