<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC7110 Reverse Engineering Project</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC7110 Reverse Engineering Project</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>18</strong> of <strong>21</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sat Jul 12, 2008 1:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I may have some bad news, but I'll save that for another post as I still haven't convinced myself what is going on yet.
<br />
<br /><div class="quotetitle">caitsith2 wrote:</div><div class="quotecontent">So far,  All of SPL4's mode 0 decompressions, and ALL of MDH mode 0 decompressions are BIT PERFECT.  (Other than one isolated case in MDH, where the real hardware decompressor crashed, causing a repeated byte to be output for the rest of that 32KiB run.  I have seen that crash before. I bet if I redumped that exact entry, it might be BIT PERFECT as well.)<br /><br />I believe 100% of the mismatches in the feoez-sjns raw packs, are way past the normal requested size for each of the entries, as are 100% of the feoez mismatches that are past 25 bytes.</div><br />Alright!<br />Thanks for running all those tests.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Hmm, I have an FEoEZ cart, and two SNES units. I'd be willing to try and perform this mod, though I'm 98% certain I'll just ruin hardware.</div><br />I'm amazed you doubt yourself so much.<br />Nice to hear you got everything going eventually.<br /><br />As a quick test you can use the ROM I posted in the SF3 Exploit thread in this subforum.  Run it in "normal" mode or whatever your copier calls it (the mode which doesn't allow the savestates,etc.), the exploit part of the code will of course do nothing, but you'll still be left with a memory viewer and modifier program running entirely from RAM.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Thanks again for everything. Getting the SPC7110 emulated was one of my main goals for getting involved in SNES emulation, so you've really made my day/week/month here <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />It's really an amazing "perfect storm" of people happenning to have time to work on this all at once.  I haven't checked on this board in probably over a month and happenned upon this thread almost right after it got started.  Was anyone notified of this project, or did everyone here just luckily happen upon it?  
<br />
<br />Amazing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sat Jul 12, 2008 3:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, I'm still stumped.  So let me just lay it on you...
<br />
<br />Here's the symptom:
<br />I can't calculate the probability values for each bit.  Within 10 or so bits it always fails.
<br />
<br />This is very very bad.  
<br />Calculating these probabilities depends in no way on the evolution table, the mps prediction, or almost anything except the fact that it is 8-bit arithmetic compression.
<br />
<br />
<br />My guesses:
<br />I'd be amazed if they didn't use 8-bit arithmetic compression for everything.  So let's take that as a given for now.  The only additional assumptions I'm making in the code are twofold:
<br />- the symbols encoded correspond one to one with an output bit
<br />- an assumption must be made about the bit ordering.
<br />
<br />Looking over previous data again -
<br /><!-- m --><a class="postlink" href="http://neviksti.com/SPC7110/firstbyte_1.txt">http://neviksti.com/SPC7110/firstbyte_1.txt</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/SPC7110/firstbyte_2.txt">http://neviksti.com/SPC7110/firstbyte_2.txt</a><!-- m -->
<br />If I number the bits such that mode 0 encoded them in order
<br />0123456789ABCDEF
<br />mode 1 seems to encode them in order
<br />08192A3B4C5D6E7F and I assume then starts over with the next word.
<br />
<br />There is only enough data to actually fix the ordering for the first 10 output bits.
<br />
<br />
<br />I changed the code accordingly anyway, and it fails.
<br />Using input_7030_an1.bin, the probs.mps."what bit actaually was" are: 
<br />5A.0.lps  5A.0.lps  25.1.mps  25.1.lps  2D.0.mps  5A.0.mps  0C.1.mps  7.0.mps  3.0.lps  ??.1.
<br />
<br />So one of those assumptions must be wrong (or there is an implicit assumption I'm making that is wrong).  Worse yet, there is enough data to fix the bit order to the bit which the prob calculation failed.
<br />
<br />That means, it is this assumption that is wrong:
<br />- the symbols encoded correspond one to one with an output bit
<br />
<br />(This still seemed to work for the first four bits though.)
<br />
<br />
<br />For further evidence/proof try to figure out the bit order for mode 2.  There is enough data to show clearly that there is no valid bit order.  
<br />
<br />(However it seems to work for the first 2 bits.)
<br />
<br />;-------------------------------------------------------------------------
<br />
<br />So if the symbols we're decoding are not bits, what are they?
<br />
<br />Some clues:  we saw previously that mode 2 still saturated at roughly 1 bit in -&gt; 128 bits out.  So we're encoding the same <em>information</em> just in a different format (ie. we're not encoding symbols of something like "are the remaining symbols of this word all as predicted?", but it could be something like encoding "average" of three bits and then the first two of these bits).
<br />
<br />At this point I'd guess we are seeing some kind of layering encoding (encode "averaged" lower resolution image, then use this information to help encode information for the next level resolution, etc.).  Mode 0 may be "no layering", mode 1 "1 layering" (which looks slightly messed up when interpretting symbols as bits in the beginning), mode 2 "2 layerings" (which looks seriously messed up when trying to interpret symbols as bits in the beginning).
<br />
<br />...
<br />I'll pause now to gather my thoughts.
<br />That document linked earlier with the q-coder table also mentioned such "layering" encodings.  So maybe that is it.
<br />
<br />Any thoughts?
<br />
<br />EDIT: Nothing of substance added, just reworded some things for clarity.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Sat Jul 12, 2008 6:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shots out of nothing : 
<br />"Layering" recalls alot "buffering" (something like LZ?). 
<br />Perhaps they had a specialized compression alg for each bitplane? As in 
<br />1bpp  = mode 0
<br />2bpp  = mode 1
<br />etc

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jolly_codger</b> [ Sat Jul 12, 2008 7:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Holy poons! Very fantastic work Neviksti (and Andreas Naive).
<br />
<br />Doubtful I'll be of any practical help - won't work on this till much later.
<br />
<br />IIRC:
<br />(1) = ..? This one throws out zero bytes really fast
<br />(2) = 2/4-bpp SNES bitmaps
<br />
<br />The one that recalls to memory from FEOEZ:
<br />(2) 13 C0 89 80 00 00 00 00
<br />--&gt;
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bitplanes<br />0&nbsp; 1&nbsp; 2&nbsp; 3<br />00 00 00 FF<br />00 00 00 FF<br />&#40;..&#41;<br />00 00 00 FF<br />00 00 00 FF<br /></div>
<br />
<br />
<br />Stupid random thoughts:
<br />What if it kept working on bp0 until a renorm (bit shift)? Then it switches to bp1.
<br />
<br />I'm assuming the data isn't byte/word-aligned per plane.
<br />Or it could work per nybble. 4 first output bits = bp0. Then switch state to bp1.
<br />
<br />
<br />EDIT:
<br />
<br />(Thought dump)
<br />(0) We take only 8-bit startup0 cost for the initial 'val'.
<br />
<br />(1) FFFFFFFF --&gt; A8C3DD34
<br />Which makes no sense in terms of (0) alone.
<br />
<br />Let's say there is an additional setup layer - startup1.
<br />Maybe assume that startup1 &gt; 32 bits for all inputs.
<br />Then afterwards it eventually moves to MODE 0 functioning.
<br />
<br />Perhaps there's some mid-area of the bitstream which we can latch onto as the point MODE 0 kicks in. Then we can work backwards from that precise area.
<br />
<br />(area when output &gt;= 0x80xxxxxx)
<br />0.   A6F7FD8C        818F303E
<br />1.   A68E03D6        FF00AFF9
<br />2.   A60369EB        8078209C
<br />
<br />(peculiar moments)
<br />1.   01020408        00000000
<br />2.   395366DB        00000000
<br />
<br />(2) Just thinking that maybe it's MODE 1 x 2 pipelines. Then MODE 0 x 2 pipelines.
<br />
<br />2.   FFFFFFFF        91C9733F

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sun Jul 13, 2008 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, we're back on track.
<br />I'm tired and haven't even looked at the data yet besides openning it to make sure the program spit out reasonable looking data, but the point is we now have prob data.  On a glance it looks like it uses the same probability evolution table ... so you guys may have this figured out by the time I wake up.
<br />
<br />Thinking about it some more I couldn't figure out how each symbol <em>appeared</em> to be a bit in the beginning and failed miserably afterwards.  The manner in which it failed was interesting though.  Sometimes there would be a bit you could choose which was completely "segregated" in the current TOP - BOT range of inputs.  Othertimes there literally was none.
<br />
<br />These two seemed impossible together unless:
<br />1] the first few data bits were treated differently (like "startup" data)
<br />2] the only "layering" was into the bit depth of each pixel... not inbetween pixels (like the document with the q-coder suggested)
<br />
<br />I didn't have enough data to distinquish these, and the first one seemed less likely.  So I changed the SNES program to search for prob assuming #2... using input_7030_an1.bin, it made it all the way through!
<br />
<br />This is practially statistically "impossible", unless my guess was correct.  So there you go, we know enough about the symbols to extract the real info ... the prob values and (sort of) the mps values.
<br />
<br />The way to get around this bizarre depth issue was kind of cludgey in the code, so what I have saved instead is the two bit values at the top of each span.  Unfortunately this isn't enough to let you figure out how all four sections are mapped to the 2 bits.  I can change this if necessary, but for now figuring out the contexts and how they interleave seems more important.
<br />
<br />Here's the data:
<br /><!-- m --><a class="postlink" href="http://neviksti.com/SPC7110/output1_7030_an1.other.dat">http://neviksti.com/SPC7110/output1_7030_an1.other.dat</a><!-- m --> (the .other. to represent the 'other (unintended) path' described below in my edit)
<br />
<br />(EDIT: Warning! I just realized there was an error in my code.  The first bit of every pixel it always follows the opposite path it should to match the input data.  The data is still good though, as it still represents a valid path (and all the data in the file should be correct for that path), but it means the second bit will always end up taking the lps path.  I hope this doesn't restrict your ability to learn from the data too much.  I'll do a new run after some sleep.)
<br />
<br />The format is different from the .bin output files.
<br />For each symbol I now have two bytes:
<br />first byte is prob value
<br />second byte
<br />bit 7  - first bit of 2bit color at top of current input range
<br />bit 6 - second bit of 2bit color at top of current input range
<br />bit 4 - 1 if lps path was taken
<br />bit 3-0 - number of renomalizations before moving onto next symbol
<br />
<br />
<br />While that long data run went on, I looked through the "first byte" mode 2 data.
<br />
<br />snes format has the first pixel of 4bit color stored as such
<br />bit 0 = first bit of output byte 0
<br />bit 1 = first bit of output byte 1
<br />bit 2 = first bit of output byte 16
<br />bit 3 = first bit of output byte 17
<br />
<br />Sure enough, looking at the data (only list changes)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">input byte, &#91;output bits&#93;<br />00 &#91;0000&#93;<br />13 &#91;0001&#93;<br />1F &#91;0010&#93;<br />36 &#91;0011&#93;<br />4C &#91;0100&#93;<br />62 &#91;0101&#93;<br />7A &#91;0110&#93;<br />8F &#91;0111&#93;<br />A6 &#91;1000&#93;<br />B2 &#91;1001&#93;<br />BD &#91;1010&#93;<br />C8 &#91;1011&#93;<br />D3 &#91;1100&#93;<br />DE &#91;1101&#93;<br />E9 &#91;1110&#93;<br />F5 &#91;1111&#93;<br /></div>
<br />
<br />Looking at the 00-13 range, I was even able to pick out where the next pixel steps through in the same way.
<br />
<br />
<br />So we now know what mode 0, mode 1, mode 2 mean, and what they were intended to compress.  I bet the probability evolution table is the same.  All we need is to figure out precisely how the symbols are used to construct the pixel value, and how the predictions for each symbol are made.
<br />
<br />EDIT: Oh who am I kidding, I can't sleep.
<br />Here's the data from the fixed program:
<br /><!-- m --><a class="postlink" href="http://neviksti.com/SPC7110/output1_7030_an1.dat">http://neviksti.com/SPC7110/output1_7030_an1.dat</a><!-- m -->
<br />
<br />I have no idea how the contexts are chosen, for they are shared within a pixel and even between pixels.  Anyone have any ideas?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zino</b> [ Sun Jul 13, 2008 3:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">It's really an amazing "perfect storm" of people happenning to have time to work on this all at once.  I haven't checked on this board in probably over a month and happenned upon this thread almost right after it got started.  Was anyone notified of this project, or did everyone here just luckily happen upon it?  <br /><br />Amazing.</div>
<br />
<br />Amazing indeed. I got the urge to check up on Snes9X development after years of staying out of it and for random reasons ended up on nesdev just as this discussion got started. This has really got me interested in doing some development again.
<br />
<br />Synchronicity is everyones friend this month it seems.
<br />
<br />-- 
<br />Peter Bortas

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sun Jul 13, 2008 10:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure what word to use, as bitplane has another meaning now, but before we discussed in mode 0 that there were 8 "bitplanes" and each could have several contexts to choose from.
<br />
<br />Well for mode 1, there appear to only be two "bitplanes".  I haven't figured out how many contexts each has yet.   Here's the data to support my claim:
<br />
<br />I ran the prob calculator with all zeros as inputs, and the .dat output is
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">5A C0 5A 41 5A C2 25 40 25 C0 25 40 25 C1 25 40<br />11 C0 25 41 11 C0 11 40 11 C0 11 40 11 C0 11 41<br />11 C0 08 40 11 C0 08 40 11 C0 08 40 11 C0 08 40 <br />11 C1 08 40 08 C0 08 40 08 C0 08 40 08 C0 08 40 <br />08 C0 08 40 08 C0 08 40 08 C0 08 41 08 C0 03 40 <br />08 C0 03 40 08 C0 03 40 08 C0 03 40 08 C0 03 40 <br />08 C0 03 40 08 C0 03 40 08 C0 03 40 08 C0 03 40 <br />08 C0 03 40 08 C0 03 40 08 C1 03 40 03 C0 03 40</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Jul 13, 2008 11:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't mean to throw off the important discussion here, but for what it's worth, I have the rest of the SPC7110 (eg non-compression commands) emulated "correctly" now. When I have time, I'll be sure to refine the unknown cases by running some hardware tests.
<br />
<br /><a href="http://byuu.cinnamonpirate.com/images/bs_275.png" class="postlink">http://byuu.cinnamonpirate.com/images/bs_275.png</a>
<br /><a href="http://byuu.cinnamonpirate.com/images/bs_276.png" class="postlink">http://byuu.cinnamonpirate.com/images/bs_276.png</a>
<br />
<br />Adding the finished compressor should only take a few minutes, and I can add any work-in-progress ones if you'd like to see the results in-game. Which brings me to a question: neviksti, I'll respect whatever license you want to use for your decompressor, but would I have your permission to use it? Ideally, I'd like to release my part of the SPC7110 class under the 2-clause BSD license and/or to the public domain. The decompressor portion can be any license you'd like, of course.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Jul 14, 2008 1:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I don't mean to throw off the important discussion here, but for what it's worth, I have the rest of the SPC7110 (eg non-compression commands) emulated "correctly" now. When I have time, I'll be sure to refine the unknown cases by running some hardware tests.<br /><br /><a href="http://byuu.cinnamonpirate.com/images/bs_275.png" class="postlink">http://byuu.cinnamonpirate.com/images/bs_275.png</a><br /><a href="http://byuu.cinnamonpirate.com/images/bs_276.png" class="postlink">http://byuu.cinnamonpirate.com/images/bs_276.png</a><br /><br />Adding the finished compressor should only take a few minutes, and I can add any work-in-progress ones if you'd like to see the results in-game.</div><br />That's great news. <br />After the high of completing the first mode decompression, I must admit I'm slowing down quite a bit.  We should get it all eventually though.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Which brings me to a question: neviksti, I'll respect whatever license you want to use for your decompressor, but would I have your permission to use it? Ideally, I'd like to release my part of the SPC7110 class under the 2-clause BSD license and/or to the public domain. The decompressor portion can be any license you'd like, of course.</div>
<br />Oh I don't care about any of that liscence stuff.  If someone can make sense of my code and use it, great for them.  Do with it as you please.  
<br />
<br />Which reminds me, what ever happenned to the DSP-1 stuff?  Maybe we should finish up that at some point too.
<br />
<br />;-----------------------------------------
<br />
<br />Alright, looking at output1_7030_an1.dat and  output1_7030_an1.other.dat, both require 5 contexts for bitplane0 and 10 contexts for bitplane1 to explain the probability values.
<br />
<br />Such bizarre numbers.  The 10 could possibly be explained by 2 contexts for each of the 5 bitplane0 contexts.  Actually, I'd venture a guess it is selected by 5*(bit value of bitplane0) + context of bitplane0, since after all this is the remaining bit of the color for that pixel... most details of context selection are probably already done once bitplane0 context is chosen.
<br />
<br />Regardless, it is likely bitplane1 context selection will not be possible to sift through until bitplane0 context selection is understood.  So let's focus on that.  First, why 5?  I have no clue what to make of that.  As a prime number it can't be a series of bits it considers, unless it uses those to look up in a table, and then the table entries are only 0-4.
<br />
<br />You'd want prediction of the pixel to be based on surrounding pixels, and for each pixel bit we have the following data:
<br />- actual bit value
<br />- encoded as mps or lps
<br />- context # of bit
<br />- the "invert" state of that context
<br />
<br />Since we don't have the "answers" of which prob values are from which context, I'm not sure the best way to continue.  Before, we focussed on "bitplane1" since it only had two contexts, which made it possible to figure out which contexts were used for each prob value ... but with 10, I'm not sure how we'd accomplish that.
<br />
<br />Any ideas on the best way to continue here?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jul 14, 2008 6:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><div class="quotetitle">byuu wrote:</div><div class="quotecontent">neviksti, I'll respect whatever license you want to use for your decompressor, but would I have your permission to use it? Ideally, I'd like to release my part of the SPC7110 class under the 2-clause BSD license and/or to the public domain. The decompressor portion can be any license you'd like, of course.</div><br />Oh I don't care about any of that liscence stuff.  If someone can make sense of my code and use it, great for them.  Do with it as you please.</div><br />I'll take that as a <a href="http://en.wikipedia.org/wiki/WTFPL" class="postlink">WTFPL</a>.<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">Which reminds me, what ever happenned to the DSP-1 stuff? Maybe we should finish up that at some point too. </div>
<br />Is the DSP-1 already documented well enough that an emulator running on the Nintendo DS could high-level emulate it effectively? A lot of people on Some Other Forum want some reasonable facsimile of Super Mario Kart, and not just the 20 percent of tracks that made it into Mario Kart DS.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Mon Jul 14, 2008 9:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, it seems this is going fast. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which reminds me, what ever happenned to the DSP-1 stuff? Maybe we should finish up that at some point too.</div><br /><br />Is the DSP-1 already documented well enough that an emulator running on the Nintendo DS could high-level emulate it effectively? A lot of people on Some Other Forum want some reasonable facsimile of Super Mario Kart, and not just the 20 percent of tracks that made it into Mario Kart DS.</div><br /><br />Timing emulation is the main lacking behaviour. Some bits of information about initializations and 'glue' code maybe should be checked, but the opcodes are thought to be bit perfect. You can take a look at them in bsnes's code or here:<br /><br /><a href="http://www.romhacking.net/docs/320/" class="postlink">http://www.romhacking.net/docs/320/</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So we now know what mode 0, mode 1, mode 2 mean, and what they were intended to compress.</div><br />Ummm, so (in case anyone cares) the SPC7110-S-DD1 equivalences would be<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SPC7110&nbsp; &nbsp; &nbsp; &nbsp;S-DD1<br />Type 00&nbsp; &nbsp; &nbsp; &nbsp;Type 11<br />Type 01&nbsp; &nbsp; &nbsp; &nbsp;Type 00<br />Type 10&nbsp; &nbsp; &nbsp; &nbsp;Type 10<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First, why 5?</div>
<br />The patent use 5 "states" determined by the surrounding pixels in the following way: once you have chosen three surrounding pixels A,B,C (it used the pixels to the left, up and left-up corner, but this could change, as occured with the S-DD1 by using the top-right pixel too or whatever combination --figure 12 in the patent--) you determine a 5-fold state in the following way (figures 6, 7, 15A &amp; 15B in the patent):
<br />
<br />A=B=C -&gt; 0
<br />A=B!=C -&gt; 1
<br />A=C!=B -&gt; 2
<br />B=C!=A -&gt; 3
<br />A!=B!=C!=A -&gt; 4

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jul 14, 2008 9:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Bell numbers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First, why 5?</div><br />The patent use 5 "states" determined by the surrounding pixels in the following way: once you have chosen three surrounding pixels A,B,C (it used the pixels to the left, up and left-up corner, but this could change, as occured with the S-DD1 by using the top-right pixel too or whatever combination --figure 12 in the patent--) you determine a 5-fold state in the following way (figures 6, 7, 15A &amp; 15B in the patent):<br /><br />A=B=C -&gt; 0<br />A=B!=C -&gt; 1<br />A=C!=B -&gt; 2<br />B=C!=A -&gt; 3<br />A!=B!=C!=A -&gt; 4</div>
<br />So it appears the number of states for an <em>n</em> pixel context would be equal to the number of ways to partition a set of <em>n</em> elements. This is called the <em>n</em>th <a href="http://en.wikipedia.org/wiki/Bell_numbers" class="postlink">Bell number</a> B[n], and B[3] is 5.
<br />
<br />Just my <a href="http://en.wikipedia.org/wiki/My_two_cents_%28idiom%29" class="postlink">two</a> <a href="http://en.wikipedia.org/wiki/Animal_Crossing_%28series%29#Shopping" class="postlink">bells</a>...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Mon Jul 14, 2008 10:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK. By applying a "quick sieve" method, i have come to the conclusion that the 3 pixels used in bitplane #0 are, counting backwards, #2, #8 &amp; #9 (that is, the second pixel to the left, the top one and the top-left corner). It's strange that the first pixel to the left is unused.
<br />
<br />I still haven't followed the Qe evolution for the contexts, so take this with a bit of salt, as i could have jumped to a conclusion too soon like the last time. I will double check it  now.
<br />
<br />EDITED: Double checked. I have followed the Qe evolution all the way down the output1_7030_an1.dat file. For debug purposes, here you have the output of my program (you can see the 5 contexts for bitplane #0).
<br /><a href="http://andreasnaive.en.eresmas.com/SPC7110/results_test13_2.txt.zip" class="postlink">http://andreasnaive.en.eresmas.com/SPC7110/results_test13_2.txt.zip</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Jul 14, 2008 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which reminds me, what ever happenned to the DSP-1 stuff? Maybe we should finish up that at some point too.</div><br />Timing emulation is the main lacking behaviour. Some bits of information about initializations and 'glue' code maybe should be checked, but the opcodes are thought to be bit perfect. You can take a look at them in bsnes's code or here:<br /><br /><a href="http://www.romhacking.net/docs/320/" class="postlink">http://www.romhacking.net/docs/320/</a></div><br />Wow! I had no idea.<br />Overload didn't update the DSP page ( <!-- m --><a class="postlink" href="http://users.tpg.com.au/advlink/dsp/dsp1.html">http://users.tpg.com.au/advlink/dsp/dsp1.html</a><!-- m --> ) so I thought we still had an opcode to go.<br /><br />Great job!<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First, why 5?</div><br />The patent use 5 "states" determined by the surrounding pixels in the following way: once you have chosen three surrounding pixels A,B,C (it used the pixels to the left, up and left-up corner, but this could change, as occured with the S-DD1 by using the top-right pixel too or whatever combination --figure 12 in the patent--) you determine a 5-fold state in the following way (figures 6, 7, 15A &amp; 15B in the patent)</div><br />Ah, thank you.  I completely forgot about the patent already.<br />I'll read through that tonight.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">OK. By applying a "quick sieve" method, i have come to the conclusion that the 3 pixels used in bitplane #0 are, counting backwards, #2, #8 &amp; #9 (that is, the second pixel to the left, the top one and the top-left corner). It's strange that the first pixel to the left is unused.<br /><br />I still haven't followed the Qe evolution for the contexts, so take this with a bit of salt, as i could have jumped to a conclusion too soon like the last time. I will double check it  now.<br /><br />EDITED: Double checked. I have followed the Qe evolution all the way down the output1_7030_an1.dat file. For debug purposes, here you have the output of my program (you can see the 5 contexts for bitplane #0).<br /><a href="http://andreasnaive.en.eresmas.com/SPC7110/results_test13_2.txt.zip" class="postlink">http://andreasnaive.en.eresmas.com/SPC7110/results_test13_2.txt.zip</a></div>
<br />Wow, you'll probably be done with this mode before I even get home tonight <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Reworking the prob calculator for mode 2 will be super cludgey.  Maybe we'll learn enough from mode 1 to not even need it, but if we do I'll need to think of a better way of rewritting it. (It's probably going to run _real_ slow.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Jul 14, 2008 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Derailing once again, I am ... :/
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which reminds me, what ever happenned to the DSP-1 stuff?</div>
<br />
<br />Someone asked if I was planning on emulating it, and I responded that it wasn't "even" bit-perfect, so I wanted to avoid it. Essentially, it came off very rude (when you considered how much effort went into where we were at thus far,) which really wasn't my intention. I'm rather bad with words like that (ask Dark Force sometime.) I apologize again about that, Andreas and co. Essentially, I'm just overly pessimistic about emulation in general. I get too caught up in perfection. I criticize my own work the same way (consider it a failure, especially the PPU emulation), but it's never cool to be anything but humbly grateful for work others have done.
<br />
<br />But Andreas was really cool, and went back and finished the last bit for me, and even made a really spiffy C++ interface class for me!! It was literally almost drop-in and compile. Awesome guy.
<br />
<br />So, right now, only two issues remain:
<br />
<br />1) we need timing emulation. Suzaku 8 Hours has some rather serious issues (more on zboards somewhere), and Mario Kart has lesser timing issues going on. The problem with emulating this is that most certainly, the length of time to complete each opcode is going to vary based on how complex the inputs are. The best we could do would be an approximation. And even at that, to do this, we'd have to implement the DSP as a coprocessor, rather than as a memory read/write device. This could substantially slow down emulation, for something we can't even get very accurate. Hence I've avoided trying.
<br />
<br />2) there's a chance you can read back partially computed results before the operations finish, ala the SNES mul/div registers. I'd shudder to try and emulate that.
<br />
<br />Realistically, the only way we're going to get the DSP-1 bit-perfect <em>and</em> time-perfect, would be to dump the program ROM, and then emulate the processor it uses. It would then have overhead similar to the SuperFX and SA-1 add-ons. Ouch. But if someone managed to dump the PROMs, I'd give willing to give it a shot :)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>18</strong> of <strong>21</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>