<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=7881" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-06-19T16:11:18-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=7881</id>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-06-19T12:49:30-07:00</updated>
<published>2011-06-19T12:49:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80161#p80161</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80161#p80161"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80161#p80161"><![CDATA[
<div class="quotetitle">qbradq wrote:</div><div class="quotecontent"><br />Infinite,<br /><br />Your description of EEPROM is they way I understood it, however I am able to program a single byte as 0x55, then as 0xAA and it comes out fine. I think your description is correct for Flash though.<br /></div><br /><br />That's interesting...<br /><br />I took a quick look at the data sheet and I couldn't find the description that I'm used to seeing on programming and erasing that coincides with my description.  It doesn't really touch on the issue although you'd think it would use it as an advertising point that you don't have to erase before writing.  It never says you have to so it's pretty ambiguous.  It does continually compare it to SRAM so I guess if you made some assumptions you could come to the conclusion that it works like you're seeing.<br /><br />I also couldn't find out whether it was NAND or NOR EEPROM like lidnariq was saying.  I didn't realize there were different versions like made EEPROM act more like FLASH memory.  <br /><br />One thing is for sure though, large parallel EEPROMs have quickly become a thing of the past.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sun Jun 19, 2011 12:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2011-06-19T12:26:45-07:00</updated>
<published>2011-06-19T12:26:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80155#p80155</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80155#p80155"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80155#p80155"><![CDATA[
There is both NOR and NAND EEPROMs. The former is cheaper, but has to be erased in blocks of multiple bytes — often somewhere between 16 bytes (small I²C EEPROMs) to 512KiB (SSDs). NAND flash can be erased (and then written to) one byte at a time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Jun 19, 2011 12:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-06-19T04:09:28-07:00</updated>
<published>2011-06-19T04:09:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80133#p80133</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80133#p80133"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80133#p80133"><![CDATA[
Infinite,<br /><br />Your description of EEPROM is they way I understood it, however I am able to program a single byte as 0x55, then as 0xAA and it comes out fine. I think your description is correct for Flash though.<br /><br />The EEPROMs were purchased new about three years ago when I thought I was going to make a single board computer with a 6502. This was the first time they have been used. They are <a href="http://www.atmel.com/dyn/products/product_card.asp?part_id=1904" class="postlink">AT28C256</a> if that makes a difference.<br /><br />Anyhow it doesn't matter much right now. The bad byte is in my CHR-ROM within the first 8KB, and my dev cart only uses the top 8KB. A13 and A14 are hard-wired high.<br /><br />Thanks for the advice folks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Sun Jun 19, 2011 4:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-06-18T20:40:31-07:00</updated>
<published>2011-06-18T20:40:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80123#p80123</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80123#p80123"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80123#p80123"><![CDATA[
Think of EEPROM as a piece of paper.<br /><br />You erase the byte or entire chip and it's like starting out with a clean sheet of paper everything's a logic one.<br /><br />Then when you program you're just "poking holes"  by putting the zeros where you want them.  You can always go back and poke more wholes (program the byte again) but you can't remove the old holes without erasing "starting with a clean peice of paper."<br /><br />Keep in mind erasing is the only way to change a 0 to a 1 and must be performed on the whole byte.<br /><br />Programming is the only way to change a 1 to a 0, and while you program the whole byte you're really only programming the bits that include a 0. <br /><br /> So you're able to go back and program over and over again but whatever was a zero previously will stay a zero until you erase the byte.  This is basically what you're doing.  Nothings preventing you from programming twice other than properly maintaining you're data.<br /><br />As far as the byte gone bad it's possible, I would say check all your connections and everything.  But since how it's just the ONE and no others it could be bad.  Is the EEPROM new?  It it's old or refurbished I'd say it's a lot more likely.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sat Jun 18, 2011 8:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hangin10]]></name></author>
<updated>2011-06-19T16:11:18-07:00</updated>
<published>2011-06-18T20:28:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80121#p80121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80121#p80121"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80121#p80121"><![CDATA[
edit: probably incorrect.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3934">Hangin10</a> — Sat Jun 18, 2011 8:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2011-06-18T19:20:06-07:00</updated>
<published>2011-06-18T19:20:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80118#p80118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80118#p80118"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80118#p80118"><![CDATA[
EPROM Bytes, when erased, start out as $FF (all bits set).  (E)EPROM writers then can clear these bytes to program them, but it is a one-way process.  If I had a game on EPROM and I wanted to hack it so that I had infinite energy , say, the byte in a "SBC #$04" could be cleared to "SBC #$00" easily without having to UV erase the EPROM.<br /><br />Maybe someone here could elaborate on EEPROMs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Sat Jun 18, 2011 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-06-18T19:02:39-07:00</updated>
<published>2011-06-18T19:02:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80114#p80114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80114#p80114"/>
<title type="html"><![CDATA[EEPROM Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7881&amp;p=80114#p80114"><![CDATA[
I'm relatively new to EEPROM technology, and I've observed some behavior of my chips that do not make sense. Can someone clarify please?<br /><br />I notice that I can write bytes without doing any type of erase beforehand. I thought I had to erase the byte first? If not, do I have to write an 0xFF first? I seem to recall reading that somewhere.<br /><br />Also, is it possible for a single byte of an EEPROM to be bad? I've wired up my own EEPROM programmer and my CHR-ROM chip always fails to write one specific byte.<br /><br />Thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Sat Jun 18, 2011 7:02 pm</p><hr />
]]></content>
</entry>
</feed>