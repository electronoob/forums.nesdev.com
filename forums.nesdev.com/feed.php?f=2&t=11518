<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=11518" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-09-01T18:22:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=11518</id>
<entry>
<author><name><![CDATA[nestendo]]></name></author>
<updated>2014-09-01T18:22:49-07:00</updated>
<published>2014-09-01T18:22:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133404#p133404</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133404#p133404"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133404#p133404"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />So the setup I imagine with that is, game runs in NMI, soft UART runs in main loop running forever, and it disables NMIs after detecting the start of a byte (so to avoid data corruption). If that byte happens to be the 'start byte', then it keeps NMIs disabled and receives the packet, then acknowledges (send PC an incrementing packet number).<br /></div><br />That's what I'd like to do. The controller port is still pretty fast at 115200 or 57600bps. If you have to turn the screen off to get any real amount of data through I think it would still be useful. You could stream in different rooms with a little fade to black, load whole levels with a slightly longer one.<br /><br />For smaller bits of data I was hoping there might be a way to squeeze a byte or two though without disabling NMI. Would it be possible to get enough time per frame to grab a few packets in NMI after screen updates? and still finish in time for the next NMI?<br /><br />If I could get two bytes through that would be enough for a PC to signal my vertical skiing game to drop a specific object at a specific x coordinate (at the bottom of the screen).<br /><br />I'll see what I can come up with but it'll probably take me a while.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6643">nestendo</a> — Mon Sep 01, 2014 6:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-08-31T16:22:19-07:00</updated>
<published>2014-08-31T16:22:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133365#p133365</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133365#p133365"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133365#p133365"><![CDATA[
Unless you're going to run it over the controller port, IMSNHO you should use something that appears to the NES as a parallel interface. Deserializing something is a large amount of overhead for no obvious benefit.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Aug 31, 2014 4:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-08-31T15:42:31-07:00</updated>
<published>2014-08-31T15:42:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133364#p133364</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133364#p133364"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133364#p133364"><![CDATA[
I'm not sure async serial is necessarily the most efficient protocol for this, at least after the bootloader has finished. I'd prefer the SPI-like protocol of the OP, with some sort of MCU in the middle to act as a FIFO because both the NES and the PC want to be a master: the NES with modified SPI and the PC with USB. You'd need an MCU anyway to run async serial.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Aug 31, 2014 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2014-08-31T15:30:26-07:00</updated>
<published>2014-08-31T15:30:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133363#p133363</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133363#p133363"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133363#p133363"><![CDATA[
<div class="quotetitle">nestendo wrote:</div><div class="quotecontent"><br />Awesome, thank you.<br /><br />I'm hoping I can use this to make a set of general send/receive functions I can use inside a game to stream in small amounts of data between frames or larger amounts if the screen is turned off. Not a bootloader just some way to signal the PC and then pick up a stream of bytes of whatever length, so that the NES doesn't have to keep polling the data line to wait for the PC to send something.<br /><br />If anybody has anything like that, let me know!<br /><br />I've got a vertical scrolling ski-free sort of game started, I'm thinking of trying to stream in the level from a PC.<br /></div><br /><br />You'll need a hardware UART, the NES polling is really a software implementation of the same thing.  The old Squeedo board had one, as did MIDINES.  The Everdrive seems to have USB (so inevitably a UART of some type), but I don't know how it's set up.  The next NES board I make will have one.<br /><br />Depending on your CPU requirements, I think streaming may still work even with a soft UART though.  You lose the CPU time for the transfer, but you should nearly double that because you'll have to wait for the start of the data (and triple it if you want extra data to buffer).  What I imagine is like a simple packet, that would be the start byte (not used in the data) followed by the data.  The PC would just send those bytes repeatedly, until it received an acknowledgement from the NES.  In a safer setup, you would include a packet number, and checksum or CRC (and then it's basically XMODEM format).  Ideally, you'd want enough time to receive 2 packets per frame so you could start buffering them in RAM.<br /><br />So the setup I imagine with that is, game runs in NMI, soft UART runs in main loop running forever, and it disables NMIs after detecting the start of a byte (so to avoid data corruption).  If that byte happens to be the 'start byte', then it keeps NMIs disabled and receives the packet, then acknowledges (send PC an incrementing packet number).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sun Aug 31, 2014 3:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nestendo]]></name></author>
<updated>2014-08-30T17:17:31-07:00</updated>
<published>2014-08-30T17:17:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133307#p133307</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133307#p133307"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133307#p133307"><![CDATA[
Awesome, thank you.<br /><br />I'm hoping I can use this to make a set of general send/receive functions I can use inside a game to stream in small amounts of data between frames or larger amounts if the screen is turned off. Not a bootloader just some way to signal the PC and then pick up a stream of bytes of whatever length, so that the NES doesn't have to keep polling the data line to wait for the PC to send something.<br /><br />If anybody has anything like that, let me know!<br /><br />I've got a vertical scrolling ski-free sort of game started, I'm thinking of trying to stream in the level from a PC.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6643">nestendo</a> — Sat Aug 30, 2014 5:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[43110]]></name></author>
<updated>2014-08-30T13:55:59-07:00</updated>
<published>2014-08-30T13:55:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133301#p133301</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133301#p133301"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133301#p133301"><![CDATA[
<div class="quotetitle">nestendo wrote:</div><div class="quotecontent"><br />Does anyone know what happened to this website? Been down for a few weeks.<br /></div><br />Using redirections <a href="http://forums.nesdev.com/viewtopic.php?p=107763#p107763" class="postlink">described in this thread</a>, the new locations are:<br /><br /><a href="http://blargg.8bitalley.com/parodius/nes-code/bootloader/" class="postlink">http://blargg.8bitalley.com/parodius/nes-code/bootloader/</a><br /><a href="http://blargg.8bitalley.com/parodius/nes-code/serial/spec.html" class="postlink">http://blargg.8bitalley.com/parodius/nes-code/serial/spec.html</a><br /><a href="http://blargg.8bitalley.com/parodius/nes-code/serial/cable.html" class="postlink">http://blargg.8bitalley.com/parodius/nes-code/serial/cable.html</a><br /><br />Although I think the <a href="http://wiki.nesdev.com/w/index.php/Serial_Bootloader" class="postlink">boot loader specs</a> on the wiki is more up to date and simpler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6385">43110</a> — Sat Aug 30, 2014 1:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nestendo]]></name></author>
<updated>2014-08-30T08:35:25-07:00</updated>
<published>2014-08-30T08:35:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133294#p133294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133294#p133294"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=133294#p133294"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />I believe Blargg's bootloader is the best solution for compatibility:<br /><a href="http://slack.net/~ant/old/nes-code/bootloader/" class="postlink">http://slack.net/~ant/old/nes-code/bootloader/</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/spec.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/spec.html</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/cable.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/cable.html</a><br /></div><br />Does anyone know what happened to this website? Been down for a few weeks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6643">nestendo</a> — Sat Aug 30, 2014 8:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nestendo]]></name></author>
<updated>2014-08-17T10:25:35-07:00</updated>
<published>2014-08-17T10:25:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132660#p132660</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132660#p132660"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132660#p132660"><![CDATA[
Woo, got it working! Both the bootloader thing and pc2nes.<br /><br />pc2nes worked right away on my PC but the computer closest to my NES is a mac and under wine pc2nes bugged out so I had to compile pc2nes from source.<br /><br />Initially it didn't work but I noticed it would do the first transfer properly and then bug out on the second, regardless of whether the second part was configured to go at 57600 or 115200 bps. I went back to the source and changed the delay between the two transfers to 500ms instead of 100ms, which is probably overkill, but now it works. Though only at 57600bps for some reason on the mac. On my pc 115200bps works no problem.<br /><br /><strong>Instructions for anyone trying to get pc2nes-v01 working on osx (tested on mavericks) so you can drag&amp;drop to send files to the NES through the second controller port:</strong><br /><br />1. Get a USB-RS232 cable, I used <a href="http://ca.startech.com/Cards-Adapters/Serial-Cards-Adapters/USB-RS232-DB9-DB25-Serial-Adapter-Cable~ICUSB232DB25" class="postlink">this one</a>. This one uses a &quot;Prolific PL-2303&quot; chip, I'm not sure what everybody else is using but add this to the list of chips that work.<br /><br />2. Build the RS232-TTL circuit from <a href="http://slack.net/~ant/old/nes-code/serial/cable.html" class="postlink">here</a>. So far I have only built the one-way cable, the diagram on the left. Credit goes to Blargg for this one.<br /><br />3. Download pc2nes-v01 from <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520" class="postlink">here</a>. Credit to thefox for pc2nes-v01.<br /><br />4. Extact the zip and follow the instructions in the readme file, put your mappers in the mappers folder and get it on your powerpak. Then go to the source folder. Open up Main.cpp. Change #define SEND_115200 from 1 to 0. Look for delay(100) and change it to delay(500). Save.<br /><br />5. Download the boost library source from <a href="http://sourceforge.net/projects/boost/files/boost/1.56.0/boost_1_56_0.tar.gz/download" class="postlink">here</a>.<br /><br />6. Build the boost libs for your system. In a terminal, cd /path/to/boost_1_56_0/ and then run ./bootstrap.sh and then ./b2<br /><br />7. Compile the pc2nes source. The first time you run this command you might get an error saying you don't have the developers tools and it will prompt you to install the command line developers tools. Go along with it. And then cd to the pc2nes-source directory and run this command, with paths changed so it can find the boost include and lib files on your system (credit goes to Bananmos from <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520&amp;start=60" class="postlink">this thread</a>):<br /><br />g++ -o pc2nes_osx_57600 -I./nrpc-1.2a1 -I/wherever/you/put/boost_1_56_0 -L/wherever/you/put/boost_1_56_0/stage/lib Main.cpp nrpc-1.2a1/nrpc/*.c* -pthread -lboost_system<br />mv pc2nes_osx_57600 ../<br /><br />8. Use automator to make a shortcut you can drag .nes files on to send them to the NES similar to the SendTo trick posted by thefox <a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520&amp;start=30" class="postlink">here</a>.<br /><br />Open automator from the Applications folder, pick &quot;Application&quot; as the type and click the choose button. <br />Type shell in the search box and drag a &quot;Run Shell Script&quot; action over to the right side. <br />On the &quot;Run Shell Script&quot; action you just added, where it says &quot;Pass input: to stdin&quot; change it to &quot;Pass input: as arguments&quot;.<br />Replace the default script with:<br /><br />export DYLD_LIBRARY_PATH=.:/wherever/you/put/boost_1_56_0/stage/lib<br />cd /wherever/you/put/pc2nes-v01/<br />./pc2nes_osx_57600 -ntsc -port=/dev/tty.usbserial $1<br /><br />Of course, replace the paths to the boost libs and pc2nes-v01 folder with your own, and replace /dev/tty.usbserial with the name of the device your USB-RS232 cable is showing up as.<br />Now click Save and call the .app file whatever you want. For me I called it SendToNES.app. I dragged it on to my dock and now when I want to send something to the NES I just drag it on to the icon and off it goes. My next step will be moving the pc2nes and boost libs into the SendToNES.app package so that everything is completely self contained. But this example doesn't get to that point.<br /><br />9. Drag and drop something to the NES, you're done.<br /><br /><br />Serious thanks to everyone that has been working on this. thefox, pc2nes is amazing. I'm SO new to nes development. I have to try things over and over to get them working. This really saves time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6643">nestendo</a> — Sun Aug 17, 2014 10:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2014-08-11T17:48:49-07:00</updated>
<published>2014-08-11T17:48:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132425#p132425</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132425#p132425"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132425#p132425"><![CDATA[
I believe Blargg's bootloader is the best solution for compatibility:<br /><a href="http://slack.net/~ant/old/nes-code/bootloader/" class="postlink">http://slack.net/~ant/old/nes-code/bootloader/</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/spec.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/spec.html</a><br /><a href="http://slack.net/~ant/old/nes-code/serial/cable.html" class="postlink">http://slack.net/~ant/old/nes-code/serial/cable.html</a><br /><br />What I like about it, is that it's basically a bootloader's bootloader.  It could be compatible with any type of comms adapter, all it has to do is support 57600 baud async for the initial load.  So for the end user, they would select a driver for the device they have.  The bootloader then loads that driver into the NES's RAM, from there it could begin using SPI, parallel, other async options, anything.<br /><br />It doesn't address compatibility between programs, that's something that remains to be worked out as more of these types of programs are developed.  I'd say on the PC side that using a serial port (COM port in Windows, TTY in Linux) is pretty much universal.  The end user just needs to select which port to use, the OS handles the rest.  On the NES side, it pretty much comes down to having 2 subroutines, one to send a byte, and one to receive a byte.  Receiving is the only place where differences could occur, I think it's best to return from it with (for example) a pass/fail condition in the carry flag, as opposed to polling forever.  But maybe that would be a candidate for a third subroutine, I don't know.  The bootloader pretty much makes it easy for the end user, since it's typically  easier to load new software onto the PC compared to an NES cart.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Aug 11, 2014 5:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nestendo]]></name></author>
<updated>2014-08-11T11:02:30-07:00</updated>
<published>2014-08-11T11:02:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132407#p132407</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132407#p132407"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132407#p132407"><![CDATA[
Ah, interesting.<br /><br />I'm not a pro when it comes to the electronics side of things. A friend picked up some darlington transistors and when I saw how they work I thought of this project. Didn't realize it could be done without them or some form of relay. Though I see now there's definitely better ways to do it with ftdi/rs232/spi/whatnot. Must have been using the wrong search terms when I set out to find if anybody had done this before. A few of you, at least, have this all figured out.<br /><br />I'm still not sure what the concensus is on the best way to do it, though.<br /><br />Is there any thread that sort of sums up the various approaches and singles one out as the winner? Or is there a most-popular method that is the best supported by all the tools people have made? Seems like all the information on this is scattered between many threads.<br /><br />I'm still reading through the threads and I'm at work at the moment so maybe there's a nice summary I haven't run into yet. I've already got an FTDI cable and a RS232-USB cable so hopefully when I get home I can get to the bottom of this.<br /><br />Thanks for all the replies, by the way!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6643">nestendo</a> — Mon Aug 11, 2014 11:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mikejmoffitt]]></name></author>
<updated>2014-08-11T08:48:43-07:00</updated>
<published>2014-08-11T08:48:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132402#p132402</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132402#p132402"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132402#p132402"><![CDATA[
The darlington transistors are not really necessary. It is easier to just set the pin to output a logic 0 and then change its mode to OUTPUT to pull the line low, and change it to INPUT to put it in a high-z state (no button pressed). However, the transistors make the design a little easier to adapt.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5314">mikejmoffitt</a> — Mon Aug 11, 2014 8:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-08-11T01:20:57-07:00</updated>
<published>2014-08-11T01:20:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132386#p132386</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132386#p132386"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132386#p132386"><![CDATA[
Blargg has done some awesome work when it comes to sending data through the controller port. The software koitsu linked is my software called pc2nes which takes an iNES ROM and transfers it over the controller port to PowerPak. pc2nes uses blargg's nrpc library. nrpc is a C/C++ library that takes a set of commands as function calls (such as write to CPU memory, write to PPU memory, etc) and produces a file that can be transferred to a NES that is running a bootloader software. Bootloader is simply a tiny software that waits for a transfer from outside, then executes the transferred block. nrpc was never officially released though.<br /><br />Upcoming is also nrpc 2, which adds synchronous serial so it can get transfer speeds upto 25 KB/sec. The asynchronous serial was limited to about 10 KB/sec. I have been testing nrpc 2 a little bit earlier this year.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Mon Aug 11, 2014 1:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2014-08-10T23:36:31-07:00</updated>
<published>2014-08-10T23:36:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132377#p132377</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132377#p132377"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132377#p132377"><![CDATA[
There's also this, which I built a cable for and it works great.  (The Youtube video is missing however, sorry about that -- I merged my old Youtube and Gmail accounts and as such it didn't move a lot of my videos, so I had to reupload ones I had archived, which were only a few):<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7520">viewtopic.php?f=9&amp;t=7520</a><!-- l --><br /><br />I'm sure thefox will chime in here if/when he sees your thread.  :-)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Sun Aug 10, 2014 11:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[nestendo]]></name></author>
<updated>2014-08-10T23:05:16-07:00</updated>
<published>2014-08-10T23:05:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132374#p132374</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132374#p132374"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132374#p132374"><![CDATA[
Ah so this has been done before. Sounds like a much better way of doing it too.<br /><br />What kind of speed can you get with your method?<br /><br />I've read through the link you posted, thanks. I'm not sure I could build such a thing from that information though.<br /><br />Would you happen to have instructions on how to build the cable you're using?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6643">nestendo</a> — Sun Aug 10, 2014 11:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2014-08-10T21:40:16-07:00</updated>
<published>2014-08-10T21:40:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132369#p132369</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132369#p132369"/>
<title type="html"><![CDATA[Re: Sending data to NES through controller port]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11518&amp;p=132369#p132369"><![CDATA[
I've not made an interface exactly like that, but others, and myself, have built communication adapters using RS232 (w/ MAX232/MAX202) and USB (PL2303 or FT232) through the controller port.  I've built a batch of these recently that will be used for an upcoming project.  It's just bog-standard, old-as-the-hills RS232, and common USB adapters work in a compatible way by creating a &quot;virtual COM port&quot;.  With that interface, you only need 1 input and 1 output.  The input to the NES is usually D0 (though D3,D4 are available if you have the right cable), and output from the NES the only option is OUT0 (AKA 'strobe').<br /><br />So, to receive data you would read the input bit at D0 of $4017, if you use the 2nd port.  And to write data, write to D0 of $4016 (doesn't matter which port you're using).<br /><br />There are quite a bit of other threads on the forum, here's one:<br /><a href="http://forums.nesdev.com/viewtopic.php?t=7032&amp;view=next" class="postlink">http://forums.nesdev.com/viewtopic.php?t=7032&amp;view=next</a><br /><br />I remember another project that was kinda similar, in that it was synchronous:<br /><a href="http://nesdev.com/lptnes_v130.zip" class="postlink">http://nesdev.com/lptnes_v130.zip</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />- A few bytes are reserved for control codes so when you send new CHR data for displaying images, there are certain values you can't send because they're reserved.<br /></div><br />Yes, a common problem.  The usual solution is to use &quot;escape codes&quot;, say $FE is the escape code.  To send command 0, send $FE $00 and so on.  Send $FE $FE to send just plain old byte $FE.  It's much like run-length-encoding, which has a lot of examples on NES.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sun Aug 10, 2014 9:40 pm</p><hr />
]]></content>
</entry>
</feed>