<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Updating the screen</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Updating the screen</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9638">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9638</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xgamer</b> [ Thu Dec 27, 2012 10:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, I'm trying to understand NES game code on a conceptual level. I've done some asm with other CPUs, but not the 6502, or the 2A03 for that matter.<br /><br />I would like to know the manner in which the nametable data and attribute table actually get to the PPU during the NMI. Does the CPU block transfer all 960 bytes of the nametable and the attribute table at once? From what I gather, the actual transfer is usually a loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Dec 27, 2012 11:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">xgamer wrote:</div><div class="quotecontent">Does the CPU block transfer all 960 bytes of the nametable and the attribute table at once?</div><br />No, there's no time for that during VBlank. Games just transfer the parts that change from one frame to the next. For example, when a game scrolls, a large portion of the background remains the same, only the new parts that are scrolling into view need to be updated.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">From what I gather, the actual transfer is usually a loop.</div><br />It can be a loop, but it depends on how much data needs to be transferred. If you have a lot of data to transfer, unrolling the loop would be a good idea. Realistically, you can transfer at most ~270 bytes to VRAM, and that's with an unrolled chain of LDAs STAs and you don't do anything else in the same VBlank (no sprite updates). If you do update the sprites, you can transfer about 210 bytes with fast unrolled code. The number drops significantly when you use traditional loops.<br /><br />You can buy some extra time with forced blanking which is turning rendering off during the visible portion of the frame. You can chop some scanlines at the top and bottom and get some extra VBlank time, but this is not so trivial and not recommended for beginners.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xgamer</b> [ Thu Dec 27, 2012 11:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">No, there's no time for that during VBlank. Games just transfer the parts that change from one frame to the next. For example, when a game scrolls, a large portion of the background remains the same, only the new parts that are scrolling into view need to be updated.</div><br />Ah, the dirty rectangles method. But wouldn't checking for differences in the tables take as much time as block transferring the whole thing? Wouldn't you have to compare byte to byte?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Dec 27, 2012 11:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you scroll, new areas of the map become exposed, so you draw new rows of columns of tiles onto the nametable.  No checking, no dirty rectangles.<br />If you're scrolling in 4 directions, that's a column of 32 tiles, a row of 32 tiles, 8 bytes of attributes for a row of tiles, and 8 bytes of attributes for a column of tiles.<br />You also might be using more than 32 tiles in a row or column, depending on how the nametables are arranged.  For example, you might use 34 or 36 tiles for a row instead of 32 if you are using vertical mirroring.<br />You might also allow tiles on the map to change as well, so that's 4 bytes that change, plus 1 for the new attribute byte.<br /><br />Every time writes aren't contiguous, you write a new vram address before each set of bytes.  Note that there is also a +32 increment mode to let you write columns of tiles.<br /><br />When you write a row of tiles, you might be breaking the row into two pieces.  One set of writes for one nametable, and another set of writes for another nametable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 28, 2012 12:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">xgamer wrote:</div><div class="quotecontent">But wouldn't checking for differences in the tables take as much time as block transferring the whole thing? Wouldn't you have to compare byte to byte?</div><br />You don't have to compare the contents of the name table. A scrolling engine is meant to keep track of what's on screen and what's not, so it can easily tell what parts of the map are entering the screen and where in the name tables they should be drawn.<br /><br />The math is quite simple really. Think of a side-scroller. The level just started and an entire screen has been drawn, 32 columns (since it's a side scroller, screens are always drawn in columns) of tiles. Scroll one pixel to the left and the game's in trouble, since the 33rd column contains uninitialized data (i.e. garbage). So, before the next frame is rendered, the game needs to fetch the 33rd column of tile from the level map and write it to the 33rd column of the name tables (that would be the first column of the second name table, assuming the game is using vertical mirroring and has the name tables arranged side by side).<br /><br />That just goes on and on, every time a new section is about to enter the screen, the scrolling engine reads the data from the level map and writes it to the correct spot in the name tables. You can see that in action if you use an emulator with good debugging features. Open a game that scrolls in FCEUX for example. Then open the name table viewer and walk around and you'll see how the name tables are updated, and how new tiles overwrite old ones. The amount of tiles updated varies from game to game depending on how their level maps are stored and how the name tables are arranged, but the basic concept is always the same.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 28, 2012 8:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://wiki.nesdev.com/w/index.php/File:SMB1_scrolling_seam.gif" class="postlink"><img src="http://wiki.nesdev.com/w/images/a/ae/SMB1_scrolling_seam.gif" alt="Image" /></a><br /><br />Scrolling seam updates in <em>Super Mario Bros.</em><br />The red brackets represent the visible area, and the <img src="./images/smilies/icon_question.gif" alt=":?:" title="Question" /> blocks represent the area of the map that the CPU is decoding and uploading to the PPU during vblank

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xgamer</b> [ Fri Dec 28, 2012 9:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><a href="http://wiki.nesdev.com/w/index.php/File:SMB1_scrolling_seam.gif" class="postlink"><img src="http://wiki.nesdev.com/w/images/a/ae/SMB1_scrolling_seam.gif" alt="Image" /></a><br /><br />Scrolling seam updates in <em>Super Mario Bros.</em><br />The red brackets represent the visible area, and the <img src="./images/smilies/icon_question.gif" alt=":?:" title="Question" /> blocks represent the area of the map that the CPU is decoding and uploading to the PPU during vblank</div><br />Yeah, I understand how updating works during scrolling. What about when a significant part of the background changes, for example, in Metal Man's stage in Mega Man 2, where the machinery in the background is moving relatively quick. What's more is that the areas that need to be updated aren't contiguous in memory. How does the update routine know exactly which blocks need to be updated?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>freem</b> [ Fri Dec 28, 2012 9:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The gears in the background of Metal Man's stage are animated via palette cycling; the last two colors change pretty much every frame; the conveyor belts are animated in the same fashion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 28, 2012 10:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">xgamer wrote:</div><div class="quotecontent">Yeah, I understand how updating works during scrolling. What about when a significant part of the background changes, for example, in Metal Man's stage in Mega Man 2, where the machinery in the background is moving relatively quick. What's more is that the areas that need to be updated aren't contiguous in memory. How does the update routine know exactly which blocks need to be updated?</div><br />Like freem said, that's just an illusion. Notice how these animations use only 2 colors, instead of the 4 the NES is capable of. This makes it possible to store 2 different images in the same tile, and with some palette trickery you can display one or the other. The background itself doesn't change.<br /><br />There other tricks to animate the background, such as tile bankswitching or pattern table updates (possible with CHR-RAM). When tiles in the pattern tables change, all instances of them will display the new graphics when the next frame is rendered. The blocks in SMB3 for example are animated like this, the name table isn't touched at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Dec 28, 2012 10:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you need to do a dirty rectangles style update, you will normally do all the calculation you can outside of the NMI (where you have much more time), and just update a simple list (or block of code in RAM) to be sent to the PPU very quickly during the next NMI.<br /><br />I forget which Mega Man has this, but there's one with a Wily stage boss that's basically a giant machine that covers the whole screen, and you can see very clearly that it takes the game many frames to get around to updating the whole thing. The update ends up looking rather ragged, actually. (This is why big bosses are usually done with scrolling tricks instead.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xgamer</b> [ Fri Dec 28, 2012 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After looking at MM2 again, I see what you guys are saying. I can see the illusion now, especially in Bubble Man's stage. The tile patterns of the &quot;waterfall&quot; in the background don't actually change at all, the palettes are just alternating between white, and 2 different shades of blue. That's a cool trick.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 28, 2012 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tricks like these are the reason coding for these old consoles is fun! If it was just about straightforward programming to get a game done we'd all be coding for PCs, not for the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Dec 28, 2012 12:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The other problems with PCs are that you can't rely on a gamepad's presence and that a lot of players expect more complex graphics than one person can reasonably make.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Dec 28, 2012 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Updating the screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">a lot of players expect more complex graphics than one person can reasonably make.</div><br />If that was the case, there wouldn't be so many retro-looking games. Anyway, we're not talking mainstream gaming here, the number of people who still own old consoles or play on emulators regularly is probably not much different than the number of people playing indie PC games.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>