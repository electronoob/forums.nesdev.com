<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - ARM Assembler Question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">ARM Assembler Question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=14236">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=14236</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Mon May 16, 2016 4:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />(Assuming the Nintendo DS is &quot;obsolete&quot; so this thread can be in Other Retro Dev, move if need be).<br /><br />I wanted to check out ARM assembly language, but don't have any money for a Raspberry Pi (my preferred method), so I decided to go with the Nintendo DS using libnds.<br /><br />ARM makes sense to some extent, but due to problems with GAS not letting me grab just #defines from a file and ignore C code, if I continue with the NDS then C will be the primary language rather than the assembler.<br /><br />That's not exactly what I'm wondering about, though. What I want to know is why GAS chooses to have registers &quot;point to pointers&quot; instead of be pointers.<br /><br />As an example, for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">iprintf&#40;&quot;HI!&quot;&#41;;</tt>, GAS would generate:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldr r0, &#91;message_pointer&#93;<br />bl iprintf<br /><br />message_pointer:<br />.word message<br /><br />message:<br />.ascii &quot;HI!\0&quot;<br /></div><br /><br />The pointer isn't necessary, though, since afaik registers can be pointers for themselves:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldr r0, =message<br />bl iprintf<br /><br />message:<br />.ascii &quot;HI!\0&quot;<br /></div><br /><br />This is kind of a difficult question now that I think about it (and may or may not be kind of an excuse to have people to talk about ARM with) but does anyone know why GAS chooses to manually make pointers rather than just skip that step of the assembly process entirely? Is there a good reason, or is that just a random consequence of having a computer make code for you?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon May 16, 2016 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ARM has an explicit instruction for &quot;pull out the 32-bit pointer from this 16-bit offset in memory&quot;, but no &quot;just load a 32-bit number directly into a register&quot; (The latter is a pseudoinstruction that <em>might</em> string several individual instructions together, depending on the specific numeric value of the pointer)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 16, 2016 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Probably because of the <a href="https://en.wikipedia.org/wiki/Literal_pool" class="postlink">literal pool</a> thing that ARM does. An immediate operand is limited to 8 bits but can be shifted, but pointers are 32 bits. There are two workarounds:<br /><ol style="list-style-type: lower-alpha"><li>The MIPS approach of constructing a constant in two steps with a load immediate shifted followed by an OR immediate. This works well on MIPS because constants can be 16 bits, with an optional 16-bit left shift only for load immediate (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lui</tt>). On ARM, this can be effective for Game Boy Advance and Nintendo DS MMIO ports in 0x04000000-0x040003FC or 0x04800000-0x048003FC because they can be expressed as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&#40;0x40 &lt;&lt; 20&#41; | &#40;regaddr &lt;&lt; 2&#41;</tt>. But generic addresses aren't necessarily easy to build this way. </li><li>Store the pointer in a table between one subroutine and the next and load it using PC-relative addressing. The assembler offers a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr rxx, =whatever</tt> syntax to add the address to a nearby pool and generate a load instruction. </li></ol>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Mon May 16, 2016 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Confusion ensues.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An immediate operand is limited to 8 bits but can be shifted, but pointers are 32 bits.</div><br />Would this be an immediate operand? Because it loads a 32-bit number and assembles just fine: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr r3, =0xffffffff</tt>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon May 16, 2016 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Assemble the code, then disassemble (you can use e.g. objdump to disassemble an object file). You should see that your instruction has changed into a different form.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 16, 2016 5:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nicklausw wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An immediate operand is limited to 8 bits but can be shifted, but pointers are 32 bits.</div><br />Would this be an immediate operand? Because it loads a 32-bit number and assembles just fine: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr r3, =0xffffffff</tt></div><br />The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mvn</tt> instruction loads a number and EORs it with 0xFFFFFFFF it before storing it. For example, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mvn r3, #0x000B</tt> puts <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">0xFFFFFFF4</tt> into r3.<br /><br />Because <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr rxx,=value</tt> is a macro, it can do any of several things. Usually it'll be assembled to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mov</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mvn</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mov</tt> then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">orr</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mvn</tt> then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bic</tt>, or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr</tt> from a constant pool. The last is most likely in Thumb.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Mon May 16, 2016 5:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh! So the &quot;double-pointers&quot; take up less space and are faster then? Okay, I had it all backwards.<br /><br />Is using immediate addressing that much of a slow-down, though, if at all? Because having to have a section of code just for pointers is not ideal.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon May 16, 2016 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The literal pool takes two 32-bit memory cycles. (or one 16-bit plus one 32-bit in thumb mode)<br />Two in-line instructions take two 32-bit memory cycles (or ... some number of 16-bit fetches in thumb mode)<br /><br />More to the point, if you try to prevent the compiler and/or assembler from using a literal pool, you're going to be fighting it the whole way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Mon May 16, 2016 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">More to the point, if you try to prevent the compiler and/or assembler from using a literal pool, you're going to be fighting it the whole way.</div><br />Yeah, I'm not really trying to get the compiler to be evasive with that type of thing. If libnds functions will run like that, then I never have to look at that machine code mess, so it doesn't really concern me. It's just that I don't want to be redundant with assembler code written on my own.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 16, 2016 6:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Premature optimization is a root of all kinds of evil. Get it working first, and then get it fast once it's working.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue May 17, 2016 1:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a problem typical to RISC processors. The entire design is based on a word size, which is also the instruction size and register size. Additionally, ALL instructions are that word size, and there is no instructions that (directly) uses multiple words. As such, it is impossible to have a &quot;load immediate into register&quot; instruction, because this immediate already takes the whole word (in this case, 32-bit).<br /><br />The only solution is to have a two-word instruction, but this is also impossible because RISC philosophy says all instructions should be 1 word long, supporting variable length instruction would make it much harder to pipeline the processor.<br /><br />The solution used by ARM is to have the &quot;second word of the instructions&quot; (in this case, your pointer) stored not in the code, but right after the code. (this was an arbitrary decision, it could go before and work just as well). This turned out to be very practical for romhacking, as there is a pool of parameters used in a function right to eachother, which often makes you able to change things without even disassemble the routine <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Note that RISC was never made to save memory (on the other hand, it wastes a lot of ROM as programs are stored very inefficiently - except for THUMB mode in ARM where it gets decent). It was made to simplify instruction decoding within the processor in order to get them to run faster.<br /><br />Also note that there is NO pointer to your pointer. It is just an instruction relative to the program counter (r15). ARM assembly uses many pseudom-instructions, which acually are compiled to different instructions. Google &quot;arm pseudo instruction&quot; to get more details.<br /><br />In this case<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda r0, =something<br /></div><br /><br />is probably equivalent to something like<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">here:<br />&nbsp; &nbsp; lda r0, &#91;r15&#93;, #something-here-8<br /></div><br />The PC is always 2 words (8 bytes) ahead because of the pipeline.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue May 17, 2016 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />AFAIK Hitachi SuperH (used by the Saturn and Dreamcast) also uses literal pools.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Tue May 17, 2016 9:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">In this case<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda r0, =something<br /></div><br /><br />is probably equivalent to something like<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">here:<br />&nbsp; &nbsp; lda r0, &#91;r15&#93;, #something-here-8<br /></div><br />The PC is always 2 words (8 bytes) ahead because of the pipeline.</div><br />Hell no, not only you fetch the wrong word, you'll corrupt the PC, or it will fault. This is post-indexed addressing, instead of regular offset addressing, which is the only form accepted for base addresses based on PC.<br />So it's more like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldr r0, &#91;pc, #off-8&#93;<br /></div><br />The -8 thing is true, PC is &quot;ahead&quot; because of pipeline. This is important to consider upon receiving imprecise faults (if I remember correctly!), the old PC points after the faulty instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Thu May 19, 2016 5:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Um...does anyone have any idea why lr might magically turn into pc in a subroutine? Because I have a problem where my subroutines will randomly turn into a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bx lr</tt> loop sometimes, and I can't figure things out at all. Not sure what other information to provide.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Thu May 19, 2016 6:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ARM Assembler Question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nicklausw wrote:</div><div class="quotecontent">Um...does anyone have any idea why lr might magically turn into pc in a subroutine? Because I have a problem where my subroutines will randomly turn into a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bx lr</tt> loop sometimes, and I can't figure things out at all. Not sure what other information to provide.</div><br />Update, I figured this one out on my own.<br /><br />Putting:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">stmfd&nbsp; sp!, {lr}</div><br />at the beginning of subroutines, and:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldmfd&nbsp; sp!, {pc}</div><br />at the end prevents recursive lr's. Now to figure out what the crap &quot;stmfd&quot; and &quot;ldmfd&quot; mean.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>