<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8999" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-06-30T14:34:08-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8999</id>
<entry>
<author><name><![CDATA[sktsqrl]]></name></author>
<updated>2012-06-30T14:34:08-07:00</updated>
<published>2012-06-30T14:34:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96268#p96268</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96268#p96268"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96268#p96268"><![CDATA[
Has anyone tried User-Mode Scheduling <!-- m --><a class="postlink" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd627187">http://msdn.microsoft.com/en-us/library ... p/dd627187</a><!-- m --> for an emulator project, or aware of someone else doing it?<br />It seems to be the way to have the advantages of cooperative threading with multicore backing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5343">sktsqrl</a> — Sat Jun 30, 2012 2:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2012-06-28T18:42:21-07:00</updated>
<published>2012-06-28T18:42:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96189#p96189</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96189#p96189"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96189#p96189"><![CDATA[
Oh, before I forget ... I actually did have an interesting multithreading idea for an SNES PPU renderer (there, the PPU is an absolute beast.)<br /><br />For a scanline renderer, instead of blitting one line at a time ... cache the MMIO registers to a "line" buffer, and do this for the entire frame, under the knowledge that VRAM isn't writable, and OAM isn't supposed to be (only one game does it anyway.) You could pack the state down to ~50 bytes per scanline, plus possibly extra for palette changes (store as patches for each change, start with the CGRAM copy at start of frame.)<br /><br />Now when you go to render the entire frame at once, use OpenMP (or better to roll your own lighter weight version; OpenMP has crazy overhead) to split up the scanlines.<br /><br />The thing with OpenMP is that it's almost always slower than non-OpenMP, except when things get really intense. Like for instance, it really helps with my HQ2x graphics filter, but it tends to hurt a simple 2X bilinear interpolation scale.<br /><br />The idea probably won't work as well on the NES, since that tends to demand a cycle-based renderer for a lot more than just one game.<br /><br />But even with one thread, having all that code running in a tight loop with no contextual changes should lead to a nice performance boost by way of caching.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Thu Jun 28, 2012 6:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[James]]></name></author>
<updated>2012-06-28T07:26:53-07:00</updated>
<published>2012-06-28T07:26:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96141#p96141</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96141#p96141"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96141#p96141"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />You would only use cothreading because it makes the code *substantially* cleaner and and less error prone (not hyperbole; you basically remove the state machine entirely yet gain effectively infinite precision to break out anywhere transparently), as I'm sure anyone who's tried it will attest.<br /></div><br />It really is an intuitive method for writing an emulator.  I don't know if yours is the first implementation, but I learned about this method from your posts a few years ago, so you get the credit; nice job!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=88">James</a> — Thu Jun 28, 2012 7:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-27T21:18:11-07:00</updated>
<published>2012-06-27T21:18:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96119#p96119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96119#p96119"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96119#p96119"><![CDATA[
Actually, now that I've mulled over the details... I've decided I'm not going to bother with those optimization attempts.  I doubt they would push preemptive over where cooperative already is, and they would severely complicate the code.<br /><br />So I'm going to call an end to the experiment.  Switch to cooperative exclusively, and continue on the emulator.<br /><br /><br />It was fun and informative though!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Jun 27, 2012 9:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-06-27T20:52:52-07:00</updated>
<published>2012-06-27T20:52:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96118#p96118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96118#p96118"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96118#p96118"><![CDATA[
Another template with a fail-safe inside can be found in some of my own projects:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">s0wait:<br />  BIT $2002<br />  BMI skip_rastereffect  ; we missed sprite 0 entirely this frame<br />  BVC s0wait</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jun 27, 2012 8:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-27T20:19:14-07:00</updated>
<published>2012-06-27T20:19:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96117#p96117</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96117#p96117"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96117#p96117"><![CDATA[
<div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent"><br />1) What OS is this running under? Or more specifically, what preemptive threading model are you using?<br /></div><br /><br />Win7 Home premium.  Emu is written in C++ with Boost for threading.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2) How many processor cores were available to the program?<br /></div><br />Intel i3, Dual core, hyperthreaded.  So 4 "cores" (technically 2 cores with 2 threads each). 3.2 Ghz<br /><br />(I realize that ~230 fps in an nes emu is pretty poor performance for this processor, but I am emulating as many of the nitty gritty details as possible).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />How many threads did you use? Would you expect the results to change as you add more threads for things like the APU?<br /></div><br /><br />2.  PPU and CPU.  There is no APU implementation yet.  I didn't want to get too far with development until I had an idea on performance.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />4) What optimization level did you use when compiling the code? Have you tried optimizing for size vs speed?<br /></div><br /><br />I didn't really stray from the default "Release" settings in Visual Studio.<br /><br /><br /><br /><div class="quotetitle">James wrote:</div><div class="quotecontent"><br />Do you have numbers for a non-multithreaded version?<br /></div><br /><br />Nope.  As byuu mentioned, that would require an entirely separate emulator.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />I see that the frame rate is identical between Balloon Fight and SMB despite the thread switching increasing by over 40x. This says to me that at the levels you are getting with NES emulation, that cothreading's overhead is negligible.<br /></div><br /><br />I interpretted it the same way, which is why I'm pretty sure I'm going to gut out the preemptive support and switch to cooperative exclusively.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That is really interesting that thread switching is so low on NES.<br /></div><br /><br />I'm not surprised at all.  There's very little communication between CPU and PPU usually.<br /><br />It's not always the case, though.  Games like Rad Racer do a lot of mid-frame scroll changes, so sync ups will be more frequent there.  But I still suspect that $2002 polling is the biggest culprit.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Your test data basically confirms that there's no point in a preemptive bsnes. So that's one more reason I really appreciate you putting this together.<br /></div><br /><br />Yeah after seeing this I wouldn't consider it for a SNES emu either.<br /><br />I'm glad it's appreciated.  Really this is more of an exercise and curiosity rather than a practicality, but I'm glad it has some value apart from that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Ooooh, that sounds wild. Snes9X tried that with SA-1 sync loops, and it ended up needing to be disabled in every other game. Very tricky to get something like that 100% right.<br /></div><br /><br />It's not very complicated at all on the NES.  I'd probably just look for one of the following templates on $2002 reads:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />  LDA $2002<br />  AND #xx<br />  Bxx loop<br /><br />; and...<br /><br />loop:<br />  BIT $2002<br />  Bxx loop<br /><br />; and possibly...<br /><br />loop:<br />  LDA $2002<br />  ASL A<br />  Bxx loop<br /></div><br /><br />If I don't find those exact templates, I'd just sync up the PPU normally.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Jun 27, 2012 8:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2012-06-27T17:52:58-07:00</updated>
<published>2012-06-27T17:52:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96111#p96111</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96111#p96111"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96111#p96111"><![CDATA[
&gt; 1) Put register writes in a FIFO queue and have the ppu pull them out and apply them as it runs, rather than having to switch/sync up on every write.<br /><br />My prediction: it helps out preemptive a little-to-fair bit, but hurts cooperative (timestamp computation and choosing whether to use FIFO or direct read all the time will be painful.)<br /><br />I see that the frame rate is identical between Balloon Fight and SMB despite the thread switching increasing by over 40x. This says to me that at the levels you are getting with NES emulation, that cothreading's overhead is negligible.<br /><br />&gt; That's ~11 context switches per frame. Not far from my estimate XD.<br /><br />That is really interesting that thread switching is so low on NES. I have to say, I never bothered to count the switch counts at all on anything but SNES. But I will say there, SNES is very very very much worse. I've seen 200,000 - 4,000,000 syncs a second there (you can have three CPUs, two PPUs and a DSP.) Your test data basically confirms that there's no point in a preemptive bsnes. So that's one more reason I really appreciate you putting this together.<br /><br />Preemptive can definitely help emulators, but only at much less fine scales. It's a balance between the amount of time spent emulating to amount of time spent switching. NES is so trivial that your cache stalls and sync primitives are much more computationally expensive. PS2+ would obviously be a different story, plus later systems don't need as fine-grained syncing.<br /><br />&gt; 2) Detect common $2002 spin loops and run the PPU ahead until $2002 status changes.<br /><br />Ooooh, that sounds wild. Snes9X tried that with SA-1 sync loops, and it ended up needing to be disabled in every other game. Very tricky to get something like that 100% right.<br /><br />&gt; Do you have numbers for a non-multithreaded version?<br /><br />A state machine design would have to be a completely separate emulator, unfortunately.<br />It would also be quite difficult to do a precise measurement, because the syncing point style would be totally different, but you could get fairly close.<br /><br />It's hard to say in this case, given those amazingly low sync counts, I'd be tempted to say it'd be faster than a state machine, at least in Balloon Fight. But generally, for most emulators, cothreading will be slower. You would only use cothreading because it makes the code *substantially* cleaner and and less error prone (not hyperbole; you basically remove the state machine entirely yet gain effectively infinite precision to break out anywhere transparently), as I'm sure anyone who's tried it will attest.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Wed Jun 27, 2012 5:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[James]]></name></author>
<updated>2012-06-27T07:22:02-07:00</updated>
<published>2012-06-27T07:22:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96079#p96079</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96079#p96079"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96079#p96079"><![CDATA[
Do you have numbers for a non-multithreaded version?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=88">James</a> — Wed Jun 27, 2012 7:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hamburgler]]></name></author>
<updated>2012-06-27T05:14:30-07:00</updated>
<published>2012-06-27T05:14:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96076#p96076</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96076#p96076"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96076#p96076"><![CDATA[
Very interesting work! I'm currently toying with preemptive threading on my own code (pthreads/osx/c++/opengl) so this thread has been particularly interesting to me. I would have figured preemptive would win but these results are hard to argue with.<br /><br />A few questions:<br /><br />1) What OS is this running under? Or more specifically, what preemptive threading model are you using?<br /><br />2) How many processor cores were available to the program?<br /><br />3) How many threads did you use? Would you expect the results to change as you add more threads for things like the APU?<br /><br />4) What optimization level did you use when compiling the code? Have you tried optimizing for size vs speed?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3370">Hamburgler</a> — Wed Jun 27, 2012 5:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-26T18:54:05-07:00</updated>
<published>2012-06-26T18:54:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96069#p96069</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96069#p96069"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96069#p96069"><![CDATA[
Initial numbers are in.  As expected, Cooperative seems to be the better performer so far:<br /><br /><img src="http://i45.tinypic.com/o5nviw.png" alt="Image" /><br /><br />Each game ran for 10000 frames, no user input (they just ran the demo).<br /><strong>Ticks</strong> = time in milliseconds it took to run all frames.<br /><strong>Context switch</strong> = applicable to Cooperative only, how many times thread contexts switched (ie:  co_switch calls)<br /><strong>Waits</strong> = applicable to Preemptive only.  The number of calls to condition_variable::wait (ie, thread sleeps waiting for the other thread to catch up and wake it up)<br /><strong>Yields</strong> = applicable to Preemptive only.  The number of times the PPU "caught up" to the CPU and had to spin in a yield loop while it waited for the CPU to gain some ground (the PPU does not sleep/wait for the CPU in my implementation).<br /><br />As I expected, volatility is a considerable performance hit in of itself.  Just adding volatiles knocks 30 off the average FPS.<br /><br />Preemptive performed poorly on SMB (and especially Excitebike) due to their $2002 spin loops.  Those sync ups are really heavy on Preemptive.<br /><br /><br />I'm going to do two more optimizations.  Profiling again after each one:<br /><br />1)  Put register writes in a FIFO queue and have the ppu pull them out and apply them as it runs, rather than having to switch/sync up on every write.<br /><br />2)  Detect common $2002 spin loops and run the PPU ahead until $2002 status changes.<br /><br /><br />#2 should do wonders for Preemptive.<br /><br /><br />Also... interesting note.  Balloon Fight has ~110,000 context switches in 10,000 frames.  That's ~11 context switches per frame.  Not far from my estimate  XD.<br /><br /><br />But unless preemptive pulls out some kind of miracle with these optimizations, it's looking like I'm going to gut it and stick to cooperative.  Still, this is a very very fun experiment.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Jun 26, 2012 6:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-25T20:58:16-07:00</updated>
<published>2012-06-25T20:58:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96042#p96042</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96042#p96042"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96042#p96042"><![CDATA[
Grrrr... Preemptive is still deadlocking.  I thought I got that resolved.  Grrrrr.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Mon Jun 25, 2012 8:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-24T20:11:26-07:00</updated>
<published>2012-06-24T20:11:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96007#p96007</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96007#p96007"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=96007#p96007"><![CDATA[
Well I've been reading those links and yutzing around with optimizing and stabalizing the preemptive approach.  I have come to the agreement that lock-free techniques are not worth the trouble, at least not until std::atomic is widely implemented.<br /><br />Just about ready to start initial performance benchmarks before I do the "queue register writes" thing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jun 24, 2012 8:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-06-22T13:27:37-07:00</updated>
<published>2012-06-22T13:27:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95916#p95916</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95916#p95916"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95916#p95916"><![CDATA[
Wonderful, mozz.  Thanks for the links.  I'll check them out tonight.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Jun 22, 2012 1:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2012-06-22T12:55:57-07:00</updated>
<published>2012-06-22T12:55:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95913#p95913</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95913#p95913"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95913#p95913"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />@ mozz:<br /><br />I was planning to implement a simple lockless queue to track register writes.  It would basically work like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// in ppu thread:<br /><br />if&#40; ppu_pos != cpu_pos &#41;<br />&#123;<br />  // read and act on queue&#91;ppu_pos&#93;<br />  ++ppu_pos;<br />&#125;<br /><br />// in cpu thread, on register write<br />queue&#91;cpu_pos&#93; = whatever;<br />++cpu_pos;<br /></div><br /><br />What kind of gotchas would bite me here?  And is there a way around them?<br /></div><br />I'm no expert on lock-free stuff, but that's the kind of question that would take a textbook to answer.<br /><br />In general, other threads might not see the results of reads and writes in the same order that your thread executes them, and there might be arbitrary delays before they see those results.  Various types of barrier instruction can be used to "flush" writes to other processors.  But even then, you have to be careful--out-of-order execution means reads won't necessarily occur in program order, and neither will writes (except I think they do on x86, but its not safe to rely on that) and reads can be reordered before/after writes, and writes can be combined in a buffer before they actually get flushed out to the cache, etc.  Non-atomic operations can always be interrupted by a thread switch or hardware interrupt, allowing other threads to see the partial results of the operation.  Cache line contention (even false contention on different parts of the cacheline) can easily kill performance.  So when you write your own lock-free primitives you are trying to build a reliable, complex atomic op that overcomes all of these problems, out of simpler ops (atomic and non-atomic, and barriers).  It's definitely not for the faint of heart.<br /><br />The good news, is that a circular FIFO single-producer single-consumer queue is about the simplest lock-free data structure anyone makes, so its entirely possible to get it right after a few tries.<br /><br />I suggest to read these blog posts by charles bloom, he is one of the guys who likes to figure this kind of stuff out and he's smarter than most.<br /><a href="http://cbloomrants.blogspot.ca/2009/01/01-25-09-low-level-threading-junk-part.html" class="postlink">Intro to low level threading issues</a><br /><a href="http://cbloomrants.blogspot.ca/2009/02/02-24-09-low-level-threading-part-31.html" class="postlink">Introducing CAS and cache line issues.</a><br /><a href="http://cbloomrants.blogspot.ca/2009/02/02-24-09-low-level-threading-part-30.html" class="postlink">Intro to Lock-Free Programming</a><br /><a href="http://cbloomrants.blogspot.ca/2009/02/02-26-09-low-level-threading-part-51.html" class="postlink">SPSC FIFO: the simple message queue</a><br /><a href="http://cbloomrants.blogspot.ca/2011/07/07-29-11-look-at-some-bounded-queues_29.html" class="postlink">A look at some bounded queues</a><br /><a href="http://cbloomrants.blogspot.ca/2011/07/07-30-11-look-at-some-bounded-queues.html" class="postlink">A look at some bounded queues - part 2</a><br /><br />Edit: Just making variables volatile is NOT enough to make them safe across multiple threads/cores.  All volatile does is keep the compiler from optimizing away your memory access (and on MSVC on x86 it adds some reordering constraints in the compiler too, but none at the CPU level).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Fri Jun 22, 2012 12:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mozz]]></name></author>
<updated>2012-06-22T12:31:42-07:00</updated>
<published>2012-06-22T12:31:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95912#p95912</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95912#p95912"/>
<title type="html"><![CDATA[Multithreaded emu designs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8999&amp;p=95912#p95912"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />I can see a secure environment doing wildly ineffective things like stack bounds checking, but desktop OSes don't really do that. Also, I have a Windows Fibers backing, and I'd be absolutely shocked if fibers didn't let you call other API functions.<br /></div><br />I'm afraid its been almost 15 years and I can't remember most of the details, but this would have been either on Windows 95/98 or NT4, and probably not all Win32 API functions but more likely just specific functions (things involving a window handle ??? I can't remember anymore).  I'm not sure about Windows 2000/XP.<br /><br />Also I would expect Windows Fibers to work fine, because their stack space is handled by the OS.  I remember that we were allocating our own "stack space" from the process heap for each cothread, and switching between them similar to how libco does it.  For one thing, I don't think Fibers were supported on 95/98, I think they were only supported on NT at the time, so we didn't want to use them.  The main thing I remember was that some Win32 API functions would freak out if we called them while our userspace stack pointer that pointed into the heap.  (It was a GUI app, maybe it was something that involved WndFuncs or message queues etc.)  Fortunately our emulator had a known fixed set of threads it needed to create, so we worked around it by doing the easy thing.  On startup, we just allocated those stacks inside the main Windows thread's stack with _alloca.  Then we could switch them around and still call Win32 API functions without triggering whatever it was.<br /><br />Perhaps this old restriction is not enforced at all in newer versions of Windows.  If people can run bsnes on Windows XP, then I guess everything is fine.  Carry on  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=330">mozz</a> — Fri Jun 22, 2012 12:31 pm</p><hr />
]]></content>
</entry>
</feed>