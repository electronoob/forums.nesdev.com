<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - First time Homebrewer</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">First time Homebrewer</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8557">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8557</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 25, 2012 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">bunnyboy wrote:</div><div class="quotecontent">Newbies need simplicity to learn first, being "professional" is overwhelming instead of teaching.</div>
<br />The thing is I'm not even sure this is simple... We've seen so many newbies stumbling with this method of reading the controller... it's very confusing because of the spaghetti code it generates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Jan 25, 2012 3:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Comment a controller reading routine and it shouldn't be hard at all. You need to have an idea of simple instructions, X indexing, and memory locations and loops and you can read a controller correctly. If you're doing stuff on the screen from input, you should be able to understand the routine to read it. The $4016 hardcoded reads don't make it easier, it just makes people think "Well what was different from last time? It's the same thing."

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Jan 25, 2012 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I know you basically said the same thing as the tut but I got your way more. Thanks ill keep you posted if I have more trouble.<br /></div><br />Glad I could help, and it sounds like you're doing some exploring which is nice to do. <br /><br />Re: Controller Reading.<br /><br />I'll explain the other way. He's mentioned C, so I assume he's done some stuff in it. Bit shifts may already be in his repertoire, and if not it may not be as huge a leap for him as others.<br /><br />We've got the benefit of being a forum, so we can tailor our teaching to the person. <br /><br />Tokumaru, I actually wouldn't mind seeing a tutorial by you. You know this stuff better than I do AND provide shorter (and easier to understand) explanations than I do. Else one day I really will write my own. And I'll teach things in a different order than this post, I guess.<br /><br />Camronas, this way is worth reading about even if you have already got the other way working. Also this turned into a long post (I warned of this!), and it may help to read a little at a time to let it sink in. <br /><br />A quick note about this post: I haven't had time to thoroughly check it for errors. I promise I'll come back and fix it if I find some later, but just be aware there may be parts where there are nine bits in an LDA instruction or something. Hopefully nothing more serious than that, but I wrote this all in one go with not a lot of proofreading...<br /><br />Edit: Also, shoot, I just realized I never mentioned how to USE the buttons variable once this code is finished. I'll add a quick note at the end.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I cant see the difference between the two function to be able to see what needs to change, this code works though.<br /></div>
<br />That is correct. There is no difference between how you get the bit for each new button. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> 
<br />
<br />$4016 is a special address for interfacing with NES hardware. Every time you read from it, its value is updated to the state of the next button. So even in this string of code that looks like it would be redundant:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $4016<br />lda $4016<br /></div><br />The accumulator can actually be given a different value each time because it is moving to different buttons upon read. <br /><br />The order is always:<br />A<br />B<br />Select<br />Start<br />Up<br />Down<br />Left<br />Right<br /><br />What this code does:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons <br /></div><br />is resets the button state you will get from a $4016 read back to the first button. (A)<br /><br />I will now pause on controller reading to review some things about the 6502 that are important to understand for the other controller method.<br /><br />There is a byte internal to the 6502 CPU. Each bit represents a different thing that is either true (1) or false (0). These bits are called the processor status flags.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">From Assembly in One Step<br />&nbsp; &nbsp; &nbsp; &nbsp;bit -&gt;&nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +---+---+---+---+---+---+---+---+<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | N | V |&nbsp; &nbsp;| B | D | I | Z | C |&nbsp; &lt;-- flag, 0/1 = reset/set<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +---+---+---+---+---+---+---+---+<br /></div><br />When the CPU does anything, the individual bits of that byte are set (to 1) or cleared (to 0) based on the result of the last instruction. We will only care about Z and C right now. (By the way, the order of the bits in this byte is not important to us at all right now. You just need to know that they exist and a little about how they update)<br /><br />The easy one to explain is Z. It is set if the result of the last instruction was zero, and cleared if the result was not zero.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$00; Z is set.<br />lda #$FF; Z is cleared.<br /><br />lda #$XX;where XX is anything but 00. Z is cleared<br /></div><br />Here is something a little more tricky that will set Z.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$01<br />sec;We set the carry before a subtract<br />sbc #$01;1-1=0. <br />;The result of the last operation was 0. Z is set.<br /></div><br />One more:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #$01;X is another register that holds a value like A. There is also Y.<br />dex;Subtracts one from X.<br />1-1 = 0; Z is set.<br /></div><br />Now I will teach a few more instructions that shift the bits in A. The easy two are ROR, and ROL. ROR ROtates all the bits in a byte to the Right. ROL ROtates them to the Left.<br /><br />As you know a byte is eight bits. But ROR and ROL actually work on NINE bits. Say, WHAT? <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> <br /><br />The ninth bit is C in the processor status byte. So let's say we have a this byte in A: #%10000000<br /><br />It looks like this to ROL and ROR:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C = The carry bit. If cleared, it is zero. If set it is 1.<br />C10000000C<br /></div><br />When you ROR, C goes to the left bit of A, that bit that was where C just moved goes one bit to the right, etc until the right most bit in A moves into C.<br /><br />Let's look at this code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clc; Clears the carry flag. C is 0.<br />lda #%1000000R;&#40;R is 0. I have marked it R for a reason&#41;<br />ROR a;Rotates the bits in A to the right.<br />;A now has this byte: #%01000000<br />;What about the carry? It gets the bit that was on the very right of A. &#40;marked R in the example&#41;.<br />;R was 0. C is now 0.<br />;The carry is now clear.<br /></div><br />Sort of interesting. Let's look at this code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sec;Sets the carry flag. C is 1.<br />lda #%10000000;No need to mark R now, right?<br />ROR a<br />;A now has this byte: #%11000000<br />;The carry was set instead of cleared when we started, so a 1 was moved into A's leftmost bit instead of a zero.<br /><br />;Because a zero was in A's rightmost bit, the carry is now clear.<br /></div><br />If you get ROR, ROL is not any different except it moves left. Here is a quick example anyway:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clc<br />lda #%10000000<br />rol a<br />;A = #%00000000<br />;Carry is set.<br /></div><br />Got it? Cool.<br /><br />Now for two that are a little different. LSR and ASL. LSR shifts bits right, but puts a ZERO into the left most bit of the byte instead of what was in C. The right most bit of A is still moved into C, however.<br /><br />ASL shifts bits left but puts a ZERO in the right most bit of the byte instead of what was in C. The left most bit of A is still moved into C.<br /><br />Similar enough, right? Here are some examples just in case.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sec<br />lda #%10000000<br />ASL a<br />;A now has #%00000000. The zero flag was set! Don't forget about that.<br />;C has 1.<br /></div><br />Another quick one.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clc<br />lda #%10000000<br />ASL a<br />;A now has #%00000000.<br />;C has 1.<br /></div><br />So as you can see, the state of the carry flag before ASL actually doesn't matter, unlike with ROL.<br />LSR is similar.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;State of carry doesn't matter<br />lda #%00000010<br />lsr a<br />;A is #%00000001<br />;Carry is clear.<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;State of carry doesn't matter<br />lda #%00000001<br />lsr a<br />;A is #%00000000<br />;Carry is set.<br /></div><br /><br />You now know almost everything you need to know to understand the "standard" joypad reading code. Except the bitwise operators and branching (which you may know from Nerdy Nights by now). If you already know &amp; (AND), |(ORA) and ^(EOR) from C, you're good on the bitwise operators. If not, <a href="http://nesdev.com/bbs/viewtopic.php?p=88789#88789" class="postlink">please read this post.</a><br /><br />Let's construct a simple endless loop using a branch.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">label:<br />lda #$00<br />beq label;This jmps to label if Z is set. It continues down if Z is clear.<br /></div><br />And another using a different branch.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">label:<br />lda #$FF<br />bne label;This jmps to label if Z is clear. It continues down if Z is set.<br /></div><br />That was pretty concise, but it should make sense if you think about it.<br /><br />Now let's construct a regular loop. Sort of like the for loop in C.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #$02<br />label:<br />lda $4016<br />dex<br />bne label<br />clc;Just extra code.<br /></div><br /><br />What will this do? Read from $4016 twice. We start with 2 in X. We read from $4016. We subtract 1 from X. 2-1 is not equal to 0, so we branch back to label. 1 is in X. We read $4016. We subtract 1 from X. 1-1 is equal to 0. We continue to where the clc is.<br /><br />From the explanation earlier, you may realize we actually read two button states just now. But we didn't store them anyplace we could use them later. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons <br /><br />sta buttons;A variable in RAM. All buttons are now unpressed.<br /><br />ldx #$08;Why not read 8 button states?<br />buttonreadloop:<br />asl buttons;We can ASL bytes other than A. It works the same just using RAM instead of A.<br />lda $4016<br />and #%00000001;We only care about this one bit.<br />ora buttons<br />sta buttons<br />dex<br />bne buttonreadloop<br /></div>
<br />
<br />So the first run through the loop reads $4016. It gets the bit that contains the button state. We isolate that bit with the AND. We ora it with #$00. (Since we set buttons to that before the loop started.) We store it in buttons. buttons now contains the state of A in its rightmost bit.
<br />
<br />We loop again. We shift buttons so that the state of the A button is now in the part of the bit marked A. #%000000A0. It puts a 0 in place for the next button to set if pressed because of how asl works. We load the state of the button through $4016. We isolate the bit. We ora, so now A contains the state of both buttons. Then we store A in buttons so the actual buttons variable contains the state of both buttons.
<br />
<br />We keep looping until we have all eight buttons. 
<br />
<br />If that was hyper confusing, give it some time to digest. If you need an alternate explanation on an instruction (ROR, ASL, ETC), let me know. Once you get those, the controller code should "click" after a little thought, but if not ask away! As always, sorry for writing so much.
<br />
<br />Edit: To use the buttons variable: Load it, AND out the bits you don't want to check. and #%1000000 would give you the A button, because all the others will end up zero.
<br />
<br />Then you can use BEQ to branch passed the code that requires A, because if A was pressed the result of the beq would not be zero.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dr. Floppy</b> [ Thu Feb 09, 2012 8:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons <br /><br />sta buttons;A variable in RAM. All buttons are now unpressed.<br /><br />ldx #$08;Why not read 8 button states?<br />buttonreadloop:<br />asl buttons;We can ASL bytes other than A. It works the same just using RAM instead of A.<br />lda $4016<br />and #%00000001;We only care about this one bit.<br />ora buttons<br />sta buttons<br />dex<br />bne buttonreadloop<br /></div></div>
<br />
<br />This is awesome! 
<br />
<br />Is there an expanded version of this to control for redundant reads over several frames (as Tokumaru mentioned)? Or that infernal DPCM glitch that causes phony reads from the Right button?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 09, 2012 10:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons <br /><br />sta buttons;A variable in RAM. All buttons are now unpressed.<br /><br />ldx #$08;Why not read 8 button states?<br />buttonreadloop:<br />asl buttons;We can ASL bytes other than A. It works the same just using RAM instead of A.<br />lda $4016<br />and #%00000001;We only care about this one bit.<br />ora buttons<br />sta buttons<br />dex<br />bne buttonreadloop<br /></div></div><br />First I'd like to point out that this routine is pretty inefficient... the following one is shorter, faster, and even reads Famicom controllers that go on the expansion port, which the code above doesn't:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx #$09 ;strobe the controllers and initialize the counter<br />&nbsp; &nbsp;stx $4016 <br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;stx $4016<br /><br />buttonreadloop:<br />&nbsp; &nbsp;lda $4016 ;get the state of the button<br />&nbsp; &nbsp;and #%00000011 ;keep only the 2 lowest bits<br />&nbsp; &nbsp;cmp #$01 ;if any of those 2 bits are set, the carry gets set<br />&nbsp; &nbsp;rol buttons ;put the state of the button with the others<br />&nbsp; &nbsp;dex ;move on to the next button<br />&nbsp; &nbsp;bne buttonreadloop</div><br />You can strobe the controllers and initialize the counter in one go because 9 in binary is %00001001, and since the lower bit is 1 writing this to $4016 is the same as writing $01, because the upper bits are ignored by the register. After the DEX, 9 becomes 8, which in binary is %00001000, and since the lower bit is 0, so it's like $00 is written to $4016. This is the kind of trick that beginners shouldn't worry about, but I decided to show it anyway so that you know what kind of things are possible.<br /><br />Next, there's no need to clear the button states, because we will insert 8 new bits into it, effectively kicking all the old bits out.<br /><br />Then we proceed to the loop. There  we read the state of a button, and since there are Famicom controllers that return the button states in the second bit of $4016, you want to keep the 2 lowest bits, not only the first. Then we use another "trick": by comparing the value to 1, we can make the carry flag reflect the state of the button no matter if it came in bit 0 (regular controller) or bit 1 (expansion port Famicom controller). Think about it: if a a button is pressed and a regular controller is used, our value will be 1 (%00000001), if an expansion port controller is used, the value will be 2 (%00000010). Both values are larger than 0, so when we compare it to 1 we are making sure that it's at least equal to or larger than 1, in which case the carry gets set. If the value was smaller than 1 (which would happen only if no button was pressed), the carry would be clear.<br /><br />With the state of the button in the carry flag, we are ready to put it in a variable, along with the other button states. There's no need to load it from memory or anything, you can directly put the new bit in the variable with a rotate instruction.<br /><br /><div class="quotetitle">Dr. Floppy wrote:</div><div class="quotecontent">Is there an expanded version of this to control for redundant reads over several frames (as Tokumaru mentioned)?</div><br />You can handle that by saving the previous state of the controller and doing some bit operations between it and the new state. Here's an example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda buttons ;make a copy of the old state<br />&nbsp; &nbsp;sta oldbuttons<br /><br />&nbsp; &nbsp;jsr readcontroller ;read the new state<br /><br />&nbsp; &nbsp;lda oldbuttons ;get the old state<br />&nbsp; &nbsp;eor #$ff ;turn buttons that were down into 0 and the others into 1<br />&nbsp; &nbsp;and buttons ;erase from the current state the buttons that were down last time<br />&nbsp; &nbsp;sta newbuttons ;save the result in another variable</div><br />Now you can use <strong>buttons</strong> when you need to know the current state of the buttons (such as when moving your game character sideways) or <strong>newbuttons</strong> when you need to know when a button wasn't down before but is now (useful when shooting and navigating menus, for example).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or that infernal DPCM glitch that causes phony reads from the Right button?</div><br />We usually handle this by reading the controller multiple times, until 2 consecutive reads return the same result. Something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr readcontroller ;read the controller<br />validatebuttons:<br />&nbsp; &nbsp;ldy buttons ;make a copy of what was read &#40;use Y because A and X are used in the subroutine&#41;<br />&nbsp; &nbsp;jsr readcontroller ;read again<br />&nbsp; &nbsp;cpy buttons ;compare the previous read with the new one<br />&nbsp; &nbsp;bne validatebuttons ;if they differ, go back and try again</div>
<br />
<br />I'll let you put all of the above solutions together as an exercise! =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Feb 09, 2012 10:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, neat! I've actually never read anything about famicom, so that's all news to me. I also wasn't aware about only the one bit mattering for that register, so the loading of 9 first is also a clever trick.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 10, 2012 5:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another clever trick is the use of a ring counter: preload the buttons variable with 1, and once you've ROL'd it eight times, the 1 has moved to the carry flag and you can exit the loop without even touching X.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 10, 2012 6:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a very good idea tepples... It's faster (we get rid of the DEX inside the loop) and frees one register. With this, the subroutine could look like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">readcontroller:<br />&nbsp; &nbsp;lda #$01<br />&nbsp; &nbsp;sta buttons ;initialize the buffer with a flag<br />&nbsp; &nbsp;sta $4016<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta $4016<br />buttonreadloop:<br />&nbsp; &nbsp;lda $4016<br />&nbsp; &nbsp;and #%00000011<br />&nbsp; &nbsp;cmp #$01<br />&nbsp; &nbsp;rol buttons<br />&nbsp; &nbsp;bcc buttonreadloop ;loop if the flag wasn't shifted out yet<br />&nbsp; &nbsp;rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Feb 10, 2012 7:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Heh. But the code becomes a byte smaller if you DO use X, but only for the setup.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">readcontroller:<br />&nbsp; &nbsp;ldx #$01<br />&nbsp; &nbsp;stx buttons ;initialize the buffer with a flag<br />&nbsp; &nbsp;stx $4016<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;stx $4016<br />buttonreadloop: <br /></div>
<br />dex vs. lda #$00. You all know you need that byte! <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />
<br />
<br />And considering this probably wouldn't run when something else uses X, you might as well.
<br />
<br />Optimization is fun. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> It's also amazing how much I still have to learn, because Tepples' trick would not have come to me. I would have had to read specifically about it.
<br />
<br />Maybe we need a topic like <a href="http://www.atariage.com/forums/topic/71120-6502-killer-hacks/" class="postlink">this thread</a> around here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 10, 2012 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or LDA #$00 could become LSR A. This gives you the byte back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Feb 10, 2012 8:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And keeps X free. Everyone wins!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 10, 2012 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Tepples' trick would not have come to me.</div><br />I have used it before, and also the opposite trick, which you use to detect when a byte is empty, rather than full: when you shift the first bit out, insert a one at the other end. That bit will prevent the number from becoming 0 before all the bits have been shifted out. When the bit buffer finally becomes 0 you'll know that the flag has been shifted out, and all meaningful bits have been used up.<br /><br />I never thought about using the trick for reading the controller though, and that's the perfect kind of situation for it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Maybe we need a topic like <a href="http://www.atariage.com/forums/topic/71120-6502-killer-hacks/" class="postlink">this thread</a> around here.</div>
<br />I love that topic. A lot of the tricks shown there are useful on the NES too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bigjt_2</b> [ Mon Mar 05, 2012 7:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Camronas wrote:</div><div class="quotecontent">My god this is confusing lol as I'm sure it was for everyone else when they started <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div>
<br />
<br />YEP!
<br />
<br />Also Camronas, here's some assembly tuts that I found very useful when I started learning.  Just sent these to some friends the other night who are starting to learn.
<br />
<br /><!-- m --><a class="postlink" href="http://bbitmaster.com/neshackingtutorial1.txt">http://bbitmaster.com/neshackingtutorial1.txt</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://bbitmaster.com/neshackingtutorial2.txt">http://bbitmaster.com/neshackingtutorial2.txt</a><!-- m -->
<br />
<br />These do a good job of teaching the bare, bare basics of 6502 and gearing it toward the NES in general.  Also, have yo downloaded the 6502 simulator yet?
<br />
<br /><!-- m --><a class="postlink" href="http://exifpro.com/utils.html">http://exifpro.com/utils.html</a><!-- m -->
<br />
<br />This is an awesome little program and I encourage you to learn how to use it to write little test programs, also how to debug those programs and see what's happening in memory as your program counter rolls through your opcodes.  I still find it useful now to write little tests for pseudocode that I'm pondering.  It gives me a chance to test it without plugging it strait into my large program and potentially doink something up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Mar 10, 2012 7:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess I should post this here rather than create a new topic. The input code from the back and forth above doesn't seem to like the famicom 4 player adapter in FCEUX. When it's set as attached in the drop down, up on player 2's controller also triggers right. Is there some reason for this I'm not getting?
<br />
<br />Edit: It seems it was using my player 4 keybinding which happened to be on the same key. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> Either way as someone who would like to support both the 4 score and the famicom 4 player adapter without button interference from multiple players at once is there some other way to do this since my old input code apparently wouldn't have liked the famicom either?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 10, 2012 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Complicating factors: <ul><li>When one or two players are playing, Famicom controllers 3 and 4 should control players 1 and 2. But when more than two players are playing, Famicom controllers 3 and 4 should control players 3 and 4. </li><li>The Four Score can be switched on or off while the power is on, so detection in the init code might not be enough. </li><li>The Four Score is slower to read, but it provides fairly reliable detection of DMC DMA bit deletions. </li></ul>For the sake of the player, it's best to continuously poll for a Four Score on the title screen. If the NES Four Score is present, display a message "FOUR SCORE CONNECTED"; otherwise, erase it. Write in the manual that on an NES, players shouldn't start a 4-player game until the message appears.<br /><br />I recommend two different reading loops, one for ordinary operation:<br /><ol style="list-style-type: decimal"><li>Toggle strobe to 1 then 0. </li><li>Read D0 and D1 from $4016 and $4017 eight times. </li><li>Repeat steps 1 and 2, compare, and use the previous frame's keypresses if they differ. </li><li>If a 3- or 4-player game has not been started, OR player 3 on top of player 1 and player 4 on top of player 2.</li></ol>And one for NES Four Score:<br /><ol style="list-style-type: decimal"><li>Toggle strobe to 1 then 0. </li><li>Read D0 from $4016 and $4017 24 times. </li><li>Check the signature for each of the two ports; if it differs, use the previous frame's keypresses. </li></ol>
<br />Selecting which loop to use when depends on whether and how much you plan to use the DMC in your game.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>