<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=981" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-01-25T10:57:34-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=981</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-01-25T10:57:34-07:00</updated>
<published>2006-01-25T10:57:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8569#p8569</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8569#p8569"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8569#p8569"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I disagree. When doing collision detection with a 32x30 map, it really complicates things, because you have to deal with changing the high byte of the map address. You usually load bytes with indirect indexed addressing, and you have to do many routines with comparing Y positions, and changing high bytes. Okay, it's a little hard to explain, but my collision detection code for 32x30 was WAY longer and WAY more complicated than my 16x15 map. You don't have to use indirect indexed addressing for such a thing. Well, you probably should to be a little more relative with the routines, but you could just say map,x to load any byte of the map, where as you cannot with 32x30 maps, because there are more than $FF bytes.<br /></div><br />So that means that having 8x8 metatiles is harder than having 16x16 metatiles, wich I agree with you. However, 16x16 metatiles aren't in any way easier or harder than 32x32 metatiles at this level, they're just different.<br />In an advanced RPG, you'll want to have large scrolling maps, so even with 16x16 metatiles, the larger maps will easily get larger than 256 bytes once decompressed. It sure is a bit more odd to handle, but no programmer should flee against difficulty anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 25, 2006 10:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2006-01-24T19:33:02-07:00</updated>
<published>2006-01-24T19:33:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8536#p8536</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8536#p8536"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8536#p8536"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">LocalH wrote:</div><div class="quotecontent">The NTSC C64 has 262 lines, with 200 of them being addressable screen.<br /></div><br />These lines consist of roughly 20 lines of border, 200 lines of picture, 20 lines of border, and 22 lines of vblank. Some hardware producers don't like a lot of border.</div><br />On the other hand, the C64 has a huge horizontal border - quite a few more pixels per line outside of blanking as compared to something like the Genesis. Also, the 262 line C64's are only the earlier ones with 64 cycles per line - the newer 65-cycle NTSC VIC-IIs have 263 lines. And, for completeness, the PAL C64 has 63 cycles per line and 312 lines.<p>Statistics: Posted by Guest — Tue Jan 24, 2006 7:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-01-24T18:26:46-07:00</updated>
<published>2006-01-24T18:26:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8534#p8534</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8534#p8534"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8534#p8534"><![CDATA[
Celius is right by saying it is easier to work with the maps if you can access the whole screen by modifying only the index register and not the base address.<br /><br />But then again, any block size from 16x16 up will grant you that possibility, and not many games will work at the tile-level, as it wastes a lot of space. I think only really old, static screen kind of games used tile-level maps. Anything newer than that will most likely use 16x16 or more.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Jan 24, 2006 6:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2006-01-24T16:23:04-07:00</updated>
<published>2006-01-24T16:23:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8530#p8530</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8530#p8530"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8530#p8530"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />What you say here is a nonsense. Having 2x2 or 4x4 collision detection changes strictly nothing to how easy or hard collision detection is. And how much metatiles on screen at once there is, your engine determine it totally independantly of the meatile size. I've done collision detection without trouble with my block system I descibed above.<br /></div><br /><br />I disagree. When doing collision detection with a 32x30 map, it really complicates things, because you have to deal with changing the high byte of the map address. You usually load bytes with indirect indexed addressing, and you have to do many routines with comparing Y positions, and changing high bytes. Okay, it's a little hard to explain, but my collision detection code for 32x30 was WAY longer and WAY more complicated than my 16x15 map. You don't have to use indirect indexed addressing for such a thing. Well, you probably should to be a little more relative with the routines, but you could just say map,x to load any byte of the map, where as you cannot with 32x30 maps, because there are more than $FF bytes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Tue Jan 24, 2006 4:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-01-24T10:09:14-07:00</updated>
<published>2006-01-24T10:09:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8514#p8514</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8514#p8514"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8514#p8514"><![CDATA[
<div class="quotetitle">LocalH wrote:</div><div class="quotecontent"><br />The NTSC C64 has 262 lines, with 200 of them being addressable screen.<br /></div><br />These lines consist of roughly 20 lines of border, 200 lines of picture, 20 lines of border, and 22 lines of vblank. Some hardware producers don't like a lot of border.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 24, 2006 10:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-01-24T09:57:44-07:00</updated>
<published>2006-01-24T09:57:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8512#p8512</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8512#p8512"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8512#p8512"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />Another advantage to 2x2 meta tiles is that collision detection is SO much easier, since there aren't more than $FF meta tiles on screen at once. You can read the bytes of maps easier, you can just read map,x to read any tile on the screen, due to there only being $FF tiles. This is why making my <a href="http://www.freewebs.com/the_bott/cynthi.nes" class="postlink">NES meta tile layer</a> was so easy to do.<br /></div><br />What you say here is a nonsense. Having 2x2 or 4x4 collision detection changes strictly nothing to how easy or hard collision detection is. And how much metatiles on screen at once there is, your engine determine it totally independantly of the meatile size. I've done collision detection without trouble with my block system I descibed above.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jan 24, 2006 9:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2006-01-23T22:49:07-07:00</updated>
<published>2006-01-23T22:49:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8485#p8485</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8485#p8485"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8485#p8485"><![CDATA[
The NTSC C64 has 262 lines, with 200 of them being addressable screen.<p>Statistics: Posted by Guest — Mon Jan 23, 2006 10:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2006-01-23T22:40:13-07:00</updated>
<published>2006-01-23T22:40:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8483#p8483</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8483#p8483"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8483#p8483"><![CDATA[
Another advantage to 2x2 meta tiles is that collision detection is SO much easier, since there aren't more than $FF meta tiles on screen at once. You can read the bytes of maps easier, you can just read map,x to read any tile on the screen, due to there only being $FF tiles. This is why making my <a href="http://www.freewebs.com/the_bott/cynthi.nes" class="postlink">NES meta tile layer</a> was so easy to do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Mon Jan 23, 2006 10:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-01-24T10:04:40-07:00</updated>
<published>2006-01-23T21:16:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8481#p8481</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8481#p8481"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8481#p8481"><![CDATA[
Unlike PC monitors, TV monitors are fixed at a 240 or 288 line The Apple II, the ZX Spectrum, and the Commodore 64 all used 192-line-tall video modes, and their TV pictures all had big ass borders. <br /><br />I'm guessing that Nintendo used a nearly full-frame video mode (we decided in that other thread that a full ntsc frame would be 280x243 NES pixels, and my tests on an old Mac bear this out) because the NES PPU is just a home version of the PPUs in Nintendo's <em>Radar Scope</em> through <em>Mario Bros.</em> era arcade boards, which used 256x224 pixels to address the full open-frame screen. (Yes, <em>Donkey Kong</em> is officially listed as <strong>224</strong>x256 vertical.)<br /><br />And quite a few Sega Master System (NTSC) games used the TI video chip's 256x224 pixel video mode to hide the borders and take the hit in vblank time.<br /><br />edit: minor correctness fixes<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 23, 2006 9:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-01-23T11:20:24-07:00</updated>
<published>2006-01-23T11:20:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8468#p8468</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8468#p8468"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8468#p8468"><![CDATA[
I'm sure this resolution works fine with the SNES since it already uses 2 bytes to define each tile in the screen, meaning the palettes have tile precision among other nice things.<br /><br />But the fact that if they had sacrificed a little resolution (256x192 does not look bad on screen at all!) on the NES we'd get better control of the attributes and better looking gfx bugs me a lot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jan 23, 2006 11:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-01-23T10:57:38-07:00</updated>
<published>2006-01-23T10:57:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8465#p8465</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8465#p8465"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8465#p8465"><![CDATA[
Well, I cannot know why, but effectively, I think you're right. The SNES also have a 256x240 screen. I think it has better resolution like that, but yeah, that causes others problems as well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Jan 23, 2006 10:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-01-23T10:48:21-07:00</updated>
<published>2006-01-23T10:48:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8464#p8464</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8464#p8464"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8464#p8464"><![CDATA[
Why coudn't the NES use a 256x192 pixel screen? This is proportional to the 4:3 TV screens we use with the NES, so there would be no problems regarding distortions or stuff like that. Also, this would leave 256 bytes for use with attributes, 4 times what we have now, enough for each tile to use it's own palette. Working with matatiles would be a piece of cake since each attribute byte would represent a 16x16 pixel block.<br /><br />The design nintendo chose is strange... a screen with the strange proportions of 256x240, the last row of attributes having unused bits... it's just weird. It would all fit better if they used 256x192. I think that is the Master System's resolution.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jan 23, 2006 10:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-01-23T09:38:54-07:00</updated>
<published>2006-01-23T09:38:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8459#p8459</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8459#p8459"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8459#p8459"><![CDATA[
The game I'm doing now uses 32x32 blocks, which are themselves constitued of four 16x16 metatiles, giving maps very light in bytes (additionnal to a small RLE like compression applied to blocks) and having a decent level design allowed. I can store 64 different metatiles and 32 different blocks at the same level.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Then you think about using 32x32 blocks, wich, in the NES, has the advantage of matching the area covered by an attribute byte, freeing you from complex, time-consuming bit manipulation (if you're scrolling sideways only, as the height of the NES screen is not a multiple of the number of attribute bytes in a column).<br /></div><br />This is a real advantege horizontally, but you still have to split attributes nybbles when scrolling vertically.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Jan 23, 2006 9:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-01-23T08:42:31-07:00</updated>
<published>2006-01-23T08:42:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8456#p8456</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8456#p8456"/>
<title type="html"><![CDATA[Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8456#p8456"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />But SMB1 does use a sentinel value between screens (drawn as "next page" in YY-Mario Editor), and a bidirectional engine could seek back to the start of the previous screen and decode from there.<br /></div><br />Well, it has been prepared to move forward only, but could move back with little extra effort. Since the screens in SMB1 have variable byte size, you'd need pointers to access them randomly. In the case of Mario, it would be possible to scroll back by placing a pointer to the previous screen, or even the length in bytes of the previous screen, so we know how much to go back and start decoding.<br /><br />At first I thought about using compressed screens with pointers to them. But as this was for an multi-way scroller, each screen needed to point to 4 others (Mario can get away with pointing only to the previous one, as the next is just at the end of the current one), what resulted in 8 bytes just to connect the level together. Even if each screen had 8 bit codes (wich would result in 4 bytes for connections) and a 512 byte table of pointers to each screen it was still a lot of wasted space. I then decided to abandon this idea and have a standard rectangular level map, with each position holding the index of a screen map.<br /><br />So, using pointers to other screens may be bad sometimes. The advantage is that you'll not waste space defining areas the player will never go to. I don't think it pays off though. Any gains from not defining unvisitable screens will be lost because of the absurd ammount of data needed to interconnect the screens.<br /><br />Maybe SMB1 could just store a long string of pointers to the screen, so that they could be accessed at will. But then it would have to be prepared for a lot of other things, like not restoring coins and enemies, for example. And I believe the Mario ROM is already so full there wouldn't be any room for this kind of new features, maybe that's why they left it that way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jan 23, 2006 8:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[baisoku]]></name></author>
<updated>2006-01-23T08:27:49-07:00</updated>
<published>2006-01-23T08:27:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8455#p8455</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8455#p8455"/>
<title type="html"><![CDATA[Re: Metatile size?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=981&amp;p=8455#p8455"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />16x16, 32x16, or 32x32: What are the advantages and disadvantages of different metatile sizes, and which commercial games use which sizes?<br /></div><br /><br />Castlevania series uses 32x32. The engines i've written for commercial GBC and GBA titles have all used 16x16 metatiles.<br /><br />As your metatiles get larger, your artists get sadder, as it becomes more tedious to put together convincing artwork. Also, your returns begin diminishing, as you've likely cut your map data size by roughly 4, and your actual tile data sizes start to become the limiting factor.<br /><br />Interestingly enough, our nextgen texture artists are going back to tiling: they're using a technique where they create a texture 'tileset' much like on handheld, then create tiled texture arrangements which are created at runtime via render-to-texture. Back to basics. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=35">baisoku</a> — Mon Jan 23, 2006 8:27 am</p><hr />
]]></content>
</entry>
</feed>