<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Dynamic Memory Allocation</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Dynamic Memory Allocation</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7469">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7469</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ManicGenius</b> [ Thu Feb 10, 2011 9:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">clueless wrote:</div><div class="quotecontent">I'm curious why you asked.  Do you have a use-case for a generic memory allocator?  If so, please share.  I'm really curious now on how a NES game might benefit form one.</div>
<br />
<br />Pretty much just general curiosity really. Old-school ASM programming is really kind've a lost art and thinking about high-level stuff in low-level terms on a limited instruction set is a fun thought game.
<br />
<br />A lot of the people on this forum are really knowledgable about things, and just trolling posts here helps a lot. This is just one thing I don't think I've seen a post on so I figured I'd ask.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ManicGenius</b> [ Thu Feb 10, 2011 9:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />From most posts so far it seems most people just use a set of fixed variables that they let objects utilize at a given time... Which definitely makes sense, cause like clueless said, on a system like this fragmentation and allocation management is a bitch.
<br />
<br />Though I kinda like tokumaru's singly-linked list deal.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 11, 2011 12:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Each object accesses its own bytes with indirect addressing through a single pointer variable that gets updated after each object is done being processed.</div><br />That's the reason why I don't use linear blocks of memory for my objects. Having to modify Y in order to access any byte would be a pain in the ass. I figured that having the object memory interleaved would be more efficient. Loads and stores are 1 cycle faster than in indirect addressing, and there's no need to modify an index register to access different object properties, you just use labels. Also, modifying only the index register to access different object slots is quicker than modifying a 16-bit pointer. I took all that into consideration before deciding to go with the interleaved way. It just happens that, on the 6502, 99% of the time it's easier/faster to handle interleaved data than linear data.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not sure what sort of other techniques are used in other projects. I do speed a lot of things up by copying object coordinates and velocity values into ZP before handling those objects.</div>
<br />I do most of these calculations in place, unless I need both index registers, in which case I have to copy the data to temporary locations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Fri Feb 11, 2011 7:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />not sure if this is what you mean, but i created ways to make functions which dynamically allocate memory  for their local variables on a stack
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=5038&amp;highlight=functions">http://nesdev.com/bbs/viewtopi ... =functions</a><!-- m -->
<br />
<br />it's more a proof of concept than anything i've used in a program though

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 11, 2011 7:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Putting local variables on the stack means you can't easily use the X register, as you need to TSX to get your frame pointer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Feb 11, 2011 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Each object accesses its own bytes with indirect addressing through a single pointer variable that gets updated after each object is done being processed.</div><br />That's the reason why I don't use linear blocks of memory for my objects. Having to modify Y in order to access any byte would be a pain in the ass. I figured that having the object memory interleaved would be more efficient. Loads and stores are 1 cycle faster than in indirect addressing, and there's no need to modify an index register to access different object properties, you just use labels. Also, modifying only the index register to access different object slots is quicker than modifying a 16-bit pointer. I took all that into consideration before deciding to go with the interleaved way. It just happens that, on the 6502, 99% of the time it's easier/faster to handle interleaved data than linear data.<br /></div>
<br />
<br />That's a really great idea! So if I'm understanding correctly, you'll have something like this in RAM:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectXL: .ds 8<br />ObjectXH: .ds 8<br />ObjectYL: .ds 8<br />ObjectYH: .ds 8<br />ObjectHealth: .ds 8<br />...<br /></div><br /><br />Then in your AI code, you'll have something like X loaded with the object number, so in your code you can do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx ObjectNumber<br />lda ObjectXL,x<br />sta Var<br />lda ObjectXH,x<br />sta Var2<br /></div><br /><br />instead of the slower:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy #CoordXL<br />lda &#40;pointer&#41;,y<br />sta Var<br />iny<br />lda &#40;pointer&#41;,y<br />sta Var2<br /></div>
<br />
<br />If I'm understanding that correctly, that is way more efficient than the way I'm doing it now. From what I see, going interleaved is almost always faster! I interleave a lot of my data, like tile definitions, but for some reason I never thought to interleave variables.
<br />
<br />If only I'd thought about doing this earlier! I could save hundreds of bytes and cycles...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Fri Feb 11, 2011 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Putting local variables on the stack means you can't easily use the X register, as you need to TSX to get your frame pointer.</div>
<br />
<br />the code i created doesn't use "the" stack for variables, it uses "a" stack.. a separate one.  you still have to use x or y to indirectly access the data though

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 11, 2011 6:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectXL: .ds 8<br />ObjectXH: .ds 8<br />ObjectYL: .ds 8<br />ObjectYH: .ds 8<br />ObjectHealth: .ds 8<br />...<br /></div></div><br />That's exactly it! Only I don't use such specific names in the declaration, I use "ObjectByte00", "ObjectByte01", etc., and near the object routines I use more significant names, like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectXLo = ObjectByte00<br />ObjectXHi = ObjectByte01<br />&#40;...&#41;</div>
<br />I do this because not all objects use the same bytes for the same purposes, although a lot of them do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Feb 12, 2011 4:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do it exactly like Celius described. It works fairly well but it's still a pain in the *** to write AI code.
<br />
<br />By the way it's possible to use the same variable for different uses in function of the object. For example a projectile can't have an health variable, so instead the damage amount the projectile does is stored here instead (for an example).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Sat Feb 12, 2011 5:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I interleave my object data like Tokumaru, except that I give them specific labels from the start.  The objects (enemies) in my current project don't vary much so I haven't needed to re-label fields for different uses.
<br />
<br />I like declaring the object data in interleaved blocks because it's really easy to loop through all objects with field labels + the X register.  I also like the convenience of being able to add and remove fields from my objects without messing up my object handling code too much.
<br />
<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">For example a projectile can't have an health variable, so instead the damage amount the projectile does is stored here instead (for an example).</div>
<br />
<br />In another project I was working on I treated projectiles exactly the same as other enemies.  Their health would get set to 1 and there was a separate field for damage, since regular enemies would damage the hero on collision too.  The only real difference was how they were created in-game.  Normal enemies were spawned by the level data, and projectile enemies were spawned by other enemies.  Under the hood they were the same.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Feb 14, 2011 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">For example a projectile can't have an health variable, so instead the damage amount the projectile does is stored here instead (for an example).</div><br /><br />In another project I was working on I treated projectiles exactly the same as other enemies.  Their health would get set to 1 and there was a separate field for damage, since regular enemies would damage the hero on collision too.  The only real difference was how they were created in-game.  Normal enemies were spawned by the level data, and projectile enemies were spawned by other enemies.  Under the hood they were the same.</div>
<br />
<br />I actually just ran into a dilemma with my project's set up where I was having enemies/objects handle their own projectile weapons with their own RAM. A couple problems concerned speed and space consumption, but another problem arose that I'd never even thought about. When an enemy was deactivated, it's projectiles were deactivated also. That's why I completely redesigned things and separated the two. Now, there are 8 available slots for intelligent objects, and 8 available slots for "spontaneous" objects. Spontaneous objects include projectile weapons and powerups. They don't need as much RAM as enemies and generally deactivate when the player touches them. Separating the two also made the weapon independent of the enemy that instantiated it, so it wouldn't disappear when you killed the enemy.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>