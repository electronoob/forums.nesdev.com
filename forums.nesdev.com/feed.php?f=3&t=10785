<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=10785" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-12-21T06:48:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=10785</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-21T06:48:09-07:00</updated>
<published>2013-12-21T06:48:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122742#p122742</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122742#p122742"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122742#p122742"><![CDATA[
So Spyro 3's copy protection is along some of the same lines as <a href="http://blog.kevtris.org/blogfiles/EWJ2PROT.TXT" class="postlink">Earthworm Jim 2</a>. You might have been thinking of <a href="https://en.wikipedia.org/wiki/Data_position_measurement" class="postlink">data position measurement</a>, used to an extent by both <a href="https://en.wikipedia.org/wiki/CD-Cops" class="postlink">CD-Cops</a> and <a href="https://en.wikipedia.org/wiki/SecuROM" class="postlink">SecuROM</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Dec 21, 2013 6:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Grapeshot]]></name></author>
<updated>2013-12-20T20:16:15-07:00</updated>
<published>2013-12-20T20:16:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122728#p122728</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122728#p122728"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122728#p122728"><![CDATA[
All right, I went back and looked at <a href="http://www.gamasutra.com/view/feature/131439/keeping_the_pirates_at_bay.php" class="postlink">the Gamasutra article on Spyro 3 copy protection</a>, which I thought had mentioned dynamically overlaying code over the protection routines, but that isn't mentioned. What this game did instead was use several different checksum routines in different code overlays that would calculate checksums of both chunks of game data and the other checksum routines, then use some of those checksums as decryption keys for other data. <br /><br />The systems where I know disk drive speed and timing are absolutely critical are the Apple II and the Amiga, though those are of course using floppy disks not CDs. I did find a mention on Wikipedia of the Xbox 360 calculating angular distances between sectors to check the legitimacy of a game DVD, but whoever is trying to build an Xbox 360 emulator will have many more problems than that to contend with.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4844">Grapeshot</a> — Fri Dec 20, 2013 8:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-12-20T17:55:15-07:00</updated>
<published>2013-12-20T17:55:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122724#p122724</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122724#p122724"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122724#p122724"><![CDATA[
I've definitely heard of it, but as unsafe programming practice, not copy protection. (After all, it wouldn't help at all given a copy of the disk).<br /><br />As I understand it, it takes effort and code size to poll for when the data you want is ready, so they instead just figured &quot;it'll take N seconds to load this much data off a 2x CDROM, so we'll just time the executing code to match&quot; and then the data arrives too early and overwrites something before the other loop is ready for it to...<br /><br />Another possibility is dropping sectors because the game's CDROM read handler isn't fast enough to deal with a higher throughput.<br /><br />Then again, maybe that's myth; I can't find a modern-day citation of this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Dec 20, 2013 5:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2013-12-20T17:28:19-07:00</updated>
<published>2013-12-20T17:28:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122723#p122723</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122723#p122723"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122723#p122723"><![CDATA[
<div class="quotetitle">Grapeshot wrote:</div><div class="quotecontent"><br />and some PlayStation anti-piracy methods depended on the precise transfer speed of the CD-ROM as the anti-piracy checks would load new data over the currently executing code.<br /></div><br /><br />Please cite an example of this. I've never ever heard of any PS1 game having anything like this. There is the normal copy protection on every disc, and then I've heard of Anti-Mod software protections that detect a working classic modchip, plus the LibCrypt on some PAL games. The transfer speed on the PS1 certainly isn't precise, and that makes no sense as a copy protection measure either. Whatever you can elaborate on this would be appreciated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Fri Dec 20, 2013 5:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Joe]]></name></author>
<updated>2013-12-20T11:17:45-07:00</updated>
<published>2013-12-20T11:17:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122717#p122717</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122717#p122717"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122717#p122717"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Nintendo 64 uses XIP and has plenty of 256 Mbit games and a couple 512 Mbit games (Conker and Resident Evil 2), but because of Rambus latency, the CPU requests a &quot;page&quot; at a time and caches it. Does that count?<br /></div>I think the N64 hardware is capable of XIP (ROM is mapped to the CPU address space), but no games ever use it. You're probably thinking of how some games use demand paging, where the page fault handler loads data from ROM to RAM.<br /><br />Even the boot code that initializes the RAM controller doesn't execute from ROM: it gets copied from the cartridge ROM to the RSP's internal RAM (which is also mapped to the CPU address space) and executes from there!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5948">Joe</a> — Fri Dec 20, 2013 11:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-20T06:18:21-07:00</updated>
<published>2013-12-20T06:18:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122703#p122703</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122703#p122703"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122703#p122703"><![CDATA[
<div class="quotetitle">Grapeshot wrote:</div><div class="quotecontent"><br />I don't think any console with ROM cartridges larger than 128mb supports direct code execution from that memory, mainly because mask ROMs larger than that are generally built on the pattern of NAND Flash instead of NOR Flash. In such cases you're generally loading certain pages of the ROM into memory via DMA as the game requests it (which works just fine with a mmap()ed file).<br /></div><br />Nintendo 64 uses XIP and has plenty of 256 Mbit games and a couple 512 Mbit games (Conker and Resident Evil 2), but because of Rambus latency, the CPU requests a &quot;page&quot; at a time and caches it. Does that count?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />and some PlayStation anti-piracy methods depended on the precise transfer speed of the CD-ROM as the anti-piracy checks would load new data over the currently executing code.<br /></div><br />So that's why PS2's fast CD-ROM mode defaulted off.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Dec 20, 2013 6:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Grapeshot]]></name></author>
<updated>2013-12-20T01:37:28-07:00</updated>
<published>2013-12-20T01:37:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122701#p122701</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122701#p122701"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122701#p122701"><![CDATA[
I don't think any console with ROM cartridges larger than 128mb supports direct code execution from that memory, mainly because mask ROMs larger than that are generally built on the pattern of NAND Flash instead of NOR Flash. In such cases you're generally loading certain pages of the ROM into memory via DMA as the game requests it (which works just fine with a mmap()ed file). <br /><br />You might have to adjust the copying speed to match the actual console, though. Several NDS games would crash or fail to show FMVs if data couldn't be loaded from a slow SD card in a flash cart fast enough, and some PlayStation anti-piracy methods depended on the precise transfer speed of the CD-ROM as the anti-piracy checks would load new data over the currently executing code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4844">Grapeshot</a> — Fri Dec 20, 2013 1:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[James]]></name></author>
<updated>2013-12-19T23:15:30-07:00</updated>
<published>2013-12-19T23:15:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122698#p122698</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122698#p122698"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122698#p122698"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />...resampling... I don't get the insistence on doing it themselves.<br /></div><br />Because it's fun?<br /><br />Besides, the max sample rate that DirectSound supports, on my system at least, is 200kHz.  So some sort of resampling needs to happen before handing it off to the OS.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=88">James</a> — Thu Dec 19, 2013 11:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2013-12-17T11:54:24-07:00</updated>
<published>2013-12-17T11:54:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122616#p122616</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122616#p122616"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122616#p122616"><![CDATA[
Ok, yeah I can see how programming a NES is similar to writing a NES emulator. You learn memory mapped IO (that it exists at all). These things also exist on PC, but these days you never interact with them directly. But knowing whats going on underneath the hood is very valuable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Tue Dec 17, 2013 11:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-12-15T13:16:53-07:00</updated>
<published>2013-12-15T13:16:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122514#p122514</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122514#p122514"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122514#p122514"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The benefit of language features is rapid development, so that Microsoft or Mozilla or Google can finish a web browser that lets you post on forums.nesdev.com before you die.<br /></div><br />Man, that statement is beyond awesome. <img src="http://forums.nesdev.com/images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />In regard to disk emulation, how is the FDS handled ? I suppose that since disk capacity is very small anyways, the emu caches the entire file, and copy the contents of it to the emulated RAM when something is loaded from the disk, and simulate a delay of 6 seconds ? That's the approach that makes the most sense, and until a game that uses 100+ disk is released, it'd be no problems.<br /><br />How comes no emu simulates the sound click generated by the disk drive ? I think that makes a difference as opposed to the real hardware, it makes the loading more &quot;tolerable&quot;.<br />On the other hand I like the instant disk switching of emus without having to get up from your sofa...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Programming with a type system allows compile-time checking of certain program correctness axioms associated with each type.<br /></div><br />Objects and types are two distinct concepts.<br />A &quot;purely oriented language&quot; means<br />1) Everything is an object<br />2) All methods (including the main program) should be method related to an object.<br /><br />This makes no sense in my opinion. Methods being functions with are closely related to a particular data structure. How can Main be related to a data structure ? And why should simple things such as &quot;int&quot; or &quot;bool&quot; be objects ? Nonsense. In my honest opinion, no more than ~10-20% of stuff should be object oriented in a program. Of course it depends on the situation overall. Any more than that, and you enter in the field of &quot;computer science of clouds and arrows&quot; which I find particularly annoying.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 15, 2013 1:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-15T13:11:54-07:00</updated>
<published>2013-12-15T13:11:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122513#p122513</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122513#p122513"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122513#p122513"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />If you don't even have the space for the mmap() section<br /></div><br />Which would be the case for, say, a 2 GB or larger ROM image on a 32-bit emulator. It'd have to fall back to CD-style emulation, letting the OS do the disk caching.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 15, 2013 1:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2013-12-15T10:20:53-07:00</updated>
<published>2013-12-15T10:20:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122505#p122505</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122505#p122505"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122505#p122505"><![CDATA[
&gt; So what would you do when you emulate a 4 GB CF-like or SD-like card, such as the 3DS or PS Vita Game Card?<br /><br />My understanding is that mmap will page in and out sections of the card as needed, so you'd be hit with a lot of swapping penalties. If you don't even have the space for the mmap() section, then you'd have to roll your own solution to try and cache what you could, but mostly load from disk.<br /><br />NDS tends to be more stream-based anyway. It's a serial bus, after all. No fully random access like on the GBA.<br /><br />Probably better to ask someone like Exophase who has emulated the NDS on low-power phones.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Sun Dec 15, 2013 10:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-12-15T09:08:58-07:00</updated>
<published>2013-12-15T09:08:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122502#p122502</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122502#p122502"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122502#p122502"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Any abstraction or &quot;magic happy cloud widget&quot; is something that has to involve CPU time at some level, and the benefits of it I have never seen justified in any way.<br /></div><br />The benefit of language features is rapid development, so that Microsoft or Mozilla or Google can finish a web browser that lets you post on forums.nesdev.com before you die.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />All the processors I've used and coded for understand the concept of a subroutine (a function if you will), and that's it.<br /></div><br />A method is a subroutine associated to a particular data type. Virtual functions are just a jump table, a way to choose the right function to operate on a particular data type whose memory is organized similarly to related types.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Why would you limit yourself to use only objects when you can also use something else ?<br /></div><br />Programming with a type system allows compile-time checking of certain program correctness axioms associated with each type.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />For me college is where you're at between 12 and 15 years old.<br /></div><br />Then it must be the same as <em>colegio</em> in Spanish-speaking countries, which corresponds to &quot;high school&quot; in the United States. In the USA, college means university.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />When it comes to NDS games (up to 2GB), or maybe CD-ROM only, you can start using mmap instead of fread.<br /></div><br />So what would you do when you emulate a 4 GB CF-like or SD-like card, such as the 3DS or PS Vita Game Card? It's too big for RAM on 32-bit machines and too fast for HDD. Even a 2 GB ROM is too big for 32-bit systems without 3 GB support.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 15, 2013 9:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2013-12-15T07:39:36-07:00</updated>
<published>2013-12-15T07:39:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122498#p122498</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122498#p122498"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122498#p122498"><![CDATA[
&gt; 100k sync per second would be about 1666 I/O operations per frame, is there this much ?<br /><br />There can be. I have a trick with my CPU/PPU where I keep a copy of the H/V counters inside the CPU (it's extremely predictable with perfect accuracy), even though real hardware only goes off the PPU H/V pins. This lets me run the CPU ahead when querying for Hblank, Vblank, IRQ, NMI. So I only have to sync on other register accesses.<br /><br />The SA-1 is much more pathological. Both the CPU and SA1 can access the same block of work RAM at the same time. If the CPU is ahead of the SA1, and it tries to access memory, it has to wait for the SA1 to catch up, because the SA1 might access that same address. The reverse is equally true. So any RAM access at all, read or write, requires synchronization. This easily hits millions of syncs a second in the average case.<br /><br />Sure, I could fake it and sync once per opcode, and cut 75% of syncs out, and I bet all SA1 games would still run, but their timing would be somewhat off.<br /><br />(Even more fun, technically the SA1 memory controller will stall its CPU if it detects the SNES CPU is accessing the same bus at the same time. Nobody emulates this yet. The requirements would be astronomical.)<br /><br />&gt; Trying to short-circuit that is sure possible but it'd be very complicated and not worth the trouble, right ?<br /><br />It's possible to keep a write buffer on a chip running ahead, and the chip behind pulls values from that buffer with a timestamp (implement as a binary min-heap priority queue.) But you can't do that with reads when a chip is ahead (the value is not yet known.) The overhead of this buffering may well be worse than the synchronization, especially with an optimized cooperative threaded model.<br /><br />The only other option is even more extreme. Allow the CPU to run ahead and read and write to RAM freely, but if you detect the SA1 accesses the same region when it catches up, perform a rewind (basically load an older save state) and increase your granularity for that section. This is extremely complex, and has substantial performance impact. Nemesis did this for his Genesis emulator, Exodus. And while it works, it's pegging out a quad-core Intel processor now. My cooperative model pegs out a Core processor too, but only one core on it. So why require four cores when you can do it with one?<br /><br />The bigger question is if Nemesis' model will scale to even more powerful systems, but I believe rewinding state will also scale in complexity and resource requirements.<br /><br />Still, what he's doing is awesome. My absolute favorite part of emulation is researching the synchronization problem, so I love seeing new ideas in actual implementations.<br /><br />&gt; So basically MMap can read a file and automatically cache parts that are used in RAM ?<br /><br />Yep. It's not terribly efficient, but it's fun to be able to use it just like a regular char* array. Writing works, too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Sun Dec 15, 2013 7:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-12-15T07:02:53-07:00</updated>
<published>2013-12-15T07:02:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122497#p122497</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122497#p122497"/>
<title type="html"><![CDATA[Re: How hard is it to write an emulator ?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10785&amp;p=122497#p122497"><![CDATA[
Great, thank you.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Modern processors cannot do synchronization between cores at a rate of more than ~100,000 syncs per second, even with the lowest-level atomic operations. Try it yourself and see.<br /></div><br />This explains that. 100k sync per second would be about 1666 I/O operations per frame, is there this much ? Any ways, in the case of a game for example polling $2002, then the answer is yes. So you have to do a cycle-accurate emultion for those cases anyways. Trying to short-circuit that is sure possible but it'd be very complicated and not worth the trouble, right ?<br /><br />So basically MMap can read a file and automatically cache parts that are used in RAM ? Sounds like a great feature.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 15, 2013 7:02 am</p><hr />
]]></content>
</entry>
</feed>