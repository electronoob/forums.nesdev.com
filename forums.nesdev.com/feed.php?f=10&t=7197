<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=7197" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-11-29T21:15:56-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=7197</id>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2010-11-29T21:15:56-07:00</updated>
<published>2010-11-29T21:15:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70736#p70736</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70736#p70736"/>
<title type="html"><![CDATA[Creating A More Flexible, Efficient Screen DMA System]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70736#p70736"><![CDATA[
Seems like a good idea, and you could limit one section to X sprites for the main character nomatter what, and then also have each other section for a different enemy or object.<br /><br /><br />Sounds like a great idea, but also at the price of a bit of PRG-ROM space, though.  But I guess if it makes speed more efficient it might be worth it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Mon Nov 29, 2010 9:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neilbaldwin]]></name></author>
<updated>2010-11-29T16:03:07-07:00</updated>
<published>2010-11-29T16:03:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70720#p70720</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70720#p70720"/>
<title type="html"><![CDATA[Creating A More Flexible, Efficient Screen DMA System]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70720#p70720"><![CDATA[
I implemented a system similar to what I described. It's actually really good.<br /><br />I'll try to distill the code down to something that I can post up here in case it's of any use to anyone else.<br /><br /><img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3896">neilbaldwin</a> — Mon Nov 29, 2010 4:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-11-26T05:02:37-07:00</updated>
<published>2010-11-26T05:02:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70543#p70543</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70543#p70543"/>
<title type="html"><![CDATA[Creating A More Flexible, Efficient Screen DMA System]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70543#p70543"><![CDATA[
I guess it's possible to write a buffer system where it computes the cycles it approximately takes to write data to VRAM, and stop when VBlank time is about to end.<br />Then the system should resume the update next frame etc...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Nov 26, 2010 5:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neilbaldwin]]></name></author>
<updated>2010-11-26T04:42:30-07:00</updated>
<published>2010-11-26T04:42:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70542#p70542</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70542#p70542"/>
<title type="html"><![CDATA[Creating A More Flexible, Efficient Screen DMA System]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7197&amp;p=70542#p70542"><![CDATA[
I'm sketching out high-level ideas for the screen writing code for my next project and have been trying to come up with a nice flexible and efficient DMA system.<br /><br />The general problems are;<br /><br />- there is too much information contained on the screen to write in one frame (as always)<br />- there are several distinct areas that may or may not need updating, depending on what the user is doing. Some actions may require only one particular areas updating whereas other could require several (or maybe all) areas updating<br /><br />My best stab at this so far is to break the code to update each area into separate subroutines with a jump table. The update routines will most often be just 'blitting' the data to the screen e.g;<br /><br />lda buffer<br />sta $2007<br />lda buffer+1<br />sta $2007<br />...<br />lda buffer+31<br />sta $2007<br />rts<br /><br />Each subroutine will then be given an ID number.<br /><br />updateArea00 = 00<br />updateArea01 = 01<br />updareArea02 = 02<br />etc<br /><br />So when you need to update the screen there is a process buffer in RAM. You first update the necessary buffers and then activate the DMA-ing by writing process IDs to the process buffer, terminated by something, say, $FF. So;<br /><br />00,01,02,FF<br /><br />would update area00 on the first frame, area01 on the second, area02 on the third and then stop. Each time an ID is processed you shift the buffer to the left until the first ID in the buffer is FF. Higher priority updates should go earlier in the buffer than low priority ones.<br /><br />Obviously, when adding processes to the buffer, you'd always write them to the end of the buffer by seeking for $FF. There'd have to be some limits to the buffer length too.<br /><br />Depending on the amount of data per area, you'd probably be able to process 2 IDs per frame but it would require balancing of the amount of data processed by each subroutine.<br /><br />I'm still trying to get my head around what might happen if (when) the situation arises where you're writing to one of the screen buffers and either a) there's a process already in the queue that hasn't completed yet that is relying on data from that buffer or b) the queue gets big and you add processes to the end causing quite a bit of lag in the screen rewriting.<br /><br />Thoughts anyone?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3896">neilbaldwin</a> — Fri Nov 26, 2010 4:42 am</p><hr />
]]></content>
</entry>
</feed>