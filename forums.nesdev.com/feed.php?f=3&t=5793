<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=5793" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-12-04T15:13:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=5793</id>
<entry>
<author><name><![CDATA[The Lord]]></name></author>
<updated>2009-12-04T15:13:49-07:00</updated>
<published>2009-12-04T15:13:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53500#p53500</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53500#p53500"/>
<title type="html"><![CDATA[Re: A few more PPU questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53500#p53500"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br /><div class="quotetitle">essial wrote:</div><div class="quotecontent">I know I've read in a doc that says the PPU never makes a fetch for palette data on the address bus, which would obviously mean that the fetch is internal during rendering. Does it simply do this while doing the other 4 fetches?<br /></div><br /><br />I don't think this detail was ever discovered.<br /><br />Given that any pixel can output one of ~32 colors, it makes sense to me that the pallets are fetched as each individual pixel is being output.  Pre-fetching the BG pallet wouldn't make much sense since a sprite pixel might be output and vice versa.</div><br /><br />Isn't the palette data held in memory kept within the PPU? So this would mean, that during rendering the palette data doesn't need to be adressed via the adress bus.<br /><br />Afaik the internal palette is consulted once per pixel, either the playfield palette or the object palette, depending on the outcome of the multiplexer. This is described in detail in Brad Taylors PPU document.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4135">The Lord</a> — Fri Dec 04, 2009 3:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-12-04T08:53:07-07:00</updated>
<published>2009-12-04T08:53:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53480#p53480</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53480#p53480"/>
<title type="html"><![CDATA[Re: A few more PPU questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53480#p53480"><![CDATA[
<div class="quotetitle">essial wrote:</div><div class="quotecontent"><br />I know I've read in a doc that says the PPU never makes a fetch for palette data on the address bus, which would obviously mean that the fetch is internal during rendering. Does it simply do this while doing the other 4 fetches?<br /></div><br /><br />I don't think this detail was ever discovered.<br /><br />Given that any pixel can output one of ~32 colors, it makes sense to me that the pallets are fetched as each individual pixel is being output.  Pre-fetching the BG pallet wouldn't make much sense since a sprite pixel might be output and vice versa.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Does this mean that while the PPU is reading in these values, it is also acting on the bit0 values of the four latches and actively rendering to something?<br /></div><br /><br />Yeah.. at least if I'm understanding your question right.  Which 4 latches are you referring to?<br /><br />Although it doesn't always pull from bit 0 of the pattern table shifters.  It can pull from any one of 8 bits, depending on the fine X scroll.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If it rendered like this, I would expect it to start rendering tile 2 on the scanline first, not tile three.<br /></div><br /><br />The shift reg is sort of like the drawing queue.  The tiles in it are the next tiles to be drawn.  It slowly empties -- 1 bit per cc.  And after every 8 ccs, it gets another 8 bits added to it for the next fetched tile.<br /><br />Tiles 1 and 2 are in the shift register at the start of the scanline, since they were prefetched at the end of the previous scanline.<br /><br />Every cc, one of the 8 high bits (determined by fine X scroll -- 0 would be the highest bit, 1 the next highest and so on) is output.  The shift reg is then shifted left by 1.<br /><br />Once this has been done 8 times, the next tile has been fully fetched, and it gets loaded into the low 8 bits of the shift reg, which puts it next in line to be rendered.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Fri Dec 04, 2009 8:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[essial]]></name></author>
<updated>2009-12-04T00:59:09-07:00</updated>
<published>2009-12-04T00:59:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53468#p53468</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53468#p53468"/>
<title type="html"><![CDATA[A few more PPU questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5793&amp;p=53468#p53468"><![CDATA[
Sorry for multiple forum posts but I really don't know where else to ask these kinds of questions. This question is in reference to the below text:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">At the start of a new tile fetch phase &#40;every 8 cc's&#41;, both latched pattern <br />table bitmaps are loaded into the upper 8-bits of 2- 16-bit shift registers <br />&#40;which both shift right every clock cycle&#41;. The palette select data is also <br />transfered into another latch during this time &#40;which feeds the serial <br />inputs of 2 8-bit right shift registers shifted every clock&#41;. The pixel data <br />is fed into these extra shift registers in order to implement fine <br />horizontal scrolling, since the periods when the PPU fetch tile data is <br />fixed.</div><br /><br />I completely understand the table bitmap section. What I'm confused about is the palette select data, and how that is handled. Each tile fetch phase has 4 parts: <br /><br /><ul>Name table byte fetch<br />Attribute table byte fetch<br />Pattern table bitmap #0 fetch<br />Pattern table bitmap #1 fetch</ul><br /><br />That of course is the full 8cc cycle for each tile. When is the PPU supposed to be doing this palette select thing? I know I've read in a doc that says the PPU never makes a fetch for palette data on the address bus, which would obviously mean that the fetch is internal during rendering. Does it simply do this while doing the other 4 fetches?<br /><br /><br />My other question is really two combined..<br />The first fetched tile is really the 3rd tile in the scanline. I also noticed that since the pattern data is being put at the end of 16-bit shift registers, they will only be usable for 8 cycles (the time it takes to fetch another tile). Does this mean that while the PPU is reading in these values, it is also acting on the bit0 values of the four latches and actively rendering to something? If it rendered like this, I would expect it to start rendering tile 2 on the scanline first, not tile three.<br /><br />Hopefully someone can help me clear these questions up. Thanks again!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4132">essial</a> — Fri Dec 04, 2009 12:59 am</p><hr />
]]></content>
</entry>
</feed>