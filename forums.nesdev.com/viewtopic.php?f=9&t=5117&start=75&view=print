<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New approach to the fabled NES ethernet adapter</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New approach to the fabled NES ethernet adapter</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5117">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5117</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>9</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Feb 22, 2010 5:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha yeah, jero32 is also the tester I mentioned.  So that would be good to use.  I've wanted to hack some networking feature into Solar Wars also.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Tue Feb 23, 2010 12:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So much for the Arduino idea.  Long story short, the compiled language does not execute fast enough.  Wish I'd found this before wasting my evening...
<br /><a href="http://hackaday.com/2010/01/06/arduino-io-speed-breakdown/" class="postlink">http://hackaday.com/2010/01/06/arduino-io-speed-breakdown/</a>
<br />
<br />To give you an idea of how slow it runs, I did a simple on/off on a data pin.  The high pulse lasted around 4us.  The same pulse on the ATTiny2313 in assembly lasted around .25us, about 8 times faster.  I didn't really believe it until I watched both inputs together on the oscilloscope.
<br />
<br />Back to the drawing board.  I'm going to go ahead and use the ATTiny2313 for now.  Will post the results when it's done, hopefully tomorrow evening.  If we find a suitable replacement later we can go with that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Tue Feb 23, 2010 4:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />what happens if you access the port directly?
<br />(example for port b in c for avr)<div class="codetitle"><b>Code:</b></div><div class="codecontent">DDRB = 0xFF; //set data direction register<br />unsigned byte out = 0x55; //&nbsp; 0b01010101<br />for&#40;;;&#41; &#123;<br />&nbsp; &nbsp; out ~= out; // toggle between 0b01010101 and 0b10101010<br />&nbsp; &nbsp; PORTB = out; // output out<br />&#125;</div>
<br />
<br />you can also use SPI if you need fast transfer speed on serial data

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 23, 2010 4:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a good point. Can the MCU operate as a 5.0 V SPI slave? If so, you might not need much interfacing logic on the side between the NES and the MCU because the NES's controller protocol is already close enough to <a href="http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus" class="postlink">SPI</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Tue Feb 23, 2010 6:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">That's a good point. Can the MCU operate as a 5.0 V SPI slave? If so, you might not need much interfacing logic on the side between the NES and the MCU because the NES's controller protocol is already close enough to <a href="http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus" class="postlink">SPI</a>.</div>
<br />both atmega and attiny has 5V SPI and can both operate as both slave and master.
<br />
<br />the ATTINY2313 you have should actually be very good for the project (exists both 10 and 20MHz versions), looks like it's the cheapest smallest AVR uC with both SPI and USART. it costs <a href="http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&amp;name=ATTINY2313-20SU-ND" class="postlink">$2.47 at digikey or $1.556 if you buy 25</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Tue Feb 23, 2010 8:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">hyarion wrote:</div><div class="quotecontent">both atmega and attiny has 5V SPI and can both operate as both slave and master.</div>
<br />
<br />Excellent idea, hyarion.  I've been bit-banging the data, but this would be much more efficient and eliminate timing issues.  I didn't think about it before, but we can use a "LDA $4017" command to automatically generate the clock cycle necessary for SPI on the second controller port even when outputting data on the latch line.
<br />
<br />The current NES ASM code requires bit-banging (and strict timing) on the part of the MCU receive data.  The code to output a sprite X location to the MCU looks like this...
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda spritex<br />&nbsp;sta txbuffer<br />&nbsp;rol txbuffer<br /><br />&nbsp;lda #1<br />&nbsp;sta $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; //HIGH pulse to Latch<br />&nbsp;lda #0<br />&nbsp;sta $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; //LOW&nbsp; pulse to Latch<br /><br />&nbsp;rol txbuffer<br />&nbsp;lda txbuffer<br />&nbsp;and #1<br />&nbsp;sta $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Send bit 1<br />&nbsp;lda #0<br />&nbsp;sta $4016<br /><br />&#40;... send bits 2 - 8 &#41;<br /></div><br /><br />Using SPI on the MCU, we might do this...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda spritex<br />&nbsp;sta txbuffer<br />&nbsp;rol txbuffer<br /><br />&nbsp;lda #1<br />&nbsp;sta $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; //HIGH pulse to Latch<br />&nbsp;lda #0<br />&nbsp;sta $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; //LOW&nbsp; pulse to Latch<br /><br />&nbsp;rol txbuffer<br />&nbsp;lda txbuffer<br />&nbsp;and #1<br />&nbsp;sta $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Send bit 1<br />&nbsp;lda $4017&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Generate clock cycle<br /><br />&#40;... send bits 2 - 8 &#41;<br /></div><br />Using SPI should also allow us to use the Arduino.  I'll give that another shot tonight before going back to the 2313.  It would be much easier to tell people "buy an Arduino for $30 and do this to program it" than to say "here's a schematic - good luck!"<br /><br />Found this code for using SPI on the Arduino...<br /><a href="http://dorkbotpdx.org/blog/feurig/arduino_code_for_thought_spi_slave" class="postlink">http://dorkbotpdx.org/blog/feurig/arduino_code_for_thought_spi_slave</a>[/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Tue Feb 23, 2010 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I could use some help if anyone has some spare time today.  I need a simple NES program written to talk to the MCU tonight.  I can do it, but it would take me a bit longer than someone with more experience.  Will need ASM code that I can compile and burn to the PRG that will do the following steps.
<br />
<br /><strong>1. Start up, display a background that with the text "Waiting for MCU".<br />2. Send high/low signals to $4016<br />3. Poll controller 1 (do nothing with the data, just poll)<br />4. Poll controller 2 (shift the data into the variable rxByte)</strong>
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;// Do for each of the 8 bits...<br />&nbsp;asl rxByte<br />&nbsp;lda $4017<br />&nbsp;and #1<br />&nbsp;adc rxByte<br />&nbsp;sta rxByte<br /></div>
<br /><strong>5. If rxByte does not equal 128, loop back to step 2.<br />6. If rxByte equals 128, update the background to display "MCU Found"<br />7. End</strong>
<br />
<br />You should be able to test in an emulator by hitting B or Left on the second virtual controller.  Can't remember which is the 7th bit.  There are two reasons I'd like this.  One, it's a test to make sure the MCU is responding.  Two, it's the first step in establishing the protocol that the NES will use to communicate with the MCU to get connection status, etc.
<br />
<br />I have two flash carts to work with.  The one I've been using is an NROM with 32K EEPROMs in both CHR and PRG sockets.  I also have an SNROM cart modified according to this page...
<br /><a href="http://www.54.org/sage/condev/ff2cartproject/" class="postlink">http://www.54.org/sage/condev/ff2cartproject/</a>
<br />
<br />I'm sure some wizard out there could make quick work of this.  If so, I would greatly appreciate it!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 23, 2010 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is polling without rereads for DPCM-induced double clocks, right?
<br />
<br />I'd make it, but I have a haircut appointment after work tonight, and someone might beat me to it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Tue Feb 23, 2010 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry, you're over my head there.  I understand the concept of DPCM, but I don't know it's effect on polling the controller.  Are you saying that playing music may interrupt the controller polling process and cause an unexpected clock upon resuming the polling process?  We're not playing any music yet, so I just need the code written so that if the software receives value 127 from controller 2, it will proceed to the next step.  Although that's definitely something we'd need to keep in mind long term.
<br />
<br />I'll be working on this after we get the kids to bed tonight, but that won't be until 9PM Central.  Getting 4 girls under 8 years old to bed is like herding cats.  Angry, vicious, cranky cats.   <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 23, 2010 1:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent">Sorry, you're over my head there.  I understand the concept of DPCM, but I don't know it's effect on polling the controller.</div>
<br />DMA double clock bug: If the CPU is executing a read at the exact same time the sample playback unit wants to fetch one more byte of compressed samples, the same address is read again. There are two notable places in the NES where a read has side effects proportional to the number of reads: PPUDATA ($2007) and the controller ports. On the controller ports, a double clock results in sending two clock pulses instead of one, so the CPU misses a bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Tue Feb 23, 2010 2:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the explanation.  You've probably had to go over that a number of times, so I appreciate your patience.  I try to RTFM when I can, but on occasion I will need some guidance.  Will try to keep that to a minimum.
<br />
<br />So there's a good chance that music would mess with the SPI communication.  You could probably filter out double clocks if you were bit-banging the data.  Say you used a counter in ASM to count the number of wait states expected between clock cycles.  If two clock pulses are normally 8us apart but you came across two that were 2us apart, you could restart the timing from the second clock pulse.  A pain, but doable with the ATTiny2313.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 23, 2010 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A typical NES controller read routine will look like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">read_player_x:<br />&nbsp; lda #1<br />&nbsp; sta tmp0<br />&nbsp; sta $4016<br />&nbsp; lda #0<br />&nbsp; sta $4016<br /><br />@loop:<br />&nbsp; lda $4016,x&nbsp; &nbsp;; 4 c<br />&nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2 c<br />&nbsp; rol tmp0&nbsp; &nbsp; &nbsp; ; 5 c if in zero page<br />&nbsp; bcc loop&nbsp; &nbsp; &nbsp; ; 3 c - after 8 left shifts, the 1 will be in carry<br />&nbsp; lda tmp0<br />&nbsp; rts<br /></div>
<br />You guessed right that clock cycles will typically be 14 cycles (7.8 µs) apart with this loop.
<br />
<br />Actual game controller reading code is slightly more complex because on the Famicom, the hardwired controllers for players 1 and 2 are on bit 0 of $4016/7, and the plug-in controllers for players 3 and 4 are on bit 1. Games are supposed to OR together controllers 1 and 3 and controllers 2 and 4 until a 3- or 4-player game starts, so that the player can use plug-in controllers instead of the hardwired controllers. But games never released in Japan often ignored bit 1.
<br />
<br />Music need not interfere with SPI comms if the music just uses the tone generators (pulse 1, pulse 2, triangle, noise). Or perhaps you could run the clock signal through some sort of monostable circuit so that the double-clocks are smeared together.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Tue Feb 23, 2010 2:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent">A pain, but doable with the ATTiny2313.</div> you should be able to read out the time diff if you tie the clock pin on the control port to both the ICP (input capture) and to an interrupt pin (might be able to setup an interrupt on ICP instead so this pin isn't needed) on the attiny and then setup a timer on the avr.
<br />
<br />more about timers and counters can be read in:
<br /><!-- m --><a class="postlink" href="http://www.atmel.com/dyn/resources/prod_documents/doc2505.pdf">http://www.atmel.com/dyn/resources/prod ... oc2505.pdf</a><!-- m -->
<br />and:
<br /><!-- m --><a class="postlink" href="http://www.atmel.com/dyn/resources/prod_documents/DOC2543.PDF">http://www.atmel.com/dyn/resources/prod ... OC2543.PDF</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Tue Feb 23, 2010 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Feel free to modify my pung source. (Memblers has a copy of it) Which reminds me...gotta get that squeedo deal trough.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Feb 23, 2010 6:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is a little multi-test program.  You have to press A to start the test, but you can add other ones into the test.asm file.  An RTS instruction may return to the menu (the MCU test doesn't).
<br />
<br />The MCU test changes the palette for every $80 it reads off of $4017.  That was just quicker to do than text printing at the moment.  BTW, that's the same as pressing the A button on the 2nd controller.  Also it doesn't use the exact code you posted.
<br /><a href="http://www.parodius.com/~memblers/nes/testmenu.zip" class="postlink">http://www.parodius.com/~memblers/nes/testmenu.zip</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>9</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>