<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>73</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 01, 2013 1:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If your metatiles are the same size as those of Super Mario Bros. series, then nametable 0 contains metatile columns 0-15, and nametable 1 contains metatile columns 16-31. Once the camera begins to advance toward the right, nametable 0 will fill up with columns 32-47, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Oct 01, 2013 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes I understand thanks! My RAMbuffer is now 16 pixels wide.<span style="color: #FF4000"> ... it seems easier to keep track of two buffers instead of 4.</span><br /><br /><span style="color: #FF4000">added. </span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Oct 04, 2013 3:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If your metatiles are the same size as those of Super Mario Bros. series, then nametable 0 contains metatile columns 0-15, and nametable 1 contains metatile columns 16-31. Once the camera begins to advance toward the right, nametable 0 will fill up with columns 32-47, etc.</div>  Ok so visible_left should be 16bit? My column 32 is 0 right now.  <span style="color: #00BFFF">...well no not 16bit... I'm not sure what to do. hmmmmmm...</span> <br /><br /><span style="color: #00BFFF">edit.</span><br />edit2: So, I need to store my value in visible_left after I divide ColumnX by 8...  How do I divide a 16 bit number by 8?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Oct 04, 2013 3:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To divide a number by 8, shift it to the right three times. For a 16-bit number it'll look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda num_lo<br />sta tmp0<br />lda num_hi<br />lsr a<br />ror tmp0<br />lsr a<br />ror tmp0<br />lsr a<br />ror tmp0</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Oct 04, 2013 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">To divide a number by 8, shift it to the right three times. For a 16-bit number it'll look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda num_lo<br />sta tmp0<br />lda num_hi<br />lsr a<br />ror tmp0<br />lsr a<br />ror tmp0<br />lsr a<br />ror tmp0</div></div><br /><br />like this:?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda CameraX+1<br />&nbsp; lsr<br />&nbsp; ror visible_left<br />&nbsp; lsr CameraX+1<br />&nbsp; ror visible_left<br />&nbsp; lsr CameraX+1<br />&nbsp; ror visible_left<br />&nbsp; <br />&nbsp; sta visible_left</div>  but my  column 32 is still 0...<br /><br />edit: Thank you so much tepples! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> It is nice to know that the carry will definitly keep track of the numbers... my code still says zero... but I'm gonna fix this.<br /><span style="color: #888888">edit2: I'm feeling proud of myself for trying and guessing correctly how to do this divide a 16bit number by 8.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> </span><br />edit3: Woah I should say that I'm probably wrong... I guessed correctly about the lsr and ror... but have just noticed you usse a different  variable at the top... why do you do that?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br />last edit: Ah yes, now it works great.  I understand now... thank you for allowing me enough time to figure this out. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Oct 10, 2013 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;/****************************************<br />next:&nbsp; ;me grab toward the next nametable column<br />;&nbsp; columnLo and columnHi are the address of the place to draw new columns<br />;****************************************/<br />&nbsp; ;name table0 ($2000)<br />&nbsp;; wait until the second nametable switch<br />&nbsp; <br />&nbsp; lda CameraX+0<br />&nbsp; lsr a<br />&nbsp; lsr a<br />&nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; shift right 3 times = divide by 8<br />&nbsp; sta columnLo ;instead of this dividing by 8... just add 2 to the previous value of columnLo...duh.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;well, adding 2 works fine until columnLo becomes &gt; 32... then it becomes very not good.<br />&nbsp; <br />&nbsp; lda currNameTable<br />&nbsp; and #$01<br />&nbsp; eor #$01&nbsp; &nbsp; &nbsp; ; invert low bit, A = $00 or $01<br />&nbsp; asl a&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; shift up, A = $00 or $02<br />&nbsp; asl a&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; $00 or $04<br />&nbsp; clc<br />&nbsp; adc #$20&nbsp; &nbsp; &nbsp; ; add high byte of nametable base address ($2000)<br />&nbsp; sta columnHi&nbsp; ; now address = $20 or $24 for nametable 0 or 1<br />&nbsp; <br />&nbsp; rts ;end of next</div>  This is just code from nerdy nights scrolling tutorial...  The problem I'm having is that it draws the next column in the next 16 bits... and then draws the next column 8 pixels over....<br /><br />screen looks like this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1111111112<br />1111111112<br />1111111112<br /></div><br />instead of this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1212121212<br />1212121212<br />1212121212<br /></div><br />How do I make it draw a column (each column is 16 pixels wide)... then skip 2 spaces and draw the next column?  Does this make sense?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Oct 21, 2013 9:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Im continuing  with this today... had other work to do till now.<br /><br />thought I would add that each 16 pixel column would look like this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">12<br />12<br />12<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">update_vram: ;testing... good sofar!<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $ff<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda my_copy_of_last_write_to_PPUCTRL<br />&nbsp; &nbsp;&nbsp; &nbsp;ora #00000100b&nbsp; ;change $2007 increment to +32<br />&nbsp; &nbsp;&nbsp; &nbsp;sta PPUCTRL0<br />&nbsp; &nbsp;&nbsp; &nbsp;sta my_copy_of_last_write_to_PPUCTRL<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda iBeginAtOne&nbsp; ;ahahahahahhahahahahahahahahaha!&nbsp; it works!!!&nbsp; :)<br />&nbsp; &nbsp;&nbsp; &nbsp;bne +end<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit PPUSTATUS2 ;&quot;And I did lda $2002 in this examples, but using bit lets you read it without changing A, so that's usually what you'd want to do.&quot; -Kasumi p. 70;<br />&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda #$20<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta PPUADDR6<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta PPUADDR6<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; tay<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ldx #58 ;58 ;should hold last even spot written to RAMbufferw0. both columns are always full so #58 and #59<br />&nbsp; &nbsp;&nbsp; &nbsp; -&nbsp; &nbsp;lda RAMbufferw0, x<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta PPUDATA7<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dex&nbsp; ;subtract 2 to stay in the even column<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; bpl -<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$20<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; sta PPUADDR6<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; sty PPUADDR6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldx #59;59 for the odd column<br />&nbsp; &nbsp;&nbsp; &nbsp; -&nbsp; &nbsp;lda RAMbufferw0, x<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta PPUDATA7<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dex&nbsp; ;stay in odd column<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; bpl -<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit PPUSTATUS2 ;&quot;And I did lda $2002 in this examples, but using bit lets you read it without changing A, so that's usually what you'd want to do.&quot; -Kasumi p. 70;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; lda #$20<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; sta PPUADDR6<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sty PPUADDR6<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tay<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldx #58 ;58 ;should hold last even spot written to RAMbufferw1. both columns are always full so #58 and #59<br />&nbsp; &nbsp;&nbsp; &nbsp; -&nbsp; &nbsp;lda RAMbufferw1, x<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta PPUDATA7<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dex&nbsp; ;subtract 2 to stay in the even column<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; bpl -<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; iny<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #$20<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; sta PPUADDR6<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; sty PPUADDR6<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx #59;59 for the odd column<br />&nbsp; &nbsp;&nbsp; &nbsp; -&nbsp; &nbsp;lda RAMbufferw1, x<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta PPUDATA7<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dex<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;dex&nbsp; ;stay in odd column<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; bpl -<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;jsr update_colors&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp;+end:&nbsp; &nbsp;rts ;end of update_vram.</div><br /><br />This ^ is what I have so far minus the commented lines of code... it's just too much code to put here.  I'm hoping that one of you can show me a way to draw each entire 16 pixel column... Each of them are specified in either RAMbufferw0 or RAMbufferw1.<br /><br />edit: Ok what I'm wanting seems to be help with my scrolling code. <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">scroll_screen:<br />;PPUCTRL Controller ($2000) &gt; write<br />;PPUMASK Mask ($2001) &gt; write<br />;PPUSTATUS Status ($2002) &lt; read<br />;OAMADDR address ($2003) &gt; write<br />;OAMDATA OAM data ($2004) &lt;&gt; read/write<br />;PPUSCROLL Scroll ($2005) &gt;&gt; write x2<br />;PPUADDR Address ($2006) &gt;&gt; write x2<br />;PPUDATA Data ($2007) &lt;&gt; read/write<br />&nbsp; sta $ff<br />&nbsp; lda CameraX+0<br />&nbsp; sta visible_left<br />&nbsp; lda CameraX+1<br />&nbsp; lsr a<br />&nbsp; ror visible_left<br />&nbsp; lsr a<br />&nbsp; ror visible_left<br />&nbsp; lsr a<br />&nbsp; ror visible_left<br />&nbsp; <br />&nbsp; <br />&nbsp; &nbsp;;if CameraX == 0<br />&nbsp; lda CameraX+0<br />&nbsp; bne +<br />&nbsp; &nbsp;lda currNameTable<br />&nbsp; &nbsp;eor #$01&nbsp; ;invert the nametable bit<br />&nbsp; &nbsp;sta currNameTable&nbsp; ;and make it current. :)<br />&nbsp; &nbsp;and #00000001b<br />&nbsp; &nbsp;beq +special<br />&nbsp; &nbsp;jmp +<br />&nbsp; &nbsp; +special: <br />&nbsp; &nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;&nbsp; &nbsp;sta iBeginAtOne<br /><br />&nbsp; +&nbsp; ;if oX &gt;= 128<br />&nbsp; sec&nbsp; &nbsp; &nbsp; ;Set Subtract. Clear Add.<br />&nbsp; lda oX+0<br />&nbsp; sbc #$80<br />&nbsp; bcc +skipincrem<br /><br />&nbsp; &nbsp; ;if player is pressing right<br />&nbsp; &nbsp;lda currControllerButtons<br />&nbsp; &nbsp; and #BUTTON_RIGHT<br />&nbsp; &nbsp; beq +skipincrem<br />&nbsp; &nbsp; <br /><br />&nbsp; &nbsp; &nbsp; ;lda CameraX+1<br />&nbsp; &nbsp;&nbsp; ;beq +<br />&nbsp; &nbsp; ; lda CameraX+0<br />&nbsp; &nbsp; ; sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Set subtract. Clear Add.<br />&nbsp; &nbsp; ; sbc #255<br />&nbsp; &nbsp; &nbsp;; bne +<br />&nbsp; &nbsp;&nbsp; &nbsp;;jsr camera_aim ; jsr next ;beq +skippingscroll<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;&nbsp; &nbsp;+ ;increment SCROLL position<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; lda CameraX+0<br />&nbsp; &nbsp;&nbsp; &nbsp; clc<br />&nbsp; &nbsp;&nbsp; &nbsp; adc #$01<br />&nbsp; &nbsp;&nbsp; &nbsp; sta CameraX+0<br />&nbsp; &nbsp;&nbsp; &nbsp; <br />&nbsp; &nbsp;&nbsp; &nbsp; lda CameraX+1<br />&nbsp; &nbsp;&nbsp; &nbsp; adc #$00<br />&nbsp; &nbsp;&nbsp; &nbsp; sta CameraX+1<br /><br /><br />&nbsp; +skipincrem:<br />&nbsp; &nbsp; lda #10001000b<br />&nbsp; &nbsp; sta currNameTable<br /><br />&nbsp; &nbsp; lda CameraX+1 ;get the high byte of the camera ((is #$ff in the start after reset) WHY?)<br />&nbsp; &nbsp;and #$01 ;keep only the lowest (first) bit<br />&nbsp; &nbsp;ora currNameTable ;combine with the other PPU settings<br />&nbsp; &nbsp;sta currNameTable ;this is what you'll write to $2000 when setting the scroll<br /><br />&nbsp; &nbsp; ; run other game graphic updating code here<br />&nbsp; &nbsp;;lda CameraX+0<br />&nbsp; &nbsp;;and #00000111b&nbsp; &nbsp; ; throw away higher bits<br />&nbsp; &nbsp;;bne +&nbsp; ; see if lower bits == 0<br /><br />&nbsp; &nbsp; <br />&nbsp; &nbsp;&nbsp; ;jsr draw_me_a_column<br /><br />+&nbsp; &nbsp;lda currNameTable<br />&nbsp; &nbsp; sta PPUCTRL0<br />&nbsp; &nbsp;sta my_copy_of_last_write_to_PPUCTRL<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;bit PPUSTATUS2&nbsp; ;&lt;reading $2002 resets both double write registers ($2005 and $2006) so that my first write will go to Xcoord.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda CameraX+0&nbsp; ; time to MOVE THE CAMERA OBJECT!<br />&nbsp; &nbsp;sta PPUSCROLL5&nbsp; &nbsp; &nbsp;; write the horizontal scroll count register<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp; &nbsp; &nbsp; ; (no vertical srolling)<br />&nbsp; &nbsp; sta PPUSCROLL5&nbsp; &nbsp; &nbsp;; set the vertical scroll<br /><br />&nbsp; rts ;end of scroll_screen<br /></div><br /> I want each entire 16 bit column to be drawn.  When the scrolling code scrolls the screen I still want it to look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1212121212<br />1212121212<br />1212121212<br /></div><br /><br /><span style="color: #FF0080"><span style="font-size: 150%; line-height: normal"><strong>edit2:  6:38PM NEVERMIND I GOTS IT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</strong></span></span> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Oct 22, 2013 8:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, so now here's what's next.  Right now I have a draw_me_a_column method that excellently draws one of the two 16pixelwide columns  <span style="color: #FF4000">RAMbufferw0</span> and <span style="color: #40BFFF">RAMbufferw1</span>.  It draws <span style="color: #40BFFF">RAMbufferw1</span> currently.  I want to be able to choose which buffer on the fly... like with pointers...<br /><br /><div class="quotetitle">tokumaru<span style="color: #00FF40">, on page 29,</span> wrote:</div><div class="quotecontent">A pointer is an address you can modify dynamically, so if you use pointers to access the data you can have the same code work with different sets of data just by modifying the pointer dynamically.</div>Excellent thanks again tokumaru!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I want my method to work with both sets of data (<span style="color: #FF4000">RAMbufferw0</span> and <span style="color: #40BFFF">RAMbufferw1</span>).  In this thread, on <a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451&amp;start=45" class="postlink">page 4</a>, yall discussed pointer tables... I do think my pointers situation isn't as complex as pointer tables.  Maybe I could use them... I'm don't know right now.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  <br /><br /><div class="quotetitle">Kasumi<span style="color: #FF00FF">, on page 31,</span> wrote:</div><div class="quotecontent"><span style="color: #BF40FF">6502 assembly isn't &quot;type safe&quot; like C is.</span> What this means is your program/assembler doesn't know or care what you are using your variables for. C will actually fix how operations work on a variable based on what you're using that variable for. For instance, pointer++; could increase the address the pointer is holding by 1, 2 or any other number depending on how large the type of data is that the pointer is supposed to point to. Assembly doesn't care, so it's up to you to keep track.</div>  Now I'm scared to mess around with pointers in 6502 assembly. <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  <br /><br />So please could you help me figure these pointers out?  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  <span style="color: #FF80BF">I'm susposed to use the addressing mode </span><span style="color: #BF0080">(), y</span><span style="color: #FF80BF"> to access the pointers; however, I don't know how to write the pointer code out... my brain is dead right now sorry.</span><br /><br /><span style="color: #FF80BF">edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Oct 26, 2013 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">I want to be able to choose which buffer on the fly... like with pointers...<br /><br /><div class="quotetitle">tokumaru<span style="color: #00FF40">, on page 29,</span> wrote:</div><div class="quotecontent">A pointer is an address you can modify dynamically, so if you use pointers to access the data you can have the same code work with different sets of data just by modifying the pointer dynamically.</div></div><br /><br />tokumaru, you mention that the pointer should be modified dynamically twice, could you show me an example of &quot;modifying the pointer dynamically&quot;?  Dictionary.com says, &quot;Dynamic memory must be constantly refreshed to avoid losing data.&quot;  &quot;...constantly refreshed&quot; confuses me. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sat Oct 26, 2013 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">tokumaru, you mention that the pointer should be modified dynamically twice, could you show me an example of &quot;modifying the pointer dynamically&quot;?</div>Modifying the pointer dynamically just means setting it to different values before calling the function. For example, the pointer might be stored in the zero page, and the function would do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda (pointer), Y<br /></div><br />Before calling the function that uses the pointer, you'd have to put a value into the pointer.<br /><s><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #&gt;RAMbufferw0<br />sta pointer<br />lda #&lt;RAMbufferw0<br />sta pointer+1<br />jsr function_that_uses_the_pointer</div></s>Edit: Let me try that again...<div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #&lt;RAMbufferw0<br />sta pointer<br />lda #&gt;RAMbufferw0<br />sta pointer+1<br />jsr function_that_uses_the_pointer<br /></div>The &quot;dynamic&quot; part is the fact that you can set the pointer to different values each time you call the function.<br /><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Dictionary.com says, &quot;Dynamic memory must be constantly refreshed to avoid losing data.&quot;  &quot;...constantly refreshed&quot; confuses me. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div>It sounds similar, but &quot;dynamic memory&quot; has nothing to do with &quot;dynamically modifying memory&quot;. Don't worry; you don't have to constantly refresh anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Oct 26, 2013 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Joe is correct, you just have to make your pointers point to the location you want to read/write before you do any reading/writing. The address is &quot;dynamic&quot; because it can be changed, it's not fixed like is the case with absolute addressing.<br /><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Dictionary.com says, &quot;Dynamic memory must be constantly refreshed to avoid losing data.&quot;  &quot;...constantly refreshed&quot; confuses me. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div><br />This is a hardware detail (that &quot;constant refreshing&quot; is performed by the hardware itself in machines that need it) that has nothing to do with what you're doing now, so don't worry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Oct 26, 2013 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">tokumaru, you mention that the pointer should be modified dynamically twice, could you show me an example of &quot;modifying the pointer dynamically&quot;?</div>Modifying the pointer dynamically just means setting it to different values before calling the function. For example, the pointer might be stored in the zero page, and the function would do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda (pointer), Y<br /></div><br />Before calling the function that uses the pointer, you'd have to put a value into the pointer.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #&gt;RAMbufferw0<br />sta pointer<br />lda #&lt;RAMbufferw0<br />sta pointer+1<br />jsr function_that_uses_the_pointer<br /></div>The &quot;dynamic&quot; part is the fact that you can set the pointer to different values each time you call the function.<br /><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Dictionary.com says, &quot;Dynamic memory must be constantly refreshed to avoid losing data.&quot;  &quot;...constantly refreshed&quot; confuses me. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div>It sounds similar, but &quot;dynamic memory&quot; has nothing to do with &quot;dynamically modifying memory&quot;. Don't worry; you don't have to constantly refresh anything.</div>Thank you Joe! Thanks for the example code! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> In my opinion now, it seems that your pointer would be created backwards with the switched &gt;&lt; signs.  The low byte should be stored first... then the high byte.  That's what I've learned so far I think.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Joe is correct, you just have to make your pointers point to the location you want to read/write before you do any reading/writing. The address is &quot;dynamic&quot; because it can be changed, it's not fixed like is the case with absolute addressing.<br /><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Dictionary.com says, &quot;Dynamic memory must be constantly refreshed to avoid losing data.&quot;  &quot;...constantly refreshed&quot; confuses me. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div><br />This is a hardware detail (that &quot;constant refreshing&quot; is performed by the hardware itself in machines that need it) that has nothing to do with what you're doing now, so don't worry.</div>Ok thanks tokumaru! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Joe and tokumaru and everyone else please forgive me... I've not achieved anything yet... it will take some time tomorrow... I have to think all of this over.  Goodnight everyone. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sat Oct 26, 2013 11:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">In my opinion now, it seems that your pointer would be created backwards with the switched &gt;&lt; signs.  The low byte should be stored first... then the high byte.  That's what I've learned so far I think.</div>Whoops! Good catch! <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><br /><br />Let me just edit my post...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Oct 29, 2013 3:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples<span style="color: #FF0080">, on pg 69,</span> wrote:</div><div class="quotecontent">Depending on how you organize the map data, you may have to either draw two columns at once like <em>Super Mario Bros.</em> and <em>Contra</em> or store enough information to regenerate the attributes for the column that you're updating.</div>  .......so when drawing two columns at once... you have to wait on the columns to enter the rightmost attribute table spot before coloring them?  That would be kind of odd.  While playing <em>Super Mario Bros.</em> there wasn't any flickering of the last two columns that I could see.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 29, 2013 4:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">so when drawing two columns at once... you have to wait on the columns to enter the rightmost attribute table spot before coloring them?  That would be kind of odd.  While playing <em>Super Mario Bros.</em> there wasn't any flickering of the last two columns that I could see.</div><br />Momentary miscoloring occurs at the seam. <em>Super Mario Bros.</em> arranges its nametables horizontally (&quot;vertical mirroring&quot;), letting it keep the seam offscreen. Go play <em>Super Mario Bros. 3</em> once if you want to see color artifacts. <em>SMB3</em> uses two vertically arranged nametables (&quot;horizontal mirroring&quot;) for a 27-metatile-tall playfield plus status bar at the cost of miscoloring the tiles at the far right.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>73</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>