<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=7280" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-12-16T19:19:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=7280</id>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2010-12-16T19:19:09-07:00</updated>
<published>2010-12-16T19:19:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71594#p71594</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71594#p71594"/>
<title type="html"><![CDATA[Forwarded question: Could a tracker &quot;import&quot; an NS]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71594#p71594"><![CDATA[
The tracker "import" function that I implemented in NESICIDE (Windows version, not Qt version yet) simply interpreted APU register writes at the framerate of the PPU.  This worked pretty well just to get notes into the tracks...but didn't do anything toward optimizing the tracks based on repeated sequences or anything like that.  However, my thought was you could use that method to rip music directly from the running emulator.  This would get you a rudimentarily tracked "NSF" or even some in-game music if you used it to track the intro music of Zelda for example.  Then, to take that one step further the plan would be to have a back-end tracker worker thread that optimized the tracks and created something akin to what a person might create when tracking the music from scratch.  Ie. "repeat order 0 of track 5 indefinitely because there's no DMC samples".<br /><br />Unfortunately since people like neilbaldwin <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> are blazing trails with 240Hz tracking my method wouldn't support that, but one can see that it potentially could if it just kept track of APU state at some multiple of PPU framerate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Thu Dec 16, 2010 7:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-12-16T17:14:50-07:00</updated>
<published>2010-12-16T17:14:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71590#p71590</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71590#p71590"/>
<title type="html"><![CDATA[Forwarded question: Could a tracker &quot;import&quot; an NS]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71590#p71590"><![CDATA[
There was this NSF2Midi program that used user-specified threshholds to try to find instruments.  Something similar could possibly be made to guess the envelopes, then guess which instrument the song is using, then reconstruct a tracker/midi version of the song.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Dec 16, 2010 5:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2010-12-16T08:22:33-07:00</updated>
<published>2010-12-16T08:22:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71560#p71560</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71560#p71560"/>
<title type="html"><![CDATA[Re: Forwarded question: Could a tracker &quot;import&quot; a]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71560#p71560"><![CDATA[
<div class="quotetitle">Gradualore wrote:</div><div class="quotecontent"><br />I received this question on another forum: Could Famitracker (or any tracker) import an NSF file?<br /><br />As I currently understand it, an NSF basically is a music engine + data. The NSF file format tells an emulator where to find the init and playback code. Therefore, someone could write an NSF from scratch with a new music engine and new data, correct?<br /></div><br /><br />Yes.  I'm not 100% on this but I think I read somewhere that Sivak released a Battle Kid NSF that was just him assembling only the sound engine portion of his game code.  Even if that's not the case, you could do that easily.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So, in order to import an NSF, a tracker would have to recognize every sound engine that's out there and interpret the data correctly. I don't have enough experience with NES music to know just how many NSF music engines might be in existence. My guess is that there are probably dozens, and maybe some for which the source code has been lost.<br /></div><br /><br />Yes.  Pretty much every company wrote their own sound engine so there would be dozens.  And it's also likely that companies expanded/rearranged their own sound engines as time went on, so that the music engine for Mega Man 2 would be close but not exactly the same as that for Mega Man 4.  I'm not familiar with the sound engine for Mega Man games btw, just using that as a hypothetical example (they may be exactly the same or completely different for all I know).  I don't know if the source code is available for any of them, but you can disassemble the ROMs and get it that way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I also suggested that you could run an NES emulator under the hood and collect all writes to the sound registers, and then "reverse engineer" volume, pitch, and duty envelopes, but it might be difficult to tell whether these are new envelopes or an envelope + application of an effect. The results would be imperfect.<br /></div><br /><br />This seems more practical to me.  Bad case scenario you get the right notes spaced correctly and some approximate envelopes.  Best case (simple engines) you could import the song successfully.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Thu Dec 16, 2010 8:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2010-12-16T08:07:13-07:00</updated>
<published>2010-12-16T08:07:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71559#p71559</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71559#p71559"/>
<title type="html"><![CDATA[Forwarded question: Could a tracker &quot;import&quot; an NS]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71559#p71559"><![CDATA[
There could be infinute number of music engines. One company could use one engine, but it evolves from game to game, with both minor and major changes. Also, designs of the engines and trackers could be very different, so capabilites of a tracker just isn't cover capabilites of an engine. Source code of most of the engines is lost or never will be public. So generally you can consider NSF import impossible. Of course, you always can reversee-engineer certain engine to get music data, if you really need to, but it has nothing to do with NSF format, you just take binary and work with it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Thu Dec 16, 2010 8:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-12-16T07:44:21-07:00</updated>
<published>2010-12-16T07:44:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71556#p71556</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71556#p71556"/>
<title type="html"><![CDATA[Forwarded question: Could a tracker &quot;import&quot; an NS]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7280&amp;p=71556#p71556"><![CDATA[
I received this question on another forum: Could Famitracker (or any tracker) import an NSF file? <br /><br />As I currently understand it, an NSF basically is a music engine + data. The NSF file format tells an emulator where to find the init and playback code. Therefore, someone could write an NSF from scratch with a new music engine and new data, correct?<br /><br />So, in order to import an NSF, a tracker would have to recognize every sound engine that's out there and interpret the data correctly. I don't have enough experience with NES music to know just how many NSF music engines might be in existence. My guess is that there are probably dozens, and maybe some for which the source code has been lost. So, while I think it may be *possible* to import NSFs provided you can learn enough about what engine is in the NSF, the feature would appear broken to many users until *every* music engine has been supported. And then, any new music engines written with new data would again break the feature until a new importer was written for it. This forces me to ask: Would it be worth it? I don't think so.<br /><br />I also suggested that you could run an NES emulator under the hood and collect all writes to the sound registers, and then "reverse engineer" volume, pitch, and duty envelopes, but it might be difficult to tell whether these are new envelopes or an envelope + application of an effect. The results would be imperfect.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Thu Dec 16, 2010 7:44 am</p><hr />
]]></content>
</entry>
</feed>