<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Yet another reason to not use NESASM: Label length limit</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Yet another reason to not use NESASM: Label length limit</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8116">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8116</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 13, 2011 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Instead of writing the "hands down best assembler", I actually feel like writing the "hands down best tutorial", that doesn't use NESASM. I really think that the only reason NESASM has a strong following is because it's used in popular tutorials. Once people get their first programs working with it, they see no reason to switch assemblers.
<br />
<br />But it's a fact that NESASM has a number of troublesome bugs, which have already been discussed to death in this forum, and thefox just found another one. Can it be used to make great games? Sure it can. Even an hex editor can be used to make great games, but that doesn't necessarily make it a good tool for the job.
<br />
<br />I think that a good tutorial introducing another assembler could change this, because people wouldn't get attached to NESASM in the first place. I'm not sure which assembler would be the best one though. Even though I'm an ASM6 fan, I don't go around yelling that it's the best thing ever, and I can admit that there are other good assemblers out there, even though I don't use them, unlike 3gengames who blindly defends NESASM just because that's all he can use. Saying things like "NESASM&gt;ASM6" just because you can't get a program to do what you want is stupid.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Tue Sep 13, 2011 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Instead of writing the "hands down best assembler", I actually feel like writing the "hands down best tutorial", that doesn't use NESASM. I really think that the only reason NESASM has a strong following is because it's used in popular tutorials. Once people get their first programs working with it, they see no reason to switch assemblers.<br /></div>
<br />This is why I started putting together example projects for NESICIDE based on CC65-compilable ROMs that tepples and Shiru have put together.  I don't know where clueless is regarding public release of his Yars Revenge port--but if it were ever to be released there's a NESICIDE project already for it.  So there's already two great games and three or more great minimalist demo projects from tepples.
<br />
<br />Unfortunately I'm not able to focus long enough to get a good textual tutorial put together.  I was hoping to generate some progression of tutorials based on a similar progression of example projects.  Then we could write the "Teach Yourself NES Programming in 21 Days" book and have it come with a CD full of projects to be used to learn each day's concept and expand upon prior days concepts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Sep 13, 2011 3:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For being beaten to death, I still know of 0 bugs in the current version of NESASM.
<br />
<br />
<br />And yeah, you can stay on your assembler. But I like the way NESASM3 works, syntax, etc. If +/- labels could be added and a new assembler that worked like that but just something different? I mean, like I said, how hard it is to write an assembler?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 13, 2011 3:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">I still know of 0 bugs in the current version of NESASM.</div><br />This thread is about a bug, so the fact that you are posting in it means you know of at least one. Whether it affects you or not doesn't change the fact that it exists.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And yeah, you can stay on your assembler.</div>
<br />Sure I can, and so can you. That's the good thing about free will. But I'm pretty sure that you didn't pick NESASM because you tried many assemblers and came to the conclusion that it was the best. You probably followed someone's suggestion (in a tutorial or not) or just went with the one you were able to get working first, and are stuck with it since.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Sep 13, 2011 3:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Label limitation is a bug? News to me. It's just a limitation. [To the OP.]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Tue Sep 13, 2011 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Label lenght limitation is surely not a bug, it is a limitation. Old assemblers had it way more strict, like 8 or even less symbols in a label.
<br />
<br />Despite I've asked people about bugs in NESASM and searched in the forum, no one reported anything certain. The info was like 'someone had a bug long ago', that's it. I personally found just one actual bug, and it was a minor one:
<br />
<br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">A NESASM bug finally was noticed by me in this project. It does not report ROM overflow in some cases, producing not working ROM without any warnings. If you move some data around, it starts to show an error.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Tue Sep 13, 2011 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">I mean, like I said, how hard it is to write an assembler?</div>
<br />
<br />I answered on the previous page...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Sep 13, 2011 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Label lenght limitation is surely not a bug, it is a limitation. Old assemblers had it way more strict, like 8 or even less symbols in a label.<br /><br />Despite I've asked people about bugs in NESASM and searched in the forum, no one reported anything certain. The info was like 'someone had a bug long ago', that's it. I personally found just one actual bug, and it was a minor one:<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">A NESASM bug finally was noticed by me in this project. It does not report ROM overflow in some cases, producing not working ROM without any warnings. If you move some data around, it starts to show an error.</div></div>
<br />
<br />Yes, and now if you go outside a bank at all it'll throw errors of all the outside instructions. So technically that's been fixed.
<br />
<br />And, okay cpow. I don't see how any part of it would be. And I only said javascript because I've found text handling in C to be a bitch. And then marking labels to points in the ROM and seeing if they've already been declared. Do you just make on big ass text array of all labels pre defined and check for if two equal and are being declared in one loop looking up a huge array of text variables? Honestly, I think everything else would be dead simple except that one functionality detail. If the community wants a better assembler, we have the knowledge and ability to do it, I'd happily do my best to help with it. In fact, if I can get Dev-C++ on my computer at school, I'll try my best at it, as I need to learn C more anyway. Don't really have much left to say except you guys should probably use NESASM. I think you'd change opinions. Whoever says it's a BAD assembler is just dwelling on the past.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 13, 2011 4:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent"> only said javascript because I've found text handling in C to be a bitch. And then marking labels to points in the ROM and seeing if they've already been declared. Do you just make on big ass text array of all labels pre defined and check for if two equal and are being declared in one loop looking up a huge array of text variables?</div>
<br />No, you borrow an existing hash table or aatree implementation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Tue Sep 13, 2011 6:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">And, okay cpow. I don't see how any part of it would be. And I only said javascript because I've found text handling in C to be a bitch. <br /></div><br /><br />That's why I suggested one of the widely-available compiler-generators.  They do the majority of the text handling for you.  But you have to create your own symbol table, etc.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">And then marking labels to points in the ROM and seeing if they've already been declared. Do you just make on big ass text array of all labels pre defined and check for if two equal and are being declared in one loop looking up a huge array of text variables? Honestly, I think everything else would be dead simple except that one functionality detail. <br /></div><br /><br />A symbol table is more, much more, than a "big ass text array of all labels".<br /><br />There seems to be a giant rug you're sweeping "everything else" under.  Expression evaluation?  Optimizations (addressing mode promotions, etc.)?  Macros?  Enumerations?  Segments (for banking)?  File inclusion directives?<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">If the community wants a better assembler, we have the knowledge and ability to do it, I'd happily do my best to help with it. <br /></div><br /><br />I agree with Tokumaru.  We don't need more assemblers, we just need a comprehensive tutorial package using the best assembler available.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">In fact, if I can get Dev-C++ on my computer at school, I'll try my best at it, as I need to learn C more anyway. Don't really have much left to </div>
<br />
<br />Writing the "hands down best assembler" probably isn't the second project you'll want to tackle on your path to learning C.  Start with "hello world"...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Sep 13, 2011 7:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I only use + and - labels for labels within a routine. I find myself using a lot of ++ and +++ labels as well, but it's not hard to manage. I also have my code organized fairly well (or at least I try), so finding a label isn't hard. Everything falls into "Code" or "Data". Within "Code", I have all code separated by game mode, so that's either like "TitleScreen", "Cutscene", "Game", etc. It's the same with Data, too. Then within those categories, everything is categorized into even smaller subcategories until you reach an individual object or routine. So this label:
<br />
<br />Data.Cutscene.IntroScene.Frame1.SpriteMap
<br />
<br />Points to the sprite map of "frame 1" in the "intro scene", which is categorized under the "cutscene" group of the data section. Using this notation really helps organizing everything so you don't have some label like "loadsprites" or something ambiguous.
<br />
<br />Looking at this, I see I will definitely stay away from NESASM, as there is no way in hell it would tolerate that label.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 13, 2011 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Label lenght limitation is surely not a bug, it is a limitation.</div>
<br />Fine, it's not a bug. An undocumented limitation is as annoying as a bug though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Sep 13, 2011 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">And I make long and descriptive labels, but still, those are stupid long.<br /><br />And anyway, I'm sure it wouldn't be hard to make the labels be longer.<br /></div><br />My labels in this case were in this form (computer generated):<br /><br />&lt;prefix&gt;_&lt;name of the song&gt;_chnX_orders<br /><br />I don't think this is stupid long. 32 is a stupid limit for a label name, something like 256 I could understand, but 32 is too short. Even in that case the assembler should give a warning, not just cut the string like nothing happened.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think it's time that someone, maybe myself, just bite the bullet and make the hands down best assembler. It'd be good for somebody like me learning the instruction set better. Anyone have insight about how hard it is to making an assembler compared to a game? I suck at C though, if I did it it'd probably be in javascript. :/</div><br />Good luck with that. CC65/CA65 has been in development over 10 years, and still has a ways to go.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">And trust me , +/- labels are very important, because it's impossible to find a new name for every small inner loop of your programs.</div><br />In CA65 this isn't super important, because you can wrap your subroutines in .proc/.endproc:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc doStuff<br />&nbsp; foo:<br />&nbsp; &nbsp; nop<br />&nbsp; &nbsp; jmp foo<br />.endproc<br /><br />.proc doOtherStuff<br />&nbsp; foo:<br />&nbsp; &nbsp; nop<br />&nbsp; &nbsp; jmp foo<br />.endproc<br /></div><br />The above code compiles fine, and the labels inside the .proc can be also accessed outside with doStuff::foo and doOtherStuff::foo. If you need to use the same label more than once inside the subroutine, you can wrap that part of the code in .scope/.endscope (anonymous or named, however you like it).<br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I wrote 10K+ lines of code with NESASM and had no problems with lack of long labels and +/- labels. So NESASM isn't that bad, or any bad, actually.</div><br />It isn't bad by itself, but compared to the best assemblers.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">And yes, I don't think people that don't use it should say anything. Use NESASM3 for one full game and then I'd probably allow you to smash it for being the worst thing ever.</div><br />I actually used it for the first time since reading the GBAGuy tutorials when I was getting started 5-6 years ago. It didn't take me more than half an hour to stumble on this bug, which I don't think is a good sign.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">For being beaten to death, I still know of 0 bugs in the current version of NESASM.</div><br />It is not just about bugs (besides, our definition of what's considered a bug clearly is different). It's about things like having to use non-standard syntax for indirect addressing (lda [foo], y), having to manually use &lt; to signify zero page addressing (lda &lt;foo), inconsistent syntax (lda &lt;foo works, but ".byte &lt;foo" doesn't), and yes, label limitations.<br /><br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">Don't really have much left to say except you guys should probably use NESASM. I think you'd change opinions. Whoever says it's a BAD assembler is just dwelling on the past.</div>
<br />Like I said, NESASM isn't that bad by itself, but why use it when there are far better alternatives available.
<br />
<br />EDIT: Noticed a missing parenthesis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Sep 13, 2011 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The label limitation thing is something I would classify as a "bug". Why? Because NESASM is incorrectly telling you that the same label has been defined twice rather than telling you the label is simply too long for it to handle.
<br />
<br />And making an assembler with all the currently supported features around is super hard. These are just some things that you'll need to support:
<br />
<br />If statements/for loops
<br />Data defined by logic
<br />Inline arithmetic
<br />Macros (that accept arguments too)
<br />File inclusion
<br />Nameless labels
<br />Defining and Undefining label names
<br />
<br />For a slightly ridiculous example, you need to support something similar to the following code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.DEFINE ArrayInRAM $500 + 31 + %00000001<br /><br />.DEFINE Sane 0<br />.DEFINE Insane sin&#40;90&#41;<br /><br />.DEFINE Programmer Insane<br /><br />.IF Programmer == Sane<br /><br />.DEFINE TempVar $21<br /><br />&nbsp; &nbsp;sta TempVar<br />&nbsp; &nbsp;<br /><br /><br /><br />.ELSEIF Programmer != NOT&#40;Insane&#41;<br /><br /><br />.DEFINE someVariableThatsReallyReallyLongAndShouldBeSeenAsNonZeroPage $0021<br />.DEFINE Plus4 4<br /><br />&nbsp; &nbsp;sta &#40;someVariableThatsReallyReallyLongAndShouldBeSeenAsNonZeroPage + &#40;Plus4 /2 - sin&#40;89&#41;&#41;&#41;<br /><br /><br />.ENDIF<br /><br /><br />.UNDEFINE Sane, Insane, Programmer<br /><br />&nbsp; &nbsp;jmp +<br />++<br />-<br />&nbsp; &nbsp;rts<br />+<br />&nbsp; &nbsp;CopyArray Table1, ArrayInRAM, 128<br />&nbsp; &nbsp;beq -<br /><br />Table1:<br />&nbsp; &nbsp;for&#40;x=0;x&lt;90;x++&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;.db x<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;.incbin &quot;../Data/Tables/file.bin&quot;<br /><br />.MACRO CopyArray ARGS PointerA, PointerB, NumOfBytes<br />&nbsp; &nbsp;ldx #NumOfBytes<br />-<br />&nbsp; &nbsp;lda PointerA, x<br />&nbsp; &nbsp;sta PointerB, x<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;bne -<br />.ENDMACRO<br /></div>
<br />
<br />People do things in code you wouldn't think need to be supported. For example, some people might want to load a value in ZP with the lda #$XXXX instruction, which takes 1 more byte and 1 more cycle. Oh, and don't forget trigonometry! Sin, Cosine, and Tangent functions should be available, with options to convert the resulting values to 8 or 16 bits.
<br />
<br />Then there's the thing of nameless labels inside of macros. When someone does a - inside a macro, anything outside of that macro should ignore that - sign. I'm pretty sure WLA doesn't even support this.
<br />
<br />There are just so many things to think about when going into developing an assembler that people will like to use. It seems not-too-hard at first, but yeah. After a while you'll probably find yourself right-clicking on that project folder, clicking "delete", and starting over because it became too much of a mess.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Sep 13, 2011 9:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Anybody want to guess what binary is produced by NESASM v3.1 with the following code (I'm guessing this is the same bug/feature that Shiru mentioned):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; .bank 0<br />&nbsp; &nbsp; .org $8000<br />&nbsp; &nbsp; .byte 1, 2, 3, 4<br />&nbsp; &nbsp; .org $A000<br />&nbsp; &nbsp; .byte 5, 6, 7, 8<br /></div><br />---<br /><br />Naturally, the result is 8K of code (+ the iNES header) with the following contents:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">05 06 07 08 FF FF FF FF ... &#40;FF padding to 8K&#41;<br /></div>
<br />
<br />Q.E.D.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>