<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - STA indirect indexed double-increments PPU address?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">STA indirect indexed double-increments PPU address?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9407">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9407</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Tue Oct 16, 2012 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">STA (xx),Y adds a dummy read.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch pointer address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; pointer&nbsp; &nbsp; R&nbsp; fetch effective address low<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; &nbsp;pointer+1&nbsp; &nbsp;R&nbsp; fetch effective address high,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;add Y to low byte of effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 5&nbsp; &nbsp;address+Y*&nbsp; R&nbsp; read from effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fix high byte of effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; &nbsp;address+Y&nbsp; &nbsp;W&nbsp; write to effective address<br /></div><br />They did it this way in case they needed to fix up the high byte before performing a write, because they figured that reads wouldn't have side effects like writes would.</div><br /><br />Trying to think of a need that can abuse this where you'd want interleaved writes to CIRAM   <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Oct 16, 2012 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />DMC will still screw with the read.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Oct 16, 2012 11:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">Trying to think of a need that can abuse [extra read] where you'd want interleaved writes to CIRAM   <img src="./images/smilies/icon_twisted.gif" alt=":twisted:" title="Twisted Evil" /></div><br />As I remember, the behavior depended on the CPU-PPU clock alignment at power, that it wasn't reliably the same each time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Tue Oct 16, 2012 2:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">STA (xx),Y adds a dummy read.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp; &nbsp;R&nbsp; fetch pointer address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; pointer&nbsp; &nbsp; R&nbsp; fetch effective address low<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; &nbsp;pointer+1&nbsp; &nbsp;R&nbsp; fetch effective address high,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;add Y to low byte of effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 5&nbsp; &nbsp;address+Y*&nbsp; R&nbsp; read from effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fix high byte of effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; &nbsp;address+Y&nbsp; &nbsp;W&nbsp; write to effective address<br /></div><br />They did it this way in case they needed to fix up the high byte before performing a write, because they figured that reads wouldn't have side effects like writes would.</div><br />That's... pretty stupid, couldn't they have made it so that the bus was left unused in that 5th cycle? Pretty sure that reads with side-effects were already common when the 6502 was first designed =/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Oct 16, 2012 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">couldn't they have made it so that the bus was left unused in that 5th cycle?</div><br />I'm sure they did everything they could to keep costs down when designing the 6502, so you can be certain that this decision was made to reduce the number of transistors.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Pretty sure that reads with side-effects were already common when the 6502 was first designed =/</div><br />Yes, but they probably assumed that the more exotic addressing modes wouldn't be commonly used to access memory-mapped registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Tue Oct 16, 2012 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Sik wrote:</div><div class="quotecontent">couldn't they have made it so that the bus was left unused in that 5th cycle?</div><br />I'm sure they did everything they could to keep costs down when designing the 6502, so you can be certain that this decision was made to reduce the number of transistors.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Pretty sure that reads with side-effects were already common when the 6502 was first designed =/</div><br />Yes, but they probably assumed that the more exotic addressing modes wouldn't be commonly used to access memory-mapped registers.</div><br /><br />Or auto incrementing single address FIFOs.  This is both the fault of the 6502 and the PPU combined, not just the 6502. <br />This exact combination of CPU, addressing mode, and PPU port is like winning the lottery or something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Oct 16, 2012 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">This exact combination of CPU, addressing mode, and PPU port is like winning the lottery or something.</div><br />Don't forget I also did it by discovering a compiler bug!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Tue Oct 16, 2012 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It wasn't a bug, it's what you wrote <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> cc65 did exactly what you told it to.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 16, 2012 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Subscripting in C is <a href="http://jzhangcomm.wordpress.com/2010/07/02/array-subscripting-is-commutative-in-c/" class="postlink">commutative</a>. If the code that a compiler generates for a[b], b[a], and *(a+b) differs with optimization turned on, then either A. the compiler is Doing It Wrong with respect to efficiency of commutative operations in general or B. you are coding in C++ and have overloaded some operator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Oct 16, 2012 4:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or C, the optimizer is simplistic and takes advantage of the fact that most people write array[n] instead of n[array]. That is, it generates better code for most array expressions, and that's good enough. Handling it fully generally would be more work just for obscure cases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Oct 16, 2012 4:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Subscripting in C is <a href="http://jzhangcomm.wordpress.com/2010/07/02/array-subscripting-is-commutative-in-c/" class="postlink">commutative</a>. If the code that a compiler generates for a[b], b[a], and *(a+b) differs with optimization turned on, then either A. the compiler is Doing It Wrong with respect to efficiency of commutative operations in general or B. you are coding in C++ and have overloaded some operator.</div><br /><br />The problem here is there's a difference between array[7] and pointer[7]. One of them has a fixed address at compile/link time, and one of them needs to be resolved by extra code. cc65 normally correctly identifies these two types, and does generate different code for the array (absolute) and pointer variable (indirect indexed). This is neither incorrect, nor undesired, and does not require optimization to be turned on.<br /><br />In the ((unsigned char*)0)[7] example, it is compiled as if this literal is cast to a pointer variable, rather than an array, and does all the things associated with such a thing. Yes, all arrays can be generically considered pointer variables, but that is a generalization which would generate a lot more (bigger/slower) code than necessary. This isn't really part of the optimization process; this is a problem further up the pipe. If the type is misidentified, you can't optimize away the indirection.<br /><br />Anyhow, I'll report this to the cc65 mailing list, since someone on the project might be interested in fixing this problem. If not, we've covered a few ways to avoid it already. This was just a case of very poor code generation, which I do consider a bug, but I've no wish to argue the semantics of what should or should not be classified a bug. Yes the code is correct (when the extra read has no side-effect), but it's also slow as hell compared to what it could be.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Wed Oct 17, 2012 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: STA indirect indexed double-increments PPU address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just remembered <a href="http://codebase64.org/doku.php?id=base:how_real_programmers_acknowledge_interrupts#with_branch_instructions" class="postlink">this quirk</a> of the 6502. More specifically:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; When an NMI occurs, the processor jumps to Kernal code, which jumps to<br />&nbsp; &nbsp; &nbsp; &nbsp; ($0318), which points to the following routine:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; DD09&nbsp; &nbsp; LSR $40&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear N flag<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BPL $DD0A&nbsp; &nbsp; &nbsp; &nbsp;; Note: $DD0A contains RTI.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; Operational diagram of BPL $DD0A:<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; data&nbsp; address&nbsp; R/W&nbsp; description<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--- ----&nbsp; -------&nbsp; ---&nbsp; ---------------------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp;10&nbsp; &nbsp; $DD0B&nbsp; &nbsp; R&nbsp; &nbsp;fetch opcode<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp;11&nbsp; &nbsp; $DD0C&nbsp; &nbsp; R&nbsp; &nbsp;fetch argument<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp;xx&nbsp; &nbsp; $DD0D&nbsp; &nbsp; R&nbsp; &nbsp;fetch opcode, add argument to PCL<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; &nbsp;40&nbsp; &nbsp; $DD0A&nbsp; &nbsp; R&nbsp; &nbsp;fetch opcode, (fix PCH)</div><br />Not to mention all the spurious accesses that can happen everywhere when crossing pages (lower byte is updated in a different cycle than the higher byte but the bus is still taken by the processor). Yeah, it's a mess. Looks like they literally assumed reads would never have side effects.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Subscripting in C is <a href="http://jzhangcomm.wordpress.com/2010/07/02/array-subscripting-is-commutative-in-c/" class="postlink">commutative</a>. If the code that a compiler generates for a[b], b[a], and *(a+b) differs with optimization turned on, then either A. the compiler is Doing It Wrong with respect to efficiency of commutative operations in general or B. you are coding in C++ and have overloaded some operator.</div><br />The standard doesn't require compilers to generate the most optimal code, only to ensure the final results are correct =P Though one could argue that the 6502 quirk here prevents it from being correct... (though we're starting to enter the realm of platform-specific hacks).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>