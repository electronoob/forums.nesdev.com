<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=3607" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-09-27T07:20:41-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=3607</id>
<entry>
<author><name><![CDATA[albailey]]></name></author>
<updated>2007-09-27T07:20:41-07:00</updated>
<published>2007-09-27T07:20:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3607&amp;p=27239#p27239</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3607&amp;p=27239#p27239"/>
<title type="html"><![CDATA[Question about setting up CA65 for bank switching]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3607&amp;p=27239#p27239"><![CDATA[
I've been using CA65 for almost a year now.  MY first game ws NROM which was failrly easy to setup in terms of the code and linker files.<br /><br />Now I am checking out UNROM.   I've goten things setup and working, but it just feels like a kludge.<br /><br />I was thinking I would show what I have, and let people share their opinions on a cleaner approach to organizing and assembling multiple PRG banks with CA65.<br /><br />Basically here's what I did. I have 8 PRG banks (its UNROM) so I setup 8 PRG memory segments in the linker file.  Then to enforce that each segment would actually be $4000 in size, I declared a start and end segment for each in the SEGMENTS section.  Then in my individual .asm files (one per PRG bank)  the first line declared the segment start and the last the segment end.  (I also added some extra segments for the fixed PRG bank related to vectors, etc..)<br /><br />Here's the linker file:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY &#123;<br />  PRG0:  start = $8000, size = $4000, type = ro, file = &quot;bank0.prg&quot;;<br />  PRG1:  start = $8000, size = $4000, type = ro, file = &quot;bank1.prg&quot;;<br />  PRG2:  start = $8000, size = $4000, type = ro, file = &quot;bank2.prg&quot;;<br />  PRG3:  start = $8000, size = $4000, type = ro, file = &quot;bank3.prg&quot;;<br />  PRG4:  start = $8000, size = $4000, type = ro, file = &quot;bank4.prg&quot;;<br />  PRG5:  start = $8000, size = $4000, type = ro, file = &quot;bank5.prg&quot;;<br />  PRG6:  start = $8000, size = $4000, type = ro, file = &quot;bank6.prg&quot;;<br /><br />  PRG7:  start = $C000, size = $4000, type = ro, file = &quot;bank7.prg&quot;;<br />&#125;<br /><br />SEGMENTS &#123;<br />  BANK0:     load = PRG0, type = ro, align = $100;<br />  BANK0_END:     load = PRG0, type = ro, start= $C000;<br />  BANK1:     load = PRG1, type = ro, align = $100;<br />  BANK1_END:     load = PRG1, type = ro, start= $C000;<br />  BANK2:     load = PRG2, type = ro, align = $100;<br />  BANK2_END:     load = PRG2, type = ro, start= $C000;<br />  BANK3:     load = PRG3, type = ro, align = $100;<br />  BANK3_END:     load = PRG3, type = ro, start= $C000;<br />  BANK4:     load = PRG4, type = ro, align = $100;<br />  BANK4_END:     load = PRG4, type = ro, start= $C000;<br />  BANK5:     load = PRG5, type = ro, align = $100;<br />  BANK5_END:     load = PRG5, type = ro, start= $C000;<br />  BANK6:     load = PRG6, type = ro, align = $100;<br />  BANK6_END:     load = PRG6, type = ro, start= $C000;<br /><br />  BANK7:     load = PRG7, type = ro, start = $C000;<br /><br />  BANK_SWITCHING_TABLE:  load = PRG7, type = ro, start = $FFF0;<br />  VECTORS:  load = PRG7, type = ro, start = $FFFA;<br />&#125;<br /></div><br /><br />And here is a sample (blank)  ASM file corresponding to one of the banks (in this case bank 3)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />.segment &quot;BANK3&quot;<br />; start of bank is at $8000<br /><br /><br />; insert code for PRG bank 3<br /><br /><br />; bank ends at $C000 &#40;non inclusive&#41;<br />.segment &quot;BANK3_END&quot;<br /></div><br /><br /><br />And here is a sample makefile<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"># To build the NES ROM  just type: make<br /># To run the NES ROM  just type: make run &#40;or: make fceu&#41;<br /># Note: as with any make system, if any of the files have been updated they will<br /># be rebuilt along with any parts that are dependant on them<br /><br /># Tools required. Update these to point to where they are installed<br />AS = C:\Personal\NES\Dev\Compilers\cc65\bin\ca65.exe<br />LD = C:\Personal\NES\Dev\Compilers\cc65\bin\ld65.exe<br />EMU1 = C:\Personal\NES\Dev\Emulators\nintendulator\nintendulator.exe<br />EMU2 = C:\Personal\NES\Dev\Emulators\fceu-0.98.15-rerecording\fceu.exe<br /><br />MAIN = myGame<br /><br /># intermediate files<br />HEADER_OBJS = header.o<br />OBJS = bank0.o  bank1.o bank2.o bank3.o bank4.o bank5.o bank6.o bank7.o<br /><br /><br />ALL_PRG = bank0.prg bank1.prg bank2.prg bank3.prg bank4.prg bank5.prg bank6.prg bank7.prg<br /><br /><br /><br /># the part that does the compiling, assembling, linking etc..<br /><br />all: $&#40;MAIN&#41;.nes<br /><br />clean:<br />        rm $&#40;OBJS&#41; $&#40;HEADER_OBJS&#41; $&#40;BANK_OBJS&#41; $&#40;MAIN&#41;.hed $&#40;MAIN&#41;.nes $&#40;ALL_PRG&#41;<br /><br />nintendulator:  $&#40;MAIN&#41;.nes<br />        $&#40;EMU1&#41; $&#40;MAIN&#41;.nes<br /><br />fceu:   $&#40;MAIN&#41;.nes<br />        $&#40;EMU2&#41; $&#40;MAIN&#41;.nes<br /><br />run: $&#40;MAIN&#41;.nes<br />        $&#40;EMU1&#41; $&#40;MAIN&#41;.nes<br /><br /># For making the header<br />$&#40;HEADER_OBJS&#41;: %.o: %.asm<br />        $&#40;AS&#41; $&#40;CFLAGS&#41; $&lt; -o $@<br /><br />$&#40;MAIN&#41;.hed: $&#40;HEADER_OBJS&#41;<br />        $&#40;LD&#41; $&#40;HEADER_OBJS&#41; -C header.ini  -o $&#40;MAIN&#41;.hed<br /><br /><br /># For making the PRG<br />$&#40;OBJS&#41;: %.o: %.asm<br />        $&#40;AS&#41; $&#40;CFLAGS&#41; $&lt; -o $@<br /><br /><br />$&#40;ALL_PRG&#41;: $&#40;OBJS&#41;<br />        $&#40;LD&#41; $&#40;OBJS&#41; -C nes.ini<br /><br /><br /># For making the final iNES ROM<br />$&#40;MAIN&#41;.nes: $&#40;ALL_PRG&#41; $&#40;MAIN&#41;.hed<br />        cat $&#40;MAIN&#41;.hed $&#40;ALL_PRG&#41;  &gt; $&#40;MAIN&#41;.nes<br /><br /></div><br /><br />So, any opinions.  Am I making this an unmaintainable mess?<br />Should I just have separate linker files for each bank.  (Thats what I did for my header file.)<br /><br /><br />EDIT -  final question.   How do you guys normally access addresses in your banks. What I mean is, my labels in bank1 cannot be directly accessed by the code in bank7, so I've been using constants with SEGMENTS corresponding to those address constants.  Am I again making things too complicated?<br /><br />Al<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=772">albailey</a> — Thu Sep 27, 2007 7:20 am</p><hr />
]]></content>
</entry>
</feed>