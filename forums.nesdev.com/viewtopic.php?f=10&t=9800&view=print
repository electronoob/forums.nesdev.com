<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Help With Compare Statements For Collision Detection</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Help With Compare Statements For Collision Detection</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9800">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=9800</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Tue Feb 12, 2013 5:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi all,<br /><br />I'm working on the collision detection for my PONG style game and I was hoping to gain some clarification so I can better understand compare statements, as well as to refine the collision detection. I have the collision detection semi-working but its a bit glitchy. I don't fully understand the branch statements so I was hoping you could clear that up for me.<br /><br />The PONG paddle in this case is actually composed of 16 tiles. 4x4 tiles to be exact. My code is for collision detection is this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;CheckPaddleCollision:<br />&nbsp;<br />&nbsp;;;Check Horizontal Position of Ball<br /><br />&nbsp; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br />&nbsp; CMP $0243&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; ;if ball x position is greater than the x position of the far right column of tiles which the sprite is composed branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br />&nbsp; ;;Check Vertical Position of Ball<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; &nbsp; ;Load current vertical position of ball<br />&nbsp; CMP $0204&nbsp; ;Compare to vertical position of the top tile of the sprite. If ball y position is less than branch to CheckPaddle Collision Done. Otherwise Move on.<br />&nbsp; BCC CheckPaddleCollisionDone<br />&nbsp; <br /><br />&nbsp; ;;Vertical Position Check Continued. Check Bottom Position of Ball<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; ;;Load Current Vertical Position of ball<br />&nbsp; CMP $0210&nbsp; &nbsp; &nbsp; ;;&nbsp; &nbsp; Compare to vertical position of the bottom tile of the sprite. If ball y position is greater than the vertical position of the tile branch to paddle collision done.<br />&nbsp; BCS CheckPaddleCollisionDone<br />&nbsp; <br />&nbsp; ;Perform Ball Hand Slap Animation By Jumping To The Subroutine That Does This<br />&nbsp; <br />&nbsp; JSR Dave_Slap<br />&nbsp;<br />&nbsp; ;;bounce, ball now moving right<br /><br />&nbsp; LDA #$01<br />&nbsp; STA ballright<br />&nbsp; LDA #$00<br />&nbsp; STA ballleft</div><br /><br />The code basically works, however there are some issues with it.<br /><br />1. I understand that BCS looks to the status register of the carry flag to make its branch decision, however in simple terms, is it basically used as a &quot;greater than&quot; function?<br /><br />2. Same for BCC. Is this basically used for a less than function?<br /><br />3. In my first piece of comparison code, I'm using a BCS to compare the horizontal position. This seems to work in the game, but logically doesn't make sense to me. It would seem that the code should BNE, meaning that the ball horizontal position is not the same as the paddle position and as such should then jump to paddle collision done, allowing the ball to pass by the paddle. This doesn't work though. BCS seems to work, but it logically doesn't make sense to me.<br /><br />4. For the most part, my paddle collision works, but many times the ball passes right behind the paddle and then immediately bounces back from behind the paddle instead of in front of it.<br /><br />Thanks again. The journey of learning to code for NES continues on <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Feb 12, 2013 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the 6502, subtraction is actually addition.  SBC means you XOR the other byte with FF before adding it to A, then if carry was set, you add 1 more.<br />example, A - 42:<br />42 = 00101010<br />complement = 11010101 = -43<br />You add -43, then add 1, and it's just like you subtracted 42.<br /><br />CMP is also a subtraction that works by adding the complement, but it always adds 1, regardless of what the previous value of the carry flag was.<br /><br />The carry flag becomes set when the unsigned value goes above FF.<br /><br />So let's say you compare 42 and 43.<br />42 = 00101010<br />43 = 00101011<br />~43 = 11010100 = -44<br />add 1 to -44: 11010101<br />add 42 = 255 = 11111111<br />Does not carry, so 42 &lt; 43.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Feb 12, 2013 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">1. I understand that BCS looks to the status register of the carry flag to make its branch decision, however in simple terms, is it basically used as a &quot;greater than&quot; function?</div><br />A comparison is just a subtraction that doesn't put the result anywhere, but the status flags are still updated as usual. After a subtraction, the carry is set when a borrow didn't happen, so whenever a number is larger than or equal to the number being subtracted from it, the carry will be set. So BCS is actually a &quot;greater than or equal to&quot; test.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2. Same for BCC. Is this basically used for a less than function?</div><br />Yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. In my first piece of comparison code, I'm using a BCS to compare the horizontal position. This seems to work in the game, but logically doesn't make sense to me.</div><br />If I understand correctly, you are considering that no collision happened when BallX &gt; RightPaddleX, which doesn't make sense to me. It's exactly when the right edge of the ball crosses the left edge of the right paddle that it has a chance of colliding with it, otherwise it didn't reach that paddle yet.<br /><br />Keep in mind that you have to account for the dimensions of the objects your handling. Ideally you'd have separate variables for the coordinates of the different edges of the objects. If BallX is the left edge of the ball, things will look weird when it collides with the paddle on the right, because the right side of the ball is supposed to trigger a collision.<br /><br />These newbie guides have the very bad habit of using sprite coordinates for game logic, which makes things so much harder to manage. The &quot;correct&quot; way to program a game is to have a set of variables hold all information about the objects you're representing, such as position, speed, etc. (for collisions, you could calculate the values of the 4 edges of each object), and do all the game logic with those variables only. As a final step of your game loop, you use the positions and states to generate the appropriate list of sprites that will represent those objects. Game logic should be mixed with presentation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It would seem that the code should BNE, meaning that the ball horizontal position is not the same as the paddle position and as such should then jump to paddle collision done, allowing the ball to pass by the paddle. This doesn't work though.</div><br />BNE/BEQ are not suitable for testing collisions unless objects move at most 1 pixel per frame. It makes little sense to impose this kind of restriction even if you're in early stages of development.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4. For the most part, my paddle collision works, but many times the ball passes right behind the paddle and then immediately bounces back from behind the paddle instead of in front of it.</div><br />Could this have anything to do with the width of the ball (or the paddle), like I said above?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Feb 12, 2013 8:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Others have given more verbose responses, so as a simple programmer (heh :-) ) I'll just give you this tip:<br /><br />Opcode BCS = BGE (branch greater than or equal to)<br />Opcode BCC = BLT (branch less than)<br /><br />I would also recommend this little tip primer: <!-- m --><a class="postlink" href="http://www.6502.org/tutorials/compare_beyond.html">http://www.6502.org/tutorials/compare_beyond.html</a><!-- m --> (note: with regards to the NES/Famicom specifically: Ignore anything in that primer pertaining to BCD or &quot;decimal mode&quot;, as the NES/FC CPU lacks that feature).<br /><br />CPU flags are absolutely, hands down, the #1 thing new, and even some experienced, 6502 programmers do not truly understand (the most common two being the carry and the overflow flags).  There are lots of us who do understand how they work but choose to just remember how to accomplish what's needed/desired rather than get into the semantics.  The more you understand the better off you are, though.  :-)<br /><br />HTH in some way.  Good luck on your project.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Tue Feb 12, 2013 8:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">On the 6502, subtraction is actually addition.  SBC means you XOR the other byte with FF before adding it to A, then if carry was set, you add 1 more.<br />example, A - 42:<br />42 = 00101010<br />complement = 11010101 = -43<br />You add -43, then add 1, and it's just like you subtracted 42.<br /><br />CMP is also a subtraction that works by adding the complement, but it always adds 1, regardless of what the previous value of the carry flag was.<br /><br />The carry flag becomes set when the unsigned value goes above FF.<br /><br />So let's say you compare 42 and 43.<br />42 = 00101010<br />43 = 00101011<br />~43 = 11010100 = -44<br />add 1 to -44: 11010101<br />add 42 = 255 = 11111111<br />Does not carry, so 42 &lt; 43.</div><br /><br />Thank you for the explanation on this. Would you mind explaining to me how you get -43 out of 11010101 when you talk about the complement? According to my understanding of binary 11010101 would equal 213.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Tue Feb 12, 2013 8:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">1. I understand that BCS looks to the status register of the carry flag to make its branch decision, however in simple terms, is it basically used as a &quot;greater than&quot; function?</div><br />A comparison is just a subtraction that doesn't put the result anywhere, but the status flags are still updated as usual. After a subtraction, the carry is set when a borrow didn't happen, so whenever a number is larger than or equal to the number being subtracted from it, the carry will be set. So BCS is actually a &quot;greater than or equal to&quot; test.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2. Same for BCC. Is this basically used for a less than function?</div><br />Yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. In my first piece of comparison code, I'm using a BCS to compare the horizontal position. This seems to work in the game, but logically doesn't make sense to me.</div><br />If I understand correctly, you are considering that no collision happened when BallX &gt; RightPaddleX, which doesn't make sense to me. It's exactly when the right edge of the ball crosses the left edge of the right paddle that it has a chance of colliding with it, otherwise it didn't reach that paddle yet.<br /><br />Keep in mind that you have to account for the dimensions of the objects your handling. Ideally you'd have separate variables for the coordinates of the different edges of the objects. If BallX is the left edge of the ball, things will look weird when it collides with the paddle on the right, because the right side of the ball is supposed to trigger a collision.<br /><br />These newbie guides have the very bad habit of using sprite coordinates for game logic, which makes things so much harder to manage. The &quot;correct&quot; way to program a game is to have a set of variables hold all information about the objects you're representing, such as position, speed, etc. (for collisions, you could calculate the values of the 4 edges of each object), and do all the game logic with those variables only. As a final step of your game loop, you use the positions and states to generate the appropriate list of sprites that will represent those objects. Game logic should be mixed with presentation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It would seem that the code should BNE, meaning that the ball horizontal position is not the same as the paddle position and as such should then jump to paddle collision done, allowing the ball to pass by the paddle. This doesn't work though.</div><br />BNE/BEQ are not suitable for testing collisions unless objects move at most 1 pixel per frame. It makes little sense to impose this kind of restriction even if you're in early stages of development.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4. For the most part, my paddle collision works, but many times the ball passes right behind the paddle and then immediately bounces back from behind the paddle instead of in front of it.</div><br />Could this have anything to do with the width of the ball (or the paddle), like I said above?</div><br /><br />This code for the most part works however sometimes the ball will bounce back when its 3 or 4 tiles behind the paddle. It seems like there is a problem with the horizontal comparison check that I am doing but I can't for the life of me figure out the problem. Regardless, thank you for the thought provoking commentary.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp;CheckPaddleCollision:<br />&nbsp;<br />&nbsp;;;Check Horizontal Position of Ball<br /><br />&nbsp; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br /><br />&nbsp; CMP $0243&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; ;if ball x position is greater than the x position of the far right column of tiles which the sprite is composed branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br />&nbsp; ;;Check Vertical Position of Ball<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; &nbsp; ;Load current vertical position of ball<br />&nbsp; CMP $0240&nbsp; ;Compare to vertical position of the top tile of the sprite. If ball y position is less than branch to CheckPaddle Collision Done. Otherwise Move on.<br />&nbsp; BCC CheckPaddleCollisionDone<br /><br />&nbsp; ;;Vertical Position Check Continued. Check Bottom Position of Ball<br /><br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; ;;Load Current Vertical Position of ball<br />&nbsp; CLC<br />&nbsp; ADC #$05<br />&nbsp; CMP $0234&nbsp; &nbsp; &nbsp; ;;&nbsp; &nbsp; Compare to vertical position of the bottom tile of the sprite. If ball y position is greater than the vertical position of the tile branch to paddle collision done.<br />&nbsp; BCS CheckPaddleCollisionDone<br /><br /><br />&nbsp; ;;bounce, ball now moving right<br /><br />&nbsp; LDA #$01<br />&nbsp; STA ballright<br />&nbsp; LDA #$00<br />&nbsp; STA ballleft<br />&nbsp; <br />&nbsp; ;Perform Ball Hand Slap Animation By Jumping To The Subroutine That Does This<br /><br />&nbsp; JSR Dave_Slap<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Tue Feb 12, 2013 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Others have given more verbose responses, so as a simple programmer (heh <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> ) I'll just give you this tip:<br /><br />Opcode BCS = BGE (branch greater than or equal to)<br />Opcode BCC = BLT (branch less than)<br /><br />I would also recommend this little tip primer: <!-- m --><a class="postlink" href="http://www.6502.org/tutorials/compare_beyond.html">http://www.6502.org/tutorials/compare_beyond.html</a><!-- m --> (note: with regards to the NES/Famicom specifically: Ignore anything in that primer pertaining to BCD or &quot;decimal mode&quot;, as the NES/FC CPU lacks that feature).<br /><br />CPU flags are absolutely, hands down, the #1 thing new, and even some experienced, 6502 programmers do not truly understand (the most common two being the carry and the overflow flags).  There are lots of us who do understand how they work but choose to just remember how to accomplish what's needed/desired rather than get into the semantics.  The more you understand the better off you are, though.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />HTH in some way.  Good luck on your project.</div><br /><br />Thank You Koitsu. I will read the tutorial you posted tonight.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Feb 12, 2013 8:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This code for the most part works however sometimes the ball will bounce back when its 3 or 4 tiles behind the paddle.</div><br />You're only checking if the position is to the left of the paddle. So it will bounce even if it's too far left.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">| = paddle<br />* = ball<br />* | <br />Ball is to the left of the paddle.<br />*&nbsp; &nbsp; &nbsp; &nbsp; |<br />Ball is to the left of the paddle.<br />*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />Ball is still to the left of the paddle.<br /></div><br />So all those cases would &quot;collide&quot;. That's why there are two checks for vertical. If you want it to collide horizontally only on the paddle, you'll need a second horizontal check as well.<br /><br />Edit: Wait, I had left and right switched. Edited the post to fix this. Same type of problem, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Feb 12, 2013 8:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I always remember that BCC resembles ESS, so it's &quot;less&quot; with a missing &quot;L&quot;. (Maybe a bit of a stretch, but it works for me.) BCS, branches on both greater and equal, and has two different letters after the &quot;B&quot;ranch. But if you can create a BGE and BLT macro, then you should.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Feb 12, 2013 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thank you for the explanation on this. Would you mind explaining to me how you get -43 out of 11010101 when you talk about the complement? According to my understanding of binary 11010101 would equal 213.</div><br />213-256= -43<br /><br />A binary number can either represent a &quot;signed&quot; number or an &quot;unsigned&quot; number. <br /><br />The range of an unsigned number is 0 to 255. The range of a signed number is -128 to 127.<br /><br />0 to 127 (%00000000 to %01111111) is the same for both signed and unsigned. When the left most bit is set, it's -something if it's signed. So, %11111111 (Also known as $FF, also the result of 0-1) is -1 (signed) or 255 (unsigned).<br /><br />Now, let's pretend we have two unsigned numbers. If you subtract a large one from a small one and wrap around didn't happen, you'd get a negative number.<br /><br />0 - anything positve that's not 0 would give a result less than zero. Carry clear.<br />128 - 190 would be less than 0. Carry clear.<br />156-156 = 0. Carry stays set, the result was not negative.<br />176-2 = 174. The result was not negative, so the carry stays set.<br /><br />I remember it this way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Feb 12, 2013 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not that you need to worry about signed numbers for this particular issue though (unless you want to define the displacement of the ball as a signed number, which would actually be a good idea).<br /><br />EDIT: BTW, my understanding of your code was wrong before. I didn't notice you were comparing the ball's position to the far right of the paddle, so ignore anything I have said about that. As a matter of fact, Kasumi is right, you're missing an extra horizontal collision check:<br /><br />-if the ball didn't reach the paddle yet, no collision; &lt;- you're missing this<br />-if the ball is past the paddle, no collision;<br />-if the ball is above the paddle, no collision;<br />-if the ball is below the paddle, no collision;<br />-if none of the above, there was a collision;<br /><br />I don't know much about the mechanics of pong, but it seems you have pretty large paddles, so you might have to consider whether the ball has hit them horizontally or vertically in order to reverse the speed in the correct axis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Feb 12, 2013 10:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Signed number representation is trivial: the highest bit has the negative place value that it would have in unsigned. In an unsigned 8-bit value the high bit has a place value of 128, so in signed 8-bit, it has a place value of -128. Nothing more to it. Conceptually you can think of it as &quot;start at -128 instead of 0 when adding the rest of the bits, allowing us to cover the range from -128 to -1&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mysteriousity</b> [ Wed Feb 13, 2013 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you all for your help. This code seems to work pretty well. Not perfect, but I will keep on refining it.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckPaddleCollision:<br />&nbsp;<br />&nbsp;;;Check Horizontal Position of Ball<br /><br />&nbsp;; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br /><br />&nbsp; ;CMP $0243&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; ; BCS CheckPaddleCollisionDone&nbsp; ;if ball x position is greater than the x position of the far right column of tiles which the sprite is composed branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br /><br />&nbsp; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br /><br />&nbsp; CMP $0243&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; ;if ball x position is greater than the x position of the far right column of tiles which the sprite is composed branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br />&nbsp; LDA ballx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Load current horizontal position of ball<br />&nbsp; CLC<br />&nbsp; ADC #$05<br />&nbsp; CMP $0207&nbsp; &nbsp; &nbsp; &nbsp;;Compare to horizontal position of paddle<br />&nbsp; BCC CheckPaddleCollisionDone&nbsp; ;if ball x position is greater than the x position of the far right column of tiles which the sprite is composed branch to CheckPaddleCollisionDone. Otherwise move on to vertical<br /><br /><br />&nbsp; ;;Check Vertical Position of Ball<br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; &nbsp; ;Load current vertical position of ball<br />&nbsp; SEC<br />&nbsp; SBC #$05<br />&nbsp; CMP $0240&nbsp; ;Compare to vertical position of the top tile of the sprite. If ball y position is less than branch to CheckPaddle Collision Done. Otherwise Move on.<br />&nbsp; BCC CheckPaddleCollisionDone<br /><br />&nbsp; ;;Vertical Position Check Continued. Check Bottom Position of Ball<br /><br /><br />&nbsp; LDA bally&nbsp; &nbsp; &nbsp; ;;Load Current Vertical Position of ball<br />&nbsp; SEC<br />&nbsp; SBC #$05<br />&nbsp; CMP $0234&nbsp; &nbsp; &nbsp; ;;&nbsp; &nbsp; Compare to vertical position of the bottom tile of the sprite. If ball y position is greater than the vertical position of the tile branch to paddle collision done.<br />&nbsp; BCS CheckPaddleCollisionDone<br /><br /><br />&nbsp; ;;bounce, ball now moving right<br /><br />&nbsp; LDA #$01<br />&nbsp; STA ballright<br />&nbsp; LDA #$00<br />&nbsp; STA ballleft</div><br /><br />Concerning the branch statements, how would you pull off greater than but not equal to, or less than and equal to? Also, after reading some tutorials on branching, what is the purpose of using other branch statements that seem to do the same thing, but are more limited, such as bpl, which tests the negative flag based on bit 7. Basically, per my understanding if the value in the accumulator is less than 80 it will branch. Why have this opcode though if the BCC statement can allready functionally accomplish the same thing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Feb 13, 2013 9:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Concerning the branch statements, how would you pull off greater than but not equal to,</div><br />Multiple branches.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; cmp whatever<br />&nbsp; bcc dontdothething<br />&nbsp; beq dontdothething<br />;The thing<br />dontdothething:<br /></div><br />or this (untested, I think it should work)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; sec<br />&nbsp; sbc #$01;Subtract one. So if it WAS equal to whatever, it will now be one less.<br />;If it was greater than whatever, it will now be equal<br />&nbsp; cmp whatever<br />&nbsp; bcc dontdothething<br />;The thing<br />dontdothething:<br /></div><br />edit 2: That second one would fail if A was 0. A is 0. Whatever is  3. 0-1 = 255. 255-3 = set carry, even though 0 is less than 3.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">or less than and equal to?</div><br />Similarly to the above. Branch in the cases you don't want until you're left with the case you want.<br />  <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why have this opcode though if the BCC statement can allready functionally accomplish the same thing?</div><br />They're not the same. Look at these.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$81<br />sec<br />sbc #$01<br />;bcs willbranch<br />;bmi willbranch<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$80<br />sec<br />sbc #$01<br />;bcs willbranch<br />;bpl willbranch<br /></div><br /><br />Edit: Nevermind, I totally misunderstood your question. You use bpl/bmi when you need to quickly check a bit, and when you're doing signed math. Comparisons are not the only time the branches are set. Can't... really come up with a good example off hand.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Feb 13, 2013 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Help With Compare Statements For Collision Detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mysteriousity wrote:</div><div class="quotecontent">how would you pull off greater than but not equal to</div><br />If you don't need to preserve the accumulator, you can use SBC instead of CMP, but clear the carry beforehand (instead of setting it, as is usual for subtractions), which will cause one more unit to be subtracted:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$20<br />clc<br />sbc #$20 ;will actually subtract $21<br />bcs GreaterThan</div><br /><br />If you do need to keep the accumulator, you can just add another branch to handle the case where the numbers are equal:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$20<br />cmp #$20<br />beq Equal<br />bcs GreaterThan<br />Equal:</div><br />It's like Kasumi said: add branches to filter out conditions you do not want.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">what is the purpose of using other branch statements that seem to do the same thing, but are more limited, such as bpl, which tests the negative flag based on bit 7.</div><br />BPL is meant for signed numbers. Since signed and unsigned numbers are stored and even calculated the same way, the only way to treat them one way or the other is by looking the bits differently. Bit 7 tells us when a signed number is positive or negative, so it's pretty convenient to have a couple of branch instructions based on it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why have this opcode though if the BCC statement can allready functionally accomplish the same thing?</div><br />Take the number $88 for example. If unsigned, it represents the decimal value 136, but if it's signed, it represents -120. If you subtract $04 to it, you get $84 (132 unsigned, or -124 signed). Notice that even though $88 is greater than $84, the result is still negative if you treat it as a signed number.<br /><br />You might not realize now, but if you ever have the need to work with signed numbers you'll quickly realize there's a big difference between the C and N flags. And we didn't even get started on the V flag, which is also meant for signed numbers.<br /><br />EDIT: Also, like Kasumi said, BPL/BMI are very useful to quickly check flags stored in bit 7. BVC/BVS can similarly be used to check flags in bit 6, after a BIT instruction (which copies bit 6 of the BIT'ed value to the V flag). For this reason, flags are commonly stored in the upper 2 bits of a byte.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>