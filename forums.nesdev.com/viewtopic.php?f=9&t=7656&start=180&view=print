<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NESDEV1 Community Development Board, Initial Planning</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NESDEV1 Community Development Board, Initial Planning</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7656">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7656</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>13</strong> of <strong>14</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Fri Jun 03, 2011 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay so I know this whole project was officially claimed dead.  The project was trashed because there was too much debate about what mapper options/capabilities were best and no one stepping up to work on the hardware.
<br />
<br />Coincidentally I'm working on a related project that could satisfy what you guys were initially looking for.  I didn't have any intention of making more than one for myself because I didn't see why anyone would be interested when the powerpak was out there.  I was more so just don't it to learn more about the NES and have fun in the process.
<br />
<br />Now I'm not a game developer or anything nor do I really have plans to start in the near future but I would love to help you guys make new and better games if I could.  I've also been looking for a project for senior design next year.  One of my friends convinced me to pitch this idea to our adviser at school and he gave us the preliminary approval, that provided some specifics. So we would really like to do the NESDEV cart for our senior design project next year if there is enough interest.  
<br />
<br />Since how I'm not a developer, I'm a "hardware guy" and would need you're guys' input along the way.  Assuming there are still people interest who haven't lost hope, I read through all 12 pages of this post to try and gather together what it seemed would satisfy most people.
<br />
<br />Here's some goals I've put together:
<br />
<br />Compatibility:
<br />*Original equipment
<br />*Clones
<br />*PAL and NTSC
<br />
<br />Quick Interface for both game and mapper development:
<br />*Using SD and perhaps USB
<br />*Potential for debugging interface (I'm not sure what this would entail but there was discussion about it)
<br />
<br />Cost
<br />*Must be less than $100 
<br />*Ideally would be around $60
<br />
<br />The cost will obviously depend on what options are included and what quantities of parts are purchased.  There may even be options if they are easily selected and use the same PCB.
<br />
<br />Time
<br />*Prototype by the end of the year
<br />*Final product within a year (12 months)
<br />(Some of this is dependent on my senior design project, and while it may seem like a while, at least the chances of cancelling the project are slim to none.)
<br />
<br />Hardware
<br />*Need to decide how much of what memories.
<br />*Programmable logic
<br />*AVR microcontroller mostly for use with programming via JTAG logic and RAM but other NES interface capabilities will be included.
<br />
<br />Mapper support:
<br />*FME-7 / MMC3+ capabilities minimum
<br />
<br />Now this is obviously one of the biggest topics of debate.  There are some who would like to have it all and some who'd be happy with a few discrete logic chips.  This also heavily ties into the cost which is important to most.  It appears to me that most people would be happy to have something comparable to a sunsoft FME-7 or the MMC3 with the potential for some added capabilities.  
<br />
<br />Either way it needs to have more than 144mcells.  I know the FME-7 should be able to fit in 144 cells but for this project to succeed someone needs to be able to code up a mapper in verilog and easily test out their mapper.  I don't feel they should have to figure out how to minimize everything to implement a mapper like qbradq was trying to do.  
<br />
<br />If you're the type that doesn't want a custom mapper because of emulator issues and everything that's fine, you should be able to your FME-7, MMC3 or comparable mapper or even a really basic mapper.  Some of these options will be provided and can easily be swapped out.
<br />
<br />Right now I don't exactly have an answer to this issue of CPLD size/cost/5v issues.  And maybe an expensive CPLD, FPGA, or level shifting is the answer.  I know some out there might say well if you had all that it wouldn't be reasonable to cheaply manufacture a cartridge and try to sell it.  But the cost shouldn't be the same after some time and this would let someone play around with a mapper to fit it on the smallest and cheapest piece of logic out there at that time.  
<br />
<br />So let me have it tell me what you think.  I know I've said it a few times but my biggest question is whether or not there is actual interest in the project, and not just that everyone likes to talk about it.  
<br />
<br />I'll go ahead and apologize for all the dead horses right now...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>marshallh</b> [ Fri Jun 03, 2011 9:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />EPM3128 - $8
<br />PIC32 - $8
<br />
<br />done. the max3000a cpld is 5v tolerant and 3.3v is enough for the TTL inputs.
<br />
<br />WARNING: feature creep! stay simple. if you REALLY must have complex mappers, then go with MAXII and level shifting.
<br />
<br />a hint: if this is a group project, it will fail. ONE PERSON needs to take point and do this, you did a good thing by volunteering.
<br />
<br />you need to decide when to stop taking input. if you don't, everybody else here will continue to post page after page of generally pointless suggestions and you will never get done.
<br />
<br />I'd encourage you to take enough interest in nes coding to see this through. otherwise I doubt you'll finish it.
<br />
<br />1 last thing: you will NEVER be able to make everybody happy, and make this work for everybody. As long as it works for most people, good enough

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Jun 03, 2011 10:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Infinite,
<br />
<br />Hey man, glad to see someone with hardware knowledge is interested in the project! I did decide on a direction to go with: to implement FME7. I did what Marshall was talking about and stopped taking input after a certain point. All of that fizzled out because I don't know enough about hardware to make it happen.
<br />
<br />Generally speaking though any mapper on this type of cart would be useful to the development community.
<br />
<br />So here are the requirements as I see them:
<br />
<br />1. USB interface for programming PRG-RAM, PRG-ROM, CHR-ROM and the CPLD-based mapper.
<br />2. PRG-ROM and CHR-ROM would really be RAM chips with a battery backup to reduce cycle time. We also can support CHR-ROM and CHR-RAM games at the same time without extra hardware.
<br />3. Give the CPLD enough cart and chip connections to fully implement FME7, MMC3 and the other, simpler mappers (like UxROM, MMC1)
<br />4. Use a large CPLD to give mapper design flexibility.
<br />
<br />If we can meet these requirements then the question of what mapper to support is moot. We can supply the Verilog and bit streams for common mappers and provide enough hardware documentation for folks to write their own. This would also make the cart valuable to people that want to develop custom mappers.
<br />
<br />The USB interface is the killer feature I had wanted for the cart. This is easy as pie to implement on an AVR. You can either use pre-existing software USB drivers or use a FTDI chip. Either way is very well documented and trivial to implement.
<br />
<br />I can supply the (apparently very unoptimized) Verilog for several of the mappers, and I can write all of the MCU and desktop code and any test NES programs we may need.
<br />
<br />Other than those, what deliverables do you need from me? Please note if there is any particular order you need them in to help your work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Jun 04, 2011 12:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks guys I appreciate the support.  Sorry for the huge post, but I figure it's best to tell you everything I know about now and what I'm thinking so we can get on the same page as much as possible.
<br />
<br />Since how I'd be doing this as my senior design project the timeline for the whole project is pretty well structured for me.  So the only thing I can really do is work to get as much of a head start as I can.  Here's the basic timeline I'm planning..
<br />
<br />Summer:  Generally speaking no one really works or even knows what their project is.  But since I've submitted my own I can use the summer to do all the research and I'm hoping to learn some basics to program on the NES.  I'd also like to get some fairly solid customer requirements for myself.  And trust me I don't plan on shooting myself in the foot and biting off more than we can tackle.  I would just like to brainstorm what might be asked of the device down the road.  That way if there is an easy way to make it possible without much/any modification to the board.
<br />
<br />I also have a simple through hole prototype with a 72 mcell Xilinx CPLD:  XC9572-15PCG84C  And a atmega664.  So I'd like to play around with the interfaces and get to the point where I'm programming the RAM and loading simple UNROM mappers and such.  
<br />
<br />Fall:  When I'll actually have to turn in my customer requirements.  Regardless of anything that gets said here, I'm not going be changing anything significant with the design after this step.  This is also the time I think I'll be able to start asking my school for money to build the surface mount prototype.  My wife will also be having our second child in November, so this is one of the many reasons I'm taking advantage of the summer as much as possible.
<br />
<br />Winter break:  I would actually like to have the basic features working at this point like getting MMC3 and FME-7 on the logic and programming everyhing via USB/SD card interface.  Chances are I'm not going to be requiring my team and I do actually code up any mappers beyond the complexity of MMC1.  This is where we'll use support from you guys like the how qbradq already has something written up for the FME-7.
<br />
<br />Winter term:  working out the bugs and getting everything working like the end product.  Most people teams aren't actually to this point until Spring.
<br />
<br />Spring term:  Settle on final board assuming there are changes since the Fall.  This may be making room for bells and whistles at the end since how I'm hoping to basically done as far as senior design is concerned.  If all goes well this is when I'd be taking orders from anyone here who'd like to get a board made on the same run.  I think it would be awesome to have our project out in use when all the other teams basically only have a completed first build.  
<br />
<br />Beyond:  Basically it would be up to the community from here.  The whole thing will be open source so people could make changes and assemble new orders as they please.  I can't be certain I would continue to be a supply for boards but I guess that all depends what I want to spend my free time after graduation.
<br />
<br />As far as deliverables go qbradq, because we're required to do things essential to the project I won't really be able to ask you to write up the AVR code to program the ram and usb interface.  But if we have troubles or anything we'll be sure to use you as a reference.  
<br />
<br />One of our customer design requirements will probably be that developers must beable to make a mapper in something like the Xilinx IDE and easily get the mapper onto the logic.  The best way for us to show this is do things like taking your FME-7 mapper you've already done and show it's easy to program the CPLD.  Any of the MMC mappers or their variants that you guys would like to write up would only further prove that the board works like we wanted.  The other thing is NES programs, and that'll be somewhat dependent on what options we provide with our hardware.  Here are some things I'd like to make possible with the cart but I don't intend to complete them myself.  (or at least until my advisors tell me I'm not doing enough work this fall:)
<br />
<br />We'll do:
<br />Provide a more manual way to program everything via USB or/and by pressing a program button while holding reset on the console to program everything from the data on the SD card.  
<br />
<br />What I would like to provide:
<br />An interface that would allow you guys to write an NES program so you could load roms and mappers via the NES on screen control similar to how the PowerPak works.  
<br />
<br />This interface could also allow for added features if the developer decided to create them.  I don't know much about this so correct me if need be, but I think this could allow you to do things like multiplication and sound similar to the MMC5 perhaps.  Except here you'd have a AVR at your disposal to handle do this type of stuff for you as a co-processor. 
<br />
<br /> Keep in mind I'm not giving any promises on things like this.  But if all I need to do is provide a register interface between the NES and AVR to do things like this I don't see why not allow for these types of features.  I need you're guys' input on how you'd like this whole interface to work from a software/signal standpoint and I'll make the hardware to do it.
<br />
<br />The other thing I would need help with is debugging capabilities (NES game type of bugs.)  I don't really know what you guys would need as far as hardware requirements to do things like this.  But I'm sure a good interface between the NES and AVR is what will allow a lot of these tools to be created by you guys.
<br />
<br />This is really the idea of my end of the project.  From my point of view it seems you guys could benefit from a somewhat simple piece of hardware for game development.  The trouble is, it's a lot a work and money to make such a specific tool especially if you're on your own and don't know a whole lot about hardware.  So I provide the hardware and a simple way to program the logic and memory along with an interface you asked for and let you guys go wild with open sourcing everything.  With any luck I'll get to enjoy a few homebrews that might not have made it otherwise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Sat Jun 04, 2011 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really like your attitude and approach to this Infinite!
<br />
<br />As for hardware debugging features you're not going to be able to provide that from the cartridge. As far as I understand there is no way to single-step the CPU like that. Besides it's not a terribly needed feature. Most program debugging is done on emulators, and the hardware hackers use a CopyNES.
<br />
<br />As for the NES to MCU interface, I really like that idea. At that point it would be kinda like the PowerPak, which ain't a bad thing. From a software standpoint, here's what I would personally like:
<br />
<br />1. System boots into "MCU Mode", where the CPLD mapper is in a pass-through configuration and a small boot ROM is connected to the system bus.
<br />2. Provide an SPI interface to the MCU mapped into the $5000-$5FFF address range. The NES would be the SPI master.
<br />3. A command set would be used for the MCU. Something like "send sorted ROM list" and "load ROM #".
<br />4. A hardware reset would be required to return to the MCU Mode to load a new game. Clones and such don't handle cartridge-driven reset very well from what I have heard.
<br />
<br />Let me just say that this is not a requirement for me. Here are my requirements in customer terms, to get you started <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />1. USB interface to read and write PRG, CHR and SRAM
<br />2. Support CHR-RAM
<br />3. PRG-RAM support
<br />4. MMC1 mapper support
<br />5. 256 KB PRG-ROM
<br />6. 8 KB PRG-RAM
<br />7. 8 KB CHR-RAM
<br />
<br />Anything above this would be nice-to-have's for me. Other developers here will have other requirements, probably with regards to mapper support. However the above would support the development of most of the homebrew that I am currently aware of, including my own projects. Something that this discussion has taught me is that the MMC1 has all you need to make some pretty awesome software.
<br />
<br />Just a little tip: if you spring for an FTDI interface chip, you can make the AVR programmable through USB as well. The FTDI chips have a bit-bang mode that let you control the logic level on all of it's output pins.
<br />
<br />You can wire up four of these pins that are not used for normal USART operation to the ICSP port of the AVR. Then using software on the client side you can engage bit-bang mode on the FTDI chip and use the AVR SPI ICSP protocol to program the AVR. This is how the previous generation of Arduino boards program their MCU's boot loader.
<br />
<br />Combine that with a JTAG port (either from the USB controller like above or from the AVR) to the CPLD and now your development prototype is also your production prototype <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />I think you'll find that reading and writing the memory from the AVR is going to require either a very high pin-count AVR or an I/O extender.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Jun 04, 2011 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds exactly like my Squeedo design would have been 7 years ago, if this better hardware would have been usable by me at the time (especially the cheaper CPLD, and USB integration, and MCU with more than one serial port).  In short, sounds good to me!
<br />
<br />Not sure I'd want to rewrite my synth or not for an AVR, since I've done it once in PIC18 asm and again in C (for PIC32).  How does this AVR's speed compare roughly to a PIC18 @ 40Mhz, do you know? (it's 4 clocks per instruction)
<br />
<br />BTW, I would strongly recommend checking out the standard that chykyn and I have come up with regarding the use of the expansion port pins.
<br /><a href="http://nesdev.com/bbs/viewtopic.php?t=7313" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=7313</a>
<br />In particular, if you provide the EXP port /CE (you can put it anywhere pretty much, I'd recommend $48xx, $5xxx, or $58xx) and address lines, then the cart will be useable with more stuff in the future.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Jun 04, 2011 7:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">As for the NES to MCU interface, I really like that idea. At that point it would be kinda like the PowerPak, which ain't a bad thing. From a software standpoint, here's what I would personally like:<br /><br />1. System boots into "MCU Mode", where the CPLD mapper is in a pass-through configuration and a small boot ROM is connected to the system bus.<br />2. Provide an SPI interface to the MCU mapped into the $5000-$5FFF address range. The NES would be the SPI master.<br />3. A command set would be used for the MCU. Something like "send sorted ROM list" and "load ROM #".<br />4. A hardware reset would be required to return to the MCU Mode to load a new game. Clones and such don't handle cartridge-driven reset very well from what I have heard.<br /></div><br /><br />This whole part is what I'm having the hardest time figuring out what may be best.   Here's what I'm wondering about your approach:<br /><br />1) This may require the CPLD to be programmed every time and I'd like to avoid that if we can.  What would this boot rom be physically?  If it's not one of the chips you listed in the requirements we're talking about a EEPROM or something else that we have to allow to be programmed in circuit.<br /><br />2) so something like serial parallel shift registers?  One NES parallel in serial out to the MCU and a second one for communication the other way Serial in from the MCU to parallel out to the NES?  The other route would be to sacrafice MCU pins for speed and use parallel both ways.   In actuality I think there will be 8 pins allocated to the NES PRG data bus anyways.  I think the speed would be vital for trying to things like Membler's synth.  I can't imagine you'd be willing to sacrafice 16 MCU cycles to get something in and out.<br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Let me just say that this is not a requirement for me. Here are my requirements in customer terms, to get you started <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />1. USB interface to read and write PRG, CHR and SRAM<br />2. Support CHR-RAM<br />3. PRG-RAM support<br />4. MMC1 mapper support<br />5. 256 KB PRG-ROM<br />6. 8 KB PRG-RAM<br />7. 8 KB CHR-RAM<br /></div><br /><br />I get everything but the 8KB CHR-RAM.  Were there games that had CHR-ROM and RAM?  Are there significant number of people working on games that would need this?  It just seems to me if the CHR-"ROM" was actually a 256KB SRAM you wouldn't need the extra 8KB.<br /><br /><br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Just a little tip: if you spring for an FTDI interface chip, you can make the AVR programmable through USB as well. The FTDI chips have a bit-bang mode that let you control the logic level on all of it's output pins.</div><br /><br />I like that idea.<br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent"> now your development prototype is also your production prototype <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /></div><br /><br />That's what I would really like to see.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think you'll find that reading and writing the memory from the AVR is going to require either a very high pin-count AVR or an I/O extender.</div><br /><br />Yeah I know...  One thing that could help is using the CPLD to gain access to the pins it already sees but this complicates mapper.  There's a good chance we'll end up extending the I/O if we need read write capabilities of everything by the MCU.  But I may just ditch the idea of being able to "manually" program everything with the MCU and just rely solely on the NES.<br /><br />We may end up with a combination of this though as well, I'm at constant debate with myself about this part.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Not sure I'd want to rewrite my synth or not for an AVR, since I've done it once in PIC18 asm and again in C (for PIC32). How does this AVR's speed compare roughly to a PIC18 @ 40Mhz, do you know? (it's 4 clocks per instruction)<br /><br />BTW, I would strongly recommend checking out the standard that chykyn and I have come up with regarding the use of the expansion port pins. <br /></div>
<br />
<br />Yeah I know you've got your AVR guys and your PIC guys as I see it.  I hate to tell all the PIC guys though nuggets but, I can't do everything.  One thing I might be willing to entertain though if there is  enough board space and it's not too tricky is provide separate solder pads for a PIC if one chose.  But it would be up to you to write all the code we did in AVR.  So this may not really solve anything...  
<br />
<br />I was planning to use the Atmega128 for 5V reasons it runs at 20Mhz but most instructions are 1-2 cycles.  I'm not sure how this compares though with the PIC.  Things are pipelined in the AVR so that may affect the comparison.
<br />
<br />As far as the expansion port goes, that sound and CAN stuff is a little over my head right now.  But I would be more than willing to entertain the idea once I knew what it was all about.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Sun Jun 05, 2011 6:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For my requirements I only need CHR-RAM, not CHR-ROM. If you make the CHR memory 256 KB SRAM that would be fine for my uses.
<br />
<br />As for the whole MCU Mode thing, although I like the idea I think it is over reaching. My opinion is it is best to leave it out. It's your project though, so what ever you decide <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />I wouldn't worry about the audio guys either. I think they are well served already, and Memblers has a new cart in the works as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Jun 05, 2011 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This thread started out as a cheap development board, now it's a crazy school project  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> And I really don't understand the design. Is this trying to be a cheaper PowerPak or not? Most CPLD can only be reprogrammed a few thousand times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 05, 2011 10:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Most CPLD can only be reprogrammed a few thousand times.</div>
<br />This is the biggest flaw in this cart's design I think. I wouldn't buy it for this very reason, I don't like hardware with expiration dates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Jun 05, 2011 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is the type of feedback I'm looking for.  Keep in mind as far as my project is concerned we're still brainstorming here.
<br />
<br />I've basically been putting up what ideas I have, and I'm not going to get my feelings hurt if people shoot them down.  Especially if a lot of people shoot it down then they obviously deserve to die.  
<br />
<br />Realistically we've got the whole summer to hash things out, hopefully everyone doesn't get tired of talking and lose hope.  Because as long as you guys support the project I'll be doing it.  There's still a good chance I'd do it anyways because I've got to do something and this is the best project I think I can find.
<br />
<br />As far as the CPLD write cycle limitation is concerned the chips are rated at over 10,000 write cycles.  
<br />
<br />Really the choice of CPLD and FPGA is a trade off of several things.  I went through the pros and cons here:  <a href="http://nesdev.com/bbs/viewtopic.php?t=7796&amp;highlight=" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=7796&amp;highlight=</a>  If anyone is unfamiliar.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">kyuusaku wrote:<br />Most CPLD can only be reprogrammed a few thousand times.<br /><br />tokumaru:<br />This is the biggest flaw in this cart's design I think. I wouldn't buy it for this very reason, I don't like hardware with expiration dates.</div>
<br />
<br />If it's a devcart I don't see someone actually getting anywhere close to the 10,000 cycle write limit.  If it were a powerpak clone it might be a different story but that's not what we're going for here.  For the most part once you got your mapper set up you wouldn't have to reprogram the CPLD again until you decided the to swap out the mapper.  I did some quick calculations:
<br />
<br />*Some one who used this thing for 20 years:
<br />      Could reprogram it more than 2 times a day every single day.
<br />
<br />*Some one who programmed the CPLD 100 times for every game they developed:
<br />      Could develop 100 games
<br />
<br />*Someone who programmed it four times a week:
<br />      Could use it for 50 years
<br />
<br />*Someone who used it in place of a powerpak and played 20 different games a week:
<br />      Could use it for 10 years.
<br />
<br />I think you'll agree these estimates are VERY conservative and I know the idea of something dieing from over use isn't fun to think about.  But If someone used this thing enough times to wear out the EEPROM should deserve an award.  And if they were really that serious about this thing they will probably want to upgrade to something more capable before they get anywhere close to wearing it out.  Not to mention it will probably last a lot longer than 10,000 cycles.
<br />
<br />CPLDs are simpler and cheaper which seem to be main goals of this project and that's why I've been leaning towards them.  Also the idea is someone could easily take this devboard replicate the parts of the design they needed for production.  A FPGA simply is NOT a production cart option for several reasons.  Your choices would basically be to use discrete logic for simple mappers or a CPLD.  Just incase it's not obvious to everyone you would only have to program the CPLD once when assembling the cart.  
<br />
<br />As far as the MCU goes, I think it's going to be difficult to not include one of some sort for communication via USB or SD card.  Now the idea of sound capabilities and all kinds of other craziness is probably doubtful.  But I wanted to bring it up.  Because if someone said "Oh, if you provided this one simple feature I could do all this kind of stuff with it."  And if that feature was something as simple as wire connections or a super cheap register or something I would like to know.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>marshallh</b> [ Sun Jun 05, 2011 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />both altera MAX3000A (5v tolerant) and MAXII(no5 5v tolerant) are only rated for 100 erasures.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Jun 05, 2011 5:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">marshallh wrote:</div><div class="quotecontent">both altera MAX3000A (5v tolerant) and MAXII(no5 5v tolerant) are only rated for 100 erasures.</div>
<br />
<br />Best steer clear from those then!  I didn't realize there were ones out there rated so low.  I can see why you might not care though if it was something you only had to worry about upgrading firmware or something and could reduce the cost.
<br />
<br />I'll be sure to double check for something like this if we don't go with the Xilinx ones we're currently looking at.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Jun 05, 2011 11:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">One thing I might be willing to entertain though if there is  enough board space and it's not too tricky is provide separate solder pads for a PIC if one chose.  But it would be up to you to write all the code we did in AVR.  So this may not really solve anything...<br /><br />I was planning to use the Atmega128 for 5V reasons it runs at 20Mhz but most instructions are 1-2 cycles.  I'm not sure how this compares though with the PIC.  Things are pipelined in the AVR so that may affect the comparison.<br /><br />As far as the expansion port goes, that sound and CAN stuff is a little over my head right now.  But I would be more than willing to entertain the idea once I knew what it was all about.</div>
<br />
<br />I looked up the Atmega128 specs and at 20Mhz it should be at least as fast as the old PIC18.  On PIC18 I managed to get 4 channels mixed at 22khz and 30khz pretty reasonably, so if the MCU-&gt;NES communication is decent, then it should be able to pull that off (tho I'm not sure how that interface can be done without adding a couple 8-bit latches and using a lot of MCU I/Os like you said).
<br />
<br />With the newest version of my synth, perhaps the (low frequency) C code could still work on the AVR, and the more intensive resampler/mixer done in assembly, but the difference in RAM size (4kB vs 128kB w/ PIC32) might require cutbacks.  But anyways, yeah some kind of sound will be possible (just not comparable to what I'll do with the PIC32, as it's a whole different beast compared to anything I've used before).
<br />
<br />Here's a description of what the expansion port pins would be for:
<br /><ul><li>/CE and address lines - expansion port has the CPU data bus, so this allows devices on it to have addressable ports for NES to talk to connected device(s).  The expansion port also has the $4016/$4017 ports on it, so it may still be possible to do SPI communication with any cart lacking the EXP/CE.  Anyways, SPI mode would be required for Famicom, Top-loader, and NES clones - EXP/CE is more of a bonus feature for the front-loader NES.</li><li>CAN bus of course is networking for microcontrollers, it's provided because my synth will be using it already, then I figured since my future rev3 Squeedo (as an NES cart) will use the same PIC32 that I'd go ahead and link those 2 MCUs up directly.  One thing I was thinking about, was that if one of these MCUs can get internet access, then with the CAN bus maybe all of them could use it.  This is pretty much the "expansion port on the expansion port", so it remains to be seen what will be done with it (other than my plans with the synth).</li><li>Audio input - You would have to make a DAC on the cart, the audio will be mixed in with the NES's internal sound (expansion port device or audio mod is required, front-loader only).</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Jun 06, 2011 4:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I looked more closely into the AVR MCU's that looked like the could fit the bill they are all obviously trade offs between price, io, ram, and speed.  The number in the name signifies program flash memory (128/64KB)  Prices are quantities of 1 and 25.
<br />
<br />atmega128A   16Mhz 4K ram 53io $5.80/9.23
<br />
<br />atmega1280   16Mhz 8K ram 86io $10.13/16.13
<br />
<br />atmega1284   20Mhz 16K ram 32io $5.04/8.03
<br />
<br />atmega640    16Mhz 8K ram 86io $7.40/11.80
<br />
<br />*atmega6450A   20Mhz 4K ram 69io $3.93/6.27
<br />
<br />The last one actually looks the most attractive to me.  But it all really depends what the final design of everything else comes down to on which will be best I think.  
<br />
<br />Looking further into parts it's becoming more and more apparent that the price will significantly depend on whether there are 25 people willing to buy.  We could add a lot of options for the same price or just offer a simple board for less.
<br />
<br />I checked SRAM prices too and found some suprises.
<br />
<br />8KB     SRAM $2.37/2.75
<br />*32KB   SRAM $1.60/1.85
<br />256KB SRAM $5.05/5.86
<br />*512KB SRAM $5.12/6.25
<br />
<br />So 32KB was actually cheaper and smaller than 8KB and the difference between 256 and 512 for the PRG/CHR 'ROM' was negligible.
<br />
<br />So it looks like we'll end up with 32KB of WRAM and 512KB of PRG/CHR 'ROM'
<br />
<br />
<br />May as well put these on the plate too:
<br />XC95144XL-10TQG100C   144mcell 81ioCPLD  $5.55/5.80
<br />*XC95288XL-10TQG144C   288mcell 117io CPLD  $13.45/14.70
<br />
<br />For fun I looked up some dual ported SRAM:
<br />1KB   $5.87/8.47
<br />
<br />* I marked these with what I'm leaning towards for chips right now and the total is $29 for quanties of 25 and $35 for single quanties.
<br />
<br />This isn't everything obviously but it's the major silicon we're talking about.  All the extra stuff is going to put cost of parts close to $50 which will make it hard to ship for $50...  
<br />
<br />The only real place to make a significant dent in price is the CPLD by saving $8-9.  One option would be to step up from the TQ100 package to the TQ144 on the smaller CPLD for about $1.  Then people could pick their own.  It seems like the $8-9 is worth it to me to be able to use MMC3/FME-7 complexity level of mappers, when you're already laying down the money but you guys can be the judge of that.  It sounds like it might be overkill for most of you.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>13</strong> of <strong>14</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>