<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=7465" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-02-26T22:41:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=7465</id>
<entry>
<author><name><![CDATA[Hamtaro126]]></name></author>
<updated>2011-02-26T22:41:55-07:00</updated>
<published>2011-02-26T22:41:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=74674#p74674</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=74674#p74674"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=74674#p74674"><![CDATA[
<div class="quotetitle">tomaitheous wrote:</div><div class="quotecontent"><br />I have something kind of related. I wanted a way to upgrade some NES emulation projects that I had going. But all the approaches I looked at always involved breaking some sort of compatibility and/or writing to a lower level system hardware (though through NES cpu code) and also a tons of hacking of the original routines. So I looked at the OAM format. Found some unused bits and added addition graphic support. Extended PPU functionality:<br /><br /> <div class="codetitle"><b>Code:</b></div><div class="codecontent">   NES OAM attribyte byte:<br />    <br />          76543210<br />          ||||||||<br />          ||||||++- Palette &#40;4 to 7&#41; of sprite<br />          |||+++--- Extended<br />          ||+------ Priority &#40;0: in front of background; 1: behind background&#41;<br />          |+------- Flip sprite horizontally<br />          +-------- Flip sprite vertically<br />          <br />          Extended:<br />                  D2 = High palette bit<br />                  D4-D3: Sprite size<br />                        00b = 8x8   NES flipping based on 8x8<br />                        00b = 16x16 Native flipping  &#40;if upper palette bit set&#41;<br />                        01b = 32x16 Native flipping<br />                        10b = 16x32 Native flipping<br />                        11b = 32x32 Native flipping<br /></div><br /> Now I can have both original sprite support and extended sprite support. The colors are extended to 4bpp too, but I need to add some DMA commands that will write to the additional bit planes on vram. They're zero'd out normally, so normal NES tiles show as normal.<br /></div><br /><br />I was doing something like that, but I had two things: lack of coding and still using 8x16, not to mention it is a failure for any NESDev compatibility hardware-wise<br /><br />There was the VR Technologies VT03/VT02/Onebus, but it's documents were machine translated from chinese. and anyone who tried to redocument it left it for dead because of no more interest.<br /><br />CaH4e3 of FCEUMM and Russian Romhacking Fame decoded the Onebus Famiclone series part-way, but at 2011 there was no more news so far, But he still works at BMF and Xkeeper's ''The Cutting Room Floor'' Wiki<br /><br />EDIT:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   NES OAM attribyte byte &#40;specefication v0.2 alpha/discussion mode&#41;: <br />   Original by Tomaitheous of PCEDEV &#40;PC-ENGINE Dev forums&#41;<br /><br />          76543210 <br />          |||||||| <br />          ||||||++- Palette &#40;4 to 7&#41; of sprite** <br />          |||+++--- Extended/Enhanced NES Sprite support<br />          ||+------ Priority &#40;0: in front of background; 1: behind background&#41; <br />          |+------- Flip sprite horizontally <br />          +-------- Flip sprite vertically <br />          <br />          if it is Extended, original NES/Fami 8x16 mode must be <br />          disabled and must choose a extended Size specified below!<br /><br />          Extended:    000b = 8x8   2bpp NES - Original format<br />                       001b = 8x16  2bpp NES - Original format<br />                       010b = 16x16 2bpp NES - Extended format<br />                       011b = 8x8   4bpp SNES - Extended format<br />                       101b = 8x16  4bpp SNES - Extended format<br />                       110b = 16x16 4bpp SNES - Extended format<br />                       111b = 32x32 4bpp SNES - Extended format<br /><br /><br />  ** = Palette:        2bpp = Same as original - $3f00-$3f10<br />                       4bpp = Extended palette - $3f00-$3fff <br />                              <br />                              $3f00-3f0f for four 2bpp BG palette RAM <br />                              $3F10-3f4f for four 4bpp Sprite/OAM Palette RAM<br />                              $3F50-3fff Scratch RAM</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=287">Hamtaro126</a> — Sat Feb 26, 2011 10:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2011-02-26T22:00:38-07:00</updated>
<published>2011-02-26T22:00:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=74672#p74672</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=74672#p74672"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=74672#p74672"><![CDATA[
I have something kind of related. I wanted a way to upgrade some NES emulation projects that I had going. But all the approaches I looked at always involved breaking some sort of compatibility and/or writing to a lower level system hardware (though through NES cpu code) and also a tons of hacking of the original routines. So I looked at the OAM format. Found some unused bits and added addition graphic support. Extended PPU functionality:<br /><br /> <div class="codetitle"><b>Code:</b></div><div class="codecontent">   NES OAM attribyte byte:<br />    <br />          76543210<br />          ||||||||<br />          ||||||++- Palette &#40;4 to 7&#41; of sprite<br />          |||+++--- Extended<br />          ||+------ Priority &#40;0: in front of background; 1: behind background&#41;<br />          |+------- Flip sprite horizontally<br />          +-------- Flip sprite vertically<br />          <br />          Extended:<br />                  D2 = High palette bit<br />                  D4-D3: Sprite size<br />                        00b = 8x8   NES flipping based on 8x8<br />                        00b = 16x16 Native flipping  &#40;if upper palette bit set&#41;<br />                        01b = 32x16 Native flipping<br />                        10b = 16x32 Native flipping<br />                        11b = 32x32 Native flipping<br /></div><br /> Now I can have both original sprite support and extended sprite support. The colors are extended to 4bpp too, but I need to add some DMA commands that will write to the additional bit planes on vram. They're zero'd out normally, so normal NES tiles show as normal.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Sat Feb 26, 2011 10:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-02-13T22:28:11-07:00</updated>
<published>2011-02-13T22:28:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73969#p73969</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73969#p73969"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73969#p73969"><![CDATA[
Sounds a little over-complex to me, haha. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Whatever you decide on though? <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sun Feb 13, 2011 10:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-02-13T22:19:33-07:00</updated>
<published>2011-02-13T22:19:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73968#p73968</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73968#p73968"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73968#p73968"><![CDATA[
MMC7, that's funny.<br /><br />I guess it would be the first cart without PRG-ROM.  Of course the 2A03 still has to boot into something, but it's only 1 byte of ROM.  Program code/data would be stored in a serial Flash memory, the mapper would allow the PIC to copy (hopefully DMA) it into RAM whenever requested, even while the NES CPU and PPU are both using the memory.  The RAM isn't huge (and I don't think SDRAM will be fast enough), but it's plenty for use with bankswitching.<br /><br />This would be very different from any other mapper.  Instead of WRAM, maybe you'd want to map some CHR tiles or nametables into $6000-$7FFF and write to CHR anytime.  Maybe instead of CHR banking, something like MMC5's EXRAM could be used.  Just some options.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sun Feb 13, 2011 10:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-02-10T22:05:01-07:00</updated>
<published>2011-02-10T22:05:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73819#p73819</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73819#p73819"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73819#p73819"><![CDATA[
<div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />Why put PRG-RAM expansion on top of ROM? I hope you mean $6000-$7FFF. Makes it alot easier then putting it over ROM I think. Especially when you need to read ROM and RAM, I don't think it works like that on the NES?  <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /></div><br /><br />Yes, I mistyped.  I meant prog-rom.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Thu Feb 10, 2011 10:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-02-10T21:59:26-07:00</updated>
<published>2011-02-10T21:59:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73818#p73818</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73818#p73818"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73818#p73818"><![CDATA[
Why put PRG-RAM expansion on top of ROM? I hope you mean $6000-$7FFF. Makes it alot easier then putting it over ROM I think. Especially when you need to read ROM and RAM, I don't think it works like that on the NES?  <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Thu Feb 10, 2011 9:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-02-10T20:48:18-07:00</updated>
<published>2011-02-10T20:48:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73811#p73811</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73811#p73811"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73811#p73811"><![CDATA[
Maybe I was confusing.  prog-ram from $8000 to $dfff would be divided into 3x 8K banks, each individually swappable with any 8K aligned, 8K chunk of the entire prog-rom, upto the max prog-rom size.<br /><br />I would engineer a large game to use the CPU's address space as follows:<br /><br />$8000 to $9fff = map data<br />$a000 to $bfff = sound data<br />$c000 to $dfff = swappable game logic<br />$e000 to $ffff = kernel and "library" routines, NMI handlers, main control code.<br /><br />I assume that 8K chunks are easier, but in reality, I'd think that 8K is a bit over-kill or swapping sound data.  2K or 4K sized banks would probably be all that is needed for swapping sound data (2K per song set?)  However, I've never designed a mapper, so I have no idea how feasible it is to have different sized banks.<br /><br />Maybe just have 8x 4K banks, with the last one fixed.  Bank switching should be accomplished by a simple memory register write (not like MMC1 - takes way too many clock cycles).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Thu Feb 10, 2011 8:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-02-10T20:41:33-07:00</updated>
<published>2011-02-10T20:41:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73810#p73810</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73810#p73810"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73810#p73810"><![CDATA[
If we do this, I'd want 64K SRAM switching with 512KB CHR-RAM/ROM and 512KB PRG space. Agreed on PRG-bank being fixed being the last one, but I'd prefer 8KB chunks....or even adjustable size? <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><br />Hope we don't end up causing someone to do a ton of work, but if anyone wants to make their own mapper for shits and gigs, this'd be nice to tinker with. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br /><br />I'm sure even more homebrew start out like this... "I wanna make an NES game, hahah....how funny.....I guess I'll look into it."<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Thu Feb 10, 2011 8:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[clueless]]></name></author>
<updated>2011-02-10T20:29:01-07:00</updated>
<published>2011-02-10T20:29:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73809#p73809</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73809#p73809"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73809#p73809"><![CDATA[
<div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />MMC7? I'm in.<br /></div><br /><br /><strong>M</strong>embler's <strong>M</strong>aster <strong>C</strong>ontroller, version <strong>7</strong>.  Awesome.<br /><br />Seriously, Let's design a mapper that we want, get it into a few emulators for testing, port our games to it and make stuff.<br /><br />My mapper wish list:<br /><ol style="list-style-type: decimal"><li>prog-rom: $e000-$ffff = fixed</li><li>prog-rom: ROM from $8000 to $dfff swappable in 8K banks (8K alignment).</li><li>Up to 256K char-rom or char-ram, swappable in 16-sprite banks.</li><li>8K bram (but I can see making this larger and swappable in banks too).</li><li>2 IRQ scan-line counters. **</li></ol><br />My idea for how IRQ scanline - counting would work is as follows:<br /><ol style="list-style-type: decimal"><li>Game writes the desired scan-line (or scan-line minus one) to a pair of mapper registers, 0xf0 - 0xff to disable (just like a sprite Y coord).</li><li>In game's NMI handler, FIRST instruction after NMI is to "bit" another mapper register.  This triggers the countdown circuit inside the mapper.  (Basically, any read to this address triggers the countdown to start.  Can be abused mid-frame to get more than 2 IRQs per scan-line I guess)</li><li>IRQ automatically fires approximately during hblank at the end of the line before the desired scan-line.</li></ol><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3664">clueless</a> — Thu Feb 10, 2011 8:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-02-10T20:44:58-07:00</updated>
<published>2011-02-10T20:23:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73808#p73808</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73808#p73808"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73808#p73808"><![CDATA[
MIPS: Doesn't that stand for <a href="http://en.wikipedia.org/wiki/PlayStation_%28console%29#Technical_specifications" class="postlink">Microprocessor Inside PlayStation</a>?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 10, 2011 8:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-02-10T20:13:45-07:00</updated>
<published>2011-02-10T20:13:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73805#p73805</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73805#p73805"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73805#p73805"><![CDATA[
MMC7? I'm in.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Thu Feb 10, 2011 8:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-02-10T19:56:15-07:00</updated>
<published>2011-02-10T19:56:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73804#p73804</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73804#p73804"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73804#p73804"><![CDATA[
This is the same kind of "what-if" question that got me started on the Squeedo project.  I estimated the PIC18 I used was 5 times faster than the NES CPU.  The PIC I will use on the redesign might be be 50 times faster, I'm not sure exactly.<br /><br />I've been wanting to make the ultimate memory controller sometime too, that could be used with this and allow movements of obscene amounts of data on the PRG and CHR buses.<br /><br />If there was much interest in something like this, it could be helpful to the project.  I can make the hardware and stuff, but it pretty interesting if I'm not the only person to write software for it.  The newer one could be programmed in C and/or MIPS32 assembly (kinda amusing that it's related to the N64's CPU).  Seems like it would be easy to run a 6502 emulator on there.  Maybe one could have it use the PPU and sound registers to "emulate" the NES, running the code in a virtual machine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Feb 10, 2011 7:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-02-09T12:49:14-07:00</updated>
<published>2011-02-09T12:49:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73722#p73722</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73722#p73722"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73722#p73722"><![CDATA[
That is interesting, because then you could also do bitmapped graphics with an SDL-like NES PPU without limits of sprites, would be awesome. One bad thing is that software would have to put "sprites" on the screen from it, unless it has the bitmapped layer over/under it. Oh well what's it matter, that's too much. &gt;.&lt; And maybe we could also add image-loading already optimized. Haha, that part of SDL sucks ever since I worked through the tutorial. &gt;.&gt;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Wed Feb 09, 2011 12:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-02-09T09:34:00-07:00</updated>
<published>2011-02-09T09:34:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73717#p73717</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73717#p73717"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73717#p73717"><![CDATA[
The easy-to-program 2D PPU is the SDL graphics API. Because it uses a pair of frame buffers, there's no sprite limit apart from fill rate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Feb 09, 2011 9:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-02-09T09:26:08-07:00</updated>
<published>2011-02-09T09:26:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73716#p73716</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73716#p73716"/>
<title type="html"><![CDATA[A turbo NES...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7465&amp;p=73716#p73716"><![CDATA[
I think even the NES 6502 is good enough for maxing out what the PPU can do, I think you'd need to add more sprites without a scanline limit to need a better CPU to take advantage of anything. Anyone up for making some 2GHZ 6502's with some new 256-sprite no-limit sprites? That'd be amazing, the world needs an epic easy-to-progam 2D PPU, haha.  <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Wed Feb 09, 2011 9:26 am</p><hr />
]]></content>
</entry>
</feed>