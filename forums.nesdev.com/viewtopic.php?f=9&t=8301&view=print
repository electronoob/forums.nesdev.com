<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Some thoughts on a MCU-based sound extensions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Some thoughts on a MCU-based sound extensions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8301">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8301</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Nov 12, 2011 7:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Some thoughts on a MCU-based sound extensions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had some thoughts recently on a new MCU-based sound chip for homebrew games, maybe it could be interesting.
<br />
<br />Why: to add extra sound channels, either classic or brand new, in new games, without using old parts or doing much of programmable logic mumbo-jumbo that would require combination of special knowledge in few areas.
<br />
<br />It could be done on a simple low-cost MCU like <a href="http://www.swinkels.tvtom.pl/swinsid/" class="postlink">ATTiny13</a>. The cost of this chip is about $1 per chip in batch of 100, 8 pins, internal oscillator, 9-20 MIPS (&gt;9 requires external clock), this is comparable with extra RAM or ROM chip. Similar chips like cheap PICs will do too, I just know a bit more about AVRs.
<br />
<br />There is a number of AVR-based sound chip emulators, for example, few AY-3-8910 emulators (even Arduino one, written in C), or <a href="http://www.swinkels.tvtom.pl/swinsid/" class="postlink">SwinSID</a>. This means you easily can make a rather advanced sound chip on such MCU without having deep hardware knowledge, or even without programming in assembly code (for MCUs with larger program memory). <a href="http://www.youtube.com/watch?v=tLViRwxcB0Q" class="postlink">An example</a>.
<br />
<br />Such device would be very simple - just the MCU, with PWM-based DAC (no external DAC as in SwinSID), and some glue to connect it to the NES bus. That's a problem that needs to be solved. As there is low number of pins (otherwise costs is higher and everything is more complex), it could be done similar to MMC1 serial registers (or semi-serial, few bits per write), as you only need to feed few bytes per frame in a sound chip (&lt;20 for the APU), so this should be acceptable. I can imagine how it could be done with a register in a discrete logic mapper, but I'm not sure if it is possible to connect it without any extra parts, just by connecting MCU pins to certain lines. As I remember, its interrupts is not fast enough to react on WR or something. Anyway, once done, the same schematics could be used all the time, with different virtual sound chips programmed inside the MCU.
<br />
<br />Why I think it is important to use an 8-pin MCU without extra parts - you can easily put it on an existing board for testing (in a dead bug fashion), or modify an existing board layout a bit for production. With parallel connection, MCU with many pins, and extra parts you would need to design a new (larger) board for sure.
<br />
<br />What could be inside the MCU? For example, extra emulated APU square channels, with the same set of virtual registers as in real APU; or an emulator of some other existing NES sound extension (FDS, VRC6, N106); or emulator of some other chip that never was used with the NES (POKEY or SCC, for example). This way you won't need new software with support of a new chip to make content. You can even use it for a repro, it would require to adapt the part of code that writes data to the chip. Of course, some new almighty virtual sound chip could be created as well, but this would require new software to create content.
<br />
<br />Additionally, there is EEPROM in such MCUs, so it could be also used for saves with small amount of data, 64 bytes in case of ATTiny13. Another thing is that the same virtual sound chip could be implemented on different MCUs that is comparable by features, NES software part and content creation part could remain the same.
<br />
<br />Good and bad thing about it is that this thing would be not available in emulators right away, especially if you design a new virtual chip. For existing chips amount of work is minimal, just a new interface to existing code. So you would have something extra to offer in a cartridge release, that is simply not available under emulators, at least for some time, but you also would get some difficulties with developing your software.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Nov 12, 2011 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your idea of using an MCU to make mapper sound is a nice idea where it applies. I just have doubts as to where it would apply. There are several different target platforms for NES games: <ol style="list-style-type: lower-alpha"><li>60-pin consoles </li><li>Front-loading NES without the mapper sound mod </li><li>Top-loading NES without the mapper sound mod </li><li>NES with the mapper sound mod </li><li>Emulators </li></ol>
<br />An MCU emulating an existing mapper's interface would work on a, d, and e. An MCU with a new interface would work only on a and d. Target a never took off in the English-speaking world, and I've gathered that most NES users are unwilling to solder to make d. Target b can be turned into d if each game comes with a jumper pack that fits into the expansion port on the bottom, as with the extra RAM bundled with Donkey Kong 64, but how much would that cost?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Sat Nov 12, 2011 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A better way i've heard is a mcu in the cart running sound code. Then it triggers an irq aprox every frame/more and it feeds the nes dpcm and other sound channel data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Nov 12, 2011 9:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Technically it is easy to offload all the sound stuff to an MCU, if it has enough RAM to store a song, and NES will only ask it to play this and that instead of preparing sound data. But it still will have separate audio output with all the related problems.
<br />
<br />Unfortunately, if you want to output sound generated by MCU through NES DAC (to avoid HW mods), it would spend major amount of NES CPU time doing this - because you need to output a byte into the DAC at least 8000 times per second.
<br />
<br />Fastest IRQ handler for this case, as I imagine this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;pha<br />&nbsp;lda $mcu address ;require parallel connection and extra hardware to put at single certain address, not a simple thing anymore<br />&nbsp;sta $4011<br />&nbsp;pla<br />&nbsp;rti</div>
<br />
<br />It is 28t, with 8000 interrupts per second we have ~224t per sample - not that much, but in order to have the handler that simple we would need rather complex hardware part, and with simpler hardware it would be slower. There is also a problem that we probably wouldn't want to allow interrupts to happen in VBlank time, this would lead either to 50/60 hz buzz.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Nov 12, 2011 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Technically it is easy to offload all the sound stuff to an MCU, if it has enough RAM to store a song</div><br />Where have I heard this before? <a href="http://en.wikipedia.org/wiki/Sony_SPC_700" class="postlink">Sony</a>?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;pha<br />&nbsp;lda $mcu address ;require parallel connection and extra hardware to put at single certain address, not a simple thing anymore<br />&nbsp;sta $4011<br />&nbsp;pla<br />&nbsp;rti</div></div><br />Or if you manage to decode the MCU to $4011, you can use this handler, which needs no pushes and pulls:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; dec $4011<br />&nbsp; rti</div>
<br />This would depend on the output value being $01-$7F.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Nov 12, 2011 12:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know for sure, but I doubt it is possible to override access to a location that is decoded internally in the 2A03, it probably has priority. If it is possible, this would work well, although hardware probably would require a PLD for decoding logic, and if you have a PLD for sound purposes, you can implement other functionality there as well.
<br />
<br />My thoughts mostly had focus on very simple (and thus cheap) solutions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sat Nov 12, 2011 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only problem will be decoding the MCU, but that's at most a '138 away.
<br />
<br />With a 8-pin MCU you're limited to a 4-bit data bus, but with a 16-pin you'd have enough I/O to actually emulate existing chips (probably not very well). I think it's a good idea but I'd probably implement the chip myself, not reuse someone else's design.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Nov 12, 2011 8:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I don't know for sure, but I doubt it is possible to override access to a location that is decoded internally in the 2A03, it probably has priority. If it is possible, this would work well, although hardware probably would require a PLD for decoding logic, and if you have a PLD for sound purposes, you can implement other functionality there as well..</div>It is possible; the $4011 DAC port is a write-only port so it won't lead to a bus conflict if a  read-only peripheral is mapped there also.
<br />
<br />In fact, the only read-enabled ports in that area are $4015, $4016 and $4017. One only needs to decode A15,A14,A2 and A1 to avoid a bus conflict. Add A13 to not conflict with PRG-RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Nov 14, 2011 4:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I remember tepples mentioning that 'dec $4011' idea, that is ingenious.
<br />
<br />I don't know if the ATTiny has a multiply instruction, but a multiply and accumulate instruction would be even better for sample mixing w/ volume scaling.  But of course it depends on how many channels you want at a certain sample-rate.  From the MCUs I've looked at, the dsPIC seems like it would be a good performer for this.
<br />
<br />I'm assuming you've seen my older (back to 2004) posts that mention my Squeedo synth that was exactly this, a PIC18F452 generating sound while also doing other stuff for the NES.  There are old pics and samples <a href="http://www.parodius.com/~memblers/nes/squeedo/" class="postlink">here</a>.  My code was playing 256-byte wavetables, with 8-bit volume control, 4 channels @ 30khz mixing rate was working good while the MCU was simultaneously handling NES and UART comms.  So I think it could have gone faster if only doing sound.  PIC18F had a hardware 8x8 multiply, the audio interrupt code would have been much longer, and with more time length variations, without it.
<br />
<br />Microchip's MCUs are the only ones I've seen that include a 3-state parallel port that the NES can easily read and write.  But obviously that's not going to be on an 8-pin chip, and would be a $4 or $5 part.
<br />
<br />And after a long time, I had re-written my synth to be used on PIC32.  Simple wavetable, and Casio-style phase-distortion is supported now, but I want to do Yamaha-style FM on it also.  Just haven't worked on it lately because of the other boards and software I'm doing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Nov 14, 2011 4:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ATtiny family does not have hardware multiply, it is available in more advanced ATmega family (8x8). There are cheap chips in that family too, under $2, ATmega48 for example (4K flash, 512 bytes of RAM, 256 bytes of EEPROM, 28-32 pins). With an external oscillator you can get up to 20 MIPS, which is a lot - there is a hobbyist 'game console' <a href="http://uzebox.org/" class="postlink">Uzebox</a> based on a single ATmega chip that generates video signal with backgrounds and sprites, and chippy 4-channel sound, all completely in software, without even external RAM. I think a simple FM synth with good quality is doable.
<br />
<br />Haven't seen the Squeedo (I think I've heard this name before, though), that's nice that something already was done in this area.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Thu Nov 24, 2011 9:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">I don't know for sure, but I doubt it is possible to override access to a location that is decoded internally in the 2A03, it probably has priority. If it is possible, this would work well, although hardware probably would require a PLD for decoding logic, and if you have a PLD for sound purposes, you can implement other functionality there as well..</div>It is possible; the $4011 DAC port is a write-only port so it won't lead to a bus conflict if a  read-only peripheral is mapped there also.<br /><br />In fact, the only read-enabled ports in that area are $4015, $4016 and $4017. One only needs to decode A15,A14,A2 and A1 to avoid a bus conflict. Add A13 to not conflict with PRG-RAM.</div><br /><br />So I'm thinking about allowing for this dec $4011 option on the <a href="http://nesdev.com/bbs/viewtopic.php?t=7656&amp;start=195" class="postlink">NESDEV1</a>.<br /><br />My knowledge of this part of the NES isn't strong enough for me to be certain, so can someone confirm what @lidnariq is saying here (no offense lidnariq, I would just like to be sure)<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">  "In fact, the only read-enabled ports in that area are $4015, $4016 and $4017. One only needs to decode A15,A14,A2 and A1 to avoid a bus conflict. Add A13 to not conflict with PRG-RAM."</div>
<br />
<br />I've got the mcu and CPLD to do it, but I originally hadn't planned on connecting the CPLD up to PRG A7-0.  I'm not certain if I'll have the IO to do it just now, but I should have enough spares for A2 and A1 at a minimum.  
<br />
<br />As an aside, I've even got 7KB of dual ported RAM and a PLL available on the $7 CPLD (not 5v tolerant mind you...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Nov 25, 2011 11:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So I'm thinking about allowing for this dec $4011 option on the <a href="http://nesdev.com/bbs/viewtopic.php?t=7656&amp;start=195" class="postlink">NESDEV1</a>.<br /><br />My knowledge of this part of the NES isn't strong enough for me to be certain, so can someone confirm what @lidnariq is saying here (no offense lidnariq, I would just like to be sure)<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">  "In fact, the only read-enabled ports in that area are $4015, $4016 and $4017. One only needs to decode A15,A14,A2 and A1 to avoid a bus conflict. Add A13 to not conflict with PRG-RAM."</div>I've got the mcu and CPLD to do it, but I originally hadn't planned on connecting the CPLD up to PRG A7-0.  I'm not certain if I'll have the IO to do it just now, but I should have enough spares for A2 and A1 at a minimum.  <br /><br />As an aside, I've even got 7KB of dual ported RAM and a PLL available on the $7 CPLD (not 5v tolerant mind you...)</div>So here's my train of thought:
<br />
<br />The NES has internal registers from <a href="http://wiki.nesdev.com/w/index.php/2A03" class="postlink">$4000 through $401F</a>.
<br />
<br />$400x and $4010-4013 are all write-only (you can't read any of the APU status except via 4015). $4014 is also write only. $4015 is entirely internal. $4016 and $4017 conflict with the two 74'368s on the mainboard. <a href="http://wiki.nesdev.com/w/index.php/Talk:CPU_pin_out_and_signal_description" class="postlink">$4018-$401A</a> would be readable, but you'd have to desolder pin 30 and rewire it to +5V.
<br />
<br />So we do the binary math:
<br />
<br />We want a signal to be true when the address = $4011, and false when the address=$4015-7. We also want it to be false when the user is trying to read from PRGROM, and probably also from PRGRAM:<div class="codetitle"><b>Code:</b></div><div class="codecontent">$4011: 0100 0000 0001 0001 → T<br />$4015: 0100 0000 0001 0101 → F<br />$4016: 0100 0000 0001 0110 → F<br />$4017: 0100 0000 0001 0111 → F<br />$8xxx: 1xxx xxxx xxxx xxxx → F<br />$6xxx: 011x xxxx xxxx xxxx → F<br />all other addresses: don't care</div>In fact, I seem to have been a bit overzealous about A1: you need to pay attention to /ROMSEL (high), RnW (high), M2 (high), A14 (high), (optionally A13 (low) for PRGRAM compatibility), and A2 (low). This will map a read-only register at all addresses that look like - 010x xxxx xxxx x0xx, or $4000-4003, 4008-400B, 4010-4013, 4018-401B &amp;c.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Nov 26, 2011 12:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for more toughly explaining that.  That's basically what I figured was going on, but my knowledge of the registers didn't allow me to be certain.  I've got most of my CPLD pins assigned now, and it looks like I've got enough pins to support reading the full PRG (and CHR) buses to allow for testing things of this nature.
<br />
<br />So I'm a little unsure of how the whole dec $4011 works, but do you really need to decode the R/W?  It wouldn't seem you'd never actually be writing to the register on the cart, only reading right?  
<br />
<br />The way I'm understanding the instruction dec $4011 is: you'd be reading the value in the $4011 register stored on the cart, decrement it by one, then store it in the APU's $4011 register.  If we didn't decode R/W on the cart, the last write step would ahhh... cause a bus conflict on the last bit.  So YES we do need to decode R/W,  I guess I answered my own question but I'll leave it in case someone else wonders the same thing.
<br />
<br />In regards to the original post it would seem you'd need a 5-6 input decoder, an inverter or two,  and a register for logic.  Assuming we've got atleast two other logic chips onboard for a mapper we're talking about ~$3 of discrete logic, at that point you may as well throw a $3-4 small CPLD in there.  With a $2 atmega88 or something similar thrown in there you've got $6 in ICs aside from ROM/RAM and optional CIC.  It's starting to sound a lot like the squeedo...   But it sounds like a reasonable solution for what Shiru's looking for.  It definetly leaves plenty of room to make profit on a cart that was sold at a reasonable $25-40.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>