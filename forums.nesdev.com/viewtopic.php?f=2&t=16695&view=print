<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Translating fig-forth source to CA65</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Translating fig-forth source to CA65</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16695">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16695</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>russellsprouts</b> [ Fri Nov 10, 2017 3:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just to try it out I've been trying to translate the source code of fig-forth for 6502 to CA65. I've created a 6502 emulator with a NES-like memory map, but with RAM everywhere instead of ROM, and an extra IO port in the $4xxx area for reading from the keyboard and outputting to the console. The idea is that this emulator is the &quot;developer cart&quot;, and after the forth code is finished, I will freeze the RAM into a ROM file with a tiny bit of reset code. I'm working on writing my own forth which uses a mix of subroutine threading and inline code, but I want to get fig forth running first.<br /><br /><a href="https://www.dwheeler.com/6502/FIG6502.ASM" class="postlink">The original source is here.</a><br /><br />I don't know what assembler it was created for, but it's pretty straightforward. I've just had to add : for labels and convert ' into &quot;. There are a couple lines I'm not sure how to handle:<br /><br />Line 66: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">* = * + 2</div><br /><br />I assume that this is basically <div class="codetitle"><b>Code:</b></div><div class="codecontent">.res 2</div>?<br /><br />Line 93:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;&nbsp; &nbsp; The following offset adjusts all code fields to avoid an<br />;&nbsp; &nbsp; address ending $XXFF. This must be checked and altered on<br />;&nbsp; &nbsp; any alteration , for the indirect jump at W-1 to operate !<br />;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ORIGIN *+2<br /></div><br /><br />I understand the intent: the remaining code must be aligned correctly, because the indirect threaded interpreter invokes jump indirect on each address in the byte code. Does this mean that another .res 2 will give the right padding?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Nov 10, 2017 4:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I'd figure <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.origin *+2</tt> is the exact same thing as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">*=*+2</tt>.<br /><br />Code is kind of hard to follow so it's difficult to check whether it does what it promises, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Sat Nov 11, 2017 2:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">russellsprouts wrote:</div><div class="quotecontent">Just to try it out I've been trying to translate the source code of fig-forth for 6502 to CA65. I've created a 6502 emulator with a NES-like memory map, but with RAM everywhere instead of ROM, and an extra IO port in the $4xxx area for reading from the keyboard and outputting to the console. The idea is that this emulator is the &quot;developer cart&quot;, and after the forth code is finished, I will freeze the RAM into a ROM file</div><br />I don't remember for sure without looking back through it, but there may be places where variable data is mixed in with the code, so you'll have to separate that out to RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm working on writing my own forth which uses a mix of subroutine threading and inline code</div><br />Bruce Clark has <a href="http://forum.6502.org/viewtopic.php?p=3331#p3331" class="postlink">a good post</a> on 6502.org about how that's actually more memory-efficient than one would think.  He gives 9 reasons, starting in the middle of his long post in the middle of the page.  <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><a href="https://www.dwheeler.com/6502/FIG6502.ASM" class="postlink">The original source is here.</a><br /><br />I don't know what assembler it was created for</div><br />It's the Rockwell AIM-65.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I understand the intent: the remaining code must be aligned correctly, because the indirect threaded interpreter invokes jump indirect on each address in the byte code. Does this mean that another .res 2 will give the right padding?</div><br />The alignment was necessary because of the NMOS's JMP xxFF bug.  That (and all bugs) was corrected in the CMOS version, but I still kept the alignment in spite of the small memory penalty for other reasons I don't remember for sure.  I still use my '02 Forth frequently on the <a href="http://wilsonminesco.com/BenchCPU/" class="postlink">workbench</a>, but the innards have been in place for 20+ years and I have not paid attention to those details since I got settled on them.  What comes to mind is that the alignment made it easier to decompile (with the ANS word <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SEE</tt>).<br /><br />I would caution you about some bugs in the common 6502 Forths:<br /><ul><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">UM/MOD</tt> (unsigned mixed-precision divide and mod, to divide a 32-bit number by 16-bit number, giving a 16-bit quotient and 16-bit remainder) gives wrong results with high input numbers.  My fix is at <!-- m --><a class="postlink" href="http://6502.org/source/integers/ummodfix/ummodfix.htm">http://6502.org/source/integers/ummodfix/ummodfix.htm</a><!-- m --></li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">UM*</tt> (unsigned mixed-precision multiplication, to multiply two 16-bit numbers and get a 32-bit result; called <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">U*</tt> in fig-Forth) sometimes gives wrong results.  My fix it at <!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?f=9&amp;t=689">http://forum.6502.org/viewtopic.php?f=9&amp;t=689</a><!-- m -->, and others also added slight improvements in speed.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">D&lt;</tt> for which I give a fix at <!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?f=9&amp;t=2631">http://forum.6502.org/viewtopic.php?f=9&amp;t=2631</a><!-- m --> .</li></ul><br />Someone is pushing me just a little to publish my 65816 Forth.  I'd like to clean that up, and my '02 Forth as well, and put them on my website.  The '02 will be especially a lot of work.  These are much more full-featured than fig-Forth though.  My '816 Forth runs about 2.5 times as fast as my '02 Forth <em>at a given clock speed</em>, due to the 816's much more graceful handling of the 16-bit quantities.  Both these Forths are ITC; but the '816 made it practical and memory-efficient to have many hundreds of primitives (ie, code definitions), so that many of the words that were secondaries in '02 Forth now as primitives can dramatically reduce the incidence of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NEXT</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nest</tt>, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unnest</tt> in the process of getting a job done.  So there's even less overhead than STC's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">JSR</tt>-<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RTS</tt> combination during the running of the word.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>russellsprouts</b> [ Mon Nov 13, 2017 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks Garth. I suspected there might be issues with variables and things assuming dictionary space will stay in RAM. I don't really feel like rewriting a bunch of those. I'll probably just use the fig-forth code as a reference and implement mine to handle those issues.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Mon Nov 13, 2017 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The '02 Forth I started with, for ROM, using a metacompiler, used <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">HERE</tt> in the normal way, but used <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">THERE</tt> to keep track of where the next available RAM space was as the variables' NFAs, LFAs, and CFAs were built up in ROM as the kernel was compiled.  IOW, only the PFAs were in RAM.  It wouldn't take much to modify a source code to do this.  You only need to modify the definition of the one word, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">VARIABLE</tt>.  Then when the kernel runs from ROM, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">THERE</tt> is made to be the same as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">HERE</tt>, so there's no longer a difference.<br /><br />Edit: If you're using an assembler to build it and not a metacompiler, it will be a little different.  I'll try to look up what I did in later years for an assembly source and post again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Mon Nov 13, 2017 10:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Garth wrote:</div><div class="quotecontent">I'll try to look up what I did in later years for an assembly source and post again.</div><br />This is from my 65816 Forth, with A in 16-bit mode and index registers in 8-bit mode.  Things are pretty intertwined; but if you've been working with '02 ITC Forth, you probably have enough of a handle on it to figure things out from what's below.  The '816 is actually easier than 6502, since you don't have to handle the low and high bytes separately and watch for carries in between.  The following five snippets of code are separated by a lot of other material in my main 816FORTH.ASM file.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DPdata: EQU&nbsp; &nbsp; &nbsp;THERE<br />&nbsp;HEADER &quot;DP&quot;, NOT_IMMEDIATE&nbsp; ; HERE returns the contents of DP .<br />DP:&nbsp; &nbsp; &nbsp;VARIABLE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; DP is init'd by COLD, which stores the INIT_DP assembler constant in it.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; INIT_DP is in turn given the final value of THERE at the end of assembly.<br /><br /><br />const:&nbsp; LDY&nbsp; &nbsp; #&lt;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; runtime routine pointed to by the CFA of words created by CONSTANT<br />&nbsp; &nbsp; &nbsp; &nbsp; LDA&nbsp; &nbsp; (W),Y<br />PUSH:&nbsp; &nbsp;DEX2<br />PUT:&nbsp; &nbsp; PUT_TOS<br />&nbsp;;-------------------<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; VARIABLE below is for use by the assembler while it's creating the Forth<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; kernel.&nbsp; But when the kernel is running, it uses target_VARIABLE below.<br />VARIABLE:&nbsp; &nbsp; &nbsp; MACRO&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; VARIABLE is like a constant that points to the variable's data space.<br />&nbsp; &nbsp; &nbsp; &nbsp; DWL&nbsp; &nbsp; const, THERE<br />&nbsp;THERE: SETL&nbsp; &nbsp;THERE + 2&nbsp; &nbsp; &nbsp;; Increment that address by two.<br />&nbsp; &nbsp; &nbsp; &nbsp; ENDM<br />&nbsp;;-------------------<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; HEADER &quot;VARIABLE&quot;, NOT_IMMEDIATE&nbsp; &nbsp; &nbsp;; ( &lt;name&gt; -- )<br />target_VARIABLE:&nbsp; &nbsp;DWL&nbsp; &nbsp;nest, CREATE, ZERO, COMMA, unnest<br />&nbsp;;-------------------<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; HEADER &quot;HERE&quot;, NOT_IMMEDIATE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; ( -- addr )<br />HERE:&nbsp; &nbsp;PRIMITIVE<br />&nbsp; &nbsp; &nbsp; &nbsp; LDA&nbsp; &nbsp; &nbsp;DPdata<br />&nbsp; &nbsp; &nbsp; &nbsp; JMP&nbsp; &nbsp; &nbsp;PUSH<br />&nbsp;;-------------------<br /></div><br /><ul><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DWL</tt>  is the C32 assembler's &quot;Define Word, Low byte first,&quot; which I think is like other assemblers' <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.WORD</tt>.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SETL</tt> is the C32 assembler's &quot;SET Label,&quot; like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">EQU</tt> but it can be changed as many times as you like.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DEX2</tt> is just the macro that lays down <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DEX DEX</tt>, to shorten the source-code file since this in needed so many times in Forth.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PUT_TOS</tt> is the macro that lays down the two instructions to put A in the cell at the top of the data stack (with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STA 0,X</tt>) and jumps to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NEXT</tt>.  I did it in a macro because there are a couple of choices for how to do it, and you only have to set the choice in one place and then all the macro invocations will do it the same way.  It's to allow interrupt service in high-level Forth, and to use a different NEXT like if you want to do a trace, or something like that.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">HEADER</tt> is the macro that lays down the name and link fields.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">NOT_IMMEDIATE</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">IMMEDIATE</tt> are assembler constants (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">EQU</tt>ates) given as a parameter to the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">HEADER</tt> macro to tell it what smudge bit value to put in the name field.</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PRIMITIVE</tt> is the macro that just lays down a two-byte code field pointing to the parameter field, with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DWL $ + WSIZE</tt>, to indicate that the machine-language code for the word starts immediately following.</li></ul><br />If that's all as clear as mud, ask your questions and I'll try to clarify it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Tue Nov 14, 2017 2:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Translating fig-forth source to CA65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll add another note.  My <a href="http://wilsonminesco.com/stacks/" class="postlink">6502 stacks treatise</a> has <a href="http://wilsonminesco.com/stacks/StackOps.ASM" class="postlink">Appendix A</a> which is a big start on a STC Forth, intended for someone who wants to be able to do assembly language in a very Forth-like way without necessarily using Forth.  (I say &quot;big start&quot; because although the stacks treatise was finished and posted a couple of years ago, I never finished this appendix.  It should still save you a substantial amount of work though.)<br /><br />The following paragraphs are a slight tweak of the text at the top of that file.<br /><br />The material there is much of what you would need to do a subroutine-threaded code (STC) '02 Forth.  It has the stack operations for simple math, logic, memory, strings, etc., and if I ever get around to finishing it, it will also have things like trig, log, square-root functions.  I've added another major feature to the site after I posted the stacks treatise, and the next major one will probably be my '816 Forth.  Your work on your '02 STC Forth, if you share it russellsprouts, may help me finish up this Appendix A.<br /><br />What it is primarily missing for doing a STC Forth is the components for doing its own compiling and for interpreting command lines (since there are no headers here for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">WORD</tt> to find the addresses of various routines), and compiling the control structures.<br /><br />ZP data stack cell size throughout is 16 bits, ie, two bytes.  Double-precision numbers take 32 bits, or two cells of two bytes each, ie, four bytes total.  Characters or bytes still take 16 bits, but the high byte is zeroed.<br /><br />For individual cells, byte order is the same as 6502: low byte first.  For double-precision numbers, the low cell is pushed onto the stack, followed by the high cell.  So if you have a double-precision number that's small enough to fit in a single cell (without changing the sign), you can convert the double to a single with just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">DROP</tt> (in fact, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">StoD</tt> uses the same code).<br /><br />Most of these get much shorter on the 65816 since it is far more efficient at handling 16-bit quantities.  816StackOps.ASM (Appendix B) is planned for that.  Right now there's just a placeholder file for it.<br />  <br />Have an 8-byte section of ZP called <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">N</tt>, for routines' temporary storage.  <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">N</tt>-1 is also used, so don't have something else coming right up to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">N</tt>.  <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">N</tt> is introduced 80% of the way down the page in section 4 of the stack treatise on virtual stacks.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>