<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - The NESticle high-pitched sound</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">The NESticle high-pitched sound</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3808">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3808</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Dec 30, 2007 7:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>The NESticle high-pitched sound</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- It's archaic, but <strong>now</strong> I know the reason. In the early releases of that emulator, we had an high-pitched sound output. Why? <strong>Probably</strong> because he (the author) couldn't set a 60Hz mode, though he used what's "acceptable", the 62,5Hz. I'm not saying a "60Hz video refresh", but a way to display exactly 60 frames per second during the emulation. Yaya, even the NES isn't <strong>exactly</strong> 60 FPS, but come on... <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />
<br />- I tested this thing in my emu to understand the reason of Allegro's sound output being gasping during the game play... and it worked. The sound was in sync with the frame rate.
<br />
<br />- Technically, there are two explanations, but I know only one of them. If you do 1000/60 = 16.6667 milliseconds per frame and, technically, the lowest unit of time is 1 millisecond, acceptable in the Allegro library (and perhaps Windows too?).
<br />
<br />- Here's my "unknown" part: plenty of emulators CAN perform 60Hz, I've read a few tidbits there and there, but never a crystal solution. Perhaps by switching into DirectX programming, but what if NOT ? -_-;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Dec 30, 2007 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you delay frames by the repeating pattern 16, 17, 17, 16, 17, 17 ...  then the average is exactly 16.666666... msec between frames. Moral of the story: regardless of timing granularity, you can <em>on average</em> get a delay to any precision you like. You could have the average delay be exactly 16.1234567 msec, even though you can only delay by whole milliseconds.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Dec 30, 2007 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: The NESticle high-pitched sound</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't recall the high pitched sound you're talking about.  So I don't know what NESticle's issue was.
<br />
<br /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">I'm not saying a "60Hz video refresh", but a way to display exactly 60 frames per second during the emulation. Yaya, even the NES isn't <strong>exactly</strong> 60 FPS, but come on... ;)</div><br /><br />You <em>need</em> to sync to sound (which would produce a ~60.1 Hz framerate) unless you do one of the following work arounds:<br /><br />- modify the APU (CPU) clock to run slightly slower, so less audio samples are produced each frame (this will lower the pitch of generated audio, and, if you modify the CPU time, will possibly break timing in some games)<br /><br />- produce more or less audio samples on demand by clocking tone generators more or less as needed (this will cause crackling in games which do timed writes to $4011)<br /><br /><br />If you do not do one of those two things, and you hold a steady 60 Hz framerate... your sound <em>will</em> break, probably in the form of buffer overflow (since you'll be producing audio faster than you're outputting it) which will result in a "crack" or break in the audio every few seconds -- the severity of which can differ depending on how you're streaming audio.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- I tested this thing in my emu to understand the reason of Allegro's sound output being gasping during the game play... and it worked. The sound was in sync with the frame rate.</div><br /><br />This "gasping" is probably your buffer overflowing for the reason mentioned above.  I don't know what you're doing now to solve it, but it must be some form of one of the above 3 options.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- Technically, there are two explanations, but I know only one of them. If you do 1000/60 = 16.6667 milliseconds per frame and, technically, the lowest unit of time is 1 millisecond, acceptable in the Allegro library (and perhaps Windows too?).<br /></div><br /><br />Only way to get exactly 16.666667 milliseconds between each frame <em>without</em> eating 100% CPU time would be to VSync (and that would only work if the monitor is set to 60 Hz).  An exact framerate isn't all <em>that</em> important, just so long as gameplay isn't jerky.<br /><br />One of the two timing mechanisms I would recommend is:<br /><br />- sync to sound:  do 1 frame when you are able to output 1 frame's worth of audio.  Since your audio buffers empty as the audio is played, this can be used for a steady framerate.  Plus it gives you the ideal 60.1 Hz framerate.<br /><br />- time using the clock (1 frame every 16.6667 milliseconds).  You can fall back to this when you're not outputting audio or if you have some other way to prevent audio from breaking.<br /><br />But I'm really convinced syncing to sound is the best option.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- Here's my "unknown" part: plenty of emulators CAN perform 60Hz, I've read a few tidbits there and there, but never a crystal solution. Perhaps by switching into DirectX programming, but what if NOT ? -_-;;</div>
<br />
<br />You can land exactly 60 Hz <em>IF</em> you VSync and <em>IF</em> the user's monitor is set to 60 Hz refresh rate.  But note <em>vsyncing is not a good way to regulate your framerate</em> unless you specifically change the monitor refresh rate to 60 Hz (which would probably piss more people off than it'd help).  I run my monitor at 75 Hz, and I know a lot of people that run theirs at 100+, so if you use VSync to set your framerate, your emu will run <em>way too fast</em> on our computers.
<br />
<br />You don't need to use DirectX to VSync... but I do think it's platform dependent.  Some crossplatform libraries have a way to do it (SDL+OpenGL can do it) -- I don't know if allegro does.
<br />
<br />Vsync is a great way to smooth out the framerate to make it less jerky.  Though if you use it combined with syncing to sound, you'll end up having to skip a frame every once in a while.
<br />
<br />
<br />Anyway I don't know if I helped or if I just confused you more  XD

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Dec 31, 2007 1:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you do not do one of those two things, and you hold a steady 60 Hz framerate... your sound will break, probably in the form of buffer overflow (since you'll be producing audio faster than you're outputting it) which will result in a "crack" or break in the audio every few seconds -- the severity of which can differ depending on how you're streaming audio.</div>
<br />Wouldn't the sound driver block if the sound buffer was full? And it blocking would be exactly what you need to slow graphics down when needed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Dec 31, 2007 10:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think it depends on the API you're using.  From my experiences, APIs usually use a callback setup where they call a function of yours when more audio is needed, and they specify how much audio you need to supply (SDL and FMod work this way -- at least from what I remember of FMod -- it's been a while).  It's a little funky to work like this in SDL because you can't even return how many bytes you have actually written to the buffer -- it just expects that you wrote exactly how much it requested.
<br />
<br />DirectSound is the only API I've used that works differently.  It worked where you could manually poll the state of the streaming audio (see where in the buffer the "play cursor" is) and then lock portions of the buffer and write to them as needed.  I'm not sure what happens if you try to lock the part of the buffer that's currently being played or if you write past the end of the portion you locked, but I'd wager that results would either be undefined, undesirable, or the call to Lock would fail.
<br />
<br />I haven't used an audio library that blocked or stalled when you fed it too much audio.  I don't know if it's my sound card or drivers, or if it's library dependent.
<br />
<br />
<br />
<br />Also -- now that I think about this more, I think I had things backwards.  If you're outputting 60 Hz and the audio would require a framerate of 60.1 Hz -- you'd have <em>underrun</em>, over overrun (since you're producing <em>less</em> audio than you'd need for a 60 Hz framerate).  I don't know why I mixed that up before, but yeah.  I'm pretty sure underrun would be a problem on any API.
<br />
<br />&lt;/ramble&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 31, 2007 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">I think it depends on the API you're using.  From my experiences, APIs usually use a callback setup where they call a function of yours when more audio is needed, and they specify how much audio you need to supply (SDL and FMod work this way -- at least from what I remember of FMod -- it's been a while).  It's a little funky to work like this in SDL because you can't even return how many bytes you have actually written to the buffer -- it just expects that you wrote exactly how much it requested.</div>
<br />Allegro works similarly: in the main loop, the program asks the library whether or not the library needs new sound. If so, the library returns a pointer to block of memory to be filled; if not, the library returns NULL.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Mon Dec 31, 2007 11:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- That's why I asked about the number of cycles per second. If you take the PPU timing, we have 341/3 cycles per line, 262 lines, 60 frames per second, making exactly 1786840 cycles per second. This is my reference. If you take the CPU timing, we have a different number.
<br />
<br />- About Allegro, well... I'm trying to make the sound output using a non-blocking way, since the blocking way (a "while" loop polling the audiostream, waiting for the next valid buffer) causes a frameskip effect, thus the emulation isn't smooth. The non-blocking polls the audiostream at every frame, or 1/60th second. When the NES sound buffer is full, if the audiostream has a valid buffer, the sound data is transfered; else, that's the soundskip effect. However, this way is performed in a few emulators as far as I know.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Dec 31, 2007 12:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- That's why I asked about the number of cycles per second. If you take the PPU timing, we have 341/3 cycles per line, 262 lines, 60 frames per second, making exactly 1786840 cycles per second. This is my reference. If you take the CPU timing, we have a different number.</div>
<br />
<br />Yeah -- which is why you can't have 60 FPS if you want the right APU/CPU frequency.  You need to do the ~60.1 FPS
<br />
<br />NTSC CPU clock = 1789772.727272
<br />
<br />NTSC frame = 262 scanlines * 341 cycles per scanline / 3 PPU cycs per CPU cycle = 29780.666667 CPU cycles per frame
<br />
<br />1789772.727272 / 29780.6666667 = ~60.09847  FPS
<br />
<br />
<br />Gotta go... will respond more when I get back

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 31, 2007 8:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- That's why I asked about the number of cycles per second. If you take the PPU timing, we have 341/3 cycles per line, 262 lines, 60 frames per second, making exactly 1786840 cycles per second. This is my reference. If you take the CPU timing, we have a different number.</div><br />Yeah -- which is why you can't have 60 FPS if you want the right APU/CPU frequency.  You need to do the ~60.1 FPS</div>
<br />But will people care about the right CPU/APU frequency?
<br />
<br />An octave is the ratio 2:1 between two pitches. This octave is divided into 1200 logarithmic units called "cents", where 1 cent = a factor of 1.00057779. The ratio of the NES true field rate (60.0988 Hz) to the VGA nominal field rate (60 Hz) is 1.001646, or about 2.8 cents. But <a href="http://en.wikipedia.org/wiki/Pitch_%28music%29" class="postlink">"Pitch" on Wikipedia</a> as well as the <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/music/cents.html#c4" class="postlink">cents page</a> states that the human auditory system generally cannot notice pitch differences smaller than five or six cents. So in NTSC NES mode, you might as well underclock the emulated NES to 1786840 Hz, and set the sound playback frequency based on that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Dec 31, 2007 9:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Potential timing/accuracy issues aside (they can all be worked around), I guess it doesn't matter all that much.
<br />
<br />But then again... would people care about an even 60 FPS?  The difference works out to almost 1 less frame every 10 seconds (that's longer than it sounds -- try just sitting and counting to 10... it's actually quite a while).  Well beyond what anyone can be expected to notice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Dec 31, 2007 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem with generating more frames per second than a typical display can show is that the vsync code might block your emulator occasionally, causing a breakup in audio. Sure, you could have your vsync code skip an emulated frame every once in a while, but it's simpler to just have the emulator generate 60 or fewer frames per second, and let the blocking occur in audio, since an emulated frame shown twice as long as normal is much less noticeable than a dropout in audio. As tepples said, this merely means reducing the amount of emulated time per real second slightly; where originally one second was emulated every real second, now ~0.9983567 seconds would be emulated every real second, with a corresponding <em>decrease</em> in sound pitch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jan 01, 2008 8:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">But then again... would people care about an even 60 FPS?  The difference works out to almost 1 less frame every 10 seconds (that's longer than it sounds -- try just sitting and counting to 10... it's actually quite a while).  Well beyond what anyone can be expected to notice.</div>
<br />Some games used a single bright frame to represent a lightning flash. If that happens to coincide with a dropped frame, the user will notice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Jan 01, 2008 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- If not wrong, Allegro's <em>rest(15)</em> takes <strong>much more time</strong> than 15/1000 of a second when executed sequentially. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> WTF?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jan 01, 2008 10:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">- If not wrong, Allegro's <em>rest(15)</em> takes <strong>much more time</strong> than 15/1000 of a second when executed sequentially. :D WTF?</div>
<br />Usually a delay routine only guarantees that <em>at least</em> the specified amount of time passes, <em>not</em> that no more than that will pass. Thus, delays aren't useful for long-term timing, just as an a more friendly alternative to a loop that constantly waits until enough time has passed (by reading the current time repeatedly). As long as you have a readable timer that has a resolution of 1/60 second, or several times that, you should be fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Wed Jan 02, 2008 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's the price of being away 1 year from the programming world... <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>