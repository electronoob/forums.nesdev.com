<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=12459" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-03-24T14:00:54-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=12459</id>
<entry>
<author><name><![CDATA[Ramsis]]></name></author>
<updated>2015-03-24T14:00:54-07:00</updated>
<published>2015-03-24T14:00:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143696#p143696</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143696#p143696"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143696#p143696"><![CDATA[
Hey, Mike!<br /><br /><div class="quotetitle">mstram wrote:</div><div class="quotecontent"><br />Have you managed to import those files into an emulator / real SNES ?<br /></div><br />There are indeed people who have. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /><br /><div class="quotetitle">mstram wrote:</div><div class="quotecontent"><br />Maybe some of that code can be used to play SNESGSS's  spc700.bin file ?<br /></div><br />SNESGSS contains a full-fledged SNES sound driver of its own, i.e. to even use SNESGSS for making SNES music implies that you won't be needing to bother about any other SPC700 driver for uploading the software's output to the SPC700 (in fact, that's the whole point of SNESGSS). <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />So after everything that's been posted so far about getting SNESGSS to work, I'm afraid you'll have to get a tad more specific on what doesn't work for you, exactly. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />Ramsis<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5345">Ramsis</a> — Tue Mar 24, 2015 2:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UnDisbeliever]]></name></author>
<updated>2015-03-24T10:34:50-07:00</updated>
<published>2015-03-24T10:34:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143670#p143670</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143670#p143670"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143670#p143670"><![CDATA[
<div class="quotetitle">mstram wrote:</div><div class="quotecontent"><br /><div class="quotetitle">UnDisbeliever wrote:</div><div class="quotecontent"><br />I spent a little while looking at SNESGSS last week and noticed it is meant to be called using the tcc-65816 C compiler syntax (<a href="https://code.google.com/p/snes-sdk/" class="postlink">Google Code Project</a>).<br /></div><br /><br />Where did you &quot;notice&quot; that ?<br /></div><br /><br />Experience.<br /><br /><a href="https://code.google.com/p/snesgss/source/browse/trunk/snes/sneslib.h" class="postlink">sneslib.h</a> is a C header file for <a href="https://code.google.com/p/snesgss/source/browse/trunk/snes/sneslib.asm" class="postlink">sneslib.asm</a>. sneslib.asm also contains tcc temp registers (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">tcc__r0</tt>) and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__tcc_</tt> prefixes for the global variables.<br /><br /><br /><div class="quotetitle">mstram wrote:</div><div class="quotecontent"><br />Have you managed to import those files into an emulator / real SNES ?<br /></div><br /><br />No I have not, I currently focusing my efforts to learn 65816 game programming patterns and hoping (fingers crossed) that someone else (looking at Khaz  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> ) manages to improve the state of homebrew SNES Sound code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6909">UnDisbeliever</a> — Tue Mar 24, 2015 10:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mstram]]></name></author>
<updated>2015-03-24T04:55:05-07:00</updated>
<published>2015-03-24T04:55:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143653#p143653</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143653#p143653"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143653#p143653"><![CDATA[
<div class="quotetitle">UnDisbeliever wrote:</div><div class="quotecontent"><br />I spent a little while looking at SNESGSS last week and noticed it is meant to be called using the tcc-65816 C compiler syntax (<a href="https://code.google.com/p/snes-sdk/" class="postlink">Google Code Project</a>).<br /></div><br /><br />Where did you &quot;notice&quot; that ?<br /><br />The readme.txt included with the SNESGSS editor just has some brief information on the export formats of the files, and load addresses etc.<br /><br />Looks like something messy / unfinished <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" />.<br /><br />I.e. compared to the &quot;hi level&quot; nature of the music editor, the export functions are &quot;unfinished&quot; / low-level.<br /><br />Have you managed to import those files into an emulator / real SNES ?<br /><br />mic_ has posted a working SPC player here :<br /><br /> <!-- m --><a class="postlink" href="http://jiggawatt.org/badc0de/spcplayer-1.3.zip">http://jiggawatt.org/badc0de/spcplayer-1.3.zip</a><!-- m -->  (thread : <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=5765&amp;start=60">viewtopic.php?f=12&amp;t=5765&amp;start=60</a><!-- l -->)<br /><br />But that is for a &quot;standard  64k SPC file&quot;  or at least &quot;common &quot; ?<br /><br />Maybe some of that code can be used to play SNESGSS's  spc700.bin file ?<br /><br />Mike<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6937">mstram</a> — Tue Mar 24, 2015 4:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Ramsis]]></name></author>
<updated>2015-03-24T03:48:28-07:00</updated>
<published>2015-03-24T03:48:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143652#p143652</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143652#p143652"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143652#p143652"><![CDATA[
Hey, Khaz,<br /><br />what UnDisbeliever says. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Personally though, I don't favor using the stack for passing multiple parameters to a subroutine either, the two major disadvantages being 1) the increased risk of crashes related to stack overflow, and 2) the necessity to correct the stack pointer each and every time. So currently, I use variables just like you do.<br /><br />This, however ...<br /><br /><div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    jsl subRoutine<br />    .DC parameter<br />returnAddress:</div><br /></div><br /><br />... is a great way to pass e.g. a text string to a subroutine. In fact, I incorporated this method into my WIP PowerPak codebase a while back, shortening the PrintString macro to basically what you posted. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />The PrintF subroutine now processes text strings like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PrintF:<br />   plx               ; pull return address (-1) from stack, which is actually the string address (-1)<br />   inx               ; make X = start of string<br /><br />   ----- snip -----<br />   &#91;string processing with X as char pointer, X register eventually points to the NUL terminator&#93;<br />   ----- snip -----<br /><br />   phx               ; push return address (-1) onto stack<br />rts<br /></div><br /><br />Neat, huh? <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> I got the idea from the <a href="http://www.romhacking.net/documents/423/" class="postlink">official WDC 65816 program manual</a> (pp. 182-191), generally a recommended read! <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Ramsis<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5345">Ramsis</a> — Tue Mar 24, 2015 3:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UnDisbeliever]]></name></author>
<updated>2015-03-24T01:48:35-07:00</updated>
<published>2015-03-24T01:48:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143649#p143649</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143649#p143649"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143649#p143649"><![CDATA[
<div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br />On that subject, how is it intended that you use the stack-relative addressing SNESGSS is natively written in?<br /></div><br /><br />I spent a little while looking at SNESGSS last week and noticed it is meant to be called using the tcc-65816 C compiler syntax (<a href="https://code.google.com/p/snes-sdk/" class="postlink">Google Code Project</a>).<br /><br /><ol style="list-style-type: decimal"><li> Push values to stack</li><li> JSL routine (with 16 bit A and Index)</li><li> Move stack pointer back</li></ol><br />Running a few examples through the compiler we get:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; void spc_command(unsigned int command,unsigned int param);<br />; spc_command(12, 34);<br /><br />pea.w 34<br />pea.w 12<br />jsr.l spc_command<br />tsa<br />clc<br />adc #4<br />tas<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; void spc_command(unsigned int command,unsigned int param);<br />; int p;<br />; spc_command(p, 34);<br /><br />pea.w 34<br />lda 0 + __main_locals + 1,s<br />pha<br />jsr.l spc_command<br />tsa<br />clc<br />adc #4<br />tas<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; void copy_to_vram(unsigned int adr,const unsigned char *src,unsigned int size);<br />; extern static unsigned char *source;<br />; copy_to_vram(0x4000, source, 256);<br /><br />pea.w 256<br />lda.l __tccs_source + 0<br />sta.b tcc__r0<br />lda.l __tccs_source + 0 + 2<br />pha<br />pei (tcc__r0)<br />pea.w 16384<br />jsr.l copy_to_vram<br />tsa<br />clc<br />adc #8<br />tas<br /></div><br /><br />Two things to note:<br /><ul><li>The normal mode of the compiler is 16 bit A, 16 bit Index</li><li>All pointers are 4 bytes, the MSB is blank</li></ul><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6909">UnDisbeliever</a> — Tue Mar 24, 2015 1:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-03-23T09:20:40-07:00</updated>
<published>2015-03-23T09:20:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143606#p143606</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143606#p143606"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143606#p143606"><![CDATA[
Okay, so, most of what you need is inside the <a href="https://code.google.com/p/snesgss/source/browse/trunk/snes/sneslib.asm" class="postlink">sneslib.asm</a> file.  When the system is powered up it's put into a default recieve-data state.  The first thing you need to do is load the SNESGSS driver code (&quot;spc700.bin&quot;) into it so that it can accept the commands that come with SNESGSS.  I have a tiny function run once on power on to do that:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SPC_INITIAL_TRANSFER:<br />   php<br />   rep #$20         ;16 bit A<br /><br />   lda #:spc700_code_01<br />   sta GSS_SPC_DATA_BANK<br /><br />   lda #spc700_code_01+2<br />   sta GSS_SPC_DATA_OFFS<br /><br />   lda.l spc700_code_01<br />   sta GSS_SPC_DATA_SIZE<br /><br />   lda #$0200<br />   sta GSS_SPC_DATA_ADDR<br /><br />   jsl spc_load_data      ;load snesgss spc code<br /><br />   plp<br />   rtl</div><br />Which is pretty much just taken straight out of the larger main &quot;load music&quot; routine that I based on Ramsis's posted code from a while back.  The only difference is that since the SPC boots into a recieve-data state, you don't (read: can't) issue the &quot;LOAD&quot; command the first time.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadMusic02:<br />   php<br /><br />   jsl music_stop<br /><br />   rep #$20         ;16 bit A<br /><br />   lda.w #SCMD_LOAD<br />   sta gss_command<br />   stz gss_param<br />   jsl spc_command_asm      ;issue SCMD_LOAD command<br /><br />   rep #$20         ;16 bit A<br /><br />   lda #:spc700_code_02<br />   sta GSS_SPC_DATA_BANK<br /><br />   lda #spc700_code_02+2<br />   sta GSS_SPC_DATA_OFFS<br /><br />   lda.l spc700_code_02<br />   sta GSS_SPC_DATA_SIZE<br /><br />   lda #$0200<br />   sta GSS_SPC_DATA_ADDR<br /><br />   jsl spc_load_data<br /><br />   rep #$20         ;16 bit A<br /><br />   lda.w #SCMD_LOAD<br />   sta gss_command<br />   stz gss_param<br />   jsl spc_command_asm      ;issue SCMD_LOAD command<br /><br />   rep #$20         ;16 bit A<br /><br />   lda #:music_02_data<br />   sta GSS_SPC_DATA_BANK<br /><br />   lda #music_02_data+2<br />   sta GSS_SPC_DATA_OFFS<br /><br />   lda.l music_02_data<br />   sta GSS_SPC_DATA_SIZE<br /><br />   lda.l spc700_code_02+14<br />   sta GSS_SPC_DATA_ADDR<br /><br />   jsl spc_load_data<br /><br />   rep #$20         ;16 bit A<br /><br />   lda.w #SCMD_INITIALIZE<br />   sta gss_command<br />   stz gss_param<br />   jsl spc_command_asm<br /><br />   rep #$20         ;16 bit A<br /><br />   lda.w #SCMD_STEREO<br />   sta gss_command<br />   lda.w #$0001<br />   sta gss_param<br />   jsl spc_command_asm<br /><br />   rep #$20         ;16 bit A<br /><br />   lda #$00FF<br />   sta GSS_SPC_VOL_FADESPD<br /><br />   lda #$007F<br />   sta GSS_SPC_VOL_CURRENT<br />   jsl spc_global_volume<br /><br />   rep #$20         ;16 bit A<br /><br />   lda.w #SCMD_MUSIC_PLAY<br />   sta gss_command<br />   stz gss_param<br />   jsl spc_command_asm<br /><br />   sep #$20         ;8 bit A<br /><br />   plp<br />   rtl</div><br />I had to make some adjustments to load_data to fit my build as I don't have free space on the &quot;zero page&quot;, and stack-relative addressing kinda freaks me out, so I just allocated some variables instead of their method of passing data into the load_data subroutine (so say &quot;lda 7,s&quot; becomes &quot;lda GSS_SPC_DATA_SIZE&quot;).  I also had to move the direct page just to use the one &quot;direct page indirect Y&quot; (sic, the one with the []s) instruction.<br /><br />(On that subject, how is it intended that you use the stack-relative addressing SNESGSS is natively written in?  I saw in the 65816 &quot;manual&quot; an example like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    jsl subRoutine<br />    .DC parameter<br />returnAddress:</div><br />I'm not familiar with &quot;DC&quot;, and it seems a pain to retrieve it this way on the other end.  Only other thought is to push before the subroutine call and pull after.)<br /><br />Note also as was said in the earlier thread, anytime you're reading an APU register waiting to see a specific value, you have a very narrow time window to catch it so you can't afford to have an interrupt hit and make you miss it.  So, in spc_command_asm and anywhere else you're doing that, you'll have to add in the same disable-interrupts bit like in load_data.<br /><br />Anyways.  That's about as far as I've got.  I haven't attempted to use the SFX_play function yet.  I need to figure out how to build a sound effect first.  If you can't get it to work let me know where you've hit a problem and I'll try to help.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Mon Mar 23, 2015 9:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mstram]]></name></author>
<updated>2015-03-23T00:29:11-07:00</updated>
<published>2015-03-23T00:29:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143580#p143580</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143580#p143580"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143580#p143580"><![CDATA[
<div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br />Okay I knew it was going to be something simple.  You have to transfer the spc data WITHOUT issuing the load command the first time.  It works now!  Thank you again very much for all the help, I really appreciate it.<br /><br />Can't get pause to work though, it just seems to stop it...<br /></div><br /><br />Hi Khaz,<br /><br />Can you post your player source code ?<br /><br />I just started playing with snesgss yesterday, and am having similar problems trying to figure out how to get it's exported files into an emulator.<br /><br />thx<br /><br />Mike<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6937">mstram</a> — Mon Mar 23, 2015 12:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-03-19T21:20:48-07:00</updated>
<published>2015-03-19T21:20:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143432#p143432</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143432#p143432"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143432#p143432"><![CDATA[
Okay I knew it was going to be something simple.  You have to transfer the spc data WITHOUT issuing the load command the first time.  It works now!  Thank you again very much for all the help, I really appreciate it.<br /><br />Can't get pause to work though, it just seems to stop it...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Thu Mar 19, 2015 9:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-03-19T20:09:19-07:00</updated>
<published>2015-03-19T20:09:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143429#p143429</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143429#p143429"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143429#p143429"><![CDATA[
<div class="quotetitle">KungFuFurby wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><div class="quotetitle">UnDisbeliever wrote:</div><div class="quotecontent"><br />No problem, we need more SNES developers in the world.  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /></div><br />Truer words have not been spoken.</div><br /><br />Seconded. My own fandom of developing a SNES game is taking years to accomplish (My fandom is at least 10 years old and counting!), but I at least have one key component working in my favor: the music. I've been perfecting this, and I fully intend to bring out full length music once I make a working sound driver that can swap out data as needed (as well as implementing stopgaps in case swapping takes longer than expected).</div><br /><br />I've been doing this for 5 years, and I'm on my 4th attempt at making a game.  Everytime, I learned from the mistakes I made in the past.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Thu Mar 19, 2015 8:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-03-19T16:00:08-07:00</updated>
<published>2015-03-19T16:00:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143418#p143418</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143418#p143418"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143418#p143418"><![CDATA[
Aha, yeah, it just occurred to me that if you're writing your branches with an actual number instead of a label it would make a difference for that.  Even so, seems a bit odd to include an entire extra instruction in the set just for a matter of convenience like that.  Maybe it mattered more in the days of less advanced tools / assemblers...  Oh!  I guess the idea is mostly for blocks of code stored in an already-assembled format, such that the label has to be definite and not just pasted as needed.  Makes sense, in the context of the processor being used for more than just the SNES.  <br /><br />Now I have to change all my brls back to jmps again, when I get the motivation.<br /><br />Anyways...  Still reading...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Thu Mar 19, 2015 4:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-03-19T15:33:51-07:00</updated>
<published>2015-03-19T15:33:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143417#p143417</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143417#p143417"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143417#p143417"><![CDATA[
The BRL and PER instructions are for <a href="https://en.wikipedia.org/wiki/Position-independent_code" class="postlink">position-independent code</a>, which means code that can be copied into RAM at any address and still run.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 19, 2015 3:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-03-19T14:34:14-07:00</updated>
<published>2015-03-19T14:34:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143414#p143414</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143414#p143414"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143414#p143414"><![CDATA[
Okay, first off thanks for all the links and such, it's been very helpful.  I decided to try to use SNESGSS, since it was the only tracker option I found with actual WLA-compatible code.  I've tried to set it up to play a sample song but it's not working yet.  So far, it calls my &quot;LoadMusic&quot; routine which immediately calls &quot;music_stop&quot;, which then calls &quot;spc_command_asm&quot;.  First thing &quot;spc_command_asm&quot; does after disabling interrupts is read APU0 repeatedly, waiting for it to become zero.  APU0 is apparently always AA.  I'm sure I'll find the answer if I go reading for a day again but it's probably easier to ask - is the source code wrong and I'm waiting for that AA, or is it the 00 and the SPC700 hasn't been initialized properly yet?  <br /><br />I haven't exactly done anything to write code to it to handle recieving data and interpreting commands, but how do you send it that code when it's not set up to begin with?  The basic transfer protocol between the two processors is one thing I've never seen adequately described, at least not anywhere I can find anymore.  I mean, fullsnes has this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  Wait until Word&#91;2140h&#93;=BBAAh<br />  kick=CCh                  ;start-code for first command<br />  for block=1..num_blocks<br />    Word&#91;2142h&#93;=dest_addr   ;usually 200h or higher (above stack and I/O ports)<br />    Byte&#91;2141h&#93;=01h         ;command=transfer (can be any non-zero value)<br />    Byte&#91;2140h&#93;=kick        ;start command (CCh on first block)<br />    Wait until Byte&#91;2140h&#93;=kick<br />    for index=0 to length-1<br />      Byte&#91;2141h&#93;=&#91;src_addr+index&#93;      ;send data byte<br />      Byte&#91;2140h&#93;=index.lsb             ;send index LSB (mark data available)<br />      Wait until Byte&#91;2140h&#93;=index.lsb  ;wait for acknowledge (see CAUTION)<br />    next index<br />    kick=(index+2 AND FFh) OR 1 ;-kick for next command (must be bigger than<br />  next block  ;(if any)         ;         last index+1, and must be non-zero)<br />  &#91;2142h&#93;=entry_point           ;entrypoint, must be below FFC0h (ROM region)<br />  &#91;2141h&#93;=00h                   ;command=entry (must be zero value)<br />  &#91;2140h&#93;=kick                  ;start command<br />  Wait until Byte&#91;2140h&#93;=kick   ;wait for acknowledge</div><br />...which I assume is what I'm supposed to write for myself?  It gives literally no explanation or context for this code.  What am I even &quot;uploading&quot; here?  SNESGSS outputs spc700 code for playing the music file, but since you overwrite that each time I'm assuming that can't be what's actually handling your commands and such on the spc700 side, so what is?  There's also a &quot;boot rom disassembly&quot; on fullsnes...  Which I assume is what's built into the spc700 and runs automatically on power on?<br /><br />It would be really nice if the readme for SNESGSS had any information whatsoever on how its output is supposed to be used.  For example, I happened to see in code that Ramsis posted a while back that you get the size of the music data from the first bytes in the .bin file.  How would you be expected to know that?  And how are you supposed to know when to use the SCMD_INITIALIZE command?<br /><br />Also this is less important and a totally different topic, but...  I did some reading today and happened to notice that BRL takes one cycle longer than JMP.  I'm really confused in that case what the purpose of BRL is, since as I understand it both of them just redirect the program counter to any arbitrary address within the same bank - one by absolute and one by offset, but with the exact same result aside from one cycle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Thu Mar 19, 2015 2:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Ramsis]]></name></author>
<updated>2015-03-19T13:20:36-07:00</updated>
<published>2015-03-19T13:20:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143411#p143411</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143411#p143411"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143411#p143411"><![CDATA[
Hey, Khaz!<br /><br /><div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br />I learn roughly a thousand times faster when I have even just one functional example to look at and such a thing does not seem to exist for SNES music, at least not in the actual assembly language.  You know, without decompiling a commercial ROM...<br /></div><br />For a working homebrew SPC700 example, have a look at e.g. d4s's <a href="http://gra.dforce3000.de/nwarp_daisakusen_src.zip" class="postlink">N-Warp Daisakusen sourcecode</a>.<br /><br />The results of an (attempted/incomplete?) disassembly of a commercial ROM's sound engine can be found at <a href="http://pantalytron.com/blog7.php/bounty-sword-spc-disassemble" class="postlink">lytron's Bounty Sword SPC Disassembly</a>.<br /><br />Hope that helps! <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />Ramsis<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5345">Ramsis</a> — Thu Mar 19, 2015 1:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Holt]]></name></author>
<updated>2015-03-19T09:56:52-07:00</updated>
<published>2015-03-19T09:56:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143398#p143398</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143398#p143398"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143398#p143398"><![CDATA[
<div class="quotetitle">KungFuFurby wrote:</div><div class="quotecontent"><br />http://problemkaputt.de/fullsnes.htm<br /><br />I use this one. Works well enough for my intentions.<br /><br />Any details in particular you were wondering about?<br /><br />I have three SPC700 assembly (well... two of them use non-native syntax) sound driver examples.<br /><br /><a href="https://code.google.com/p/snesgss/" class="postlink">SNESGSS</a> <em>(caution, link may not last much longer, given that Google Code is in the process of shutting down to my knowledge... I think...)</em> is a working sound driver. Syntax used is not native, though, and it compiles with bass (haven't tested it myself because I never compiled the program).<br /><br /><a href="https://github.com/mukunda-/snesmod" class="postlink">mukunda's</a> <a href="http://snes.mukunda.com/" class="postlink">SNESMod</a> also counts for an example. This one uses TASM as an assembler, and uses native SPC700 syntax.<br /><br />There's a third sound driver which again does not use native syntax. It also uses its own assembler. The sound driver is made by Paul Lay.<br /><a href="http://membler-industries.com/dr_sloppy/" class="postlink">Home page for where the sound driver is used</a><br />The source is found in Cute Angel(a).<br /></div><br /><br />Thanks for this! I really appreciate it! I've sent you a PM re: a question on this. No need to reply, but just letting you know. Thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6922">Holt</a> — Thu Mar 19, 2015 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[KungFuFurby]]></name></author>
<updated>2015-03-18T18:18:02-07:00</updated>
<published>2015-03-18T18:18:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143342#p143342</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143342#p143342"/>
<title type="html"><![CDATA[Re: SNES Programing Help 2]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12459&amp;p=143342#p143342"><![CDATA[
<!-- m --><a class="postlink" href="http://problemkaputt.de/fullsnes.htm">http://problemkaputt.de/fullsnes.htm</a><!-- m --><br /><br />I use this one. Works well enough for my intentions.<br /><br />Any details in particular you were wondering about?<br /><br />I have three SPC700 assembly (well... two of them use non-native syntax) sound driver examples.<br /><br /><a href="https://code.google.com/p/snesgss/" class="postlink">SNESGSS</a> <em>(caution, link may not last much longer, given that Google Code is in the process of shutting down to my knowledge... I think...)</em> is a working sound driver. Syntax used is not native, though, and it compiles with bass (haven't tested it myself because I never compiled the program).<br /><br /><a href="https://github.com/mukunda-/snesmod" class="postlink">mukunda's</a> <a href="http://snes.mukunda.com/" class="postlink">SNESMod</a> also counts for an example. This one uses TASM as an assembler, and uses native SPC700 syntax.<br /><br />There's a third sound driver which again does not use native syntax. It also uses its own assembler. The sound driver is made by Paul Lay.<br /><a href="http://membler-industries.com/dr_sloppy/" class="postlink">Home page for where the sound driver is used</a><br />The source is found in Cute Angel(a).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3572">KungFuFurby</a> — Wed Mar 18, 2015 6:18 pm</p><hr />
]]></content>
</entry>
</feed>