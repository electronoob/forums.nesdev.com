<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6197" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-11-13T07:39:52-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6197</id>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-11-13T07:39:52-07:00</updated>
<published>2011-11-13T07:39:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=86247#p86247</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=86247#p86247"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=86247#p86247"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />This would even pave the way for another directive I've wanted for the 6502, that tells the linker to avoid placing the current block at an address that causes any marked branches to cross a page. This would allow it to choose the best place for such routines, without wasting a lot of space as you currently have to do by adding a .align before it.<br /></div><br />Not exactly an optimal solution for this problem, but I've been using a macro (for ca65) like this to get diagnostics when certain branches cross a page:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro branch_check opc, dest<br />    opc dest<br />    .assert &gt;* = &gt;dest, warning, &quot;branch_check: failed, crosses page&quot;<br />.endmacro<br /></div><br />It can be used like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">branch_check bne, somewhere<br /></div><br />This is handy when the code is still undergoing modifications, to make sure that timing changes in timing sensitive routines don't go unnoticed. Code can then be manually shuffled around or .aligns added to get rid of the warnings.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sun Nov 13, 2011 7:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-23T23:48:06-07:00</updated>
<published>2010-03-23T23:48:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58928#p58928</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58928#p58928"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58928#p58928"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />A proper algorithm would break up each module into separate sections as well.<br /></div><br />Various things in the ca65 and ld65 manuals imply as much.<br /><br />I lost shuffle.py when my laptop just died, but it only took me a couple hours to rewrite it from the notes I had left here. Yay Python.<br /><br />(It's in the <a href="http://www.pineight.com/croom/" class="postlink">Concentration Room</a> source distribution.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Mar 23, 2010 11:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-23T19:39:42-07:00</updated>
<published>2010-03-23T19:39:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58917#p58917</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58917#p58917"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58917#p58917"><![CDATA[
Well, I've examined ld65 and it doesn't seem it would be an easy project to convert it to what I described. It apparently does currently support a very primitive dead-stripping, at the module level. A proper algorithm would break up each module into separate sections as well. Your script will be the best way to achieve your aims.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Mar 23, 2010 7:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-22T08:00:07-07:00</updated>
<published>2010-03-22T08:00:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58774#p58774</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58774#p58774"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58774#p58774"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">the linker could ALSO remove unused objects.<br /></div><br />So something like <a href="http://www.cc65.org/doc/ca65-11.html#ss11.58" class="postlink">ca65's .ifref</a>?</div><br />Yeah, except it actually works for dead-stripping. I tried .ifref a while back and couldn't get it to work for this purpose. Here we go, my test showed that it only works if referenced <em>before</em> the .ifref directive in the source file; if referenced afterwards, .ifref's condition is false.<br /><br />Fundamentally a .nopagecross directive would mark a region of the current "block" as needing to be within a page. A simpler, general form might mark that region as the current address to the current address plus a signed offset parameter. Then you might be able to build other forms via macros.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Mar 22, 2010 8:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-22T07:21:23-07:00</updated>
<published>2010-03-22T07:21:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58772#p58772</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58772#p58772"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58772#p58772"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />I just realized that coupled with your marking of the boundaries between independent objects, the linker could ALSO remove unused objects.<br /></div><br />So something like <a href="http://www.cc65.org/doc/ca65-11.html#ss11.58" class="postlink">ca65's .ifref</a>?<br /><br />While developing shuffle.py, I've added a detailed manual, describing the rationale, various uses, and caveats, as a docstring at the top. Then I realized it takes up half the program's source code.<br /><br />I imagine that .nopagecross could be a macro in terms of &lt;* and &gt;* unless the assembler complains about something being "not constant". (I'm away from my dev PC and can't test right now.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Concentration Room 0.02 will be shuffle-enabled.<br /></div><br />That'll improve its card shuffling, right?</div><br />The card shuffling is already fine. But I did find a couple unnecessary instructions in the "deal" phase and stripped them out while adding .shuffle blocks around instructions that have no mutual dependency, such as 'txa' vs. 'clc' before an add, or 'ldx' vs. 'ldy'.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Mar 22, 2010 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-21T22:10:33-07:00</updated>
<published>2010-03-21T22:10:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58760#p58760</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58760#p58760"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58760#p58760"><![CDATA[
I was going to mention my desire for a similar way to mark routines, so that the linker could dead-strip all unused routines from the final result. You'd simply put some directive between each routine, allowing the linker to treat them as independent units that it could reorder or remove entirely.<br /><br />I just realized that coupled with your marking of the boundaries between independent objects, the linker could ALSO remove unused objects. That is something I'm very interested in, because it allows much cleaner utility libraries to be used, without worrying about them bloating your program if you only use a few routines.<br /><br />So what if we introduced a single new directive, something like .separator (not a good name, but I can't think of anything), which could be placed in any segment, and would allow the linker to treat what's before it as independent from what's after it. This means that code couldn't assume anything about the relative addresses, thus the linker could remove something with no direct references to it.<br /><br />This would even pave the way for another directive I've wanted for the 6502, that tells the linker to avoid placing the current block at an address that causes any marked branches to cross a page. This would allow it to choose the best place for such routines, without wasting a lot of space as you currently have to do by adding a .align before it.<br /><br />Then your shuffling would be a trivial addition to this very useful feature. I'll have to take a crack at adding this to ca65 over the next few days. If it's successful, maybe I can get my "suspicious use/absence of #" warning accepted into the main sources as well.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.bss<br />tables:<br />        .res $F0<br />.separator<br />        ; Tells linker to avoid placing foo at an address that would cause<br />        ; foo through the next label or the next .separator directive<br />        ; to cross a page.<br />.nopagecross<br />foo:<br />        .res $36<br />.separator<br />bar:<br />        .res $200<br />.separator<br /><br />.code<br />reset:<br />        jsr liba<br />        ...<br />.separator<br />liba:   lda foo,x ; will never cross page<br />loop:   ... lots of code<br />        ; Tells linker to prevent this branch from crossing a page<br />        .nopagecross<br />        bne loop<br />        rts<br />.separator<br />libb:   lda bar,x<br />       rts<br />.separator</div><br />Then if linked, libb and bar would never even make it into the executable, foo would probably be placed before tables, and the bne in liba would be guaranteed not to cross a page.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Concentration Room 0.02 will be shuffle-enabled.<br /></div><br />That'll improve its card shuffling, right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Mar 21, 2010 10:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-21T19:47:37-07:00</updated>
<published>2010-03-21T19:47:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58758#p58758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58758#p58758"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58758#p58758"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />assembly language is worse than C in this respect because it makes no type distinction between a scalar variable and the first element of an array or struct.<br /></div><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Maybe you could limit them to larger objects, avoiding them for byte and word-sized objects, the most common and unlikely to be accessed in an indexed manner.<br /></div><br />Sometimes one might forget that a variable is not indexed. For example, one might forget that a variable is one byte per game instance, not one byte per player.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />What about a completely different approach, using an instrumenting emulator?<br /></div><br />In a way, that's what C# and Java do. But in CLR and JVM, an array iterator isn't just a raw pointer to an element. Instead, it's a pointer to the start of the array and an index. This works well as long as the CPU's word size can hold the index, which is true of the 32-bit machines that run C# and Java but not necessarily of the 8-bit NES with an array larger than 256 bytes.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />You notate which data structures are independent, such that you never rely on their relative addresses.<br /></div><br />In fact, such markup would look a lot like .shuffle commands.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />It could tag upper and lower bytes of addresses too, later detecting when they're used as a word, for when you copy them to a zero-page pointer and then use indirect indexed addressing.<br /></div><br />That'd be a research project because it'd have to detect when the program is changing the upper byte of the address to hit more than 256 bytes, or when changes the address to point to one row of the array from which y indexes a column. Of course, there would have to be an exception for init code when it zeroes BSS and copies DATA from ROM to RAM. A further complication involves storing an address 1 byte before the entry point of a subroutine in order to set up an RTS dispatch.<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />As for randomizing (the actual topic!), even just reversing the order of objects in memory would have a useful effect. I wouldn't be surprised if some assemblers offered reverse allocation as an option already.<br /></div><br />Good idea. I've added command-line options to shuffle four ways: A. forward, B. reverse, C. with a seed derived from a string specified on the command line, or D. with a seed derived from urandom.<br /><br />It's fairly easy to integrate this into a makefile. One way reshuffles the file every time you change the source code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AS65 = ca65<br /><br />$&#40;objdir&#41;/%.o: $&#40;objdir&#41;/%.s<br /><br />   $&#40;AS65&#41; $&#40;CFLAGS65&#41; $&lt; -o $@<br /><br />$&#40;objdir&#41;/%.shuffle.s: $&#40;srcdir&#41;/%.s<br />   tools/shuffle.py $&lt; -o $@<br /></div><br />Or changing the seed to be based on the file name would let you freeze the shuffle order while you investigate a given defect:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$&#40;objdir&#41;/%.shuffle.s: $&#40;srcdir&#41;/%.s<br />   tools/shuffle.py $&lt; --seed 345$&lt; -o $@</div><br /><br />Concentration Room 0.02 will be shuffle-enabled.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Mar 21, 2010 7:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-20T14:13:34-07:00</updated>
<published>2010-03-20T14:13:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58691#p58691</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58691#p58691"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58691#p58691"><![CDATA[
<a href="http://en.wikipedia.org/wiki/Buffer_overflow_protection#Canaries" class="postlink">Canaries</a> would be useful, though don't necessarily have space, especially in zero-page. The assembler could generate a list of their addresses as a table that your code then iterates over to initially fill them, and later verify their values. Maybe you could limit them to larger objects, avoiding them for byte and word-sized objects, the most common and unlikely to be accessed in an indexed manner.<br /><br />What about a completely different approach, using an instrumenting emulator? You notate which data structures are independent, such that you never rely on their relative addresses. The assembler generates a list of each structure that the emulator has access to. Then it tags pointers and ensures you never access outside a structure. For example, lda table,x would bounds-check x to be within the table. It could tag upper and lower bytes of addresses too, later detecting when they're used as a word, for when you copy them to a zero-page pointer and then use indirect indexed addressing.<br /><br />As for randomizing (the actual topic!), even just reversing the order of objects in memory would have a useful effect. I wouldn't be surprised if some assemblers offered reverse allocation as an option already.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Mar 20, 2010 2:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-20T14:07:05-07:00</updated>
<published>2010-03-20T14:07:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58690#p58690</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58690#p58690"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58690#p58690"><![CDATA[
What's so "tweet" about shuffling is that it uses a randomly selected other variable as your canary so that it doesn't take up any more RAM at run time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 20, 2010 2:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-03-20T14:00:09-07:00</updated>
<published>2010-03-20T14:00:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58688#p58688</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58688#p58688"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58688#p58688"><![CDATA[
What about canaries?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Mar 20, 2010 2:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-20T13:30:51-07:00</updated>
<published>2010-03-20T13:30:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58685#p58685</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58685#p58685"/>
<title type="html"><![CDATA[Source code shuffling]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6197&amp;p=58685#p58685"><![CDATA[
If you write after the end of a buffer, you affect whatever is stored after the buffer.  Unmanaged languages like assembly language and C make it easier to end up with a buffer overflow in a program than in managed languages like C# or Java, which automatically check each array access against the array's lower and upper bounds.  In fact, assembly language is worse than C in this respect because it makes no type distinction between a scalar variable and the first element of an array or struct.<br /><br />Ordinarly, you can detect a buffer overflow from the behavior of a program when it uses what is stored after the overflowed buffer. However, if you write after a buffer into memory that you're not using at the moment, you may not see the effect of the buffer overflow until it's too late.  So one technique to detect buffer overflows is to randomize the order of things in memory, so that each buffer that can be overflowed is more likely to eventually end up before something where the effect of the overflow is visible.<br /><br />So I'm proposing an extension to 6502 assembly language that introduces a new control command called <strong>.shuffle</strong>.  An assembler should permute the lines between .shuffle and .endshuffle when assembling the program, so that variables end up in a different order each time.  For example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.shuffle<br />foo: .res 32<br />bar: .res 4<br />baz: .res 4<br />cnut: .res 32<br />.endshuffle</div><br />might become<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cnut: .res 32<br />baz: .res 4<br />foo: .res 32<br />bar: .res 4</div><br />It's also useful for finding overflows that fall off the end of a read-only data segment.  For these, you'll want to permute chunks longer than one line, which is why the .shuffle keyword takes a delimiter argument.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.shuffle THE_GAME<br />title_screen:<br />  .byt ...<br />  .byt ...<br />THE_GAME<br />character_menu:<br />  .byt ...<br />  .byt ...<br />THE_GAME<br />stage_menu:<br />  .byt ...<br />  .byt ...<br />.endshuffle<br /></div><br />A similar mechanism at the program loader level in operating systems with virtual memory has been called <a href="http://en.wikipedia.org/wiki/Address_space_layout_randomization" class="postlink">ASLR</a>.<br /><br />Another potential application even after you have found and fixed buffer overflows is binary fingerprinting.  If you are distributing copies of a program under nondisclosure agreement, and you want to covertly mark each copy to make it traceable, you can do so by permuting the subroutines and variables in each copy.<br /><br />If you like the idea, I plan to implement it as a preprocessor in Python. This would work for NESASM, CA65, ASM6, and even C compilers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 20, 2010 1:30 pm</p><hr />
]]></content>
</entry>
</feed>