<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SNES controller code to work properly.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SNES controller code to work properly.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11250">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11250</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Mon May 19, 2014 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Here is a code that does most of the framework necessary for setting up the SNES.  I set up a vblank.txt and main.txt, for people to write code without having to deal with all that other timing crap.</div><br /><br />woah! I was literally just looking at that other code DoNotWANT attached before (The &quot;Sprite&quot; and &quot;Controller&quot; code). What editor do you guys use? I've been on Sublime text and came across syntax highlighting specific to WLA.<br /><br />I don't think I NEED syntax highlighting, but just curious what you do. It seems like bass mixes some almost &quot;c style&quot; syntax like in the macros.<br /><br />In regard to my original intention for posting, I've been trying other things, scrolling the background using the controller input. It seems to be working okay, except it will get stuck for a second after a few frames....My code looks pretty similar to what I see in the &quot;Sprite&quot; and &quot;Controller&quot; examples attached before, and I'm doing so little in NMI that I assume my timing is fine, I suspect that I am doing something relatively rudimentary wrong with the stack (I didn't have php/plp initially which might be messing things up). <br /><br />I've done a few other things with scrolling the background without controller input and experimenting with HSYNC type &quot;wavy effects&quot; and they seemed to be fine so just trying to get over the hump to get these controller stuff working properly.<br /><br />I'm probably just gonna go back to learning sprite stuff and then try to apply the controller input stuff to that to approach it from another perspective.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon May 19, 2014 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just use notepad.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Mon May 19, 2014 12:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I just use notepad.</div><br /><br />nice! <br /><br />the build engine stuff (allowing you to tie a key command to an assembler/compiler command), tabs, and other stuff make Sublime Text pretty worthwhile, but still not as necessary with ASM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Wed May 21, 2014 3:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I've still been trying to get this to work. <br /><br />I switched to try and make the background move via the left and right buttons. It works great on BSNES/higan, however when I tried to upload it to my PowerPak it still hangs up at some even interval. It is a little less than a second. It also makes this buzzing pulse sound if you turn up the volume a little....really weird. The way I found to get rid of the buzzing sound was to get rid of the loop that waits for the controller to be ready, but obviously that makes the controller not work. <br /><br />I looked at the bass code that other people have attached and structurally my code looks the same...<br /><br />Is there some other interrupt that might be happening that I am forgetting to deactivate?

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=1554">joypad__full_img_4bpp.zip</a> [157.49 KiB]
			</span><br />
			<span class="gensmall">Downloaded 10 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Sat May 24, 2014 7:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your vectors look OK to me.<br /><br />There is a possible caveat in your VBlank routine that can cause problems later on...<br /><br />This is how you started your VBlank code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; pha <br /><br />&nbsp; &nbsp; phx<br /><br />&nbsp; &nbsp; phy<br /><br />&nbsp; &nbsp; php<br /></div><br /><br />This is how you ended your VBlank code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; plp<br /><br />&nbsp; &nbsp; ply<br /><br />&nbsp; &nbsp; plx<br /><br />&nbsp; &nbsp; pla<br /><br />&nbsp; &nbsp; rti<br /></div><br /><br />There are three catches to this code that might be causing a freeze on the PowerPak.<br /><br />The first is that the accumulator always has sixteen bits in it regardless of whether or not the processor says an 8-bit accumulator or a 16-bit accumulator.<br /><br />The second is that there is a direct page register (chances are you're not touching it, but if you do touch it in your non-interrupt code and don't account for it in the VBlank or IRQ code, you'll be accessing incorrect memory when using direct page addressing from that point onwards).<br /><br />The third page is the data bank register (also not accounted for in the VBlank code). If you're touching this register outside of VBlank, then it's likely you're not accessing the actual registers if this ends up being I believe $40-$7F or $C0-FF (I think that's right... could be wrong...).<br /><br />Plus, the processor status register is actually already saved by default. Thus, the php and plp codes are not nessecary. The rti opcode is there because in addition to returning to where the program left off, it restores the processor status it automatically saved.<br /><br />This is what I have for my interrupt code at the start to ensure that nothing goes wrong (at least in my eyes)...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;rep #$30 ;16-bit accumulator and index<br />&nbsp; &nbsp;;Prepare to save all bits of accumulator and index registers...<br />&nbsp; &nbsp;phb ;Save data bank...<br />&nbsp; &nbsp;phd ;...direct page...<br />&nbsp; &nbsp;pha ;...accumulator...<br />&nbsp; &nbsp;phx ;...X register...<br />&nbsp; &nbsp;phy ;...Y register...<br />&nbsp; &nbsp;lda.w #$0000<br />&nbsp; &nbsp;tcd ;Set direct page to zero.<br />&nbsp; &nbsp;phk ;Set data bank to bank 0.<br />&nbsp; &nbsp;plb<br /></div><br /><br />And this is what I do at the end to restore everything...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;rep #$30 ;16-bit accumulator and index<br />&nbsp; &nbsp;ply ;Restore all and call it a session.<br />&nbsp; &nbsp;plx<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;pld<br />&nbsp; &nbsp;plb<br />&nbsp; &nbsp;rti<br /></div><br /><br />Note that I'm marking the rep and sep codes so that I know what the accumulator and index will become. I actually had problems trying to do it through named variables (I attempted to define some constants and then ORing them together), so I played it straight instead and used the numbers. But I kept the notes there so I knew what I done to the processor through the rep/sep opcodes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat May 24, 2014 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't you need a php and plp at the beginning and end of the nmi routine?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 24, 2014 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The hardware does PHP for you during an interrupt, and there's a PLP inside the RTI.<br /><br />(If only it <em>really</em> did &lt;?php ... ?&gt;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat May 24, 2014 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To clear up a couple things in the past few posts:<br /><br />1. On the 65816, before entering an interrupt (IRQ or NMI, doesn't matter), the following things are pushed onto the stack automatically by the CPU in this order: K (active program bank), PC (high), PC (low), and P.  When exiting an interrupt (i.e. via RTI), those values are pulled/popped off the stack in reverse order (i.e. normally).<br /><br />So yes, you do not need PHP/PLP.  I suppose this was a &quot;precautionary habit&quot; of mine from my IIGS days where I didn't have books describing the processors' behaviour (I got those near the end of my IIGS stint).  However, see point #2 before removing this.<br /><br />If you need reference material for my statements, refer to the <a href="http://wiki.nesdev.com/w/images/7/76/Programmanual.pdf" class="postlink">Programming the 65816 (including the 6502, 65C02, and 65802) by Western Design Center</a> PDF (WDC used to have this on their site but it's since gone/missing, but we keep a copy).  See the section on Interrupts and System Control Instructions for details.<br /><br />2. Regarding PHA/PHX/PHY -- &quot;the accumulator always has sixteen bits in it regardless of whether or not the processor says an 8-bit accumulator or a 16-bit accumulator&quot; is a true statement (for those reading it: read it VERY VERY SLOWLY), but has no relevancy with regards to those stack operations.  My point written more simply: if you do SEP #$30 / PHA, you're going to push 1 byte onto the stack because the accumulator is 8-bit.<br /><br />I think we all know that REP #$20 / LDA #$1234 / SEP #$20 / LDA #$FF will result in an accumulator (internally in the CPU) that now contains the value $12FF (but since a=8 you can only manipulate the lower byte).  But that fact has no relevancy to concerns over the stack operations unless you're doing something like REP #$20 / LDA #$1234 / PHA / SEP $#20 / PLA (at this point you'd still have a byte left on the stack from the previous 16-bit push).<br /><br />Thus, the advantage of doing PHA/PHX/PHY/PHP at the start of the NMI routine, followed by PLP/PLY/PLX/PLA at the end -- particularly the use of PHP/PLP here -- is that if you screw around with the accumulator or X/Y sizes (using REP/SEP) in the NMI routine, when exiting NMI and restoring the contents of A/X/Y, you're not going to end up with a stack that eventually overflows or underflows (due to register size differences).  Yes, the CPU will effectively do the PHP/PLP for you, but there's no way for you to &quot;run some code after the CPU internally does PLP&quot; to ensure your previous PHA/PHX/PHY statements get popped off the stack with the same sizes they were when you pushed them on at the start of your NMI routine.<br /><br />The other solution is to do what KungFuKirby did -- explicitly set the accumulator and x/y index sizes to 16-bit using REP #$30 and then do your pushes, and at the end of your routine again do REP #$30 and do your pulls.  Which method is better?  REP = 3 cycles, PHP = 3 cycles, PLP = 4 cycles.  So by using &quot;explicitly use REP&quot; method, you save 1 cycle.  Whoop de doo.<br /><br />3. In KungFuKirby's routine, the reason he does PHB/PLB is because he tinkers with B later (the LDA #$0000 ... PHK / PLB to set B = $00).  The reason he does PHD/PLD is because of the LDA #$0000 / TCD which sets D = $0000.<br /><br />You shouldn't have any concerns about K after exiting NMI because the CPU takes care of that for you.  However, there IS a problem if you intermix emulation mode (ex. SEC / XCE) and native mode (to the OP: you can ignore this, this is just me pointing out an esoteric case).  Quoting the aforementioned reference material:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In native mode, the program bank (K) is pushed onto the stack first, before the program counter and the status register; but in emulation mode it is lost.  This means that if a 65816 program is running in emulation mode in a bank other than 0 when an interrupt occurs, there will be no way of knowing where to return to after the interrupt is processed because the origianl bank will have been lost.<br /><br />This unavoidable but fairly esoteric problem can be dealt with in two ways: the first is simply never to run in emulation mode outside bank 0.  The second solution is to store the value of K in a known location before entering emulation mode with a non-zero K register (and is described later in this chapter).</div><br /><br />Anyway -- in short, I don't see how any of the stack manipulation code the OP is using would be causing any kind of problem &quot;on the PowerPak&quot; (more specifically, on hardware -- or an emulator for that matter).  Analysis of that is a red herring, IMO.<br /><br />My opinion is that the problem is elsewhere.  I have not looked at the latest code version.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat May 24, 2014 4:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The push/pops would match, but if your IRQ routine doesn't explicitly set the mode isn't it possible for the CPU to be in either state on entry to the IRQ routine? That seems like a rather large potential source of error, unless your IRQ code is somehow agnostic to the mode.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Sat May 24, 2014 5:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess the general moral of the story is that I need to get better with my 65816-specific knowledge/assembly. I actually just picked up a physical copy of the booked linked before, was trying to get it printed at fedex office but it seemed pretty unreasonable price wise. The one I found had a coffee stain or something and was only $40, the other ones I've seen are $150+. That's just me, I prefer physical books/being able to annotate them/flip pages rapidly. The native PDF viewer in windows 8 also sucks major balls.<br /><br />In trying to suss out the nature of the issue, I removed different sections of the vblank code, and tried it with a bunch of permutations of with/without php/plp pha/pla to see if they made a difference. This was only to get rid of the weird periodic pausing for like .2/half a second. I don't remember the results of each (It was around 2/3AM the other day), but getting rid of the loop that waits for $4212 seemed to get rid of it, but obviously this causes the controllers to not work.<br /><br />Are there any other interrupts that I might not be considering? I was doing some stuff here with IRQ to get waving effects:<br /><br /><!-- m --><a class="postlink" href="https://vimeo.com/85569649">https://vimeo.com/85569649</a><!-- m --><br /><br />I honestly am not sure exactly what I was doing, I know some of it I got from looking at the SNES dev manual and pretty much explicitly following what was there. I might look into if I need to explicitly disable the IRQ to make sure that isn't somehow happening.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>benjaminsantiago</b> [ Sat May 24, 2014 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The hardware does PHP for you during an interrupt, and there's a PLP inside the RTI.<br /><br />(If only it <em>really</em> did &lt;?php ... ?&gt;)</div><br /><br />ha the code would be a mess, you'd $ in front of variables and $ in front of hex numbers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat May 24, 2014 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES controller code to work properly.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">The push/pops would match, but if your IRQ routine doesn't explicitly set the mode isn't it possible for the CPU to be in either state on entry to the IRQ routine? That seems like a rather large potential source of error, unless your IRQ code is somehow agnostic to the mode.</div><br />You're correct -- the state of a/x/y sizes is unknown (AFAIK it will be whatever it was at the moment NMI was induced), so setting it explicitly in NMI using REP/SEP is wise.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>