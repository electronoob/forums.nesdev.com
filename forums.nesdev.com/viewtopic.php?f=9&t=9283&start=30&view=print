<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Discrete Logic Mapper Toolbox</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Discrete Logic Mapper Toolbox</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9283">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9283</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Thu Jun 13, 2013 6:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Dual-ported RAM exists, but is exceptionally expensive. It also can be faked using a CPLD. You wouldn't want it to be mapped into the same area as the mirrors of the NES's internal WRAM, however.</div>Yes, I thought it might be expensive. I can understand that you won't map reads to the mirrors of the NES's internal WRAM, although you might map writes to the mirrors of internal WRAM into the dual-ported RAM (you can then read it back through the WRAM, which will have the same data unless overwritten).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Fri Jun 21, 2013 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I have managed to design a mapper using two ICs which has software-controlled one screen mirroring (the same bit selects a 4K CHR ROM bank), up to 64K PRG RAM with 16K banks, and up to 1M PRG ROM and 16K banks, although you cannot use a different pattern table for tiles and sprites, and you might not be able to change the bank during rendering. (The ICs are three NAND gates and a eight-bit latch.) Can you please tell me if it works?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Fri Jun 21, 2013 7:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Should work, but I don't know how you can do it with 3 NAND gates and 8 bit latch...  So yeah it could work, but not with 2 ICs.  Given an infinite supply of NAND gates and some flipflops to help out you can make anything though.<br /><br />If I understand you're idea it's basically super UxROM on both PRG and CHR with AxROM style mirroring.  1M (bit or byte) PRG ROM?  1MByte would take 5bits of a 8-bit latch. and 64KB CHR would take 4bits, plus one bit for mirroring. You need 4 input Nand to decode PRG-RAM.  So I count something like 10 NAND gates and 10bits from a latch, plus some logic to latch more than 8bits.<br /><br />Scale it down to something more reasonable like 512KB PRG, 32KB CHR, leaving a bit for mirroring.  You'd need 7 gates plus NAND for PRG-RAM, still not 2 IC's though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Fri Jun 21, 2013 8:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I need that much RAM, and the only iNES mapper I can find having 64K PRG RAM is MMC5. (256K or 512K PRG ROM is OK, though; I don't need 1M)<br /><br />However, what I was thinking is: Connect CHR A12 to the write enable of the latch (I think it is a enable-high latch, so this works), and connect other CHR address pins to the latch input. Q7 then is connected to both CIRAM A10 and to CHR RAM A12. The others connect to the address lines of PRG ROM and PRG RAM. The NAND gates go like:<div class="codetitle"><b>Code:</b></div><div class="codecontent">NOT_ROMSEL = ROMSEL ~&amp; ROMSEL;<br />PRG_ROM_CS = NOT_ROMSEL ~&amp; PRG_A14;<br />PRG_RAM_CS = NOT_ROMSEL ~&amp; PRG_ROM_CS;</div><br /><br />Therefore you could have more than 1M ROM and more than 64K RAM, depending on how many bits of the latch you used for ROM and how many for RAM.<br /><br />It has a few resemblance to mapper 96 in that bank switching is done by accessing PPU address space (although in mine, it affects the PRG banking, and the addresses that access the latch are different).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jun 22, 2013 1:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">However, what I was thinking is: Connect CHR A12 to the write enable of the latch (I think it is a enable-high latch, so this works), and connect other CHR address pins to the latch input.</div> What's the point in writing to the register using the PPU address space? Unless I'm missing something, it seems easier and less fragile to connect the latch to the CPU side. Gets you back 8K CHR address space, and the ability to change things during rendering, too.<br /><br />You could also replace the 3/4 of a 74'00 with a half of a 74'139.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jun 22, 2013 1:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">However, what I was thinking is: Connect CHR A12 to the write enable of the latch (I think it is a enable-high latch, so this works), and connect other CHR address pins to the latch input.</div> What's the point in writing to the register using the PPU address space? Unless I'm missing something, it seems easier and less fragile to connect the latch to the CPU side.</div>Since I put the RAM in $8000-$BFFF (otherwise more logic is needed to decode the RAM), I put the latch in the PPU address space, and this way requires no logic to decode, since it is a single bit which is already what you want it to be.<br /><br />However, you appear to be correct about the 74'139 (and then you can use the other half too). If you do that, then you might replace the 74'373 latch with a 74'259 latch (which is enable-low, but has to be written one bit at a time), or 74'256 (written two bits at a time, probably better than a 74'259), and then you can connect it to the CPU instead of to the PPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jun 22, 2013 11:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Since I put the RAM in $8000-$BFFF (otherwise more logic is needed to decode the RAM), I put the latch in the PPU address space, and this way requires no logic to decode, since it is a single bit which is already what you want it to be.</div> Right now you've got /ROMCE generated by /ROMSEL OR NOT A14, so just use that as the clock input to the latch. Maybe use the other half of the '139 to prevent bus conflicts on ROM. (/1G←/ROMSEL, 1A←A14, 1B←0; /RAMCE←1Y0; /2G←1Y1; /2A←R/W; /2B←0; /ROMOE←/2Y1; CLK373←/2Y0)<br /><br />I do think that if you are doing development in an emulator, you should just start with MMC5 and make sure your code can be ported later when you go to hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jun 22, 2013 12:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Right now you've got /ROMCE generated by /ROMSEL OR NOT A14, so just use that as the clock input to the latch. Maybe use the other half of the '139 to prevent bus conflicts on ROM. (/1G←/ROMSEL, 1A←A14, 1B←0; /RAMCE←1Y0; /2G←1Y1; /2A←R/W; /2B←0; /ROMOE←/2Y1; CLK373←/2Y0)</div>O, yes, you are correct. Why didn't I notice this?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I do think that if you are doing development in an emulator, you should just start with MMC5 and make sure your code can be ported later when you go to hardware.</div>Yes, I agree, MMC5 is the only existing iNES mapper having the features I was looking for; however, an emulator that can load a mapper plugin (.dll or .so) written in C or Verilog, or supporting my mapper 768.0 code for defining new mappers, would work better, I think. Is there any such things?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Jun 23, 2013 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Jun 23, 2013 3:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;</div>Yes, it would work, but I like to design a new mapper and use it in a emulator, if such a thing would be possible! (I have made a document on the wiki which can propose a format for writing plugins in C for implementing mappers and input devices.)<br /><br />Here is another thing you could make with discrete logic mapper: If you need 8K PRG RAM but don't need 8K contiguous and can use just 4K (or if you need just 4K in total), then, with a single NAND gate input from ROMSEL and PRG A12 to activate the RAM chip in the cartridge, and then connect PRG A13 to the PRG RAM A12. Now the RAM is at $5xxx and $7xxx. Also, $1xxx mirrors $5xxx and $3xxx mirrors $7xxx, although you shouldn't read from $1xxx and $3xxx because it causes bus conflicts, but you can write there in order to write simultaneously to the internal RAM or PPU registers, and to the PRG RAM in the cartridge. Now the other three NAND gates can be used for another purpose.<br /><br />If you have some (32K) data in the PRG ROM that you don't need to access during rendering, such as level data to load into RAM, you can use CHR_A13 NAND CHR_A12 to the A15 input of the PRG ROM.<br /><br />You can make a latch out of two NAND gates, which will not change if both inputs are high. If you are using only one nametable (the one at $2C00), you might use this to increase the number of possible tiles from 256 to 320, by wiring the input of the latch to CHR A11 and CHR A10, and the output to the CHR ROM A12. (This won't work with sprites, though.)<br /><br />There is also the &quot;no IC bankswitching&quot; involving the CHR address or the IRQ (both of which will make the program have limitations, though).<br /><br />If you don't enable CIRAM and you use 16K CHR RAM in the cartridge, then you have four nametables, and some extra RAM which you cannot access during rendering (although this extra RAM still might be useful for something, especially if it is battery RAM (not to be confused with battering ram)).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Jun 23, 2013 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;</div>Yes, it would work, but I like to design a new mapper and use it in a emulator, if such a thing would be possible! </div> If you're using this as a means for just &quot;I want a VHDL-like abstraction for mappers&quot;, ok. But that is a very large undertaking and you'll have more luck getting anyone else to cooperate if you put some functioning code on the table.<br /><br />Otherwise, you're putting the cart before the horse. Deployed games are the only reason we've ever had for making mappers (whether it's Magic Floor on m218, or the Streemerz Bundle on m28). So if you want a not-MMC5 mapper that provides at least 64KiB of PRG-RAM... make the game first. Hacking a local copy of FCEUX or Nestopia for what you've requested above would be straightforward enough.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Jun 23, 2013 6:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">My point was &quot;use good abstraction principles and initially target the MMC5. Later on, if you ever find yourself needing to make hardware, because you used abstraction, you shouldn't find it difficult to retarget it&quot;</div>Yes, it would work, but I like to design a new mapper and use it in a emulator, if such a thing would be possible! </div> If you're using this as a means for just &quot;I want a VHDL-like abstraction for mappers&quot;, ok. But that is a very large undertaking and you'll have more luck getting anyone else to cooperate if you put some functioning code on the table.</div>I did make up a proposed C API for mapper plugins and input plugins (it is in the wiki); if anyone ever make up a new emulator (including if I ever do), then someone (including myself) might consider to add the support of this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Otherwise, you're putting the cart before the horse. Deployed games are the only reason we've ever had for making mappers (whether it's Magic Floor on m218, or the Streemerz Bundle on m28). So if you want a not-MMC5 mapper that provides at least 64KiB of PRG-RAM... make the game first. Hacking a local copy of FCEUX or Nestopia for what you've requested above would be straightforward enough.</div>O, OK, what kind of programming languages are they written in? Does it accept mapper plugin files written in C or in Verilog (and if so, does it accept many features like the API I proposed)? Even if it doesn't, can the modification of such program be written in C and then compiled on MinGW or Cygwin?<br /><br />Did you read my other ideas of discrete logic mappers? (I have no need for those other ones at this time, although I post it because it seems possible to me, being another thing you can do with discrete logic mappers.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Jun 23, 2013 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Here is another thing you could make with discrete logic mapper: If you need 8K PRG RAM but don't need 8K contiguous and can use just 4K (or if you need just 4K in total), then, with a single NAND gate input from ROMSEL and PRG A12 to activate the RAM chip in the cartridge, and then connect PRG A13 to the PRG RAM A12. Now the RAM is at $5xxx and $7xxx. Also, $1xxx mirrors $5xxx and $3xxx mirrors $7xxx, although you shouldn't read from $1xxx and $3xxx because it causes bus conflicts, but you can write there in order to write simultaneously to the internal RAM or PPU registers, and to the PRG RAM in the cartridge. Now the other three NAND gates can be used for another purpose.</div> But it's not really useful to mirror internal RAM, and you have to remember to use different PPU mirrors to keep track of both writes to $2005 and $2006 to take advantage of the transparently shadowing. I'm uncertain whether the code complexity of dealing with noncontiguous memory outweighs the benefit of transparent shadowing of these registers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you have some (32K) data in the PRG ROM that you don't need to access during rendering, such as level data to load into RAM, you can use CHR_A13 NAND CHR_A12 to the A15 input of the PRG ROM.</div> Clever, but a 74'161 is as cheap as a 74'00. Maybe justifiable with a 74'1G00.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can make a latch out of two NAND gates, which will not change if both inputs are high. If you are using only one nametable (the one at $2C00), you might use this to increase the number of possible tiles from 256 to 320, by wiring the input of the latch to CHR A11 and CHR A10, and the output to the CHR ROM A12. (This won't work with sprites, though.)</div> Several problems:<br />1- Ok, so tiles 64-127 select bank 0, including self, tiles 128-191 select bank 1, including self, and tiles 192-255 don't change bank. Tiles 0-63 will always be from bank 1, but will unpredictably select one bank or the other for subsequent fetches, so mustn't be followed by tiles 192-255. 320 tiles, yes, but very constrained layout, and wastes 3/8 of your ROM.<br />2- There are more than 32 fetches per scanline. (34, of which one is a duplicate), and it will proceed from (e.g.) $2C1F to $2800.<br />3- I see you chose a NAND-based SR latch because idle sprites fetch from tile $FF But this thing is fragile to any momentary changes of the address bus. For example, during the idle pixel (341, when it's not going through the normal ALE-/RD pattern), $1000 seems to be asserted to the address bus.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is also the &quot;no IC bankswitching&quot; involving the CHR address or the IRQ (both of which will make the program have limitations, though).</div> I like the IRQ one better.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you don't enable CIRAM and you use 16K CHR RAM in the cartridge, then you have four nametables, and some extra RAM which you cannot access during rendering (although this extra RAM still might be useful for something, especially if it is battery RAM (not to be confused with battering ram)).</div>I vaguely remember this being mentioned in the wee early days of the forum? 16KiB RAMs are harder to come across than other sizes, though.<br /><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">O, OK, what kind of programming languages are they written in?</div>C or C++, to varying amounts of C++ goo.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does it accept mapper plugin files written in C or in Verilog (and if so, does it accept many features like the API I proposed)?</div> As far as I know, Nintendulator is the only emulator that uses dynamically loaded things to provide mapper functionality<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Even if it doesn't, can the modification of such program be written in C and then compiled on MinGW or Cygwin?</div> Yes. Look at e.g. <a href="http://sourceforge.net/p/fceultra/code/HEAD/tree/fceu/trunk/src/boards/datalatch.cpp" class="postlink">FCEUX's implementation of mappers 0,2,3,7,8,11,13,38,66, &amp;c &amp;c &amp;c</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Jun 23, 2013 10:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Here is another thing you could make with discrete logic mapper: If you need 8K PRG RAM but don't need 8K contiguous and can use just 4K (or if you need just 4K in total), then, with a single NAND gate input from ROMSEL and PRG A12 to activate the RAM chip in the cartridge, and then connect PRG A13 to the PRG RAM A12. Now the RAM is at $5xxx and $7xxx. Also, $1xxx mirrors $5xxx and $3xxx mirrors $7xxx, although you shouldn't read from $1xxx and $3xxx because it causes bus conflicts, but you can write there in order to write simultaneously to the internal RAM or PPU registers, and to the PRG RAM in the cartridge. Now the other three NAND gates can be used for another purpose.</div> But it's not really useful to mirror internal RAM, and you have to remember to use different PPU mirrors to keep track of both writes to $2005 and $2006 to take advantage of the transparently shadowing. I'm uncertain whether the code complexity of dealing with noncontiguous memory outweighs the benefit of transparent shadowing of these registers.</div>Note that since it uses one NAND gate, it can be used with the other two things below, which together use three NAND gates so it is four in total, and only one IC. (I write things that can be clever even if not particularly practical; I am a kind of a hacker, too.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can make a latch out of two NAND gates, which will not change if both inputs are high. If you are using only one nametable (the one at $2C00), you might use this to increase the number of possible tiles from 256 to 320, by wiring the input of the latch to CHR A11 and CHR A10, and the output to the CHR ROM A12. (This won't work with sprites, though.)</div> Several problems:<br />1- Ok, so tiles 64-127 select bank 0, including self, tiles 128-191 select bank 1, including self, and tiles 192-255 don't change bank. Tiles 0-63 will always be from bank 1, but will unpredictably select one bank or the other for subsequent fetches, so mustn't be followed by tiles 192-255. 320 tiles, yes, but very constrained layout, and wastes 3/8 of your ROM.<br />2- There are more than 32 fetches per scanline. (34, of which one is a duplicate), and it will proceed from (e.g.) $2C1F to $2800.<br />3- I see you chose a NAND-based SR latch because idle sprites fetch from tile $FF But this thing is fragile to any momentary changes of the address bus. For example, during the idle pixel (341, when it's not going through the normal ALE-/RD pattern), $1000 seems to be asserted to the address bus.</div>I am aware of these problems; however, I did think of that, and that due to overscan you might not want to put anything on the leftmost tile anyways, so you can use that to select the bank by the leftmost tile of each row. Therefore, that isn't the reason I chose a NAND-based SR latch. The reason is so that it can be combined with a circuit that uses only two NAND gates! (Thanks for telling me about the contents of the address bus during the idle pixel though; I am interested to know precisely the function of the CPU/APU/PPU, including any differences between NTSC and RGB that may have been missed.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is also the &quot;no IC bankswitching&quot; involving the CHR address or the IRQ (both of which will make the program have limitations, though).</div> I like the IRQ one better.</div>I agree. It has less limitation (unless you need IRQ or keyboard); simply adding a wire into the Famicom expansion port can be done (and it is a DB15 female so it should be easily enough to add a wire, I hope). However it won't work if you want to make a game for NES (you will need a more complicated adapter, and depending on the version of the console it might not even have a expansion port).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">O, OK, what kind of programming languages are they written in?</div>C or C++, to varying amounts of C++ goo.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does it accept mapper plugin files written in C or in Verilog (and if so, does it accept many features like the API I proposed)?</div> As far as I know, Nintendulator is the only emulator that uses dynamically loaded things to provide mapper functionality<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Even if it doesn't, can the modification of such program be written in C and then compiled on MinGW or Cygwin?</div> Yes. Look at e.g. <a href="http://sourceforge.net/p/fceultra/code/HEAD/tree/fceu/trunk/src/boards/datalatch.cpp" class="postlink">FCEUX's implementation of mappers 0,2,3,7,8,11,13,38,66, &amp;c &amp;c &amp;c</a></div>Thank you for information. Does this mean it will work with MinGW? Do they support twelve-bit mapper numbers and submapper numbers?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Jun 25, 2013 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Discrete Logic Mapper Toolbox</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have some other ideas of other kind of new mappers too:<br /><br />I don't know how common it is and it isn't a 74xx discrete logic, but you for extra audio you could use a AY-3-8910 (similar to how the Sunsoft 5B does), but connect it to the PPU address bus (you might be updating the music during vblank, and with no extra decoding logic you can map it to $3xxx (cartridge already provides A13 inverted, and A12 can be used uninverted) in the PPU address space), and use it in write-only mode (fix BDIR to high). Since only the address is used, it won't interfere with internal nametables or CHR ROM/RAM. The I/O ports can be used for bank switching or some other things, and since each audio channel is output on a separate pin, it means you can use different mixing levels for each one, and/or to use one for IRQ.<br /><br />You could connect the CHR RAM enable and CIRAM enable to CHR A12 instead of A13 (and CHR A13 to CHR RAM A12), which provides four screens but less graphics are available for sprites.<br /><br />You could have a latch enabled by CHR A13 in order to make CHR ROM bankswitching according to which nametable is selected, and even individual 16x16 attribute areas if that is wanted.<br /><br />To make up mappers in a emulator, it would be useful to support a C API plugin interface that supports NES 2.0 (therefore, you can use 12-bit mappers numbers and have submapper numbers and other things available too) and some other features.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>