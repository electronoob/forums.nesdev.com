<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SRAM mapping &amp; LoROM question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SRAM mapping &amp; LoROM question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10380">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10380</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Charles MacDonald</b> [ Thu Aug 15, 2013 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>SRAM mapping &amp; LoROM question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm working on a RAM-based development cartridge and want to support the most common SRAM mappings. Currently I'm trying to wrap my head around it all.<br /><br />LoROM games have SRAM mapped at banks 70-7D and mirrored at F0-FF. If there is more than 32K of SRAM present, is A15 used (so that it e.g. spans bank 7x:0000-FFFF) or not, so that each bank has 32K of SRAM at 7x:0000-7FFF, with 8000-FFFF being a mirror of the lower 32K of that bank?<br /><br />Does Dezaemon (LoROM with 128K SRAM) do anything differently from this? I'm assuming the 128K RAM is divided into 32K chunks across banks 70-73 at offsets 0000-7FFF for instance.<br /><br />For HiROM games, SRAM is at banks 20-2F and mirrored at A0-AF at offsets 6000-7FFF in each bank. Are there any notable exceptions to that arrangement?<br /><br />I'm not totally clear on how LoROM games with &gt;2MB ROM work, such as Super Metroid. Can anyone explain that? Is it just a matter of using A23 such that banks 00-3F and 80-BF aren't mirrors, so you have two distinct 2MB regions for up to 4MB total?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 15, 2013 1:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SRAM mapping &amp; LoROM question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Super Metroid is 24 Mbit. As I understand it, a 24 Mbit LoROM will have one ROM mapped at $008000-$3FFFFF and another at $408000-$5FFFFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Aug 15, 2013 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SRAM mapping &amp; LoROM question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Charles MacDonald wrote:</div><div class="quotecontent">LoROM games have SRAM mapped at banks 70-7D and mirrored at F0-FF. If there is more than 32K of SRAM present, is A15 used (so that it e.g. spans bank 7x:0000-FFFF) or not, so that each bank has 32K of SRAM at 7x:0000-7FFF, with 8000-FFFF being a mirror of the lower 32K of that bank?</div><br />No.  Please see this diagram:<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/download/file.php?id=731&amp;mode=view">download/file.php?id=731&amp;mode=view</a><!-- l --><br /><br />With mode 20 (what you call &quot;lorom&quot;), SRAM is mapped within the 65816 address space between addresses $0000-7fff within banks $70-7d.  This means you're limited to $8000*14 = 458,752 bytes for SRAM.  Addresses $8000-ffff within banks $70-7d are not related to SRAM (they're mirrors of program ROM).<br /><br />Written more clearly:<br /><br />$700000 to $707fff = SRAM<br />$708000 to $70ffff = Program ROM<br />$710000 to $717fff = SRAM<br />$718000 to $71ffff = Program ROM<br />...<br />$7d0000 to $7d7fff = SRAM<br />$7d8000 to $7dffff = Program ROM<br /><br /><div class="quotetitle">Charles MacDonald wrote:</div><div class="quotecontent">Does Dezaemon (LoROM with 128K SRAM) do anything differently from this? I'm assuming the 128K RAM is divided into 32K chunks across banks 70-73 at offsets 0000-7FFF for instance.</div><br />This sounds correct to me (and differs from your earlier description).<br /><br /><div class="quotetitle">Charles MacDonald wrote:</div><div class="quotecontent">For HiROM games, SRAM is at banks 20-2F and mirrored at A0-AF at offsets 6000-7FFF in each bank. Are there any notable exceptions to that arrangement?</div><br />No.  Please see this diagram:<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/download/file.php?id=732&amp;mode=view">download/file.php?id=732&amp;mode=view</a><!-- l --><br /><br />With mode 21 (what you call &quot;hirom&quot;), SRAM is mapped within the 65816 address space between addresses $6000-8000 within banks $30-3f.  This is also mirrored at addresses $6000-8000 within banks $80-8f.  This means you're limited to $2000*16 = 131,072 bytes (128KBytes) for SRAM.<br /><br /><div class="quotetitle">Charles MacDonald wrote:</div><div class="quotecontent">I'm not totally clear on how LoROM games with &gt;2MB ROM work, such as Super Metroid. Can anyone explain that? Is it just a matter of using A23 such that banks 00-3F and 80-BF aren't mirrors, so you have two distinct 2MB regions for up to 4MB total?</div><br />It should become fairly apparently in the first link I gave you how games up to (almost) 32mbit in size have their ROM mapped into the addressing space.  ROM is mapped to $8000-ffff in banks $00-7d.  $8000 * 126 = 4,128,768 bytes for ROM (as said, just slightly smaller than 32mbit (4,194,304 bytes)).<br /><br />Games which are 24mbit... never mind, Tepples explained it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Charles MacDonald</b> [ Thu Aug 15, 2013 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SRAM mapping &amp; LoROM question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you tepples and koitsu for the clarification! Just what I needed to know.<br /><br />EDIT: Like magic my gamebit arrived soon after posting. To satisfy my curiosity, this is what some different games do:<br /><br /><strong>Super Metroid</strong> (LoROM with ROM &gt;2MB)<br /><br />Half of a LS139 is enabled by ROMSEL# and uses A22, A19 to divide the banks as shown. Note A23 and A15 are not connected to the LS139 or any ROMs, and there's a MAD-1 chip to do the SRAM mapping independently of the LS139.<br /><br />00-1F / 80-9F : ROM #1 (at offsets 8000-FFFF)<br />20-3F / A0-BF : ROM #2 (at offsets 8000-FFFF)<br />40-5F / C0-DF : ROM #3 (at offsets 0000-FFFF)<br />60-7F / E0-FF : LS139 output not used (MAD-1 maps SRAM here, otherwise areas are open bus)<br /><br />When accessing ROM #3 you'll get the same data that's at 8000-FFFF mirrored at 0000-7FFF, since A15 doesn't factor into anything.<br /><br /><strong>Shin Megami Tensei</strong> (LoROM w/ SRAM and no MAD-1)<br /><br />An LS139 is used the same as before, and the 60-7F/E0-FF strobe is further decoded by the 2nd half of the LS139 to enable SRAM only when A20=1 and A15=0. This gives:<br /><br />00-1F / 80-9F : ROM #1<br />20-3F / A0-BF : ROM #2<br />40-5F / C0-DF : Open bus<br />60-6F / E0-EF : Open bus<br />70-7D / F0-FF : SRAM at 0000-7FFF; 8000-FFFF is open bus<br /><br />This arrangement would allow 512K SRAM maximum (at F0-FF:0000-7FFF); though of course much less is installed.<br /><br /><strong>Illusion of Gaia</strong> (HiROM w/ SRAM and no MAD-1)<br /><br />The ROM is enabled when ROMSEL# is asserted and A23=0, and a LS139 enables the SRAM for offsets 6000-7FFF in banks 20-3F and A0-BF; it ignores A23. This gives the following map:<br /><br />00-3F : ROM (at 8000-FFFF so ROM A15=1) (SRAM at 20-3F:6000-7FFF)<br />40-7F : ROM (at 0000-FFFF)<br />80-BF : Open bus (except SRAM at A0-BF:6000-7FFF)<br />C0-FF : Open bus<br /><br /><strong>Mario Paint</strong> (LoROM w/ SRAM and no MAD-1)<br /><br />This is identical to Shin Megami Tensei, except the state of A15 isn't checked when enabling SRAM. That input was re-used to qualify SRAM CS with RESET#. This gives:<br /><br />00-1F / 80-9F : ROM<br />20-3F / A0-BF : Open bus<br />40-5F / C0-DF : Open bus<br />60-6F / E0-EF : Open bus<br />70-7D / F0-FF : SRAM at 0000-FFFF<br /><br />SRAM is only 32K, so it appears mirrored at 8000-FFFF from 0000-7FFF.<br /><br />Maybe these &quot;real world&quot; examples might help people making their own carts.<br /><br />EDIT #2: I was curious about how the MAD-1 worked so I logged all possible inputs into it and came up with this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Pins 12,13,14,15 are ai3,ai2,ai1,ai0 (address inputs)<br />Pin 10 is lohisel (LoROM/HiROM decoding select)<br />Pin 16,1,2,3,4 are lowcs,hics,sramcs,nccs,romoe<br /><br />!lowcs&nbsp; =&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp; !ai2&nbsp; &nbsp; &amp; !ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp; !ai2&nbsp; &nbsp; &amp;&nbsp; ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp; !ai2&nbsp; &nbsp; &amp;&nbsp; ai0;<br />!hics&nbsp; &nbsp;=&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp;&nbsp; ai2&nbsp; &nbsp; &amp; !ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ai2&nbsp; &nbsp; &amp;&nbsp; ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp;&nbsp; ai2&nbsp; &nbsp; &amp;&nbsp; ai0;<br />!sramcs =&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ai3&nbsp; &nbsp; &amp;&nbsp; ai2&nbsp; &nbsp; &amp;&nbsp; ai1&nbsp; &nbsp; &amp; !ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp;&nbsp; romsel &amp; !ai3&nbsp; &nbsp; &amp;&nbsp; ai2&nbsp; &nbsp; &amp;&nbsp; ai1&nbsp; &nbsp; &amp;&nbsp; ai0;<br />!nccs&nbsp; &nbsp;=&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ai3&nbsp; &nbsp; &amp;&nbsp; ai2&nbsp; &nbsp; &amp; !ai1&nbsp; &nbsp; &amp; !ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp;&nbsp; romsel &amp; !ai3&nbsp; &nbsp; &amp; !ai2&nbsp; &nbsp; &amp;&nbsp; ai1&nbsp; &nbsp; &amp;&nbsp; ai0;<br />!romoe&nbsp; =&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp; !ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ai0 <br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp;&nbsp; ai0;<br /></div><br />Now to make sense out of this, let's split the equations up for LoROM and HiROM, and replace the generic address inputs ai0-3 with the LoROM specific inputs:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">!lowcs&nbsp; =&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp; !ba5&nbsp; &nbsp; &amp;&nbsp; a15 <br />!hics&nbsp; &nbsp;=&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ba5&nbsp; &nbsp; &amp;&nbsp; a15 <br />!sramcs =&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ba6&nbsp; &nbsp; &amp;&nbsp; ba5&nbsp; &nbsp; &amp;&nbsp; ba4&nbsp; &nbsp; &amp; !a15 <br />!nccs&nbsp; &nbsp;=&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; ba6&nbsp; &nbsp; &amp;&nbsp; ba5&nbsp; &nbsp; &amp; !ba4&nbsp; &nbsp; &amp; !a15 <br />!romoe&nbsp; =&nbsp; reset&nbsp; &amp; !lohisel &amp; !romsel &amp;&nbsp; a15<br /><br />!lowcs&nbsp; is banks 00-1F / 40-5F / 80-9F / C0-DF, offsets 8000-FFFF<br />!hics&nbsp; &nbsp;is banks 20-3F / 60-7F / A0-BF / E0-FF, offsets 8000-FFFF<br />!sramcs is banks 70-7F / F0-FF, offsets 0000-7FFF<br />!nccs&nbsp; &nbsp;is banks 60-6F / E0-EF, offsets 0000-7FFF<br /></div><br />This arrangement supports two 1MB ROMs, 512K SRAM, and a spare CS. Maybe for more SRAM?<br />Here are the equations for the HiROM mode and the HiROM specific inputs:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">!lowcs&nbsp; =&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp; !ba5; <br />!hics&nbsp; &nbsp;=&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel &amp;&nbsp; ba5;<br />!sramcs =&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp;&nbsp; romsel &amp; !ba6&nbsp; &nbsp; &amp;&nbsp; ba5&nbsp; &nbsp; &amp;&nbsp; a14&nbsp; &nbsp; &amp;&nbsp; a13;<br />!nccs&nbsp; &nbsp;=&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp;&nbsp; romsel &amp; !ba6&nbsp; &nbsp; &amp; !ba5&nbsp; &nbsp; &amp;&nbsp; a14&nbsp; &nbsp; &amp;&nbsp; a13;<br />!romoe&nbsp; =&nbsp; reset&nbsp; &amp;&nbsp; lohisel &amp; !romsel;<br /><br />!lowcs&nbsp; is banks 00-1F / 40-5F / 80-9F / C0-DF, offsets 0000-FFFF (as limited by ROMSEL)<br />!hics&nbsp; &nbsp;is banks 20-3F / 60-7F / A0-BF / E0-FF, offsets 0000-FFFF (as limited by ROMSEL)<br />!sramcs is banks 20-3F / A0-BF, offsets 6000-7FFF<br />!nccs&nbsp; &nbsp;is banks 00-1F / 80-9F, offsets 6000-7FFF<br /></div><br />This arrangement supports two 2MB ROMs, 128K SRAM, and a spare CS. Looks a lot more like spare SRAM with the same 6000-7FFF mapping this time. I like how they use the not-romsel condition to detect non-ROM areas, and then check the lower address lines to restrict it down to 6000-7FFF.<br /><br />We can see the MAD-1 chip seems to have a very similar mapping for SRAM (and ROM) as the cartridges that use off the shelf TTL chips to do the same thing. But I can't help but think that spare CS output could have been more useful if set up to support a third ROM. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />You could shift up (or down) some of the address inputs to support other ROM sizes, but this would map the SRAM incorrectly. For games without SRAM that may be an acceptable use.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>