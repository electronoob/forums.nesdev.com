<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>81</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Apr 17, 2014 3:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a random thought:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;beq +theend&nbsp; ;this is good... don't need any shifting if the value is 0. :)<br />&nbsp; and #00000111b<br />&nbsp; ; (row - 8)*32<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; asl a&nbsp; &nbsp;;&gt;*32<br />&nbsp; asl a<br />&nbsp; asl a<br />+theend<br /></div><br />The optimization here hurts more than it helps. In the case of zero in X, you do end up saving 11 cycles over every other case. An and instruction and 5 asl instructions that take 2 cycles, -1 because of the branch taken that every other case does not have. <br /><br />Now, consider that the code gets the same result whether the branch is there or not. Assuming the other cases (1-7) are equally likely (they probably are if this is collision stuff), that branch (not taken) being there adds 2 cycles for every non zero case. There are 7 of them. Say we're moving to a different row every frame, and we advance for 8 frames. You start on zero with -11 cycles saved. 1 adds 2 cycles, 2 adds 2, etc. On average, you've saved 11, but gained 14. Also, you've lost 2 bytes to do it!<br /><br />Edit2: Fixed the math above. Thought it was and #%00001111. You still come out behind, but not as much.<br /><br />In this case, that doesn't REALLY matter, but sometimes optimizing for the best case makes the worst cases even worse. But only if the cases are equally likely! It's worth doing things like this if your worst case is rare, and your best case is common. Just a thing to think about.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda currRow<br />tax<br /></div><br />to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx currRow<br /></div><br />Anyway, that sort of nitpick might get annoying, but I see it if I post about it or not, so there it is.<br /><br />More stuff:<br />It should probably be adjustRow's responsibility to set once, because it is the function that actually uses it, not seekRow_fieldlo. Or, if these two functions are always meant to be run one after the other, why not just remove the RTS that ends seekRow_fieldlo so they're one subroutine? If not, isn't it still easier to just not call adjustRow twice after seekRow_fieldlo rather than hope that variable catches the case?<br /><br />I guess your RAM map is like this:<br />$0600-$063F = Data for screen 1<br />$0700-$073F = Data for screen 2<br />Edit: Reading your edit after I already made this post, Hey, I might be right! But this is the kind of info that should be in the initial post from the beginning! Or maybe I'm wrong and a screen really does take up the whole page, but see how I might get confused? I assumed 32x32 data, when maybe we're dealing with 8x8 data? Assume I have ZERO info about your code, and that anything you don't tell me I'll guess (and be wrong). To keep me from guessing, just be specific. <br /><br />Part of the confusion is that you state HOW you're going to do something (find (Row - 8) * 32), but not WHAT you're really trying to accomplish. And if the how is a bad method, I'll think you're trying to do something that you're not. What's the absolute end goal of all of this? To use a position to check a collision tile in an array?<br /><br />Why not do this:<br />$0600-$063F = Data for screen 1<br />$0640-$067F = Data for screen 2<br /><br />Because then you can do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fieldlo = $0600<br />lda fieldlo, y;Not indirect, so it's faster.<br />;You also avoid having to set the pointer<br />;up.<br />;No lda #$06<br />;sta fieldlo+1<br /></div><br />And you don't need any of this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />cpx #$08 ;X-M<br />&nbsp; &nbsp; &nbsp; bcc +end ;if x &lt;= 7... end<br />&nbsp; &nbsp; &nbsp; &nbsp; inc fieldlo+1<br />&nbsp; &nbsp; &nbsp; &nbsp;dec once<br /></div><br />Because a row past eight would just load what's next in the buffer (now in $0640-$067F) anyhow. (Well, I guess it depends on how y is set...)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I recieved the exact same answer though without that and #00000111b</div><br /><br />Indeed, you don't need &quot;and #00000111b&quot; at all. If I have a byte like this: &quot;76543210&quot; and my goal is to get this from it &quot;21000000&quot;, the asl instructions alone will do that. bits 7, 6, 5, 4, and 3 will be shifted out so it doesn't matter what they are. 0s will be shifted in.<br /><br />After all that, I'm not sure your code is doing what you want it to. You have a position. You want to get load the first byte of the row for that position in the array. Correct?<br /><br />It seems your data is 32x32. If your position looks like this in binary: AAXXXYYY, consider that the Y bits don't matter because they don't affect which 32x32 tile you're on. So you and them out.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda positionylo<br />and #%11111000<br />sta temp<br /></div><br />Currently if looks like you're using the lowest 3 bits, which I don't think is your goal. Something else to note: The bits marked AA in the example can be used to determine which screen you're on. If you only want changes in X position to affect how to load from new screen, you should and them as well. <br /><br />Edit: And looking at your edit, it looks like I got all that totally wrong! I had written a bunch of stuff about stating goals, and deleted it. Maybe it was needed anyway.<br />row = positiony/tilesize<br />column = positionx/tilesize<br />y=row*arraywidth+column<br />lda array,y<br />is as complicated as it need to be.<br /><br />As well, related to collision: Consider that I know the tile a position is in is collision enabled. I need to eject upwards. My tile size is a power of two.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda position<br />and #%00001111;For 16<br />sta temp<br /><br />lda position<br />clc<br />sbc temp<br />sta position<br /></div><br />Done. How does it work? A tile for this example is 16 pixels. So the lowest 4 bits of the position will tell us how far we are into the tile. Say we're at 0000, the very top of the tile. We want to eject one pixel. So we clear the carry to subtract 1 extra. And subtract 0.<br /><br />Say we're at 1111 ($F). That's the bottom of the tile. To get outside, we want to subtract sixteen. Which... is $F+1, so the same thing works. It works in all the cases. (with square tiles.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Apr 17, 2014 6:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">This is a random thought:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;beq +theend&nbsp; ;this is good... don't need any shifting if the value is 0. :)<br />&nbsp; and #00000111b<br />&nbsp; ; (row - 8)*32<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; asl a&nbsp; &nbsp;;&gt;*32<br />&nbsp; asl a<br />&nbsp; asl a<br />+theend<br /></div><br />The optimization here hurts more than it helps. In the case of zero in X, you do end up saving 11 cycles over every other case. An and instruction and 5 asl instructions that take 2 cycles, -1 because of the branch taken that every other case does not have. <br /><br />Now, consider that the code gets the same result whether the branch is there or not. Assuming the other cases (1-7) are equally likely (they probably are if this is collision stuff), that branch (not taken) being there adds 2 cycles for every non zero case. There are 7 of them. Say we're moving to a different row every frame, and we advance for 8 frames. You start on zero with -11 cycles saved. 1 adds 2 cycles, 2 adds 2, etc. On average, you've saved 11, but gained 14. Also, you've lost 2 bytes to do it!<br /><br />Edit2: Fixed the math above. Thought it was and #%00001111. You still come out behind, but not as much.</div> You confused the math above... I think because we were talking  about my beq branch... and nothing about &quot;and #00000111b.&quot;  Not yet, at least... I think. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">In this case, that doesn't REALLY matter, but sometimes optimizing for the best case makes the worst cases even worse. But only if the cases are equally likely! It's worth doing things like this if your worst case is rare, and your best case is common. Just a thing to think about.</div>Thank you Kasumi, that makes sense to me! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda currRow<br />tax<br /></div><br />to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx currRow<br /></div><br />Anyway, that sort of nitpick might get annoying, but I see it if I post about it or not, so there it is.</div>...it's easier for me to be less confused about... &quot;wow, why did I load the x register with currRow... it's a y value afterall.&quot;  The tax makes it better because then I can easily understand the fact that it's a guest in the x register.  Hope that makes sense... I don't know how I could explain better.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">More stuff:<br />It should probably be adjustRow's responsibility to set once, because it is the function that actually uses it, not seekRow_fieldlo. Or, if these two functions are always meant to be run one after the other, why not just remove the RTS that ends seekRow_fieldlo so they're one subroutine?</div>Cause it works better because the logic is already worked out... I don't have to rethink it.  <br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">If not, isn't it still easier to just not call adjustRow twice after seekRow_fieldlo rather than hope that variable catches the case?</div>That was a way to stop hackers from messing up the game... sorry. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I guess your RAM map is like this:<br />$0600-$063F = Data for screen 1<br />$0700-$073F = Data for screen 2<br />Edit: Reading your edit after I already made this post, Hey, I might be right! But this is the kind of info that should be in the initial post from the beginning! Or maybe I'm wrong and a screen really does take up the whole page, but see how I might get confused? I assumed 32x32 data, when maybe we're dealing with 8x8 data? Assume I have ZERO info about your code, and that anything you don't tell me I'll guess (and be wrong). To keep me from guessing, just be specific.</div>Ok. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  16x16 data.<br /><br />Must go watch Naruto Shippuden. sry.<br />edit: ok done. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Part of the confusion is that you state HOW you're going to do something (find (Row - 8) * 32), but not WHAT you're really trying to accomplish. And if the how is a bad method, I'll think you're trying to do something that you're not. What's the absolute end goal of all of this? To use a position to check a collision tile in an array?<br /><br />Why not do this:<br />$0600-$063F = Data for screen 1<br />$0640-$067F = Data for screen 2<br /><br />Because then you can do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fieldlo = $0600<br />lda fieldlo, y;Not indirect, so it's faster.<br />;You also avoid having to set the pointer<br />;up.<br />;No lda #$06<br />;sta fieldlo+1<br /></div><br />And you don't need any of this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />cpx #$08 ;X-M<br />&nbsp; &nbsp; &nbsp; bcc +end ;if x &lt;= 7... end<br />&nbsp; &nbsp; &nbsp; &nbsp; inc fieldlo+1<br />&nbsp; &nbsp; &nbsp; &nbsp;dec once<br /></div><br />Because a row past eight would just load what's next in the buffer (now in $0640-$067F) anyhow. (Well, I guess it depends on how y is set...)</div>  Woah, I thought every thing using a pointer was indirect... maybe I have to think more on this. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  ... I kindof understand... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I recieved the exact same answer though without that and #00000111b</div><br /><br />Indeed, you don't need &quot;and #00000111b&quot; at all. If I have a byte like this: &quot;76543210&quot; and my goal is to get this from it &quot;21000000&quot;, the asl instructions alone will do that. bits 7, 6, 5, 4, and 3 will be shifted out so it doesn't matter what they are. 0s will be shifted in.</div>  Your mind is much better than mine... but mine is being trained at lumosity.com and it will get better. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">After all that, I'm not sure your code is doing what you want it to. You have a position. You want to get load the first byte of the row for that position in the array. Correct?</div>...well I want to load whatever byte my lady is standing above.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">It seems your data is 32x32. If your position looks like this in binary: AAXXXYYY, consider that the Y bits don't matter because they don't affect which 32x32 tile you're on. So you and them out.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda positionylo<br />and #%11111000<br />sta temp<br /></div><br />Currently if looks like you're using the lowest 3 bits, which I don't think is your goal. Something else to note: The bits marked AA in the example can be used to determine which screen you're on. If you only want changes in X position to affect how to load from new screen, you should and them as well. <br /><br />Edit: And looking at your edit, it looks like I got all that totally wrong! I had written a bunch of stuff about stating goals, and deleted it. Maybe it was needed anyway.</div>  I'm learning reading these posts over and over... I promise. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">row = positiony/tilesize<br />column = positionx/tilesize<br />y=row*arraywidth+column<br />lda array,y<br />is as complicated as it need to be.</div> Yes! It is. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">As well, related to collision: Consider that I know the tile a position is in is collision enabled. I need to eject upwards. My tile size is a power of two.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda position<br />and #%00001111;For 16<br />sta temp<br /><br />lda position<br />clc<br />sbc temp<br />sta position<br /></div><br />Done. How does it work? A tile for this example is 16 pixels. So the lowest 4 bits of the position will tell us how far we are into the tile. Say we're at 0000, the very top of the tile. We want to eject one pixel. So we clear the carry to subtract 1 extra. And subtract 0.<br /><br />Say we're at 1111 ($F). That's the bottom of the tile. To get outside, we want to subtract sixteen. Which... is $F+1, so the same thing works. It works in all the cases. (with square tiles.)</div>  I'm going to answer this part later... thank you for giving me some more time to think about it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Apr 18, 2014 2:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You confused the math above... I think because we were talking about my beq branch... and nothing about &quot;and #00000111b.&quot; Not yet, at least... I think.</div><br />Another way to say it is the average is better. I suppose the math is wrong, because there really are still 15 ways to enter the function even if it gets truncated to 8 there. But eh, that just makes the average worse.<br /><br />3 cycles for case 0. (only the branch, the other stuff isn't run and the rest is the same.<br />14 cycles for the other 15 cases. (2 for the branch not taken, 2 for the and, 2*5 for the ASL instructions.)<br />If the branch was not there, all cases would take 12 cycles. (2 for the and, 2*5 for the ASL instructions.)<br /><br />So the average is (15*14+3)/16. 13.3125<br />Versus (16*12)/16 = 12. It's about a cycle behind on average, heh. But if you do it 16 times (in all the different ways), it's<br />(15*14+3) = 213<br />vs<br />(16*12) = 192<br /><br />Either way It's not a huge deal, but it's just a general thing to think about. &quot;Am I making my worst cases worse without improving my average?&quot;<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That was a way to stop hackers from messing up the game... sorry. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /></div><br />Stop them how? Here's the deal about this: NES is a well documented system with sophisticated debuggers available. You can do all sorts of quirky, obfuscated things in software, but you can't (easily) change how you interact with the hardware. One can find what page your sprites are in by a write breakpoint to the sprite DMA address. One can find which ones belong to your main character by matching the tile IDs there and in CHR. Then one can find where the actual position of the character is in RAM, by finding out how those sprites' positions are updated. <br /><br />Not to scare ya, but I'm saying I wouldn't sacrifice code readability, speed or size as a hacker deterrent. At least until after the game is done, anyway. Then you can do back and try to make it as impossible to follow as you want. I do get the concern, though. I do.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Woah, I thought every thing using a pointer was indirect... maybe I have to think more on this.</div><br />Everything using a pointer is indirect. But everything ,y or ,x isn't.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$06<br />sta fieldlo+1<br />lda #$00<br />sta fieldlo<br /><br />ldy tile<br />lda (fieldlo),y<br /></div><br />will get the same result in A as<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fieldlo = $0600;This is a define, so the value can't be changed at runtime the above<br /><br />ldy tile<br />lda fieldlo,y<br /></div><br />You actually do want indirect, because a screen of 16x16 tiles does indeed take a full page. (That's actually why I only store 32x32 tiles in RAM. I needed 4 screens stored because I 8 way scroll, and I didn't have 4 pages. As a bonus, now all 4 screens fit in just one page.)<br /><br />You could also do this to not use indirect and still have multiple screens:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fieldlo1 = $0600<br />fieldlo2 = $0700<br /><br />ldy tile<br />lda positionhigh<br />ror a;(lowest bit is in carry, which would decide which screen you're on)<br />bcs usescreen2<br />lda fieldlo1,y<br />bcc end;Will always branch, because above doesn't change the carry<br />usescreen2:<br />lda fieldlo2,y<br />end:<br /></div><br />Using indirect is fine, I got confused because I wasn't sure what type of data we were dealing with. In that case, I tend to assume it's like my game.<br /><br />In particular, I was confused by the multiply by 32.<br /><br />Here's a diagram:<br />XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX <br />YY YY YY YY YY YY YY YY YY YY YY YY YY YY YY YY<br />It is 32 bytes in order starting at $0600 where each pair of letter (either XX or YY) represents a byte.<br /><br />My original assumption was that all the XXs were Row 00 from screen 1. And all of the YYs were Row 01 from screen 1.<br />I gather now that all the XXs are still Row 00 from screen 1, but all the YYs are actually Row 00 from screen 2.<br /><br />That makes the multiply by 32 make sense. As well as the row 8 compare. <br />(This is why I ask about your level data always. There are lots of ways to store it, and if it's stored differently than I guess it is, the code I give you won't work, or I'll give you fixes that break it further. Like the fieldlo1/fieldlo2 won't work if the YYs are row 00 on screen 2.)<br /><br />Anyway, (after many bad assumptions on my part) if the above is true I see no problems with what you have. The row number is a number 0-15. You multiply it by 32, which actually mean there are only 8 possibilities instead of 15! You lose the bit that selects which screen, but you fix that later <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> in adjust row.<br /><br />But... with some carry flag magic, you don't have to fix it later.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">seekRow_fieldlo:<br />;jsr here with a row number (0-15) in A<br /><br />;It sets a 2-byte variable in zero page<br />;to point to the first byte in that row<br />&nbsp; ; (row - 8)*32<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; asl a&nbsp; &nbsp;;&gt;*32<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; sta fieldlo+0<br />&nbsp;<br />&nbsp; lda #$06<br />&nbsp; adc #$00<br />&nbsp; sta fieldlo+1<br />&nbsp; rts ;end of seekRow_fieldlo</div><br />Done. No need for adjust row. How does it work? Think about which bit you were checking with that cpx #$08. It is the set bit here: 00001000. Since the row only has a range of 0-15, no other bit will change the result of that compare.<br /><br />What happens when we asl bits again? Let's take a look at two numbers. I'll mark where the bit you're checking is with X.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #%0000X000;lda #%0000X111<br />asl a;(Highest bit goes into carry. 0 for both)<br />#%000X0000;lda #%000X1110;These would now be in A<br />asl a;(Highest bit goes into carry. 0 for both)<br />#%00X00000;lda #%00X11100;These would now be in A<br />asl a;(Highest bit goes into carry. 0 for both)<br />#%0X0000000;lda #%0X111000;These would now be in A<br />asl a;(Highest bit goes into carry.0 for both)<br />#%X00000000;lda #%X1110000; These would now be in A<br />asl a;(Highest bit goes into carry. X for both)<br />#%000000000;lda #%11100000;These would now be in A<br /></div><br />Hey, what do you know? That bit you were checking is conveniently in the carry. And what happens when you add zero with carry? If it's clear, you add zero, if it's set... you add 1!  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Anyway, both yours and mine accomplish the goal of setting the pointer to the first byte of a row in the collision table being given that row's number. Goal stating. The rest of your code goes on to load the proper byte from the collision table after being given a column.<br /><br />I assume your next goal is then to get a row and column to give to this function. <br />row = positiony/tilesize<br />column = positionx/tilesize<br />(both need a high bit from said divide, so make sure it's 16 bit)<br />From there you're on your way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Apr 18, 2014 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You confused the math above... I think because we were talking about my beq branch... and nothing about &quot;and #00000111b.&quot; Not yet, at least... I think.</div><br />Another way to say it is the average is better. I suppose the math is wrong, because there really are still 15 ways to enter the function even if it gets truncated to 8 there. But eh, that just makes the average worse.<br /><br />3 cycles for case 0. (only the branch, the other stuff isn't run and the rest is the same.<br />14 cycles for the other 15 cases. (2 for the branch not taken, 2 for the and, 2*5 for the ASL instructions.)<br />If the branch was not there, all cases would take 12 cycles. (2 for the and, 2*5 for the ASL instructions.)<br /><br />So the average is (15*14+3)/16. 13.3125<br />Versus (16*12)/16 = 12. It's about a cycle behind on average, heh. But if you do it 16 times (in all the different ways), it's<br />(15*14+3) = 213<br />vs<br />(16*12) = 192<br /><br />Either way It's not a huge deal, but it's just a general thing to think about. &quot;Am I making my worst cases worse without improving my average?&quot;</div> Thank you Kasumi! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That was a way to stop hackers from messing up the game... sorry. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /></div><br />Stop them how? Here's the deal about this: NES is a well documented system with sophisticated debuggers available. You can do all sorts of quirky, obfuscated things in software, but you can't (easily) change how you interact with the hardware. One can find what page your sprites are in by a write breakpoint to the sprite DMA address. One can find which ones belong to your main character by matching the tile IDs there and in CHR. Then one can find where the actual position of the character is in RAM, by finding out how those sprites' positions are updated. <br /><br />Not to scare ya, but I'm saying I wouldn't sacrifice code readability, speed or size as a hacker deterrent. At least until after the game is done, anyway. Then you can do back and try to make it as impossible to follow as you want. I do get the concern, though. I do.</div> Thanks for all of this kind advise! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Woah, I thought every thing using a pointer was indirect... maybe I have to think more on this.</div><br />Everything using a pointer is indirect. But everything ,y or ,x isn't.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$06<br />sta fieldlo+1<br />lda #$00<br />sta fieldlo<br /><br />ldy tile<br />lda (fieldlo),y<br /></div><br />will get the same result in A as<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fieldlo = $0600;This is a define, so the value can't be changed at runtime the above<br /><br />ldy tile<br />lda fieldlo,y<br /></div><br />You actually do want indirect, because a screen of 16x16 tiles does indeed take a full page. (That's actually why I only store 32x32 tiles in RAM. I needed 4 screens stored because I 8 way scroll, and I didn't have 4 pages. As a bonus, now all 4 screens fit in just one page.)</div>That's really amazing!  All 4 screens in just one page... wow 32x32 tiles are incredible! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">You could also do this to not use indirect and still have multiple screens:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fieldlo1 = $0600<br />fieldlo2 = $0700<br /><br />ldy tile<br />lda positionhigh<br />ror a;(lowest bit is in carry, which would decide which screen you're on)<br />bcs usescreen2<br />lda fieldlo1,y<br />bcc end;Will always branch, because above doesn't change the carry<br />usescreen2:<br />lda fieldlo2,y<br />end:<br /></div><br />Using indirect is fine, I got confused because I wasn't sure what type of data we were dealing with. In that case, I tend to assume it's like my game.<br /><br />In particular, I was confused by the multiply by 32.<br /><br />Here's a diagram:<br />XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX <br />YY YY YY YY YY YY YY YY YY YY YY YY YY YY YY YY<br />It is 32 bytes in order starting at $0600 where each pair of letter (either XX or YY) represents a byte.<br /><br />My original assumption was that all the XXs were Row 00 from screen 1. And all of the YYs were Row 01 from screen 1.<br />I gather now that all the XXs are still Row 00 from screen 1, but all the YYs are actually Row 00 from screen 2.<br /><br />That makes the multiply by 32 make sense. As well as the row 8 compare. </div>YEAY!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">(This is why I ask about your level data always. There are lots of ways to store it, and if it's stored differently than I guess it is, the code I give you won't work, or I'll give you fixes that break it further. Like the fieldlo1/fieldlo2 won't work if the YYs are row 00 on screen 2.)</div>  Ah yes I understand what you are talking about and hope to state my goals more clearly in the future.<br /><br />Have to go mow now... will finish this in a bit.<br />edit:<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Anyway, (after many bad assumptions on my part) if the above is true I see no problems with what you have. The row number is a number 0-15. You multiply it by 32, which actually mean there are only 8 possibilities instead of 15! You lose the bit that selects which screen, but you fix that later <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> in adjust row.<br /><br />But... with some carry flag magic, you don't have to fix it later.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">seekRow_fieldlo:<br />;jsr here with a row number (0-15) in A<br /><br />;It sets a 2-byte variable in zero page<br />;to point to the first byte in that row<br />&nbsp; ; (row - 8)*32<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; asl a&nbsp; &nbsp;;&gt;*32<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; sta fieldlo+0<br />&nbsp;<br />&nbsp; lda #$06<br />&nbsp; adc #$00<br />&nbsp; sta fieldlo+1<br />&nbsp; rts ;end of seekRow_fieldlo</div><br />Done. No need for adjust row. How does it work? Think about which bit you were checking with that cpx #$08. It is the set bit here: 00001000. Since the row only has a range of 0-15, no other bit will change the result of that compare.<br /><br />What happens when we asl bits again? Let's take a look at two numbers. I'll mark where the bit you're checking is with X.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #%0000X000;lda #%0000X111<br />asl a;(Highest bit goes into carry. 0 for both)<br />#%000X0000;lda #%000X1110;These would now be in A<br />asl a;(Highest bit goes into carry. 0 for both)<br />#%00X00000;lda #%00X11100;These would now be in A<br />asl a;(Highest bit goes into carry. 0 for both)<br />#%0X0000000;lda #%0X111000;These would now be in A<br />asl a;(Highest bit goes into carry.0 for both)<br />#%X00000000;lda #%X1110000; These would now be in A<br />asl a;(Highest bit goes into carry. X for both)<br />#%000000000;lda #%11100000;These would now be in A<br /></div><br />Hey, what do you know? That bit you were checking is conveniently in the carry. And what happens when you add zero with carry? If it's clear, you add zero, if it's set... you add 1!  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><span style="font-size: 200%; line-height: normal"><strong><span style="color: #FF40FF">THANKS SO MUCH Kasumi!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  This is really incredible!</span><span style="color: #BF0080">!!!!!!!!!!!!!!!!!</span></strong></span><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Anyway, both yours and mine accomplish the goal of setting the pointer to the first byte of a row in the collision table being given that row's number. Goal stating. The rest of your code goes on to load the proper byte from the collision table after being given a column.<br /><br />I assume your next goal is then to get a row and column to give to this function. <br />row = positiony/tilesize<br />column = positionx/tilesize<br />(both need a high bit from said divide, so make sure it's 16 bit)<br />From there you're on your way.</div>  Thank you so much Kasumi, I really learned a lot from all of your help. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Yes I think that would be my next goal. I have to go... sorry.<br /><br />edit2: I'm back. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I want to add that I'm not really sure about my next goal... I think I'll have a better idea after I apply your awesome magical carry idea.<br /><br /><span style="color: #BF0080">edit3.</span><br /><br />edit4: <div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">As well, related to collision: Consider that I know the tile a position is in is collision enabled. I need to eject upwards. My tile size is a power of two.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda position<br />and #%00001111;For 16<br />sta temp<br /><br />lda position<br />clc<br />sbc temp<br />sta position<br /></div><br />Done. How does it work? A tile for this example is 16 pixels. So the lowest 4 bits of the position will tell us how far we are into the tile. Say we're at 0000, the very top of the tile. We want to eject one pixel. So we clear the carry to subtract 1 extra. And subtract 0.<br /><br />Say we're at 1111 ($F). That's the bottom of the tile. To get outside, we want to subtract sixteen. Which... is $F+1, so the same thing works. It works in all the cases. (with square tiles.)</div>  I'm going to answer this part later... thank you for giving me some more time to think about it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>  <span style="font-size: 150%; line-height: normal">Ahhh, yes, that's great! Thank you for this too!!! </span>:D

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Apr 21, 2014 5:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru<span style="color: #FF40FF">, near the bottom of page 50,</span> wrote:</div><div class="quotecontent">The formula for reading data from a 2D array which is stored in memory linearly is always <strong>Y * ElementsPerRow + X</strong>, that doesn't change. But you also have to take into consideration that the base unit is the type of element you are accessing, in this case, metatiles. If you have pixel coordinates, you have to first convert them to metatile coordinates, hence the need to divide both X and Y by the dimensions of your metatiles before applying that formula.</div>... ok so now, with my 32 byte rows... Elements per row would be 32... so the formula would be (Y/16) * 32 + (X/16).  edit: Would this code below be correct?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;********************************************************************<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;linear_position finds linear position of metatile declared in index x and index y<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; destroys a<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; recieves x and y registers<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; ends with linear position in a<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;********************************************************************<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;linear_position:<br />0C4FE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;; Calculate the index of the metatile: (Y / 16) * 32 + (X / 16) = LINEAR_POSITION&nbsp; p.50&nbsp; -Not me.-<br />0C4FE 8A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;txa ;X is in x-register<br />0C4FF 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;divide my X coordinate by (2 * 2 * 2 * 2) = 16<br />0C500 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;----------------------------&gt;*<br />0C501 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;--------------------------------&gt;*<br />0C502 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;------------------------------------&gt;*<br />0C503 85 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta tC+1<br />0C505 98&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tya ;Y is in y-register<br />0C506 29 F0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;and #11110000b<br />0C508 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl a ;hopefully works... is added for the 32<br />0C509 05 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;ora tC+1<br />0C50B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C50B 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rts ;end of linear_position </div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Apr 21, 2014 7:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No, because as stated before you need to do a 16 bit divide: <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">row = positiony/tilesize<br />column = positionx/tilesize<br />(both need a high bit from said divide, so make sure it's 16 bit)<br /></div><br />X is supposed to give you a value anywhere from zero to 31 because your rows are 32 elements long. If you just LSR the low byte 4 times, you cannot get a value higher than 15.<br /><br />You already have a high bit from your divide of y by 16 (because it increments to the next page of RAM when that bit is set), you still need one from the divide of X. (And if you're feeling tricky... because you need JUST ONE of the high bits, you can get away with doing the 16bit divide with ror/lsr just once, then use lsr for the rest of the time.)<br /><br />As well, you actually don't need to do ANYTHING with Y anymore. The pointer that you set up at seekRow_fieldlo already points to the first byte of the row. So the red part of the formula is done: <span style="color: #800000">(Y/16) * 32</span> + (X/16)<br /><br />All you need to do is what's necessary for X, then do<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy (whatever the value of X/16 is)<br />lda (fieldlo),y<br /></div><br /><br />Edit: Actually, I suppose it's not quite true you don't need to do anything for Y. You still need to feed the proper row to seekRow_fieldlo by dividing the y position by 16. (Previously, you just loaded currRow, which I assume wasn't actually set up.) But it doesn't make sense to set up y here based on how your previous code is set up.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;16 bit divide y by 16<br />;Result is in A<br />jsr seekRow_fieldlo<br />;16 bit divide x by 16<br />;Result is in A<br />tay<br />lda (fieldlo), y<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Apr 28, 2014 2:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't understand why this is happening<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;/*********************<br />0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; send row number in X :(0-15) but it really only can accept 0-7 WAHHAHAHAhahahahaha! ...8bit sweetness :)<br />0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;distroys a preserves x<br />0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;*********************/<br />0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;seekRow_fieldlo:<br />0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;set 2-byte variable in zero page<br />0C5D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />0C5D3 8A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; txa<br />0C5D4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; beq +theend&nbsp; ;this is good... don't need any shifting if the value is 0. :)<br />0C5D4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; and #00000111b<br />0C5D4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; (row - 8)*32&nbsp; &nbsp;<br />0C5D4 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl a<br />0C5D5 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl a<br />0C5D6 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl a&nbsp; &nbsp;;&gt;*32<br />0C5D7 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl a<br />0C5D8 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; asl a<br />0C5D9 85 4C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta fieldlo+0<br />0C5DB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5DB A9 06&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #$06<br />0C5DD 69 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;adc #$00<br />0C5DF 85 4D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sta fieldlo+1<br />0C5E1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5E1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C5E1 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rts ;end of seekRow_fieldlo</div><br /><br />Ok so it looks like seekRow_fieldlo starts at $C5D3... the txa... but<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=1499&amp;mode=view"><img src="./download/file.php?id=1499&amp;t=1" alt="seekRow_fieldlo in 6502 Debugger.png" /></a><br />
			<span class="gensmall">seekRow_fieldlo in 6502 Debugger.png [ 64.99 KiB | Viewed 468 times ]</span>
		

		<br />
	</div><br />it looks like it starts at $C5D4... why?   <img src="./images/smilies/icon_surprised.gif" alt=":o" title="Surprised" />  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><br />I know that this code above was taken out of my .lst file.  It is always correct; it tells me when it's changed... from when I build my .nes file.  And I know that I loaded the correct .nes file... it's always named the same thing in the same folder.  I'm using Fceux 2.1.5. <br />Be back after I mow.<br /><br />edit: um... well, I just built my .nes file again and my .lst file changed... seekRow_fieldlo starts at $C5D4 now... so nevermind... <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon May 05, 2014 10:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">No, because as stated before you need to do a 16 bit divide: <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">row = positiony/tilesize<br />column = positionx/tilesize<br />(both need a high bit from said divide, so make sure it's 16 bit)<br /></div><br />X is supposed to give you a value anywhere from zero to 31 because your rows are 32 elements long. If you just LSR the low byte 4 times, you cannot get a value higher than 15.<br /><br />You already have a high bit from your divide of y by 16 (because it increments to the next page of RAM when that bit is set), you still need one from the divide of X. (And if you're feeling tricky... because you need JUST ONE of the high bits, you can get away with doing the 16bit divide with ror/lsr just once, then use lsr for the rest of the time.)<br /><br />As well, you actually don't need to do ANYTHING with Y anymore. The pointer that you set up at seekRow_fieldlo already points to the first byte of the row. So the red part of the formula is done: <span style="color: #800000">(Y/16) * 32</span> + (X/16)<br /><br />All you need to do is what's necessary for X, then do<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy (whatever the value of X/16 is)<br />lda (fieldlo),y<br /></div><br /><br />Edit: Actually, I suppose it's not quite true you don't need to do anything for Y. You still need to feed the proper row to seekRow_fieldlo by dividing the y position by 16. (Previously, you just loaded currRow, which I assume wasn't actually set up.) But it doesn't make sense to set up y here based on how your previous code is set up.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;16 bit divide y by 16<br />;Result is in A<br />jsr seekRow_fieldlo<br />;16 bit divide x by 16<br />;Result is in A<br />tay<br />lda (fieldlo), y<br /></div></div>Yes, currRow wasn't set up... it just sounded nice... : )<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;16 bit divide y by 16<br />;Result is in A<br />tax<br />jsr seekRow_fieldlo<br />;16 bit divide x by 16<br />;Result is in A<br />tay<br />lda (fieldlo), y<br /></div> <br /><br />that is how it is set up now... with the tax.  That doesn't seem odd anymore... index x holding y and index y holding x... cause I've stepped through this so many times.  I'm almost there! <strong><span style="font-size: 150%; line-height: normal"><span style="color: #40BFFF">Thank you Kasumi for this amazing extra help!!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></span></span></strong> But, I want to ask something else...  about distanceX.<br /><br />Now, distanceX is there because changing oX kept moving my girl character around the screen... I didn't understand, and still don't understand, how to make oX grow above 255 and still remain in the right spot on screen. What do ya'll do to increase your X value (my X value is oX)?  I don't want distanceX anymore... oX would be just fine for holding values beyond 255... it has an extra byte ready for info... I just don't understand how to make oX increase and keep my lady on the correct part of the screen.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br /><span style="color: #40BFFF">edit.</span><br /><br />edit2: What have I thought about this question? Hmm... the lady would have to somehow increase her oX value by like 257 so she could move forward an entire screen + 2.  I don't understand.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><br /><br />edit3: What is distanceX?  It is a seperate 16 bit value... that increments when the player presses right on the control pad.  See distanceX is not oX... so it is free of being tied to the screen. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon May 05, 2014 5:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've asked before if you understand 16 bit math. Do you? There's absolutely no more to getting a value higher than 255 than understanding 16 bit math.<br /><br />There are three things that affect where a sprite is drawn to the screen if you scroll. The most direct are the X and Y values in whatever page you use with the sprite DMA, because they are obviously exactly where your sprite is drawn. To make this value correct, you must do some math with the other two things that matter. One of them is the sprite's ACTUAL (read: non 8bit) position. What's the other important value?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon May 05, 2014 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I've asked before if you understand 16 bit math. Do you?</div><s>Yes, I think so.  <img src="./images/smilies/icon_smile.gif" alt=":&#41;" title="Smile" /></s> <span style="color: #40FF00">No, I don't think so because I haven't been making progress... I'm sorry. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /></span><span style="color: #FF0080">I need to be refreshed.</span><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"> There's absolutely no more to getting a value higher than 255 than understanding 16 bit math.</div>Ok, I will try my best to figure this out.  I'm glad to know that that is absolute.  Thanks Kasumi! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">There are three things that affect where a sprite is drawn to the screen if you scroll. The most direct are the X and Y values in whatever page you use with the sprite DMA, because they are obviously exactly where your sprite is drawn. To make this value correct, you must do some math with the other two things that matter. One of them is the sprite's ACTUAL (read: non 8bit) position. What's the other important value?</div>I don't know.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> <br />I must sleep now... goodnight. : )<br /><br />edit: Could the other important value have something to do with the level map?  <br />I just read this by tokumaru:<br /><div class="quotetitle">tokumaru<span style="color: #40BFFF">, on page 54,</span> wrote:</div><div class="quotecontent">I think that the problem is that your current design is still based on the NES screen and the name tables. Most people start out that way, because it's simpler to move objects around that small area, but once you start messing with scrolling, you have to see things differently: the screen and the name tables are not the containers of the objects anymore, they are merely used as a viewport, to show a representation of part of the level, and the level is the actual container of the objects.<br /><br />You should forget about the screen and the name tables for a moment, and think of the level map as the basis for your game world. Your objects exist in the level, so everything about them is relative to the level map. Sprite coordinates are not restricted to 8 bits anymore, since levels can be much wider than 256 pixels. To test for collisions, you have to do some math with the object coordinates (like we discussed before), and since the sprite coordinates are in the same domain as level map coordinates, scrolling is absolutely irrelevant to collisions.<br /><br />To make things easier, ideally you'd have access to the whole map, either by decompressing it to WRAM or storing it uncompressed (or compressed in a way that allows for random access) in the ROM. Having access to the complete level makes it easy to move objects around and have them collide with the level regardless of what the screen and the name tables are showing.<br /><br />Don't think of scrolling as &quot;the level going by&quot;, but rather as &quot;a camera panning across the level&quot;. The level is stationary, but a virtual &quot;camera&quot; moves around in order to display different parts of the level, and it's this camera that dictates what gets written to the name tables and the OAM. You camera must have its own coordinates, which are used to convert level coordinates into screen coordinates (i.e. level coordinates - camera coordinates = screen coordinates), and you'll have to perform this conversion whenever you render sprites to OAM or metatile to the name tables.<br /><br />I know it sounds complicated, but nobody said that scrolling was easy, specially if done right. If you do it the wrong way and keep everything oriented to screen coordinates, things will surely get out of hand (like the problem you are having now, where objects aren't aligning with the collision data).</div><br /><br /><span style="color: #40FF00">edit2.</span> <span style="color: #FF0080">edit3.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed May 07, 2014 2:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Progress has been made!! Right now there's a hole near the water graphics and my  lady just keeps falling...  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />   This is incredible.  Posting this as a new post so that you will notice this.  Kasumi or someone else if you are <s>almost done with</s> <span style="color: #FF0080">involved in</span> a post that teaches me 16 bit math please finish... I would still like to read it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><span style="color: #FF0080">last edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed May 07, 2014 4:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The unsigned range for a set of X bytes is 256 to the Xth power.<br /><br />A value contained in one byte is 256^1. 256 possible values, ranging from 0 to 255.<br />A value contained in two bytes is 256^2. 65536 possible values, ranging from 0 to 65535.<br />A value contained in three bytes is 256^3. 16777216 possible values, ranging from 0 to 16777215.<br />Etc.<br /><br />This is true because each byte represents a range of 256 values by itself. Assume we have two bytes. <br /><br />If byte 1 is always zero, there are still 256 values possible in byte 2. <br />If byte 1 is always one, there are still 256 values possible in byte 2.<br /><br />If byte 1 is either zero or one, there are 512 possible values. The 256 values of byte 2 when byte 1 is zero. Plus the 256 values of byte 2 when byte 1 is one.<br /><br />If byte 1 can be any of its own 256 values, there are 256 values possible in byte 2 FOR EVERY POSSIBLE VALUE in byte 1. And of course there are 256 values possible for byte 1.<br /><br />256*256 = 65536 possible values for the two bytes.<br /><br />256*256*256 = 16777216 possible values for three bytes.<br /><br />That is the stated truth about the ranges of multibyte values, and that is why it is true. Any questions?<br /><br />The value for any X byte number can be found with (  highestbytevalue*256^(X-1)  )+(  lowerbytevalue*256^(X-2)  ) continuing as needed until X-the number of bytes is less than 0.<br /><br />Consider a value contained in one byte. This one byte can be considered the highest byte representing the value. Therefore the number it represents is<br />(  value * 256^(1-1)  )<br />Anything to the 0th power is 1.<br />(  value * 1  )<br />Anything multiplied by one is itself.<br />(  value  )<br />So the value contained in one byte is just the value of that byte.<br /><br />Consider a value contained in two bytes. One byte will be considered the high byte of the value. One byte will be the low byte.<br />(  highbytevalue * 256^(2-1)  )+(  lowbytevalue  * 256^(2-2)  )<br />(  highbytevalue * 256^1  )+(  lowbytevalue * 256^0  )<br />(  highbytevalue * 256  )+(  lowbytevalue  )<br /><br />As for why this is so. Recall the example above with byte 1 and byte 2. In that example Byte 2 was the lowest byte, and byte 1 was the highest byte.<br /><br />If byte 1 is always zero, there are still 256 values possible in byte 2. <br />(  0 * 256  )+(  lowbytevalue  )<br />So if the highest byte is zero, the value of the low byte is the whole number.<br /><br />If byte 1 is always one, there are still 256 values possible in byte 2.<br />(1 * 256)+(  lowbytevalue  )<br />So if the highest byte is one, the value is 256+whatever the lowbyte value.<br /><br />Consider that the high byte value is 0, and the low byte value is 255. 255 is the highest value a single byte can contain. We have exhausted its range. Adding 1 will make it equal zero.<br /><br />1+255 would be 256. <br />But adding one to 255 stored in a byte makes it zero.<br />The way to represent a value of 256 using the above equation is a high byte of 1 with a lowbyte of zero.<br />(  highbytevalue * 256  )+(  lowbytevalue  )<br />(1*256)+(0)<br />The value of the two bytes is 256.<br /><br />The carry flag is designed to tell you when you have exhausted the range of the byte. So you can CARRY the value into a higher byte (if there is one.)<br /><br />Let's do some math using the above example. The highbyte is 0. The lowbyte is 255. We will add the number 1. (which has a high byte of 0, and a low byte of 1)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda lowbyte<br />clc<br />adc #$01<br />sta lowbyte<br />;At this point the carry is set, because 255+1 would have been greater than 255<br />lda highbyte<br />adc #$00<br />sta highbyte<br />;At this point the carry is clear, because 0+1 would not have been greater than 255.<br />;So if there was a third byte, we needed to add it would not add an extra from the carry.<br />;Thanks to the carry flag, you can have a value held in any number of bytes, limited only by RAM.<br /></div><br />How does one represent 384 using two bytes? What is 384+128 as two bytes? How would you represent such an addition in code?<br /><br />You clear the carry ONLY before you add the lowest two bytes, because before then its state is not related to the current value of the number. After that its set properly for however many adds you want to do without you manually changing it, because the previous adds were set correctly by math relating to the value of the multibyte number.<br /><br />Those are the basics. What are your questions? Anything you don't understand will continue to haunt you, so ask now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri May 09, 2014 12:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So lets say we have 8 bytes... like Nintendo's third console.<br /><br />We would be able to use numbers from 0 to 18446744073709551615.<br />That's 18,446,744,073,709,551,616 numbers...  I'm so glad that ends with a 6, just like 256.<br />How do you say that number?  Haha it would be eightteen million four hundred fourty<span style="color: #8080FF">-</span>six thousand seven hundred and fourty<span style="color: #8080FF">-</span>four <span style="color: #FF0000">trillion</span>, seventy<span style="color: #8080FF">-</span>three <span style="color: #FF4000">billion</span>, seven hundred and nine <span style="color: #FF8000">million</span>, five hundred and fifty<span style="color: #8080FF">-</span>one <span style="color: #FFBF00">thousand</span>, six hundred and sixteen.  That's quite huge.  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /><br /><br />00001111 00001111 00001111 00001111 00001111 00001111 00001111 00001111 would be<br /><br />=(8thbytevalue * 256^(8-1))+(7thbytevalue * 256^(8-2))+(6thbytevalue * 256^(8-3))+(5thbytevalue * 256^(8-4))+(4thbytevalue * 256^(8-5))+(3rdbytevalue * 256^(8-6))+(2ndbytevalue * 256^(8-7))+(1stbytevalue * 256^(8-8))<br /><br />=(8thbytevalue * 256^(7))+(7thbytevalue * 256^(6))+(6thbytevalue * 256^(5))+(5thbytevalue * 256^(4))+(4thbytevalue * 256^(3))+(3rdbytevalue * 256^(2))+(2ndbytevalue * 256^(1))+(1stbytevalue * 256^(0))<br /><br />=(8thbytevalue * 256^(7))+(7thbytevalue * 256^(6))+(6thbytevalue * 256^(5))+(5thbytevalue * 256^(4))+(4thbytevalue * 256^(3))+(3rdbytevalue * 256^(2))+(2ndbytevalue * 256)+(1stbytevalue * 1)<br /><br />=(8thbytevalue * 72057594037927936)+(7thbytevalue * 281474976710656)+(6thbytevalue * 1099511627776)+(5thbytevalue * 4294967296)+(4thbytevalue * 16777216)+(3rdbytevalue * 65536)+(2ndbytevalue * 256)+1stbytevalue<br /><br />=(15 * 72057594037927936)+(15 * 281474976710656)+(15 * 1099511627776)+(15 * 4294967296)+(15 * 16777216)+(15 * 65536)+(15 * 256)+15<br /><br />=(1080863910568919040)+(4222124650659840)+(16492674416640)+(64424509440)+(251658240)+(983040)+(3840)+15<br /><br />=1080863910568919040 + 4222124650659840 + 16492674416640 + 64424509440 + 251658240 + 983040 + 3840 + 15<br /><br />=1085102592571150095<br /><br />=1,085,102,592,571,150,095<br /><br />So <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#0000111100001111000011110000111100001111000011110000111100001111b</tt> = One million eighty<span style="color: #8080FF">-</span>five thousand one hundred and two <span style="color: #FF0000">trillion</span>,  five hundred nin<span style="color: #FF0080">e</span>ty<span style="color: #8080FF">-</span>two <span style="color: #FF4000">billion</span>, five hundred seventy<span style="color: #8080FF">-</span>one <span style="color: #FF8000">million</span>, one hundred fifty <span style="color: #FFBF00">thousand</span>, and nin<span style="color: #FF0080">e</span>ty<span style="color: #8080FF">-</span>five.  <span style="color: #40FF80"><span style="font-size: 200%; line-height: normal"><strong>I UNDERSTAND THANK YOU INCREDIBLY MUCH KASUMI!!</strong></span></span><span style="font-size: 150%; line-height: normal"><span style="color: #0080FF"><strong>!!!!!!!!!!!!!!!!!!!!!!</strong></span></span> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  <br /><br />Working with the <s>Nindendo</s> <span style="color: #40BFFF">Nintendo</span> 64 would be insane and terrible... in my opinion.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><span style="color: #40BFFF">edit.</span><br /><span style="color: #0080FF">edit3.</span><br /><span style="color: #8080FF">last_edit.</span><br /><span style="color: #FF0080">adding_correct_es.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri May 09, 2014 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the topic of 16 bit operations on the 6502, I highly recommend reading this article about comparisons:<br /><a href="http://www.6502.org/tutorials/compare_beyond.html" class="postlink">http://www.6502.org/tutorials/compare_beyond.html</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri May 09, 2014 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 and whatever else unreg wants to know</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Working with the <s>Nindendo</s> <span style="color: #40BFFF">Nintendo</span> 64 would be insane and terrible... in my opinion.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />IIRC, most Nintendo 64 games run in 32-bit mode. Still, just because you CAN use a lot of bits in your calculations it doesn't mean you necessarily HAVE TO work with huge numbers. Having big registers usually makes things simpler, because you don't have to worry about carry propagation and that sort of thing.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>81</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>