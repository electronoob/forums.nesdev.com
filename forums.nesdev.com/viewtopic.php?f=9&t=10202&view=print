<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Mapper Features for High Level Languages</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Mapper Features for High Level Languages</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=10202">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=10202</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Jun 24, 2013 6:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a thought or two about possible mapper implementations that would help when making higher-level languages for the NES. I hope if anyone is working on new mappers (which I am not BTW), you'll take these into consideration.<br /><br /><strong>Use address lines for register state transfer, not data lines</strong><br /><br />For instance, let's say you have eight bits of state per register. A conventional mapper might use the eight data bus lines for state transfer, and A14-A12 for function selection. This allows function state transfer such as this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda value<br />sta function_address<br /></div><br /><br />This is convenient for assembly programmers and useful when value is dynamic. However, there's a better approach: use A0-A7 for state transfer, and A14-A12 for function selection. This allows dynamic function state transfer like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx value<br />sta function_address,x<br /></div><br /><br />And static state transfer, where value is known at assembly time, can be done in a single instruction without disturbing the contents of any register:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sta function_address+value<br /></div><br /><br />This allows far method calls to be done in a thread-safe and efficient manor, and will help ease pains of high-level language designers when dealing with limited contiguous address space.<br /><br /><strong>Random access mass data storage</strong><br /><br />The ability to access a mass storage device like a serial flash chip or SD card via a byte-wide mapper register would be optimal for accessing data. Any dynamically loaded data like level layouts can easily be read and shoved into WRAM. This means less parallel storage is required (128kb should be plenty for program code - data) and more content can be placed into the game without the worry or hassle of compression and storage constraints.<br /><br />With these two points in mind, I guess you'd use high address lines for function select and A0-A2 for bank select on a given function.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jun 24, 2013 8:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Use address lines for register state transfer, not data lines</div><br />I believe many pirate mappers uses this way of doing things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Jun 24, 2013 12:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Those things are possible to do within a single CPLD of today, but you have to consider the benefit/convenience you're gaining comes at the cost of i/o pins.  The desire for byte wide access to mass serial storage requires 8 i/o.  It's nice to reuse those i/o for register writes and save the few remaining i/o for other more advanced features.<br /><br />The mapper I'm working on that attempts to cater to some of these desires has the following limitation/pinout assuming the desired device will be the XC95[72/26]XL with it's 34 i/o:<br />*128KB PRG-RAM with 8KB banking ($6000-$FFFF):  (RAM A13-A16, CPU A13, A14, PRG /CE, PRG R/W, M2, RAM /CE) = 10 i/o<br />*32KV CHR-RAM wth 4KB banking: (RAM A12-14, PPU A12)  = 4i/o<br />*H/V selectable mirroring: (PPU A10,11, CIRAM A10) = 3 i/o<br />*Byte wide reads (bit banged writes) SPI flash interface ($5000) (full data bus, CPU A12, clk, cs, miso) = 12 i/o<br /><br />TOTAL i/o: 29<br /><br />That assumes that the above are all 'requirements' however they don't necessarily need to be.  Cutting PRG-RAM or CHR-RAM down in size might be easy to lose depending on developer desires.  I will say those are the sizes of the memories that would be on the PCB I'm working on, so you'd be 'tossing' out extra ram space just to gain the i/o's.  Due to actual costs of these sram chips there isn't any possible cost savings with smaller RAM spaces.<br /><br />That leaves 5 i/o to work with, and some things that still need to be handled which may or may not cost i/o:<br /><br />*Bootrom/mcu: (/CE) = possibly 1 i/o.  This could be saved if using a mcu as a non-random accessible 'boot-rom' which dual purposed the spi /cs pin.  The mcu and CPLD could be smart enough to know when the 'boot-rom' or spi-flash was being selected.  Otherwise this may cost another i/o<br /><br />*SPI MOSI= possibly 1i/o:  This function could be met by simply connecting a single CPU data line to MOSI for bit-by-bit writes to SPI.  However most spi flash is 3v so level shifting is needed.  The CPLD can perform this for the cost of  1 i/o, otherwise the task should be able to be done by a voltage divider method of level shifting for savings of that i/o<br /><br />*mapper registers:  Need to decode some registers, I had planned on connecting CPU A0 to add some flexibilty to register mapping  $5000/1, $8000/1 etc.  Due to PRG /CE delay relative to M2 you need to resolve the overlap of $5000-7FFF with $D000-FFFF.  I planned on not placing any mapper registers in $D000-FFFF and re-gaining some registers via decoding A0.  Without A0 you've got 5 registers which isn't quite enough for 3 PRG banks, 2 CHR banks, and 1 mirroring reg.  Although you could add complexity/hardware to resolve the PRG /CE M2 delay, but avoiding conflicts seemed the easiest, cheapest, hassle free solution to me.  Either way I think you'll end up loosing another i/o even if you used cpu A11 and kept with the lower bit for state as you're proposing.<br /><br />*potential cpu/scanline counter = atleast 1 i/o (/IRQ):  if there's enough logic and mapper regs available a CPU cycle counter only costs the 1 i/o for /IRQ.  A slightly less logic consuming (and possibly more user freindly) scanline counter should be possible with the addition of CHR A13 and CHR /RD signals in order to sense the 4 consecutive NT fetches at the end of each scanline.  This would cost the 2 extra i/o and may not fit inside a 36 Mcell CPLD due to logic consumption.  When I get it all working I'm going to try and dual purpose the SPI shift register as a scanline count register.  If lucky it might fit and consume less logic than a 15-16bit cpu cycle counter.<br /><br /><br /><br />TL;DR: <br />So there you go,   you've basically got 4-5 i/o to work with.  There are 16 PRG-RAM banks which you'd want to be able to map all of them to $6000-7FFF for loading means you need a 4 bit wide register.  That'd take A0-A3 consuming all available remaining i/o.  So it comes down to if you were presented with the option of lower address bit state latching of bank registers, would you trade it for an IRQ counter?  You might be able to regain it if you cut down to 16KB of CHR-RAM or 64KB of PRG-RAM.  The PRG-RAM cut gains 2 i/o, and the CHR cut gains 1 i/o.  So that could be the other trade-off.  You could have your cake an eat it too with 2 CPLDs, but lets stick with the assumption of 1 for now.  What would you rather?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Jun 24, 2013 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure which I'd prefer to be honest. I don't have enough experience with large high-level language projects for small systems to know at this point which would be the better of the two options. I'm very glad to see such a thorough cost / benefit breakdown as it applies to current low-cost CPLDs.<br /><br />One thing that comes to mind is that I'd rather not have three bankable 8kb PRG segments. I'd rather have one bankable 16kb PRG segment and one fixed. The way I'm approaching executable segmentation right now that'd be a better fit, especially if 8KB of WRAM is available and the mass data storage to load from.<br /><br />I do not have a good understanding of how all this stuff works from a hardware perspective, so I don't know if any of this is terribly feasible, but I am glad to see a bit of discussion about it.<br /><br />Either way, single-write bank switching is good enough. There's not a huge performance gain in omitting the load, because if you are allowing more than one thread to bank switch you're going to have to keep track of the current bank somewhere anyway.<br /><br />Tl;Dr - Thanks for the discussion. Don't let this influence working designs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jun 24, 2013 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you're confusing two things. How registers are mapped/accessed on a mapper, and a high/low level language debate. Those are two completely different and independent things.<br /><br />Accessing mapper registers is possible in C no matter how they are layout, but it will in the end always write out as something weird/ugly including some of casts and voltaltile keyword. I'd recommend writing the I/O portions of the game in assembly and the logic portion in HLL (when a compiler better than CC65 for the 6502 will be available, if one ever is).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Jun 24, 2013 1:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not familiar with what you're trying to do, so how is this beneficial to a high-level language? I'm not opposed to the idea, I'm just having trouble understanding it; especially how it's &quot;thread safe&quot;. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />As far as I'm aware, the only way to make &quot;thread safe&quot; bankswitching is to make the operation atomic. Your single-write bankswitch is perfect for that task, but the two-op variable-based bankswitching isn't any different from &quot;LD? currBank; ST? bankSelect;&quot; (where ? is A, X, or Y), which is hypothetically thread-safe, just as long as the intervening code properly saves and restores the CPU registers.<br /><br />This is opposed to MMC3, which is harder to make &quot;thread safe&quot; because you have to write to two mapper registers, and it'd be up to the intervening code not only to save A, X, and Y, but also to somehow know how to save and restore the mapper's function-select register (if the intervening code touches it at all, that is).<br /><br />Please help me understand what you're trying to do so I can see the benefits you're talking about. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Using the lower A-lines to set mapper registers (instead of the D-lines) is a very new idea to me, and it sounds really interesting. It's also worth noting that I've only ever written NES software in assembly, so if the benefits are blindingly obvious to HLL users, they're lost on me. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Edit: Ok, one other advantage would be the ability to <em>easily</em> use more than 8-bits for the bank number. Then couple that with the one-op static bankswitch, and it's pretty nice. I don't understand the HLL or the &quot;threading&quot; though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 24, 2013 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MMC3 is easy to make thread-safe: during the main thread, leave the switchable bank at set at 7 (PRG ROM bank at CPU $A000-$BFFF). Switch bank 6 (PRG ROM bank at $C000-$DFFF) only in the DPCM playback routine, and switch banks 0-5 (CHR ROM) only in the NMI and scanline IRQ handlers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Jun 24, 2013 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Really the main advantage I was thinking of is reducing the cycle count for calling a subroutine in a bank that may not already be mapped in. The more I look at the code generation, and the more I read this thread, the more I understand that this is not an operation that's going to be efficient.<br /><br />I really appreciate the input everyone! This has given me some good food for thought on a project I'm working on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Jun 24, 2013 7:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">One thing that comes to mind is that I'd rather not have three bankable 8kb PRG segments. I'd rather have one bankable 16kb PRG segment and one fixed. The way I'm approaching executable segmentation right now that'd be a better fit, especially if 8KB of WRAM is available and the mass data storage to load from.</div><br /><br />That's good to hear.  I've wondered if that would be acceptable or even preferable considering you've really got ram underneath and not rom.  That and you've got around a dozen pages of ram you can place at $6000-7fff Which should make it all okay.  One less PRG bank to maintain means more logic available to make a counter fit within 36mcells. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jun 25, 2013 1:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The more I look at the code generation, and the more I read this thread, the more I understand that this is not an operation that's going to be efficient.</div><br />An efficient compiler for the 6502 is only a theoretical thing today. It's possible that an efficient one has been made commercially in the late 80s and early 90s, but who knowns ?<br /><br />With the experiences I made, CC65 generates assembly codes that is between 8 and 20* times longer/slower than hand written assembly code.<br /><br />* 20 was for an extreme cases where I applied multiple strength reduction optimisations and loop reversal optimisation, something that CC65 is completely unable to do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Jun 25, 2013 7:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think C is expressive enough to really generate efficient code for 6502. By expressiveness I mean the ability to hint the compiler about how to generate optimal code. I would much rather see a compiler for some kind of a &quot;small C&quot; variant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jun 25, 2013 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />True, but it is still possible to do quite a lot of optimisations and &quot;guesses&quot; automatically if some thought and testing has been made.<br /><br />And what is the difference between C and &quot;small C&quot; exactly ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Tue Jun 25, 2013 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Starting new thread in NES Dev forum about Small C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Jun 25, 2013 12:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I want to clarify that when I said &quot;small C&quot; I didn't mean Small-C specifically, but any variation/subset of C in general.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Tue Jun 25, 2013 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Mapper Features for High Level Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for clearing that up. From an implementation perspective, a &quot;subset of C&quot; could mean a lot of things, like &quot;a superset of assembly&quot;. But I'll get more into that this evening in the Small C post.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>