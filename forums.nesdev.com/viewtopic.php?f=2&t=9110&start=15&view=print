<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CA65: zp -&gt; abs when using nested .procs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CA65: zp -&gt; abs when using nested .procs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9110">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9110</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 06, 2017 5:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">And unfortunately no &quot;I care, but I'd like to be able to move the most commonly accessed variables into zero page and less commonly used variables out as part of a size optimization effort late in development once I start seeing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MEMORY area overflow</tt> errors from ld65, and I don't know yet which variables those will be&quot; option.</div><br />??? In my quote that you truncated I said I think of it as useful for that kind of thing like a couple words after you truncated it. ???

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 5:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to understand why my code is now successfully assembling zp instructions with nested scopes. Using the old example in this thread, I found if I declare an equate outside the nested scope and assign the zp variable in question to it, then I get zp instructions as inspected.<br /><br />Coincidentally, the macro system I came up with for declaring zp equates <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16310" class="postlink">here</a> puts most of my code into this pattern, so I get the code I expect. Does anyone understand why this works around the issue?<br /><br />This example will compile just fine, whereas the OP generates absolute instructions and a range error.<br />*edit* Perhaps the reason it works is that it ultimately works the same as though I typed ::b0 instead of using the equate my_b0. (the wiki article linked in the op refers to the :: operator to search the global scope)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.proc test<br />&nbsp; <br />&nbsp; my_b0 = b0<br />&nbsp; <br />&nbsp; lda b0<br />&nbsp; <br />.proc nested_proc<br /><br />&nbsp; beq label<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; sta my_b0<br />&nbsp; .repeat 86<br />&nbsp; nop<br />&nbsp; .endrepeat<br />label:<br /><br />&nbsp; rts<br /><br />.endproc<br />&nbsp; &nbsp; <br />.endproc<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 06, 2017 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know that you're using all those nops to generate a range error, but it really hurts my ability to try and read this thread. A comment that says &quot;generates a ZP instruction&quot; or something would be sufficient, or even a .repeat to make it shorter.<br /><br /><br />In your new example &quot;lda b0&quot; is referencing b0, known from one scope above, and known to be ZP, so it's ZP.<br /><br />Secondly &quot;sta my_b0&quot; is referencing my_b0, also known from one scope above. Since you're saying it correctly realizes it's ZP, I would guess it's inheriting the ZP property from b0 from that = assignment.<br /><br />At least, that's presuming my belief that it looks for matching symbols from one scope above (but no deeper) when determining operand size is correct.<br /><br /><em>Edit: It's not correct, see thefox's explanation below.</em>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I know that you're using all those nops to generate a range error, but it really hurts my ability to try and read this thread. A comment that says &quot;generates a ZP instruction&quot; or something would be sufficient, or even a .repeat to make it shorter.<br /><br /><br />In your new example &quot;lda b0&quot; is referencing b0, known from one scope above, and known to be ZP, so it's ZP.<br /><br />Secondly &quot;sta my_b0&quot; is referencing my_b0, also known from one scope above. Since you're saying it correctly realizes it's ZP, I would guess it's inheriting the ZP property from b0 from that = assignment.<br /><br />At least, that's presuming my belief that it looks for matching symbols from one scope above (but no deeper) when determining operand size is correct.</div><br /><br />Interestingly, I'm getting zp instructions as expected at least 2 scopes deep in cases I've inspected (been looking at one routine where I used a ton of scopes), using this pattern. You can even add further nested scopes in this example and it will still work.<br /><br />*edit* Nevermind, I found a counterexample (using the example code. In my game's code, I'm still getting zp where I expect, for some reason.)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">000004r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000004r 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />000006r 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />000008r 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />00000Ar 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />00000Cr 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />00000Er 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />000010r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000010r 1&nbsp; 8D rr rr&nbsp; &nbsp; &nbsp; &nbsp;sta my_b0<br />000013r 1&nbsp; 8D rr rr&nbsp; &nbsp; &nbsp; &nbsp;sta my_b0<br />000016r 1&nbsp; 8D rr rr&nbsp; &nbsp; &nbsp; &nbsp;sta my_b0<br />000019r 1&nbsp; 8D rr rr&nbsp; &nbsp; &nbsp; &nbsp;sta my_b0<br />00001Cr 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />00001Cr 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />00001Er 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />000020r 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />000022r 1&nbsp; 85 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta my_b0<br />000024r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 07, 2017 1:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Secondly &quot;sta my_b0&quot; is referencing my_b0, also known from one scope above. Since you're saying it correctly realizes it's ZP, I would guess it's inheriting the ZP property from b0 from that = assignment.<br /><br />At least, that's presuming my belief that it looks for matching symbols from one scope above (but no deeper) when determining operand size is correct.</div><br />I think the first part is true (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">my_b0</tt> gets flagged <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SF_DEFINED</tt> and the address size is derived from the expression), but the second part is not.<br /><br />It's easy to disprove the theory that it only looks one scope above:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp foo<br />start:<br />.scope<br />&nbsp; .scope<br />&nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; lda foo ; uses zp<br />&nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; .endscope<br />&nbsp; .endscope<br />.endscope<br />end:<br />.out .sprintf(&quot;size=%d&quot;, end-start)<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 07, 2017 4:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I've got no clue then. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />Is nesting depths a red herring? Why does it happen in <a href="https://forums.nesdev.com/viewtopic.php?p=201827#p201827" class="postlink">the case I wrote</a> but not this one? Does the problem ever happen when scopes are just a single level?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 07, 2017 5:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Is nesting depths a red herring? Why does it happen in <a href="https://forums.nesdev.com/viewtopic.php?p=201827#p201827" class="postlink">the case I wrote</a> but not this one? Does the problem ever happen when scopes are just a single level?</div><br />In the case you wrote <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">var0</tt> was referenced in the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">first</tt> scope, so the reference itself gets an internal new symbol (with name <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">var0</tt>) in the symbol table of that scope. Then in the inner scope <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">second</tt> when it starts recursively looking for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">var0</tt> in parent scopes, it finds that symbol reference, and uses it. But the reference doesn't have a size assigned to it, so it defaults to abs.<br /><br />It seems like the fact that it even considers symbol references here could be a bug, but what do I know. At the very least the behavior is very inconsistent. The comment at <!-- m --><a class="postlink" href="https://github.com/cc65/cc65/blob/master/src/ca65/symtab.c#L440">https://github.com/cc65/cc65/blob/maste ... tab.c#L440</a><!-- m --> says that it ignores symbols with type SF_UNUSED because for such symbols &quot;there is a real entry in one of the parent scopes&quot;. It seems that the same should be true for SF_REFERENCED. (That said, it's certainly possible to reference symbols which have not been defined yet...)<br /><br />I don't think the problem can happen with single-level scopes:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp foo ; &quot;foo&quot; gets added in the symbol table with SF_GLOBAL and address size=1.<br />lda foo ; Uses zp. SF_REFERENCED flag is added to the existing symbol foo (NOTE: SF_xxx is a bitmask).<br />.scope s<br />&nbsp; lda foo ; Finds &quot;foo&quot; in the parent scope with proper size, so uses zp. A new symbol named &quot;foo&quot; with SF_REFERENCED is added in this scope.<br />.endscope<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 07, 2017 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh! So the problem is that using a symbol from a parent scope creates some kind of &quot;dummy&quot; version of that symbol that might block the ZP property from propagating to any nested scopes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Mon Aug 07, 2017 5:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems if I have an equate set to the global zp value at the top level or just one level down, it propagates as far as one would like. but if I put the equate itself inside any of the nested scopes, then I get abs.<br /><br />Example with equate in inner scope (abs instruction generated)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.scope<br /><br />&nbsp; &nbsp; lda b0<br /><br />&nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; my_b0 = b0<br />&nbsp; &nbsp; &nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda my_b0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; .endscope<br /><br />.endscope<br /><br />*****LISTING*****<br /><br />000000r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.globalzp b0<br />000000r 1<br />000000r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000000r 1<br />000000r 1&nbsp; A5 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda b0<br />000002r 1<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my_b0 = b0<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000002r 1&nbsp; AD rr rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda my_b0<br />000005r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000005r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000005r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000005r 1<br />000005r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000005r 1<br />000005r 1<br /><br /><br /></div><br /><br />Example with equate at top level scope (zp generated). *edit* Noticed moving &quot;my_b0 = b0&quot; to global scope also generates zp. Maybe the point is that .globalzp doesn't define a symbol but only a property a symbol should have ONCE defined. So if you define them at the top level or global scope, you're fine. This makes me quite happy with my zp_equates macros, as I apparently accidentally <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16310" class="postlink">solved this problem for myself</a>, just didn't realize it was this thoroughly solved til now. Haha!<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.scope<br /><br />&nbsp; &nbsp; my_b0 = b0<br /><br />&nbsp; &nbsp; lda b0<br /><br />&nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda my_b0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; &nbsp; &nbsp; .endscope<br />&nbsp; &nbsp; .endscope<br /><br />.endscope<br /><br />*****LISTING*****<br /><br />000000r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.globalzp b0<br />000000r 1<br />000000r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000000r 1<br />000000r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my_b0 = b0<br />000000r 1<br />000000r 1&nbsp; A5 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda b0<br />000002r 1<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000002r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.scope<br />000002r 1&nbsp; A5 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda my_b0<br />000004r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000004r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000004r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000004r 1<br />000004r 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.endscope<br />000004r 1<br />000004r 1<br /><br /><br /></div><br /><br />*edit* Amusingly the documentation pretty much spells this out. &quot;Of course the most simple solution for the problem is to move the definition of foo in scope inner upwards, so it precedes its use.&quot; But, one doesn't think about this normally. One would like to just use an include with a .globalzp my_symbol and just use it and know it is zp. But re-creating an equate seems like a fine workaround to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 07, 2017 5:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Oh! So the problem is that using a symbol from a parent scope creates some kind of &quot;dummy&quot; version of that symbol that might block the ZP property from propagating to any nested scopes?</div><br />Yeah, it kind of makes sense and kind of doesn't. In the single-level scope example in my previous post, I guess it's adding the &quot;dummy&quot; reference symbol in case a symbol named &quot;foo&quot; gets defined later in the same scope (if it does get defined, SF_DEFINED would be added to the &quot;dummy&quot; symbol). What doesn't make so much sense is the fact it still uses the address size from &quot;foo&quot; from the parent scope. So it's kind of pessimistic by making the assumption that it might get redefined, but then still uses information from the parent scope's symbol.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Mon Aug 07, 2017 6:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since creating an equate and assigning a .globalzp'd symbol seems to propagate &quot;this is zp&quot; as far down in scopes as one would like, does anyone think it might be worthwhile to propose adding something like this to ca65?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globaldefzp b0&nbsp; &nbsp; ;when used as an import, will import the symbol AND re-define it at the global scope of the current module<br /></div><br /><br />since going:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br />my_b0 = b0&nbsp; ;at global scope<br /></div><br /><br />seems to allow my_b0 to generate zp instructions as deep as one likes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 07, 2017 7:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br />my_b0 = b0&nbsp; ;at global scope<br /></div><br /><br />seems to allow my_b0 to generate zp instructions as deep as one likes?</div><br />It doesn't work like that. As soon as you reference my_b0 in one of the scopes, the further nested scopes will find the reference (not the global-level my_b0), and not use the correct size.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br />my_b0 = b0&nbsp; ;at global scope<br />.scope s1<br />&nbsp; start1:<br />&nbsp; lda my_b0 ; size=2<br />&nbsp; end1:<br />&nbsp; .scope s2<br />&nbsp; &nbsp; start2:<br />&nbsp; &nbsp; lda my_b0 ; size=3<br />&nbsp; &nbsp; end2:<br />&nbsp; .endscope<br />.endscope<br />.out .sprintf(&quot;size=%d&quot;, s1::end1 - s1::start1)<br />.out .sprintf(&quot;size=%d&quot;, s1::s2::end2 - s1::s2::start2)<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Mon Aug 07, 2017 7:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So...if I only use these equates ONCE anywhere in my nested scopes, it's working by coincidence for me? I think that may be what's really going on, given what you're saying.<br /><br />It appears one can work around this with the :: operator and redefine the symbol with the same name. Perhaps we could propose adding a directive that modifies all nested scopes' symbol tables to behave as though one did this manually. or a .feature or something.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br />my_b0 = b0&nbsp; ;at global scope<br />.scope s1<br />&nbsp; start1:<br />&nbsp; lda my_b0 ; size=2<br />&nbsp; end1:<br />&nbsp; .scope s2<br />&nbsp; &nbsp; my_b0 = ::my_b0<br />&nbsp; &nbsp; start2:<br />&nbsp; &nbsp; lda my_b0 ; size=2 because we used :: to redefine the symbol for this scope<br />&nbsp; &nbsp; end2:<br />&nbsp; .endscope<br />.endscope<br />.out .sprintf(&quot;size=%d&quot;, s1::end1 - s1::start1)<br />.out .sprintf(&quot;size=%d&quot;, s1::s2::end2 - s1::s2::start2)<br /><br />****OUTPUT****<br /><br />$ ca65 scope_test.asm -llisting.lst<br />size=2<br />size=2<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Aug 07, 2017 12:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">Perhaps we could propose adding a directive that modifies all nested scopes' symbol tables to behave as though one did this manually. or a .feature or something.</div><br />I think it's just flat out a bug that should be fixed, not a new feature that should be added.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Mon Aug 07, 2017 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">Perhaps we could propose adding a directive that modifies all nested scopes' symbol tables to behave as though one did this manually. or a .feature or something.</div><br />I think it's just flat out a bug that should be fixed, not a new feature that should be added.</div><br />It is really weird isn't it. Like, how many times is somebody going to import a global variable from zp and then want to use the exact same name afresh in some inner scope AND generate a non zp instruction from it? I'm guessing pretty much never.  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  I can't think of anything except bad naming habits that would get one into that situation normally.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>