<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=6747" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-08-23T16:55:18-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=6747</id>
<entry>
<author><name><![CDATA[tineras]]></name></author>
<updated>2010-08-23T16:55:18-07:00</updated>
<published>2010-08-23T16:55:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66594#p66594</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66594#p66594"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66594#p66594"><![CDATA[
I have already switched my code over to per-pixel rendering.  It was a little more of a pain than I expected, but it seems to be working well now.  After working on this for a bit, the benefits are quite clear.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4449">tineras</a> — Mon Aug 23, 2010 4:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-08-23T16:47:22-07:00</updated>
<published>2010-08-23T16:47:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66592#p66592</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66592#p66592"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66592#p66592"><![CDATA[
<div class="quotetitle">Petruza wrote:</div><div class="quotecontent"><br />if your emu does per-frame rendering BUT records in which scanline(s) the scroll registers were modified, then, you can still make up your frame only once at the beggining of vblank and still fully support the partial screen scrolling.<br /></div><br />That's called "timestamping", and in theory, it can handle even mid-scanline changes. You just have to be extra careful with code that checks for a sprite 0 hit or mappers that assert an IRQ on PPU memory reads, because PPU register writes above them can affect the result.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Aug 23, 2010 4:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Petruza]]></name></author>
<updated>2010-08-23T16:36:36-07:00</updated>
<published>2010-08-23T16:36:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66591#p66591</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66591#p66591"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=66591#p66591"><![CDATA[
I won't be so strict as to day that Per-frame rendering doesn't work with games that use scrolling in part of the screen.<br />I mean, for example if your emu does per-frame rendering BUT records in which scanline(s) the scroll registers were modified, then, you can still make up your frame only once at the beggining of vblank and still fully support the partial screen scrolling.<br /><br />What I mean is there's not a single way of doing per-frame rendering, as there isn't a single way of doing per-scanline rendering.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3773">Petruza</a> — Mon Aug 23, 2010 4:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2010-08-06T14:53:43-07:00</updated>
<published>2010-08-06T14:53:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65592#p65592</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65592#p65592"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65592#p65592"><![CDATA[
My favorite is to do catch-up in both directions :)<br /><br />In Mottzilla's example, allow the PPU to then run ahead of the CPU until it needs to access something that the CPU can modify. Not as effective for CPU&lt;&gt;PPU, as the PPU undoubtedly constantly accesses registers, but for certain chip setups (like for an audio processor), it can be really impressive.<br /><br />A further optimization I have been thinking about lately is write-ahead. Instead of simply syncing the PPU up to the CPU on any access, only do it on reads. Store a relative array of writes and timestamps for CPU writes, say in a binary min-heap array for O(1) read and O(log n) insert+delete, and then replay them when the PPU eventually takes over; and vice versa. In this way, you can probably cut the number of synchronizations needed in half.<br /><br />And of course, the holy grail would be a way to "unwind" reads that end up being different from what the state was in the past. This is pivotal to high performance on processors that directly share eg a large bank of RAM. It's very, very unlikely that they will both access the same byte of RAM right away, but since you don't know, it forces a lot of unnecessary syncs. Even if the unwind action were relatively painful, the number of synchronizations eliminated could lead to a real speedup overall.<br /><br />The more you run-ahead with this model, the more painful the rewind operations would become. You'd essentially be getting into adaptive territory now in trying to best weigh the tradeoffs. Could be a very exciting area of research at the very top-end of computer science.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Fri Aug 06, 2010 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-08-06T10:07:17-07:00</updated>
<published>2010-08-06T10:07:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65580#p65580</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65580#p65580"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65580#p65580"><![CDATA[
<div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />[An] alternative to the per pixel and per scanline is to do the "catch up" method. You execute CPU cycles until an event happens that needs the PPU to catch up, at which point you execute your PPU emulation to run PPU cycles until it catches up to the CPU. In the end it's up to you to decide what works best for you.<br /></div><br />Catch-up is a threading method, thus it's orthogonal to PPU emulation granularity. You can do per-frame, scanline, pixel with catch-up, green threads, etc.<br /><br />You can also do per-pixel with full CPU timing accuracy even with a per-opcode CPU emulator by having it keep track of the times of memory accesses. For example, if a STA $2000 started at cycle count 10, then the $2007 write would be passed a cycle count of 13.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Aug 06, 2010 10:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2010-08-06T08:38:58-07:00</updated>
<published>2010-08-06T08:38:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65578#p65578</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65578#p65578"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65578#p65578"><![CDATA[
Hardest part about more precision is breaking in and out of the loops. A lot harder to do scanline-&gt;pixel than frame-&gt;scanline.<br /><br />Say you load in tiledata for the next 8 pixels, but if you return from your loop, you lose that data. So you have to store it globally, or reload it for each pixel, the former being much more correct.<br /><br />But overall, not very hard. Weekend project or so.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Fri Aug 06, 2010 8:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tineras]]></name></author>
<updated>2010-08-06T06:52:58-07:00</updated>
<published>2010-08-06T06:52:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65577#p65577</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65577#p65577"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65577#p65577"><![CDATA[
<div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />It would be recommended to atleast do per scanline. The state of things at the end of rendering which is likely when you draw the frame now is not enough to fully emulate the PPU. Graphics banks can change, scrolling and nametable registers change, etc.<br /><br />The easiest for coding point of view is to emulate per pixel. Meaning run one CPU opcode. Then run 3 PPU cycles for every 1 CPU cycle you executed. This will keep the PPU and CPU roughly in sync. To be even more accurate you would need to actually break down CPU opcodes into their cycles and execute 1 CPU cycle and then 3 PPU cycles. <br /><br />But as far as running most games, you can do a per scanline rendering. You can do hacky things. It can work if you want it to. <br /><br />And alternative to the per pixel and per scanline is to do the "catch up" method. You execute CPU cycles until an event happens that needs the PPU to catch up, at which point you execute your PPU emulation to run PPU cycles until it catches up to the CPU. In the end it's up to you to decide what works best for you.<br /></div><br /><br />I am going to switch over to a per pixel method this weekend.  I'd rather not take shortcuts and regret it in the end.  Plus, the code I have in place for per-frame rendering shouldn't be too difficult to change into per pixel.  Let's hope it's as easy as I'm thinking it will be.  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4449">tineras</a> — Fri Aug 06, 2010 6:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-08-05T20:09:56-07:00</updated>
<published>2010-08-05T20:09:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65558#p65558</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65558#p65558"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65558#p65558"><![CDATA[
It would be recommended to atleast do per scanline. The state of things at the end of rendering which is likely when you draw the frame now is not enough to fully emulate the PPU. Graphics banks can change, scrolling and nametable registers change, etc.<br /><br />The easiest for coding point of view is to emulate per pixel. Meaning run one CPU opcode. Then run 3 PPU cycles for every 1 CPU cycle you executed. This will keep the PPU and CPU roughly in sync. To be even more accurate you would need to actually break down CPU opcodes into their cycles and execute 1 CPU cycle and then 3 PPU cycles. <br /><br />But as far as running most games, you can do a per scanline rendering. You can do hacky things. It can work if you want it to. <br /><br />And alternative to the per pixel and per scanline is to do the "catch up" method. You execute CPU cycles until an event happens that needs the PPU to catch up, at which point you execute your PPU emulation to run PPU cycles until it catches up to the CPU. In the end it's up to you to decide what works best for you.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Thu Aug 05, 2010 8:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-08-05T05:43:36-07:00</updated>
<published>2010-08-05T05:43:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65487#p65487</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65487#p65487"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65487#p65487"><![CDATA[
Per frame will only work with the simpler games. Any that have a scrolling area and a fixed status bar won't work.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Aug 05, 2010 5:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-08-04T19:20:41-07:00</updated>
<published>2010-08-04T19:20:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65444#p65444</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65444#p65444"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65444#p65444"><![CDATA[
Per-pixel and per-scanline aren't much different.  Per-pixel just means you divide up the scanlines into smaller sections if the PPU changes state while rendering a scanline.<br /><br />If you ever want to play Punch Out or Fire Emblem, you need per-pixel since the mapper switches CHR banks when it encounters a particular TILE number.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Wed Aug 04, 2010 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tineras]]></name></author>
<updated>2010-08-04T18:18:47-07:00</updated>
<published>2010-08-04T18:18:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65442#p65442</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65442#p65442"/>
<title type="html"><![CDATA[Per frame rendering a bad idea?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6747&amp;p=65442#p65442"><![CDATA[
Right now I have VERY basic timing code implemented.  And I am rendering on a per frame basis.  I was wondering if I am going to run into unforeseen trouble down the road using this method.  I have gotten to the point where a few games are working, but I don't want to do a lot of heavy ppu coding and regret it later.  I'm still at a point where I can switch the way that rendering is done, so I'd appreciate your feedback.<br /><br /><strong>To sum up:<br /><br />Should I switch to a per pixel or per scanline technique instead to avoid problems down the road?</strong><br /><br />Thanks!<br /><br />EDIT: Removed last comment because it sounded snotty. SORRY!  <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4449">tineras</a> — Wed Aug 04, 2010 6:18 pm</p><hr />
]]></content>
</entry>
</feed>