<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=11126" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-04-24T20:21:04-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=11126</id>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2014-04-24T20:21:04-07:00</updated>
<published>2014-04-24T20:21:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=128067#p128067</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=128067#p128067"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=128067#p128067"><![CDATA[
<div class="quotetitle">slobu wrote:</div><div class="quotecontent"><br />trying to understand the mapper/settings files for NESICIDE.<br /></div><br />...there aren't any 'settings' per se.  The CC65 linker configuration file is what you need, just like if you're working with CC65 directly.  There is a MMC1 example project based on one of Tepples' examples.  At some point I planned to turn example projects into templates.  NESICIDE already supports creating a project using an existing template, so that part is now done.  Just need to take the time to import the templates.  But in reality me doing that isn't much different than you opening up the example project and modifying it.<br /><br />I had also had the thought to support creation of 'library projects' wherein a library could provide the necessary mapper-specific stuff.  Haven't got around to that yet though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Thu Apr 24, 2014 8:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[slobu]]></name></author>
<updated>2014-04-24T12:06:10-07:00</updated>
<published>2014-04-24T12:06:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=128055#p128055</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=128055#p128055"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=128055#p128055"><![CDATA[
<div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />Jarhmander, this would make a really nice set of templates for NESICIDE projects.   <img src="http://forums.nesdev.com/images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /><br /></div><br /><br />I second that!  The point where *I* failed is trying to understand the mapper/settings files for NESICIDE.  It sounds like another example template using your work would give me another way to compare and contrast.<br /><br />NOTE:  I really mean me myself and I failing.  I haven't even asked for help yet <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4942">slobu</a> — Thu Apr 24, 2014 12:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2014-04-04T06:30:52-07:00</updated>
<published>2014-04-04T06:30:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127409#p127409</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127409#p127409"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127409#p127409"><![CDATA[
Interesting idea, at least you can still use some symbols at compile time and not repeat yourself, as the linker script is generated from your sources.<br /><br />Except if you want to keep it privately, please share even if it's unfinished/unpolished—I mean, the &quot;kit&quot; I shared is by no means complete, I'll refine it with usage and suggestions. You would just have to mention what parts of your thing need more work or have issues, so people won't lose their time pointing out flaws.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Fri Apr 04, 2014 6:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2014-04-02T14:06:35-07:00</updated>
<published>2014-04-02T14:06:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127368#p127368</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127368#p127368"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127368#p127368"><![CDATA[
<div class="quotetitle">Jarhmander wrote:</div><div class="quotecontent"><br />Also, what you described is interesting, can you show more about what you did?<br /></div><br /><br />I'll share what I have when I finish cleaning it up a bit - not sure when that is. I am especially not happy with my function calling code, but I think I have that moving along nicely now, with some ideas from thefox. Basically though I wanted to be able to write text files with ca65, so I pipe all output to a Perl script that looks for WRITEFILE and CLOSEFILE or some such.<br />It allows for things like writing the linker config file with ca65, and my idea for memory management across modules. ( It helps with accessing things you can't get at assemble from the linker.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Wed Apr 02, 2014 2:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-04-02T11:53:33-07:00</updated>
<published>2014-04-02T11:53:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127364#p127364</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127364#p127364"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127364#p127364"><![CDATA[
Some nice tricks there. I especially liked how you exploited the fact that the MEMORY configuration's bank number can be used to store any 32 bits of data.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Apr 02, 2014 11:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2014-04-02T10:34:25-07:00</updated>
<published>2014-04-02T10:34:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127362#p127362</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127362#p127362"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127362#p127362"><![CDATA[
<div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><br />I wanted to point out something as well:<br /><br />[snip]<br /><br />This won't do the job, since the .define style macro will always be replaced by its value except when using .undefine<br /></div><br />Yeah I figured that out two days ago when I 'recursively' included some header file. After seeing errors, I read the docs and saw that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.defined</tt> et al work with symbols, not macros, so I did pretty much what you wrote.<br /><br />Also, what you described is interesting, can you show more about what you did? That's why I started this thread: to see what other have done and possibly merge the better of all solutions and make something awesome. It may end up like the <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10986" class="postlink">6502-style SPC700 syntax collab thing</a> and go nowhere, but let's try first.<br /><br /><br /><br />I continued working on this, adding support for constructors (in the module sense, using the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.constructor</tt> directive), adding pseudo-ops and safer bankswitching.<br /><br />This is the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">swbankprg</tt> bankswitching macro (along with an helper macro that shouldn't be used by user code), it only deals with PRG-<span style="text-decoration: underline">ROM</span> switching.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro swbankprg_check addr<br />    .assert &gt;.bank(*) &lt;&gt; &gt;.bank(addr) .or .bank(*) = .bank(addr), lderror, .sprintf(&quot;swbank: switching '%s' into its runtime address would switch into current runtime address&quot;, .string(addr))<br />    .assert .bank(addr) &lt;&gt; $FFFF, lderror, .sprintf(&quot;swbank: symbol '%s' is located in the fixed bank; you cannot bankswitch the fixed bank&quot;, .string(addr))<br />.endmacro<br /><br />.macro swbankprg addr<br />    swbankprg_check addr<br /><br />    lda #(8 + &gt;.bank(addr))<br />    sta mapper_cmdreg<br />    sta $8000<br /><br />    lda #&lt;.bank(addr)<br />    sta $A000<br />.endmacro<br /></div><br /><br />Basically it's the same trick as before, just with preliminary checks. As the text says, it prevents switching the fixed bank anywhere (I see no interest switching the last bank to somewhere else) and checks if switching the bank would replace the current running bank with another bank—you usually want to avoid, say, bankswitching in $8000 while you're running code in $8000-$9FFF. The linker script was modified to give a bank attribute to the fixed bank ($FFFF, a sentinel value) so the macro above works. I have another macro, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">swbankprg_nosave</tt>, that does the same thing but without writing to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mapper_cmdreg</tt>. With the assumption that NMIs doesn't preempt IRQs, IRQs are not enabled in NMI and code prevent reentring NMIs, then code running from reset is preempted by either IRQs or NMIs, so that code uses <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">swbankprg</tt>, and IRQs or NMIs use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">swbankprg_nosave</tt>; if IRQs or NMIs use that macro, they just have to restore mapper register $8000 when they finish doing mapper register writes. This may be sufficient for IRQs, as it would only play with the timer IRQ and (possibly) CHR banks, but NMI code may want to switch PRG-ROM (ex. for music and FX engine, at the end of PPU updates), so one should still track which bank is visible at $6000, $8000, $A000 and $C000 by using other variables.<br /><br />I added another file that verify that banks are correctly set up in memory:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.repeat 64,I<br />.import .ident(.sprintf(&quot;__PRGBK%02d_LOAD__&quot;,I))<br />.import .ident(.sprintf(&quot;__PRGBK%02d_SIZE__&quot;,I))<br /><br />    .segment .sprintf(&quot;PRGBK%02d&quot;,I)<br /><br />.assert .ident(.sprintf(&quot;__PRGBK%02d_SIZE__&quot;,I)) = 0 .or .ident(.sprintf(&quot;__PRGBK%02d_LOAD__&quot;,I)) = (I &lt;&lt; 13), lderror, .sprintf(&quot;checkbanks: bank %d expected at 0x%08X&quot;, I, (I &lt;&lt; 13))<br /><br />.endrepeat</div><br /><br />Now the problem is that it shows you if you screwed up and which bank is displaced, but not where it ended up. That's because <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.sprintf</tt> expects constant expressions and such linker symbols are not constant expressions, so I cannot show their values. Enhancements are welcome.<br /><br /><div class="quotetitle">cpow wrote:</div><div class="quotecontent"><br />Jarhmander, this would make a really nice set of templates for NESICIDE projects.   <img src="http://forums.nesdev.com/images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /><br /></div><br />Yeah, that's the goal a bit. Working in an IDE helps the novice NES programmer—and the non-novice too <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />— and with a set of template that works essentially the same, it would require less initial user setup and less rewrite when changing mappers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Wed Apr 02, 2014 10:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2014-04-01T16:25:50-07:00</updated>
<published>2014-04-01T16:25:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127349#p127349</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127349#p127349"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127349#p127349"><![CDATA[
Jarhmander, this would make a really nice set of templates for NESICIDE projects.   <img src="http://forums.nesdev.com/images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Tue Apr 01, 2014 4:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2014-04-01T15:15:24-07:00</updated>
<published>2014-04-01T15:15:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127348#p127348</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127348#p127348"/>
<title type="html"><![CDATA[Re: NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127348#p127348"><![CDATA[
I have been working something like this. Example: Say I have a macro called setDataBank. That macro outputs different code for different supported mappers. The mapper for the project is set in a configuration file. More mapper support is like writing a device driver I suppose. If various mappers are supported properly and there are no exclusive features needed from a specific mapper, you could build for different mapper/boards with a simple configuration change. I have ca65 actually creating my memory configuration file via std out, filtered through a small perl script, since I don't know a better/quicker way to achieve the flexibility I desire.<br /><br />I wanted to point out something as well:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ifndef NES_HEADER_INC<br />.define NES_HEADER_INC<br /><br />&#91;snip&#93;<br /><br />.endif ;NES_HEADER_INC<br /></div><br /><br />This won't do the job, since the .define style macro will always be replaced by its value except when using .undefine<br />So in this case, if your constant is defined on the second include of this code, NES_HEADER_INC will be blank. (Since you defined it to be blank.) You need to do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ifndef NES_HEADER_INC<br />NES_HEADER_INC = 1<br /><br />&#91;snip&#93;<br /><br />.endif ;NES_HEADER_INC<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Tue Apr 01, 2014 3:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2014-03-28T12:52:39-07:00</updated>
<published>2014-03-28T12:52:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127247#p127247</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127247#p127247"/>
<title type="html"><![CDATA[NESdev-kit for the cc65 suite]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11126&amp;p=127247#p127247"><![CDATA[
Hello homebrewers. I began working on something, and I thought I should share it at this point to see if there's any interest on that kind of project.<br /><br /><span style="font-size: 85%; line-height: normal"><em>Please read, don't tl;dr and run the 'out.nes' file; it's possibly the most boring NES file you'll see in your whole life, it just cycles the background color slowly.</em></span><br /><br />Basically I wanted to play with mapper 69 (FME-7) using ca65/ld65 and I wanted to do things clean: configuring the NES header, managing PRG-ROM banks, etc. Now I wrote a set of assembly and include files along with a linker script, and I thought of a &quot;system&quot; that could hopefully apply to other mappers. This &quot;system&quot; is just a bunch of files that one would use to NESdev quickly on a particular mapper. It describes the mapper and allow easy configuration of the NES header and code/data placement in segments (the segments are PRG banks); any data placed in a segment can be easily accessed without knowing exactly where it is located.<br /><br />So, now the NESdev-kit consists of:<br /><ul><li>nes-header.s/.inc : these files describe a NES v1 header. These files does not need to be edited;</li><li>configure.inc : contains macros to configure the NES header. One would just have to 'call' them to configure the NES file;</li><li>core.s/.inc : core definitions, it declares the 6502 vectors and other 'core' things;</li><li>mapper<em>N</em>.s/.inc <em>(not currently in the zip file)</em> : macros and routines to control mapper <em>N</em>'s registers.</li><li>mapper<em>N</em>.ld : Linker script for mapper <em>N</em>. Unfortunately, in most cases this file would need to be edited in a project, but the edits would be minimal and located at one particular place.</li></ul><br />In core.s/.inc in the zip file, I have defined some &quot;registers&quot; in zeropage. It is not part of the NESdev-kit project, it's just there for convenience as I plan to use some zeropage addresses as general purpose registers; just ignore them.<br /><br />configure.inc currently contains these 2 macros:<br /><ul><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nesconfig <em>mirroring, mapper, batterybackupsram</em></tt> <br />configure mirroring, mapper and whether there is battery backed SRAM. The last parameter is optional and defaults to 'no'. Choosing a mapper with this macro just merely verify that the appropriate linker script is used to link the NES program, an assert fires if the mapper parameter don't match with the linker script;</li><li><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nessize <em>nprgrombank_16K, nchrbank_8K, nprgrambank_8K</em></tt><br />configure PRG-ROM, CHR-ROM/RAM and PRG-RAM size. The last two parameters default to 0.</li></ul><br />For now I don't even configure some other settings like PAL/NTSC and PlayChoice bits but this could be added.<br /><br />Now for the bank mapping thing:<br />If you look at the linker script (it's pretty big and ugly, but it does the job) you'll find at the SEGMENT section, a bunch of PRGBK** segment definitions. It's suited for FME-7. One can configure the runtime address for a segment (bank) really quick: change the <em>x</em> in &quot;run = ROMSB<em>yy</em>AT<em>x</em>000&quot; to 6/8/A/C, and you basically changed the runtime address of the PRG bank <em>yy</em>.<br /><br />Now look at foo.s in the zip file, the code is not so good but it illustrates that code in other segments is easily accessible. The nmi basically calls <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">some_routine</tt> which is located in another bank. The nice thing is, the following code will map the bank where <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">some_routime</tt> is located at the runtime address it expects to be, and successfully calls it:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    ; FME-7: select bank of some_routine where it expects to be run.<br />    ldy #(8 + &gt;.bank(some_routine))<br />    lda #&lt;.bank(some_routine)<br />    sty $8000<br />    sta $A000<br /><br />    jsr some_routine<br /></div><br />That's because I (ab)used the bank attribute of memory regions: basically, the low byte is the bank number (0-63) and the high byte is the runtime address for the bank (where the bank will be mapped)—this would me abstracted into a macro. The astute reader will find that if the runtime address is $6000, it will write at register 8, the code just ignores the upper bits (PRG-RAM CE and PRG-RAM/ROM select) and happens to work anyways. As nice as it looks, it's not perfect because there's a pitfall: if you use ex. segment &quot;PRGBK07&quot;, then the preceding segments should have at least some data in them (i.e. be not empty), because otherwise, as empty segments does not take space, the banks will be &quot;shifted&quot; down to lower addresses, and the bank logic will fail miserably. That kind of problem could be easily troubleshooted by looking at the map file however. Now, I know that one could just change the upper three bits of an absolute symbol (in a jsr, lda, etc) according to the expected runtime address each time it is used, but because the 6502 isn't much suitable for doing position-independent code, it's simpler having each bank run at a particular address, and if the linker can do the relocation for you, why not using it to simplify writing code?<br /><br />Now for the NESdev-kit project, it would simply involve having other mappers defined and refine the kit, as I surely have overlooked some things. There are some easy mappers, but some (MMC3 and particularly MMC5) will cause trouble. That's why I want to bring your lights here. The goal would be to make &quot;The NESdev-kit&quot; that would allow novice programmers to easily start a NESdev project with a mapper of his choice, it should be as user-friendly as it is possible by using only the cc65 toolsuite. If it becomes mature enough, a simple &quot;wizard&quot; in NESICIDE would setup automatically all the rest that can't just be done with cc65 et al. While I only consider assembly, I think it might be doable to somewhat support some banking features in C but I haven't looked into it at all; if it's possible to do it, it would be even nicer because it would lower even more the &quot;entry-level&quot; for programming a NES game—well, a big one, as Shiru insisted on the fact that the biggest problem with C in cc65 was code size.<br /><br />Any relevant suggestion, criticism, is more than welcome.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Fri Mar 28, 2014 12:52 pm</p><hr />
]]></content>
</entry>
</feed>