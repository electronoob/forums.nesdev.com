<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Small C for NES: A Curious Journey</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Small C for NES: A Curious Journey</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10205">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10205</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 26, 2013 10:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I'm not the one who is demanding it fit in NROM. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> I have advocated AxROM elsewhere, and I think a dedicated 32k for C code is a pretty reasonable amount of space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Wed Jun 26, 2013 11:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, some really great discussion on this topic! Let me be clear that I think cc65 is a great C compiler, it's just that some of the idioms of C are not efficient on the 6502. Seriously, think about a three-dimensional array. It's a pointer to an array of pointers to arrays of pointers to arrays. How is that going to be efficient on any platform?<br /><br />Personally I want a language that cooperates well with assembly, that is easy to read and maintain and that leverages the advantages of the platform. Honestly I don't understand the portability concerns. If I wanted to port a game from NES to another platform I'd want to re-code it. Finally, code (and compilers) that are cross-platform have more difficulty leveraging the platform they are targeted for.<br /><br />So this curious journey is now leading to the idea of a language that implements one or more design patterns for banked execution. Here are the patterns I am aware of. If someone is aware of others, please let me know.<br /><br /><strong>Banked Data</strong><br />In this model a fixed segment contains all executable code and banked segment contains static data, which is either referenced in-place or moved to RAM. This is very easy to implement but is limited in executable code size.<br /><br /><strong>Banked Contiguous</strong><br />This model is what Metroid uses. The common code is stored in a fixed segment. All data and code required for a given area of the game is stored on a separate banked segment. In any given area of the game, the full program code is present in a contiguous address space. This works well for medium-sized project as Metroid demonstrates, but influences the design of the game.<br /><br /><strong>Banked Data with Trampoline</strong><br />I am not aware of any game that uses this, but I haven't' studied many. This is the scheme I came up with for my MMC1 projects. 32K of program space is available, and routines in the fixed segment read data from banked segments and copy it to RAM, then restore the banked segment back to program space. Works pretty well but still limits executable code size.<br /><br /><strong>Banked Library and Data</strong><br />This is what SMB3 uses. All common code lives in two fixed segments. Another segment is used to dynamically bank in data tables as needed, and a fourth used to dynamically bank in program code as needed. Program code is organized into several libraries with a consistent header or entry point method, and contain any data tables that might be specific to that library.<br /><br /><strong>Program Banking</strong><br />Software is segregated into separate self-contained programs. A small fixed ROM or RAM-loaded trampoline is then used to swap between programs.<br /><br />Out of all of these, I like the idea of banked libraries as found in SMB3. Let me know what other banking strategies you may have in mind!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 26, 2013 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Almost all multicarts, except CNROM multis such as Donkey Kong Classics, use Program Banking to launch the selected activity.<br /><br />In addition, Action 53 uses Banked Data with Trampoline to pull lines of instruction text and compressed screenshot tiles out of their hiding places in other banks. At power-on and reset, it copies an &quot;interbank fetch&quot; subroutine into RAM that copies a block of data starting at a given 24-bit address to a fetch buffer in RAM. (Bit 15 of these addresses is always 1, as in Super NES LoROM.)<br /><br />I imagine that Metroid's use of Banked Contiguous comes from its FDS heritage, as bank switching is <em>extremely</em> slow on that mapper.<br /><br />Are SMB3's DPCM samples in the fixed bank or in a switchable bank? If they're in a switchable bank, it can't really use the full Banked Library and Data except in scenes whose music uses no samples.<br /><br />The best compromise I can think of is a subset of Banked Library and Data. The ROM is divided into a 16K fixed bank and a 16K or 8K switchable bank. Routines that need less than 16K of data go in their own bank. Routines that need to access data in more than one 16K bank go in the fixed bank, as do interrupt handlers and routines called by routines in multiple banks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 26, 2013 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Seriously, think about a three-dimensional array. It's a pointer to an array of pointers to arrays of pointers to arrays. How is that going to be efficient on any platform?</div><br />Really ? I thought arrays were &quot;flattened&quot; to a single dimentional arrays like in my previous example. However now I am not too sure. The confusion between arrays and pointers in C has always puzzled me to be honest. It's just one of the bad things about the language. I admit that C is not a very good language <em>technically</em>, it is just that it is a standard, and that it is extremely portable.<br /><br />The part about &quot;idioms&quot; might be true, but I think it is possible to do a clever analyzis and re-organize the data in order to be efficient on 6502 : Auto variables becomes static, index values to array are placed in X and Y registers, and strength reduction is always applied whenever possible. There is another million of optmisation steps that can make code better each time, and turn horrible code into good code. That's how modern compiler works (I guess).<br />The tricky part is what I'll call &quot;stack deletion&quot; optimisation. However SDCC already does something like this. Now the question is if it is better to add 6502 to SDCC, or to modify CC65 in order to apply stack deletion, or to continue to code games in assembly or extremely poor generated code from C.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Personally I want a language that cooperates well with assembly,</div><br />C cooperates extremely well with assembly. The usage of asm() statmens can inline assembly code, and with separate compiling and linking it is possible to mix portions of C and assembly (plus a ton of other languages, but that would not apply in our case).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Honestly I don't understand the portability concerns. If I wanted to port a game from NES to another platform I'd want to re-code it.</div><br /><span style="font-size: 150%; line-height: normal">Oh, really ?</span><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, I'm not the one who is demanding it fit in NROM.  I have advocated AxROM elsewhere, and I think a dedicated 32k for C code is a pretty reasonable amount of space.</div><br />I get your point. However it is a shame to be limited to make games where few realtime action takes place AND small games that uses a large mapper, isn't it ? What if you actually wanted to make a large game, that would &quot;normally&quot; fit in AOROM for instance (256kb) ? Would you have to use MMC5 with 1MB PRG-ROM just because you used CC65 ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 26, 2013 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">What if you actually wanted to make a large game, that would &quot;normally&quot; fit in AOROM for instance (256kb) ?</div><br />It takes a lot of art to fill that much space. If you have a Rareware budget for artists, you can probably get a Rareware budget for programmers too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 26, 2013 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll meditate on this. However, my former goal was to make some simple games to proof to people I'm a serious programmer, and that way artists and other people would joint, and we'd be able to make bigger / better games.<br /><br />However, sounds like for now I just proved that I am a good programmer but I can't keep focus on one project without immediately moving to another, etc... I think it's my nature to be like this ^^ Wonder what would have happened to me if I was born back when computers didn't exist.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Wed Jun 26, 2013 1:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">What if you actually wanted to make a large game, that would &quot;normally&quot; fit in AOROM for instance (256kb) ?</div><br />It takes a lot of art to fill that much space. If you have a Rareware budget for artists, you can probably get a Rareware budget for programmers too.</div>There may be things other than graphics in there, though. Maybe you will fill up a lot of space with the level data if your game has a lot of level data? (However, depending on the game, this might not be necessary: MATCHNUM uses the level number as a random number seed, and then start from a solved state and makes random backwards moves until a solvable level is generated. KNAR does something similar. Depending on the game, though, this might not be appropriate, or even if it normally is, the Famicom might be too slow or too less RAM. Therefore, you still might want to fill up a lot of ROM space with level data.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Wed Jun 26, 2013 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />We've heard from the experts coming from a low level background.  Now let's hear from a fool tumbling down from high level languages <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Yet another C compiler will be just a curiosity.  I don't see the experts using it and the fools still wont know what to do with it.<br /><br />The most successful higher level language implementations have been parsers for BASIC that output assembly.  Usually using &quot;kernels&quot; that are used as templates for certain game features.  These are NOT runtime engines.  They do not run BASIC code in some HAL.<br /><br />I'm thinking batari BASIC as a prime example:<br /> <!-- m --><a class="postlink" href="http://bataribasic.com/">http://bataribasic.com/</a><!-- m --><br /> <!-- m --><a class="postlink" href="http://www.randomterrain.com/atari-2600-memories-batari-basic-commands.html">http://www.randomterrain.com/atari-2600 ... mands.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 26, 2013 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Seriously, think about a three-dimensional array. It's a pointer to an array of pointers to arrays of pointers to arrays. How is that going to be efficient on any platform?</div><br /><br />No, this is incorrect, and these are not the same thing in C, and even though you can often implicitly convert an array to a pointer, you cannot always do this. (Other languages, like Java, are a different story.)<br /><br />To create a three dimensional array, you do something like:<br /><br /><strong>int x[2][2][2] = {{{1,2},{3,4}},{{1,2},{3,4}}};</strong><br /><br />In memory, this will be represented as data only, which looks like: <strong>1,2,3,4,1,2,3,4</strong><br /><br />To create arrays of pointers, you must do this differently:<br /><br /><strong>int* yyy0 = {1,2};<br />int* yyy1 = {3,4};<br />int* yyy2 = {1,2};<br />int* yyy3 = {3,4};<br />int** yy0 = {yyy0,yyy1};<br />int** yy1 = {yyy2,yyy3};<br />int*** y = {yy0,yy1}</strong><br /><br />In memory is very different. (Looks like how it is defined.)<br /><br />To <em>access data</em> in both of these structures, this is the same <em>syntax</em>: <strong>x[1][1][1]</strong> and <strong>y[1][1][1]</strong> are the same. The underlying implementation for fetching these, however, is different. When fetching from <strong>x</strong>, it knows the dimensions of each part of the array, so there are no &quot;arrays of pointers&quot; that need to be involved. For <strong>y</strong> it is a different story. The type of <strong>y[1]</strong> is an <strong>int**</strong>, so it fetches that <strong>int**</strong> to evaluate <strong>y[1][1]</strong> which fetches the next pointer, etc. The types of these things are known at compile time, so even though the syntax is the same the compiler knows how they are different and will generate very different machine code.<br /><br />The difference becomes very much apparent when you want to implicitly cast a multidimensional array to an array of pointers (i.e. you can't do this). Trying to pass <strong>x[1]</strong> as an <strong>int**</strong> will correctly generate an error, because there is no pointer data in <strong>x[1]</strong>.<br /><br />Anyhow, my criticism of CC65's performance on multidimensional arrays was referring to its treatment of arrays specifically. Pointers are not the issue, here, but the very inefficient manner in which it will access data in multidimensional arrays vs. rolling the same thing by hand as a single dimensional array.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Jun 26, 2013 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Out of all of these, I like the idea of banked libraries as found in SMB3. Let me know what other banking strategies you may have in mind!</div><br /><br />I think so too.  A structure like that can be made fairly bankswitching freindly with HLL if limited properly I think.  So you basically have the fixed bank, and atleast a library bank.  You may have a separate Data bank or something but that can be ignored for now.<br /><br />If you set up these rules I think it would make things much simpler for the compiler to handle banking:<br /><br />1) The library banks can ONLY call functions within it's own library and the fixed bank.  It operates as if there is no banking.  The functions in a given library bank assume it's felow library functions are always there.<br /><br />2) The fixed bank contains the code that handles all bankswitching commands before it calls functions that are in the library.  Segregate high level tasks into separate banks, to make things simpler.<br /><br />To start the compiler wouldn't have to figure out how to follow these rules, you could compile each bank separately based on how you manually seggregated functions into the fixed bank or library bank #n using separate files or something.  Eventually you could get fancy enough to compile the entire thing in a large linear virtual space, and then determine what functions can fit together in which library banks and the compiler could handle everything ensuring it would follow the rules above.<br /><br />Interupts make this a little more tricky, but if the interupt handlers are always available in the fixed bank it's not too hard to keep track of what's going on and keep the banks straight and still follow these rules.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Wed Jun 26, 2013 7:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />batari Basic looks very interesting. It has a number of limitations similar to what I'm talking about. For one there's no parametrized subroutines or functions. Another thing is all math is 8-bit, which works out pretty OK for the 2600. It looks like the final version uses a program-at-a-time banking method, which fits the 2600's limitations.<br /><br />The compiler I've been working on is similar to batari Basic, but has parameterized subroutines, n-byte math and a more modern syntax.<br /><br />I like the idea of offering game &quot;kernels&quot; to end users to allow rapid development of pet projects. Sounds pretty awesome really!<br /><br />Thank you all again for your input. This has given me a lot of perspective.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 26, 2013 8:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">I like the idea of offering game &quot;kernels&quot; to end users to allow rapid development of pet projects. Sounds pretty awesome really!</div><br />I guess the NES version of this would be selectable/configurable VBlank handlers. Depending on the type of game people are making, they might need to favor some types of VRAM updates over others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 26, 2013 8:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I get your point. However it is a shame to be limited to make games where few realtime action takes place AND small games that uses a large mapper, isn't it ? What if you actually wanted to make a large game, that would &quot;normally&quot; fit in AOROM for instance (256kb) ? Would you have to use MMC5 with 1MB PRG-ROM just because you used CC65 ?</div><br /><br />I don't think that's a fair assumption to make at all. In my experience, as games get larger, the bulk of space is used by data, not code. (It depends what kind of game you're making, there is no one-size-fits-all rule, but this is my general experience.) I actually think 32kb dedicated to C code could be enough to make even large-scope NES games like Master Blaster or SMB3 (though DPCM may be out of the question), though like any limited space there's always a way to fill it up if you want.<br /><br />Also, if it isn't enough space, as shiru mentioned before, it's really easy to convert offending bits from C to ASM. A lot easier than developing them as ASM from scratch. The ability to prototype and tune in C alone is a big productivity booster even if you have to recode some of it later (by then you already have done the hard work of tweaking and reworking in the easier language).<br /><br />It's a really tight squeeze to fit a C game into NROM when you have to put code and data all together. Once you get them out of that bank how much more space have you made for code? Probably at least 2x, maybe 4x! This doesn't scale up when you're making a bigger game, eventually it becomes about making more levels and more music, etc. and a lot less about adding more code.<br /><br />So, in short, no, if I was trying to make a game that would &quot;normally&quot; fit in AOROM 256k, but with CC65, I suspect I would complete the coding part about 5x faster by using C, and waste maybe at most an extra 30k of space due to C bloat by the end maybe. (These are completely spurious ballpark numbers, but if I had to guess this is what I'd guess.) I would certainly NOT need 4x the space because of C, not on those scale. On a 32k game yes maybe, but not on a 256k game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Jun 26, 2013 8:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Speaking of programming a large game in C with a mapper, for now I think I'd go with 8+24 PRG and CHR RAM configuration, i.e. first 8K of PRG with bankswitching for all kinds of large data (music, level maps, graphics), top 24K fixed for C code, vectors, maybe a bit of DPCM. Too bad that to my knowledge there are no discrete logic mappers that allow this configuration, and MMC3 probably would be an overklll.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Jun 26, 2013 8:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">The compiler I've been working on is similar to batari Basic, but has parameterized subroutines, n-byte math and a more modern syntax.<br /><br />I like the idea of offering game &quot;kernels&quot; to end users to allow rapid development of pet projects. Sounds pretty awesome really!<br /><br />Thank you all again for your input. This has given me a lot of perspective.</div>I'm just glad someone's working on this instead of us just debating about it! <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  Even better that the debate is providing useful input on your efforts.<br /><br /><br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Too bad that to my knowledge there are no discrete logic mappers that allow this configuration, and MMC3 probably would be an overklll.</div>You could do it with discrete logic but it's going to be more than two chips worth, and no, there aren't any current discrete mappers like that.  As for the MMC3 choice you're only using a very small subset of what the MMC3 has to offer.  So you could simplify the MMC3 down to something that'd fit in the smallest CPLDs on the market.  You'd still have MMC3 compatibility for emus, but not the overkill on the hardware.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>