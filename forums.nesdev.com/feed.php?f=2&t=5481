<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5481" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-02-16T21:34:37-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=5481</id>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2010-02-16T21:34:37-07:00</updated>
<published>2010-02-16T21:34:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56700#p56700</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56700#p56700"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56700#p56700"><![CDATA[
<div class="quotetitle">Gradualore wrote:</div><div class="quotecontent"><br />Question: Say you are calling a procedure that resides in a seperate module. Are you still able to get at those scopes defined inside the procedure?<br /></div><br /><br />To my knowledge, the answer would be no.  Scope are file scope and cannot be exported. This mean that you have to redefine them in your h file.  In my case this is not an issue since the name of the function inside the module and the way to access it outside is completely different.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Inside asm file<br /><br />.proc subMyFunction<br />.scope Param<br />   posX = zpParam1<br />.enscope<br />...<br />.endproc<br /><br />-------<br />Inside H file<br /><br />.scope MyModule<br />     myFunction = __subMyModuleMyFunction<br /><br />    .scope myFunction<br />        .scope Param<br />             posX = __myModuleFunctionParam1<br />        .endscope<br />    .endscope<br />.endscope<br /><br /></div><br /><br />With those scope, you can do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    lda someValue<br />    sta MyModule::myFunction::Param::posX<br /></div><br /><br />Since we call it from outside the module, maybe the Param scope is redundant and should be removed. I'm still testing which approach is better.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Tue Feb 16, 2010 9:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-16T09:57:45-07:00</updated>
<published>2010-02-16T09:57:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56672#p56672</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56672#p56672"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56672#p56672"><![CDATA[
Dangit, I guess I can't define a struct inside a procedure. I just tried it. It looks like I'd have to use some kind of naming convention for myself such as, inside my header file I might have:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.import testMapCollision<br />.struct testMapCollision_Params<br />   x .byte<br />   y .byte<br />.endstruct</div><br /><br />Only, I'm not sure how I could include the header file into the module itself. Maybe I'd have to use the .global directive that miau mentioned earlier, so that when the label is defined it is exported, and when used, imported. That way I could put:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.global testMapCollision<br />.struct testMapCollision_Params<br />   x .byte<br />   y .byte<br />.endstruct<br /></div><br />and include the header both in the module itself and in any other modules that use it. That would be somewhat similar to C/C++ function prototypes.<br /><br />I think when all is said and done though I like your approach better. With explicitly named zp variables being used, it'd be easier in the debugger to track bugs than having one flat array of bytes that can be used in any way by procedures' param structs.<br /><br />Question: Say you are calling a procedure that resides in a seperate module. Are you still able to get at those scopes defined inside the procedure?<br /><br />*edit* I think I may try a hybrid of the two approaches. In my headers, I think I will do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.global MyProcedure<br />.scope MyProcedure_Params<br />  x = zpByte0<br />  y = zpByte1<br />.endscope<br />.scope MyProcedure_Locals<br />  counter = zpByte2<br />.endscope</div><br /><br />And then in the source file, you just include this header and now you can use the procedure and its parameter/local scopes both inside the module and anywhere you use the module.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Tue Feb 16, 2010 9:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2010-02-15T16:46:45-07:00</updated>
<published>2010-02-15T16:46:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56653#p56653</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56653#p56653"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56653#p56653"><![CDATA[
There is many way to skin a cat <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" />  As for this idea, hmm... What I don't like is there is no scope to it at all and you must use the local name + struct to access it.  <br /><br />In my example, you cannot mix the scope. If you use the variable outside the function scope, you have to specify the function name. In your example, the param struct is defined at module scope or higher and all code can see it. In my example, the scope is only defined at the function level and the same name can be re-used in all function, which is quite useful and keep your code organized the same way so you know what to expect when using a function.<br /><br />edit:<br /><br />I didn't realize that the struct was defined at function level. I was not aware you could do this. But still, the second issue is still there, it makes the variable even longer. Since the scope or struct code is almost the same, you should go with a scope. You can always do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope Param<br />   posX      = locals + 1<br />   posY      = locals + 2<br />   direction   = locals + 3<br />.endscope<br /></div><br /><br />and now you saved the extra local when accessing it. Another issue is what happen if a function inside a function uses the param? How do you define in the strut that you must use the values in locals after the one that was used inside the first function? I'm not sure how you could do that with strut.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Mon Feb 15, 2010 4:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-15T08:58:08-07:00</updated>
<published>2010-02-15T08:58:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56640#p56640</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56640#p56640"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56640#p56640"><![CDATA[
you gave me an idea:<br />How about, in zp, instead of individually defining a bunch of temp vars, just reserve space for "locals:"<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;in zp<br />locals: .res 32<br /><br />;and then for a proc:<br /><br />.proc MyProcedure<br />.struct Params<br />   x .byte<br />   y .byte<br />.endstruct<br /><br />  lda locals+Params::x<br />  lda locals+Params::y<br />  rts<br /><br />.endproc</div><br /><br />I guess the problem with that is how can you export (or, not really export but define for where you are using the procedure) the params struct for your procedure? You'd probably have to do something like .struct MyProcedure_Params in the header file for the module. Maybe that wouldn't be so bad. Next to every .import, include a struct for the params of the module. I think I might try this or your method. Thanks for the idea!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Mon Feb 15, 2010 8:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2010-02-14T16:58:33-07:00</updated>
<published>2010-02-14T16:58:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56622#p56622</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56622#p56622"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56622#p56622"><![CDATA[
I changed my stance recently on renaming temp variables.  If done properly, it can make the code more readable. <br /><br />One way I do is like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc subGetMetatileAttribute<br />;---------------- Parameters definitions ----------------<br />.scope Param<br />   posX      = zpParam1<br />   posY      = zpParam2<br />   direction   = zpParam3 <br />.endscope<br />.scope Local<br />   metatileRow   = zpTemp16Bit<br />.endscope<br />;---------------------------------------------------------<br />...<br />.endproc<br /></div><br /><br />At first I was finding it messy but actually there is a good point of doing this.  When you want to find if a temp variable is used, you don't have to scan the complete code but <strong>only the top</strong> of the function definition. This makes it easier to find where they are used.<br /><br />So in the function, when you want to use a parameter you do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda Param::posX<br />   ...<br />   stx Local::metatileRow<br /></div><br /><br />when you call the method and want to set a parameter, you do<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda someValue<br />   sta subGetMetatileAttribute::Param::posX<br /></div><br /><br />Yes, I know it makes the statement bigger but it's now quite obvious by reading the code what you're trying to do.  This is one way that I use scopes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Sun Feb 14, 2010 4:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-08T18:18:37-07:00</updated>
<published>2010-02-08T18:18:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56325#p56325</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56325#p56325"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56325#p56325"><![CDATA[
Interesting this came up as I recently cleaned up my code base. My current approach is that for every procedure or variable label I have something like this:<br /><br />in .asm file:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.export decodeMap<br />.proc decodeMap<br />  ;code<br />.endproc<br /><br />.export testMapCollision<br />.proc testMapCollision<br />  ;code<br /><br />.endproc</div><br /><br />in .h file:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ifndef MAP_INC<br />MAP_INC = 1<br /><br />.import decodeMap<br />.import testMapCollision<br /><br />.endif<br /></div><br /><br />I like doing it this way because it gives me max control over what gets exported and imported. Plus, having the .export right above the definition of a symbol makes it easier to maintain, and then the inc file is just a long list of imports.<br /><br />I have some header files that only contain commonly used structs, constants, macros, etc. These I have in a seperate directory from the sort of header file described above.<br /><br />*edit* now that I think about it, it may be a good idea to move structs/macros/constants that are primarily associated with a particular module into that module's header file.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Mon Feb 08, 2010 6:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miau]]></name></author>
<updated>2010-02-08T12:34:28-07:00</updated>
<published>2010-02-08T12:34:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56319#p56319</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56319#p56319"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56319#p56319"><![CDATA[
With my approach, a file named example.h file might look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ifndef EXAMPLE_H<br />EXAMPLE_H = 1<br /><br />.global some_function<br />.globalzp some_zp_var<br /><br /><br />SOME_CONSTANT = 123<br /><br />.macro some_macro<br />    ...<br />.endmacro<br /><br />.endif<br /></div><br /><br />Then, example.s would look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.include &quot;example.h&quot;<br /><br />.segment &quot;ZEROPAGE&quot;<br />some_zp_var: .res 1<br /><br />.segment &quot;CODE&quot;<br />.proc some_function<br />    ...<br />    rts<br />.endproc<br /></div><br /><br />That's similar to how you'd do it in C. The .global statements work like forward declarations in C, which is quite convenient, they're equivalent to .export when included from example.s (where the actual function or variable is defined) and equivalent to .import when included from anywhere else.<br /><br />No idea if that's the best way, maybe it could be done more elegantly in ca65... I'm not 100% familiar with all of ca65's preprocessor commands.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1377">miau</a> — Mon Feb 08, 2010 12:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2010-02-08T08:46:46-07:00</updated>
<published>2010-02-08T08:46:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56313#p56313</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56313#p56313"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=56313#p56313"><![CDATA[
Resurrecting this thread because I have a question.<br /><br />I'm going through all my code trying to scope everything and I found this thread, which is great btw.  I'm not familiar with using .h files.  I was just wondering what you guys stick inside them.<br /><br />Right now my .h files consist of only .import and .export commands.  For example, my sound_engine.h file looks exactly like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.export sound_init<br />.export sound_play_frame<br />.export sound_load<br /><br />.importzp temp_ptr1</div><br /><br />and my sound_engine.asm has a line at the top:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.include &quot;sound_engine.h&quot;</div><br /><br />Is this all I should include in my .h files?  Or do you stick things like constants/defines in there too?  I just want to know what is common practice.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Mon Feb 08, 2010 8:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-08-13T18:40:05-07:00</updated>
<published>2009-08-13T18:40:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49807#p49807</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49807#p49807"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49807#p49807"><![CDATA[
My point was that if you can find a way to reduce the risk of using at the same time the same temp variable, more power to you.   Already just defining local temp variables (file scope) will reduce the amount of code you will need to check if something goes wrong.<br /><br />If you have 15+ global temp variables that anybody can use at any time, the risk of having a bug that will be hard to figure out increase.  And if you use different names for the same memory location for temp variable, even more difficult to figure out.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Thu Aug 13, 2009 6:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2009-08-13T09:30:17-07:00</updated>
<published>2009-08-13T09:30:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49799#p49799</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49799#p49799"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49799#p49799"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">miau wrote:</div><div class="quotecontent">What I really meant (but didn't clearly state, sorry) is that I don't want to add a program for this particular, very simple task. I wouldn't consider it to be useful enough unless it has enough features to be interesting and stand on its own. Plus, people are used to ca65 as it is, what if they wanted to use parts of my code in their own projects?<br /></div><br />As long as your preprocessor spits out assembly code suitable for ca65 or object files suitable for ld65, it will still be possible to combine modules in your language with modules designed for straight ca65.<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent"><br />What if I have 15 temp variables that I shared under different names the same way?<br /></div><br />I typically reserve the first 16 bytes of zero page for local variables. At the top of each .proc, I add comments explaining how I use each.</div><br /><br />It seems to me this is more than acceptable for an NES game. I can't imagine many situations where calls would be nested more than 2, or 3 times. It seems as though it should be very easy in most cases to correct mistakes where routines are trying to use the same temp vars. And of course if you "run out" of temp vars, you can hard code using the stack to save/restore these values. I'm trying not to worry too much about emulating higher level concepts while working on my project, except that which is practical. To me, practical means:<br /><br />1) easily navigable source code. Not one monolithic file<br />2) concepts are seperated clearly<br />3) you have a very good debugger like FCEUXDSP so at any point you can trace exactly what your code is doing at any point<br /><br />beyond that, we might as well code in C.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Thu Aug 13, 2009 9:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-08-12T07:21:03-07:00</updated>
<published>2009-08-12T07:21:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49767#p49767</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49767#p49767"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49767#p49767"><![CDATA[
<div class="quotetitle">miau wrote:</div><div class="quotecontent"><br />What I really meant (but didn't clearly state, sorry) is that I don't want to add a program for this particular, very simple task. I wouldn't consider it to be useful enough unless it has enough features to be interesting and stand on its own. Plus, people are used to ca65 as it is, what if they wanted to use parts of my code in their own projects?<br /></div><br />As long as your preprocessor spits out assembly code suitable for ca65 or object files suitable for ld65, it will still be possible to combine modules in your language with modules designed for straight ca65.<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent"><br />What if I have 15 temp variables that I shared under different names the same way?<br /></div><br />I typically reserve the first 16 bytes of zero page for local variables. At the top of each .proc, I add comments explaining how I use each.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Aug 12, 2009 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-08-12T06:57:57-07:00</updated>
<published>2009-08-12T06:57:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49765#p49765</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49765#p49765"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49765#p49765"><![CDATA[
<div class="quotetitle">miau wrote:</div><div class="quotecontent"><br />I wish the stack was more useful. <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /></div><br /><br />I may have found a way to make the stack more useful.  I made a new thread <a href="http://nesdev.com/bbs/viewtopic.php?p=49764" class="postlink">here</a>.  The idea came out from all the conversation we had in this thread about macro, function param and local variable. <br /><br />I don't know if what I wrote make sense but if it does, it could be interesting <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Wed Aug 12, 2009 6:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miau]]></name></author>
<updated>2009-08-12T06:17:17-07:00</updated>
<published>2009-08-12T06:17:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49761#p49761</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49761#p49761"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49761#p49761"><![CDATA[
You've got a point there.<br />But in many cases you can't entirely avoid this problem. Imagine functions that work with temp vars internally, not as parameters.<br />I wish the stack was more useful. <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br />Anyway, it's usually the first thing I check for when encountering an error that, at first sight, makes no sense to me.<br />Just be sure to comment your parameter usage well and use different temp vars in NMI and you'll most likely get away without problems.<br /><br />It might be a good idea to write a utility that checks for such errors. Jump tables will still be a problem, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1377">miau</a> — Wed Aug 12, 2009 6:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-08-12T05:14:54-07:00</updated>
<published>2009-08-12T05:14:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49758#p49758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49758#p49758"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49758#p49758"><![CDATA[
<div class="quotetitle">miau wrote:</div><div class="quotecontent"><br /><div class="quotetitle">ZomCoder wrote:</div><div class="quotecontent">I wonder if the following would work to help make parameters more readable:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope procThatDoesStuffParams<br />   XCoord = b0<br />   YCoord = b1<br />.endscope<br /><br />.proc procThatDoesStuff:<br />  lda procThatDoesStuffParams::XCoord<br />  ;do stuff<br />  lda procThatDoesStuffParams::YCoord<br />  ;do stuff<br />  rts<br />.endproc<br /></div><br /></div><br />Sounds interesting. If I recall correctly that's one of the solutions Bregalad came up with as well.<br /></div><br /><br />Hmmm...  For some reason, there is big warning sign that comes to my mind when I see this.  I will elaborate.<br /><br />Defining an extra symbol for your function is fine but doing it for temp variable. hmm.. I feel debugging nightmare will ensue.  There is good chances that you will have only a few of those temp variables that you will use often so this is where it could get messy.<br /><br />Let say I have 2 temp variable and let's call temp Temp1 and Temp2 to make it simpler.<br /><br />For example, I decide for function A to rename Temp1 as a::param1 and Temps2 as a::param2.  For function B I decide to do the same and call Temp1 b::specialParam.<br /><br />Many weeks of coding later,  for some reason I decide that from method A, I have to call method B.  But... I forgot that a::param1 and b::specialParam are actually the same temp variable.<br /><br />I finish the code but now for some reason, function A doesn't work properly anymore and I cannot understand why.  There is some good chances that my scoping will be defined in the header files so I will never see while scanning the file that b::specialParam is now overwriting the content of a::param1 because when I read the code: I see 2 different variables. I will have no clue that they're using the same address, so is the next person that will read your code that doesn't know your code base.  <br /><br />You could always argue that "I know my code! I will remember that fact after 2 months", maybe. But what about the other guy that may use your code and doesn't not yet about that?  What if I have 15 temp variables that I shared under different names the same way?  I don't think that you will remember all the possible combination of those scoped parameters for the 15 temp variable used N time in your program.<br /><br />For now I feel it's not a good idea to share temp variables that way unless someone can prove me otherwise.  It may have seems a good idea at first but after analyzing it, I can only see pain during the debugging session <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Wed Aug 12, 2009 5:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miau]]></name></author>
<updated>2009-08-12T04:17:09-07:00</updated>
<published>2009-08-12T04:17:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49755#p49755</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49755#p49755"/>
<title type="html"><![CDATA[ca65 scopes and macros]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5481&amp;p=49755#p49755"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">miau wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You could always write your own extended assembly language<br /></div><br />might be a good idea. However, I'm not sure I want to add that program to all my sources or want to force people to download or even compile it themselves.</div><br />I distribute plenty of tools with my own sources. Look at LJ65: the source code distribution includes some audio conversion and nametable compression code, as both source code and Windows binary.</div><br />Yeah, separate utilities for audio conversion or nametable compression make perfect sense to me. <br />What I really meant (but didn't clearly state, sorry) is that I don't want to add a program for this particular, very simple task. I wouldn't consider it to be useful enough unless it has enough features to be interesting and stand on its own. Plus, people are used to ca65 as it is, what if they wanted to use parts of my code in their own projects?<br /><br /><br /><div class="quotetitle">ZomCoder wrote:</div><div class="quotecontent"><br />Miau: About parameter passing. What would be confusing about doing something like this (this is my current habit):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;b0 is the X coordinate<br />;b1 is the Y coordinate<br />.proc procThatDoesStuff:<br />  lda b0<br />  ;do stuff<br />  lda b1<br />  ;do stuff<br />  rts<br />.endproc</div><br /><br />Where b0 and b1 are zp variables.  I have several b's and several w's that I use as temp params.<br /></div><br /><br />Yeah, that's what I do - commenting what all temp vars and regs are used for.<br />Still, the calling code can get quite messy in my opinion and I think Bregalad would agree. I remember him posting about the same problem some time ago.<br /><br /><br /><div class="quotetitle">ZomCoder wrote:</div><div class="quotecontent"><br />I wonder if the following would work to help make parameters more readable:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope procThatDoesStuffParams<br />   XCoord = b0<br />   YCoord = b1<br />.endscope<br /><br />.proc procThatDoesStuff:<br />  lda procThatDoesStuffParams::XCoord<br />  ;do stuff<br />  lda procThatDoesStuffParams::YCoord<br />  ;do stuff<br />  rts<br />.endproc<br /></div><br /></div><br />Sounds interesting. If I recall correctly that's one of the solutions Bregalad came up with as well.<br /><br /><div class="quotetitle">ZomCoder wrote:</div><div class="quotecontent"><br />As for avoiding name clashes using Ca65's scope: Under what circumstances do you think this would occur? For my current project, I don't see this as a possibility. Especially since I am the only person working on the programming side of things.<br /></div><br />Yeah, the probability is zero when I'm the only person. But this time I'm planning to release the source to the public, you never know in what context other people will be using it.<br /><br /><div class="quotetitle">ZomCoder wrote:</div><div class="quotecontent"><br />My favorite advantages gained from CA65 are the .import and .export ability, so I can break up my source into smaller chunks. It was such a pain to navigate hundreds of lines of code in one source file before. I also like being able to use local symbols within procedures, no more anonymous labels.<br /></div><br />I've been pondering a bit more after your comments. I'm definitely going to switch to the file-scope, source/header, .export/.import way as there aren't any arguments against it except... laziness.<br /><br />I can still use macros the way I want, just need to have more elaborate variable names and .export them. My previous solution was definitely worse. So, yep, I'd consider my problems as solved for now. Thanks for everyone's help and suggestions. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />As for local symbols in ca65: I agree, they make code so much nicer to look at.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1377">miau</a> — Wed Aug 12, 2009 4:17 am</p><hr />
]]></content>
</entry>
</feed>