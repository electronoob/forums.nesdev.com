<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reverse engineering help - Reward$$</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reverse engineering help - Reward$$</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=3714">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=3714</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sat Dec 01, 2007 7:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Not still; firstly send me the file you are doing; i will decide based on what i see in that.</div>
<br />Okay, those finished.
<br />
<br /><!-- m --><a class="postlink" href="http://www.neviksti.com/blackbox/ID004D0_inbits.csv">http://www.neviksti.com/blackbox/ID004D0_inbits.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://www.neviksti.com/blackbox/ID004D0_~inbits.csv">http://www.neviksti.com/blackbox/ID004D0_~inbits.csv</a><!-- m -->
<br />
<br />The first one is only counting through the bits you first listed:
<br />input bits: 2 4 5 7 8 9 b e 14 15 16 17 19 1a 1e 1f 
<br />while holding the other zero.
<br />
<br />The second file is the exact opposite.  It holds those bits zero, and counting through the remaining 16.
<br />
<br />
<br />Thanks for explaining that table again.  That makes more sense now.
<br />Do you see this same "multiple of 4" structure for the table generated with any file?  Like is that true for the ReedMuller files, or even just the input range $00030000-$0003FFFF file by itself?
<br />
<br />Maybe I'm reading into it too much, but it seems to be saying that there is an equivalence relation between two sets of input pairs.  I wonder if we could figure out what this relation is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sat Dec 01, 2007 11:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />More strangeness:
<br />
<br />I decided to start looking at that table myself.  The code I wrote doesn't double count the pairs, so for my tables I'm focussing on whether the entries are even or odd.
<br />
<br />I did some tests on ID004D0, and noticed this:
<br />Looking at the inputs 0 to (m-1), and ignoring the rows that are by necessity 0, the table appears to ALWAYS be such that each collumn is either odd or even (that is, a collumn is filled with all odd numbers or all even numbers) when m = 2^n (some integer n).  And this is almost always false otherwise (although the exceptions to this are not randomly distributed).  
<br />
<br />Here is the output from my program searching for values of m for which the above condition is true:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">-- as expected m=1 <br />-- as expected m=2 <br />-- as expected m=4 <br />-- as expected m=8 <br />-- as expected m=10 <br />-- as expected m=20 <br />-- as expected m=40 <br />-- as expected m=80 <br />m=C0 <br />-- as expected m=100 <br />-- as expected m=200 <br />-- as expected m=400 <br />m=600&nbsp; &nbsp; m=700 <br />-- as expected m=800 <br />m=A00&nbsp; &nbsp; m=B00&nbsp; &nbsp; <br />-- as expected m=1000 <br />m=1100 <br />-- as expected m=2000 <br />m=3000 <br />-- as expected m=4000 <br />m=5000&nbsp; &nbsp; m=6000&nbsp; &nbsp; m=7000 <br />-- as expected m=8000 <br />m=9000&nbsp; &nbsp; m=A000&nbsp; &nbsp; m=B000&nbsp; &nbsp; m=C000&nbsp; &nbsp; m=D000&nbsp; &nbsp; m=E000&nbsp; &nbsp; m=F000 <br />-- as expected m=10000 <br />m=10100&nbsp; &nbsp; m=10C00&nbsp; &nbsp; m=10D00&nbsp; &nbsp; m=10E00&nbsp; &nbsp; m=10F00&nbsp; &nbsp; m=11000&nbsp; &nbsp; m=11100&nbsp; &nbsp; m=11C00&nbsp; &nbsp; m=11D00&nbsp; &nbsp; m=11E00&nbsp; &nbsp; m=11F00&nbsp; &nbsp; m=12000&nbsp; &nbsp; m=12E00&nbsp; &nbsp; m=12F00&nbsp; &nbsp; m=13000&nbsp; &nbsp; m=1BC00&nbsp; &nbsp; m=1BD00&nbsp; &nbsp; m=1BE00&nbsp; &nbsp; m=1BF00&nbsp; &nbsp; m=1C000&nbsp; &nbsp; m=1C100&nbsp; &nbsp; m=1FC00&nbsp; &nbsp; m=1FD00&nbsp; &nbsp; m=1FE00&nbsp; &nbsp; m=1FF00 <br />-- as expected m=20000 <br />m=20100&nbsp; &nbsp; m=20C00&nbsp; &nbsp; m=20D00&nbsp; &nbsp; m=20E00&nbsp; &nbsp; m=20F00&nbsp; &nbsp; m=21000&nbsp; &nbsp; m=21100&nbsp; &nbsp; m=21C00&nbsp; &nbsp; m=21D00&nbsp; &nbsp; m=21E00&nbsp; &nbsp; m=21F00&nbsp; &nbsp; m=22000&nbsp; &nbsp; m=22E00&nbsp; &nbsp; m=22F00&nbsp; &nbsp; m=23000&nbsp; &nbsp; m=30000&nbsp; &nbsp; m=30100&nbsp; &nbsp; m=31000&nbsp; &nbsp; m=31100&nbsp; &nbsp; m=32000&nbsp; &nbsp; m=33000&nbsp; &nbsp; m=35000&nbsp; &nbsp; m=36000&nbsp; &nbsp; m=39000&nbsp; &nbsp; m=3A000&nbsp; &nbsp; m=3E000&nbsp; &nbsp; <br />-- as expected m=40000 <br />m=40100&nbsp; &nbsp; m=40C00&nbsp; &nbsp; m=40D00&nbsp; &nbsp; m=40E00&nbsp; &nbsp; m=40F00&nbsp; &nbsp; m=41000&nbsp; &nbsp; m=41100&nbsp; &nbsp; m=41C00&nbsp; &nbsp; m=41D00&nbsp; &nbsp; m=41E00&nbsp; &nbsp; m=41F00&nbsp; &nbsp; m=42000&nbsp; &nbsp; m=42E00&nbsp; &nbsp; m=42F00&nbsp; &nbsp; m=43000&nbsp; &nbsp; m=4FC00&nbsp; &nbsp; m=4FD00&nbsp; &nbsp; m=4FE00&nbsp; &nbsp; m=4FF00&nbsp; &nbsp; m=50000&nbsp; &nbsp; m=50100&nbsp; &nbsp; m=50200&nbsp; &nbsp; m=50300&nbsp; &nbsp; m=50400&nbsp; &nbsp; m=50500&nbsp; &nbsp; m=50600&nbsp; &nbsp; m=50700&nbsp; &nbsp; m=50800&nbsp; &nbsp; m=50900&nbsp; &nbsp; m=50A00&nbsp; &nbsp; m=50B00&nbsp; &nbsp; m=50C00&nbsp; &nbsp; m=50D00&nbsp; &nbsp; m=50E00&nbsp; &nbsp; m=50F00&nbsp; &nbsp; m=51000&nbsp; &nbsp; m=51100&nbsp; &nbsp; m=51200&nbsp; &nbsp; m=51300&nbsp; &nbsp; m=51400&nbsp; &nbsp; m=51500&nbsp; &nbsp; m=51600&nbsp; &nbsp; m=51700&nbsp; &nbsp; m=51800&nbsp; &nbsp; m=51900&nbsp; &nbsp; m=51A00&nbsp; &nbsp; m=51B00&nbsp; &nbsp; m=51C00&nbsp; &nbsp; m=51D00&nbsp; &nbsp; m=51E00&nbsp; &nbsp; m=51F00&nbsp; &nbsp; m=52000&nbsp; &nbsp; m=52100&nbsp; &nbsp; m=52200&nbsp; &nbsp; m=52300&nbsp; &nbsp; m=52400&nbsp; &nbsp; m=52500&nbsp; &nbsp; m=52600&nbsp; &nbsp; m=52700&nbsp; &nbsp; m=52800&nbsp; &nbsp; m=52900&nbsp; &nbsp; m=52A00&nbsp; &nbsp; m=52B00&nbsp; &nbsp; m=52C00&nbsp; &nbsp; m=52D00&nbsp; &nbsp; m=52E00&nbsp; &nbsp; m=52F00&nbsp; &nbsp; m=53000&nbsp; &nbsp; m=53100&nbsp; &nbsp; m=60000&nbsp; &nbsp; m=60100&nbsp; &nbsp; m=61000&nbsp; &nbsp; m=61100&nbsp; &nbsp; m=62000&nbsp; &nbsp; m=63000&nbsp; &nbsp; m=65000&nbsp; &nbsp; m=66000&nbsp; &nbsp; m=69000&nbsp; &nbsp; m=6A000&nbsp; &nbsp; m=6E000&nbsp; &nbsp; m=6E100&nbsp; &nbsp; m=70000&nbsp; &nbsp; m=70100&nbsp; &nbsp; m=70C00&nbsp; &nbsp; m=70D00&nbsp; &nbsp; m=70E00&nbsp; &nbsp; m=70F00&nbsp; &nbsp; m=71000&nbsp; &nbsp; m=71100&nbsp; &nbsp; m=71C00&nbsp; &nbsp; m=71D00&nbsp; &nbsp; m=71E00&nbsp; &nbsp; m=71F00&nbsp; &nbsp; m=72000&nbsp; &nbsp; m=72E00&nbsp; &nbsp; m=72F00&nbsp; &nbsp; m=73000&nbsp; &nbsp; m=7FE00&nbsp; &nbsp; m=7FF00 <br />-- as expected m=80000 <br /></div>
<br />==========
<br />
<br />If we could figure out some kind of equivalence relations that reduce the effective input set enough, it might be possible for us to get the whole input -&gt; output set.
<br />
<br />I'm trying to figure out these relations.  Maybe it's obvious and I am just not asking the right question, or maybe I'm going down a blind alley, but I haven't found them yet.
<br />
<br />
<br />EDIT: I checked and the above property also holds when counting just the high word bits.  And also with the data currently from ID0007*, and ID004DC.
<br />
<br />This ALSO works for counting through the bits you selected previously for ID004D0_inbits and ID004D0_~inbits (and for these files, no m worked accept m=2^n).
<br />
<br />What does this mean?
<br />If for a moment we assume this is true for any set of bits, that must constrain the algorithm quite a bit.  But I just can't figure out what it means yet.
<br />
<br />
<br />
<br />EDIT2: Doh! I see now, that property of the table must be true for any algorithm.  So it constrains nothing.
<br />
<br />However the cases where every single entry in the table are even are still strange.  I'll have to think about this some more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Sun Dec 02, 2007 2:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">EDIT2: Doh! I see now, that property of the table must be true for any algorithm. So it constrains nothing. </div>
<br />
<br />True. I'm sorry for not having explained it before... it could have saved you the work. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Dec 03, 2007 3:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">True. I'm sorry for not having explained it before... it could have saved you the work. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div>
<br />Well, I probably learned more by working it out myself anyway.
<br />
<br />
<br />I thought about it some more.  Please let me know if the following line of reasoning is correct.
<br />
<br />If there is a map taking any N bit input to another N bit output, and the mapping is one-to-one and therefore invertable, then if we construct the table (as above) for this, then the property that all the values in a collumn must be either all odd or all even can be said for the rows as well.  This is because the inverse map will produce a transpose of that table "matrix" and likewise must have all the values in a collumn either all odd or all even.  Therefore, creating that table using the full map, the entries must be either ALL odd or all even.
<br />
<br />Correct?
<br />
<br />
<br />Looking at the simple case of N=2, it was not possible to obtain a one-to-one map unless all the table entries were even.  However, having all the entries even was not sufficient to show that the mapping was one-to-one.  I couldn't figure out how to extend this to arbitrary N (maybe that is not possible), but currently it seems reasonable to me that this is true for arbitrary N.  Is this true for arbitrary N?
<br />
<br />Is there a simple condition on the table which shows whether it corresponds to a one-to-one mapping, or is such a condition impossible?
<br />
<br />I'm trying to get a better feel for what I can and cannot learn from this table.
<br />
<br />
<br />
<br />Anyway, back to the data.
<br />I noticed that for many of the files, looking at the first 256 entries yielded a table with all even entries.  More importantly, the inbits and ~inbits files did NOT have this property.  Similarly when looking at the full 64k entries in the files.
<br />
<br />
<br />To explore this further, I looked at every set of 256 entries from the $00000000-$0007FFFF set which held all but the lowest 8 bits constant.  Amazingly, the vast majority of these produced a table with all even entries.  As a comparison, I similarly looked at the inbits files (looking at sets which hold all but the lowest 8 varying bits constant)... NONE of these produces a table with that property.  Similarly with the ~inbits file.  However, looking at the $00000000-$FFFF0000 file, many of such sets DID have this property.
<br />
<br />Furthermore, looking at all sets which count through the 8 highest bits while holding the others to some constant... the tables were ALWAYS filled with even entries (or at least true for all data I have).
<br />
<br />Basically, looking at sets where I choose 8 bits to count through, while holding the other bits to some constant, seem to favor the bits falling within byte boundaries (or in the case of 16bits, falling within word boundaries).
<br />
<br />
<br />
<br />I don't have much knowledge of block ciphers to back this up, but my intuition leads me to ask: Is this an unbalanced Feistel block cipher which breaks the input into 4 bytes?
<br />I am much too new to this subject to be able to call upon intuition, but I figured I'd throw it out there.
<br />
<br />EDIT: Oh, and if there is any other data you would like, just let me know.  In the mean time I'm just counting higher on ID004D0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Mon Dec 03, 2007 7:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If there is a map taking any N bit input to another N bit output, and the mapping is one-to-one and therefore invertable, then if we construct the table (as above) for this, then the property that all the values in a collumn must be either all odd or all even can be said for the rows as well. This is because the inverse map will produce a transpose of that table "matrix" and likewise must have all the values in a collumn either all odd or all even. Therefore, creating that table using the full map, the entries must be either ALL odd or all even.<br /><br />Correct?<br /><br /><br />Looking at the simple case of N=2, it was not possible to obtain a one-to-one map unless all the table entries were even. However, having all the entries even was not sufficient to show that the mapping was one-to-one. I couldn't figure out how to extend this to arbitrary N (maybe that is not possible), but currently it seems reasonable to me that this is true for arbitrary N. Is this true for arbitrary N?<br /></div><br /><br />The reasoning is simpler than that. When you construct the FULL table as you are doing (without counting pairs twice), all the values will be even if the function is biyective. Suppose an arbitrary input bit A we are going to flip, and an arbitrary output bit B we are going to observe. If you only take into account output bit B, when you consider the set of all the input pairs (that will vary only in A), you can split that set in three subsets: one in which the corresponding bits for B are both 0, other in which they are both 1, and the "mixte" case (one bit 1 and one 0). The only important data to know the parity of the resulting accumulation is to know the parity of the cardinality of this third set.. and it's going to be always even. Why? Because, as the functión is biyective and N&gt;=2, you have an even number of outputs with that bit set to 1; they are contained in the second and third subsets above and, as the second one has obviously a even number of them, the third one must to have an ever number too, so his cardinality is even.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is there a simple condition on the table which shows whether it corresponds to a one-to-one mapping, or is such a condition impossible?<br /></div><br /><br />Ummm, i'm not sure on that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't have much knowledge of block ciphers to back this up, but my intuition leads me to ask: Is this an unbalanced Feistel block cipher which breaks the input into 4 bytes?<br /></div><br /><br />There is no way i can answer that question without knowing the algorithm, but i don't consider that tests as a solid proof for anything. It could be, of couse.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">EDIT: Oh, and if there is any other data you would like, just let me know. In the mean time I'm just counting higher on ID004D0.</div>
<br />
<br />I'm planning to do some programs to calculate some correlation coefficients for the changes in the ouput bits when changing a certain input bit (i could extend it to other statistics if i don't find anything meaningful in this), so i guess i'm going to be silent for some days. I expect/desire it give some light about how ouput bits are related. I'm doing this, BTW, because i consider the "'inbits' test"  haven't given the results i expected; it's still confuse.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Mon Dec 03, 2007 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Cita:<br />I don't have much knowledge of block ciphers to back this up, but my intuition leads me to ask: Is this an unbalanced Feistel block cipher which breaks the input into 4 bytes?<br /><br /><br />There is no way i can answer that question without knowing the algorithm, but i don't consider that tests as a solid proof for anything. It could be, of couse. </div>
<br />
<br />Oops, i forgot an important comment on that. You say that you have noticed a change in the behaviour at byte boundaries; well, indeed i had noticed such changes at nibble boundaries. By example, in the above table i posted, that effect is easy to see in the columns with greater deviations (look at, by example, #15 or #19). Furthermore, you can see that in that table the values for the second and third nible are all multiples of 8, while the first and fourth don't. However, i think it's soon to draw conclusions without further testing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Thu Dec 06, 2007 4:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My browser have eaten my previous mega-post on this, so here we go again... <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />-----
<br />
<br />I have done a bunch of tests these days, with very interesting results:
<br />
<br />To start with, i calculated the "mutual information" coefficients associated to the changes of every pair of output bits when changing a certain input bit (i did this using 4d0_counting and 4d0_high). In this way i obtained 32 tables 32*32 in size. By example, this is the one for input bit #5 (i calculated this using the first 2^19 values of 4d0):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 13&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 15&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 17&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 19&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 22&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 23&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 25&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 26&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 27&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 28&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 29&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 31&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />0&nbsp; &nbsp;0.9997645429&nbsp; 0.0000028971&nbsp; 0.0000861520&nbsp; 0.0007862697&nbsp; 0.0000827135&nbsp; 0.0000090180&nbsp; 0.0003529183&nbsp; 0.0000516857&nbsp; 0.0001076741&nbsp; 0.0000901297&nbsp; 0.0000965769&nbsp; 0.0000010786&nbsp; 0.0016656547&nbsp; 0.0000091737&nbsp; 0.0063078306&nbsp; 0.0000310846&nbsp; 0.0000672807&nbsp; 0.0000151065&nbsp; 0.0000203806&nbsp; 0.0008593050&nbsp; 0.0002350072&nbsp; 0.0001378198&nbsp; 0.0010710822&nbsp; 0.0000073960&nbsp; 0.0012630127&nbsp; 0.0068028028&nbsp; 0.0001059286&nbsp; 0.0000882390&nbsp; 0.0000000404&nbsp; 0.0009522783&nbsp; 0.0000008501&nbsp; 0.0000200816&nbsp; <br />1&nbsp; &nbsp;0.0000028971&nbsp; 0.9997442353&nbsp; 0.0000366685&nbsp; 0.0000346052&nbsp; 0.0000337778&nbsp; 0.0000049473&nbsp; 0.0000667434&nbsp; 0.0003308923&nbsp; 0.0002358723&nbsp; 0.0002705511&nbsp; 0.0000068551&nbsp; 0.0006940147&nbsp; 0.0000026659&nbsp; 0.0004839230&nbsp; 0.0000159014&nbsp; 0.0000682761&nbsp; 0.0001752998&nbsp; 0.0000148939&nbsp; 0.0005618459&nbsp; 0.0001742079&nbsp; 0.0000228533&nbsp; 0.0000022996&nbsp; 0.0000002546&nbsp; 0.0006176635&nbsp; 0.0000034701&nbsp; 0.0000002225&nbsp; 0.0004198415&nbsp; 0.0003313281&nbsp; 0.0000276922&nbsp; 0.0003493309&nbsp; 0.0000084574&nbsp; 0.0001877048&nbsp; <br />2&nbsp; &nbsp;0.0000861520&nbsp; 0.0000366685&nbsp; 0.9870612821&nbsp; 0.0000195388&nbsp; 0.0001559501&nbsp; 0.0000020430&nbsp; 0.0016265859&nbsp; 0.0001095001&nbsp; 0.0134199347&nbsp; 0.0005115906&nbsp; 0.0000103195&nbsp; 0.0000363630&nbsp; 0.0000678072&nbsp; 0.0000010765&nbsp; 0.0000033429&nbsp; 0.0008233630&nbsp; 0.0000635619&nbsp; 0.0000254955&nbsp; 0.0002950321&nbsp; 0.0051295702&nbsp; 0.0022945751&nbsp; 0.0000103540&nbsp; 0.0000363378&nbsp; 0.0000096727&nbsp; 0.0001492575&nbsp; 0.0000238173&nbsp; 0.0555653503&nbsp; 0.0005002582&nbsp; 0.0000589203&nbsp; 0.0000531705&nbsp; 0.0000745568&nbsp; 0.0001498085&nbsp; <br />3&nbsp; &nbsp;0.0007862697&nbsp; 0.0000346052&nbsp; 0.0000195388&nbsp; 0.9994630008&nbsp; 0.0001890807&nbsp; 0.0000111381&nbsp; 0.0002040310&nbsp; 0.0000008477&nbsp; 0.0000012251&nbsp; 0.0001090857&nbsp; 0.0007961503&nbsp; 0.0000004720&nbsp; 0.0000097485&nbsp; 0.0002572408&nbsp; 0.0004825915&nbsp; 0.0000113048&nbsp; 0.0000195823&nbsp; 0.0002817841&nbsp; 0.0007211726&nbsp; 0.0003614371&nbsp; 0.0002791173&nbsp; 0.0004670220&nbsp; 0.0011042951&nbsp; 0.0006769389&nbsp; 0.0000287403&nbsp; 0.0002119683&nbsp; 0.0000161592&nbsp; 0.0001155273&nbsp; 0.0000742511&nbsp; 0.0000461237&nbsp; 0.0000907179&nbsp; 0.0000024137&nbsp; <br />4&nbsp; &nbsp;0.0000827135&nbsp; 0.0000337778&nbsp; 0.0001559501&nbsp; 0.0001890807&nbsp; 0.9999791900&nbsp; 0.0000163566&nbsp; 0.0005610457&nbsp; 0.0003738177&nbsp; 0.0000999136&nbsp; 0.0005196710&nbsp; 0.0000000615&nbsp; 0.0000035455&nbsp; 0.0000078054&nbsp; 0.0000001453&nbsp; 0.0001874442&nbsp; 0.0000423589&nbsp; 0.0000528768&nbsp; 0.0010792436&nbsp; 0.0002193443&nbsp; 0.0002067625&nbsp; 0.0001619985&nbsp; 0.0000014412&nbsp; 0.0001202182&nbsp; 0.0004704953&nbsp; 0.0001150087&nbsp; 0.0000057509&nbsp; 0.0001305565&nbsp; 0.0002787533&nbsp; 0.0002532100&nbsp; 0.0000545008&nbsp; 0.0001925397&nbsp; 0.0003706008&nbsp; <br />5&nbsp; &nbsp;0.0000090180&nbsp; 0.0000049473&nbsp; 0.0000020430&nbsp; 0.0000111381&nbsp; 0.0000163566&nbsp; 0.9988869531&nbsp; 0.0006611086&nbsp; 0.0000150800&nbsp; 0.0000585850&nbsp; 0.0000373934&nbsp; 0.0000229448&nbsp; 0.0000165398&nbsp; 0.0201841115&nbsp; 0.0000144035&nbsp; 0.0000821121&nbsp; 0.0000456379&nbsp; 0.0000461364&nbsp; 0.0000217771&nbsp; 0.0015927820&nbsp; 0.0002736774&nbsp; 0.0007265973&nbsp; 0.0000906269&nbsp; 0.0000012645&nbsp; 0.0000037148&nbsp; 0.0000168101&nbsp; 0.0005556475&nbsp; 0.0000361174&nbsp; 0.0000181746&nbsp; 0.0001172255&nbsp; 0.0004464444&nbsp; 0.0001967304&nbsp; 0.0003409638&nbsp; <br />6&nbsp; &nbsp;0.0003529183&nbsp; 0.0000667434&nbsp; 0.0016265859&nbsp; 0.0002040310&nbsp; 0.0005610457&nbsp; 0.0006611086&nbsp; 0.9702465074&nbsp; 0.0000067080&nbsp; 0.0003814414&nbsp; 0.0007526861&nbsp; 0.0000923303&nbsp; 0.0000475131&nbsp; 0.0001501803&nbsp; 0.0000060821&nbsp; 0.0001886628&nbsp; 0.0308317908&nbsp; 0.0000105313&nbsp; 0.0000268967&nbsp; 0.0018151419&nbsp; 0.0350204524&nbsp; 0.1420945907&nbsp; 0.0000583886&nbsp; 0.0002587979&nbsp; 0.0001155084&nbsp; 0.0000003500&nbsp; 0.0000596769&nbsp; 0.0013897269&nbsp; 0.0000885851&nbsp; 0.0002036807&nbsp; 0.0016650032&nbsp; 0.0004297359&nbsp; 0.0010657586&nbsp; <br />7&nbsp; &nbsp;0.0000516857&nbsp; 0.0003308923&nbsp; 0.0001095001&nbsp; 0.0000008477&nbsp; 0.0003738177&nbsp; 0.0000150800&nbsp; 0.0000067080&nbsp; 0.9999997823&nbsp; 0.0001178637&nbsp; 0.0003537669&nbsp; 0.0000260572&nbsp; 0.0004033941&nbsp; 0.0000460778&nbsp; 0.0004355819&nbsp; 0.0000692172&nbsp; 0.0000200171&nbsp; 0.0003327664&nbsp; 0.0003783607&nbsp; 0.0000076224&nbsp; 0.0000054712&nbsp; 0.0000091871&nbsp; 0.0001234325&nbsp; 0.0001682738&nbsp; 0.0000819776&nbsp; 0.0000162932&nbsp; 0.0000174907&nbsp; 0.0001390175&nbsp; 0.0001570185&nbsp; 0.0001581300&nbsp; 0.0000523194&nbsp; 0.0000319665&nbsp; 0.0001161200&nbsp; <br />8&nbsp; &nbsp;0.0001076741&nbsp; 0.0002358723&nbsp; 0.0134199347&nbsp; 0.0000012251&nbsp; 0.0000999136&nbsp; 0.0000585850&nbsp; 0.0003814414&nbsp; 0.0001178637&nbsp; 0.9957532552&nbsp; 0.0002787871&nbsp; 0.0000175979&nbsp; 0.0001318596&nbsp; 0.0000236573&nbsp; 0.0000208690&nbsp; 0.0000023030&nbsp; 0.0001132658&nbsp; 0.0000022004&nbsp; 0.0001339752&nbsp; 0.0001457910&nbsp; 0.0015525376&nbsp; 0.0006489721&nbsp; 0.0000087726&nbsp; 0.0000060917&nbsp; 0.0000141437&nbsp; 0.0000616051&nbsp; 0.0000037847&nbsp; 0.0170506926&nbsp; 0.0000021272&nbsp; 0.0000907793&nbsp; 0.0000033833&nbsp; 0.0004655133&nbsp; 0.0335452110&nbsp; <br />9&nbsp; &nbsp;0.0000901297&nbsp; 0.0002705511&nbsp; 0.0005115906&nbsp; 0.0001090857&nbsp; 0.0005196710&nbsp; 0.0000373934&nbsp; 0.0007526861&nbsp; 0.0003537669&nbsp; 0.0002787871&nbsp; 0.9995901850&nbsp; 0.0000497420&nbsp; 0.0001299652&nbsp; 0.0000080888&nbsp; 0.0003938462&nbsp; 0.0000313622&nbsp; 0.0005372672&nbsp; 0.0006035662&nbsp; 0.0004157256&nbsp; 0.0000004237&nbsp; 0.0017167681&nbsp; 0.0010906872&nbsp; 0.0000197514&nbsp; 0.0006177476&nbsp; 0.0002392551&nbsp; 0.0001394857&nbsp; 0.0000250200&nbsp; 0.0027384720&nbsp; 0.0000907453&nbsp; 0.0004931812&nbsp; 0.0000042226&nbsp; 0.0001035922&nbsp; 0.0001072566&nbsp; <br />10&nbsp; 0.0000965769&nbsp; 0.0000068551&nbsp; 0.0000103195&nbsp; 0.0007961503&nbsp; 0.0000000615&nbsp; 0.0000229448&nbsp; 0.0000923303&nbsp; 0.0000260572&nbsp; 0.0000175979&nbsp; 0.0000497420&nbsp; 0.9999924516&nbsp; 0.0000018999&nbsp; 0.0000224274&nbsp; 0.0000076256&nbsp; 0.0009935018&nbsp; 0.0000324546&nbsp; 0.0000314409&nbsp; 0.0000010949&nbsp; 0.0000001377&nbsp; 0.0001726862&nbsp; 0.0000378242&nbsp; 0.0030212828&nbsp; 0.0002099098&nbsp; 0.0001382835&nbsp; 0.0021285041&nbsp; 0.0005514288&nbsp; 0.0000113167&nbsp; 0.0000397178&nbsp; 0.0000085358&nbsp; 0.0000314251&nbsp; 0.0000004029&nbsp; 0.0000431167&nbsp; <br />11&nbsp; 0.0000010786&nbsp; 0.0006940147&nbsp; 0.0000363630&nbsp; 0.0000004720&nbsp; 0.0000035455&nbsp; 0.0000165398&nbsp; 0.0000475131&nbsp; 0.0004033941&nbsp; 0.0001318596&nbsp; 0.0001299652&nbsp; 0.0000018999&nbsp; 0.9990452427&nbsp; 0.0000705516&nbsp; 0.0000054736&nbsp; 0.0000194801&nbsp; 0.0002071533&nbsp; 0.0001520021&nbsp; 0.0002144064&nbsp; 0.0000832730&nbsp; 0.0000125532&nbsp; 0.0000371954&nbsp; 0.0001358180&nbsp; 0.0001617396&nbsp; 0.0000379008&nbsp; 0.0000322793&nbsp; 0.0000002070&nbsp; 0.0001308607&nbsp; 0.0000170255&nbsp; 0.0001283972&nbsp; 0.0001116154&nbsp; 0.0002694487&nbsp; 0.0000289974&nbsp; <br />12&nbsp; 0.0016656547&nbsp; 0.0000026659&nbsp; 0.0000678072&nbsp; 0.0000097485&nbsp; 0.0000078054&nbsp; 0.0201841115&nbsp; 0.0001501803&nbsp; 0.0000460778&nbsp; 0.0000236573&nbsp; 0.0000080888&nbsp; 0.0000224274&nbsp; 0.0000705516&nbsp; 0.9973859075&nbsp; 0.0000101223&nbsp; 0.0017495814&nbsp; 0.0001497535&nbsp; 0.0000211440&nbsp; 0.0000232923&nbsp; 0.0004152179&nbsp; 0.0000839742&nbsp; 0.0000000180&nbsp; 0.0000004442&nbsp; 0.0001603685&nbsp; 0.0000071089&nbsp; 0.0000038470&nbsp; 0.0000012695&nbsp; 0.0001471830&nbsp; 0.0000402159&nbsp; 0.0000817224&nbsp; 0.0011980304&nbsp; 0.0000003828&nbsp; 0.0001785858&nbsp; <br />13&nbsp; 0.0000091737&nbsp; 0.0004839230&nbsp; 0.0000010765&nbsp; 0.0002572408&nbsp; 0.0000001453&nbsp; 0.0000144035&nbsp; 0.0000060821&nbsp; 0.0004355819&nbsp; 0.0000208690&nbsp; 0.0003938462&nbsp; 0.0000076256&nbsp; 0.0000054736&nbsp; 0.0000101223&nbsp; 0.9979790958&nbsp; 0.0000129736&nbsp; 0.0000015763&nbsp; 0.0004268277&nbsp; 0.0000600398&nbsp; 0.0001017549&nbsp; 0.0000183333&nbsp; 0.0000048129&nbsp; 0.0000066481&nbsp; 0.0000179632&nbsp; 0.0004842624&nbsp; 0.0000827021&nbsp; 0.0001126483&nbsp; 0.0000486415&nbsp; 0.0006513733&nbsp; 0.0001567299&nbsp; 0.0000570388&nbsp; 0.0001131347&nbsp; 0.0000300637&nbsp; <br />14&nbsp; 0.0063078306&nbsp; 0.0000159014&nbsp; 0.0000033429&nbsp; 0.0004825915&nbsp; 0.0001874442&nbsp; 0.0000821121&nbsp; 0.0001886628&nbsp; 0.0000692172&nbsp; 0.0000023030&nbsp; 0.0000313622&nbsp; 0.0009935018&nbsp; 0.0000194801&nbsp; 0.0017495814&nbsp; 0.0000129736&nbsp; 0.9996399996&nbsp; 0.0000368286&nbsp; 0.0000018242&nbsp; 0.0000064398&nbsp; 0.0000007623&nbsp; 0.0000531239&nbsp; 0.0002812618&nbsp; 0.0000045176&nbsp; 0.0032601686&nbsp; 0.0000149777&nbsp; 0.0027799415&nbsp; 0.0003639877&nbsp; 0.0000190989&nbsp; 0.0001367968&nbsp; 0.0000108452&nbsp; 0.0000450431&nbsp; 0.0000047025&nbsp; 0.0000125143&nbsp; <br />15&nbsp; 0.0000310846&nbsp; 0.0000682761&nbsp; 0.0008233630&nbsp; 0.0000113048&nbsp; 0.0000423589&nbsp; 0.0000456379&nbsp; 0.0308317908&nbsp; 0.0000200171&nbsp; 0.0001132658&nbsp; 0.0005372672&nbsp; 0.0000324546&nbsp; 0.0002071533&nbsp; 0.0001497535&nbsp; 0.0000015763&nbsp; 0.0000368286&nbsp; 0.8665145345&nbsp; 0.0000064702&nbsp; 0.0000244734&nbsp; 0.0000654705&nbsp; 0.0277372882&nbsp; 0.0081076018&nbsp; 0.0001000556&nbsp; 0.0001300358&nbsp; 0.0000023090&nbsp; 0.0000200680&nbsp; 0.0002541032&nbsp; 0.0030806861&nbsp; 0.0001106461&nbsp; 0.0000003021&nbsp; 0.0000874503&nbsp; 0.0002846561&nbsp; 0.0011708090&nbsp; <br />16&nbsp; 0.0000672807&nbsp; 0.0001752998&nbsp; 0.0000635619&nbsp; 0.0000195823&nbsp; 0.0000528768&nbsp; 0.0000461364&nbsp; 0.0000105313&nbsp; 0.0003327664&nbsp; 0.0000022004&nbsp; 0.0006035662&nbsp; 0.0000314409&nbsp; 0.0001520021&nbsp; 0.0000211440&nbsp; 0.0004268277&nbsp; 0.0000018242&nbsp; 0.0000064702&nbsp; 0.9995179858&nbsp; 0.0004148456&nbsp; 0.0000004536&nbsp; 0.0000328435&nbsp; 0.0000245311&nbsp; 0.0000400136&nbsp; 0.0000018035&nbsp; 0.0000197709&nbsp; 0.0000247934&nbsp; 0.0000134356&nbsp; 0.0001977116&nbsp; 0.0004102704&nbsp; 0.0000136684&nbsp; 0.0002949110&nbsp; 0.0002510293&nbsp; 0.0002897765&nbsp; <br />17&nbsp; 0.0000151065&nbsp; 0.0000148939&nbsp; 0.0000254955&nbsp; 0.0002817841&nbsp; 0.0010792436&nbsp; 0.0000217771&nbsp; 0.0000268967&nbsp; 0.0003783607&nbsp; 0.0001339752&nbsp; 0.0004157256&nbsp; 0.0000010949&nbsp; 0.0002144064&nbsp; 0.0000232923&nbsp; 0.0000600398&nbsp; 0.0000064398&nbsp; 0.0000244734&nbsp; 0.0004148456&nbsp; 0.9997770990&nbsp; 0.0000884236&nbsp; 0.0000300805&nbsp; 0.0000111611&nbsp; 0.0000165513&nbsp; 0.0002405965&nbsp; 0.0000491327&nbsp; 0.0000317093&nbsp; 0.0000591424&nbsp; 0.0003639623&nbsp; 0.0001588353&nbsp; 0.0001093137&nbsp; 0.0001123104&nbsp; 0.0003130631&nbsp; 0.0004018725&nbsp; <br />18&nbsp; 0.0000203806&nbsp; 0.0005618459&nbsp; 0.0002950321&nbsp; 0.0007211726&nbsp; 0.0002193443&nbsp; 0.0015927820&nbsp; 0.0018151419&nbsp; 0.0000076224&nbsp; 0.0001457910&nbsp; 0.0000004237&nbsp; 0.0000001377&nbsp; 0.0000832730&nbsp; 0.0004152179&nbsp; 0.0001017549&nbsp; 0.0000007623&nbsp; 0.0000654705&nbsp; 0.0000004536&nbsp; 0.0000884236&nbsp; 0.9861267454&nbsp; 0.0005246610&nbsp; 0.0027034518&nbsp; 0.0000608051&nbsp; 0.0000460663&nbsp; 0.0000292753&nbsp; 0.0000076131&nbsp; 0.0009853912&nbsp; 0.0012834696&nbsp; 0.0000801192&nbsp; 0.0002898192&nbsp; 0.0017737042&nbsp; 0.0006940926&nbsp; 0.0003452746&nbsp; <br />19&nbsp; 0.0008593050&nbsp; 0.0001742079&nbsp; 0.0051295702&nbsp; 0.0003614371&nbsp; 0.0002067625&nbsp; 0.0002736774&nbsp; 0.0350204524&nbsp; 0.0000054712&nbsp; 0.0015525376&nbsp; 0.0017167681&nbsp; 0.0001726862&nbsp; 0.0000125532&nbsp; 0.0000839742&nbsp; 0.0000183333&nbsp; 0.0000531239&nbsp; 0.0277372882&nbsp; 0.0000328435&nbsp; 0.0000300805&nbsp; 0.0005246610&nbsp; 0.9346173974&nbsp; 0.0241224316&nbsp; 0.0000914953&nbsp; 0.0003991995&nbsp; 0.0000066001&nbsp; 0.0000070510&nbsp; 0.0000097629&nbsp; 0.0014680812&nbsp; 0.0000097260&nbsp; 0.0000991828&nbsp; 0.0002827922&nbsp; 0.0005787489&nbsp; 0.0019591352&nbsp; <br />20&nbsp; 0.0002350072&nbsp; 0.0000228533&nbsp; 0.0022945751&nbsp; 0.0002791173&nbsp; 0.0001619985&nbsp; 0.0007265973&nbsp; 0.1420945907&nbsp; 0.0000091871&nbsp; 0.0006489721&nbsp; 0.0010906872&nbsp; 0.0000378242&nbsp; 0.0000371954&nbsp; 0.0000000180&nbsp; 0.0000048129&nbsp; 0.0002812618&nbsp; 0.0081076018&nbsp; 0.0000245311&nbsp; 0.0000111611&nbsp; 0.0027034518&nbsp; 0.0241224316&nbsp; 0.9634569230&nbsp; 0.0000391286&nbsp; 0.0004942340&nbsp; 0.0001905673&nbsp; 0.0000167180&nbsp; 0.0000093321&nbsp; 0.0016520883&nbsp; 0.0000651781&nbsp; 0.0002922116&nbsp; 0.0021588310&nbsp; 0.0008480154&nbsp; 0.0010695177&nbsp; <br />21&nbsp; 0.0001378198&nbsp; 0.0000022996&nbsp; 0.0000103540&nbsp; 0.0004670220&nbsp; 0.0000014412&nbsp; 0.0000906269&nbsp; 0.0000583886&nbsp; 0.0001234325&nbsp; 0.0000087726&nbsp; 0.0000197514&nbsp; 0.0030212828&nbsp; 0.0001358180&nbsp; 0.0000004442&nbsp; 0.0000066481&nbsp; 0.0000045176&nbsp; 0.0001000556&nbsp; 0.0000400136&nbsp; 0.0000165513&nbsp; 0.0000608051&nbsp; 0.0000914953&nbsp; 0.0000391286&nbsp; 0.9994855864&nbsp; 0.0001424515&nbsp; 0.0000160601&nbsp; 0.0001748914&nbsp; 0.0000527605&nbsp; 0.0000034949&nbsp; 0.0000362645&nbsp; 0.0005398152&nbsp; 0.0000071243&nbsp; 0.0001301003&nbsp; 0.0000863648&nbsp; <br />22&nbsp; 0.0010710822&nbsp; 0.0000002546&nbsp; 0.0000363378&nbsp; 0.0011042951&nbsp; 0.0001202182&nbsp; 0.0000012645&nbsp; 0.0002587979&nbsp; 0.0001682738&nbsp; 0.0000060917&nbsp; 0.0006177476&nbsp; 0.0002099098&nbsp; 0.0001617396&nbsp; 0.0001603685&nbsp; 0.0000179632&nbsp; 0.0032601686&nbsp; 0.0001300358&nbsp; 0.0000018035&nbsp; 0.0002405965&nbsp; 0.0000460663&nbsp; 0.0003991995&nbsp; 0.0004942340&nbsp; 0.0001424515&nbsp; 0.9997019954&nbsp; 0.0000004808&nbsp; 0.0004146874&nbsp; 0.0033020250&nbsp; 0.0000406768&nbsp; 0.0002764170&nbsp; 0.0001008482&nbsp; 0.0000159407&nbsp; 0.0000140777&nbsp; 0.0001532489&nbsp; <br />23&nbsp; 0.0000073960&nbsp; 0.0006176635&nbsp; 0.0000096727&nbsp; 0.0006769389&nbsp; 0.0004704953&nbsp; 0.0000037148&nbsp; 0.0001155084&nbsp; 0.0000819776&nbsp; 0.0000141437&nbsp; 0.0002392551&nbsp; 0.0001382835&nbsp; 0.0000379008&nbsp; 0.0000071089&nbsp; 0.0004842624&nbsp; 0.0000149777&nbsp; 0.0000023090&nbsp; 0.0000197709&nbsp; 0.0000491327&nbsp; 0.0000292753&nbsp; 0.0000066001&nbsp; 0.0001905673&nbsp; 0.0000160601&nbsp; 0.0000004808&nbsp; 0.9998293435&nbsp; 0.0000600727&nbsp; 0.0000687058&nbsp; 0.0000070053&nbsp; 0.0002449234&nbsp; 0.0000018472&nbsp; 0.0001175796&nbsp; 0.0003741737&nbsp; 0.0000726422&nbsp; <br />24&nbsp; 0.0012630127&nbsp; 0.0000034701&nbsp; 0.0001492575&nbsp; 0.0000287403&nbsp; 0.0001150087&nbsp; 0.0000168101&nbsp; 0.0000003500&nbsp; 0.0000162932&nbsp; 0.0000616051&nbsp; 0.0001394857&nbsp; 0.0021285041&nbsp; 0.0000322793&nbsp; 0.0000038470&nbsp; 0.0000827021&nbsp; 0.0027799415&nbsp; 0.0000200680&nbsp; 0.0000247934&nbsp; 0.0000317093&nbsp; 0.0000076131&nbsp; 0.0000070510&nbsp; 0.0000167180&nbsp; 0.0001748914&nbsp; 0.0004146874&nbsp; 0.0000600727&nbsp; 0.9998162334&nbsp; 0.0009215629&nbsp; 0.0001251104&nbsp; 0.0000170010&nbsp; 0.0000000535&nbsp; 0.0000050148&nbsp; 0.0000074718&nbsp; 0.0001009514&nbsp; <br />25&nbsp; 0.0068028028&nbsp; 0.0000002225&nbsp; 0.0000238173&nbsp; 0.0002119683&nbsp; 0.0000057509&nbsp; 0.0005556475&nbsp; 0.0000596769&nbsp; 0.0000174907&nbsp; 0.0000037847&nbsp; 0.0000250200&nbsp; 0.0005514288&nbsp; 0.0000002070&nbsp; 0.0000012695&nbsp; 0.0001126483&nbsp; 0.0003639877&nbsp; 0.0002541032&nbsp; 0.0000134356&nbsp; 0.0000591424&nbsp; 0.0009853912&nbsp; 0.0000097629&nbsp; 0.0000093321&nbsp; 0.0000527605&nbsp; 0.0033020250&nbsp; 0.0000687058&nbsp; 0.0009215629&nbsp; 0.9999488238&nbsp; 0.0000265109&nbsp; 0.0000000876&nbsp; 0.0000055255&nbsp; 0.0006639008&nbsp; 0.0001049163&nbsp; 0.0000251697&nbsp; <br />26&nbsp; 0.0001059286&nbsp; 0.0004198415&nbsp; 0.0555653503&nbsp; 0.0000161592&nbsp; 0.0001305565&nbsp; 0.0000361174&nbsp; 0.0013897269&nbsp; 0.0001390175&nbsp; 0.0170506926&nbsp; 0.0027384720&nbsp; 0.0000113167&nbsp; 0.0001308607&nbsp; 0.0001471830&nbsp; 0.0000486415&nbsp; 0.0000190989&nbsp; 0.0030806861&nbsp; 0.0001977116&nbsp; 0.0003639623&nbsp; 0.0012834696&nbsp; 0.0014680812&nbsp; 0.0016520883&nbsp; 0.0000034949&nbsp; 0.0000406768&nbsp; 0.0000070053&nbsp; 0.0001251104&nbsp; 0.0000265109&nbsp; 0.9999671880&nbsp; 0.0001930671&nbsp; 0.0000005608&nbsp; 0.0000001560&nbsp; 0.0000059710&nbsp; 0.0326728657&nbsp; <br />27&nbsp; 0.0000882390&nbsp; 0.0003313281&nbsp; 0.0005002582&nbsp; 0.0001155273&nbsp; 0.0002787533&nbsp; 0.0000181746&nbsp; 0.0000885851&nbsp; 0.0001570185&nbsp; 0.0000021272&nbsp; 0.0000907453&nbsp; 0.0000397178&nbsp; 0.0000170255&nbsp; 0.0000402159&nbsp; 0.0006513733&nbsp; 0.0001367968&nbsp; 0.0001106461&nbsp; 0.0004102704&nbsp; 0.0001588353&nbsp; 0.0000801192&nbsp; 0.0000097260&nbsp; 0.0000651781&nbsp; 0.0000362645&nbsp; 0.0002764170&nbsp; 0.0002449234&nbsp; 0.0000170010&nbsp; 0.0000000876&nbsp; 0.0001930671&nbsp; 0.9963560152&nbsp; 0.0001091745&nbsp; 0.0000259911&nbsp; 0.0000701700&nbsp; 0.0003872329&nbsp; <br />28&nbsp; 0.0000000404&nbsp; 0.0000276922&nbsp; 0.0000589203&nbsp; 0.0000742511&nbsp; 0.0002532100&nbsp; 0.0001172255&nbsp; 0.0002036807&nbsp; 0.0001581300&nbsp; 0.0000907793&nbsp; 0.0004931812&nbsp; 0.0000085358&nbsp; 0.0001283972&nbsp; 0.0000817224&nbsp; 0.0001567299&nbsp; 0.0000108452&nbsp; 0.0000003021&nbsp; 0.0000136684&nbsp; 0.0001093137&nbsp; 0.0002898192&nbsp; 0.0000991828&nbsp; 0.0002922116&nbsp; 0.0005398152&nbsp; 0.0001008482&nbsp; 0.0000018472&nbsp; 0.0000000535&nbsp; 0.0000055255&nbsp; 0.0000005608&nbsp; 0.0001091745&nbsp; 0.9994891082&nbsp; 0.0000851966&nbsp; 0.0002918866&nbsp; 0.0000058692&nbsp; <br />29&nbsp; 0.0009522783&nbsp; 0.0003493309&nbsp; 0.0000531705&nbsp; 0.0000461237&nbsp; 0.0000545008&nbsp; 0.0004464444&nbsp; 0.0016650032&nbsp; 0.0000523194&nbsp; 0.0000033833&nbsp; 0.0000042226&nbsp; 0.0000314251&nbsp; 0.0001116154&nbsp; 0.0011980304&nbsp; 0.0000570388&nbsp; 0.0000450431&nbsp; 0.0000874503&nbsp; 0.0002949110&nbsp; 0.0001123104&nbsp; 0.0017737042&nbsp; 0.0002827922&nbsp; 0.0021588310&nbsp; 0.0000071243&nbsp; 0.0000159407&nbsp; 0.0001175796&nbsp; 0.0000050148&nbsp; 0.0006639008&nbsp; 0.0000001560&nbsp; 0.0000259911&nbsp; 0.0000851966&nbsp; 0.9932683818&nbsp; 0.0001439571&nbsp; 0.0000009636&nbsp; <br />30&nbsp; 0.0000008501&nbsp; 0.0000084574&nbsp; 0.0000745568&nbsp; 0.0000907179&nbsp; 0.0001925397&nbsp; 0.0001967304&nbsp; 0.0004297359&nbsp; 0.0000319665&nbsp; 0.0004655133&nbsp; 0.0001035922&nbsp; 0.0000004029&nbsp; 0.0002694487&nbsp; 0.0000003828&nbsp; 0.0001131347&nbsp; 0.0000047025&nbsp; 0.0002846561&nbsp; 0.0002510293&nbsp; 0.0003130631&nbsp; 0.0006940926&nbsp; 0.0005787489&nbsp; 0.0008480154&nbsp; 0.0001301003&nbsp; 0.0000140777&nbsp; 0.0003741737&nbsp; 0.0000074718&nbsp; 0.0001049163&nbsp; 0.0000059710&nbsp; 0.0000701700&nbsp; 0.0002918866&nbsp; 0.0001439571&nbsp; 0.9995933276&nbsp; 0.0000862113&nbsp; <br />31&nbsp; 0.0000200816&nbsp; 0.0001877048&nbsp; 0.0001498085&nbsp; 0.0000024137&nbsp; 0.0003706008&nbsp; 0.0003409638&nbsp; 0.0010657586&nbsp; 0.0001161200&nbsp; 0.0335452110&nbsp; 0.0001072566&nbsp; 0.0000431167&nbsp; 0.0000289974&nbsp; 0.0001785858&nbsp; 0.0000300637&nbsp; 0.0000125143&nbsp; 0.0011708090&nbsp; 0.0002897765&nbsp; 0.0004018725&nbsp; 0.0003452746&nbsp; 0.0019591352&nbsp; 0.0010695177&nbsp; 0.0000863648&nbsp; 0.0001532489&nbsp; 0.0000726422&nbsp; 0.0001009514&nbsp; 0.0000251697&nbsp; 0.0326728657&nbsp; 0.0003872329&nbsp; 0.0000058692&nbsp; 0.0000009636&nbsp; 0.0000862113&nbsp; 0.9966144414&nbsp; <br /></div><br /><br />When looking at the tables, it could be seen that they wer some very strong sorrelation between output bits that were no obvious with previous tests. (By example, take a look at (6,20)). I started to "swim" in those tables and, making short the story, i ended noticing that there seemed to be some 4-bits blocks showing big internal correlations. After some paper &amp; pencil work, i came to this 8 groups (presented here in no particular order):<br /><br />A = (6,15,19,20)<br />B = (3,10,21,24)<br />C = (1,7,13,23)<br />D = (2,8,26,31)<br />E = (4,9,17,30)<br />F = (5,12,18,29)<br />G = (0,14,22,25)<br />H = (11,16,27,28 )<br /><br />To contrast this fact, i did a couple of tests: i calculated both the "interaction information" and the "total correlation" for all the C(32,4) 4-bits combinations of the output bits. In the first one, when sorting the results, it could be seen that A at one extreme of the table (the most negative value), while the other ones scored, from the other extreme (the most positives values):<br />B-132º<br />C-58º<br />D-1º<br />E-80º<br />F-5º<br />G-2º<br />H-3º<br />out of a total of 35960 values.<br />The second test were more confuse (due to the fact that in that is more probable that groups with 2 or 3 bits in common give similar results) but it could be seen that F scored 1º and others were well-positioned.<br /><br />I decided then to try to find similar blocks in the input bits; the better way would be doing the same tests in a reverse table but, as we don't have that, i decided to try to find correlated input bits by looking at similarities in the "mutual information" tables. So i took the values under the main diagonal (the tables are symmetric), changed the numeric values by an ordinal indicating his ranking as sorted in that same table, putting all the ordinals in a vector (for every input bit), and calculating the Kendall's tau-a coefficient for every pairs of such vectors. I ended with this 32*32 table:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#91;,0&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,1&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,2&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,3&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,4&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,5&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,6&#93;&nbsp; &nbsp; &nbsp; &nbsp;&#91;,7&#93;&nbsp; &nbsp; &nbsp; &#91;,8&#93;&nbsp; &nbsp; &nbsp; &#91;,9&#93;&nbsp; &nbsp; &nbsp; &#91;,10&#93;&nbsp; &nbsp; &nbsp; &#91;,11&#93;&nbsp; &nbsp; &nbsp;&#91;,12&#93;&nbsp; &nbsp; &nbsp;&#91;,13&#93;&nbsp; &nbsp; &nbsp; &#91;,14&#93;&nbsp; &nbsp; &nbsp; &#91;,15&#93;&nbsp; &nbsp; &nbsp; &#91;,16&#93;&nbsp; &nbsp; &nbsp; &#91;,17&#93;&nbsp; &nbsp; &nbsp; &#91;,18&#93;&nbsp; &nbsp; &nbsp; &#91;,19&#93;&nbsp; &nbsp; &nbsp;&#91;,20&#93;&nbsp; &nbsp; &nbsp; &#91;,21&#93;&nbsp; &nbsp; &nbsp; &#91;,22&#93;&nbsp; &nbsp; &nbsp; &#91;,23&#93;&nbsp; &nbsp; &nbsp; &#91;,24&#93;&nbsp; &nbsp; &nbsp; &#91;,25&#93;&nbsp; &nbsp; &nbsp; &#91;,26&#93;&nbsp; &nbsp; &nbsp; &#91;,27&#93;&nbsp; &nbsp; &nbsp; &#91;,28&#93;&nbsp; &nbsp; &nbsp; &#91;,29&#93;&nbsp; &nbsp; &nbsp; &#91;,30&#93;&nbsp; &nbsp; &nbsp; &#91;,31&#93;<br />&nbsp;&#91;0,&#93; 1.00000000 0.15700553 0.15713587 0.16125773 0.07676768 0.09700228 0.10839035 0.1083252 0.1132942 0.11177908 0.12275985 0.1494135 0.1238840 0.14074616 0.13219289 0.08897035 0.16335939 0.10035842 0.09027370 0.1114532 0.05573476 0.09597588 0.07706093 0.05107527 0.13159008 0.05006517 0.11283805 0.13413164 0.17103291 0.13923101 0.09177256 0.05381231<br />&nbsp;&#91;1,&#93; 0.15700553 1.00000000 0.20231345 0.20884652 0.10135223 0.16062234 0.14245681 0.1593353 0.2031118 0.18569566 0.17142391 0.1366895 0.1727436 0.10224829 0.09242424 0.10342131 0.19172367 0.14941348 0.12297165 0.1223526 0.11990876 0.13822091 0.13605408 0.11176278 0.14620396 0.07096774 0.10829260 0.16415770 0.13866079 0.14485174 0.10286738 0.11362007<br />&nbsp;&#91;2,&#93; 0.15713587 0.20231345 1.00000000 0.24116975 0.14732811 0.13432714 0.10742912 0.1198762 0.1967253 0.13053112 0.20374714 0.1411535 0.1438416 0.13310523 0.13344736 0.09462366 0.17666991 0.13722710 0.19374388 0.1621701 0.06041056 0.16546105 0.10724992 0.11997393 0.11798631 0.13815574 0.13100357 0.15526229 0.14677419 0.14788204 0.09775171 0.14076246<br />&nbsp;&#91;3,&#93; 0.16125773 0.20884652 0.24116975 1.00000000 0.13033561 0.08804170 0.12031606 0.1577875 0.1785272 0.15876506 0.12249918 0.1231834 0.1438253 0.11477680 0.05197132 0.05478983 0.13449006 0.15738025 0.16577061 0.1306777 0.06313131 0.14332029 0.10762463 0.07378624 0.14726295 0.10249267 0.10684261 0.16293581 0.15532747 0.12385141 0.07043011 0.11875203<br />&nbsp;&#91;4,&#93; 0.07676768 0.10135223 0.14732811 0.13033561 1.00000000 0.21410882 0.15195502 0.1547247 0.1386771 0.14286412 0.13667318 0.2033724 0.1708374 0.16642228 0.19397198 0.15524600 0.15622352 0.11238188 0.16489084 0.1905670 0.17838058 0.18945910 0.12192896 0.14602476 0.14938089 0.19613880 0.09736070 0.10483871 0.14460737 0.15493645 0.17007168 0.18163896<br />&nbsp;&#91;5,&#93; 0.09700228 0.16062234 0.13432714 0.08804170 0.21410882 1.00000000 0.20552297 0.1789997 0.1306289 0.18906809 0.12732160 0.1397361 0.1774519 0.15107526 0.20013033 0.19268490 0.16423915 0.14802867 0.11581948 0.1732323 0.18877484 0.13748777 0.11326165 0.18897034 0.10966112 0.11239817 0.08435972 0.13735744 0.13825350 0.10573477 0.14599217 0.16577061<br />&nbsp;&#91;6,&#93; 0.10839035 0.14245681 0.10742912 0.12031606 0.15195502 0.20552297 1.00000000 0.1789834 0.1363473 0.12098403 0.15210165 0.1979146 0.1670740 0.09397198 0.09056696 0.15695666 0.14711632 0.16247962 0.13535354 0.1592701 0.14017595 0.16226783 0.14670902 0.16845877 0.12798956 0.10342131 0.10281850 0.10319322 0.12025089 0.17811990 0.09977191 0.13108504<br />&nbsp;&#91;7,&#93; 0.10832518 0.15933529 0.11987618 0.15778755 0.15472466 0.17899966 0.17898338 1.0000000 0.1819648 0.18302378 0.15076572 0.1856305 0.1938905 0.14086021 0.12533398 0.12811990 0.16115998 0.15175952 0.10009775 0.1681655 0.12899967 0.16265884 0.14618768 0.23942651 0.10980775 0.15112413 0.18760182 0.22766373 0.10105897 0.13615184 0.13822091 0.14786574<br />&nbsp;&#91;8,&#93; 0.11329423 0.20311175 0.19672531 0.17852721 0.13867709 0.13062887 0.13634734 0.1819648 1.0000000 0.23957314 0.17968392 0.1757413 0.1977843 0.12627891 0.14219615 0.16632453 0.16857281 0.15122189 0.15681003 0.1336429 0.13846529 0.13774845 0.12473118 0.10092863 0.14830562 0.12399804 0.14881068 0.21871944 0.14151189 0.18022156 0.13064516 0.13227434<br />&nbsp;&#91;9,&#93; 0.11177908 0.18569566 0.13053112 0.15876506 0.14286412 0.18906809 0.12098403 0.1830238 0.2395731 1.00000000 0.18937764 0.1696970 0.1267351 0.12173346 0.13794395 0.11736722 0.13499510 0.14706744 0.09250570 0.1715868 0.11101335 0.14740957 0.09985337 0.12098403 0.16217008 0.13489735 0.12455197 0.14721407 0.17795698 0.12113065 0.16373411 0.13424568<br />&#91;10,&#93; 0.12275985 0.17142391 0.20374714 0.12249918 0.13667318 0.12732160 0.15210165 0.1507657 0.1796839 0.18937764 1.00000000 0.1548061 0.1634246 0.16115998 0.10526229 0.13554904 0.18041706 0.14980449 0.14271750 0.1842294 0.11899641 0.19172367 0.17642553 0.21678071 0.11111110 0.06601498 0.07310198 0.14177255 0.14957640 0.13116650 0.14030628 0.12877159<br />&#91;11,&#93; 0.14941348 0.13668947 0.14115347 0.12318344 0.20337242 0.13973607 0.19791462 0.1856305 0.1757413 0.16969696 0.15480612 1.0000000 0.1569404 0.12329748 0.16759530 0.17774519 0.14578038 0.15935157 0.10938416 0.1341479 0.13388726 0.18755294 0.11930596 0.16236559 0.18015639 0.16432062 0.15208536 0.15118931 0.10848811 0.13703160 0.13277940 0.12088627<br />&#91;12,&#93; 0.12388399 0.17274356 0.14384164 0.14382534 0.17083740 0.17745194 0.16707397 0.1938905 0.1977843 0.12673509 0.16342457 0.1569404 1.0000000 0.20522971 0.12218963 0.19551970 0.16997392 0.13756923 0.17440534 0.1596122 0.18730856 0.14840338 0.21368523 0.13380580 0.12970023 0.11422287 0.17367220 0.16772564 0.10270446 0.14160964 0.12728901 0.15521342<br />&#91;13,&#93; 0.14074616 0.10224829 0.13310523 0.11477680 0.16642228 0.15107526 0.09397198 0.1408602 0.1262789 0.12173346 0.16115998 0.1232975 0.2052297 1.00000000 0.13931248 0.11697621 0.18794395 0.14279895 0.09420006 0.1509286 0.17943954 0.17315085 0.10226458 0.11362007 0.12007168 0.11257738 0.07697947 0.12453567 0.17082110 0.15188986 0.13796024 0.16474421<br />&#91;14,&#93; 0.13219289 0.09242424 0.13344736 0.05197132 0.19397198 0.20013033 0.09056696 0.1253340 0.1421961 0.13794395 0.10526229 0.1675953 0.1221896 0.13931248 1.00000000 0.30825999 0.09434669 0.09768654 0.13243727 0.1681166 0.20910719 0.11679700 0.11264255 0.13755295 0.07000651 0.06150211 0.05620723 0.07420984 0.08442489 0.06096448 0.10043988 0.15518083<br />&#91;15,&#93; 0.08897035 0.10342131 0.09462366 0.05478983 0.15524600 0.19268490 0.15695666 0.1281199 0.1663245 0.11736722 0.13554904 0.1777452 0.1955197 0.11697621 0.30825999 1.00000000 0.13290973 0.11979472 0.15105897 0.1293581 0.22525251 0.13222547 0.14996742 0.19276637 0.10791788 0.12029976 0.10773867 0.07083740 0.11627565 0.12461714 0.12091886 0.15962854<br />&#91;16,&#93; 0.16335939 0.19172367 0.17666991 0.13449006 0.15622352 0.16423915 0.14711632 0.1611600 0.1685728 0.13499510 0.18041706 0.1457804 0.1699739 0.18794395 0.09434669 0.13290973 1.00000000 0.13175301 0.23496252 0.2269469 0.10234604 0.16031280 0.10900944 0.19354838 0.14493319 0.12359074 0.21797001 0.16995764 0.17137504 0.15117301 0.10615835 0.15213424<br />&#91;17,&#93; 0.10035842 0.14941348 0.13722710 0.15738025 0.11238188 0.14802867 0.16247962 0.1517595 0.1512219 0.14706744 0.14980449 0.1593516 0.1375692 0.14279895 0.09768654 0.11979472 0.13175301 1.00000000 0.13840012 0.2070870 0.15778755 0.11210492 0.08488107 0.14035515 0.15703812 0.10024437 0.12743564 0.14012708 0.11847507 0.11124144 0.12135874 0.13162267<br />&#91;18,&#93; 0.09027370 0.12297165 0.19374388 0.16577061 0.16489084 0.11581948 0.13535354 0.1000977 0.1568100 0.09250570 0.14271750 0.1093842 0.1744053 0.09420006 0.13243727 0.15105897 0.23496252 0.13840012 1.00000000 0.1727924 0.11212121 0.15988921 0.11233300 0.11192571 0.11459758 0.10032584 0.11956663 0.14522645 0.10721733 0.15658194 0.08559791 0.11010101<br />&#91;19,&#93; 0.11145324 0.12235256 0.16217008 0.13067774 0.19056696 0.17323232 0.15927011 0.1681655 0.1336429 0.17158683 0.18422939 0.1341479 0.1596122 0.15092863 0.16811664 0.12935810 0.22694688 0.20708700 0.17279243 1.0000000 0.12697947 0.16780710 0.14322254 0.17139132 0.16800261 0.14920169 0.13198109 0.19524275 0.15785271 0.14954382 0.13988270 0.12870641<br />&#91;20,&#93; 0.05573476 0.11990876 0.06041056 0.06313131 0.17838058 0.18877484 0.14017595 0.1289997 0.1384653 0.11101335 0.11899641 0.1338873 0.1873086 0.17943954 0.20910719 0.22525251 0.10234604 0.15778755 0.11212121 0.1269795 1.00000000 0.17891821 0.12409579 0.20026067 0.11932225 0.14705116 0.04332030 0.07002281 0.14511241 0.19030628 0.24434668 0.22619745<br />&#91;21,&#93; 0.09597588 0.13822091 0.16546105 0.14332029 0.18945910 0.13748777 0.16226783 0.1626588 0.1377485 0.14740957 0.19172367 0.1875529 0.1484034 0.17315085 0.11679700 0.13222547 0.16031280 0.11210492 0.15988921 0.1678071 0.17891821 1.00000000 0.24260345 0.18898663 0.13323557 0.14773542 0.14048550 0.10374714 0.19310850 0.26186052 0.17054415 0.22407949<br />&#91;22,&#93; 0.07706093 0.13605408 0.10724992 0.10762463 0.12192896 0.11326165 0.14670902 0.1461877 0.1247312 0.09985337 0.17642553 0.1193060 0.2136852 0.10226458 0.11264255 0.14996742 0.10900944 0.08488107 0.11233300 0.1432225 0.12409579 0.24260345 1.00000000 0.24325512 0.13624959 0.08737373 0.11482567 0.14351580 0.12847833 0.15382861 0.12435646 0.13334961<br />&#91;23,&#93; 0.05107527 0.11176278 0.11997393 0.07378624 0.14602476 0.18897034 0.16845877 0.2394265 0.1009286 0.12098403 0.21678071 0.1623656 0.1338058 0.11362007 0.13755295 0.19276637 0.19354838 0.14035515 0.11192571 0.1713913 0.20026067 0.18898663 0.24325512 1.00000000 0.11238188 0.12991202 0.13550016 0.16572173 0.11526556 0.14055066 0.09201694 0.15780383<br />&#91;24,&#93; 0.13159008 0.14620396 0.11798631 0.14726295 0.14938089 0.10966112 0.12798956 0.1098078 0.1483056 0.16217008 0.11111110 0.1801564 0.1297002 0.12007168 0.07000651 0.10791788 0.14493319 0.15703812 0.11459758 0.1680026 0.11932225 0.13323557 0.13624959 0.11238188 1.00000000 0.31508633 0.24022482 0.30263928 0.13833496 0.15586510 0.09986966 0.16155098<br />&#91;25,&#93; 0.05006517 0.07096774 0.13815574 0.10249267 0.19613880 0.11239817 0.10342131 0.1511241 0.1239980 0.13489735 0.06601498 0.1643206 0.1142229 0.11257738 0.06150211 0.12029976 0.12359074 0.10024437 0.10032584 0.1492017 0.14705116 0.14773542 0.08737373 0.12991202 0.31508633 1.00000000 0.18264906 0.24092537 0.11507005 0.11871945 0.13105245 0.15979145<br />&#91;26,&#93; 0.11283805 0.10829260 0.13100357 0.10684261 0.09736070 0.08435972 0.10281850 0.1876018 0.1488107 0.12455197 0.07310198 0.1520854 0.1736722 0.07697947 0.05620723 0.10773867 0.21797001 0.12743564 0.11956663 0.1319811 0.04332030 0.14048550 0.11482567 0.13550016 0.24022482 0.18264906 1.00000000 0.24061583 0.03346367 0.10492016 0.04035516 0.08212773<br />&#91;27,&#93; 0.13413164 0.16415770 0.15526229 0.16293581 0.10483871 0.13735744 0.10319322 0.2276637 0.2187194 0.14721407 0.14177255 0.1511893 0.1677256 0.12453567 0.07420984 0.07083740 0.16995764 0.14012708 0.14522645 0.1952427 0.07002281 0.10374714 0.14351580 0.16572173 0.30263928 0.24092537 0.24061583 1.00000000 0.12943955 0.16013359 0.05917237 0.11270772<br />&#91;28,&#93; 0.17103291 0.13866079 0.14677419 0.15532747 0.14460737 0.13825350 0.12025089 0.1010590 0.1415119 0.17795698 0.14957640 0.1084881 0.1027045 0.17082110 0.08442489 0.11627565 0.17137504 0.11847507 0.10721733 0.1578527 0.14511241 0.19310850 0.12847833 0.11526556 0.13833496 0.11507005 0.03346367 0.12943955 1.00000000 0.29563373 0.21484196 0.20812967<br />&#91;29,&#93; 0.13923101 0.14485174 0.14788204 0.12385141 0.15493645 0.10573477 0.17811990 0.1361518 0.1802216 0.12113065 0.13116650 0.1370316 0.1416096 0.15188986 0.06096448 0.12461714 0.15117301 0.11124144 0.15658194 0.1495438 0.19030628 0.26186052 0.15382861 0.14055066 0.15586510 0.11871945 0.10492016 0.16013359 0.29563373 1.00000000 0.17166829 0.19594330<br />&#91;30,&#93; 0.09177256 0.10286738 0.09775171 0.07043011 0.17007168 0.14599217 0.09977191 0.1382209 0.1306452 0.16373411 0.14030628 0.1327794 0.1272890 0.13796024 0.10043988 0.12091886 0.10615835 0.12135874 0.08559791 0.1398827 0.24434668 0.17054415 0.12435646 0.09201694 0.09986966 0.13105245 0.04035516 0.05917237 0.21484196 0.17166829 1.00000000 0.23985010<br />&#91;31,&#93; 0.05381231 0.11362007 0.14076246 0.11875203 0.18163896 0.16577061 0.13108504 0.1478657 0.1322743 0.13424568 0.12877159 0.1208863 0.1552134 0.16474421 0.15518083 0.15962854 0.15213424 0.13162267 0.11010101 0.1287064 0.22619745 0.22407949 0.13334961 0.15780383 0.16155098 0.15979145 0.08212773 0.11270772 0.20812967 0.19594330 0.23985010 1.00000000<br /></div><br /><br />This table is less clear than the others, as there are no such big differences between values but, when taking a deeper look, a couple of facts can be seen:<br /><br />1) when you take the higher values in the table, yo can see that there are more of them relating the 16 higher bit between them that with the lower half. That, of couse, could be an artifact due to the fact that i'm using the _counting and _high files to draw data.<br />2) It's clear that there is a trend for the higher values to be near the main diagonal relating consecutive numbers; indeed, it can be seen that taking consecutive 4-bits starting with 4*n, the values are clearly higher than the medium, in accordance with the "nibbles" separation i had observed previously in the changes in the input vs. changes in the output tables.<br /><br />To continue on that line, i thought to calculate a 8*32 table by calculating the "interaction information" coefficients for the 8 4-bits grups above (A to H) for every of the 32 input bits. To do so, i have previously calculated the entropy of the joint distributions for all the combinations of no more than 4 output bits. I have been unable to do it as i the program that calculated the entropies had a bug, that that same fact have given interesting information...<br /><br />The problem was than, for some of those output bits combinations, changing certain input bits had NEVER produced a certain change in the output bits. Concretely, i have seen that happen for 4 4-bits groups (they are the A,B,E and G groups above) out of the &gt;40.000 cases. Furthermore, when taking a look at what input bits were generating the problem, it can be seen that, together with some isolated ones, there are a couple of "nibbles":<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#123;<br />&#123;0x00188040, 3.93514604824073&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, 3.88995166986576&#125;,<br />&#123;0x00188040, 3.88414073371963&#125;,<br />&#123;0x00188040, 3.13146358957585&#125;,<br />&#123;0x00188040, 3.08302923662126&#125;,<br />&#123;0x00188040, 3.28706882689387&#125;,<br />&#123;0x00188040, 3.24797905064839&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, 3.9196563223079&#125;,<br />&#123;0x00188040, 3.91772924666932&#125;,<br />&#123;0x00188040, 3.39580371893617&#125;,<br />&#123;0x00188040, 3.73496585924111&#125;,<br />&#123;0x00188040, 3.61419514079653&#125;,<br />&#123;0x00188040, 3.67541050734758&#125;,<br />&#123;0x00188040, 3.78428767053516&#125;,<br />&#123;0x00188040, 3.78561575113954&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, 3.48486106934296&#125;,<br />&#123;0x00188040, 3.64684950629895&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, nan&#125;,<br />&#123;0x00188040, 3.91419251661466&#125;,<br />&#123;0x00188040, 3.86076264835895&#125;,<br />&#123;0x00188040, 3.89316022233054&#125;,<br />&#123;0x00188040, 3.79953063954677&#125;,<br />&#125;,<br />&#123;<br />&#123;0x01200408, 3.72090392490931&#125;,<br />&#123;0x01200408, 3.85853163927862&#125;,<br />&#123;0x01200408, 3.51134060784678&#125;,<br />&#123;0x01200408, 3.86051895596373&#125;,<br />&#123;0x01200408, 3.96939441431337&#125;,<br />&#123;0x01200408, 3.97912644946009&#125;,<br />&#123;0x01200408, 3.98060898930058&#125;,<br />&#123;0x01200408, 3.88787606160327&#125;,<br />&#123;0x01200408, nan&#125;,<br />&#123;0x01200408, nan&#125;,<br />&#123;0x01200408, nan&#125;,<br />&#123;0x01200408, nan&#125;,<br />&#123;0x01200408, 3.93709673193527&#125;,<br />&#123;0x01200408, 3.95074120131863&#125;,<br />&#123;0x01200408, 3.95700488553458&#125;,<br />&#123;0x01200408, 3.98171136024728&#125;,<br />&#123;0x01200408, 3.81977790246401&#125;,<br />&#123;0x01200408, 3.84033009889475&#125;,<br />&#123;0x01200408, 3.66786223226477&#125;,<br />&#123;0x01200408, 3.70888492595415&#125;,<br />&#123;0x01200408, 3.9739743186735&#125;,<br />&#123;0x01200408, 3.9764719066756&#125;,<br />&#123;0x01200408, 3.94131417226678&#125;,<br />&#123;0x01200408, 3.98045312722963&#125;,<br />&#123;0x01200408, 3.58198450245132&#125;,<br />&#123;0x01200408, 3.74729315217088&#125;,<br />&#123;0x01200408, 3.84139371411445&#125;,<br />&#123;0x01200408, 3.77115995505508&#125;,<br />&#123;0x01200408, 3.91276021820774&#125;,<br />&#123;0x01200408, 3.95495244535009&#125;,<br />&#123;0x01200408, 3.95870723457474&#125;,<br />&#123;0x01200408, 3.96947834728075&#125;,<br />&#125;,<br />&#123;<br />&#123;0x02404001, 3.79067664306251&#125;,<br />&#123;0x02404001, 3.93839517675905&#125;,<br />&#123;0x02404001, 3.7125861327318&#125;,<br />&#123;0x02404001, 3.89951485018144&#125;,<br />&#123;0x02404001, 3.94662975297432&#125;,<br />&#123;0x02404001, 3.93800133740576&#125;,<br />&#123;0x02404001, 3.97379274722376&#125;,<br />&#123;0x02404001, 3.95150389590406&#125;,<br />&#123;0x02404001, 3.90025048735873&#125;,<br />&#123;0x02404001, 3.90570762767664&#125;,<br />&#123;0x02404001, 3.90275398757394&#125;,<br />&#123;0x02404001, 3.83223284703573&#125;,<br />&#123;0x02404001, 3.9435888520807&#125;,<br />&#123;0x02404001, 3.95880133421839&#125;,<br />&#123;0x02404001, 3.8552385034448&#125;,<br />&#123;0x02404001, 3.91582743398901&#125;,<br />&#123;0x02404001, 3.68719982914072&#125;,<br />&#123;0x02404001, 3.75664022444994&#125;,<br />&#123;0x02404001, 3.45218261024688&#125;,<br />&#123;0x02404001, 3.73191695049461&#125;,<br />&#123;0x02404001, 3.9552100039267&#125;,<br />&#123;0x02404001, nan&#125;,<br />&#123;0x02404001, 3.9152865609341&#125;,<br />&#123;0x02404001, 3.97485328691073&#125;,<br />&#123;0x02404001, 3.65020964193955&#125;,<br />&#123;0x02404001, 3.832495689026&#125;,<br />&#123;0x02404001, 3.83783520594467&#125;,<br />&#123;0x02404001, 3.82725837433428&#125;,<br />&#123;0x02404001, 3.95253418621274&#125;,<br />&#123;0x02404001, 3.95871914764195&#125;,<br />&#123;0x02404001, 3.9653031480141&#125;,<br />&#123;0x02404001, 3.94355540304351&#125;,<br />&#125;,<br />&#123;<br />&#123;0x40020210, 3.82561744162343&#125;,<br />&#123;0x40020210, 3.79276338997767&#125;,<br />&#123;0x40020210, 3.76377004784857&#125;,<br />&#123;0x40020210, 3.80789342426675&#125;,<br />&#123;0x40020210, 3.93933197276095&#125;,<br />&#123;0x40020210, 3.95189536065021&#125;,<br />&#123;0x40020210, 3.93049452599738&#125;,<br />&#123;0x40020210, 3.95566742309038&#125;,<br />&#123;0x40020210, 3.5224962288756&#125;,<br />&#123;0x40020210, 3.52788978070337&#125;,<br />&#123;0x40020210, 3.75140498666498&#125;,<br />&#123;0x40020210, 3.79167609268677&#125;,<br />&#123;0x40020210, 3.89731021552621&#125;,<br />&#123;0x40020210, 3.92470917999757&#125;,<br />&#123;0x40020210, 3.77665340506297&#125;,<br />&#123;0x40020210, 3.85976324281067&#125;,<br />&#123;0x40020210, 3.81788390417652&#125;,<br />&#123;0x40020210, 3.7997395369391&#125;,<br />&#123;0x40020210, 3.88442144211858&#125;,<br />&#123;0x40020210, 3.86177143304797&#125;,<br />&#123;0x40020210, 3.83464856380669&#125;,<br />&#123;0x40020210, 3.57829886596595&#125;,<br />&#123;0x40020210, 3.81648201646433&#125;,<br />&#123;0x40020210, 3.89538403116798&#125;,<br />&#123;0x40020210, nan&#125;,<br />&#123;0x40020210, nan&#125;,<br />&#123;0x40020210, nan&#125;,<br />&#123;0x40020210, nan&#125;,<br />&#123;0x40020210, 3.65714913073693&#125;,<br />&#123;0x40020210, 3.72582575659313&#125;,<br />&#123;0x40020210, 3.61023607556007&#125;,<br />&#123;0x40020210, 3.5504644803954&#125;,<br />&#125;,<br /></div>
<br />
<br />And that's all by now. At the current point, given these results, i'm tempted to guess this could be a SP network with 8 "4 to 4" sboxes by round, by i'm not claiming it out of any doubt. What seems difficult to doubt is that those 8 4-bits blocks correspond to the output of s-boxes.
<br />
<br />I will probably try to do some tests to see if i can unveil the structure of those s-boxes. I wanna do that test of above (the 8*32 table) at some point too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Fri Dec 07, 2007 2:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, this is some great info.
<br />
<br />The permutation suggested by those nibble groupings really mixes things up.  It would take a decent amount of code to do that, I wonder why I don't see a long series of bit rotations (or whatever) in the current measurements.  Oh, actually I'm not sure if we've discussed that.  It's the only other tool I have to probe what the code is doing.  But I haven't been able to get any concrete info from it yet.
<br />
<br />Here's what I've learned from looking at the hardware
<br />=========
<br />The system:
<br />single chip
<br />has EEPROM
<br />has ROM
<br />usually runs at 1 MHz 
<br />communicates asynchronously on a normally high, bidirectional data line, 1 start bit and 4 data bits
<br />
<br />"Hardware" inspection:
<br />Decapped chip and looked at it.  It appears to be an 8bit CPU, as it has x8 SRAM and ROM (I believe 512 byte SRAM, 16kBytes ROM, 2kByte EEPROM but I am not fully confident in my counting of the bits).  No labelling to identify the CPU, and was clearly modified to have only 3 I/O lines (besides Vcc, Gnd, all other pins were not connected).  I have no idea what the third I/O line is for and is not used on the PCB.
<br />
<br />ROM is NAND ROM, with the data encoded in the diffusion layer.  Unfortunately, I have not learned to read this type of ROM directly from the silicon yet (and it would be a lot of ROM to read by hand anyway).
<br />
<br />By carefully watching the current used by the chip, I can learn something about it's operation.  I can see when it writes to EEPROM (which takes ~4.3ms/write and can write multiple bytes at once).  I can also see the current change between roughly two states of current draw (although there are finer features that are repeatable as well) while running code, and these states are always multiple of two clocks, so the main clock is probably divided by two.
<br />
<br />For example here it is waiting for the start bit on the data line:
<br />Forever repeating a 10 main clock cycle pattern (5 "instruction cycles")
<br /><img src="http://www.neviksti.com/blackbox/Recv_waiting.gif" alt="Image" />
<br />
<br />
<br />I also see the same pattern while the EEPROM is being written:
<br />(so the CPU is not halted during EEPROM write, the EEPROM is most likely self timed, and it is I/O polling for the end.)
<br /><img src="http://www.neviksti.com/blackbox/EEPROM_end.gif" alt="Image" />
<br />
<br />I have logs of the current while the chip is sending/receiving data.  It clearly bitbangs the communication as one can see that a 0-bit transmission is an extra instruction cycle longer than a 1-bit transmission (also indicating there is a jump instruction in the processing of a bit).  You can clearly see the loop in the sending code.  You can also see on the data line when the chip turns the I/O pin from an input pulled high, to an output (or vice versa).
<br />
<br />
<br />It should be possible in principle to figure out the current pattern for each instruction allowing one to read off the code being executed by the challenge algorithm.
<br />
<br />
<br />My guess for CPU core after looking at many datasheets is the ST7 from ST microelectronics.  Although I am not fully convinced.  Here's the datasheet for the instruction set: <a href="http://www.st.com/stonline/products/literature/pm/4020.pdf" class="postlink">http://www.st.com/stonline/products/literature/pm/4020.pdf</a>
<br />
<br />Here are some current measurements of it doing operations that we can probably guess what the code is after some work:
<br /><a href="http://www.neviksti.com/blackbox/TEK0000.csv" class="postlink">http://www.neviksti.com/blackbox/TEK0000.csv</a> - current while chip is sending
<br /><a href="http://www.neviksti.com/blackbox/TEK0003.csv" class="postlink">http://www.neviksti.com/blackbox/TEK0003.csv</a> - data line while chip is sending
<br />
<br /><a href="http://www.neviksti.com/blackbox/TEK0004.csv" class="postlink">http://www.neviksti.com/blackbox/TEK0004.csv</a> - current while chip is receiving
<br /><a href="http://www.neviksti.com/blackbox/TEK0007.csv" class="postlink">http://www.neviksti.com/blackbox/TEK0007.csv</a> - data line while chip is receiving
<br />
<br />I also have measurements of the current during the challenge algorithm calculation.  Unlike the chip sending/receiving code (where you can clearly see it run a loop for each bit), I had trouble seeing any obvious loop being ran in the code, so I have no idea what it is doing.  But of course, if there are too many if statements it would be trouble noticing the loop structure right away if it exists.
<br />
<br />
<br />Both a Feistel or SP network should run several rounds of the same computations.  Why don't I see clear loops?  I don't see where, but is there something in the calculations that could have a significant number of if statements (conditional jumps)?  If it just does permutation, then uses a lookup table for each s-box, I don't see where it would need to use a conditional jump except to loop for the rounds.
<br />
<br />Anyway, I just wanted to let you know we have another "probe" here to gather information from if necessary.
<br />
<br />========================
<br />
<br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">The problem was than, for some of those output bits combinations, changing certain input bits had NEVER produced a certain change in the output bits.</div>
<br />What input change -&gt; output change was forbidden?
<br />
<br />
<br />I've also doubled the "counting" dataset if you'd like some more:
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_80000.csv">http://neviksti.com/blackbox/ID004D0_80000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_90000.csv">http://neviksti.com/blackbox/ID004D0_90000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_A0000.csv">http://neviksti.com/blackbox/ID004D0_A0000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_B0000.csv">http://neviksti.com/blackbox/ID004D0_B0000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_C0000.csv">http://neviksti.com/blackbox/ID004D0_C0000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_D0000.csv">http://neviksti.com/blackbox/ID004D0_D0000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_E0000.csv">http://neviksti.com/blackbox/ID004D0_E0000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_F0000.csv">http://neviksti.com/blackbox/ID004D0_F0000.csv</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004DC_10000.csv">http://neviksti.com/blackbox/ID004DC_10000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004DC_20000.csv">http://neviksti.com/blackbox/ID004DC_20000.csv</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004DC_30000.csv">http://neviksti.com/blackbox/ID004DC_30000.csv</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Fri Dec 07, 2007 3:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the introduction; i know the principles of that kind of side-channel attacks, but i have never seen a practical case; an amazing technique. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ROM is NAND ROM, with the data encoded in the diffusion layer. Unfortunately, I have not learned to read this type of ROM directly from the silicon yet (and it would be a lot of ROM to read by hand anyway).<br /></div><br /><br />I thought on that problem (the big amount of data) back when you discussed about it in the cherryroms' forums. Couldn't that problem be addressed with image processing techniques?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The permutation suggested by those nibble groupings really mixes things up. It would take a decent amount of code to do that, I wonder why I don't see a long series of bit rotations (or whatever) in the current measurements.</div><br /><br />Because, if you want to speed up a software algorithm like that, you will probably hard-code that info into the look-up tables for the s-boxes, so you will only have to OR the data taken from the different s-boxes' tables.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">is there something in the calculations that could have a significant number of if statements (conditional jumps)?</div><br /><br />No.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What input change -&gt; output change was forbidden? </div><br />Ummm, i didn't looked at it as i wasn't interested on it in that moment, but i could obtain that info this night.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've also doubled the "counting" dataset if you'd like some more:<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_80000.csv">http://neviksti.com/blackbox/ID004D0_80000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_90000.csv">http://neviksti.com/blackbox/ID004D0_90000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_A0000.csv">http://neviksti.com/blackbox/ID004D0_A0000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_B0000.csv">http://neviksti.com/blackbox/ID004D0_B0000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_C0000.csv">http://neviksti.com/blackbox/ID004D0_C0000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_D0000.csv">http://neviksti.com/blackbox/ID004D0_D0000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_E0000.csv">http://neviksti.com/blackbox/ID004D0_E0000.csv</a><!-- m --><br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004D0_F0000.csv">http://neviksti.com/blackbox/ID004D0_F0000.csv</a><!-- m --> <br /></div>
<br />
<br />Thanks.
<br />
<br />I have done the 8*32 table i speak of above; i can not paste it here as i don't have access to it right now, but it can be seen more clearly those correlations for some nibbles. I have started to think on trying to look for 4 to 4 sboxes; given the "directionality" of data, i think obtaining that for the sboxes just before the output could be problematic, but maybe it would be simpler to do it for the sboxes in the first round (supposing there is really 4 to 4 sboxes there).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Fri Dec 07, 2007 6:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ROM is NAND ROM, with the data encoded in the diffusion layer. Unfortunately, I have not learned to read this type of ROM directly from the silicon yet (and it would be a lot of ROM to read by hand anyway).<br /></div>I thought on that problem (the big amount of data) back when you discussed about it in the cherryroms' forums. Couldn't that problem be addressed with image processing techniques?</div><br />I suppose, but I can't figure out how to stain NAND rom, so it is moot anyway (which is really frustrating because the paper I saw that got me interested in that technique had stained NAND rom... but I can't get it to work).  Also, this chip has 0.55 micron minimum feature sizes, which makes it too difficult to see with an optical microscope even if I could stain nand rom.<br /><br />There are scanning probe techniques which can measure the dopant level, and I'm willing to pay for the instrument time (I love learning new techniques), but setting up the account to do so is tricky because I need it to be separate from my research account... which is a very unusual request and caused problems when I tried to bring it up before.<br /><br />For now, we will have to consider that line of attack not accessible.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The permutation suggested by those nibble groupings really mixes things up. It would take a decent amount of code to do that, I wonder why I don't see a long series of bit rotations (or whatever) in the current measurements.</div>Because, if you want to speed up a software algorithm like that, you will probably hard-code that info into the look-up tables for the s-boxes, so you will only have to OR the data taken from the different s-boxes' tables.</div><br />Oh, so you are suggesting each nibble of the input is an index into a table holding a 32bit value (but actually only controls 4 bits), and the program OR's the 32bit number from each s-box table to form the result?<br /><br />But that would cause 8 repeated operations (same thing for each s-box), for each round.  I don't see a loop, let alone 8 repeated operations per loop.  Something doesn't seem right here.  I have no idea what is causing this mismatch, but clearly your analysis shows something special with those output groupings, and the input also seems to favor grouping the inputs on nibble boundaries.  I just don't know how to reconcile these two seemingly conflicting information sources.  I guess for now I'll ignore the current measuremetns till I have more data to go with.<br /><br /><br />At the moment I only have the current measurements from one challenge calculation (and that was very painstaking to collect, and I unfortunately no longer have access to the nice oscilloscope I used to collect that).  I can share that data if you want to see it.<br /><br />I bought a cheap oscilloscope and am trying to rig something up to let me collect the current measurements easier.  I don't know if the oscilloscope will be good enough, but it is worth a try.  If I can collect these measurements for calculating several different challenges, I can directly see if there are conditional branches or not.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">is there something in the calculations that could have a significant number of if statements (conditional jumps)?</div>No.</div><br />Hmm... that was the only idea I could come up with at the moment for why I don't see loops.  Maybe there is another option I'm over looking.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">I have started to think on trying to look for 4 to 4 sboxes; given the "directionality" of data, i think obtaining that for the sboxes just before the output could be problematic, but maybe it would be simpler to do it for the sboxes in the first round (supposing there is really 4 to 4 sboxes there).</div>
<br />Since we have an idea of what the permutation is now, is there some way we can use this to deduce the number of rounds?
<br />
<br />For example, the permutation makes it such that it can take a couple rounds for changing one input bit to affect a particular nibble of the round's output, while others will be affected immediately in the first round.  Maybe we can choose the inputs such that for changing 4 input bits, a particular s-box in the 4th round could only see 8 different values at most.  If we do this for many fix values of the remaining bits, and for each set only see 8 different values on that output nibble... it would be a good indicator we only have 4 rounds.
<br />
<br />I haven't worked it out yet, so let me know if this is obviously a dead end.  Maybe the "impossible input-&gt;output change" you found could be the perfect clue to determine the number of rounds given the bit permutation you found.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Fri Dec 07, 2007 9:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Since we have an idea of what the permutation is now, is there some way we can use this to deduce the number of rounds?<br /></div><br /><br />Based on the previous tests (the simulatios to match the "multiple of 4 behaviour), if this is a SP network with 8 sbox per round, the number of rounds should be 4.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For example, the permutation makes it such that it can take a couple rounds for changing one input bit to affect a particular nibble of the round's output, while others will be affected immediately in the first round. Maybe we can choose the inputs such that for changing 4 input bits, a particular s-box in the 4th round could only see 8 different values at most. If we do this for many fix values of the remaining bits, and for each set only see 8 different values on that output nibble... it would be a good indicator we only have 4 rounds. </div><br /><br />Right now i'm trying to directly attack the s-boxes; i don't feel the need for testing if the number of rounds is exactly 4. I used something similar to that idea with the CPS-2, but in that case (a Feistel network) finding which changes would never be present allowed us to reconstruct the feistel function; in this case i don't have a direct interest on that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Maybe the "impossible input-&gt;output change" you found could be the perfect clue to determine the number of rounds given the bit permutation you found.</div>
<br />
<br />Ummm, i guess i should have explained this better; that "impossible" output change was only see in a 2^16 test; i doubt it be present on arbitrary data (that would only occur if the s-box were defective, but that isn't happening, as then that behaviour would be occuring unregarding the input bit changed).
<br />
<br />Right now i'm considering two attacks: one for the s-boxes of the last round and other one for the s-boxes of the first round. The first one rely on the fact that you should find better "entropy" characteristics when undoing the last round; as we cannot test the full 16! combinations, i'm looking for not the full reverse 4 to 4 function, but looking for "individual" input bits for that s-box (4 to 1 function) and then trying to look for the four that conform the s-box. This attack is problematic due to several issues: 
<br />1) It's undoable to do exhaustive search, so you have to limit the search to the values with lower entropies.
<br />
<br />2) there is no guarantee that those 4 to 1 functions are going to be ranked high in a sorted list of entropies.
<br />
<br />3) I'm worried that the "grouping of the input data" (i'm using only 2^16 values of 4d0, and even so it need a lot of computer power) be distorting the results.
<br />
<br />Due to that, while i think this still can give good results on some s-boxes, i'm planning an alternative attack for the ones in the first round by the following method:
<br />
<br />After selecting one of the "nibbles", we take 0&lt;=A,B&lt;=15, construct a 16*16 table by doing this: for every pair A,B, calculate, for every block of output bits, the entropy of the joint distribution for those bits, use them to make a overall estimator (taking the arithmetic mean or, more probably, dropping the maximum and minimum values and promediating the medium ones) and putting that value in the table in the (A,B) position.
<br />
<br />The idea behind that is that, when a pair of inputs only differ in bits of one s-box, the number of bits changed after the first round is only dependent of the Hamming distance between the values of that S-Box for A and B. And, when that distance is smaller, you should obtain smaller entropy values for the joint distributions of the output bits. So, ideally, if the results are clear, that *could* allow us to recover that Hamming distances and to reconstruct the s-box using them. This would be, indeed, less computationally intensive than the other. I will try to put in practice this idea this night or tomorrow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Fri Dec 07, 2007 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Got it! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Before explaining what, here is the 8*32 table i was talking some post above.
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 0.002759&nbsp; 0.054025&nbsp; 0.017379&nbsp; 0.084371&nbsp; 0.000368&nbsp; 0.018240&nbsp; 0.027587&nbsp; 0.017426<br />&nbsp; 0.021997&nbsp; 0.013042&nbsp; 0.015285&nbsp; 0.038148&nbsp; 0.011803&nbsp; 0.004763&nbsp; 0.025396&nbsp; 0.001309<br />&nbsp; 0.008308&nbsp; 0.045592&nbsp; 0.001981&nbsp; 0.110289 -0.014403&nbsp; 0.039283&nbsp; 0.065825&nbsp; 0.014319<br />&nbsp; 0.018576&nbsp; 0.019335&nbsp; 0.004947&nbsp; 0.088447&nbsp; 0.000294&nbsp; 0.004712&nbsp; 0.052397&nbsp; 0.020281<br />&nbsp;-0.083864&nbsp; 0.007075&nbsp; 0.002395&nbsp; 0.017047 -0.001061&nbsp; 0.027185&nbsp; 0.020703&nbsp; 0.002347<br />&nbsp;-0.066438&nbsp; 0.000657&nbsp; 0.005135&nbsp; 0.024595&nbsp; 0.001410&nbsp; 0.018144&nbsp; 0.031623&nbsp; 0.001642<br />&nbsp;-0.093891&nbsp; 0.000819&nbsp; 0.000581&nbsp; 0.001347&nbsp; 0.001895&nbsp; 0.023131&nbsp; 0.011189&nbsp; 0.060046<br />&nbsp;-0.075162&nbsp; 0.018787&nbsp; 0.031293&nbsp; 0.000284&nbsp; 0.003748&nbsp; 0.001942&nbsp; 0.002419&nbsp; 0.063912<br />&nbsp; 0.040655&nbsp; 0.305801&nbsp; 0.096782 -0.046876 -0.029725 -0.007022&nbsp; 0.004904 -0.003331<br />&nbsp; 0.039739&nbsp; 0.306815&nbsp; 0.096751 -0.041017 -0.007142 -0.011263&nbsp; 0.009614&nbsp; 0.001851<br />&nbsp; 0.033663&nbsp; 0.294654&nbsp; 0.065188 -0.015005&nbsp; 0.014573 -0.004423&nbsp; 0.009464&nbsp; 0.050625<br />&nbsp; 0.037867&nbsp; 0.295920&nbsp; 0.080428 -0.018629&nbsp; 0.021577 -0.024959&nbsp; 0.015029&nbsp; 0.056518<br />&nbsp; 0.004149&nbsp; 0.022286&nbsp; 0.009783&nbsp; 0.081245 -0.002545&nbsp; 0.061545&nbsp; 0.001415&nbsp; 0.018583<br />&nbsp; 0.001381 -0.001074&nbsp; 0.003769&nbsp; 0.092948 -0.001258&nbsp; 0.196103&nbsp; 0.005403&nbsp; 0.015478<br />&nbsp; 0.067051 -0.000065&nbsp; 0.002630&nbsp; 0.106811&nbsp; 0.007426&nbsp; 0.025787&nbsp; 0.005702&nbsp; 0.136293<br />&nbsp; 0.028577&nbsp; 0.001362&nbsp; 0.001257&nbsp; 0.106990 -0.002417&nbsp; 0.023633&nbsp; 0.003268&nbsp; 0.061961<br />&nbsp; 0.037342&nbsp; 0.075296&nbsp; 0.069749&nbsp; 0.000772&nbsp; 0.008579&nbsp; 0.008689 -0.019932&nbsp; 0.010827<br />&nbsp; 0.057524&nbsp; 0.062318&nbsp; 0.070404&nbsp; 0.003496&nbsp; 0.003198&nbsp; 0.001010 -0.014192&nbsp; 0.004459<br />&nbsp; 0.018965&nbsp; 0.107224&nbsp; 0.024477&nbsp; 0.000001&nbsp; 0.001191&nbsp; 0.024432 -0.043189 -0.001869<br />&nbsp; 0.025044&nbsp; 0.102166&nbsp; 0.022701&nbsp; 0.002709&nbsp; 0.000569&nbsp; 0.000251 -0.030946&nbsp; 0.019030<br />&nbsp; 0.036303&nbsp; 0.004801&nbsp; 0.003768 -0.070085&nbsp; 0.025549&nbsp; 0.012400&nbsp; 0.005037&nbsp; 0.015964<br />&nbsp; 0.280917&nbsp; 0.000704&nbsp; 0.008202 -0.035654&nbsp; 0.006581&nbsp; 0.019098&nbsp; 0.030419&nbsp; 0.001154<br />&nbsp;-0.039840&nbsp; 0.007661 -0.000576 -0.016948&nbsp; 0.012749 -0.020375&nbsp; 0.004375&nbsp; 0.023700<br />&nbsp; 0.017257&nbsp; 0.001550&nbsp; 0.005218 -0.016143&nbsp; 0.009161&nbsp; 0.011897&nbsp; 0.000935&nbsp; 0.003745<br />&nbsp; 0.130265&nbsp; 0.045055&nbsp; 0.007153&nbsp; 0.001759 -0.003633&nbsp; 0.021403&nbsp; 0.053077&nbsp; 0.009075<br />&nbsp; 0.111741&nbsp; 0.066656 -0.001223&nbsp; 0.004734&nbsp; 0.008563&nbsp; 0.028366&nbsp; 0.018220&nbsp; 0.014283<br />&nbsp; 0.133445&nbsp; 0.019332&nbsp; 0.017124&nbsp; 0.019244 -0.002239&nbsp; 0.024741 -0.002762&nbsp; 0.051519<br />&nbsp; 0.165026&nbsp; 0.010443&nbsp; 0.012128&nbsp; 0.010766 -0.010541&nbsp; 0.005525 -0.000441&nbsp; 0.013429<br />&nbsp; 0.005601&nbsp; 0.024515&nbsp; 0.021904&nbsp; 0.011582&nbsp; 0.002901&nbsp; 0.026979&nbsp; 0.006568&nbsp; 0.021555<br />&nbsp; 0.018137&nbsp; 0.016054&nbsp; 0.024444&nbsp; 0.016909&nbsp; 0.006202&nbsp; 0.025144&nbsp; 0.015173&nbsp; 0.025631<br />&nbsp; 0.007957&nbsp; 0.003564&nbsp; 0.072007 -0.067482 -0.004144&nbsp; 0.010924&nbsp; 0.016701 -0.000595<br />&nbsp; 0.062759&nbsp; 0.001897&nbsp; 0.067899 -0.033792 -0.022151&nbsp; 0.014704&nbsp; 0.001429 -0.003639</div><br /><br />And now, the important stuff:<br />I have done the test i talked above and it has worked marvelouslly well. By example, doing it for the nibble #2 (the third one, as i count them starting from #0), and using the first 2^16 inputs for 4d0, i obtain this table:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp;5&nbsp; &nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp;9&nbsp; &nbsp; &nbsp; &nbsp;10&nbsp; &nbsp; &nbsp; 11&nbsp; &nbsp; &nbsp; 12&nbsp; &nbsp; &nbsp; 13&nbsp; &nbsp; &nbsp; 14&nbsp; &nbsp; &nbsp; 15&nbsp; &nbsp; &nbsp; <br />0&nbsp; &nbsp;0.0000&nbsp; 3.3977&nbsp; 3.6852&nbsp; 2.2788&nbsp; 3.6053&nbsp; 3.5490&nbsp; 3.1486&nbsp; 3.7012&nbsp; 3.3428&nbsp; 3.1276&nbsp; 3.6882&nbsp; 2.2576&nbsp; 3.0419&nbsp; 1.8111&nbsp; 2.7555&nbsp; 2.6415&nbsp; <br />1&nbsp; &nbsp;3.3977&nbsp; 0.0000&nbsp; 3.1447&nbsp; 3.5983&nbsp; 2.4099&nbsp; 3.1644&nbsp; 3.3852&nbsp; 3.0483&nbsp; 2.7431&nbsp; 3.6324&nbsp; 2.5788&nbsp; 1.8192&nbsp; 3.7404&nbsp; 2.2463&nbsp; 3.4444&nbsp; 3.6914&nbsp; <br />2&nbsp; &nbsp;3.6852&nbsp; 3.1447&nbsp; 0.0000&nbsp; 3.5676&nbsp; 3.1528&nbsp; 2.3074&nbsp; 3.4511&nbsp; 1.8385&nbsp; 2.7001&nbsp; 3.3560&nbsp; 2.6999&nbsp; 3.0348&nbsp; 2.2667&nbsp; 3.7393&nbsp; 3.6772&nbsp; 3.2294&nbsp; <br />3&nbsp; &nbsp;2.2788&nbsp; 3.5983&nbsp; 3.5676&nbsp; 0.0000&nbsp; 3.4312&nbsp; 3.6872&nbsp; 3.0294&nbsp; 3.6470&nbsp; 2.2584&nbsp; 3.2055&nbsp; 3.7185&nbsp; 3.3462&nbsp; 2.6818&nbsp; 2.7137&nbsp; 1.8195&nbsp; 2.9720&nbsp; <br />4&nbsp; &nbsp;3.6053&nbsp; 2.4099&nbsp; 3.1528&nbsp; 3.4312&nbsp; 0.0000&nbsp; 3.1315&nbsp; 3.7002&nbsp; 2.5666&nbsp; 1.8186&nbsp; 3.4397&nbsp; 3.0688&nbsp; 2.7813&nbsp; 3.6767&nbsp; 3.4457&nbsp; 2.2606&nbsp; 3.7264&nbsp; <br />5&nbsp; &nbsp;3.5490&nbsp; 3.1644&nbsp; 2.3074&nbsp; 3.6872&nbsp; 3.1315&nbsp; 0.0000&nbsp; 3.4514&nbsp; 2.8292&nbsp; 2.9881&nbsp; 3.4439&nbsp; 1.9286&nbsp; 2.6465&nbsp; 3.2250&nbsp; 3.6862&nbsp; 3.7251&nbsp; 2.2519&nbsp; <br />6&nbsp; &nbsp;3.1486&nbsp; 3.3852&nbsp; 3.4511&nbsp; 3.0294&nbsp; 3.7002&nbsp; 3.4514&nbsp; 0.0000&nbsp; 3.3116&nbsp; 3.7241&nbsp; 2.1810&nbsp; 2.2441&nbsp; 3.6903&nbsp; 2.6940&nbsp; 2.5805&nbsp; 3.0653&nbsp; 1.9165&nbsp; <br />7&nbsp; &nbsp;3.7012&nbsp; 3.0483&nbsp; 1.8385&nbsp; 3.6470&nbsp; 2.5666&nbsp; 2.8292&nbsp; 3.3116&nbsp; 0.0000&nbsp; 3.2248&nbsp; 2.2549&nbsp; 2.1885&nbsp; 3.1205&nbsp; 3.3560&nbsp; 3.6305&nbsp; 3.4368&nbsp; 3.4450&nbsp; <br />8&nbsp; &nbsp;3.3428&nbsp; 2.7431&nbsp; 2.7001&nbsp; 2.2584&nbsp; 1.8186&nbsp; 2.9881&nbsp; 3.7241&nbsp; 3.2248&nbsp; 0.0000&nbsp; 3.6517&nbsp; 3.0405&nbsp; 2.3132&nbsp; 3.5731&nbsp; 3.5990&nbsp; 3.4327&nbsp; 3.6822&nbsp; <br />9&nbsp; &nbsp;3.1276&nbsp; 3.6324&nbsp; 3.3560&nbsp; 3.2055&nbsp; 3.4397&nbsp; 3.4439&nbsp; 2.1810&nbsp; 2.2549&nbsp; 3.6517&nbsp; 0.0000&nbsp; 3.3053&nbsp; 3.7039&nbsp; 1.8291&nbsp; 3.0565&nbsp; 2.5689&nbsp; 2.8185&nbsp; <br />10&nbsp; 3.6882&nbsp; 2.5788&nbsp; 2.6999&nbsp; 3.7185&nbsp; 3.0688&nbsp; 1.9286&nbsp; 2.2441&nbsp; 2.1885&nbsp; 3.0405&nbsp; 3.3053&nbsp; 0.0000&nbsp; 3.1590&nbsp; 3.4468&nbsp; 3.3809&nbsp; 3.7006&nbsp; 3.4481&nbsp; <br />11&nbsp; 2.2576&nbsp; 1.8192&nbsp; 3.0348&nbsp; 3.3462&nbsp; 2.7813&nbsp; 2.6465&nbsp; 3.6903&nbsp; 3.1205&nbsp; 2.3132&nbsp; 3.7039&nbsp; 3.1590&nbsp; 0.0000&nbsp; 3.6829&nbsp; 3.3982&nbsp; 3.6035&nbsp; 3.5550&nbsp; <br />12&nbsp; 3.0419&nbsp; 3.7404&nbsp; 2.2667&nbsp; 2.6818&nbsp; 3.6767&nbsp; 3.2250&nbsp; 2.6940&nbsp; 3.3560&nbsp; 3.5731&nbsp; 1.8291&nbsp; 3.4468&nbsp; 3.6829&nbsp; 0.0000&nbsp; 3.1572&nbsp; 3.1398&nbsp; 2.2960&nbsp; <br />13&nbsp; 1.8111&nbsp; 2.2463&nbsp; 3.7393&nbsp; 2.7137&nbsp; 3.4457&nbsp; 3.6862&nbsp; 2.5805&nbsp; 3.6305&nbsp; 3.5990&nbsp; 3.0565&nbsp; 3.3809&nbsp; 3.3982&nbsp; 3.1572&nbsp; 0.0000&nbsp; 2.3795&nbsp; 3.1610&nbsp; <br />14&nbsp; 2.7555&nbsp; 3.4444&nbsp; 3.6772&nbsp; 1.8195&nbsp; 2.2606&nbsp; 3.7251&nbsp; 3.0653&nbsp; 3.4368&nbsp; 3.4327&nbsp; 2.5689&nbsp; 3.7006&nbsp; 3.6035&nbsp; 3.1398&nbsp; 2.3795&nbsp; 0.0000&nbsp; 3.1222&nbsp; <br />15&nbsp; 2.6415&nbsp; 3.6914&nbsp; 3.2294&nbsp; 2.9720&nbsp; 3.7264&nbsp; 2.2519&nbsp; 1.9165&nbsp; 3.4450&nbsp; 3.6822&nbsp; 2.8185&nbsp; 3.4481&nbsp; 3.5550&nbsp; 2.2960&nbsp; 3.1610&nbsp; 3.1222&nbsp; 0.0000&nbsp; </div><br /><br />if i use 2^19 values instead of 2^16, i obtain this (teorically more accurate):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp;5&nbsp; &nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp;9&nbsp; &nbsp; &nbsp; &nbsp;10&nbsp; &nbsp; &nbsp; 11&nbsp; &nbsp; &nbsp; 12&nbsp; &nbsp; &nbsp; 13&nbsp; &nbsp; &nbsp; 14&nbsp; &nbsp; &nbsp; 15&nbsp; &nbsp; &nbsp; <br />0&nbsp; &nbsp;0.0000&nbsp; 3.6762&nbsp; 3.8242&nbsp; 2.4715&nbsp; 3.8901&nbsp; 3.5322&nbsp; 3.5378&nbsp; 3.9089&nbsp; 3.5937&nbsp; 3.5072&nbsp; 3.8739&nbsp; 2.8152&nbsp; 3.1818&nbsp; 2.5092&nbsp; 3.1507&nbsp; 2.7021&nbsp; <br />1&nbsp; &nbsp;3.6762&nbsp; 0.0000&nbsp; 3.4598&nbsp; 3.8744&nbsp; 2.4907&nbsp; 3.4931&nbsp; 3.5353&nbsp; 3.1491&nbsp; 3.1642&nbsp; 3.8055&nbsp; 2.7472&nbsp; 2.5121&nbsp; 3.8953&nbsp; 2.8169&nbsp; 3.5992&nbsp; 3.8678&nbsp; <br />2&nbsp; &nbsp;3.8242&nbsp; 3.4598&nbsp; 0.0000&nbsp; 3.5438&nbsp; 3.4659&nbsp; 2.4712&nbsp; 3.8746&nbsp; 2.4040&nbsp; 2.7188&nbsp; 3.6882&nbsp; 3.1648&nbsp; 3.1482&nbsp; 2.8422&nbsp; 3.8969&nbsp; 3.8699&nbsp; 3.6199&nbsp; <br />3&nbsp; &nbsp;2.4715&nbsp; 3.8744&nbsp; 3.5438&nbsp; 0.0000&nbsp; 3.6809&nbsp; 3.8202&nbsp; 3.4637&nbsp; 3.8714&nbsp; 2.8193&nbsp; 3.5371&nbsp; 3.9030&nbsp; 3.5899&nbsp; 2.6956&nbsp; 3.1646&nbsp; 2.4047&nbsp; 3.1824&nbsp; <br />4&nbsp; &nbsp;3.8901&nbsp; 2.4907&nbsp; 3.4659&nbsp; 3.6809&nbsp; 0.0000&nbsp; 3.4808&nbsp; 3.8187&nbsp; 2.7488&nbsp; 2.4079&nbsp; 3.5418&nbsp; 3.1330&nbsp; 3.1482&nbsp; 3.8660&nbsp; 3.6040&nbsp; 2.8238&nbsp; 3.9101&nbsp; <br />5&nbsp; &nbsp;3.5322&nbsp; 3.4931&nbsp; 2.4712&nbsp; 3.8202&nbsp; 3.4808&nbsp; 0.0000&nbsp; 3.6867&nbsp; 3.1477&nbsp; 3.1322&nbsp; 3.8848&nbsp; 2.5055&nbsp; 2.7279&nbsp; 3.6023&nbsp; 3.8724&nbsp; 3.9111&nbsp; 2.8351&nbsp; <br />6&nbsp; &nbsp;3.5378&nbsp; 3.5353&nbsp; 3.8746&nbsp; 3.4637&nbsp; 3.8187&nbsp; 3.6867&nbsp; 0.0000&nbsp; 3.6249&nbsp; 3.9022&nbsp; 2.4916&nbsp; 2.8317&nbsp; 3.8707&nbsp; 3.1638&nbsp; 2.7208&nbsp; 3.1927&nbsp; 2.5024&nbsp; <br />7&nbsp; &nbsp;3.9089&nbsp; 3.1491&nbsp; 2.4040&nbsp; 3.8714&nbsp; 2.7488&nbsp; 3.1477&nbsp; 3.6249&nbsp; 0.0000&nbsp; 3.5035&nbsp; 2.8434&nbsp; 2.4894&nbsp; 3.4875&nbsp; 3.6837&nbsp; 3.8156&nbsp; 3.5365&nbsp; 3.8898&nbsp; <br />8&nbsp; &nbsp;3.5937&nbsp; 3.1642&nbsp; 2.7188&nbsp; 2.8193&nbsp; 2.4079&nbsp; 3.1322&nbsp; 3.9022&nbsp; 3.5035&nbsp; 0.0000&nbsp; 3.8690&nbsp; 3.4539&nbsp; 2.4724&nbsp; 3.5467&nbsp; 3.8760&nbsp; 3.6829&nbsp; 3.8222&nbsp; <br />9&nbsp; &nbsp;3.5072&nbsp; 3.8055&nbsp; 3.6882&nbsp; 3.5371&nbsp; 3.5418&nbsp; 3.8848&nbsp; 2.4916&nbsp; 2.8434&nbsp; 3.8690&nbsp; 0.0000&nbsp; 3.6049&nbsp; 3.9060&nbsp; 2.4007&nbsp; 3.1991&nbsp; 2.7242&nbsp; 3.1524&nbsp; <br />10&nbsp; 3.8739&nbsp; 2.7472&nbsp; 3.1648&nbsp; 3.9030&nbsp; 3.1330&nbsp; 2.5055&nbsp; 2.8317&nbsp; 2.4894&nbsp; 3.4539&nbsp; 3.6049&nbsp; 0.0000&nbsp; 3.5045&nbsp; 3.8725&nbsp; 3.5288&nbsp; 3.8151&nbsp; 3.6816&nbsp; <br />11&nbsp; 2.8152&nbsp; 2.5121&nbsp; 3.1482&nbsp; 3.5899&nbsp; 3.1482&nbsp; 2.7279&nbsp; 3.8707&nbsp; 3.4875&nbsp; 2.4724&nbsp; 3.9060&nbsp; 3.5045&nbsp; 0.0000&nbsp; 3.8125&nbsp; 3.6794&nbsp; 3.8861&nbsp; 3.5405&nbsp; <br />12&nbsp; 3.1818&nbsp; 3.8953&nbsp; 2.8422&nbsp; 2.6956&nbsp; 3.8660&nbsp; 3.6023&nbsp; 3.1638&nbsp; 3.6837&nbsp; 3.5467&nbsp; 2.4007&nbsp; 3.8725&nbsp; 3.8125&nbsp; 0.0000&nbsp; 3.4788&nbsp; 3.4973&nbsp; 2.4729&nbsp; <br />13&nbsp; 2.5092&nbsp; 2.8169&nbsp; 3.8969&nbsp; 3.1646&nbsp; 3.6040&nbsp; 3.8724&nbsp; 2.7208&nbsp; 3.8156&nbsp; 3.8760&nbsp; 3.1991&nbsp; 3.5288&nbsp; 3.6794&nbsp; 3.4788&nbsp; 0.0000&nbsp; 2.4909&nbsp; 3.5223&nbsp; <br />14&nbsp; 3.1507&nbsp; 3.5992&nbsp; 3.8699&nbsp; 2.4047&nbsp; 2.8238&nbsp; 3.9111&nbsp; 3.1927&nbsp; 3.5365&nbsp; 3.6829&nbsp; 2.7242&nbsp; 3.8151&nbsp; 3.8861&nbsp; 3.4973&nbsp; 2.4909&nbsp; 0.0000&nbsp; 3.4869&nbsp; <br />15&nbsp; 2.7021&nbsp; 3.8678&nbsp; 3.6199&nbsp; 3.1824&nbsp; 3.9101&nbsp; 2.8351&nbsp; 2.5024&nbsp; 3.8898&nbsp; 3.8222&nbsp; 3.1524&nbsp; 3.6816&nbsp; 3.5405&nbsp; 2.4729&nbsp; 3.5223&nbsp; 3.4869&nbsp; 0.0000&nbsp; <br /></div>
<br />
<br />While there are differences, i think that even the first one is enough for what must be done with them. To explain what i do with these tables, lets first to give some background:
<br />
<br />If, having fixed the length of the SP network (let's say 32 bits), the number of rounds (lets say 4), the number of s-boxes per round (lets say 8 ), you consider a given set of ordered s-boxes (8*4 in lenght in our example), a way of obtaining the subkeys from the main key (the key schedule) and a way of mixing the subkeys with them (usually XORing the values before or after applying the sboxes, but it's also possible whatever operation biyective, as a sum or a multiplication by an odd number module 2^n), you have NOT obtained a one-in-a-class encryption scheme, but only a member of a equivalence class. If we regard all that setup as a functional F such that when you use a key K you have a function F[K] that stablish a biyection in 2^N, a class of equivalence is obtained by taking all the functional G for that you have a function g (lets call it "key conversion" function) such that F[K](x) = G[g(K)](x) for every K and every x.
<br />
<br />In practice this mean that, by using a black-box attack , we cannot pretend to obtain THE SP network used by the hardware, but only a member of his equivalence class. Why i'm explaining this? Because i wanna everybody understand that, when we try to "unveil" the s-boxes, what we are doing indeed is obtaining "equivalent" sboxes. In particular, we can suppose that, for a given key (lets think in our 4d0 case) and a given s-box, we are going to have, by example, a subkey applied to the input of that sbox; as we cannot know, at least at this point, exactly what key the hardware it's using, it's safe to consider that key as unexistent (or, more precisely, as the identity element for the field operation used to mix that subkey with the data; in the case of a XOR or a sum, 0, in the case of a multiplication mod 2^N, 1, and so on...).
<br />
<br />Due to that, as it seem we are going to obtain the sboxes with the 4d0 ID data, the subkeys for that ID will be (by now) that identity element BY CONVENTION. (That is, we will take a member of the equivalence class that assign to the 4d0 ID the trivial subkeys).
<br />
<br />Of course, some times, after you have chosen a "equivalent" scheme, you can observe more structure in the network, which allow you to chose a "simpler" member of the equivalence class (by example, you first calculate all the sboxes for all the rounds and you finally discover they are, indeed, the same sboxes for every round with different subkeys).
<br />
<br />All this is to explain we have some degrees of freedom on the sboxes that we have to fix by using a certain convention; in our case, i see 3 from the very beginning: one is the subkey that, as said, i will consider to be (by now, until the time we can investigate the key scheduling) the trivial ones for 4d0; the other ones, at the moment, will be the order of the output bits for the s-boxes of the first round (as we don't know how they are connected to the sboxes in the second round, we can choose an arbitrary number by now) and the fact that we can apply a XOR with an arbitrary number at the output (that is equivalent to chosing from the beggining a given output for a given input).
<br />
<br />OK? let's go for it. Take a look at the table above. As i said, we expect that, in every row or column, excluding the main diagonal, we have 4 values with Hamming distance of 1 (which should show small values), 6 with distance 2 (bigger), 4 with distance 3 and 1 with distance 4. Indeed, been able to distinguish the 4 values with distance 1 is enough for our purpose. Let's see it:
<br />
<br />in our case, it's totally clear what are those 4 values for each row and column (i will call them "alpha" values below); there are no conflicting choices: if you take the 4 lesser values for each row, you can see, looking the table by columns, that you have in fact chosen 4 of them by column. It's very clear; take a detailed look at the table.
<br />
<br />Now, how we obtain the sbox (lets call it S02. Well, as said above, i can choose, arbitrarily, S02(0)=0. Now, take a look at the row #0 in the table; yo can see the 4 number we have identified as belonging to outputs with distance 1 are in the columns #3, #11, #13, #15, so that should the inputs for the outputs 1,2,4 and 8; due to that we can freely chose the order, i can decide that S02(3)=1, S02(13)=4 and S02(15)=8. From that point on, we have no more degrees of freedom. Now, we can discover what are the remaining associations by this method: consider the outputs of weight 2 and discover his corresopnding input by taking into account that they are at distance 1 of some of the above number. By example, consider the ouput 3, it's at Hamming distance 1 of the outputs "1" and "2", so, as we now the corresponding inputs for these are 3 and 11, we can find the input for 3 simply by choosing the row in the above table that show "alpha values" in the column #3 and #11. The only possibility is #8, so S02(8 )=3, same method with the rest of number with weight 2 give S02(14)=5, S02(1)=6, etc. When you have done it for all the number of weight 2, you can iteratively calculate the number with weight 3, and finally of weight 4.
<br />
<br />After all that work we see that the permutation implemented by this sbox, (taking into account this is only a member of an equivalence class) is:
<br />
<br />{0,6,11,1,7,10,12,15,3,13,14,2,9,4,5,8}
<br />
<br />And that's all. We have recovered the S-Box. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />Now, if we are lucky, we will be able to do the same with the other 7 S-Boxes for the first round, which, at his time, should allow us to being able to "reverse" all the first round so as to isolate the 3 last rounds. Of course, this will be weaker so, at this point, we could apply the same techniques (teorically more easily) to iteratively reverse-engineer every round.
<br />
<br />I will now attack the others s-boxes in the first round. Maybe the more problematic will be the last 4 ones, as we only have the "high" file for that but, by taking at the previous example, it seems that even 2^16 data could be enough for this. If i feel any of the case is confuse, maybe i will ask you more data in that line.
<br />
<br />Stay tuned. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Fri Dec 07, 2007 6:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK. Done. With the available data, i have obtained the 8 s-boxes for the first round of the 4d0 ID and the 4 first s-boxes for the first round of 4dc (for this latter, 2^16 results for the higher bits hasn't been sufficient). The results are totally surprising...
<br />
<br />I have just said i have recovered the 8 sboxes for 4d0 and 4 for 4dc. Well, that's not exactly so... what i have recovered are 2 only s-boxes that are being used in both cases.
<br />
<br />the 2 s-boxes are 
<br />
<br />S0 = {0,6,11,1,7,10,12,15,3,13,14,2,9,4,5,8}  and
<br />S1 = {0,6,7,9,10,5,12,3,13,1,14,2,4,15,11,8}
<br />
<br />In 4d0, S0 is being used in the nibbles #1, #2, #4, #6 and #7, and S1 is being used in #0, #3 and #5
<br />
<br />In 4dc, S1 is being used in nibbles #0, #1, #2 and #3. I don't know what happens in nibbles #4 to #7.
<br />
<br />At first, when i only looked at 4d0, i thought that maybe there were indeed a only s-box with two different subkeys and/or XORs at the output, but i was unable to find out such relation.
<br />
<br />However, seeing that they occur unaltered in the other ID too make me think... if the subkey couldn't bee such a crappy thing so as to have a bit per block which say which one of the 2 s-boxes to use. It would be a really crappy key-schedule but, who knows, this is somewhat shocking.
<br />
<br />I think i will forget by now that question and will try to discover how the output bits of these s-boxes are grouped in the inputs of the s-boxes of the second round. But that won't be now; i'm sooo tired. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sat Dec 08, 2007 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is amazing!  Thank you for taking the time to explain the method and assumptions as well.  It really helps.
<br />
<br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">However, seeing that they occur unaltered in the other ID too make me think... if the subkey couldn't bee such a crappy thing so as to have a bit per block which say which one of the 2 s-boxes to use. It would be a really crappy key-schedule but, who knows, this is somewhat shocking.</div><br /><br />Maybe I'm jaded because of all the security flaws I've already found in this system, but I wouldn't find that shocking at all.  The company that made this doesn't specialize in secure electronics, and as soon as it appeared that they decided to go non-standard and make their own "in-house" cipher, I fully <em>expected</em> them to make all kinds of foolish shortcuts.<br /><br />Also, given the current measurement data, your suggestion that each bit in the "key" is merely selecting which s-boxes are used each nibble each round, fits great.  Because that would require conditional processing and can finally explain why I have trouble seeing clear loops in the processing.<br /><br /><br />I decided to re-examine my previous current measurements while the device calculated the challenge answer with the assumption that there would be pieces repeated, but not exactly (due to conditional code).  The current seems to roughly have two different levels for each instruction cycle (corresponding to ROM access active or not?), and so I labelled each instruction cycle with a 1 or -1 and looked at some convolutions.  <br /><br />I've seen perfect matches of up to 76 instruction cycles in several places (makes four peaks, strongly suggesting that there are indeed 4 rounds), but I often see 16 peaks for many lower cycle count compares.<br /><br />These 16 snippets are on average about 300 instruction cycles long, but can vary by +/- 60 cycles.  There is code at the beginning of each of these snippets which is repeated precisely, and then there is a bunch of very similar looking chunks again and again (it is this that varies quite a bit in time).  I don't know what that is, but it strangely does not appear in the last of the 16 snippets.<br /><br />While I am not sure what it is doing, my guess at this point is that it looks up the s-box for both nibbles in a byte, then scatters the bits into the output (which is probably the similar looking chunks everywhere, and since it varies so much in time maybe they are actually doing this with if statements ... basically, it starts with the output of the round = 0, then says "if this bit set in the byte just obtained with the s-box, then set this bit in the output").<br /><br />If this is correct, the fact that they use so many if statements is actually to our advantage.  By seeing how the operations change by changing the input, I can probably read off the s-boxes of the first round.  I'm not sure I could figure out the permutation this way though (or at least not in a very direct manner).<br /><br />So besides confirming that we most likely do have 4 rounds, there is a hint that something is done differrently in the very last round with a pair of nibbles.  What do you think this is?  There may be a more logical explanation for what I'm seeing and will have to think about it some more.<br /><br /><br /><br />Anyway, it looks like you will be able to solve this with just the blackbox data.  So there is no real need for me to figure out some way to collect more current probing data without the oscilloscope I used last time.  So I'll focus on collecting more challenge-&gt;response data instead.  Is there any particular data that would be useful right now?<br /><br />EDIT: Could you apply that analysis to the ID00072_counting data?  That was the ID I used way back when I recorded the current.  If you point out which of the two s-boxes are used for each nibble in the first round, I may be able to tell you which are used for all subsequent rounds.<br /><br />EDIT2:<br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">and the 4 first s-boxes for the first round of 4dc (for this latter, 2^16 results for the higher bits hasn't been sufficient).</div>
<br />Here's some more data with the higher bits.
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/ID004DC_high2.csv">http://neviksti.com/blackbox/ID004DC_high2.csv</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Sat Dec 08, 2007 3:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So besides confirming that we most likely do have 4 rounds, there is a hint that something is done differrently in the very last round with a pair of nibbles. What do you think this is? There may be a more logical explanation for what I'm seeing and will have to think about it some more. </div><br /><br />I don't see a logical reason to do anything special with only two nibbles; i could think that maybe they are implementing the connection between the outputs of one round and the input of the next one with P-boxes, and maybe that wouldn't be done in the last round, but i don't see what could only apply to 2 nibbles...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Could you apply that analysis to the ID00072_counting data? That was the ID I used way back when I recorded the current. If you point out which of the two s-boxes are used for each nibble in the first round, I may be able to tell you which are used for all subsequent rounds. </div><br /><br />I have tried it, but it's confuse; as i saw yesterday with the 4dc_high, it doesn't work with 2^16 data so well as i had expected. If you can send me more data for this, i could retry it.<br /><br />In other order of things, by "reversing" the first round (i mean, applying the inverse function to the input) i have come with some data for the "three last rounds" function. Doing the changes in inputs bits vs. changes in output bits for the 2^20 first data of 4d0, it can be seen a big gaining in regularity:<br /><br /> <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;8b080&nbsp; &nbsp;85d80&nbsp; &nbsp;11500&nbsp; &nbsp;66140&nbsp; &nbsp;27700&nbsp; &nbsp;76b98&nbsp; &nbsp;bb380&nbsp; &nbsp;86380&nbsp; &nbsp;17e80&nbsp; &nbsp;3ca00&nbsp; &nbsp;6d600&nbsp; &nbsp;84400&nbsp; &nbsp;77c00&nbsp; &nbsp;72500&nbsp; &nbsp;85f80&nbsp; &nbsp;3c000&nbsp; &nbsp;88700&nbsp; &nbsp;27a00&nbsp; &nbsp;4de00&nbsp; &nbsp;6f780&nbsp; &nbsp;b3e80&nbsp; &nbsp;592c0&nbsp; &nbsp;a4000&nbsp; &nbsp;9e400&nbsp; &nbsp;6dcc0&nbsp; &nbsp;81600&nbsp; &nbsp;18b00&nbsp; &nbsp;6bd80&nbsp; &nbsp;70880&nbsp; &nbsp;70190&nbsp; &nbsp;3b000&nbsp; &nbsp;17500<br />&nbsp; &nbsp;175c0&nbsp; &nbsp;1b600&nbsp; &nbsp;74f80&nbsp; &nbsp;a0740&nbsp; &nbsp;89400&nbsp; &nbsp;64b70&nbsp; &nbsp;7e880&nbsp; &nbsp;4ba00&nbsp; &nbsp;84200&nbsp; &nbsp;88d80&nbsp; &nbsp;d8000&nbsp; &nbsp;9a400&nbsp; &nbsp;a4798&nbsp; &nbsp;4d680&nbsp; &nbsp;551c0&nbsp; &nbsp;73000&nbsp; &nbsp;65580&nbsp; &nbsp;66d80&nbsp; &nbsp;92648&nbsp; &nbsp;70e80&nbsp; &nbsp;62f00&nbsp; &nbsp;a6540&nbsp; &nbsp;30c00&nbsp; &nbsp;36a00&nbsp; &nbsp;37180&nbsp; &nbsp;4c600&nbsp; &nbsp;80c80&nbsp; &nbsp;77400&nbsp; &nbsp;88e00&nbsp; &nbsp;8b860&nbsp; &nbsp;7ff00&nbsp; &nbsp;75500<br />&nbsp; &nbsp;48b00&nbsp; &nbsp;45540&nbsp; &nbsp;6cec0&nbsp; &nbsp;3a000&nbsp; &nbsp;70000&nbsp; &nbsp;88250&nbsp; &nbsp;81900&nbsp; &nbsp;49ac0&nbsp; &nbsp;78880&nbsp; &nbsp;72b80&nbsp; &nbsp;49900&nbsp; &nbsp;5be00&nbsp; &nbsp;81c60&nbsp; &nbsp;49540&nbsp; &nbsp;8bb00&nbsp; &nbsp;91d80&nbsp; &nbsp;5fa80&nbsp; &nbsp;91c00&nbsp; &nbsp;89228&nbsp; &nbsp;8c580&nbsp; &nbsp;7e100&nbsp; &nbsp;3e700&nbsp; &nbsp;73100&nbsp; &nbsp;37800&nbsp; &nbsp;47340&nbsp; &nbsp;80680&nbsp; &nbsp;77600&nbsp; &nbsp;5a000&nbsp; &nbsp;4ae00&nbsp; &nbsp;81738&nbsp; &nbsp;98200&nbsp; &nbsp;59180<br />&nbsp; &nbsp;20580&nbsp; &nbsp;2ae80&nbsp; &nbsp;72dc0&nbsp; &nbsp;49140&nbsp; &nbsp;90c00&nbsp; &nbsp;7dd18&nbsp; &nbsp;7fd00&nbsp; &nbsp;3ea00&nbsp; &nbsp;63980&nbsp; &nbsp;76900&nbsp; &nbsp;60000&nbsp; &nbsp;6ce00&nbsp; &nbsp;8ffa0&nbsp; &nbsp;3d600&nbsp; &nbsp;75d80&nbsp; &nbsp;77500&nbsp; &nbsp;4ef80&nbsp; &nbsp;7f300&nbsp; &nbsp;902c8&nbsp; &nbsp;8d600&nbsp; &nbsp;7d480&nbsp; &nbsp;47940&nbsp; &nbsp;43800&nbsp; &nbsp;36b00&nbsp; &nbsp;17e80&nbsp; &nbsp;69c00&nbsp; &nbsp;7bbc0&nbsp; &nbsp;64c00&nbsp; &nbsp;71a00&nbsp; &nbsp;913e8&nbsp; &nbsp;88300&nbsp; &nbsp;80580<br />&nbsp; &nbsp;8f700&nbsp; &nbsp;82a80&nbsp; &nbsp;22a00&nbsp; &nbsp;4f800&nbsp; &nbsp;4ee00&nbsp; &nbsp;54f38&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;6ed00&nbsp; &nbsp;2fd00&nbsp; &nbsp;79400&nbsp; &nbsp;67a00&nbsp; &nbsp;7a400&nbsp; &nbsp;58080&nbsp; &nbsp;85980&nbsp; &nbsp;b7000&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;84d00&nbsp; &nbsp;4f400&nbsp; &nbsp;35e28&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;3d600&nbsp; &nbsp;8ce00&nbsp; &nbsp;76380&nbsp; &nbsp;67ec0&nbsp; &nbsp;69340&nbsp; &nbsp;31600&nbsp; &nbsp;89780&nbsp; &nbsp;7c280&nbsp; &nbsp;51d28&nbsp; &nbsp;76000&nbsp; &nbsp;2ea00<br />&nbsp; &nbsp;6a780&nbsp; &nbsp;64980&nbsp; &nbsp;77980&nbsp; &nbsp;67000&nbsp; &nbsp;88800&nbsp; &nbsp;5a930&nbsp; &nbsp;83e00&nbsp; &nbsp;7cd00&nbsp; &nbsp;79e80&nbsp; &nbsp;91400&nbsp; &nbsp;8aa00&nbsp; &nbsp;78600&nbsp; &nbsp;5c980&nbsp; &nbsp;30c80&nbsp; &nbsp;71880&nbsp; &nbsp;65200&nbsp; &nbsp;7ea20&nbsp; &nbsp;97800&nbsp; &nbsp;4c418&nbsp; &nbsp;7d000&nbsp; &nbsp;89700&nbsp; &nbsp;52600&nbsp; &nbsp;83700&nbsp; &nbsp;58680&nbsp; &nbsp;7f4c0&nbsp; &nbsp;7b200&nbsp; &nbsp;97900&nbsp; &nbsp;98fc0&nbsp; &nbsp;7adc0&nbsp; &nbsp;5c998&nbsp; &nbsp;64000&nbsp; &nbsp;8f980<br />&nbsp; &nbsp;4af80&nbsp; &nbsp;52880&nbsp; &nbsp;3bd00&nbsp; &nbsp;77c40&nbsp; &nbsp;9b100&nbsp; &nbsp;53e08&nbsp; &nbsp;43500&nbsp; &nbsp;7ce00&nbsp; &nbsp;3d280&nbsp; &nbsp;73880&nbsp; &nbsp;88b80&nbsp; &nbsp;9b000&nbsp; &nbsp;a0a00&nbsp; &nbsp;74d80&nbsp; &nbsp;4a080&nbsp; &nbsp;21700&nbsp; &nbsp;64e80&nbsp; &nbsp;83a00&nbsp; &nbsp;5e1d8&nbsp; &nbsp;28e00&nbsp; &nbsp;40f80&nbsp; &nbsp;7dec0&nbsp; &nbsp;30000&nbsp; &nbsp;66c00&nbsp; &nbsp;6ac00&nbsp; &nbsp;47b00&nbsp; &nbsp;40000&nbsp; &nbsp;86b80&nbsp; &nbsp;91980&nbsp; &nbsp;6d028&nbsp; &nbsp;77c00&nbsp; &nbsp;49240<br />&nbsp; &nbsp;70880&nbsp; &nbsp;69f80&nbsp; &nbsp;6c200&nbsp; &nbsp;7bfc0&nbsp; &nbsp;74000&nbsp; &nbsp;a97d0&nbsp; &nbsp;57540&nbsp; &nbsp;81600&nbsp; &nbsp;8f700&nbsp; &nbsp;90200&nbsp; &nbsp;7b400&nbsp; &nbsp;76300&nbsp; &nbsp;ab800&nbsp; &nbsp;6e800&nbsp; &nbsp;74940&nbsp; &nbsp;1ba80&nbsp; &nbsp;78b00&nbsp; &nbsp;74200&nbsp; &nbsp;36768&nbsp; &nbsp;33940&nbsp; &nbsp;54540&nbsp; &nbsp;74640&nbsp; &nbsp;66fc0&nbsp; &nbsp;6e300&nbsp; &nbsp;76a40&nbsp; &nbsp;61d00&nbsp; &nbsp;96600&nbsp; &nbsp;67280&nbsp; &nbsp;60b80&nbsp; &nbsp;6ac18&nbsp; &nbsp;74000&nbsp; &nbsp;89a00<br />&nbsp; &nbsp;59d00&nbsp; &nbsp;64980&nbsp; &nbsp;5d780&nbsp; &nbsp;67000&nbsp; &nbsp;88800&nbsp; &nbsp;48948&nbsp; &nbsp;40000&nbsp; &nbsp;7cd00&nbsp; &nbsp;60580&nbsp; &nbsp;91400&nbsp; &nbsp;8aa00&nbsp; &nbsp;78600&nbsp; &nbsp;44180&nbsp; &nbsp;30c80&nbsp; &nbsp;81200&nbsp; &nbsp;30000&nbsp; &nbsp;7ea20&nbsp; &nbsp;97800&nbsp; &nbsp;35478&nbsp; &nbsp;30000&nbsp; &nbsp;10080&nbsp; &nbsp;52600&nbsp; &nbsp;77b00&nbsp; &nbsp;58680&nbsp; &nbsp;7f4c0&nbsp; &nbsp;64f00&nbsp; &nbsp;5e300&nbsp; &nbsp;98fc0&nbsp; &nbsp;7adc0&nbsp; &nbsp;46df8&nbsp; &nbsp;64000&nbsp; &nbsp;43a80<br />&nbsp; &nbsp; ac80&nbsp; &nbsp;2d800&nbsp; &nbsp;73880&nbsp; &nbsp;49140&nbsp; &nbsp;99600&nbsp; &nbsp;3e448&nbsp; &nbsp;5ff00&nbsp; &nbsp;4aa00&nbsp; &nbsp;86b80&nbsp; &nbsp;83180&nbsp; &nbsp;60000&nbsp; &nbsp;9c400&nbsp; &nbsp;7f1d0&nbsp; &nbsp;47f00&nbsp; &nbsp;27480&nbsp; &nbsp;64600&nbsp; &nbsp;56a00&nbsp; &nbsp;76e00&nbsp; &nbsp;6eac8&nbsp; &nbsp;57300&nbsp; &nbsp;60380&nbsp; &nbsp;47940&nbsp; &nbsp;16800&nbsp; &nbsp;3c300&nbsp; &nbsp;17e80&nbsp; &nbsp;23400&nbsp; &nbsp;8b200&nbsp; &nbsp;7d680&nbsp; &nbsp;79d80&nbsp; &nbsp;71e18&nbsp; &nbsp;8d700&nbsp; &nbsp;6fb80<br />&nbsp; &nbsp;95040&nbsp; &nbsp;98000&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;6ac40&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;6bbf8&nbsp; &nbsp;31ec0&nbsp; &nbsp;89200&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;76200&nbsp; &nbsp;5ac00&nbsp; &nbsp;70280&nbsp; &nbsp;98a00&nbsp; &nbsp;6e740&nbsp; &nbsp; f800&nbsp; &nbsp;5bf80&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;4b078&nbsp; &nbsp;1d340&nbsp; &nbsp;307c0&nbsp; &nbsp;57500&nbsp; &nbsp;5cd00&nbsp; &nbsp;7d400&nbsp; &nbsp;73940&nbsp; &nbsp;93100&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;39800&nbsp; &nbsp;5f400&nbsp; &nbsp;690b8&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0<br />&nbsp; &nbsp;39de0&nbsp; &nbsp;45540&nbsp; &nbsp;85340&nbsp; &nbsp;3a000&nbsp; &nbsp;46c00&nbsp; &nbsp;5f0b0&nbsp; &nbsp;92080&nbsp; &nbsp;49ac0&nbsp; &nbsp;8b580&nbsp; &nbsp;45b80&nbsp; &nbsp;49900&nbsp; &nbsp;b7c00&nbsp; &nbsp;68c00&nbsp; &nbsp;49540&nbsp; &nbsp;6d380&nbsp; &nbsp;8c380&nbsp; &nbsp;bf500&nbsp; &nbsp;50000&nbsp; &nbsp;63b68&nbsp; &nbsp;8b400&nbsp; &nbsp;76780&nbsp; &nbsp;3e700&nbsp; &nbsp;5d2c0&nbsp; &nbsp;37800&nbsp; &nbsp;47340&nbsp; &nbsp;61c20&nbsp; &nbsp;86900&nbsp; &nbsp;b4000&nbsp; &nbsp;95c00&nbsp; &nbsp;5aea8&nbsp; &nbsp;45a00&nbsp; &nbsp;6b080<br />&nbsp; &nbsp;4af80&nbsp; &nbsp;52880&nbsp; &nbsp;562c0&nbsp; &nbsp;77c40&nbsp; &nbsp;a0d00&nbsp; &nbsp;440d8&nbsp; &nbsp;34800&nbsp; &nbsp;7ce00&nbsp; &nbsp;71280&nbsp; &nbsp;89f00&nbsp; &nbsp;88b80&nbsp; &nbsp;9b000&nbsp; &nbsp;40c50&nbsp; &nbsp;74d80&nbsp; &nbsp;4a080&nbsp; &nbsp;1ed40&nbsp; &nbsp;64e80&nbsp; &nbsp;72800&nbsp; &nbsp;4d6b8&nbsp; &nbsp;235c0&nbsp; &nbsp;32cc0&nbsp; &nbsp;7dec0&nbsp; &nbsp;30000&nbsp; &nbsp;66c00&nbsp; &nbsp;6ac00&nbsp; &nbsp;47b00&nbsp; &nbsp;70e00&nbsp; &nbsp;86b80&nbsp; &nbsp;91980&nbsp; &nbsp;44708&nbsp; &nbsp;80100&nbsp; &nbsp;52b40<br />&nbsp; &nbsp;7b680&nbsp; &nbsp;86000&nbsp; &nbsp;11500&nbsp; &nbsp;6bc00&nbsp; &nbsp;27700&nbsp; &nbsp;68650&nbsp; &nbsp;bb380&nbsp; &nbsp;87280&nbsp; &nbsp;17e80&nbsp; &nbsp;3ca00&nbsp; &nbsp;6de00&nbsp; &nbsp;49c00&nbsp; &nbsp;68c00&nbsp; &nbsp;79a80&nbsp; &nbsp;7a080&nbsp; &nbsp;3c000&nbsp; &nbsp;4af00&nbsp; &nbsp;27a00&nbsp; &nbsp;70da8&nbsp; &nbsp;6f780&nbsp; &nbsp;b3e80&nbsp; &nbsp;5e2c0&nbsp; &nbsp;9a700&nbsp; &nbsp;7fd80&nbsp; &nbsp;6e200&nbsp; &nbsp;71e80&nbsp; &nbsp;18b00&nbsp; &nbsp;42c80&nbsp; &nbsp;34180&nbsp; &nbsp;8c5b0&nbsp; &nbsp;3b000&nbsp; &nbsp;17500<br />&nbsp; &nbsp;175c0&nbsp; &nbsp; db00&nbsp; &nbsp;70b80&nbsp; &nbsp;503a0&nbsp; &nbsp;87400&nbsp; &nbsp;5a660&nbsp; &nbsp;84480&nbsp; &nbsp;25d00&nbsp; &nbsp;7ff00&nbsp; &nbsp;8ca80&nbsp; &nbsp;6c000&nbsp; &nbsp;6f600&nbsp; &nbsp;6c730&nbsp; &nbsp;26b40&nbsp; &nbsp;551c0&nbsp; &nbsp;6b300&nbsp; &nbsp;564c0&nbsp; &nbsp;7a000&nbsp; &nbsp;6ddc8&nbsp; &nbsp;72d80&nbsp; &nbsp;5d480&nbsp; &nbsp;532a0&nbsp; &nbsp;30c00&nbsp; &nbsp;1b500&nbsp; &nbsp;1b8c0&nbsp; &nbsp;4c600&nbsp; &nbsp;81b80&nbsp; &nbsp;60c00&nbsp; &nbsp;5d100&nbsp; &nbsp;78078&nbsp; &nbsp;89980&nbsp; &nbsp;64c00<br />&nbsp; &nbsp;3fb00&nbsp; &nbsp;69f80&nbsp; &nbsp;6c200&nbsp; &nbsp;70d40&nbsp; &nbsp;74000&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;81600&nbsp; &nbsp;8f700&nbsp; &nbsp;90200&nbsp; &nbsp;ac600&nbsp; &nbsp;76300&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;6e800&nbsp; &nbsp;54000&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;78b00&nbsp; &nbsp;74200&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;6dd40&nbsp; &nbsp;3d900&nbsp; &nbsp;6e300&nbsp; &nbsp;6bb80&nbsp; &nbsp;14380&nbsp; &nbsp;96600&nbsp; &nbsp;67280&nbsp; &nbsp;60b80&nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp;74000&nbsp; &nbsp;89a00<br />&nbsp; &nbsp;5f9c0&nbsp; &nbsp;8aa80&nbsp; &nbsp;6b540&nbsp; &nbsp;74000&nbsp; &nbsp;70000&nbsp; &nbsp;6e5f0&nbsp; &nbsp;9b400&nbsp; &nbsp;93580&nbsp; &nbsp;75ec0&nbsp; &nbsp;72b80&nbsp; &nbsp;93200&nbsp; &nbsp;5be00&nbsp; &nbsp;73fc0&nbsp; &nbsp;92a80&nbsp; &nbsp;82140&nbsp; &nbsp;98c00&nbsp; &nbsp;5fa80&nbsp; &nbsp;91c00&nbsp; &nbsp;67798&nbsp; &nbsp;87000&nbsp; &nbsp;78200&nbsp; &nbsp;7ce00&nbsp; &nbsp;89180&nbsp; &nbsp;6f000&nbsp; &nbsp;8e680&nbsp; &nbsp;7ac00&nbsp; &nbsp;76fc0&nbsp; &nbsp;5a000&nbsp; &nbsp;4ae00&nbsp; &nbsp;74aa8&nbsp; &nbsp;98200&nbsp; &nbsp;4f040<br />&nbsp; &nbsp;20580&nbsp; &nbsp;2d800&nbsp; &nbsp;823c0&nbsp; &nbsp;49140&nbsp; &nbsp;99600&nbsp; &nbsp;7dd18&nbsp; &nbsp;7fd00&nbsp; &nbsp;4aa00&nbsp; &nbsp;8a140&nbsp; &nbsp;83180&nbsp; &nbsp;60000&nbsp; &nbsp;9c400&nbsp; &nbsp;8ffa0&nbsp; &nbsp;47f00&nbsp; &nbsp;75d80&nbsp; &nbsp;77500&nbsp; &nbsp;56a00&nbsp; &nbsp;76e00&nbsp; &nbsp;902c8&nbsp; &nbsp;8d600&nbsp; &nbsp;7d480&nbsp; &nbsp;47940&nbsp; &nbsp;43800&nbsp; &nbsp;3c300&nbsp; &nbsp;17e80&nbsp; &nbsp;69c00&nbsp; &nbsp;81b00&nbsp; &nbsp;7d680&nbsp; &nbsp;79d80&nbsp; &nbsp;913e8&nbsp; &nbsp;8d700&nbsp; &nbsp;6c840<br />&nbsp; &nbsp;95040&nbsp; &nbsp;98000&nbsp; &nbsp;8ac80&nbsp; &nbsp;6ac40&nbsp; &nbsp;88800&nbsp; &nbsp;6bbf8&nbsp; &nbsp;80800&nbsp; &nbsp;89200&nbsp; &nbsp;90380&nbsp; &nbsp;91400&nbsp; &nbsp;76200&nbsp; &nbsp;7a400&nbsp; &nbsp;70280&nbsp; &nbsp;98a00&nbsp; &nbsp;6e740&nbsp; &nbsp;67f60&nbsp; &nbsp;80380&nbsp; &nbsp;97800&nbsp; &nbsp;4b078&nbsp; &nbsp;671a0&nbsp; &nbsp;480a0&nbsp; &nbsp;57500&nbsp; &nbsp;5cd00&nbsp; &nbsp;7d400&nbsp; &nbsp;73940&nbsp; &nbsp;93100&nbsp; &nbsp;8f000&nbsp; &nbsp;9ee00&nbsp; &nbsp;81a00&nbsp; &nbsp;690b8&nbsp; &nbsp;64000&nbsp; &nbsp;65c80<br />&nbsp; &nbsp;175c0&nbsp; &nbsp; db00&nbsp; &nbsp;71480&nbsp; &nbsp;503a0&nbsp; &nbsp;7b800&nbsp; &nbsp;538d8&nbsp; &nbsp;9ee80&nbsp; &nbsp;25d00&nbsp; &nbsp;72e00&nbsp; &nbsp;9ad00&nbsp; &nbsp;6c000&nbsp; &nbsp;82c00&nbsp; &nbsp;7a800&nbsp; &nbsp;26b40&nbsp; &nbsp;551c0&nbsp; &nbsp;90a00&nbsp; &nbsp;962c0&nbsp; &nbsp;84c80&nbsp; &nbsp;6bf98&nbsp; &nbsp;84480&nbsp; &nbsp;61d00&nbsp; &nbsp;532a0&nbsp; &nbsp;30c00&nbsp; &nbsp;1b500&nbsp; &nbsp;1b8c0&nbsp; &nbsp;4c600&nbsp; &nbsp;7ea80&nbsp; &nbsp;75c00&nbsp; &nbsp;7be00&nbsp; &nbsp;57018&nbsp; &nbsp;68d80&nbsp; &nbsp;70e00<br /></div><br /><br />I have observed that same gaining too in other tests.<br /><br />I have started doing some test to try to discover how the output bits of 1st round relate to the inputs of the second round s-boxes, but i'm having some problems with the fact that now the blocks are probably distributed between bits that come from the "high" data files and bits that come from the low ones. The first results seems to be trying to fool me. Maybe i'm not using the best plan on this; i think i should be able to use that regularity gain here, i must meditate on this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is there any particular data that would be useful right now? </div>
<br />I will probably need some files with data which contains all the variations for a certain second round sboxes but, as i'm having troubles finding that blocks, i still won't ask them. There is one that seems more clear, so maybe we could try with it: i would need a file for 4d0 containing all the combinations for the bits in the input nibbles #0, #2, #4 and #7, while fixing #1,#3,#5 and #6 to 0.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>