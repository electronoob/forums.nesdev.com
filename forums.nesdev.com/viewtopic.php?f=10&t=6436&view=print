<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Joypad Problem</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Joypad Problem</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6436">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6436</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Louix94</b> [ Sun May 30, 2010 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Joypad Problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, sorry it's been a while, I haven't given up on my project, thanks to all those who helped me in the past! I haven't had any spare time to do anything really. Anyway, now I've got a little bit of time, I'd like to continue with this <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />I made a little menu last night and it works fine except for one thing: the joypad is too responsive! I would like to make it so the little arrow that points out the selection only moves down once per-press then ignores any other presses until the button is released. I've seen code that did that before but I can't find it anywhere!
<br />
<br />Here's my current joypad code from my NMI routine:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.readJoypad:<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #$01<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;.readA:<br />&nbsp; &nbsp;&nbsp; &nbsp;lda $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;and #%00000001<br />&nbsp; &nbsp;&nbsp; &nbsp;beq .readA_done<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda $0200<br />&nbsp; &nbsp;&nbsp; &nbsp;adc #$08<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $0200<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;.readA_done:</div>
<br />
<br />Thank you <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun May 30, 2010 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you just check the current state of the button it's no surprise that you are going to detect it several times, seeing as the logic runs at 60 frames per second and most people will hold the button down longer than 1 frame.
<br />
<br />What you want to do is only detect the buttons that were pressed during this frame, and ignore the ones that were already pressed. This means you have to check the previous frame's button status to make sure the button wasn't pressed before.
<br />
<br />The quickest way to this is using bitwise operations, so I hope you're familiar with them. You just have to take the previous state and invert it (EOR #$FF), then AND the result with the new state.
<br />
<br />So if the button was pressed during the previous frame, it's previous status is 1. Invert that and it becomes 0. If the button is pressed now, it's current state is 1. 1 AND 0 is 0, which means it was not pressed now, it was already pressed, so don't move the cursor.
<br />
<br />But if the button wasn't pressed last frame, it's previous status is 0. 0 inverted becomes 1. 1 AND 1 equals 1, so it was pressed this frame, so the cursor should move.
<br />
<br />EDIT: why do you have a CLC after the addition? You're supposed to clear the carry <strong>before</strong> adding, not after.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Sun May 30, 2010 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Joypad Problem</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The first step would be to separate controller reading and input handling.  You'll want to make a subroutine that reads the controller and stores the button states in a variable.  See <a href="http://nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=8747" class="postlink">this tutorial</a> to see how to do that.
<br />
<br />Next you will want to distinguish between buttons that are pressed and buttons that are newly pressed, ie are pressed this frame but weren't pressed last frame.  To do that you will need to compare this frame's button states with last frame's button states:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">read_controller:<br />&nbsp; &nbsp; lda joypad1&nbsp; &nbsp; &nbsp; &nbsp; ; take last frame's button states<br />&nbsp; &nbsp; sta joypad1_old&nbsp; &nbsp; ; and save them in a variable.<br /><br />&nbsp; &nbsp; ;... read the controller and store in joypad1<br /><br />&nbsp; &nbsp; lda joypad1_old&nbsp; &nbsp; ; take last frame's button states<br />&nbsp; &nbsp; eor #$FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; and flip the bits.&nbsp; Now 1 = not pressed last frame, 0 = pressed last frame<br />&nbsp; &nbsp; and joypad1&nbsp; &nbsp; &nbsp; &nbsp; ; AND with this frame's buttons states.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; We get a 1 only if a button was not pressed last frame, but is pressed this frame.<br />&nbsp; &nbsp; sta joypad1_pressed&nbsp; ; save the results<br /><br />&nbsp; &nbsp; rts<br /></div>
<br />
<br />Then in your input handling code, check the joypad1_pressed variable instead of the joypad1 variable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Wave</b> [ Mon May 31, 2010 3:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do something like tokumaru says, I have 3 bytes per joypad:
<br />-Pressed buttons (this frame are pressed)
<br />-Mantained buttons (pressed last frame and this frame)
<br />-Released buttons (pressed last frame, not pressed this frame)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Louix94</b> [ Mon May 31, 2010 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Got it, thanks again! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Here's my new code for those interested:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.readA:<br />&nbsp; &nbsp;&nbsp; &nbsp;lda joypad_new<br />&nbsp; &nbsp;&nbsp; &nbsp;sta joypad_old<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;sta joypad_new<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;and #%00000001<br />&nbsp; &nbsp;&nbsp; &nbsp;beq .readA_done<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda joypad_old<br />&nbsp; &nbsp;&nbsp; &nbsp;eor #$FF<br />&nbsp; &nbsp;&nbsp; &nbsp;and joypad_new<br />&nbsp; &nbsp;&nbsp; &nbsp;beq .readA_done<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;lda $0200<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;adc #$08<br />&nbsp; &nbsp;&nbsp; &nbsp;sta $0200<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;.readA_done:</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon May 31, 2010 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I cringe to think what that code will look like once it handles all the buttons. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon May 31, 2010 9:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem is that a lot of tutorials teach newbies to constantly interact with the hardware like that, instead of teaching them to use an abstraction layer.
<br />
<br />The same goes for the sprites in this case. A lot of newbies use hardcoded sprites in the OAM page, and use the sprite data (coordinates) as object data, instead separating the model from the view, as is the professional way of doing it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon May 31, 2010 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's the code I'm using for joystick input:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JOY1&nbsp; &nbsp; &nbsp; = $4016<br />JOY2&nbsp; &nbsp; &nbsp; = $4017<br /><br />ReadJOY1_8:<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;cpx JOY1<br />&nbsp; &nbsp;ror a<br />&nbsp; &nbsp;eor #$FF<br />&nbsp; &nbsp;rts<br /><br /><br />Strobe:<br />&nbsp; &nbsp;ldx #1<br />&nbsp; &nbsp;stx JOY1<br />&nbsp; &nbsp;lda JOY1<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;stx JOY1<br />&nbsp; &nbsp;and #$FC<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;rts<br /><br />ReadJoypad1:<br />&nbsp; &nbsp;lda joy1<br />&nbsp; &nbsp;sta joy1last<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr Strobe<br />&nbsp; &nbsp;jsr ReadJOY1_8<br />&nbsp; &nbsp;sta joy1<br />ReadJoy1Again:&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr Strobe<br />&nbsp; &nbsp;jsr ReadJOY1_8<br />&nbsp; &nbsp;cmp joy1<br />&nbsp; &nbsp;sta joy1<br />&nbsp; &nbsp;bne ReadJoy1Again<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;eor joy1last<br />&nbsp; &nbsp;and joy1<br />&nbsp; &nbsp;sta joy1Pressed<br />&nbsp; &nbsp;lda joy1<br />&nbsp; &nbsp;rts<br /></div>
<br />
<br />I have the strobe and controller read parts separate because I also them in different ways for the 4-player joystick code.
<br />This code doesn't consider the famicom expansion port joysticks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Louix94</b> [ Mon May 31, 2010 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@blargg:
<br />I just discovered what happens when I try to handle multiple buttons, it doesn't work too well!
<br />
<br />
<br />@tokumaru:
<br />I'm very used to writing code with the whole model-view concept, but I just can't bring myself to think like that when I write code in an assembly language!
<br />
<br />EDIT: All fixed up now, will attempt to tidy up and post back here later, thank you all again <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon May 31, 2010 10:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Louix94 wrote:</div><div class="quotecontent">I just discovered what happens when I try to handle multiple buttons, it doesn't work too well!</div><br />You should read the state of all buttons beforehand (thus interacting with the joypad only once) and buffer them in a byte, and then use that byte for checking any buttons you wish during the rest of the logic frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm very used to writing code with the whole model-view concept, but I just can't bring myself to think like that when I write code in an assembly language!</div>
<br />That's OK. If you already know about it you're on the right track. As long as you try to progressively abstract the hardware aspects in your code you'll be fine.
<br />
<br />The sprites, for example, are just a way the NES offers to display objects, so the sprite data shouldn't be used for logic... There "professional" way would be to have a cursor object which would check for input and react accordingly, and finally draw itself by using an entry in the OAM, which is nothing more than a graphical representation of the cursor object.
<br />
<br />It may seem pointless to make an apparently complex separation when you can just move the damn sprite, but that's the difference between a simple demo and a game. A simple demo can get away with doing things in the dirtiest way possible as long as the graphical results are as expected, but a game must have a solid framework underneath if it is supposed to get anywhere.
<br />
<br />I know you are just learning, and whatever works is good for learning. What I wrote above is just a tip for the future. Keep that in mind.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon May 31, 2010 10:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Wave wrote:</div><div class="quotecontent">I do something like tokumaru says, I have 3 bytes per joypad:<br />-Pressed buttons (this frame are pressed)<br />-Mantained buttons (pressed last frame and this frame)<br />-Released buttons (pressed last frame, not pressed this frame)</div>
<br />
<br />That's interesting! I also have 3 bytes, but they are as follows:
<br />
<br />-ControlCurrent (What is read as currently being pressed this frame)
<br />-ControlPrevious (The status of ControlCurrent from last frame)
<br />-ControlTrigger (Buttons newly pressed = 1, buttons not newly pressed = 0)
<br />
<br />When I don't care if a button was newly pressed, and I just need to see if it was pressed, I just look at ControlCurrent. I guess if I need to see if a button is held, I just look at (ControlCurrent AND ControlPrevious). I guess a Maintained Buttons variable would be a good thing though... I don't think I use ControlPrevious for anything other than calculating the result of ControlTrigger.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 31, 2010 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or feel free to use my working-on-hardware, audio-glitch-tolerant, permissively licensed controller reading subroutine, which can be found in pads.s of <a href="http://pineight.com/croom/" class="postlink">Concentration Room</a>. It updates these variables for both players:
<br /><ul><li>cur_keys: 1 if held </li><li>new_keys: 1 if newly pressed since the previous read; this corresponds to "joypad_pressed" or "joy1Pressed" or "ControlTrigger" </li><li>das_keys: 1 if newly pressed since the previous frame or if the key has been held for autorepeat (DAS stands for delayed auto-shift) </li></ul>
<br />What's "audio-glitch-tolerant"? Memory accesses while playing sampled sound occasionally cause the CPU to miss a bit while reading the controller ports. Standard procedure if your game uses sampled sound is to read the controllers more than once and compare them to make sure that such a glitch hasn't occurred.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon May 31, 2010 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I added a <a href="http://wiki.nesdev.com/w/index.php/Controller_Reading" class="postlink">Controller Reading</a> page to the Wiki.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Wave</b> [ Tue Jun 01, 2010 1:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><div class="quotetitle">Wave wrote:</div><div class="quotecontent">I do something like tokumaru says, I have 3 bytes per joypad:<br />-Pressed buttons (this frame are pressed)<br />-Mantained buttons (pressed last frame and this frame)<br />-Released buttons (pressed last frame, not pressed this frame)</div><br /><br />That's interesting! I also have 3 bytes, but they are as follows:<br /><br />-ControlCurrent (What is read as currently being pressed this frame)<br />-ControlPrevious (The status of ControlCurrent from last frame)<br />-ControlTrigger (Buttons newly pressed = 1, buttons not newly pressed = 0)<br /><br />When I don't care if a button was newly pressed, and I just need to see if it was pressed, I just look at ControlCurrent. I guess if I need to see if a button is held, I just look at (ControlCurrent AND ControlPrevious). I guess a Maintained Buttons variable would be a good thing though... I don't think I use ControlPrevious for anything other than calculating the result of ControlTrigger.</div>
<br />This is my function to do this right now:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">inline inp_updatePlayer&#40;player&#41; &#123;<br />&nbsp; &nbsp; lda pads&#91;player&#93;.pressed<br />&nbsp; &nbsp; ora pads&#91;player&#93;.mantained<br />&nbsp; &nbsp; sta pads&#91;player&#93;.released<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp; lda tmpPort<br />&nbsp; &nbsp; eor #0xFF<br />&nbsp; &nbsp; and pads&#91;player&#93;.released<br />&nbsp; &nbsp; sta pads&#91;player&#93;.released<br />&nbsp; &nbsp; txa<br />&nbsp; &nbsp; and tmpPort<br />&nbsp; &nbsp; sta pads&#91;player&#93;.mantained<br />&nbsp; &nbsp; txa<br />&nbsp; &nbsp; eor #0xFF<br />&nbsp; &nbsp; and tmpPort<br />&nbsp; &nbsp; sta pads&#91;player&#93;.pressed<br />&#125;</div>
<br />
<br />tmpPort contains the pad readed this frame

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Louix94</b> [ Tue Jun 01, 2010 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay I've re-written my input code to make it a bit more readable, made better use of constants and variables and added better structure to it (as much as I could). Input basically works the same way as it did before, thank you for your help <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />EDIT: I just realised I think I could do all the button handling in a loop, I'll try that later on <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.GetButtons:<br />&nbsp; &nbsp;&nbsp; &nbsp;.Strobe:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda #$01<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta .joypad1Port<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta .joypad1Port<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;.ReadInput:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Info:&nbsp; &nbsp;&nbsp; &nbsp;Read # |&nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp; 4&nbsp; &nbsp; &nbsp; 5&nbsp; &nbsp; &nbsp; 6&nbsp; &nbsp; &nbsp; 7&nbsp; &nbsp; &nbsp; 8<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-------+---------------------------------------------------------<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Button |&nbsp; &nbsp; A&nbsp; &nbsp; &nbsp; B&nbsp; &nbsp;SELECT&nbsp; &nbsp;START&nbsp; &nbsp;UP&nbsp; &nbsp; DOWN&nbsp; &nbsp;LEFT&nbsp; RIGHT<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Loop until we reach the start button<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldx #$00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.ReadInput_readLoop:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda .joypad1Port<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;inx <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;cpx #$03<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bne .ReadInput_readLoop<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.ReadInput_StartButton:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta JPOldValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and #$01<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_UpButton<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda JPOldValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;eor #$FF<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_Done<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;jsr .ChooseCurrentOption<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rts<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.ReadInput_UpButton:&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and #$01<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_DownButton<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda JPOldValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;eor #$FF<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_Done<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldx Counter1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;cpx #$00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_Done<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda #.selectionArrow<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta .selectionArrowSprite<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;jsr .SelectionPreviousOption<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rts<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.ReadInput_DownButton:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda $4016<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and #$01<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_Done<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda JPOldValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;eor #$FF<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and JPNewValue<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_Done<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ldx Counter1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;cpx #.totalMenuOptions-1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;beq .ReadInput_Done<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda #.selectionArrow<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;sta .selectionArrowSprite<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;jsr .SelectionNextOption<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rts<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.ReadInput_Done:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rts<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />; Variables &#40;listed in a different file&#41;:<br />JPNewValue .rs 1<br />JPOldValue .rs 1<br /><br />Counter1 .rs 1<br /><br />; Constants<br />.totalMenuOptions = $02<br /><br />.selectionArrow = $02<br />.selectionArrowSprite = $0202<br /><br /></div>[/code]

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>