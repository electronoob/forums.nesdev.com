<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How does Windows (mostly) maintain backwards compatibility?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How does Windows (mostly) maintain backwards compatibility?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=17458">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=17458</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Wed Jun 20, 2018 12:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How does Windows (mostly) maintain backwards compatibility?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just recently, I had been looking into how Windows and operating systems in general work because I don't have any other current projects, and I figured that maybe I could learn to program my own tools, as I have come to realize how important that would be.<br /><br />I think that from a low level, programs interact with the operating system by having the cpu put values in certain processor registers (with one value defining what operation needs to take place) and then perform an instruction called &quot;syscall&quot;, that I guess is just like a special jump to wherever the code for the operating system resides or something...<br /><br />What's puzzling to me though, is that at least according to this reference (<!-- m --><a class="postlink" href="http://j00ru.vexillium.org/syscalls/nt/64/">http://j00ru.vexillium.org/syscalls/nt/64/</a><!-- m -->) the value associated with every other operating system function appears to change with each new iteration of Windows. Windows does have a compatibility mode for programs for each operating system, but I've only ever had to use it once for a Windows 98 program.<br /><br />Something notable I found out too, is that Windows 95 through ME were I guess just GUIs for DOS, while 2000 and upwards are not. I'd have thought this would have made most every program developed for ME and earlier incompatible with 2000 and later, although maybe this was the case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jun 20, 2018 1:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Something notable I found out too, is that Windows 95 through ME were I guess just GUIs for DOS, while 2000 and upwards are not. I'd have thought this would have made most every program developed for ME and earlier incompatible with 2000 and later, although maybe this was the case.<br /></div>That's ... really not true. Not by any reasonable stretch.<br /><br />Windows 1, 2, and 3 definitely were.<br /><br />But 95, 98, and ME had the properties of a &quot;real&quot; OS, even if it was one specifically designed for compatibility and performance rather than security. And although you could &quot;technically&quot; quit Windows 95/98 and get to a DOS prompt ... that really only meant that it knew how to put things back.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Wed Jun 20, 2018 2:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh; what had made me believe that is discovering the existence of Windows 9x vs Windows NT. I had always assumed Windows 2000 was more of a minor graphical update rather than a complete reworking. I don't really even understand what each new iteration of Windows adds beyond pure cosmetics other than less free hard drive space...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Wed Jun 20, 2018 2:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Malware, spying, and other things commonly requested by every user ever <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />&quot;how does it maintain backwards compatibility&quot;, by keeping copies of every DLL version ever made. Think of how you have every version of DirectX installed if you have any older games. Now multiply that for every library.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Wed Jun 20, 2018 2:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">calima wrote:</div><div class="quotecontent">Malware, spying, and other things commonly requested by every user ever.&quot;</div><br />Yeah, I've been considering going back to Windows 7 after I fully realized the extent of the problem... Supposedly, Windows 10 has slightly better performance than Windows 7, but with how much more bloated Windows 10 is, I do not understand that at all.<br /><br /><div class="quotetitle">calima wrote:</div><div class="quotecontent">&quot;how does it maintain backwards compatibility&quot;, by keeping copies of every DLL version ever made. Think of how you have every version of DirectX installed if you have any older games. Now multiply that for every library.</div><br />Do you know how Windows would know which dll file to use? Do exe files say what version of Windows they were made for?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Wed Jun 20, 2018 4:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My subjective experience is that win10 (starting with some improvements in 8) streamlined my workflow so much that any extra recourses it claims is well worth it. I don’t appreciate it launching a huge download while i’m batch processing something that already takes time as it is, but that coincidence is rare enough for me. <br /><br />What’s worse is the few times it has forced a reboot from sleep mode without telling me on the previous session. The large productivity application makers (adobe etc ) have adapted, but something like NESST won’t keep a backup

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Jun 20, 2018 6:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, time for a real answer...<br /><br />You got your core system libraries:<br />Kernel32.dll (memory allocation, file access, loading DLLs, etc...)<br />User32.dll (creating windows, setting properties of windows, etc...)<br />GDI32.dll (drawing stuff to device contexts)<br />and OLE32.dll (Loading COM components via the system registry)<br /><br />They all still export the same functions that they did in the early Win32 days, in addition to any new functions added since then.<br />By supporting all the same functions and the same ABI, then you can still run early software.<br /><br />Now as for Syscalls...<br />Kernel32.dll imports Ntdll.dll, and Ntdll.dll contains all the SYSENTER instructions that cause OS system calls.  Syscalls do change over time, but that's pretty much only relevant to the thin layer that MS put over them.<br />I'm not 100% sure about which DLLs actually use system calls, but it's pretty much the OS core libraries mainly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nicole</b> [ Wed Jun 20, 2018 7:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, to clarify, on Windows (unlike, say, Linux) you're not supposed to do syscalls directly, since they're not stable from version to version of Windows.<br /><br />Instead, you're supposed to link to system DLLs like kernel32.dll, and do everything by calling functions in those DLLs, which do the relevant syscalls internally. That way, if Microsoft ever has to change which syscalls need to be used, they can just have the system DLL functions use different ones, and your program will continue to work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Wed Jun 20, 2018 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's this thing called WinAPI that's been growing since it was created decades ago. For the most part all the old functions still behave as they did all that time ago. If a program calls CreateWindow it works the same way on Win3.1 as it does on Win10.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 20, 2018 8:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">something like NESST won’t keep a backup</div><br />When Windows notifies Notepad++ of a shutdown, Notepad++ stashes otherwise unsaved changes to a temporary directory in the user's profile and restores them the next time Notepad++ opens. If NESST does not stash unsaved changes, this is a defect in NESST and should be reported to the maintainer of NESST.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Wed Jun 20, 2018 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nicole wrote:</div><div class="quotecontent">Yeah, to clarify, on Windows (unlike, say, Linux) you're not supposed to do syscalls directly, since they're not stable from version to version of Windows.</div><br />Any real reason for that? I'd think they'd just give each new function added to Windows a value of 1 higher than the last.<br /><br /><div class="quotetitle">Nicole wrote:</div><div class="quotecontent">Instead, you're supposed to link to system DLLs like kernel32.dll, and do everything by calling functions in those DLLs, which do the relevant syscalls internally.</div><br />What does link necessarily mean in this case?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Wed Jun 20, 2018 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Read <a href="https://en.wikipedia.org/wiki/Dynamic_linker" class="postlink">this</a>, my dude.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Wed Jun 20, 2018 7:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you for sharing that, as it improved my understanding a lot. I never quite realized how much preliminary stuff is done before an exe file is &quot;excecuted&quot;. Do you have any idea how linking functions actually looks in binary? I'm going to assume there's a big table somewhere in the exe file, separate from the machine code, that tells Windows what files need to be linked and also where to the create jumps to those functions in the code. The only exe explanations I've seen are very brief.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Jun 20, 2018 7:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For FreeBSD: KBI/KPI compatibility (kernel-level) -- as well as ABI compatibility (userland/application-level; includes libc et al, as well as ld.so and ELF compatibility) -- is a huge focus.  Here's a (somewhat-badly-written) wiki page on the matter, meaning it doesn't explain things thoroughly or cover all bases from beginning to end: <!-- m --><a class="postlink" href="https://wiki.freebsd.org/BinaryCompatibility">https://wiki.freebsd.org/BinaryCompatibility</a><!-- m --><br /><br />At the kernel level, there are actually kernel configuration options that control binary compatibility support for older versions; these are <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">options COMPAT_FREEBSDxx</tt> directives as <a href="https://svnweb.freebsd.org/base/stable/11/sys/amd64/conf/GENERIC?revision=333417&amp;view=markup#l54" class="postlink">demonstrated here</a>.<br /><br />Any time there is an backwards-incompatible KBI/KPI or ABI change, there's a magic <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#define</tt> on FreeBSD called <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">__FreeBSD_version</tt> that is incremented.  Documenting that is mandatory as well, which is why this exists: <!-- m --><a class="postlink" href="https://www.freebsd.org/doc/en/books/porters-handbook/versions.html">https://www.freebsd.org/doc/en/books/po ... sions.html</a><!-- m --> . Userland programs, like the kernel, can rely on this #define to change their behaviour, else expect breakage.  An example I ran into with my bsdhwmon software was when the SMBus subsystem was changed and required me <a href="https://github.com/koitsu/bsdhwmon/blob/d21b5f8b26f3c1fa1a2373f0f717fc74184f6c87/smbus_io.c#L35" class="postlink">to do this</a> (read the comment, then see the two functions with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">#ifdef</tt>s below to understand).<br /><br />Sometimes breakage happens.  Users usually scream, and someone either fixes it or users are told what the deal is.  A common problem that still plagues the OS today are things like third-party kernel modules -- VirtualBox and VMware are two of the big ones -- that require rebuilding from source every time you rebuild the kernel/system (<a href="https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228535" class="postlink">example</a>).  This is often a rude awakening for users, but it's reality.  In userland, a common third-party utility that has the same problem as the above is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lsof</tt>, because it's a userland program that actually has very deep insights into kernel structures given what all it does.  As such, on FreeBSD, users tend to opt for using alternate utilities like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fstat</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sockstat</tt>, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">procstat</tt>.<br /><br />I imagine NetBSD, OpenBSD, etc. do something similar.  I don't know how Linux, Solaris, or other *IX or *IX-like OSes do it (I just haven't looked).<br /><br />So, in short: generally speaking, OS vendors/orgs try very hard to keep KBI/KPI and ABI compatibility when possible, and (usually) implement compatibility shims or make modifications in a way that allow for expansion without breakage, but sometimes breakage happens.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Sat Jun 23, 2018 5:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does Windows (mostly) maintain backwards compatibili</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On top of a versioned COM interface, this is most commonly seen if you look at Direct X code. Where you say Can I have a DirectX8Surface object please, and go from there. This allows it to specifically set which interface it expects. To which then MS can either just keep DX8 code in the releases or make a &quot;bridge&quot; that will convert the DX8 interface to DX9 behind the &quot;facade&quot; it presents. <br /><br />Windows also has a &quot;shim&quot; system, this is where it knows what your program is and it knows that your program needs this specific version/hack or flaw of a specfic version of some API call, and it will inject a custom bit of code to translate what the App wants and converts it to the new API while doing its best to mimic the exact weird side effect that the program was reling upon. There is a great horror story website from an ex dev that I can't remember the name of or find at the moment that tells of some of the horrible stuff MS has to do because some dev did something really janky that one time 9 years ago but it sold 9 millions copies and if it breaks everybody blames MS. For example win95 explorer has mem leaks, there are really popular file view extensions that relied upon said memory leaks so they could get data they needed to work. So MS fixed the leak, then had to go and put the leak back in. The comparability mode says &quot; since you don't know this exe, install all the basic shims for Windows Version X on this app&quot;

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>