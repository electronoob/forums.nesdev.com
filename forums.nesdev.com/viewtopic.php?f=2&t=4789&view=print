<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CPX... Flags in relation to which value?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CPX... Flags in relation to which value?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4789">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4789</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JohnPublic</b> [ Wed Jan 28, 2009 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CPX... Flags in relation to which value?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm reading through the commodore programmers manual (<!-- m --><a class="postlink" href="http://nesdev.com/6502.txt">http://nesdev.com/6502.txt</a><!-- m -->) and it states that CPX (Compare Memory and Index X) changes the Negative, Zero, and Carry flag.
<br />
<br />I'm a little confused how this works, espically with the carry flag (I understand the carry flag, but since nothing is being added/subtracted theres no overflow). Also, are the flags set being influenced by the value at the memory address or in X?
<br />
<br />
<br />For example:
<br />
<br />If X = 5 and the value at the memory address = 0:
<br />Would no flag be set? Or is it the other way around and the Z flag would be set? 
<br />
<br />Can someone also provide an example of how the carry flag would even fall into all this? Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 28, 2009 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The carry flag is set if the value in X is greather or equal than the value in memory (ungisned), and clear if the value in X is smaller than the value in memory.
<br />
<br />Think as if "memory" was substracted from X as if it was a SBC opcode (also it doesn't substract one more even if C was set prior to the compare), but the resuls is discared, only the flags are taken over

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Wed Jan 28, 2009 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPX... Flags in relation to which value?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JohnPublic wrote:</div><div class="quotecontent">I'm reading through the commodore programmers manual (<!-- m --><a class="postlink" href="http://nesdev.com/6502.txt">http://nesdev.com/6502.txt</a><!-- m -->) and it states that CPX (Compare Memory and Index X) changes the Negative, Zero, and Carry flag.<br /><br />I'm a little confused how this works, espically with the carry flag (I understand the carry flag, but since nothing is being added/subtracted theres no overflow). Also, are the flags set being influenced by the value at the memory address or in X?<br /><br /><br />For example:<br /><br />If X = 5 and the value at the memory address = 0:<br />Would no flag be set? Or is it the other way around and the Z flag would be set? <br /><br />Can someone also provide an example of how the carry flag would even fall into all this? Thanks.</div>
<br />
<br /> First off, the Z flag and C flag are independent of each other in the compare operation. Either one or the other, or both will be set on the result of the compare.
<br />
<br /> To compare something, you take the difference between A and B. So compare is a straight forward subtraction. 
<br />
<br /> You can think of the C flag the same as with normal math:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;&#40;1&#41;6<br />&nbsp; &nbsp;-9<br />&nbsp;-----<br />&nbsp; &nbsp; 7 <br /></div> <br /> A carry <em>would</em> have been needed because 9 is larger than 6. In decimal math, you carry/borrow from the next place depending on the result. In the above example, the 'ones' place would have needed a 'borrow' from the 'tens' place. On the cpu, there is no negative number. Instead, it 'wraps'. $01-$ff=$02. $10-$11=$ff<br /><br /> X=9, memory=6. The result is 7. This result is thrown <span style="text-decoration: underline">away</span> and the flags are set/cleared accordingly. Which flags? The Z=0 was *cleared* because the result of the subtraction <em>didn't</em> end up being 0. The C flag was *set*  (C=1) because a borrow would have been needed. If a borrow was needed, then you know the number in register X is larger than in memory(or immediate or ZP - whatever the operand is).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;ldx #$08<br />&nbsp;cpx #$09<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;c=0, z=0<br /><br />&nbsp;ldx #$08<br />&nbsp;cpx #$09<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;c=1, z=0<br /><br />&nbsp;ldx #$09<br />&nbsp;cpx #$09<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;c=1,z=1<br /></div><br /> See that last one? You would think that C would be cleared because 9 is not larger than 9, so no borrow would have been needed. The explanation for this is a little complicated and not really necessary to understand for you to use it. It' easier just to remember that the C flag is also set if A=B or A-B=0. Looking at an example with branching makes it easy to understand.<br /><br /> <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;ldx #$08<br />&nbsp;cpx #$09&nbsp; &nbsp; &nbsp;;c=0,z=0<br />*bcc less_than<br />&nbsp;beq equal<br />&nbsp;bcs equal_or_greater_than<br /><br />&nbsp;<br />&nbsp;ldx #$09<br />&nbsp;cpx #$08&nbsp; &nbsp; ;c=1, z=0<br />&nbsp;bcc less_than<br />&nbsp;beq equal<br />*bcs equal_or_greater_than<br /><br /><br />&nbsp;ldx #$09<br />&nbsp;cpx #$09&nbsp; &nbsp; ;c=1,z=1<br />&nbsp;bcc less_than<br />*beq equal<br />&nbsp;bcs equal_or_greater_than<br /><br /></div> The * represents which branch is taken. If you don't know your conditional branchs, BCC = branch if carry is clear, BEQ = branch if zero is set, BCS = branch if carry is set. If the condition of a corresponding flag of a conditional branch is not met, the cpu 'falls' through to the next instruction.
<br />
<br />edit: updated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JohnPublic</b> [ Wed Jan 28, 2009 6:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The carry flag is set if the value in X is greather or equal than the value in memory (ungisned), and clear if the value in X is smaller than the value in memory.<br /><br />Think as if "memory" was substracted from X as if it was a SBC opcode (also it doesn't substract one more even if C was set prior to the compare), but the resuls is discared, only the flags are taken over</div>
<br />
<br />Consider the following:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this is a freaky loop<br />&nbsp; &nbsp; &nbsp; &nbsp; lda tilepal, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadpal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.</div>
<br />
<br />bne will keep branching back to loadpal until the Z flag is 1. You stated that the carry flag is set when #32 = X. X will keep increasing until it equals 32. The carry flag however wont influence bne. How would it work in this case?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Wed Jan 28, 2009 7:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Consider the following:<br /><br />Code:<br />loadpal:                ; this is a freaky loop<br />        lda tilepal, x  ; that gives 32 numbers<br />        sta $2007       ; to $2007, ending when<br />        inx             ; X is 32, meaning we<br />        cpx #32         ; are done.<br />        bne loadpal     ; if X isn't =32, goto "loadpal:" line.<br /><br /><br />bne will keep branching back to loadpal until the Z flag is 1. You stated that the carry flag is set when #32 = X. X will keep increasing until it equals 32. The carry flag however wont influence bne. How would it work in this case?</div>
<br />
<br /> Since the BNE only looks at the Z flag, the C flag isn't going to effect anything in that code example. If you wanted to use the C flag instead, then:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; this is a freaky loop<br />&nbsp; &nbsp; &nbsp; &nbsp; lda tilepal, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc loadpal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br /></div><br /><br /> Alternatively, you can<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ldx #$e0<br />&nbsp;loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; this is a freaky loop<br />&nbsp; &nbsp; &nbsp; &nbsp; lda tilepal-$e0, x&nbsp; &nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp; &nbsp; &nbsp; bne loadpal&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JohnPublic</b> [ Wed Jan 28, 2009 8:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok it makes perfect sense now, I had no idea that a CMP was really doing a subtraction the whole time. Thank you very much!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ens_leader</b> [ Thu Jan 29, 2009 12:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">X=8, memory=9. The result is 7. This result is thrown away and the flags are set/cleared accordingly. Which flags? The Z=0 was *cleared* because the result of the subtraction didn't end up being 0.</div><br /><br />8-9 = 7? Huh?<br /><br />I thought it would be -1?<br /><br />Also, there is a contridiction:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">"The C flag was *set* (<strong>C=1</strong>) because a borrow would have been needed."<br /><br />X=8, memory=9.<br /> ldx #$08<br /> cpx #$09<br />                ;<strong>c=0</strong>, z=0</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 29, 2009 2:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, definitely 8-9 can't equal 7 in all existing bases.
<br />
<br />Here if you do something like that :
<br />ldx #$08
<br />cmp #$09
<br />
<br />The 6502 will internally substract 9 from 8, and the result will be $ff, because it's a 8-bit CPU. So you know the Z flag is clear ($ff is not zero), the C flag is clear (the substraction has done an underflow), and the N flag is set (because $ff is negative). The result $ff is of course discarded, but the flag remains. For some reason I never use the N flag after a cmp/cpx/cpy instruction because it's often not usefull in practice, there is most certainly cases where it is usefull but I haven't found any.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Jan 29, 2009 7:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha. I was pretty tired when I wrote that &lt;_&lt;
<br />
<br /> It was supposed to be 
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;&#40;1&#41;6<br />&nbsp; &nbsp;-9<br />&nbsp;-----<br />&nbsp; &nbsp; 7<br /></div>
<br />
<br /> The one's representing LSB and the tens MSB, and the idea of wrapping.
<br /> 
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The 6502 will internally substract 9 from 8, and the result will be $ff</div>
<br />
<br /> Is correct. Don't forget the V flag.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 29, 2009 8:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />CMP doesn't affect the V flag. Also, I think internally the 6502 never subtracts, and implements CMP by setting the carry and complementing (XORing with $FF) the operand before adding. SBC simply complements the operand before adding, which is why you must set the carry first, so that you get two's complement negation (complement then add one). This is why the carry is opposite of what you'd expect, and how it's done on other processors like the GB-Z80. So on them carry set after a CMP would mean the register is less than the operand, whereas it means greater or equal on the 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 29, 2009 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is why the carry is opposite of what you'd expect, and how it's done on other processors like the GB-Z80.</div>
<br />In fact I found it much more logical and convenient to do it the way the 6502 does it. A carry means there is an overflow in the addition. No carry means there is an underflow in the substraction. This perfectly make sense. Also I often write things like that :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda Value<br />&nbsp; sec<br />&nbsp; sbc #$05<br />&nbsp; sta Value<br />&nbsp; bcc _ok<br />&nbsp; sbc #$10<br />_ok<br />&nbsp; sta Value</div>
<br />This code will substract 5 to value, but the result never goes into the $f0-$ff range. This is very usefull to deal with vertical scrolling on the NES for example, but there is many other situations too where this is usefull. If the carry were handled the backwards way like on some other processors, you would end up with much less optimised code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 29, 2009 11:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's some GB-Z80 code that does the same, where carry is handled the opposite way. No less optimized:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ld&nbsp; a,&#40;Value&#41;&nbsp; &nbsp;; a = byte at Value<br />&nbsp; &nbsp; sub $05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; a = a - $05<br />&nbsp; &nbsp; jr&nbsp; c,_ok&nbsp; &nbsp; &nbsp; &nbsp;; if carry, jump to _ok<br />&nbsp; &nbsp; sub $10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; a = a - $10<br />_ok ld&nbsp; &#40;Value&#41;,a&nbsp; &nbsp;; byte at Value = a</div><br />If the 6502 did it the same way, you'd have<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda Value<br />&nbsp; clc<br />&nbsp; sbc #$05<br />&nbsp; bcs _ok<br />&nbsp; sbc #$10<br />_ok<br />&nbsp; sta Value</div><br />Also no less optimal. BTW, your example doesn't make sense to me:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Input: F8 F9 FA FB FC FD FE FF 00 01 02 03 04 05 06 07 08 09 0A<br />Output:E3 E4 E5 E6 E7 E8 E9 EA FB FC FD FE FF F0 F1 F2 F3 F4 F5</div><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is why the carry is opposite of what you'd expect, and how it's done on other processors like the GB-Z80.</div><br />In fact I found it much more logical and convenient to do it the way the 6502 does it. A carry means there is an overflow in the addition. No carry means there is an underflow in the substraction. This perfectly make sense.</div><br />The opposite makes more sense to me, since I think in terms of the addition/subtraction being performed using 9 bits, with the carry being the 9th bit of the result. The left shows normal addition, the middle normal subtraction. But the 6502 does the subtraction as on the right, using addition.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;000000001 &#40;$001&#41;<br />&nbsp; 011111111 &#40;$0FF&#41;&nbsp; &nbsp; &nbsp;000000001 &#40;$001&#41;&nbsp; &nbsp; + 000000001 &#40;$001&#41;<br />+ 000000010 &#40;$002&#41;&nbsp; &nbsp;- 000000011 &#40;$003&#41;&nbsp; &nbsp; &nbsp; 011111100 &#40;$0FC&#41;<br />------------------&nbsp; &nbsp;------------------ -&gt; ------------------<br />&nbsp; 100000001 &#40;$101&#41;&nbsp; &nbsp; &nbsp;111111110 &#40;$1FE&#41;&nbsp; &nbsp; &nbsp; 011111110 &#40;$0FE&#41;<br />thus, carry is set&nbsp; &nbsp;thus, carry is set&nbsp; &nbsp; thus, carry is clear<br />and result is $01&nbsp; &nbsp; &nbsp;and result is $FE&nbsp; &nbsp; &nbsp;and result is $FE</div>
<br />
<br />EDIT: "Output:" above was not what the code actually generated. Corrected.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jan 30, 2009 2:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are right I completely screwed up in my example. The actual thing should look more like that :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda Value<br />&nbsp; sec<br />&nbsp; sbc #$02<br />&nbsp; cmp #$f0<br />&nbsp; bcc _ok<br />&nbsp; sbc #$10<br />_ok<br />&nbsp; sta Value<br /></div><br />There, it removes 2 to value and ensure the result is never in $f0-$ff ranges, which is usefull for vertical scrolling on the NES for example. Tt really show of how usefull it is to have the carry to be handled how the 6502 does. If it did the other way I'd have to do something like :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda Value<br />&nbsp; clc<br />&nbsp; sbc #$05<br />&nbsp; cmp #$f0<br />&nbsp; bcc _ok<br />&nbsp; clc<br />&nbsp; sbc #$10<br />_ok<br />&nbsp; sta Value</div><br />OK nothing too terrible, but the added clc removes all the elegancy of the code.<br />Also when doing an inverse substraction where for some reason you have the value being substracted in A and don't want to use temporary storage :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; jsr DoSomeCalculation<br />&nbsp; eor #$ff<br />&nbsp; sec<br />&nbsp; adc Value<br />&nbsp; sta Value&nbsp; &nbsp; &nbsp; &nbsp;;Value = Value-SomeCalculation</div>
<br />Here you see that in fact it's a substraction rather than an addition thanks to the "sec" opcode. It is quite elegant, but again it would be the same if it were handled the Intel/Zilog way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Jan 30, 2009 4:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">[It] really show of how usefull it is to have the carry to be handled how the 6502 does. If it did the other way I'd have to do something like :<br />[code for hypothetical 6502 whose carry acts the opposite for SBC/CMP]<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda Value<br />&nbsp; clc<br />&nbsp; sbc #$05<br />&nbsp; cmp #$f0<br />&nbsp; bcc _ok<br />&nbsp; clc<br />&nbsp; sbc #$10<br />_ok<br />&nbsp; sta Value</div></div><br />If it were reverse, carry would be set when the value was less than $F0, so you'd do BCS _ok, and then no need to clear it. So it wouldn't require any extra instructions. However, even if that weren't the case, if you knew carry was always going to be set before the SBC #n you'd simply adjust the value you were subtracting. For example (on a real 6502 now), if you wanted the values $F0-$FF unchanged, and the others to have $10 subtracted from them, you could do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda Value <br />&nbsp; cmp #$f0 <br />&nbsp; bcs greater_or_equal<br />&nbsp; sbc #$10-1 ; instead of SEC + SBC $10<br />&nbsp; sta Value <br />greater_or_equal:</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>