<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8602" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-02-10T09:23:30-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8602</id>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-10T09:23:30-07:00</updated>
<published>2012-02-10T09:23:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89819#p89819</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89819#p89819"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89819#p89819"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />You handle zero transitions, one transition, and two transitions, but you need to handle more than that for classical Galois-division noise waveforms. They call that <a href="http://en.wikipedia.org/wiki/Zero_one_infinity_rule" class="postlink">zero one infinity</a>.<br /></div><br /><br />Right ... and I didn't say it's going to be easy to adapt that to the NES APU <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />But I will stay with the downsampling approach <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Fri Feb 10, 2012 9:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-10T06:55:26-07:00</updated>
<published>2012-02-10T06:55:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89812#p89812</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89812#p89812"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89812#p89812"><![CDATA[
<div class="quotetitle">neet wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"> the assumption of only one transition per output sample might screw with high-frequency noise samples (NES noise frequencies 0-3).<br /></div><br />Yep, therefore even the square wave accounts for 6 cases:<br />1. no transition, low<br />2. no transition, high<br />3. low-&gt;high<br />4. high-&gt;low<br />5. low-&gt;high-&gt;low (1 - pw &lt; step)<br />6. high-&gt;low-&gt;high (pw &lt; step)<br /><br />That's not a problem if you handle edge cases correctly <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div><br />You handle zero transitions, one transition, and two transitions, but you need to handle more than that for classical Galois-division noise waveforms. They call that <a href="http://en.wikipedia.org/wiki/Zero_one_infinity_rule" class="postlink">zero one infinity</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 10, 2012 6:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-10T06:07:01-07:00</updated>
<published>2012-02-10T06:07:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89809#p89809</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89809#p89809"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89809#p89809"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Yeah, your technique of box filtering the transitions is the same as "coverage based antialiasing" used in most SVG and TTF renderers. Coverage-based AA introduces gaps in adjacent polygons, just as the assumption of only one transition per output sample might screw with high-frequency noise samples (NES noise frequencies 0-3). BLEP is just the next step on top of that, using a better approximation to sinc instead of a box filter.<br /></div><br /><br />Yep, therefore even the square wave accounts for 6 cases:<br />1. no transition, low<br />2. no transition, high<br />3. low-&gt;high<br />4. high-&gt;low<br />5. low-&gt;high-&gt;low (1 - pw &lt; step)<br />6. high-&gt;low-&gt;high (pw &lt; step)<br /><br />That's not a problem if you handle edge cases correctly <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br /><div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent"><br />Fine then, so it works with `classical waveforms' but it is not a general solution *... Still nice because of its little computational power needed to do this. Will try this when I get the time.<br /><br />* FM sound has no clear transitions in it, yet it generates aliasing, and the above technique wouldn't apply to these waveforms.<br /></div><br /><br />Yep, doesn't work for FM ... FM is really hard to do without aliasing ... but if you're emulating old FM systems ... they all had aliasing <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Fri Feb 10, 2012 6:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2012-02-10T05:48:07-07:00</updated>
<published>2012-02-10T05:48:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89806#p89806</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89806#p89806"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89806#p89806"><![CDATA[
Fine then, so it works with `classical waveforms' but it is not a general solution *... Still nice because of its little computational power needed to do this. Will try this when I get the time.<br /><br />* FM sound has no clear transitions in it, yet it generates aliasing, and the above technique wouldn't apply to these waveforms.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Fri Feb 10, 2012 5:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-10T05:15:25-07:00</updated>
<published>2012-02-10T05:15:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89804#p89804</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89804#p89804"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89804#p89804"><![CDATA[
Yeah, your technique of box filtering the transitions is the same as "coverage based antialiasing" used in most SVG and TTF renderers. Coverage-based AA introduces gaps in adjacent polygons, just as the assumption of only one transition per output sample might screw with high-frequency noise samples (NES noise frequencies 0-3). BLEP is just the next step on top of that, using a better approximation to sinc instead of a box filter.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Feb 10, 2012 5:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-10T03:38:02-07:00</updated>
<published>2012-02-10T03:38:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89802#p89802</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89802#p89802"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89802#p89802"><![CDATA[
<div class="quotetitle">~J-@D!~ wrote:</div><div class="quotecontent"><br />I'm very familiar with direct digital synthesis, but could you explain a bit what is your `quasi band limited direct digital synthesis' ? The problem with simple DDS is obviously easy aliasing with square/saw waves, does it involve something different than oversampling then down-sampling with any method you like (either FIR with windowed sinc or CIC filter (simpler))?<br /></div><br /><br />The trick is to filter only transitions in a wave, and on a per-sample basis. I've used this method for square, saw and triangle. Even hard sync should be possible without aliasing.<br />Explanation: Given is a 32 bit phase accumulator and some 32 bit step. The phase accu is directly used to generate the output wave (as in the MOS SID). Now, when rendering a square wave we know that the transitions from low to high and backwards have the highest harmonics and are responsible for the aliasing noise, so we're just focusing on those 2 cases:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    _____<br />   |<br />   |<br />___|<br />0  1     2</div><br /><br />0 is the last phase (on last sample output)<br />1 is the duty cycle position<br />2 is our next phase (which is: last phase + step)<br /><br />We can detect if there was a transition from low to high and do a simple box filter on the transition:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">out = &#40;0 * &#40;pw - lastPhase&#41; + 1 * &#40;lastPhase + step - pw&#41;&#41; / step</div><br /><br />I'm using 0 for low and 1 for high here because it really simplifies some calculations and do a simple (out * 2 - 1) in the end.<br /><br />So, it's just box filtering the transitions ... a bit tricky to cover all cases for all classic waveforms, but it works, is fast and give good sounding results (no ringing from downsampling).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Fri Feb 10, 2012 3:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2012-02-09T18:27:21-07:00</updated>
<published>2012-02-09T18:27:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89792#p89792</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89792#p89792"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89792#p89792"><![CDATA[
<div class="quotetitle">neet wrote:</div><div class="quotecontent"><br />Yep,thanks I'm familiar with BLIT, BLEP, minBLEP and most other band limited synthesis techniques. I could also implement the APU's sound generation as quasi band limited direct digital synthesis (which is faster than any other band limited approach). But that is (at least for me) no option here.<br />I want to emulate, not improve the NES sound, and the NES did it non band limited.<br />Nevertheless I will have a look at blargg's library. Didn't know such thing existed and I'm always curious about new synthesis stuff <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /></div><br /><br />I'm very familiar with direct digital synthesis, but could you explain a bit what is your `quasi band limited direct digital synthesis' ? The problem with simple DDS is obviously easy aliasing with square/saw waves, does it involve something different than oversampling then down-sampling with any method you like (either FIR with windowed sinc or CIC filter (simpler))?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Thu Feb 09, 2012 6:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-09T14:36:04-07:00</updated>
<published>2012-02-09T14:36:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89781#p89781</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89781#p89781"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89781#p89781"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Let me guess: German?<br /></div><br />Yep <img src="http://forums.nesdev.com/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />But if the period of a periodic signal divides evenly into the sample rate ... the aliases fall right back on the same frequencies.<br /></div><br />What the frell ... you're so right^^<br />This is a fact which I really have forgotten. That's the thing about doing bandlimited synthesis for VSTi's at 44.1kHz ... there's nearly no frequency an integer multiple of the sampling rate.<br /><br />Now that I have that back in memory I can admit that using bandlimited 'building blocks' for emulating the NES APU sound is totally correct <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Thanks <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Thu Feb 09, 2012 2:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-09T13:56:01-07:00</updated>
<published>2012-02-09T13:56:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89775#p89775</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89775#p89775"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89775#p89775"><![CDATA[
<div class="quotetitle">neet wrote:</div><div class="quotecontent"><br />But, the NES does the following:<br />1. Generate non band limited digital audio (with aliasing)<br />2. Low pass filter it (aliasing ist still there!)<br /></div><br />Let me guess: German?<br /><br />You could characterize the output of each APU channel as piecewise periodic, with the period and amplitude changing after each update usually once a frame. But if the period of a periodic signal divides evenly into the sample rate, which is the case with all PSGs in the APU, the aliases fall right back on the same frequencies. This means the aliasing is not only "nearly inaudible" but actually inaudible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 09, 2012 1:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-02-09T12:39:38-07:00</updated>
<published>2012-02-09T12:39:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89769#p89769</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89769#p89769"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89769#p89769"><![CDATA[
<div class="quotetitle">neet wrote:</div><div class="quotecontent"><br />You lose the aliasing the real NES produced (even if it should be nearly inaudible).<br /><br />... I'm a bit picky about audio^^ I like it authentic <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /></div><br />Have you actually calculated the volume(s) of the aliased harmonics? They're bound the pretty damn low. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Feb 09, 2012 12:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-09T12:07:18-07:00</updated>
<published>2012-02-09T12:07:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89768#p89768</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89768#p89768"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89768#p89768"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">neet wrote:</div><div class="quotecontent">I want to emulate, not improve the NES sound, and the NES did it non band limited.<br /></div><br />I was under the impression that the RF block in the original Famicom and the NES did some low-pass filtering when modulating audio into a TV signal. When you filter audio using Blip Buffer or any other BLEP library, you're just emulating the low-pass characteristic inherent in the amplifier and speaker in the TV to which an NES was typically connected.</div><br /><br />The NES will of course do some lowpass filtering, it can't mix an audio signal with 1.8MHz bandwidth into the composite signal, this is totally correct.<br /><br />But, the NES does the following:<br />1. Generate non band limited digital audio (with aliasing)<br />2. Low pass filter it (aliasing ist still there!)<br /><br />And with blip_buffer:<br />1. Generate filtered, bandlimited digital audio (no aliasing)<br /><br />You lose the aliasing the real NES produced (even if it should be nearly inaudible).<br /><br />... I'm a bit picky about audio^^ I like it authentic <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Thu Feb 09, 2012 12:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-09T11:29:53-07:00</updated>
<published>2012-02-09T11:29:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89767#p89767</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89767#p89767"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89767#p89767"><![CDATA[
<div class="quotetitle">neet wrote:</div><div class="quotecontent"><br />I want to emulate, not improve the NES sound, and the NES did it non band limited.<br /></div><br />I was under the impression that the RF block in the original Famicom and the NES did some low-pass filtering when modulating audio into a TV signal. When you filter audio using Blip Buffer or any other BLEP library, you're just emulating the low-pass characteristic inherent in the amplifier and speaker in the TV to which an NES was typically connected.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 09, 2012 11:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-09T08:57:08-07:00</updated>
<published>2012-02-09T08:57:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89763#p89763</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89763#p89763"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89763#p89763"><![CDATA[
Yep,thanks I'm familiar with BLIT, BLEP, minBLEP and most other band limited synthesis techniques. I could also implement the APU's sound generation as quasi band limited direct digital synthesis (which is faster than any other band limited approach). But that is (at least for me) no option here.<br />I want to emulate, not improve the NES sound, and the NES did it non band limited.<br />Nevertheless I will have a look at blargg's library. Didn't know such thing existed and I'm always curious about new synthesis stuff <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Thu Feb 09, 2012 8:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-02-09T07:59:22-07:00</updated>
<published>2012-02-09T07:59:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89760#p89760</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89760#p89760"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89760#p89760"><![CDATA[
You should understand the concept of <a href="http://en.wikipedia.org/wiki/Sample_and_hold" class="postlink">sample and hold</a> and what a <a href="http://en.wikipedia.org/wiki/Heaviside_step_function" class="postlink">Heaviside step function</a> and <a href="http://en.wikipedia.org/wiki/Step_response" class="postlink">step response</a> look like before reading the rest of this post.<br /><br />Got it? Good.<br /><br />Each of the five channels in the NES APU outputs a signal consisting of sample-and-hold segments. Each change in the signal level is a scaled, time-shifted step. Therefore, you can represent the APU's output as a sum of such steps, which reduces the problem to band-limiting each step. It turns out that you can render a step at each of 40 or so time-shifts and apply a low-pass filter and decimation to each, producing a bank of step responses. Then sum the step responses corresponding to each step in the APU's output. This is the approach taken by blargg's <a href="http://slack.net/~ant/libs/audio.html#Blip_Buffer" class="postlink">Blip Buffer library</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 09, 2012 7:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neet]]></name></author>
<updated>2012-02-09T06:04:31-07:00</updated>
<published>2012-02-09T06:04:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89756#p89756</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89756#p89756"/>
<title type="html"><![CDATA[Basic DSP and NES APU emulation.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8602&amp;p=89756#p89756"><![CDATA[
I've been talking a lot about FIR filters and its taps, but didn't provide any method to calculate the taps/coefficients for a given sample rate and cutoff frequency. <a href="http://rjeschke.tumblr.com/post/8382596050/fir-filters-in-practice" class="postlink">Here</a> is a blog post of mine which gives some Java code to calculated FIR filter coefficients for all filter types.<br /><br />Of course you could just use a so-called box filter for FIR filtering. A box filter is just averaging:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">output = &#40;input&#91;x-2&#93; + input&#91;x-1&#93; + input&#91;x-0&#93;&#41; / 3</div><br />But I don't recommend that, here are some images displaying why you should not use 'just-sum-all-40-samples-and-divide-by-40':<br /><br />Short explanantion for the images: These are frequency responses. They show a filters attenuation for various frequencies. The vertical lines from left to right are logarithmic frequencies, i.e. the image starts a 0 hz, next lines are 1 to 10 Hz, 20 to 1,000, 2,000 to 10,000, 20,000 to 100,000 and up to 900k.  The horizontal lines are dB values. Top is +12 dB, lines are +6, +0, -6, -12, -24, -48, -96.<br /><br />This is the sum-40-and-divide box filter:<br /><img src="http://dl.dropbox.com/u/11133993/box40.png" alt="Image" /><br /><br />and this is a blackman windowed, 801 tap lowpass with a cutoff of 15kHz:<br /><img src="http://dl.dropbox.com/u/11133993/fir800.png" alt="Image" /><br /><br />The first filter has an attenuation of about 3dB at 20kHz, the second has ~40dB. The box filter also does not attenuate higher frequencies very well, so you will get lots of aliasing noise.<br /><br />More later (I'll also write about APU emulation later), <strong>and please, feel free to ask questions</strong>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5175">neet</a> — Thu Feb 09, 2012 6:04 am</p><hr />
]]></content>
</entry>
</feed>