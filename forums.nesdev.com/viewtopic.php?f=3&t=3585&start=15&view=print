<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What is WRONG with my PPU???</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What is WRONG with my PPU???</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3585">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3585</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Mon Sep 17, 2007 4:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK so (if rendering is on)...
<br />
<br />    if (S.PPU_Scanline == 0)         S.vAddr = S.vAddr_Latch &amp; 0x3FFF;
<br />
<br />And after rendering the scanline's BG, but before HBLANK:
<br />
<br />    S.vAddr = S.vAddr &amp; 0x41F | (S.vAddr_Latch &amp; 0x41F);
<br />
<br />This is in addition to my previous modifications to vAddr, correct? Did they all look right?
<br />
<br />If I'm all set with vAddr updates, I presume now I should be calculating X and Y from this. First, let me show you how I'm doing it now:
<br />
<br />1. Set S.PPU_SCROLL_X and S.PPU_SCROLL_Y using [the wrong] methods in the registers
<br />2. Calculate the values that the DrawScanline function REALLY uses:
<br />
<br />
<br />  S.PPU_SCROLL_Y_BYTE = (S.PPU_SCROLL_Y &gt;&gt; 3);
<br />  S.PPU_SCROLL_Y_BIT  = (S.PPU_SCROLL_Y &amp; 7);
<br />  S.PPU_SCROLL_X_BYTE = (S.PPU_SCROLL_X &gt;&gt; 3);
<br />  S.PPU_SCROLL_X_BIT  = (S.PPU_SCROLL_X &amp; 7);
<br />
<br />So, should I throw all of this away and do it some other way? If keeping the above code makes sense, then I just need to know how and when to develop S.PPU_SCROLL_X and S.PPU_SCROLL_Y.
<br />
<br />Otherwise, I need to understand the whole caboodle.
<br />
<br />I see the previous posts about how to get it from the vAddr, except for Fine-X (where is that btw)... should I be using that, and if so, when specifically?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Mon Sep 17, 2007 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Current state of my code:
<br />
<br />Read Operations:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; case 0x2000:&nbsp; /* PPU */<br />&nbsp; &nbsp; &nbsp; &nbsp; switch&#40; wAddr &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#40;0x2007&#41;: /* VRAM Read */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.vAddr &lt;0x3F00&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wScratch = S.vAddr;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wScratch &amp;= 0x3FFF;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bScratch = S.PPU_R7;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R7 = W.PPUBANK&#91; wScratch &gt;&gt; 10 &#93;&#91; wScratch &amp; 0x3FF &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125; else &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bScratch = W.PPUBANK&#91; wScratch &gt;&gt; 10 &#93; &#91; wScratch &amp; 0x3FF &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr += &#40;S.PPU_R0 &amp; R0_INC_ADDR&#41; ? 0x20 : 0x01;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr &amp;= 0x3FFF;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return bScratch;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#40;0x2004&#41;: /* SPR-RAM Read */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return S.SPRRAM&#91; S.PPU_R3 &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#40;0x2002&#41;:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_Latch_Flag = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return S.PPU_R2;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default: /* $2000, $2001, $2003, $2005, $2006 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return S.PPU_R7;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /></div><br /><br />Write Operations:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;case 0x2000:&nbsp; /* PPU */<br />&nbsp; &nbsp; &nbsp; switch &#40; wAddr &#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2000: /* PPU Control Register 1 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R0 = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_SP_Height&nbsp; &nbsp; &nbsp;= &#40;S.PPU_R0 &amp; R0_SP_SIZE&#41; ? 0x10 : 0x08;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPU_BG = &#40;S.PPU_R0 &amp; R0_BG_ADDR&#41; ? S.ChrBuf + 0x4000 : S.ChrBuf;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPU_SP = &#40;S.PPU_R0 &amp; R0_SP_ADDR&#41; ? S.ChrBuf + 0x4000 : S.ChrBuf;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_NameTable = NAME_TABLE0 + &#40; S.PPU_R0 &amp; R0_NAME_ADDR &#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2001: /* PPU Control Register 2 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R1 = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2002: /* PPU Status - NOT WRITABLE */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2003: /* Sprite RAM ADDR */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R3 = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2004: /* Sprite RAM DATA */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.SPRRAM&#91; S.PPU_R3++ &#93; = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2005: /* Scroll Register */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.PPU_Latch_Flag ^= 1&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R5A = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125; else &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R5B = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.PPU_R5B &gt; 240&#41;&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_NameTable ^= NAME_TABLE_V_MASK;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2006: /* VRAM Address Register */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.PPU_Latch_Flag ^= 1&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.PPU_R6A = byData;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr_Latch = &#40;S.vAddr_Latch &amp; 0xFF&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &#40;&#40;word&#41; &#40;byData &amp; 0xFF&#41; &lt;&lt; 8&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.PPU_R6B = byData;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr_Latch = &#40;S.vAddr_Latch &amp; 0xFF00&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &#40;&#40;word&#41; byData &amp; 0xFF&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr = S.vAddr_Latch &amp; 0x3FFF;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /></div><br /><br />Scroll development (called every scanline at the moment)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void NESCore_Develop_Scroll_Values&#40;&#41; &#123;<br /><br />&nbsp; S.PPU_SCROLL_Y_BYTE = &#40;S.vAddr &gt;&gt; 5&#41; &amp; 0x1F;<br />&nbsp; S.PPU_SCROLL_Y_BIT&nbsp; = &#40;S.vAddr &gt;&gt; 12&#41; &amp; 0x07;<br /><br />&nbsp; S.PPU_SCROLL_X_BYTE = &#40;S.vAddr &amp; 0x1F&#41;;<br />&nbsp; S.PPU_SCROLL_X_BIT&nbsp; = &#40;S.PPU_R5A &amp; 0x7&#41;;<br />&#125;<br /><br /></div><br /><br />Within DrawScanline:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;if &#40;!&#40; S.PPU_R1 &amp; R1_SHOW_SCR &#41;&#41;<br />&nbsp; &#123;<br />&nbsp; &nbsp; /* Clear scanline if display is off */<br />&nbsp; &nbsp; memset&#40; pPoint, 0, NES_DISP_WIDTH &lt;&lt; 1 &#41;; /* Assumes 16-Bit buffer! */<br />&nbsp; &nbsp; Exec6502&#40;&amp;S.m6502_state, 85&#41;;<br />&nbsp; &#125;<br />&nbsp; else<br />&nbsp; &#123;<br /><br />&nbsp; &nbsp; if &#40;S.PPU_Scanline == 0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; S.vAddr = S.vAddr_Latch &amp; 0x3FFF;<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; NESCore_Develop_Scroll_Values&#40;&#41;;<br /><br />...<br /></div><br /><br />Before HBLANK:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; S.vAddr = S.vAddr &amp; 0x41F | &#40;S.vAddr_Latch &amp; 0x41F&#41;;<br /></div>
<br />
<br />So far, things look wonky but I hope I'm close.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Mon Sep 17, 2007 6:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I strongly recommend that you read Brad Taylor's PPU document:
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/2C02%20technical%20reference.TXT">http://nesdev.com/2C02%20techn ... erence.TXT</a><!-- m -->
<br />
<br />This explains in detail how the NES PPU works, inclusing how the BG and sprite layers are rendered and when during a scanline/frame things take place.
<br />
<br />Here's a summary of how the PPU address/scroll registers work:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">V = active VRAM address<br />T = VRAM address latch<br />X = fine X scroll register<br /><br />$2000 Write:<br />T = &#40;T &amp; 0x0C00&#41; | &#40;data &lt;&lt; 10&#41;;<br /><br />$2005 First Write:<br />T = &#40;T &amp; 0x7FE0&#41; | &#40;data &gt;&gt; 3&#41;;<br />X = data &amp; 0x07;<br /><br />$2005 Second Write:<br />T = &#40;T &amp; 0x0C1F&#41; | &#40;&#40;data &amp; 0x07&#41; &lt;&lt; 12&#41; | &#40;&#40;data &amp; 0xF8&#41; &lt;&lt; 2&#41;;<br /><br />$2006 First Write:<br />T = &#40;T &amp; 0x00FF&#41; | &#40;&#40;data &amp; 0x3F&#41; &lt;&lt; 8&#41;;<br /><br />$2006 Second Write:<br />T = &#40;T &amp; 0x7F00&#41; | data;<br />V = T;<br /><br />$2007 Write:<br />if &#40;&#40;V &amp; 0x3F00&#41; == 0x3F00&#41;<br />&nbsp; &nbsp; palette&#91;&#40;V &amp; 0x3&#41; ? V &amp; 0x1F : V &amp; 0x0F&#93; = data &amp; 0x3F;<br />else<br />&nbsp; &nbsp; PerformVRAMWrite&#40;V &amp; 0x3FFF, data&#41;;<br />V = &#40;V + &#40;&#40;$2000 &amp; 0x04&#41; ? 0x20 : 0x01&#41; &amp; 0x7FFF;<br /><br />$2007 Read:<br />if &#40;&#40;V &amp; 0x3F00&#41; == 0x3F00&#41;<br />&nbsp; &nbsp; data = palette&#91;&#40;V &amp; 0x3&#41; ? V &amp; 0x1F : V &amp; 0x0F&#93;;<br />else<br />&nbsp; &nbsp; data = readBuffer;<br />readBuffer = PerformVRAMRead&#40;V &amp; 0x3FFF&#41;;<br />V = &#40;V + &#40;&#40;$2000 &amp; 0x04&#41; ? 0x20 : 0x01&#41; &amp; 0x7FFF;<br /><br />Vertical Reset:<br />V = T;<br /><br />Horizontal Reset:<br />V = &#40;V &amp; 0x7BE0&#41; | &#40;T &amp; 0x041F&#41;;<br /><br />Vertical Increment:<br />V = &#40;V + 0x1000&#41; &amp; 0x7FFF;<br />if &#40;&#40;V &amp; 0x7000&#41; == 0&#41;<br />&#123;<br />&nbsp; &nbsp; V = &#40;V &amp; 0x7C1F&#41; | &#40;&#40;V + 0x20&#41; &amp; 0x03E0&#41;;<br />&nbsp; &nbsp; if &#40;&#40;V &amp; 0x03E0&#41; == 0x03C0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; V = &#40;V &amp; 0x7C1F&#41; ^ 0x0800&#41;;<br />&#125;<br /><br />Horizontal Increment:<br />V = &#40;V &amp; 0x7FE0&#41; | &#40;&#40;V + 0x01&#41; &amp; 0x1F&#41;;<br />if &#40;&#40;V &amp; 0x1F&#41; == 0&#41;<br />&nbsp; &nbsp; V ^= 0x0400;</div>
<br />
<br />Vertical reset occurs at cycle 304 of the "dummy" scanline (in Brad Taylor's document, this is scanline 20).  Horizontal reset occurs once per scanline, including the dummy scanline, at cycle 257 (right after H-Blank).  Vertical increment occurs once per scanline as well, but at cycle 251 (shortly BEFORE H-Blank).
<br />
<br />Horizontal increment occurs 34 times per scanline, at cycle 3 of each 8-cycle rotation (that is, at cycles 3, 11, 19, 27, etc., as well as at cycles 323 and 331 at the end of H-Blank).
<br />
<br />It may not be possible to implement this and maintain full speed on devices such as the iPhone.  However, numerous NES titles rely on this behavior to work properly, so if your goal is accuracy, you'll have to implement it.  (Nestopia is an emulator that has this implemented, and it actually runs slower than some <strong>Super</strong> NES emulators, to give an idea.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Mon Sep 17, 2007 6:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Horizontal increment occurs 34 times per scanline, at cycle 3 of each 8-cycle rotation (that is, at cycles 3, 11, 19, 27, etc., as well as at cycles 323 and 331 at the end of H-Blank). </div>
<br />
<br />Is there a calculation that works on a per-pixel basis?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Mon Sep 17, 2007 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As far as accuracy goes, I'd just like rad racer, smb3, and others to work - I don't need to run obscure japanese games, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Tue Sep 18, 2007 4:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You do not need a per-pixel renderer to fix the gross graphical errors in games like Rad Racer and Crystalis. That only requires implementing rendering per scanline using the VRAM address. If your target platform is the iPhone or other handheld devices, then per-pixel rendering would be far too slow anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Tue Sep 18, 2007 5:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Right now i just want to use whatever's going to get most of the popular games to run. I don't think I'm going to have enough resources for a perfect emulator. But if you guys can help get rad racer and others working that would be great. This is the latest state of the code, I think it's sick... 
<br />
<br />Read Ops:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; case 0x2000:&nbsp; /* PPU */<br />&nbsp; &nbsp; &nbsp; &nbsp; switch&#40; wAddr &#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#40;0x2007&#41;: /* VRAM Read */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.vAddr &lt;0x3F00&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wScratch = S.vAddr;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wScratch &amp;= 0x3FFF;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bScratch = S.PPU_R7;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R7 = W.PPUBANK&#91; wScratch &gt;&gt; 10 &#93;&#91; wScratch &amp; 0x3FF &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125; else &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bScratch = W.PPUBANK&#91; wScratch &gt;&gt; 10 &#93; &#91; wScratch &amp; 0x3FF &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr += &#40;S.PPU_R0 &amp; R0_INC_ADDR&#41; ? 0x20 : 0x01;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr &amp;= 0x3FFF;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return bScratch;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#40;0x2004&#41;: /* SPR-RAM Read */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return S.SPRRAM&#91; S.PPU_R3 &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#40;0x2002&#41;:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_Latch_Flag = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = S.PPU_R2;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R2 &amp;= 0x7F;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ret;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default: /* $2000, $2001, $2003, $2005, $2006 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return S.PPU_R7;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; break;<br /></div><br /><br />Write Ops:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; case 0x2000:&nbsp; /* PPU */<br />&nbsp; &nbsp; &nbsp; switch &#40; wAddr &#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2000: /* PPU Control Register 1 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R0 = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_SP_Height&nbsp; &nbsp; &nbsp;= &#40;S.PPU_R0 &amp; R0_SP_SIZE&#41; ? 0x10 : 0x08;^M<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPU_BG = &#40;S.PPU_R0 &amp; R0_BG_ADDR&#41; ? S.ChrBuf + 0x4000 : S.ChrBuf;^M<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPU_SP = &#40;S.PPU_R0 &amp; R0_SP_ADDR&#41; ? S.ChrBuf + 0x4000 : S.ChrBuf;^M<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_NameTable = NAME_TABLE0 + &#40; S.PPU_R0 &amp; R0_NAME_ADDR &#41;;^M<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr_Latch = &#40;S.vAddr_Latch &amp; 0xF3FF&#41; | &#40;&#40;word&#41;&#40;byData &amp; 3&#41; &lt;&lt; 10&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2001: /* PPU Control Register 2 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R1 = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2002: /* PPU Status - NOT WRITABLE */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2003: /* Sprite RAM ADDR */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_R3 = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2004: /* Sprite RAM DATA */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.SPRRAM&#91;S.PPU_R3&#93; = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2005: /* Scroll Register */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lowerBits = &#40;byData &amp; 7&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; upperBits = &#40;byData &gt;&gt; 3&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.PPU_Latch_Flag&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if &#40;byData &gt; 240&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_NameTable ^= NAME_TABLE_V_MASK;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr_Latch = &#40;S.vAddr_Latch &amp; 0x8C1F&#41; | &#40;upperBits &lt;&lt; 5&#41; |<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#40;lowerBits &lt;&lt; 12&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr_Latch = &#40;S.vAddr_Latch &amp; 0xFFE0&#41; | upperBits;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.PPU_R5A = lowerBits;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_Latch_Flag ^= 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2006: /* VRAM Address Register */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.PPU_Latch_Flag&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr_Latch = &#40;S.vAddr_Latch &amp; 0xFF00&#41; | byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr = S.vAddr_Latch;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;S.vAddr_Latch = &#40;&#40;byData &amp; 0x3F&#41; &lt;&lt; 8&#41; | &#40;S.vAddr_Latch &amp; 0xFF&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPU_Latch_Flag ^= 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; case 0x2007: /* VRAM Data */<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wScratch = S.vAddr;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wScratch &amp;= 0x3FFF;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr += &#40;S.PPU_R0 &amp; R0_INC_ADDR&#41; ? 0x20 : 0x01;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;S.vAddr &gt; 0x3FFF&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.vAddr &amp;= 0x3FFF;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if &#40;wScratch &lt; 0x2000 &amp;&amp; S.VRAMWriteEnable&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Pattern Data */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.ChrBufUpdate |= &#40; 1 &lt;&lt; &#40; wScratch &gt;&gt; 10 &#41; &#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPUBANK&#91; wScratch &gt;&gt; 10 &#93;&#91; wScratch &amp; 0x3FF &#93; = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if &#40;wScratch &lt; 0x3F00 &#41;&nbsp; /* 0x2000 - 0x3EFF */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Name Table and Mirror */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPUBANK&#91; &#40;wScratch&#41; &gt;&gt; 10 &#93;&#91; wScratch &amp; 0x3ff &#93; = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W.PPUBANK&#91; &#40;wScratch ^ 0x1000&#41; &gt;&gt; 10&#93;&#91; wScratch &amp; 0x3FF &#93; = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if &#40;!&#40;wScratch &amp; 0xF&#41;&#41;&nbsp; /* 0x3F00 or 0x3F10 */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Palette Mirror */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPURAM&#91; 0x3f10 &#93; = S.PPURAM&#91; 0x3f14 &#93; = S.PPURAM&#91; 0x3f18 &#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = S.PPURAM&#91; 0x3f1c &#93; = S.PPURAM&#91; 0x3f00 &#93; = S.PPURAM&#91; 0x3f04 &#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = S.PPURAM&#91; 0x3f08 &#93; = S.PPURAM&#91; 0x3f0c &#93; = byData;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PalTable&#91; 0x00 &#93; = S.PalTable&#91; 0x04 &#93; = S.PalTable&#91; 0x08 &#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = S.PalTable&#91; 0x0c &#93; = S.PalTable&#91; 0x10 &#93; = S.PalTable&#91; 0x14 &#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = S.PalTable&#91; 0x18 &#93; = S.PalTable&#91; 0x1c &#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = NesPalette&#91; byData &#93; | 0x8000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else if &#40;wScratch &amp; 0x03&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Palette */<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PPURAM&#91; wScratch &#93; = byData;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S.PalTable&#91; wScratch &amp; 0x1f &#93; = NesPalette&#91; byData &#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &#125;<br /></div><br /><br />Scroll Registers:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void NESCore_Develop_Scroll_Values&#40;&#41; &#123;<br /><br />&nbsp; S.PPU_SCROLL_Y_BYTE = &#40;S.vAddr &gt;&gt; 5&#41; &amp; 0x1F;<br />&nbsp; S.PPU_SCROLL_Y_BIT&nbsp; = &#40;S.vAddr &gt;&gt; 12&#41; &amp; 0x07;<br /><br />&nbsp; S.PPU_SCROLL_X_BYTE = &#40;S.vAddr &amp; 0x1F&#41;;<br />&nbsp; S.PPU_SCROLL_X_BIT&nbsp; = S.PPU_R5A;<br />&#125;<br /></div><br /><br />Increments:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; if &#40;!&#40; S.PPU_R1 &amp; R1_SHOW_SCR &#41;&#41;<br />&nbsp; &#123;<br />&nbsp; &nbsp; /* Clear scanline if display is off */<br />&nbsp; &nbsp; memset&#40; pPoint, 0, NES_DISP_WIDTH &lt;&lt; 1 &#41;; /* Assumes 16-Bit buffer! */<br />&nbsp; &nbsp; Exec6502&#40;&amp;S.m6502_state, 85&#41;;<br />&nbsp; &#125;<br />&nbsp; else<br />&nbsp; &#123;<br /><br />&nbsp; &nbsp; if &#40;S.PPU_Scanline == 0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; S.vAddr = S.vAddr_Latch &amp; 0x7FFF;<br />...<br /><br />End of HBLANK<br /><br />&nbsp; &nbsp; S.vAddr = &#40;S.vAddr &amp; 0xFBE0&#41; | &#40;S.vAddr_Latch &amp; 0x41F&#41;;<br /><br /><br /></div>
<br />
<br />The last increment there after the hblank seems to break a lot of stuff as well, although more appears to be broken.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Tue Sep 18, 2007 7:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm getting a lot closer; implemented horizontal / vertical increments.  I think the biggest problem right now is selection of the proper name table. $2000 sets the name table, and $2005 flips it if bData &gt; 240. I also flip it locally inside my rendering routines for vertical / horizontal mirroring. Is there some other way I should be doing it? I tried reloading it after each clock, but that doesn't seem to set it right either.
<br />
<br />EDIT: It looks like nY is never &gt; 29 any more now that I'm doing it right, so how can I tell if I need to flip the name table?
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;/* Develop Scroll Values */<br />&nbsp; &nbsp; PPU_SCROLL_Y_BYTE = &#40;S.vAddr &gt;&gt; 5&#41; &amp; 0x1F;<br />&nbsp; &nbsp; PPU_SCROLL_Y_BIT&nbsp; = &#40;S.vAddr &gt;&gt; 12&#41; &amp; 0x07;<br />&nbsp; &nbsp; PPU_SCROLL_X_BYTE = &#40;S.vAddr &amp; 0x1F&#41;;<br />&nbsp; &nbsp; PPU_SCROLL_X_BIT&nbsp; = S.FineX; <br /><br />&nbsp; &nbsp; nY = PPU_SCROLL_Y_BYTE;<br />&nbsp; &nbsp; nX = PPU_SCROLL_X_BYTE;<br />&nbsp;<br />&nbsp; &nbsp; nYBit = PPU_SCROLL_Y_BIT; <br />&nbsp; &nbsp; nYBit &lt;&lt;= 3;<br />&nbsp;<br />&nbsp; &nbsp; /* Name Table Selection: Flip for vertical scrolling */<br />&nbsp; &nbsp; nNameTable = S.PPU_NameTable;<br />&nbsp; &nbsp; if &#40;nY &gt; 29&#41; &#123;&nbsp; &lt;-------- NEVER TRUE<br />&nbsp; &nbsp; &nbsp; &nbsp; nY -= 30;&nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; nNameTable ^= NAME_TABLE_V_MASK;<br />&nbsp; &nbsp; &#125;<br /></div>[/quote]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 18, 2007 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NerveGas wrote:</div><div class="quotecontent">EDIT: It looks like nY is never &gt; 29 any more now that I'm doing it right, so how can I tell if I need to flip the name table?</div>
<br />You don't "flip" VRAM address bit 11 ($0800) when a "high" Y scroll value is written through $2005 or $2006. The hardware renders rows 30, 31, 0, 1, 2, 3, ... of a single nametable. Bit 11 changes during rendering only when the VRAM address updates after the bottom line of row 29.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Tue Sep 18, 2007 8:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah ok, so I get it from vAddr... how often should i update that, every scanline?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Tue Sep 18, 2007 7:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awright well things are finally starting to shape up, SMB3 is running properly, and rad racer looks good except for a few glitches (some gaps, and tracks in the distance are choppy). Overall though, a lot of games are rendering properly now. 
<br />
<br />One strange thing that happened - rolling thunder and gi joe no longer run at all. They didn't run to begin with, after forking the project, but with a little massaging of the PPU, they did come up for a bit. Now I just get a blank screen once again, and I can tell they haven't initialized. Any ideas what might be causing this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Fri Sep 21, 2007 9:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm having trouble figuring out a good way to get the code running on Windows. Are you doing all your testing on the iPhone?
<br />
<br />What is the current speed of execution on the iPhone? Does it require frameskipping?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Sat Sep 22, 2007 8:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think we figured out rolling thunder and GI joe...there's a crucial 6-steps between vblank and the NMI that need to get executed. We also weren't counting the 512 steps for DMA... fixing all that seemed to fix everything in the code.
<br />
<br />On the iphone, it's auto-frameskip...i'm getting around 1 or 2 skip. It still runs pretty smooth.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh</b> [ Sat Sep 22, 2007 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to think of ways that the rendering code might be optimized. It should be possible to draw 2 pixels per operation by using a short (16x4) look-up table to convert the planar bits to a 32-bit int. Do you happen to know if there's a penalty for unaligned DWORD-length writes on the iPhone's ARM CPU? That would make a difference in how such an algorithm would be implemented.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NerveGas</b> [ Sat Sep 22, 2007 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure, but you can try it. Another method might be to try using OpenGL ES instead of CoreSurfaces. I suspect, though, that OpenGL would have to go through CoreSurfaces, so that may prove counter-intuitive.
<br />
<br />I'd like to find ways to optimize the mapper 5 code...it appears to run _very_ slow. Making Castlevania III and other mapper 5 games run may prove more useful than optimizing video.
<br />
<br />My current hit list is:
<br />- Mapper 5 too slow / not completely right
<br />- Mapper 119 (Which should be the same as mapper 4, but with RAM/ROM selection on bit 6); yet pinbot and high speed don't render properly.
<br />- Rad Racer 2 has a completely mangled background
<br />- When I set VBLANK START to 141 (where it should be) instead of 143, weird things happen in Mach Rider (screen flicker); trying to find the root of the problem.
<br />- Star Wars doesn't initialize
<br />- Cool Spot doesn't initialize
<br />- Green background in Fantasy Zone
<br />- Kung Fu and Rad Racer render OK, but due to (possibly) sprite hit stuff (which jodan is working on fixing), there is some distortion
<br />- Punchout / Mike Tyson's Punchout has some rendering glitches on the title screen and in-between certain rounds (such as Von Kaiser)
<br />- NES Scroll Test still fails vertically (might just be a lame test)
<br />- TMNT 3 doesnt initialize
<br />- Videomation appears to be broken (mapper problem?)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>