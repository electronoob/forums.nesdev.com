<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Improving UxROM - New mapper ideas</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Improving UxROM - New mapper ideas</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5564">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5564</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 13, 2009 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Improving UxROM - New mapper ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been recently toying around with making an Atari 2600 dev cart with bankswitching with the help from Bregalad and the folks from AtariAge (who tried to explain me what resistors and capacitor are for), and that has got me thinking about circuits and logic a lot. For some reason that made me want to try some modifications on NES carts.
<br />
<br />I like UxROM a lot because of it's simplicity. Recently Memblers talked about adding more PRG ROM banks to it, something we could do by adding another '161 chip. We'd need another '32 as well, because of the extra address lines. That' simple enough.
<br />
<br />Something I always wanted that I've never seen in discrete logic mappers is mirroring control. I don't know why it's not common, because I gave some thought to it and seems simple enough. Considering M to be the mirroring layout bit (0 = vertical, 1 = horizontal), also to be stored on the '161, the following formula appears to work well: CIRAM A10 = (CHR A10 AND NOT M) OR (CHR A11 AND M).
<br />
<br />The OR could be done with the new '32, but another chip would be needed for the ANDs and the NOT. Since we'll have these new chips, we don't need to settle for just vertical/horizontal, we can even add 1-screen/2-screen selection!
<br />
<br />If instead of sending the result from the previous operation directly to CIRAM A10, we call it R and the new mirroring type selection T (0 = 2-screen, 1 = 1-screen), the following formula can be used: CIRAM A10 = (R AND NOT T) OR (M AND T). This will make M go straight to CIRAM A10. The same OR, AND and NOT ICs from before can be used.
<br />
<br />The final combinations for mirroring would be the following:
<br />
<br />00 2-screen, vertical mirroring;
<br />01 2-screen, horizontal mirroring;
<br />10 1-screen, $2000;
<br />11 1-screen, $2400;
<br />
<br />Another thing I'd like to do is get rid of bus conflicts. From the pinouts I've seen, it appears to be a very simple procedure that can be done with a single NOR IC. Maybe there are even some free gates in this IC to handle the 2 NOTs necessary for the mirroring.
<br />
<br />Does this look like an interesting idea? I don't know if the implementation is as simple as it seems, because my knowledge of electronics is very limited, so you tell me. I'd really enjoy these few improvements over UxROM.
<br />
<br />In fact, I've been thinking of all sorts of mapper features that could be made with discrete logic, but I'm not very good with hardware. Do you guys have any ideas on how to implement more complex things such as CHR bankswitching in small chunks, scanline/cycle counters, extra RAM, 4-screen and things like that? I'd be very interested in creating carts with combinations of those features, as long as it doesn't end as a monstrosity of ICs (at least not one that could harm the NES in any way).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 13, 2009 5:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Improving UxROM - New mapper ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I like UxROM a lot because of it's simplicity. Recently Memblers talked about adding more PRG ROM banks to it, something we could do by adding another '161 chip. We'd need another '32 as well, because of the extra address lines. That' simple enough.</div>Yeah but you've now doubled the number of chips for just 1 extra address line. Using a PAL and 7432/157 would get all those features and more in two chips though PAL are annoying to program.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Something I always wanted that I've never seen in discrete logic mappers is mirroring control. I don't know why it's not common, </div>Well it requires at least one more discrete chip.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">the following formula appears to work well: CIRAM A10 = (CHR A10 AND NOT M) OR (CHR A11 AND M).</div>Exactly, that's the logic for a single bit multiplexer.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">we can even add 1-screen/2-screen selection!</div><br />Hopefully selected via a PCB jumper, otherwise I think it's too configurable for a single latch mapper. The bit would probably be better used elsewhere since few games will need both one screen and two screen.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Another thing I'd like to do is get rid of bus conflicts. From the pinouts I've seen, it appears to be a very simple procedure that can be done with a single NOR IC. Maybe there are even some free gates in this IC to handle the 2 NOTs necessary for the mirroring.</div>It's even simpler, to get rid of bus conflicts you just need to invert R/W for the ROM's /OE and connect /ROMSEL to /CE like normal.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Do you guys have any ideas on how to implement more complex things such as CHR bankswitching in small chunks, scanline/cycle counters, extra RAM, 4-screen and things like that?</div>Sure, but for an 8x8 bit CHR register file you're looking at 4 chips (74670) + glue, for an IRQ counter (scanline or cycle) you're looking at another 4 chips (74191) + glue. 4 screen just takes a couple gates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Sep 13, 2009 5:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The subject of making new mappers has come up quite a bit around here. Is there any chance someone, maybe bunnyboy, might eventually clone either MMC3 or FME7 to some sort of CPLD and make a PCB? 
<br />
<br />From kyuusaku's previous posts about how many discrete logic chips it would take to make certain mappers like FME7, MMC3, and VRC4 it really is quite alot and seems some sort of cheap programmable device would make more sense if someone ever wanted to actually produce a new board with a more complex mapper. MMC1 exists this way which is nice, but unfortunately it seems no others have followed for whatever reason.
<br />
<br />Also, the Irem mapper #78 seems to just be named Irem 74LS161/32 which suggests its all discrete chips and that mapper features a fixed PRG bank and a bankable one with 3 bits for a 16k page number, 4 chr bits for a 8k page number, and 1 bit for a H/V mirroring setting which isn't bad at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 13, 2009 6:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Improving UxROM - New mapper ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Yeah but you've now doubled the number of chips for just 1 extra address line.</div><br />Yeah, but what's so bad about it? Cost? Issues with power supply? 2 chips is not that much. And I guess it's possible to use an 8-bit latch instead of 2 '161s.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Using a PAL and 7432/157 would get all those features and more in two chips though PAL are annoying to program.</div><br />I don't know much about electronics, so I'm trying to work with what I know and what I got. I currently have no means of working with PALs, PICs or whatever.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well it requires at least one more discrete chip.</div><br />I know, the chips are piling up...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">the following formula appears to work well: CIRAM A10 = (CHR A10 AND NOT M) OR (CHR A11 AND M).</div>Exactly, that's the logic for a single bit multiplexer.</div><br />Oh, good. so there is no mystery here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">we can even add 1-screen/2-screen selection!</div><br />Hopefully selected via a PCB jumper, otherwise I think it's too configurable for a single latch mapper. The bit would probably be better used elsewhere since few games will need both one screen and two screen.</div><br />This is a feature that wouldn't require any more chips, so I don't see why not use it. I can't think of anything else to use the bits for. With 5 bits for the PRG bank and 2 for mirroring there is still 1 left. This would probably be useful for 1MB of PRG ROM, but in my case it'd have to be split in 2 FlashROMs of 512KB (which would mean yet another chip...). 512KB isn't that impressive when you're working with CHR-RAM...<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">It's even simpler, to get rid of bus conflicts you just need to invert R/W for the ROM's /OE and connect /ROMSEL to /CE like normal.</div><br />That's what I thought at first, but I figured there was a reason Nintendo made it more complicated than that... weird. If it can indeed be done like that, good, there will be enough free gates to invert the other signals that need it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Sure, but for an 8x8 bit CHR register file you're looking at 4 chips (74670) + glue, for an IRQ counter (scanline or cycle) you're looking at another 4 chips (74191) + glue. 4 screen just takes a couple gates.</div><br />Yeah, I figured it would amount to a lot of chips, but I never intended to implement all of that in a single cart. Like I said, it would be interesting to try a few combinations of features.<br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">Also, the Irem mapper #78 seems to just be named Irem 74LS161/32 which suggests its all discrete chips and that mapper features a fixed PRG bank and a bankable one with 3 bits for a 16k page number, 4 chr bits for a 8k page number, and 1 bit for a H/V mirroring setting which isn't bad at all.</div>
<br />I was trying to find out how this mapper does it, but I couldn't find any pictures of the cart, so I have no idea how many chips it has or what they are. I'm specially interested in how it implements the mirroring selection, because maybe it uses less chips than my idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 13, 2009 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Improving UxROM - New mapper ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, but what's so bad about it? Cost? Issues with power supply? 2 chips is not that much. And I guess it's possible to use an 8-bit latch instead of 2 '161s.</div>Just extremely decreased logic efficiency. 74377 can replace the 161s but it's a rather obscure/expensive replacement.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I know, the chips are piling up...</div>IMO that's not such a bad thing if every gate is used, but beyond a couple chips, it's no longer practical to hack a UNROM board. And if a new board is made, there's little reason to enhance a UNROM instead of a FME7 style mapper that fits really well into chips.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is a feature that wouldn't require any more chips, so I don't see why not use it. </div>Well it kind of does, it requires another multiplexer and unfortunately no 74 series contain multiple multiplexers with separate selects. You can only say it doesn't take any extra chips because you added multiple chips for the last multiplexer already heh.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can't think of anything else to use the bits for.</div>Additional logic could decode WRAM, and a bit could be used to lock it. Or a bit could be used to select whether the fixed bank is $C000 or $8000.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yeah, I figured it would amount to a lot of chips, but I never intended to implement all of that in a single cart. Like I said, it would be interesting to try a few combinations of features.</div>Why make a bunch of carts with only some of the features? I think if a new board is made you might as well go all out since it's a lot of work. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was trying to find out how this mapper does it, but I couldn't find any pictures of the cart, so I have no idea how many chips it has or what they are. I'm specially interested in how it implements the mirroring selection, because maybe it uses less chips than my idea.</div> Mirroring (a multiplexer) can be implemented with a single 7400 so the entire mapper could be implemented with just a 74377 and 7400 (with bus conflicts).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Sep 13, 2009 8:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Improving UxROM - New mapper ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, but what's so bad about it? Cost? Issues with power supply? 2 chips is not that much. And I guess it's possible to use an 8-bit latch instead of 2 '161s.</div>Just extremely decreased logic efficiency. 74377 can replace the 161s but it's a rather obscure/expensive replacement.<br /></div>
<br />
<br />Actually I was looking at 74HC377 the other day, it's about 18 - 20 cents.  I guess that is relatively expensive ('161 is like 7 - 9 cents), but that could make or break the routing on a very small/dense board.  But I look at SMD chips, I'd contend that the 74HC161 in DIP is actually the obscure/expensive one (seems to be about 18 cents - same cost as '377 in DIP).  Going from <a href="http://findchips.com/" class="postlink">http://findchips.com/</a>
<br />
<br />Was looking at exactly this stuff since I'm redoing one of my PCBs..  Going with '161 anyways since I don't really need the other 4-bits, and kind of tired of putting in features that I don't plan to use yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 13, 2009 9:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Improving UxROM - New mapper ideas</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">You can only say it doesn't take any extra chips because you added multiple chips for the last multiplexer already heh.</div><br />Yeah, this is what I meant. If I already added the chips for a certain feature and they have enugh gates left for another feature, why not add it as well?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Additional logic could decode WRAM, and a bit could be used to lock it.</div><br />Locking WRAM only makes sense when it's battery backed, right? Adding a battery doesn't sound very simple.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or a bit could be used to select whether the fixed bank is $C000 or $8000</div><br />The only reason to do that would be DPCM samples, right? I think DPCM kinda sucks, it sounds bad and can glitch controller reads and who know what else. I don't plan on using it, so this is not important on my dev cart.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Mirroring (a multiplexer) can be implemented with a single 7400 so the entire mapper could be implemented with just a 74377 and 7400 (with bus conflicts).</div><br />Mind telling me how to multiplex with the 7400? I got a couple of those. You'd need all 4 gates? Because if there is one left it should be enough for one inversion, necessary to prevent bus conflicts.<br /><br />EDIT: I just found <a href="http://www.microclub.ch/~jmasur/electronics/NAND_Multiplexer.png" class="postlink">this image</a>, which appears to be from Bregalad's page (I found it on Google images, it's just a coincidence that it belongs to someone I know), and according to it I do need all 4 gates for the multiplexer.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Actually I was looking at 74HC377 the other day, it's about 18 - 20 cents.  I guess that is relatively expensive ('161 is like 7 - 9 cents), but that could make or break the routing on a very small/dense board.  But I look at SMD chips, I'd contend that the 74HC161 in DIP is actually the obscure/expensive one (seems to be about 18 cents - same cost as '377 in DIP).  Going from <a href="http://findchips.com/" class="postlink">http://findchips.com/</a></div>
<br />Crap! It sucks that the stores I can physically go to will not sell any of those chips for less than US$ 1. I couldn't even find any '377, only '161, and it wasn't very easy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 13, 2009 10:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I found some cheap AC377 but they are hard to find in older/newer families, I really don't think they're as available. I'd go with it though if it was the most compact choice.
<br />
<br />Adding a battery is really easy, decoding RAM is really easy too, protecting it is not (mostly because it's really hard to corrupt the data).  I think probably the most important option to have beyond mirroring is WRAM support because it's almost a necessity for RPGs. Unless.... you battery back CHR RAM which would also serve as protection :D You'd have to sacrifice a few tiles for save data or copy the save to CHR RAM before the user turns off. Another thing cool about it is you can keep user generated CHR.. in CHR.
<br />
<br />Yup, $C000 switching for DPCM. Some people like it, just like some like one screen mirroring.
<br />
<br />Here is a "universal NAND" multiplexer: <!-- m --><a class="postlink" href="http://www.microclub.ch/~jmasur/electronics/NAND_Multiplexer.png">http://www.microclub.ch/~jmasur/electro ... plexer.png</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 13, 2009 10:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Here is a "universal NAND" multiplexer: <!-- m --><a class="postlink" href="http://www.microclub.ch/~jmasur/electronics/NAND_Multiplexer.png">http://www.microclub.ch/~jmasur/electro ... plexer.png</a><!-- m --></div>
<br />Yeah, I saw this right after I posted. I even updated my post but forgot to submit! <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />
<br />
<br />Anyway, thanks for the tips.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Sep 14, 2009 3:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've already made an extanded UNROM board with my<a href="http://nesdev.com/bbs/viewtopic.php?t=4622&amp;start=0" class="postlink">SX-Flash PCB</a>.
<br />
<br />In additions to the "normal" UNROM settings it can :
<br />- Remove bus conflicts (works)
<br />- SRAM support (works)
<br />- Battery backup (don't really work yet)
<br />- Do 1-screen mirroring (untested yet)
<br />- Do 32kb switching (untested yet)
<br />- 512k SUROM/SXROM style switching (untested yet)
<br />- Banswtiching SRAM (untested yet)
<br />
<br />I tested it with UNROM games (works flawelssly) and hacked MMC1 games, it can run natively [hM02] roms.
<br />To test other features I'd need to hack various games. I'd have to figure the switching sheme of Deadly Towers or mapper 7 games to hack it and test the 32kb switching. My falsh is only 256kb so I can't test the 512kb switch until I find one who is larger.
<br />
<br />One of the PCB works but there is weird bugs I can't figure out, probably because I lack coupling capacitors : I just don't have enough in my drawer to place them on all places I wanted to, and this cause really weird bugs. Battery backup don't work yet (DQ3 [hm02] says the saves are corrupted with the "cursed" music jingle).
<br />The other PCB don't work at all, which I don't know why.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 15, 2009 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now that I stopped to think about it... Why the hell didn't Nintendo use the address lines instead of the data lines to bankswitch?
<br />
<br />It would only bring advantages. For one, There would be no bus conflicts, which means that it would not be necessary to waste any ROM space with values that will be used on mapper writes, and the mapper writes themselves would be quicker. Even if you add the chip to prevent bus conflicts (which is already a lot of trouble), using the address lines is still better/faster (in some cases, but it's never slower).
<br />
<br />See, a single absolute store instruction (just 4 cycles) would be necessary to switch a bank if you knew it's index, regardless of the value written. If the index comes from a variable, just load it into an index register and do a absolute indexed store. It doesn't get any faster than this.
<br />
<br />I really feel like making my own board, but the bad side is that no emulators would support it and I wouldn't be able to program anything for it. Sadly I can't figure out how to compile an open source emulator or how to implement my own mapper in them. Another option would be to find an existing mapper with similar capabilities and make routines or macros to wrap the actual register writes so that I can easily build a ROM for emulators and another for my own board.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Sep 15, 2009 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Now that I stopped to think about it... Why the hell didn't Nintendo use the address lines instead of the data lines to bankswitch?<br /></div><br />On my Squeedo cart that's kind of like what I did, the mapper logic latched the address bits, and the PIC's parallel port latched the data bus (the address latch was readable from the PIC).  That was a cheap way to get a bunch of "fake" registers, and was kevtris' idea actually. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I also realized you could make a huge register that's updated all at once by latching the data and address buses at the same time sort-of like Squeedo without the PIC.  I don't know when that would be useful though.<br /><br />But yeah it makes sense, since it's rare to read from the mapper (almost none need that, MMC5, Squeedo, any others?).<br /><br />I'd say the ROM space wasted on bus conflicts is pretty much negligible though.  Sure it could add up if you've got an 8-bit register, but probably still cheaper than an extra chip. Personally, I'd just as rather use half of a '139 chip to decode the mapper at $5000 or somewhere out of the way (even better if you've got a plan for the other half of the '139, like for WRAM decoding).<br /><br />Also consider that many TTL mappers combine several functions in to one latch (Color Dreams mapper for example), so if you want to bank the PRG independently from the CHR and WRAM it's gonna be a somewhat complicated bit-manipulation process anyways (and using the address lines, it's assured you'll need the TAX/TAY instruction in that case).  Not a problem with Nintendo's TTL mapper boards though (Well, A*ROM comes to mind - nametable select and PRG select).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I really feel like making my own board, but the bad side is that no emulators would support it and I wouldn't be able to program anything for it. Sadly I can't figure out how to compile an open source emulator or how to implement my own mapper in them. Another option would be to find an existing mapper with similar capabilities and make routines or macros to wrap the actual register writes so that I can easily build a ROM for emulators and another for my own board.</div>
<br />
<br />The best solution really is to use a ROM emulator, and leave the NES emulators in the dust. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Though it's a shame there's not a really cheap one, plus in your case you've got those insane import taxes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 15, 2009 4:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Also consider that many TTL mappers combine several functions in to one latch (Color Dreams mapper for example), so if you want to bank the PRG independently from the CHR and WRAM it's gonna be a somewhat complicated bit-manipulation process anyways (and using the address lines, it's assured you'll need the TAX/TAY instruction in that case).  Not a problem with Nintendo's TTL mapper boards though (Well, A*ROM comes to mind - nametable select and PRG select).</div><br />You are right. If I need to combine bits from different places I'd need to TAX or TAY after that, something that wouldn't be necessary with a mapper that uses data lines and has no bus conflicts. A mapper with bus conflicts would also require the TAX or TAY.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The best solution really is to use a ROM emulator, and leave the NES emulators in the dust. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Though it's a shame there's not a really cheap one, plus in your case you've got those insane import taxes.</div>
<br />Yeah... If only they were easy enough to build so that I could make one myself. Testing would still be slower than a batch file calling an emulator though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 16, 2009 8:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But conflict problem would STILL appear if you used adress lines. The only time they wouldn't appear is if you map the register to another adress range (like $6000-$7fff, or $5000-$5fff) which requires more logic anways, so you may as well use that logic to only takes reads in account in $8000-$ffff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Sep 16, 2009 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">A mapper with bus conflicts would also require the TAX or TAY</div>
<br />
<br />It's not super-practical, but I just remembered this one little fun trick I found in the SMB/DH multicart.  It's really only good if you've got very few (and fixed) bankswitch configs.  I thought it was kind of cool though.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; must be in ROM<br />address:<br />&nbsp;lda #2<br />&nbsp;sta address+1<br /></div>
<br />
<br />I turned that into a macro and used it on Garage Cart #1, heheh.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>