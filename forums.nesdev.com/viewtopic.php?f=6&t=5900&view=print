<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Bit Depth and Sample Rate of NES Waveform and DPCM Chans?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Bit Depth and Sample Rate of NES Waveform and DPCM Chans?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=5900">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=5900</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sun Jan 03, 2010 4:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Bit Depth and Sample Rate of NES Waveform and DPCM Chans?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />hello can someone please tell me the bit-depth and sample-rates of each individual channel? thanks. oh also, since it all comes out on the same output, would that mean it's all output and the same depth and rate anyway? well if it were at a lower rate and depth it would still keep its characteristics, so it's still important to know, right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 03, 2010 5:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The first four channels have 4-bit DACs, but they're not mixed equally. The DPCM goes to a 7-bit channel. See also <a href="http://wiki.nesdev.com/w/index.php/APU" class="postlink">complete APU docs</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sun Jan 03, 2010 7:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />simple as that hah? i dunno why i've expected more... ok. when i figure out what to ask, i'll be back  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>skrasms</b> [ Sat Jan 09, 2010 7:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Given how you asked your question, it sounds like you're thinking in terms of PCM audio. It's a little bit different when talking about what the 2A03 does.
<br />
<br />Take the triangle wave, for example. It does not have a constant sample rate. It has a constant set of values that get read back at different sample rates to produce different pitches. A modern digital synthesizer would have a constant sample rate and "resample" the triangle wave data instead (or use entirely different methods). 
<br />
<br />As a more confusing example, the noise generator is only 1 bit. However, it goes through a 4-bit DAC to allow amplitude adjustment. So the quietest noise wave will switch between 0 and 1, while the loudest will switch between 0 and 15. The 1-bit sequence comes from a linear feedback shift register, which was (and still is) a simple way of random number generation in hardware. 
<br />
<br />Then there's the DMC channel. The sample rate here depends on if you are using DPCM or PCM. Direct writes to the 7-bit DAC can be done through register $4011,  meaning the sample rate will depend entirely on how quickly your code handles those writes. On the other hand, using DPCM there are preset sample rates. I seem to remember DPCM only exercising 6 actual bits from the DAC here, but I could be incorrect. 
<br />
<br />Then of course it all the channels add together in a non-linear way. There's a lot of reading to do if you really want all the details.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Sat Jan 09, 2010 10:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />wow, i didn't even know most of that stuff. Different sample rates!! interesting. I should look into making a shift register for random values in hardware. Never heard of that one. 
<br />
<br />Thanks for all of that information. What doc gave you all of that? (Brad Taylor's? I'd assume it's that one, cause it's the one i find most confusing.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>skrasms</b> [ Sun Jan 10, 2010 1:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">wow, i didn't even know most of that stuff. Different sample rates!! interesting. I should look into making a shift register for random values in hardware. Never heard of that one. <br /><br />Thanks for all of that information. What doc gave you all of that? (Brad Taylor's? I'd assume it's that one, cause it's the one i find most confusing.)</div>
<br />
<br />This is guaranteed to be a rambling post, so be warned...
<br />
<br />I said random, but it's not *truly* random because it creates a sequence that will eventually repeat. That repetition is what gives the NES and Atari "pitched" noise sounds. As the shift register gets longer so does the sequence, until a long enough sequence sounds like pure white noise. 
<br />
<br />The thing is, current synthesis is all resource-intensive DSP. When arcades needed soundchips, they didn't have all the memory and processing power available that we do now. These days it is about optimizing software methods for sound generation. Back then, it was about getting the most mileage out of simple logic circuits and transistors. Even though the circuits are "digital" in the sense of being logic-based, there are things going on that can't be copied directly in the modern software world. 
<br />
<br />I noticed from another post that you seem to be trying to emulate 2A03 sounds in software. One of the main issues you will run into, if you haven't already, is that you will have all kinds of aliasing problems if you generate these waveforms the naive way. 
<br />
<br />Say you want to make a square wave. The naive way would be to make something that switches between high and low values instantly, making a pattern like this with the samples (values are arbitrary):
<br />
<br />-500
<br />1000
<br />-500
<br />1000
<br />...
<br />
<br />or an octave lower:
<br />-500
<br />-500
<br />1000
<br />1000
<br />-500
<br />-500
<br />1000
<br />1000
<br />
<br />There are two big problems with this right away. First, the frequency will only be accurate when it is an integer division of the sample rate. If that's not the case then jitter will occur.
<br />
<br />Suppose that's good enough, though, and non-integer-division frequencies are lame anyway. That naive square wave is easy to code and will look perfect on the screen, but it will not sound good compared to an actual 2A03 square wave. The problem is that instantaneous switching requires an *infinite* frequency response. If you look up the frequency spectrum of a square wave, you'll see a fundamental frequency plus harmonics that extend far off into the distance. That is what you get in the hardware world, though the very high frequency harmonics will roll off because circuits can only change so quickly...
<br />
<br />Back in the software domain, though, we don't have infinite frequency response. We know that whatever our sample rate is, no frequencies greater than half that will be recreated properly. In fact, any frequencies higher will fold back down as new erroneous frequencies! By creating a square wave with the "naive" method, that is exactly what happens. All the harmonics of the square wave that occur naturally will become errors if they are greater than half the sample rate. What's even worse, since we are in the pristine digital domain, we get as many harmonics as mathematically possible! Even though higher and higher harmonics are eventually rolled off enough to be below the noise floor, there will be a whole lot of garbage piling up until then. 
<br />
<br />We really want a square wave that is 100% accurate as far as the frequency response of the digital system can get us. So how can we make a square wave with only frequencies less than half the sample rate? 
<br />
<br />This is where band-limited impulse trains (BLIT) work wonders. They use very simple signals (mainly a sinc function) and some relatively simple calculus concepts to create square waves (among other waves) that don't alias. If you're looking to emulate hardware, this is really the place to start. 
<br />
<br />Hopefully I'm somewhat correct in guessing what you are trying to do. If not, the rambling was still fun.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Jan 10, 2010 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">skrasms wrote:</div><div class="quotecontent">Take the triangle wave, for example. It does not have a constant sample rate. It has a constant set of values that get read back at different sample rates to produce different pitches.</div>
<br />
<br />It's more manageable than that -- the NES always generates audio at 1.8MHz. Each of the audio channels change (or have the option to change) their value after a certain number of samples.
<br />
<br />For example, the loop size of the triangle wave channel can be thought of as being 32 samples long. If a period of (e.g.) 1000 were written to the control registers, the location in the 32-sample loop would advance once every 1000** samples out of the NES. So the resultant stretched sound would be 32*1000 samples long, and so would product a tone at 1.8MHz / 32000 = 56 Hz
<br />
<br />
<br />** Actually 1001, because something adds one, but that makes the description less clear.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>skrasms</b> [ Sun Jan 10, 2010 11:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">skrasms wrote:</div><div class="quotecontent">Take the triangle wave, for example. It does not have a constant sample rate. It has a constant set of values that get read back at different sample rates to produce different pitches.</div><br /><br />It's more manageable than that -- the NES always generates audio at 1.8MHz. Each of the audio channels change (or have the option to change) their value after a certain number of samples.<br /><br />For example, the loop size of the triangle wave channel can be thought of as being 32 samples long. If a period of (e.g.) 1000 were written to the control registers, the location in the 32-sample loop would advance once every 1000** samples out of the NES. So the resultant stretched sound would be 32*1000 samples long, and so would product a tone at 1.8MHz / 32000 = 56 Hz<br /><br /><br />** Actually 1001, because something adds one, but that makes the description less clear.</div>
<br />
<br />It is true that the variable sample rate will be an integer division of the 1.79 MHz master clock, but I'm not sure how that makes it more manageable. I think that's just semantecs, though. It can be seen as a variable sample rate signal with sample rates based on integer divisions of 1.79MHz, or it can be seen as a system with a single 1.79 MHz sample rate. 
<br />
<br />The end results are the same in the hardware world, but thinking about it as the latter can be misleading *if* you think in terms of normal digital signal processing. 
<br />
<br />I think of it like the former (variable sample rate) so that it can be accurately emulated in a 44.1 kHz environment with less confusion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Jan 11, 2010 8:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">skrasms wrote:</div><div class="quotecontent">The end results are the same in the hardware world, but thinking about it as the latter can be misleading *if* you think in terms of normal digital signal processing.</div><br /><br />Speaking as a DSP person, I find the math (and therefore comprehension) a whole lot clearer without the hidden downsampling step in the middle. (And then ending everything with "throw it into libsamplerate to transform to the highest sample rate supported by the soundcard")<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think of it like the former (variable sample rate) so that it can be accurately emulated in a 44.1 kHz environment with less confusion.</div>
<br />
<br />If you're used to thinking of things as wavetables, your method definitely makes more sense. But both phase restarts and the noise channel for the highest 4 sample rates are harder to do easily/right if you directly synthesize at audio rates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 11, 2010 8:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Any signal from the NES, Game Boy, or similar designs based on a variable-rate sample-and-hold DAC can be represented as a sum of <a href="http://en.wikipedia.org/wiki/Heaviside_step_function" class="postlink">Heaviside steps</a>. For example, a square wave consists of two steps per period, one positive and one negative. So one way to render the signal is to make a set of pre-filtered <a href="http://en.wikipedia.org/wiki/Step_response" class="postlink">step responses</a> at various fractional sample delays, decompose the APU's output into a series of steps, and then sum them to synthesize the audio. The <a href="http://code.google.com/p/blip-buf/" class="postlink">blip-buf library</a> does this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>skrasms</b> [ Mon Jan 11, 2010 9:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Any signal from the NES, Game Boy, or similar designs based on a variable-rate sample-and-hold DAC can be represented as a sum of <a href="http://en.wikipedia.org/wiki/Heaviside_step_function" class="postlink">Heaviside steps</a>. For example, a square wave consists of two steps per period, one positive and one negative. So one way to render the signal is to make a set of pre-filtered <a href="http://en.wikipedia.org/wiki/Step_response" class="postlink">step responses</a> at various fractional sample delays, decompose the APU's output into a series of steps, and then sum them to synthesize the audio. The <a href="http://code.google.com/p/blip-buf/" class="postlink">blip-buf library</a> does this.</div>
<br />
<br />Yes, and the point I was trying to make is that Heaviside steps will alias if you make them directly. Instead it is often better to make a sinc function (a band-limited impulse) and integrate it. That is exactly what blip-buf does. It is the BLIT method that I mentioned.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>