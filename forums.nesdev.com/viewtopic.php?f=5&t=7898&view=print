<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Audio codecs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Audio codecs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=7898">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=7898</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 22, 2011 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Audio codecs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been interested in audio codecs lately for some unknown reason.
<br />I find it fascinating how it's possible to compress data and restore the original.
<br />
<br />There is two common "high compression ratio" codecs : MP3 and OGG. There is several other lower compression ratio codecs such as IMA-ADPCM, which I guess is similar to BRR used in SNES and XA used in Plastation.
<br />
<br />There is also the FLAC coded which is losless - it restores <em>exactly</em> the original data, but is not very efficient.
<br />
<br />At stereo CD quality, uncompressed data is 44100 * 2 * 16 = 1.44 MBps (mega bits per second). (note that this is actual mega bits, in powers of ten, not common megabits in power of two)
<br />FLAC can code this data without any losses, but is not efficent. The theorical bitrate varies between 0 and 1.44 MBps, in practice it will go arround 600-1000 kBps. I figured that classical-ish music compresses overall better than Rock-ish music for some reason.
<br />
<br />The medium compression ratio ADPCM based techniques can compress data down to 1/4 (or close to 1/4) of it's original size, for CD-quality this is 352 kbps. Usually you can't hear the differences, although in theory there is some.
<br />
<br />Then comes MP3, which can compress at selectable rates. The highest quality is 320 kbps where again you can't hear the difference typically. However, for lower bitrates such as 160 kbps, I assure you it sounds like total shit. This is the reason I've hated MP3s for so many years, it's just because people used them badly.
<br />Note that for example at 160 kbps it might sound fine sometimes, but as soon as there is anything "special" such as disonnant chords, or some suddent attack, it will sound like shit. Some people don't mind, but I do. Also, for NES music for example this works really NOT well, as the square waves are very rich in harmonics, and if there is any dissonant notes done with squarewaves it will be very affected by MP3 compression.
<br />
<br />Finally comes OGG, which also compresses at selectable quality. I guess -q0 to -q10 are available (-q0 will be lower quality, while -q10 will be higher quality).
<br />All theorical tests I've seen shows this coded is supposed to be slightly supperior to MP3, but from my personal experience, it is incredibly better. Even at -q1 I can't hear the difference from the original most of the time, and this is at only 70 kbps, 20 times less data than the original ! In fact I can hear the difference it's just some slight loss in the trebbles, as if the sample rate were reducted a bit, but really it doesn't sound like it comes through water as it does in MP3.
<br />
<br />To be honnest I'm incredibly impressed by the OGG coded I wonder how it's possibly possible it can compress data so much !
<br />
<br />I want to hear you guys' experiences with all of this. The only common thing between this and Nesdev is compression I guess.
<br />
<br />EDIT : <a href="http://www.eskimo.com/~nanook/knowledge/oggvorbis.html" class="postlink">This</a> is an interesting read. Too bad it only covers OGG against MP3, and it doesn't cover other compressions such as ADPCM and FLAC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 22, 2011 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Lossless linear predictive codecs such as FLAC take a weighted sum of the previous samples to predict the next sample and stores the difference between the prediction and the actual value. The filter, or configuration of the weights, captures the overall shape of the frequency spectrum. It changes over time and is stored in the data stream. Classical music compresses better because 1. it's often stored quieter on the disc and 2. the high frequencies (above 5 kHz) aren't as harsh, allowing easier-to-predict low frequencies to dominate the bitstream.
<br />
<br />ADPCM is conceptually similar to FLAC, but it generally uses fewer coefficients, and each sample is divided by a scale factor that varies over time. BRR (SNES) and VAG (PS1/PS2) choose one of about four or five filters and a power-of-two scale factor stored in the header of each block of samples. IMA ADPCM (used in Nintendo DS and some forms of wired telephony) uses a constant filter y[t] = y[t - 1] and adjusts the next sample's scale factor to between 90% and 200% of that of this sample depending on the result of the division. NES DPCM is similar, except the scale factor is fixed at 1/32 (assuming uncompressed samples in the range -1 to +1) and the sample size is 1 bit.
<br />
<br />Telephony codecs such as GSM Full Rate and Speex are similar to ADPCM, but they use more complex filters like FLAC, and they also add in samples from several dozen sample periods ago and stores this delay. This captures the fact that speech and solo musical instruments usually have a definite pitch, or repetition of nearly identical sample sequences over time.
<br />
<br />MP3, MiniDisc ATRAC, and Vorbis run a cosine transform (similar to a Fourier transform) on each 100 to 2000 sample piece of the waveform, compute a "floor" (overall shape of the frequency spectrum) for each piece, and then store the individual frequency components as multiples of this floor. The big wins of Vorbis over MP3 come from the representation of the floor as a piecewise linear function (smoother than a piecewise constant function) and the "analog-like" way in which vector-quantized multiples degrade.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Wed Jun 22, 2011 3:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is a good idea to use Vorbis instead of MP3 whenever it is possible to do so (Vorbis is also free of patents).
<br />
<br />Many useful things about it on here are also written by tepples. Thanks for typing this.
<br />
<br />About dissonant chords, harmonics, etc: Also know there is difference between equal temperament (most common) and just intonation music. Just intonation results in better ratios but I do not know if any of these compressions are affected by that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Jun 22, 2011 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Telephony codecs such as GSM Full Rate and Speex are similar to ADPCM, but they use more complex filters like FLAC, and they also add in samples from several dozen sample periods ago and stores this delay. This captures the fact that speech and solo musical instruments usually have a definite pitch, or repetition of nearly identical sample sequences over time.</div>
<br />
<br />The most widely used codec today for cellular calls is AMR-NB, which requires an 8 kHz sample rate and uses very low bitrates. Simply because it's meant to encode speech and nothing else. There's a wideband (16 kHz) version called AMR-WB, but I think most networks still use narrowband.
<br />
<br />There was a feature on some old mobile phones called "Music Call", where you could play a song in the mediaplayer on your phone during a call and it would be mixed into the uplink so that the person at the far end also could hear the song. At 8 kHz.. AMR-NB-coded.. Needless to say it sounded like crap.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CommunistDaycareCenter</b> [ Wed Jun 22, 2011 10:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really can't imagine anyone being impressed with 160Kbps for transparency in this day and age. Realistic targets for transparency from source is actually closer to 20Kbps to 30Kbps, which has been theorized since the late 90s. Xiph's Ghost codec will probably be the first high-latency codec to nail that window. 
<br />
<br />Anyway, the Xiph Opus/CELT codec can achieve near transparency from source in the 30~40Kbps range with as low as a 5ms latency from the encoder. This was obviously designed for telephony applications, but it's currently the best audio codec freely available. <a href="http://celt-codec.org/" class="postlink">http://celt-codec.org/</a>
<br />
<br />This isn't just subjective opinion. HydrogenAudio holds fairly regular listening tests and Opus has been included in this round, despite it being developed mostly to target telephony applications. It's mopped up the two star AAC encoders and left Vorbis (which is the proper name, OGG is just a container) in the dust. <a href="http://listening-tests.hydrogenaudio.org/igorc/results.html" class="postlink">http://listening-tests.hydrogenaudio.org/igorc/results.html</a>
<br />
<br />Someone pointed me to this thread and I felt compelled to actually offer something from this decade. There isn't really a reason to use Vorbis unless you're tied to it for legacy reasons, it's certainly not the most efficient and it has trouble keeping up with AAC's performance at lower bitrates. Besides Aoyumi's sporadic work with the AoTuV branch of Vorbis, no one at Xiph is working on it. Focus is on Opus and Ghost.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 23, 2011 4:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Lossless linear predictive codecs such as FLAC take a weighted sum of the previous samples to predict the next sample and stores the difference between the prediction and the actual value. The filter, or configuration of the weights, captures the overall shape of the frequency spectrum. It changes over time and is stored in the data stream. Classical music compresses better because 1. it's often stored quieter on the disc and 2. the high frequencies (above 5 kHz) aren't as harsh, allowing easier-to-predict low frequencies to dominate the bitstream. </div><br />So that's how flac works internally. I searched through their official website and they didn't even mention it  <img src="./images/smilies/icon_cry.gif" alt=":cry:" title="Crying or Very sad" /> <br />I find it kind of weird that FLAC doesn't take advantage of data repetition like most losless compression algorithms does.<br />For exmaple if you make exactly twice the same data and convert it to FLAC it will double the file size when in theory it could only increase slightly. I guess this is because most actual music never stores multiple times <em>exactly </em>the same data.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ADPCM is conceptually similar to FLAC, but it generally uses fewer coefficients, and each sample is divided by a scale factor that varies over time. BRR (SNES) and VAG (PS1/PS2) choose one of about four or five filters and a power-of-two scale factor stored in the header of each block of samples. IMA ADPCM (used in Nintendo DS and some forms of wired telephony) uses a constant filter y[t] = y[t - 1] and adjusts the next sample's scale factor to between 90% and 200% of that of this sample depending on the result of the division. NES DPCM is similar, except the scale factor is fixed at 1/32 (assuming uncompressed samples in the range -1 to +1) and the sample size is 1 bit.<br /></div><br />Well I sure know about BRR because I wrote/improved an encoder and decoder for it. The technique that was used (it wasn't my idea) is to try all 12 combinations and all 4 filters, and find the one with the smallest "distance" with the original sample.<br /><br />I know that VAG is basically an improved vraiant of BRR. IMA APDCM I think I can consider it as "adaptive" BRR where instead of blocks, the "filters" are automatically adapted depending on the previous data.<br />NES DPCM sucks really hard. I'm amused to note that the same bitrate as frequency $0f, in mono you could reproduce transparent data (not with 80's technology through) with vorbis or apparently CELT.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I really can't imagine anyone being impressed with 160Kbps for transparency in this day and age. Realistic targets for transparency from source is actually closer to 20Kbps to 30Kbps, which has been theorized since the late 90s. Xiph's Ghost codec will probably be the first high-latency codec to nail that window. </div><br />I find it's crazy that data can be compressed to less than 1-bit per sample in average and still sound the same as uncompressed 16-bit !! (btw I was impressed at 70kbps, not 160kbps, and that was for stereo).<br /><br />The Opus/CELT codec looks very promising ! It's apparently not fully developed but I'll sure take a look with it.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Telephony codecs such as GSM Full Rate and Speex are similar to ADPCM, but they use more complex filters like FLAC, and they also add in samples from several dozen sample periods ago and stores this delay. This captures the fact that speech and solo musical instruments usually have a definite pitch, or repetition of nearly identical sample sequences over time.<br /></div><br />I tried your GBA GSM player and to be honnest, the quality loss were absolutely terrible. I know it replayed data at 18 kHz due to GBA's limitation so loss in trebles were mandatory, but the problem is that lower freqs were completely degraded as well. Your site claims 150 minutes stores in 256 MBit, this is around 28.4 kbps, so loss was to be expected. However if the same coded were to apply to stereo 44.1 kHz instead of mono 18 kHz, it would come at around 140 kbps, so such huge loss aren't acceptable. Even MP3 would sound a lot better at such a rate.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">MP3, MiniDisc ATRAC, and Vorbis run a cosine transform (similar to a Fourier transform) on each 100 to 2000 sample piece of the waveform, compute a "floor" (overall shape of the frequency spectrum) for each piece, and then store the individual frequency components as multiples of this floor. The big wins of Vorbis over MP3 come from the representation of the floor as a piecewise linear function (smoother than a piecewise constant function) and the "analog-like" way in which vector-quantized multiples degrade.</div><br />Wow. I once through how many bytes it would take to store the Fourier series of a sample instead of storing it like PCM. If you want to loslessly store one second of data at 44100 Hz sampling rate, you'll need to store 22050 complex coefficient, therefore 44100 coefficients. Then it all comes to how many bits it takes to store the data, but chances are you'd need 16-bit therefore exactly the same amount of data as PCM.<br /><br />Have you ever considered decoding vorbis on the GBA ? I'm pretty sure it would compress better and sound a lot better than GSM. And probably Opus/CELT would be even better.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">About dissonant chords, harmonics, etc: Also know there is difference between equal temperament (most common) and just intonation music. Just intonation results in better ratios but I do not know if any of these compressions are affected by that.</div>
<br />I wonder. The problem with just intonation is that for example the ratio of a C/G 5th is not the same as for a D/A 5th, which I think is weird. So you have to "choose" your base note.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 23, 2011 6:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I tried your GBA GSM player and to be honnest, the quality loss were absolutely terrible.</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Have you ever considered decoding vorbis on the GBA ?</div><br />GSM Full Rate was optimized for speech and for computational complexity that fit into the Nokia phones of the time. I chose it over Vorbis because I didn't think I could fit the Vorbis decoder into the GBA's 32 KB of IWRAM (fast RAM). All ROM and RAM in the GBA other than IWRAM has several wait states on read or write. The "Toast" GSM decoder takes about 9 KB of IWRAM and 60% of the 16.8 MHz CPU when compiled with GCC. But the Vorbis decoder does fit into the Nintendo DS, as demonstrated by MoonShell, DSOrganize, and Guitar Hero On Tour series.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And probably Opus/CELT would be even better.</div><br />Opus/CELT didn't exist when I was into GBAdev.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">About dissonant chords, harmonics, etc: Also know there is difference between equal temperament (most common) and just intonation music. Just intonation results in better ratios but I do not know if any of these compressions are affected by that.</div><br />I wonder. The problem with just intonation is that for example the ratio of a C/G 5th is not the same as for a D/A 5th, which I think is weird. So you have to "choose" your base note.</div>
<br />Instruments without semitone-quantized pitch, such as a violin or an NES PSG, do allow such retuning in real time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 23, 2011 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">GSM Full Rate was optimized for speech and for computational complexity that fit into the Nokia phones of the time. I chose it over Vorbis because I didn't think I could fit the Vorbis decoder into the GBA's 32 KB of IWRAM (fast RAM). All ROM and RAM in the GBA other than IWRAM has several wait states on read or write. The "Toast" GSM decoder takes about 9 KB of IWRAM and 60% of the 16.8 MHz CPU when compiled with GCC. But the Vorbis decoder does fit into the Nintendo DS, as demonstrated by MoonShell, DSOrganize, and Guitar Hero On Tour series.</div><br />Oh I see. So not only the bitrate and quality enters into consideration, but also the replayer's code size and time it takes for it to execute.<br /><br />Anyways it's cool it fits the DS, although it's basically 4x the speed of the GBA (which itself is 2x the speed of the GBC and 4x the speed of the original GB  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> )<br /><br />I'm pretty sure Super Puzzle Fighter uses streamed audio, and the GBA version is one of them. So I guess the audio is compressed I wonder which codec they used. Maybe the simply used some ADPCM variant.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Opus/CELT didn't exist when I was into GBAdev.</div>
<br />Oh I see. You know what I should look into helpin the Opus CELT project. I'd be so proud to have contributed to something that maybe millions might use. Although I don't know if I'm good enough in computer science and math for such a thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 23, 2011 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">So not only the bitrate and quality enters into consideration, but also the replayer's code size and time it takes for it to execute.</div><br />Which incidentally is probably one reason why the NES uses DPCM even when more advanced codecs were known back in 1983 when Nintendo was rushing to make its successor to the ColecoVision. DPCM takes fewer gates.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm pretty sure Super Puzzle Fighter uses streamed audio, and the GBA version is one of them. So I guess the audio is compressed I wonder which codec they used. Maybe the simply used some ADPCM variant.</div>
<br />SPFII Turbo (for PS1) uses XA streamed music. SPFII (for GBA, and I can explain why the box doesn't say Turbo) uses tracked music, and one can especially hear the difference when the portamentos in Donovan's theme go way out of tune. If I remember correctly, only the Capcom FMV intro and the hidden song "Kono omoi o tsutaetai (I want you to know)" sung by Sakura are streamed, and I don't know the codec.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 23, 2011 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">SPFII Turbo (for PS1) uses XA streamed music. SPFII (for GBA, and I can explain why the box doesn't say Turbo) uses tracked music, and one can especially hear the difference when the portamentos in Donovan's theme go way out of tune. If I remember correctly, only the Capcom FMV intro and the hidden song "Kono omoi o tsutaetai (I want you to know)" sung by Sakura are streamed, and I don't know the codec.</div><br />Oh I guess you're right ! I confused it with the playstation. And the codec should definitely not be a very good one considering the quality of this song in the gba version  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which incidentally is probably one reason why the NES uses DPCM even when more advanced codecs were known back in 1983 when Nintendo was rushing to make its successor to the ColecoVision. DPCM takes fewer gates.</div>
<br />I guess, yet I really don't like how it sounds. It's okay for kicks, but other than that it's plain trash. I find it ironical I can listen to almost CD quality songs with the same bitrate with vorbis at q-1  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />
<br />
<br />EDIT : Interesting list of <a href="http://wiki.xiph.org/Games_that_use_Vorbis" class="postlink">games that use vorbis</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Fri Jun 24, 2011 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I wonder. The problem with just intonation is that for example the ratio of a C/G 5th is not the same as for a D/A 5th, which I think is weird. So you have to "choose" your base note.</div>It is true, that is why equal temperament exists. Both are suitable for writing music as long as you write the correct music (i.e. music written for equal is better in equal temperament, and music written for just intonation is better in just intonation).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I find it kind of weird that FLAC doesn't take advantage of data repetition like most losless compression algorithms does.<br />For exmaple if you make exactly twice the same data and convert it to FLAC it will double the file size when in theory it could only increase slightly. I guess this is because most actual music never stores multiple times <em>exactly</em> the same data.</div>Then I suppose for synthesized music that is converted to an audio compression format (such as FLAC), you might then compress it again using something else and then uncompress that second part of compression while loading into memory, in case you do have the same data multiple times.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>