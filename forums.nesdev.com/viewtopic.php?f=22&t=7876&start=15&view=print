<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New Project</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New Project</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=7876">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=7876</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sat Jun 18, 2011 6:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Lets wait until i have some gameplay before a creative name (that doenst have to do with anything sexual you freaks)!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sat Jun 18, 2011 7:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, so what i am looking to do is add shooting in to my game.
<br />
<br />Checklist:
<br />Store Bullet off screen (When A is not pressed) - Check <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />When A is pressed a variable is set to 1 and the bullets x = the players x - <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />If that var = 1, bullets y SBC #02 - <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />if bullet off screen, stop moving and set shooting var to 0 - <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />
<br />I guess my question here is how i can use the variable system here efficiently.
<br />
<br />So far i can just figure out how to set a var
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.rsset $0000<br />shooting .rs 1 ;this reserves one bit to this var, correct?<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jun 19, 2011 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NESASM3 uses some very weird terminology for things.  It really would help if you were using an assembler that the rest of the community commonly used (asm6, ca65, or qasm); it would make helping you a lot easier, and we wouldn't be fighting over assembler idiocy like this.  :-)
<br />
<br />I STRONGLY suggest avoiding using .RSSET and .RS.  These pseudo-ops are confusing as hell; I've read the documentation (and its examples) 4 or 5 times now, and although I think I get it, they really don't make any sense.  Awful awful awful.
<br />
<br />Please use something like this instead:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Snakes&nbsp; &nbsp;= $0500&nbsp; &nbsp;; Number of snakes &#40;8-bit&#41;<br />Rocks&nbsp; &nbsp; = $0501&nbsp; &nbsp;; Number of rocks&nbsp; &#40;16-bit&#41;<br />Kites&nbsp; &nbsp; = $0503&nbsp; &nbsp;; Number of kites&nbsp; &#40;8-bit&#41;<br /><br />.org $c000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Our program starts at $C000 in ROM &#40;PRG&#41;<br /><br />; Variable initialisation<br /><br />&nbsp; &nbsp;lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; We don't want any kites<br />&nbsp; &nbsp;sta Kites<br />&nbsp; &nbsp;lda #8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; We want 8 rocks &#40;low byte of 16-bit value&#41;<br />&nbsp; &nbsp;sta Rocks<br />&nbsp; &nbsp;lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Upper byte of 16-bit value<br />&nbsp; &nbsp;sta Rocks+1<br />&nbsp; &nbsp;lda #$2a&nbsp; &nbsp; &nbsp; &nbsp; ; We want 42 snakes<br />&nbsp; &nbsp;sta Snakes<br /><br />; Let's do something with Kites, which is easy since it's an<br />; 8-bit value<br /><br />&nbsp; &nbsp;lda Kites&nbsp; &nbsp; &nbsp; &nbsp;; Load number of kites &#40;from $0503&#41; into accumulator<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Add 4 to it &#40;so we should now have 4 kites&#41;<br />&nbsp; &nbsp;sta Kites&nbsp; &nbsp; &nbsp; &nbsp;; ...and store it back in $0503<br /></div><br /><br />Let's talk about the Kites stuff first.  Sure, adding 4 to Kites works fine, because we're adding 4 to 0, which makes 4.  But what if Kites had been initialised with value 254 and we wanted to add 4 to that (258 kites)?  We'd have a big problem.<br /><br />254 + 4 = 258.  But an 8-bit value can only hold from 0 to 255... so guess what gets written to Kites in that case?  258-256 = 2.  You expected 258 kites, but you suddenly have 2.<br /><br />Welcome to 6502 and 8-bit architectures!  :-)<br /><br />If you actually want to see or validate this in real-time, you can do so by using the virtual 6502 simulator over at <a href="http://www.6502asm.com/" class="postlink">6502asm.com</a>.  Put this code into the text box, compile it, then run it.  You'll see a dark red dot in the middle of the screen (dark red = $02).  Try messing around with the initialisation value for Kites to see what happens.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Initialisation<br /><br />init:<br />lda #254<br />sta Kites<br /><br />lda Kites<br />clc<br />adc #4<br />sta Kites<br /><br />; Show results in middle of screen as a pixel<br />; colour ANDed with $0F &#40;see Help&#41;<br />sta $3EF<br /><br />; Infinitely loop<br />jmp init<br /><br />Kites: dcb 0<br /></div><br /><br />Next, note that I explicitly did not mess with Rocks here, meaning I did not show how to, say, add 455 rocks to the existing value.  The reason is that working with 16-bit values is a little tricky on the 6502 since all registers are 8-bit.  You have to "split up" a 16-bit value into two 8-bit portions and handle them/treat them separately.<br /><br />In the case of the initialisation routine, for example, if we wanted to have 378 rocks instead of just 8, we'd have done this instead:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #122&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; We want 378 rocks, so store 122 &#40;378-256&#41; in the low byte<br />&nbsp; &nbsp;sta Rocks<br />&nbsp; &nbsp;lda #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; ...and store 1 &#40;e.g. 256&#41; in the upper byte<br />&nbsp; &nbsp;sta Rocks+1<br /></div>
<br />
<br />This might be an easier way of looking at it:
<br />
<br />Decimal value 378 is written $17A in hexadecimal -- or, to pad things out, written as $017A in hexadecimal.  The "lower byte" (e.g. Rocks) would therefore be $7A, and the "upper byte" (e.g. Rocks+1) would therefore be $01.
<br />
<br />Doing real-time (e.g. not static/pre-calculated numbers) 16-bit arithmetic gets a little tricky at times, but you'll have to learn that as you go.
<br />
<br />My advice right now: try to keep everything within 8 bits (range 0 to 255) if you can.  It'll make learning a lot easier.  When I say "everything", I mean your counters/variables (number of lives, ships, X/Y offsets, etc.).  You're still learning, so keep it simple.  :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sun Jun 19, 2011 10:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks man, for this game i am probably keeping everything 4 bit or 1 bit because that is all i will probably need.
<br />
<br />now i just have to figure out how to compare values which wont be to hard <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 19, 2011 10:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">Snakes&nbsp; &nbsp;= $0500&nbsp; &nbsp;; Number of snakes &#40;8-bit&#41;<br />Rocks&nbsp; &nbsp; = $0501&nbsp; &nbsp;; Number of rocks&nbsp; &#40;16-bit&#41;<br />Kites&nbsp; &nbsp; = $0503&nbsp; &nbsp;; Number of kites&nbsp; &#40;8-bit&#41;</div></div>
<br />Sorry, but I have to disagree. Declaring variables like this is fine in small programs, but once your games get complex and you have hundreds of variables this is hell to manage. Every time you need to move variables around (and you will need to do this a few times during development, I assure you) you'll have to manually change hundreds of addresses. Not cool. Not to mention that it's really easy to make mistakes and end up with overlapping variables.
<br />
<br />Really, what dsv101 used in his example is much better. He can just reserve bytes starting from a base address, guaranteeing that no variables will overlap, and if he wants to rearrange some variables he can just copy/paste them and be done with it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Jun 19, 2011 10:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I STRONGLY suggest avoiding using .RSSET and .RS.  These pseudo-ops are confusing as hell; I've read the documentation (and its examples) 4 or 5 times now, and although I think I get it, they really don't make any sense.  Awful awful awful.</div>
<br />Not really true (if I'm not misunderstanding how to use .rsset and .rs -- it has been ~5 years ago since the last time I used NESASM...)
<br />
<br />Your example would be something like this when using .rs:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .rsset $500<br />Snakes .rs 1<br />Rocks&nbsp; .rs 2<br />Kites&nbsp; .rs 1<br /></div>
<br />This is better because now it's much easier to move stuff around or change variable sizes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Jun 19, 2011 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Seems like .reset is equivalent to ASM6's .enum feature, but I think the .enum feature is more clever in how it works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sun Jun 19, 2011 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />that was my only concern with what he mentioned, if i reserve bytes to a variable, i will have no problems later. But what is the instruction to compare vars?
<br />
<br />i pretty much have to do an IF then statement in 6502 ASM
<br />
<br />Like:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ReadA:<br />&nbsp; LDA $4016<br />&nbsp; AND #%00000001<br />&nbsp; BEQ ReadADone<br /><br />&nbsp; &nbsp;if shooting = $00&nbsp; &nbsp;;how would i do this typoe of line in 6502 ASM?&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;LDA #$01<br />&nbsp; &nbsp;STA shooting<br /><br />ReadADone:<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">If shooting = $01 then <br /><br />LDA $0207<br />CLC<br />ADC #$01<br />STA $0207<br /></div><br /><br />and also<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if $0207 &lt; $00<br /><br />LDA #$00<br />STA shooting<br /></div>[/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Jun 19, 2011 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You use CMP to compare.  CMP is a subtract operation that does not change A.  There's also CPX and CPY instructions available, which compare X or Y against a constant value, or a value in memory.
<br />
<br />When A == byte, the result of the subtraction is Zero.  So that sets the Zero flag, and BEQ (branch if equal) is the instruction you use to branch when Zero is set.
<br />
<br />When A &gt;= Byte, carry flag is set, use BCS (branch carry set)
<br />When A &lt; Byte, carry flag is clear, use BCC (branch carry clear)
<br />When A != Byte, zero flag is clear, use BNE (branch not equal)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sun Jun 19, 2011 10:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />that should do the trick, ill make a post if i have any more problems related to variables in the near future

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sun Jun 19, 2011 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />lol, its the near future. can you show me some example code please
<br />
<br />something under A's push action like
<br />
<br />If A then
<br />
<br />LDA #$01
<br />STA shooting
<br />
<br />else
<br />
<br />LDA #$00
<br />STA shooting

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 19, 2011 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you know how to read the controller? When you read the controller, you typically end up with a variable that contains the state of all the buttons (each bit is a button). What you need to do is look at a specific bit in this variable (the bit that corresponds to the button you want to check) and make a decision based on it. Something like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda ControllerState<br />&nbsp; &nbsp;and #%00000001 ;&lt;- change this depending on the button you want to check<br />&nbsp; &nbsp;beq ButtonNotPressed<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;;BUTTON IS PRESSED<br /><br />&nbsp; &nbsp;jmp Done ;&lt;- this is needed to skip over the &quot;not pressed&quot; code<br /><br />ButtonNotPressed:<br /><br />&nbsp; &nbsp;;BUTTON IS NOT PRESSED<br /><br />Done:</div><br />This is the basic structure of an "IF" in assembly, but the beuty of assembly is that you are not restricted to these basic structures, and you can take shortcuts. In this particular case, you could do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx #$00 ;assume &quot;Shooting&quot; will be 0<br />&nbsp; &nbsp;lda ControllerState<br />&nbsp; &nbsp;and #BUTTON_A ;I'm using a constant here<br />&nbsp; &nbsp;beq StoreShooting ;branch if it really is supposed to be 0<br />&nbsp; &nbsp;inx ;A is pressed, so &quot;Shooting&quot; needs to be 1<br />StoreShooting:<br />&nbsp; &nbsp;stx Shooting</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sun Jun 19, 2011 12:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />lol, i got reading the controller down already, i was just typing If a to type less <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dsv101</b> [ Sun Jun 19, 2011 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />do you know how to do what i asked though?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jun 19, 2011 12:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I edited my post with more useful info.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>