<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Loading the next screen</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Loading the next screen</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1966">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1966</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Fri Sep 01, 2006 7:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Loading the next screen</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello all.
<br />
<br />I've been trying to implement using the Start button to switch screens, to simulate going from a title screen, to the actual game area.  I'm wondering if anyone knows exactly what would cause the second screen to just be a jumbled mess?  Mind you that I use the same nametable to load the second screen.  When I used the other to preload that second screen, it still gets jumbled after pressing Start.  Here's the ROM if you would like to see what I mean:
<br />
<br /><!-- m --><a class="postlink" href="http://roth.zhxhome.net/junk/NCAT.NES">http://roth.zhxhome.net/junk/NCAT.NES</a><!-- m -->
<br />
<br />If anyone could let me know what <em>could</em> be causing it, then I can check out my code and see if there's something similar to what is described.  Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Sep 01, 2006 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The next screen seems like a lot of new data. Are you disabling rendering before drawing the second screen? If by any chance you are trying to draw it during rendering time, you're sure to get garbage on the screen.
<br />
<br />As for the start button, you should do that trick that will only detect keys that have changed since the last read, because when you hold the start button down for a while, the next screen is reloaded an insane ammount of times. The trick goes something like this (supposing you use a byte to store the status of all 8 possible buttons): EOR the byte holding the old states with the one holding the new states. Whatever buttons changed will have 1's, the ones that remain the same will be 0's. AND that to the new byte, so that what CHANGED AND IS PRESSED NOW will be 1's, and everything else will be 0's. This way you'll only detect the moment when the button is pressed (transition), wich is the desired behaviour of the start button.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Fri Sep 01, 2006 8:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As for reloading an entire nametable, you pretty much have 2 options - either disable rendering and load it all at once, or load it a little bit at a time (during VBLANKs) into an alternate nametable and then switch it in when you're done.
<br />From what I've seen, though, most games don't disable the screen to reload nametables - they'll turn the palette black and then queue up a screen's worth of data to be updated during VBLANKs.
<br />You may find it useful to code a general-purpose I/O queue for dispatching VRAM updates during VBLANK and splitting them into sufficiently small chunks so as to avoid overflowing into rendering. I have some code that does exactly this (for <a href="http://qmt.ath.cx/~nes/drip" class="postlink">Drip</a>, an Amiga game I'm porting* to the NES) - if you're interested, I'll post it here (it's reasonably small, but fairly versatile).
<br />
<br />
<br />(* not so much "porting", moreso "completely rewriting it from scratch to work in mostly the same way")

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Fri Sep 01, 2006 9:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">As for the start button, you should do that trick that will only detect keys that have changed since the last read, because when you hold the start button down for a while, the next screen is reloaded an insane ammount of times. The trick goes something like this (supposing you use a byte to store the status of all 8 possible buttons): EOR the byte holding the old states with the one holding the new states. Whatever buttons changed will have 1's, the ones that remain the same will be 0's. AND that to the new byte, so that what CHANGED AND IS PRESSED NOW will be 1's, and everything else will be 0's. This way you'll only detect the moment when the button is pressed (transition), wich is the desired behaviour of the start button.</div><br /><br />Thanks for the tip on that.  I noticed when I held down Start that it just stayed in place, then upon release loaded the garbage.  I think I've seen some code like what you described before.  I'll check out a few sources and see what's going on in them.<br /><br /><br /><div class="quotetitle">Queitust wrote:</div><div class="quotecontent">As for reloading an entire nametable, you pretty much have 2 options - either disable rendering and load it all at once, or load it a little bit at a time (during VBLANKs) into an alternate nametable and then switch it in when you're done.<br />From what I've seen, though, most games don't disable the screen to reload nametables - they'll turn the palette black and then queue up a screen's worth of data to be updated during VBLANKs.<br />You may find it useful to code a general-purpose I/O queue for dispatching VRAM updates during VBLANK and splitting them into sufficiently small chunks so as to avoid overflowing into rendering. I have some code that does exactly this (for Drip, an Amiga game I'm porting* to the NES) - if you're interested, I'll post it here (it's reasonably small, but fairly versatile).</div>
<br />
<br />I tried disabling, then running the code, then enabling.  It did indeed draw the screen MUCH better, but the upper-left corner was still garbage.  I'll play with the code a little more and see if I can get the code shorter, as it seems like I must be stepping on something I shouldn't have been... and sure, I'd like to see the code for that you have.  It's always nice to see how someone implements something.
<br />
<br />Thanks for the replies <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Sep 01, 2006 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Top left corner being garbage means that you need to either turn sprite display off or put all the unused sprites offscreen (y attribute value between $EF and $FF).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Fri Sep 01, 2006 9:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tepples, you are certainly the man.  I made a seperate subroutine for turning on the PPU, but without the sprites on... this made it work perfect <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Thanks.  Now to get to the controller polling.  Thanks again all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>commodorejohn</b> [ Tue Sep 12, 2006 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another option for garbage sprites is to turn on sprite clipping in the leftmost 8 pixels and then put all the sprites at X location 0.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 12, 2006 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">commodorejohn wrote:</div><div class="quotecontent">Another option for garbage sprites is to turn on sprite clipping in the leftmost 8 pixels and then put all the sprites at X location 0.</div>
<br />You won't get garbage sprites like this, sure, but remember that the NES can only display 8 sprites on a scanline. Those sprites hidden in the left 8 pixels still count for this limit, so you'd be lowering your displayed sprite count if you hid them like this. If many of them occupy the same scanlines, you may even be blanking the sprites for those entire scanlines, depending on sprite priorities.
<br />
<br />Always hide unused sprites at the bottom of the screen, where it doesn't matter if they occupy the same scanlines.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Sep 12, 2006 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I previously used to just set all their tiles #s to a blank tile.  It probably is better to set the Y positions below the screen though, that possibly would've hidden a (fairly rare) sprite display bug that shows up in Munchie Attack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 13, 2006 8:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, left clipping isn't the way to go, especially that in some case you'd want to not have the clipping enabled.
<br />Putting all sprite vertical range of $f0 or above will NEVER have them to be even considered by the PPU, making them disabled. All other tricks may hide the sprites to the user, but those are still tricks and technically, the sprites will be displayed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Wed Sep 13, 2006 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A ways up, I said I would post my "VRAM update queue" code. I suppose I can do that now.
<br />
<br />One limitation is that it does not support "vertical" writing (i.e. using the "increment VRAM address by 32" option), but that's mainly because I don't use it.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Variables - these ones are best located in zeropage<br />ioptr:&nbsp; &nbsp;&nbsp; &nbsp;.res 2<br />addxy:&nbsp; &nbsp;&nbsp; &nbsp;.res 1<br /><br />splitiobank:&nbsp; &nbsp;.res 1<br />splitiolen:&nbsp; &nbsp;.res 2<br />splitiofrom:&nbsp; &nbsp;.res 2<br />splitioto:&nbsp; &nbsp;.res 2<br />splitiocur:&nbsp; &nbsp;.res 2<br /><br />io_nextbank:&nbsp; &nbsp;.res 1<br />io_nextlen:&nbsp; &nbsp;.res 1<br />io_nextfrom:&nbsp; &nbsp;.res 2<br />io_nextto:&nbsp; &nbsp;.res 2<br /><br />;More variables - these can go elsewhere in RAM<br />io_bank:&nbsp; &nbsp;.res 32<br />io_len:&nbsp; &nbsp;&nbsp; &nbsp;.res 32<br />io_from:&nbsp; &nbsp;.res 64<br />io_to:&nbsp; &nbsp;&nbsp; &nbsp;.res 64<br />io_reqi:&nbsp; &nbsp;.res 1<br />io_reqo:&nbsp; &nbsp;.res 1<br /><br />splitio_tmp:&nbsp; &nbsp;.res 1<br /><br />;Macros<br /><br />.define&nbsp; &nbsp;PLO&#40;ptr&#41; ptr+0<br />.define&nbsp; &nbsp;PHI&#40;ptr&#41; ptr+1<br /><br />.macro&nbsp; &nbsp;clr_pointer&nbsp; &nbsp;dest<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA dest+0<br />&nbsp; &nbsp;STA dest+1<br />.endmacro<br /><br />.macro&nbsp; &nbsp;copy_pointer&nbsp; &nbsp;src, dest<br />&nbsp; &nbsp;LDA PLO src<br />&nbsp; &nbsp;STA PLO dest<br />&nbsp; &nbsp;LDA PHI src<br />&nbsp; &nbsp;STA PHI dest<br />.endmacro<br /><br />.macro&nbsp; &nbsp;load_pointer_x&nbsp; &nbsp;src, dest<br />&nbsp; &nbsp;LDA PLO src,X<br />&nbsp; &nbsp;STA PLO dest<br />&nbsp; &nbsp;LDA PHI src,X<br />&nbsp; &nbsp;STA PHI dest<br />.endmacro<br /><br />.macro&nbsp; &nbsp;save_pointer_x&nbsp; &nbsp;src, dest<br />&nbsp; &nbsp;LDA PLO src<br />&nbsp; &nbsp;STA PLO dest,X<br />&nbsp; &nbsp;LDA PHI src<br />&nbsp; &nbsp;STA PHI dest,X<br />.endmacro<br /><br />;Code<br /><br />;*** Waits for a bulk I/O request to clear.<br />.proc waitio<br />&nbsp; &nbsp;PHA<br />:&nbsp; &nbsp;LDA io_reqi<br />&nbsp; &nbsp;CMP io_reqo<br />&nbsp; &nbsp;BNE :-<br />&nbsp; &nbsp;PLA<br />&nbsp; &nbsp;RTS<br />.endproc<br /><br />;*** Queues a bulk VRAM update - as big as you want. This is the main routine you use.<br />;splitiofrom - where you want to copy memory from<br />;splitiolen - the length of the block you want to copy<br />;splitiobank - PRG bank in which the data resides &#40;optional&#41;<br />;splitioto - the VRAM address you want to copy the data to<br />.proc splitio<br />&nbsp; &nbsp;clr_pointer splitiocur<br />:&nbsp; &nbsp;SEC<br />&nbsp; &nbsp;LDA PLO splitiolen<br />&nbsp; &nbsp;SBC PLO splitiocur<br />&nbsp; &nbsp;STA splitio_tmp<br />&nbsp; &nbsp;LDA PHI splitiolen<br />&nbsp; &nbsp;SBC PHI splitiocur<br />&nbsp; &nbsp;BNE :+<br />&nbsp; &nbsp;LDA splitio_tmp<br />&nbsp; &nbsp;CMP #$40<br />&nbsp; &nbsp;BCC :++<br />:&nbsp; &nbsp;LDA #$40<br />:&nbsp; &nbsp;STA io_nextlen<br />&nbsp; &nbsp;LDA splitiobank<br />&nbsp; &nbsp;STA io_nextbank<br />&nbsp; &nbsp;copy_pointer splitiofrom, io_nextfrom<br />&nbsp; &nbsp;copy_pointer splitioto, io_nextto<br />&nbsp; &nbsp;JSR iorequest<br /><br />&nbsp; &nbsp;LDA #$40<br />&nbsp; &nbsp;LDX PHI splitiofrom<br />&nbsp; &nbsp;LDY PLO splitiofrom<br />&nbsp; &nbsp;JSR add_xy_a<br />&nbsp; &nbsp;STX PHI splitiofrom<br />&nbsp; &nbsp;STY PLO splitiofrom<br /><br />&nbsp; &nbsp;LDX PHI splitioto<br />&nbsp; &nbsp;LDY PLO splitioto<br />&nbsp; &nbsp;JSR add_xy_a<br />&nbsp; &nbsp;STX PHI splitioto<br />&nbsp; &nbsp;STY PLO splitioto<br /><br />&nbsp; &nbsp;LDX PHI splitiocur<br />&nbsp; &nbsp;LDY PLO splitiocur<br />&nbsp; &nbsp;JSR add_xy_a<br />&nbsp; &nbsp;STX PHI splitiocur<br />&nbsp; &nbsp;STY PLO splitiocur<br /><br />&nbsp; &nbsp;LDA PHI splitiocur<br />&nbsp; &nbsp;CMP PHI splitiolen<br />&nbsp; &nbsp;BCC :---<br />&nbsp; &nbsp;LDA PLO splitiocur<br />&nbsp; &nbsp;CMP PLO splitiolen<br />&nbsp; &nbsp;BCC :---<br />&nbsp; &nbsp;RTS<br /><br />add_xy_a:<br />&nbsp; &nbsp;STA addxy<br />&nbsp; &nbsp;TYA<br />&nbsp; &nbsp;CLC<br />&nbsp; &nbsp;ADC addxy<br />&nbsp; &nbsp;TAY<br />&nbsp; &nbsp;TXA<br />&nbsp; &nbsp;ADC #$00<br />&nbsp; &nbsp;TAX<br />&nbsp; &nbsp;LDA addxy<br />&nbsp; &nbsp;RTS<br />.endproc<br /><br />;*** Resets the I/O queue, in case you need to do something like that<br />.proc ioreset<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA io_reqi<br />&nbsp; &nbsp;STA io_reqo<br />&nbsp; &nbsp;RTS<br />.endproc<br /><br />;*** Used by splitio, queues a single 64-byte VRAM transfer<br />.proc iorequest<br />&nbsp; &nbsp;PHA<br />&nbsp; &nbsp;TXA<br />&nbsp; &nbsp;PHA<br />&nbsp; &nbsp;LDX io_reqi<br />&nbsp; &nbsp;LDA io_nextlen<br />&nbsp; &nbsp;STA io_len,X<br />&nbsp; &nbsp;LDA io_nextbank<br />&nbsp; &nbsp;STA io_bank,X<br />&nbsp; &nbsp;TXA<br />&nbsp; &nbsp;ASL A<br />&nbsp; &nbsp;TAX<br />&nbsp; &nbsp;save_pointer_x io_nextfrom, io_from<br />&nbsp; &nbsp;save_pointer_x io_nextto, io_to<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;TXA<br />&nbsp; &nbsp;LSR A<br />&nbsp; &nbsp;AND #$1F<br />&nbsp; &nbsp;STA io_reqi<br />&nbsp; &nbsp;PLA<br />&nbsp; &nbsp;TAX<br />&nbsp; &nbsp;PLA<br />&nbsp; &nbsp;RTS<br />.endproc<br /><br />;*** Called during VBLANK as part of your NMI routine, dispatches one VRAM transfer<br />.proc iodispatch<br />&nbsp; &nbsp;LDY io_reqo<br />&nbsp; &nbsp;CPY io_reqi<br />&nbsp; &nbsp;BEQ :++<br />&nbsp; &nbsp;TYA<br />&nbsp; &nbsp;ASL A<br />&nbsp; &nbsp;TAX<br />&nbsp; &nbsp;load_pointer_x io_from, ioptr<br />&nbsp; &nbsp;LDA PHI io_to,X<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA PLO io_to,X<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA io_bank,Y<br />&nbsp; &nbsp;STA MAP_PRG&nbsp; &nbsp; &nbsp; ;this is your mapper's PRG banking register<br />&nbsp; &nbsp;LDA io_len,Y<br />&nbsp; &nbsp;TAX<br />&nbsp; &nbsp;LDY #$00<br />:&nbsp; &nbsp;LDA &#40;ioptr&#41;,Y<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;BNE :-<br />&nbsp; &nbsp;LDY io_reqo<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;TYA<br />&nbsp; &nbsp;AND #$1F<br />&nbsp; &nbsp;STA io_reqo<br />:&nbsp; &nbsp;RTS<br />.endproc<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>