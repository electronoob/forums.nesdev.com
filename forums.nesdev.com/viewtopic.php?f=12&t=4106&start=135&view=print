<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC7110 Reverse Engineering Project</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC7110 Reverse Engineering Project</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>10</strong> of <strong>21</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Mon Jun 23, 2008 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">Kammedo, <br />Can you please rewrite your document to make clear what you measured and what you just made 'educated guesses' on.  This is a <em><span style="text-decoration: underline">very</span></em> important distinction.  Currently I've found several errors and I can't tell what can be trusted as a measurement or is just a guess. It looks like you put a good deal of time into that document and unfortunately without that distinction it is almost useless as I need to check everything myself anyway.  So please, please add that distinction to your document.<br /><br />Also, you are not numbering all pins the standard way, nor even a consistent way between chips (sometimes you do go counter-clockwise, sometimes you start going around one way and then change directions on the other side, etc.).  The pins should be numbered counter-clockwise from pin 1, which is the marked pin, or is counter-clockwise from the mark on dual inline packages.  Unfortunately you don't even stick to your own numbering for a chip once you numbered it, for you say about the SPC7110 "Pin nr 76 : SRAM 3", and it doesn't connect to pin 3 it connects to pin 26 in your diagram.  Not following the standard numbers makes your document difficult to read, and ambiguous when you change your numbering in the middle.<br /><br />And then there are things which are just wrong, for example you say about the SRAM that "pin #26 connected to SNES pin #26 (RESET)" when it actually connects to the SPC7110.  I assume this and other connection mistakes are where you just made guesses instead of measuring.<br /></div>
<br />
<br />Eh,  the pinouts of most of the ROM chips and SRAM have been taken from another website.
<br />
<br />As for the SRAM pin 3 &amp; pinouts, Ill fix it and post a more updated version about it in a few hours.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Mon Jun 23, 2008 1:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, so now I had a first look at the document, and fixed the pin numbering, as well as removing all the pin numbering from the SPC mappings. Now it refers to the signals. I don't have more time today to check the rest. I will take another look at it tomorrow.
<br />
<br />Neviksti, the few flaws you pointed out were caused by mixing the numberings. Are there others?
<br />
<br />
<br /><!-- m --><a class="postlink" href="http://www.yntproject.net/docs/snes/SPC7110F0a.txt">http://www.yntproject.net/docs/snes/SPC7110F0a.txt</a><!-- m -->
<br />
<br />Also, when you were talking about those "spare pulses" from the SPC to U2, maybe it would be of help to see if there is any data exchange at all between the SPC and U2 - did you monitor the data lines as well?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Jun 23, 2008 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, that was quick! Thank you.
<br />
<br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Neviksti, the few flaws you pointed out were caused by mixing the numberings. Are there others?</div><br />As I mentioned above, there are a few errors that can't be explained by pin numberring.  For example no pin of the SRAM connects to SNES /RESET.<br /><br />I guess there is also the possibility that we have different board versions or something.  Here's the differences I noticed:<br /><br />1) Very minor:<br />My SRAM is a LH52A64, while you list yours as HY6264.  Is that the actual part number on your board? (which would be great because I can find the pinout of that, but not the LH52A64 and have just been assuming it was compatible with HY6264)<br /><br />2) Somewhat confusing (probably wrong):<br />My MM1026 is 8 pin SOIC.  Yours apparrently is 14 pin?  I can't find a part that matches that.<br /><br />3) Incorrect connections:<br /><br />As noted above, I see:<br />SRAM pin 26 (CE) -&gt; pin76 SPC7110 <br />SRAM pin 20 (/CE) -&gt; pin5 MM1026AF <br /><br />Instead, you see:<br />SRAM pin 20 -&gt; memory mapper<br />SRAM pin 26 -&gt; SNES /RESET<br /><br />I'm guessing this is also why you labelled pin76 of SPC7110 as SRAM_RESET, when it is just SRAM CE and is not connected to the /RESET (on my board at least).<br /><br /><br />That would be interesting if we did have different board versions.  It would make discussions confusing at times though.<br /><br />I trusted your doc except for the lines I traced and mention in my previous post.  So you can read everything from there in case I forgot to list something here.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Also, when you were talking about those "spare pulses" from the SPC to U2, maybe it would be of help to see if there is any data exchange at all between the SPC and U2 - did you monitor the data lines as well?</div>
<br />I borrowed a two channel oscilloscope.   What you're wanting really needs a logic analyzer which I don't have or know where to borrow one from.  So, it would be neat to see <em>what</em> it is accessing, but unfortunately I can't really tell (unless it is the same byte every time, in which case I could slowly figure it out, but we wouldn't be able to trust that as we have no way of knowing for sure if it is indeed the same byte everytime without a logic analyzer).
<br />
<br />
<br />How's your setup coming along?
<br />Now that we figured out some of the basics of the algorithm, we're quickly approaching the point that we need to run custom data to nail down some specifics.
<br />
<br />---------------------------------------
<br />EDIT:
<br />Here's the pinout of the MM1026 that I've been assuming ( <!-- m --><a class="postlink" href="http://pdf1.alldatasheet.com/datasheet-pdf/view/99104/MITSUBISHI/MM1026.html">http://pdf1.alldatasheet.com/datasheet- ... M1026.html</a><!-- m --> )
<br />pin 1 - GND 
<br />pin 2 - /RESET
<br />pin 3 - CS
<br />pin 4 - Vbatt
<br />pin 5 - /CS
<br />pin 6 - Vout
<br />pin 7 - NC
<br />pin 8 - Vcc

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Mon Jun 23, 2008 9:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">As I mentioned above, there are a few errors that can't be explained by pin numberring.  For example no pin of the SRAM connects to SNES /RESET.<br /></div><br /><br />Well, considering the SPC has all the memory mappings for the two roms in itself, i wouldnt take out the possibility that the snes's reset goes through it too instead of directly to the SRAM. Which is actually the case. The SRAM has no direct SNES RESET connection, not on any board (be it of type 0 or 1, that is), it takes it straight from the SPC. Looks like it not only acts as decompressor but as an interface as well.<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><br /> I guess there is also the possibility that we have different board versions or something.  Here's the differences I noticed:<br /><br />1) Very minor:<br />My SRAM is a LH52A64, while you list yours as HY6264.  Is that the actual part number on your board? (which would be great because I can find the pinout of that, but not the LH52A64 and have just been assuming it was compatible with HY6264)<br /><br />2) Somewhat confusing (probably wrong):<br />My MM1026 is 8 pin SOIC.  Yours apparrently is 14 pin?  I can't find a part that matches that.<br /><br />3) Incorrect connections:<br /><br />As noted above, I see:<br />SRAM pin 26 (CE) -&gt; pin76 SPC7110 <br />SRAM pin 20 (/CE) -&gt; pin5 MM1026AF <br /><br />Instead, you see:<br />SRAM pin 20 -&gt; memory mapper<br />SRAM pin 26 -&gt; SNES /RESET<br /><br />I'm guessing this is also why you labelled pin76 of SPC7110 as SRAM_RESET, when it is just SRAM CE and is not connected to the /RESET (on my board at least).<br /><br /><br />That would be interesting if we did have different board versions.  It would make discussions confusing at times though.<br /><br /></div><br /><br />Very unlikely. I've broken, erm, *analized* quite a few FEoEZ carts, as well as some MDH, and they all showed the same chips (as per game, mind it). I presume I had just luck to grab all the carts that come from the same production set.<br /><br />1) My SRAM is HY6264 on _all_ the FEoEZ boards I have seen so far. I would had noted that in my document if not.  The FEoEZ board is a SHVC-LDH3C-01, could you please check it? If it is not the same, could you please provide a scan of it - that would help.<br /><br />2) My lazineeeesssss *corrects the pin count on the map*<br /><br />3) Hm. I need to check this later today.<br /><br /><br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">I trusted your doc except for the lines I traced and mention in my previous post.  So you can read everything from there in case I forgot to list something here.<br /></div> <br />Yeeee ^^!<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">I borrowed a two channel oscilloscope.   What you're wanting really needs a logic analyzer which I don't have or know where to borrow one from.  So, it would be neat to see <em>what</em> it is accessing, but unfortunately I can't really tell (unless it is the same byte every time, in which case I could slowly figure it out, but we wouldn't be able to trust that as we have no way of knowing for sure if it is indeed the same byte everytime without a logic analyzer).<br /><br /><br />How's your setup coming along?<br />Now that we figured out some of the basics of the algorithm, we're quickly approaching the point that we need to run custom data to nail down some specifics.<br /><br /></div>
<br />I almost was ready to buy a logical analyzer, got a very neat one on ebay (if you want I can provide with the link), and considering the $/€ change it would had been competitive.
<br />My setup is not so well, hadnt that much time lately. And after your considerations about the CART / SF3 conflict, I am not so sure I want to try it - maybe by modding the U1 on the cart as you suggested it should work fine...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Jun 23, 2008 9:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Well, considering the SPC has all the memory mappings for the two roms in itself, i wouldnt take out the possibility that the snes's reset goes through it too instead of directly to the SRAM. Which is actually the case. The SRAM has no direct SNES RESET connection, not on any board (be it of type 0 or 1, that is), it takes it straight from the SPC. Looks like it not only acts as decompressor but as an interface as well.</div><br />That line isn't a reset.  It is a chip select line.  <br /><br />/RESET may be part of the memory select circuitry (possibly nothing can be selected if /RESET is low, but I haven't checked), but the SPC7110 is acting as a memory address decoder for the ROMs and SRAM.  It is not "resetting" the SRAM.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">1) My SRAM is HY6264 on _all_ the FEoEZ boards I have seen so far. I would had noted that in my document if not.  The FEoEZ board is a SHVC-LDH3C-01, could you please check it? If it is not the same, could you please provide a scan of it - that would help.</div><br />My board is SHVC-LDH3C-01 as well.<br />So those parts must be pin compatible substitutes, which is good to know.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">My setup is not so well, hadnt that much time lately. And after your considerations about the CART / SF3 conflict, I am not so sure I want to try it - maybe by modding the U1 on the cart as you suggested it should work fine...</div>
<br />Sorry to hear your setup isn't doing so great.
<br />The SF7 controls the external cartridge /RD line, so it could potentially fix this problem.  It is strange to me that it apparrently doesn't.  Maybe there is some extra stuff going on that I am missing.
<br />
<br />Either way, lifting the /OE pin on the ROM and tying it to Vcc should definitely fix it.
<br />---------------------
<br />While I had the cartridge open:
<br />unused cart pads:
<br />all pads on the outer tabs except pad 1 (CLK)
<br />pad 57 (CPU_CLOCK)
<br />pad 49 (/CART)
<br />pad 18 (/IRQ)
<br />
<br />So it seems like the strange U2 accesses can probably only be triggered by internal timing.  Weird.  Any ideas anyone?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jun 24, 2008 12:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">So it seems like the strange U2 accesses can probably only be triggered by internal timing.  Weird.  Any ideas anyone?</div>
<br />
<br />How about guessing?
<br />
<br />The reads that your memory viewer performs on the SPC side are echoed on the U2 bus.
<br />EDIT : just realized this may sound incomplete.
<br />*Some* reads (aka reading from specific offsets) are echoed. My guess? Try them all one by one (sigh)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jun 24, 2008 1:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">How about guessing?<br /><br />The reads that your memory viewer performs on the SPC side are echoed on the U2 bus.<br />EDIT : just realized this may sound incomplete.<br />*Some* reads (aka reading from specific offsets) are echoed. My guess? Try them all one by one (sigh)</div>
<br />Please remember that I saw those U2 accesses even when I was not accessing the U1-ROM, U2-ROM, SRAM, nor any SPC reg.
<br />
<br />So while it is possible something gets echoed through, it would have to be fairly singular (roughly only one access per &gt; 1 ms).  I not sure any region fits that. (Unless it is literally just one byte in the middle of no-where, which doesn't make any sense.)
<br />
<br />Does anyone else have an oscilloscope they can  use to verify this?  Maybe the clock to my SPC7110 is noisy and there are glitches every once in awhile that cause something seemingly random.  Some verification would ease my mind a bit on this.
<br />
<br />============================
<br />
<br />I really need help/insight on how to update the probabilities. 
<br />I got up to 9 bits decompressed to always work now, but it involved something a bit bizarre in the prob/2 loop. (But resolved other things that seemed 'weird' before, so I'm glad I fell upon that idea.)  Basically, the condition to divide prob by 2 for some reason depends on the _previous_ state's "table value" of prob and its size relative to TOP-BOT.  So even if the prob is updated from $5A -&gt; $25, the value $5A is still used to determine how many times the current probability should be divided by two.  The details can be changed slightly (maybe these are actually two different state values), but this works wonderfully (and by the time you get all 9 bits to decompress correctly, things are getting quite finicky/precise).
<br />
<br />Bit 10 finally involves cases where the bitplane previously could have caused a shift even though the choice was correct ... Andreas set this to cause the probability to change to the next value in a table. This works apparrently when always choosing the MPS. But looking at the data, it becomes more complicated when LPS are included. This means the updating of the probability (when the symbol was chosen correctly) depends on more than whether a shift was made. ... it may even depend on the other bitplanes somehow. 
<br />
<br />Since I got the 9th bit to always work, that means I have gotten (or at least am very close to) the correct code for: 
<br />- updating the probability after a LPS is chosen and a shift occurs 
<br />- updating the probability after a MPS is chosen but no shift occurs 
<br />
<br />So I still need to figure out the details for updating in (at least) two other cases: 
<br />- updating the probability after a LPS is chosen and no shift occurs 
<br />- updating the probability after a MPS is chosen and a shift occurs 
<br />
<br />Is anyone else besides Andreas looking at the data? 
<br />Do I sound like I'm completely rambling? 
<br />If anyone can follow what is going on and can help brainstorm while Andreas is busy with real life work, please join in the discussion.  If someone needs a breather / summary post I can try to do that to give an 'intermission' to the work so far.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Jun 24, 2008 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I haven't been *totally* busy with RL. I have done some work on this  <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />
<br />If i havent' said anything is because i'm in a point where i really need to work and test things before saying nonsenses and confuse people.
<br />
<br />But, to give some highlights of what i'm doing...
<br />
<br />I'm able to reproduce the 9 first bits too.
<br />I'm using only 8-bits arithmetic
<br />I'm still not using the BOTTOM thing.
<br />I have some ideas about how the evolution works that need additional testing.
<br />
<br />Basicly, i think the decompression follow 2 modes of operation: one of them, that we could call "MPS mode" is the normal mode, where the decission to output a LPS or a MPS is decided by the TOP-PROB limit. The other one, which we could call "LPS mode" is reached when the compression reach the 1:1 ratio and the decision to output a LPS or MPS is decided by looking whether or not VALUE is less than 0x5A.
<br />
<br />However, like you, i'm still trying to figure out the probability evolution for all the cases; as said, i have some ideas to test, but there is no guarantee of success.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jun 24, 2008 3:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">Please remember that I saw those U2 accesses even when I was not accessing the U1-ROM, U2-ROM, SRAM, nor any SPC reg.<br /><br />So while it is possible something gets echoed through, it would have to be fairly singular (roughly only one access per &gt; 1 ms).  I not sure any region fits that. (Unless it is literally just one byte in the middle of no-where, which doesn't make any sense.)<br /></div>
<br />
<br />
<br />Intresting.
<br />Hey, btw, if you still have the oscilloscope, I wonder if it would be possible to verify once and for all if writes get echoed to the U2 bus by the SPC. Could you in that sense try to write to the U2 address space (for example a simple byte, 0xFF, ie all bits at 1) and check two bit lines through the oscilloscope (ie D0 and D7, or D0 and D4) on the SPC U2 Databus after the write?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Tue Jun 24, 2008 5:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, Im not sure I will be able to help, but being it a boring working day I took a closer look at the whole procedure, and a first question popped out in my mind. 
<br />
<br />I presume the probability evolution depends only from the input values, ie no external (predefined) table is used for that, which means the probability table gets constructed step by step accordingly to decompressed values that come from the correspondent inputs. 
<br />Do you think there are initially defined values? That is, a non-empty table from which the evolution starts? I can imagine there isnt (because that would mean you would have different chip versions for different games, which isnt the case) but that would mean that the table needs to be constructed first, and that would mean in turn that a certain ammount of symbols need to be parsed by the decompresser to adjust each probability, which doesnt seem to be the case, as the test i asked neviksty to use showed that the same input value twice produces the same output twice? If it would had been adapted, the second value would had been different - or maybe I am getting the whole thing wrong, and instead of changing the value, the second time the same value appears it just "strenghtens" the probability of the output, thus producing the same output. 
<br />
<br />
<br />Also, if the probability table is not fixed, this would mean that if a input simbol x produces a certain output y at a certain moment z,
<br />z+n inputs later its highly plausible that another input simbol x1 will produce the same output y, as the probability has changed, and thus the mappings.
<br />
<br />This is, obviously, a total guess for now...I still need to see the posts of you guys, so blame me for what I said if you feel like you should. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jun 24, 2008 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">This is, obviously, a total guess for now...I still need to see the posts of you guys, so blame me for what I said if you feel like you should. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><br />Hmm... I don't agree with some of your starting assumptions, and I think these have been addressed before somewhere in this hulking thread.  So it would definitely be benificial to read more of the posts when we first started picking at the algorithm.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">But, to give some highlights of what i'm doing...<br /><br />I'm able to reproduce the 9 first bits too.<br />I'm using only 8-bits arithmetic</div><br />How is that possible?  Especially for the 36-37 transition (and the bounds of that (35-36, 37-38 transitions) which seem to involve much more than 8 bit wide registers.<br /><br />If you could share at least that much for me to mull over, it would be useful.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">I'm still not using the BOTTOM thing.</div>
<br />I still don't understand how that is possible.  I've gone over my logic several times and I don't see where I am making a flaw.
<br />
<br />One of my assumptions is that all possible values can come out of the compressor (ie. from the point of view of a range encoder, no range is impossible), if you invert your code to a compressor, is this violated?  If so, that would help me see what assumption I made is failing.
<br />
<br />Or even better, if you could share the main loop of your decompressor, I could play with all this myself.  And I could also see in what ways our code is equivalent and what ways it is distinguishable so I can find a test case to convince myself my "branch of exploration" here is not tenable.  Until then, our efforts seem split.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Jun 24, 2008 3:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How is that possible? Especially for the 36-37 transition (and the bounds of that (35-36, 37-38 transitions) which seem to involve much more than 8 bit wide registers.<br /><br />If you could share at least that much for me to mull over, it would be useful.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm still not using the BOTTOM thing.</div><br /><br />I still don't understand how that is possible. I've gone over my logic several times and I don't see where I am making a flaw.<br /></div>
<br />
<br />I think i can answer both at the same time. Indeed, if i rewrote something the mess i have, i think i would be using only a 8-bit CUTOFF variable.
<br />
<br />The point for that is that, every time you output a LPS, you do   VALUE = VALUE - CUTOFF.
<br />
<br />This, at the same time, allow you to not use the BOTTOM thing (as you are shifting your interval to the start of the subinterval to make "BOTTOM" identically 0) and it explain why i'm only using 8 bits (because, when you substract CUTOFF, you will get zeros in the most significative bits, which allow/force you to shift VALUE and get a new bit). Take a thought at it.
<br />
<br />I have to recognize, however, than, after crossing the 8-9 bits boundary, i'm having the same problems as you to figure out how the MPS/PROB evolution works. I think i'm going to need pretty much more study on this before i get a clear insight on what is happening.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jolly_codger</b> [ Tue Jun 24, 2008 6:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tried the LOW/HIGH intervals. Get 8-bits with neviksti's PROB/2 method.
<br />Also tried using the 'LOW=0' method. Which gets 8-bits over here (maybe doing it wrong).
<br />
<br />I guess there's some stuff I don't get about arithmetic coding.
<br />Don't want to slow down anyone's progress with stupid questions though. xx(
<br />
<br />- The above two 'differing' methods give 'identical' output for 8-bits (logically they do the same thing?)
<br />
<br />- codeword=00000000 --&gt; we'll traditionally get MPS=0.
<br />Where does the 1-&gt;128 come in? If the TOP's MSb eventually hits a 0? Or is that because of a really small PROB?
<br />
<br />
<br />- codeword=FFFFFFFF --&gt; we'll traditionally get LPS=1 (bad assumption maybe).
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SPC7110:<br />FFFFFFFF FFFFFFFF --&gt; FF77CCCC 55DD0000<br />00450000 00000000 --&gt; 00200020 00200020 &#40;..&#41;<br /></div><br /><br />Can arithmetic coding actually lock into that latter result? Is it really possible? :confused:<br /><br />And then there's the debug log. Which 'eventually' 'stabilizes' the HIGH/CUTOFF for various tests (converges?).<br />How can it break off from this rigid area?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">906FC5EE / 70A5EFD5<br />CODE = 906F | HIGH = FFFF | CUTOFF = A5FF | PROB = 5A00 | 0!<br />CODE = 906F | HIGH = A5FF | CUTOFF = 4BFF | PROB = 5A00 | 1#<br />CODE = 4470 | HIGH = 5A00 | CUTOFF = 4BFF | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 88E1 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 1#<br />CODE = 2EE1 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 5DC3 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 1#<br />CODE = 03C3 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 0786 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 0!<br />CODE = 0786 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 0F0C | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 0!<br />CODE = 0F0C | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 1E18 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 0!<br />CODE = 1E18 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 3C31 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 0!<br />CODE = 3C31 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />70<br />CODE = 7862 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 0!<br />CODE = 7862 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br /><br /><br />0FFF3992 / 0D2420D9<br />CODE = 0FFF | HIGH = FFFF | CUTOFF = A5FF | PROB = 5A00 | 0!<br />CODE = 0FFF | HIGH = A5FF | CUTOFF = 4BFF | PROB = 5A00 | 0!<br />CODE = 0FFF | HIGH = 4BFF | CUTOFF = 4BFF | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 1FFE | HIGH = 97FE | CUTOFF = 3DFE | PROB = 5A00 | 0!<br />CODE = 1FFE | HIGH = 3DFE | CUTOFF = 3DFE | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 3FFC | HIGH = 7BFC | CUTOFF = 3DFE | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 7FF9 | HIGH = F7F8 | CUTOFF = 9DF8 | PROB = 5A00 | 0!<br />CODE = 7FF9 | HIGH = 9DF8 | CUTOFF = 43F8 | PROB = 5A00 | 1#<br />CODE = 3C01 | HIGH = 5A00 | CUTOFF = 43F8 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 7803 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 1#<br />CODE = 1E03 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 3C07 | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 0!<br />CODE = 3C07 | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 780E | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 1#<br />CODE = 1E0E | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br />0D<br />CODE = 3C1C | HIGH = B400 | CUTOFF = 5A00 | PROB = 5A00 | 1#<br />CODE = E21C | HIGH = 5A00 | CUTOFF = 5A00 | PROB = 5A00 | SHIFT&#40;1&#41;<br /><br /><br />00450000 / 00200020<br />CODE = 0045 | HIGH = FFFF | CUTOFF = A5FF | PROB = 5A00 | 0!<br />CODE = 0045 | HIGH = A5FF | CUTOFF = 4BFF | PROB = 5A00 | 0!<br />CODE = 0045 | HIGH = 4BFF | CUTOFF = 4BFF | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 008A | HIGH = 97FE | CUTOFF = 3DFE | PROB = 5A00 | 0!<br />CODE = 008A | HIGH = 3DFE | CUTOFF = 3DFE | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 0114 | HIGH = 7BFC | CUTOFF = 3DFE | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 0228 | HIGH = F7F8 | CUTOFF = 9DF8 | PROB = 5A00 | 0!<br />CODE = 0228 | HIGH = 9DF8 | CUTOFF = 43F8 | PROB = 5A00 | 0!<br />CODE = 0228 | HIGH = 43F8 | CUTOFF = 43F8 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 0450 | HIGH = 87F0 | CUTOFF = 2DF0 | PROB = 5A00 | 0!<br />CODE = 0450 | HIGH = 2DF0 | CUTOFF = 2DF0 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 08A0 | HIGH = 5BE0 | CUTOFF = 2DF0 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 1140 | HIGH = B7C0 | CUTOFF = 5DC0 | PROB = 5A00 | 0!<br />CODE = 1140 | HIGH = 5DC0 | CUTOFF = 5DC0 | PROB = 5A00 | SHIFT&#40;1&#41;<br />CODE = 2280 | HIGH = BB80 | CUTOFF = 6180 | PROB = 5A00 | 0!<br />CODE = 2280 | HIGH = 6180 | CUTOFF = 6180 | PROB = 5A00 | SHIFT&#40;1&#41;<br />00<br />CODE = 4500 | HIGH = C300 | CUTOFF = 6900 | PROB = 5A00 | 1#<br />CODE = DC00 | HIGH = 5A00 | CUTOFF = 6900 | PROB = 5A00 | SHIFT&#40;1&#41;<br /></div>
<br />
<br />
<br />One last question about context modeling.
<br />
<br />Let's say we have a basic frequency counter (8-width image):
<br />freq_0[2][2] and freq_1[2][2] for above/left pixels.
<br />
<br />Is that practically an 'industrial-strength' solution?
<br />
<br />
<br />Thanks in advance to anyone who can help out this arithmetic newbie.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Jun 24, 2008 11:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">I think i can answer both at the same time. Indeed, if i rewrote something the mess i have, i think i would be using only a 8-bit CUTOFF variable.<br /><br />The point for that is that, every time you output a LPS, you do   VALUE = VALUE - CUTOFF.<br /><br />This, at the same time, allow you to not use the BOTTOM thing (as you are shifting your interval to the start of the subinterval to make "BOTTOM" identically 0) and it explain why i'm only using 8 bits (because, when you substract CUTOFF, you will get zeros in the most significative bits, which allow/force you to shift VALUE and get a new bit). Take a thought at it.</div><br />Oh I see now.  You are using VAL as a state variable (instead of just raw data).  Therefore you are indeed using two state variables and in principle the current range limits can be calculated with these variables.  So my logic holds, but your interesting choice of state variables allows one to restrict the effective range to 8 bits at all times.<br /><br />I definitely wouldn't have thought to subtract from VAL and use it as a state variable.  Interesting indeed.<br /><br />Therefore, except where my method would eventually run out of precision in some extreme examples, they are completely equivalent.<br /><br />Because of that limitation I have switched my code over to what you described.  Since I didn't touch my MPS or PROB update methods, I still only get 9 bits of course.  But the fact that I got nine bits still I hope means I got it working now.<br /><br />Thanks Andreas.<br /><br /><div class="quotetitle">jolly_codger wrote:</div><div class="quotecontent">Tried the LOW/HIGH intervals. Get 8-bits with neviksti's PROB/2 method.<br />Also tried using the 'LOW=0' method. Which gets 8-bits over here (maybe doing it wrong).</div><br />For the first eight bits, prob is always $5A and mps is always 0.  So after this is basically a test of how well we can get our prob and mps evolution to work.<br /><br /><div class="quotetitle">jolly_codger wrote:</div><div class="quotecontent">- codeword=00000000 --&gt; we'll traditionally get MPS=0.<br />Where does the 1-&gt;128 come in? If the TOP's MSb eventually hits a 0? Or is that because of a really small PROB?</div><br />If PROB=1, you can have 128 most likely symbols in a row before the next bit is known (TOP's MSb is 0).  Hence 1 bit can encode 128 symbols.<br /><br />Whether MPS is 0 or 1 is a secondary issue here.  In this case MPS starts as one, and every symbol guess is correct, so likely isn't changed (so the output would be all 0's for an input of all 0's).<br /><br /><div class="quotetitle">jolly_codger wrote:</div><div class="quotecontent">- codeword=FFFFFFFF --&gt; we'll traditionally get LPS=1 (bad assumption maybe).</div><br />Well, we'll always get LPS.  The least probably symbol starts as 1, but since every symbol guess is wrong, it likely will change.<br /><br />As you can see in your example, it does:<br /><br /><div class="quotetitle">jolly_codger wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">SPC7110:<br />FFFFFFFF FFFFFFFF --&gt; FF77CCCC 55DD0000<br />00450000 00000000 --&gt; 00200020 00200020 &#40;..&#41;<br /></div><br /><br />Can arithmetic coding actually lock into that latter result? Is it really possible? :confused:</div>
<br />I hope that answered your questions.
<br />
<br />I wasn't really understanding your remaining questions.  If the above doesn't help with those, can you explain in a bit more depth what your question is?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Jun 25, 2008 2:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What the #@$! ?
<br />I just got 10 bits to work, and I don't understand it.  I'll list it here in case it gives anyone insight.
<br />
<br />
<br />Knowns:
<br />
<br />For a long string of MPS, we see that we should update the prob (change the index in a table of discrete values) for that bitplane whenever a shift of the state values is caused by a received MPS.
<br />
<br />For a long string of LPS, the 0th and 4th bitplane seem to be treated differently as their mps is changed for the second bit from that bitplane, while it is not for the other six bitplanes.
<br />
<br />
<br />I don't know how to make that fit in with the following, but it shows that stuff is clearly missing.  There's all kinds of ways we can try to dress this up into possible indexes into probability tables, but for now, here are the raw facts:
<br />
<br />Okay, to get second bit of bitplane0 (get first 9 bits to decode correct)
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">If last bit from this bitplane previously guessed correct<br />&nbsp; &nbsp; prob=$5A<br />else<br />&nbsp; &nbsp; prob=$25<br />&nbsp; &nbsp; mps=1<br />endif</div><br /><br />Okay, to get second bit of bitplane1 (get first 10 bits to decode correct)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if the _immediately_previous_ symbol was correct &#40;not related to current bitplane at all&#41;<br />&nbsp; &nbsp;prob=$25 <br />&nbsp; &nbsp;if last bit from this bitplane was guessed wrong<br />&nbsp; &nbsp; &nbsp; &nbsp; mps=1<br />&nbsp; &nbsp;endif<br />else<br />&nbsp; &nbsp;prob=$5A<br />endif</div>
<br />
<br />
<br />So how does paying attention to the shifting when considering the prob updates (which we know is necessary at some point), fit into this?
<br />
<br />EDIT:  I have only been using the "every possible two byte starts" files to compare to.  So I guess the cutoffs aren't really solid now... so maybe I'm just eeking through the cracks.  But still, not a single case missed!?
<br />Maybe we'll stumble upon the 11th bit solution, and comparing the two things will start to make sense.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>10</strong> of <strong>21</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>