<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What is the minimum amount of instructions you need in a CPU</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What is the minimum amount of instructions you need in a CPU</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16989">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16989</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Jan 28, 2018 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>What is the minimum amount of instructions you need in a CPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In order to have a working CPU, you would need the following:<br /><br />- ALU instructions<br />- immediate addressing<br />- indirect addressing<br />- condition flag manipulation<br />- branching<br />- interrupts<br />- subroutine calls and returns<br />- ability to have jump tables (make sure there is at least some way of doing this)<br /><br />Am I missing anything?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sun Jan 28, 2018 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />for interrupts, you need a stack. For stacks, you want push and pop<br /><br />not sure inc and dec is part of ALU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Jan 28, 2018 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can probably avoid having a stack by having a call back register, and an interrupt call back register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>elseyf</b> [ Sun Jan 28, 2018 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess you could have a CPU only working with basic MOVE instructions, mapping the ALU in memory. It would only need additional hardware to process conditionals.<br />This was done on x86, see <a href="https://www.youtube.com/watch?v=R7EEoWg6Ekk" class="postlink">here</a>.<br />Of course there are many considerations on how to design the CPU in order to know which instructions you need (eg. do you need a JMP instruction, or is PC accessible like General Purpose Registers so only MOV is required, see ARM CPUs where you can access PC like any other register if I recall correctly).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sun Jan 28, 2018 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />that's interesting - having all of the CPU:s registers on the addr space (if not accessed via special instructions). For example, you could modify a singular byte in the PC word/dword/whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Jan 28, 2018 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are <a href="https://en.wikipedia.org/wiki/One_instruction_set_computer" class="postlink">&quot;one&quot; instruction set computers</a>, usually with some sort of composite instruction like &quot;subtract X from Y and if the result was negative branch to Z&quot;, but in order to be useful they end up giving specific memory locations side-effects, making a <a href="https://en.wikipedia.org/wiki/Transport_triggered_architecture" class="postlink">transport-triggered architecture</a>.<br /><br />I've seen ISAs that only can operate on one bit at a time; those don't really have a full ALU.<br /><br />MIPS (among others) have a register to hold the return address, but you still need some kind of stack in order to support calling more than one deep.<br /><br />You don't need immediate addressing, although it does make your code bigger; ARM uses a &quot;constant pool&quot; for anything that doesn't fit into the 8-bit-constant-plus-5-bit-rotate literal format.<br /><br />PIC provides native read/write access to the lower 8 bits of the program counter; this was intended for computed goto but the ability to say &quot;just add N to the current value&quot; is sometimes useful. The upper bits aren't directly exposed, though. (And the original 8086 had the basically useless <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">POP CS</tt> instruction)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Jan 28, 2018 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Super FX doesn't have a stack (RAM access is far too slow, and including a stack on-die would have been expensive).  It has instead an instruction called <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LINK</tt>, which adds a 4-bit number to the program counter and stores it in R11.<br /><br />This chip also puts the [bottom two bytes of the] program counter in R15, and you can do stuff to it like normal (though not all instructions work on all registers - they tried to do a RISC chip with single-cycle instructions while directly interfacing to 8-bit SNES-compatible cartridge memory, which kinda forced them to economize wherever possible).  This means that the presence of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">IWT Rn, #xx</tt> (load immediate word to register) means there's no reason to have immediate jump instructions; accordingly, the only available versions of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">JMP</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LJMP</tt> use the contents of specified registers rather than immediates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Punch</b> [ Sun Jan 28, 2018 2:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I feel like you have a fully functional CPU if you have the following in it:<br /><br />1- logical NAND and/or NOR (Sheffer's Stroke!)<br />2- Load<br />3- Store<br />4- Jump if Zero<br /><br />4- Add (optional for convenience).<br /><br />Don't quote me but I think that's all it takes to make your CPU an universal Turing machine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Sun Jan 28, 2018 3:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have been slowly working on a CPU design and the main thing is to be as convenient as possible for the programmer as there's never gonna be any compiler for it. The approach I took is fully orthogonal 32bit design, all instructions are equal and all registers are usable as general purpose ones, no distintction exists between regular and special registers for any of the instructions. In theory such approach takes less hardware due to ability to reuse single data access mechanism universally for everything but it is yet to be seen how that pans out once I start realizing it in an FPGA.<br />There's no dedicated stack other than for interrupts where there's a dedicated register for returns addressing. Call and return instructions specify where the return address goes/is. Most else is pretty mundane, there's about 40 instructions total, less if some special ones such as caching related things are removed. Instructions are 16 or 32bit depending on if they have one or two operands, with fixed RISC like decoding.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sun Jan 28, 2018 5:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />on the mv as only instruction thing. I suppose could work something like this?<br /><br />overwrite_x_to_y;<br />mv x y<br /><br />subtract_x_from_y;<br />mv 0 to [various flags, unrolled]<br />mv x to arithmetic register<br />mv 1 to subtraction flag<br />mv x to arithmetic register<br />mv result register to x<br />?<br /><br />sounds pretty terrible in practice if it was the *only* instruction <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> even though you probably can do things a more hardwired cpu can't.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Jan 28, 2018 9:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A CPU can be made with only one instruction (one kind is the &quot;TOGA computer&quot;, which is mainly just a programmable counter and a gate), although it is generally useful to have more. Many instruction sets do not have status flags, such as MMIX (branch instructions check if a given register is zero, nonzero, positive, negative, even, odd, whatever). (It would also be helpful to specify what ALU instructions.) On some instruction sets (such as VAX), the program counter is just another register; you can do stuff with it like with any other register. Fully orthogonal is good. (I happen to like MMIX.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Jan 28, 2018 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just do whatever RISC-V does...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Mon Jan 29, 2018 12:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Minimum Instruction Set Computer, on Wikipedia: <!-- m --><a class="postlink" href="https://en.wikipedia.org/wiki/Minimal_instruction_set_computer">https://en.wikipedia.org/wiki/Minimal_i ... t_computer</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In order to have a working CPU, you would need the following:<br /><br />- ALU instructions<br />- immediate addressing<br />- indirect addressing<br />- condition flag manipulation<br />- branching<br />- interrupts<br />- subroutine calls and returns<br />- ability to have jump tables (make sure there is at least some way of doing this)<br /><br />Am I missing anything?</div><br />I've brought a lot of products to market with PIC16 microcontrollers which didn't even have all of the above.  Indirect addressing for example is just direct addressing going through the INDF (indirect register file) register which is not a physical register but has a physical address in the RAM space.  What it accesses when you read/write/increment/etc. it is determined by what you stored in the FSR (file select register), again with direct addressing.  It's a pain.  Conditions and branching are only about skipping the next instruction if the condition is true, so if you really want to branch, the next instruction has to be a jump.  Someone already mentioned the jump tables part which is really mickey-mouse.  There's no direct stack access, including no push and pop (pull) instructions, although that was corrected in later PICs.  <a href="http://forum.6502.org/viewtopic.php?p=4997#p4997" class="postlink">The 6502 is twice as efficient.</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">that's interesting - having all of the CPU:s registers on the addr space (if not accessed via special instructions).</div><br />That's almost what the 6502 has.  Bill Mensch calls it &quot;addressable-register architecture,&quot; or ARA.  In a sense, all of ZP is processor registers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have been slowly working on a CPU design and the main thing is to be as convenient as possible for the programmer as there's never gonna be any compiler for it.</div><br />Not a compiler, but the <a href="http://www.datasynceng.com/c32doc.htm" class="postlink">Cross-32 assembler</a> (which I use and like) comes ready to assemble for dozens of processors, plus comes with the information you need to write your own tables to make it assemble for a processor of your own design.  (It is also available <a href="http://www.mpeforth.com/cross32.htm" class="postlink">here</a>.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Jan 29, 2018 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Many instruction sets do not have status flags, such as MMIX (branch instructions check if a given register is zero, nonzero, positive, negative, even, odd, whatever).</div><br /><br />Interesting.  I guess I'm so used to seeing CPUs with status flags, I thought they were necessary.  What if they need to disable interrupts?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 29, 2018 4:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What is the minimum amount of instructions you need in a</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On many such architectures, the interrupt control register still exists. It just no longer also contains status flags (NZVC), and mode bits (MXD) are instead part of the instruction. And unprivileged programs aren't allowed to access that register in order to prevent one program from denying other preemptively multitasked programs a chance to run.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>