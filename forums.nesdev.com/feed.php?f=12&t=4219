<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=4219" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-07-16T07:24:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=4219</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-07-16T07:24:15-07:00</updated>
<published>2008-07-16T07:24:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34992#p34992</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34992#p34992"/>
<title type="html"><![CDATA[Re: Dynamic SNES sprite table construction?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34992#p34992"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />But really, you should process the list outside of your NMI routine, and let the NMI just blit the entire 544-byte table all at once if a "dirty" flag is set.<br /></div><br />Yup, that's what virtually all NES games do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jul 16, 2008 7:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2008-07-15T23:02:25-07:00</updated>
<published>2008-07-15T23:02:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34973#p34973</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34973#p34973"/>
<title type="html"><![CDATA[Re: Dynamic SNES sprite table construction?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34973#p34973"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The hardest part of building the table would seem to be setting up the 32 byte table at the end of the list (whatever it's technically called).<br /></div><br /><br />I know this is basically gaming sacrilege, but if you have a bottleneck and don't otherwise want to limit your game ... if you're willing to clip the sides of the screen by ~16 pixels each, then you really don't need to worry about the 32-byte attribute table at all. It only stores the highest-bit of the X position, and the size of the sprites.<br /><br />I think it's relatively safe to assume your sprites aren't going to change sizes every frame. And when they do, you'll have more overhead changing them than a bit in an attribute table.<br /><br />As for X.d8, well, if your screen width is 256 pixels, is it really ever necessary to place a sprite at X=256 (completely offscreen) or above? If you try and use it as a "sprite disable" bit, you get to worry about the fun bug where if X is <em>exactly</em> 256, all of its tiles are added to your on-screen sprite limit count, even though none of it is visible. It's better to set Y to 224 or 240 to disable a sprite.<br /><br />With the clipping, you'll no longer need to set "negative" sprite positions (eg 511 = -1) to smoothly scroll a sprite off the left edge of the screen.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Could it be done in the vertical retrace, assuming the routine was fairly well written (in asm)?<br /></div><br /><br />Retrace gives you ~50,000 cycles of time. That gives you ~2,000 or so instructions to work with. Usually, NMI routines are designed to blit data to VRAM, OAM and CGRAM from a saved list, poll for input, maybe do some sound events, and not much else. Each DMA byte transferred consumes 8 cycles from your available time.<br /><br />You should also keep in mind that you can control "vertical retrace" (or more honestly, the ability to write to VRAM, OAM and CGRAM on a given scanline) by turning on forced blank. Games like SFA2 use IRQs to disable the screen for the first 16 lines or so, and for the last 16 lines or so, which doubles the length of your vertical retrace period in return for a slight reduction in screen real estate.<br /><br />But really, you should process the list outside of your NMI routine, and let the NMI just blit the entire 544-byte table all at once if a "dirty" flag is set.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Tue Jul 15, 2008 11:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cdoty]]></name></author>
<updated>2008-07-14T22:48:49-07:00</updated>
<published>2008-07-14T22:48:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34937#p34937</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34937#p34937"/>
<title type="html"><![CDATA[Dynamic SNES sprite table construction?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34937#p34937"><![CDATA[
<div class="quotetitle">d4s wrote:</div><div class="quotecontent"><br />I think it all depends on how much sprites you want to display/what kind of genre you're doing.<br /><br />Your idea sounds nice, but I'd imagine that once you've implemented it, you'd spend most of the time clearing your 640 byte table each frame, not creating the oam table itself.<br /><br />I just hope I didn't miss your point completely...<br /></div><br /><br />But, doesn't each genre need to sort the sprites in some way?<br /><br />The 640 byte table will be operated on in ram, and should be fairly easy to clear.<br /><br />I think you understand what I'm trying to accomplish.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=274">cdoty</a> — Mon Jul 14, 2008 10:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[d4s]]></name></author>
<updated>2008-07-14T16:51:23-07:00</updated>
<published>2008-07-14T16:51:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34932#p34932</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34932#p34932"/>
<title type="html"><![CDATA[Dynamic SNES sprite table construction?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34932#p34932"><![CDATA[
I think it all depends on how much sprites you want to display/what kind of genre you're doing.<br /><br />From my experience(and that's not very much), you usually won't have more than 15-32 sprites on screen that need sorting for the average jump n run or rpg, anyway.<br />And of the total time needed to process a sprite in such an environment, you`ll probably spend the most calculating the sprite action/movement/animation/whatever.<br /><br />For such a low number of sprites, the time needed to copy from your object list to your oam table buffer probably wouldn't matter that much.<br />Unless you're doing a bullet hell shooter of course, but you'd probably leave out sorting, sprite priority and the x-position msb completely in that case.<br />Also, calculating the offset and bit position in the x-pos msb/priority oam table does not take _that_ much time if you're using a lookup table for the shifts.<br /><br />Your idea sounds nice, but I'd imagine that once you've implemented it, you'd spend most of the time clearing your 640 byte table each frame, not creating the oam table itself.<br /><br />I just hope I didn't miss your point completely...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3581">d4s</a> — Mon Jul 14, 2008 4:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cdoty]]></name></author>
<updated>2008-07-13T13:16:48-07:00</updated>
<published>2008-07-13T13:16:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34852#p34852</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34852#p34852"/>
<title type="html"><![CDATA[Dynamic SNES sprite table construction?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4219&amp;p=34852#p34852"><![CDATA[
Tell me what you think of this idea for building a dynamic SNES sprite table. (Or share you ideas).<br /><br />The hardest part of building the table would seem to be setting up the 32 byte table at the end of the list (whatever it's technically called).<br /><br />My idea for making this easy would be constructing 2 256 byte tables, for 128 sprites.<br /><br />One table would contain values where the size bit is 0, and the other one would contain a size bit of 1. Each sprite would store the address of the table to use. The table pointer would remain the same throughout the 'life' of the sprite, and only need to be set when the sprite was initially added.<br /><br />Each table would contain:<br /><br />%000000x0 (x is the size bit)<br />%000000x1<br />%0000x000<br />%0000x100<br />%00x00000<br />%00x10000<br />%x0000000<br />%x1000000<br />.. repeated for the entire 256 bytes. (This could use 8 bytes, but the time spent masking the pointer probably wouldn't be worth saving 248 bytes per table). <br /><br />At the beginning of the sort routine, the entire 640 bytes of sprite memory would be cleared.<br /><br />An offset pointer, to the correct table entry, would be set up at the beginning of the routine, and incremented by two each time.<br /><br />The upper byte of the sprite x position, would be added to the table offset pointer. The value, obtained from the table, would be or'ed with the current location in the sprite table. There would be no need for masking, as the byte would be cleared at the beginning, and be built up sequentially.<br /><br />I would probably process 4 sprites at a time, this would allow me to:<br />1) Store the temporary value in a zero page memory location, and write it as a single byte to the sprite table.<br /><br />2) Increment the sprite table address for each 4 sprites.<br /><br />The 'shadow' sprite list would have to be padded out to 4 sprites increments by the sorting routine.<br /><br />Does this sound reasonable, or is there a faster/easier way?<br /><br />Could it be done in the vertical retrace, assuming the routine was fairly well written (in asm)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=274">cdoty</a> — Sun Jul 13, 2008 1:16 pm</p><hr />
]]></content>
</entry>
</feed>