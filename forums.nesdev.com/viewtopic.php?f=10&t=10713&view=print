<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Can I optimize this sorting routine?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Can I optimize this sorting routine?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10713">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10713</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Fri Nov 22, 2013 6:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a collection of 28 actors. I want to sort them by their y value. Since the actors are each 8 bytes, I figured it would be faster to sort an array of indexes to the actors. This is an implementation of the <a href="http://www.sorting-algorithms.com/insertion-sort" class="postlink">insertion sort</a> routine.<br /><br />I'm posting this question because this is my first NES project, I'm still getting used to the limitations of the 6502 (particularly all the addressing modes!), and I'm hoping that any insights people could offer could speed up all the coding I do in the future. Can anyone think of a way that I could speed up this code?<br /><br />The vast majority of the time in the sorting routine is spent doing the following (at label '_jSort'): <br />1. y = the current position in the collection to be sorted.<br />2. save y<br />3. a = the index of the actor at the current position in the collection.<br />4. transfer a to y<br />5. a = the y value of the actor at the index in y.<br />&gt;&gt;&gt; my comparison and swap code happens here<br />6. restore y to the saved value (restoring it to the current position in the collection to be sorted).<br />7. Decrement y.<br />8. loop to 1.<br /><br />This is the complete routine. Any thoughts how I could optimize this code?<div class="codetitle"><b>Code:</b></div><div class="codecontent">; -------------------------------- &#91; SortActors &#93; --------------------------------<br />; In:&nbsp; &nbsp; &nbsp;A is the superchunk index (0-3) that contains the list of Static Actors we are sorting.<br />; Notes: Uses $00-$05 in zp.<br />SortActors:<br />.scope<br />.alias&nbsp; &nbsp; _PointerSort&nbsp; &nbsp; &nbsp; $00<br />.alias&nbsp; &nbsp; _PointerYVals&nbsp; &nbsp; &nbsp;$02<br />.alias&nbsp; &nbsp; _key&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $04<br />.alias&nbsp; &nbsp; _y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $05<br /><br />&nbsp; &nbsp; and #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clip A to $00-$03<br />&nbsp; &nbsp; `add $03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; a = a + 3<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; sta &#91;_PointerSort+1&#93;&nbsp; &nbsp; &nbsp;; _PointerSort = ptr to sort array.<br />&nbsp; &nbsp; sta &#91;_PointerYVals+1&#93;&nbsp; &nbsp; ; _PointerYVals = to y-values.<br />&nbsp; &nbsp; lda #StaticSortArray<br />&nbsp; &nbsp; sta _PointerSort<br />&nbsp; &nbsp; lda #StaticsY<br />&nbsp; &nbsp; sta _PointerYVals<br /><br />&nbsp; &nbsp; ; insertion sort<br />&nbsp; &nbsp; ldx #01<br />&nbsp; &nbsp; _iSort:<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; y = x<br />&nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; lda (_PointerSort),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; a = actor&#91;x&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; sty _y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; push a (index pointed to by x)<br />&nbsp; &nbsp; &nbsp; &nbsp; lda (_PointerYVals),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; a = actor&#91;x&#93;.y<br />&nbsp; &nbsp; &nbsp; &nbsp; sta _key&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; key = actor&#91;x&#93;.y<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy _y<br />&nbsp; &nbsp; &nbsp; &nbsp; dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; y = x - 1<br />&nbsp; &nbsp; &nbsp; &nbsp; _jSort:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; while (key &lt; actor&#91;y&#93;.y &amp;&amp; y &gt;= 0) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda (_PointerSort),y&nbsp; &nbsp; &nbsp; &nbsp;; ; a = actor&#91;y&#93;.y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sty _y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; ; _y = y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda (_PointerYVals),y&nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp _key&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldy _y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; ;&nbsp; &nbsp; y = _y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bcc _iNext&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; (_PointerSort),y&nbsp; &nbsp; ; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; actor&#91;y+1&#93; = actor&#91;y&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta (_PointerSort),y&nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp;y = y - 1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bpl _jSort&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; }<br />&nbsp; &nbsp; &nbsp; &nbsp; _iNext:<br />&nbsp; &nbsp; &nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; actor&#91;y+1&#93; = actor&#91;x&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; pull a (index pointed to by x)<br />&nbsp; &nbsp; &nbsp; &nbsp; sta (_PointerSort),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #StaticCount<br />&nbsp; &nbsp; &nbsp; &nbsp; bne _iSort<br />&nbsp; &nbsp; rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 22, 2013 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't have any objective numbers to back my suggestion, but instead of looping through the objects just for sorting, I would do the sorting at the same time as processing their movement, since the sorting is directly related to their positions. Whenever an object's Y coordinate changes, check the appropriate neighbor object (which one will depend on whether the coordinate increased or decreased) to decide whether they should switch places (more switches might be needed, so you gotta keep checking in that direction until no more switches are needed).<br /><br />Based on my experience, looping is pretty slow, so you should avoid looping through the same entities more than once per frame. If you're gonna loop though the objects to run their AI, take the opportunity to do everything else you have to do with them, like rendering their sprites or sorting their coordinates. I know it might seem crazy to draw objects when you haven't processed them all yet, because it means that their state isn't yet final, but the solution I found for this is to render the graphics based on data from the last frame (i.e. render sprites before updating the positions), which you know is consistent. A 1 frame delay isn't really noticeable to players, and the time you save by not looping through all the objects again is considerable.<br /><br />Another thing that might help is using a linked list of objects. If you store references to the previous and next objects in each object's RAM, you can navigate through the objects in a single list, instead of having to jump between the list of objects and the list of sorted object indices. Linked lists also make it possible to exclude unused object slots, you simply don't link to them, so when you only have a few active objects you won't waste time looking at empty slots.<br /><br />I wouldn't do these modifications unless I was actually experiencing slowdowns though, which I'm not sure is your case.<br /><br />EDIT: I realize it would be cleaner to have simpler specialized routines that you can call in the appropriate order, but depending on the amount of data you have to process per frame on such a limited machine as the NES, you'll eventually see the need to combine tasks in order to save time. It isn't always pretty, but sometimes it's necessary in order to get the performance that a complex game needs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Nov 22, 2013 11:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The classic optimization for insertion sort is <a href="https://en.wikipedia.org/wiki/Shellsort" class="postlink">due to David Shell</a>. Instead of starting by comparing actors 1 unit apart, make three passes over your data. First compare actors 10 units apart, then actors 4 units apart, then actors 1 unit apart. I used Shell sort (but with Knuth's 13, 4, 1 sequence) in the early version of my &quot;Who's Cuter&quot; tech demo. (It has since been replaced with mergesort.)<br /><br />Another way is to do a single round of bubble sort. This may produce momentarily missorted items for one frame if one item skips past numerous items, but so long as the items don't move drastically from frame to frame like a blue hedgehog on methamphetamine, the player won't notice. I used this &quot;eventual bubble sort&quot; in the 2011 update of my Sprite Cans demo as part of a sprite rotation technique. (The old version of Sprite Cans used exact insertion sort and would occasionally slow down.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 23, 2013 2:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As far I know bubble sort is the fastest for small datas (lower than 16-32) and then you'll have to ressort to a complicated algorithm to sort more data (that you probably don't want to implement in 6502 ASM <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Nov 23, 2013 6:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think Bubble Sort is fastest in any case except the already sorted case. This is a surprising suggestion to me. It is sometimes the fastest sort to code, as insertion sort and bubble sort are usually very easy in concept and execution, but their running time is still O(n^2) for randomly sorted lists whether those lists are small or large.<br /><br />Bubble sort and insertion sort can both be good for sorting a little bit at a time, like tepples suggested, but if you need to sort everything from scratch each frame, I would suggest an O(n log n) sort like Heap Sort or Merge Sort. Heap Sort is usually easier to do in-place than Merge Sort (which typically needs a temporary buffer to copy back and forth from). Heap Sort usually takes a little more code as well, though.<br /><br />There are algorithms like Intro Sort which use something like Quick Sort until the division of the list gets small enough, at which point it switches to Heap Sort. The choice of Heap Sort for smaller parts of the list is partly due to Heap Sort's random-access patterns working best when the working set can be cached, and breaking up the worst-case problems of Quick Sort (Quick Sort is expected O(n log n) but O(n^2) in some rare/worst cases). Quick Sort, on the other hand, has linear access patterns, so it works better on very large sets when caching is an issue.<br /><br />The caching thing isn't really relevant for the 6502, where you're not going to have a random-access performance penalty anyway. Operating on a pointer list is a good way to minimize the inefficiency due to movement of data, so it's good you've done that as an optimization already. If your comparison step is also optimized, the only thing left is to use an algorithm that reduces the actual number of comparisons and data-swaps you end up doing.<br /><br />Edit: just thinking about the efficiency of bubble sort, to ballpark the efficiency breakdown, it really is efficient on an almost-sorted list. Roughly speaking, if there are less than log2(n) items out of place it will be faster than Heap Sort (which always takes the same amount of time). Similarly speaking if you need to move more than log2(n) items per frame, you might as well switch to an O(n log n) sort and do the whole list, since it becomes more efficient to just sort the whole list with a Heap/Merge sort at that point. This is why bubble sort is actually a good choice for sorting a little bit of the list each frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Nov 23, 2013 6:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Speaking of the implementation optimization, rather than choosing the most effective sorting algorithm, I'd try to get rid from frequent indirect indexed addressing by storing lists in fixed memory areas and probably try to unroll the loop, since it is just 28 objects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 23, 2013 2:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was just saying that bubble sort is fast for small datas.<br />Of course it's O(n^2), but if n is sufficiently small this is not a problem. This is a tremendous problem if n is large.<br /><br />Heap sort is very efficient for large data, but you don't want to implement it in 6502 ASM. You could but I bet it'd be at least a dozen times bigger and slower for each iteration of the loop. All the extra effort is only worth if the data is large enough so that the gain in complexity matters.<br /><br />Bubble Sort is n^2 only in the absolute worst case where data is sorted in the opposite order. If is also extremely straightforward to implement, in 6502 asm it should be like 10-15 instructions or so. I like it that you can make the sort stable or not by changing the algorithm slightly. I use it for sorting the sprites I display on screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Nov 23, 2013 3:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For the case of sorting sprites for display, where you want to turn nearly-sorted data into even closer to sorted data with the occasional mistake, you can handle the worst fast-moving elements by running an ascending pass of bubble sort followed by a descending pass. If you need exactitude, such as <a href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch32.html" class="postlink">sort-and-sweep collision detection</a> that relies on coordinates being <a href="https://en.wikipedia.org/wiki/Monotonic_function" class="postlink">monotonic</a>, with the coordinate of a higher-numbered element always being greater than or equal that of the previous element, Shell sort is probably the best option below about 100 elements.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Nov 23, 2013 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Heap sort is very efficient for large data, but you don't want to implement it in 6502 ASM. You could but I bet it'd be at least a dozen times bigger and slower for each iteration of the loop. All the extra effort is only worth if the data is large enough so that the gain in complexity matters.</div><br /><br />I would suspect a heap sort to have about 6x the amount of code compared to a bubble sort, but per move+compare+swap step I would sincerely doubt the implementation would be any worse than 50% as efficient, easily made up by the algorithmic efficiency for if you need to sort more than ~log2(n) elements. You need a lot of extra code for handling left/right branches etc. but you don't take all of that code in a single equivalent step.<br /><br />Anyhow, as stated before, if you can retain the mostly-in-order list from the previous frame then just stick with bubble sort.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 23, 2013 4:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I didn't even question the sorting algorithm in my response because I think the algorithm is not very important in this case, what's important is reducing indirection (which means less saving and restoring of registers and slow pointer manipulation) and the number of times you iterate over the objects, which IMO are the 2 things responsible for making a task like this slow.<br /><br />What I'm suggesting is something like the code below right after the object is done being updated for the frame:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;;object attributes are stored as a structure of arrays (interleaved)<br />&nbsp; &nbsp;;x contains the current object's slot index (unsorted: 0 = first, 1 = second, etc.)<br />&nbsp; &nbsp;;each object holds indices to the one before it and to the one after it (sorted linked list)<br />&nbsp; &nbsp;;DeltaY is some variable that was used to move the object vertically<br />&nbsp; &nbsp;bit DeltaY ;check whether the object moved up or down<br />&nbsp; &nbsp;bmi ComparePrevious<br />CompareNext:<br />&nbsp; &nbsp;ldy NextObjectIndex, x ;have y point to the next object<br />&nbsp; &nbsp;bmi Done ;don't do anything if this is the last object<br />&nbsp; &nbsp;lda ObjectY, y ;compare the coordinates<br />&nbsp; &nbsp;cmp ObjectY, x<br />&nbsp; &nbsp;bcs Done ;if NextY &gt;= CurrentY, we're done<br />&nbsp; &nbsp;;SWAP THIS OBJECT AND THE NEXT HERE<br />&nbsp; &nbsp;jmp CompareNext ;keep comparing<br />ComparePrevious:<br />&nbsp; &nbsp;ldy PreviousObjectIndex, x ;have y point to the previous object<br />&nbsp; &nbsp;bmi Done ;don't do anything if this is the first object<br />&nbsp; &nbsp;lda ObjectY, x ;compare the coordinates<br />&nbsp; &nbsp;cmp ObjectY, y<br />&nbsp; &nbsp;bcs Done ;if CurrentY &gt;= PreviousY, we're done<br />&nbsp; &nbsp;;SWAP THIS OBJECT AND THE PREVIOUS HERE<br />&nbsp; &nbsp;jmp ComparePrevious ;keep comparing<br />Done:</div><br />This way you don't have to iterate over the objects more than once, and there's also no need to deal with pointers. The only downside I can see is that if two objects are close and to each other and moving in the same direction vertically at the similar speeds, they might be swapped and un-swapped after each one is moved every frame unnecessarily.<br /><br />EDIT: It now occurred to me that swapping items in a doubly linked list involves changing a lot of indices... Say, if you have a list of 5 items [A B C D E] and you need to swap B and D, you have to change B's and D's previous and next (4 indices), A's next, C's previous, C's next and E's previous. That's 8 indices you have to change, so this part of the process would probably slow things down a bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Mon Nov 25, 2013 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the advice about sorting algorithms! I'm going to stick with Insertion sort for now, because I already have it implemented. With regards to the equation I posted...<br /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Speaking of the implementation optimization, rather than choosing the most effective sorting algorithm, I'd try to get rid from frequent indirect indexed addressing by storing lists in fixed memory areas</div>I think I could replace the third indirect indexed load by using the undocumented LAX instruction and then TXA to restore A later in the inner loop (saving 3 cpu cycles per loop iteration). Given that Nintendo isn't going to fail my game for using an undocumented opcode, is it okay to use this instruction in my source?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 25, 2013 1:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LAX immediate is reportedly unstable, but the other LAX opcodes should be fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Nov 25, 2013 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />'LAX #immed' isn't even called that, because it doesn't Load A and X. The instruction in its place is sometimes called <a href="http://forums.nesdev.com/viewtopic.php?p=121065#p121065" class="postlink">ATX</a> instead. Regardless, don't use it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Nov 27, 2013 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Using illegal opcodes makes Nintendulator's debug window go nuts (given that the LAX instruction is in the inner loop, it's called well over 100 times when sorting 28 randomized objects). I'd hate to foist that upon someone who wants to play my game; I'm going to pass on using it.<br /><br />That said, learning about why the illegal opcodes also gave me a better understanding of the various addressing modes of the 6502, which was very helpful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Nov 27, 2013 4:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can I optimize this sorting routine?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">Using illegal opcodes makes Nintendulator's debug window go nuts (given that the LAX instruction is in the inner loop, it's called well over 100 times when sorting 28 randomized objects). I'd hate to foist that upon someone who wants to play my game; I'm going to pass on using it.</div><br />There's a setting to disable those messages (CPU -&gt; Log Invalid Opcodes), but I understand your opinion. In my opinion, that setting should be off by default.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>