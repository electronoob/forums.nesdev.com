<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sale image and Scale2x</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sale image and Scale2x</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=11638">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=11638</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Fri Sep 19, 2014 3:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I suck at graphics programming and theory and thus practice.<br /><br />I have been reading what wikipedia says about Scale2x and i don't get it.<br />I have downloaded the code for scale2x of <!-- m --><a class="postlink" href="http://scale2x.sourceforge.net/">http://scale2x.sourceforge.net/</a><!-- m --> and reading what it says there and still nor explication neither explanation for me.<br /><br />Anyway here is what at scale2x.sourceforge.net says:<br /><br /><img src="http://yanese.com/scale2x.png" alt="Image" /><br /><br />What is it talking about??<br /><br />Sorry the noob thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Fri Sep 19, 2014 7:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Totally glad I wrote this last year: <br /> <!-- m --><a class="postlink" href="http://6bit.net/shonumi/2013/04/10/in-depth-scale2x/">http://6bit.net/shonumi/2013/04/10/in-depth-scale2x/</a><!-- m --><br /><br />One of the most annoying things I find about pixel scaling methods is how poorly they are documented, with the exceptions of ScaleX, Nearest Neighbor (and maybe Bilinear?) and xBR. Just about everything else expects you to parse the code in order to understand how the scaling actually works. It is my opinion that source code (except code that is <strong>highly</strong> commented) for some advanced topics is only ever half of proper documentation. Ideally, you need the application (source code) and the theory behind its ideas (articles, white papers, any well written work) in order for things to be understood. Code is the &quot;how&quot;, but detailed explanations are the &quot;why&quot;, and both are important. Sadly, many scaling methods are not too good on their detailed explanations.<br /><br />Um, sorry for the rant <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> Scale2x is pretty easy to implement yourself, because the author took the time to carefully explain how it works. xBR is very well explained to (in words and pictures, not just code) and given its quality you should check that out too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Fri Sep 19, 2014 7:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks much clear now!!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mkwong98</b> [ Fri Sep 19, 2014 10:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shonumi wrote:</div><div class="quotecontent">Um, sorry for the rant <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> Scale2x is pretty easy to implement yourself, because the author took the time to carefully explain how it works. xBR is very well explained to (in words and pictures, not just code) and given its quality you should check that out too.</div><br /><br />Images of xBR look really good! Very impressive.<br /><br />BTW do these scaling algorithms work better when applied separately to each layer?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Fri Sep 19, 2014 9:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mkwong98 wrote:</div><div class="quotecontent">BTW do these scaling algorithms work better when applied separately to each layer?<br /></div><br /><br />I would guess not. If, for example, you applied it to sprites separately, the edges probably won't blend well overall with the background, but the effect would be interesting to see. I have never tried to apply something like Scale2x on a per-layer basis though. As far as I know, all of the common scaling algorithms are applied to the entire screen in every emulator I've come across. It's somewhat wasteful of CPU cycles to apply the scaling algorithm per-layer for systems that make use of many layers (multiple backgrounds + sprites), but with today's GPUs, a decent shader would make it feasible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Sep 19, 2014 11:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shonumi wrote:</div><div class="quotecontent">If, for example, you applied it to sprites separately, the edges probably won't blend well overall with the background</div><br />Isn't that the idea, though? Different layers aren't supposed to blend together. I'm pretty sure that the background causing deformities to sprite outlines (and vice-versa) is a good thing to avoid.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Sat Sep 20, 2014 12:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Isn't that the idea, though? Different layers aren't supposed to blend together. I'm pretty sure that the background causing deformities to sprite outlines (and vice-versa) is a good thing to avoid.</div><br /><br />To my knowledge, none of these scaling algorithms was designed to work with pixel data as separate layers. As far as I can tell, they were all designed to act on a single frame, treating everything (sprites, background layers, anything rendered as the &quot;final&quot; image) as a very large array of pixels. When I say sprites probably won't blend well with the background, I mean you'll get unintended results when pixel scaling around sprite edges.<br /><br />Consider what would happen (with Scale2x in this example) if you tried to scale all of the sprites separately. The algorithm works because there is always sufficient data surrounding the pixel we want to scale,  <em>E</em>. There needs to always be pixel data immediately available one scanline above it, one scanline below it, one pixel to the left, and one pixel to the right (pixels <em>B</em>, <em>D</em>, <em>F</em>, <em>H</em>. Edges of the frame itself (first scanline, last scanline, and the first and last columns) are the exceptions where input pixel data is &quot;guessed&quot; as in the next closest 3 pixels are used (e.g. the first scanline will act as if pixels <em>A</em>, <em>B</em>, <em>C</em> had the values of <em>D</em>, <em>E</em>, <em>F</em>).<br /><br />With sprites, there is no guarantee that there will be sufficient data around the edges. Depending on what kind of sprite you have and its X and Y coordinates, Scale2x could easily encounter a situation where the sprite edge only hits pixels <em>E</em> and <em>F</em>. Here's the problem, what do you do for input pixel data that the algorithm needs? If you were normally processing the algorithm, you'd be able to take into account the background pixels, or any other pixels of the final frame. But if you're doing them separately, you'll have to fake or synthesize your own input data for the algorithm, which isn't how it was designed to be run, giving you results that may or may not look good or &quot;correct&quot;. Depending on what fake data you feed into Scale2x for the sprite edge, it might revert to Nearest Neighbor scaling when it would not have if BG pixels were part of the equation. Nevertheless, the results would still be interesting as I previously said.<br /><br />The input data for sprite edges <strong>is</strong> supposed to contain data for background pixels, because these algorithms were designed not to care or distinguish between any of them. To these algorithms, everything's just a pixel, and the frame is just one big series of them. The different layers on a console don't blend together, but these scaling methods like Scale2x were meant to enlarge the final image, so naturally it's going to blend everything together to some extent. With &quot;fancier&quot; algorithms like HQx (or even Scale4x), overlapping layers get blended more strongly at the edges.<br /><br />To illustrate what I'm talking about, have a look at the following images using HQ4x and Shantae for the GBC:<br /><br /><!-- m --><a class="postlink" href="http://i1.minus.com/ihcygM6eSKvmr.png">http://i1.minus.com/ihcygM6eSKvmr.png</a><!-- m --> - Shantae, HQ4x, scaling applied to entire image<br /><!-- m --><a class="postlink" href="http://i7.minus.com/ijk5gflczAX7Q.png">http://i7.minus.com/ijk5gflczAX7Q.png</a><!-- m --> - Shantae, HQ4x, scaling applied separately to BG and sprites<br /><br />As you can see, where HQ4x has to guess pixel data for the sprites (which is essentially Shantae in this screen) I told it to just assume the pixels were white. This was just to highlight the areas that would be affected if you applied HQ4x separately. A more realistic approach would be to use the color of the nearest sprite pixel, but even then you wouldn't get the blending as intended by the algorithm. If you compare the problematic pixels in the second image with the first, you see that the BG is slightly blended around Shantae's outline (the red roof and the sky are notable areas). If you were to apply HQ4X separately to sprites, and if you were to fake the pixel data (black in the case for her outline), you'd end up with a slightly thicker outline that might not transition well in with respect to the background (essentially making it blockier or bolder than normal) and might give the impression that sprites &quot;stick out&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 20, 2014 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shonumi wrote:</div><div class="quotecontent">To my knowledge, none of these scaling algorithms was designed to work with pixel data as separate layers.</div><br />If the end result is better, what they were originally designed to do shouldn't matter. =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As far as I can tell, they were all designed to act on a single frame, treating everything (sprites, background layers, anything rendered as the &quot;final&quot; image) as a very large array of pixels.</div><br />That certainly is the easy way out, which is probably why most emulators do it like this. Processing the layers separately would significantly change the rendering pipeline in most emulators.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When I say sprites probably won't blend well with the background, I mean you'll get unintended results when pixel scaling around sprite edges.</div><br />If the filter is designed to smooth out edges, the edge of a sprite against a transparent area should be processed just as well as if it was against a solid color. Unintended results is what you get when processing a full frame that contains sprites in front of busy backgrounds, because the edges of the sprite will keep changing depending on what part of the background it's overlapping.<br /><br />Consider this example of a green sprite with a black outline in front of an orange background that happens to have a black vertical line:<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=1989" alt="original.png" /><br />
			<span class="gensmall">original.png [ 1.1 KiB | Viewed 46 times ]</span>
		

		<br />
	</div><br />A filter working on the final image can't possibly tell that the two black lines are not the same object, and will smooth them out together, effectively &quot;welding&quot; the black lines together:<br /><br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=1990" alt="scaled.png" /><br />
			<span class="gensmall">scaled.png [ 850 Bytes | Viewed 46 times ]</span>
		

		<br />
	</div><br />And it will only look like this while the sprite is standing at that same location, because as the sprite moves, the background will be welded to different parts of it, resulting in an inconsistent outline across several frames. That's what I'd call &quot;unintended results&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The algorithm works because there is always sufficient data surrounding the pixel we want to scale,  <em>E</em>. There needs to always be pixel data immediately available one scanline above it, one scanline below it, one pixel to the left, and one pixel to the right (pixels <em>B</em>, <em>D</em>, <em>F</em>, <em>H</em>.</div><br />Yes, and pixels outside of the sprite will be treated as transparency, which can be processed as if it was a flat color, allowing the edges of the sprite to be smoothed out without intervention from the background.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">With sprites, there is no guarantee that there will be sufficient data around the edges.</div><br />Background data doesn't belong to the sprite in the first place, so it's better to have NO data than have the WRONG data. But that's not even the case, since transparency IS data.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Depending on what kind of sprite you have and its X and Y coordinates, Scale2x could easily encounter a situation where the sprite edge only hits pixels <em>E</em> and <em>F</em>.</div><br />Transparency. If real transparency is not an option, as a last resort you can have a special color double as transparency and remove that later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Nevertheless, the results would still be interesting as I previously said.</div><br />I'm not saying that filtering individual layers IS better, because I haven't seen the results yet, but in my head, keeping layers from interfering with each other can only be a good thing, but I'll only be sure after I see some test images. Another important point is that I don't even know how fast this would be.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The input data for sprite edges <strong>is</strong> supposed to contain data for background pixels, because these algorithms were designed not to care or distinguish between any of them.</div><br />And that's exactly what the suggestion of filtering the layers separately is trying to improve on! If current filtering technology isn't able to distinguish layers, it will keep blotching together objects that shouldn't be!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Sat Sep 20, 2014 1:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If the end result is better, what they were originally designed to do shouldn't matter. =)<br /></div><br /><br />But the end result isn't better, or at least no one's devised a good enough result separately applying scaling filters to different layers.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">That certainly is the easy way out, which is probably why most emulators do it like this.<br /></div><br /><br />That's how most scaling is done in almost any situation I can think of, even outside of emulation. You scale the resultant image that is a composition of every layer, not the individual layers themselves.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">A filter working on the final image can't possibly tell that the two black lines are not the same object, and will smooth them out together, effectively &quot;welding&quot; the black lines together:<br /><br />and it will only like this, because as the sprite moves, the background will be welded to different parts of it, resulting in an inconsistent outline across several frames. That's what I'd call &quot;unintended results&quot;.<br /></div><br /><br />Yet the alternative isn't any better :/ Fwiw, these scaling filters are designed not to drastically produce inconsistencies with sprite art (rasterized 3D images, however, not so much, and Scale4x gets pretty warped). For the most part, BG and sprite blending is kept to a minimum, simply because of how the algorithms act when encountering groups of different colors. If the results were jarringly inconsistent, it would be of interest to few people.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yes, and pixels outside of the sprite will be treated as transparency, which can be processed as if it was a flat color, allowing the edges of the sprite to be smoothed out without intervention from the background.<br /></div><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Background data doesn't belong to the sprite in the first place, so it's better to have NO data than have the WRONG data. But that's not even the case, since transparency IS data.<br /></div><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Transparency. If real transparency is not an option, as a last resort you can have a special color double as transparency and remove that later.<br /></div><br /><br />Yeah, that doesn't work as well as you might think. See my edits above. Even if you assumed transparency, the colors are incorrectly blended when you place the scaled sprites over the scaled BG. Slight parts around the BG where it approaches an overlap with the sprite need to blended as well, else you still end up with sprite/BG transitions that look sharper rather than smoother, which is a problem for scaling algorithms that aim for smoothness, not sharpness. Forgoing transparency altogether in place of a special color leaves you with potentially sharp or defined edges when you remove those colors and paste the sprite onto the BG plane. Again that might be a neat technique for scaling methods aiming for overall sharpness, but most prioritize smoothness.<br /><br />Let me further illustrate the issue. Here is the same Shantae test, scaling the sprite plane with HQ4x and using transparency. Note the ugly lines around her shoulders and her bangs. This is what I was talking about when sprites &quot;stick out&quot;:<br /><br /><!-- m --><a class="postlink" href="http://i4.minus.com/ixpbH1QD6ygcr.png">http://i4.minus.com/ixpbH1QD6ygcr.png</a><!-- m --><br /><br />It's like someone just learning Photoshop, which isn't enjoyable at all compared to scaling the entire image via HQ4x. If you look closely, you can see that there's a sort of thin &quot;film&quot; present around Shantae in various parts.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I'm not saying that filtering individual layers IS better, because I haven't seen the results yet, but in my head, keeping layers from interfering with each other can only be a good thing, but I'll only be sure after I see some test images. Another important point is that I don't even know how fast this would be.<br /></div><br /><br />Keeping layers from blending is good when you aren't scaling anything whatsoever. If I were making a game for, say the GBA, I would not want to start blending BG0 with OBJs unless I was aiming for a specific effect. But when you go about scaling an image, you usually don't do the individual layers, you scale the final frame. The final frame will have sprite and BG pixels side-by-side, so if it the scaling algorithm introduces new colors, it's good to blend the two. The overall image looks more natural.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">And that's exactly what the suggestion of filtering the layers separately is trying to improve on! If current filtering technology isn't able to distinguish layers, it will keep blotching together objects that shouldn't be!<br /></div><br /><br />But that's the thing, the layers need to be together <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> See my reasoning above. Again, if you were not doing any scaling, it doesn't really make sense to do blending, but when you are, if you want the entire image to look cohesive, you blend everything to some extent, BG or sprite pixel.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Sat Sep 20, 2014 2:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I applied Scale2x by myself (pixel by pixel) and i got this:<br /><br /><img src="http://www.yanese.com/bak/battletoads.png" alt="Image" /><br /><br />Nice, but i still prefer the pixelized output...  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mkwong98</b> [ Sat Sep 20, 2014 4:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shonumi wrote:</div><div class="quotecontent">Let me further illustrate the issue. Here is the same Shantae test, scaling the sprite plane with HQ4x and using transparency. Note the ugly lines around her shoulders and her bangs. This is what I was talking about when sprites &quot;stick out&quot;:<br /><br /><!-- m --><a class="postlink" href="http://i4.minus.com/ixpbH1QD6ygcr.png">http://i4.minus.com/ixpbH1QD6ygcr.png</a><!-- m --><br /><br /></div><br /><br />Those lines looks odd. How do you interpolate 2 colours with transparency? Do you use the following?<br />R = (R1 * A1 + R2 * A2) / (A1 + A2)<br />G = (G1 * A1 + G2 * A2) / (A1 + A2)<br />B = (B1 * A1 + B2 * A2) / (A1 + A2)<br />A = (A1 + A2) / 2<br /><br /><br /><div class="quotetitle">Anes wrote:</div><div class="quotecontent">I applied Scale2x by myself (pixel by pixel) and i got this:<br /><br /><img src="http://www.yanese.com/bak/battletoads.png" alt="Image" /><br /><br />Nice, but i still prefer the pixelized output...  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div><br /><br />Looks pretty good to me! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Sat Sep 20, 2014 5:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mkwong98 wrote:</div><div class="quotecontent">Looks pretty good to me! </div><br />yeah i think the thing is get used to it. I have been playing my emulator with scale2x and now it feels nice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Sat Sep 20, 2014 7:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@mkwong98 - All I did was take three screenshots of Shantae, one with all sprites disabled, one with the background disabled, and one with both enabled. For the screenshot with the BG disabled (the one only showing sprites) I removed the background in place of completely transparent pixels. For the first two, I ran HQ4x separately on the files, then combined them (background layer on bottom, sprite layer on top); this represents running HQ4x on layers separately. The alpha values you see are generated by HQ4x itself. Those alpha values are weird looking because the algorithm normally blends the BG and sprites at the edges together slightly. So you can't use alpha transparency to mimic how HQ4x normally works when it is applied to the entire screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mkwong98</b> [ Sat Sep 20, 2014 8:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />From what I can see from hqx on google code, it doesn't use the alpha channel when calculating RGB values so it won't look correct. That implementation is optimized for solid colours and simply does not work with transparency. I'm not sure if the one you used does the same, but if so than we need to find one that works or test it with another algorithm. Thank you for those images!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Sat Sep 20, 2014 9:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sale image and Scale2x</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, HQx does support transparencies. This was the commit: <!-- m --><a class="postlink" href="http://code.google.com/p/hqx/source/detail?r=10">http://code.google.com/p/hqx/source/detail?r=10</a><!-- m --> That's what the whole MASK_ALPHA is doing, so alpha transparency can be taken into account.<br /><br />You can try it for yourself. Here are the two images I generated with HQ4x for Shantae. If you take 2nd picture of Shantae and paste it anywhere on the 1st picture and move her around, the edges around her change their colors, indicating alpha transparency. Or you could look at the RGBA values in the second image with an image editor.<br /><br /><!-- m --><a class="postlink" href="http://i5.minus.com/if52BFCbTPtgX.png">http://i5.minus.com/if52BFCbTPtgX.png</a><!-- m --><br /><!-- m --><a class="postlink" href="http://i7.minus.com/iHJsOV5haQ2KX.png">http://i7.minus.com/iHJsOV5haQ2KX.png</a><!-- m -->

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>