<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8361" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-11-30T14:25:20-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8361</id>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-11-30T14:25:20-07:00</updated>
<published>2011-11-30T14:25:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86982#p86982</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86982#p86982"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86982#p86982"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />The image does <em>not</em> shift. The amount of time between hsync and pixel N is always the same -- exactly (N/1.5/3.579545MHz). A purely black-and-white image will not shake like that. Only the angle of the reference color (yellow) is what shifts from scanline to scanline.<br /></div><br />You are right. Somehow the fact got away from me while I was making that post: I couldn't convey the right fact, even though I have coded it right. I wanted to avoid going into the detail of how exactly the colors are coded in NTSC signal (I.e. frequency &amp; sine/square wave &amp; phase type details), for the hopes of making an understandable lesson even if it means taking shortcuts at points. I fail.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Wed Nov 30, 2011 2:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2011-11-30T13:03:05-07:00</updated>
<published>2011-11-30T13:03:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86979#p86979</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86979#p86979"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86979#p86979"><![CDATA[
<div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br />However, because of how PPU clock works, the image shifts on each scanline.<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12b.png" alt="Image" /><br /><br />And not only that, the shifting varies each frame, too:<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12.gif" alt="Image" /><br /></div><br /><br />The image does <em>not</em> shift. The amount of time between hsync and pixel N is always the same -- exactly (N/1.5/3.579545MHz). A purely black-and-white image will not shake like that. Only the angle of the reference color (yellow) is what shifts from scanline to scanline.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Wed Nov 30, 2011 1:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-11-30T04:23:55-07:00</updated>
<published>2011-11-30T04:23:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86962#p86962</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86962#p86962"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86962#p86962"><![CDATA[
<div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><br />So, we usually have 3 layers for a 1:1 image - a red, a green and a blue layer. The idea seems to be sliding the green and blue plans to the right by 2 or more pixels...? What happens, for example, in the left side of the image?<br /></div><br />Not by pixels. By half-clocks. I will explain this a bit.<br /><br />Imagine that the NES screenshot is stretched horizontally by a ratio of 8, like this:<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/normalsize.png" alt="Image" /> <img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xsize.png" alt="Image" /><br />Left: Original picture, right: 8x stretched<br /><br />Now, let's consider only one scanline of this picture. For the purposes of clear illustration only, I stretched it vertically a bit.<br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice.png" alt="Image" /><br /><br />In order to generate NTSC signal, the NES PPU generates 8 half-clocks worth of signal per each pixel. Hence 8x scaling.<br /><br />However, when the television receives this image, it must take at least 12 half-clocks worth of signal (instead of 8) in order to accurately assess the color to be rendered. Like this (underlined)<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12.png" alt="Image" /><br /><br />Each underline illustrates the region of original image data that is sampled in order to produce the picture rendered on TV screen. Each line is about the width of 1½ of original pixels.<br />Because they overlap, I put them in two rows, but they really represent one scanline.<br />Also, the TV actually interprets the input signal in a continuous process; not at intervals, but at <em>any</em> given time 12 most recent samples* are interpreted to produce the color to render. Hence the concept of infinite horizontal resolution.<br /><br />As a consequence, there will be color artifacts on the television.<br /><br />However, because of how PPU clock works, the image shifts on each scanline.<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12b.png" alt="Image" /><br /><br />And not only that, the shifting varies each frame, too:<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12.gif" alt="Image" /><br /><br />This is the reason to both the jagged appearance of straight vertical details, and to why it jitters.<br /><br />Now, to explain the subpixel part, let's consider a single pixel from the sampled signal:<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12s.png" alt="Image" /><br /><br />The pixel really consists of three subpixel components: the red, the green and the blue channel.<br />What I do in the subpixel rendering is that I sample those values from a slightly different position of the original signal in order to simulate the fact that the rendered color may change at subpixel intervals, not at wholepixel intervals:<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12rgb.png" alt="Image" /><br /><br />Finally, here's how the subpixel components of adjacent pixels interact:<br /><br /><img src="http://bisqwit.iki.fi/jutut/kuvat/ntsctut/8xslice12rgb2.png" alt="Image" /><br /><br /><br />*) Yes, this is a simplification.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Wed Nov 30, 2011 4:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2011-11-30T00:07:14-07:00</updated>
<published>2011-11-30T00:07:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86957#p86957</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86957#p86957"/>
<title type="html"><![CDATA[Re: Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86957#p86957"><![CDATA[
<div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br />Your thoughts?<br /></div><br /><br />My thoughts:<br /><br />I find "subpixel rendering" on any display (CRT, LCD with TFT, etc.) to look like complete and total ass.  I go to great lengths to turn off ClearType and "font smoothing" and other crap like that.  The technology pisses me off for two reasons:<br /><br />1. I hate the way it looks visually.  Things look either too weighted or too light, looks horizontally phase-shifted (hard to explain; see old CRTs for what I'm talking about), or looks blurry (often "font smoothing" causes this one).<br /><br />2. It's an absurd waste of CPU time.  Even on a Core 2 Quad system running Windows 7 Ultimate, I can tell how much slower text takes to draw on a web page/etc. when ClearType and/or "font smoothing" is enabled.  I imagine in an emulator (given the desire to retain 60fps at all times), this is even worse.<br /><br />I am one of the few (dying?) people who believes strongly that when an artist creates graphics, their intention is for the pixels to appear on-screen as what they intended.  Things like ClearType, Eagle (and other "smoothing" or "rounding" technologies), and even (IMO) lit/dead pixels on an LCD, all inhibit that from happening, which pisses me off.  It also seems to piss off a lot of pixel artists too; take for example when Firefox implemented hardware scaling on images, so that a 100x100 picture with HTML &lt;img src="blah.png" width="200"&gt; resulted in a pixel-precise picture being linearly scaled, suddenly looking blurry and horrible.  Pixel artists bitched enough that Microsoft and Mozilla both had to implement non-W3C-standard CSS tags and values to disable the behaviour (IE = -ms-interpolation-mode:nearest-neighbor; -- Mozilla = image-rendering:-moz-crisp-edges;).<br /><br />So, in general, I shun this technology.  Do I have a problem with people implementing it in their software, etc.?  Absolutely not -- implement it, it makes some people happy!  Just make sure that when you do, you ABSOLUTELY provide a way to disable it (.ini file, check box, something).  I don't even care if it defaults to enabled, I just want a way to turn it off.<br /><br />...hey, you asked for thoughts.  :-)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Wed Nov 30, 2011 12:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LocalH]]></name></author>
<updated>2011-11-29T23:14:19-07:00</updated>
<published>2011-11-29T23:14:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86956#p86956</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86956#p86956"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86956#p86956"><![CDATA[
Based on what I understand, the different alignments basically produce differing blends or intensities for the various subpixels. I would assume it would basically be the subpixel intensities necessary to generate the background color on the scanline?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=325">LocalH</a> — Tue Nov 29, 2011 11:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-11-29T20:43:35-07:00</updated>
<published>2011-11-29T20:43:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86953#p86953</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86953#p86953"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86953#p86953"><![CDATA[
Pardon my ignorance <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">No subpixel rendering &#40;8,0,0&#41;:<br />89ab0123456789ab0123456789ab &lt;- halfclock modulo 12<br />        ........rrrrrrrr<br />        ........gggggggg<br />        ........bbbbbbbb<br />Subpixel interval 2 &#40;4,2,2&#41;:<br />    ........rrrrrrrr<br />      ........gggggggg<br />        ........bbbbbbbb<br />Subpixel interval 2⅔  &#40;2,3,3&#41;:<br />  ........rrrrrrrr<br />     ........gggggggg<br />        ........bbbbbbbb</div><br /></div><br />So, we usually have 3 layers for a 1:1 image - a red, a green and a blue layer. The idea seems to be sliding the green and blue plans to the right by 2 or more pixels...? What happens, for example, in the left side of the image?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Nov 29, 2011 8:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LocalH]]></name></author>
<updated>2011-11-29T20:33:45-07:00</updated>
<published>2011-11-29T20:33:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86952#p86952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86952#p86952"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86952#p86952"><![CDATA[
Nice, Bisqwit. The fixed algorithm definitely looks much better.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=325">LocalH</a> — Tue Nov 29, 2011 8:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-11-29T08:20:50-07:00</updated>
<published>2011-11-29T08:20:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86937#p86937</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86937#p86937"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86937#p86937"><![CDATA[
Just a heads-up, I fixed a bug in the NTSC rendering. The subpixel version (in the first post) looks nicer now...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Tue Nov 29, 2011 8:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-11-29T06:01:21-07:00</updated>
<published>2011-11-29T06:01:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86928#p86928</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86928#p86928"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86928#p86928"><![CDATA[
<div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br />Re: Use of subpixel artifacts in NTSC rendering: On an actual CRT television, with analog signal, the horizontal resolution is actually infinite, only defined by the pixel grid on the surface of the CRT. The pixel grid is actually indeed subpixel. Any color transition does not happen at "pixel" boundary; it happens at subpixel boundary. The electron ray gun does not know where pixel edges lie. Therefore I think that subpixel rendering is a way to actually produce a more authentic experience with NTSC filtering.<br /></div><br />Which actually makes sense when you look up close at a Trinitron shadow-mask CRT and any color LCD panel.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Nov 29, 2011 6:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-11-29T01:25:18-07:00</updated>
<published>2011-11-29T01:25:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86919#p86919</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86919#p86919"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86919#p86919"><![CDATA[
<div class="quotetitle">LocalH wrote:</div><div class="quotecontent"><br />The red "PRESS START TO PLAY." text seems a bit chunkier in the subpixel version<br /></div><br />Subpixel rendering won't really help with monochromal details (purely or mostly red, green or blue） because they are confined to one subpixel channel to begin with.<br /><br /><em>&gt; Also, the white text at the bottom seems strangely reminiscent of<br />&gt; Apple II NTSC color artifacts when displaying text in split text/gfx mode =P</em><br />Now that I have had the chance to look at these images on different monitors, I find that the appearance varies on different monitors. But yes, it has similar consequences.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />You might want to box filter the red, green, and blue channels horizontally with a width of 1 output pixel (3 subpixels) to cut down on the color fringing that I see in the bottom third of the Wizards and Warriors screenshot. That's what ClearType does.<br /></div><br />I tried that, and while it really did reduce the fringing, what it really does is that it brings the outcome back closer to the non-subpixel-scaled version. For instance, the same filter, when applied on the SMB title screen, completely negates the subpixel benefits in the ground pieces on the bottom of the screen: The vertical lines in between of blocks appear blurry and irregular shaped.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix1.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix1b.png" alt="Image" /><br />Left: Subpixel scaled normally. Right: With block filter of tepples.<br />Source:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&lt;?php<br /><br />define&#40;'BLOCKFILTER', true&#41;;<br /><br />/* Input: 876x240 image, created as such:<br /> * take screenshot &#40;256x240&#41; -- a quite normal screenshot from a game.<br /> * convert screenshot.png -filter point -resize 1600% tmp0.png -- use imagemagick.<br /> * convert tmp0.png -filter lanczos -resize 292x240'!' tmp3.png -- for comparison, this is the image scaled without subpixels.<br /> * convert tmp0.png -filter lanczos -resize 876x240'!' tmp1.png -- this file is read by this program.<br /> */<br /><br />$im1 = imageCreateFromPng&#40;'tmp1.png'&#41;;<br />$w = imageSx&#40;$im1&#41;;<br />$h = imageSy&#40;$im1&#41;;<br />$im = imageCreateTrueColor&#40;$w,$h&#41;;<br />imageCopy&#40;$im, $im1, 0,0, 0,0, $w,$h&#41;;<br /><br />$im2 = imageCreateTrueColor&#40;$w/3, $h&#41;;<br />for&#40;$x=0; $x&lt;$w; $x+=3&#41;<br />for&#40;$y=0; $y&lt;$h; $y+=1&#41;<br />&#123;<br />  if&#40;BLOCKFILTER&#41;<br />  &#123;<br />    $r  = &#40;imageColorAt&#40;$im, $x+0, $y&#41; &gt;&gt; 16&#41; &amp; 0xFF;<br />    $r += &#40;imageColorAt&#40;$im, $x+1, $y&#41; &gt;&gt; 16&#41; &amp; 0xFF;<br />    $r += &#40;imageColorAt&#40;$im, $x+2, $y&#41; &gt;&gt; 16&#41; &amp; 0xFF;<br /><br />    $g  = &#40;imageColorAt&#40;$im, $x+0, $y&#41; &gt;&gt; 8&#41; &amp; 0xFF;<br />    $g += &#40;imageColorAt&#40;$im, $x+1, $y&#41; &gt;&gt; 8&#41; &amp; 0xFF;<br />    $g += &#40;imageColorAt&#40;$im, $x+2, $y&#41; &gt;&gt; 8&#41; &amp; 0xFF;<br /><br />    $b  = &#40;imageColorAt&#40;$im, $x+0, $y&#41; &gt;&gt;  0&#41; &amp; 0xFF;<br />    $b += &#40;imageColorAt&#40;$im, $x+1, $y&#41; &gt;&gt;  0&#41; &amp; 0xFF;<br />    $b += &#40;imageColorAt&#40;$im, $x+2, $y&#41; &gt;&gt;  0&#41; &amp; 0xFF;<br /><br />    $r = &#40;int&#41;&#40;$r / 3&#41;;<br />    $g = &#40;int&#41;&#40;$g / 3&#41;;<br />    $b = &#40;int&#41;&#40;$b / 3&#41;;<br />  &#125;<br />  else<br />  &#123;<br />    $r = imageColorAt&#40;$im, $x+0, $y&#41; &gt;&gt; 16&#41; &amp; 0xFF;<br />    $g = imageColorAt&#40;$im, $x+1, $y&#41; &gt;&gt;  8&#41; &amp; 0xFF;<br />    $b = imageColorAt&#40;$im, $x+2, $y&#41; &gt;&gt;  0&#41; &amp; 0xFF;<br />  &#125;<br />  <br />  imageSetPixel&#40;$im2, $x/3, $y, 0x010000*$r +  0x000100*$g +  0x000001*$b &#41;;<br />&#125;<br />ImagePng&#40;$im2, 'tmp2.png'&#41;;<br />/* Outcome: 292x240 subpixel rendered image. */</div><br /><br /><br /><br />Re: Use of subpixel artifacts in NTSC rendering: On an actual CRT television, with analog signal, the horizontal resolution is actually infinite, only defined by the pixel grid on the surface of the CRT. The pixel grid is actually indeed subpixel. Any color transition does not happen at "pixel" boundary; it happens at subpixel boundary. The electron ray gun does not know where pixel edges lie. Therefore I think that subpixel rendering is a way to actually produce a more authentic experience with NTSC filtering. However, you might only want to do it for onscreen rendering. For any material that is presented at non-1:1 pixel ratio, such as a YouTube video, it does not make sense to render with subpixels...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Tue Nov 29, 2011 1:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LocalH]]></name></author>
<updated>2011-11-28T22:19:51-07:00</updated>
<published>2011-11-28T22:19:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86913#p86913</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86913#p86913"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86913#p86913"><![CDATA[
I like the concept of using LCD subpixels to increase apparent H-res, although as you know there are caveats that apply to greater and lesser extents depending on the individual viewing the output. Here are my observations of your images.<br /><br />On the first scrolling example using SMB tiles, I can see a small amount of color fringing on the edges of the cloud, although these would be less visible when running at 60fps.<br /><br />As far as using it for cheap NTSC artifact rendering, I do like the idea, as it could be useful on slower systems that may struggle with the algorithms. It definitely doesn't quite look as nice, especially when looking at the white text on the Ice Climber screens.<br /><br />SMB title screen: Quite nice, although the color fringing on the SMB logo is extremely visible to me (and being a still graphic for the majority of its appearance onscreen it's slightly jarring but not a dealbreaker).<br /><br />W&amp;W title screen: Looks pretty nice, although I do notice two visual flaws. The red "PRESS START TO PLAY." text seems a bit chunkier in the subpixel version (for example, the tall vertical stroke on the left of the P and R should be relatively the same size after scaling, on the non-subpixel screen they visually appear to be so, but on the subpixel screen the R's stroke looks to be almost 3/2 the size of the P's). Also, the white text at the bottom seems strangely reminiscent of Apple II NTSC color artifacts when displaying text in split text/gfx mode =P<br /><br />W&amp;W title shifted across the three subpixel positions: This looks quite good in general, especially when considering that optimal motion will once again occur at 60fps. However, the motion of the aforementioned red text seems almost out of sync, probably due to the red pixels requiring far less use of the G and B subpixels. It almost seems to be merely jumping between two adjacent pixels, with an almost imperceptible color shift between two of the three frames then an apparent one pixel jump. The rest of the image looks fairly good though, even the blue of the sword (although if you look very closely you can see a tiny "gap" appear between the blade and crossguard, and the tip of the blade exhibits a similar appearance to the red text, although a bit more subtle since the blue does appear to contain some green).<br /><br />My overall impression is positive, Bisqwit. I've long been impressed with your analysis of game engines through your work with TAS, and I've eagerly been following your work with square-based NES palette generation and more fully understanding NTSC PPU output.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=325">LocalH</a> — Mon Nov 28, 2011 10:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-11-28T15:55:16-07:00</updated>
<published>2011-11-28T15:55:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86892#p86892</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86892#p86892"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86892#p86892"><![CDATA[
Yeah, I've used subpixel to make the title screen of Lockjaw: The Overdose. The GBA's LCD is BGR (blue on the left), which makes the title screen look like crap when played at 1x size in an emulator because most PC LCDs are RGB.<br /><br />You might want to box filter the red, green, and blue channels horizontally with a width of 1 output pixel (3 subpixels) to cut down on the color fringing that I see in the bottom third of the Wizards and Warriors screenshot. That's what ClearType does.<br /><br />And then you have to deal with things like PenTile, which has only green at full res and red and blue at half res. ClearType style techniques won't help you there.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Nov 28, 2011 3:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-11-30T03:20:42-07:00</updated>
<published>2011-11-28T15:10:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86890#p86890</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86890#p86890"/>
<title type="html"><![CDATA[Subpixel rendering]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8361&amp;p=86890#p86890"><![CDATA[
On RGB displays, subpixel rendering can be an interesting topic.<br /><br />Here is a small sample picture, made small for your convenience (still 111 kilobytes).<br /><img src="http://bisqwit.iki.fi/kala/snap/subpixelscrollsample.gif" alt="Image" /><br />No, don't zoom it, for it must be viewed at 1:1 pixel correspondance to the original image.<br /><br />It contains the same scene twice. Each frame, it scrolls 1:3 pixels towards the left. The top part is rendered at subpixel precision; the bottom part is rendered at whole pixel precision.<br />At least on my TFT display, the top part (especially the ground) appears to scroll considerably smoother than the bottom part, without noticeable artifacts. (Wait for the file to load completely first!)<br /><br />I was wondering about applications for this in NES emulator development.<br />- Subpixel-precise image scaling<br />- Rendering of NTSC artifacts at subpixel resolution<br /><br />General information: Subpixel rendering is a tradeoff: It gives 3 x improved horizontal resolution, but because each subpixel is monochromous, it produces color artifacts. It works best when the subpixel details are whole pixel wide, only offseted, and relatively unsaturated (grayscale).<br />Train of thought: NES can render pixels at three subpixel positions. A pixel may be in its place, or shifted 1/3 pixels to the side, or 2/3 pixels to the side. Coincidentally, TFT has the same architecture. We can shift the entire screen losslessly sideways by 1/3 pixel increments! How about applying it for NTSC rendering?<br /><br />Your thoughts?<br /><br /><br /><br />Topic: Ultra-fast NTSC filtering.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix0.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix1.gif" alt="Image" /><br />Left: No subpixel rendering. Right: Yes subpixel rendering.<br />(Note: The rightside image appears to jitter more, because it brings more NTSC artifacts forth. The leftside image is 3x more aliased compared to the rightside one.)<br />EDIT: The pictures above were produced with a buggy algorithm. Below, fixed versions.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix0a.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix1a.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix1b.gif" alt="Image" /><br />Left: No subpixel rendering; Middle: Subpixel interval 2 half-clocks; Right: Subpixel interval 2⅔ half-clocks.<br />Subpixel components are sampled as follows, depending on the subpixel interval:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0123456789ab0123456789ab0123456789ab0123 &lt;- halfclock modulo 12<br />0000000011111111222222223333333344444444 &lt;- pixels as generated by PPU &#40;8 halfclocks per pixel&#41;<br /><br />No subpixel rendering &#40;8,0,0&#41;:<br />        ............rrrrrrrrrrrr         &lt;- NTSC signal sampled for each rendered pixel<br />        ............gggggggggggg<br />        ............bbbbbbbbbbbb<br />Subpixel interval 2 &#40;4,2,2&#41;:<br />    ............rrrrrrrrrrrr<br />      ............gggggggggggg<br />        ............bbbbbbbbbbbb<br />Subpixel interval 2⅔  &#40;2,3,3&#41;:<br />  ............rrrrrrrrrrrr<br />     ............gggggggggggg<br />        ............bbbbbbbbbbbb</div><br /><br />Topic: Super Mario Bros. title screen, lanczos-scaled to proper aspect ratio.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix0.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix1.png" alt="Image" /><br />Left: At 292x240. Right: At 876x240 (subpixel).<br />Topic: Same deal, Wizards &amp; Warriors title screen.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix3.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix2.png" alt="Image" /><br /><br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix23.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix23b.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix23a.png" alt="Image" /> <br />Left: original title screen for comparison. Midde &amp; right: The same title screen, shifted 1/3 and 2/3 pixels to the left respectively. Click <a href="http://bisqwit.iki.fi/kala/snap/nesemu1_subpix23.gif" class="postlink">here</a> to see an animated progression of these three images.<br /><br />It is easy to observe that the subpixel-scaled version does better job at capturing the sharpness of the original picture, but at the cost of some color artifacts at the edges of details.<br /><br /><span style="font-size: 75%; line-height: normal"><a href="http://pastebin.com/G9B7rMT8" class="postlink">Source code of ultra-fast NTSC filtering</a></span> (old buggy versions: DgDsvnu6)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Mon Nov 28, 2011 3:10 pm</p><hr />
]]></content>
</entry>
</feed>