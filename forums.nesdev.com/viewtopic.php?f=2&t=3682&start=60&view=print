<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 6502 ASM trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">6502 ASM trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>5</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jul 07, 2012 7:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After you've tried coding for the Atari 2600 and its 128 bytes of RAM, the 2KB of the NES seem like a lot of space, and suddenly flags that use entire bytes don't sound so bad.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jul 07, 2012 8:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I also like very much the one where you push an address (minus 1) to the stack and then use the RTS instruction to jump to that address. This can be useful for implementing jump tables, and I'm using this a lot in my game.</div>I have thought of the same thing and used that in modifying PPMCK.
<br />
<br />Another (very simple) thing is that if you call a subroutine and then followed immediately by the return from subroutine instruction, you don't need that on the stack, you can just jump directly to the subroutine without use of stack, to make tail calls. (Some NES programs did not use this and I have fixed them)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Wed Aug 01, 2012 8:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I thought of a way to handle an object's state with bit-packed variables (2 bits or 4 variables per byte).
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #$55 ; becomes #$AA<br />&nbsp; &nbsp;STA var<br />&nbsp; &nbsp;ldx #4<br />.Loop:<br />&nbsp; &nbsp;JSR CheckState<br />&nbsp; &nbsp;ROL<br />&nbsp; &nbsp;ROL<br />&nbsp; &nbsp;STA var<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;BNE .Loop<br />&nbsp; &nbsp;ROL<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;brk<br /><br />CheckState:<br />&nbsp; &nbsp;lda var<br />&nbsp; &nbsp;bit var<br /><br />&nbsp; &nbsp;bpl .0x<br />&nbsp; &nbsp;bvc .10<br />&nbsp; &nbsp;jmp MakeState00&nbsp; &nbsp;&nbsp; &nbsp;; @11<br />&nbsp; &nbsp;<br />.10:&nbsp; &nbsp;&nbsp; &nbsp;; @10<br />&nbsp; &nbsp;jmp MakeState11<br />.0x:<br />&nbsp; &nbsp;bvc .00<br />&nbsp; &nbsp;jmp MakeState10&nbsp; &nbsp;; @01<br />&nbsp; &nbsp;<br />.00:&nbsp; &nbsp;jmp MakeState01&nbsp; &nbsp;; @00<br />&nbsp; &nbsp;<br />MakeState00:<br />&nbsp; &nbsp;AND #$3F<br />&nbsp; &nbsp;RTS<br />MakeState01:<br />&nbsp; &nbsp;AND #$3F<br />&nbsp; &nbsp;ORA #$40<br />&nbsp; &nbsp;RTS<br />MakeState10:<br />&nbsp; &nbsp;AND #$3F<br />&nbsp; &nbsp;ORA #$80<br />&nbsp; &nbsp;RTS<br />MakeState11:<br />&nbsp; &nbsp;ORA #$C0<br />&nbsp; &nbsp;RTS<br /></div>
<br />
<br />This way there aren't a bunch of and's and cmp's.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Fri Aug 03, 2012 4:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">After you've tried coding for the Atari 2600 and its 128 bytes of RAM, the 2KB of the NES seem like a lot of space, and suddenly flags that use entire bytes don't sound so bad.</div><br />/me shivers thinking back at that one time he tried Atari.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Aug 08, 2012 11:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Specific to ca65, but maybe workable in other assemblers: <br />Call any compatible subroutine and pass stack parameters and no messing around with return address:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro call function, param1, param2, param3, param4, param5, param6<br /><br />&nbsp; &nbsp;lda #&gt;@return<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda #&lt;@return-1<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.ifnblank param6<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param6<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param5<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param5<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param4<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param4<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param3<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param3<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param2<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param2<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param1<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param1<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;jmp function<br />&nbsp; &nbsp;@return:<br />.endmacro<br /></div><br /><br />'function' should use pla to get all paramaters and rts when done.<br /><br />Improved version:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro call function, param1, param2, param3, param4, param5, param6, param7<br />.local return<br /><br />&nbsp; &nbsp;.if .paramcount &gt; 3+1<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #&gt;(return-1)<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #&lt;(return-1)<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.ifnblank param7<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param7<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param6<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param6<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param5<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param5<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param4<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param4<br />&nbsp; &nbsp;&nbsp; &nbsp;pha<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param3<br />&nbsp; &nbsp;&nbsp; &nbsp;ldy param3<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param2<br />&nbsp; &nbsp;&nbsp; &nbsp;ldx param2<br />&nbsp; &nbsp;.endif&nbsp; &nbsp;<br />&nbsp; &nbsp;.ifnblank param1<br />&nbsp; &nbsp;&nbsp; &nbsp;lda param1<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.if .paramcount &lt;4+1<br />&nbsp; &nbsp;&nbsp; &nbsp;jsr function<br />&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;jmp function<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;return:&nbsp; &nbsp;<br />.endmacro</div><br /><br />Fixes issue of possible page wrap for return address at the cost of a byte or two, only uses stack as needed, local label.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Thu Aug 09, 2012 5:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />[quote=&quot;Movax12&quot;]<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro call function, param1, param2, param3, param4, param5, param6<br /><br />&nbsp; &nbsp;lda #&gt;@return<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda #&lt;@return-1<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br /></div><br /><br />Potential rare but ugly bug here. Let's imagine when expanding the macro, &quot;@return&quot; resolve to $C000 (for example), then it'll push $C0 then $FF, and when your subroutine returns the program will go haywire. So both the high and the low part should get a &quot;-1&quot;, not just the low part. Otherwise, nice trick.<br /><br />Also, that somehow reminds me of some TI's DSPs that doesn't have a &quot;call&quot;, &quot;jsr&quot;, &quot;bx&quot;, &quot;blx&quot; instruction or anything equivalent, with these you have to put the return address in a register (B3) then jump to your subroutine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 09, 2012 5:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another (small) thing, it's better to use .local control command in CA65 instead of cheap local labels (@foo) for labels inside the macro, because the cheap local label will still be visible outside the macro in this case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Thu Aug 09, 2012 7:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the feedback. I did know about .local in a macro, fixed. I think I fixed the return address problem in a slightly hacky way, but I am happy with it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 09, 2012 8:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Thanks for the feedback. I did know about .local in a macro, fixed. I think I fixed the return address problem in a slightly hacky way, but I am happy with it.</div><br />Why not this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #&gt;(return-1)<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda #&lt;(return-1)<br />&nbsp; &nbsp;pha<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Thu Aug 09, 2012 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh yeah that's much better. Thanks <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Added one last revision to that post. It could be improved more, but the idea is there anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Fri Sep 07, 2012 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Second part, I analyzed the passing of &gt;4 bytes of parameters very carefully.<br />bogax's solution is officially the best.<br /><br />I counted bytes as following, assuming you have M functions that uses N parameters :<br /><br />- Standard solution (3 last args in registers and anything else stored to ZP before calling) : 9+N bytes for each call, 0 overhead for the calee<br />Overall : (9+N)*M bytes.<br /><br />- Nintendo's solution (store arguments after the jsr opcode and have the calee call a function that copies args to ZP) : 3+N bytes for each call, and 3 bytes overhead for the callee, the argument retrieve function takes 32 bytes :<br />Overall : (6+N)*M + 32 bytes<br /><br />- bogax's solution (jsr to a special function followed by the adress of the actual function, # of arguments and arguments) : 6+N bytes for each call, 0 overhead for the calee, argument retrieve function takes 29 bytes :<br />Overall : (6+N)*M + 29 bytes<br /><br />So bogax's is the winner (for a close call) is M&gt;3, that if a program needs at least 4 functions with more than 3 bytes of arguments.<br />I haven't checked speed, but I'm sure bogyax's is less slow since it avoids an extra jsr/rts of overhead each time.<br /><br />Eventually his routine can be improved further more using BRK to simulate a JSR to the argument retrieving function if IRQs aren't used.</div><br />Just to confuse the issue some more <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />It occured to me to move the target addresses and numbers of parameters<br />into tables.  I think this might work out better provided you're calling each<br />target routine several times.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;;gets parameters inline<br />&nbsp;;then jumps to a target routine that uses the parameters<br />&nbsp;;the first byte inline is a pointer into a table of<br />&nbsp;;addresses of target routines and their associated<br />&nbsp;;number of parameters<br />&nbsp;;the low byte of the pointer to the inline parameters<br />&nbsp;;is kept in y and pushed back on the stack as the<br />&nbsp;;lo byte of the address the target routine returns to<br />&nbsp;;the paramters are fetched inline in ascending order<br />&nbsp;;but put into memory in descending order<br />&nbsp;;there's no provision for propagating a carry to the<br />&nbsp;;high byte of the inline pointer/return address<br />&nbsp;;so the inline parameters should not straddle a page boundary<br />&nbsp;;you jsr to this routine supplying a pointer as the<br />&nbsp;;first byte inline followed by the parameters to fetch<br />&nbsp;;in reverse order<br /><br />GET_PARAMETERS<br />&nbsp;pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;first get the return address<br />&nbsp;tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;into the inline parameters pointer<br />&nbsp;pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;lo byte in y<br />&nbsp;sta ptr+1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;hi byte in ptr<br />&nbsp;pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;put the hi byte back on the stack<br />&nbsp;iny<br />&nbsp;lda (ptr),y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;get the first byte inline<br />&nbsp;tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;and put it in x to point to&nbsp; <br />&nbsp;lda jmp_tbl_lo,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;the target routine's paramter's<br />&nbsp;sta jmp_add&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;target address<br />&nbsp;lda jmp_tbl_hi,x<br />&nbsp;sta jmp_add+1<br />&nbsp;lda num_parameters_tbl,x<br />&nbsp;tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;number of parameters to fetch<br />LOOP<br />&nbsp;iny<br />&nbsp;lda (ptr),y<br />&nbsp;sta parameters-1,x<br />&nbsp;dex<br />&nbsp;bne LOOP<br />&nbsp;tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;put the lo byte of the return address<br />&nbsp;pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;back on the stack<br />&nbsp;jmp (jmp_add)<br /><br />jmp_tbl_lo<br />&nbsp;.db &lt;ROUTINE1,&lt;ROUTINE2,&lt;ROUTINE3&nbsp; ;etc<br /><br />jmp_tbl_hi<br />&nbsp;.db &gt;ROUTINE1,&gt;ROUTINE2,&gt;ROUTINE3&nbsp; ;etc<br /><br />num_parameters_tbl<br />&nbsp;.db num_parameters1,num_parameters2,num_parameters3&nbsp; ;etc<br /></div><br />So you jsr to the GET_PARAMETERS routine and the first parameter<br />inline is a pointer into the GET_PARAMETERS routine parameters table(s)<br />with an entry for each routine that uses GET_PARAMETERS,<br />containing that routine's address and the number of parameters to fetch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Sat Sep 08, 2012 12:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re:</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent">I thought of a way to handle an object's state with bit-packed variables (2 bits or 4 variables per byte).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #$55 ; becomes #$AA<br />&nbsp; &nbsp;STA var<br />&nbsp; &nbsp;ldx #4<br />.Loop:<br />&nbsp; &nbsp;JSR CheckState<br />&nbsp; &nbsp;ROL<br />&nbsp; &nbsp;ROL<br />&nbsp; &nbsp;STA var<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;BNE .Loop<br />&nbsp; &nbsp;ROL<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;brk<br /><br />CheckState:<br />&nbsp; &nbsp;lda var<br />&nbsp; &nbsp;bit var<br /><br />&nbsp; &nbsp;bpl .0x<br />&nbsp; &nbsp;bvc .10<br />&nbsp; &nbsp;jmp MakeState00&nbsp; &nbsp;&nbsp; &nbsp;; @11<br />&nbsp; &nbsp;<br />.10:&nbsp; &nbsp;&nbsp; &nbsp;; @10<br />&nbsp; &nbsp;jmp MakeState11<br />.0x:<br />&nbsp; &nbsp;bvc .00<br />&nbsp; &nbsp;jmp MakeState10&nbsp; &nbsp;; @01<br />&nbsp; &nbsp;<br />.00:&nbsp; &nbsp;jmp MakeState01&nbsp; &nbsp;; @00<br />&nbsp; &nbsp;<br />MakeState00:<br />&nbsp; &nbsp;AND #$3F<br />&nbsp; &nbsp;RTS<br />MakeState01:<br />&nbsp; &nbsp;AND #$3F<br />&nbsp; &nbsp;ORA #$40<br />&nbsp; &nbsp;RTS<br />MakeState10:<br />&nbsp; &nbsp;AND #$3F<br />&nbsp; &nbsp;ORA #$80<br />&nbsp; &nbsp;RTS<br />MakeState11:<br />&nbsp; &nbsp;ORA #$C0<br />&nbsp; &nbsp;RTS<br /></div><br /><br />This way there aren't a bunch of and's and cmp's.</div><br /><br />If I'm reading that right, you just increment two bits at a time<br />that is you've got four independent two bit counters that count<br />to 11 and then wrap back to 00.<br />How about just incrementing the top two bits where a carry<br />can't do you any harm?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda var<br />&nbsp;ldx #$04<br />LOOP<br />&nbsp;clc<br />&nbsp;adc #$40&nbsp; &nbsp;; increment top two bits<br />&nbsp;asl&nbsp; &nbsp; &nbsp; &nbsp; ; rotate two bits through<br />&nbsp;adc #$80&nbsp; &nbsp;; the carry<br />&nbsp;rol<br />&nbsp;dex<br />&nbsp;bne LOOP<br />&nbsp;sta var<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Dec 29, 2012 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just tought of a good old trick I'd like to share :<br /><br />Divide a value by 2^n (in this example 8) but round to the nearest integer, instead of rounding down :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &#91;...&#93;<br />&nbsp; lsr A<br />&nbsp; lsr A<br />&nbsp; lsr A<br />&nbsp; adc #$00<br /></div><br /><br />Do addition in another base (typically 10) :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda foo<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc bar&nbsp; &nbsp;;Supposed to be in the 0-9 range<br />&nbsp; &nbsp;cmp #10<br />&nbsp; &nbsp;bcc +<br />&nbsp; &nbsp;sbc #10<br />+ sta wathever&nbsp; &nbsp; &nbsp; ;At this point, we got the low digit in A AND the carry is set if and only if there was an overflow<br /><br />;Then we can continue with the dizains, etc...<br />&nbsp; &nbsp;lda foo2<br />&nbsp; &nbsp;adc bar2<br />&nbsp; &nbsp;cmp #10<br /><br />etc, etc....<br /></div><br /><br />Aah, this is good stuff only assembly language can do it so elegantly

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Dec 29, 2012 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &#91;...&#93;<br />&nbsp; lsr A<br />&nbsp; lsr A<br />&nbsp; lsr A<br />&nbsp; adc #$00<br /></div></div><br />I've done this a couple of times.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do addition in another base (typically 10)</div><br />And this too, for scores and such. Instead of converting numbers from binary to decimal just for displaying, I prefer to give each digit 1 byte and do all the math straight in decimal. This only gets complicated if you have to do more than add/subtract/compare these numbers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Dec 29, 2012 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Same here, I don't even care to pack the digits in nybles because the minor RAM savings isn't worth the loads of shifts you're going to add in your code.<br />Also I'm pretty sure most games does this. Only games with a decent amount of numbers and math makes it worthwhile to actually code them in binary and convert them to be display on the screen. Heh, I'm even sure it would be possible to code an entiere RPG while keeping the HP, Mana, Money, etc... coded entirely in BCD at all times. It would also make people have a harder time to find cheat codes <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've done this a couple of times.</div><br />I know it's nothing so spectacular, but it shows the power of assembly language, there is no way to use the carry like this in any high level language.<br />If I wanted for example to do this in C (divide by 8 and round to the nearest integer) I'd have no choice but to do this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;if(variable &amp; 0x8 == 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result = variable / 8;<br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = variable / 8 + 1;<br /></div><br />It would be the exact same, but I think there is no way the compiler would make it this efficient (completely removing the if-else clause), unless it was specifically written with this case in mind.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>5</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>