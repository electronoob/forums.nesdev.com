<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES boot loader specification</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES boot loader specification</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6941">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6941</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Sep 06, 2010 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NES boot loader specification</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've just completed a preliminary version of the NES boot loader specification, along with implementations.
<br /><a href="http://blargg.parodius.com/nes-code/bootloader/spec.html" class="postlink">NES boot loader specification</a>
<br /><a href="http://blargg.parodius.com/nes-code/bootloader/usage.html" class="postlink">NES boot loader usage</a>
<br />A boot loader is a tiny program which receives a larger program from a PC connected to the NES via RS-232 at 57600 bits per second. The larger program is loaded into zero-page and executed there, where it can then communicate with the PC to determine what to do next. The format and protocol include a checksum, but still allow a very small implementation that does no checking. The smallest I've come up with is 30 bytes. Other implementations are included on the usage page.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ; NTSC version<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Number of bytes received<br />byte:&nbsp; &nbsp;lda #$01<br />start:&nbsp; bit $4017&nbsp; &nbsp; &nbsp; &nbsp;; Wait for start bit<br />&nbsp; &nbsp; &nbsp; &nbsp; beq start<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; nop<br />dbit:&nbsp; &nbsp;ldy #3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Delay between bits<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr $4017&nbsp; &nbsp; &nbsp; &nbsp;; Read bit. First time reads 1 for start bit.<br />dly:&nbsp; &nbsp; dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Delay<br />&nbsp; &nbsp; &nbsp; &nbsp; bne dly<br />&nbsp; &nbsp; &nbsp; &nbsp; rol a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Move bit into shift register<br />&nbsp; &nbsp; &nbsp; &nbsp; sta 0,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Delay, and store received byte on final iter<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc dbit<br />&nbsp; &nbsp; &nbsp; &nbsp; inx<br />&nbsp; &nbsp; &nbsp; &nbsp; bne byte<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp $0007&nbsp; &nbsp; &nbsp; &nbsp;; Execute received code</div>
<br />
<br /><strong>EDIT:</strong> updated for slight format change.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Sep 06, 2010 12:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So this could work with a Game Genie and any cartridge with battery backed SRAM?  So then you can develop and run games which run entirely from the SRAM area, and take advantage of the CHR RAM built into the cartridge.  Of course, you'd need to override the vectors.
<br />
<br />But I'm a total hardware klutz, don't have soldering irons laying around nor random resistors, and can't build the cable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 07, 2010 5:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would work as long as you could come up with a Game Genie patch that causes execution of SRAM. Run game in debugger to find when it first enables SRAM, then find a JMP/JSR instruction close thereafter and patch its high byte to $60, then have SRAM with page $60 filled with $EA, and the boot loader beginning on the next page. For vector overrides, you can do the same; patch the high bytes to $07, then put JMP instructions where they happen to point in page 7 of RAM. The above would nicely fit in three Game Genie patch slots as well.
<br />
<br />The main snag is that you need to find some way to initially get the boot loader into SRAM. If you could have someone put it on an EPROM and replace the ROM with that, then you'd have a really cheap devcart. Of course if you're going to the trouble of replacing the ROM, you might as well put a Flash ROM there instead, as it's virtually the same amount of rewiring and chip cost.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 07, 2010 7:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or we could make a tacit agreement to include a bootloader like this in our homebrews so that people can boot by keying a code into the title screen of a repro.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 07, 2010 8:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nifty idea. It would also allow backing up/restoring battery-backed SRAM to a PC connected via second controller serial, without having to do any hotswapping. It would be desirable to support this in one's homebrew cartridge release, because it adds value with very little extra implementation cost.
<br />
<br />You can even put such communication code in the title screen's main loop, where it merely checks for activity on D0 of the second controller. If found, it enters the boot loader. Then you have the PC send some $FF sync bytes before the program block, to give time for input to be detected and the boot loader to be started. This way you can boot the cartridge and begin sending a program, without having to do anything on the controller (this is how the Munchausen menu works in the recently-posted video).
<br />
<br />Right now I'm working on a redone secondary loader that accepts small blocks of code, executes them, and can be re-entered. This allows easy uploading of data to any part of NES RAM, and execution of code to program things into Flash, configure an MMC chip, load CHR RAM, or whatever. I've implemented all this before, but not with this revamped boot loader design that I posted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Tue Sep 07, 2010 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Would anyone be willing to modify a NES emulator to support connecting the 2nd controller port to some sort of virtual serial port (named pipe on windows or unix socket on unix)?  Kind of like how VMWare workstation will let you attach a guest's emulated serial port to some logical "device" on the host that implements simple character IO (named pipes, sockets, file handles and real serial ports).
<br />
<br />That way homebrew carts can test this proposed functionality...
<br />
<br />Blargg, would you be willing to license your boot loader code very permissively (I'm thinking BSD or equivalent) so that we can place it into our homebrew carts without needing to GPL the entire cart?
<br />
<br />I could see adding some attribution to the "credits" screen if desired.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 07, 2010 9:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />byuu has probably done the closest to emulating serial in an emulator. He's made some sort of library for treating it the same as a serial port, so a PC-side program can communicate with the emulator as if it were the real thing.
<br />
<br />And yeah, the boot loader code should be licensed modified BSD/MIT/zlib style for sure. No credit needed, just be sure to mention where someone interested in the code might find it by at least mentioning a name or something someone can search for.
<br />
<br />I was hoping for more discussion of the boot loader itself, including its design and implementation, to iron out any problems before it gets put in cartridges. Once I implement some things with it I'll have a better idea of any problems.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Tue Sep 07, 2010 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The boot loader looks well thought out.  It really reminds me of the compactness and power of the Apple ][ disk boot loader ($c600-$c6ff).
<br />
<br />(briefly going off topic...)
<br />
<br />I once had a text file of a heavily commented disassembly of the ROM boot loader and first two stages of DOS 3.3.  The document explained all of the "tricks" used in the loaders, especially how the stage-1 DOS 3.3 loader will copy code from the disk II ROM (the GCR decoder IIRC).
<br />
<br />I can't find it, nor any online copies (to cite), but I found this while searching for it:
<br /><a href="http://home.comcast.net/~mjmahon/AppleCrateII.html" class="postlink">http://home.comcast.net/~mjmahon/AppleCrateII.html</a>
<br />
<br />A 17-node Apple II parallel computer... wow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 07, 2010 10:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, one possible breaking change. The fact that the code begins at 7 in zero-page, but in the program block it begins at 4 is bothering me. It makes it just a little bit harder to understand. I'm trying to work it out so that the program block has a header only. It's just that this might add a byte to one of the larger loaders. I know it matters little, but I'm still obsessing over it. If this change works out, the format has one less thing someone could object to. The format I'm aiming for is this: 4-byte signature, 8-bit checksum, 16-bit CRC, 249 bytes of user data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 08, 2010 8:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, I made the above change. Sorry about breaking the spec already, but this removes some little conceptual snags and simplifies the specification.
<br />
<br />The secondary loader that allows <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" class="postlink">remote procedure calls</a> is coming along very nicely.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>p1xl</b> [ Wed Sep 08, 2010 11:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very nice work on the bootloader, Blargg.  And I really like the idea of supporting a developer and getting a game and a programmable cart.
<br />
<br />Is it possible to have a second stage boot loader that writes directly to CHR-RAM?  If so, something 'official' would be nice.  That way you could write little ram games without having to worry about compressing tiles into your code space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 08, 2010 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the secondary one I'm rebuilding will be fabulous. First version I've been using is really fun to program from C. You basically get a clean API for accessing the NES, for example write_chr( addr, ptr, size ) and it writes that from your C program to the NES CHR. Internally it just does a generalized RPC, sending the NES code for a small routine that loads the CHR, along with the CHR data. When that returns, this secondary loader is running, waiting for the next RPC call. Just to be clear, this isn't for writing games or anything (the latency would be too great), just for manipulating the NES hardware/loading things from the host in a very streamlined fashion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Sep 15, 2010 5:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hows the RPC API coming along, blargg? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Sep 15, 2010 9:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why not do 256 bytes of data, 249 byte blocks is kind of a weird size, I would think that the header and error-checking stuff will discarded immediately after it checks out OK.  XMODEM by comparison is 128 bytes of data + 2 bytes of CRC-16, which is super easy to handle - no problems crossing page boundaries.
<br />
<br />I've been thinking about this lately, about hooking this up on the expansion port version of my Squeedo board.  Given the choice between synchronous SPI and async UART, I'm definitely going to try synchronous.  What I'm hoping would work, is on MCU it could do an async bit-bang to be compatible with just the initial loader.  After it gets the proper comms code loaded from that, then it should be OK to use any kind of hardware whatsoever, right?
<br />
<br />See any potential problems with this idea?  Seems OK, as far as I can tell so far.
<br />
<br />EDIT - Sorry, nevermind what I said about the block size, I wasn't considering that it's only one block, heheh.  Still seems a little odd, but any arbitrary amount is fine in that case.
<br />
<br />I guess my biggest concern (with my hardware as I imagine it), is wondering wtf happens if a controller is in port 2 at the same time the MCU (or anything for that matter) is bit-banging the same lines on the expansion port..  On the expansion port though it would be really easy to move to the other bits.  I kind of wish the "standard" serial adapter didn't use D0.  So I'll have to look for a work-around, probably.
<br />
<br />Despite whatever issues I may or may not run into, a standard bootloader like this is a really great idea.  I figured XMODEM would just be the standard (as it has been since before I was even born), but XMODEM has it's faults (no filename, or filesize given, no auto-start transfers) so this could handle things a lot better, while still being standard enough.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Sep 16, 2010 12:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hacked out some NES-&gt;PC code, maybe it's of some use to someone. It's a little big but it sends up to 64k as fast as possible (8N1 @ 57600 baud, no gaps in between bytes) while generating a 16-bit checksum.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />dw count&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; byte count, $0000 will send 64k<br />dw tcheck&nbsp; &nbsp; &nbsp; &nbsp; ; temp checksum<br />dw checksum&nbsp; &nbsp;; final checksum<br />dw ptr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; start address<br />db byte&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; holds read byte<br />db invert&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set to $FF for direct connection, $00 for MAX232/FTDI<br /><br /><br />&nbsp; &nbsp; ldy #0<br />&nbsp; &nbsp; sty &lt;tcheck&nbsp; &nbsp; &nbsp; &nbsp; ; temp checksum<br />&nbsp; &nbsp; sty &gt;tcheck<br />startbit:<br />&nbsp; &nbsp; ; pla, branch to here&nbsp; 6<br />&nbsp; &nbsp; lda &lt;count&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; beq skip&nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; nop&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; dec &lt;count&nbsp; &nbsp; ; 5<br />&nbsp; &nbsp; jmp here&nbsp; &nbsp; ; 4<br />skip:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; dec &lt;count&nbsp; &nbsp; ; 5<br />&nbsp; &nbsp; dec &gt;count&nbsp; &nbsp; ; 5<br />here:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; ----- 16<br />&nbsp; &nbsp; nop&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; lda invert&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; sta $4016&nbsp; &nbsp; ; 4 ---- 31<br /><br /><br />&nbsp; &nbsp; lda &#40;ptr&#41;,y&nbsp; &nbsp; ; 5<br />&nbsp; &nbsp; sta byte&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; inc &lt;ptr&nbsp; &nbsp; ; 5<br />&nbsp; &nbsp; beq one&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; nop&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; jmp two&nbsp; &nbsp; &nbsp; &nbsp; ; 4<br />one:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; inc &gt;ptr&nbsp; &nbsp; ; 5<br />two:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; ------ 13<br />&nbsp; &nbsp; lda byte&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; eor invert&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; sta $4016&nbsp; &nbsp; ; 4 ---- 31<br /><br /><br />`&nbsp; &nbsp; lda byte&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; adc &lt;tcheck&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; sta &lt;tcheck&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; lda &gt;tcheck&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; adc #0&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; sta &gt;tcheck&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; lda byte&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; eor invert&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; sta $4016&nbsp; &nbsp; ; 4 ---- 31 <br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; waste 3 cycles<br />&nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; ldx #7&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />loop:<br />&nbsp; &nbsp; pha&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; pla&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; pha&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; pla&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; pha&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; pla&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; nop&nbsp; &nbsp; ; 2 -- 20<br />&nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; sta $4016&nbsp; &nbsp; ; 4 -- 31<br />&nbsp; &nbsp; dex&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; bne loop&nbsp; &nbsp; ; 3<br /><br />stopbit:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2 added cycles from bne<br />&nbsp; &nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; sta byte&nbsp; &nbsp; ; 3 --- byte should be clear, maybe useful<br />&nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; lda &lt;count&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; ora &gt;count&nbsp; &nbsp; ; 3 --- this is a done flag<br />&nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; lda invert&nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; eor #1&nbsp; &nbsp; &nbsp; &nbsp; ; 2&nbsp; &nbsp; <br />&nbsp; &nbsp; sta $4016&nbsp; &nbsp; ; 4 -- 31<br /><br />&nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; bne startbit<br />&nbsp; &nbsp; lda &lt;tcheck<br />&nbsp; &nbsp; sta &lt;checksum<br />&nbsp; &nbsp; lda &gt;tcheck<br />&nbsp; &nbsp; sta &gt;checksum<br />&nbsp; &nbsp; rts</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>