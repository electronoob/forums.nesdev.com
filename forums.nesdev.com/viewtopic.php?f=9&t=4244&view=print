<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Custom made controller for NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Custom made controller for NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4244">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4244</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Tue Jul 22, 2008 9:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Custom made controller for NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made this custom controller for the NES a couple of months ago. It's made out of PVC and I use a pic microcontroller that reads touch sensor presses and sends data out to a shift register. The same kind of shift register used in the NES gamepad.
<br />
<br />I didn't want to destroy gamepads to use their plugs so I decided to just add a few rca jacks in the back of the NES. Those rca jack just connect to the appropriate pins of the gamepad port.
<br />
<br />Here's the YouTube video: <!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=Bgkh00sHR5c">http://www.youtube.com/watch?v=Bgkh00sHR5c</a><!-- m -->
<br />
<br />The code for the cart I made (called Super Synth Drums), is a very simple program that was mostly given to me in the the "newbie" section of this forum. Most of the code is there if anyone wants to see it. It was begun mainly as a lesson, learning about NES programming. So it was in all respects a "newbies" program. The custom controller is really what makes it fun.
<br />
<br />Here's a descriptive image of the controller, called the DrumAxe.
<br /><!-- m --><a class="postlink" href="http://electrokraft.com/images/drumaxe_detail_info.jpg">http://electrokraft.com/images/drumaxe_detail_info.jpg</a><!-- m -->
<br />
<br />I sold some of the carts on ebay and my website, donating a percentage to a Hunger charity called Action Against Hunger, and also the St. Jude Children's Hospital.
<br />
<br />Tony

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Tue Jul 22, 2008 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, that's really cool!
<br />Perhaps somebody could write a Guitar Hero clone - it would be so awesome to play the downhill guitar solo in "Ski or Die" on your DrumAxe! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Tue Jul 22, 2008 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks.
<br />
<br />Tony

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Tue Jul 22, 2008 1:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty nifty. Quite an invention.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Tue Jul 22, 2008 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. I have a little more experience in hardware than in programming (just a beginner in NES programming).
<br />
<br />The circuit is a pic microcontroller that is detecting the senors, and then outputting to a shift register. Same shift register used in the NES gamepad.
<br />
<br />While experimenting I also came up with a musical sequencer circuit and a guitar input circuit that triggered the percussion sounds when you played a note on the guitar. Haven't really developed those things, maybe in future.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cd_vision</b> [ Tue Jul 22, 2008 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, yes, but how will this help improve my score in Zelda?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Jul 22, 2008 6:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Interesting device. Ok, so it plays drums (noise chan), but since there's only one chan, samples don't overlap. You can output the drums to any other channel by using a few tricks. 
<br />
<br />Do you think about adding a guitar-style effect with the square waves? It gives me a lot of ideas... but I don't know how you planned the input system, and even if the use of squares would be good.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Tue Jul 22, 2008 6:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, the cart is very rudimentary. There could be much more you can do. I'm not a programmer, just beginner with NES programming.
<br />
<br />I haven't yet tried the other channels to get polyphony. Polyphony is the goal.
<br />
<br />I was also ready to add more touch sensors and more sounds.
<br />
<br />It's really just 6 touch sensors, a pic microcontroller and a shift register, that's all.
<br />
<br />If anyone wants to contribute some more to this just let me know. I would like to make an improved cart, donate a percentage. For me it would be more of an education in programming.
<br />
<br />I will re-post my simple program again here if anyone would like to slowly, and stepwise enhance it so that it would also be educational for us newbies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jul 22, 2008 7:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I guess each sensor is mapped to an NES button, right? If you tell us how they're mapped, we could write some interesting apps for it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Tue Jul 22, 2008 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hah, the device looks a lot like a potato cannon i made out of seemingly very similar PVC components. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Wed Jul 23, 2008 6:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So I guess each sensor is mapped to an NES button, right? If you tell us how they're mapped, we could write some interesting apps for it.</div>
<br />
<br />That's right. You can also just use the gamepads instead. Gamepad #2 just adds the looping/pulsing effect.
<br />
<br />I'll post the code in the newbie section so that whatever might be added/modified or enhanced can be learned by us beginners.
<br />
<br />Thanks,
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Jul 24, 2008 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is the code. It's very simple since I am just a beginner with NES programming.
<br />
<br />If anyone wants to do anything to it, I thought we can repost this code in the newbie section and continue "stepwise" so the changes, enhancements, mods to the code can be taught to newbies like me.
<br />
<br />My custom controller, the DrumAxe just replaces one of the gamepads, each sensor on the DrumAxe corresponds to a button on gamepad #1. Gamepad #2 can be used to create pulsing effects.
<br />
<br />Would be nice to explore the other sound channels. I'm not claiming any exclusive rights to any of this code. Most of this code was spoon fed to me in the newbie section back in Feb-April. If no one has any objections, I'm humbly proposing that it can be shared and used as anyone wishes, freely open.
<br />
<br />If anyone wants details of the DrumAxe circuit let me know, it's really a simple device.
<br /><strong><br />(I will also post this in the newbie section, and we'll continue the thread there, instead of here.)</strong>
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Nes Gamepad demo program 4/28/08<br />;-------------------<br /><br />; INES header setup<br /><br /><br />&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.ineschr 0&nbsp; &nbsp;; zero because we don't have character data<br />&nbsp; &nbsp;.inesmir 1<br />&nbsp; &nbsp;.inesmap 0&nbsp; <br /><br />&nbsp; &nbsp;.bank 1<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw 0 &nbsp; &nbsp;&nbsp; &nbsp;; NMI routine<br />&nbsp; &nbsp;.dw start &nbsp; &nbsp;; Reset routine<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; IRQ routine<br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $8000<br /><br />start:<br /><br />key_a&nbsp; &nbsp;&nbsp; &nbsp;EQU&nbsp; &nbsp;%00000001 ; A button press <br />key_b&nbsp; &nbsp;&nbsp; &nbsp;EQU &nbsp; &nbsp;%00000010 ; B <br />key_select&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00000100 ; select <br />key_start&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00001000 ; start <br />key_up&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00010000 ; up arrow <br />key_down&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%00100000 ; down <br />key_left&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%01000000 ; left arrow <br />key_right&nbsp; &nbsp; &nbsp;EQU &nbsp; &nbsp;%10000000 ; right<br /><br /><br />ab_pressed&nbsp; &nbsp;EQU&nbsp; &nbsp;%00000011 ; A and B are pressed <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />button_state&nbsp; &nbsp; EQU&nbsp; &nbsp; &nbsp;$00<br />button_state2&nbsp; &nbsp;EQU&nbsp; &nbsp;$0F<br /><br /><br />&nbsp; &nbsp; sei&nbsp; &nbsp; &nbsp; &nbsp; ; ignore IRQs<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; &nbsp; ldx #$40<br />&nbsp; &nbsp; stx $4017&nbsp; ; disable APU frame IRQ<br />&nbsp; &nbsp; ldx #$ff<br />&nbsp; &nbsp; txs&nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; &nbsp; stx $2000&nbsp; ; disable NMI<br />&nbsp; &nbsp; stx $2001&nbsp; ; disable rendering<br />&nbsp; &nbsp; stx $4010&nbsp; ; disable DMC IRQs<br /><br />vblankwait1:&nbsp; <br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait1<br /><br />&nbsp; &nbsp; ; We now have about 30,000 cycles to burn before the PPU stabilizes.<br />&nbsp; &nbsp; ; Use it to clear RAM.&nbsp; X is still 0...<br />&nbsp; &nbsp; txa<br />clrmem:&nbsp; &nbsp;&nbsp; &nbsp;; this is for the video stuff<br />&nbsp; &nbsp; sta $000,x<br />&nbsp; &nbsp; sta $100,x<br />&nbsp; &nbsp; sta $200,x<br />&nbsp; &nbsp; sta $300,x<br />&nbsp; &nbsp; sta $400,x<br />&nbsp; &nbsp; sta $500,x<br />&nbsp; &nbsp; sta $600,x<br />&nbsp; &nbsp; sta $700,x&nbsp; ; Remove this if you're storing reset-persistent data<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; bne clrmem<br />&nbsp; &nbsp;<br />vblankwait2:<br />&nbsp; &nbsp; bit $2002<br />&nbsp; &nbsp; bpl vblankwait2<br /><br /><br />; *** CLEAR SOUND REGISTERS ***<br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;&nbsp; &nbsp;; clear all the sound registers by setting<br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp;&nbsp; &nbsp;; everything to 0 in the Clear_Sound loop<br />Clear_Sound:<br />&nbsp; &nbsp;sta $4000,x&nbsp; &nbsp;&nbsp; &nbsp;; store accumulator at $4000 offset by x<br />&nbsp; &nbsp;inx&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; increment x<br />&nbsp; &nbsp;cpx #$0F&nbsp; &nbsp;&nbsp; &nbsp;; compare x to $0F<br />&nbsp; &nbsp;bne Clear_Sound&nbsp; &nbsp;&nbsp; &nbsp;; branch back to Clear_Sound if x != $0F<br /><br />&nbsp; &nbsp;lda #$10&nbsp; &nbsp;&nbsp; &nbsp;; load accumulator with $10<br />&nbsp; &nbsp;sta $4010&nbsp; &nbsp;&nbsp; &nbsp;; store accumulator in $4010<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;&nbsp; &nbsp;; load accumulator with 0<br />&nbsp; &nbsp;sta $4011&nbsp; &nbsp;&nbsp; &nbsp;; clear these 3 registers that are <br />&nbsp; &nbsp;sta $4012&nbsp; &nbsp;&nbsp; &nbsp;; associated with the delta modulation<br />&nbsp; &nbsp;sta $4013&nbsp; &nbsp;&nbsp; &nbsp;; channel of the NES<br /><br /><br /><br />loop: <br />&nbsp; &nbsp;jsr updatejoy<br /><br />&nbsp; &nbsp;;Check the state of the right key <br />&nbsp; &nbsp;lda button_state <br />&nbsp; &nbsp;and #key_right <br />&nbsp; &nbsp;beq right_not_pressed <br />&nbsp; &nbsp;jsr right_is_pressed <br /><br /><br />right_not_pressed: <br />&nbsp; &nbsp; <br />&nbsp; &nbsp;;Check the state of the left button <br />&nbsp; &nbsp;lda button_state <br />&nbsp; &nbsp;and #key_left <br />&nbsp; &nbsp;beq left_not_pressed <br />&nbsp; &nbsp;jsr left_is_pressed <br /><br />left_not_pressed:<br /><br />&nbsp; &nbsp;;Check the state of the up arrow<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and #key_up<br />&nbsp; &nbsp;beq up_not_pressed<br />&nbsp; &nbsp;jsr up_is_pressed<br /><br />up_not_pressed:<br /><br />&nbsp; &nbsp;;Check the state of the downss arrow<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and #key_down<br />&nbsp; &nbsp;beq down_not_pressed<br />&nbsp; &nbsp;jsr down_is_pressed<br /><br />down_not_pressed:<br /><br /><br />&nbsp; &nbsp;;Check if A and B are pressed<br />&nbsp; &nbsp;lda button_state<br /><br />&nbsp; &nbsp;AND #$03&nbsp; ; mask out A+B bits<br />&nbsp; &nbsp;CMP #$03&nbsp; ; see if it equals A+B<br />&nbsp; &nbsp;BNE ab_not_pressed <br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jsr ab_is_pressed<br /><br />ab_not_pressed: <br /><br />&nbsp; &nbsp;;Check if A is pressed<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;AND #key_a&nbsp; ; mask out bits<br />&nbsp; &nbsp;BEQ a_not_pressed <br />&nbsp; &nbsp;jsr a_is_pressed<br /><br />a_not_pressed:<br /><br />&nbsp; &nbsp;;Check if b button is pressed<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and #key_b<br />&nbsp; &nbsp;beq b_not_pressed<br />&nbsp; &nbsp;jsr b_is_pressed<br /><br />b_not_pressed:&nbsp; &nbsp;<br /><br /><br />&nbsp; &nbsp;;Check if select button is pressed<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and #key_select<br />&nbsp; &nbsp;beq select_not_pressed<br />&nbsp; &nbsp;jsr select_is_pressed<br /><br /><br />select_not_pressed:<br /><br /><br /><br />&nbsp; &nbsp;;Check if start button is pressed<br />&nbsp; &nbsp;lda button_state<br />&nbsp; &nbsp;and #key_start<br />&nbsp; &nbsp;beq start_not_pressed<br />&nbsp; &nbsp;jsr start_is_pressed<br /><br /><br />start_not_pressed:<br /><br /><br /><br />&nbsp; ;Check State of Right Button of Joypad #2<br />&nbsp; &nbsp;lda button_state2 <br />&nbsp; &nbsp;and #key_right <br />&nbsp; &nbsp;beq right_not_pressed_2 <br />&nbsp; &nbsp;jsr right_is_pressed_2 <br /><br /><br /><br /><br />right_not_pressed_2:<br /><br /><br />&nbsp; &nbsp;;check state of A button of joypad #2<br />&nbsp; &nbsp;lda button_state2<br />&nbsp; &nbsp;AND #key_a&nbsp; ; mask out bits<br />&nbsp; &nbsp;BEQ a_not_pressed_2 <br />&nbsp; &nbsp;jsr a_is_pressed_2<br /><br />a_not_pressed_2:&nbsp; &nbsp;<br /><br /><br /><br /><br />&nbsp; &nbsp;;Check state of b button on joypad #2<br />&nbsp; &nbsp;lda button_state2<br />&nbsp; &nbsp;and #key_b<br />&nbsp; &nbsp;beq b_not_pressed_2<br />&nbsp; &nbsp;jsr b_is_pressed_2<br /><br /><br /><br />b_not_pressed_2:&nbsp; &nbsp;<br /><br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;;Check the state of the left button of joypad #2 <br />&nbsp; &nbsp;lda button_state2 <br />&nbsp; &nbsp;and #key_left <br />&nbsp; &nbsp;beq left_not_pressed_2 <br />&nbsp; &nbsp;jsr left_is_pressed_2 <br /><br />left_not_pressed_2:<br /><br />&nbsp; &nbsp;;Check the state of the up arrow of joypad #2<br />&nbsp; &nbsp;lda button_state2<br />&nbsp; &nbsp;and #key_up<br />&nbsp; &nbsp;beq up_not_pressed_2<br />&nbsp; &nbsp;jsr up_is_pressed_2<br /><br />up_not_pressed_2:<br /><br />&nbsp; &nbsp;;Check the state of the up arrow of joypad #3<br />&nbsp; &nbsp;lda button_state2<br />&nbsp; &nbsp;and #key_down<br />&nbsp; &nbsp;beq down_not_pressed_2<br />&nbsp; &nbsp;jsr down_is_pressed_2<br /><br />down_not_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;;Check if select button is pressed<br />&nbsp; &nbsp;lda button_state2<br />&nbsp; &nbsp;and #key_select<br />&nbsp; &nbsp;beq select_not_pressed_2<br />&nbsp; &nbsp;jsr select_is_pressed_2<br /><br /><br />select_not_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;jmp loop ;Go back and keep reading the joypad forever <br /><br /><br />updatejoy:<br /><br />&nbsp; &nbsp; LDA #1 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; strobe joypad 1 <br />&nbsp; &nbsp; STA $4016 <br />&nbsp; &nbsp; LDA #0 <br />&nbsp; &nbsp; STA $4016<br /><br />&nbsp; &nbsp; LDX #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; set X to 8 &#40;the number of times we want to loop, once fo each button&#41; <br />&nbsp; &nbsp; <br /><br /><br />joybuttons: <br />&nbsp; &nbsp; <br />&nbsp; &nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state&nbsp; &nbsp; &nbsp;; rotate C flag into our button_state variable <br /><br />&nbsp; &nbsp; <br />&nbsp; &nbsp; DEX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joybuttons&nbsp; &nbsp; &nbsp; &nbsp;; jump back to our loop until X is zero <br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;; Begin reading joypad #2 and store bits in button_state2 variable.<br /><br /><br />&nbsp; &nbsp; LDY #$08<br /><br />joybuttons2:<br /><br />&nbsp; &nbsp; LDA $4017&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get button state <br />&nbsp; &nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; shift it into the C flag <br />&nbsp; &nbsp; ROR button_state2&nbsp; &nbsp; ; rotate C flag into our button_state variable <br /><br />&nbsp; &nbsp; <br />&nbsp; &nbsp; DEY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; decrement X &#40;our loop counter&#41; <br />&nbsp; &nbsp; BNE joybuttons2&nbsp; &nbsp; &nbsp; ; jump back to our loop until Y is zero <br /><br /><br />&nbsp; &nbsp; rts<br />&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;<br />&nbsp;<br />right_is_pressed: ; play sound when right arrow is pressed.<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00111101&nbsp; &nbsp;; mode, period<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%0000000&nbsp; &nbsp; ; duration<br />&nbsp; &nbsp;sta $400F<br /><br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;rts<br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;<br />left_is_pressed:<br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00010101&nbsp; &nbsp;; mode, period<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%10000000&nbsp; &nbsp;; duration<br />&nbsp; &nbsp;sta $400F<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br /><br /><br />up_is_pressed:<br /><br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00111111&nbsp; &nbsp;; mode, period&nbsp; low rumble<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%0000000&nbsp; &nbsp; ; duration<br />&nbsp; &nbsp;sta $400F<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br />down_is_pressed:<br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00111110&nbsp; &nbsp;; mode, period<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%11111000&nbsp; &nbsp;; duration<br />&nbsp; &nbsp;sta $400F<br /><br />&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /><br /><br /><br />a_is_pressed:<br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00010111&nbsp; &nbsp;; mode, period<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%10000000&nbsp; &nbsp;; duration<br />&nbsp; &nbsp;sta $400F<br />&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br /><br />b_is_pressed: <br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%01011011&nbsp; &nbsp;; mode, period&nbsp; low rumble<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%00000000&nbsp; &nbsp; ; duration<br />&nbsp; &nbsp;sta $400F<br /><br />&nbsp; &nbsp; <br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; <br /><br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br /><br /><br />select_is_pressed:<br /><br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;lda #%10111011&nbsp; &nbsp;; mode, period<br />&nbsp; &nbsp;sta $400E<br /><br />&nbsp; &nbsp;lda #%10101111&nbsp; &nbsp; ; duration<br />&nbsp; &nbsp;sta $400F<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br />start_is_pressed:<br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%11000011&nbsp; &nbsp;; mode, period<br />&nbsp; &nbsp;sta $400E<br /><br /><br />&nbsp; &nbsp;lda #%10101001&nbsp; &nbsp;; duration<br />&nbsp; &nbsp;sta $400F<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br />ab_is_pressed:<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br /><br />&nbsp; &nbsp;;JoyPad #2 subroutines below<br /><br />&nbsp; &nbsp;<br /><br /><br />right_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00100011&nbsp; &nbsp;; enable medium looping with a 1 at bit 5<br />&nbsp; &nbsp;sta $400C<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br /><br /><br /><br /><br />left_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00100111&nbsp; &nbsp;; enable medium/slow looping with a 1 at bit 5<br />&nbsp; &nbsp;sta $400C<br /><br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br />up_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00100001&nbsp; &nbsp;; enable fast looping with a 1 at bit 5<br />&nbsp; &nbsp;sta $400C<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br />down_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;lda #$0F&nbsp; &nbsp;&nbsp; &nbsp; ; Enable channels<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #%00101111&nbsp; &nbsp;; enable slow looping<br />&nbsp; &nbsp;sta $400C<br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br /><br />a_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br /><br />b_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br /><br />start_is_pressed_2:<br /><br /><br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br />select_is_pressed_2:<br /><br /><br />&nbsp; &nbsp;jsr start&nbsp; &nbsp; ; Resets sound to the beginning, clears sound registers:&#40;Stops the volume decay loop&#41;.&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMF54123</b> [ Thu Jul 24, 2008 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I should probably mention that this thread inspired me to make a "buzzer" system for a 4-player trivia/challenge game (currently a hack of SMB2, believe it or not). It basically consists of 4 buttons jammed into plastic tubes, all wired to the guts of an NES controller (one button for each direction). Not an incredibly complex device, but neat nonetheless. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Thu Jul 24, 2008 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That sounds interesting. Hopefully we can expand on this and come up with more stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Jul 24, 2008 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMF54123 wrote:</div><div class="quotecontent">I should probably mention that this thread inspired me to make a "buzzer" system for a 4-player trivia/challenge game (currently a hack of SMB2, believe it or not). It basically consists of 4 buttons jammed into plastic tubes, all wired to the guts of an NES controller (one button for each direction). Not an incredibly complex device, but neat nonetheless. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />
<br />I remember in Japan seeing a famicom trivia game that had a game pad which was a single button for every player. The button were all independant square boxes with one big red button on each. Have you ever seen it?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>