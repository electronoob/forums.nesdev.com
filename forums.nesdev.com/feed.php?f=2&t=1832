<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=1832" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-08-05T12:27:42-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=1832</id>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2006-08-05T12:27:42-07:00</updated>
<published>2006-08-05T12:27:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=16008#p16008</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=16008#p16008"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=16008#p16008"><![CDATA[
Or you can use FCEUXDSP which is easy on the resources, accurate and has a very straight forward cheat console.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sat Aug 05, 2006 12:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[85cocoa]]></name></author>
<updated>2006-08-05T12:18:17-07:00</updated>
<published>2006-08-05T12:18:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=16007#p16007</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=16007#p16007"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=16007#p16007"><![CDATA[
Try to avoid NESten, as it isn't very accurate.<br /><br />I'm trying to recall whether Nestopia has a workable cheat searcher. (This isn't my normal home computer I'm posting from...) EDIT: Well, probably not, but you might be able to try using Nintendulator. Note that it is slower than Nestopia, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=790">85cocoa</a> — Sat Aug 05, 2006 12:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2006-07-28T11:26:44-07:00</updated>
<published>2006-07-28T11:26:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15758#p15758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15758#p15758"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15758#p15758"><![CDATA[
<div class="quotetitle">IceAIM wrote:</div><div class="quotecontent"><br />Also why would stuff like values changed during jumping never be in stack space? Is it because stuff like that stays in the registers?<br /></div><br /><br />It can be in the stack space (it's still normal RAM), but if it's an address like $1E0-$1FF you can be pretty sure it's just a stack value.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Fri Jul 28, 2006 11:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[IceAIM]]></name></author>
<updated>2006-07-28T03:48:50-07:00</updated>
<published>2006-07-28T03:48:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15750#p15750</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15750#p15750"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15750#p15750"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />The stack at $100-$1ff isn't only universal for the Nintendo Entertainement System, but for any system running based on a 6502 CPU.<br /></div><br /><br />Excellent, thank you. This is a great board. I'm going to read up some more docs on the NES and the 6502 to better understand the architecture.<br /><br />Should I use NESten for cheat searching, or stick with my existing emulator?<br /><br />Also why would stuff like values changed during jumping never be in stack space? Is it because stuff like that stays in the registers?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=796">IceAIM</a> — Fri Jul 28, 2006 3:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-07-28T02:33:56-07:00</updated>
<published>2006-07-28T02:33:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15749#p15749</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15749#p15749"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15749#p15749"><![CDATA[
The stack at $100-$1ff isn't only universal for the Nintendo Entertainement System, but for any system running based on a 6502 CPU.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Jul 28, 2006 2:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[IceAIM]]></name></author>
<updated>2006-07-28T02:24:29-07:00</updated>
<published>2006-07-28T02:24:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15748#p15748</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15748#p15748"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15748#p15748"><![CDATA[
Okay guys, I got another question that's related to the following tutorial:<br /><br /><!-- m --><a class="postlink" href="http://desnet.fobby.net/doc/fceud_tutor1.txt">http://desnet.fobby.net/doc/fceud_tutor1.txt</a><!-- m --><br /><br />Pretty much I understand all the asm code in the debugger, but I'm not clear on the following statement:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I loaded NESten (currently has a better cheat<br />search than FCEUd <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" />) and did a simple cheat search. While Samus was on the ground, not moving, the value was always equal to the last. I would then jump, and search for "changed" values while Samus was in the air. And then search for "changed" values when she was back on the ground. I repeated this several times until I ended up with three addresses: $01EE, $01F0, $0312. I know that any address in the range between $0100 - $01FF is stack space, so those get ommited. This left me with just one address - $0312.<br /></div><br /><br />This tutorial didn't clearly explain how the author determined that addresses $0100 - $01FF is stack space. Is this universal for all nintendo games? Also is it recomended I use NESten for cheat searching rather than FCEU?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=796">IceAIM</a> — Fri Jul 28, 2006 2:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2006-07-24T18:05:50-07:00</updated>
<published>2006-07-24T18:05:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15607#p15607</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15607#p15607"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15607#p15607"><![CDATA[
Here are some good docs, by chip's original designers:<br /><a href="http://www.westerndesigncenter.com/wdc/datasheets/Programmanual.pdf" class="postlink">http://www.westerndesigncenter.com/wdc/datasheets/Programmanual.pdf</a><br /><br />NES CPU is the regular 6502 (not 65C02).  You can also ignore anything about decimal mode, it's not on the NES CPU.<br /><br />Putting code back into a ROM might not be trivial.  If the new code is smaller than the old, you can just overwrite it (if it's small, just assemble it by hand in a hex editor, people do that with NSFs all the time).  But if you have to move any of the other code around, all the labels and pointer locations throughout the whole ROM would have to be adjusted.  And that's not easy at  all (especially since you'd have to track down all the pointers, tables, references to them).  Some disassemblers can output something that will reassemble, maybe with a little work.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Jul 24, 2006 6:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-07-24T10:57:27-07:00</updated>
<published>2006-07-24T10:57:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15597#p15597</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15597#p15597"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15597#p15597"><![CDATA[
Well, it is good to comment your code, but... don't exaggerate.<br /><br />As Quitetust stated, by writing to $2006, you setup an internal PPU 16-bit pointer, and by writing to or reading from $2007, you can write to/read from that location, and the internal pointer will automatically increase by one, or by 32 if one bit in the $2000 register is set, wich is usefull to draw columns in Name Table.<br /><br />About tutorials, if you learn 6502 to the end, knowing all instructions and how to write different kind of loops and conditionnal jumps, you're done in theory, but need practice in order to gain experience.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Jul 24, 2006 10:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-07-24T10:52:03-07:00</updated>
<published>2006-07-24T10:52:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15596#p15596</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15596#p15596"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15596#p15596"><![CDATA[
$2006 is not a <strong>memory</strong> location - it is an I/O register within the PPU itself. The same goes for $2007 - that's why writing straight to that address causes the data to land in different locations within PPU memory.<br /><br />Also, that "bne loadpal" shouldn't be commented out (i.e. drop the semicolon at the beginning of the line).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Mon Jul 24, 2006 10:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[IceAIM]]></name></author>
<updated>2006-07-24T10:29:08-07:00</updated>
<published>2006-07-24T10:29:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15595#p15595</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15595#p15595"/>
<title type="html"><![CDATA[Help me figure out some basic 6502 NES asm code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1832&amp;p=15595#p15595"><![CDATA[
Okay here's the code: (I'm learning to program asm for the NES)<br /><br />    code: <br />    lda #$3F   ; these 4 lines tell $2006 that we<br />    sta $2006  ; want the stuff we load $2007 with<br />    lda #$00   ; to start at memory location $3F00<br />    sta $2006  ; . Note that since we can only store a byte at a time we store twice<br />    ; to get the whole address in there.<br /><br />    ldx #$00   ; load X with 0.<br />    loadpal:   ; note that labels are followed by a ':' and aren't tabbed in.<br />    lda ourpal, x   ; load A with pallete value at location ourpal + x.<br />    sta $2007       ; store the next pallete value into $2007 which will put it in<br />    ; the right place for us.<br /><br />    inx    ; you've never seen this instruction before but it stands for INcrement X.<br />    ; it adds 1 to X.<br /><br />    cpx #32   ; ComPare X with 32 which is how many pallete values we need to load.<br />    ;bne loadpal  ; bne stands for Branch on Not Equal, so this will branch to <br />    ; loadpalif X wasn't equal to 32. If X is 32, then the loop will stop and <br />    ; were  done loading the pallete.<br /><br /><br /><br />Pretty much I understand everything, but I don't understand how the value 3F00 stored in memory address 2006 tells the NES that the stuff stored in 2007 needs to start at memory location 3F00. There is no reference to the 2006 memory location after the first four lines of code. Oh and FYI the ourpal label is referenced somewhere else and not needed for this question. It simply loads the pallete file.<br /><br />Are there any good online manuals on 6502 asm and more specifically NES asm programming? The tutorial I'm learning is a 25 day "course" and although it covers a lot, I want to go into more detail.<br /><br />Also are there any good guides in reverse engineering NES roms (nes asm hacking)? I specifically want to learn how you insert your modified asm code back into the NES rom. I understand how you can extract the asm code from the debugger, but injecting the new code into the nes rom is what I'm unsure about.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=796">IceAIM</a> — Mon Jul 24, 2006 10:29 am</p><hr />
]]></content>
</entry>
</feed>