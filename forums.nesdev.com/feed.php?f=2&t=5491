<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5491" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-08-13T06:27:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=5491</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-08-13T06:27:15-07:00</updated>
<published>2009-08-13T06:27:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49790#p49790</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49790#p49790"/>
<title type="html"><![CDATA[Function parameters and local variables]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49790#p49790"><![CDATA[
Yeah using the hardware stack is completely unoptimal, the better way is definitely the one Dish says (altough I don't use it, at the cost of having annoying variable conflicts frequently).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Aug 13, 2009 6:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-08-13T01:13:26-07:00</updated>
<published>2009-08-13T01:13:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49789#p49789</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49789#p49789"/>
<title type="html"><![CDATA[Function parameters and local variables]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49789#p49789"><![CDATA[
Sorry for the double post.  <br /><br />During lunch time, I wrote some code of what I had in mind. The code is not tested so I don't know if the concept work. With the stack is seems like a lot of work.  Maybe with my own made stack it would make things easier.<br /><br />Here's the code snippet:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />zpFramePointer:      .res 1      ; Contain stack pointer to access param<br />zpLocalVarPointer:   .res 1      ; Tentative: contain stack pointer to access local var<br /><br />.segment &quot;CODE&quot;<br /><br />; &gt;--------------------------------------------------------------<br />; Macro spos -&gt; Store Parameters On Stack  <br /><br />; Note: Methods that requires high performance will not use this macro.<br />;       You have to decide when it's appropriate to use it or not.<br />; Note2: Maybe framePointer is enough and could do everyting with it.<br />;        This is just example of code.<br />;   <br />; How to call a function with param:<br />; - Save current value of frame/LocalVar pointer on the stack<br />; - Save state of stack pointer before adding parameter in X<br />; - Add parameters on the stack<br />; - Save on stack previous stack pointer state &#40;X&#41;<br />; - call function<br />; - When returning from call, pop back stack pointer<br />; - restore stack pointer<br />;&lt;----------------------------------------------------------------<br />.macro spos functionName, param1, param2   ; only 2 param for this example<br />   lda zpFramePointer         ; Save stack pointers<br />   pha <br />   lda zpLocalVarPointer<br />   pha<br />   <br />   tsx               ; Get current stack pointer for later use<br />   <br />   lda param2            ; Store param 2<br />   pha<br />   lda param1            ; Store param 1<br />   pha<br />   <br />   txa               ; Now save state of stack pointer before param<br />   pha<br /><br />   jsr functionName         ; Call the function<br />   <br />   pla                ; Restore stack pointer.  Note: If param count is small,<br />   tax               ; maybe to popup param would be faster. Macro should decide the right<br />   txs               ; case based on param count.<br />   <br />   pla               ; Restore stack pointers<br />   sta zpLocalVarPointer<br />   pla<br />   sta zpFramePointer<br />.endmacro<br />   <br />   ; Call my function with macro<br />   spos myFunctionWithParam #$01 #$05<br />   <br />   ;<br />   ; skip some code<br />   ;<br /><br />; Define my constants here<br /><br />; Location of param = address of stack + size of return address &#40;2 bytes&#41; + size of stack pointer + size of previous variable&#40;s&#41;<br />;<br />; Note: Maybe I'm not using symbols properly. Maybe &quot;.define&quot; is what I have<br />;       to use here. This is what I would like to do.<br />addressOfStack       = #$0100<br />sizeOfReturnAdress    = #$02<br />sizeOfFramePointer    = #$01<br />   <br />; Tentative: Create symbols for the function only<br />;<br />.scope myFunctWithParamVar<br />; Location of param on stack<br />   myParam1 = addressOfStack + sizeOfReturnAdress + sizeOfFramePointer<br />   myParam2 = addressOfStack + sizeOfReturnAdress + sizeOfFramePointer + 1   <br /><br />; Now for my local variables<br />   localVar1 = addressOfStack<br />   localVar2 = addressOfStack + 1<br />   localVar3 = addressOfStack + 2<br />.endScope<br />   <br />;<br />; My function<br />;   <br />.proc myFunctionWithParam<br />   tsx               ; Get stack pointer<br />   stx zpFramePointer         ; and save it &#40;macro could do it&#41;<br />   <br />   dex               ; Alocate 3 variables on the stack<br />   dex               ; &#40;macro could do it&#41;<br />   dex            <br />   <br />   stx zpLocalVarPointer         ; save state of stack in the local var pointer<br />   txs               ; and adjust the stack.<br />   <br />   ldx zpFramePointer         ; Get back frame pointer<br />   <br />   lda myFunctWithParamVar::myParam1, x   ; Do something with my parameters<br />   ; Do something with it<br />   lda myFunctWithParamVar::myParam2, x<br />   ; Do something with it<br />   <br />   ldx zpLocalVarPointer         ; Now let's use the local variables<br />   <br />   lda #$05            ; Now let's use my local variables<br />   sta myFunctWithParamVar::localVar1, x<br />   ; do something<br />   lda myFunctWithParamVar::localVar2, x<br />   ; etc<br />   <br />   ; Just call another function<br />   spos myFunctionWithParam #$11 #$22   <br />   <br />   ; Do something here<br />   <br />   ldx zpFramePointer         ; Now we will &quot;free&quot; the local variables<br />   txs               ; by restoring the stack pointer to it's original state<br />   <br />   rts<br />.endproc<br /></div><br /><br />It doesn't keep the formatting of my editor so it's a little bit hard to read.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Thu Aug 13, 2009 1:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-08-12T20:24:21-07:00</updated>
<published>2009-08-12T20:24:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49785#p49785</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49785#p49785"/>
<title type="html"><![CDATA[Function parameters and local variables]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49785#p49785"><![CDATA[
Thanks for you comment Disch.<br /><br />Some of the names are maybe not appropriate. That's what happen when you just brainstorm those things I guess <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I see now many flaws in my example but not the one I expected at first.  Some are caused by error using the 6502 in impossible way (will explain later).  I guess the lesson from this is that instead of brainstorming in a message thread for something complicated as this, I should try it first and ask question later. I wanted to talk about a possible software stack too but I decided to drop it since it would have made the message longer (and maybe I would have talked more non-sense too).<br /><br />My first goal is to see how I can (ab)use the stack a little bit more. I feel like I'm not using much of it and it such a waste to have 256 bytes lying around, only used occasionally.  Maybe one way is to share one part of it like you mentioned.<br /><br />About the constant, I will explain what I wanted to do but it's not possible in 6502.  You store the stack pointer in a variable. You define the location of the variable relative to the current position of the stack pointer.  So param1Pos contains just where it should be after pushing it on the stack, relative to the stack pointer address. So to get the location of param1, you need to do curentStackAdress + locationOfParam1 to get the memory location.<br /><br />I wanted to do is lda  varMyStackPointerAdr + param1Pos (which is the wrong address) but actually is more like lda (varMyStackPointerAdr) + param1Pos. BUT.. that's not possible.  I always make that stupid mistake. What I meant is lda (varMyStackPointerAdr), param1Pos. But param1Pos must be put in y index register so that increase the code a little bit.  And before you mention it, the varMyStackPointerAdr high byte is always $01 and you only update the low byte with the value taken from tsx.<br /><br />Your example on how to access the stack gives me more idea.  I will try to meditate on the subject.<br /><br />As for the local variables on the stack, instead of unpoping them, restoring the stack pointer that I saved at the beginning of the function would do the job I think.  I'm thinking to see how much I can manipulate the value of the stack pointer but I don't know if it's too risky to do so. They must have put those tsx/txs for a reason.<br /><br />I will try to test my ideas, either with the real stack or my own.  Your comment helped me see some new way of achieving it.  Now it's time to test it.  Thanks again for your comment.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Wed Aug 12, 2009 8:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-08-12T08:45:13-07:00</updated>
<published>2009-08-12T08:45:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49772#p49772</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49772#p49772"/>
<title type="html"><![CDATA[Function parameters and local variables]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49772#p49772"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />lpr (<strong>Load</strong> ParameteR) that will <strong>stores</strong> the parameters on the stack.<br /></div><br /><br />That threw me for a loop when I read it.  If what you're doing is storing parameters, calling it Load Parameter doesn't make much sense at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />To access my parameters, I must define some constant to locate the position of the parameter. The only drawback I see is that each constant must be unique. Maybe some fancy trick with scoping could fix that issue.<br /></div><br /><br />If your addresses are constant, it defeats the entire point of using a stack-like structure.  The purpose of having a stack is that your routines parameters are on the top of the stack (the exact address is relative to how large the stack is).  Or maybe I'm misunderstanding what you mean.<br /><br />The TSX instruction, in combination with LDA Abs,X can be used to read parameters off the stack without pulling them:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">myfunction:<br />  tsx<br />  lda $101,X  ; last pushed value &#40;low byte of return address&#41;<br />  lda $102,X  ; high byte of return address<br />  lda $103,X  ; param 1  &#40;assuming parameters are pushed in reverse order&#41;<br />  lda $104,X  ; param 2<br />    ..  etc<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Now that my function parameters are handled I may want to have some local variable too.<br /></div><br /><br />Which complicates this setup.<br /><br /><br />Using the native 6502 stack for this is less than ideal because it leads to a lot of repeated/redundant code.  IE, the code CALLING the function must pop all parameters.  This means that you will have parameter popping code repeated every time the function is called, instead of just putting it in the function body.  You can't [easily] put it in the function body though, because it would mess up your RTS address.<br /><br />I say... screw trying to use the normal stack and just make your own stack.<br /><br />You can share the $01xx page if you really want to, or you could use any other area in memory.  Zero Page would be preferable due to faster access.<br /><br />Here's an example which uses the following ideas:<br /><br />- param/local var stack starts at $00FF and grows down<br />- 'stack' is the param stack variable (ie:  stack=0 for zero page)<br />- X is the stack pointer<br />- MyFunction takes 2 parameters, each 1 byte<br />- MyFunction has a single local variable, 1 byte<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; code which calls the function<br />lda param_1<br />sta stack,X<br />dex<br />lda param_2<br />sta stack,X<br />dex<br />jsr MyFunction<br /><br />; code can resume here normally, no pulling necessary<br /><br />;;----------------------------------<br /><br />MyFunciton:<br />dex  ; single local variable allocated<br /><br />    ; in this function now...<br />lda stack+1,X    ; gets the local variable<br />lda stack+2,X    ; gets the 2nd param<br />lda stack+3,X    ; gets the 1st param<br /><br />    ; clean up for function<br />inx<br />inx  ; or if the number of pops is excessive<br />inx  ;  you can TXA, add, then TAX<br /><br />rts<br /></div><br /><br />If you want to allow for a larger stack (larger than 256 bytes) the math gets a lot heavier, and you need to use indirect addressing instead of indexing, which results in bigger performance hits.  But a 256 byte stack for local variables and function parameters, as well as ANOTHER 256 byte stack for return addresses should be more than enough for most things.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Aug 12, 2009 8:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-08-12T06:53:44-07:00</updated>
<published>2009-08-12T06:53:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49764#p49764</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49764#p49764"/>
<title type="html"><![CDATA[Function parameters and local variables]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5491&amp;p=49764#p49764"><![CDATA[
After <a href="http://nesdev.com/bbs/viewtopic.php?t=5481" class="postlink">this conversation</a> with Miau about function parameters, I started to think a little bit about the subject. I'm sorry but this message will be like a brain storming session but I hope that some interesting ideas will comes up out of it.<br /><br />The biggest problem with temp variable is that you may re-use by accident the same variable.  So what I'm thinking is why not trying to emulate what is done in higher level language like C to avoid those issues? I don't know how much will be the cost on performance but here's the concept, which I have to put in code later based on the message and clean up after.<br /><br />I always under use the stack so why not use it like it should be?  Before calling a function, you would have a macro lpr (Load ParameteR)  that will stores the parameters on the stack.  <br /><br />ex: lpr myFunction(param1, param2) etc.<br /><br />Now param1 and 2 are on the stack. The macro will be in charge of (in that order):<br /><br />- storing the localVariable/frame pointer on the stack (explained later)<br />- putting the variables on the stack<br />- calling the function<br />- clean up once the function is finished (means restoring localVariable/frame pointer and unpop parameters)<br /><br />Once I call the function, I will have my parameters and the return address on the stack. Now that I'm inside the function, I must get a copy of the stack pointer and store it in a variable, the frame pointer. <br /><br />To access my parameters, I must define some constant to locate the position of the parameter.  The only drawback I see is that each constant must be unique. Maybe some fancy trick with scoping could fix that issue.<br /><br />param1 = sizeOfFunctionAddress + sizeOfVariable<br />param2 = sizeOfFunctionAddress + param1 + sizeOfVariable<br /><br />Maybe order is wrong, for now let's say it's right. So if I want to access my parameters, I could define a macro that use my frame pointer variable.  hmm..  the real code in the macro would look something like:<br /><br />ldx framePointerAdr + param1<br /><br />will get me the first parameter.<br /><br />Now that my function parameters are handled I may want to have some local variable too.  So when I enter the function, I must define right away all my local variables on the stack.  A macro could do the job.  The only drawback again is the constant for the variable location must be unique.  Once the variable are defined, I must get the stack pointer again and save it in the LocalVariable pointer variable. With LocalVariable and defined constant I can access all my local variables on the stack.  <br /><br />I don't have to worry about the content of the frame/LocalVariable pointer when I call a function since the macro will take care of saving them on the stack and restoring it at the end.<br /><br />Basically, this is the concept I thought tonight very fast.  I don't know how pratical and fast it is yet but it seems interesting and it may fix the issue Miau have with parameters.   My only concern is the constants for parameters, how to handle them. I must figure out a solution. If scoping can take care of it that could be a solution. Must make a proof of concept to see how it goes.<br /><br />Does what I say make sense? All what I said is theoretical and based on some ideas on how stack work for higher level language. It seems something you could do with some macro in ca65.<br /><br />Any comment on the subject will be appreciated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Wed Aug 12, 2009 6:53 am</p><hr />
]]></content>
</entry>
</feed>