<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7993" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-09-09T04:07:38-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7993</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-09-09T04:07:38-07:00</updated>
<published>2011-09-09T04:07:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83656#p83656</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83656#p83656"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83656#p83656"><![CDATA[
See also <a href="http://nesdev.com/bbs/viewtopic.php?t=7918" class="postlink">previous discussion on sound engine RAM use</a>.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It means the enemy's AI goes into the "sleep" state, the same state the enemy was in before you encountered it.<br /></div><br />That sounds like deactivating the enemy...?  <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> </div><br />There's a difference between deactivating the enemy in place, which is what SBP does, and deactivating the enemy and sending it back to its spawn point, which most NES platformers appear to do.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Sep 09, 2011 4:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2011-09-08T22:25:00-07:00</updated>
<published>2011-09-08T22:25:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83651#p83651</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83651#p83651"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83651#p83651"><![CDATA[
I have a very simple sound engine I'm currently using. It only uses about 112 bytes (though I think I'll have to use about 16 more due to a complication when switching between sound effects). The sound engine doesn't support pitch bending, which is a feature I omitted to save RAM and ROM consumption. So 200 bytes should definitely work.<br /><br />And there are many workarounds for unsupported features. An echo, for example, you can do with a volume envelope (your engine should support volume envelopes for the square waves). Or in a lot of cases, you can get away with using volume fluctuation or trilling between two notes instead of having vibrato done with a pitch bend. Though I'll say it really doesn't sound the same. If you listen to FF1, CV1, or SMB1, you can really tell the pitch bend is missing.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I also don't plan on having 24 active objects all the time, but I want to avoid the disastrous situation that would be to refuse a slot to an important object, such as the level's boss.<br /></div><br />Some games handle this by evicting a relatively unimportant object. Kung Fu even has an animation for when an enemy gets evicted before the boss battle: it walks toward the trailing edge of the screen. So does Super Mario Bros. 3: when Mario grabs the card, enemies turn into coins.</div><br /><br />This is one of the main reasons I separated spontaneous and intelligent objects. A spontaneous object cannot appear and disallow an intelligent object from appearing. I've also included a unique master routine for every level in my game. This routine has the authority to override anything done with the main engine. So I can technically say "when you get to this point in the level, destroy all enemies and make room for the boss" in that routine. Actually, this routine is the one that handles events of any kind.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />It means the enemy's AI goes into the "sleep" state, the same state the enemy was in before you encountered it. This frees up CPU time, and it collapses the enemy to just its index in the map's enemy list, its coarse X position, and its coarse Y position. I don't know exactly how Super Bat Puncher works, but some engine architectures have a limited number of simultaneously active "intelligent" objects, and putting an enemy to sleep might free up such a slot.<br /></div><br /><br />That sounds like deactivating the enemy...?  <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br /><br />With what I do, I just prevent the enemy from acting until it gets out of the freeze zone. Say you have an enemy that paces back and forth. If you move so that it just spawns, walks towards you, and walks away (past its spawn point), it will essentially disappear until you walk back, and then reveal its spawn point again. My solution was to stop the enemy if it's in the freeze zone, which is next to the inactive zone. This does mean that enemies are only deactivated by the player killing them, or moving so that the frozen enemy is pushed into the inactive zone.<br /><br />Probably a better solution is the one where you check if the spawn point is in range, and only deactivate them if the spawn point is not. But for certain reasons like collision detection, I can't have enemies acting outside of the activity zone. My two-screen copy of the screen allows me to really quickly search for the tile being stood on (The formula is (XCoord AND $01F0) + (YCoord / 16) + $0600). Thus, if enemies act outside of a 2 screen zone, they will be colliding with garbage, which could be disasterous.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Thu Sep 08, 2011 10:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-09-08T21:57:38-07:00</updated>
<published>2011-09-08T21:57:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83649#p83649</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83649#p83649"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83649#p83649"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Did you count a sound engine in to the RAM budget yet? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /></div><br />Heh, good question! Indeed, I don't have a sound engine yet, but I reserved around 200 bytes for one. No matter what happens I'll have to make an engine that uses that many bytes or less. I don't think this is unrealistic... do you? =)</div><br />Yeah that should be enough, I think FamiTone uses a bit less than that. My sound engine uses ~300 bytes currently I think, but it also has a lot more features and some room for optimization. Hopefully I can get it under 256 bytes...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Sep 08, 2011 9:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-09-08T21:35:31-07:00</updated>
<published>2011-09-08T21:35:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83647#p83647</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83647#p83647"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83647#p83647"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />Did you count a sound engine in to the RAM budget yet? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /></div><br />Heh, good question! Indeed, I don't have a sound engine yet, but I reserved around 200 bytes for one. No matter what happens I'll have to make an engine that uses that many bytes or less. I don't think this is unrealistic... do you? =)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 08, 2011 9:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-09-08T21:23:39-07:00</updated>
<published>2011-09-08T21:23:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83646#p83646</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83646#p83646"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83646#p83646"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I've dedicated a lot of RAM to other things<br /></div><br />I see... I too have used nearly every byte of the stock 2KB of RAM, I have only a few ZP bytes left.</div><br />Did you count a sound engine in to the RAM budget yet? <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Sep 08, 2011 9:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-09-08T18:09:14-07:00</updated>
<published>2011-09-08T18:09:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83644#p83644</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83644#p83644"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83644#p83644"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Some games handle this by evicting a relatively unimportant object.<br /></div><br />Yes, this is something I want to implement too. I'll probably make their importance relate to their codes, to make it easy for important objects to identify objects that can be evicted.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 08, 2011 6:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-09-08T17:14:38-07:00</updated>
<published>2011-09-08T17:14:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83642#p83642</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83642#p83642"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83642#p83642"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I also don't plan on having 24 active objects all the time, but I want to avoid the disastrous situation that would be to refuse a slot to an important object, such as the level's boss.<br /></div><br />Some games handle this by evicting a relatively unimportant object. Kung Fu even has an animation for when an enemy gets evicted before the boss battle: it walks toward the trailing edge of the screen. So does Super Mario Bros. 3: when Mario grabs the card, enemies turn into coins.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Sep 08, 2011 5:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-09-08T13:45:29-07:00</updated>
<published>2011-09-08T13:45:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83637#p83637</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83637#p83637"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83637#p83637"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Note that to save memory, you might not allow TOO much objects to be loaded at a time on the screen (I personally choose 8 slots)<br /></div><br />With multi-directional scrolling you have to be a bit more generous... Objects can appear from all sides, and preferably a while before they scroll in, so you need at least twice what you'd need in a static-screen game.<br /><br />I'm trying to mimic the way Sonic games work, and if I'm not mistaken they have 96 object slots. Obviously it's not common to have that many active objects, but if you use debug mode to manually place that many objects the game becomes insanely slow.<br /><br />I also don't plan on having 24 active objects all the time, but I want to avoid the disastrous situation that would be to refuse a slot to an important object, such as the level's boss.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />and also you should recycle variables if their utility is mutually exclusive.<br /></div><br />Oh, I do that a lot.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You say you have 24 slots, I think it's way too much. Even if you load all 24 slots with something chances are that your engine will lag terribly.<br /></div><br />Sure it will lag, but I really don't plan on having that many objects very often, I just want to be prepared for slightly busier areas. In a free scrolling games enemies can walk to areas they wouldn't ordinarily go to, depending on how the game is played, so even if you design the areas to not have too many objects grouped together they might still move around and gather into larger groups. I just want to be prepared.<br /><br />Also, since some objects might use more than 1 slot, it's a good idea to have some room to breath.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />For example, in a projectile you don't need any variable to remember it's hit points, so you can use this variable to store the speed of the projectile instead (this is just an example).<br /></div><br />Oh yeah, I do that too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 08, 2011 1:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-09-08T13:34:45-07:00</updated>
<published>2011-09-08T13:34:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83635#p83635</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83635#p83635"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83635#p83635"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />For example, in a projectile you don't need any variable to remember it's hit points<br /></div><br />Unless different projectiles using the same sprite have different damage amounts, or unless a projectile is programmed to disappear after a certain distance. Where there's memory, game designs will expand to fill it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Sep 08, 2011 1:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2011-09-08T13:20:45-07:00</updated>
<published>2011-09-08T13:20:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83633#p83633</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83633#p83633"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83633#p83633"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I see... I too have used nearly every byte of the stock 2KB of RAM, I have only a few ZP bytes left.<br /></div><br />Well it's fun because I only use half of both main RAM and zero page currently in my game engine.<br /><br />Note that to save memory, you might not allow TOO much objects to be loaded at a time on the screen (I personally choose 8 slots), and also you should recycle variables if their utility is mutually exclusive. You say you have 24 slots, I think it's way too much. Even if you load all 24 slots with something chances are that your engine will lag terribly.<br /><br />For example, in a projectile you don't need any variable to remember it's hit points, so you can use this variable to store the speed of the projectile instead (this is just an example).<br /><br />That way I was able to fit all my object-related variables in arround 200 bytes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Sep 08, 2011 1:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-09-08T11:56:27-07:00</updated>
<published>2011-09-08T11:56:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83626#p83626</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83626#p83626"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83626#p83626"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />I've dedicated a lot of RAM to other things<br /></div><br />I see... I too have used nearly every byte of the stock 2KB of RAM, I have only a few ZP bytes left.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Just curious, how many bytes do you allocate to an object? At first I feel like 22 bytes is a lot for a simple game like mine, but then things like object IDs, coordinates with precision, status bits, velocity, etc. all start adding up.<br /></div><br />I have 28 bytes per object, with 24 of them the total is 672 bytes for the active objects. That amount seems OK for most objects, but I imagine that some really complex objects might need more than 1 slot. In that case the additional slots don't have any A.I., they are only used as extra memory for the master object.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Sep 08, 2011 11:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-09-08T06:08:54-07:00</updated>
<published>2011-09-08T06:08:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83621#p83621</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83621#p83621"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83621#p83621"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Actually, another thing I implemented was a "freeze" zone. An object is able to move around most of the activity zone, but towards the outer edges, objects will stop moving.<br /></div><br />Sort of like how Super Bat Puncher remembers the position of every enemy on the screen, but as soon as they leave the screen, they freeze and their AI resets.</div><br />I'm not sure I understand. What happens when the AI is "reset"?</div><br />It means the enemy's AI goes into the "sleep" state, the same state the enemy was in before you encountered it. This frees up CPU time, and it collapses the enemy to just its index in the map's enemy list, its coarse X position, and its coarse Y position. I don't know exactly how Super Bat Puncher works, but some engine architectures have a limited number of simultaneously active "intelligent" objects, and putting an enemy to sleep might free up such a slot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Sep 08, 2011 6:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2011-09-07T23:26:56-07:00</updated>
<published>2011-09-07T23:26:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83618#p83618</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83618#p83618"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83618#p83618"><![CDATA[
I see how it would work, and I guess it makes a difference also if your enemies don't throw a lot of projectile weapons. In my game, things shoot fireballs, rocks, drool lava out of their mouths, etc. So there are a lot of things flying around.<br /><br />And with my set up, I've dedicated a lot of RAM to other things (animation slots, a sprite drawing stack, the OAM page, a music engine, a two-page copy of the screen for fast collision detection, etc.). Needless to say, I have very little left to work with after coding all that, so I would be in trouble if I decided to make everything universal.<br /><br />Just curious, how many bytes do you allocate to an object? At first I feel like 22 bytes is a lot for a simple game like mine, but then things like object IDs, coordinates with precision, status bits, velocity, etc. all start adding up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Sep 07, 2011 11:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-09-07T21:42:26-07:00</updated>
<published>2011-09-07T21:42:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83611#p83611</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83611#p83611"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83611#p83611"><![CDATA[
I treat all my objects the same. They have a "setup" routine, where they install themselves to one of the free object slots in RAM, using parameters (X and Y position, etc) from the stack. These objects can either come from the list of objects in ROM (similar to your intelligent objects) or be created by another object (spontaneous), from the point of view of the object it doesn't matter, since they just grab the parameters from the stack.<br /><br />The main difference is that spontaneous objects have invalid pointers to the table of states in RAM, so they don't write anything back when they die. Simple objects will indeed underuse the RAM that's allocated to them, but I don't mind having this in exchange of generalization. I have 24 active object slots, things must be pretty busy for all of them to be used... I don't expect that to happen very often.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Sep 07, 2011 9:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2011-09-07T21:09:10-07:00</updated>
<published>2011-09-07T21:09:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83609#p83609</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83609#p83609"/>
<title type="html"><![CDATA[Object spawning logic in commercial games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7993&amp;p=83609#p83609"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />I'd just use a object map ID number to relate an object (in your active object table) to a numbered enemy (in your object map).  An object ID of 255 would indicate a temporary object, such as a bullet.<br />No need for a separate table, or special memory format.  You could even make temporary enemies that disappear when they move too far away.<br /></div><br /><br />If I'm understanding correctly, you are saying to treat spontaneous objects kind of the same way as intelligent objects (so just one format), but assign spontaneous objects a reserved ID that indicates they are spontaneous. Is that correct (somewhat)?<br /><br />With the system I use, my main concern would be RAM usage. I don't know if people do it really differently, but I have implemented a system of slots for these intelligent and spontaneous objects. Each intelligent object is given 22 bytes of RAM, and each spontaneous object is only given about 7.<br /><br />If I were to treat intelligent objects and spontaneous ones the same way, I would be wasting a lot of RAM for things like bullets (all I need is an X coord, Y coord, and maybe 1-2 bytes of RAM to work with for special movement. Oh, and an ID). The other concern is that since objects would all be using the same slots, spontaneous objects could accumulate in the active zone and prevent intelligent objects from spawning. This is very bad. If anything should be prevented from spawning, it should be a spontaneous object, not an intelligent one.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Sep 07, 2011 9:09 pm</p><hr />
]]></content>
</entry>
</feed>