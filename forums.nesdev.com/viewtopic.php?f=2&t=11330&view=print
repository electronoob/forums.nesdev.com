<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How does the PPU exactly draw the graphics?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How does the PPU exactly draw the graphics?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11330">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11330</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlienX</b> [ Mon Jun 09, 2014 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How does the PPU exactly draw the graphics?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The PPU: a neat little chip that displays all those colorful graphics on the screen. I have a few questions regarding it.<br />First of all, does the PPU have it's own crystal oscillator? I suppose it does to process all the data, but what is it's clock rate? Is it 1.79Mhz like the CPU?<br />Another question I have is about the pixels themselves. Is every pixel addressable in the PPU? Are there special addresses, containing the color data for every pixel? I've been working on a project regarding 8-bit computers and when I got to the PPU, I couldn't figure out if this was the case. The PPU shares RAM with the CPU. Obviously, the PPU portion contains data for the current nametable and how the tiles are placed on screen. But how does the PPU process the pixels themselves? If there are, say, 192 bytes, dedicated to each tile, it'll be easy to place them in the proper addresses. But sprites are a completely different story. They are not bound to the 8x8 grid, they can go wherever they want. So how does the PPU exactly move them? If there are 3 bytes for every pixel in the PPU RAM, this means the PPU would have to move them all pixel by pixel and that would really slow down the process, especially with only 1.79Mhz. I hope someone can give me a proper answer, because I really can't figure this out.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jun 09, 2014 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does the PPU exactly draw the graphics?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First of all, does the PPU have it's own crystal oscillator? I suppose it does to process all the data, but what is it's clock rate? Is it 1.79Mhz like the CPU?</div><br />No and no.<br />There's only 1 crystal oscillator, and it's frequency is divided to create clocks for the CPU and PPU. The exact ratio are details you could look up easily in the wiki, but basically the PPU is clocked 3 times or 3.2 times faster than the CPU for NTSC and PAL respectively.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Another question I have is about the pixels themselves. Is every pixel addressable in the PPU?</div><br />No, the NES uses tile maps (&quot;name tables&quot;) and character patterns (&quot;pattern tables&quot;) to draw it's graphics.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PPU shares RAM with the CPU</div><br />No, it does not.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> But sprites are a completely different story. They are not bound to the 8x8 grid, they can go wherever they want. So how does the PPU exactly move them? [...] his means the PPU would have to move them all pixel by pixel and that would really slow down the process</div><br />No, the PPU doesn't &quot;move them&quot; at all. It just displays them where specified. When outputing pixels, there is a counter counting how many pixels are being rendered, and if it's in the sprite's range, then it has to be drawn.<br /><br />The exact details are in <a href="http://nesdev.com/2C02%20technical%20reference.TXT" class="postlink">this</a> excellent doccument, it contains all the details you want to know and even more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 09, 2014 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does the PPU exactly draw the graphics?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AlienX wrote:</div><div class="quotecontent">Is every pixel addressable in the PPU?</div><br />In most cases, no. The NES background is organized into tiles. For example, both R's in &quot;MARIO ... WORLD TIME&quot; are the same tile used in different places. Some games (Qix, Hatris, Elite, 3D Block, Faxanadu, Super Bat Puncher, Action 53 menu, RHDE, and several games with Chinese text) organize the tiles into a somewhat bitmap-like arrangement, but this is usually limited to small areas of the screen. A handful of games (Videomation, Oeka Kids) have extra-large CHR RAM to assign a different pattern for each tile.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are there special addresses, containing the color data for every pixel?</div><br />There's one set of PPU addresses containing the color data for each tile (the pattern table, $0000-$1FFF) and a second set of special addresses containing how the tiles are arranged on the screen (the nametable, $2000-$2FFF).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I've been working on a project regarding 8-bit computers</div><br />NES video is very much like ColecoVision or MSX video.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PPU shares RAM with the CPU.</div><br />True of ZX Spectrum, C64, and Apple II. Not true of MSX or NES, which have a separate block of memory dedicated to the PPU's use. This difference in architecture <a href="http://en.wikipedia.org/wiki/MSX_Video_access_method" class="postlink">tripped up developers of quick-and-dirty ports from the Spectrum to the MSX</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If there are, say, 192 bytes, dedicated to each tile, it'll be easy to place them in the proper addresses.</div><br />There are 16 bytes for each 8x8 pixel tile, 2 bits per pixel. There are also 1 byte in the nametable to tell which tile to use for each 8x8 pixel area of the screen, and 2 bits in the nametable to tell which color set to assign to each 16x16 pixel (2x2 tile) area. Finally, there is a separate area of memory inside the PPU called the &quot;palette&quot; ($3F00-$3F1F) that maps combinations of pixels and color sets to actual color signals in the NTSC picture.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But sprites are a completely different story. They are not bound to the 8x8 grid, they can go wherever they want. So how does the PPU exactly move them?</div><br />On each scanline, the PPU subtracts the current scanline number from all 64 sprites' Y coordinates. Then it keeps up to 8 sprites where the result is less than the height of one sprite. Finally, it loads the patterns for the kept sprites and uses the X coordinate to count down how many pixels to draw before drawing the sprite.<br /><br />See <a href="http://wiki.nesdev.com/w/index.php/PPU" class="postlink">PPU on NESdev Wiki</a> for more info.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Jun 10, 2014 10:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does the PPU exactly draw the graphics?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No frame buffer.  Just 2 tile buffers with tile patterns being swapped in and out on the fly, and 8 sprite buffers being fetched during h-blank and rendered over each other with pipelining.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Tue Jun 10, 2014 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How does the PPU exactly draw the graphics?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Rather than it being a framebuffer, it's actually two &quot;layers&quot; of graphics that the PPU draws at the same time. The first layer is the tilemap, and the second layer is the sprite data. There are only 8 hardware sprites, and the sprites are 8x1. During each scanline, the PPU is scanning the sprite table to look for the first 8 sprites that appear on the next scanline (the first 8 in the table, not the first 8 on the scanline itself). Then on the next scanline, it draws those 8 sprites as it's drawing the background, while also simultaneously scanning the sprite table for the next scanline.<br /><br />When there's both a pixel of background and a pixel of sprite data, the PPU selects which one to draw based on the priority bit of said sprite. The priority bit is just whether the sprite is &quot;behind the background&quot; or not.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>