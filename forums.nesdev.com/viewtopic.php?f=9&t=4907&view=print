<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - PowerPak unorthodox expansions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">PowerPak unorthodox expansions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4907">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4907</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Sun Mar 01, 2009 11:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>PowerPak unorthodox expansions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A few of the guys and I -- Kev, ReaperSMS, Lord_Nightmare, etc... -- were talking about the possibility of adding reasonable, non-native chip emulations to the PowerPak for extended development.  For example:  Adding an Atari TIA or POKEY chip for additional expanded audio.
<br />
<br />What say you?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Mar 01, 2009 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Go for it? 99% sure they'll fit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMF54123</b> [ Sun Mar 01, 2009 2:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've always believed that if you have the hardware, you might as well use it to its full potential. Some people get up in arms whenever NES emulator expansions/enhancements are mentioned, but as this <em>is</em> an actual NES cart that runs on actual NES hardware, what's the problem? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Mar 01, 2009 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMF54123 wrote:</div><div class="quotecontent">Some people get up in arms whenever NES emulator expansions/enhancements are mentioned, but as this <em>is</em> an actual NES cart that runs on actual NES hardware, what's the problem? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />At some point between an MMC5 cart and a TV tuner, it ceases to be an "NES game" and becomes a "game for &lt;system&gt; displayed through an NES".
<br />
<br /><strong>Case in point: Wide Boy.</strong> Say I were to make an NES cartridge that uses an 8080-family CPU clocked at 4.2 MHz and a separate PPU to run games, feeding the cart PPU's output to the NES PPU as background tiles. But does Super Game Boy make Game Boy games into Super NES games?
<br />
<br /><strong>Case in point: TV tuner.</strong> Say I were to make a TV tuner cartridge for the NES that decodes NTSC composite video into a CHR bitstream, setting the attributes based on the average hue over an 8-pixel sliver. Then imagine playing Wii Sports through this cartridge. Am I still playing an NES game? Do the TV tuner accessories for GBA make PS2 games into GBA games?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Sun Mar 01, 2009 4:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not to necessarily shoot any of you down in having an ethics debate, because I'm pretty sure my statement and question were open and seemingly biased to this type of response.  However, I'm more looking toward brainstorming the whole concept of completely breaking any and all ethics barriers into squeezing as much potential power and originality out of the PowerPak possible.
<br />
<br />So far, I think audio is the most practical possibility.  Since the invention of the PowerPak, we're pretty much opening the possibilities of non-commercial development, demoscening, and chip music to the limits of the FPGA size.  That's really not something to limit.
<br />
<br />So, let us dream and brainstorm.  If any of you, regardless of experience -- with experience preferred -- could whip up your dream, filled FPGA for the 2a0x with a snap of your fingers, what would it have and for what purpose?  (Let's try to keep it practical and keep hardware modifications to a reasonable minimum.) <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Mar 01, 2009 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If we could create a new mapper with all the convenience of the most powerful ones and then be able to reproduce this mapper with real hardware later.. This would give us a platform for homebrew that doesn't requires to butcher existing cart.
<br />
<br />You use the powerpak for the development phase and once this is over, you build a batch of carts with this mapper/board.  Adding this new mapper to existing emulator shouldn't be an issue.
<br />
<br />This is the kind of development I would like to see since it stays in the domain of nes development.  This is what interest me the most in the future of the powerpak.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bunnyboy</b> [ Sun Mar 01, 2009 9:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The FPGA has a few KB of dual ported RAM, theres gotta be something good that can be used for.  Some kind of sample uploading for audio playback or instruments?  It could be processed in the background so the NES isn't bogged down once the upload is done.  Ignore this if you are looking for emulation of existing chips, instead of creating new options  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anders_A</b> [ Mon Mar 02, 2009 6:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd like to see a second background layer with independent scrolling.
<br />
<br />I imagine the fpga would have to count reads from chr-rom to know which pixel is being rendered, and serve pixels from the second layer instead of the real pixel if the normal background layer is transparent or something along those lines.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 02, 2009 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Anders_A wrote:</div><div class="quotecontent">I'd like to see a second background layer with independent scrolling.</div>
<br />Me too, but color attributes will really get in the way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Mon Mar 02, 2009 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Me too, but color attributes will really get in the way.</div>
<br />If the extra layer is behind the foreground, you could still use attributes that only change vertically.  If it's in front of the background, attributes could be normal but horizontal scrolling of the layer would have to increase ahead of the foreground by 8 pixel amounts.  For both cases, transparency between layers would have to be per 8 horizontal pixels (or per 8x8 tile, practically), not per individual pixel.  I made a <a href="http://strfr.freehostia.com/nes.shtml#choppy" class="postlink">demo</a> that demonstrates what it would look like with the latter case of layered scrolling.
<br />
<br />Unfortunately, I doubt that merely the FPGA is enough to allow for this.  It has no access to CHR-RAM bits 3-19, so it may be impossible without rewiring the PowerPak.
<br />
<br />Another possible expansion I had thought of was PRG code optimization.  This would make use of extra RAM within the PowerPak, as an extra stack.  The mapper would need to know the 6502 instruction set and read off whatever the PRG chips send to the bus.  So if it finds satisfied branches, subroutine calls, and returns, the mapper would generate JMPs instead.  It could also read redundant/useless illegal instructions to generate code, effectively creating new instructions out of useless ones, such as indirect JSRs, branch always, etc.  This may be hard to understand, so I'll elaborate on this some time later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Mar 02, 2009 10:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another scrolling background is doable with the block RAM.
<br />
<br />Other ideas:
<br />-very small RISC core (40/80 MHz using DLL)
<br />-dual port CHR RAM (only 3K of block RAM available)
<br />-virtual framebuffer -&gt; CHR RAM mapper
<br />-background sprites
<br />-high frequency sequential math unit
<br />-working MMC5 <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Tue Mar 03, 2009 7:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Another scrolling background is doable with the block RAM.</div><br />Ah, yeah, I forgot about that.  I would assume that the block RAM would be for CHR-RAM in this case, correct?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-background sprites</div><br />Like the tile-based "sprites" in most MSX games?  That would be interesting, since on an NES, these "sprites" could do smooth vertical scrolling while the BG objects in many MSX games usually do not.  But horizontally scrolling would still need to be choppy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-virtual framebuffer -&gt; CHR RAM mapper</div>
<br />I assume this is about the block RAM... or are you talking about the regular CHR-RAM?  The lack of pin access for the FPGA makes this a bit tricky.  Perhaps the mapper could generate code of an unrolled loop to the CPU.  It could save the PC, feed LDA $whatever, STA $2007 for a number of times, then feed a JMP back to the saved PC.
<br />
<br />This brings back the CPU optimization idea I had.  Note that all of this CPU optimization can only be done while PRG is executed, not the NES stock RAM.  Here's an example of the mapper making an indirect JSR out of an illegal instruction, and optimizing an RTS into a JMP:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; KIL ;$02<br />&nbsp; db &lt;lookup, &gt;lookup<br /><br />;When the mapper fetches $02 as an opcode from the PRG-RAM data bus, it'll save the PC to block RAM, disable PRG-RAM for that byte, and feed the CPU bus with $6C, turning it into:<br /><br />&nbsp; JMP &#40;lookup&#41; ;lookup points to &quot;routine&quot;<br /><br />routine:<br />&nbsp; ...<br />&nbsp; RTS<br /><br />;When the mapper fetches $60 as an opcode from the data bus, it'll restore the PC from block RAM, disable PRG-RAM, and feed instead:<br /><br />&nbsp; JMP saved_PC<br /></div><br /><br />Hopefully, that's clarified better.  The generation of unrolled loops by the mapper could also be an interesting expansion as well.  They must be planned so that the PC will not overflow to zero page.  Here's an example with writes from CPU $0300-$04FF to PPU $2000-$21FF via $2007:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA #$20<br />&nbsp; STA $2006<br />&nbsp; LDA #$00<br />&nbsp; STA $2006<br />&nbsp; LDA #$01 ;high byte of block size<br />&nbsp; STA highblock ;mapper register<br />&nbsp; LDA #$FF ;low byte of block size<br />&nbsp; STA lowblock ;mapper register<br />&nbsp; LDA #$03 ;high byte of address to read<br />&nbsp; STA highaddr ;mapper register<br />&nbsp; LDA #$00 ;low byte of address<br />&nbsp; STA low addr<br />&nbsp; STA write_to_2007 ;next instruction is at &quot;saved_PC&quot;<br /><br />;at this point, the mapper would save the PC and feed the following:<br /><br />&nbsp; LDA $0300<br />&nbsp; STA $2007<br />&nbsp; LDA $0301<br />&nbsp; STA $2007<br /><br />;...<br />&nbsp; <br />&nbsp; LDA $04FF<br />&nbsp; STA $2007<br />&nbsp; JMP saved_PC ;the mapper feeds in the address for the absolute jump<br /><br />saved_PC: ;continuing off from &quot;STA write_to_2007&quot;<br />&nbsp; ...<br /></div>
<br />
<br />If the same mapper also supported sound feed to $4011 (such as Memblers's Squeedo mapper), this unrolled loop generation (for writes to $2004) could also be used as an interrupt-able substitute for sprite DMA.  That way, interrupts for writing to $4011 can go smoothly without interference by sprite DMA.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Mar 03, 2009 8:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strangenesfreak wrote:</div><div class="quotecontent"><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Another scrolling background is doable with the block RAM.</div><br />Ah, yeah, I forgot about that.  I would assume that the block RAM would be for CHR-RAM in this case, correct?</div><br />It would serve as replacement VRAM, but since there's 3K and not 4K of BRAM, the new background must use another NT/AT system to fit more than a single screen into 1K. It would also be possible to ignore the PPU's BG and just have two new 1.5 screen layers. (With a bus arbiter the VRAM can be mapped to CPU space too).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I assume this is about the block RAM...</div><br />Right, a portion of CHR RAM implemented in block RAM or registers, with a pixel interface.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Like the tile-based "sprites" in most MSX games?  That would be interesting, since on an NES, these "sprites" could do smooth vertical scrolling while the BG objects in many MSX games usually do not.</div>
<br />I'm not sure I understand, what I had in mind was using block RAM for a sprite system that would overlay the background. Since the overlay would require the VRAM also be in block RAM, the number of sprites would be limited.. also the sprites would have to use the same palette as the BG tile... I can't really think of anywhere this'd be a good idea :D
<br />
<br />Oh yeah, an X/Y coordinate interrupt system is doable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CartCollector</b> [ Tue Mar 03, 2009 8:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> For example: Adding an Atari TIA or POKEY chip for additional expanded audio.</div>
<br />
<br />SID would be way better. SID + 2A03 = awesome

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Tue Mar 03, 2009 10:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">SID would be way better. SID + 2A03 = awesome</div><br />The SID is indeed a talented chip.  Amazing how they were able to make something like that for just a 1982 computer!<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">I'm not sure I understand, what I had in mind was using block RAM for a sprite system that would overlay the background. Since the overlay would require the VRAM also be in block RAM, the number of sprites would be limited.. also the sprites would have to use the same palette as the BG tile... I can't really think of anywhere this'd be a good idea <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div><br /><br />Many MSX games and some NES games (Gauntlet comes to mind) draw some/most their enemy objects to the BG, which move tile by tile.  A number of NES games (CV, CVIII, etc.) also draw moving spike pillars to the BG, tile by tile.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh yeah, an X/Y coordinate interrupt system is doable.</div>
<br />What do you mean?  For multi-layered scrolling?
<br />
<br />Another solution I thought of to background layered scrolling was to make use of the 512KB CHR-RAM and simply have either the game or the mapper calculate the patterns of the layers at 8 different pixel offsets and write to CHR-RAM.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>