<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=4650" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-01-12T02:35:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=4650</id>
<entry>
<author><name><![CDATA[Banshaku]]></name></author>
<updated>2009-01-12T02:35:49-07:00</updated>
<published>2009-01-12T02:35:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41758#p41758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41758#p41758"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41758#p41758"><![CDATA[
I didn't follow the thread completely but the proper syntax for nesasm is:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda #LOW&#40;ourMap2&#41;<br />   sta ptr<br />   lda #HIGH&#40;ourMap2&#41;<br />   sta ptr + 1<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3559">Banshaku</a> — Mon Jan 12, 2009 2:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-11T20:32:32-07:00</updated>
<published>2009-01-11T20:32:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41748#p41748</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41748#p41748"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41748#p41748"><![CDATA[
Again, I understand the explanation but I am in fact using NESASM and can't seem to get this to work. Does anyone know how to handle this in NESASM? Thanks for all the help<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Sun Jan 11, 2009 8:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-01-11T15:20:07-07:00</updated>
<published>2009-01-11T15:20:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41731#p41731</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41731#p41731"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41731#p41731"><![CDATA[
Your data should be immediately accessable via the ourMap2 label.  What you need to do is copy the address this label represents (aka create a "pointer" to the label) and put that pointer somewhere in zero page memory.  From there you can use indirect addressing on that pointer.<br /><br />I don't know the NESASM syntax for it (assuming that's what you're using -- I haven't really been paying attention), but here's how you'd do that in ca65:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; assuming 'ptr' is a 2-byte variable in zero page<br /><br />lda #&lt;ourMap2   ; put low byte of ourMap2 address in A<br />sta ptr         ;  write as low byte of our pointer<br /><br />lda #&gt;ourMap2   ; get high byte<br />sta ptr+1       ;  write as high byte of pointer<br /><br />ldy #0          ; zero Y for indexing<br />lda &#40;ptr&#41;,Y     ; do an indirect read from the address our pointer points to<br />                ;  plus Y.  Since ptr points to 'ourMap2', and since Y=0, this<br />                ;  will read from ourMap2+0<br /><br />                ; you can increase Y to go to the next byte, then increase ptr+1 once<br />                ;  Y wraps to point to the next 256-byte block<br /></div><br /><br />iirc, nesasm code for this is probably something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #LO&#40;ourMap2&#41;<br />sta &lt;ptr<br /><br />lda #HI&#40;ourMap2&#41;<br />sta &lt;ptr+1<br /><br />ldy #0<br />lda &#91;ptr&#93;,Y<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jan 11, 2009 3:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-11T14:49:51-07:00</updated>
<published>2009-01-11T14:49:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41730#p41730</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41730#p41730"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41730#p41730"><![CDATA[
wow, thanks for the great explanations. i'm still a bit hung up on indirect addressing. I understand how the actual addressing works I think, but how do I store my background data in a specific location to access by indirect addressing? For example, I have this included in my code at the moment, how do I store it in a specific location?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ourMap2:.db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 <br />      .db  0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2<br />      .db  0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18<br />      .db  1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0<br />      .db 17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0,17,18, 0, 0 </div><br /><br />Is this table ready to be stored somewhere/accesses? Or do I need to save this info in some other way? Again, I'm a beginner, so sorry if this is pretty simple.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Sun Jan 11, 2009 2:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2009-01-11T14:28:25-07:00</updated>
<published>2009-01-11T14:28:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41729#p41729</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41729#p41729"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41729#p41729"><![CDATA[
Seperating the infinite loop from the NMI is unimportant in simple programs, but to handle slowdown effectively, it can be useful to keep them each doing seperate jobs.  The approach I'd use would be something like this:<br /><br />In Infinite loop:<br />---------------------<br />1) Update joypad data<br />2) Do game logic (collision detection, AI, etc)<br />3) Draw sprites and stuff to shadow OAM<br />4) Prepare an organized list of PPU writes in a buffer so that you can quickly dump stuff to $2007 next vblank.<br />5) Set a "can draw" flag<br />6) Set a "waiting for VBl" flag<br />7) Wait for "waiting for VBl" flag to clear<br />8) Repeat from step 1<br /><br /><br />In NMI:<br />---------------------<br />1)  Set up CPU cycle based IRQ if needed for raster effects (if mapper 069 or something -- probably not applicable most of the time).<br />2)  Do Sprite DMA (only if "can draw" flag is set)<br />3)  Scan the prepared drawing buffer and do all desired $2007 writes (step 4 in infinite loop) -- (only if "can draw" flag is set)<br />4)  Clear the "can draw" flag to indicate drawing is done<br />5)  Set scroll<br />6)  Set up PPU based IRQ if needed for raster effects (if mapper 004 or something)<br />7)  Just to music routine to keep music/sound effects playing<br />8)  Clear "waiting for vbl" flag<br />9)  RTI<br /><br /><br /><br />This setup keeps the logic and drawing code seperated so that if NMI interrupts your game logic, you can still do necessary raster effects like splitting the screen, as well as keep music playing without disrupting game logic.<br /><br />Also the "can draw" flag prevents your NMI handler from drawing half-completed stuff if the NMI happens in the middle of your preparation.<br /><br />So this setup gracefully handles slowdown and stuff without causing weird graphical glitches.<br /><br /><br />EDIT:<br /><br />it dawns on me that you can use the "waiting for vblank" flag as the "can draw" flag -- so you only need one flag.  *shrug*<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun Jan 11, 2009 2:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2009-01-11T14:27:37-07:00</updated>
<published>2009-01-11T14:27:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41728#p41728</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41728#p41728"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41728#p41728"><![CDATA[
I don't put an infinite loop. The closer I have a game loop, but it's not intinite because it breaks on game over or level beaten condiitons.<br /><br />SMB have an infinite loop tough.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jan 11, 2009 2:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-11T14:00:20-07:00</updated>
<published>2009-01-11T14:00:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41727#p41727</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41727#p41727"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41727#p41727"><![CDATA[
so what does one generally put in the infinite loop? anything?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Sun Jan 11, 2009 2:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-01-11T12:53:03-07:00</updated>
<published>2009-01-11T12:53:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41724#p41724</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41724#p41724"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41724#p41724"><![CDATA[
You can keep the controller reading code in the NMI handler, as long as you do it <em>after</em> you turn rendering back on at PPUMASK. In fact, Super Mario Bros. does virtually everything in its NMI handler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jan 11, 2009 12:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-11T09:41:30-07:00</updated>
<published>2009-01-11T09:41:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41719#p41719</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41719#p41719"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41719#p41719"><![CDATA[
Thanks again Celius. This has been really helpful. But this all leads me to a question. Isn't it better to perform as few operations during an interrupt as possible? I understand that what I am doing at the moment is taking less than 2200 cycles and therefore will complete without flickering during a VBlank, but wouldn't it generally be better to keep as much out of the VBlank routine as possible? In your last response you suggested that I could not redraw a whole background image within 2200 cycles, and therefore would need to turn the screen off and on around that code. If I do this, should I take all that controller stuff out of the VBlank routine and put it back in my Infinite loop?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Sun Jan 11, 2009 9:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-09T16:06:00-07:00</updated>
<published>2009-01-09T16:06:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41649#p41649</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41649#p41649"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41649#p41649"><![CDATA[
If you have a 1k (1024 bytes) name table arrangement in a file (Like your files, just for the whole name table), in order to load it you have to use indirect addressing. So you'd put the address of the start of the background data file into say $50 and $51, where $50 contains the low byte and $51 contains the high byte of the address. Then you start with Y = 0, and you do "lda ($50),y  sta $2007" and "iny" in a loop until y wraps back to 0, at which point you add 1 to $51. And you'll loop 3 more times after that. You basically copy 4 256 byte sections to the name table. But if you do this, you're going to want to shut off the screen entirely for a frame or so, because this is probably not going to fit into 2200 cycles (in fact, that's impossible for that to happen).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Jan 09, 2009 4:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-09T11:29:28-07:00</updated>
<published>2009-01-09T11:29:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41638#p41638</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41638#p41638"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41638#p41638"><![CDATA[
Ok cool, that does prevent the flickering. So I guess I actually don't really need a sprite on screen for the rom I'm trying to make (sort of a live visual type deal), but I am wondering, how do I draw an entire screen full of background tiles instead of just a few rows. I'm already working with 128 bits (?) of background information for only a few lines and isn't there a limit when I'm doing this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda #$20<br />   sta $2006                ; $2020-$23C0 = name table 0 &#40;32x25 tiles&#41;<br />   sta $2006 <br /><br />   ldx #$00<br />loadNames:                  ; load background name table &#40;bkg12.map&#41;<br />   lda ourMap, x<br />   inx<br />   sta $2007               ; $2007 = PPU memory data<br />   cpx #4*32<br />   bne loadNames</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Fri Jan 09, 2009 11:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-09T10:07:36-07:00</updated>
<published>2009-01-09T10:07:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41632#p41632</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41632#p41632"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41632#p41632"><![CDATA[
Oh, try just remove "lda #3 sta $4014" really quick and see if the flickering continues then. If it doesn't, that means that sprite DMA, which I'm pretty sure takes 513 cycles to execute, and then the extra ~1950 to execute the other update code would combine to equal an amount that would cause a spill out of Vblank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Jan 09, 2009 10:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-09T08:56:43-07:00</updated>
<published>2009-01-09T08:56:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41630#p41630</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41630#p41630"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41630#p41630"><![CDATA[
<img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" />  this works but i still get the flicker. hmmm<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Fri Jan 09, 2009 8:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2009-01-09T00:34:15-07:00</updated>
<published>2009-01-09T00:34:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41613#p41613</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41613#p41613"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41613#p41613"><![CDATA[
The following revision should work:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">------------------------Controller Loop Begin-------------------------------<br /><br />infinite:<br />   jmp infinite<br /><br />VBlank_Routine:<br />   lda #3                  ; /////Sprite Info Load/////<br />   sta $4014               ; $4014 = sprite DMA register &#40;transfers<br />   <br />                        ; /////Controller Setup/////<br />   <br />   lda #$01               ; reset pad #1<br />   sta $4016               ; $4016 = joypad #1 &#40;1 = reset, 0 = clear&#41;<br />   lda #$00<br />   sta $4016<br />                        ; /////Test Button Status/////<br />   <br />   lda $4016               ; read A status<br />   and #1                  ; if the low-order bit is equal to 1, the button is pressed<br />   bne AKEYdown            ; branch to AKEYdown if<br />   <br />   lda $4016               ; read B status<br />   lda $4016               ; read SELECT status<br />   lda $4016               ; read START status<br />   <br />   lda $4016               ; read UP status<br />   and #1                  ; check if UP is pressed<br />   bne UPKEYdown            ; branch to UPKEYdown if pressed<br />   <br />   lda $4016               ; read DOWN status<br />   and #1                  ; check if DOWN is pressed<br />   bne DOWNKEYdown            ; branch to DOWNKEYdown if pressed<br /><br />   lda $4016               ; read LEFT status<br />   and #1                  ; check if LEFT is pressed<br />   bne LEFTKEYdown            ; branch to LEFTKEYdown if pressed<br /><br />   lda $4016               ; read RIGHT status<br />   and #1                  ; check if RIGHT is pressed<br />   bne RIGHTKEYdown         ; branch to RIGHTKEYdown if pressed<br />   jmp NOTHINGdown<br /><br />                        ; /////Button Press Actions/////<br />                     <br />AKEYdown:                  ; code executed when A is pressed<br /><br />   lda #$00               ; turn the screen off<br />   sta $2001<br /><br />   lda #$20               ; reset to beginning of name table<br />   sta $2006<br />   sta $2006<br /><br />   lda BKGset               ; check which background is loaded<br />   cmp #0<br />   bne BG1<br /><br />   <br />   ldx #$00<br />loadNames2:                  ; switch to background 2 &#40;1 is loaded originally&#41;<br />   lda ourMap2, x<br />   inx<br />   sta $2007<br />   cpx #4*32<br />   bne loadNames2<br />   lda #1<br />   sta BKGset<br /><br />   lda #%00011110            ; turn the screen back on<br />   sta $2001      <br /><br />   jmp NOTHINGdown<br />   <br />BG1:<br />   <br />   ldx #$00               <br />loadNames3:                  ; switch to background 1<br />   lda ourMap, x             <br />   inx                     <br />   sta $2007               <br />   cpx #4*32                <br />   bne loadNames3             <br />   lda #0<br />   sta BKGset<br />   <br />   lda #%00011110            ; turn the screen back on<br />   sta $2001   <br />   <br />   jmp NOTHINGdown            <br /><br />UPKEYdown:                  ; code executed when UP is pressed<br />   lda Sprite1_Y<br />   sec<br />   sbc #1                 ; subtract 1 from Sprite1_Y<br />   sta Sprite1_Y<br />   jmp NOTHINGdown<br /><br />DOWNKEYdown:               ; code executed when DOWN is pressed<br />   lda Sprite1_Y<br />   clc<br />   adc #1                 ; add 1 to Sprite1_Y<br />   sta Sprite1_Y<br />   jmp NOTHINGdown<br /><br />LEFTKEYdown:               ; code executed when LEFT is pressed<br />            <br />   lda Sprite1_S<br />   and #%10111111<br />   sta Sprite1_S<br />   lda Sprite1_X<br />   sec<br />   sbc #1                 ; subtract 1 from Sprite1_X<br />   sta Sprite1_X<br />   jmp NOTHINGdown<br /><br />RIGHTKEYdown:               ; code executed when RIGHT is pressed<br />   <br />   lda Sprite1_S<br />   ora #%01000000<br />   sta Sprite1_S<br />   lda Sprite1_X<br />   clc<br />   adc #1                  ; add 1 to Sprite1_X<br />   sta Sprite1_X<br />                        ; return from interrupt<br />NOTHINGdown:<br />   rti<br />; ------------------------Controller Loop End--------------------------------- <br /></div><br /><br />Replace the code between the "Controller Loop Begin" and "Controller Loop End" breaks with the code above. I fixed some things so that you aren't doing anything in the endless loop, because you don't need to be doing anything in it. It's all done in the NMI.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Jan 09, 2009 12:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bbbirddd]]></name></author>
<updated>2009-01-09T00:22:49-07:00</updated>
<published>2009-01-09T00:22:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41612#p41612</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41612#p41612"/>
<title type="html"><![CDATA[nametable questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4650&amp;p=41612#p41612"><![CDATA[
Thanks for the help. I think it's getting too late for me to think about this (i'm in NH). I tried to do what you said but I don't think I get it. I'll take another look in the morning. Here's my code in case you'd like to take a look:<br /><br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .inesprg 1               ; /////INES Header/////<br />   .ineschr 1<br />   .inesmap 0<br />   .inesmir 1<br />   <br />; ////////////////////////Bank 1: PRG ROM - Interrupt Table/////////////////////////////<br /><br /><br />   .bank 1<br />   .org $FFFA<br />   .dw VBlank_Routine         ; address to execute on VBlank<br />   .dw Start<br />   .dw 0<br /><br />; ////////////////////////Bank 0: PRG ROM - Program Code////////////////////////////////<br /><br />   .bank 0<br />   .org $0000               ; /////Variables/////<br />   <br />VBlankOrNo:   .db 0<br />BKGset:      .db 0<br />                        ; /////Sprite DMA/////<br />                  <br />   .org $0300                ; OAM copy location<br /><br />Sprite1_Y:      .db   0         ; sprite #1's Y value<br />Sprite1_T:      .db   0          ; sprite #1's tile number<br />Sprite1_S:      .db   0           ; sprite #1's special byte<br />Sprite1_X:      .db   0         ; sprite #1's X value<br />UnusedSprites:    .db 0<br /><br />   .org $8000               ; program code location<br />   <br />Start:                     ; /////Screen Setup/////<br /><br />   sei                   ; just some stuff that's standard to do at reset<br />   cld<br />   ldx #$FF<br />   txs <br /><br />   lda #00                  ; set every variable to zero<br />   sta Sprite1_Y<br />   sta Sprite1_T<br />   sta Sprite1_S<br />   sta Sprite1_X<br />   sta VBlankOrNo<br />   sta BKGset<br />   sta UnusedSprites<br /><br />   lda #$FF               ; clear OAM with $FFs &#40;except for Sprite1_* variables&#41;<br />   ldx #0<br />ClearSprites:<br />   sta UnusedSprites, x<br />   inx<br />   cpx #252<br />   bne ClearSprites<br />   <br />   lda #0<br />   sta $2000<br />   sta $2001               ; turn the PPU off<br />   <br />wait1:                     ; wait &#40;why?&#41;<br />   lda $2002<br />   bpl wait1<br /><br />wait2:<br />   lda $2002<br />   bpl wait2<br /><br />   lda #50                  ; set initial sprite position to 50,50<br />   sta Sprite1_Y<br />   sta Sprite1_X<br />   lda #0<br />   sta Sprite1_S            ; set initial sprite color<br />   lda #1<br />   sta Sprite1_T<br /><br />                        ; /////32-Color Palette/////<br />   <br />   lda #$3F               ; $2006 = PPU memory address<br />   sta $2006               ; $3F00-$3F10 = image palette location &#40;the first half of the 32 colors&#41;<br />   lda #$00               ; $3F10-$3F20 = sprite palette location &#40;the second half of the 32 colors&#41;<br />   sta $2006<br /><br />   ldx #$00<br />loadpal:                  ; load 32-color pallete<br />   lda tilepal, x<br />   sta $2007               ; $2007 = PPU memory data<br />   inx<br />   cpx #32<br />   bne loadpal<br />   <br />                        ; /////Background/////<br /><br />   lda #$20<br />   sta $2006                ; $2020-$23C0 = name table 0 &#40;32x25 tiles&#41;<br />   sta $2006 <br /><br />   ldx #$00<br />loadNames:                  ; load background name table &#40;bkg12.map&#41;<br />   lda ourMap, x<br />   inx<br />   sta $2007               ; $2007 = PPU memory data<br />   cpx #4*32<br />   bne loadNames<br /><br />                        ; /////Screen Setup/////<br />   <br />   lda #%10001000            ; screen pattern table = $0000, sprite pattern table = $1000, name table = $2000<br />   sta $2000<br />   lda #%00011110            ; BG = black, show sprites, screen on, don't clip anything, color display<br />   sta $2001   <br />   <br />; ------------------------Controller Loop Begin-------------------------------<br /><br />infinite:            <br /><br />;WaitOutOfVblank:<br />;   lda $2002<br />;   bmi WaitOutOfVblank <br />   <br />;WaitVblank:<br />;   lda $2002<br />;   bpl WaitVblank <br /><br />WaitForVBlank:               ; /////VBlank/////      <br />   lda VBlankOrNo<br />   cmp #1                  ; check if A = 1 &#40;VBlank&#41;<br />   bne WaitForVBlank         ; if A = 0 loop<br />   dec VBlankOrNo            ; decrease VBlankOrNo by 1 &#40;A = 0&#41;<br />   <br />   lda #3                  ; /////Sprite Info Load/////<br />   sta $4014               ; $4014 = sprite DMA register &#40;transfers <br />   <br />                        ; /////Controller Setup/////<br />   <br />   lda #$01               ; reset pad #1<br />   sta $4016               ; $4016 = joypad #1 &#40;1 = reset, 0 = clear&#41;<br />   lda #$00<br />   sta $4016<br /><br /><br />VBlank_Routine:               ; /////VBlank Routine/////<br />   inc VBlankOrNo            ; at VBlank add 1 to VBlankOrNo &#40;1 if VBlank, 0 if not&#41;<br />   <br />                        ; /////Test Button Status/////<br />   <br />   lda $4016               ; read A status<br />   and #1                  ; if the low-order bit is equal to 1, the button is pressed<br />   bne AKEYdown            ; branch to AKEYdown if <br />   <br />   lda $4016               ; read B status<br />   lda $4016               ; read SELECT status<br />   lda $4016               ; read START status<br />   <br />   lda $4016               ; read UP status<br />   and #1                  ; check if UP is pressed<br />   bne UPKEYdown            ; branch to UPKEYdown if pressed<br />   <br />   lda $4016               ; read DOWN status<br />   and #1                  ; check if DOWN is pressed<br />   bne DOWNKEYdown            ; branch to DOWNKEYdown if pressed<br /><br />   lda $4016               ; read LEFT status<br />   and #1                  ; check if LEFT is pressed<br />   bne LEFTKEYdown            ; branch to LEFTKEYdown if pressed<br /><br />   lda $4016               ; read RIGHT status<br />   and #1                  ; check if RIGHT is pressed<br />   bne RIGHTKEYdown         ; branch to RIGHTKEYdown if pressed<br />   jmp NOTHINGdown<br /><br />                        ; /////Button Press Actions/////<br />                     <br />AKEYdown:                  ; code executed when A is pressed<br /><br />   lda #$00               ; turn the screen off<br />   sta $2001 <br /><br />   lda #$20               ; reset to beginning of name table<br />   sta $2006<br />   sta $2006<br /><br />   lda BKGset               ; check which background is loaded<br />   cmp #0<br />   bne BG1<br /><br />   <br />   ldx #$00<br />loadNames2:                  ; switch to background 2 &#40;1 is loaded originally&#41;<br />   lda ourMap2, x<br />   inx<br />   sta $2007<br />   cpx #4*32<br />   bne loadNames2<br />   lda #1<br />   sta BKGset<br /><br />   lda #%00011110            ; turn the screen back on<br />   sta $2001      <br /><br />   jmp NOTHINGdown<br />   <br />BG1:<br />   <br />   ldx #$00               <br />loadNames3:                  ; switch to background 1<br />   lda ourMap, x             <br />   inx                     <br />   sta $2007               <br />   cpx #4*32                <br />   bne loadNames3             <br />   lda #0<br />   sta BKGset<br />   <br />   lda #%00011110            ; turn the screen back on<br />   sta $2001   <br />   <br />   jmp NOTHINGdown            <br /><br />UPKEYdown:                  ; code executed when UP is pressed<br />   lda Sprite1_Y<br />   clc<br />   sbc #1                 ; subtract 1 from Sprite1_Y<br />   sta Sprite1_Y<br />   jmp NOTHINGdown<br /><br />DOWNKEYdown:               ; code executed when DOWN is pressed<br />   lda Sprite1_Y <br />   clc<br />   adc #1                 ; add 1 to Sprite1_Y<br />   sta Sprite1_Y<br />   jmp NOTHINGdown<br /><br />LEFTKEYdown:               ; code executed when LEFT is pressed<br />            <br />   lda Sprite1_S<br />   and #%10111111<br />   sta Sprite1_S<br />   lda Sprite1_X<br />   clc<br />   sbc #1                 ; subtract 1 from Sprite1_X<br />   sta Sprite1_X<br />   jmp NOTHINGdown<br /><br />RIGHTKEYdown:               ; code executed when RIGHT is pressed<br />   <br />   lda Sprite1_S<br />   ora #%01000000<br />   sta Sprite1_S<br />   lda Sprite1_X<br />   clc<br />   adc #1                  ; add 1 to Sprite1_X<br />   sta Sprite1_X<br />                        ; return from interrupt<br />NOTHINGdown:<br />   rti<br />   <br />   jmp infinite<br />; ------------------------Controller Loop End---------------------------------<br /><br />                        ; /////Include Binary Files/////<br /><br />tilepal: .incbin &quot;our.pal&quot;      ; include pallete and label its location &quot;tilepal&quot;<br />ourMap2:.db  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2<br />      .db 17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18 <br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      <br />ourMap:   .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2<br />      .db 17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18 <br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />      .db  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0<br />         <br />; .incbin &quot;map20.map&quot;    ; include map files and label its location &quot;ourMap&quot;<br />; ourMap2: .incbin &quot;bkg21.map&quot;<br /><br />; ////////////////////////Bank 2: CHR ROM - Sprite/Background Data//////////////////////<br /><br />   .bank 2            <br />   .org $0000<br />   .incbin &quot;bkg1.bkg&quot;<br />   <br />   .org $1000<br />   .incbin &quot;our.spr&quot;<br />   <br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3786">bbbirddd</a> — Fri Jan 09, 2009 12:22 am</p><hr />
]]></content>
</entry>
</feed>