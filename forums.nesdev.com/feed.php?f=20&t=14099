<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=20&amp;t=14099" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2016-04-22T07:21:47-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=20&amp;t=14099</id>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2016-04-22T07:21:47-07:00</updated>
<published>2016-04-22T07:21:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169079#p169079</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169079#p169079"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169079#p169079"><![CDATA[
My bad. I guess I misread it as 32KB somewhere. In that case, I don't think it's anything special in regards to RAM, just the usual enable/disable when writing to 0x0 - 0x1FFF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Fri Apr 22, 2016 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AWJ]]></name></author>
<updated>2016-04-22T04:14:51-07:00</updated>
<published>2016-04-22T04:14:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169071#p169071</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169071#p169071"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169071#p169071"><![CDATA[
According to the MAME software list Momotarou Collection has only 8KB (64Kbit) of RAM, which doesn't need to be bankswitched.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3737">AWJ</a> — Fri Apr 22, 2016 4:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2016-04-22T00:10:34-07:00</updated>
<published>2016-04-22T00:10:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169066#p169066</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169066#p169066"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169066#p169066"><![CDATA[
<div class="quotetitle">Shonumi wrote:</div><div class="quotecontent"><br />I'm rather curious about cart RAM for MBC1M for Momotarou Collection. How does it handle RAM banking? If it's an MBC1M game, how does it use the bit at 0x6000 - 0x7FFF? Or maybe I missed something during this discussion?<br /></div>The NES and SNES multicarts I have seen sometimes connect the same control line to both ROM and RAM, and so each outer bank corresponds not only to program N, but also to program N's save memory.<br /><br />So, in that world, you could think of MBC1 and MBC1-M as:<br />When 0x6000.0 is 0<br />* cart RAM is always bank 0<br />* ROM bank at 0x0000-0x3FFF is always 0<br />When 0x6000.0 is 1<br />* cart RAM is bank written to 0x4000<br />* ROM bank at 0x0000-0x3FFF is also controlled by the register at 0x4000 (depending on PCB variant, either selecting banks 0/0x20/0x40/0x60 or 0/0x10/0x20/0x30)<br />Regardless of what 0x6000.0 is:<br />* ROM bank at 0x4000-0x7FFF is the concatenated results of the two bits in 0x4000 and the five or four bits in 0x2000<br /><br />Hopefully that helps clear things up, and isn't just repeating things.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Apr 22, 2016 12:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2016-04-21T20:24:29-07:00</updated>
<published>2016-04-21T20:24:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169059#p169059</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169059#p169059"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169059#p169059"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />Thanks for the info on this mapper, Shonumi and AWJ.<br /></div><br /><br />Thank AWJ and gekkio. They're doing all the poking and prodding and verifying the MBC1M electronic stuff. My efforts here (condensing already available info) have been minimal, in my opinion  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />Anyway, looks like there's been a lot of progress since this thread started. I'm going to try to recap key points about what we know about the MBC1M (I like this name btw, byuu, I'm gonna steal it  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" />)<br /><br />1) The main difference between the standard MBC1 and MBC1M is wiring, which affects bank selection.<br />2) Calculating ROM0 Bank selection -&gt; (ROM_HI &lt;&lt; 4) where ROM_HI is the 2 bits written to 0x4000-0x5FFF<br />3) Calculating ROM1 Bank selection -&gt; (ROM_HI &lt;&lt; 4) | (ROM_LO) where ROM_HI is the 2 bits written to 0x4000-0x5FFF, and ROM_LO is 4 bits written to 0x2000-0x3FFF.<br />4) Writing 1 to 0x6000-0x7FFF enables ROM0 to switch to banks 0x10, 0x20, or 0x30. Otherwise, it will read from 0x0 always.<br /><br />#4 makes sense to me. It explains why MK 1&amp;2 writes to 0x6000-0x7FFF at all. Does the above look correct to everyone else? Please make sure it lines up with everything that's been said so far. My ultimate goal (besides emulating MBC1M games) is break all this down into the simplest understandable terms, something I could add to the <a href="http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers" class="postlink">GBDev wiki</a> for example.<br /><br />I'm rather curious about cart RAM for MBC1M for Momotarou Collection. How does it handle RAM banking? If it's an MBC1M game, how does it use the bit at 0x6000 - 0x7FFF? Or maybe I missed something during this discussion?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Thu Apr 21, 2016 8:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[gekkio]]></name></author>
<updated>2016-04-21T13:37:44-07:00</updated>
<published>2016-04-21T13:37:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169042#p169042</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169042#p169042"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169042#p169042"><![CDATA[
I need to collect proper evidence with logic analysis about this, but here's an execution trace from my GB peek&amp;poke program I use to fiddle with real cartridges.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Connecting...<br />Connected<br />&gt; rb 0x0100<br />$0100: 00 C3 50 01 CE ED 66 66  CC 0D 00 0B 03 73 00 83  ..P...ff.....s..<br />$0110: 00 0C 00 0D 00 08 11 1F  88 89 00 0E DC CC 6E E6  ..............n.<br />$0120: DD DD D9 99 BB BB 67 63  6E 0E EC CC DD DC 99 9F  ......gcn.......<br />$0130: BB B9 33 3E 44 51 2F 4D  4F 4E 53 54 45 52 53 00  ..3&gt;DQ/MONSTERS.<br />$0140: 00 00 00 80 42 34 03 03  06 02 00 33 00 71 25 B4  ....B4.....3.q%.<br />$0150: FE 11 3E 00 20 01 3C EA  1D C8 31 FF DF CD B1 15  ..&gt;. .&lt;...1.....<br />$0160: CD 5B 16 CD 80 00 21 00  80 01 00 1C AF CD 9A 16  .&#91;....!.........<br />$0170: 21 8A C8 AF 22 22 22 77  3E 04 EA EE C8 3E 00 EA  !...&quot;&quot;&quot;w&gt;....&gt;..<br />$0180: 8A C8 3E 01 EA 00 61 3E  00 EA 00 41 3E 00 EA 00  ..&gt;...a&gt;...A&gt;...<br />$0190: 61 3E 00 EA 00 41 3E 0A  EA 00 01 3E 01 EA 00 21  a&gt;...A&gt;....&gt;...!<br />$01A0: 3E 00 EA 00 41 3E 01 EA  1C C8 3E FF EA B7 C8 EA  &gt;...A&gt;....&gt;.....<br />$01B0: B8 C8 CD 00 37 AF EA C7  C8 FA 1D C8 B7 28 07 AF  ....7........(..<br />$01C0: E0 4F E0 70 E0 56 CD F7  13 38 07 AF EA 1C C8 C3  .O.p.V...8......<br />$01D0: 8B 02 01 0C 00 CD A2 14  3E 14 EA 74 C7 21 00 08  ........&gt;..t.!..<br />$01E0: D7 CD E6 13 3E 02 EA 74  C7 21 00 08 D7 CD E6 13  ....&gt;..t.!......<br />$01F0: 3E 03 EA 74 C7 21 00 08  D7 CD E6 13 3E 04 EA 74  &gt;..t.!......&gt;..t<br />&gt; w 0x6000 1<br />&gt; rb 0x0100<br />$0100: 00 C3 50 01 CE ED 66 66  CC 0D 00 0B 03 73 00 83  ..P...ff.....s..<br />$0110: 00 0C 00 0D 00 08 11 1F  88 89 00 0E DC CC 6E E6  ..............n.<br />$0120: DD DD D9 99 BB BB 67 63  6E 0E EC CC DD DC 99 9F  ......gcn.......<br />$0130: BB B9 33 3E 44 51 2F 4D  4F 4E 53 54 45 52 53 00  ..3&gt;DQ/MONSTERS.<br />$0140: 00 00 00 80 42 34 03 03  06 02 00 33 00 71 25 B4  ....B4.....3.q%.<br />$0150: FE 11 3E 00 20 01 3C EA  1D C8 31 FF DF CD B1 15  ..&gt;. .&lt;...1.....<br />$0160: CD 5B 16 CD 80 00 21 00  80 01 00 1C AF CD 9A 16  .&#91;....!.........<br />$0170: 21 8A C8 AF 22 22 22 77  3E 04 EA EE C8 3E 00 EA  !...&quot;&quot;&quot;w&gt;....&gt;..<br />$0180: 8A C8 3E 01 EA 00 61 3E  00 EA 00 41 3E 00 EA 00  ..&gt;...a&gt;...A&gt;...<br />$0190: 61 3E 00 EA 00 41 3E 0A  EA 00 01 3E 01 EA 00 21  a&gt;...A&gt;....&gt;...!<br />$01A0: 3E 00 EA 00 41 3E 01 EA  1C C8 3E FF EA B7 C8 EA  &gt;...A&gt;....&gt;.....<br />$01B0: B8 C8 CD 00 37 AF EA C7  C8 FA 1D C8 B7 28 07 AF  ....7........(..<br />$01C0: E0 4F E0 70 E0 56 CD F7  13 38 07 AF EA 1C C8 C3  .O.p.V...8......<br />$01D0: 8B 02 01 0C 00 CD A2 14  3E 14 EA 74 C7 21 00 08  ........&gt;..t.!..<br />$01E0: D7 CD E6 13 3E 02 EA 74  C7 21 00 08 D7 CD E6 13  ....&gt;..t.!......<br />$01F0: 3E 03 EA 74 C7 21 00 08  D7 CD E6 13 3E 04 EA 74  &gt;..t.!......&gt;..t<br />&gt; w 0x4000 1<br />&gt; rb 0x0100<br />$0100: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0110: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0120: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0130: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0140: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0150: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0160: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0170: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0180: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$0190: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$01A0: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$01B0: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$01C0: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$01D0: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$01E0: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />$01F0: FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF  ................<br />&gt; w 0x4000 2<br />&gt; rb 0x0100<br />$0100: DA 4E E2 4E EA 4E EF 4E  F4 4E F9 4E 02 4F 0B 4F  .N.N.N.N.N.N.O.O<br />$0110: 14 4F 1C 4F 21 4F 22 4F  25 4F 36 4F 44 4F 57 4F  .O.O!O&quot;O%O6ODOWO<br />$0120: 66 4F 79 4F 8B 4F 9F 4F  AE 4F C0 4F D4 4F E3 4F  fOyO.O.O.O.O.O.O<br />$0130: F0 4F FA 4F FF 4F 15 50  1E 50 3B 50 47 50 52 50  .O.O.O.P.P;PGPRP<br />$0140: 66 50 76 50 94 50 AB 50  BD 50 E1 50 F0 50 2E 51  fPvP.P.P.P.P.P.Q<br />$0150: 4A 51 6E 51 91 51 9F 51  AB 51 BB 51 CB 51 E9 51  JQnQ.Q.Q.Q.Q.Q.Q<br />$0160: F7 51 15 52 1F 52 3E 52  4E 52 74 52 88 52 97 52  .Q.R.R&gt;RNRtR.R.R<br />$0170: A5 52 B5 52 C5 52 D4 52  15 53 20 53 34 53 3B 53  .R.R.R.R.S S4S;S<br />$0180: 42 53 45 53 48 53 51 53  59 53 5F 53 64 53 66 53  BSESHSQSYS_SdSfS<br />$0190: 68 53 6A 53 6C 53 6E 53  70 53 72 53 74 53 8B 53  hSjSlSnSpSrStS.S<br />$01A0: 91 53 C3 53 D1 53 DF 53  F2 53 05 54 1C 54 52 54  .S.S.S.S.S.T.TRT<br />$01B0: 72 54 80 54 91 54 A0 54  C4 54 D3 54 E3 54 F6 54  rT.T.T.T.T.T.T.T<br />$01C0: 06 55 0C 55 24 55 49 55  67 55 80 55 80 55 80 55  .U.U$UIUgU.U.U.U<br />$01D0: 9F 55 C3 55 EA 55 F7 55  03 56 0E 56 1A 56 26 56  .U.U.U.U.V.V.V&amp;V<br />$01E0: 32 56 3D 56 48 56 53 56  5F 56 6A 56 75 56 80 56  2V=VHVSV_VjVuV.V<br />$01F0: 8B 56 97 56 A3 56 A4 56  A9 56 AE 56 B3 56 B8 56  .V.V.V.V.V.V.V.V<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7248">gekkio</a> — Thu Apr 21, 2016 1:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[gekkio]]></name></author>
<updated>2016-04-21T13:11:39-07:00</updated>
<published>2016-04-21T13:11:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169039#p169039</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169039#p169039"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169039#p169039"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The description and VHDL code on his wiki agree with my hypothesis that register $6000 simply controls whether the upper bank-select lines are ANDed with CPU A14 or not.<br /></div><br /><br />Indeed! This leads to an interesting fact about MBC1 behaviour that I just verified with real carts: on big cartridges where AA13-AA14 are used, ROM0 area ($0000-$3FFF) is switchable (even on normal wiring!)<br /><br />1. Write $01 to $6000. This makes AA13 and AA14 independent of A14<br />2. Write $03 to $4000. AA13 and AA14 are now both 1<br />3. ROM reads from $0000-$3FFF will have AA13 and AA14 bits 1 -&gt; if even one of them is connected to the ROM, it will not read bank 0!!<br /><br />I just verified this on both Dragon Quest Monsters (all 7 address bits from MBC1) and Super Chinese Fighter GB (6 address bits from MBC1, including AA13)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7248">gekkio</a> — Thu Apr 21, 2016 1:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AWJ]]></name></author>
<updated>2016-04-21T13:02:26-07:00</updated>
<published>2016-04-21T13:02:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169036#p169036</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169036#p169036"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169036#p169036"><![CDATA[
So the only difference between a &quot;multicart&quot; and a standard MBC1 cart is that the connection of the MBC1 bank-select lines to the ROM address lines skips over RA18? That's pretty much what I expected.<br /><br />I think there's exactly one cartridge that connects all seven MBC1 bank-select lines to ROM: the 16-megabit Dragon Quest Monsters. All other GB/GBC games that are bigger than 8 megabits use a different MBC.<br /><br />I was gonna ask &quot;who's Tauwasser&quot; but then I remembered he contributed a bunch of GB stuff to MAME a couple years back, and I managed to google up his blog and wiki. The <a href="http://wiki.tauwasser.eu/view/MBC1" class="postlink">description and VHDL code on his wiki</a> agree with my hypothesis that register $6000 simply controls whether the upper bank-select lines are ANDed with CPU A14 or not.<br /><br />I wonder why both MBC1 and MBC2 were designed to do the &quot;zero-adjustment&quot; thing. It obviously requires additional logic in the chip, it creates unusable &quot;holes&quot; in large ROMs and it doesn't seem to serve any useful purpose...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3737">AWJ</a> — Thu Apr 21, 2016 1:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[gekkio]]></name></author>
<updated>2016-04-21T12:16:03-07:00</updated>
<published>2016-04-21T12:16:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169032#p169032</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169032#p169032"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169032#p169032"><![CDATA[
I did some testing, and here are the connections:<br /><br />BFAN:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ROM A0-A13  = Gameboy A0-A13<br />ROM A14-A18 = MBC1 RA14-RA18<br />ROM A19     = MBC1 AA13<br /><br />MBC1 AA14 is unconnected</div><br /><br />M-BFAN:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ROM A0-A13  = Gameboy A0-A13<br />ROM A14-A17 = MBC1 RA14-RA17<br />ROM A18-A19 = MBC1 AA13-AA14<br /><br />MBC1 RA18 is unconnected</div><br /><br />Now, let's treat the MBC1 as something that has two registers: 5-bit zero-adjusted ($2000), 2-bit ($4000).<br />The collection carts use just a normal MBC1, so the behaviour of $6000 should be exactly the same as with normal MBC1 carts.<br />The difference is in how we combine the two main registers to get the upper ROM address bits.<br />BFAN uses 5 + 1 bits (RA14-RA18 + AA13: ARRRRR), while M-BFAN uses 4 + 2 bits (RA14-RA17 + AA13-AA14: AARRRR).<br />Based on the No-Intro and MAME databases, almost all MBC1 collections include just the MBC1 chip and a 8Mbit ROM.<br />There's just one exception: Momotarou Collection also has 64Kbits of RAM.<br /><br />In my opinion $6000 should still be emulated since it affects the behaviour and the effects are predictable.<br />$2000.d4 doesn't need to be emulated, because it's not obvious where that pin would go in the final physical ROM address and no game seems to use it.<br />We only have real 8Mbit ROM cases, so wirings of MBC1M with smaller and bigger ROMs can only be speculated.<br />For example, can we really assume in all cases that both AA13 and AA14 are used? If they are interpreted as &quot;game number&quot;, AA13 would be enough if we have only two games.<br />Because of this uncertainty, I intend to hard-code a 8Mbit ROM requirement for MBC1M in my emulator.<br /><br />All this has reminded me of the need to do logic analysis on the MBC1  <img src="http://forums.nesdev.com/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br />Tauwasser has already done good in-depth research, but I think independent testing is still valuable and I might uncover some surprising things.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7248">gekkio</a> — Thu Apr 21, 2016 12:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2016-04-21T09:14:04-07:00</updated>
<published>2016-04-21T09:14:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169014#p169014</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169014#p169014"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=169014#p169014"><![CDATA[
Thanks for the info on this mapper, Shonumi and AWJ.<br /><br />Given the PCB says DMG-M-BFAN-10, and the M- is the unique part, I'm going to nickname this mapper MBC1M. Hopefully you guys don't mind me calling it that.<br /><br />I understand that it's technically a literal MBC1 and just wired differently. But &quot;MBC1M&quot; is a lot easier to describe a mapper than &quot;MBC1 with pins 16-19 connects to ROM pins 13-16 instead of RAM pins 8-11&quot; (or whatever.)<br /><br />Anyway, since Shonumi is going with sinamas' version, I've implemented AWJ's theory for now, that way if any bugs arise we can compare between our two implementations to see which one is correct. AWJ's runs Mortal Kombat I &amp; II just fine, at least.<br /><br />This is what I have for the mapper so far:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">auto Cartridge::MBC1M::read(uint16 addr) -&gt; uint8 {<br />  if((addr &amp; 0xc000) == 0x0000) {  //$0000-3fff<br />    return cartridge.romRead((romHi &lt;&lt; 4) * 0x4000 + (addr &amp; 0x3fff));<br />  }<br /><br />  if((addr &amp; 0xc000) == 0x4000) {  //$4000-7fff<br />    return cartridge.romRead((romHi &lt;&lt; 4 | romLo) * 0x4000 + (addr &amp; 0x3fff));<br />  }<br /><br />  return 0xff;<br />}<br /><br />auto Cartridge::MBC1M::write(uint16 addr, uint8 data) -&gt; void {<br />  if((addr &amp; 0xe000) == 0x2000) {  //$2000-3fff<br />    romLo = data &amp; 15;<br />  }<br /><br />  if((addr &amp; 0xe000) == 0x4000) {  //$4000-5fff<br />    romHi = data &amp; 3;<br />  }<br />}<br /><br />auto Cartridge::MBC1M::power() -&gt; void {<br />  romHi = 0;<br />  romLo = 1;<br />}<br /><br />struct MBC1M : MMIO {<br />  auto read(uint16 addr) -&gt; uint8;<br />  auto write(uint16 addr, uint8 data) -&gt; void;<br />  auto power() -&gt; void;<br /><br />  uint4 romLo;<br />  uint2 romHi;<br />} mbc1m;</div><br /><br />I didn't bother with the register at $6000. I'll do so if we find a game that uses it, otherwise I don't like guessing.<br /><br />Unless we find a 2MiB multi-cart, it's speculation where $2000.d4 is usable or not. Although I don't see why it wouldn't be, I'll disallow it for now.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Thu Apr 21, 2016 9:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2016-04-20T18:51:45-07:00</updated>
<published>2016-04-20T18:51:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168967#p168967</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168967#p168967"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168967#p168967"><![CDATA[
<div class="quotetitle">AWJ wrote:</div><div class="quotecontent"><br />I don't see how that's possible. My suspicion is that when 0 is written to $6000, OUTER only affects bank 1, but the bank number is still 6-bit (4 bits from $2000 and 2 bits from $4000)<br /></div><br /><br />All I'm doing is translating what emulators do in C++ into plain English. Any inaccuracies are what I gathered between MAME and Gambatte. Gambatte treats ROM reads with all 7-bits present, MAME does as you say using 6-bits. I went with Gambatte's version because it's much easier to read and understand. Anything I wrote is just a preliminary guess since I'm trying to figure out what other people's code was meant to achieve (for the relevant parts, there are practically no useful comments anywhere in either emulator...)<br /><br />I suppose this only highlights how important it is to have public discussions like we are doing now, out in the open, with multiple people verifying things and offering theories. Otherwise, we just get &quot;rough ideas&quot; on how things work, and no one really bothers to investigate, let alone share their thoughts or results. This is also why I'm very happy to see this topic generating some great info. This is exactly what has been missing from the Game Boy emu-dev scene. Trust me, it only gets worse for other things. Folks tend to write code, but don't do squat to explain it, and that leaves curious types in the dark unless they're programmers too.<br /><br />So by all means, keep posting more stuff guys. I'll be very glad to have an accurate understanding of MBC1 multicarts <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Wed Apr 20, 2016 6:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AWJ]]></name></author>
<updated>2016-04-20T14:27:40-07:00</updated>
<published>2016-04-20T14:27:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168940#p168940</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168940#p168940"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168940#p168940"><![CDATA[
Based on the chip pinout, I'm pretty sure the usual explanation of MBC1 register $6000, that it determines whether $4000 affects RAM or ROM, is incorrect.<br /><br />Register $4000 directly corresponds to pins AA13 and AA14 on the chip, which can be connected to the upper address lines of either the RAM or the ROM (or both, in theory, but I don't think there are any MBC1 games with both &gt;512KB ROM and &gt;8KB RAM) There's only the one pair of pins, not one set for RAM and a different set for ROM (which would be required to make the chip work like the usual docs say) So what does $6000 actually do?<br /><br />When 0 is written to $6000, AA13 and AA14 are AND gated with CPU A14, meaning they're forced to 0 when accessing $0000-3FFF and $8000-$BFFF (practically meaning $A000-BFFF, since VRAM isn't on the same bus as the cartridge slot) The upshot is that only the $4000-7FFF ROM range is banked; $0000-3FFF always accesses the first 16KB of the entire ROM, and $A000-BFFF always accesses the first 8KB of RAM.<br /><br />When 1 is written to $6000, it looks like AA13 and AA14 are ungated, meaning all ROM and cartridge RAM accesses use the upper bank bits. If I'm right, you can take a standard 1MB or 2MB MBC1 cart, write 1 to $6000 and it'll behave like a &quot;multicart&quot;, but with 512KB &quot;outer banks&quot;. I'm not sure if there are any games that actually do this; if they do, they won't work on emulators that emulate MBC1 according to the description in the usual docs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3737">AWJ</a> — Wed Apr 20, 2016 2:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2016-04-20T12:45:24-07:00</updated>
<published>2016-04-20T12:45:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168936#p168936</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168936#p168936"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168936#p168936"><![CDATA[
Looking at the PCB pictures (BFAN-01 vs BFAN-10), A15 looks unchanged. The only visible change is the additional trace that ends vaguely near AA13/AA14, and a change of the trace (that ends vaguely near ROM A18).<br /><br />The changes that I do see are consistent with what you said in the previous post.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Wed Apr 20, 2016 12:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AWJ]]></name></author>
<updated>2016-04-20T12:33:12-07:00</updated>
<published>2016-04-20T12:33:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168935#p168935</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168935#p168935"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168935#p168935"><![CDATA[
<div class="quotetitle">gekkio wrote:</div><div class="quotecontent"><br />My cartridge has DMG-M-BFAN-10, which is easiest to compare with Super Chinese Fighter GB, which has DMG-BFAN-01.<br />There is a minor difference in the traces in back, but the vias on the front side are under the chips, so it's impossible to visually see where the traces go. I intend to properly check the traces, but won't have much time to do that before the weekend.<br /></div><br /><br />gekkio, when you get a chance to check the traces, please check whether there's a difference between those two carts in how CPU A15 is connected (it'll be connected to a pin on the MBC on a non-multicart; is it connected to the same MBC pin on a multicart?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3737">AWJ</a> — Wed Apr 20, 2016 12:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AWJ]]></name></author>
<updated>2016-04-20T12:11:17-07:00</updated>
<published>2016-04-20T12:11:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168934#p168934</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168934#p168934"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168934#p168934"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />When entering multicart mode, ROM0 gets switched with another bank using the following formula (assume ROM_BANK is the full ROM bank number using all 7 bits from 0x2000 through 0x5FFF)<br /><br />ROM_BANK = ((ROM_BANK &gt;&gt; 1) &amp; 0x30) <br /><br />So essentially, in multicart mode, ROM0 banks translate as follows:<br />Banks 0x0 through 0x1F = 0x0<br />Banks 0x20 through 0x3F = 0x10<br />Banks 0x40 through 0x5F = 0x20<br />Banks 0x60 through 0x7F = 0x30<br /><br />When entering multicart mode, ROM1 gets switched with another bank using the following forumla:<br /><br />ROM_BANK =  ((ROM_BANK &gt;&gt; 1) &amp; 0x30)  | (ROM_BANK &amp; 0xF)<br /><br />So essentially, in multicart mode, ROM1 banks translate as follows:<br />Banks 0x0 through 0x1F = 0x0 - 0xF, then 0x0 - 0xF again<br />Banks 0x20 through 0x3F = 0x10 - 0x1F, then 0x10 - 0x1F again<br />Banks 0x40 through 0x5F = 0x20 - 0x2F, then 0x20 - 0x2F again<br />Banks 0x60 through 0x7F = 0x30 - 0x3F, then 0x30 - 0x3F again<br /></div><br /><br />A alternate/simpler way to describe the logic: Bit 4 of $2000 is completely unused. Bits 0-3 of $2000 form a 4-bit &quot;inner&quot; bank number which only affects the ROM1 address range ($4000-7FFF). Bits 0-1 of $4000 form a 2-bit &quot;outer&quot; bank number which affects both ROM0 ($0000-3FFF) and ROM1.<br /><br />INNER &amp;= 0xF<br /><br />ROM0 bank = OUTER &lt;&lt; 4<br />ROM1 bank = OUTER &lt;&lt; 4 | INNER<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />When multicart mode is disabled, ROM banking works just like a regular MBC1, as far as I can tell.<br /></div><br /><br />I don't see how that's possible. My suspicion is that when 0 is written to $6000, OUTER only affects bank 1, but the bank number is still 6-bit (4 bits from $2000 and 2 bits from $4000)<br /><br />I looked at the MK1&amp;2 ROM, and it looks like the first &quot;outer&quot; bank contains the menu program and a whole bunch of empty space, the second &quot;outer&quot; bank contains MK1, the third &quot;outer&quot; bank contains MK2 and the fourth &quot;outer&quot; bank is empty. The copies of MK1 and MK2 are complete with GB headers (they might actually be identical to the original single-game versions)<br /><br />Here's a possible heuristic for detecting MBC1 multicarts: A 1 megabyte MBC1 ROM with no cartridge RAM (all the multicarts are this size) with valid data in bank $20 (not empty and not a duplicate of bank 0) is probably a multicart, since bank $20 is never accessible in a standard MBC1 configuration. The tricky part is defining &quot;valid data&quot;. MK1&amp;2 has a valid GB header there (the original MK2's header); do the other multicarts as well?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3737">AWJ</a> — Wed Apr 20, 2016 12:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2016-04-20T11:37:06-07:00</updated>
<published>2016-04-20T11:37:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168931#p168931</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168931#p168931"/>
<title type="html"><![CDATA[Re: Mortal Kombat Madness?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=14099&amp;p=168931#p168931"><![CDATA[
The difference on the back appears to be what ROM pin 31 (A18?) is connected to... perhaps connecting ROM A18,A19 to AA13,A14 instead of to RA18,AA13 ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Wed Apr 20, 2016 11:37 am</p><hr />
]]></content>
</entry>
</feed>