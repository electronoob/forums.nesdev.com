<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NMI routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NMI routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1495">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1495</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed May 10, 2006 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NMI routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm working on a game, and I'm wondering what stuff would you have to do in your NMI that you cannot just do in vblank? My engine is currently set up so that everything you do in a frame is done in the endless loop when bit 7 of $2002 is set. So it's like this:
<br />
<br />Loop:
<br />      lda $2002
<br />      bmi framecrap
<br />      jmp Loop
<br />
<br />framecrap:
<br />     jsr joypad
<br />     lda scrollx
<br />     sta $2005
<br />     .....
<br />     jmp Loop
<br />
<br />Is that not okay to do? My code functions just fine on an emulator, but will it run okay on the real NES? It's just easier, because I don't have to worry about A/X/Y registers being screwed up. I had a code set up to do stuff in the endless loop and in the NMI, and it crashed so bad, and then I realized it was because stuff like this would happen:
<br />
<br />lda SomeVar
<br />(NMI is executed, A register is changed)
<br />sta $2005
<br />
<br />Or something like that. With how I have it set up, I don't have to worry about that. I knew it was a problem, because when I changed it so my NMI and my loop weren't running at the same time, it worked.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 10, 2006 9:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think anything stops it from running on hardware, but it seems that $2002 is not a very reliable way to check for VBlank. Someone said that a quite high percentage of VBlanks can be missed if you do it like this, and your game will not run as smoothly as it could.
<br />
<br />If you have trouble with your NMI routine when stuff is running on the main loop, I suggest you put the whole code inside the NMI then. The main loop will be nothing more than "forever: jmp forever" and there is no way to screw that up. Unless your NMI routine takes longer than a frame, in wich case another NMI would fire while the last one wasn't over and you'd have the same problems you have now.
<br />
<br />Maybe you could disable NMI's inside the NMI, and enable them again right before it ends (reading $2002 first to avoid firing an NMI right away in the middle of a VBlank), so that they'll never overlap. You may still miss frames, but only when your frame calculations take too long, and that can't be avoided unless you optimize the code...
<br />
<br />But I don't get what the big problem is anyway... if you push everything to the stack at the start of the NMI and get it all back at the end, there is no reason for things to screw up. It must be something else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed May 10, 2006 10:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As tokumaru said, polling $2002 for VBlank will occasionally make you miss a frame on the system (and even on modern emus, since blargg released test ROMs which expose this behavior).  NMIs are far more reliable.  If you want to keep your current setup and have minimal changes, it's not too hard to replace $2002 polling logic with NMI logic.
<br />
<br />In your NMI routine, you could just set a flag in RAM somewhere and RTI immediately.  Then when you wait for vblank, just clear the flag, enable nmis, then wait for the flag to be set, then disable nmis.
<br />
<br />But I wouldn't recommend doing that.  It's rather silly, and NMIs will be disabled until you specifically wait for VBlank (so if you're doing too much logic to be done in a frame, you will miss an NMI, which would be disaterous if you're doing split screen effects).  The NES game design scheme I'd go with would be something like the following:
<br />
<br />NMI should just do drawing stuff and/or other things that can only be done in vblank (palette updates, NT updates, spr-ram DMA, etc).  You might even want to throw in your music code after all the drawing is complete before you RTI... in case you don't want the music to slow down when the rest of the game does.
<br />
<br />The main game logic should only set vars and fill buffers telling the NMI routine what to draw or what to update.  NMIs should always be enabled, except for transition events (like when you shut the screen off to fill a whole NT, or something like that).  If game logic spills into VBlank, it won't matter, since the NMI will catch it, and only the appropriate stuff will be drawn.
<br />
<br />At least... that's what I would do.  There are many ways you could go.  I hear that SMB does everything inside the NMI routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu May 11, 2006 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The way Dish covered is the best. I tried several ways of doing game logic vs NMI, and definitely, the NMI routine should handle all PPU and APU related stuff, along with counters updating (your game engine will want to have a set of counter and random numbers that change each frame)m while the non-NMI routine would do the actual logic, and fill buffers.
<br />What should be done in NMI should be set through flags you'll want to set a flag only when a buffer is full, and in NMI when the buffer is read (or just when you'll do it), clear the flag.
<br />When game logic relies on a buffer to be empy to continus, poll the flags and it will clear only when the NMI code will proprely update it in PPU/APU/whatever buffer.
<br />When the game logic just have to wait for next frame, poll a main NMI flag or a counter.
<br />
<br />That is not the only way, but by far this is the best way I've found. It works very well if you use it well.
<br />I think you should take a bit care of how your game engine works to know in what way you want to make up your buffers. Sometimes you would even have two levels of buffering. Buffers make programming SO much easier !

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 11, 2006 10:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Sometimes you would even have two levels of buffering. Buffers make programming SO much easier !</div>
<br />That's so true. While designing the format of the levels in my platform engine, I came up with a pretty nested format. Tiles were indexed by metatiles that were index by blocks, that were indexed by structures that were indexed by screens that were indexed by the level map. This allowed for very compact maps, resulting in bigger levels.
<br />
<br />The first design of a decoding routine worked directly on screens, outputing the tiles to be rendered during the next VBlank to a buffer. That routine was madly complicated. And it took more than 1/4 the frame to execute. If by any chance the game was to update a row and a column of metatiles, I'd surelly miss a frame.
<br />
<br />In the new design, the screens are decompressed up to the block level as soon as the player enters them. With 32x32 pixel blocks, 4 screens fit into 256 bytes of RAM, wich is easily indexed. All collision is performed against these blocks, wich also made everything easier. The actual rendering routine has only a few steps left until it reaches the tiles, and everything is much much faster than before.
<br />
<br />So I agree that breaking bigger tasks into smaller ones through the use of buffers is definatelly a good thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu May 11, 2006 4:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for your replies!
<br />
<br />It seems very untimed and inaccurate, the way I'm doing it. I was wondering if any of you knew how to update the screen without the turning off of the screen being so noticable. Because my engine currently stores whole objects(a series of meta tiles, not just a metatile) on the screen when updating is called for. And you always need to turn off the screen when writing to it, or so I understand, so how could you do this without it being noticable? It is possible, I know, because every game pretty smooth with it's updates, like SMB1 and stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Thu May 11, 2006 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I was wondering if any of you knew how to update the screen without the turning off of the screen being so noticable.</div>
<br />
<br />Update in VBlank.  NMI trips at the start of VBlank -- then you have 20 scanlines (about 2273 cycles) to get all your drawing done.  If you write to $4014 for sprite DMA (which you should do every frame, or at the very least, every other frame) then you lose 513 cycles (which is how long the DMA takes).
<br />
<br />Time is short in VBlank.  This is why you must have everything ready to draw and totally spelled out by your game logic... so the NMI routine can just see what it needs to draw, and quickly draw it.
<br />
<br />If you finish all your drawing before VBlank is over, you do NOT have to turn the screen off.  You can leave the screen on, it won't be a problem.
<br />
<br />
<br />
<br />Note that actual OAM can only be written to in VBlank (or screen off) -- but your dedicated page of RAM to hold sprite data (which you'll later DMA to OAM) can be written to at any time.  So moving sprites and whatnot can all be done by game logic.  That way... all your NMI routine has to do is copy it over via DMA.
<br />
<br />The idea is, you want to have OTHER things ready-to-draw like that too.  The NMI routine shouldn't have to "figure anything out"... that takes too long... VBlank time is too short.  Game logic should have it all ready (like it does with the sprite page), then the NMI routine can just copy the needed stuff to the nametables/palette/whatever needs to get done.
<br />
<br />If you're updating APU stuff in the NMI routine as well -- don't do it until AFTER you're done with your drawing.  APU stuff can be written to any time, it doesn't pay to waste precious VBlank time with APU code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu May 11, 2006 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, so, I'm thinking of completely rewriting my routine, using the same ideas, but I'm going to have lightning fast updates. I'm trying to make an NROM sidescroller to help me learn how to not waste space. I am already going to have $100 bytes in RAM that represent the meta tiles on screen to check for collision and whatnot, so this is looking a little tight. I'm going to have my objects in PRG layed out in raw, not meta-tile form. So this:
<br />
<br />80, 80, 80
<br />
<br />in not meta tile form would be this:
<br />
<br />80, 82, 80, 82, 80, 82
<br />81, 83, 81, 83, 81, 83
<br />
<br />It's for lightning fast screen update, because a meta tile decoding routine (If you don't know what I mean, I mean like a routine that turns $80 into $80,$81,$82, and $83) in your NMI is just a disaster waiting to happen. I would have a meta tile decoding routine store all the individual tile IDs in RAM, but I don't have enough space in RAM, and when I think about it, what the heck is the point? Just have your objects in PRG in non-metatile form, because there's no real reason besides saving PRG space to have them in metatile form. But it takes alot more time to process, and I wouldn't have anywhere to put the individual tile IDs anyways.
<br />
<br />Have your Object Address, X/Y dimensions of object, and PPU pointers in RAM. Access those in the NMI to store your object (in non-metatile form) on the screen really fast. I think Columns would be a lot faster, but a lot more complicated to keep track of. Do you know what I'm saying?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 11, 2006 8:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius, there is no problem at all in decoding metatiles. You just have to do it before VBlank, and store the results in a buffer. A full column of 15 metatiles will decode to only 60 tiles (60 bytes), so that's no problem.
<br />
<br />When you know a column is to be rendered (camera moved 16 pixels), you read the metatiles from the map you use for collision and stuff, and decode them to the buffer. Later, during VBlank, it's just a matter of direcly copying those 60 bytes from the buffer to the name table. 60 bytes is a fairly safe ammount of data to write.
<br />
<br />By using buffers, the first version of the screen drawing routines I wrote was able to update 2 columns of tiles (1 column of metatiles), 2 rows of tiles (1 row of metatiles), update attributes, do sprite DMA, and the rest of the time was alternated between updating the palette and erasing background tiles that needed to be cleared. All within standard VBlank time (no tricks). Of course, I used a bunch of LDA's STA's, with no loops and very little logic, and the whole drawing code used like 2kb.
<br />
<br />The key here is: you have to learn how to use buffers, or else you'll always be terribly limited by VBlank time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu May 11, 2006 8:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But then if you overbuffer, you'll run into limitations where your program will only run if a PRG RAM chip is present on the cart. That can get expensive, as it limits the donor carts that can be used.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 11, 2006 9:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But then if you overbuffer</div><br />That won't happen. There is a fixed space in RAM reserved for a row, another space for a column, and a few slots for random blocks that need to be erased. That adds to less than 256 bytes. That's how it worked in my previous engine, and most likely how it will be on my new one (I rewrite stuff a lot!).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">you'll run into limitations where your program will only run if a PRG RAM chip is present on the cart. That can get expensive, as it limits the donor carts that can be used.</div>
<br />I don't see why I'd need WRAM. I don't like WRAM. I did what I described above with the stock 2kb of RAM. Unless you are thinking I meant self-modifying code on the LDA's STA's thing, wich I didn't. These are stored in ROM, and always read from the place where the buffer is and write to $2007. 2kb of ROM is not a very high price to pay.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu May 11, 2006 9:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Celius, there is no problem at all in decoding metatiles. You just have to do it before VBlank, and store the results in a buffer. A full column of 15 metatiles will decode to only 60 tiles (60 bytes), so that's no problem.<br /></div>
<br />
<br />Okay, first. My maps are made of objects. By an object, I mean a block consisting of many metatiles. Like Metroid does, I believe. So my map is divided into objects, and would be hard to update it column by column.
<br />
<br />If I were to update it column by column, I'd have to somehow keep track of how many columns of the object are on the screen, and I'd have to start drawing were I left off, and this would be very tidious and annoying. If I were to entirely copy the object into RAM, it'd take up alot of space, and this is something I cannot do.
<br />
<br />I don't have much room in RAM, like I've said, I've already deticated $100 bytes to Sprite DMA, $100 for collision detection, and a bunch for other dumb stuff. I will not forget you suggested this, but I think just writing one object at a time would be good. Do you think writing like 32 tiles and doing 16-bit addition would take a long time? I don't think so, if you just write one object at a time, that's not bad at all. And also, on my game, you can't scroll the other way. It's like SMB1, it's a one-way trip to the flag, boss, or whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 11, 2006 9:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Okay, first. My maps are made of objects. By an object, I mean a block consisting of many metatiles. Like Metroid does, I believe. So my map is divided into objects, and would be hard to update it column by column.</div><br />Such maps are not a problem. I'm guessing you are already decoding those objects to that 256-byte map you use for collision, right? I'm only suggesting that you read the columns from that same map, not directly from ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I were to update it column by column, I'd have to somehow keep track of how many columns of the object are on the screen, and I'd have to start drawing were I left off, and this would be very tidious and annoying.</div><br />Yeah, sure, that'd be madness! Don't ever do that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I were to entirely copy the object into RAM, it'd take up alot of space, and this is something I cannot do.</div><br />Well, not entirely. Just one screen worth of metatiles. Maybe 2, as you can't decode the new one over the old one, as it's still beeing used. BTW, how are you handling collision using only one screen and not decoding column by column anyway?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't have much room in RAM, like I've said, I've already deticated $100 bytes to Sprite DMA, $100 for collision detection, and a bunch for other dumb stuff. I will not forget you suggested this, but I think just writing one object at a time would be good.</div><br />I know RAM is limited. I kinda got around that by using 32x32-pixel metatiles, wich allows me to have 4 screens loaded at a time (essential for a multi-way platformer) using only 1 page of RAM. Collision is also done at that level, but finer collision maps assigned to some of the metatiles would allow to simulate 16x16 pixel blocks, and even smaller ones (preferably not blocky at all, that is why the collision maps are for).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you think writing like 32 tiles and doing 16-bit addition would take a long time? I don't think so, if you just write one object at a time, that's not bad at all.</div><br />One single addition? That'd be pretty quick, I guess. If your objects are arranged in order of increasing Y position, you can definately decode them little by little. If you do 1 by 1, then you may have trouble if the next column to be displayed is composed by more than one object... and decoding them backward could be hard too. Unless each object definition has a fixed size, wich would allow you to just read the object list backwards.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And also, on my game, you can't scroll the other way. It's like SMB1, it's a one-way trip to the flag, boss, or whatever.</div>
<br />Oh, then forget what I said about reading the object list backwards... =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu May 11, 2006 10:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh hey, I suppose I could use the same 256 byte section in RAM for updating the screen! I'm going to have to update the whole thing each time I scroll 16 pixels over, though, and that'll really irritate me. How should I do this? I have my objects set up so you can never have half of one object on one nametable and the other half on the other. I'd maybe want to use more bytes that represent what is about to be stored on screen. I could write objects in metatile form to $300-$4FF that would be what's on screen, and what's offscreen. So $300-$3FF would be used for collision and stuff, and $400-$4FF would be what is about to be on screen! If I did this, I'd want arrays to represent columns, you know? I think I explained this in another thread to you, it might have been like the "Level designing" one. I'll have a routine that takes the metatile array, and makes it into a regular tile array in zero page, so it'll be more fast.
<br />
<br />Okay, I'm just wondering how I will update $300-$4FF. I think it'll be almost the exact same as the screen. I think I'll scroll in RAM as I'm scrolling the screen. So when the scroll is #$00, read $300-$3FF, and when it is #$10, read $310-$40F, when it is #$20, read $320,$41F, etc. Does that make sense? Are any of these ideas good?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 11, 2006 11:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I could write objects in metatile form to $300-$4FF that would be what's on screen, and what's offscreen. So $300-$3FF would be used for collision and stuff, and $400-$4FF would be what is about to be on screen!</div><br />Yeah, ideally you'd have buffers for 2 full screens as that is the number of name tables, and, as you said, the range of your objects is one screen, meaning you need a full spare screen to load the new one without destroying the current one. But 2 pages of RAM may be to much to spend on this. If you can spare the space, go for it, but normally I'd suggest you increase the metatile size (to 32x16, for example, wich can be very handy when it comes to attributes) so that 2 screens will fit in only one page.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I did this, I'd want arrays to represent columns, you know? I think I explained this in another thread to you, it might have been like the "Level designing" one. I'll have a routine that takes the metatile array, and makes it into a regular tile array in zero page, so it'll be more fast.</div><br />That's exactly the idea.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Okay, I'm just wondering how I will update $300-$4FF. I think it'll be almost the exact same as the screen. I think I'll scroll in RAM as I'm scrolling the screen. So when the scroll is #$00, read $300-$3FF, and when it is #$10, read $310-$40F, when it is #$20, read $320,$41F, etc. Does that make sense? Are any of these ideas good?</div>
<br />I didn't quite get what you said here. One page equals 1 screen, right? So, every time you complete 256 pixels of scrolling, that means you have to load a new screen, over the one that you just left. So that the process of loading a new screen does not slow the game down, you could limit the number of objects you decode per frame.
<br />
<br />If I were to use an object-based level, I'd probably divide it up in screens (as you do with the "objects can not cross to the other name table" rule), each having a 2-byte header: 1 tells wich metatile to use to clear the screen (so that the screens can have different "moods" without you having to define many objects for that), and the other tells how many objects compose the screen. Then each object would follow, with a byte specifying it's type, and another used to specify it's position (4 bits for X and 4 bits for Y).
<br />
<br />When you load a new screen, use the "clear" byte to fill the screen. Then you draw the objects over it, in small groups each frame, until the whole screen is up. Clearing 256 bytes may take a while, but there are ways to speed it up, such as partially unrolling the fill loop, wich is just a bunch of STA's.
<br />
<br />Anyways, these are just ideas. They are not rules or anything.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>