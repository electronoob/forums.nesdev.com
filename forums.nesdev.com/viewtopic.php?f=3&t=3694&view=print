<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Overflow detection</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Overflow detection</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3694">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3694</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>johnnie</b> [ Tue Nov 13, 2007 11:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Overflow detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Which is the easiest way to detect overflow? I can imagine a construct of ifs, but this is quite inefficient. Is there a bitwise mask you can operate on the operands to predict the result? If so, how did you obtain it? I'm working on ADC and got everything (including the carry, which is just set to one if the result exceeds 0xFF) sorted except for the V-flag, which is giving me headaches.
<br />
<br />Thanks for the help so far, it's appreciated <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Nov 13, 2007 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />V logic for ADC:
<br />
<br />set when:  positive + positive = negative
<br />or when:  negative + negative = positive
<br />
<br />therefore, you can check for the sum having mismatching signs as the two values being added.
<br />
<br />Pseudo-code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">temp = A + val;<br />if&#40; carry_set &#41;<br />&nbsp; temp += 1;<br /><br />V_flag = &#40;temp ^ A&#41; &amp; &#40;temp ^ val&#41; &amp; 0x80;<br /></div><br /><br />here, V_flag will be nonzero (0x80) when V is to be set and 0 when it is to be cleared.<br /><br /><br />SBC works similarly, but logic is slightly different:<br /><br />positive - negative = negative<br />negative - positive = positive<br /><br />here, 'A' is the odd one out, not the final value.  Therefore:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">V_flag = &#40;A ^ temp&#41; &amp; &#40;A ^ val&#41; &amp; 0x80;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>johnnie</b> [ Tue Nov 13, 2007 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, thanks. Given immediate addressing, I now have (please bear with me):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">case ADC:<br />&nbsp; M=READMEM&#40;rPC+1&#41;;<br />&nbsp; R=M + rA + &#40;fC ? 1 : 0&#41;;<br />&nbsp; fV = &#40;rA^R&#41; &amp; &#40;M^R&#41; &amp; 0x80;<br />&nbsp; rA = R&amp;0x00FF; /* Copies the LSB of R into the accumulator */<br />&nbsp; fC = R&gt;&gt;8; /* Stores MSB of result into carry */<br />&nbsp; STEP&#40;2,2&#41;; /* Macro that increases the PC and decreases the cycles */<br />&nbsp; break;<br /></div>
<br />
<br />Where: 
<br />
<br />R, M = 16-bits temp variables to store memory reads and results.
<br />rA = accumulator register (#defined for readability)
<br />rPC = program counter
<br />fV = V-flag
<br />fC = carry flag
<br />
<br />So, is this any good? I suppose I can make a macro out of some of this, but this is just for verification. What I am kinda uncertain about, is whether moving a 16 bit integer into a single byte yields a predictable result, even when the MSB of the 16-bit integer is zero (as is the case in my operations).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Nov 13, 2007 1:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks good to me.  Only thing you're missing is setting N and Z according to the result.
<br />
<br /><div class="quotetitle">johnnie wrote:</div><div class="quotecontent">What I am kinda uncertain about, is whether moving a 16 bit integer into a single byte yields a predictable result, even when the MSB of the 16-bit integer is zero (as is the case in my operations).</div>
<br />
<br />To my knowledge, casting to an integer data type of smaller size truncates the value by removing the most significant bits.  So the result would be predictable.
<br />
<br />I never actually confirmed that -- but I'm pretty confident such behavior would be standardized in C/C++.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>johnnie</b> [ Tue Nov 13, 2007 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Talking about subtraction, my reference states that carry should be cleared "if overflow in bit 7". In other words, when my unsigned result &gt; 255, I clear carry. However, it is nowhere said that carry should be set if this overflow did not occur. I have seen several cores (eg. FakeNES) doing just that by setting the carry storage byte to the MSB+1. This correctly clears the carry on overflow of bit 7, but implies setting carry when no overflow occurs. It appears to me that this is incorrect behaviour, or am I wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Tue Nov 13, 2007 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Instructions that change flag states -- <em>always</em> change flag states (that is, they either set them or clear them -- they never leave them untouched).  So SBC should be set when subtraction results in &gt;= 0, and cleared otherwise.  Note this applies only to flags that the instruction affects -- flags that it does not affect are never changed.
<br />
<br />In short:  FakeNES is doing it properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Nov 13, 2007 10:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">johnnie wrote:</div><div class="quotecontent"> What I am kinda uncertain about, is whether moving a 16 bit integer into a single byte yields a predictable result, even when the MSB of the 16-bit integer is zero (as is the case in my operations).</div>
<br />As long as the destination type is unsigned, it just truncates upper bits. If unsigned char is 8 bits on your machine (which it is on almost everything these days),
<br />
<br />(unsigned char) foo
<br />
<br />is equivalent to
<br />
<br />(unsigned char) (foo &amp; 0xFF)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>