<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Portamento Routine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Portamento Routine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=4071">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=4071</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>yatagarasu</b> [ Thu Apr 24, 2008 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Portamento Routine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How do you guys do musical calculations, such as portamento, for low-level music routines? 
<br />
<br />My thought would be to create tables containing values, as you would for physics data (parabolic gravity, etc). But that is alot of data.
<br />
<br />Edit: Removed incorrect portamento formula

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Apr 25, 2008 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, first, to make sure we're talking about the same thing -- in tracked music, portamento is the process of sliding to a note from whereever we are. 
<br />
<br />In MODs, there are two kinds of portamento, depending on hardware capabilities -- impulse tracker calls them "amiga" and "linear" slides. Despite the name, the linear slides aren't linear (they're exponential).
<br />
<br />So-called "amiga slides", used by Screamtracker 3, Fasttracker 2, and all the original trackers for the Amiga, adjust the period (1/frequency) by X per time interval, until it's arrived at the desired note. It happens to be the case that, in the middle of the range in tracked music (C2 in a MOD, C4 in ST3, C5 in impulse tracker), a speed of 0x10 corresponds to one half-step per time interval.  (However, an octave above, it's one whole step per time, and an octave below, it's one quarter step per time)
<br />
<br />The math for the Amiga slides is easy -- just something like<div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;target==current&#41; return;<br /><br />if &#40;target&lt;current&#41;<br />&nbsp;if &#40;target&lt;current-speed&#41;<br />&nbsp; current-=speed;<br />&nbsp;else<br />&nbsp; current=target;<br />else<br />&nbsp;if &#40;target&gt;current+speed&#41;<br />&nbsp; current+=speed;<br />&nbsp;else<br />&nbsp; current=target;<br /></div>and best off, it doesn't require multiply or divide which require  tricks or external hardware on the NES.<br /><br />"Linear slides", used by Impulse Tracker, guarantee this correlation over the entire range, so in an appropriately configured IT song, 0x10 is always one half step per time. They are also supported by MIDI and the NES's pitch slide hardware (albeit with a different conversion)<br /><br />The NES supports pitch slides on the square wave channels, <a href="http://nesdevwiki.org/index.php/APU_Sweep" class="postlink">http://nesdevwiki.org/index.php/APU_Sweep</a>.<br /><br />You could do something similar to what the NES does, like <div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;!--cycle&#41; &#123;<br />&nbsp; current = current - &#40;current&gt;&gt;amount&#41; + &#40;target&gt;&gt;amount&#41;;<br />&nbsp; cycle=reloadvalue;<br />&#125;<br /></div> although this specific code would have problems with integer math, and the 6502 doesn't provide a particularly good way to do a variable shifts.
<br />
<br />Or you could instead store all your current state of pitch (as i briefly entertained but decided was overkill in the end) as 8.8 MIDI-style fixed point numbers (where 60.0=C4, 60.5 is halfway between C4 and C#4, &amp;c). In this case, you'd do your portamento directly in the MIDI-note (expontential) domain, and just convert to the NES's period hardware as necessary.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Apr 25, 2008 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">the 6502 doesn't provide a particularly good way to do a variable shifts.</div><br />You could use a variant on Duff's device. Load part of ROM with 'lsr a; lsr a; lsr a; lsr a; lsr a; lsr a; lsr a; lsr a; rts', compute a vector into that part in RAM, and then JMP indirect through the vector. Sure, it's not as fast as an ARM barrel shifter, but it's only 2 cycles per bit.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Or you could instead store all your current state of pitch (as i briefly entertained but decided was overkill in the end) as 8.8 MIDI-style fixed point numbers (where 60.0=C4, 60.5 is halfway between C4 and C#4, &amp;c). In this case, you'd do your portamento directly in the MIDI-note (expontential) domain, and just convert to the NES's period hardware as necessary.</div>
<br />I've considered doing this. But for each channel, how many cycles would it take to convert "MIDI note 60 + 128/256" to a period?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Apr 25, 2008 12:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I could easily do this in my newest sound engine, which allows me to distort each pitch value by x/32 of a note. I would have to pre-define the note envelope that distorts the note to sweep up to the desired note, though. I suppose I could someday add a routine that will calculate this in real-time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Apr 25, 2008 12:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and best off, it doesn't require multiply or divide which require tricks or external hardware on the NES.<br /></div>
<br />This is completley wrong, and I've decided to fight against that stupid idea that is arround the boards for some time. Mulitply and divide is VERY EASY to do in assembly, all it requires it writing a VERY SIMPLE loop that shifts and conditionally add/substract numbers. But this isn't the point here.
<br />
<br />Since note frequencies are exponential, if you just modify the pitch registers linearly, as shown on the code the other guy posted, it will sound fine, but the slide won't sound linear, it will sound exponential (growing slow down and fast up) because of the exponential nature of the period you control. However, if you write the registers logarithmically, it will compensate the exponential frequency, and sound linear. Some other hardware, like the SNES, gives control over pitch instead of period, so it's the other way arround. To clear it up, if you increase the pitch linearly on the following system :
<br />- Period control (NES, etc...) : First going slow then going fast
<br />- Note control (MIDI syntetisers, ...) : Going up at a constant speed
<br />- Frequency control (SNES, ....) : First going fast then going slow
<br />
<br />Computing exponential values isn't exactly trival in assembly (at least not without floating point or tables), but it's easy to pass trough a recursive procedure that will have an exponential result : Take a number and add/substract one faction of itself regularly, then it will grow/decrease exponentially. For exemple if you take the pitch, shift it right 4 times and add it to itself, the result is a multiply by 17/16, and a recursive multiply by 17/16 is expoential base 17/16. This is basically how hardware sweep works on the NES.
<br />
<br />Another solution (that I've used) is to simply make your sound routine with  note control (and fractional note controls) and then convert pitch from note to period using an logarithmic period table for each note fraction (you only need to do an octave, and can do the others with shifts).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Fri Apr 25, 2008 12:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Or you could instead store all your current state of pitch (as i briefly entertained but decided was overkill in the end) as 8.8 MIDI-style fixed point numbers (where 60.0=C4, 60.5 is halfway between C4 and C#4, &amp;c). In this case, you'd do your portamento directly in the MIDI-note (expontential) domain, and just convert to the NES's period hardware as necessary.</div><br />I've considered doing this. But for each channel, how many cycles would it take to convert "MIDI note 60 + 128/256" to a period?</div>Here's one (straightforward) attempt. I'm assuming that we've got tables for the note periods (period_lo, period_hi) as well as the absolute difference in pitch between two consecutive notes (delta).
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;; x = note<br />;; a = 8-bit fraction<br />;; 43-45 cycles<br /><br />lda delta,x<br />sta square_pos+0<br />eor #$ff<br />sta square_neg+1<br /><br />lda period_lo,x<br />clc<br />adc &#40;square_neg&#41;,y<br />sec<br />sbc &#40;square_pos&#41;,y<br />sta $4002<br /><br />lda period_hi,x<br />sbc #$00<br />sta $4003<br /><br />;; square_pos&#91;$000..$1ff&#93; = i^2/1024<br />;; square_neg&#91;$000..$1ff&#93; = &#40;i-$ff&#41;^2/1024</div>
<br />This might be off by one since we don't take the fractions of the squares into account. This method extends naturally to more reasonable table sizes too if you cut a bit or two off of the fraction, just change the EOR constant and negative table base from $ff to your new mask.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Apr 25, 2008 2:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and best off, it doesn't require multiply or divide which require tricks or external hardware on the NES.<br /></div><br />This is completley wrong, and I've decided to fight against that stupid idea that is around the boards for some time. Multiply and divide is VERY EASY to do in assembly, all it requires it writing a VERY SIMPLE loop that shifts and conditionally add/subtract numbers. But this isn't the point here.<br /></div><br /><br />Sorry. I'm still much more used to other instructions sets (some with hardware multiply, some without, all with less diverse addressing modes), and one of the mantras i learned was "use bitshifts if you can instead", so it's hard to get over that.<br /><br /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">This might be off by one since we don't take the fractions of the squares into account. This method extends naturally to more reasonable table sizes too if you cut a bit or two off of the fraction, just change the EOR constant and negative table base from $ff to your new mask.</div>
<br />
<br />In fact, IT modules only support granularity to 64/halfstep (and 10 octaves), so a 7.6 fixed point number would be sufficient -- and the precision of the NES's sound hardware would make the 64/halfstep only relevant for the bottom 3 or 4 octaves (of the 8 the hardware supports).
<br />
<br />The physical hardware of the NES can't support more than 115/halfstep. (one half step above lowest possible pitch, period 2047, is 1932, or 115 per halfstep)
<br />
<br />(I actually stopped pursuing the fixed point MIDI method because MODs and S3Ms only use amiga slides anyway)
<br />
<br />MIDI, on the other hand, specifies support for up to 8192/halfstep ('master fine tune', or 819200/halfstep in the really defective case where the pitch wheel range is set to 1 cent)), but I don't know what proportion of hardware follows it that precisely. My (decade old) Korg X5 truncates it to cents.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Fri Apr 25, 2008 4:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've implemented the 8.8 approach, works rather nicely, though it certainly isn't fast. I think the cycle count came out to something around 200-300ish per channel you're doing it to, on top of any other work you might be doing.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>