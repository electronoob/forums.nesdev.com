<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Final Fantasy 2&amp;3 save engine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Final Fantasy 2&amp;3 save engine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=366">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=366</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 22, 2005 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Final Fantasy 2&amp;3 save engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been curious about how games with battery holds its saved data, becasue the bytes that are here can be valid as well than invalid.
<br />I've traced some code into FF1, FF2 and FF3. FF1 has only one save slot, and it does just check two variables, if the first one is $55 and the segond one $aa the save is considered as "valid" (I think this is a good vay to handle it, because data in a new RAM chip is often $ff and $00, so $aa and $55 are logically the two value that have the smallest chanes to be there randomly in a ram chip when you power it up).
<br />FF2 and FF3 seems to do it a bit more tricky way. I noted in FF2 that $6000-$62ff handles the current data, $6300-$65ff the first slot, $6600-$68ff the segond slot, $6900-$6bff the third one and eventually $6c00-$6eff the fourth one. The programm does add all the value of a whole slot together, then add 1, and the data seems to be valid only if the result of all this is zero. Seems very crazy isn't it ? Then, if this control has been successfull, another value (like $5a) is checked into the slot.
<br />FF3 does this, but in the other order, so it fist check the value of $5a into the slot, then it does that crazy "mega-addition".
<br />Why would this "mega-addition" be needed ? Does anyone have comment/suggetions about it ? I'll be in need to handle that someday for my Ecological Evolution project.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Wed Jun 22, 2005 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The "mega-addition" you describe sounds like a simple checksum, an <em>extremely</em> common practice used to verify data integrity. My assumption is that when FF2 saves a game, it performs a checksum of all but 1 byte and then uses that data to fill in the last byte so the overall sum is zero (thereby not requiring an explicit checksum value for each savegame).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 22, 2005 10:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The custom stamps in Mario Paint (for Super NES) use a 16-bit hash made of an 8-bit sum and an 8-bit xor.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 23, 2005 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, it takes more sense from this viewpoint, but still, I can't see why this big addition is needed. Just check for one security byte (or two) is okay, I think. Well, just when you're copiying data from the current slot to the save slot, corrupted data could appear in the save slot if the programm is reseted just at this time. In that case, I'll just modify the security byte in order to make the data invalid, copy all the stuff and turn the security back to his good value. I can't see why this simpler and faster method wouldn't work fine.
<br />An even better method would to have index in the SRAM that can cutomisely change all position of every slots (including the current one). So, when you save your game, you just have to change an index byte to tell that the slot n point to the current data, and after that we can copy all data from the old current data slot to the slot n were the overwritten saving data was, and eventually change the current data index. That way, the actual "saving" has no transfer in it, the transfer is done after the saving, so this would avoid corrupter data in save slots.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Sun Jun 26, 2005 11:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When a battery weakens, it is possible for some data to become corrupt.  The checksum is useful for verifying that the saved data has not been garbled.  There are some games out there that can behave really strangely when the battery is low - these games typically don't do a checksum validation and thus will permit loading a corrupted saved game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jun 26, 2005 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I see. Effectively, weak battery can be a scaring problem. Trough, I tested my Zelda card's battery and it's still ~3,17 V, even 15 years after the time it was build (exept if anyone who owned the card prior to me would have changed the battery).
<br />
<br />Also, when running in emulation, this could do some protection against evil players that want to cheat, and search for the number of your level, HP, etc... in the save file trough an hex editor. If they change this, their save will be... deleted ! Hahaha, well done. I'll definitely use this method (or a similar one) for all games with saves I'll write in the future.
<br />
<br />Another way to handle the above problem would be to EOR all the value with a constant, so all data will be "corrupted", but it could be rescued trough the same EOR opperation.
<br />
<br />I just noted that when you turn on the power of a RAM chip, the most often it has only $ff or $00 in it. In both cases, the result of a mega-adittion will be zero, so in both case the save will be valid... So both methods together have to be used.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 26, 2005 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Also, when running in emulation, this could do some protection against evil players that want to cheat, and search for the number of your level, HP, etc... in the save file trough an hex editor. If they change this, their save will be... deleted ! Hahaha, well done. I'll definitely use this method (or a similar one) for all games with saves I'll write in the future.</div>
<br />And then the cheaters will just ips your game to skip verifying the checksum if the player, say, holds player 2 B button. Then at next save, it'll write a correct checksum.
<br />
<br />Even slicker is to only use 11 out of every 15 bytes of the save file, using the rest for error correction using a parallel Hamming code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Jun 26, 2005 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>An even better method would to have index in the SRAM that can cutomisely change all position of every slots (including the current one). So, when you save your game, you just have to change an index byte to tell that the slot n point to the current data, and after that we can copy all data from the old current data slot to the slot n were the overwritten saving data was, and eventually change the current data index. That way, the actual "saving" has no transfer in it, the transfer is done after the saving, so this would avoid corrupter data in save slots.</em>
<br />
<br />Apple's Mac OS file system has a "swap file contents" function for exactly this purpose. When saving a file, they recommend saving to a temporary file, then swapping its data with the original file, so that there is no way to lose the file if the system crashes in the middle of saving.
<br />
<br />Another use of this technique is in flash memory, where there is limited rewrite life. By moving the data each time and updating an index, rewriting is minimized and spread over all the cells.
<br />
<br />This is of course standard fare when doing atomic changes to data shared by multiple threads of execution.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jun 27, 2005 9:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the file system idea I have seems rather good for a NES game, in case of if the power could go down during a save (not because the player has turned off the power button, but, for example, there could be your fuse that become over for any reason or your house can be stopped to be alimented at all in case of storm, or something).
<br />It would be pretty difficult to handle this correctly. For example, the player choose to start a new game. There is two methods to handle this. We can check if the slot 0 is used for any save file, if it is, check for slot 1, etc.... then, the first "free" slot is assigned to the current data, and the game can start. When saving, the game should change the saved file to the used slot, but what becomes the current slot ? If it doesn't change, the game will be "permanently" saved, and it'll be saved even if the player don't want it to. This could be interessting for games that have a "supend" commend like Just Breed and Fire Emblem. So, when saving, we have to interchange those two files. Well, first change current slot index, then copy from the saved file to it or the opposite ? Using this method is something tough.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Even slicker is to only use 11 out of every 15 bytes of the save file, using the rest for error correction using a parallel Hamming code. <br /> <br /> <br /></div>
<br />I really don't see what you do mean by this. Anyway, if the cheater really want to cheat, it's impossible to avoid them to cheat. But, it's possible to render their task harder. Change the code isn't for everyone, but change the data trough a hex editor is.
<br />Also, found a method to avoid savestates to work would be pretty interessting, but I really can't see how it would be possible to handle that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Jun 27, 2005 3:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In a game with 3 save slots, have 4 actual slots in SRAM and a table of 3 indicies for the visible save slots. When saving, find the one unused actual slot, save there, then change the index in the table. The key is to use an atomic operation when changing data, which either succeeds or fails without changing data. In this case, the visible data doesn't change until the index is updated at the end.
<br />
<br />One problem with this is that the table of indicies is open to corruption. You could have the actual slots marked as valid/invalid to allow "recovery" of slots if the index becomes corrupt, much like a filesystem does when the directory doesn't get updated properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Jun 28, 2005 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, that sound like a good algorithm
<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The key is to use an atomic operation when changing data, which either succeeds or fails without changing data. In this case, the visible data doesn't change until the index is updated at the end.</div><br />I didn't get this part actually. You mean that the data from the slot that have been saved should be transfered to the new unused slot, that was the old save data, to be able to continue the game witout affect saved games, right ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">One problem with this is that the table of indicies is open to corruption. You could have the actual slots marked as valid/invalid to allow "recovery" of slots if the index becomes corrupt, much like a filesystem does when the directory doesn't get updated properly.</div>
<br />A simple way to handle this would be to dupplicate each byto of index. So it would take 6 bytes, and if they're not similar, the non-similar ones can be considered as dumb and the save become non-valid. Well, still complicated. An easy way to make a save non valid is to volontary break its checksum, but the best of the best is to reserv a byte for this, if possible check for an $5a or something with as much bit set than clear in it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jun 28, 2005 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, you start out with an index with values 1, 2, 3 and internal save slots 1, 2, and 3 used, and 4 is unused. Player saves game to slot 3. Internally you save game to slot 4, then change the index to 1, 2, 4. Now internal slots 1, 2, and 4 are used, and 3 is unused.
<br />
<br />The key is that if power is removed before the index is updated, it is as if the save was never done. After the single byte in the index is changed from 3 to 4, the save is complete. This is the atomic part (atomic meaning indivisible, not exactly the definition the physicists follow anymore!).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Tue Jun 28, 2005 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To make it a bit 'nicer', you could then copy slot 4 into slot 3 and subsequently set the index back to 1,2,3. If the power was interrupted during the 4-&gt;3 copy, the program could simply restart later when it noticed the index was not set to 1,2,3.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 29, 2005 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I got the atomic part, lol.
<br />Quietust : Your idea isn't bad, but at this point index become useless, only one byte (or two to avoid corruption) become used, then, if zero the index are 1, 2, 3, else if 1 it's 4, 2, 3, if 2 it's 1, 4, 3 and eventually if 3 it's 1, 2, 4.
<br />So, when saving : The index byte mentionned above take the number of the slot saved, then slot 4 is copied to slot x, then the index byte returns to it's standard value (0).
<br />When loading : Check for the index byte (or the two index bytes, if they matches do like if there were only one, else.... all saves are deleted ?), if it's zero load data from slots 1, 2, 3, else, the slot were the number match with the index byte(s) is loaded from slot 4 instead.
<br />Pretty good at all, but I don't know if all this stuff would be needed. Actually, a single transfer from one block to another block like that (let's consider the worst case, where only lda [$xx],Y are used) :
<br />Let's consider the game uses four software slots, where 3 are for saves and one for current data, and all these slots with a size of 1kb (that's exactly the FF3's case) :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />lda &#91;CurrentSlot&#93;,Y&nbsp; &nbsp;;5 cylces<br />sta &#91;SavedSlot&#93;,Y&nbsp; &nbsp; ;11 cycles<br />iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;13 cylces<br />bne loop&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;16*255 = 3315 cycles + 1 &#40;not branch the last time&#41;<br />inc CurrentSlot ;3321 cycles<br />inc SavedSlot&nbsp; &nbsp;;3326 cylces<br />dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3328 cycles<br />bpl loop&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3331 cycles in total*4 &#40;size = 1kb&#41; = 13 324 cycles</div>
<br />
<br />So, let's round down the processor speed to 1,5 MHz (it's actually 1,7.....), this would make 13 324*(1/1 500 000) = 8,88 ms, (and it'll actually be less time). I would consider that if the power goes off during this very short amount of time, the player is REALLY not lucky. This system is surely needed on GBA games or something, but I dobt it would be required on a NES game. However, it can be used to be really safe.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>