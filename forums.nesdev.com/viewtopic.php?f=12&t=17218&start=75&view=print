<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - new to snes environment, have some questions.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">new to snes environment, have some questions.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=17218">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=17218</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Wed Apr 25, 2018 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure. I'm just doing the test right at the very beginning of the NMI. It's the only code I have running, then I end with an RTI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Apr 25, 2018 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You have to write two bytes minimum to OAM or CGRAM before it shows up in the actual memory.  There's a word buffer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Wed Apr 25, 2018 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So if X,Y are 16 bits, and I want the order of bytes stored to oam are 88,FF, I'd do LDY #$FF88 STA $2104<br /><br />Am I understanding that correctly?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 25, 2018 3:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For OAM, both the even byte and the odd byte have to be stored to the same address, one after the other.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Apr 25, 2018 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In other words, you can't use 16-bit writes, because then the top byte will go to $2105.  Writing $FF88 to $2104 as a 16-bit value would set all four BG layers to 16x16 tile size, set the BG3 priority bit, and put the PPU in Mode 7, and OAM would still be blank.<br /><br />More importantly, did you mean STY and not STA?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Wed Apr 25, 2018 4:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">More importantly, did you mean STY and not STA?</div><br /><br />Yes, STY, sorry I had a typo.<br /><br />And I got the oam to write without dma, the info on the write register being a word helped!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Apr 25, 2018 5:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infidelity wrote:</div><div class="quotecontent">And I got the oam to write without dma, the info on the write register being a word helped!</div><br />From <a href="http://forums.nesdev.com/viewtopic.php?p=216886#p216886" class="postlink">my previous post</a>:<br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">$2104 is write-only an 8-bit double-write register (i.e. it's like $2122 but for OAM).<br /></div><br />FeelsBadMan.  By &quot;8-bit double-write&quot;, that means the MMIO register itself is a single address (ex. $2104), not a pair of addresses (ex. $2104 + $2105), and that it requires you to write twice to it (low byte first, then high byte).  It's just like MMIO register $2122 in this respect.  A &quot;full 16-bit address&quot; would be like $2116 and $2117 (for PPU RAM access), where you can do <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rep #$10 ldx #$1234 stx $2116</tt> to write $34 to $2116 and $12 to $2117.<br /><br />The SNES has a few &quot;inconsistencies&quot; like this (some MMIOs are 8-bit and double-write, others are two MMIO registers in sequence to make life easier when using 16-bit registers), so you really have to read the documentation slowly/clearly.  This is one reason why I really don't like the Super Famicom Development Wiki's format of MMIO register descriptions:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2104&nbsp; wb++--<br />&nbsp; &nbsp; &nbsp; &nbsp; dddddddd<br /><br />2116&nbsp; wl++?-<br />2117&nbsp; wh++?-<br />&nbsp; &nbsp; &nbsp; &nbsp; aaaaaaaa aaaaaaaa<br /><br />2122&nbsp; ww+++-<br />&nbsp; &nbsp; &nbsp; &nbsp; -bbbbbgg gggrrrrr<br /></div><br />Cryptic shit.  Sorry, but my SNES docs were much more clear:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">|rwd2?|Address|Title &amp; Explanation&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />||||||-----------------------------------------------------------------------|<br />||||||&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />||||||__&nbsp; ?: Don't know what the statistics on this register are&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|||||____ 2: 2 byte (1 word) length register&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />||||_____ d: Double-byte write required when writing to this register&nbsp; &nbsp; &nbsp; &nbsp; |<br />|||______ w: Writable register&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />||_______ r: Readable register&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br /><br />|----------------------------------------------------------------------------|<br />|rwd2?|Address|Title &amp; Explanation&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|----------------------------------------------------------------------------|<br />...<br />| wd&nbsp; |$2104&nbsp; |OAM data register &#91;OAMDATA&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|???????? ????????&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />...<br />| w 2 |$2116&nbsp; |Video port address &#91;VMADDL/VMADDH&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|???????? ????????&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />...<br />| wd&nbsp; |$2122&nbsp; |Colour data register &#91;CGDATA&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|xxxxxxxx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x: Value of colour.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br /></div><br />This all should help explain why bits 4 and 2-0 of $43x0 are so incredibly important.  And you'll find other docs online that document these wrong as well (such as saying %010 is the same as %000 -- no!).  Hell, even I got mine wrong back in the 90s.  Sticking to general DMA:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">| w&nbsp; &nbsp;|$43x0&nbsp; |DMA Control register &#91;DMAPX&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|vh0cbaaa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v: 0 = CPU memory -&gt; PPU.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 = PPU -&gt; CPU memory.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h: For HDMA only:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0 = Absolute addressing.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 = Indirect addressing.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c: 0 = Auto address inc/decrement.&nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 = Fixed address (for VRAM, etc.).&nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b: 0 = Automatic increment.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 = Automatic decrement.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a: Transfer type:<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;000 = 1 address write twice: LH.&nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;001 = 2 addresses: LH.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;010 = 1 address write once.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;011 = 2 addresses write twice: LLHH&nbsp; |<br />|&nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;100 = 4 addresses: LHLH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br /></div><br /><a href="https://wiki.superfamicom.org/grog's-guide-to-dma-and-hdma-on-the-snes" class="postlink">Here's another one</a>, more clear than mine, but still wrong (%010 is not the same as %000!)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$43x0: AB0CDEEE&nbsp; &nbsp; DMA Setup Register &#91;DMAPx&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A -- Transfer Direction (0==CPU -&gt; PPU, 1==PPU -&gt; CPU)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B -- HDMA Addressing Mode (0==Absolute, 1==Indirect)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;C -- CPU addr Auto inc/dec selection (0==Increment, 1==Decrement)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;D -- CPU addr Auto inc/dec enable (0==Enable, 1==Disable (fixed))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;E -- DMA Transfer Word Select<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; For DMA: (B0-B3 are the source data bytes, $21XX is PPU destination)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;000 == Write 1 byte, B0-&gt;$21xx<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;001 == Write 2 bytes, B0-&gt;$21xx B1-&gt;$21XX+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;010 == Identical to 000<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;011 == Write 4 bytes, B0-&gt;$21XX B1-&gt;$21XX B2-&gt;$21XX+1 B3-&gt;$21XX+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;100 == Write 4 bytes, B0-&gt;$21XX B1-&gt;$21XX+1 B2-&gt;$21XX+2 B3-&gt;$21XX+3<br /></div><br />What it should have said:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;010 == Write 2 bytes, B0-&gt;$21xx B0-&gt;$21xx (i.e. same byte, written twice)<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Wed Apr 25, 2018 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">(i.e. same byte, written twice)</div><br /><br />Are you sure about this part? My understanding (based on higan) is that the A-bus address is always updated after every byte written regardless of transfer type.<br /><br />(Which, given that regular DMA size is measured in bytes and not &quot;transfer units&quot;, means that it <em>would</em> be equivalent to %000 for regular DMA, but not HDMA)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Apr 25, 2018 10:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Revenant wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">(i.e. same byte, written twice)</div><br /><br />Are you sure about this part? My understanding (based on higan) is that the A-bus address is always updated after every byte written regardless of transfer type.<br /><br />(Which, given that regular DMA size is measured in bytes and not &quot;transfer units&quot;, means that it <em>would</em> be equivalent to %000 for regular DMA, but not HDMA)</div><br />Honestly, I'm not sure.  Quoting official documentation:<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=12457" alt="Capture.PNG" /><br />
			<span class="gensmall">Capture.PNG [ 49.05 KiB | Viewed 1600 times ]</span>
		

		<br />
	</div><br />The description for %010 means one of two things:<br /><br />a) Write a single byte to the destination address two times (ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">B0-&gt;$21xx B0-&gt;$21xx</tt>)<br />b) Write a single byte to the destination address and destination address+1 (ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">B0-&gt;$21xx B0-&gt;$21xx+1</tt>)<br /><br />From the diagrams we can tell:<br /><br />* There is a difference between %000 and %010 (&quot;1-ADDRESS&quot; vs. &quot;1-ADDRESS (WRITE TWICE)&quot;)<br />* The same description is used for HDMA (but with additional specification of L,L for low byte, low byte)<br />* The description for general DMA %010 is a little vague, but HDMA helps gives us a slightly better idea.<br /><br />Conclusion: if the %010 description meant (b), then it would have been listed as &quot;2-ADDRESS&quot; (since that is certainly the terminology used to refer to writing to multiple (sequential) destination addresses).<br /><br />I have several revisions of manuals (not just the popular one that circulates), across ~3 years, and they all denote %010 the above way.<br /><br />Going back to &quot;Grog's Guide to DMA and HDMA&quot; as a comparison:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$43x0: AB0CDEEE&nbsp; &nbsp; DMA Setup Register &#91;DMAPx&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A -- Transfer Direction (0==CPU -&gt; PPU, 1==PPU -&gt; CPU)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B -- HDMA Addressing Mode (0==Absolute, 1==Indirect)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;C -- CPU addr Auto inc/dec selection (0==Increment, 1==Decrement)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;D -- CPU addr Auto inc/dec enable (0==Enable, 1==Disable (fixed))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;E -- DMA Transfer Word Select<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; For DMA: (B0-B3 are the source data bytes, $21XX is PPU destination)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;000 == Write 1 byte, B0-&gt;$21xx<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;001 == Write 2 bytes, B0-&gt;$21xx B1-&gt;$21XX+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;010 == Identical to 000<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;011 == Write 4 bytes, B0-&gt;$21XX B1-&gt;$21XX B2-&gt;$21XX+1 B3-&gt;$21XX+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;100 == Write 4 bytes, B0-&gt;$21XX B1-&gt;$21XX+1 B2-&gt;$21XX+2 B3-&gt;$21XX+3<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; For HDMA: (B0-B3 are the source data bytes, $21XX is PPU destination)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;000 == Write 1 byte, B0-&gt;$21xx<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;001 == Write 2 bytes, B0-&gt;$21XX, B1-&gt;$21XX+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;010 == Write 2 bytes, B0-&gt;$21XX, B1-&gt;$21XX<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;011 == Write 4 bytes, B0-&gt;$21XX, B1-&gt;$21XX B2-&gt;$21XX+1 B3-&gt;$21XX+1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;100 == Write 4 bytes, B0-&gt;$21XX, B1-&gt;$21XX+1, B2-&gt;$21XX+2, B3-&gt;$21XX+3<br /></div><br />The description of %010 here claims %010 is the same as %000, yet HDMA's %010 writes two (different) bytes to the same destination (&quot;1-ADDRESS&quot;)... except the official documentation clearly says <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">L,L</tt> not <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">L,H</tt>.  That would mean the same source byte.<br /><br /><a href="https://wiki.superfamicom.org/#toc-dmapx-dma-control-for-channel-x-x-0-7-" class="postlink">Super Famicom Development Wiki</a> says this -- and documents even more modes that aren't in the official documentation:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">43x0 rwb++++<br />&nbsp; &nbsp; &nbsp; &nbsp; da-ifttt<br />&nbsp; &nbsp; &nbsp; &nbsp; d&nbsp; &nbsp; &nbsp; &nbsp; = Transfer Direction.^<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a&nbsp; &nbsp; &nbsp; &nbsp;= HDMA Addressing Mode.^^<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i&nbsp; &nbsp; &nbsp;= DMA Address Increment.^^^<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f&nbsp; &nbsp; = DMA Fixed Transfer.^^^^<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; ttt&nbsp; = Transfer Mode.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000 =&gt; 1 register write once&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(1 byte:&nbsp; p&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 001 =&gt; 2 registers write once&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (2 bytes: p, p+1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 010 =&gt; 1 register write twice&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (2 bytes: p, p&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 011 =&gt; 2 registers write twice each&nbsp; &nbsp; &nbsp; (4 bytes: p, p,&nbsp; &nbsp;p+1, p+1)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 100 =&gt; 4 registers write once&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (4 bytes: p, p+1, p+2, p+3)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 101 =&gt; 2 registers write twice alternate (4 bytes: p, p+1, p,&nbsp; &nbsp;p+1)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 110 =&gt; 1 register write twice&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (2 bytes: p, p&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 111 =&gt; 2 registers write twice each&nbsp; &nbsp; &nbsp; (4 bytes: p, p,&nbsp; &nbsp;p+1, p+1)<br /></div><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">p</tt> in this context is the first individual byte read from the source.  So, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">B0-&gt;$21xx B0-&gt;$21xx</tt>.  This could also (to me) be represented as what Nintendo said: &quot;1-ADDRESS (WRITE TWICE) L,L&quot;.<br /><br />I don't know of any games which use %010 off the top of my head (do I look like I sit around disassembling every commercial game and analysing their DMA params? Haha :-) ), but it's safe to say we can't trust emulator source code, and everyone's documentation is either inconsistent or wrong (including my own).<br /><br />Possible to test on hardware?  Absolutely!  Should it be tested on hardware?  Absolutely!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Apr 25, 2018 10:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I used HDMA mode 2 in <a href="https://forums.nesdev.com/viewtopic.php?p=174494#p174494" class="postlink">my PPU bus activity</a> program to adjust the vertical scrolling for the offset-per-tile layer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Thu Apr 26, 2018 6:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll have to recheck my routine for $2104, I'm doing a double write, but it's storing at 2 addresses in oam, but I'm able to load a table for the values I want. There's a lot for me to digest and understand correctly, a bit overwhelmed a points, but as long as I get the results I'm trying to accomplish, I'll know I'm on the right track and continously study what's going on, that is giving me my desired results. <br /><br />I have another question regarding &quot;WAI&quot;<br /><br />Is that 1 byte opcode the same as what the NES uses for cpu cycles  (LDA $2002, DEX, BPL back to DEX)? I want to know examples of how to use WAI properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Thu Apr 26, 2018 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I don't know of any games which use %010 off the top of my head (do I look like I sit around disassembling every commercial game and analysing their DMA params? Haha <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> ), but it's safe to say we can't trust emulator source code, and everyone's documentation is either inconsistent or wrong (including my own).<br /><br />Possible to test on hardware?  Absolutely!  Should it be tested on hardware?  Absolutely!</div><br />I don't know why I somehow failed to remember this in my last post (other than it being somewhat late at night), but the last demo I wrote/released uses %010 for CGRAM color gradients. Presumably, so does every other game that uses HDMA to perform color gradient effects. So yes, it writes two different bytes.<br /><br />My interpretation of the official documentation's &quot;1-ADDRESS (WRITE TWICE)&quot; is that it's only supposed to describe which type of register it's designed to write to. It clearly also states that it &quot;transfers&quot; two bytes, not just performs two writes. (Likewise, &quot;L&quot; and &quot;H&quot; are clearly referring to register addresses, not source bytes.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Apr 26, 2018 12:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infidelity wrote:</div><div class="quotecontent">I have another question regarding &quot;WAI&quot;<br /><br />Is that 1 byte opcode the same as what the NES uses for cpu cycles  (LDA $2002, DEX, BPL back to DEX)? I want to know examples of how to use WAI properly.</div><br />With NMI-on-VBlank enabled, you can use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">wai</tt> in your main loop to effectively wait for VBlank to finish (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">wai / lda #1</tt> would sit and wait for NMI to occur, then after <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rti</tt> in your NMI routine, the next instruction run would be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #1</tt>).  Technically it waits for any interrupt (NMI, IRQ, ABORT, or RESET (not that the latter matters)).  It's quicker, easier, faster (cycle-wise) and more precise (timing-wise) than polling $4210 and watching bit 7 (akin to the above loop on the NES) but it depends on what your needs are.<br /><br />If you don't have a 65816 instruction manual by now, <a href="https://wiki.nesdev.com/w/index.php/Programming_guide#Online" class="postlink">then get it</a>.  Pages 192-202 (Chapter 13) and page 420 (opcode description) are useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Apr 26, 2018 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Revenant wrote:</div><div class="quotecontent">I don't know why I somehow failed to remember this in my last post (other than it being somewhat late at night), but the last demo I wrote/released uses %010 for CGRAM color gradients. Presumably, so does every other game that uses HDMA to perform color gradient effects. So yes, it writes two different bytes.</div><br />Respectfully, this description is no better than any of the existing documentation.  :\  Which is it?<br /><br />a) <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">B0-&gt;$21xx B0-&gt;$21xx</tt> (e.g. byte 0 of source written to $21xx, followed by byte 0 of source written to $21xx)<br />b) <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">B0-&gt;$21xx B1-&gt;$21xx</tt> (e.g. byte 0 of source written to $21xx, followed by byte 1 of source written to $21xx)<br /><br />If you're using it for CGRAM data (ex. writes to $2122) then it's almost certainly (b), which means that yes, the very last paragraph of <a href="http://forums.nesdev.com/viewtopic.php?p=217515#p217515" class="postlink">my previous post</a> is incorrect.<br /><br />Regardless, %010 is not the same as %000 (re: Grog's guide).  Meanwhile, the Super Famicom Development Wiki doesn't bother to explain what <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">p</tt> is, when if (b) is true, then <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">p</tt> refers to the destination address only -- and that the source address is effectively always incrementing by 1 (which would correlate with what you said earlier, re: A-bus address always incrementing).  It's like whoever wrote this was trying to be terse through implication (and it's described differently in two different parts of the site -- here we are again with an example of why wikis are not inherently better for documentation).<br /><br />Overall, I actually prefer the nomenclature from Grog's guide since it makes it clearer what source data is going to what destination.  This thread is a good example of why denoting both is important.  Without both, the programmer doesn't know how to format the data that's used as the source.<br /><br /><div class="quotetitle">Revenant wrote:</div><div class="quotecontent">My interpretation of the official documentation's &quot;1-ADDRESS (WRITE TWICE)&quot; is that it's only supposed to describe which type of register it's designed to write to. It clearly also states that it &quot;transfers&quot; two bytes, not just performs two writes. (Likewise, &quot;L&quot; and &quot;H&quot; are clearly referring to register addresses, not source bytes.)</div><br />It's subjective.  Two writes to a single MMIO register still technically is &quot;transferring&quot; two bytes of data.  What matter is *which* two bytes it's transferring (from the source).  Case in point: %001 is described &quot;2 BYTE&quot;, &quot;2-ADDRESS (VRAM etc.) L,H&quot; -- two different source bytes are transferred, to two different destination addresses (i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">B0-&gt;$21xx, B1-&gt;$21xx+1</tt>).<br /><br />Nintendo's documentation has always been unclear/vague in this regard, but what we have in the community is still not crystal clear to programmers.  I mean we can sit here and debate what's what 'til the cows come home, but this thread acts as solid proof that it's not clear to programmers.  And without clear/concise examples that can be referenced in the existing documentation, the situation doesn't improve.  (To this, please do not tell me &quot;Well it's a wiki, go fix it yourself&quot;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Apr 26, 2018 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to snes environment, have some questions.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Revenant wrote:</div><div class="quotecontent">the last demo I wrote/released uses %010 for CGRAM color gradients. Presumably, so does every other game that uses HDMA to perform color gradient effects.</div><br />I use %x11, so that I can set both the address and the colour with one channel.  This method wastes a write because the address gets hit twice, but unfortunately (p, p+1, p+1) is not an available HDMA pattern.<br /><br />Sadly, (p, p, p, p) isn't available either, so if you want to do &gt;8 consecutive colours you have to use regular DMA in an IRQ...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>