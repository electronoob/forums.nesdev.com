<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=5997" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-01-28T11:01:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=5997</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-01-28T11:01:15-07:00</updated>
<published>2010-01-28T11:01:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55836#p55836</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55836#p55836"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55836#p55836"><![CDATA[
<div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent"><br />jmp ($xxxx) is safe to use in this case because you are jumping to a variable, which is obviously not going to straddle a page boundary?<br /></div><br />Correct. You can .align 2 before declaring the variable to be absolutely sure.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jan 28, 2010 11:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[UncleSporky]]></name></author>
<updated>2010-01-28T09:48:30-07:00</updated>
<published>2010-01-28T09:48:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55832#p55832</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55832#p55832"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55832#p55832"><![CDATA[
I want to make sure I have something straight here, regarding the jmp indirect bug:<br /><br />jmp ($xxxx) is safe to use in this case because you are jumping to a variable, which is obviously not going to straddle a page boundary?  (Unless you set it up that way...)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3438">UncleSporky</a> — Thu Jan 28, 2010 9:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-01-28T08:06:34-07:00</updated>
<published>2010-01-28T08:06:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55823#p55823</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55823#p55823"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55823#p55823"><![CDATA[
The only place I use the rts trick, I used it instead of jmp() because it saved me 2 bytes (2 times pha instead of 2 times sta zeropage), and because it removes the need of 2 temp variables.<br /><br />There is absolutely no other advantage of this over a regular jmp().<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Jan 28, 2010 8:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-01-28T07:28:00-07:00</updated>
<published>2010-01-28T07:28:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55821#p55821</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55821#p55821"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55821#p55821"><![CDATA[
Thanks for the additional pointers. I'm starting to learn that Disch likes to frame his answer assuming the OP had some reason for the original way they structured their code: He once found a way to solve a convoluted problem I was trying to solve where I didn't really need the solution (wraparound test, remember?)---and he has done it again for me =) In both cases, it seems I should just change my approach and do it the simpler way. I was using my macro in several different places in my code where I use a specific ZP variable to hold the address to jump to. I guess what I'll change it to now is just a jsr to a location that jmp (to what I was passing into the macro), and I'll save an extra jmp.  Thanks everyone!<br /><br />For some reason, I had been really locked into that "rts trick" thing, thinking it was the only way to simulate an indirect jsr. It didn't occur to me to search for some other way of doing it, hence my original, rather convoluted macro. Is there really any value to using the rts trick?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Thu Jan 28, 2010 7:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-01-28T07:15:09-07:00</updated>
<published>2010-01-28T07:15:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55818#p55818</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55818#p55818"/>
<title type="html"><![CDATA[Re: low overhead indirect jsr (rts trick)?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55818#p55818"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I have a few temp locations in ZP that I use as scratchpad memory [for] indirect jumps to some of the temp locations<br /></div><br />So you're writing the function pointer to a global variable in RAM. You almost hit on the one advantage of using the stack for jump table calls vs. a temporary location in allocated memory (zero page or BSS): you can use jump tables in both your main thread and your interrupt handler without them stepping on each other.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Jan 28, 2010 7:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-01-27T23:59:20-07:00</updated>
<published>2010-01-27T23:59:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55804#p55804</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55804#p55804"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55804#p55804"><![CDATA[
<div class="quotetitle">Celius wrote:</div><div class="quotecontent"><br />Except I'm not sure why there's a JMP to the JSR, which is after the JMP ($XXXX).<br /></div><br />Disch's solution is a macro which is to be used "in place", so if you want to return to the correct location later you have to skip the indirect jump.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Why not just have one universal "IndirectJSR" routine that you use and never have to define again? I suppose if you're using different values for $XXXX, then yes, you'd want more than one routine<br /></div><br />Which is the solution I presented. With 3 or 4 fake "address registers" I have never had to worry about this again.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It seems the macro makes things easier to program, but performance goes down a little, and it takes up more space, it seems<br /></div><br />In this case, yes. Usually macros do need more space, but they are supposed to be faster, because there is no calling and returning, but in this particular case using macros is indeed a bit slower, so I really don't see a reason to use them in this case.<br /><br />For every address you call this macro with, two JMP instructions will be generated, when you could very well manually write just the indirect one somewhere else... So you are really just wasting space and time (it may not be much, but there is no advantage here that justifies the waste) IMO.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jan 27, 2010 11:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2010-01-27T22:57:51-07:00</updated>
<published>2010-01-27T22:57:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55801#p55801</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55801#p55801"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55801#p55801"><![CDATA[
If you're looking to have a substitute for the non-existent JSR ($XXXX), and you only want to use 2 bytes of RAM for the instruction, do this in your code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">....<br />jsr IndirectJSR<br />....<br /><br />IndirectJSR:<br />jmp &#40;$XXXX&#41;<br /><br /></div><br /><br />That takes 3 or 5 extra cycles, and saves you a lot of hassle. And wherever $XXXX points to, you can have an RTS and it will take you right back to after the "jsr IndirectJSR". I haven't tested this method; I just came up with it and I think it would work great.<br /><br />EDIT: Oh, I guess Disch already kind of posted the same solution! Except I'm not sure why there's a JMP to the JSR, which is after the JMP ($XXXX). Why not just have one universal "IndirectJSR" routine that you use and never have to define again? I suppose if you're using different values for $XXXX, then yes, you'd want more than one routine, but it wastes time to needlessly stick in a JMP + 6 to skip the indirect jump that you JSR to... It seems the macro makes things easier to program, but performance goes down a little, and it takes up more space, it seems.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Wed Jan 27, 2010 10:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-01-27T21:06:19-07:00</updated>
<published>2010-01-27T21:06:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55799#p55799</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55799#p55799"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55799#p55799"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />I never liked the "push your address then RTS it" crap.  It always seemed absurd to me.<br /></div><br />I don't think it's necessarily crap, but it's also not such the big find that we sometimes make it to be. It is 1 cycle slower than the indirect JMP way if the JMP uses ZP to hold the address, but it is 1 cycle faster if the JMP doesn't use ZP. Also, there are cases when we don't want to create a new variable just for a certain purpose, and we'd rather use the stack instead. But I admit that there are few advantages, when any, in using the JSR trick instead of an indirect jump.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jan 27, 2010 9:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-01-27T21:23:20-07:00</updated>
<published>2010-01-27T20:54:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55798#p55798</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55798#p55798"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55798#p55798"><![CDATA[
I'm glad I posted. Thanks for the ideas/correction! I wrote a new macro based on Disch's idea, and holy crap, that's a lot simpler =).<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro indirectJsr address<br /><br />  jmp *+6<br />  jmp &#40;address&#41;<br />  jsr *-3<br /><br />.endmacro</div><br /><br />*edit*<br />I guess I could use phony labels like Disch mentioned and do:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  <br />jmp :++<br />: jmp &#40;address&#41;<br />: jsr :--<br /></div><br /><br />But, I think I'll stick with the program counter approach just to account for the extremely unlikely situation I'm still using anonymous labels anywhere in my code. I tried to get rid of all of them a while back, it makes one's code impossible to read.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Wed Jan 27, 2010 8:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-01-27T20:46:19-07:00</updated>
<published>2010-01-27T20:46:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55797#p55797</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55797#p55797"/>
<title type="html"><![CDATA[Re: low overhead indirect jsr (rts trick)?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55797#p55797"><![CDATA[
I have to honestly say that this method is not very good. First, even if you plant the return address like you're doing, I see no reason for you to use...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  lda address+1<br />  pha<br />  lda address<br />  pha<br />  <br />  rts</div><br />...intead of...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  jmp &#40;address&#41;</div><br />...which is much faster. It's like you want to use the RTS just for the heck of it, not because you need it. That trick is often used with jump tables, because you'd have to fetch the destination address from the table even if you were to use JMP (), but in your case the address is already at a known location in RAM, there is absolutely no need to copy it to the stack.<br /><br />You also waste a lot of time planting the return address manually when you could do it with a JSR much quicker. If I were you I wouldn't worry about "having to jump far away from the code just to jump far away again", because although it sounds like a bad thing to do it's still faster and more compact than your current solution.<br /><br />Here's how I do it: I have a few temp locations in ZP that I use as scratchpad memory. Somewhere in ROM I have a few (as many as necessary, but usually no more than 3 or 4) indirect jumps to some of the temp locations acting as subroutines. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   Address0 .dsb 2<br />   Address1 .dsb 2<br />   Address2 .dsb 2<br />   Address3 .dsb 2<br /><br />   &#40;...&#41;<br /><br />CallAddress0:<br />   jmp &#40;Address0&#41;<br /><br />CallAddress1:<br />   jmp &#40;Address1&#41;<br /><br />CallAddress2:<br />   jmp &#40;Address2&#41;<br /><br />CallAddress3:<br />   jmp &#40;Address3&#41;</div><br />Those locations act as virtual address registers, which I can use not only for indirect JSR'ing but also as pointers and such. Those few indirect JMPs take much less space than what your macro expands to.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jan 27, 2010 8:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2010-01-27T20:45:46-07:00</updated>
<published>2010-01-27T20:45:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55796#p55796</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55796#p55796"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55796#p55796"><![CDATA[
"Low overhead"?<br /><br />This seems like high overhead.  I never liked the "push your address then RTS it" crap.  It always seemed absurd to me.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; bytes,cycles<br />;  &#40;my cycle count migiht be off.  I'm doing this from memory<br />;  and I'm rusty&#41;<br /><br />.macro indirectJsr address<br /><br />  lda #&gt;&#40;*+12&#41;  ; 2,2<br />  pha             ; 1,3<br />  lda #&lt;&#40;*+9&#41; ; 2,2<br />  pha             ; 1,3<br /> <br />  lda address+1  ; 3,4<br />  pha         ; 1,3<br />  lda address  ; 3,4<br />  pha         ; 1,3<br /> <br />  rts    ; 1, 6<br /><br />.endmacro<br /><br />; total:   15 bytes<br />;           30 cycles<br />; AND your 'address' has to be -1 the actual address you want to jump to<br />;  &#40;ugh&#41;<br /></div><br /><br />The straightforward approach seems simpler:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; this is pseudo code<br />; my ca65 macros &#40;or whatever&#41; is rusty<br /><br />.macro IndirectJSR address<br />  jmp phoneylabel_jsr  ; 3,3<br /><br />phoneylabel_jmp:<br />  jmp &#40;address&#41;  ; 3,5<br /><br />phoneylabel_jsr:<br />  jsr phoneylabel_jmp  ; 3,6<br /><br />; total:  9 bytes<br />;          14 cycles<br /></div><br /><br />iirc you can have ca65 generate phoney labels that only appear in the macro, so it won't interfere with other labels in your program.  I forget exactly how that works though.<br /><br />But having a common indirect JMP somewhere in the hardwired bank and then JSRing to it still seems like the best solution.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Jan 27, 2010 8:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sivak]]></name></author>
<updated>2010-01-27T20:34:20-07:00</updated>
<published>2010-01-27T20:34:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55795#p55795</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55795#p55795"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55795#p55795"><![CDATA[
Interesting on the first part.  But for the last part, you'd need to read from a table that has something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TableOfPlaces:<br /> .dw DesiredAddressA - 1, DesiredAddressB - 1<br /><br />LDY navigator<br />LDA TableOfPlaces + 1, Y<br />PHA<br />LDA TableOfPlaces, Y<br />PHA<br />RTS<br /></div><br /><br />That's how I did it, anyway.  I think the indirect jump method is one fewer cycle though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3374">Sivak</a> — Wed Jan 27, 2010 8:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-01-28T07:40:06-07:00</updated>
<published>2010-01-27T20:14:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55794#p55794</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55794#p55794"/>
<title type="html"><![CDATA[convoluted rts trick macro...need better approach]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5997&amp;p=55794#p55794"><![CDATA[
I had a few indirect jumps followed by hard coded return locations in parts of my game engine. I decided to revise this and use the well known "rts trick." The wiki pointed out you must have a subroutine that does the trick in order for the jsr to push the correct return address on the stack. However I didn't like that I'd have to jump far away from the code just to jump far away again, so I developed this macro (ca65 syntax):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro indirectJsr address<br /><br />  lda #&gt;&#40;*+12&#41;<br />  pha<br />  lda #&lt;&#40;*+9&#41;<br />  pha<br />  <br />  lda address+1<br />  pha<br />  lda address<br />  pha<br />  <br />  rts<br /><br />.endmacro</div><br /><br />Where * is the current program counter address (as calculated during assembly of your code). I wondered if anyone else has used a similar approach for their own usage of the rts trick?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Wed Jan 27, 2010 8:14 pm</p><hr />
]]></content>
</entry>
</feed>