<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - All-in-one dev cart for NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">All-in-one dev cart for NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7751">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7751</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun May 15, 2011 4:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I used a PIC18 because it had a parallel port peripheral, which made communication with the NES dead simple. I don't know if the AVR has something similar, I never used one but I guess not.</div><br /><br />What do you mean by parallel port peripheral?  I'm missing something here...</div>
<br />
<br />I mean the PIC directly used /CE, /RD, /WR, and the NES CPU data bus.  I used the mode described in <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/31010a.pdf" class="postlink">this doc</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun May 15, 2011 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I used a PIC18 because it had a parallel port peripheral, which made communication with the NES dead simple. I don't know if the AVR has something similar, I never used one but I guess not.</div><br /><br />What do you mean by parallel port peripheral?  I'm missing something here...</div><br /><br />I mean the PIC directly used /CE, /RD, /WR, and the NES CPU data bus.  I used the mode described in <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/31010a.pdf" class="postlink">this doc</a>.</div>
<br />
<br />Oh I get it.  It basically allows the NES to write to the mcu's port as a parallel latch, that is pretty nifty...
<br />
<br />So did you just drive the /WR input on you pic with PRG /WR ?  I guess that's pretty much the same type of setup qbradq was talking about except we would need an external latch/regisiter for the NES to write to.
<br />
<br />I guess if we only had a few things the NES needed to communicate to the AVR (not the other way)  We could have one PISO shift register for everything.  Then the AVR could just read from the Shft reg and decode whatever "opcode" we create.  
<br />
<br />That would allow us to tell the AVR we needed to navigate around the directories, and load roms, save battery backed RAM and what not.  It could either be packed in the CPLD or an external chip for now since how I'm running out of pins.
<br />
<br />It's becoming apparent I need to dig deeper into the NES architecture and opcodes though, now that the scope has been changed to a user onscreen rom selection.
<br />
<br />The part I need to understand before I can build anything is how the atmega will feed bytes to the NES that in turn get programmed to both CHR and PRG ROMs.
<br />
<br />I guess I'm imagining a second data register that the AVR writes to.  And the NES reads from and then writes that byte to the correct byte in PRG/CHR ROMs.  
<br />
<br />Sounds simple, but I'm struggling with how to set everything up in the cart for the NES to do all this.  
<br />
<br />I'm assuming based on an earlier comment that we can put these read write instructions over to the NES's RAM that way the boot menu no longer needs to be accessed.  I'm also assuming their is an opcode to load this into a internal register in the NES.  And the NES has a (X,Y,Z) or some sort of address pointer register that we can keep incrementing.  Hopefully there is a store with post-increment of this address pointer...
<br />
<br />So a byte could be copyed from the data buffer to the ROMs in two clock cycles as follows:
<br />
<br />1) Then the cartridge could be set up so all PRG R/W read signals would enable data register regardless of the address bus (or not? perhaps we require PRG /CE and a specific Address bit to be high also?).
<br />
<br />2) The cart would be setup up so it can write to PRG/CHR ROMs like it would normally.  (ie, PRG(CHR) R/W, /CE and address busses are aligned to the roms)  Now the NES writes the byte to the address pointed to by the (X,Y,Z?) register and Post-increments that register.
<br />
<br />Once the PRG ROM was programmed the NES would have to count itself to know were done, it would now start programming the CHR ROM if applicable.  I'm also not sure how this all goes down with the CPU and PPU.  Would we want to have a separate PRG and CHR data register for the CPU and PPU to copy from?  Or is it better to just let the CPU load up the "CHR-ROM" in a similar manner to however it works with games that use CHR-RAM like AOROMs?  Is there some way to speed up the process and have both the CPU and PPU filling their respective ROMs in tandem?  Assuming the AVR is keeping up with the process?
<br />
<br />We could also make things easy for the NES by "turning the pages" of the PRG and CHR ROMs.  Basically just keep track of where we are in the "page" and send a signal from the AVR to the CPLD to change the upper unaddressable address bits.  That way we wouldn't have to create our own mapper for the NES, and could just have the address counter roll over with each page.
<br />
<br />I'm not sure how all this works for the NES as I said before, but if needed could we just give the NES and infinite loop to copy everything over and send and IRQ?  So the NES would know we're done and just point it to start executing the game.
<br />
<br />If someone wants to take the time to fill in my knowledge holes here great, otherwise I'm perfectly capable of doing the research myself just send me on my way.  I just imagine that my assumptions are fairly close to reality.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon May 16, 2011 10:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure if you mean have the NES do the memory writing (surely then the communication would need to go both ways), or to have the circuit on the cart write to memory while the NES "isn't looking".
<br />
<br />The latter method would work well, it could be fast but needs all the bus buffers on board (and double it all for handling CHR the same way).  It would work similar to a <a href="http://www.moates.net/ostrich-20-the-new-breed-p-169.html?cPath=95" class="postlink">ROM emulator</a>, but the NES would disable NMIs and IRQs and run inside the internal RAM during loading.  BTW, that ROM emulator would make any cart into a devcart, if you want an easy solution. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />I think having the NES communicate with the MCU is a lot more interesting.  Mostly because if the hardware is there, might as well let the NES itself use it.  The communication with the PIC on my Squeedo cart seemed kinda complex, with the NES interrupting the PIC, and the PIC interrupting the NES, but it seemed decently fast.  PIC32 has an even nicer parallel port, it added a 4-byte FIFO buffer (or alternatively, 2 address inputs).  That's enough memory for the NES execute an instruction + RTS out of it.
<br />
<br />I have a pretty extreme NES cart project pretty much entirely planned out, just don't have the time to work on it much until I finish other projects.  But it'd be using an FPGA, PIC32, and other fun stuff.  Only part ready now is some of the PIC32 code (in C).  The main trick will be doing the memory controller, like I mentioned earlier I'm wanting to use a synchronous RAM and I'd be running it really fast, up to 100mhz if needed.  There's been a lot of mentions about open-sourcing hardware, I've considered doing something like that.  But I'm not sure if it would help much before the board is made yet.  Most of the stuff to get working will be in the Verilog and coding the PIC32.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Duck_tech</b> [ Tue Jun 07, 2011 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello, NESdev community!
<br />
<br />Several days ago me and my friend played some games on his NES clone. He don't have any cartridges, except, built-in 361 (or so) in 1. There were some fun games, but most of them were spoiled by bad trainers. For example we didn't know what we supposed to do in Devil World, until I went to GameFAQs and found that there are supposed to be dots to collect, which hadn't appeared, at least I couldn't found a "pure" menu item for this game (without some trainer suffix).
<br />
<br />So after some hours of nostalgia we decided we need some new cartridges. I have some Chinese multicarts (we don't have any legal NES games in Russia thanks to Nintendo marketing strategy), so after some more thinking we came up with idea of obtaining a reprogrammable cartridge to play some genuine ROMs.
<br />
<br />I've googled some finished projects to assemble and found that most of them are commercial, except NESFunkyFlashCart, but it is so obscure (I've barely found a mirror of it's homepage at some Russian site) that I didn't even want to look deep into it's schematics. It also loads games too long (10 minutes for 512K).
<br />
<br />We both are studying at university as hardware engineers, so we know how to design (well, more or less) electronic circuits and we thought that we can invent something new and maybe sell it in case of success. So I've started to search and read NES docs. After a couple of days googling and reading I found that forum topic. As I understood, nesinfinitelives are working on quite similar project (what a lucky finding) and I think we can help each other.
<br />
<br />ATM I came up with following scheme: the cartridge will have two SRAM chips to hold the game's data and an ATMega MCU (I've been studying them for the last half of the year) to load them through UART and behave as a mapper. I decided to start with something simple like UNROM and Contra/Duck Tales. We don't want to use PLDs, because they aren't cheap (almost same price as everything I've listed here) and we don't have much experience using them.
<br />
<br />I have understood most of the NES' architecture but there are some questions left:
<br />
<br />1) Somewhere I found a statement that using an MCU alone would be too slow, because there aren't much time left to decode address and fetch data from ROM/RAM. Is it true? How does data fetching from cartridge work? Let's imagine we have the following code (I haven't learned 6502 ASM yet, so I will use textual descriptions):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1: Set memory address<br />2: Load the data</div>
<br />At which point of time the data will be loaded in CPU: after the second command or in the middle of it? How much time (estimated) is left for mapper to decode an address? Also am I right that every 6502 instruction needs only 1 cycle to execute?
<br />
<br />2) What does NES' CPU do after power on?
<br />
<br />3) Someone said at the first page that it is impossible to reset the NES from cartridge. What does the /IRQ pin in cartridge slot does then?
<br />
<br />Looking for your answers. Thanks in advance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Tue Jun 07, 2011 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NES takes a few cycls per instruction, I think it's like 2-5 or something like that. I don't think any instructions take 1 clock.
<br />
<br />The PIC/AVR as a memory mapper has been thought about I am pretty sure and nobody thinks it is plausible to build a mapper that does anything special at all, because the only thing it can really do is logic and that's cheaper than a micro controller anyway.
<br />
<br />And then there's this, and this site:
<br />
<br /><!-- m --><a class="postlink" href="http://www.retrousb.com/index.php?cPath=24">http://www.retrousb.com/index.php?cPath=24</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://www.retrousb.com/index.php?osCsid=6bc2413899ed1b548d1c93831304a006">http://www.retrousb.com/index.php?osCsi ... 831304a006</a><!-- m -->
<br />
<br />Also, IRQ means interrupt.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Jun 07, 2011 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah the only mappers I could see easily replicated with a MCU are ones that use the 74ls161 and 74ls32 or similar.  But I think your limiting factor with using a MCU is i/o, these mappers suck up pins quickly if you're trying to implement several of them.   You'll have a hard time sticking to through hole options.
<br />
<br />So check into the AOROM, UNROM, CNROM, etc.  and of course you could do NROM.
<br />
<br />When working on these carts myself I found a lot talking about how these mappers worked from a software standpoint but little to none explaining the circuity (no schematics).  Consequently I've traced out all the runs on those carts and have some rough schematics of my own, but I'm not sure if anyone could read them. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  But I would like to get them posted up at some time in the future.
<br />
<br />If you want to replicate the MMC1 and MMC3 etc you'd have to look into programmable logic.  Even with this layout I have in this post I planned to use the actual hardware.  It's conceivable to get away with using a MASSIVE mcu on the other end instead of the CPLD I was.  But I doubt that'll be cheaper or easier than my $7 CPLD.  Plus you would have to look into surface mount and with my prototype here I wanted to stay through hole.
<br />
<br />If you're looking for an easy way to handle the reset and loading SRAM issue I recommend holding the reset button or having a separate power supply for your cart so you could program it before inserting the cartridge.  That was my plan here, I know it's not elegant but it's easier in my mind at least.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Jun 07, 2011 12:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You have (1 / 1789772.72727272) / 2 = 279 ns before your hold conditions to decode writes. For reads you will have less time to satisfy the hold condition of the CPU, which being old is significant. To be safe you should decode and provide valid data within 200 ns (same with the PPU if you implement CHR ROM stuff). Logic mappers get away with 200 ns *ROMs* because the mapper's output address lines track the CPU's input address lines which are settled BEFORE the start of Phi2. You won't have that luxury.
<br />
<br />You'll have to interrupt on the rising edge of Phi2, sample R/W and the address and decode. For writes data is valid and must be sampled at the falling edge of Phi2. For reads decode as fast as possible but put the bus back to Hi-Z on the falling edge of Phi2.
<br />
<br />That's pretty much all there is to it, but good luck with that lol I think you'll need a very high performance (100+ MIPS) MCU. There's some Atari cart which uses a really fast MCU exactly this way, but then again the largest Atari games are &lt;= 32k so they can fit in a MCU's flash/RAM, they have extremely basic bankswitching with little to no combinatorial logic after a register, and the CPU is 70% slower.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Duck_tech</b> [ Tue Jun 07, 2011 12:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you for such fast replies!
<br />
<br /><div class="quotetitle">3gengames wrote:</div><div class="quotecontent">NES takes a few cycls per instruction, I think it's like 2-5 or something like that. I don't think any instructions take 1 clock.<br /><br />The PIC/AVR as a memory mapper has been thought about I am pretty sure and nobody thinks it is plausible to build a mapper that does anything special at all, because the only thing it can really do is logic and that's cheaper than a micro controller anyway.<br /><br />And then there's this, and this site:<br /><br /><!-- m --><a class="postlink" href="http://www.retrousb.com/index.php?cPath=24">http://www.retrousb.com/index.php?cPath=24</a><!-- m --><br /><br /><!-- m --><a class="postlink" href="http://www.retrousb.com/index.php?osCsid=6bc2413899ed1b548d1c93831304a006">http://www.retrousb.com/index.php?osCsi ... 831304a006</a><!-- m --><br /><br />Also, IRQ means interrupt.</div><br /><br />Thank you for links, but I know about PowerPack already. Considering /IRQ pin I think it is possible to "hang" NES in infinite loop somewhere (cheap small SRAM, for example) during game load, then send an /IRQ which should set PC to 0, while MCU is switching NES to SRAM with game. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When working on these carts myself I found a lot talking about how these mappers worked from a software standpoint but little to none explaining the circuity (no schematics).</div><br /><br />I have exactly same problem: can't really understand UNROM schematics from wiki for example. How it is suppossed to make last bank always visible with an OR gate connected like that? Well, i don't quite understand how it is connected... <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you're looking for an easy way to handle the reset and loading SRAM issue I recommend holding the reset button or having a separate power supply for your cart so you could program it before inserting the cartridge. That was my plan here, I know it's not elegant but it's easier in my mind at least.</div><br /><br />Here is my current idea (untill I implement my /IRQ-based algorithm):<br />-Plug the cartridge into a NES(clone).<br />-Connect the cartridge to PC to power it and load a game.<br />-Turn on NES.<br />-???<br />-Profit!<br /><br />Too bad I'm passing exams ATM so I can't work much on my device, but I really hope to finish some prototype until next month.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You have (1 / 1789772.72727272) / 2 = 279 ns before your hold conditions to decode writes. For reads you will have less time to satisfy the hold condition of the CPU, which being old is significant. To be safe you should decode and provide valid data within 200 ns (same with the PPU if you implement CHR ROM stuff). Logic mappers get away with 200 ns *ROMs* because the mapper's output address lines track the CPU's input address lines which are settled BEFORE the start of Phi2. You won't have that luxury. <br /><br />You'll have to interrupt on the rising edge of Phi2, sample R/W and the address and decode. For writes data is valid and must be sampled at the falling edge of Phi2. For reads decode as fast as possible but put the bus back to Hi-Z on the falling edge of Phi2. <br /><br />That's pretty much all there is to it, but good luck with that lol I think you'll need a very high performance (100+ MIPS) MCU. There's some Atari cart which uses a really fast MCU exactly this way, but then again the largest Atari games are &lt;= 32k so they can fit in a MCU's flash/RAM, they have extremely basic bankswitching with little to no combinatorial logic after a register, and the CPU is 70% slower.</div>
<br />
<br />That's a very useful information, but how you calculated those 279ns? 2 cycles per instruction? And where that Phi2 came from? Datasheet?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Jun 07, 2011 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't really think there is much room to make profit here.  The powerpak pretty much has everything covered and most people have one already that would consider buying what you're selling.  You're NOT going to get anywhere's close to as capable as the powerpak with just an MCU and leaving out programmable logic.
<br />
<br />I would use this as more of a learning tool or project for fun kinda like what I'm doing.  But it's really your decision, ignoring me could make you money in some way I'm not seeing.
<br />
<br />If you PM me with your email I can send you my hand drawn schematics and you can attempt to decipher them.  I deem them too ugly to post.  But really it's pretty simple the 161 acts as a latch not the counter it is.  Then the or gates just make it so the last page is always visible.  A schematic makes this a lot easier to see.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Jun 07, 2011 1:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Duck_tech wrote:</div><div class="quotecontent">I have exactly same problem: can't really understand UNROM schematics from wiki for example. How it is suppossed to make last bank always visible with an OR gate connected like that? Well, i don't quite understand how it is connected... <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /></div>
<br />When accessing $8000-$BFFF, PRG A14 is low, when accessing $C000-$FFFF, it's high. If you OR A14 with the bank index, the result will always be all 1's when accessing $C000-$FFFF. That's how the last bank gets hardwired to the top half of the addressing space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 07, 2011 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Duck_tech wrote:</div><div class="quotecontent">I have exactly same problem: can't really understand UNROM schematics from wiki for example. How it is suppossed to make last bank always visible with an OR gate connected like that?</div><br />Address line A14 can have a low (0) or high (1) logic level. It's low when the CPU address is in $8000-$BFFF and high when the CPU address is in $C000-$FFFF. If you take four copies of A14 and make a binary number out of them, you get 0000 (when $8000-$BFFF) or 1111 (when $C000-$FFFF). ORing the bank number with 0000 gives you back the same bank number, but ORing the bank number with 1111 produces 1111, which means the last bank in the cart.<br /><br />(I got ninja'd by tokumaru.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Here is my current idea (untill I implement my /IRQ-based algorithm):<br />-Plug the cartridge into a NES(clone).<br />-Connect the cartridge to PC to power it and load a game.<br />-Turn on NES.</div><br />So if I understand you right, the cartridge is programmed while sitting in the NES Control Deck and a cable is coming out the Game Pak slot. Mostly I worry about the effect of putting voltages on the cart edge pins while the NES is powered off. Can anyone else comment about this?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's a very useful information, but how you calculated those 279ns?</div><br />The clock period is 315/176 MHz, or about 1.79 MHz. This means each clock period is 176/315 * 1000 ns, or about 558 ns, and the half period is 279 ns.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2 cycles per instruction?</div><br />The 6502 reads or writes a byte of memory during every cycle, and the memory has to be fast enough for this. A 2-cycle instruction will read the opcode in the first cycle and the operand in the second.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> And where that Phi2 came from? Datasheet?</div>
<br />Phi2 is the CPU's clock signal. It comes from a circuit in the CPU that divides the master oscillator by 12 (NTSC), 16 (PAL NES), or 15 (some PAL famiclones).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Jun 07, 2011 1:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Duck_tech wrote:</div><div class="quotecontent">That's a very useful information, but how you calculated those 279ns? 2 cycles per instruction? And where that Phi2 came from? Datasheet?</div>Yes look at a 6502 datasheet. Phi2 is the clock phase where external data is accessed.
<br />
<br />279 ns is half of ONE clock cycle. That's how fast you must provide data to the 6502... Unlike other synchronous-microcoded processors the 6502 accesses the bus every cycle of every instruction.
<br />
<br />For reads it's absolutely necessary to decode a write to memory and get data to the CPU within 279 ns when Phi2 is over (and Phi1 begins).
<br />
<br />For writes (PRG bankswitching) you must capture the write after 279 ns, but the soonest the CPU can access this data again is near the end of the next Phi2 so you basically have 1.75 clock cycles to process a write (actually ~50 ns less because you have to wait for the /ROMSEL signal to be decoded inside the NES) and process a read. Let's call it 1.5, so you might have 800 ns for a write then a read/another write, or 200 ns per read (maybe a little more if you start decoding before Phi2 but it's tricky because you can't be sure the address bus has settled until Phi2 and you'll still have to wait for the NES's internal address decoding).
<br />
<br />I was wrong about the Atari's speed too, it's ~1.19 MHz so it's 50% slower. The Harmony Cart runs at 70 MHz = 70 MIPS? though so you'll probably need 140+ lol.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Jun 07, 2011 10:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Here is my current idea (untill I implement my /IRQ-based algorithm):<br />-Plug the cartridge into a NES(clone).<br />-Connect the cartridge to PC to power it and load a game.<br />-Turn on NES.</div><br />So if I understand you right, the cartridge is programmed while sitting in the NES Control Deck and a cable is coming out the Game Pak slot. Mostly I worry about the effect of putting voltages on the cart edge pins while the NES is powered off. Can anyone else comment about this?<br /></div>
<br />
<br />I'm not sure but I think most everything is powered off that same 5V bus so you'd end up trying to power up the NES with your USB cable.
<br />
<br />One way to get around this would be to auctioneer the power from the two supplies with some diodes.  But I still don't know if all that is the best idea...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>