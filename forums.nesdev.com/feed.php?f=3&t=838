<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=838" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-01-23T08:22:56-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=838</id>
<entry>
<author><name><![CDATA[creaothceann]]></name></author>
<updated>2006-01-23T08:22:56-07:00</updated>
<published>2006-01-23T08:22:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8454#p8454</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8454#p8454"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8454#p8454"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />As far as file format, about the simplest I can come up with that is extensible is the AIFF chunk style, where the file is a series of data blocks, each having a header with a fixed-length type tag and a fixed-length size, followed by size data bytes. This is easy to write and read without any extra state information. Any additional complexity in reading and writing has to give some useful benefit.<br /></div><br />Hi! This is very similar to the SNES9x savestate format, which is very nice to work with. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />It has a file header, consisting of: signature (8 chars) + colon + version (4 chars, readable text) + ASCII char #10.<br />The blocks also have a header: name (3 chars, readable text) + colon + block size (6 chars, readable text) + colon. Some blocks are not mandatory.<br />The smaller variables are affected by endianness, the big arrays are not.<br />The files are accessed via GZIP, which handles compression and can read uncompressed files too.<br /><br />I'd suggest using a format similar to this, but using the colons (or other separators) to allow for variable-length strings. The endian-format could be stored in the file header.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=290">creaothceann</a> — Mon Jan 23, 2006 8:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[danimal]]></name></author>
<updated>2006-01-12T16:19:15-07:00</updated>
<published>2006-01-12T16:19:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8183#p8183</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8183#p8183"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8183#p8183"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />I just thought of an idea of how to pull off a truly standard savestate format:<br /><br />Have a 22,992 byte header that consists of a properly formatted Nesticle save state file.  Then from there, use a tagged format to cover anything missed by nesticle's savestate format.<br /></div><br />i've still got a cough i'm getting over and i'm going to cough in your general direction.<br /><br />Edit: (extended message)<br />I didn't consider the topic dead just at a disagreement.  Emu authors and coders I would like to hear what you have to say on the matter of the format of the data.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=241">danimal</a> — Thu Jan 12, 2006 4:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-01-12T16:11:50-07:00</updated>
<published>2006-01-12T16:11:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8182#p8182</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8182#p8182"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8182#p8182"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />I just thought of an idea of how to pull off a truly standard savestate format:<br /><br />Have a 22,992 byte header that consists of a properly formatted Nesticle save state file.  Then from there, use a tagged format to cover anything missed by nesticle's savestate format.<br /></div><br /><br />Pardon my Japanese - 絶対ダメ！！<br /><span style="font-size: 34%; line-height: normal">Oh! Nervous Breakdown!</span><br /><br />(translation: 'Absolutely not!')<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Thu Jan 12, 2006 4:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-01-12T16:10:01-07:00</updated>
<published>2006-01-12T16:10:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8181#p8181</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8181#p8181"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8181#p8181"><![CDATA[
Is that a joke?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Thu Jan 12, 2006 4:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2006-01-12T16:01:31-07:00</updated>
<published>2006-01-12T16:01:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8180#p8180</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8180#p8180"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=8180#p8180"><![CDATA[
I just thought of an idea of how to pull off a truly standard savestate format:<br /><br />Have a 22,992 byte header that consists of a properly formatted Nesticle save state file.  Then from there, use a tagged format to cover anything missed by nesticle's savestate format.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Jan 12, 2006 4:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2005-12-27T09:09:20-07:00</updated>
<published>2005-12-27T09:09:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7726#p7726</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7726#p7726"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7726#p7726"><![CDATA[
Wouldn't it be more efficient to just remember whether the gun 'saw' white or not, and then generate a lightmap from that when loading the state ? (completely bright, or completely dark), assuming the lightmap is updated once per frame.<br />I'm not sure about this, I haven't yet emulated the zapper... or savestates... and as for the poor little ROB fellow, I don't know anything about its inner workings :p<br /><br />A pixel map would be nice to have (screenshots with states), but should not be mandatory.<br /><br /><br />How about using an existing savestate format as a base ? Like Quietust's, who hasn't documented his savestate format for no reason <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Tue Dec 27, 2005 9:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-24T18:36:54-07:00</updated>
<published>2005-12-24T18:36:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7676#p7676</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7676#p7676"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7676#p7676"><![CDATA[
Interesting; I guess for those screen-watching games you'd need to store a pixel map of the current CRT state, perhaps just in grayscale. And yes, the RAM blocks would be larger for some mappers; I was giving a general idea and trying not to bog it down with details like this. Each of the above would be in its own block so making it larger would just mean writing more data. i.e. 8K of CHR RAM might be in a block that's stored as (including header):<br /><br />52 52 48 43 00 20 00 00 &lt;8KB of data&gt;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Dec 24, 2005 6:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-12-24T17:30:25-07:00</updated>
<published>2005-12-24T17:30:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7673#p7673</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7673#p7673"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7673#p7673"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />But I don't understand the need for information necessary to draw the previous frame.<br /></div><br />Does it have something to do with the gun or robot, both of which make use of CRT phosphor decay time, or the ability to keep a screenshot of the save state?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Nametable RAM: 2048 bytes<br />CHR RAM: 8192 bytes<br />High RAM: 8192 bytes<br /></div><br />All three of these are mapper dependent. DEROM has 4 KB of VRAM for nametables. CPROM has 16 KB of VRAM for patterns. Some MMC5 boards have more than 8 KB of bankswitched WRAM, and the FDS has 32 KB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Dec 24, 2005 5:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-24T17:23:58-07:00</updated>
<published>2005-12-24T17:23:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7672#p7672</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7672#p7672"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7672#p7672"><![CDATA[
I'm in agreement with regards to using plenty of separate blocks. Using gzip on the entire file (which is what I do in my emulator, for save states and movies) can be done transparently, and allows it to be optional. For one, all arrays should be in separate blocks (except maybe the 24 bytes of PPU palette RAM). But I don't understand the need for information necessary to draw the previous frame. Aren't the 20 or so bytes of PPU registers (not counting palette) sufficient for PPU state just after vblank begins?<br /><br />CPU: PC, S, P, A, X, Y (7 bytes)<br />PPU: 2000, 2001, 2002, 2003, 2007, second write flag, VADDR, VTEMP, pixel x, palette (43 bytes)<br />APU: 4000-4013, 4015, 4017, internal state (69 bytes)<br />Joypad: joypad 1 shift register, joypad 2 shifter register, 4016 (9 bytes)<br />Low RAM: 2048 bytes<br />Sprite RAM: 256 bytes<br />Nametable RAM: 2048 bytes<br />CHR RAM: 8192 bytes<br />High RAM: 8192 bytes<br /><br />This is roughly what I use, and haven't had problems with desync in movies. I also can't think of any reasonable emulator design that would make it hard to import and export in this format.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Dec 24, 2005 5:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2005-12-24T16:47:16-07:00</updated>
<published>2005-12-24T16:47:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7667#p7667</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7667#p7667"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7667#p7667"><![CDATA[
At the very least, you'd need to save CPU registers, PPU registers, Video RAM, CPU RAM, Cartridge RAM, palette, bankswitching and mirroring information, and that might work for most games, assuming you can only save just before vblank.  Even though it's missing tons of stuff including latch data, sound registers, all information necessary to draw the previous frame, etc.  I think that more blocks is better, and state information should not be combined with large RAM blocks.  If anyone is worried about size, just gzip the thing or something.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Dec 24, 2005 4:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-24T14:52:06-07:00</updated>
<published>2005-12-24T14:52:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7663#p7663</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7663#p7663"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7663#p7663"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The only real limitation I can see at this point are block names having a limited format and endianness.<br /></div><br /><br />What practical problems do these pose? The main limitations are the layout of the actual state structures, specifically preventing compiler-inserted padding and putting multi-byte values into little-endian format. Both are fairly trivial. I've been able to lay out structures for PPU and APU state in a logical way that is entirely usable as the in-memory format during emulation, the only step necessary before saving is to swap the multi-byte values to little-endian format (I develop on a big-endian Mac).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'm all for a standardized savestate format. Though it's a very hard task, to design a format everyone would be happy with. You'll have to think, not what you'd prefer yourself, but what the majority of emulator authors would prefer.<br /></div><br /><br />What if a few of us organize to crate a save state format that initially only aims to move games between emulators (as you can already do with battery RAM saves), perhaps with slight inaccuracies? This is a more modest goal, and would give experience on whether full accuracy were possible and worth the effort.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Dec 24, 2005 2:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2005-12-24T09:39:36-07:00</updated>
<published>2005-12-24T09:39:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7653#p7653</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7653#p7653"/>
<title type="html"><![CDATA[Re: Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7653#p7653"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />Are there any standardized savestate formats to use, or does each emulator need to create its own custom incompatible proprietary format?<br /></div><br /><br />I think that it would be easier for us all to stick to the our own savestate format for two reasons. First of all we can't even get a 16-byte ROM header right and secondly each emulator has it's own accuracy. If one were to be created then we would need full knowledge of every bit and byte register that the NES (specifically the PPU) has. Really, just like fixing the iNES header, it's too late.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Sat Dec 24, 2005 9:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2005-12-24T08:23:07-07:00</updated>
<published>2005-12-24T08:23:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7652#p7652</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7652#p7652"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7652#p7652"><![CDATA[
I'm all for a standardized savestate format. Though it's a very hard task, to design a format everyone would be happy with. You'll have to think, not what you'd prefer yourself, but what the majority of emulator authors would prefer.<br /><br />In the case of XML, I don't think the majority would prefer that..<br /><br /><br />merry christmas <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Sat Dec 24, 2005 8:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[danimal]]></name></author>
<updated>2005-12-23T18:37:00-07:00</updated>
<published>2005-12-23T18:37:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7645#p7645</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7645#p7645"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7645#p7645"><![CDATA[
Wow that code is a lot cleaner that I thought it would be for a binary file.<br /><br />Your format has maximum space saving. The only real limitation I can see at this point are block names having a limited format and endianness.<br /><br />I know it sounds like i won't let my xml idea die, but I have to say this.  The hybrid xml file idea would allow binary chunks without limiting the space for tags and endianness.<br /><br />xml Hybrid example<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&lt;savestate&gt;<br />&lt;nes&gt;<br />&lt;state&gt;<br />&lt;description&gt;Motherbrain with 255 Missles and max health&lt;/description&gt;<br />&lt;cpu&gt;<br />&lt;register&gt;0x0 0x5&lt;/register&gt;<br />&lt;ram&gt;0x6 0x800&lt;/ram&gt;<br />&lt;/cpu&gt;<br />...<br />&lt;/state&gt;<br />...<br />&lt;/savestate&gt;<br />&lt;binary data here&gt;<br /></div><br /><br />The hex numbers above show the start offset and length from the first byte of &lt;binary data here&gt;.  I can see the resistance to xml is because of the formatting involved but it might be worth the extra effort allow for updates and variation.<br /><br />Edit: Changed first word of paragraph 2 from "This" to "Your" for the sake of clarity.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=241">danimal</a> — Fri Dec 23, 2005 6:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-12-23T17:17:38-07:00</updated>
<published>2005-12-23T17:17:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7644#p7644</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7644#p7644"/>
<title type="html"><![CDATA[Any standardized savestate format?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=838&amp;p=7644#p7644"><![CDATA[
The APU state is a good example. If an emulator isn't handling it at all, any games which use the APU interrupt or poll the status register won't work, thus we can assume that no save states lacking APU state will be using the APU. The default state should have everything silent and the frame interrupt disabled ($4017=$40).<br /><br />As far as file format, about the simplest I can come up with that is extensible is the AIFF chunk style, where the file is a series of data blocks, each having a header with a fixed-length type tag and a fixed-length size, followed by size data bytes. This is easy to write and read without any extra state information. Any additional complexity in reading and writing has to give some useful benefit.<br /><br />Here's something I just threw together as an example. The use of an end marker block allows nested groups of blocks, for example when you have multiple save states at the key frames in a movie file. Note how it also allows expansion of a given block, with older emulators reading a subset of the data, and newer emulators only reading as much data as the file provides.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void write_block&#40; long type, long size, const void* in, FILE* out &#41;<br />&#123;<br />    unsigned char b &#91;8&#93; = &#123; type, type&gt;&gt;8, type&gt;&gt;16, type&gt;&gt;24,<br />        size, size&gt;&gt;8, size&gt;&gt;16, size&gt;&gt;24 &#125;;<br />    fwrite&#40; b, 8, 1, out &#41;;<br />    fwrite&#40; in, size, 1, out &#41;;<br />&#125;<br /><br />void write_state&#40; FILE* file &#41;<br />&#123;<br />    write_block&#40; 'NAPU', sizeof &#40;apu_state&#41;, &amp;apu_state, file &#41;;<br />    write_block&#40; 'NPPU', sizeof &#40;ppu_state&#41;, &amp;ppu_state, file &#41;;<br />    /* etc... */<br />    write_block&#40; 'endb', 0, &quot;&quot;, file &#41;;<br />&#125;<br /><br />void read_data&#40; long size, void* out, FILE* in &#41;<br />&#123;<br />    unsigned char b &#91;4&#93;;<br />    if &#40; fread&#40; b, 4, 1, in &#41; &#41;<br />    &#123;<br />        long actual = b&#91;3&#93;&lt;&lt;24 | b&#91;2&#93;&lt;&lt;16 | b&#91;1&#93;&lt;&lt;8 | b&#91;0&#93;;<br />        fread&#40; out, &#40;size &lt; actual ? size : actual&#41;, 1, in &#41;;<br />        if &#40; actual &gt; size &#41;<br />            fseek&#40; in, actual - size, SEEK_CUR &#41;;<br />    &#125;<br />&#125;<br /><br />void read_state&#40; FILE* file &#41;<br />&#123;<br />    unsigned char b &#91;4&#93;;<br />    while &#40; fread&#40; b, 4, 1, file &#41; &gt; 0 &#41;<br />    &#123;<br />        switch &#40; b&#91;3&#93;&lt;&lt;24 | b&#91;2&#93;&lt;&lt;16 | b&#91;1&#93;&lt;&lt;8 | b&#91;0&#93; &#41;<br />        &#123;<br />        case 'NAPU':<br />            read_data&#40; sizeof apu_state, &amp;apu_state, file &#41;;<br />            break;<br />        <br />        case 'NPPU':<br />            read_data&#40; sizeof ppu_state, &amp;ppu_state, file &#41;;<br />            break;<br />        <br />        /* etc... */<br />        <br />        case 'endb':<br />            fseek&#40; file, 4, SEEK_CUR &#41;; // skip size<br />            return;<br />        &#125;<br />    &#125;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Dec 23, 2005 5:17 pm</p><hr />
]]></content>
</entry>
</feed>