<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Question about Gameplay speedrun on real hardware</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Question about Gameplay speedrun on real hardware</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=7584">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=7584</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jpx72</b> [ Wed Mar 23, 2011 11:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Question about Gameplay speedrun on real hardware</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello
<br />I hope this topic wasn't discussed here before, but are there any projects that implemented speed-runs / or any other runs to an actual NES ROM? I mean like changing the demo run in SMB to run somebody's actual gameplay (there's the game genie code for enabling the sound in the SMB demo run AOSYLZEI + AUNPAAEY =thanks <strong>nesondubois</strong>) or, that really interrest me, to implement a Rockman run to actual Rockman.nes - you see my point...
<br />I know there are sync/timing problems with real hardware as discussed here:
<br /><!-- m --><a class="postlink" href="http://tasvideos.org/forum/viewtopic.php?t=4288">http://tasvideos.org/forum/viewtopic.php?t=4288</a><!-- m -->
<br />but nevertheless I would be really interrested in this, even if the succes rate of that run would be only like 50%.
<br />But as a non-programmer I would only be interrested in some already made compiler, just add salt and water and it works -&gt; that's adding rom(SMB and Rockman1 are my real interrest) + run(something like emulator "video") = final product.
<br />
<br />EDIT: I know about the extra Famicom hardware (can't remember the name now) that can repeat button presses/ and/or using a PC to do the same thing, but that's not the question...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Mar 24, 2011 1:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You mean adding the playback stuff in the ROM itself? You won't find a easy solution for that, every game is different. It's possible but making an automated tool isn't an easy task...
<br />
<br />I thought about doing a replayer like this for, guess what, PowerPak. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I think it should be possible by allocating part of the PRG-ROM for controller states, stealing a couple of cycles off NMI (to read the controller data from PRG-ROM and pass it to FPGA) and using the FPGA to watch for controller reading instructions and substituting (like my save state mappers' turbo feature already does). That is if the game actually keeps NMI enabled at all times...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 24, 2011 7:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Technically, if there's enough free PRG-ROM space, you could easily store the button log (i.e. emulator movie, but compressed to save more space) there and modify the game's controller reading routine to read from that log instead. You'll also need a couple of free RAM bytes, to keep track of the button data.
<br />
<br />Since games use vastly different mappers (which means that the way in which the button logs will be stored will vary due to the way PRG-ROM is bankswitched), have their controller reading routines in different places, and use RAM very differently, you can't automate this process. Each game is a particular case.
<br />
<br />A tool can even be made for this, but it will only support games that have been explicitly added by the person making the program, it will not automatically support "every ROM ever".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nessie</b> [ Thu Mar 24, 2011 11:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It does not address your question, but <a href="http://www.instructables.com/id/NESBot-Arduino-Powered-Robot-beating-Super-Mario-/" class="postlink">this guy</a> hooked up an Arduino to the controller port, then fed an FCEUX movie to it so it played through a speed run on a real NES.
<br />
<br />Really impressive!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jpx72</b> [ Thu Mar 24, 2011 11:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I like the button log idea, I had something like that in my mind. Keeping it simple. Updating the finished compilation software due to the differences between games seems normal... But developing something like that would be probably easier for the powerpak first (although I would like the idea better if I had one).
<br />
<br />I don't understand the mechanics of storing the emulator videos in current emlators, it isn't just simple <em>time(when) + button(what)</em> log right? So there would have to be also a compiler for those runs. The "special" TAS runs are out, many of those use routines which aren't even supported by the real hardware (AFAIK). But there are many "normal" runs and speed-runs that can be reproduced by a human (understand "real hardware").
<br />
<br />The Famicom hardware button-log storage unit was called "Hori Game Repeater". Some info here:
<br /><!-- m --><a class="postlink" href="http://www.famicomworld.com/forum/index.php?topic=4847">http://www.famicomworld.com/forum/index.php?topic=4847</a><!-- m -->
<br />Pictures here:
<br /><!-- m --><a class="postlink" href="http://www.forum.emunes.pl/index.php?topic=2927.0">http://www.forum.emunes.pl/index.php?topic=2927.0</a><!-- m -->
<br />
<br />EDIT: Thanks for the Arduino link, haven't seen that before, nice!
<br />
<br />EDIT2: I just found a relevant discussion here:
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=6162">http://nesdev.com/bbs/viewtopic.php?t=6162</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Mar 25, 2011 12:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />TAS' generally work from a cleared save file, from the start of a game, and use no cheats or anything. They're nothing but pure button input. This being true, anything a TAS does should absolutely be possible in the game, on the actual console even if it's not HUMANLY possible. Unless "special" TAS refers to something I haven't seen. 
<br />
<br />TAS button input may not work on a console, but the cause of this would be that the TAS was made on an inaccurate emulator, and not really the TAS' input itself. In fact this may even break "normal" speed runs done on an emulator. For instance, emulators tend to work from cleared RAM, but NES games might rely on the "random" RAM at startup to seed their random number generators.
<br />
<br />In fact there are even several verified on console runs, and now that methods like the Super Mario Bros. video exist, more runs will probably be verified.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Mar 25, 2011 1:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Technically, if there's enough free PRG-ROM space, you could easily store the button log (i.e. emulator movie, but compressed to save more space)</div>
<br />Any ideas for a compression/decompression algorithm (I remember you being active in the CHR compression thread)? Trying to do this on PowerPak tickled my interest again. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Fri Mar 25, 2011 4:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Any ideas for a compression/decompression algorithm </div>
<br />Wouldn't you be fairly likely to have some data sequences repeated fairly often in a button log from a speed run? So a LZ variant should perform fairly well. aPLib maybe? Or PuCrunch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Mar 25, 2011 5:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mic_ wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Any ideas for a compression/decompression algorithm </div><br />Wouldn't you be fairly likely to have some data sequences repeated fairly often in a button log from a speed run? So a LZ variant should perform fairly well. aPLib maybe? Or PuCrunch.</div>
<br />Hmm, I was thinking about something that could be decompressed easily. If it could be done on the FPGA that would be even better. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I have to say I'm (almost) completely clueless about compression methods.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Fri Mar 25, 2011 5:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's an aPLib decoder I ported to the 6502: <a href="http://jiggawatt.org/badc0de/decrunch/aplib_decrunch_6502.asm" class="postlink">http://jiggawatt.org/badc0de/decrunch/aplib_decrunch_6502.asm</a>
<br />Note that it isn't fully optimized.
<br />
<br />I think the PuCrunch archive includes a decoder for the 6510 that could be used pretty much as-is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Mar 25, 2011 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I worked on an AVR-based solution to play back a TAS over the controller port (never finished <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> ). Here's the compression scheme I used for this project. I've converted it to C for readability.
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef struct<br />&#123;<br />&nbsp; &nbsp;byte num_frames;&nbsp; &nbsp;// The number of frames to hold this input byte.<br />&nbsp; &nbsp;byte input;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// The litteral bits to load into the latch register<br />&#125; input_record;<br /><br />struct input_dictionary<br />&#123;<br />&nbsp; &nbsp;input_record records&#91;128&#93;; // The dictionary of input records<br />&#125;<br /><br />typedef union<br />&#123;<br />&nbsp; &nbsp;byte dict_entry;&nbsp; &nbsp;// If bit 7 is set, bits 0-6 are an index into input_dictionary.<br />&nbsp; &nbsp;input_record record; // If bit 7 is not set, this is a litteral input record.<br />&#125; input;<br /></div>
<br />
<br />That way you have your 128 most frequent input records compressed down from two bytes to one. And you can still represent holding down the same inputs for over two seconds without using another input record.
<br />
<br />I did write a program to convert FCEU format input movies into this format, but I can't seem to find it.
<br />
<br />So with all that said I was working with a very limited platform. The input movie would have been burned into the ROM of the AVR, then read back using slow program reads. I only had 32 bytes of RAM to work with (not counting a return stack), so I never looked into fancy compression and the like.
<br />
<br />Ya'll are way beyond me with the PowerPak stuff. I can't even read VHDL or whatever it is you all use <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />Wow, this really makes me want to finish up that AVR input playback device. I'll have to go work on that over the weekend <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 25, 2011 7:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Any ideas for a compression/decompression algorithm (I remember you being active in the CHR compression thread)? Trying to do this on PowerPak tickled my interest again. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />In my game I just used RLE (buttons + frame count), because the demos are fairly short. I have a recording routine that outputs to SRAM, so I can later grab the data from the save file and incbin it in the ROM for playback.
<br />
<br />How much memory do you have for this on the PowerPak? Keeping track of several minutes (possibly more than an hour) of button logs might be a challenge.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Mar 25, 2011 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />mic, I think those algos are too complex for this purpose. Thanks anyways.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Any ideas for a compression/decompression algorithm (I remember you being active in the CHR compression thread)? Trying to do this on PowerPak tickled my interest again. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />In my game I just used RLE (buttons + frame count), because the demos are fairly short. I have a recording routine that outputs to SRAM, so I can later grab the data from the save file and incbin it in the ROM for playback.<br /><br />How much memory do you have for this on the PowerPak? Keeping track of several minutes (possibly more than an hour) of button logs might be a challenge.</div><br />Well, the idea was to store the states in the the upper half of the PRG-ROM (512K on PowerPak, so game can still use 256K max), hook NMI to a memory area where FPGA dynamically generates code to do BIT $xxxx JMP original_nmi (4+3 cycles). FPGA then grabs the read value from the data bus and returns it the next time game reads $4016/$4017.<br /><br />So 256K would allow ~72 minutes worth of uncompressed controller states (single player). I don't know how long the longest speedruns are but I'd like the limit to be bit bigger than that.<br /><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">I did write a program to convert FCEU format input movies into this format, but I can't seem to find it.</div>
<br />Let me know if you find it, I would be especially interested in the compression rate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Mar 25, 2011 8:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good news! I got bored so I whipped up a Python program to compress FCEUX FM2 input movies into the format I documented above. I tested this with a ~18 minute run of SMB1 and a ~6 minute run of SMB1. Both came out to about 6% of the uncompressed (one byte per frame) size.
<br />
<br /><a href="https://sites.google.com/site/qbradq/fm2bin.zip?attredirects=0&amp;d=1" class="postlink">Download Link (GPL V3, Requres Python 2.5.4 or Higher)</a>
<br />
<br />Edit: Oh yea, I forgot to mention. This program only supports first player, only with a Game Pad, and there are *no* sanity checks. I may add that stuff later, or anyone else is free to.
<br />
<br />I am very excited to work on my AVR-based playback thing-a-majig now. Only problem is I only have *very* small AVRs with 2K Flash space. I'll have to order bigger ones to see full speed runs <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />
<br />
<br />Here's the Stats! Yay!
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Title:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NES Super Mario Bros &#40;JPN/USA PRG0&#41; &quot;warpless&quot; in 18:41.7 by Lee &#40;HappyLee&#41;<br />Download URL:&nbsp; &nbsp;http://tasvideos.org/movies/fm2/happylee3-smbwarpless.zip<br />Total Frames:&nbsp; &nbsp;67413<br />Output Length:&nbsp; 4391 Bytes<br />Compressed %:&nbsp; &nbsp;6.513580%<br /><br />Title:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NES Super Mario Bros &#40;JPN/USA&#41; &quot;walkathon&quot; in 06:47.2 by Lee &#40;HappyLee&#41;.<br />Download URL:&nbsp; &nbsp;http://tasvideos.org/movies/fm2/happylee4-smb-sidestroller.zip<br />Total Frames:&nbsp; &nbsp;24472<br />Output Length:&nbsp; 1498 Bytes<br />Compressed %:&nbsp; &nbsp;6.121281%<br /></div><br /><br />Python Program (WARNING: Ugly Code <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> )<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">'''fm2bin.py<br /><br />Convert an FCEUX .FM2 Emulator Movie File into a binary form for playback on<br />NES hardware.<br /><br />Copyright &#40;C&#41; 2011 Norman B. Lancaster<br /><br />&nbsp; &nbsp; This program is free software: you can redistribute it and/or modify<br />&nbsp; &nbsp; it under the terms of the GNU General Public License as published by<br />&nbsp; &nbsp; the Free Software Foundation, either version 3 of the License, or<br />&nbsp; &nbsp; &#40;at your option&#41; any later version.<br /><br />&nbsp; &nbsp; This program is distributed in the hope that it will be useful,<br />&nbsp; &nbsp; but WITHOUT ANY WARRANTY; without even the implied warranty of<br />&nbsp; &nbsp; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&nbsp; See the<br />&nbsp; &nbsp; GNU General Public License for more details.<br /><br />&nbsp; &nbsp; You should have received a copy of the GNU General Public License<br />&nbsp; &nbsp; along with this program.&nbsp; If not, see &lt;http://www.gnu.org/licenses/&gt;.<br /><br />'''<br /><br />import os<br />import sys<br />import re<br />import struct<br /><br /><br />input_bytes = &#91;&#93;<br />rle_words = &#91;&#93;<br />word_count = dict&#40;&#41;<br />dict_words = dict&#40;&#41;<br />output_bytes = &#91;&#93;<br /><br /><br />def main&#40;&#41;:<br />&nbsp; &nbsp;if len&#40;sys.argv&#41; != 3:<br />&nbsp; &nbsp;&nbsp; &nbsp;print '''Usage: fm2bin.py input output<br />input&nbsp; &nbsp;*MUST* be a .fm2 version 3 file. This is created by FCEUX. Only port 0<br />&nbsp; &nbsp; &nbsp; &nbsp; input will be processed. Port 0 must have been a game pad. Save states<br />&nbsp; &nbsp;&nbsp; &nbsp;are not supported either.<br />output&nbsp; The output binary file. See &quot;fileformat.txt&quot; for details.<br />'''<br />&nbsp; &nbsp;&nbsp; &nbsp;sys.exit&#40;1&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Load the input file<br />&nbsp; &nbsp;input = open&#40;sys.argv&#91;1&#93;, &quot;r&quot;&#41;<br />&nbsp; &nbsp;while True:<br />&nbsp; &nbsp;&nbsp; &nbsp;line = input.readline&#40;&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;if line == &quot;&quot;:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break<br />&nbsp; &nbsp;&nbsp; &nbsp;line = line.strip&#40;&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;# Input record line<br />&nbsp; &nbsp;&nbsp; &nbsp;if line.startswith&#40;'|'&#41;:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte = 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;match = re.search&#40;'\|&#40;&#91;^\|&#93;*&#41;\|&#40;&#91;^\|&#93;*&#41;\|', line&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;token = match.group&#40;2&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for char in token:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte = byte &lt;&lt; 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if char != &quot; &quot; and \<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;char != &quot;.&quot;:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;byte += 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;input_bytes.append&#40;byte&#41;<br />&nbsp; &nbsp;input.close&#40;&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# REL-compress the data<br />&nbsp; &nbsp;last_byte = -1<br />&nbsp; &nbsp;count = 0<br />&nbsp; &nbsp;for byte in input_bytes:<br />&nbsp; &nbsp;&nbsp; &nbsp;if &#40; byte != last_byte and \<br />&nbsp; &nbsp;&nbsp; &nbsp;count &gt; 0 &#41; or \<br />&nbsp; &nbsp;&nbsp; &nbsp;count &gt;= 128:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rle_words.append&#40;&#40;&#40;count - 1&#41; &lt;&lt; 8&#41; | &#40;last_byte &amp; 0xff&#41;&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;count = 0<br />&nbsp; &nbsp;&nbsp; &nbsp;last_byte = byte<br />&nbsp; &nbsp;&nbsp; &nbsp;count += 1<br />&nbsp; &nbsp;rle_words.append&#40;&#40;&#40;count - 1&#41; &lt;&lt; 8&#41; | &#40;last_byte &amp; 0xff&#41;&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Build the word dictionary<br />&nbsp; &nbsp;for word in rle_words:<br />&nbsp; &nbsp;&nbsp; &nbsp;if not word in word_count:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;word_count&#91;word&#93; = 0<br />&nbsp; &nbsp;&nbsp; &nbsp;word_count&#91;word&#93; += 1<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Sort the word dictionary<br />&nbsp; &nbsp;tupples = &#91;&#93;<br />&nbsp; &nbsp;for key in word_count:<br />&nbsp; &nbsp;&nbsp; &nbsp;tupples.append&#40;&#40;word_count&#91;key&#93;, int&#40;key&#41;&#41;&#41;<br />&nbsp; &nbsp;tupples.sort&#40;&#41;<br />&nbsp; &nbsp;tupples.reverse&#40;&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Take the top 128 elements as the compression dictionary<br />&nbsp; &nbsp;tupples = tupples&#91;0:128&#93;<br />&nbsp; &nbsp;for i in range&#40;0, len&#40;tupples&#41;&#41;:<br />&nbsp; &nbsp;&nbsp; &nbsp;dict_words&#91;tupples&#91;i&#93;&#91;1&#93;&#93; = i<br />&nbsp; &nbsp;&nbsp; &nbsp;tupples&#91;i&#93; = tupples&#91;i&#93;&#91;1&#93;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Output the dictionary<br />&nbsp; &nbsp;# NOTE: tupples is now an array of INTs, should have thought that one through :D<br />&nbsp; &nbsp;output_bytes.append&#40;len&#40;tupples&#41;&#41;<br />&nbsp; &nbsp;for word in tupples:<br />&nbsp; &nbsp;&nbsp; &nbsp;# Just like in the record stream, count first, then byte<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;output_bytes.append&#40;word &gt;&gt; 8&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;output_bytes.append&#40;word &amp; 0xff&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Output the input record stream<br />&nbsp; &nbsp;for word in rle_words:<br />&nbsp; &nbsp;&nbsp; &nbsp;# Compress-able record<br />&nbsp; &nbsp;&nbsp; &nbsp;if word in dict_words:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;# Bit 7 is the &quot;this is a dictionary word&quot; flag<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;output_bytes.append&#40;dict_words&#91;word&#93; | 0x80&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;# Non-compress-able record<br />&nbsp; &nbsp;&nbsp; &nbsp;else:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;# Count first, then byte<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;output_bytes.append&#40;word &gt;&gt; 8&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;output_bytes.append&#40;word &amp; 0xff&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;# Output the file<br />&nbsp; &nbsp;# Note: there may be a much faster way to do this.<br />&nbsp; &nbsp;output = open&#40;sys.argv&#91;2&#93;, &quot;wb&quot;&#41;<br />&nbsp; &nbsp;for i in range &#40;0, len&#40;output_bytes&#41;&#41;:<br />&nbsp; &nbsp;&nbsp; &nbsp;output.write&#40;struct.pack&#40;&quot;B&quot;, output_bytes&#91;i&#93;&#41;&#41;<br />&nbsp; &nbsp;output.close&#40;&#41;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;print &quot;Total Frames:\t%d&quot; % len&#40;input_bytes&#41;<br />&nbsp; &nbsp;print &quot;Output Length:\t%d Bytes&quot; % len&#40;output_bytes&#41;<br />&nbsp; &nbsp;print &quot;Compressed %%:\t%f%%&quot; % float&#40;&#40;float&#40;len&#40;output_bytes&#41;&#41; / float&#40;len&#40;input_bytes&#41;&#41;&#41; * float&#40;100&#41;&#41;<br /><br /><br />if __name__ == &quot;__main__&quot;:<br />&nbsp; &nbsp;main&#40;&#41;<br /></div><br /><br />File Format Documentation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />File format description for the binary output file created by fm2bin.py<br /><br />by Norman B. Lancaster<br /><br /><br /><br />Offset&nbsp; &nbsp;Length&nbsp; &nbsp;Desscription<br />0&nbsp; &nbsp;&nbsp; &nbsp;1&nbsp; &nbsp;&nbsp; &nbsp;&#40;N&#41; Length of the compression dictionary in entries<br />1&nbsp; &nbsp;&nbsp; &nbsp;2*N&nbsp; &nbsp;&nbsp; &nbsp;Compression entries.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Byte&nbsp; &nbsp;Meaning<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp;&nbsp; &nbsp;The number of frames to hold this data in the output latch for controller 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;1&nbsp; &nbsp;&nbsp; &nbsp;The data that should be loaded into the output latch for controller 1<br />2*N+1&nbsp; &nbsp;XXX&nbsp; &nbsp;&nbsp; &nbsp;Input record entries.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Byte&nbsp; &nbsp;Meaning<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;0&nbsp; &nbsp;&nbsp; &nbsp;The number of frames to hold this data in the output latch for controller 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;If bit 7 is set this is an index into the compression entries table &#40;expressed<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;as an offset in compression entires, NOT bytes&#41; to load.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;1&nbsp; &nbsp;&nbsp; &nbsp;The data that should be loaded into the output latch for controller 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;If bit 7 of byte one is set, skip this byte.<br /><br />Results for Reference FM2 Files:<br /><br />Title:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NES Super Mario Bros &#40;JPN/USA PRG0&#41; &quot;warpless&quot; in 18:41.7 by Lee &#40;HappyLee&#41;<br />Download URL:&nbsp; &nbsp;http://tasvideos.org/movies/fm2/happylee3-smbwarpless.zip<br />Total Frames:&nbsp; &nbsp;67413<br />Output Length:&nbsp; 4391 Bytes<br />Compressed %:&nbsp; &nbsp;6.513580%<br /><br />Title:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;NES Super Mario Bros &#40;JPN/USA&#41; &quot;walkathon&quot; in 06:47.2 by Lee &#40;HappyLee&#41;.<br />Download URL:&nbsp; &nbsp;http://tasvideos.org/movies/fm2/happylee4-smb-sidestroller.zip<br />Total Frames:&nbsp; &nbsp;24472<br />Output Length:&nbsp; 1498 Bytes<br />Compressed %:&nbsp; &nbsp;6.121281%<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Mar 25, 2011 10:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">Good news! I got bored so I whipped up a Python program to compress FCEUX FM2 input movies into the format I documented above. I tested this with a ~18 minute run of SMB1 and a ~6 minute run of SMB1. Both came out to about 6% of the uncompressed (one byte per frame) size.</div>
<br />Wow, thanks, that's a much better ratio than I expected. I guess this means that I could actually use the 32K PRG-RAM for my PowerPak replayer instead of PRG-ROM. Makes some things easier, because recordings could be loaded using the standard PowerPak menus.
<br />
<br />EDIT: FYI, I checked tasvideos.org and the longest "speedrun" seems to be DW4 at a bit over 2 hours. I should try couple of more videos with your script to see how well they compress in general.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>