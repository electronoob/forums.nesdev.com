<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=259" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-03-26T02:53:48-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=259</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-03-26T02:53:48-07:00</updated>
<published>2005-03-26T02:53:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1714#p1714</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1714#p1714"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1714#p1714"><![CDATA[
Aha, I got it now.<br />Yes, so this would need fast buffer, I understand. Technical challenge, heh. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Mar 26, 2005 2:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2005-03-26T01:29:43-07:00</updated>
<published>2005-03-26T01:29:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1713#p1713</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1713#p1713"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1713#p1713"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I've no knowledge about puzzle game, but I didn't say writing every piece as sprite, only the one who are just falling.<br /></div><br /><br />But it's possible for every piece on the screen to be falling, if you remove the ones that were on the bottom.  So puzzle games have to be ready to handle the worst cases.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sat Mar 26, 2005 1:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-03-26T00:27:40-07:00</updated>
<published>2005-03-26T00:27:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1712#p1712</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1712#p1712"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1712#p1712"><![CDATA[
I've no knowledge about puzzle game, but I didn't say writing every piece as sprite, only the one who are just falling. When they land on something, they would suddently become BG, and I guess a "usual" buffer can handle this perfectly witout using any "superfast" buffer.<br />About MegaMan, I think the BG semi-bosses fades just with palette. And if you don't want to have a palette fade out, you can do a cool effect by clearing the exterior tiles first and the interior tiles at the end, for example, if you see what I mean. I think it's better to use "superfast" buffers only when this is really needed, for example to do animation with ChrRam, and with a game whith ChrRom it becomes less needed, but it would be usefull too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Mar 26, 2005 12:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-03-25T20:51:13-07:00</updated>
<published>2005-03-25T20:51:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1711#p1711</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1711#p1711"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1711#p1711"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />How do you want "more than 8 falling objects on a scanline" or "more than 64 falling objects on the sceen" ? You just have several sprites doing one objects for every player, isn't it ?<br /></div><br />If you're not handling the falling pieces as background, then you have to handle the falling pieces as sprites. In Tetris, the playfield is 10 blocks wide by 20 blocks tall; if you make a line at the bottom of the screen, you'll get a lot more than 64 falling objects. In Puyo or Wario's Woods, as the objects are 16 pixels by 16 pixels, you would have to use two 8x16 pixel sprites for each falling object. Would you rather use flickery OAM cycling?<br /><br />And puzzle games aren't the only games that would benefit from nametable animation. Look at some of the bigger sub-bosses from the Mega Man series, the ones that fade out the rest of the screen when they're drawn.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And the SNES also has a sprite limit per line (32 sprites I think), and this is sometimes shown in Secret of Mana.<br /></div><br />It's actually 256 sprite pixels per line (which makes a difference if you're using larger sprites). I've noticed it showing up in Super Mario RPG.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I don't know about the GBA, but as far I know think it's sprites possibilities are near-unlimited (there is 128 scaling and rotating individual sprites with variable size and they can be all on the same scanline, as far I know).<br /></div><br />GBA has 1210 rendering cycles per scanline, or 954 rendering cycles per scanline if you turn on the ability to write to OAM during horizontal blank, which a few games do to get more than 128 simultaneous sprites or more than 32 distinct rot/scale matrices. Each pixel of a non-rot/scale sprite takes 1 rendering cycle; each pixel of a rot/scale sprite takes 3.25 rendering cycles (26 cycles per 8 pixels of width).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Mar 25, 2005 8:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-03-25T11:28:23-07:00</updated>
<published>2005-03-25T11:28:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1708#p1708</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1708#p1708"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1708#p1708"><![CDATA[
How do you want "more than 8 falling objects on a scanline" or "more than 64 falling objects on the sceen" ? You just have several sprites doing one objects for every player, isn't it ?<br />And the SNES also has a sprite limit per line (32 sprites I think), and this is sometimes shown in Secret of Mana. I don't know about the GBA, but as far I know think it's sprites possibilities are near-unlimited (there is 128 scaling and rotating individual sprites with variable size and they can be all on the same scanline, as far I know).<br /><br />For FF2, I was wrong, the calculation is slow but the way it updates the tiles is pretty fast (up to 8 tiles per frame). It does it the usual way in a large-rolled loop like :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #$00<br />loop:<br />lda $500,X<br />sta $2007<br />lda $501,X<br />sta $2007<br />lda $502,X<br />sta $2007<br />....<br />lda $50f,X<br />sta $2007<br />txa<br />clc<br />adc #$10<br />tax<br />dey<br />bne loop</div><br />The stack thing wouldn't improve it scince it calculates 16 tiles (doing about 4 frames of calculation !!) and update 2x8 tiles, so update 8/8 or 12/4 would be the same. The only way to improve this would be the way Memblers said, it would be able to fill the wole 16 tiles row in one frame, but it would need a lot of WRAM and I think it's already used for other issues in FF2, and if it wouldn't it would fast up the programm for one frame between six, so this won't fast up enough.<br /><br />PS: The way Membler's said could also be used for an intro of a game witout WRAM, so the whole NES ram exculding the reserved parts (i.e. $300-$7ff) would be used for a buffer like that *before* the games use this ram for a normal use during gameplay. This would allow, for example, a cool grafical effect when the title screen pops up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Mar 25, 2005 11:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-03-25T10:47:52-07:00</updated>
<published>2005-03-25T10:47:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1707#p1707</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1707#p1707"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1707#p1707"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />I've never do anything like that, but if I would myself do something like tetris or puzzle fighter, I would just do the falling puzzle piece in sprites and the rest in BG<br /></div><br />Until you get more than eight falling pieces on one scanline or more than sixty-four falling pieces on one screen. You must be thinking of what would be done more in a Super NES or GBA situation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Self modifing code, you said ?<br />So it wold call a subroutine into $6000 or something that do for example :<br /></div><br />And run up extra replication costs for having more banks of RAM at $6000, especially when the choice is RAM vs. open bus at $6000.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Mar 25, 2005 10:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-03-25T10:19:39-07:00</updated>
<published>2005-03-25T10:19:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1706#p1706</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1706#p1706"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1706#p1706"><![CDATA[
I've never do anything like that, but if I would myself do something like tetris or puzzle fighter, I would just do the falling puzzle piece in sprites and the rest in BG, that should work very fine, and the only time when you need to upload the name table would be when a flying piece become ground.¨<br /><br />Self modifing code, you said ?<br />So it wold call a subroutine into $6000 or something that do for example :<br />lda #$20<br />sta $2006<br />lda #$c0<br />sta $2006<br />lda #$27<br />sta $2007<br />lda #$65<br />sta $2007<br />.....<br />lda #$3a<br />sta $2007<br />rts<br /><br />You mean something like that ? It would do 2+4=6 cycles per writes, with beats the Battletoads' technique, and it additionally isn't limited to ~192 bytes. But, damn, it would waste A LOT of RAM !!! 5 bytes per write !<br />If you want to use the whole NMI time, 2345 cycles, minus 525 cycles for sprite DMA, and 28 cycles for setup scroll registers, this do 1792 remaining cycles, and divide that per 6, we could in theory write 298 bytes (in pratice this would be less because you also need to push A, X and Y, etc....), so, it would be able to fully overwrite up to 18 tiles in pattern table or up to 9 rows in the name table, or 8 name table rows with the remaining time for the attributes.<br />Damn, it's really great, but now we have to bother with RAM spacing. (298*5)+1 = 1491 = $5d3, so if the buffer start at $6000, it would end at $65d2, wasting about one sixth of the WRAM space. Well, it's a lot, but it's a good escient use after all. But it's absolutely impossible without WRAM.<br /><br />Look at Final Fantasy II, when you got the "ring" at the begining of the game you can push B ans Select button to watch the overworld map.<br />The map is circular and you can move the cursor, the programm does calculation in order to render it a bit like a 3d engine and changes the tiles when you moove arround (this can be show in a pattern table wiewer like in VirtuaNES or..... Nesticle). But mooving is damn SLOW ! You just moove of one milimeter and it takes about a segond (it was something like 65 frames), actually it take a lot of time to calculate and overwrite the map's tiles, about 4 tiles per frame. Imagine, with the stack system we could do 12 tiles per frame and with the WRAM system 18 tiles ! So it would be respectively 3 and 4,5 times faster ! Hum, I may hack my rom to have it doing that. That way, I could explore FF2's world faster.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Mar 25, 2005 10:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-03-25T06:08:53-07:00</updated>
<published>2005-03-25T06:08:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1705#p1705</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1705#p1705"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1705#p1705"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You don't know how many bytes a puzzle game has to push to update its playfield during complicated gravity effects, do you? If you don't want to see wipe effects, or you want to update both players' playfields at the same time, you need to be able to write 200 or more nametable bytes at once.<br /></div><br />By "puzzle game", do you mean "tetris game" ?</div><br />Correct, I'm thinking of Tetris and its progeny: Columns, Puyo, Zoop, Puzzle Fighter, and lots more.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Mar 25, 2005 6:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2005-03-25T04:33:15-07:00</updated>
<published>2005-03-25T04:33:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1704#p1704</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1704#p1704"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1704#p1704"><![CDATA[
The stack trick is really cool.  But if there's lots of RAM to spare, the speed of self-modifying code can't be beat.  Definitely demands WRAM though.<br /><br />I've used a huge unrolled code array loaded into RAM with just immediate loads and stores to $2007.  It costs 5 bytes of RAM and 6 cycles for every byte to be copied.  The loading code can change the values used with the immediate loads, and the register location to $2006 when needed.  And insert an RTS where you want it to end (or maybe even faster, a JMP, heheh).<br /><br />Of course, it also would need to keep track of where it made the $2006/$2007 and RTS changes so it can revert quickly to 'blank' when needed.   But noone ever said self-modifying code is simple.   <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />It may be slow to load up the buffer, but it's very, very quick to unload it this way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Fri Mar 25, 2005 4:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-03-25T00:02:01-07:00</updated>
<published>2005-03-25T00:02:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1702#p1702</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1702#p1702"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1702#p1702"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />You don't know how many bytes a puzzle game has to push to update its playfield during complicated gravity effects, do you? If you don't want to see wipe effects, or you want to update both players' playfields at the same time, you need to be able to write 200 or more nametable bytes at once.<br /></div><br />By "puzzle game", do you mean "tetris game" ?<br />The stark thing could be used for more nametable data, but usually, a write to the name table is more than one $2006 PPU index, unless you want to change the content of 6 rows fastly (192 bytes -&gt; 6 rows), witout touch to attribute tables. Otherwise a buffer with $2006, $2006, x times $2007 is possible with the stack, but it would allow less bytes to be pushed in, cause of the adresses, and you have to be very carfully, because if you do something wrong, the programm would frezee.<br />If you want it just for a particular NameTbl effect, that's the number of $2007 writes after the same $2006 adress is always the same, this could be much easyier to do.<br />To bankswich the stark would be a nice idea, this would need a card with 512 bytes of SRAM on it that could be swapped ineed the zero page and the stack into the NES's RAM, but I don't think it's possible without any modification to the NES itself (I lack in knowledge about that). At this point, redirect $4014 DMA to $2007 would be better (but here updating sprites would be very slow, and the this would probabily be worse than before)[/code]<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Mar 25, 2005 12:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-03-24T16:18:21-07:00</updated>
<published>2005-03-24T16:18:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1699#p1699</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1699#p1699"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1699#p1699"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Also, this would be useless on a game with VROM.<br /></div><br />You don't know how many bytes a puzzle game has to push to update its playfield during complicated gravity effects, do you? If you don't want to see wipe effects, or you want to update both players' playfields at the same time, you need to be able to write 200 or more nametable bytes at once.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 24, 2005 4:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-03-24T15:12:36-07:00</updated>
<published>2005-03-24T15:12:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1697#p1697</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1697#p1697"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1697#p1697"><![CDATA[
Nice breakdown, tepples. If you needed the whole stack, you could save/restore it to/from temporary area at 15 clocks per byte (8 to save it and 7 to restore it). If a normal 64 byte stack area were being used and the whole 256 bytes were needed for a quick buffer copy, swapping these 64 bytes out and back in would take 960 cycles total. This of course would be done in non-cycle-critical code.<br /><br />Heh, a mapper which allowed changing the stack and/or zero page would be neat (like on the 65816 in the SNES).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Mar 24, 2005 3:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2005-03-24T13:40:59-07:00</updated>
<published>2005-03-24T13:40:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1695#p1695</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1695#p1695"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1695#p1695"><![CDATA[
Well, battletoads seems to also upload the palette every VBlank.<br />For uploading a serie of tiles, $2006 can be uploaded only once, but often for coupling Name Table and Attribute Table writing, it shall be typically 3 string, 2 for two NameTable rows (or columns) and one for the attribute row. Hum, writing attribute table in collumn mode can't be done just by set the bit $2000.4, we should upload $2006 for every byte while scrooling horizontaly (this could be avoided in a vertical mirroring hardware, but Battletoads is 1-screen mirroring so it shall do it this way).<br />I think the better way would be to separate the NameTbl/AttributeTbl buffer with standard $2006, $2006, $2007 sheme and the PatternTbl buffer that could be in the stack page, with only one write to $2006 and lots of $2007 writes.<br />So in VBlank, only if the NameTbl/AttributeTbl buffer is free, we can process to upload eventual Pattern Table data with this superfast methode. If the buffer is 192 bytes, it would allow us to overwrite 12 tiles per frames. Cool ! The only problem is that the effect would be slower when the screen is scrooling.<br />Also, this would be useless on a game with VROM.<br />Last thing, I think uploading the buffer the usual way (sta $100,x etc....) would be better so it will allow you to call various subroutines during the fill of the buffer, and this would be of course impossible with only PHAs.<br />And the goal of buffers like this is to take all your time to fill them and them update data fastly to the PPU.<br /><br />Ah, yes, I suspect Battletoads to force a longer NMI with $2001, and then turn the screen of a bit later because there is unused space on the screen above the status bar. That way, it can have more writes to $2007, and mix the usual and the superfast way to accomplish them.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Mar 24, 2005 1:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2005-03-24T16:22:32-07:00</updated>
<published>2005-03-24T12:46:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1694#p1694</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1694#p1694"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1694#p1694"><![CDATA[
<strong>Theoretical best case scenario on NTSC</strong><br />There are 20 full scanlines (341*20 PPU cycles) plus roughly 256 PPU cycles between when $2002.D7 is set to 1 and when loopy_T is copied to loopy_V. This equals (341*20+256)/3=2358 CPU cycles. With this technique demonstrated in Battletoads, what all can we fit into vblank? <ol style="list-style-type: decimal"><li>1792 cycles: Copy all 256 bytes from stack to VRAM using this method in a completely unrolled loop. </li><li>28 cycles: Set up scroll registers. </li><li>525 cycles: Copy sprite table to PPU (done last for safety). </li></ol> That makes 2345 cycles, which is <em>just barely</em> under the limit without any sort of turn-the-screen-off-early trickery.<br /><br /><strong>More practical scenario for NTSC</strong><br />Because most games will use some of the stack for at least something "normal", we'll see how long a 192 byte buffer takes: <ol style="list-style-type: decimal"><li>1344 cycles: Copy 192 bytes from stack to VRAM using this method in a completely unrolled loop. </li><li>28 cycles: Set up scroll registers. </li><li>525 cycles: Copy sprite table to PPU (done last for safety). </li></ol> Total: 1897 cycles. This seems to indicate that a complete unrolling may not be necessary, that it may be possible to reset the VRAM destination pointer ($2006) a few times during the copy.<br /><br />EDIT: correctness<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 24, 2005 12:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-03-24T11:45:34-07:00</updated>
<published>2005-03-24T11:45:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1693#p1693</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1693#p1693"/>
<title type="html"><![CDATA[Battletoads' $2007 writing system]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=259&amp;p=1693#p1693"><![CDATA[
I posted <a href="http://www.6502.org/forum/viewtopic.php?t=190" class="postlink">a thread about this technique</a> to <a href="http://www.6502.org/" class="postlink">6502.org</a> a while back.<br /><br /><strong>Using S as fast index register</strong><br /><br />The stack register (S) can be used as an extra index register for going through a small buffer more rapidly than possible with X and Y. It might be useful where a buffer of needs to be quickly read to or written from some output device. The data is simply pushed on the stack, then popped off the stack. Both operations are faster than using an index register, and leave both index registers free for other use.<br /><br />This example quickly outputs a buffer of 0-terminated data to a memory-mapped device outside of zero-page. Each byte takes 11 cycles to read from the buffer and output:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      lda   #0    ; 0 terminator<br />      pha<br />      ...         ; push data on stack<br />      <br />      jmp   next<br />read  sta   port  ; write to device<br />next  pla<br />      bne   read</div><br />This example quickly reads data from a device and stops when it receives 0. Each byte takes 10 cycles to input and write to the buffer:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      tsx         ; save current stack pointer<br />      stx   end<br />      <br />write lda   port  ; read from device<br />      pha<br />      bne   write<br />      <br />read  pla<br />      ...         ; use data<br />      tsx<br />      cpx   end<br />      bne   read</div><br />By putting the buffer at the bottom of page 1, S can be used as both a counter and index for a write buffer. Each byte takes 12 cycles to input and write to the buffer:<br /> <div class="codetitle"><b>Code:</b></div><div class="codecontent">     tsx         ; save stack<br />      stx   stack<br />      <br />      ldx   #size<br />      txs<br />      <br />loop  lda   port<br />      pha<br />      tsx<br />      bne   loop<br /><br />      ...         ; use data<br />      <br />      ldx   stack ; restore stack<br />      tsx</div><br />By putting the buffer at the top of page 1, S can be used as both a counter and index for a read buffer. The normal stack would need to be placed lower in page 1 to coexist with this scheme. Each byte takes 13 cycles to read from the buffer and output:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      ldx   #0    ; init stack<br />      txs<br />      <br />      ...         ; push data on stack<br />      <br />loop  pla<br />      sta   port<br />      tsx<br />      bne   loop</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Mar 24, 2005 11:45 am</p><hr />
]]></content>
</entry>
</feed>