<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3609" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-09-29T14:59:07-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3609</id>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2007-09-29T14:59:07-07:00</updated>
<published>2007-09-29T14:59:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27276#p27276</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27276#p27276"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27276#p27276"><![CDATA[
<div class="quotetitle">albailey wrote:</div><div class="quotecontent"><br />I wish I knew where the PPU addr pointed to after a write to $2000 (I assume its the start of that particular nametable)<br /></div><br /><br />$2000 does not [directly] change the address at all -- it would still point tot he same place it did before the write.<br /><br />$2000 does, however, change the nametable bits in the <em>temporary</em> address (which gets copied to the <em>actual</em> PPU address at frame start).<br /><br />$2000 sets only bits 10 and 11... other bits in the temp address remain unchanged.  Therefore if the temp address is $2416 and you write 0 to $2000, the new temp address will be $2016<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat Sep 29, 2007 2:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[albailey]]></name></author>
<updated>2007-09-29T14:13:36-07:00</updated>
<published>2007-09-29T14:13:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27275#p27275</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27275#p27275"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27275#p27275"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">albailey wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent"> LDA #$00<br /> STA $2006<br /> STA $2006<br /></div><br /></div><br />Just for the record, the "standard" way to set up scrolling before a frame is rendered is through one write to $2000 (to set the name table bits) and two writes to $2005.<br /><br />Using $2006 to set the scrolling is a bit "hacky", and should be avoided unless necessary. Two $2006 writes alone are not enough to fully set the scrolling to any point in the name tables.<br /><br />I'm saying this because many people "fix" demos by writing zeroes to $2006, while they should be using $2000 (writing %xxxxxx00) and $2005 (writing $00 twice) instead. Maybe it's because writing to $2006 is easier.<br /><br />The cases where the use of $2006 is necessary are when you need to set the scroll after VBlank has ended (ie, when you enable rendering late or when you have a split screen). But even then, you need $2006 only if you have to set the vertical scroll.</div><br /><br />There is no scrolling in this code as far as I can see.  It is simulating a scrolling effect by cycling/updating the palette. <br />If you update the palette (or a nametable) dont you need to set your 2006 pointer back to $0000 or else screen updating will stsart from wherever it's currently pointed?  Thats all I fixed for him.<br /><br />Edit-  I modified the code as you mentioned and it also works, as did just a single write to $2000 (without the $2005 writes).  This makes sense.  I wish I knew where the PPU addr pointed to after a write to $2000 (I assume its the start of that particular nametable)<br /><br />Edit2: After re-reading your response I have a better understanding for what you were saying.  The proper way to "reset" your PPU pointer is through a write to $2000, and resetting the scroll registers (whether they are being used or not).<br /> I can see why manually resetting  it (through writing $00 twice to $2006) <br />would be more of a hack.<br /><br />Al<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=772">albailey</a> — Sat Sep 29, 2007 2:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-09-28T18:26:18-07:00</updated>
<published>2007-09-28T18:26:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27266#p27266</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27266#p27266"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27266#p27266"><![CDATA[
Even easier is to define symbolic constants, combined with many assemblers' | (bitwise or) operator.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPUCTRL = $2000<br />NT_2000 = $00<br />NT_2400 = $01<br />NT_2800 = $02<br />NT_2C00 = $03<br />VRAM_DOWN = $04<br />OBJ_0000 = $00<br />OBJ_1000 = $08<br />OBJ_8X16 = $20<br />BG_0000 = $00<br />BG_1000 = $10<br />VBLANK_NMI = $80<br /><br />PPUMASK = $2001<br />LIGHTGRAY = $01<br />BG_OFF = $00<br />BG_CLIP = $08<br />BG_ON = $0A<br />OBJ_OFF = $00<br />OBJ_CLIP = $10<br />OBJ_ON = $14<br /><br />  lda #NT_2000|BG_0000|OBJ_8X16|VBLANK_NMI<br />  sta PPUCTRL<br />  lda #BG_ON|OBJ_ON<br />  sta PPUMASK<br /><br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Sep 28, 2007 6:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[atari2600a]]></name></author>
<updated>2007-09-28T17:57:39-07:00</updated>
<published>2007-09-28T17:57:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27265#p27265</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27265#p27265"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27265#p27265"><![CDATA[
Just for the record, you might want to use binary (%) instead of hex when writing to $2000/$2001.  It'll make things ALOT easier.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3367">atari2600a</a> — Fri Sep 28, 2007 5:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[meshounah]]></name></author>
<updated>2007-09-28T15:26:15-07:00</updated>
<published>2007-09-28T15:26:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27264#p27264</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27264#p27264"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27264#p27264"><![CDATA[
ahh it was included with nesasm(i think) but i found a tutorial focused around p65 is it better than nesasm?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3381">meshounah</a> — Fri Sep 28, 2007 3:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-09-28T15:20:54-07:00</updated>
<published>2007-09-28T15:20:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27263#p27263</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27263#p27263"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27263#p27263"><![CDATA[
<div class="quotetitle">albailey wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> LDA #$00<br /> STA $2006<br /> STA $2006<br /></div><br /></div><br />Just for the record, the "standard" way to set up scrolling before a frame is rendered is through one write to $2000 (to set the name table bits) and two writes to $2005.<br /><br />Using $2006 to set the scrolling is a bit "hacky", and should be avoided unless necessary. Two $2006 writes alone are not enough to fully set the scrolling to any point in the name tables.<br /><br />I'm saying this because many people "fix" demos by writing zeroes to $2006, while they should be using $2000 (writing %xxxxxx00) and $2005 (writing $00 twice) instead. Maybe it's because writing to $2006 is easier.<br /><br />The cases where the use of $2006 is necessary are when you need to set the scroll after VBlank has ended (ie, when you enable rendering late or when you have a split screen). But even then, you need $2006 only if you have to set the vertical scroll.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Sep 28, 2007 3:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[albailey]]></name></author>
<updated>2007-09-28T14:53:12-07:00</updated>
<published>2007-09-28T14:53:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27262#p27262</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27262#p27262"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27262#p27262"><![CDATA[
OK, I looked into it and I can get it to run, there are 2 lines to change and 3 to add.  That wont make it good code to reference, but it will do what I think the author intended.<br /><br /><br />Find the reset subroutine and fix what is being written to $2000 and $2001<br /><br />change $2000 so it writes $88 instead of $80<br />change $2001 so it writes $1E instead of $0B<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br /><br />;Enable vblank interrupts, etc.<br />        ;lda    #$80  ;change this<br />        lda     #$88 ; to this<br />        sta     $2000<br />        ;lda    #$0B       ;Screen on, sprites off, show leftmost 8 pixels, colour. Change this.<br />        lda #$1E ; to this<br />        sta     $2001<br />;       cli                             ;Enable interrupts&#40;?&#41;<br /><br /></div><br /><br />That will at least show you the colour bars.<br />Problem is the NMI code that reads the joypad and alters them will now only show one color bar. That is because the SetPalette subroutine has altered the PPU pointer. So add these 3 lines  just before the rts in SetPallete<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> LDA #$00<br /> STA $2006<br /> STA $2006<br /></div><br /><br />I converted the code to CA65 , made those changes and it shows the color bars which will move across the screen when A or B is pressed.<br /><br /><br />Al<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=772">albailey</a> — Fri Sep 28, 2007 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-09-28T09:40:35-07:00</updated>
<published>2007-09-28T09:40:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27260#p27260</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27260#p27260"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27260#p27260"><![CDATA[
Oh, my god, if you got it from an old tutorial that was intended to run on Nesticle you should almost throw it away. Maybe a few ideas in the code can give you some ideas how the basics of 6502 code works, but it won't work on hardware, only on Nesticle, unless serious modifications are brought in the code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Sep 28, 2007 9:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[albailey]]></name></author>
<updated>2007-09-28T06:58:28-07:00</updated>
<published>2007-09-28T06:58:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27258#p27258</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27258#p27258"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27258#p27258"><![CDATA[
OK, I downloaded this from Mark Knibbs site and the .nes rom he includes also doesnt work (which I assume he also compiled from that source).<br /> <br />I ran it in Nintendulator and the screen is grey.  So I would say there is a bug in the code.  It looks like the nametables are setup, but the screen doesnt display.  <br /><br />Are you trying to fix the code, or just trying compiling a sample program?<br /><br /><br />I dont have NESASM so I cant proceed ay further.<br /><br />Al<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=772">albailey</a> — Fri Sep 28, 2007 6:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[meshounah]]></name></author>
<updated>2007-09-28T05:56:48-07:00</updated>
<published>2007-09-28T05:56:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27253#p27253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27253#p27253"/>
<title type="html"><![CDATA[stupid question]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3609&amp;p=27253#p27253"><![CDATA[
I'm using nesasm and i can successfully compile a rom but i get squat when i run it on NesterJ <div class="codetitle"><b>Code:</b></div><div class="codecontent">; INES header setup<br />    .inesprg    1   ; One 16k prg bank<br />    .ineschr    1   ; One 8k  chr bank<br />    .inesmir    1   ; Vertical map mirroring<br />    .inesmap    0   ; Use mapper 0<br /><br />;Colour bars program by Mark Knibbs<br />    .bank 0<br />    .org  $C000       ;16Kb PRG-ROM, 8Kb CHR-ROM<br /><br />   .db   &quot;Colour bars display program v1.1 14-Nov-97 © 1997 by Mark Knibbs &lt;mark_k@iname.com&gt;&quot;<br /><br />Reset_Routine:<br />   cld            ;Clear decimal flag<br />   sei            ;Disable interrupts<br />.WaitV:   <br />   lda $2002<br />   bpl .WaitV      ;Wait for vertical blanking interval<br />   ldx #$00<br />   stx $2000<br />   stx $2001      ;Screen display off, amongst other things<br />   dex<br />   txs            ;Top of stack at $1FF<br /><br />;Clear the NES' WRAM. This routine is ripped from &quot;Duck Hunt&quot; - I should probably clear all $800 bytes.<br />   ldy #$06      ;To clear 7 x $100 bytes, from $000 to $6FF?<br />    sty &lt;$01        ;Store count value in $01<br />   ldy #$00<br />    sty &lt;$00<br />   lda #$00<br /><br />.Clear:<br />    sta &#91;$00&#93;,y     ;Clear $100 bytes<br />   dey<br />   bne .Clear<br /><br />    dec &lt;$01       ;Decrement &quot;banks&quot; left counter<br />   bpl .Clear      ;Do next if &gt;= 0<br /><br /><br />;Now we need to set up the palette and colour bar data.<br />   jsr   SetTables   ;Set up name and attribute table data<br />   ldy   #$00      ;Initial palette &quot;position&quot;<br />;Next instruction unnecessary since memory has just been cleared<br />;   sty &lt;$02         ;Store palette position<br />   jsr   SetPalette   ;Set initial palette data<br /><br />;Enable vblank interrupts, etc.<br />   lda   #$80<br />   sta   $2000<br />   lda   #$0B      ;Screen on, sprites off, show leftmost 8 pixels, colour<br />   sta   $2001<br />;   cli            ;Enable interrupts&#40;?&#41;<br /><br />;Now just loop forever?<br />.Loop:<br />   jmp   .Loop<br /><br /><br /><br /><br />;We only need 4 distinct characters, like this:<br />;<br />;For low 2 bits of colour number = %00. Character byte number = 0.<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;<br />;For low 2 bits = %01. Character byte number = 1.<br />;<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;<br />;For low 2 bits = %10. Character byte number = 2.<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;   %00000000<br />;<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;<br />;For low 2 bits = %11. Character byte number = 3.<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;   %11111111<br />;<br />;----------<br />;<br />;The display is 256 pixels across. This is 8 columns of 32 pixels, or 16 columns of 16 pixels.<br />;I'll start off by using 8 columns of 32 pixels.<br />;<br />;NOTE: Need to carefully choose which colours to use for the bars. This is because of the &quot;palette<br />;mirroring&quot; effect &#40;i.e., $3F00 mirrored to $3F04, $3F08 &amp; $3F0C&#41;<br />;Suitable palette entries to use would be:<br />; 1  2  3  5  6  7  9  10<br />;Initially these contain these colour numbers &#40;see palette-setting routine below&#41;:<br />; 0  1  2  3  4  5  6  7<br /><br /><br />;We'll initially have colour #0 on the left, and colour #7 on the right. So the bytes of the name<br />;table &#40;at $2000 in PPU space&#41; need to be like this:<br />;<br />;Entry1   Entry2   Entry3   Entry5   Entry6   Entry7   Entry9   Entry10<br />;<br />;1 1 1 1  2 2 2 2  3 3 3 3  1 1 1 1  2 2 2 2  3 3 3 3  1 1 1 1  2 2 2 2<br />;<br />;Fill all 30 rows with this pattern.<br />;<br />;<br />;Now for the attribute table layout. The attr table is 64 bytes long, at $23C0 in PPU space.<br />;So all 8 rows of the attribute table will be filled with these bytes:<br />;<br />; %00000000 %00000000 %00000000 %01010101 %01010101 %01010101 %10101010 %10101010<br />;In decimal:<br />;     0         0         0         85        85        85       170       170<br /><br /><br /><br />;Set the name &#40;$2000&#41; &amp; attribute tables &#40;$23C0&#41;<br />;-----------------------------------------------<br />SetTables:<br /><br />;Set the PPU memory address<br />   ldx   #$20      ;High byte of $2000<br />   stx   $2006<br />   ldx   #$00      ;Low byte of $2000<br />   stx   $2006<br /><br />   ldy   #30         ;30 rows to do<br />.Row:   <br />   jsr   Set3columns   ;Do the first 3 columns<br />   jsr   Set3columns   ;Do the next 3 columns<br />;Now we do the last two bars &#40;last 8 bytes in the row&#41;; these are set to 1 1 1 1 2 2 2 2.<br />   ldx   #$01<br />   jsr   Set2Columns<br />   dey<br />   bne   .Row<br /><br /><br />;We've set all name table bytes. Now for the attribute table. PPU memory address is already in<br />;the right place when we get here.<br />   ldy   #8      ;8 attribute rows to do<br />.AttrRow:<br />   ldx   #%00000000<br />   jsr   Store3      ;Store 0 0 0 in attr table<br />   ldx   #%01010101<br />   jsr   Store3      ;Store 85 85 85 in attr table<br />   ldx   #%10101010<br />   jsr   Store2      ;Store 170 170 in attr table<br />   dey<br />   bne   .AttrRow<br />   rts         ;That's it!<br /><br />Set3columns:<br />   ldx   #$01      ;Start row with 1 1 1 1 bytes<br />   jsr   Store4<br />   inx         ;Then 2 2 2 2<br />Set2Columns<br />   jsr   Store4<br />   inx         ;Then 3 3 3 3<br /><br />Store4:   <br />   stx   $2007<br />Store3:   <br />   stx   $2007<br />Store2:   <br />   stx   $2007<br />   stx   $2007<br />   rts<br /><br /><br />;Image palette is at $3F00 in PPU space. We just fill the $10 bytes of it like this initially:<br />;<br />;Palette entry #   Colour code<br />;---------------   -----------<br />;0         irrelevant<br />;1         0<br />;2         1<br />;3         2<br />;4         irrelevant<br />;5         3<br />;6         4<br />;7         5<br />;8         irrelevant<br />;9         6<br />;10         7<br />;11-15         irrelevant<br />;<br />;When we want to &quot;rotate&quot; the colour bars, just add 1 to each entry, or subtract 1 from each<br />;entry. This routine sets the palette data, given an initial colour # in Y<br />;<br />;Palette values are contained in the PPU memory space, at:<br />;$3F00   -   image palette<br />;$3F10   -   sprite palette   - not used here<br />;To set the PPU memory address, write high byte and then low byte to $2006.<br />;Then write to $2007 to &quot;poke&quot; the memory. The auto-increment depends on whether<br />;bit 2 of $2000 is set. If clear, increment = 1. If set, increment = 32.<br /><br />SetPalette:<br /><br />;Set PPU memory address to $3F01 &#40;first palette entry not used&#41;<br />    ldx #HIGH&#40;$3F01&#41; ;High byte of $3F01<br />   stx   $2006<br />    ldx #LOW&#40;$3F01&#41;;Low byte of $3F01<br />   stx   $2006<br /><br />   ldx   #3      ;Set three groups of &#40;3 entries + 1 irrelevant&#41;<br />.Write:<br />   sty   $2007<br />   iny<br />   sty   $2007<br />   iny<br />   sty   $2007<br />   iny<br /><br />   sty   $2007      ;The irrelevant one<br />   dex<br />   bne   .Write<br />   rts         ;Done!<br /><br />NMI_Routine:<br />;Read the controller buttons. Move to the next &quot;colour set&quot; if pressed.<br />;By shifting the palette values by 1, or -1, we can achieve a &quot;scrolling&quot; effect<br />;when buttons A &amp; B are pressed.<br />;Re-write the image palette array if necessary. No need to modify name table data.<br /><br />;First, save the registers<br />    php<br />   pha<br />   txa<br />   pha<br />   tya<br />   pha<br /><br />    ldx &lt;$00    ;Get previous button status byte<br />    stx &lt;$01    ;Put it in $01<br /><br />;Controller read routine, by Kevin Horton.<br /><br />;Returns following bits in A:<br />; Bit      Button<br />; ---      ------<br />;  0      Right<br />;  1      Left<br />;  2      Down<br />;  3      Up<br />;  4      Start<br />;  5      Select<br />;  6      B<br />;  7      A<br /><br />    ldy #$08        ;Number of iterations<br />    ldx #$01<br />    stx $4016       ;store 1 out the strobe <br />    dex<br />    stx $4016       ;store 0 out the strobe<br /><br />.ReadBit:<br />    lda $4016       ;read the button<br />    ror A           ;transfer it to the carry flag<br />    txa<br />    rol A<br />    tax             ;rotate X left, storing the bit into the lowest pos.<br />    dey<br />    bne .ReadBit    ;loop 8 times for all 8 buttons<br />;   rts             ;return acc with status of all 8 buttons<br /><br /><br />;Now we compare the current and previous button values. We want to see if either button A or B<br />;is pressed, *AND* that button was *NOT* pressed last time.<br />;To do this:<br />;· get the current button status.<br />;· Logical AND with %11000000 &#40;= $C0&#41;, giving &quot;CBS&quot;, to see if either A or B is pressed. If not,<br />;  nothing to do.<br />;· Now we know that at least one of A, B is pressed.<br />;· get the previous button status.<br />;· NOT this previous status, giving &quot;NPBS&quot;<br />;· Logical AND &quot;NPBS&quot; with &quot;CBS&quot;. <br />;· Then bits 6 &amp; 7 are set iff the button is pressed now, but was not pressed last frame. So take<br />;  action based on this.<br /><br />   and   #$C0      ;Only interested in A &amp; B at the moment<br />    sta &lt;$00        ;Use location 0 for storing current controller button data<br /><br />;Next inst unnecessary since last inst was sta $00<br />;   lda &lt;$00        ;Get current button status<br />   beq   .DoNothing   ;If neither button pressed<br /><br />    lda &lt;$01        ;Get previous button status<br />   eor   #$FF      ;NOT it<br />    and &lt;$00        ;AND this with current status<br />   beq   .DoNothing   ;If no change from last time, do nothing<br /><br />;Now we can see what action to take.<br />;If A pressed, shift bars one to the right &#40;i.e., increment palette settings&#41;.<br />;If B pressed, shift bars one to the left &#40;i.e., decrement palette settintgs&#41;.<br /><br />    ldy &lt;$02        ;Get current palette base<br />    rol A           ;So button A status in carry<br />   bcc   .NotA<br /><br />;Shift palette &quot;up by one&quot;<br />   iny<br /><br />.NotA:   <br />    rol A           ;So button B status in carry<br />   bcc   .NotB<br /><br />;Shift palette &quot;down by one&quot;<br />   dey<br /><br />.NotB:   <br />    sty &lt;$02<br />   jsr   SetPalette<br /><br />.DoNothing:         ;Restore registers and exit.<br />   pla<br />   tay<br />   pla<br />   tax<br />   pla<br />   plp<br /><br />IRQ_Routine:      ;Dummy label<br />   rti<br /><br /><br />;That's all the code. Now we just need to set the vector table approriately.<br /><br />    .bank 1<br />   .org   $FFFA<br />   .dw      NMI_Routine<br />   .dw      Reset_Routine<br />   .dw      IRQ_Routine      ;Not used, just points to RTI<br /><br />    .bank 2<br />    .org  $0000<br />    .incbin &quot;color.chr&quot;<br /><br /><br /><br /><br /><br /></div><br /><br />what is the problem?  <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3381">meshounah</a> — Fri Sep 28, 2007 5:56 am</p><hr />
]]></content>
</entry>
</feed>