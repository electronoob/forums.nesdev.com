<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Which clock is IRQ/NMI checked on?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Which clock is IRQ/NMI checked on?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=1965">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=1965</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Aug 31, 2006 8:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Which clock is IRQ/NMI checked on?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm still lacking a good reference for which clock IRQ and NMI are checked on. I've been studying the timing diagrams in the Rockwell manual again. This is what I've gotten from them:
<br />
<br />* Each instruction is structured into the following cycles: opcode fetch, decode, optional extra cycles, and a final calculation cycle that overlaps with opcode fetch for the next instruction
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1 Opcode<br />2 Decode<br />3 Final&nbsp; &nbsp;Opcode<br />4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Decode<br />5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Final&nbsp; &nbsp;Opcode<br />6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Decode&nbsp; &nbsp;...<br />7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Final</div>
<br />
<br />* The interrupt sequence consists of the normal opcode fetch, another dummy opcode fetch, then interrupt vectoring cycles
<br />
<br />This instruction overlap upsets the simpler model we commonly use when talking of the nth cycle of an instruction, since in reality every instruction has one more cycle than listed in the timing charts (the charts list how many cycles longer a code sequence will take when adding that instruction, <em>not</em> how many cycles that instruction consists of).
<br />
<br />I used to think that the processor checked for IRQ/NMI at the beginning of the next-to-last cycle of an instruction, but now I'm not so sure. Part of this is in realizing that the next-to-last cycle is the last memory cycle of an instruction, which had previously caused me to think of it as <em>the</em> last cycle of the instruction. This is clearly wrong since something like LDA must set the status flags in a cycle after the final memory read. With this new understanding, it doesn't make sense to me to check one clock before the next opcode fetch, so I'm thinking I must have been wrong.
<br />
<br />I do know that a CLI that clears the I flag while an IRQ is pending results in the next instruction executing before the interrupt sequence begins. CLI is a three-cycle instruction (opcode fetch, decode, clear I flag while fetching opcode of next instruction). From this I conclude that IRQ must be checked during the opcode fetch cycle or before that, since checking it after that wouldn't result in the extra instruction being executed. So maybe the interrupt lines are checked during the opcode fetch cycle?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Sep 01, 2006 9:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If noone here knows, it may be worth a shot to ask on the 6502.org forum.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Sep 01, 2006 11:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I connected the PPU's VBL out line (/NMI in on the CPU) to the D0 input of the first controller. Reading $4016 gives the inverted value of this. This allows me to monitor the status of the NMI input on the CPU more directly. Here is what I found (the delays are to adjust where exactly the NMI occurs):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; delay xx<br />LDA $4016&nbsp; ; A = $00<br />NOP<br />; NMI occurs here<br /><br />; delay xx+1<br />LDA $4016&nbsp; ; A = $01<br />NOP<br />; NMI occurs here<br /><br />; delay xx+2<br />LDA $4016&nbsp; ; A = $01<br />; NMI occurs here<br />NOP</div>
<br />The only conclusion I can draw is that the 6502 checks the NMI line <em>two</em> cycles before fetching the next instruction's opcode! In the second test above, the LDA finds NMI asserted but the NMI is still delayed until after the next instruction. Only when the NMI is asserted on the cycle before does the NMI occur on the next instruction.
<br />
<br />I ran the above sequence at the three different CPU-PPU clock alignments and got the same result, so the relative time within an instruction cycle that the memory read for LDA occurs is apparently about the same time that the NMI line is checked. On 6502.org I found a post saying that NMI is checked on the falling edge of PHI 2.
<br />
<br />I tried the same test using LDA (0),y (which is one clock longer than LDA absolute, pushing the final read of $4016 a clocl later), and got the same result if I adjusted the delay by one clock. This was to find whether NMI was checked at a clock relative to the beginning of an instruction or the next opcode fetch; apparently it's related to the next opcode fetch.
<br />
<br />In summary, this is the picture I get of the CPU executing LDA above:
<br />
<br />1: read opcode ($AD), finish previous instruction
<br />2: read address low, decode opcode (LDA)
<br />3: read address high, <strong>check NMI flag</strong>
<br />4: read from $4016
<br />5: read next opcode ($EA), put read from $4016 into A and status
<br />...
<br />
<br />Here are a couple of relevant posts I found on 6502.org:
<br />
<br /><!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?t=256">http://forum.6502.org/viewtopic.php?t=256</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://forum.6502.org/viewtopic.php?t=225">http://forum.6502.org/viewtopic.php?t=225</a><!-- m -->
<br />
<br />Theories and ideas welcome (Disch, I'm sure you have some).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Sep 02, 2006 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've done more testing and am fairly certain of the result. Apparently /NMI and /IRQ are checked approximately two cycles <em>before</em> the next opcode fetch, and if they are set, that next opcode fetch will be the first cycle of an interrupt vectoring sequence. In my test code, I was using
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $4016<br />LDX #1<br />LDX #2</div>
<br />The /NMI and /IRQ lines were being checked about 1.17 cycles before the final read from $4016 in the LDA instruction, that is, a little before the read of the second operand byte of the instruction ($40). If /NMI or /IRQ were asserted at this time, then the interrupt would occur before the LDX #1, otherwise after it. The next check was occurring 0.83 cycles after the final read in LDA, this one affecting whether the interrupt occurred before the LDX #2 or after it.
<br />
<br />Since the memory read latches data near the end of a cycle, my conclusion is that /NMI and /IRQ are checked near the middle of second from the last cycle of an instruction. For LDA absolute, this means the third cycle (1: opcode fetch, 2: low byte of address, 3: high byte of address, 4: read, 5: set flags). For NOP, this means the first cycle (1: opcode fetch, 2: dummy fetch, 3: nothing).
<br />
<br />I think this explains the questions Disch was having with the APU frame IRQ timing tests, where you could find the frame IRQ flag set in $4015 29831 clocks after starting the mode, but the IRQ would fire no sooner than 29833 clocks. The flag would need to be set two clocks earlier than the IRQ occurs, and the numbers now make sense.
<br />
<br /><strong>UPDATE:</strong> Since this setup allows me to read the VBL flag directly, without any of the voodoo $2002 does, I was able to get a better idea of the behavior of reading $2002. My previous descriptions are correct, except that the time the VBL flag is set is actually one PPU clock earlier than what I was claiming. So the only special behavior is reading $2002 the same PPU clock it's set, which results in it never being set for that frame. Otherwise, the behavior can be predicted using the above information. Reading $2002 one or two PPU clocks after it's been set reports it as set and suppresses NMI for that frame, since the CPU will never see it set for that frame. Reading $2002 three PPU clocks (=one CPU clock) after it's been set will allow NMI to be seen by the CPU, since it would have checked it one CPU clock before than the $2002 read.
<br />
<br />It's nice to finally have some definite information helping things fall into place. I expect this to slowly spread out and solidify more NES behavior explanations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Sep 24, 2006 1:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I need a little clarification here. From your post above,
<br />
<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">So the only special behavior is reading $2002 the same PPU clock it's set, which results in it never being set for that frame.</div><br /><br />From rom test "2.vbl_timing",<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">8) Reading 1 PPU clock before VBL should suppress setting</div>
<br />
<br />So what's the reference time, the end of scanline cycle #340 or the end of #341 one?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Sep 24, 2006 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The VBL test ROMs treated the beginning of VBL as the earliest that $2002 would read back $80. The above tests reveal that /NMI to the CPU is actually asserted one PPU clock earlier, and that reading at that time prevents the flag from being set. I guess you could say "the flag is set at that time, but if you try to actually see it set then, you'll prevent it from being set"; it's NES quantum mechanics. This doesn't change the result of any of the tests, just the explanations they give if you fail. In a future version they will have updated explanations.
<br />
<br />I don't know the exact relation of VBL to a particular scanline. I pretty much have assumed that it occurs at the beginning of the 20 non-displaying scanlines of a frame. I could test this by using timed $2006 writes while PPU rendering is off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Sep 24, 2006 3:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So with this you've solved all my PPU test rom problems! THANKS!
<br />
<br />By the way, is it there any special reason why /NMI is asserted one PPU clock earlier than VBL flag setting, or is it part of "NES quantum mechanics" (must be a cool science)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 24, 2006 8:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Muchaserres wrote:</div><div class="quotecontent">is it there any special reason why /NMI is asserted one PPU clock earlier than VBL flag setting, or is it part of "NES quantum mechanics" (must be a cool science)?</div>
<br />It might be the CPU half-clock thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Sep 25, 2006 5:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By the way, is it there any special reason why /NMI is asserted one PPU clock earlier than VBL flag setting?</div>
<br />Re-read my last few posts above. Presumably the VBL flag is set at the same time that /NMI is asserted, it's just that reading the flag right at that moment somehow prevents it from being set, for all intents and purposes (remember that reading $2002 also has the side-effect of clearing the VBL flag).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Mon Sep 25, 2006 7:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The VBL test ROMs treated the beginning of VBL as the earliest that $2002 would read back $80. The above tests reveal that /NMI to the CPU is actually asserted one PPU clock earlier, and that reading at that time prevents the flag from being set.<br /><br />I don't know the exact relation of VBL to a particular scanline. I pretty much have assumed that it occurs at the beginning of the 20 non-displaying scanlines of a frame. I could test this by using timed $2006 writes while PPU rendering is off.</div>
<br />So this is how I understand that. The rest scanline, after the whole screen render process, is 341 PPU cycles long. At the end of the 340th cycle (or during it) /NMI is asserted, and at the end of the 341st cycle (or during it) VBL is set. Then, VBL period runs for its 20 scanlines. Now, reading at the end of the 340th cycle (or during it) will prevent VBL flag to be set.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>