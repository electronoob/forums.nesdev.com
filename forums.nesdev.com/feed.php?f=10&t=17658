<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=17658" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-08-12T18:32:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=17658</id>
<entry>
<author><name><![CDATA[Rahsennor]]></name></author>
<updated>2018-08-12T18:32:49-07:00</updated>
<published>2018-08-12T18:32:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223403#p223403</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223403#p223403"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223403#p223403"><![CDATA[
As I <a href="https://forums.nesdev.com/viewtopic.php?p=221029#p221029" class="postlink">mentioned</a> a month ago, the only <em>fair</em> way to reduce the range of an RNG to a non-power-of-two is to reroll until the number is in range. Everything else will leave some results (slightly) more likely than others.<br /><br />It's also very simple: just AND, compare and loop. The only downside is that it can sometimes require many rerolls. Keep as little as possible inside the loop (in your example, reduce the range before you add), use a fast RNG, and inline it (so you have a 'roll' function that takes a range, rather than calling the roll function in a loop). But in practice most PRNGs won't generate long series of out-of-range values, and a multiply or modulo is just slow all the time.<br /><br />Otherwise, the replies above have your options pretty well covered.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7168">Rahsennor</a> — Sun Aug 12, 2018 6:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-08-12T13:24:14-07:00</updated>
<published>2018-08-12T13:24:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223388#p223388</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223388#p223388"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223388#p223388"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />With many RNGs, a multiply is better than a modulo because the upper bits have better quality randomness.<br /></div><br />This only specifically applies to LCG RNGs. On <a href="http://wiki.nesdev.com/w/index.php/Random_number_generator#Linear_feedback_shift_register" class="postlink">an LFSR RNG</a> all bits should be equal.<br /><br />(If you're referring to <a href="https://github.com/cc65/cc65/blob/master/libsrc/common/rand.s" class="postlink">cc65's LCG RNG</a> I think the entropy of the bits is a bit of a moot point, though. The low bits of the result are already overkill for most purposes.)<br /><br />The multiply will work either way (and is an interesting way to do it... i.e. this is a fixed point result that you're discarding the low 8 bits of, and the implied round-down is very important behaviour too), but this justification depends on that specific kind of RNG.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Aug 12, 2018 1:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-08-12T13:11:59-07:00</updated>
<published>2018-08-12T13:11:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223387#p223387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223387#p223387"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223387#p223387"><![CDATA[
With many RNGs, a multiply is better than a modulo because the upper bits have better quality randomness. So here's how I'd do it, using the mul8_ay routine from <em>Thwaite</em>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  jsr rand8bit  ; leaves 8 random bits in A<br />  ldy #28<br />  jsr mul8_ay  ; about 150 cycles; leaves high bits in A, low bits in $0000<br />  clc<br />  adc #3<br /></div><br /><br />Another thing you could try, which <a href="https://forums.nesdev.com/viewtopic.php?p=220926#p220926" class="postlink">I mentioned a month ago</a>, is using your PRNG to shuffle a circular buffer, favoring the least recently used values. Whether that's helpful depends on what exactly you will be using these numbers from 3 to 30 for.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Aug 12, 2018 1:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-08-12T12:56:59-07:00</updated>
<published>2018-08-12T12:56:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223385#p223385</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223385#p223385"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223385#p223385"><![CDATA[
There's a few options:<br /><br />1. Use modulo (rand % 28). This is kind of the &quot;standard&quot; way to range a random integer in higher level langauges or platforms where division is &quot;easy&quot;. You will notice that it doesn't divide evenly: 256 / 28 = 9 R 4. However, all this means is that most results happen 9/256 times, and 4 of your results happen a slightly more often 10/256. The primary disadvantage here is that division is a relatively slow operation, but in a lot of cases not that big a deal. Sometimes an iterative subtraction loop is very practical, you don't necessarily even need an &quot;optimized&quot; divide. On the other end of the easy-to-implement spectrum you could also use a lookup table for very fast specific common division, at the expense of some ROM space.<br /><br />2. Reroll if out of range. This has the unfortunate problem that it takes an unspecified number of iterations, but in practice it's generally mostly 1, rarely 2, almost never 3. If you're doing this make sure your random number generator is guaranteed to produce all values so you don't have the possibility of an infinite reroll.<br /><br />There are some other options, like using an uneven distribution (e.g. add several power-of-two masked random values), but the two above are the most straightforward, I think.<br /><br /><br /><em>Edit: ha ha ha 3 short posts covering both these options happened while I was explaining them. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /></em><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Aug 12, 2018 12:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dougeff]]></name></author>
<updated>2018-08-12T12:53:23-07:00</updated>
<published>2018-08-12T12:53:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223384#p223384</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223384#p223384"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223384#p223384"><![CDATA[
I agree with tokumaru. Properly, you would need to do a modulus, which is the remainder of a division.<br /><br />The upper algorithm here...<br /><br /><!-- m --><a class="postlink" href="http://6502org.wikidot.com/software-math-intdiv">http://6502org.wikidot.com/software-math-intdiv</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7008">dougeff</a> — Sun Aug 12, 2018 12:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pubby]]></name></author>
<updated>2018-08-12T12:53:33-07:00</updated>
<published>2018-08-12T12:52:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223383#p223383</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223383#p223383"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223383#p223383"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">retry:<br />  JSR Random<br />  AND #31<br />  CMP #28<br />  BCS retry<br />  ADC #3</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7486">pubby</a> — Sun Aug 12, 2018 12:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2018-08-12T12:47:06-07:00</updated>
<published>2018-08-12T12:47:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223382#p223382</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223382#p223382"/>
<title type="html"><![CDATA[Re: Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223382#p223382"><![CDATA[
I don't think you can properly scale to a non-power-of-two range without using multiplication/division.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Aug 12, 2018 12:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[roedesh]]></name></author>
<updated>2018-08-12T12:41:09-07:00</updated>
<published>2018-08-12T12:41:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223381#p223381</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223381#p223381"/>
<title type="html"><![CDATA[Random number in range]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17658&amp;p=223381#p223381"><![CDATA[
Hi, I'm trying to get a random number between 3 and 30. First I generate a random number (0-255), then I use AND to trim it to a number between 0-31 and then I add 3 to change the range to 3-34.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JSR Random<br />AND #31<br />ADC #3 ; range from 3 to 34<br /></div><br /><br />But how do I account for the four possible numbers that come after 30?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9309">roedesh</a> — Sun Aug 12, 2018 12:41 pm</p><hr />
]]></content>
</entry>
</feed>