<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Koei bytecode</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Koei bytecode</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=15931">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=15931</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Thu May 11, 2017 7:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's something interesting I've been investigating for the last few days... All of Koei's NES games except for Mahjong Taikai contain a standard bytecode interpreter, and the games consist almost entirely of bytecode except for the interpreter itself, the code that runs in NMI (PPU transfers and music/sound), and some &quot;syscall&quot; routines that perform tasks like bank switching and PPU register setting.<br /><br />There are two versions of the bytecode interpreter, one used by the MMC1 games (Nobunaga's Ambition, Genghis Khan, Romance of the Three Kingdoms, and Famicom Top Management) and one used by the MMC5 games. The only differences between the versions are that the MMC5 version uses the mapper's multiplication registers, and has an extra routine that seems to be an optimized version of the syscall dispatcher <s>for syscalls that only take one argument</s> for calling syscalls from native 6502 code (the standard dispatcher copies arguments from the bytecode stack to a set of static addresses in zero page; the fast dispatcher expects the caller to have done this itself)<br /><br />The bytecode is essentially an ideal C machine: it's mostly stack-based with a frame pointer and two 16-bit/32-bit registers, one &quot;left&quot; (destination for arithmetic ops) and the other &quot;right&quot; (source for arithmetic ops). It's integer-only but supports all the standard C operators including data and function pointers, both signed and unsigned division/modulus, signed and unsigned bit shifts, and bitfield extraction (with optional sign extension) and insertion. Almost all operations have 16-bit and signed 32-bit versions. 8-bit data are either zero-extended or sign-extended to 16 bits when read into a register, and the stack is 16-bit aligned.<br /><br />Each bytecode function begins with a JSR to the interpreter, followed by the stack frame size as a negative 16-bit word ($FC $FF for a routine with two local variables, etc.) followed by the bytecode. The interpreter is reentrant, and the same bytecode instruction is used to call either a bytecode function or an assembly language one. Function arguments are pushed on the stack (with the caller responsible for stack cleanup--there's a &quot;call xxxx and then unwind stack by n&quot; instruction) and return values appear to be returned in the &quot;left&quot; register (the bytecode &quot;return&quot; instruction clobbers &quot;right&quot; but preserves &quot;left&quot;).<br /><br />The bytecode is so much an ideal C machine that I'm quite sure that the games were written in C (strings in the ROMs also have C-style formatting) which was compiled to bytecode rather than native 6502 code to save ROM space. I only wonder whether Koei wrote the compiler and interpreter themselves, or whether it's a product they licensed that may have been used by other developers as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dustmop</b> [ Thu May 11, 2017 9:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is awesome! Makes sense for something like a strategy game that doesn't require peak performance. Any plans on publishing more details, such as disassembled code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu May 11, 2017 9:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd love to see its instruction set.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Thu May 11, 2017 11:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would like also to see the details of the instruction set and the explanation of their meaning.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Fri May 12, 2017 3:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would be interested in digging into the SNES games to see if they use the same byte code system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri May 12, 2017 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool find.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Fri May 12, 2017 7:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">I would be interested in digging into the SNES games to see if they use the same byte code system.</div><br /><br />The fact that a couple of their games (ie Gemfire, Uncharted Waters) were released on both the NES and SNES, might support that idea.  Porting would be a whole lot easier if both are running the same (or almost-the-same) interpreter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Fri May 12, 2017 8:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">gauauu wrote:</div><div class="quotecontent"><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">I would be interested in digging into the SNES games to see if they use the same byte code system.</div><br /><br />The fact that a couple of their games (ie Gemfire, Uncharted Waters) were released on both the NES and SNES, might support that idea.  Porting would be a whole lot easier if both are running the same (or almost-the-same) interpreter.</div><br /><br />Koei's early games (1980s to early 1990s) were released on numerous computer and console platforms including Z80 (PC88), x86 (PC98, IBM PC), 68K (X68K, Amiga, Megadrive) and I think one or two 6809 machines. It makes sense that they would keep as much of the game code as possible in platform-neutral C. Apparently the Megadrive versions of Genghis Khan 2, etc. are much much snappier than the respective SNES versions, which would be explained if the former were compiled to native 68000 and the latter use bytecode.<br /><br />ETA: I'm still chewing through the interpreter to figure out all the instructions. I've just found two instructions that implement C switch statements, one for non-contiguous cases and the other for contiguous cases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Sat May 13, 2017 12:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Making a KOEI player akin to say SCUMMVM might be nice as well. HD uncharted waters HIT ME

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Sat May 13, 2017 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Making a KOEI player akin to say SCUMMVM might be nice as well. HD uncharted waters HIT ME</div><br /><br />I think you misunderstand. This bytecode isn't like SCUMM at all. SCUMM is a domain-specific language for third-person point-and-click adventure games. This bytecode isn't domain-specific at all; it's a machine language for a virtual 16/32-bit CPU suitable to run an integer-only subset of C. The only bytecode instructions that are any higher-level than a single 8086 or 68000 instruction are the two switchtable instructions. The &quot;syscalls&quot; aren't part of the bytecode language per se; they get called from bytecode using the regular call instruction. The syscall dispatcher is just to copy arguments and return values between the bytecode stack and fixed zero-page addresses. It's part of the interpreter because it has to use the interpreter's stack pointer to find the arguments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Sat May 13, 2017 8:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Its a VM, be it like the CLR or SCUMM its still a VM. <br />The important part is, <br />Does it runs lots of 6502, then drop into the VM for the maths?<br />Or<br />It mostly runs in the VM and has a syscall for set CHR-BANK, Call Script, SetSprite,ShowDialog,ScrollScreen etc ?<br /><br />If its the first probably not so useful for VMing but it probably gets you the simulation. <br />If the second then you run the VM, trap the syscalls and make your code do what they need and boom you have the game. Basically like SCUMMVM, although the syscalls are probably game specific?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Sat May 13, 2017 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Its a VM, be it like the CLR or SCUMM its still a VM. <br />The important part is, <br />Does it runs lots of 6502, then drop into the VM for the maths?<br />Or<br />It mostly runs in the VM and has a syscall for set CHR-BANK, Call Script, SetSprite,ShowDialog,ScrollScreen etc ?<br /><br />If its the first probably not so useful for VMing but it probably gets you the simulation. <br />If the second then you run the VM, trap the syscalls and make your code do what they need and boom you have the game. Basically like SCUMMVM, although the syscalls are probably game specific?</div><br /><br />The &quot;syscalls&quot; are also very low-level. Don't think &quot;display character x's portait&quot; or &quot;print string at coordinates x, y&quot;, think &quot;copy x bytes to VRAM upload buffer and wait for the NMI thread to upload it&quot;. Even if you trapped the syscalls you'd need to emulate every part of a NES except the 6502 to run the games, and it wouldn't get you anywhere in terms of improving their graphics. With SCUMMVM, because the language is high-level, you can add higher resolution/color depth graphics to a game or modernize its interface just by replacing some resources, but with the Koei games you'd need very deep game-specific hooks. It wouldn't really be any easier than doing the same to a NES game written in straight 6502.<br /><br />What knowledge of the bytecode <em>would</em> help with is reverse-engineering the simulation algorithms and modifying the games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue May 16, 2017 10:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I'm ready to write up a technical description of the bytecode architecture:<br /><br /><strong>REGISTERS AND BASIC ARCHITECTURE</strong><br /><br />The virtual CPU has three 16-bit address/pointer registers and two 16/32-bit data registers, all stored in zero page at the following addresses:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">addr | size | register<br />-----+------+----------------<br />$02&nbsp; |&nbsp; 2&nbsp; &nbsp;| stack pointer<br />$04&nbsp; |&nbsp; 2&nbsp; &nbsp;| frame pointer<br />$06&nbsp; |&nbsp; 2&nbsp; &nbsp;| instruction pointer<br />$08&nbsp; |&nbsp; 4&nbsp; &nbsp;| left register<br />$0C&nbsp; |&nbsp; 4&nbsp; &nbsp;| right register</div><br />In addition, zero page address $00 is used throughout the interpreter as a 16-bit temporary and $10 as a 32-bit temporary.<br /><br />The stack starts at $05FF (in all the games I've checked) and grows downward, and the stack pointer points to the LSB of the last item pushed (a descending full stack). Some games (e.g. Bandit Kings of Ancient China) check the stack pointer in their vblank handler and if it is below $0200 (i.e. the bytecode stack has started to overwrite the 6502 stack) they display &quot;OVERFLOW&quot; using sprites and lock up.<br /><br />Bytecode can freely use the stack as temporary storage, but the frame pointer is controlled by the interpreter and only changes on function entry and exit. Local variables and function arguments are addressed relative to the frame pointer.<br /><br />The left and right registers are so (unofficially) named because all arithmetic and logical instructions operate on them as such, storing the result in left. Division divides left by right and stores the quotient in left, bit shifts shift left by right places, etc. There are no arithmetic flags; instead, there are instructions corresponding to signed and unsigned versions of every comparison operator, all of which store a boolean result (0 or 1) in left, and conditional jumps consist of &quot;jump if left != 0&quot; and &quot;jump if left == 0&quot;.<br /><br />The virtual CPU supports 16-bit and 32-bit operations, with the result always the same size as the operands (e.g. 16-bit multiplication produces a possibly truncated 16-bit result) All 32-bit instructions begin with a $B7 prefix byte. 16-bit operations only use and only update the lower 16 bits of the left and right registers. 8-bit data in memory is always extended to 16 bits when loaded into a register, and the stack also only supports pushing and popping 16-bit or 32-bit sized data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue May 16, 2017 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>FUNCTIONS AND STACK FRAMES</strong><br /><br />Bytecode is organized into functions, every one of which begins with a machine language JSR to the interpreter, followed by the frame size needed for the function's local variables (as a 16-bit negative number), followed by the actual bytecode. The first thing the interpreter does is pop <em>two</em> return addresses from the 6502 stack. The first one is the return address of the JSR to the interpreter, which is used to find the stack frame size and the bytecode. The second is the return address of the caller of the bytecode function, which is pushed onto the bytecode stack along with the bytecode stack pointer, frame pointer and instruction pointer. The frame pointer is then set to the current stack pointer, and the stack pointer to the new frame pointer minus the requested frame size (actually, since the size is stored as a negative number, it's technically the frame pointer <em>plus</em> the frame size)<br /><br />The bytecode return instruction does the reverse of the interpreter prologue: it restores the stack pointer, frame pointer and instruction pointer from the stack frame, and jumps to the stored return address + 1.<br /><br />In this way, bytecode functions and machine language routines can call each other freely, and bytecode function calls can be nested to any depth without growing the 6502 stack, only the bytecode stack. When a bytecode function calls a bytecode function, the return address that gets transferred from the 6502 stack to the bytecode stack is an address inside the interpreter itself.<br /><br />There are a couple of apparent redundancies: As described above, the interpreter prologue stores the previous instruction pointer on the stack, but the bytecode call instruction <em>also</em> pushes the instruction pointer onto the stack. I have not discovered what the &quot;return address&quot; pushed by the call instruction is used for, if anything. Also, the interpreter prologue copies 8 bytes onto the stack (6502 return address, stack pointer, frame pointer, instruction pointer) but it subtracts 9 from the stack pointer rather than 8, leaving a one-byte &quot;hole&quot; which I haven't yet found the purpose of.<br /><br />The following is a diagram of a stack frame at the point when the first bytecode instruction in a function is executed. Everything above the line was pushed by the calling bytecode function, while everything below the line was pushed/allocated by the interpreter prologue.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;....<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;argument2<br />&nbsp;fp+13-&gt; argument2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;argument1<br />&nbsp;fp+11-&gt; argument1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;caller instrptr&nbsp; (normally the same as below, unused?)<br />&nbsp;fp+9 -&gt; caller instrptr&nbsp; (normally the same as below, unused?)<br />&nbsp;----------------------------------------------------------------------<br />&nbsp;fp+8 -&gt; ????&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(reserved by interpreter but unused?)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;old instrptr&nbsp; &nbsp; &nbsp;(this one is restored on function return)<br />&nbsp;fp+6 -&gt; old instrptr&nbsp; &nbsp; &nbsp;(this one is restored on function return)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;old frameptr<br />&nbsp;fp+4 -&gt; old frameptr<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;old stackptr<br />&nbsp;fp+2 -&gt; old stackptr<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return address-1 (transferred from 6502 stack to bytecode stack)<br />&nbsp; fp&nbsp; -&gt; return address-1 (transferred from 6502 stack to bytecode stack)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;space for local1<br />&nbsp;fp-2 -&gt; space for local1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;space for local2<br />&nbsp;fp-4 -&gt; space for local2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;....<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;space for localn<br />&nbsp; sp&nbsp; -&gt; space for localn</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Tue May 16, 2017 10:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Koei bytecode</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>ADDRESSING MODES</strong><br /><br />Most instructions implicitly operate on left and right and store the result in left. The only instructions that have addressing modes for data are &quot;load&quot;, &quot;store&quot;, &quot;push&quot; and &quot;add&quot;. The &quot;store&quot; instruction does not take immediate arguments (obviously), and the &quot;add&quot; instruction <em>only</em> takes immediate arguments (in addition to the implicit register-register mode which every arithmetic instruction has). So there are exactly four instructions for every allowed combination of addressing mode and data size: &quot;load to left&quot;, &quot;load to right&quot;, &quot;push&quot;, and either &quot;store left&quot; or &quot;add to left&quot;.<br /><br /><strong>Quick frame-relative</strong><br />The frame-pointer-relative address of one of 12 local variables or one of 4 function arguments is encoded in the lower 4 bits of the instruction, as follows:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">code |&nbsp; offset&nbsp; | meaning*<br />-----+----------+-----------<br />&nbsp;0&nbsp; &nbsp;| frame-24 | local #12<br />&nbsp;1&nbsp; &nbsp;| frame-22 | local #11<br />&nbsp;2&nbsp; &nbsp;| frame-20 | local #10<br />&nbsp;3&nbsp; &nbsp;| frame-18 | local #9<br />&nbsp;4&nbsp; &nbsp;| frame-16 | local #8<br />&nbsp;5&nbsp; &nbsp;| frame-14 | local #7<br />&nbsp;6&nbsp; &nbsp;| frame-12 | local #6<br />&nbsp;7&nbsp; &nbsp;| frame-10 | local #5<br />&nbsp;8&nbsp; &nbsp;| frame-8&nbsp; | local #4<br />&nbsp;9&nbsp; &nbsp;| frame-6&nbsp; | local #3<br />&nbsp;A&nbsp; &nbsp;| frame-4&nbsp; | local #2<br />&nbsp;B&nbsp; &nbsp;| frame-2&nbsp; | local #1<br />&nbsp;C&nbsp; &nbsp;| frame+11 | argument #1<br />&nbsp;D&nbsp; &nbsp;| frame+13 | argument #2<br />&nbsp;E&nbsp; &nbsp;| frame+15 | argument #3<br />&nbsp;F&nbsp; &nbsp;| frame+17 | argument #4<br />*assuming that all local variables and arguments are 16-bit sized</div><br />Note that the interpreter doesn't look up these offsets from a lookup table; instead, to improve execution speed (since these are the most commonly used instructions) there are actually 16 versions of each instruction each with a hardcoded offset. This mode only applies to 16-bit data.<br /><br /><strong>Quick immediate</strong><br />An immediate value from 0 to 15 is encoded in the lower 4 bits of the instruction and zero-extended to 16 bits.<br /><br /><strong>Near frame-relative</strong><br />A signed offset to the frame pointer from -128 to +127 is stored in the byte following the instruction. This mode only applies to 16-bit data.<br /><br /><strong>Far frame-relative</strong><br />A signed offset to the frame pointer from -32768 to +32767 is stored in the 2 bytes following the instruction. This mode applies to 8-bit, 16-bit or 32-bit data; 8-bit data is <strong>zero-extended</strong> to 16 bits.<br /><br /><strong>Immediate</strong><br />An immediate value is stored in the 1, 2 or 4 bytes following the instruction. A byte-sized immediate value is <strong>sign-extended</strong> to 16 bits (unlike 8-bit data read from memory, which is always zero-extended). The exception is the stack cleanup instruction, which takes an unsigned 8-bit immediate argument. There are no 32-bit immediate push or add instructions.<br /><br /><strong>Absolute</strong><br />An absolute address is stored in the 2 bytes following the instruction. This mode applies to 8-bit, 16-bit or 32-bit data; 8-bit data is <strong>zero-extended</strong> to 16 bits. Jump and call instructions also take an absolute address.<br /><br /><strong>IP relative</strong><br />IP relative addressing is only used by branch instructions. There are two versions of each branch instruction: one which interprets the byte after the instruction as a positive number from 0 to 255 (branch ahead), and one which interprets it as a negative number from -256 to -1 (branch back).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>