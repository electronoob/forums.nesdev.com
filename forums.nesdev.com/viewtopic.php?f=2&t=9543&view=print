<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Memory segments in ca65</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Memory segments in ca65</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9543">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9543</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Morotskaka</b> [ Sat Dec 01, 2012 3:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Memory segments in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, <br /><br />I've just started out with NES programming, and it's time for my first question. <br /><br />I'm using the ca65 assembler (together with the ld65 linker) on OS X. At <!-- m --><a class="postlink" href="https://bitbucket.org/ddribin/nerdy-nights/src">https://bitbucket.org/ddribin/nerdy-nights/src</a><!-- m -->, there is a ca65 version of some of the Nerdy Night tutorials. I will refer to tutorial 6 in the following, but my question applies to all ca65 code. It seems to me that the following happens: Sprite data gets loaded into CPU address $0200, and then dma'd into PPU memory.  Here is the question: *Why* does it end up at $0200?  I can find no reference to the address in the code (I don't expect to, since that's not how ca65 rolls), or in the linker configuration (this is where I expected to find it).<br /><br />I run 'make' to build example 6. The following command line is executed:<br /><em>cl65 -vm -l -g -t nes -m background2.map -Ln background2.lbl -o background2.nes background2.asm</em><br /><br />When I run it, I see the Mario sprite. <br /><br />The following code from the example starts the dma copy:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda&nbsp; &nbsp;#$00&nbsp; &nbsp;&nbsp; &nbsp;; set the low byte (00) of the RAM address<br />&nbsp; &nbsp;sta&nbsp; &nbsp;$2003<br />&nbsp; &nbsp;lda&nbsp; &nbsp;#$02&nbsp; &nbsp;&nbsp; &nbsp;; set the high byte (02) of the RAM address <br />&nbsp; &nbsp;sta&nbsp; &nbsp;$4014&nbsp; &nbsp;; start the transfer</div><br /><br />In other words, it sets the source address to $0200 and then starts the transfer.<br /><br />However, in the source, the sprite pixel data is declared thus:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;CHARS&quot;<br />&nbsp; &nbsp;.incbin&nbsp; &nbsp;&quot;mario.chr&quot;&nbsp; &nbsp;; includes 8KB graphics from SMB1</div><br /><br />So, to find where data in the &quot;CHARS&quot; segment end up, I consult the linker configuration:<br /><br /><em>$ ld65 --dump-config nes<br /><br />MEMORY {<br />ZP:  start = $02, size = $1A, type = rw, define = yes;<br />HEADER: start = $0, size = $10, file = %O ,fill = yes;<br />ROM0: start = $8000, size = $7ff4, file = %O ,fill = yes, define = yes;<br />ROMV: start = $fff6, size = $c, file = %O, fill = yes;<br />ROM2: start = $0000, size = $2000, file = %O, fill = yes;<br />SRAM: start = $0500, size = $0300, define = yes;<br />RAM: start = $6000, size = $2000, define = yes;<br />}<br />SEGMENTS {<br />HEADER:   load = HEADER,          type = ro;<br />STARTUP:  load = ROM0,            type = ro,  define = yes;<br />LOWCODE:  load = ROM0,            type = ro,                optional = yes;<br />INIT:     load = ROM0,            type = ro,  define = yes, optional = yes;<br />CODE:     load = ROM0,            type = ro,  define = yes;<br />RODATA:   load = ROM0,            type = ro,  define = yes;<br />DATA:     load = ROM0, run = RAM, type = rw,  define = yes;<br />VECTORS:  load = ROMV,            type = rw;<br />CHARS:    load = ROM2,            type = rw;<br />BSS:      load = RAM,             type = bss, define = yes;<br />HEAP:     load = RAM,             type = bss, optional = yes;<br />ZEROPAGE: load = ZP,              type = zp;<br />}<br /><br />FEATURES {<br />CONDES: segment = INIT,<br />type = constructor,<br />label = __CONSTRUCTOR_TABLE__,<br />count = __CONSTRUCTOR_COUNT__;<br />CONDES: segment = RODATA,<br />type = destructor,<br />label = __DESTRUCTOR_TABLE__,<br />count = __DESTRUCTOR_COUNT__;<br />CONDES: type = interruptor,<br />segment = RODATA,<br />label = __INTERRUPTOR_TABLE__,<br />count = __INTERRUPTOR_COUNT__;<br />}<br /><br />SYMBOLS {<br />__STACKSIZE__ = $0300;<br />}<br /></em><br /><br />It seems that &quot;CHARS&quot; data is loaded into address &quot;ROM2&quot;, which in turn is set to 0. So, why does it get loaded into $0200?<br /><br />(I assume that does in fact end up at $0200, since the dma transfer seems to work. However, since I'm a complete newbie at this, I can't be completely sure).<br /><br />Thanks in advance!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jsolo</b> [ Sat Dec 01, 2012 5:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Memory segments in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />You're confusing OAM data (e.g. sprite position) with the actual pattern data (the 8x8 graphics you see on screen).<br />Each sprite on screen is composed out of 8x8 so called &quot;tiles&quot;. The OAM data only defines which tile a sprite uses, not how the tile looks.<br />The graphics data for the tiles (also called &quot;pattern data&quot;) lies in a special part of ROM only accessible to the rendering unit of the NES.<br /><br />The DMA unit can only transfer OAM data from a specified page in RAM or ROM. For many programs this is the $0200-$02FF area in RAM.<br />From the tutorial,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">load_sprites:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;#$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start at 0<br />@loop:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;sprites, x&nbsp; &nbsp; &nbsp; ; load data from address (sprites + x)<br />&nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;$0200, x&nbsp; &nbsp; &nbsp; &nbsp; ; store into RAM address ($0200 + x)<br />&nbsp; &nbsp; &nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; x = x + 1<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx&nbsp; &nbsp; &nbsp;#$10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; copmare x to hex $10, decimal 16<br />&nbsp; &nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp; &nbsp;@loop</div><br />This populates the first 16 bytes of $0200 with meaningful sprite data, which the DMA uploads to OAM.<br /><br />The CHR data is in fact situated at $0000-$1FFF, but <strong>does not live in CPU address space</strong>. CHR data lives in<strong> PPU address space </strong>$0000-$1FFF, which<br />can only be accessed through the PPU data register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sat Dec 01, 2012 7:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Memory segments in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As well, your linker config is overly complex; maybe try this for plain nrom, with <strong>-t none</strong> rather than <strong>-t -nes</strong> since the preconfigured nes stuff is maybe not too useful for actual game coding.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY <br />{<br />&nbsp; ZP: start = $0, size = $100, type = rw;<br />&nbsp; HEADER: start = 0, size = $0010, type = ro, file = %O, fill=yes, fillval=$00;<br />&nbsp; STACK:&nbsp; &nbsp; start = $0100, size = $0100, type = rw;<br />&nbsp; OAMRAM:&nbsp; &nbsp; start = $0200, size = $0100, type = rw;<br />&nbsp; RAM:&nbsp; &nbsp; start = $0300, size = $0500, type = rw;<br />&nbsp; ROM:&nbsp; &nbsp; start = $8000, size = $8000, type = ro, file = %O, fill=yes, fillval=$00;<br />&nbsp; CHR:&nbsp; &nbsp; start = $0000, size = $2000, type = ro, file = %O, fill=yes, fillval=$00;<br />}<br /><br />SEGMENTS {<br />&nbsp; INESHDR:&nbsp; load = HEADER, type = ro;<br />&nbsp; ZEROPAGE: load = ZP, type = zp;<br />&nbsp; STACK:&nbsp; &nbsp; &nbsp; load = STACK, type = bss, define = yes, optional = yes;<br />&nbsp; OAMRAM:&nbsp; &nbsp; &nbsp; load = OAMRAM, type = bss, define = yes, optional = yes;<br />&nbsp; BSS:&nbsp; &nbsp; &nbsp; load = RAM, type = bss, define = yes;<br />&nbsp; CODE:&nbsp; &nbsp; &nbsp;load = ROM, type = ro;<br />&nbsp; RODATA:&nbsp; &nbsp;load = ROM, type = ro;<br />&nbsp; VECTORS:&nbsp; load = ROM, type = ro, start = $FFFA;<br />&nbsp; CHRROM:&nbsp; load = CHR, type = ro;<br />}<br /><br />FILES {<br />&nbsp; %O: format = bin;<br />}<br /><br /></div><br /><br />This is what I use now for nrom, (note CHRROM rather than CHARS). You could also remove OAMRAM and STACK segments since they are rarely explicitly defined in code and optionally redefine RAM to start at $0200 or some combination of what you like. (OAMRAM may be a misleading name since that is technically in the PPU, maybe SHADOWOAM would be better.)<br /><br />As mentioned, CHR starts at zero because it is not CPU memory space - it could start at any value at all since there is no code that is defined in that segment. Ca65/ld65 needs the start address to know where code labels go. The only important thing is the size. (you could use  CHR:  start = $1234, size = $2000, type = ro, file = %O, fill=yes, fillval=$00; )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Morotskaka</b> [ Sat Dec 01, 2012 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Memory segments in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,<br /><br />Thank you very much (both of you)! That clears it up. Now I can move on to the rest of the code. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Thanks again for the quick answers.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>