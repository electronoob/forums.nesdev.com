<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>54</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Nov 06, 2012 5:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I just spent the last 4 hours reading through to the end of this thread.  <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />   I started on page 40.  And I have just remembered that my post about attribute tables was destroyed... I don't remember why.  I did find my post on <a href="http://forums.nesdev.com/viewtopic.php?p=99890#p99890" class="postlink">page 48</a> kind of confusing  because I didn't find all the attribute table info that was in my destroyed post... ugh.  Time to prepare supper for tonight... yall have a good evening!  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Nov 07, 2012 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Say you have prepared a column of attribute data. You want to write it to offsets 0, 8, 16, 24, 32, 40, 48, and 56 in the attribute table. But the PPU has no +8 increment mode, just +1 and +32. What you can do is this:<br /><ol style="list-style-type: decimal"><li>Set the PPU to +32. </li><li>Seek (set the address) to 0 and write the entries for 0 and 32. </li><li>Seek to 8 and write the entries for 8 and 40. </li><li>Seek to 16 and write the entries for 16 and 48. </li><li>Seek to 24 and write the entries for 24 and 56. </li></ol></div><br /><br />MIND = VERY BLOWN<br /><br />Wow, that's quite awesome tepples! THANK YOU!!! I get it now... with the PPU set to +32 you set the address to 0 and then write the entries for 0 <span style="color: #FFFF00">(now the PPU increments to 32)</span> and 32... thats just two writes with the PPU incrementing by 32 after each write!!!!!!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />   <strong>VERY BLOWN</strong>   <img src="./images/smilies/icon_surprised.gif" alt=":o" title="Surprised" />  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  thanks tepples <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />And um well... you did say that this would be possible if our levels were 12 metatiles high... why?  It is so grand and I don't understand why it wouldn't work with regular 15 metatile high land.   <span style="color: #888888">I'm afraid of your answer.</span> Please respond.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 07, 2012 11:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">you did say that this would be possible if our levels were 12 metatiles high... why?</div><br />When tepples mentioned that in the case of 12 metatiles, he said you'd write bytes 0 and 4, 1 and 5, 2, then 3 (meaning you don't have to write attribute bytes 6 and 7), but the technique works just fine with 15 metatiles, you just have to write all 8 attribute bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Nov 07, 2012 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><span style="font-size: 200%; line-height: normal"><strong>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</strong> <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /> <strong>THANKS TOKUMARU!!!</strong></span>  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Nov 07, 2012 5:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />...<div class="quotetitle">unregistered<span style="color: #FF40BF">, on the previous page,</span> wrote:</div><div class="quotecontent">... so, how can we get the attribute table to scroll with the screen? ...</div><br />No, not the attribute table...  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  the collision table.  I need to check the collision so our girl can fall into the non-solid water at the end of the second screen that kind of... visually scrolls over.  How can we get the collision table to scroll with the screen?  Wait... I remember that I didn't even have to create a collision table... it's already accessable right?  Or does that sound crazy too... uhmmm... ...? <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  : )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Thu Nov 08, 2012 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How are you storing your collision data? That has a lot to do with how to scroll it <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Typically I just keep a buffer of the metatiles that are on screen, and use the tile ID to index a table of flags that include collision information. To &quot;scroll&quot; this, you simply update the metatile buffer every time you scroll the screen to be in synch with it.<br /><br />Or if you've got WRAM you can just store the entire level in RAM at once and not have to worry about scrolling the data, just the screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 08, 2012 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think that the problem is that your current design is still based on the NES screen and the name tables. Most people start out that way, because it's simpler to move objects around that small area, but once you start messing with scrolling, you have to see things differently: the screen and the name tables are not the containers of the objects anymore, they are merely used as a viewport, to show a representation of part of the level, and the level is the actual container of the objects.<br /><br />You should forget about the screen and the name tables for a moment, and think of the level map as the basis for your game world. Your objects exist in the level, so everything about them is relative to the level map. Sprite coordinates are not restricted to 8 bits anymore, since levels can be much wider than 256 pixels. To test for collisions, you have to do some math with the object coordinates (like we discussed before), and since the sprite coordinates are in the same domain as level map coordinates, scrolling is absolutely irrelevant to collisions.<br /><br />To make things easier, ideally you'd have access to the whole map, either by decompressing it to WRAM or storing it uncompressed (or compressed in a way that allows for random access) in the ROM. Having access to the complete level makes it easy to move objects around and have them collide with the level regardless of what the screen and the name tables are showing.<br /><br />Don't think of scrolling as &quot;the level going by&quot;, but rather as &quot;a camera panning across the level&quot;. The level is stationary, but a virtual &quot;camera&quot; moves around in order to display different parts of the level, and it's this camera that dictates what gets written to the name tables and the OAM. You camera must have its own coordinates, which are used to convert level coordinates into screen coordinates (i.e. level coordinates - camera coordinates = screen coordinates), and you'll have to perform this conversion whenever you render sprites to OAM or metatile to the name tables.<br /><br />I know it sounds complicated, but nobody said that scrolling was easy, specially if done right. If you do it the wrong way and keep everything oriented to screen coordinates, things will surely get out of hand (like the problem you are having now, where objects aren't aligning with the collision data).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Nov 08, 2012 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />levels can be wider than 256 pixels... according to my math I could have a level with 256 256pixel wide screens... or a have a level at the amount of 65536 pixels wide with 16bit algebra... from 0 to 65535.  <span style="font-size: 200%; line-height: normal">That's <strong>BIG!</strong></span>  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Though, I wonder how do you use 16bit algebra in 8bit CPU?  Let's say we are using the number (8192+1)... tha'd be 8193 or <span style="color: #FF40BF">00100000 00000001b</span> ...woah this is kind of like using the number 256 or <span style="color: #FF40BF">00000001 00000000b</span>  with numbers 0 to 255... but that works because there are 256 numbers... 255 and the 0.  There are not 65536 numbers are there?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br /><span style="color: #888888">This is my beginning step with 16 bit math, I think... sorry. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /></span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 08, 2012 4:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can't fit a 16-bit number in one byte, but you can fit it in two. Here's how to do 16 bit addition, using the example of 508 + 8 = 516 ($01FC + $0008 = $0204):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">position_hi = $0701<br />position_lo = $0700<br /><br />&nbsp; ; set the position to $01FC<br />&nbsp; lda #$01<br />&nbsp; sta position_hi<br />&nbsp; lda #$fc<br />&nbsp; sta position_lo<br /><br />&nbsp; ; now add eight ($0008) to this position<br />&nbsp; clc<br />&nbsp; lda #$08&nbsp; ; add the low byte first<br />&nbsp; adc position_lo<br />&nbsp; sta position_lo<br />&nbsp; lda #$00<br />&nbsp; adc position_hi<br />&nbsp; sta position_hi<br /></div><br />When you add two 8-bit numbers and the result is more than 256, the CPU subtracts 256 and turns on the carry flag. The carry flag tells the CPU to add one extra the next time it adds anything, just as you'd carry the 1 when adding multi-digit base 10 numbers in first grade. Most of the time, an addition will start with the carry off; that's what the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">clc</tt> does. (Clearing a flag means turning it off; setting means turning it on.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 08, 2012 6:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What tepples said. We only have 10 different digits for representing numbers (0 to 9) but that doesn't mean it's impossible to count to 10: if we use more places for digits, we can represent bigger numbers.<br /><br />With one digit we can only represent 10 different numbers (0 to 9), but with one more digit we have a total of 100 combinations (0 to 99: each new digit multiplies the number of possible combinations by 10). With bytes it's the same thing. A single byte can only represent 256 different numbers (0 to 255), but if we use a second byte we get a total of 65536 possible combinations (0 to 65535: each new byte multiplies the number of possible combinations by 256).<br /><br />16, 32 and 64-bit CPUs make the whole thing easier (and faster) by manipulating multiples bytes at a time, while 8-bit CPUs have to do it byte by byte, but they can still perform math with big numbers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Nov 09, 2012 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I think that the problem is that your current design is still based on the NES screen and the name tables. Most people start out that way, because it's simpler to move objects around that small area, but once you start messing with scrolling, you have to see things differently: the screen and the name tables are not the containers of the objects anymore, they are merely used as a viewport, to show a representation of part of the level, and the level is the actual container of the objects.<br /><br />You should forget about the screen and the name tables for a moment, and think of the level map as the basis for your game world. Your objects exist in the level, so everything about them is relative to the level map. Sprite coordinates are not restricted to 8 bits anymore, since levels can be much wider than 256 pixels. To test for collisions, you have to do some math with the object coordinates (like we discussed before), and since the sprite coordinates are in the same domain as level map coordinates, scrolling is absolutely irrelevant to collisions.<br /><br />To make things easier, ideally you'd have access to the whole map, either by decompressing it to WRAM or storing it uncompressed (or compressed in a way that allows for random access) in the ROM. Having access to the complete level makes it easy to move objects around and have them collide with the level regardless of what the screen and the name tables are showing.<br /><br />Don't think of scrolling as &quot;the level going by&quot;, but rather as &quot;a camera panning across the level&quot;. The level is stationary, but a virtual &quot;camera&quot; moves around in order to display different parts of the level, and it's this camera that dictates what gets written to the name tables and the OAM. You camera must have its own coordinates, which are used to convert level coordinates into screen coordinates (i.e. level coordinates - camera coordinates = screen coordinates), and you'll have to perform this conversion whenever you render sprites to OAM or metatile to the name tables.<br /><br />I know it sounds complicated, but nobody said that scrolling was easy, specially if done right. If you do it the wrong way and keep everything oriented to screen coordinates, things will surely get out of hand (like the problem you are having now, where objects aren't aligning with the collision data).</div>Wow, Awesome!  Thank you so very much tokumaru!!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Your words speak to me; they've spoken to me about this new way of  thinking about the level staticly... it will all be accessable just like collision is?  I'll probably see that answer when I read these important words once again.  Thank you very <span style="color: #00BFFF">incredibly</span> much for them!<span style="color: #00BFFF">!</span>  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You can't fit a 16-bit number in one byte, but you can fit it in two. Here's how to do 16 bit addition, using the example of 508 + 8 = 516 ($01FC + $0008 = $0204):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">position_hi = $0701<br />position_lo = $0700<br /><br />&nbsp; ; set the position to $01FC<br />&nbsp; lda #$01<br />&nbsp; sta position_hi<br />&nbsp; lda #$fc<br />&nbsp; sta position_lo<br /><br />&nbsp; ; now add eight ($0008) to this position<br />&nbsp; clc<br />&nbsp; lda #$08&nbsp; ; add the low byte first<br />&nbsp; adc position_lo<br />&nbsp; sta position_lo<br />&nbsp; lda #$00<br />&nbsp; adc position_hi<br />&nbsp; sta position_hi<br /></div><br />When you add two 8-bit numbers and the result is more than 256, the CPU subtracts 256 and turns on the carry flag. The carry flag tells the CPU to add one extra the next time it adds anything, just as you'd carry the 1 when adding multi-digit base 10 numbers in first grade. Most of the time, an addition will start with the carry off; that's what the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">clc</tt> does. (Clearing a flag means turning it off; setting means turning it on.)</div>  Thank you so much tepples!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  This explains how to do 16 bit math on an 8 bit cpu; it will help me alot. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  <span style="color: #FF0000">It has simplified and enritched the way I think about the CPU subtraction! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  </span><span style="color: #FF0080">...</span><span style="color: #ff0000">And I will continue to keep 3gengames' <strong>&quot;Set subtract. Clear add.&quot;</strong> in my head too! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></span><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">What tepples said. We only have 10 different digits for representing numbers (0 to 9) but that doesn't mean it's impossible to count to 10: if we use more places for digits, we can represent bigger numbers.<br /><br />With one digit we can only represent 10 different numbers (0 to 9), but with one more digit we have a total of 100 combinations (0 to 99: each new digit multiplies the number of possible combinations by 10). With bytes it's the same thing. A single byte can only represent 256 different numbers (0 to 255), but if we use a second byte we get a total of 65536 possible combinations (0 to 65535: each new byte multiplies the number of possible combinations by 256).<br /><br />16, 32 and 64-bit CPUs make the whole thing easier (and faster) by manipulating multiples bytes at a time, while 8-bit CPUs have to do it byte by byte, but they can still perform math with big numbers.</div>  This is so excellent <span style="color: #FF0000">and helpful to me</span> too tokumaru... THANK YOU!!!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><span style="color: #FF0000">edit.</span><br /><span style="color: #00BFFF">edited again.</span><br /><span style="color: #FF0080">last edit.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Nov 19, 2012 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">How are you storing your collision data? That has a lot to do with how to scroll it <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />Typically I just keep a buffer of the metatiles that are on screen, and use the tile ID to index a table of flags that include collision information. To &quot;scroll&quot; this, you simply update the metatile buffer every time you scroll the screen to be in synch with it.<br /><br />Or if you've got WRAM you can just store the entire level in RAM at once and not have to worry about scrolling the data, just the screen.</div><br /><br />My sister doesn't like me asking questions... so I went to the nesdev wiki and searched for &quot;wram&quot;.  I learned that it stands for (<span style="color: #BFFF80">W</span>ork RAM (<span style="color: #BFFF80">R</span>andom <span style="color: #BFFF80">A</span>ccess <span style="color: #BFFF80">M</span>emory)).  And then I read some of the 300 character search results  and have concluded that WRAM is available on a mapper. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  And after another search I learned that MMC5 is the biggest mapper on then NES.  So then I went to  retrousb.com and discovered that MMC5 support on the powerpak is <span style="color: #FFFF80">buggy</span>.   (I think mapper 5 is for MMC5.)  And I also learned that my powerpak has enough hardware to run MMC5 games!   <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  So now I'd like to ask yall what are some reasons I shouldn't choose and try to use MMC5 for having WRAM?  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <span style="color: #aaaaaa">(And I'm aware of ideas that MMC5 is expensive... is it still expensive in todays market?  The American economy isn't doing well... so that may be a yes.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />)</span><br /><br /><span style="color: #80FF00">edit: Thank you qbradq for help!</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Mon Nov 19, 2012 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />WRAM is great to have, I suggest you use it if you want it, it's cheap today. Especially for 32KB of it. But MMC5 would be bad because while it can support it, it's still a long ways from anywhere near 100% understood and nowhere near workable, it doesn't even work for most games with loopys latest release. Plus it'd be super expensive to recreate. MMC3 would offer the best features and price, and has WRAM support, I'd suggest looking at that if you need a mapper. That, UNROM, or MMC1 are the most commonly used. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Nov 19, 2012 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok thank you 3gengames!!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 19, 2012 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">And then I read some of the 300 character search results  and have concluded that WRAM is available on a mapper.</div><br />WRAM can be added to any cart, even NROM (i.e. no mapper) ones. The wiki has <a href="http://wiki.nesdev.com/w/index.php/PRG_RAM_circuit" class="postlink">some information</a> about it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So now I'd like to ask yall what are some reasons I shouldn't choose and try to use MMC5 for having WRAM?</div><br />Because it's the most complex mapper there is. It's overkill to use such an advanced mapper just for the WRAM, while many other simpler and common mappers have support for WRAM as well. Also, the MMC5 still hasn't been fully cloned by anyone in the community, so it's not possible to make carts of new MMC5 games unless you use donor cartridges (MMC5 ones aren't even very common).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(And I'm aware of ideas that MMC5 is expensive... is it still expensive in todays market?  The American economy isn't doing well... so that may be a yes.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />)</div><br />Current economy has very little to do with this. The MMC5 chip used in Nintendo cartridges simply isn't manufactured anymore, because they were never used for anything besides game cartridges, and Nintendo hasn't released an NES cart in over 15 years. The chips that are currently used to replicate mappers (CPLDs, FPGAs, etc.) become more expensive as they become more complex, so implementing an MMC5 clone will always be more expensive than implementing an MMC3 clone.<br /><br />My advice is: don't chose a mapper just because of WRAM. Any cart, even NROM ones, can have WRAM. If you're gonna use a mapper, pick the simplest one that has the features you need.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>54</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>