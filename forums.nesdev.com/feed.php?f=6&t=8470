<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=8470" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-12-31T19:39:14-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=8470</id>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-31T19:39:14-07:00</updated>
<published>2011-12-31T19:39:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88239#p88239</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88239#p88239"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88239#p88239"><![CDATA[
That's not silly. But I don't think anything like this will help you much with learning how to code, because it's a rather difficult thing to do if you don't already know 6502 assembly.<br /><br />My first idea is to use one of the <a href="http://www.romhacking.net/documents/344/" class="postlink">Super Mario Bros. disassemblies</a> and remove everything that's not related to the music engine. <br /><br />This is technically what an NSF is, but an NSF is assembled code that may or may not have stripped out the ability to play music and sound effects at the same time. Even if that code is there, you have to find how it works in assembled code which I think would be harder than with disassembled code. <br /><br />When you've got just the music engine, you can figure out how it works from the disassembly, and trigger sound effects on button presses.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sat Dec 31, 2011 7:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mysteriousity]]></name></author>
<updated>2011-12-31T18:04:10-07:00</updated>
<published>2011-12-31T18:04:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88238#p88238</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88238#p88238"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88238#p88238"><![CDATA[
<div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />I don't quite understand the point of this. Can you help me understand your end goal? The actual reason you want to make an NSF rom?<br /><br />If you just want to listen to your NSF on real hardware, you can do this with a powerpak. <br /><br />If you want to put your NSF on a standalone cart, famitracker will make a rom you can burn if you used famitracker to make the music.<br /><br />Because if you want to make a cart of music you made, this is not the way to do it. <br /><br />I did get this method working with the Super Mario Bros. NSF and nesasm, but I had to use my NES programming knowledge to do it. I had to hack out the header to the NSF which is pretty simple. Then I just followed the guide, except I had to put the NMI routine and setup described in the guide at $8000 rather than after the nsf. Super Mario Bros. sets itself up at $BDC4, and is long, so there would be no room for it afterwards.<br /><br />There are so many things that can go wrong with this method. If you've got an nsf with songs you actually made, let us know what you used to make them and we may be able to help you out.<br /><br />If it's just commercial NSFs, I would just get a powerpak and call it day.<br /><br />Edit: In any case, here's the code to get the first song of the Super Mario NSF to play on a rom compiled with nesasm: <!-- m --><a class="postlink" href="http://pastebin.com/gU30fF4V">http://pastebin.com/gU30fF4V</a><!-- m --><br /><br />Edit 2: Or if you're feeling adventurous, you can try <a href="http://rainwarrior.thenoos.net/projects/nsfimport.html" class="postlink">rainwarrior's program</a> that imports any NSF track into famitracker and then use famitracker to export that as a rom. This of course means you only get one song per file, but that's also case with the guide's method unless you learn how to read the joypad. <br /><br />Edit 3: Nevermind. The import is not optimized for size, so it's often far too large for an NROM rom. Still a neat tool, though.<br /></div><br /><br />This is going to sound incredibly silly, but the reason I want to do this, is because I'm creating a Super Mario Brothers pinball game for my girlfriend and I want the sound to be generated by a real Nintendo. My plan was to create a cart that allowed sound effects and music to play by the press of the buttons on the control pad, and then jumper the pinball switches into the controller of the nes to activate the sound effects. <br /><br />So for example, when the start button for the pinball game is pressed, the Mario Brothers theme, which is set to the start button on the controller as well as jumpered to the start button of the pinball machine, plays. Bumpers would be jumpered to the B/A buttons etc.<br /><br />Again, silly, probably not a great way to do it, but it's forcing me to learn about coding, which I sort of wanted to do anyway. Thanks for all the help so far guys. Any more would be highly appreciated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5027">mysteriousity</a> — Sat Dec 31, 2011 6:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-12-29T19:43:55-07:00</updated>
<published>2011-12-29T19:43:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88146#p88146</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88146#p88146"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88146#p88146"><![CDATA[
This will only work on NSFs that don't use bankswitching (many NSFs could use it to optimize size even if they don't need the bankswitching itself).  Better watch for that too, if you're playing ripped NSFs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Thu Dec 29, 2011 7:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2011-12-29T04:09:15-07:00</updated>
<published>2011-12-29T04:09:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88101#p88101</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88101#p88101"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88101#p88101"><![CDATA[
I don't quite understand the point of this. Can you help me understand your end goal? The actual reason you want to make an NSF rom?<br /><br />If you just want to listen to your NSF on real hardware, you can do this with a powerpak. <br /><br />If you want to put your NSF on a standalone cart, famitracker will make a rom you can burn if you used famitracker to make the music.<br /><br />Because if you want to make a cart of music you made, this is not the way to do it. <br /><br />I did get this method working with the Super Mario Bros. NSF and nesasm, but I had to use my NES programming knowledge to do it. I had to hack out the header to the NSF which is pretty simple. Then I just followed the guide, except I had to put the NMI routine and setup described in the guide at $8000 rather than after the nsf. Super Mario Bros. sets itself up at $BDC4, and is long, so there would be no room for it afterwards.<br /><br />There are so many things that can go wrong with this method. If you've got an nsf with songs you actually made, let us know what you used to make them and we may be able to help you out.<br /><br />If it's just commercial NSFs, I would just get a powerpak and call it day.<br /><br />Edit: In any case, here's the code to get the first song of the Super Mario NSF to play on a rom compiled with nesasm: <!-- m --><a class="postlink" href="http://pastebin.com/gU30fF4V">http://pastebin.com/gU30fF4V</a><!-- m --><br /><br />Edit 2: Or if you're feeling adventurous, you can try <a href="http://rainwarrior.thenoos.net/projects/nsfimport.html" class="postlink">rainwarrior's program</a> that imports any NSF track into famitracker and then use famitracker to export that as a rom. This of course means you only get one song per file, but that's also case with the guide's method unless you learn how to read the joypad. <br /><br />Edit 3: Nevermind. The import is not optimized for size, so it's often far too large for an NROM rom. Still a neat tool, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Thu Dec 29, 2011 4:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2011-12-29T02:26:45-07:00</updated>
<published>2011-12-29T02:26:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88100#p88100</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88100#p88100"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88100#p88100"><![CDATA[
You typically can't use code written for one assembler with another assembler as-is.<br /><br />For example, I've never heard of ".mem", ".index" or ".opt" for NESASM. It's possible that they exist, but it's not something that I've ever used.<br /><br />Also, IIRC NESASM requires you to place some kind of whitespace (a space or a tab) before any directive (.org, .incbin, etc), otherwise it'll interpret it as a local label.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Thu Dec 29, 2011 2:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mysteriousity]]></name></author>
<updated>2011-12-29T00:19:01-07:00</updated>
<published>2011-12-29T00:19:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88099#p88099</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88099#p88099"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88099#p88099"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />This approach won't work at all.  A NSF file is a ROM, complete with its own headers, not some kind of music data to include in a program.<br /></div><br /><br />Here is the guide to do this where I got the idea from. Others have apparently gotten this approach to work.<br /><br /><!-- m --><a class="postlink" href="http://www.nullsleep.com/treasure/nsf_cart_guide/nsf_cartridge_guide_v1.0.txt">http://www.nullsleep.com/treasure/nsf_c ... e_v1.0.txt</a><!-- m --><br /><br />Unless I'm completely misunderstanding what the guide is trying to do. I'm having problems getting it to compile.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5027">mysteriousity</a> — Thu Dec 29, 2011 12:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2011-12-29T00:10:25-07:00</updated>
<published>2011-12-29T00:10:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88098#p88098</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88098#p88098"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88098#p88098"><![CDATA[
This approach won't work at all.  A NSF file is a ROM, complete with its own headers, not some kind of music data to include in a program.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Dec 29, 2011 12:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mysteriousity]]></name></author>
<updated>2011-12-29T00:28:58-07:00</updated>
<published>2011-12-28T23:27:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88097#p88097</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88097#p88097"/>
<title type="html"><![CDATA[Need Help  Assembling Code for NSF to Cart]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8470&amp;p=88097#p88097"><![CDATA[
Hello all,<br /><br />I'm trying to Assemble my source code for NSF to Cart and I'm getting some errors. I would be much very much obliged if some could help me with this, as I'm very VERY new to NES programming and really need some help.<br /><br />Also, I got the idea for doing this from the following article:<br /><br /><!-- m --><a class="postlink" href="http://www.nullsleep.com/treasure/nsf_cart_guide/nsf_cartridge_guide_v1.0.txt">http://www.nullsleep.com/treasure/nsf_c ... e_v1.0.txt</a><!-- m --><br /><br />They are using X816 as the assembler.<br /><br />Below my posted code are the errors I receive in NESASM3<br /><br />Here is my code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />.mem 8         ; 8-bit memory mode<br />.index 8      ; 8-bit index mode<br />.opt on         ; address optimize<br /><br />.org $0000      ; replace dashes with load address MINUS $80<br />.incbin &quot;metroid.nsf&quot;   ; include NSF tune<br /><br />Reset_Routine:<br />   cld         ; clear decimal flag<br />   sei         ; disable interrupts<br />   lda #%00000000      ; disable vblank interrupts by clearing<br />   sta $2000      ; the most significant bit of $2000<br />   <br />; *** WAIT 2 VBLANKS ***<br />WaitV1:   <br />   lda $2002      ; give the PPU a little time to initialize<br />   bpl WaitV1      ; by waiting for a vblank<br />WaitV2:   <br />   lda $2002      ; wait for a second vblank to be safe<br />   bpl WaitV2      ; and now the PPU should be initialized<br />   <br />; *** CLEAR SOUND REGISTERS ***<br />   lda #$00      ; clear all the sound registers by setting<br />   ldx #$00      ; everything to 0 in the Clear_Sound loop<br />Clear_Sound:<br />   sta $4000,x      ; store accumulator at $4000 offset by x<br />   inx         ; increment x<br />   cpx #$0F      ; compare x to $0F<br />   bne Clear_Sound      ; branch back to Clear_Sound if x != $0F<br /><br />   lda #$10      ; load accumulator with $10<br />   sta $4010      ; store accumulator in $4010<br />   lda #$00      ; load accumulator with 0<br />   sta $4011      ; clear these 3 registers that are <br />   sta $4012      ; associated with the delta modulation<br />   sta $4013      ; channel of the NES<br />   <br />; *** ENABLE SOUND CHANNELS ***<br />   lda #%00001111      ; enable all sound channels except<br />   sta $4015      ; the delta modulation channel<br /><br />; *** RESET FRAME COUNTER AND CLOCK DIVIDER ***<br />   lda #$C0      ; synchronize the sound playback routine <br />   sta $4017      ; to the internal timing of the NES<br />   <br />; *** SET SONG # &amp; PAL/NTSC SETTING ***<br />   lda #$00      ; replace dashes with song number<br />   ldx #$00      ; replace with $00 for NTSC or $01 for PAL<br />   jsr $A000      ; replace dashes with init address<br /><br />; *** ENABLE VBLANK NMI ***<br />   lda #%10000000      ; enable vblank interrupts by setting the <br />   sta $2000      ; most significant bit of $2000<br />   <br />NMI_Routine:<br />   lda $2002      ; read $2002 to reset the vblank flag<br />   lda #%00000000      ; clear the first PPU control register  <br />   sta $2000      ; writing 0 to it<br />   lda #%10000000      ; reenable vblank interrupts by setting<br />   sta $2000      ; the most significant bit of $2000<br />   jsr $B3B4      ; replace dashes with play address<br />   rti         ; return from interrupt routine<br />   <br />IRQ_Routine:<br />   rti         ; return from interrupt routine<br /><br />.pad $FFFA<br />   .dw   NMI_Routine   ; setup the NMI vector at $FFFA<br />   .dw   Reset_Routine   ; setup the Reset vector at $FFFC<br />   .dw   IRQ_Routine   ; setup the IRQ vector at $FFFE</div><br /><br /><br /><br /><br /><br /><br />When I run this in NESASM3 I get the following errors:<br /><br />pass 1<br />#[1]   NSF.asm<br />    1  00:E000            .mem 8                  ; 8-bit memory mode<br />       Local symbol not allowed here!<br />    2  00:E000            .index 8                ; 8-bit index mode<br />       Local symbol not allowed here!<br />    3  00:E000            .opt on                 ; address optimize<br />       Local symbol not allowed here!<br />    5  00:E000            .org $0000              ; replace dashes with load add<br />ress MINUS $80<br />       Local symbol not allowed here!<br />    6  00:E000            .incbin "metroid.nsf"   ; include NSF tune<br />       Local symbol not allowed here!<br />   67  00:E055            .pad $FFFA<br />       Unknown instruction!<br /># 6 error(s)<br /><br />Any help with this would be greatly appreciated.<br /><br />Thank You<br /><br />-M<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5027">mysteriousity</a> — Wed Dec 28, 2011 11:27 pm</p><hr />
]]></content>
</entry>
</feed>