<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9077" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-07-13T14:02:08-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9077</id>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2012-07-13T14:02:08-07:00</updated>
<published>2012-07-13T14:02:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96772#p96772</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96772#p96772"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96772#p96772"><![CDATA[
I set the object AI routine address to $0000 for inactive object slots.<br /><br />I also have this huge-ass subroutine that I call "physics," and what it does is, apply gravity and calculate BG collision with objects automatically.  For if you have a "koopa" ememy, all you have to do is move his x coordinate a pixel to the left, then "jsr physics," and he will fall off a platform when he reaches a ledge, and will stop when he runs into a wall.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Fri Jul 13, 2012 2:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-07-12T15:59:45-07:00</updated>
<published>2012-07-12T15:59:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96754#p96754</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96754#p96754"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96754#p96754"><![CDATA[
<div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><br />You would simply have to initialize each NextFreeSlot at the beginning of a game/level which I suppose is trivial.<br /></div><br />Exactly. You'd make NextFreeSlot point to slot 0 and then loop through all the slots writing increasing indexes starting from 1 to their NextFreeSlot variables. I use a negative number to indicate the end of the list (since I don't plan on having more than 128 slots!). Like you pointed out, the initialization of the list is only necessary once at the beginning of the level.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Jul 12, 2012 3:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-12T15:42:19-07:00</updated>
<published>2012-07-12T15:42:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96753#p96753</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96753#p96753"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96753#p96753"><![CDATA[
That's pretty good. I guess that's better than playing with bits.<br /><br />You would simply have to initialize each NextFreeSlot at the beginning of a game/level which I suppose is trivial.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Thu Jul 12, 2012 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-07-11T20:43:27-07:00</updated>
<published>2012-07-11T20:43:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96731#p96731</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96731#p96731"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96731#p96731"><![CDATA[
<div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><br />Maybe not faster to find the first free object, but much easier to remove one from the list.<br /></div><br />I'm not sure you realize how quick it is to manipulate the linked list. For example, this is what you'd do to retrieve the index of a free object slot and remove it from the linked list:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ldx FirstFreeSlot ;get the index of the first free slot<br />   lda NextFreeSlot, x ;get the index of the second free slot<br />   sta FirstFreeSlot ;make the second free slot the first one</div><br />See? Now X holds the index of the slot that the new object can use. Maybe this is even faster than manipulating bits that indicate what's free and what's not, because accessing individual bits in a byte isn't so trivial. <br /><br />Later, when the object is done, the reverse operations will free the slot and put it back at the start of the linked list:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda FirstFreeSlot ;get the index of the first free slot<br />   sta NextFreeSlot, x ;save it as the second free slot<br />   stx FirstFreeSlot ;make the current slot the first free one</div><br />BTW, "NextFreeSlot" is just an alias for one of the attributes of the objects. Since the slot is free, the bytes that would otherwise be used for holding the state of the object (health, meta sprite pointer, whatever) are free to be used by the linked list.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You could use 8 bytes to indicate which OAM slot is free as well. Is this too many branches/loops to find the next free?<br /></div><br />IMO, yes. I avoid "searching" as much as I can in my programs. As for the OAM in particular, there are several good cycling algorithms that don't require slots to be marked as used/free. 64 may not sound like much, but a loop with that many iterations will surely make a difference in CPU usage, so actually filling the slots already takes a significant amount of time, you really don't want to add in the time necessary to manipulate bits with slow masking operations.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Jul 11, 2012 8:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-07-11T18:36:49-07:00</updated>
<published>2012-07-11T18:36:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96725#p96725</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96725#p96725"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96725#p96725"><![CDATA[
I personally use lists with a 'free' flag. It is not too slow to find first free object, actually - because it is the last one that was removed from the list. It could be slow to find a free object if there were no objects removed since last object addition, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Wed Jul 11, 2012 6:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-11T18:31:42-07:00</updated>
<published>2012-07-11T18:31:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96724#p96724</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96724#p96724"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96724#p96724"><![CDATA[
Rather than linked lists, wouldn't it be easier/faster to use a few bytes and use one bit per object to indicate if it is available or not. Maybe not faster to find the first free object, but much easier to remove one from the list. You could use 8 bytes to indicate which OAM slot is free as well. Is this too many branches/loops to find the next free?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Wed Jul 11, 2012 6:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-07-07T03:50:51-07:00</updated>
<published>2012-07-07T03:50:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96577#p96577</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96577#p96577"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96577#p96577"><![CDATA[
It's funny because in the game I am developing I do it exactly as Tokumaru describes.<br />That way every object is like a thread, which is created and destroyed, and when active is called once per frame.<br /><br />I was under the impression that I had a super original idea but maybe it was not the case  <img src="http://forums.nesdev.com/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> <br /><br />Personally I find it much more intuitive to program "AI" in a linear way, like if it was a program in ifself, than dealing with a finite-state-machine and long chain of ifs.<br /><br />Otherwise I do it pretty much like you descibed. I have object type, X, Y, current frame and direction variables. The "status", "incoming event" variables are not needed because of what Tokumaru said.<br /><br />Collision detection is done by the object's AI itself, that is an object that is suppoed to interact with others objects is supposed to have it's AI calling the routine. There is a much standard procedure though.<br /><br />This is a total pain to code in assembly by the way.<br /><br />I do not sort the objects for collision detection, this is not necessary. However I sort them to display their sprites, so that the topmost objects are drawn last and looks "behind" the bottom most objects. I use a bubble sort to achieve this.<br /><br />In my engine I have a limitation that every object is associated with a single meta-sprite. This works well but some times it is limiting, I can't for example have a large boss with two metasprites without having two distinct objects (and in fact I plan to have bosses which are like this).<br /><br />The metasprites associated with every frame and direction for all objects of the game are hard-coded in a huge table. Not the most flexible solution, I know, a metasprite pointer like you said would be more flexible, BUT every object would have to manually update it's own pointer every frame, while my engine does everything automatically becasue it's hard-wired.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Jul 07, 2012 3:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-07-06T22:38:19-07:00</updated>
<published>2012-07-06T22:38:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96571#p96571</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96571#p96571"/>
<title type="html"><![CDATA[Re: Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96571#p96571"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />That way, to call an object I copy its PC to the stack and RTS. If the state doesn't change, the PC doesn't change (i.e. the same code will be called again), but when it jumps to another state there's a routine they JSR to that saves their PC to their RAM. Something like this:<br /></div><br />Nice idea. Have to consider implementing this when I start needing objects with multiple states.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Fri Jul 06, 2012 10:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-06T20:40:17-07:00</updated>
<published>2012-07-06T20:40:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96564#p96564</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96564#p96564"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96564#p96564"><![CDATA[
I only meant I would have pick one of those - for all objects.. 8 bytes, maybe 16.. so I could use shifts to quickly calculate the address. Variable sizes isn't going to happen. I'm going to go with interleaved and indexed with x anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Fri Jul 06, 2012 8:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-07-06T20:09:27-07:00</updated>
<published>2012-07-06T20:09:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96563#p96563</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96563#p96563"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96563#p96563"><![CDATA[
Objects occupying different amounts of memory would be too much trouble IMO... Think about it, the memory area dedicated to holding objects would get fragmented really fast, and finding room for the larger objects would get harder and harder, unless you constantly reordered the used memory to keep the unused bytes together, which would be a fairly slow procedure during gameplay.<br /><br />Object handling is one of the slowest things in games. Just watch how famous games like SMB3, Kirby and Mega Man start lagging terribly when a slightly larger number of enemies are active. You really should do things as optimally as you can in this area, if you expect to have a lot of action going on in your game.<br /><br />I've come to a few conclusions about processing objects over the last few years. One of them is that I would only loop through the list of objects once, because doing this is slow. This meant that objects would run their AI and draw themselves in one go (scanning the list once for processing and again for drawing would be slow). One consequence of that is that the player object must be processed first, because he dictates how the camera moves, and all objects must know the position of the camera in order to draw themselves.<br /><br />And this poses another problem, because if the player is processed first and the camera coordinate is decided, what happens if later during object processing some obstacle pushes the player back? This would mean that the data we calculated before (the camera's position, for example) would be wrong, and that some objects were drawn using that wrong data.<br /><br />My solution was actually to always keep the processing one step ahead of the drawing. Every frame, objects will first draw themselves, using information that is known to be valid (because all objects have been processed last frame, so even if they modified each other somehow by now they would be at their final positions and states), and then they run the AI. Hopefully 1 frame of lag won't be noticeable since there are 60 of them in a second.<br /><br />Using these rules, I can guarantee that objects are only processed once per frame, meaning that I'm not wasting valuable processing time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jul 06, 2012 8:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-06T19:25:33-07:00</updated>
<published>2012-07-06T19:25:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96559#p96559</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96559#p96559"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96559#p96559"><![CDATA[
I was actually thinking of making the objects powers of two - so an object has to use 2,4,8,16, or 32 bytes. Then you could lda an object number, asl a a few times and add to that to the base address, then index it with x.<br /><br />I think I really like the interleaved method though, it works well with the 6502.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Fri Jul 06, 2012 7:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-07-06T17:38:13-07:00</updated>
<published>2012-07-06T17:38:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96556#p96556</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96556#p96556"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96556#p96556"><![CDATA[
Yeah, if the total memory for objects doesn't exceed 256 bytes, you can do like Shiru said and not give up the benefits of linear memory. 256 bytes is too little for me though (I suppose I could dedicate more than 1 page of memory for this so that each object would have 2 blocks of consecutive bytes  that are not consecutive themselves, but this would be kinda confusing...), so I'd rather do it the other way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jul 06, 2012 5:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-07-06T15:36:17-07:00</updated>
<published>2012-07-06T15:36:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96554#p96554</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96554#p96554"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96554#p96554"><![CDATA[
If you don't have too many objects and they don't have many variables, you can have linear layout using lda $nnnn,x addressing. Say, you can have 16 objects max, each uses 16 bytes, or 32 objects, 8 bytes each - 256 bytes total. You can use $PP0n offsets to access individual variables of an object (PP is page for the list, n is offset in the object), and X contains object number*size of object.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Fri Jul 06, 2012 3:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-07-06T14:20:52-07:00</updated>
<published>2012-07-06T14:20:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96552#p96552</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96552#p96552"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96552#p96552"><![CDATA[
<div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><br />I guess this is more a matter of preference, but you are saying your setup your data structures with all the ObjectHealth slots together linearly, rather than all the elements of an object together, then the next object? I suppose it makes for easier coding and I hadn't thought of doing it that way.<br /></div><br />Exactly. I prefer to do it like this because you can quickly switch from an object to the next by changing the X register, which is the index of the object slot. If X is 0, you access the object in the first slot, if it's 1, you access the second slot, and so on. If the memory of each object was linear, you'd probably have to use pointers and the <strong>($XX), Y</strong> addressing mode to access everything, which would be slow and not as versatile.<br /><br />The 6502 favors access to structures of arrays rather than arrays of structures, so in many cases it makes sense to store data interleaved like that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jul 06, 2012 2:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-06T13:30:55-07:00</updated>
<published>2012-07-06T13:30:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96550#p96550</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96550#p96550"/>
<title type="html"><![CDATA[Organizing and processing objects.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9077&amp;p=96550#p96550"><![CDATA[
Thanks for your input.<br /><br />I have one other question:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />All my object memory is a series of arrays, which I access using the X register. That way, routines that manipulate the objects using the base addresses of the arrays and the index of the object in X. For example, ldx #$04; dec ObjectHealth, x; would decrase the health of the object in the 5th slot.<br /></div><br /><br />I guess this is more a matter of preference, but you are saying your setup your data structures with all the ObjectHealth slots together linearly, rather than all the elements of an object together, then the next object? I suppose it makes for easier coding and I hadn't thought of doing it that way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Fri Jul 06, 2012 1:30 pm</p><hr />
]]></content>
</entry>
</feed>