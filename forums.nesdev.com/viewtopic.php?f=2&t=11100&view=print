<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11100">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11100</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Sat Mar 15, 2014 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To avoid spamming this forum, I would like to keep my articles in one post, which is easy to share with you.<br /><br /><strong>SB 486D posts: </strong><br />The Childhood Memory – Subor Famicom Clone SB-486D (Xiao Ba Wang)<br /><a href="http://helloacm.com/the-childhood-memory-subor-famicom-clone-sb-486d-xiao-ba-wang/" class="postlink">http://helloacm.com/the-childhood-memory-subor-famicom-clone-sb-486d-xiao-ba-wang/</a><br /><br /><strong>SB2000 posts:</strong><br />Introduction to 8-bit Famicom Clone – Subor – SB2000<br /><a href="http://helloacm.com/introduction-to-8-bit-famicom-clone-subor-sb2000/" class="postlink">http://helloacm.com/introduction-to-8-bit-famicom-clone-subor-sb2000/</a><br /><br />It takes 5 hours on a 8-bit famicom clone (SB2000) to compute 80 decimal places of PI<br /><a href="http://helloacm.com/it-takes-5-hours-on-a-8-bit-famicom-clone-sb2000-to-compute-40-decimal-places-of-pi/" class="postlink">http://helloacm.com/it-takes-5-hours-on-a-8-bit-famicom-clone-sb2000-to-compute-40-decimal-places-of-pi/</a><br /><br />How does the 8-bit BASIC perform on Famicom Clone – Subor SB2000 – FBasic – Compute PI approximation using Monte-Carlo method<br /><a href="http://helloacm.com/how-does-the-8-bit-basic-perform-on-famicom-clone-subor-sb2000-fbasic-compute-pi-approximation-using-monte-carlo-method/" class="postlink">http://helloacm.com/how-does-the-8-bit-basic-perform-on-famicom-clone-subor-sb2000-fbasic-compute-pi-approximation-using-monte-carlo-method/</a><br /><br /><br /><strong>BBG Posts:</strong><br />Automatically Synchronize Date and Time on 8-bit BBG Famiclone using DB25 cable to Connect to PC<br /><a href="http://helloacm.com/automatically-synchronize-date-and-time-on-8-bit-bbg-famiclone-using-db25-cable-to-connect-to-pc/" class="postlink">http://helloacm.com/automatically-synchronize-date-and-time-on-8-bit-bbg-famiclone-using-db25-cable-to-connect-to-pc/</a><br /><br />PI Computation on BBG Famiclone using BASIC<br /><a href="http://helloacm.com/pi-computation-on-bbg-famiclone-using-basic/" class="postlink">http://helloacm.com/pi-computation-on-bbg-famiclone-using-basic/</a><br /><br />Adding a pause command for 8-bit famiclone BBG – 6502 Assembly Programming<br /><a href="http://helloacm.com/adding-a-pause-command-for-8-bit-famiclone-bbg-6502-assembly-programming/" class="postlink">http://helloacm.com/adding-a-pause-command-for-8-bit-famiclone-bbg-6502-assembly-programming/</a><br /><br />Dumping Memory using BASIC on 8-bit Famicom Clone – BBG<br /><a href="http://helloacm.com/dumping-memory-using-basic-on-8-bit-famicom-clone-bbg/" class="postlink">http://helloacm.com/dumping-memory-using-basic-on-8-bit-famicom-clone-bbg/</a><br /><br />Using Peek function to read from Memory on BBG Famicom Clone on Basic Programming Language<br /><a href="http://helloacm.com/using-peek-function-to-read-from-memory-on-bbg-famicom-clone-on-basic-programming-language/" class="postlink">http://helloacm.com/using-peek-function-to-read-from-memory-on-bbg-famicom-clone-on-basic-programming-language/</a><br /><br />8-bit 6502 Assembly for Famicom Clone BBG – Tutorial 1<br /><a href="http://helloacm.com/8-bit-6502-assembly-for-famicom-clone-bbg-tutorial-1/" class="postlink">http://helloacm.com/8-bit-6502-assembly-for-famicom-clone-bbg-tutorial-1/</a><br /><br />A Quick Overview of Different Versions for 8-bit BBG-DOS (Famicom Clone)<br /><a href="http://helloacm.com/a-quick-overview-of-different-versions-for-8-bit-bbg-dos-famicom-clone/" class="postlink">http://helloacm.com/a-quick-overview-of-different-versions-for-8-bit-bbg-dos-famicom-clone/</a><br /><br />Set Up 8-bit Ultimate Famicom Game Console – BBG (BBK) – with Keyboard and Floppy Drive – USB Floppy Emulator – NES Game Console<br /><a href="http://helloacm.com/set-up-8-bit-ultimate-famicom-game-console-bbg-bbk-with-keyboard-and-floppy-drive-usb-floppy-emulator-nes-game-console/" class="postlink">http://helloacm.com/set-up-8-bit-ultimate-famicom-game-console-bbg-bbk-with-keyboard-and-floppy-drive-usb-floppy-emulator-nes-game-console/</a><br /><br />The 8 bit DOS by Famicom Clone – BBGDOS in the 1990s<br /><a href="http://helloacm.com/the-8-bit-dos-by-famicom-clone-bbgdos-in-the-1990s/" class="postlink">http://helloacm.com/the-8-bit-dos-by-famicom-clone-bbgdos-in-the-1990s/</a><br /><br />Hot Boot and Cold Boot on 8-bit Famiclone BBG-DOS<br /><a href="http://helloacm.com/hot-boot-and-cold-boot-on-8-bit-famiclone-bbg-dos/" class="postlink">http://helloacm.com/hot-boot-and-cold-boot-on-8-bit-famiclone-bbg-dos/</a><br /><br />Output a String to Console (BBG-DOS) using 6502 Assembly for 8-bit Famicom Clone BBG – Tutorial 2<br /><a href="http://helloacm.com/output-a-string-to-console-bbg-dos-using-6502-assembly-for-8-bit-famicom-clone-bbg-tutorial-2/" class="postlink">http://helloacm.com/output-a-string-to-console-bbg-dos-using-6502-assembly-for-8-bit-famicom-clone-bbg-tutorial-2/</a><br /><br />Print 26 Uppercase Letters using 6502 Assembler on 8-bit Famicom Clone BBG (BBK) – Tutorial 5 – Using Loop<br /><a href="http://helloacm.com/print-26-uppercase-letters-using-6502-assembler-on-8-bit-famicom-clone-bbg-bbk-tutorial-5-using-loop/" class="postlink">http://helloacm.com/print-26-uppercase-letters-using-6502-assembler-on-8-bit-famicom-clone-bbg-bbk-tutorial-5-using-loop/</a><br /><br /><strong>N8 Everdrive</strong><br />The Ultimate Famicom Game Cartridge – N8 Everdrive – Installed on BBG Famiclone<br /><a href="http://helloacm.com/the-ultimate-famicom-game-cartridge-n8-everdrive-installed-on-bbg-famiclone/" class="postlink">http://helloacm.com/the-ultimate-famicom-game-cartridge-n8-everdrive-installed-on-bbg-famiclone/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Mar 15, 2014 5:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is really nifty! You mention being able to make bootable floppies—have you looked at the boot sector of those floppy disks yet?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Sat Mar 15, 2014 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On BBGDOS, you can use format /s to make a bootable disk.<br /><br />The bootable disk contains three files  BBGDOS.sys   command.cmd (or any other shell such as gamshell.cmd) and config.sys<br /><br />BBGDOS.sys has to be on the sector 0 in order to be a valid bootable disk.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">This is really nifty! You mention being able to make bootable floppies—have you looked at the boot sector of those floppy disks yet?</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Mar 15, 2014 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So BBGDOS.sys is a 512 byte chunk of 6502 code and 1.44MB floppy geometry information? The IBM PC would load the 512 bytes of boot sector to 0:7E00 and start executing from there (hence why it starts with a jump). I'm curious to what extent they either avoided stepping on the PC's boot path, or instead just replaced it with 6502 code instead of 8086 code.<br /><br />(Did I miss this in one of your posts?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Sat Mar 15, 2014 6:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is 6502 code not 8086.<br />It imitates the way PC boots and BBGDOS.sys is size of 17kb.<br />I don't know much about the memory address yet (i have a development manual but haven't looked deeper into it)<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">So BBGDOS.sys is a 512 byte chunk of 6502 code and 1.44MB floppy geometry information? The IBM PC would load the 512 bytes of boot sector to 0:7E00 and start executing from there (hence why it starts with a jump). I'm curious to what extent they either avoided stepping on the PC's boot path, or instead just replaced it with 6502 code instead of 8086 code.<br /><br />(Did I miss this in one of your posts?)</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Mar 15, 2014 7:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you have an easy way to extract only the first 512 bytes of a bootable floppy disk, I'd be interested in taking a look.<br /><br />Either way, please keep us posted as you find out more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Sun Mar 16, 2014 1:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This brings back good (some bad) memories of my days playing around with the Doctor PC Jr Famiclone, around 2000-2002.  Here's the archive of my page if you want to compare the PCJr with your Subor system:  <!-- m --><a class="postlink" href="http://www.chrismcovell.com/drpcjr/">http://www.chrismcovell.com/drpcjr/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Sun Mar 16, 2014 6:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, I have read your page and sent you a email before regarding the BUNG (I want to buy one but it is very rare)<br /><br /><div class="quotetitle">ccovell wrote:</div><div class="quotecontent">This brings back good (some bad) memories of my days playing around with the Doctor PC Jr Famiclone, around 2000-2002.  Here's the archive of my page if you want to compare the PCJr with your Subor system:  <!-- m --><a class="postlink" href="http://www.chrismcovell.com/drpcjr/">http://www.chrismcovell.com/drpcjr/</a><!-- m --></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Mon Mar 17, 2014 3:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />just got n8 everdrive, install it on bbg famiclone, works perfect, and love it!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Mar 17, 2014 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I decided to take a look at the disk image that ccovell has provided, and found some amusing things.<br /><br />SMDOS either seems to load the boot sector to $0400 or $7C00, maybe both. On the one hand, it verifies disk geometry values from $7C1x (requiring offset 1B to 0, 1A to be 2, i.e. double sided disk). On the other hand, it JSRs to $0516 and $055E and JMPs to $05F0, and all three modulo 512 correspond to things that look suspiciously like entry points. And it verifies the first eleven bytes of the copy at $7C00 against the copy at $0589 ... which should only match if something patches it (one ends with &quot;SMDOS1.0&quot; while the other has &quot;SMDOS   &quot;)<br /><br />Regardless, the first three bytes on disk are actually x86 code (SJMP 0x7E0:003E, NOP), but at offset 0x3E is 6502 code. (Trying to boot a PC from an SMDOS-formatted disk would crash horribly). So, the BIOS must check the second byte of the bootsector to figure out the entry point, OR hot-patch the first byte with a 6502 relative jump instead of an x86 one, OR it just always starts execution at $7C3E.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Fri Mar 28, 2014 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />New post added:<br />Output a String to Console (BBG-DOS) using 6502 Assembly for 8-bit Famicom Clone BBG – Tutorial 2<br /><a href="http://helloacm.com/output-a-string-to-console-bbg-dos-using-6502-assembly-for-8-bit-famicom-clone-bbg-tutorial-2/" class="postlink">http://helloacm.com/output-a-string-to-console-bbg-dos-using-6502-assembly-for-8-bit-famicom-clone-bbg-tutorial-2/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Sun Mar 30, 2014 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />New post added:<br />Print 26 Uppercase Letters using 6502 Assembler on 8-bit Famicom Clone BBG (BBK) – Tutorial 5 – Using Loop<br /><a href="http://helloacm.com/print-26-uppercase-letters-using-6502-assembler-on-8-bit-famicom-clone-bbg-bbk-tutorial-5-using-loop/" class="postlink">http://helloacm.com/print-26-uppercase-letters-using-6502-assembler-on-8-bit-famicom-clone-bbg-bbk-tutorial-5-using-loop/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doctorlai</b> [ Fri Aug 22, 2014 6:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />new post added 23/08/2014<br /><br /><strong>SB 486D posts: </strong><br />The Childhood Memory – Subor Famicom Clone SB-486D (Xiao Ba Wang)<br /><a href="http://helloacm.com/the-childhood-memory-subor-famicom-clone-sb-486d-xiao-ba-wang/" class="postlink">http://helloacm.com/the-childhood-memory-subor-famicom-clone-sb-486d-xiao-ba-wang/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Aug 22, 2014 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just now became aware of this thread.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Regardless, the first three bytes on disk are actually x86 code (SJMP 0x7E0:003E, NOP), but at offset 0x3E is 6502 code. (Trying to boot a PC from an SMDOS-formatted disk would crash horribly). So, the BIOS must check the second byte of the bootsector to figure out the entry point, OR hot-patch the first byte with a 6502 relative jump instead of an x86 one, OR it just always starts execution at $7C3E.</div><br />What's the filesystem of the disk? Because that looks like what FAT does (it's part of the FAT header).<br /><!-- m --><a class="postlink" href="http://wiki.osdev.org/FAT#BPB_.28BIOS_Parameter_Block.29">http://wiki.osdev.org/FAT#BPB_.28BIOS_P ... r_Block.29</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Aug 23, 2014 1:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Famicom clones posts (SB2000, BBG Floppy 1 etc) updating</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The first three bytes aren't actually specified in content; rather, it's just that the data tables start at byte 3, and execution starts at byte 0, so the first three bytes in practice need to be a jump.<br /><br />It doesn't have to be a short jump. I definitely remember finding disks that used a long relative jump ($E9) instead of short ($EB). And the NOP could be put before the JMP SHORT also.<br /><br />So what I found weird is that those bytes are neither useful for the 6502, nor useful to an x86 machine.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>