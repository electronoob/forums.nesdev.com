<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - pyNES: writing NES games in Python</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">pyNES: writing NES games in Python</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9522">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9522</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gutomaia</b> [ Mon Dec 03, 2012 8:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi guys, sorry for the delay. I'm the author of the project.<br /><br />First, I really would like to thanks for sharing.<br /><br />Second, No it's not fake. <span class="posthilit">pyNES</span> is meant to be a python compiler for NES. However it is being built in a different way.<br /><br />Usually compilers are formal. Take the &quot;C&quot; compiler for example, it evolves along with the processor in their time. The number of instructions and the optimizations where really tight couple with the processor instructions of their launch. As the language, &quot;C&quot; programmers also evolved. Changing the static linking for dynamic link as more memory became available. That leads to GRASP patterns and then OOP and C++. 'Course, even C and C++ have stopped as a language it self, however the compiler didn't stop. Nowadays processors have multicore specific instructions and of course compilers must deal with those optimizations using some kind of pattern matching. That leads as to Virtual machines like JVM, .NET, pypy. Witch can deal of optimizations in layers using hotspot.<br /><br />Therefore, why not use pattern matching for transitions from a highlevel language to a limited processor?<br /><br />NES developers knows how developing for a such limited machine differs from actual highlevel programming. Most of the logic is decoded into the most simplest instructions. Complex structure types are hacked into address and ways of reading it.<br /><br />At first <span class="posthilit">pyNES</span> was just an ASM compiler compatible with nesasm. However after nodeNES (a javascript IDE, not finish also). I need to go further with <span class="posthilit">pyNES</span>. Then, Klaus Silveira, a friend cames if a challenge to write nes games in python. Okay, at the start he was just kidding, but after some rounds in street fighter (witch Zangief beats him pile dive after pile diver), we imagine that it was possible.<br /><br />Okay<br /><br />That was the intention was the aim of <span class="posthilit">pyNES</span>. Write NES games in Python. However, I need to add some constrains. And there goes:<br /><br />1) The approach:<br /><br />  - It's not a formal compiler. Structures are not pre-defined. Same goes for types<br />  - TDD drives the format, at the end, the software will emerge.<br />  - I must keep the hack felling! It must feels like a hack.<br /><br />2) The Values: <br />  - I must respect python, although it's not a full python compiler and it will only use a subset of python. That subset must be respected.<br />  - I must respect NES developers. When I started my NES ASM research, I saw how clever and fantastic was developing for NES. The referenced python code must generate an ASM code that a NES developer would write. A code that could be found here.<br /><br />3) The Goals:<br />  The main goal is to build 3 NES games entire in python:<br />  - A Sidescroller Plataform<br />  - A TopDown Shooter<br />  - A RPG<br /><br />Okay, so much for the compiler introduction and for the project goals. Let me explain in the bits:<br /><br />How to map the types?<br /><br />For example, how to map an Int? <br />  - if it is used but not assined the value could be directed assigned in the asm, like in a local scope<br />  - If it is used and assigned but not changed, it could be a const.<br />  - If it is assigned and changed it must be used as an .RS<br /><br />And for a more complex type, like a List? I have to put some extra constrains here<br />  - List cannot be changed after used by a bitpak.<br />  - Lists can have constants or int, cannot have objects or strings<br />  - Lists are a dataset of sequencial address in the bank 1<br /><br />And a String? more constraints here, cause String works like a list.<br />  - String cannot be changed after used by a bitpak.<br />  - String are mapped by a String that defines the charset and also end String char. So it can use the assets on the CHR<br /><br />What the hell are those bitpak?<br />  - Highlevel languages dosent provide much of label instructions. Therefore there is no GOTO. Instructions like a WAITVBLANK, would be very strange.The correct would be a While loop, but that is not what happen at hardware level. So I created a way to gather a bunch of asm instructions in a single function.<br /><br />How FOR would be made? In python, for usually uses dynamic loops with a list. Like &quot;for a in [1,2,3,4]:&quot;<br />  - I told, i must respect python, so loops must keep that way, but nes dosent have ways to store that dynamic part. And that must be hacked.<br />  - if the for is in a sequential series of arguments, it must be just use a comparison with the last value.<br />  - if the for is in a list that is stored in the cart, like a String or List<br />  - If the list is not stored and the cart has space, so why not store it <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />.<br /><br />Well, I'm still refactoring most of the hacks right now and starting the docs. Klaus Silveira help me out with the site. Gabriel Ozeas help me with some erros on travis CI. Docs are coming, more examples also.<br /><br />Right now: THE DOCUMENTATION IS IN ANOTHER CASTLE!<br /><br />There are more features related with image and direct conversion to the chr and nametables.<br /><br />Anyone can contribute with the project. If you dont know how, just ask me. If you have a ASM example that does compile with NESASM, just send me. I will add it as a project fixture.<br /><br />PS: if some guys could really help me with some ASM questions and specific nes stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Tue Dec 04, 2012 7:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for your work gutomaia!  This sounds like a VERY exciting project.<br /><br />The only way I can help is by being a very &quot;beginner&quot; user of <span class="posthilit">pyNES</span>.  If you've read this topic you can see I already have problems compiling mario.py<br /><br />We are just guessing the correct way to install <span class="posthilit">pyNES</span> right now.  I hope installation instructions are the first documentation to emerge from the castle <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Also, what should I know before using <span class="posthilit">pyNES</span> for the first time?  Any good Python tutorials you would recommend?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NESmaniac</b> [ Wed Aug 07, 2013 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wait... That's a sign!<br /><br />If the NES could have one, other systems can!<br /><br />The Atari, SNES, Playstation, Dreamcast, even N64!!!!!<br /><br /> <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> The possibilities are just endless!!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />...Anyways, this is super cool!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Wed Aug 07, 2013 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The last commit he made was from June 24, 2013 so it may not be dead.  That said, the author hasn't posted here in quite awhile.  No one really figured out how to install and get this working correctly either.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Wed Aug 07, 2013 6:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think some of us actually did; it's just not very interesting because it's all wrappers for pre-existing asm functions, not something that compiles python into asm code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Sun Oct 20, 2013 8:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wish author would man up and write docs for its tool. I've started deciphering it and writing any findings to text file (mainly trial &amp; error), but I've just learned about it few hours ago so I don't have much (i.e. none). Also bundled examples are uncompilable, because mario.chr file is missing from package (and also github repo). <br /><br />Replaced it with some random chr (ripped from Super Mario Bros rom), but obviously it doesn't have proper graphics which makes further reverse-engineering difficult. <br /><br />I'll try to do more research later and when I'm done documenting it, I'll distribute version with all fixes discussed earlier in this thread and proper installations instructions.<br /><br />Note that aside of patching few things up and documenting stuff I'm in no position to actually maintain this as I don't know much about NES assembly (one of reasons I've seek tool like this) nor would be able to do compiler/assembler. So after I'm done someone with actual knowledge of python, writing custom compilers and NES assembly would need to take over.<br /><br />I'm attaching file from my experiments (compiled version of mario.py with garbled graphics due to wrong CHR file which wasn't supplied by author). Can someone with access to flashcarts or things like that confirm if it run on real hardware?

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=902">output.nes</a> [24.02 KiB]
			</span><br />
			<span class="gensmall">Downloaded 17 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Mon Oct 21, 2013 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, I've found out that &quot;heart&quot; of this thing (i.e. commands you'll be putting when making your own game) is in <span class="posthilit">pynes</span>/bitbag.py. I'll start deciphering it now and will post any findings.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Mon Oct 21, 2013 11:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is first rudimentary version of docs: <div class="attachtitle">Attachment:</div><div class="attachcontent">
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=903">docs.txt</a> [2.6 KiB]
			</span><br />
			<span class="gensmall">Downloaded 26 times</span>
		

		<br />
	</div><br /><br />Sadly, <span class="posthilit">pyNES</span> lacks any kind of sound-handling functions. Maybe someone with python and NES asm knowledge could write some functions that could load NSFs made with FamiTracker and play specific songs with ability of mixing some samples in? I'm unfortunately not up for the task.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Mon Oct 21, 2013 4:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How to add own procedures/functions<br /><br />OK, so I've figured out how code templates work in bitbag.py. It may be use for someone knowledgeable with NES assembly so we can make it somekind of forum project (so less knowledgeable people who would want to make NES games would be able to do so).<br /><br />Each &quot;function&quot; you can use in your <span class="posthilit">pyNES</span> game is defined in bitbag.py as class. Example of one such class:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">class define_sprite(BitPak):<br /><br />&nbsp; &nbsp; def __init__(self, game):<br />&nbsp; &nbsp; &nbsp; &nbsp; BitPak.__init__(self, game)<br /><br />&nbsp; &nbsp; def __call__(self, x, y, tile, attrib=0x80):<br />&nbsp; &nbsp; &nbsp; &nbsp; assert isinstance(x, int)<br />&nbsp; &nbsp; &nbsp; &nbsp; assert isinstance(y, int)<br />&nbsp; &nbsp; &nbsp; &nbsp; assert isinstance(tile, int) or isinstance(tile, NesArray)<br />&nbsp; &nbsp; &nbsp; &nbsp; return NesSprite(x, y, tile, attrib)<br /></div><br /><br />It is definition for define_sprite(). __init__(self,game) is used for initialization of procedure. BitPak.__init__(self,game) is always present so it is important. There can be another initializations, like here (__init__ from load_sprite() function):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">def __init__(self, game):<br />&nbsp; &nbsp; &nbsp; &nbsp; BitPak.__init__(self, game)<br />&nbsp; &nbsp; &nbsp; &nbsp; self.game.has_nmi = True&nbsp; # TODO remove this<br />&nbsp; &nbsp; &nbsp; &nbsp; self.game.ppu.sprite_enable = True<br />&nbsp; &nbsp; &nbsp; &nbsp; self.game.ppu.nmi_enable = True</div><br /><br />Now, I don't know yet how those interactions here exactly work, but in time I or someone else can figure it out. Though it seems name are self-explanatory.<br /><br />Let's get back to our define_sprite class, shall we?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">class define_sprite(BitPak):<br /><br />&nbsp; &nbsp; def __init__(self, game):<br />&nbsp; &nbsp; &nbsp; &nbsp; BitPak.__init__(self, game)<br /><br />&nbsp; &nbsp; def __call__(self, x, y, tile, attrib=0x80):<br />&nbsp; &nbsp; &nbsp; &nbsp; assert isinstance(x, int)<br />&nbsp; &nbsp; &nbsp; &nbsp; assert isinstance(y, int)<br />&nbsp; &nbsp; &nbsp; &nbsp; assert isinstance(tile, int) or isinstance(tile, NesArray)<br />&nbsp; &nbsp; &nbsp; &nbsp; return NesSprite(x, y, tile, attrib)<br /></div><br />__call__ is executed when you call function. 'self' always seems to need to be present, but isn't part of call when you write game. You can define any number of parameters afterwards or don't define at all, as it is case for e.g. wait_vblank, which __call__ is defined as __call__(self).<br /><br />There are also two optional functions you can define in class, &quot;asm(self)&quot; and &quot;procedure(self)&quot;. This is actually meat of code, it is what makes code execute in game as it is part of asm generation. You just write your function in assembly here so you will not have to write it again each time and instead use easy Python syntax for game <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />.<br /><br />asm(self) seems to be for pre-call initialization and jump to your procedure, while procedure(self) contains your code along with label, though it is probably just nomenclature and you could just dump your code in either.<br /><br />Also bonus, here is (probably working, didn't test it) definition for function that will run custom ASM<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">class run_assembly(BitPak)<br />&nbsp; &nbsp; def __init__(self, game):<br />&nbsp; &nbsp; &nbsp; &nbsp; BitPak.__init__(self, game)<br />&nbsp; &nbsp; def __call__(self,assembly):<br />&nbsp; &nbsp; &nbsp; &nbsp;self.asm = assembly<br />&nbsp; &nbsp; def asm(self)<br />&nbsp; &nbsp; &nbsp; &nbsp;return self.asm<br /></div><br /><br />Note that assembly code should be written as in bitbag.py asm/procedure functions, i.e. no .org/etc directives, only pure opcodes delimited by new line (\n) character, with two spaces before actual opcode (though last one may be just for formatting sake and may not have influence over compiling it).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Oct 21, 2013 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">darkhog wrote:</div><div class="quotecontent">Maybe someone with python and NES asm knowledge could write some functions that could load NSFs made with FamiTracker and play specific songs with ability of mixing some samples in? I'm unfortunately not up for the task.</div><br />It does not really works this way, with loading and mixing NSFs. NSF format is not designed to share system resources with a program, i.e. a program has to work around whatever NSFs requires (could be anything), in terms of memory allocation etc. FamiTracker player is not designed to be used in games, it does not care about memory (RAM/ROM) and CPU time consumption too much, and does not have working sound effects support. Samples could not be 'mixed in' on the NES. So if you want to go easy way with music authoring, you pay for it with high resource use and necessity to write extra code for sound effects support. Alternative is to use one of existing sound engines that were created by various people exactly to be used in games, i.e. they trying to save resources and allow to play sound effects. However, they usually less easy in the authoring part, although FamiTracker is still an (existing or implementable) option as an authoring tool, just with limited subset of its features supported.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Mon Oct 21, 2013 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Samples could not be 'mixed in' on the NES</div><br /><br />So why game like Mario, Megaman, etc. doesn't stop music when sound (jump, shoot, etc.) is played and play both simultaneously?<br /><br />Anyway, I can live with using small subset of Famitracker's functionality (most of I can live without) and I've seen homebrew games with music made in FT so it is possible to make it work.<br /><br />Also, Famitracker can export to BIN (raw music data) which can be then &quot;interpreted&quot; by <span class="posthilit">pyNES</span> compiler and incorporated in its own driver (when it will have one) or ASM source - from under File-&gt;Create a NSF... window, so it is not completely impossible to use it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Oct 21, 2013 5:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is not 'sample mixing', as there are no samples (waveform recordings) for sound effects in most NES games. Sound effects on NES is kind of a sub songs, sometimes interpreted by song player as one of channels, sometimes by its own separate player, in any case, using one of ways of channel replacement rather than actual mixing (addition).<br /><br />If you look closer, homebrew games that has music played by actual FamiTracker player does not have sound effects. To play the BIN data that FamiTracker exports, you would need to use FamiTracker player, or create a substitute. If you want to just use FamiTracker as front end for your own player/format, a much easier and better way is to use text export (built-in in latest versions). That's how games that has music created in FamiTracker and sound effects usually works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Oct 21, 2013 6:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The closest you get to a &quot;mixer&quot; in NES audio is a channel priority system. My sound player chooses which pulse channel ($4000 or $4004) to play an effect on based on which has less time left in the effect already playing. On each channel, it runs a musical instrument and a sound effect in parallel and chooses which to play on the PSG based on whatever is louder at the moment, allowing a loud note attack to overpower the tail end of a sound effect. And it treats drums as pairs of sound effects, allowing triangle kick to interrupt a bass line in a sane way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Mon Oct 21, 2013 6:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool, so anyone with good knowledge of both Python and NES assembly (I have only former, that's why I was able to do these docs, however rudimentary they may seem) would be able to do sound driver for <span class="posthilit">pyNES</span> along with some functions that would make possible to play melodies/sound effects based on what I've discovered about inner workings of <span class="posthilit">pyNES</span>?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darkhog</b> [ Tue Oct 22, 2013 6:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: <span class="posthilit">pyNES</span>: writing NES games in Python</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've tweeted gutomaia about the subject. Seems alive, last tweet is from Sept 28th. Maybe he'll help fix up docs (they aren't in good state with many things I've just assumed and few things I had no idea what they do (and still don't). Also sent him a PM.<br /><br />Well, I hope he'll be able to put some more details in the docs now most of it is written and fix invalid assumptions on my part.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>