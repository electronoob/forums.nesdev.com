<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hello World</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hello World</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>18</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 06, 2011 7:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><img src="http://img220.imageshack.us/img220/3710/dragonwarrioriii05.png" alt="Image" /></div><br />In addition to the masking modes that <a href="http://nesdev.com/bbs/viewtopic.php?p=73620#73620" class="postlink">Dwedit mentioned</a>, the GBC supports background priority per tile, like the Sega Master System, Game Gear, Genesis, and Super NES. Each background has a second plane of tile attributes, and one bit of these attributes is "top priority". A tile can be placed in front of all sprites, even those with the priority bit off. It's often used for text boxes, or for the first tile of a wall. The NES does not have this; it has to use either A. plain backgrounds surrounding an object (SMB1) or B. the triple-overlap effect (SMB3) to simulate this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As a side note, while looking at the GBC's specs, I was surprised to find out that it supports 8 palettes each for both the background and sprites (hence my other questions), and that it also has a faster processor (4 times as fast, iirc).</div>
<br />Please be careful not to fall for the <a href="http://en.wikipedia.org/wiki/Megahertz_myth" class="postlink">megahertz myth</a>, especially when comparing different CPUs with different instruction sets and different microarchitectures. As I understand it, the consensus from the C=64/Speccy wars is that an 8080-family processor such as that in a ZX Spectrum or Game Boy Color typically needs to be clocked twice as fast as an equivalent 6502. So one can treat the original GB's CPU as roughly the same speed as that of the NES, and the GBC CPU is only twice as fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Feb 06, 2011 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's the simple masking where the sprite goes behind everything in the background that's not color #0. Lots of games use this, including Super Mario Bros when you go through a pipe. </div><br />So, this is the only way that the GBC can do it, right? (Other than what Tepples said.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then there's another masking mode where you put a sprite behind the background, then subsequent sprites in the same place are not drawn. Super Mario 3 uses this 'mode' when you hit a question block and a mushroom comes out of it, it puts a dummy sprite behind the question block. The sprites of the mushroom are covered up by the pixels of the dummy sprite. Time Lord also uses this trick as well. <br />The masking sprite must be set to be behind the background, and must be earlier in the sprite table than the sprite which gets masked.</div><br />So, this is done to stop the mushroom from appearing on top of the block it comes out of, but to let it smoothly flow out of it at the same time, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For example, Here's time lord, and the sprites it draws to pull off a masking effect: </div><br />I think I understand.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, for that GBC screenshot, they are using the feature where every background palette has its own background color (color #0). If you look closely, the background area of that block is all the same color.</div><br />Indeed, I see it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, for that GBC screenshot, they are using the feature where every background palette has its own background color (color #0).</div><br />And that's the first type of masking your described for the NES, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In addition to the masking modes that Dwedit mentioned, the GBC supports background priority per tile, like the Sega Master System, Game Gear, Genesis, and Super NES. Each background has a second plane of tile attributes, and one bit of these attributes is "top priority". A tile can be placed in front of all sprites, even those with the priority bit off. It's often used for text boxes, or for the first tile of a wall.</div><br />Can one put background tiles on top of other background tiles? That way, one could easily create text boxes by just laying a new layer of "top"-mode tiles into the background, and then remove them when the text box is finished, thus not needing to recalculate the tiles that are where the text box was.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The NES does not have this; it has to use either A. plain backgrounds surrounding an object (SMB1) or B. the triple-overlap effect (SMB3) to simulate this. </div><br />I don't understand the two things your describing here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Please be careful not to fall for the megahertz myth, especially when comparing different CPUs with different instruction sets and different microarchitectures. As I understand it, the consensus from the C=64/Speccy wars is that an 8080-family processor such as that in a ZX Spectrum or Game Boy Color typically needs to be clocked twice as fast as an equivalent 6502. So one can treat the original GB's CPU as roughly the same speed as that of the NES, and the GBC CPU is only twice as fast.</div>
<br />I should've been more wary. Still, I didn't expect the GBC to be faster than the NES at all. I guess mentally I've equated the (graphics) capabilities GBC to that of the NES, and likewise for the GBA to the SNES, and DS to the N64.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 06, 2011 12:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unlike the GBC PPU, the NES PPU has only one color #0. There is space for 28 colors in CGRAM, which would in theory allow a separate color #0 for each separate background palette, but the PPU only ever uses the first background palette's color #0 when rendering is on.
<br />
<br /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In addition to the masking modes that Dwedit mentioned, the GBC supports background priority per tile.</div><br />Can one put background tiles on top of other background tiles?</div><br />This is possible only in a very limited way. On the GBC, one would use the "window", and on the NES, one would use mid-screen scrolling.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That way, one could easily create text boxes by just laying a new layer of "top"-mode tiles into the background, and then remove them when the text box is finished, thus not needing to recalculate the tiles that are where the text box was.</div><br />Is it that hard to recalculate? You recalculate anyway when scrolling a background, unless you're doing a Zelda- or Battle Kid-style flip screen. And the GBC has a lot more work RAM than any licensed NES board, and more than any Famicom board short of SXROM, so you could probably just read the tiles out of VRAM, display your text box, and put them back.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The NES does not have this; it has to use either A. plain backgrounds surrounding an object (SMB1) or B. the triple-overlap effect (SMB3) to simulate this. </div><br />I don't understand the two things your describing here.</div><br />In the first <em>Super Mario Bros.</em> game for the NES, power-ups sprouting from blocks were drawn with back priority sprites. The tiles above a ? block were always solid color 0, and no water levels ever had ? blocks. Mario going into a pipe was likewise drawn with back priority sprites; notice how he disappears immediately when walking into the pipe at the end of 2-2, 7-2, and the water section of 8-4.<br /><br /><em>Super Mario Bros. 3</em> for NES couldn't always use this trick because powerups had to sprout behind the ? block but in front of occasionally more detailed background pieces, such as the dots in the background of a cave or the water in the back of a water level. So it used a back priority sprite appearing in OAM before the powerup to force background pixels to be drawn in that position.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I guess mentally I've equated the (graphics) capabilities GBC to that of the NES, and likewise for the GBA to the SNES</div>
<br />GBA with its 16.8 MHz ARM7TDMI CPU is comparable to a Super NES + Super FX. Compare Doom and Yoshi's Island on both platforms.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Feb 06, 2011 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unlike the GBC PPU, the NES PPU has only one color #0. There is space for 28 colors in CGRAM,</div><br />I thought there was only 4 palettes for each the background and the sprites?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">which would in theory allow a separate color #0 for each separate background palette, but the PPU only ever uses the first background palette's color #0 when rendering is on.</div><br />Hmm, I didn't know that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it that hard to recalculate? You recalculate anyway when scrolling a background, unless you're doing a Zelda- or Battle Kid-style flip screen.</div><br />I suppose not.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> And the GBC has a lot more work RAM than any licensed NES board, and more than any Famicom board short of SXROM, so you could probably just read the tiles out of VRAM, display your text box, and put them back. </div><br />One would still do the same thing for the NES though, no?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the first Super Mario Bros. game for the NES, power-ups sprouting from blocks were drawn with back priority sprites. The tiles above a ? block were always solid color 0, and no water levels ever had ? blocks. Mario going into a pipe was likewise drawn with back priority sprites; notice how he disappears immediately when walking into the pipe at the end of 2-2, 7-2, and the water section of 8-4.</div><br />So, I played until the end of 2-2, and now I see what you were trying to say.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Super Mario Bros. 3 for NES couldn't always use this trick because powerups had to sprout behind the ? block but in front of occasionally more detailed background pieces, such as the dots in the background of a cave or the water in the back of a water level. So it used a back priority sprite appearing in OAM before the powerup to force background pixels to be drawn in that position.</div>
<br />And I played until I found a block which didn't have a null background above it, so I understand tell the difference now.
<br />
<br />Btw, in case anyone was wondering, the screenshot posted on the last page was from Dragon Warrior III, the remake for the GBC. It's interesting to compare it with the NES version, because the graphics were so vastly improved, yet I can't see any reason why the NES version couldn't have done most of the graphical techniques that the GBC version used. On that note, how many pattern tables can the GBC store? I assume at least 4, since it can hold twice as many palettes also?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 06, 2011 9:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">I thought there was only 4 palettes for each the background and the sprites?</div><br />Yes, the NES has 4 background palettes and 4 sprite palettes. In theory, each palette has 4 colors, but there are some weird considerations about the first color (color 0) of each palette.<br /><br />For the background, no matter what palette you use, if a pixel uses color 0 it gets drawn with color 0 of the first palette, even though has all 4 colors (1 for each palette) internally. There is a way to display those colors though, which is to disable rendering and make $2006 point to them. This is hardly useful though.<br /><br />For sprite palettes, their first colors don't even exist, they are mirrors of the first colors in the background palettes. This means that the PPU has 4 * 4 (background) + 4 * 3 (sprites) = 28 colors internally, but because of the way background rendering works you only get to see 25 of them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">One would still do the same thing for the NES though, no?</div><br />It depends. Personally, I'd rather decode the data from the map again than waste hundreds of bytes just to remember tiles, specially if working only with the built-in 2KB of RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">On that note, how many pattern tables can the GBC store? I assume at least 4, since it can hold twice as many palettes also?</div>
<br />I'm not sure how much VRAM the GBC has for tiles, but I wouldn't make any assumptions based on the palette count, since there is no direct relation between them. You might even be right, but I doubt the palette count would have anything to do with this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 06, 2011 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unlike the GBC PPU, the NES PPU has only one color #0. There is space for 28 colors in CGRAM,</div><br />I thought there was only 4 palettes for each the background and the sprites?</div><br />There are 28 colors in these 4 + 4 palettes:<br /><br />Background palette 0: 0, 1, 2, 3<br />Background palette 1: 4, 5, 6, 7<br />Background palette 2: 8, 9, 10, 11<br />Background palette 3: 12, 13, 14, 15<br />Sprite palette 0: 17, 18, 19<br />Sprite palette 1: 21, 22, 23<br />Sprite palette 2: 25, 26, 27<br />Sprite palette 3: 29, 30, 31<br /><br />Colors 16, 20, 24, and 28 do not have distinct memory cells in the PPU. (They're mirrors of 0, 4, 8, and 12 respectively.) An oversight in the PPU design causes colors 4, 8, and 12 to be replaced with color 0 when rendering is turned on.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> And the GBC has a lot more work RAM than any licensed NES board, and more than any Famicom board short of SXROM, so you could probably just read the tiles out of VRAM, display your text box, and put them back. </div><br />One would still do the same thing for the NES though, no?</div><br />On the NES, it's a bit harder because reading from VRAM is unreliable if sample playback is turned on. If a sample fetch happens on a certain clock cycle of the readback (LDA $2007), the CPU sends two read requests to the PPU as the DMA unit grabs and releases control of the address bus, and it misses one of the results. This also affects reading the controller ($4016 and $4017), but there are well-known ways to work around that, such as reading the controller twice and using the previous frame's keypresses if the read key states don't match. GBC doesn't have this problem because it has no DMA-based sample playback channel; instead, its triangle channel's waveform is rewritable like the waveforms on the FDS or TG16.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Btw, in case anyone was wondering, the screenshot posted on the last page was from Dragon Warrior III, the remake for the GBC. It's interesting to compare it with the NES version, because the graphics were so vastly improved, yet I can't see any reason why the NES version couldn't have done most of the graphical techniques that the GBC version used.</div><br />NES has no background tile flipping, unlike GBC. Tile flipping allows for certain CHR optimizations on trees, walls, grass, etc. GBC also has MMC5-style palette per tile instead of per block of 2x2 tiles. NES has less capacity for sprite overdraw: 8 sprites per line (25% overdraw on a 256px wide screen) vs. GB/GBC 10 sprites per line (50% overdraw on a 160px wide screen), and possibly for this reason, characters using Mega Man-style overlays for extra color appear to be more common on GBC than on NES because they're less likely to cause dropouts and flicker. Oh, and there are thousands of usable colors on the GBC (like on the Game Gear), unlike the NES where 52 colors in an HSV arrangement plus a screen-wide tint control are all you get.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">On that note, how many pattern tables can the GBC store? I assume at least 4, since it can hold twice as many palettes also?</div>
<br />The Game Boy has 6 KiB of VRAM devoted to one and a half pattern tables: 128 tiles just for sprites, 128 tiles to share between sprites and backgrounds, and 128 tiles just for backgrounds. The remaining 2 KiB of VRAM is used by two nametables in a single-screen mirroring configuration.
<br />
<br />The Game Boy Color has two sets of one and a half pattern tables, and one bit of the attribute selects whether a tile or sprite uses the first or second table.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Feb 06, 2011 11:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, the NES has 4 background palettes and 4 sprite palettes. In theory, each palette has 4 colors, but there are some weird considerations about the first color (color 0) of each palette.</div><br />And no mapper can increase the number of palettes, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are 28 colors in these 4 + 4 palettes: <br /><br />Background palette 0: 0, 1, 2, 3 <br />Background palette 1: 4, 5, 6, 7 <br />Background palette 2: 8, 9, 10, 11 <br />Background palette 3: 12, 13, 14, 15 <br />Sprite palette 0: 17, 18, 19 <br />Sprite palette 1: 21, 22, 23 <br />Sprite palette 2: 25, 26, 27 <br />Sprite palette 3: 29, 30, 31 <br /></div><br />I didn't know that the first color in the sprites (and later 3 background palettes) was ignored.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Colors 16, 20, 24, and 28 do not have distinct memory cells in the PPU. (They're mirrors of 0, 4, 8, and 12 respectively.) An oversight in the PPU design causes colors 4, 8, and 12 to be replaced with color 0 when rendering is turned on.</div><br />So it wasn't intentional, but accidental?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">On the NES, it's a bit harder because reading from VRAM is unreliable if sample playback is turned on.</div><br />What does "sample playback" mean? Any sound or music?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NES has less capacity for sprite overdraw: 8 sprites per line (25% overdraw on a 256px wide screen) vs. GB/GBC 10 sprites per line (50% overdraw on a 160px wide screen)</div><br />What do you mean by overdraw? Being able to draw on the part of the screen that isn't displayed?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Game Boy has 6 KiB of VRAM devoted to one and a half pattern tables: 128 tiles just for sprites, 128 tiles to share between sprites and backgrounds, and 128 tiles just for backgrounds. The remaining 2 KiB of VRAM is used by two nametables in a single-screen mirroring configuration. </div><br />By "tile", you mean an 8x8 block of pixels, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NES has no background tile flipping, unlike GBC. Tile flipping allows for certain CHR optimizations on trees, walls, grass, etc. GBC also has MMC5-style palette per tile instead of per block of 2x2 tiles. NES has less capacity for sprite overdraw: 8 sprites per line (25% overdraw on a 256px wide screen) vs. GB/GBC 10 sprites per line (50% overdraw on a 160px wide screen), and possibly for this reason, characters using Mega Man-style overlays for extra color appear to be more common on GBC than on NES because they're less likely to cause dropouts and flicker. Oh, and there are thousands of usable colors on the GBC (like on the Game Gear), unlike the NES where 52 colors in an HSV arrangement plus a screen-wide tint control are all you get.</div>
<br />Still, I think they could've done better. They could've made overlapping walls and trees, trees that are sized properly, bushes that actually look like bushes (I played through the whole game (of the NES version) and didn't realize until looking at the GBC version again that those clumps of dark and light green on the ground were supposed to be bushes.), etc. Least they had learned something from the time they began DW1 and 2 though, because those were uglier yet.
<br />
<br />Btw, with the screenshot I posted earlier in mind, I suppose that with each step the player takes, the game must calculate whether the lower part of a character should underlap the background or not, depending on the character's coordinates on the map?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Feb 07, 2011 12:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">And no mapper can increase the number of palettes, right?</div><br />No, they really can't. The palettes are stored inside the PPU, so the mappers can't interfere in the process of reading them like they can with pattern/name/attribute tables, which are stored outside of the PPU.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I didn't know that the first color in the sprites (and later 3 background palettes) was ignored.</div><br />The first color of the sprite palettes doesn't even exist (there's no memory to store them)... It's not like you could do anything with them anyway, since color 0 means transparency for sprites.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So it wasn't intentional, but accidental?</div><br />I believe this was intentional... I imagine that using the first color globally requires some extra logic, which they wouldn't have used if they didn't explicitly want the PPU to behave like that. Maybe the "oversight" tepples was talking about was failing to realize that the other way would be more versatile, because developers would be able to use different colors if they wanted to but they could also make them all the same.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What does "sample playback" mean? Any sound or music?</div><br />The NES has 4 audio channels that play simple waveforms that sound like "blips and blops" (i.e. typical 8-bit era sounds) but it also has a PCM channel that can be used to play more complex sounds such as real instruments or the human voice. These sounds are called "sampled sounds" because you record them by sampling the sound wave at a constant frequency, and with that information the same sound (or an approximation of it) can be played back.<br /><br />One way to play sampled sounds on the NES consists in pointing it to the DPCM data in the ROM that you want to play, and it will do so while the program keeps running. From time to time, the CPU will briefly interrupt the program to read bytes containing sampled sounds from the ROM, and these reads are the ones that can interfere with joypad and PPU reads.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What do you mean by overdraw? Being able to draw on the part of the screen that isn't displayed?</div><br />In this case, overdraw means how much of the scanline can be filled with sprites. "Over" probably means "on top" here, meaning that the sprite can cover a certain amount of the background.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By "tile", you mean an 8x8 block of pixels, right?</div>
<br />Yes. Which means that the GBC has 768 tiles, according to what tepples said.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 07, 2011 8:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, the NES has 4 background palettes and 4 sprite palettes.</div><br />And no mapper can increase the number of palettes, right?</div><br />Correct. But a mapper can make smaller background color areas (8x1 pixels instead of 16x16 pixels), and in theory, a mapper can even include a more sophisticated PPU that can fake more palettes through spatiotemporal dithering.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An oversight in the PPU design causes colors 4, 8, and 12 to be replaced with color 0 when rendering is turned on.</div><br />So it wasn't intentional, but accidental?</div><br />I'm almost certain that nobody posting to this board worked for Nintendo during 1983 when Nintendo was engineering the PPU. Therefore, we can't know for sure whether the inability to use colors 4, 8, and 12 was intentional or accidental.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">reading from VRAM is unreliable if sample playback is turned on.</div><br />What does "sample playback" mean? Any sound or music?</div><br />Only <a href="http://wiki.nesdev.com/w/index.php/APU_DMC" class="postlink">channel 5</a> plays back samples streamed from ROM. The Legend of Zelda and Super Mario Bros. 2: Mario Madness use this for sound effects that were produced with the FDS adapter's channel 6 on the respective FDS versions of these games. Super Mario Bros. 3, Contra, and Blades of Steel use this for drums; several later games by Sunsoft use it for the bass. The other four channels are <a href="http://en.wikipedia.org/wiki/Direct_digital_synthesizer" class="postlink">digital tone generators</a>, do not automatically read data from ROM or RAM, and therefore do not interfere with reading from VRAM or the controllers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NES has less capacity for sprite overdraw: 8 sprites per line (25% overdraw on a 256px wide screen) vs. GB/GBC 10 sprites per line (50% overdraw on a 160px wide screen)</div><br />What do you mean by overdraw? Being able to draw on the part of the screen that isn't displayed?</div><br />You're thinking of either <a href="http://wiki.nesdev.com/w/index.php/Mirroring" class="postlink">nametable arrangement</a> or <a href="http://wiki.nesdev.com/w/index.php/Overscan" class="postlink">overscan</a>. Overdraw is something entirely different, related to the amount of space on the screen that sprites can cover. In 3D graphics, "overdraw" refers to the total area covered by overlapping triangles. Video processors descended from the TI TMS9918 family VDPs used in the TI-99/4A, ColecoVision, and MSX, such as those in the NES, SMS, Game Boy, Genesis, Super NES, and GBC, have limits on the number of sprites that can appear on the screen, the maximum size of sprites, the number of sprites that can appear on one scanline, and the total number of sprite pixels that can appear on one scanline. I have used the term "overdraw" to refer to the amount of area that can be covered by sprites without dropout, in most cases with respect to the amount of a scanline that can be covered with sprites.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Game Boy has 6 KiB of VRAM devoted to one and a half pattern tables: 128 tiles just for sprites, 128 tiles to share between sprites and backgrounds, and 128 tiles just for backgrounds. The remaining 2 KiB of VRAM is used by two nametables in a single-screen mirroring configuration. </div><br />By "tile", you mean an 8x8 block of pixels, right?</div><br />Correct. Tiles on the vast majority of VDPs descended from the TMS9918 are 8x8 pixels in size. On the NES, Game Boy, and Game Boy Color, the data for each 8x8 pixel tile is always 16 bytes in size.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">They could've made overlapping walls and trees</div><br />Overlapping objects in the background require extra tiles and, if the objects are of different colors, often extra palettes. That's one reason why roofs of RPG houses often sloped with the flat part toward the camera (as seen <a href="http://pineight.com/mw/index.php?title=File:SUGallery_house_1.png" class="postlink">here</a>), as opposed to toward the sides (as seen in the home button of your web browser): so that the edges could remain aligned to the tile grid.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">trees that are sized properly</div>
<br />Which would have required extra care to show the correct overlap when the player walks behind them. This is tricky. Even on the Super NES, with its two main background layers and background priority per tile, Sony didn't get player-background occlusion 100% right in Equinox.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Tue Feb 08, 2011 9:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Correct. But a mapper can make smaller background color areas (8x1 pixels instead of 16x16 pixels), and in theory, a mapper can even include a more sophisticated PPU that can fake more palettes through spatiotemporal dithering.</div><br />I don't know what spatiotemporal dithering is, but it sounds like something that would be very unrealistic to implement. Did any licensed games use such a thing?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Only channel 5 plays back samples streamed from ROM. The Legend of Zelda and Super Mario Bros. 2: Mario Madness use this for sound effects that were produced with the FDS adapter's channel 6 on the respective FDS versions of these games. Super Mario Bros. 3, Contra, and Blades of Steel use this for drums; several later games by Sunsoft use it for the bass. The other four channels are digital tone generators, do not automatically read data from ROM or RAM, and therefore do not interfere with reading from VRAM or the controllers.</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">[what Tokumaru said] ...</div><br />I see.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Overlapping objects in the background require extra tiles and, if the objects are of different colors, often extra palettes.</div><br />1) Why would it require extra tiles?<br />2) Ack, I forgot that palettes are distributing to 16 by 16 pixel blocks, not 8 by 8... Perhaps it wouldn't be possible then...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The first color of the sprite palettes doesn't even exist (there's no memory to store them)... It's not like you could do anything with them anyway, since color 0 means transparency for sprites. </div>
<br />Oh. I thought one could turn off the transparency for sprites if one wanted to, thus allowing a fourth color.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 08, 2011 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">a mapper can even include a more sophisticated PPU that can fake more palettes through spatiotemporal dithering.</div><br />I don't know what spatiotemporal dithering is</div><br /><a href="http://en.wikipedia.org/wiki/Dither" class="postlink">Dithering</a> means adding noise to spread out rounding errors. Spatial dithering spreads out rounding errors between neighboring pixels. Temporal dithering spreads out rounding errors from one frame to the next: each pixel is flickered. "Spatiotemporal" dithering spreads out rounding errors both to neighboring pixels and to the next frame. But a PPU-in-a-mapper is largely theoretical (apart from Wide Boy) and not something you need to worry about at this stage.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Did any licensed games use such a thing?</div><br />Flickering the least significant bit of palette values is a form of temporal dithering that appears to have been common in Genesis games in order to work around the limitation of 3 bits per channel in the palette, compared to 5 bits on the Super NES, so that gradients don't royally suck.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Overlapping objects in the background require extra tiles and, if the objects are of different colors, often extra palettes.</div><br />1) Why would it require extra tiles?</div><br />Because when you overlap two objects in the background, and they don't have clean edges on tile boundaries, you have to composite all combinations of the two objects into CHR RAM or include all combinations in the CHR ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh. I thought one could turn off the transparency for sprites if one wanted to, thus allowing a fourth color.</div>
<br />This is possible in SDL, but not in NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Feb 08, 2011 11:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Did any licensed games use such a thing?</div>
<br />I don't think so, it's too much trouble. <a href="http://nesdev.com/bbs/viewtopic.php?t=7363" class="postlink">This set of demos</a> seems to be a good example of the technique, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Wed Feb 09, 2011 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Dithering means adding noise to spread out rounding errors. Spatial dithering spreads out rounding errors between neighboring pixels. Temporal dithering spreads out rounding errors from one frame to the next: each pixel is flickered. "Spatiotemporal" dithering spreads out rounding errors both to neighboring pixels and to the next frame. But a PPU-in-a-mapper is largely theoretical (apart from Wide Boy) and not something you need to worry about at this stage.</div><br />Ok.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Flickering the least significant bit of palette values is a form of temporal dithering that appears to have been common in Genesis games in order to work around the limitation of 3 bits per channel in the palette, compared to 5 bits on the Super NES, so that gradients don't royally suck.</div><br />Oh, the Super NES had 32 colors per palette? And 65k-some colors to choose from I assume?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because when you overlap two objects in the background, and they don't have clean edges on tile boundaries, you have to composite all combinations of the two objects into CHR RAM or include all combinations in the CHR ROM.</div><br />So, I was right when I said this, right?:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) Ack, I forgot that palettes are distributing to 16 by 16 pixel blocks, not 8 by 8... Perhaps it wouldn't be possible then...</div>
<br />Could overlap like in the screenshot I posted before be possible on the NES? Or would one need more colors per palette?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Feb 09, 2011 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Oh, the Super NES had 32 colors per palette? And 65k-some colors to choose from I assume?<br /></div>
<br />32 possible intensities for R G or B in a color, not 32 colors per palette.  Compare with VGA's range of 0-63 for intensity, or later video card's 0-255 range.
<br />I believe there are 16 16-color palettes on the SNES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 10, 2011 7:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Could overlap like in the screenshot I posted before be possible on the NES? Or would one need more colors per palette?</div>
<br />You mean how the wall overlaps the characters? The best way to do that on the NES would be to use mask sprites... sprites with the same shape as the wall, with higher priority (lower OAM index) than the character sprites and with the "behind background" bit set.
<br />
<br />When your character sprites and the mask sprites overlap, the PPU will first check which sprite has higher priority, and since the mask sprites appear first in the OAM they will win. Then, the PPU will try to draw the mask, but since it's configured to be behind the background, the background is displayed instead.
<br />
<br />The only problem with this technique is that the sprite count raises quite quickly. You obviously wouldn't keep the masks in place at all times, only when necessary, but even then the limit of 8 sprites is reached fairly easily, so there will be some flickering.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>18</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>