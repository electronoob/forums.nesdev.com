<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NES Programming Blog</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NES Programming Blog</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13676">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13676</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NESHomebrew</b> [ Tue May 10, 2016 1:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I saw your video.  Should be useful for beginners, I did find the loud clicking a bit distracting, I'm not sure if the mic was picking that up, or if it is a part of your recording software.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon May 16, 2016 5:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made a video about using the debugging tools of FCEUX. I probably forgot about a dozen things to mention, but it was getting pretty long.<br /><br /><!-- m --><a class="postlink" href="https://youtu.be/d2XkJQFs0OQ">https://youtu.be/d2XkJQFs0OQ</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Fri Aug 12, 2016 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've updated every example code (except for the Spacy Shooty game code, which I plan to rewrite from scratch).<br /><br />Most of the changes are cosmetic (make comments easier to read), or just trying to make the code more stable.<br />-added a second v-blank wait in the startup code, before writing to PPU. Which I must have accidentally removed and never put back in.<br />-moved 'things that need to be done every frame' (like sprite DMA) to NMI code<br />-added a write to a000 (mirroring) to the init code for my MMC3 examples<br />-removed the copy of nes.lib from every zip, which apparently was completely unnecessary to keep a copy of, since cc65 is able to find its own copy<br /><br />At some point, I will also update the Spacy Shooty example code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Diskover</b> [ Sun Aug 14, 2016 4:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I've updated every example code (except for the Spacy Shooty game code, which I plan to rewrite from scratch).<br /><br />Most of the changes are cosmetic (make comments easier to read), or just trying to make the code more stable.<br />-added a second v-blank wait in the startup code, before writing to PPU. Which I must have accidentally removed and never put back in.<br />-moved 'things that need to be done every frame' (like sprite DMA) to NMI code<br />-added a write to a000 (mirroring) to the init code for my MMC3 examples<br />-removed the copy of nes.lib from every zip, which apparently was completely unnecessary to keep a copy of, since cc65 is able to find its own copy<br /><br />At some point, I will also update the Spacy Shooty example code.</div><br /><br />Great!  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Aug 14, 2016 8:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've decided to finally do some testing with structs vs cc65.<br /><br />If you declare the actual struct in the global space, it puts them in the BSS, and actually takes about as much time to access as any other variable...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct foo {<br />&nbsp; &nbsp;unsigned char X;<br />&nbsp; &nbsp;int Y;<br />&nbsp; &nbsp;int Z;<br />};<br /><br />struct foo B;<br /><br />void main (void){<br />&nbsp; &nbsp;B.X = 4;<br />&nbsp; &nbsp;B.Y = 5;<br />}</div><br /><br /><br />compiles to ...<br /><br />	<div class="codetitle"><b>Code:</b></div><div class="codecontent">lda&nbsp; &nbsp; &nbsp;#$04<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_B<br /><br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_B+1<br />&nbsp; &nbsp;stx&nbsp; &nbsp; &nbsp;_B+1+1</div><br /><br /><br />If, however, you put the struct in the local space, it puts them in the C stack.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void main (void){<br />&nbsp; &nbsp;struct foo C;<br /><br />&nbsp; &nbsp;C.X = 3;<br />&nbsp; &nbsp;C.Y = 4;<br />}</div><br /><br />compiles to...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;decsp5<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$03<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(sp),y<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$04<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(sp),y<br /></div><br /><br />Conclusions, just like variables are faster in cc65 if decared globally, structs seem to also be faster if declared globally. And, much better than I thought.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Aug 15, 2016 8:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, structs by itself are not too bad. It's arrays of structs indexed by non-constants that can be problematic, e.g.:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct foo {<br />&nbsp; &nbsp;unsigned char X;<br />&nbsp; &nbsp;int Y;<br />&nbsp; &nbsp;int Z;<br />};<br /><br />struct foo B&#91;5&#93;;<br />unsigned char i;<br /><br />void main (void){<br />&nbsp; &nbsp;for ( i = 0; i &lt; 5; ++i ) {<br />&nbsp; &nbsp; &nbsp; &nbsp;B&#91;i&#93;.X = 4;<br />&nbsp; &nbsp; &nbsp; &nbsp;B&#91;i&#93;.Y = 123;<br />&nbsp; &nbsp;}<br />}<br /></div>The above code has to generate code to multiply the index by the struct size (5) to index the array.<br /><br />&quot;Structs of arrays&quot; is better:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct foo {<br />&nbsp; &nbsp;unsigned char X&#91;5&#93;;<br />&nbsp; &nbsp;int Y&#91;5&#93;;<br />&nbsp; &nbsp;int Z&#91;5&#93;;<br />};<br /><br />struct foo B;<br />unsigned char i;<br /><br />void main (void){<br />&nbsp; &nbsp;for ( i = 0; i &lt; 5; ++i ) {<br />&nbsp; &nbsp; &nbsp; &nbsp;B.X&#91;i&#93; = 4;<br />&nbsp; &nbsp; &nbsp; &nbsp;B.Y&#91;i&#93; = 123;<br />&nbsp; &nbsp;}<br />}<br /></div><br />However, this code still has the problem that the 16-bit Y and Z need a multiplication by 2 to access them. Splitting them into separate byte-sized YLo, YHi, ZLo, ZHi members could generate more optimal code, but that in turn would complicate the actual use of those members (say, if you want to add or assign a value to &quot;YLo, YHi&quot;).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Tue Sep 06, 2016 3:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Things I figured out this weekend, and will be corrected on my blog.<br /><br />I wrote the code for most of the pages very quickly, and occasionally I would get error messages from the cc65 compiler. &quot;converting pointer to int without a cast&quot; &quot;incompatible pointer type&quot; etc...and I didn't know what caused them, but I slapped an (int) on there, and the error message went away. But, it didn't look right to me, and I could never find any example code that required type casting to fix error messages...so it bothered me a bit.<br /><br />Well, the reason I never found example code to match what I was doing, was because I was doing things wrong. The ASM code was correct, so I assumed I had correctly addressed the issue, but once I saw the correct answer...I see that I hadn't.<br /><br />example...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const int AllBackgrounds&#91;&#93; = {(int) &amp;n1,(int) &amp;n2,(int) &amp;n3,(int) &amp;n4 };</div><br /><br />I slapped some (int)'s on there because it gave me error messages...but what I really wanted was this...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const unsigned char * const All_Backgrounds&#91;&#93;={n1,n2,n3,n4};</div><br /><br />and the companion piece...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UnRLE(BGDaddress);</div><br /><br />I believe the error was that my prototype said this...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void __fastcall__ UnRLE(int data);</div><br /><br />and, what I really wanted was this...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void __fastcall__ UnRLE(const unsigned char *data);</div><br /><br />because, what I'm really doing with the code, is an array of constant pointers to an array of constant characters. And, what I'm really passing to the function is a pointer to an array.<br /><br />This will be fixed soon on the blog example code.<br /><br /><s>Further, I don&#39;t think I&#39;ve fully tested &#39;controller 2&#39; input code. All my example code only tests &#39;controller 1&#39;. I will have to do that as well.</s><br />EDIT, I tested it. Works fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Tue Sep 06, 2016 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've updated every example code on the blog. As usual, if anyone spots any outrageous bugs or bad programming practices, let me know. Thanks.<br /><br />Here's a quick link to the Spacy Shooty source code...<br /><br /><!-- m --><a class="postlink" href="http://dl.dropboxusercontent.com/s/70f89x9viu4r8mw/Spacy4.zip">http://dl.dropboxusercontent.com/s/70f8 ... Spacy4.zip</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Oct 17, 2016 3:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Update (10-17-2016) I updated reset.s in every file, to make sure that initlib and copydata were included. Also changed, added Wait_Vblank(); to several files, just before rendering was turned on, to fix 1 frame of misaligned screens. Finally, changed the .cfg file on the MMC3 examples, to include the missing segments that I had deleted.<br /><br />See here for further discussion on missing 'copydata'...causing errors.<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=14947">viewtopic.php?f=10&amp;t=14947</a><!-- l -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Thu Feb 09, 2017 2:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Update Feb 9, 2017<br /><br />I changed every .cfg file to include a &quot;ONCE&quot; segment, so it will compile with the latest version of cc65.<br /><br />I added a makefile for Linux users, and people who prefer Gnu Make to .bat files. Well, Linux users will have to edit the makefile slightly. I originally wrote them on a Linux computer, but then brought them over to my Windows computer, and edited them to work there...<br />...anyway, Linux users will have to uncomment out the lines <span style="color: #FF80FF">rm *.o</span> and comment the lines <span style="color: #FF80FF">del *.o</span>. (etc for .nes files under CLEAN:)<br /><br /><br />UNRELATED SIDENOTE:<br />I wrote a 6502 disassembler in python. I might post it in a few weeks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 09, 2017 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you are using Make from MSYS, you'll probably have GNU Coreutils, which includes <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rm</tt>. For other things that tend to vary, such as presence or absence of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.exe</tt> in the name of a native executable produced by the linker, you can use the presence or absence of environment variable <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">COMSPEC</tt> to set makefile variables.<br /><br />See <a href="https://skramm.blogspot.com/2013/04/writing-portable-makefiles.html" class="postlink">Writing portable makefiles</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Fri Feb 10, 2017 6:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">However, this code still has the problem that the 16-bit Y and Z need a multiplication by 2 to access them.</div><br />Isn't multiplication of 2, 4, 8, 16 etc. unproblematic since the compiler can turn it into a simple bit shift? So, an array of ints shouldn't be that much of an issue. At least it's not comparable to the access complexity of an array of a struct.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Splitting them into separate byte-sized YLo, YHi, ZLo, ZHi members could generate more optimal code, but that in turn would complicate the actual use of those members (say, if you want to add or assign a value to &quot;YLo, YHi&quot;).</div><br />Yeah, I would highly adivse against that. If you happen to need an integer in an NES game (which should be more the exception than the rule) let the compiler handle it. Don't fiddle around with two byte values if they are supposed to represent a single number.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Feb 10, 2017 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><div class="quotetitle">thefox wrote:</div><div class="quotecontent">However, this code still has the problem that the 16-bit Y and Z need a multiplication by 2 to access them.</div><br />Isn't multiplication of 2, 4, 8, 16 etc. unproblematic since the compiler can turn it into a simple bit shift? So, an array of ints shouldn't be that much of an issue. At least it's not comparable to the access complexity of an array of a struct.</div><br />Yeah it's not a huge problem, but non-optimal nevertheless.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 10, 2017 10:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><div class="quotetitle">thefox wrote:</div><div class="quotecontent">However, this code still has the problem that the 16-bit Y and Z need a multiplication by 2 to access them.</div><br />Isn't multiplication of 2, 4, 8, 16 etc. unproblematic since the compiler can turn it into a simple bit shift? So, an array of ints shouldn't be that much of an issue. At least it's not comparable to the access complexity of an array of a struct.</div><br />It's not just a bit shift. If you can do an array access with an 8-bit index, it can just go into X or Y. If the index is wider, it can't do that anymore, and you get a 16-bit shift <em>plus</em> a 16-bit add operation on a temporary pointer, and then on top of that the array access becomes indirect.<br /><br />Here's an example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned char ac&#91;35&#93;;<br />unsigned int&nbsp; ai&#91;35&#93;;<br /><br />void index_test()<br />{<br />&nbsp; &nbsp;static unsigned char i;<br /><br />&nbsp; &nbsp;// 1.<br />&nbsp; &nbsp;i = index();<br />&nbsp; &nbsp;ac&#91;i&#93; = 5; // 8-bit index on 8-bit array<br /><br />&nbsp; &nbsp;// 2.<br />&nbsp; &nbsp;i = index();<br />&nbsp; &nbsp;ac&#91;i*2&#93; = 6; // index is promoted to 16-bit int<br /><br />&nbsp; &nbsp;// 3.<br />&nbsp; &nbsp;i = index() * 2;<br />&nbsp; &nbsp;ac&#91;i&#93; = 7; // index was implicitly cast back to 8-bit before use<br /><br />&nbsp; &nbsp;// 4.<br />&nbsp; &nbsp;i = index();<br />&nbsp; &nbsp;ai&#91;i&#93; = 8; // index is promoted to 16-bit int by implicit mulitplication by 2<br />}</div><br /><br />And the generated assembly:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; 1.<br />; i = index();<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;_index<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;L0017<br />; ac&#91;i&#93; = 5;<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;L0017<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_ac,y<br /><br />; 2.<br />; i = index();<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;_index<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;L0017<br />; ac&#91;i*2&#93; = 6;<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;L0017<br />&nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L3763<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;clc<br />L3763:&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#&lt;(_ac)<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#&gt;(_ac)<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$06<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y<br /><br />; 3.<br />; i = index() * 2;<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;_index<br />&nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;L0017<br />; ac&#91;i&#93; = 7;<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;L0017<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$07<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_ac,y<br /><br />; 4.<br />; i = index();<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;_index<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;L0017<br />; ai&#91;i&#93; = 8;<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;L0017<br />&nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L3764<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;clc<br />L3764:&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#&lt;(_ai)<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#&gt;(_ai)<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$08<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y</div><br /><br />The difference between examples 2 and 3 especially shows how helpful it can be to undo integer promotion before accessing the array with it. With example 4, once you use arrays of 16-bit (or larger) types all indexed access becomes full 16-bit indirection, and you can't really do anything to stop that.<br /><br />So... not as bad as a multiplication, but if you're looking to reduce some of your overhead, it's actually not a terrible idea to &quot;manually&quot; pack striped arrays. A syntax vs convenience tradeoff, though you could simplify the syntax with macros.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Feb 11, 2017 3:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NES Programming Blog</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />O.k., yeah, that makes sense. Maybe I could have optimized some stuff with this knowledge in my game because the x position of each character was an integer.<br />(y was a byte because I had a status bar at the top, so I could simply declare that every sprite that has a position within the status bar is declared as out of screen and I didn't render these sprites at all.)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>