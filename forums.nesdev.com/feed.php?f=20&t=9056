<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=20&amp;t=9056" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-07-08T23:44:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=20&amp;t=9056</id>
<entry>
<author><name><![CDATA[strat]]></name></author>
<updated>2012-07-08T23:43:19-07:00</updated>
<published>2012-07-08T23:43:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96635#p96635</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96635#p96635"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96635#p96635"><![CDATA[
Sweet, that was it.  I got wlad to output something that can be reassembled.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3506">strat</a> — Sun Jul 08, 2012 11:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-07-07T22:51:23-07:00</updated>
<published>2012-07-07T22:51:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96615#p96615</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96615#p96615"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96615#p96615"><![CDATA[
<div class="quotetitle">strat wrote:</div><div class="quotecontent"><br />So here's a story.  I tried building wla-gb for windows and it would always shout "out of 8bit range" when assembling a JR opcode with a negative value.  It won't assemble JR $FA but JR $-6 would work.  This is interesting because wlad outputs JR $FA.<br /></div><br />I think you're mistaken here. $ probably denotes the current program counter value so "$-6" is not "negative 6" but "PC minus 6". At least it would make much more sense for the negative hexadecimal value to be denoted with "-$6" instead.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sat Jul 07, 2012 10:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[strat]]></name></author>
<updated>2012-07-08T23:44:49-07:00</updated>
<published>2012-07-07T20:25:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96612#p96612</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96612#p96612"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96612#p96612"><![CDATA[
So here's a story.  I tried building wla-gb for windows and it would always shout "out of 8bit range" when assembling a JR opcode with a negative value.  It won't assemble JR $FA but JR $-6 would work.  This is interesting because wlad outputs JR $FA.<br /><br />To fix the bug, I tinkered with wlad and added this code to the output_bank_opcodes routine in main.c (starts at line 198) so it would output JR $-6 instead of JR $FA:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   for &#40;t = strlen&#40;ot-&gt;op&#41;, x = 0, p = 0; x &lt; t; &#41; &#123;<br />     if &#40;ot-&gt;op&#91;x&#93; == 'x'&#41; &#123;<br />       bu&#91;p&#93; = 0;<br />      <br />      negval = in&#91;&#40;*i&#41;++&#93;;<br />      if &#40;0x38 == ot-&gt;hex || 0x30 == ot-&gt;hex || 0x28 == ot-&gt;hex || 0x20 == ot-&gt;hex || 0x18 == ot-&gt;hex || 0xF8 == ot-&gt;hex || 0xE8 == ot-&gt;hex&#41; &#123;<br />         if &#40;negval &gt; 0x7F &amp;&amp; negval &lt;= 0xFF&#41; &#123;<br />            signed int nb,na;<br />            nb = negval;<br />            negval = &#40;negval - 0xFF&#41; - 1;<br />            na = negval * -1;<br />            negval = &#40;negval&#41; + &#40;na &lt;&lt; 1&#41;;<br />            if &#40;negval &gt; 0x0F&#41; &#123;<br />               sprintf&#40;tm, &quot;-$%.2x&quot;,negval&#41;;<br />               p += 4;<br />            &#125;<br />            else &#123;<br />               sprintf&#40;tm, &quot;-$%.1x&quot;,negval&#41;;<br />               p += 3;<br />            &#125;<br />         &#125;<br />         else &#123;<br />            sprintf&#40;tm, &quot;$%.2x&quot;,negval&#41;;<br />            p += 3;<br />         &#125;<br />      &#125;<br />      else &#123;   <br />         sprintf&#40;tm, &quot;$%.2x&quot;,negval&#41;;<br />         p += 3;<br />      &#125;<br />      <br />       strcat&#40;bu, tm&#41;;<br />       /*p += 3;*/<br />       x++;<br />       a++;<br />     &#125;<br />     else<br />       bu&#91;p++&#93; = ot-&gt;op&#91;x++&#93;;<br />   &#125;<br /></div><br /><br />That seemed to solve all the problems cropping up.  Only now I'm trying to assemble this file (with wla-gb) that was generated with the wlad I modified.  And now it's giving "unknown symbol JR" errors for no apparent reason at line 1325 ($08ef) even though there's no JR instruction at this line or the two lines before and after it.  And of course it would have processed  hundreds of JR opcodes at this point with no trouble.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LD A,&#40;$FF00+$a0&#41;      ; $08e2<br />   INC A      ; $08e4<br />   CP $05      ; $08e5<br />   JR NZ,$-28      ; $08e7<br />   LD A,$04      ; $08e9<br />   JR $-2c      ; $08eb<br />   LD A,&#40;$FF00+$ac&#41;      ; $08ed<br />   INC A      ; $08ef ; line 1325<br />   CP $05      ; $08f0<br />   JR NZ,$-27      ; $08f2<br />   LD A,$04      ; $08f4<br />   JR $-2b      ; $08f6<br /></div><br /><br />There could be a bug in wla-gb for assembling pure hex numbers (It seems to work fine with labels).  But even after the effort I put into fixing the original problem, it's a very mysterious obstacle.<br /><br />Edit:  After playing around with the generated disassembly, a workaround would be to have the disassembler turn the negative jumps into labels.  That should fix everything for good.<br /><br />Edit:  Code changed to reflect working wlad.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3506">strat</a> — Sat Jul 07, 2012 8:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[strat]]></name></author>
<updated>2012-07-03T21:01:43-07:00</updated>
<published>2012-07-03T21:01:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96449#p96449</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96449#p96449"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96449#p96449"><![CDATA[
Compiling WLA is no more complicated than running the included makefile.  But I'm using the Windows version and WLA-GB refuses to assemble the code from WLAD-GB (The disassembler).  Reading someone else's C code seems like less fun to me than reading asm.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3506">strat</a> — Tue Jul 03, 2012 9:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-07-03T15:27:04-07:00</updated>
<published>2012-07-03T15:27:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96438#p96438</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96438#p96438"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96438#p96438"><![CDATA[
I've hand-assembled z80 dozens of times before. If it's just to assemble a small(ish) routine, then there's nothing wrong with it. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Tue Jul 03, 2012 3:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Pennywise]]></name></author>
<updated>2012-07-03T14:44:21-07:00</updated>
<published>2012-07-03T14:44:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96436#p96436</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96436#p96436"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96436#p96436"><![CDATA[
I looked at WLA actually, but it looked like I had to compile the latest version myself and I am totally unfamiliar with that process.<br /><br />But I'm not that big of a GB hacker and the only other code at the moment I need to do is just some simple code to relocate some text at the end of bank to another bank. And at the moment, I have bunch of menu hacking to do which doesn't really require me to write any code of substance.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3981">Pennywise</a> — Tue Jul 03, 2012 2:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2012-07-03T03:06:08-07:00</updated>
<published>2012-07-03T03:06:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96401#p96401</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96401#p96401"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96401#p96401"><![CDATA[
Why not use one of the already available assemblers, like WLA-DX or RGBASM? Surely the time spent on hand-assembly could be better spent on writing more code or debugging.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Tue Jul 03, 2012 3:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Pennywise]]></name></author>
<updated>2012-07-02T15:40:02-07:00</updated>
<published>2012-07-02T15:40:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96366#p96366</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96366#p96366"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96366#p96366"><![CDATA[
Yeah, I know assembling code by hand isn't the smartest or even the best way to handle writing and developing code. I'm actually waiting for this person called Lin to release his/her assembler for the system. Hopefully, if it's released this summer, I'll be switching over to that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3981">Pennywise</a> — Mon Jul 02, 2012 3:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-07-01T11:54:13-07:00</updated>
<published>2012-07-01T11:54:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96317#p96317</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96317#p96317"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96317#p96317"><![CDATA[
It looks like you're assembling by hand, are you really doing this?  I'd at least set up TASM or something to make a binary, then I can copy-paste assembled code in with a hex editor.<br /><br />I see some typos in the ASM code, like missing parenthesis on (de) or (hl), or calling hl "h1".  Those don't matter if you're assembling by hand, but an assembler would give errors.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Jul 01, 2012 11:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Pennywise]]></name></author>
<updated>2012-07-01T10:09:34-07:00</updated>
<published>2012-07-01T10:09:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96310#p96310</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96310#p96310"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96310#p96310"><![CDATA[
Here's my tested and working dte code. The game executes this code three times before moving onto to the next text byte and that really threw a wrench into my code. I'm this is not the best routine ever, but it does work as intended.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ld de,C000   11 00 C0   ; dte second pass check   <br />      ld a,&#40;de&#41;   1A         <br />      cp a,03      FE 03      ; go to second pass routine if 03<br />      jr z      28 2F<br />      cp a,04      FE 04      ; above except slightly modified<br />      jr z      28 31<br />      cp a,05      FE 05<br />      jr z      28 2D<br />      cp a,06      FE 06<br />      jr nz      20 03      <br />      ld a,00      3E 00<br />      ld de,a      12<br />      ld hl,C20C   21 0C C2   ; original text read routine<br />      ld c,&#40;hl&#41;   4E<br />      inc hl      23<br />      ld b,&#40;hl&#41;   46<br />      ld a,&#40;bc&#41;   0A<br />      cp a,50      FE 50      ; dte check values 50-80<br />      jr nc      30 01<br />      ret         C9         ; return if less than 50 or greater than 80<br />      cp a,80      FE 80<br />      jr nc      30 FB<br />      push af      F5<br />      ld a,&#40;de&#41;   1A         ; increments the dte second pass check byte<br />      inc a      3C<br />      ld &#40;de&#41;,a   12<br />      pop af      F1<br />      sub,50      D6 50      ; subtract 50 from the dte value to be used for the table<br />      push hl      E5<br />      ld h1,3B80   21 80 3B   ; loads the base offset for the dte table<br />      add l      85         ; adds what was previous subtracted to the table<br />      ld l,a      6F<br />      ld a,&#40;hl&#41;   7E         ; puts the first dte value in a<br />      pop hl      E1<br />      ret         C9<br />      <br />      ld hl,C20C   21 0C C2   ; second pass routine only triggered once<br />      ld a, &#40;hl&#41;   7E         <br />      dec a      3D         ; decrements the the text offset by 1 to adjust for dte<br />      ld hl,a      77<br />      <br />      ld a,&#40;de&#41;   1A         ; second pass routine, goes here if a &lt; 3<br />      inc a      3C         ; increments dte flag<br />      ld &#40;de&#41;,a   12<br />      ld hl,C20C   21 0C C2   ; original text read routine<br />      ld c,&#40;hl&#41;   4E<br />      inc hl      23<br />      ld b,&#40;hl&#41;   46<br />      ld a,&#40;bc&#41;   0A<br />      sub,50      D6 50<br />      push hl      E5<br />      ld h1,3B80   21 80 3B   ; same dte code<br />      add l      85<br />      ld l,a      6F<br />      inc 1      2C         ; add 1 to the dte table offset for second dte value<br />      ld a,&#40;hl&#41;   7E<br />      pop hl      E1<br />      ret         C9<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3981">Pennywise</a> — Sun Jul 01, 2012 10:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-07-01T05:30:52-07:00</updated>
<published>2012-07-01T05:30:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96299#p96299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96299#p96299"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96299#p96299"><![CDATA[
So your explaination of situation where the trick could be useful was missing important part about the overflow flag. The optimization is only could be achieved when the flag could be actually used. Like, replacing the common code piece (7 bytes, 30 t-states)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> inc hl<br /> dec bc<br /> ld a,b<br /> or c<br /> jp nz,loop</div><br /><br />with (5 bytes, 26 t-states)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> cpi<br /> jp po,loop</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Sun Jul 01, 2012 5:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-07-01T00:58:18-07:00</updated>
<published>2012-07-01T00:58:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96296#p96296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96296#p96296"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96296#p96296"><![CDATA[
CPI sets overflow flag based on value of BC, so you get the comparison for free.  Also code size.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Jul 01, 2012 12:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-06-30T21:47:29-07:00</updated>
<published>2012-06-30T21:47:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96291#p96291</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96291#p96291"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96291#p96291"><![CDATA[
What is the point of using CPI instead of INC/DEC on Z80? It is slower, 16 t-states vs 2*6, and takes two bytes in any case.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Sat Jun 30, 2012 9:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-06-30T21:38:51-07:00</updated>
<published>2012-06-30T21:38:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96290#p96290</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96290#p96290"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96290#p96290"><![CDATA[
LDI exists on the regular Z80, but it is completely different:<br />Copy byte from (HL) to (DE), increment hl and de, decrement bc, set overflow flag to whether bc equals zero.<br />LDIR is the looping version of LDI, and repeats until bc = 0.<br />These are found on the regular Z80, not the game boy.<br /><br />Some people use CPI (compare and increment) as an optimization trick on the Z80 when they want to increment HL, decrement BC, and don't care about the compare part.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Jun 30, 2012 9:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-06-30T20:22:12-07:00</updated>
<published>2012-06-30T20:22:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96284#p96284</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96284#p96284"/>
<title type="html"><![CDATA[Help with some GB Z80 commands]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9056&amp;p=96284#p96284"><![CDATA[
The opcode reference I've been using is <a href="http://www.devrs.com/gb/files/opcodes.html" class="postlink">this one</a>.<br />The gameboy hardware reference I've been using is <a href="http://nocash.emubase.de/pandocs.htm" class="postlink">Nocash's</a>, which also has an opcode list.<br /><br />When you're working with the gameboy, most of your indexed addressing is going to be with HL, DE, and BC. For instance, something like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />LDA $----,Y<br />STA $----<br />INY<br />goto loop</div><br /><br />will be done like:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ld hl,----<br />loop:<br />ldi a,&#40;hl&#41;  ;increments HL automatically<br />ld &#40;----&#41;,a<br />goto loop</div><br /><br />If both your fetch and store need to be indexed:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ld hl,----<br />ld de,----<br />loop:<br />ldi a,&#40;hl&#41;<br />ld &#40;de&#41;,a<br />inc de<br />goto loop</div><br /><br />If I recall correctly, "ldi" doesn't exist on the vanilla z80, so you'd have to put an "inc hl" yourself.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Sat Jun 30, 2012 8:22 pm</p><hr />
]]></content>
</entry>
</feed>