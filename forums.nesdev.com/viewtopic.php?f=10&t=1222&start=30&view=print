<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hex to Decimal suggestion</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hex to Decimal suggestion</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1222">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1222</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 15, 2006 9:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I could comment the code, but that would be fairly pointless. The actual explanation of how the thing works is in the post. The comment would be like "shift bit out of binary number", "fix the units digit from table" "shift bit into units digit", and repeat that for the tens, hundreds, etc. The real trick is in the values in the table, and I explained to you what they mean in the post.
<br />
<br />I can't blame you for not understanding the explanation, I suck at explaining things.
<br />
<br />You can view the binary number as a series of 1's that have been doubled a few times. The number 7 for example (binary 111), is a one that has been doubled twice (and turned into 4) plus a one that has been doubled once (2) and a one that has not been doubled. That's the rule for binary numbers. The bits are numbered from 0 to 7. This number is the ammount of times a one has been doubled, if there is a one at that position.
<br />
<br />The idea here is to reconstruct the number, doubling each bit as many times as in the original number, but force the results to be represented with decimal digits. I first shift out the highest bit (bit number 15, whose value is 32768, or 2^15) and put that in the units digit. The whole decimal number will be shifted 16 times (that's why there are so many shifts), so that bit can represent the number 32768 after all the shifts.
<br />
<br />The first few digits double just fine: 1 turns into 2, 2 turns into 4, 3 turns into 6 and 4 turns into 8, but from 5 on we get results that do not match the decimal representation. That's why the values are transformed, so that they do match the decimal representation. 5 is turned into 128 (binary 10000000) right before the shift (doubling), so that the one is carried over to the next digit (since 10 should be represented by 2 digits, the one has to be carried over to the next). 6, wich would turn into $C if shifted normally, is changed to 129 (binary 10000001), so that the top one is carried over and the lower one is doubled to 2, resulting in a perfect "12", wich is the decimal double of 6.
<br />
<br />We basically force the numbers to double to their decimal representation, not he binary/hex one. Whenever an unwanted result is going to happen, we change the value so that we get the desired result.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Sep 04, 2006 10:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LADADIDA!!!!!!!!!!!!!!!!!!!!!!!!
<br />
<br />I am singing because I'm so happy!!
<br />
<br />Okay, I just think it's kind of cool, but... I've just come up with a BinToDec routine that takes &lt;DrumRole&gt; 500 cycles!! I am going to go to bed soon, but I should have it posted by tomorrow! There are NO loops, and it takes 500 cycles every time. Well, if there are no loops, then of course it will. The code is big, though. I haven't bug tested it yet, but I'm sure it will work properly. There are a couple of cons about it: it uses about 20 bytes of RAM, it takes up alot of space. Well that's 2. I'll see if I can spot any more tommorow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Mon Sep 04, 2006 10:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want a <em>small</em> hex-&gt;bcd routine (in regards to both code size and memory usage), here's one kevtris found a while ago (and optimized significantly).
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">hex2bcd_input:&nbsp; .res 3&nbsp; ;&#40;adjust as necessary&#41;<br />hex2bcd_output: .res 4&nbsp; ;&#40;adjust as necessary&#41;<br /><br />hex2bcd:<br />&nbsp; &nbsp; &nbsp; &nbsp; LDY #24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;set this to the number of bits worth of input<br />&nbsp; &nbsp; &nbsp; &nbsp; LDA #0<br />&nbsp; &nbsp; &nbsp; &nbsp; STA hex2bcd_output+0<br />&nbsp; &nbsp; &nbsp; &nbsp; STA hex2bcd_output+1<br />&nbsp; &nbsp; &nbsp; &nbsp; STA hex2bcd_output+2<br />&nbsp; &nbsp; &nbsp; &nbsp; STA hex2bcd_output+3&nbsp; &nbsp; ;clear result regs - insert others here<br />&nbsp; &nbsp; &nbsp; &nbsp; BEQ rotate<br />loop:&nbsp; &nbsp;LDX #3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;this needs to be 1 - len&#40;hex2bcd_output&#41;<br />bcdfix: LDA hex2bcd_output,X<br />&nbsp; &nbsp; &nbsp; &nbsp; ADC #$03<br />&nbsp; &nbsp; &nbsp; &nbsp; BIT val_08<br />&nbsp; &nbsp; &nbsp; &nbsp; BEQ :+<br />&nbsp; &nbsp; &nbsp; &nbsp; STA hex2bcd_output,X<br />:&nbsp; &nbsp; &nbsp; &nbsp;LDA hex2bcd_output,X<br />&nbsp; &nbsp; &nbsp; &nbsp; ADC #$30<br />&nbsp; &nbsp; &nbsp; &nbsp; BPL :+<br />&nbsp; &nbsp; &nbsp; &nbsp; STA hex2bcd_output,X<br />:&nbsp; &nbsp; &nbsp; &nbsp;DEX<br />&nbsp; &nbsp; &nbsp; &nbsp; BPL bcdfix<br />rotate: ROL hex2bcd_input+0<br />&nbsp; &nbsp; &nbsp; &nbsp; ROL hex2bcd_input+1<br />&nbsp; &nbsp; &nbsp; &nbsp; ROL hex2bcd_input+2&nbsp; &nbsp; &nbsp;;insert any others here<br />&nbsp; &nbsp; &nbsp; &nbsp; ROL hex2bcd_output+3&nbsp; &nbsp; ;etc.<br />&nbsp; &nbsp; &nbsp; &nbsp; ROL hex2bcd_output+2<br />&nbsp; &nbsp; &nbsp; &nbsp; ROL hex2bcd_output+1<br />&nbsp; &nbsp; &nbsp; &nbsp; ROL hex2bcd_output+0&nbsp; &nbsp; ;rotate results<br />&nbsp; &nbsp; &nbsp; &nbsp; DEY<br />&nbsp; &nbsp; &nbsp; &nbsp; BNE loop<br />&nbsp; &nbsp; &nbsp; &nbsp; RTS<br />val_08: .byte $08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;because we need to BIT #$08, but you can't BIT immediate</div>
<br />
<br />The only trouble is that it's somewhat slow - a 24-bit number took around 3500 cycles (&gt;30 scanlines) to convert. A reduced routine to work on a 16-bit number took around 1750 cycles (~15 scanlines), about half as long.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 05, 2006 7:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I've just come up with a BinToDec routine that takes &lt;DrumRole&gt; 500 cycles!! I am going to go to bed soon, but I should have it posted by tomorrow!</div><br />I'd like to see that! =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are NO loops, and it takes 500 cycles every time. Well, if there are no loops, then of course it will.</div><br />Well, you could have no loops but have some decisions here and there. Branches not always are loops.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are a couple of cons about it: it uses about 20 bytes of RAM, it takes up alot of space.</div>
<br />Yeah, that is a lot. How much ROM does it take? If it's completely unrolled, I guess a lot.
<br />
<br />I'm usually a fan of speed, not size. I hope this didn't sound gay. But I guess it did. Well, you know what I'm talking about&#058; I'd rather have a quick routine, that takes a bunch of ROM, 'cause usually my programs have to be fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Sep 05, 2006 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, well it's up! It works, I've tested it, and after manually counting out all the cycles, it was about 520 to 550. I added slight changes to it since I counted, and I'll just assume it's around there. It's right here:
<br />
<br /><!-- m --><a class="postlink" href="http://www.freewebs.com/the_bott/bintodec.asm">http://www.freewebs.com/the_bott/bintodec.asm</a><!-- m -->
<br />
<br />
<br />The main idea of this routine is quite simple.
<br />
<br />I have a couple of tables with decimal representations of certain hex values. I have one table that defines every decimal representation for every $1000. Meaning I'll have the decimal representation for $1000, $2000, $3000, $4000, etc. I have that in one table. And I have the decimal representations for every $0X00. Same idea, just for like $0100, $0200, etc. Then I have two more tables for $00X0 and $000X. I don't know if you've ever really thought about it, but like $FFFF is the same as $F000 + $0F00 + $00F0 + $000F. And that would mean 65535 is the same as: 61440 + 3840 + 240 + 15. 61440 being the decimal representation of $F000, 3840 being $0F00, etc. Then I simulate pen-and-paper math. I set it up just like I'd write all 4 of those numbers down in seperate rows:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">61440<br />&nbsp;3840<br />&nbsp; 240<br />&nbsp; &nbsp;15<br /></div>
<br />
<br />I add the last digit of each decimal number together, just like you would on pen-and-paper addition. But what if it reaches over $09? It would be $0A! You know what this means? We have another lookup table. If you look at the table, it goes:
<br />
<br />...$8,$9,$10,$11,$12
<br />
<br />just like decimal numbers would. So the lower 4 bits of the result is what you store in the Final-Result-Ones-Digit. The result will be the 5 in 65535. Then you shift the high 4 bits over, and you add that to the next column of numbers. It's just like pen-and-paper addition. Do you understand? What do you think? I know there are alot of unneccisarry things in the routine, and I'll fix them. If you spot something that's totally unnecissary, I'm pretty sure I already know. I'll fix it later, I just put that up for now to show you the idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 06, 2006 6:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hum... I like your idea! It uses some of the ideas from my routine (jumping from $9 to $10) but takes some shortcuts, like the "pre-convertion" where you take the values from tables. You work on a byte-by-byte basis instead of bit-by-bit. Very interesting.
<br />
<br />I haven't tried the code yet, as it's not compatible with the assembler I use, so I'll have to change it a little, but I will try it soon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Sep 06, 2006 8:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a very clever idea you got. Of course it isn't perfect, but the algorithm sound very good.
<br />I think the only problem is doing the adition in decimal manually at the end. This doesn't seem very optimized, but is seems like there isn't really much alternate way here, since your method relies on the componant of the hex numbers in decimal to be added. At least this is a very interesting idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Sep 06, 2006 9:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hum... I think I have an idea to improve that algorithm... I'm thinking of a way to arrange the tables that might improve the speed of the addition at the end. I don't really know if I have something, but I might. I'll try it later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Sep 06, 2006 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I'm glad you all like it, or think it's interesting! I am proud of it, but the idea is so simple. I think I'm going to go to the next level (In BinToDec routines..) and come up with a DecToBin routine. I don't know if anyone has really thought about this, or has a need. But I do. I am going to make a NES program that will make my square root table for me for my raycaster. I know the logic behind finding the square root of a number. A perfect square is much easier than an unwhole square root. It involves long divisions, and multiplications of unwhole numbers. Actually, the equation is:
<br />
<br />SqRt = ((N/G) + G)/2 = G loop 5
<br />
<br />SqRt - Square root
<br />N - Number
<br />G - Guess
<br />loop 5 - do equation 5 times.
<br />
<br />The last part is the always differing part. It depends on what the guess is. You literally guess what the square root is, though. You guess something like 5 if you're finding the square root of 30. You do one loop, and you use the result as the next guess. It really works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 06, 2006 3:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Hum... I like your idea! It uses some of the ideas from my routine (jumping from $9 to $10) but takes some shortcuts, like the "pre-convertion" where you take the values from tables. You work on a byte-by-byte basis instead of bit-by-bit. Very interesting.</div>
<br />But is it worth the extra ROM space vs. working bit-by-bit, when bit-by-bit can finish a 5-digit (16-bit) number in 700 cycles?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Sep 06, 2006 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But is it worth the extra ROM space vs. working bit-by-bit, when bit-by-bit can finish a 5-digit (16-bit) number in 700 cycles?</div>
<br />
<br />Would that be a typo? Do you mean byte-by-byte?
<br />
<br />I think that it really depends on alot of things: If you care how big routines are, what kind of game you are making, how fast your game needs things to be. This was just recently discussed in the "Bit Reversing" thread. I took your side, and it came across to me that you should not worry about code size, you should worry about code speed, and game data size. By game data, I mean like levels, and music, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Sep 06, 2006 7:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But is it worth the extra ROM space vs. working bit-by-bit, when bit-by-bit can finish a 5-digit (16-bit) number in 700 cycles?</div><br />Would that be a typo? Do you mean byte-by-byte?</div>
<br />No, bit-by-bit. <a href="http://nesdevwiki.ath.cx/index.php/16-bit_BCD" class="postlink">My binary to decimal subroutine</a> runs through a tight loop 15 times to generate four BCD digits, and then it uses the remainder as the least significant digit. In fact, the same algorithm implemented in C on the ARM7TDMI CPU of the Game Boy Advance (which has a hardware multiplier but no hardware divider) is second only to reciprocal multiplication in speed.
<br />
<br />Another thing: Is a manually unrolled loop worth the loss in maintainability?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Sep 06, 2006 9:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh sorry, I didn't catch that "vs." in there. Now it all makes sense, and I see how it's not a typo. Okay, as I've said before, I do not understand how your method works, because I never really use any of those expressions. I always just use plain old 6502. The only thing that I will use is like SomeVar+X, where X is whatever value you want. Otherwise, I won't use like C-esk expressions, because I do not understand them. 
<br />
<br />And I agree, you're routine is overall better, because it is way smaller, and is only slightly slower than mine. It depends if you have the space to spare. If you can spare it, and have absolutely no more than 600 cycles left in your NMI routine or something, than you should go with my routine. But if the case isn't that, it's probably better to stick with yours. But it's best to stick with one you understand. That's why <strong>I</strong> will stick with mine.
<br />
<br />Oh, and is my code really unmaintanable?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Sep 06, 2006 10:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Otherwise, I won't use like C-esk expressions, because I do not understand them. <br /></div>
<br />
<br />Keep the idea around for when it is needed, because it has it's place.  Like in my speech synth I had a hell of a time figuring out how to get my sample addresses into the DPCM register's format.  After manually padding the sample files I ended up using expressions which are fairly simple.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sample_addr_index:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.word &#40;voc00-$C000&#41;/$40<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.word &#40;voc01-$C000&#41;/$40<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.word &#40;voc02-$C000&#41;/$40<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.word &#40;voc03-$C000&#41;/$40<br /><br />sample_length_index:<br />&nbsp; &nbsp; &nbsp; &nbsp; .word &#40;voc01-voc00&#41;/16&nbsp; ; a<br />&nbsp; &nbsp; &nbsp; &nbsp; .word &#40;voc02-voc01&#41;/16&nbsp; ; ae<br />&nbsp; &nbsp; &nbsp; &nbsp; .word &#40;voc03-voc02&#41;/16&nbsp; ; aw<br />&nbsp; &nbsp; &nbsp; &nbsp; .word &#40;voc04-voc03&#41;/16&nbsp; ; ar<br /></div>
<br />
<br />BCD routine looks good, I always appreciate the fastest code.  Because I like there to do be room left for more stuff to do.  Is it free for anyone to use?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 07, 2006 5:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">BCD routine looks good, I always appreciate the fastest code.  Because I like there to do be room left for more stuff to do.  Is it free for anyone to use?</div>
<br />At least mine is (like zlib).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>