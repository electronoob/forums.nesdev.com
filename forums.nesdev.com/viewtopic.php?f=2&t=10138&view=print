<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Detecting screen (X,Y) location for the NES Zapper</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Detecting screen (X,Y) location for the NES Zapper</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10138">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10138</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WhoaMan</b> [ Mon Jun 03, 2013 2:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have been thinking about this off and on for a few years now and finally got around to testing it out, so far it seems to be working so I decided to see what others think about this method. What I am trying to do, is detect where on the screen (divided in to 16x16 pixel blocks for a grid of 16x15) the NES Zapper is aimed when the trigger is pulled. The major drawback about doing this how many frames it takes to do the detection. This method uses the second name table's attribute bytes to quickly display the test patterns. <br /><br />For my testing, I had my palette setup as follows:<br />$0f, $0f, $0f, $0f<br />$0f, $30, $30, $30<br />$0f, $30, $30, $30<br />$0f, $30, $30, $30<br />$0f, $30, $30, $30<br />$0f, $30, $30, $30<br />$0f, $30, $30, $30<br />$0f, $30, $30, $30<br /><br />I set the first name table ($2000) to a blank tile showing the background color and the second name table ($2800) to a blank tile showing the second color.<br /><br /><br />Main program loop:<br />check for trigger and update trigger flag (set if trigger pulled, unset otherwise)<br />ORA the Zapper's hit bit against previous stored value<br /><br />NMI:<br />check trigger flag, if set jump to zapper handler<br />otherwise, run normal NMI stuff<br /><br />Zapper Handler:<br />-- Phase 0, set Scroll to display second name table. disable background and sprites. set zapper X and Y variables to 0<br />-- Phase 1, check for phase 0 hit (to check for cheating). Write Phase 1 pattern shown below to second attribute table<br />-- Phase 2, check for phase 1 hit. if bit set, ora $08 against Zapper Y and save. Write Phase 2 pattern shown below to second attribute table<br />-- Phase 3, check for phase 2 hit. if bit set, ora $04 against Zapper Y and save. Write Phase 3 pattern shown below to second attribute table<br />-- Phase 4, check for phase 3 hit. if bit set, ora $02 against Zapper Y and save. Write Phase 4 pattern shown below to second attribute table<br />-- Phase 5, check for phase 4 hit. if bit set, ora $01 against Zapper Y and save. Write Phase 5 pattern shown below to second attribute table<br />-- Phase 6, check for phase 5 hit. if bit set, ora $08 against Zapper X and save. Write Phase 6 pattern shown below to second attribute table<br />-- Phase 7, check for phase 6 hit. if bit set, ora $04 against Zapper X and save. Write Phase 7 pattern shown below to second attribute table<br />-- Phase 8, check for phase 7 hit. if bit set, ora $02 against Zapper X and save. Write Phase 8 pattern shown below to second attribute table<br />-- Phase 9, check for phase 8 hit. if bit set, ora $01 against Zapper X and save. reset scroll to show first name table. clear phase counter and trigger flag<br /><br /><br /><strong>Setup and checking for cheating (Phases 0 and 1)</strong><br /><img src="http://content.thetechnickel.com/misc/zapper/phase-0.png" alt="Image" /><br /><br /><br /><strong>Detecting Y Location (Phases 1 thru 5)</strong><br /><img src="http://content.thetechnickel.com/misc/zapper/phase-1.png" alt="Image" /><br />---<br /><img src="http://content.thetechnickel.com/misc/zapper/phase-2.png" alt="Image" /><br />---<br /><img src="http://content.thetechnickel.com/misc/zapper/phase-3.png" alt="Image" /><br />---<br /><img src="http://content.thetechnickel.com/misc/zapper/phase-4.png" alt="Image" /><br /><br /><br /><strong>Detecting X Location (Phases 5 thru 9)</strong><br /><img src="http://content.thetechnickel.com/misc/zapper/phase-5.png" alt="Image" /><br />---<br /><img src="http://content.thetechnickel.com/misc/zapper/phase-6.png" alt="Image" /><br />---<br /><img src="http://content.thetechnickel.com/misc/zapper/phase-7.png" alt="Image" /><br />---<br /><img src="http://content.thetechnickel.com/misc/zapper/phase-8.png" alt="Image" /><br /><br />Anyway, I am curious to see what others think about this, if anyone has ideas for improvement, or if anyone things i should abandon this idea <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I hope to clean up and re-write my test code tonight, after doing so I will post it here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Mon Jun 03, 2013 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=8108" class="postlink">Zap Ruder</a> effectively does this already, though it makes use of cycle timing instead of binary searches.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 03, 2013 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Zap Ruder does the Y assuming 113.667 cycles per line. I could never get it doing X reliably; it works on emulators, but on NES + PowerPak, the onset of light detection is delayed by up to about 80 pixels (15 microseconds) from where the Zapper is pointed. I imagine Operation Wolf does the same thing with its white Y detection frame before it shows a black screen with a white &quot;cloud&quot; that scans across for eight frames. (<a href="https://www.youtube.com/watch?v=BIJ5fCyQkeE" class="postlink">Video of Operation Wolf</a>)<br /><br />If you want to use vertical columns to detect X, a 4-frame search for the X position would need to use <a href="https://en.wikipedia.org/wiki/Gray_code" class="postlink">Frank Gray's reflected binary code</a>, not plain binary code as you demonstrate, because the Zapper samples an area rather than a single pixel and might return false results if one frame is black on the left and white on the right and another frame is white on the left and black on the right in the same position. This happens all across the screen in binary code, but any given position will have only one transition in reflected binary. A reflected binary sequence would look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;...<br />2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%<br />3 ................%%%%%%%%%%%%%%%%<br />4 ........%%%%%%%%%%%%%%%%........<br />5 ....%%%%%%%%........%%%%%%%%....<br />6 ..%%%%....%%%%....%%%%....%%%%..<br /></div><br />The six frames are used as follows:<br /><ol style="list-style-type: decimal"><li>Player pulled the trigger during this frame. Check for cheating at the <em>end</em> of the following vblank; you can use the negative edge on sprite 0 to time this. If light is detected at the end of vblank, the player either is cheating or (because the photodiode bit returns 1 for no light) has unplugged the Zapper; ZapPing treats this as an unplugged Zapper and falls back to controller mode. </li><li>Brighten the whole screen and use timed code to search linearly for the Y coordinate. </li><li>Narrow to 128px </li><li>Narrow to 64px </li><li>Narrow to 32px </li><li>Narrow to 16px </li></ol><br />You wouldn't be able to get a continuous X position fix because of all the flicker.<br /><br />Another tip: The NES Zapper supports both burst and continuous fire mode. Pull the trigger all the way for the normal burst mode (button active for about 5 frames); pull it only halfway for continuous fire. The &quot;Axe&quot; activity in Zap Ruder plays different timbres for burst and continuous fire.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Jun 03, 2013 4:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're already using timed code to check the Y position, why not sample the zapper twice per scanline during that check? (Once in the middle and once at the end) This would eliminate an entire frame of X-scanning.<br /><br />You may be able to sample 4 times too, but I haven't run the numbers to see if the CPU's quick enough to do that.<br /><br />Edit: This entirely depends on whether the zapper requires a direct shot with the electron beam, or if it can pick up the glow of the phosphors, and this is information I don't know. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Edit: Nevermind! I'm dumb. The reason you don't do this is because the light sensor doesn't react immediately when it detects something.<br /><br />Edit: So why not show some kind of gun calibration screen before the game starts? Tell the user to aim at the center of the screen, and then show a sweeping bar from left to right, and use that to calibrate the delay between the screen and the zapper's reaction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 03, 2013 5:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A Super Scope style calibration would help if the delay were constant, like audio or video lag on an HDTV. But fifteen seconds with my attempt to read X in Zap Ruder will show you that the delay changes randomly from frame to frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Jun 03, 2013 7:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wrote some very simple PIC code to shine a white LED at the zapper photodiode, and hooked up an oscilloscope to the demodulator's analog and digital (hysteretic) outputs.<br /><br />There is a tremendous amount of noise in the signal, but it's a function of the brightness and duration. A very bright signal will produce a very reliable phase lock, even without repetition, but a dimmer signal allows phase noise. (Regardless of whether the input was repetitive or not, the digital output went true approximately 4÷(16kHz) later, and remained high even without reinforcement for ~10 scanlines). The 16kHz frequency filter is pretty lousy; I got reasonable results at 4 and 64kHz too. I'm pretty confident a zapper could be used with an LCD TV, but with reduced range, and the code would have to compensate for frame lag.<br /><br />If people want oscilloscope traces, I can post some.<br /><br />(I actually did this months ago but got distracted before I wrote it up)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Jun 04, 2013 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A while back I thought of an (totally untested) hardware hack to read the Zapper in one frame.  The Zapper control bits are present on the expansion port.  So in theory you could put an MCU on an expansion board, with a timer that is reset by the /NMI signal (which is also on the exp port).  Then it's just a matter of converting the timer count into X/Y values.<br /><br />Though I suppose one could also use the controller port instead of the expansion port, and pass the Zapper through the MCU board.  You'd have to strobe/poll the port at the same time every frame.  So the connector would be easier to get, but at the cost of some jitter from the 6502's normal interrupt latency (assuming you just polled it in NMI like a normal controller).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Jun 04, 2013 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Detecting screen (X,Y) location for the NES Zapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem is that the repurposed IR demodulator inside the Zapper imposes a whole scanline of noise, so it's basically impossible to get an X coordinate out of it.<br /><br />I guess I should actually go ahead and set up a simple input-&gt;output timing test.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>