<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=9942" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-09-29T17:13:39-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=9942</id>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-09-29T17:13:39-07:00</updated>
<published>2013-09-29T17:13:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=118813#p118813</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=118813#p118813"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=118813#p118813"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />I've been getting into the AVR series lately and it's a joy to use. gcc-based toolchain that supports C and C++, USB-based programmer that can literally be had for $5 on eBay, including shipping to the US, and can program chips with just a few jumpers connected to the cable, $2 chips that have an 8 MHz internal oscillator (zero support components), and most instructions taking one clock cycle (even add immediate), some two (set an I/O bit, branch). Highly recommended.<br /></div><br /><br />I loved those AVRs too, but unfortunately they are not pretty popular here in the nation I lived. In other story, I got the PPU working, right from the OAM to the palette RAM and such. I could even make an animation using a PIC microcontroller. Since this is captured using a USB capture device (NTSC signal) I will dig out the pictures and paste it here later. <br /><br />The harder part is to connect this with a sound chip like the GI AY-3-8910 clone (KC89C72) due to the sharing of the data bus with the PPU. If it's connected with the NES CPU, it wouldn't be too difficult due to the integrated sound generators.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Sun Sep 29, 2013 5:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-09-11T16:27:24-07:00</updated>
<published>2013-09-11T16:27:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=117932#p117932</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=117932#p117932"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=117932#p117932"><![CDATA[
<div class="quotetitle">The_YongGrand wrote:</div><div class="quotecontent"><br />Actually, prior to all that idea, someone from Japan has made up a mini game using an AVR and the official NES' PPU, RP2C02, with another commonly used arcade sound chip: <a href="http://www.geocities.jp/r8ctiny/avrrp2/avrrp2.html" class="postlink">http://www.geocities.jp/r8ctiny/avrrp2/avrrp2.html</a><br /></div><br />I've been getting into the AVR series lately and it's a joy to use. gcc-based toolchain that supports C and C++, USB-based programmer that can literally be had for $5 on eBay, including shipping to the US, and can program chips with just a few jumpers connected to the cable, $2 chips that have an 8 MHz internal oscillator (zero support components), and most instructions taking one clock cycle (even add immediate), some two (set an I/O bit, branch). Highly recommended.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Sep 11, 2013 4:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qwertymodo]]></name></author>
<updated>2013-09-11T14:29:26-07:00</updated>
<published>2013-09-11T14:29:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=117925#p117925</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=117925#p117925"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=117925#p117925"><![CDATA[
The <a href="http://www.ti.com/product/sn74lvc1gx04" class="postlink">74LVC1GX04</a> is specifically designed for driving a crystal oscillator.  I built a small PCB for it, and it seems to work great, though I haven't had a chance to hook it up to an oscilloscope yet to see how clean the clock signal is or what the duty cycle is.  You can <a href="http://oshpark.com/shared_projects/k9A82WEZ" class="postlink">order the PCB from OSHPark</a> if you're interested.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5348">qwertymodo</a> — Wed Sep 11, 2013 2:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-08-12T09:19:17-07:00</updated>
<published>2013-08-12T09:19:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=116408#p116408</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=116408#p116408"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=116408#p116408"><![CDATA[
Due to work and stuff, I did manage to find some time to experiment a bit with the PPU clone I have, UA6528. With the PIC18F4221, I built the circuit, connecting the /CS, D0-D7 and A0-A2 from the PPU to the microcontroller to test the output. I've also verified the output with an oscilloscope, NTSC signals are correct from the &quot;Video Out&quot; pin.<br /><br />Using the oscillator-in-can (4-pin) ones (21.42MHz) and with the NTSC version of the PPU, I managed to coax it to display an entire background of a red, green or blue (intensify one color only) through one of the PPU registers. I got those hints from the &quot;NerdyNights&quot; first app tutorial (thanks to the author). <br /><br />I have not connected the memory yet (that is the hardest part, to be honest) and I may be putting these up slowly. I will put some pictures of the PPU output captured from my TV framegrabber, since I do not have an accessible CRT nearby my table. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Actually, prior to all that idea, someone from Japan has made up a mini game using an AVR and the official NES' PPU, RP2C02, with another commonly used arcade sound chip: <a href="http://www.geocities.jp/r8ctiny/avrrp2/avrrp2.html" class="postlink">http://www.geocities.jp/r8ctiny/avrrp2/avrrp2.html</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Mon Aug 12, 2013 9:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-05-23T04:48:00-07:00</updated>
<published>2013-05-23T04:48:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112412#p112412</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112412#p112412"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112412#p112412"><![CDATA[
<div class="quotetitle">TmEE wrote:</div><div class="quotecontent"><br />I have usually had no problems getting Pierce Oscillators work nicely. NAND, NOR or NOT gate, pair of capacitors, 1Mohm+ resistor and maybe a 1K resistor. For 3rd overtone crystals things get a bit more complex as you need a HPF to prevent fundamental oscillation. I had tons of &quot;fun&quot; getting some 33.8688MHz crystals work in 3rd overtone mode...<br /><br /><!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Pierce_oscillator">http://en.wikipedia.org/wiki/Pierce_oscillator</a><!-- m --><br /></div><br /><br />Thanks for the reply. While waiting for the oscillators to come, I experimented with these with the help of an oscilloscope. The thing is, it worked, but I had troubles getting it at 50% duty cycle as it hovers around 60% at the least.<br /><br />I do not know the exact duty cycle required for the these PPUs nut I'll keep reading and checking the documents in NesDev. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Thu May 23, 2013 4:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2013-05-19T19:20:16-07:00</updated>
<published>2013-05-19T19:20:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112307#p112307</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112307#p112307"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112307#p112307"><![CDATA[
I have usually had no problems getting Pierce Oscillators work nicely. NAND, NOR or NOT gate, pair of capacitors, 1Mohm+ resistor and maybe a 1K resistor. For 3rd overtone crystals things get a bit more complex as you need a HPF to prevent fundamental oscillation. I had tons of &quot;fun&quot; getting some 33.8688MHz crystals work in 3rd overtone mode...<br /><br /><!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Pierce_oscillator">http://en.wikipedia.org/wiki/Pierce_oscillator</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Sun May 19, 2013 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-05-11T19:10:42-07:00</updated>
<published>2013-05-11T19:10:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112045#p112045</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112045#p112045"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=112045#p112045"><![CDATA[
Hello,<br /><br />Sorry for the late reply. I will get these oscillator packages, and getting myself the 21.47MHz and the 26.60MHz as well. Had a very difficult time to create my own so the oscillators will help to run these chips. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Sat May 11, 2013 7:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-05-06T13:57:55-07:00</updated>
<published>2013-05-06T13:57:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111848#p111848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111848#p111848"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111848#p111848"><![CDATA[
The Art of Electronics suggests the TTL-output oscillators in a can, due to issues getting discrete oscillators to run reliably.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon May 06, 2013 1:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-05-06T12:25:42-07:00</updated>
<published>2013-05-06T12:25:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111844#p111844</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111844#p111844"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111844#p111844"><![CDATA[
I have never actually seen a comprehensive list of &quot;here's all the ways you could build a quartz crystal driver, and here's when you'd rather one vs another&quot;, but then again, I haven't looked at a copy of Art of Electronics in quite a while.<br /><br />Sorry I'm only providing you with a &quot;dunno&quot;.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon May 06, 2013 12:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-05-06T02:08:51-07:00</updated>
<published>2013-05-06T02:08:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111830#p111830</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111830#p111830"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=111830#p111830"><![CDATA[
Sorry for bumping up the post. My interfacing attempt has been very slow due to work and stuff.<br /><br />I got these 26.601712MHz crystals finally from ebay, and unfortunately it's not a direct standalone oscillator, so I have to couple this crystal with another few components to make it complete.<br /><br />Would using the chip inverter (not gate) and a few caps generate the intended 26.601712MHz clock? All I know that I can't use the CD4069 because it's too slow.<br /><br />Or, should I use the transistor ones for better stability?<br /><br />Love to hear the opinions. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Mon May 06, 2013 2:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-04-13T22:03:43-07:00</updated>
<published>2013-04-13T22:03:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110947#p110947</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110947#p110947"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110947#p110947"><![CDATA[
Whoa, thanks. Real tough job. But I'll still do it, the tougher it is, the better it is! <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I'd try to get a cheap adjustable oscillator pack from ebay which I would tune it to 26.6MHz first and look in the oscilloscope screen.<br /><br />Also, I found a couple of the 26.60MHz crystals around in Taobao, prolly will get some of these and make an oscillator from the inverter chip. I still need to ask them about the specifications first. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Sat Apr 13, 2013 10:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-04-13T10:58:44-07:00</updated>
<published>2013-04-13T10:58:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110933#p110933</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110933#p110933"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110933#p110933"><![CDATA[
For NTSC, you won't be able to find 6× crystals either. You're going to have to build or buy a PLL or some other frequency multiplier regardless of the PPU you use.<br /><br />Here's a non-PLL solution using a 4x clock source (I know that crystal frequency is available). It divides by 2, then multiplies by three:1½×.png<br />If you change the frequency you drive it at (e.g. switching to NTSC), you'll need to change the LC. (2π√(L·C) = desired output frequency, and that needs to be an odd multiple of the input frequency)<br />You'll probably want to put a trim capacitor or trimmable inductor. A PLL should be less fiddly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Apr 13, 2013 10:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2013-04-13T10:15:52-07:00</updated>
<published>2013-04-13T10:15:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110931#p110931</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110931#p110931"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110931#p110931"><![CDATA[
Get a PLL of some sort and use on to multiply 4.433619MHz signal to 26.601712MHz. Will also work for making 3.579545MHz to 21.47727MHz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Sat Apr 13, 2013 10:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[The_YongGrand]]></name></author>
<updated>2013-04-13T07:06:50-07:00</updated>
<published>2013-04-13T07:06:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110924#p110924</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110924#p110924"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110924#p110924"><![CDATA[
Hmm. Ugh, I can't seem to find any exact 26.6MHz oscillators inside. I guess I should get the NTSC variant of the PPU, as the frequency for the oscillator is much more available at my place. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5918">The_YongGrand</a> — Sat Apr 13, 2013 7:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-04-13T06:35:31-07:00</updated>
<published>2013-04-13T06:35:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110923#p110923</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110923#p110923"/>
<title type="html"><![CDATA[Re: Interfacing to NES PPU using a microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9942&amp;p=110923#p110923"><![CDATA[
80/3 = 26.6667 MHz is about 1 part in 400 off from the true 26.6017. That'll work great for black and white. But to avoid rainbowing at the right side, you'll need the difference in subcarrier phase to be less than (guessing) 1/20 of a cycle by the right side. Now phase is the integral of frequency, and over the 52 microseconds of each scanline, there are about 230 cycles of the subcarrier. This means the frequency difference needs to be less than about 1 part in 5000.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Apr 13, 2013 6:35 am</p><hr />
]]></content>
</entry>
</feed>