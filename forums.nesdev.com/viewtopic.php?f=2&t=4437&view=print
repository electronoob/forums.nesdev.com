<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Thoughts on doing a platformer...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Thoughts on doing a platformer...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4437">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4437</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sivak</b> [ Tue Oct 07, 2008 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Thoughts on doing a platformer...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is all still in the thought process, but this is what I was thinking for doing such a game.
<br />
<br />I want to have a bunch of rooms that are connected, but no scrolling is involved.  If you can exit the edges you are in a new room.
<br />
<br />The rooms themselves, I was thinking of having definitions for each one.  Some examples would include:
<br />-The obvious one, an array of the 16x16 tiles that make up the room.
<br />-The tiles themselves would have some definitions like what type they are (floor, passable, spike, lemon), what attribute #, and what four 8x8 tiles are needed to draw it.
<br />
<br />My thoughts for doing something like this would be like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">gameRoomArray:<br />.dw room_01, room_02, ...<br /><br />room_01:<br />.dw SomeTileNameToLoadIntoCHRRAM ;Something here to specify if some new graphic tiles may come into play to draw the room<br />.dw giveControl&nbsp; ;Events<br />.db $01,$01,$02,$03,$02,...&nbsp; ;The tiles that draw the room<br /><br />room_02:<br />.dw SomeTileNameToLoadIntoCHRRAM<br />.dw bossEntrance&nbsp; ;Events<br />.dw giveControl<br />.db $01,$01,$02,$03,$02,...&nbsp; ;The tiles that draw the room<br /><br />tileSetArray:&nbsp; ;Various areas of the game may have different graphics and thus a different tileset...<br />.dw tile00Definitions, tile01Definitions, ...<br /><br />tile00Definitions:<br />.db $00 ;Passable<br />.db $00 ;Attribute 0<br />.db $00,$01,$02,$03 ;The four tiles to draw it.&nbsp; Top left, top right, bott left, bott right...<br /><br />tile01Definitions:<br />.db $01 ;Solid<br />.db $01 ;Attribute 1<br />.db $10,$11,$12,$13 ;The four tiles<br /></div>
<br />
<br />-Things like events that would occur in the room, if applicable.  After drawing the BG, it would check for if it's a special room like a boss room.  The boss may have events for its entrance and such.  If no event takes place, then control is simply given back to the player.
<br />
<br />Anyway, this is my proposed plan.  I just wondered if what I'm thinking is reasonable or if there's anything that looks seriously wrong with it.
<br />
<br />Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Oct 07, 2008 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I want to have a bunch of rooms that are connected, but no scrolling is involved. If you can exit the edges you are in a new room.<br /></div><br />That's exactly how the game I'm developping does it. I have a 4 bytes header that specify the numbers of screen to all four direction, 0 means no screen is connected. This allow non-linear levels as well.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-Things like events that would occur in the room, if applicable. After drawing the BG, it would check for if it's a special room like a boss room. The boss may have events for its entrance and such. If no event takes place, then control is simply given back to the player. </div>
<br />I've taken the path to not do any differences for bosses rooms (exept that the player can't go back because no screen is connected), and the boss' AI programm will handle everything needed. This don't mean my path is the correct one tough, as there is no correct or uncorrect path.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Oct 07, 2008 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Thoughts on doing a platformer...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That seems like a reasonable plan.
<br />
<br />Anyway, unlike modern processors the 6502 prefers structures-of-arrays rather to arrays-of-structures. For the most part at least.
<br />This means that you'd store those meta-tile definitions (for instance) as separate arrays for the collision type, color attributes, component tiles, etc. Even to the point of splitting up 16-bit fields into separate arrays for the high and low bytes. That way you can index the fields of up to 256 meta-tiles directly without 16-bit pointer arithmetic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Oct 07, 2008 12:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, but it's often more annoying to do so than to just shift the index a few times right.
<br />
<br />Also I use a byte to say the attributes of a 4x4 block and another to say if the blocks are passable or not (instead of using a whole byte per 2x2 metatiles which seems a waste)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Oct 07, 2008 1:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Yes, but it's often more annoying to do so than to just shift the index a few times right.</div>If the whole structure is smaller than 256-byte bytes then that's often the right choice, especially if you can premultiply the indices. But with something like meta-tiles you'd typically need to set up and deal with zeropage pointers, something that is both slow and inflexible.<br /><br />I have this cute little tool to interleave structures. But there's no denying it gets annoying at times.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also I use a byte to say the attributes of a 4x4 block and another to say if the blocks are passable or not (instead of using a whole byte per 2x2 metatiles which seems a waste)</div>And you're worrying about the difficulty of dealing with SoA swizzling. Picking out the right the right two bits out of the array for a specific meta-tile would be beyond messy.
<br />Personally I'd pack those attributes into another status field instead if I was short on space. But then I'd probably find easier ways to squeeze out bytes first, say by compressing the map ;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Oct 07, 2008 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, interleaved data is definitely the way to store things, I'd say. Tokumaru once said that it's not a good idea to design things for ease of readability by the programmer, but by the computer, which I completely agree with. Interleaved data allows for the program to read it quickly and easily with using the same amount of data, just in separate arrays. Though it is kind of a headache to read if you need to change something. That's why you have conversion apps, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Oct 07, 2008 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius is right, I'm definitely one that prefers to work with "structures of arrays"/interleaved data. This is entirely up to you though. Once you start coding the routines, you'll see that the data is a bit harder to handle when you access it through calculated pointers and shifted indexes. And of course, this is slower too.
<br />
<br />The only situation I can see someone favoring this design is when they lack supporting applications to convert the data. Since the data has to be written by hand, the person who's doing it will want maximum readability.
<br />
<br />Your design seems simple enough, so you might get away with it. Since there is no scrolling, all the heavy metatile access will happen when the player enters a new room, and I don't think anyone will notice a couple of blank frames while the program is rendering it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sivak</b> [ Tue Oct 07, 2008 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I don't think anyone will notice a couple of blank frames while the program is rendering it.</div>
<br />
<br />Yeah, I was thinking of having maybe a 6 frame delay or so to get in the appropriate CHR RAM, draw up the BG and write the attributes.  I guess I'll see if that's enough for the game.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Oct 07, 2008 8:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure how much delay is acceptable when switching screens without annoying the player. 6 frames sounds pretty decent.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMF54123</b> [ Tue Oct 07, 2008 11:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Keep in mind the NES screen is 256x240, so your room dimensions will actually be 16x15. Assuming uncompressed room data, that's an extra 16 bytes to do whatever with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 08, 2008 7:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMF54123 wrote:</div><div class="quotecontent">Keep in mind the NES screen is 256x240, so your room dimensions will actually be 16x15.</div>
<br />And a status bar will make it even smaller. Zelda uses 16x11 cells per screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Oct 08, 2008 9:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />6 frames definitely sounds fine and unnoticeable. I'll have a similar delay in my game when changing rooms, though each room is a collection of screens.
<br />
<br />About screen size, it's good to keep this in mind, but if you're working on a larger room size, it saves you time to not deal with 256x240 screens, but 256x256 screens. In the non scrolling case though, you would want to use the 16 bytes for something else.
<br />
<br />Oh, and you'll also have SUCH AN EASIER TIME programming everything if it doesn't involve scrolling, as you can have everything active on one screen and you can keep a copy of the screen in RAM and not have to worry about checking if things aren't on screen, and you can also use 8-bit coordinates to keep track of everything instead of 16-bit. Just thought I'd mention.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Oct 08, 2008 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I've never see a programm to split arrays into multiple arrays. I agree it could be good to split arrays if it really increase performance. A 3-byte saving or a 3 clcok cycles per frame saving is probably not worth the trouble, tough.
<br />Also you'd want to find a average solution. Making the programm extremely optimized is good, but then it will be a headache to change whathever after the initial write of the programm, and that's NOT a good thing AT ALL (I'm experiencing it).
<br />Writing unoptimized and soppy code in the only goal to make it 100% structured, flexible and easily modifiable is a bad idea on a console with low CPU power as it could take much too long to perform things.
<br />
<br />In fact when I blank the screen or I often add an additional delay because it looks stupid if there is only a few frames of delay. It looks unnatural and I dislike it. It makes the game look like a pirate chineese which is not a good thing. A delay of 0.5 sec to 1 sec is good make the game look professional and fluid. A very long delay would be terrible of course.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh, and you'll also have SUCH AN EASIER TIME programming everything if it doesn't involve scrolling, as you can have everything active on one screen and you can keep a copy of the screen in RAM and not have to worry about checking if things aren't on screen, and you can also use 8-bit coordinates to keep track of everything instead of 16-bit. Just thought I'd mention.</div>
<br />Yes, tough the 8-bit is a BAD IDEA. I just come from out of 3 weeks of total nighmare converting my whole game engine to use 16-bit coordinates and I had a very hard time doing that (considering the number of times I had routines whenre I pass a coordinate in A and the other in Y or something like that was not possible any longer).
<br />I did that because it makes movement more fluid to works with more bits (I use the middle 8-bits for screen position, lower 4-bits for fine position, and reserve the upper 4 for further scrolling). Also I'll be able to port it to the C64 which use 9-bits for horizontal sprite positionning. 
<br />I'll warn anyone : DO NEVER only use 8-bits for coordinates, you're going to regret that. I guess I just had to mention that.
<br />
<br />I use maps of 8x6 blocks (a block is 32x32 pixels), but I'll have to change all maps to make them 10x5 if I port the game to the C64 because of different resolution. The only way to keep them 8x6 would be to place the status bar on the right which would look terrible (especially when scrolling).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Oct 08, 2008 12:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh yeah, sorry, I was forgetting precision bits. In my game, I'll also be using 24-bit coords: 8 High (defines which screen it's on), 8 Low (defines pixel it's on) 8 precision. Precision bits are essential in a platformer, because without them, you can only move something at an integer number of pixels a frame. If you use precision bits, you can move like 1.5 pixels a frame, which really makes a huge difference. It's also important for things like gravity and acceleration/deceleration.
<br />
<br />But you don't have to use AS MANY bits for coords was really what I meant to say.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Wed Oct 08, 2008 1:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My advice is to go for 8-bit precision if at all possible. Not having to bother with 16-bit coordinates everywhere makes so many things so much easier that it's not even funny. A fractional fixed-point byte beneath the screen coordinates occasionally comes in handy as well, but there's no need to burden all objects and algorithms with it when only some of them care. Besides, you can often fake sub-pixel movements in other ways. Personally I like to keep a set of "frame counter mod n" variables handy for such things.
<br />
<br />Granted, sometimes 8-bits simply isn't enough. With the clipped display being 248 pixels wide already there simply isn't enough wiggle room to smoothly move 16-pixel objects out of screen easily, and that's surely necessary for horizontally scrolling  games even if you might get away without it in single-screen designs. Still, even scrolling games rarely need to deal with off-screen pixels. Not by more than a couple of tiles anyway. So instead of introducing a bunch of extra precision on top of the normal eight bits it's often enough to simply add a ninth bit, and keep the former LSB together with the fixed-point fraction in another byte.
<br />That way a single byte is still enough for most tasks, like collision detection or fast-moving bullets, even if it cannot address odd pixels. And putting together a real pixel position for, say, the sprite position is only a matter of a single shift. For a scrolling game the question still remains whether to keep the coordinates screen-relative, or have them be world-relative and let the nine bits wrap. Either way is potentially problematic and the best choice likely depends on the genre and how you interact with the background map.
<br />
<br />By the way, if the benefits of a SoA layout is still somewhat unclear then consider how you'd deal with a list of game actors and their properties (assuming that the array is larger than 256 bytes, but that ought to be true for most any game.) How would you access the property fields to write general game logic? How do you move from one actor to the next? What about following a pointer? And what happens if you need to work with two actors simultaneously?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>