<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - tcc816 math optimization</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">tcc816 math optimization</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=9340">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=9340</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 3:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tcc816 is still one of the very few and the best free 65816 C compilers available, but it is certainly far from being perfect. One of things that make quite some trouble is that its math routines are really slow. It seems that they were done just to work somehow, without care for performance at all. I'm not too good in 65816 code, so I can improve it only moderately, but I think other people may suggest some routines and optimizations. Would be nice to join efforts to improve what we have for all snes-sdk or PVSnesLib users benefit.<br /><br /><a href="http://code.google.com/p/pvsneslib/source/browse/trunk/pvsneslib/source/libtcc.asm" class="postlink">Take a look at the existing code</a><br /><br />Obvious improvements are to utilize 16 bit math where possible instead of 8 bit, and to unroll all loops, as few extra K of math code won't do big difference for SNES anyway. I'm sure there are more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Sep 24, 2012 4:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For 16/8 division &amp; modulo and 8*8 multiplication (and maybe 16*8 multiplication?) there's hardware support on the SNES that could be used. See e.g. <a href="http://code.google.com/p/neo-myth-menu/source/browse/trunk/SNES/NeoMythMenu/hw_math.asm" class="postlink">this code</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 4:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know, but the docs says it won't work in Mode7, and Mode7 is one of the most interesting and distinctive SNES features, as well as one that needs fast math.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Sep 24, 2012 4:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm. Which doc is that?<br /><br />Anyway, there's also the mode7 coefficient matrix math registers ($211B-$2120). And if you really need to do a lot of 2D or 3D coordinate calculation I would suggest looking at the <a href="http://users.tpg.com.au/advlink/dsp/dsp1.html" class="postlink">DSP-1</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 5:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My mistake, it is related exactly to the matrix registers and the result that could be read from $2134-36. So at least part of the math code could be done using the HW resources. Still would be nice to improve remaing routines.<br /><br />I know about DSP1, but I need to improve the compiled code performance itself, not a particular case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Sep 24, 2012 5:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Simple improvement for tcc__shldi3 (saves 5 cycles/iteration):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">tcc__shldi3:<br />lda.b 6,s ; hi word<br />sta.b tcc__r1<br />lda.b 8,s ; shift count<br />beq +<br />tax<br />lda.b 4,s ; low word<br />- asl a<br />rol.b tcc__r1<br />dex<br />bne -<br />sta.b tcc__r0<br />rtl<br />+<br />lda.b 4,s ; low word<br />sta.b tcc__r0<br />&nbsp;rtl<br /></div><br /><br />The same change could be applied for SHR.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 6:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. However, it seems that this routine never gets called - not in Classic Kong, at least (~8000 lines of C code). Or am I missing something?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Sep 24, 2012 6:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tcc-816 optimizes some shits with immediate shift counts IIRC (unrolling).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I checked how many times these math routines are called in Classic Kong, and results are unexpected (by me).<br /><br />tcc__mul, tcc__div are called about 10 times.<br />tcc__udiv is called a bit more, still not much.<br /><br />Anything else is never called. I have some modulo operations in the game, but none of routines that supposedly do modulo operation are called.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Sep 24, 2012 10:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If your modulo operations are &quot;% some_immediate_power_of_two&quot; then they will be (or should be) optimized to an AND operation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 10:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />They are immediate not power of two (3, 6, 10, 100, 1000, 10000 etc), also variables. I don't rely on compiler and always use &amp; or shifts in case of power of two values math.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Sep 24, 2012 10:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shiru, doesn't tcc816 support generation of assembly listing? That's an easy way to find out how it implements those divisions/remainders.<br /><br /><div class="quotetitle">mic_ wrote:</div><div class="quotecontent">tcc-816 optimizes some <strong>shits </strong>with immediate shift counts IIRC (unrolling).</div><br />Freudian slip?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Sep 24, 2012 10:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wouldn't say it is easy. It generates assembly mess without any tabs and without C source in comments. Also, the code it generates is huge and unoptimal. Doable, of course, I just don't think it is that important right now how exactly it does (probably calls the division routine), I just didn't expect that most of the math routines are never used in a large program and that basically just three of them needs to be optimized.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Sep 24, 2012 11:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@thefox: Could be <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Probably just work-induced afternoon coma though.<br /><br />Here's what tcc-816 gives me:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void opt_test3(unsigned int arg)<br />{<br />&nbsp; &nbsp;int j;<br /><br />&nbsp; &nbsp;j /= 3;<br />&nbsp; &nbsp;j = arg % 10;<br />}<br /></div><br />Compiles to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">opt_test3:<br />.ifgr __opt_test3_locals 0<br />tsa<br />sec<br />sbc #__opt_test3_locals<br />tas<br />.endif<br />lda -2 + __opt_test3_locals + 1,s<br />sta.b tcc__r0<br />tax<br />lda.w #3<br />jsr.l tcc__div&nbsp; &nbsp;; &lt;-- calls tcc_div<br />lda.b tcc__r9<br />sta -2 + __opt_test3_locals + 1,s<br />lda 3 + __opt_test3_locals + 1,s<br />sta.b tcc__r0<br />tax<br />lda.w #10<br />jsr.l tcc__udiv&nbsp; &nbsp;; &lt;-- calls tcc_udiv<br />stx.b tcc__r0<br />txa<br />sta -2 + __opt_test3_locals + 1,s<br />.ifgr __opt_test3_locals 0<br />tsa<br />clc<br />adc #__opt_test3_locals<br />tas<br />.endif<br />rtl<br /></div><br /><br />And this<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void opt_test2(unsigned int arg)<br />{<br />&nbsp; &nbsp;int j;<br /><br />&nbsp; &nbsp;j *= 7;<br />&nbsp; &nbsp;j /= 4;<br />&nbsp; &nbsp;j = arg % 16;<br />}<br /></div><br />Compiles to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">opt_test2:<br />.ifgr __opt_test2_locals 0<br />tsa<br />sec<br />sbc #__opt_test2_locals<br />tas<br />.endif<br />lda -2 + __opt_test2_locals + 1,s<br />sta.b tcc__r0<br />asl a<br />asl a<br />asl a<br />sec<br />sbc.b tcc__r0&nbsp; &nbsp; &nbsp;; &lt;-- strength reduction: j*7 converted to (j&lt;&lt;3)-j<br />sta -2 + __opt_test2_locals + 1,s<br />sta.b tcc__r0<br />cmp #$8000<br />ror tcc__r0<br />cmp #$8000<br />ror tcc__r0&nbsp; &nbsp;; &lt;-- strength reduction: j/4 converted to j&gt;&gt;2<br />lda.b tcc__r0<br />sta -2 + __opt_test2_locals + 1,s<br />lda 3 + __opt_test2_locals + 1,s<br />and #15&nbsp; &nbsp;; &lt;-- strength reduction: arg%16 converted to arg&amp;15<br />sta.b tcc__r0<br />sta -2 + __opt_test2_locals + 1,s<br />.ifgr __opt_test2_locals 0<br />tsa<br />clc<br />adc #__opt_test2_locals<br />tas<br />.endif<br />rtl<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Sep 24, 2012 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: tcc816 math optimization</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't have time to sit around counting cycles / working it all out, but I thought I'd share this.  Taken directly from &quot;Programming the 65816 including the 6502, 65C02, and 65802&quot;:<br /><br />16-bit multiplication:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; operand 1: 16-bits in DP location MCAND1<br />; operand 2: 16-bits in DP location MCAND2<br />; result: 16-bits in accmulator<br />; assumes native mode in use (all registers set to 16-bit modes, e.g. REP #$30)<br /><br />MCAND1 = $80&nbsp; &nbsp; &nbsp;; DP location $80<br />MCAND2 = $82&nbsp; &nbsp; &nbsp;; DP location $82<br /><br />mymult:<br />&nbsp; lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; initialise result<br /><br />- ldx MCAND1&nbsp; &nbsp; &nbsp;; get operand 1<br />&nbsp; beq done&nbsp; &nbsp; &nbsp; &nbsp;; if operand 1 is zero, done<br />&nbsp; lsr MCAND1&nbsp; &nbsp; &nbsp;; get right bit, operand 1<br />&nbsp; bcc +&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if clear, no addition to previous products<br />&nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; else add operand 2 to partial result<br />&nbsp; adc MCAND2<br /><br />+ asl MCAND2&nbsp; &nbsp; &nbsp;; now shift operand 2 left for possible addition next time<br />&nbsp; bra -<br /><br />done:<br />&nbsp; rts<br /></div><br /><br />16-bit division w/ remainder:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; 16-bit divide: X / A -&gt; QUOTNT; remainder in X<br />; QUOTNT is a 16-bit direct page cell<br />; assumes native mode in use (all registers set to 16-bit modes, e.g. REP #$30)<br />; no special handling for divide by zero (returns $FFFF as quotient)<br /><br />QUOTNT = $80&nbsp; &nbsp; &nbsp;; DP location $80<br /><br />mydiv:<br />&nbsp; stz QUOTNT&nbsp; &nbsp; &nbsp;; initialise quotient to 0<br />&nbsp; ldy #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; iniitalise shift count to 1<br /><br />- asl a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; shift divisor; test leftmost bit<br />&nbsp; bcs +&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; branch when get leftmost bit<br />&nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; else increment shift count<br />&nbsp; cpy #17&nbsp; &nbsp; &nbsp; &nbsp; ; max count (all zeros in divisor)<br />&nbsp; bne -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; loop if not done<br /><br />+ ror a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; push shifted-out bit back<br /><br />; now divide by subtraction<br />- pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; push divisor<br />&nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get dividend into accumulator<br />&nbsp; sec<br />&nbsp; sbc 1,s&nbsp; &nbsp; &nbsp; &nbsp; ; subtract divisor from dividend<br />&nbsp; bcc +&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; branch if can't subtract; dividend still in X<br />&nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; store new dividend; carry=1 for quotient<br /><br />+ rol QUOTNT&nbsp; &nbsp; &nbsp;; shift carry-&gt;quotient (1 for divide, 0 for not)<br />&nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; pull divisor<br />&nbsp; lsr a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; shift divisor right for next subtract<br />&nbsp; dey&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; decrement count<br />&nbsp; bne -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; branch to repeat unless count is 0<br />&nbsp; rts<br /></div><br /><br />An alternate solution -- and this is what most of us ended up doing on the 6502, 65c02, and 65816 universally -- is to generate a pre-calculated table of all values and simply do table lookups.  It's honestly the fastest, aside from obvious multiple-of-2 cases (which we know aren't always the case in this scenario).  <a href="http://everything2.com/title/Fast+6502+multiplication" class="postlink">6502 folks do this all the time</a> since 200+ cycles per multiply is considered extreme (bringing it down to around 90 cycles).<br /><br />BTW, you could consider using $4202/3 for multiplication, but the end result may be slower than the above options since there's an 8-cycle delay between when $4203 is set and when you get your result in $4216/7.  The same applies for division using $4204/5/6, with a 16-cycle delay after $4206 is set to when you can get your result from $4216/7.  Most games I know of didn't use these registers because of that reason, but it depends ultimately on how much math you plan on doing.  :-)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>