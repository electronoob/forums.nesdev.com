<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do I jump to a subroutine using indirect addressing?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do I jump to a subroutine using indirect addressing?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4518">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4518</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Wed Oct 29, 2008 9:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How do I jump to a subroutine using indirect addressing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd like to be able to jump to certain subroutines (e.g. different enemy updates) in my game using indirect addressing in order to avoid wasteful if-else checks. So far, I've been using the JSR instruction to jump to subroutines; however, that instruction appears to support absolute addressing only.
<br />
<br />I'm thinking it's possible to use the JMP instruction (which supports indirect addressing), but that would require pushing the address - 1 of the following instruction onto the stack in order to "play nice" with the RTS instruction that terminates the subroutine, wouldn't it?
<br />
<br />I'm afraid of getting really nasty "off by one" errors if I push the wrong address onto the stack. What is the proper way to set up a correct jump?
<br />
<br />Or is there a better method altogether?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Oct 29, 2008 9:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />JSR to the JMP instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Wed Oct 29, 2008 9:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hot damn that's slick. That's so much easier than what I was thinking!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Wed Oct 29, 2008 9:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />SSD, I have recently heard about the technique your describing actually, what weird timing! I still don't understand how it works though. But I'm interested in what Blargg just said... what the? Can someone explains how that works?
<br />
<br />EDIT: grammar blah

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Wed Oct 29, 2008 10:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Roth wrote:</div><div class="quotecontent">SSD, I have recently heard about the technique your describing actually, what weird timing! I still don't understand how it works though. But I'm interested in what Blargg just said... what the? Can someone explains how that works?</div>
<br />
<br />Let's say you have several different types of enemies in your game, and you want to update them all. One way is to check each enemy to see what type it is, then select the appropriate update routine. In pseudocode:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;enemyType == SOLDIER&#41;<br />&nbsp; &nbsp; JSR UpdateSoldier<br />else if &#40;enemyType == NINJA&#41;<br />&nbsp; &nbsp; JSR UpdateNinja<br />else if &#40;enemyType == BOSS&#41;<br />&nbsp; &nbsp; JSR UpdateBoss<br />etc...</div><br /><br />This method is acceptable if you only have a few different enemies, but quickly gets out of hand as the number of enemy types increases. It's also pretty inefficient.<br /><br />A better way is to store an array of addresses of the various update routines. Then use the enemy type as an index into that array. In pseudocode:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SOLDIER = 0<br />NINJA = 1<br />BOSS = 2<br />etc...<br /><br />; Initialization &#40;performed once&#41;<br />UpdateRoutine&#91;SOLDIER&#93; = UpdateSoldier<br />UpdateRoutine&#91;NINJA&#93; = UpdateNinja<br />UpdateRoutine&#91;BOSS&#93; = UpdateBoss<br />etc...<br /><br />; Update &#40;performed every frame&#41;<br />JSR UpdateRoutine&#91;enemyType&#93;<br /></div>
<br />
<br />By using the method above, you avoid all the if-else tests, and you can add as many different enemy types as you want.
<br />
<br />I just wasn't sure how to pull that technique off in 6502 assembly.  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />
<br />
<br />Did that answer your question?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Oct 30, 2008 3:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />JMP indirect doesn't seem all that useful for jump tables, since you have to copy the address to a fixed address first. Pushing the address (minus one!) on the stack and then returning to it is simplest. Note the subtlety: the caller JSRs to do_action, pushing the final return address on the stack. Then the table-based do_action routines push the address of the routine to "jump" to and "return" to that. At that point, one of the three action_n routines is being executed, with the original return address on the stack for it to return to when done.
<br />
<br />Sorry for the length of the code below.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Example that does actions 0, 1, and 2<br />main:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Loop through values of A<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />:&nbsp; &nbsp; &nbsp; &nbsp;pha<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr do_action_a ; test one of the methods<br />&nbsp; &nbsp; &nbsp; &nbsp; pla<br />&nbsp; &nbsp; &nbsp; &nbsp; clc<br />&nbsp; &nbsp; &nbsp; &nbsp; adc #1<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #3<br />&nbsp; &nbsp; &nbsp; &nbsp; bne :-<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />; The actions performed<br />action_0:<br />&nbsp; &nbsp; &nbsp; &nbsp; print_str &quot;0&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />action_1:<br />&nbsp; &nbsp; &nbsp; &nbsp; print_str &quot;1&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />action_2:<br />&nbsp; &nbsp; &nbsp; &nbsp; print_str &quot;2&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />; Different ways to invoke action based on value of A<br /><br />do_action_a:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #0<br />&nbsp; &nbsp; &nbsp; &nbsp; bne :+<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp action_0<br /><br />:&nbsp; &nbsp; &nbsp; &nbsp;cmp #1<br />&nbsp; &nbsp; &nbsp; &nbsp; bne :+<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp action_1<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />:&nbsp; &nbsp; &nbsp; &nbsp;cmp #2<br />&nbsp; &nbsp; &nbsp; &nbsp; bne :+<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp action_2<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />:&nbsp; &nbsp; &nbsp; &nbsp;rts<br /><br />do_action_b:<br />&nbsp; &nbsp; &nbsp; &nbsp; asl a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; x = a * 2<br />&nbsp; &nbsp; &nbsp; &nbsp; tax<br />&nbsp; &nbsp; &nbsp; &nbsp; lda table+1,x&nbsp; &nbsp;; push address to &quot;jump&quot; to<br />&nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; lda table,x<br />&nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />table:<br />&nbsp; &nbsp; &nbsp; &nbsp; .addr action_0-1, action_1-1, action_2-1<br /><br />do_action_c:<br />&nbsp; &nbsp; &nbsp; &nbsp; tax<br />&nbsp; &nbsp; &nbsp; &nbsp; lda table_h,x&nbsp; &nbsp;; push address to &quot;jump&quot; to<br />&nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; lda table_l,x<br />&nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; rts<br /><br />table_h:<br />&nbsp; &nbsp; &nbsp; &nbsp; .byte &gt;&#40;action_0-1&#41;, &gt;&#40;action_1-1&#41;, &gt;&#40;action_2-1&#41;<br />table_l:<br />&nbsp; &nbsp; &nbsp; &nbsp; .byte &lt;&#40;action_0-1&#41;, &lt;&#40;action_1-1&#41;, &lt;&#40;action_2-1&#41;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Thu Oct 30, 2008 4:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty hardcore, dude! It'll take me a little while to digest all the nuances there, but I think I get the gist. Thanks for giving me another angle to consider. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Oct 30, 2008 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In my game, my NMI routine looks like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br />&nbsp;pha<br />&nbsp;txa<br />&nbsp;pha<br />&nbsp;tya<br />&nbsp;pha<br />-<br />&nbsp;jmp &#40;$00&#41;<br />&nbsp;jmp &#40;$02&#41;<br />&nbsp;jmp &#40;$04&#41;<br />&nbsp;...<br />&nbsp;jmp &#40;$1C&#41;<br />&nbsp;jmp &#40;$1E&#41;<br />&nbsp;lda #&lt;-<br />&nbsp;sta $20<br />&nbsp;pla<br />&nbsp;tay<br />&nbsp;pla<br />&nbsp;tax<br />&nbsp;pla<br />&nbsp;rti<br /><br />Return:<br />&nbsp;clc<br />&nbsp;lda $20<br />&nbsp;adc #3<br />&nbsp;sta $20<br />&nbsp;jmp &#40;$20&#41;<br /></div>
<br />
<br />$20/$21 hold the address of "-" initially. The routine is fixed so it never goes beyond a page boundary, so I don't have to do 16-bit additions. Anyways, basically I have all the stuff I want to do in the NMI routine in a list. This list is made up of the addresses of the routines I want to go to, and they're stored in $0-$1F, so that's 16 different routines I can go to in the NMI. Instead of doing an "RTS" at the end of each routine, I go "JMP Return". $20/$21 basically holds the position of where the program last was. Though I have to add 3 to it to get past the instruction it was just at. I designed this specifically for like what you were saying. I hated all those ugly If/Else statements. And I also designed this for heavy gear-shifting in the code. By that I mean like when you switch from going into game-mode where you're jumping around killing enemies to going to the menu, where the engine will be doing very different things.
<br />
<br />Oh, and if any routine in that list isn't doing anything, it just jumps directly to "Return". I have it like this for my game loop, too. Though it's a bit different.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Thu Oct 30, 2008 4:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@Celius: I really like your idea of having callbacks in the NMI routine. Right now I'm working on the transition from the title screen to the main game. Since those two sections handle graphics quite differently, having callbacks greatly simplifies some of the logic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Oct 30, 2008 8:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In order to have vastly different NMIs through my game, I have the NMI vector point to RAM. I reserved 3 bytes of RAM for it, and usually I have a "JMP $XXXX" instruction there, and I change the address depending on what section of the game is being executed. Sometimes I place an RTI in place of the JMP, to "disable" NMIs without touching the PPU registers.
<br />
<br />In order to avoid the catastrophic case of an NMI firing while the address is partially updated (something that would crash the program), I first change the JMP to an RTI, and then I change the address and restore the JMP.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Oct 30, 2008 11:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, that's one thing I have to consider when using my method. In general, the NMI and Game Loop sharing sections of RAM is dangerous. For example, I didn't even think about it until a little while ago. In my NMI I need to use different temporary variables than I do in the game loop. If the NMI is fired and destroys those values, my game = worse catastrophe than when the meteor killed the dinosaurs. Anyways, I rarely change the routines in that list, so I disable the NMI before I update them, and turn it on right after that. Though it's pretty impractical sometimes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMF54123</b> [ Fri Oct 31, 2008 1:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">If the NMI is fired and destroys those values, my game = worse catastrophe than when the meteor killed the dinosaurs.</div>
<br />Yeah. I've dealt with exactly that issue before...<a href="http://www.romhacking.net/hacks/308" class="postlink">in a commercial game.</a>
<br />
<br />(granted, the game was never released, but that doesn't excuse some of the amateur programming errors they made...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Oct 31, 2008 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In order to have vastly different NMIs through my game, I have the NMI vector point to RAM. I reserved 3 bytes of RAM for it, and usually I have a "JMP $XXXX" instruction there, and I change the address depending on what section of the game is being executed. Sometimes I place an RTI in place of the JMP, to "disable" NMIs without touching the PPU registers.<br /><br />In order to avoid the catastrophic case of an NMI firing while the address is partially updated (something that would crash the program), I first change the JMP to an RTI, and then I change the address and restore the JMP.</div>
<br />That's exactly how Final Fantasy 3 works.
<br />
<br />Celius, your idea of a jump table is great, but could be optimised.
<br />You could place the NMI in RAM so that the jump table would be a jsr table, and you just have to replace the argument of the jsr code to change the routine called. You could also call a routine that stores the content of A,X and Y into variables (instead of pushing them) so that even that step can be done from RAM (and is fully optionnal), and you can change the initial jsr to a rti to disable NMIs if needed. That way the routines called in the NMI can simply rts and don't have to do a jmp Return. Also, the exact same routine can be called from the main code if needed.
<br />
<br />Alternatively, if having the jump table in RAM bothers you because you have to interleave the addresses with "rts" you could do the following thing :
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JumpToNMISubroutine<br />&nbsp; &nbsp; lda $20<br />&nbsp; &nbsp; inc $20<br />&nbsp; &nbsp; asl A<br />&nbsp; &nbsp; tax<br />&nbsp; &nbsp; lda $00,X<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; lda $01,X<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; rts<br /></div>
<br />And the NMI code would just be a loop that calls for that subroutine (or a stream of calls to be faster). In other world the work done by "Return" is done before the routine is started, and not after it is executed, but otherwise it's exactly the same as you posted (you'll have to substract one from routine's adress, if you don't want to just use jmp indirect instead of pha, pha, rts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Oct 31, 2008 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, that's actually a really great idea. I could definitely just have somewhere in RAM a list of 16 JSR $XXXX in RAM, and obviously only change the addresses. That would save a lot of time, actually. Though that would require me to do probably a lot of optimization at this point.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>