<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3893" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-02-22T02:02:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3893</id>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2008-02-22T02:02:45-07:00</updated>
<published>2008-02-22T02:02:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31121#p31121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31121#p31121"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31121#p31121"><![CDATA[
I like the disassembler in FCEUXD, but it lacks in PPU debugging features (think no$gba-style viewers for nametables, attribute tables, palettes, sprites etc).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Feb 22, 2008 2:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Parasyte]]></name></author>
<updated>2008-02-21T23:28:15-07:00</updated>
<published>2008-02-21T23:28:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31119#p31119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31119#p31119"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31119#p31119"><![CDATA[
And GDB still has negligible support for multiple address spaces, let alone multiple CPUs. <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3482">Parasyte</a> — Thu Feb 21, 2008 11:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-02-21T18:55:07-07:00</updated>
<published>2008-02-21T18:55:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31116#p31116</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31116#p31116"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31116#p31116"><![CDATA[
<div class="quotetitle">Parasyte wrote:</div><div class="quotecontent"><br />And when you want to add DS support later? 40-bit address space?<br /></div><br />The DS has working gdb.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 21, 2008 6:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Parasyte]]></name></author>
<updated>2008-02-21T18:03:02-07:00</updated>
<published>2008-02-21T18:03:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31114#p31114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31114#p31114"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31114#p31114"><![CDATA[
teaguecl: That's about what I would expect. Thanks for confirming. Did you look over LDP (RFC 909) yet? I think it might be a very good starting point, since it's already designed to support multiple architectures and has a lot of room for extension. It's also well suited for TCP/IP. I'm thinking that's the one to build from, or at least barrow [a lot of] inspiration from.<br /><br />The last time I tried Eclipse, it was too bloated for my tastes so I wouldn't be the one to write a plugin for it. But I imagine it could be done without much trouble.<br /><br />tepples: Yes and no. It's certainly <em>possible</em> to define a generic 24-bit address space for NES, but what happens when you want to add support for SNES? Do you shift it to 32-bit address space? And when you want to add DS support later? 40-bit address space? What about 64-bit architectures like ia64/x64? Virtualizing the address space would compromise the idea of using an architecture-independent protocol.<br /><br />LDP's proposed solution to this problem is fairly simple:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">4.3.1  Long Address Format<br /><br />          The long address format is five words long and consists of a<br />     three-word  address  descriptor and a two-word offset &#40;see Figure<br />     9&#41;. The descriptor specifies an address space to which the offset<br />     is applied.  The descriptor is subdivided into several fields, as<br />     described below.  The structuring of the descriptor  is  designed<br />     to  support  complex  addressing  modes.  For example, on targets<br />     with  multiple  processes,  descriptors  may  reference   virtual<br />     addresses,  registers,  and  other  entities  within a particular<br />     process.</div><br />Address spaces would be accessed using the "ID" field in the descriptor, which separates it from the address. Seems like an elegant way to handle it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3482">Parasyte</a> — Thu Feb 21, 2008 6:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-02-20T19:55:20-07:00</updated>
<published>2008-02-20T19:55:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31085#p31085</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31085#p31085"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31085#p31085"><![CDATA[
Would it be possible to pretend to have a 24-bit address space, where the upper 4 bits select which chip we're looking at?<br /><ul><li>$000000-$00FFFF: CPU address space </li><li>$600000-$602FFF: PPU address space </li><li>$603F00-$603F1F: Palette </li><li>$700000-$7000FF: OAM </li><li>$800000-$BFFFFF: All PRG ROM banks </li><li>$C00000-$DFFFFF: All CHR ROM or CHR RAM banks </li><li>$E00000-$FFFFFF: All PRG RAM banks </li></ul><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Feb 20, 2008 7:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[teaguecl]]></name></author>
<updated>2008-02-20T19:20:15-07:00</updated>
<published>2008-02-20T19:20:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31083#p31083</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31083#p31083"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=31083#p31083"><![CDATA[
Parasyte, I'm on board.  Years ago I implemented GDB debugging over TCP/IP into my emulator.  I ran into all the issues you mentioned (specifically having 2 address spaces), and modified the protocol to suit my needs.  That meant no more using gdb/ddd, so I started writing my own debugger interface.  I modeled off of the best debugger I've ever used, SoftIce.<br />I was never really happy with any of it, though I love the approach.  If we can decide on a good protocol, get some buy in from a few emulator authors to support it, then I'd love to write a new debugger.  Maybe someone would want to do it as a plugin to Eclipse?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=29">teaguecl</a> — Wed Feb 20, 2008 7:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Parasyte]]></name></author>
<updated>2008-02-13T21:36:57-07:00</updated>
<published>2008-02-13T21:36:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30885#p30885</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30885#p30885"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30885#p30885"><![CDATA[
The GDB protocol is established, which is nice, but there is a slight problem with it: The protocol does not allow binary data to be sent. In interfaces which might want to update a PPU viewer in real-time, you will have to encode the PPU data to ASCII characters (0x94 becomes "94", for example) which has the side effect of doubling the bandwidth requirements.<br /><br />Its use of a specific start/end sequence and a checksum indicates that it is really designed for a raw communications link which does not provide synchronization or cyclic redundancy checking. So it is great for very simple serial communication, but poor for TCP/IP or pipes/sockets.<br /><br />Another problem is that it does not provide access to multiple memory maps. So you would have to establish a standard of some sort for accessing CPU, PPU, PRG, Sprite memory, etc. using the GDB commands for reading/writing memory (m/M respectively). [Not to mention related problems dealing with a lack of a well-defined command to describe the target architecture.]<br /><br />And it would be very cool to use GDB with an NES target. Unfortunately, GDB hasn't had 65816 support since 2001, and has never supported 6502. So if you can't use GDB, why constrict yourself to the GDB protocol?<br /><br /><br />There's also <a href="http://xdebug.org/docs-dbgp.php" class="postlink">DBGp</a> which uses XML+TCP/IP, but obviously adds a LOT of overhead. And the <a href="http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V50_HTML/ARH9QATE/DOCU_031.HTM#remote_debug_prot_sec" class="postlink">Ladebug Remote Debugger Protocol</a>, using simple UDP/IP packets with a 16-byte header. Finally, <a href="http://www.rfc-archive.org/getrfc.php?rfc=909" class="postlink">RFC-909 - Loader Debugger Protocol</a>, which looks a bit closer to what I had in mind.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3482">Parasyte</a> — Wed Feb 13, 2008 9:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-02-13T13:15:06-07:00</updated>
<published>2008-02-13T13:15:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30869#p30869</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30869#p30869"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30869#p30869"><![CDATA[
<div class="quotetitle">Parasyte wrote:</div><div class="quotecontent"><br />Modularity is one possible solution to these problems. The first thing to do is segregate the low-level debug primitives (functions and whatnot) from the user interface; make the interface modular, interchangeable with any interface. Then you define how the debug primitives interact with the interface via a communications link; make the communications link modular, able to establish communication using any number of interchangeable modules for TCP/IP sockets, operating system pipes, RS232, USB, etc. Next, you define the protocol; make the protocol modular, a 'universal language' that describes generic debug primitives, and allow it to be extensible as necessary. Finally, you define those debug primitives and provide a base implementation that can be expanded if required. However, a well-defined set of primitives is unlikely to need expansion for anything but the most exotic architecture configurations.<br /></div><br />Could we start with the GDB protocol? Or would that work only for the 32-bit machines that the GNU operating system targets?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Feb 13, 2008 1:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[B00daW]]></name></author>
<updated>2008-02-13T11:19:09-07:00</updated>
<published>2008-02-13T11:19:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30855#p30855</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30855#p30855"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30855#p30855"><![CDATA[
Totally would, blargg...  totally would.  The <strong>Wiki</strong> is what I prefer to use whenever I do extensive research.  There are a lot of holes in it though that could be filled.  I do not yet consider myself qualified to write articles <em>on</em> the Wiki because even though I have been lurking and around in the whole NESdev area for quite some time now.  I'm just beginning now to take the time to understand the workings aside from the audio portion.<br /><br />In summary:  The Wiki needs more articles.  I'm a moron; but an assertive moron, so I'll push others to include the information that it needs.<br /><br />Also if this is an environment that needs to be disheveled to be conducive to learning, then so be it.  I relate being an artist -- or a struggling artist in the least.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3466">B00daW</a> — Wed Feb 13, 2008 11:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-02-13T09:25:13-07:00</updated>
<published>2008-02-13T09:25:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30847#p30847</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30847#p30847"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30847#p30847"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I'd really like to see the feature worked on, but we should try to keep our notes organized, concise, and easy to find.<br /></div><br />You must be new here. People don't care much about that, so it's wasted effort worrying about it. Use the wiki if you want something organized.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Feb 13, 2008 9:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[B00daW]]></name></author>
<updated>2008-02-12T22:24:15-07:00</updated>
<published>2008-02-12T22:24:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30833#p30833</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30833#p30833"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30833#p30833"><![CDATA[
I hate to play '<em>Mom</em>' here, but it's cool seeing you kids playing in this thread, but for 'searchability' and contextual relevance, we might wanna continue this thread over where <strong>hap</strong> pointed out.  <a href="http://nesdev.com/bbs/viewtopic.php?t=331&amp;start=0&amp;postdays=0&amp;postorder=asc" class="postlink">This topic about the 'rewind feature'</a> seems to be the best area to discuss the subject.<br /><br />I'd really like to see the feature worked on, but we should try to keep our notes organized, concise, and easy to find.<br /><br />Not that I'm a moderator of any sort, but it would be nice to have things in their own place.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3466">B00daW</a> — Tue Feb 12, 2008 10:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-02-12T20:42:20-07:00</updated>
<published>2008-02-12T20:42:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30830#p30830</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30830#p30830"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30830#p30830"><![CDATA[
Actually, I suggested modularity simply to reduce complexity to a manageable level, and nothing as grand as you describe (which tends to increase complexity). I'm talking really simple stuff, where one examines their architecture and reduces it to a minimum of functions, and no public (global) data. And I am saying that without modularity, complexity is simply too great to implement these features well and bug-free. Re-use is a possible side benefit, and it only comes when different emulators have the same module interfaces, something that can be difficult if the emulator designs differ greatly. I don't think changes should be too drastic; they should be small steps that each do something useful.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Feb 12, 2008 8:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Parasyte]]></name></author>
<updated>2008-02-12T19:15:33-07:00</updated>
<published>2008-02-12T19:15:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30826#p30826</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30826#p30826"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30826#p30826"><![CDATA[
Ah, modularity! That's my cue.<br /><br />How does one solve the problems with current debuggers? First, by identifying those problems. Next by addressing them. Finally, in implementation.<br /><br />So what are the problems with debuggers integrated in today's emulators? Well, for one thing, they are <em>integrated</em>. This can cause portability problems, in many cases (I am ashamed to admit my guilt in perpetuating this problem, by writing debuggers that vendor lock users to the Windows operating system). It can also cause undue stress for debugger developers. We are a lazy species, and we do not like rewriting the same debugger multiple times, attempting to port our work to a newer, better emulator, or porting it to a completely new emulated architecture. And then there is the problem of features, or lack thereof. Some hackers and homebrewers need specialized features in their debuggers.<br /><br />Modularity is one possible solution to these problems. The first thing to do is segregate the low-level debug primitives (functions and whatnot) from the user interface; make the interface modular, interchangeable with any interface. Then you define how the debug primitives interact with the interface via a communications link; make the communications link modular, able to establish communication using any number of interchangeable modules for TCP/IP sockets, operating system pipes, RS232, USB, etc. Next, you define the protocol; make the protocol modular, a 'universal language' that describes generic debug primitives, and allow it to be extensible as necessary. Finally, you define those debug primitives and provide a base implementation that can be expanded if required. However, a well-defined set of primitives is unlikely to need expansion for anything but the most exotic architecture configurations.<br /><br />What does all of this mean? Where does it leave us, the debugger developers? And where does it place the users, the hackers, and the homebrew developers?<br /><br />It means that the debugger developers can implement an accepted standard (<em>accepted</em> being the keyword) for debugger support within not only emulators, but any kind of virtual machine or interpreted byte code in any kind of program. It could be a simple set of debug primitives (in a static or linked library, for example) added by an emulator author (or emulator extender) that connects to a debugger interface of the user's choice. The interface might be highly specialized for a particular architecture, or it might be very complex and advanced with universal support for many architectures. This would put a large number of options into the hands of users.<br /><br />Now let me try to get a more solid description of this idea out there. The number one underlying technology to be assessed to make any of this work is simply the protocol. That means, a formal description of how a target (an emulator, or other program wishing to use debugger functionality) talks to an interface (a separate program designed to give the user direct access to the debug primitives and link them together in ways that provide many very advanced features ... such as stepping backwards in architecture-time). This would probably be a command reference which supplies things like:<br /><br />1) A description of the architecture (the emulated system, like NES). This description would include the number of CPUs available, the type of the CPUs, endianness, memory maps as accessible by the CPU, memory maps not accessible to the CPU, etc. Basically a complete virtual model of the architecture.<br />2) Debug primitives: breakpoints and stepping functionality; read/write access to the memory maps, cpu registers and statuses, and access to internal hardware registers; interrupt and exception handling; scripted macros with callback functions; essentially all of the basic functions which the interface can use to procedurally create high-level features.<br />3) Extensibility; able to provide expansions to architecture descriptions, debug primitives, and other specialty features.<br /><br />With such a protocol in place, the interface can do the rest of the high-level work; disassembling, video memory viewing and modification, hex editing, cheat searching and management, etc.<br /><br />I'm hoping this has been verbose enough that you all understand where I am coming from, but not too verbose that I've created confusion or completely went the wrong direction in the discussion.<br /><br />Bottom line is, I think we only need to agree on one thing: the protocol. If you refuse to believe that, and only want to do your own thing with your own emulator, that's quite alright. But if you want to reap the benefits of interchangeable debugger interfaces [pick your favorite, or just choose the right one for the job at hand] that are platform-independent [can run on any host operating system, even a completely different machine from the target emulator; not at all bound to the target emulator] and potentially architecture-independent [capable of debugging NES, Genesis, PS2, Wii, Java, brainf**k, the custom scripting language in your new game, you name it!] then I say let's work some crazy Voodoo and invent ourselves a standard for modern debugging!<br /><br /><br />P.S. I think this "new project" might make up for the shortcomings in FCE&lt;insert arbitrary acronym here&gt;, wouldn't you?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3482">Parasyte</a> — Tue Feb 12, 2008 7:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-02-12T12:24:45-07:00</updated>
<published>2008-02-12T12:24:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30816#p30816</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30816#p30816"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30816#p30816"><![CDATA[
It could even have something like "rewind to JSR that called this routine", with detection of the case where the top two bytes on the stack aren't a return address (it'd detect this by backing up several frames, setting a breakpoint, and finding that the PC never hits that point). Probably another reason these kinds of things aren't implemented is that many programmers haven't embraced <a href="http://en.wikipedia.org/wiki/Module_%28programming%29" class="postlink">modularity</a> to much of a degree, making the task very complex. With proper modularity, you might have the emulator, with the ability to run for a frame, run until a certain time, save and restore state, and set a breakpoint. Then the debugger implements single stepping on top of that, then the advanced functions are implemented on top of the debugger interface. <em>None</em> of these modules mucks around with another's internal data; it all goes through well-defined function calls.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Feb 12, 2008 12:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-02-12T11:33:53-07:00</updated>
<published>2008-02-12T11:33:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30814#p30814</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30814#p30814"/>
<title type="html"><![CDATA[l33t debugging.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3893&amp;p=30814#p30814"><![CDATA[
It's both: the users of a debugger are too lazy to make save states, and the coders of a debugger are too lazy to provide tools to work with save states at a cycle level. A little work on both parts would result in the illusion of reversible computing. Here, I describe a possible user interface:<br /><br />Ideally, pausing for debug should make an automatic save state, or pull one from the emulator's rewind buffer. Then the emulator would have buttons for back/forward 80 scanlines, back/forward 8 scanlines, back/forward 1 scanline, and back/forward 1 CPU instruction. Going back would subtract that many cycles from the current value of cycles since last save state, and then run the CPU and PPU for that many cycles. Then the user would step forward by however many lines to get into a subroutine, and then back and forward an instruction at a time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Feb 12, 2008 11:33 am</p><hr />
]]></content>
</entry>
</feed>