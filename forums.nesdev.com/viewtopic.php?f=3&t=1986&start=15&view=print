<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Newbie to emulation questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Newbie to emulation questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1986">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1986</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 07, 2006 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Newbie to emulation questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">For the CPU built-in I/O registers, set your $4000 handler to check if the write is in $4000-$4017 and use a separate pair of 24-entry tables for those.</div><br />Wouldn't compare logic and additional tables be far slower than a pointer array which could directly point to separate memory ignore/conflict/success/open bus handlers and PPU/APU functions?</div><br />Having 65536 pointers, where you jump to a separate function for every different address, will wreck your host CPU's cache. Unlike the NES, Super NES, Game Boy, and Game Boy Advance, PCs use cache locality. If the pointer table can be kept in cache, the CPU can more quickly jump through it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NSF, for one. Crazy Japanese Famicom mappers, for another.</div><br />I didn't know, right now NSF isn't in the picture. The dynamic map idea was to allow individual mapper modules (NSF or FDS for example) to change the map on a case by case basis. Which FC mappers are these with 4KB banks? Are you sure they aren't pirate originals?</div><br />Are you sure pirate originals aren't worthy of emulation?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was thinking about running both the CPU and PPU in real time by interleaving which would allow me to skip the look ahead logic for the PPU, just evaluate the interrupts before each instruction. It's unfortunate that this would be so intense for even current desktops but "interesting" detection algorithms not only seem like a lot of work but are pretty complex, which sorta goes against the simplicity philosophy.</div><br />Then make your interleaved engine first. Then when you get time to make your "interesting" engine, use regression testing by running the precise engine and the "interesting" engine in parallel and comparing the state of RAM each time the engine catches up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">n6 wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Try 16 pointers, each referencing a 4 KB bank, for reads, and 16 pointers for writes. </div><br />Isnt it even better with 2kb blocks? because of the size of WRAM</div><br />Wouldn't 1 byte blocks be best since that's the size of i/o ports? <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /></div>
<br />And wreck your cache.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Sep 07, 2006 11:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">laughy wrote:</div><div class="quotecontent">In my emulator the most complex thing would actually be the JIT compiler, but I suggest NOT writing one of those.</div><br />Aye aye; I wouldn't know where to even start with that.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Having 65536 pointers, where you jump to a separate function for every different address, will wreck your host CPU's cache. Unlike the NES, Super NES, Game Boy, and Game Boy Advance, PCs use cache locality. If the pointer table can be kept in cache, the CPU can more quickly jump through it. </div><br />Would a cache miss would be slower than the 17 compares for the r/w and address plus figure out what to do with it? Can't the compiler or a profiler to do something to optimize for a CPU with humble cache? I can see how WRAM which allows both r/w can be decoded very quickly but $4000 onwards is trouble. Is the pointer idea is really as bad as you make it out to be?<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Are you sure pirate originals aren't worthy of emulation? </div>
<br />Some pirate originals are worthy. Even so, I haven't seen one with 4KB banks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Thu Sep 07, 2006 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Would a cache miss would be slower than the 17 compares</div>
<br />i would guess yes, but the only real test is to benchmark it yourself.  also, where do you get 17 compares from?
<br />
<br />also, i am using sdl right now.  my emulator is not ready for ppu optimizations yet.  still working on other stuff.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Thu Sep 07, 2006 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mattmatteh wrote:</div><div class="quotecontent">where do you get 17 compares from?</div>
<br />
<br />Probably from doing an if/elseif/elseif on $4000, $4001, $4002, ..., $4017 (and counting in hex instead of decimal), which is not what you'd get from such a switch() - you'd get one IF check for &gt;$4018 (for the 'default' case) and a 24-entry jump table to handle $4000-$4017. At least with a reasonably sane compiler, that's what I'd expect to get.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 07, 2006 12:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Would a cache miss would be slower than the 17 compares for the r/w and address plus figure out what to do with it?</div>If you're using a switch statement, the compiler should generate at most 5 compares (binary search), or two (table lookup). The real question is, how would this affect the available cache for the cases where it really helps? If you push out all the often-accessed data with these huge tables, the CPU can really slow down.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can't the compiler or a profiler to do something to optimize for a CPU with humble cache?</div>If a CPU with a humble cache could work just as well, then why would a CPU have anything more?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can see how WRAM which allows both r/w can be decoded very quickly but $4000 onwards is trouble. Is the pointer idea is really as bad as you make it out to be?</div>Only way to really find out is to profile the two. I tried changing the page size from 2K to 1 byte in my emulator and it uses 460% more CPU time (5.6x slower). This is on a PowerPC G3 with 32K data cache and 1MB secondary cache. The table size goes from 128 bytes to 256K, and I only use it for memory reads.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Sep 07, 2006 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was thinking:
<br />
<br />if(addr &lt; 0x8000)
<br />{
<br />if(addr &lt; 0x4000)
<br />{
<br />etc etc + R/W until you're in your target range. Using a switchblock is better though until you must break down that range further.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 17, 2006 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bump. 
<br />
<br />What's the simplest way to get timing for a program? Are there easy to use libraries or must I do the math myself? What should I be Googling for? Thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 17, 2006 5:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A decent emulator with support for breakpoints (either 'brk' instructions or opcode fetch watches) should tell you the number of cycles that have elapsed between breakpoints.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 17, 2006 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oops, I should been more clear. I mean timing for the actual program, like how may I do "virtual interrupts" in C with time.h (or other) as a timebase.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 17, 2006 5:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Decent compilers have something called "profiling" which will tell you how long the CPU spends in each function.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Sun Sep 17, 2006 9:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />well, as blargg said before, and something i have kinda done too, is to profile the memory reads too.  find out what address ranges are accessed the most and you can put those at the top of your if-else block if that is what you are using.  i was thinking of doing that in a few places.
<br />
<br />as for the cache misses, i used valgrind.  the cpu wasnt really a problem.  its the ppu for mine.  but still working on it.  i need to understand the ppu and mappers more before i can optimise.  first get it working, then speed it up
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 17, 2006 9:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Right now I'm not concerned with profiling for speed, what I need help with is more basic: getting everything synched and call step_PPU() every ~18.624uS (PPU cycle).
<br />
<br />This is what I've come up with so far:
<br />
<br />loop()
<br />{
<br />wait(((1/(21477270/4))-(time2-time1/CLOCKS_PER_SEC))
<br />time1 = clock()
<br />step_NES()
<br />time2 = clock()
<br />}
<br />
<br />Edit: bad algo

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Sun Sep 17, 2006 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i use sdl right now for approxamate timing.  also, you can not profile with time().  its only good to the nearest 10 milliseconds i think.
<br />
<br />is that 18.624 micro seconds ?  that will not work.  the cpu can not switch applications that fast, its more like in a few milliseconds.   i do an entire render frame then sleep.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Sep 17, 2006 9:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you not handle controller input and sound output in realtime then? How long do you wait? Just until the next frame? What's the benefit of using SDL's timers to time.h?
<br />
<br />To clarify, my routine does is not use the time() but a function that returns clock cycles since program started, and translates that into execution time of time1 to time 2. By timing the emulation event over and over, I figure it will execute about the desired speed assuming it can complete a loop at the desired speed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Sun Sep 17, 2006 10:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />each render frame is 16.6 milliseconds.  i round to that.  and even if you/i didnt, i would guess that a single core cpu would, since it can do the input or emulator.  unless you are polling.  but i also havent perfected my input that much.  i am still working on getting the core done still.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>