<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - open source code not working help</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">open source code not working help</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17343">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17343</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adjh</b> [ Thu May 10, 2018 6:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>open source code not working help</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />nondisassembeled code<br /><br />; iNES Header<br />;    .inesprg 1   ; 1x 16KB bank of PRG code<br />;    .ineschr 1   ; 1x 8KB bank of CHR data<br />;    .inesmap 0   ; mapper 0 = NROM, no bank swapping<br />;    .inesmir 1   ; background mirroring (ignore for now)<br /><br /><br />; $0000-0800 - Internal RAM, 2KB chip in the NES<br />; $2000-2007 - PPU access ports<br />; $4000-4017 - Audio and controller access ports<br />; $6000-7FFF - Optional WRAM inside the game cart<br />; $8000-FFFF - Game cart ROM    <br /><br />; iNES Header<br />; The 16 byte iNES header gives the emulator all the information about the game including mapper, graphics mirroring, and PRG/CHR sizes. You can include all this inside your asm file at the very beginning.<br />  .inesprg 1   ; 1x 16KB PRG code<br />  .ineschr 1   ; 1x  8KB CHR data<br />  .inesmap 0   ; mapper 0 = NROM, no bank swapping<br />  .inesmir 1   ; background mirroring<br />  <br /><br /><br />;; DECLARE SOME VARIABLES HERE<br />  .rsset $0000  ;;start variables at ram location 0 in zero page memory<br /><br />loopCount     .rs 1 ; count the loop<br />playerx       .rs 1 ; players x pos<br />playervx      .rs 1 ; players x vel<br />playery       .rs 1 ; players y pos<br />playervy      .rs 1 ; player  y vel (negative is up)<br />controller1   .rs 1 ; controller 1 button vector<br /><br />gravity       .rs 1 ; gravity<br /><br /><br />ground        .rs 1 ; y value of the ground<br />inAir         .rs 1 <br /><br />enemyx        .rs 1<br />enemyy        .rs 1<br /><br />backgroundLo  .rs 1<br />backgroundHi  .rs 1<br />counterLo     .rs 1<br />counterHi     .rs 1<br /><br /><br />scroll     .rs 1  ; horizontal scroll count<br />nametable  .rs 1  ; which nametable to use, 0 or 1<br />columnLow  .rs 1  ; low byte of new column address<br />columnHigh .rs 1  ; high byte of new column address<br />sourceLow  .rs 1  ; source for column data<br />sourceHigh .rs 1<br />columnNumber .rs 1  ; which column of level data to draw<br /><br /><br />;;;;;;;;;;;;;;;<br />; NES is powererd on<br />;    <br />  .bank 0 ; NESASM arranges things into 8KB chunks, this is chunk 0<br />  .org $C000 ; Tells the assembler where to start in this 8kb chunk<br />RESET:<br />  SEI          ; disable IRQs<br />  CLD          ; disable decimal mode, meant to make decimal arithmetic &quot;easier&quot;<br />  LDX #$40<br />  STX $4017    ; disable APU frame IRQ<br />  LDX #$FF<br />  TXS          ; Set up stack<br />  INX          ; now X = 0<br />  STX $2000    ; disable NMI<br />  STX $2001    ; disable rendering<br />  STX $4010    ; disable DMC IRQs<br /><br />vblankwait1:       ; First wait for vblank to make sure PPU is ready<br />  BIT $2002<br />  BPL vblankwait1<br /><br />;; Helper to wipe memory<br />clrmem:<br />  LDA #$00<br />  STA $0000, x<br />  STA $0100, x<br />  STA $0300, x<br />  STA $0400, x<br />  STA $0500, x<br />  STA $0600, x<br />  STA $0700, x<br />  LDA #$FE<br />  STA $0200, x    ;move all sprites off screen<br />  INX<br />  BNE clrmem<br />   <br />vblankwait2:      ; Second wait for vblank, PPU is ready after this<br />  BIT $2002<br />  BPL vblankwait2<br /><br />;;;;;;;;;;;;;;;;;;;;;;<br />; Load game pallets<br />LoadPalettes:<br />  LDA $2002             ; read PPU status to reset the high/low latch<br />  LDA #$3F              ; max out 0011 1111<br />  STA $2006             ; write the high byte of $3F00 address<br />  LDA #$00<br />  STA $2006             ; write the low byte of $3F00 address<br />  LDX #$00              ; start out at 0<br />LoadPalettesLoop:<br />  LDA palette, x        ; load data from address (palette + the value in x)<br />                          ; 1st time through loop it will load palette+0<br />                          ; 2nd time through loop it will load palette+1<br />                          ; 3rd time through loop it will load palette+2<br />                          ; etc<br />  STA $2007             ; write to PPU<br />  INX                   ; X = X + 1<br />  CPX #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites<br />  BNE LoadPalettesLoop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br /><br /><br />LoadSprites:<br />  LDX #$00              ; start at 0<br />LoadSpritesLoop:<br />  LDA playersprite, x        ; load data from address (sprites +  x)<br />  STA $0200, x          ; store into RAM address ($0200 + x)<br />  INX                   ; X = X + 1<br />  CPX #$1C              ; Compare X to hex $20, decimal 32<br />  BNE LoadSpritesLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 32, keep going down<br /><br /><br />;; Background is 960 bytes 240 * 4<br />LoadBackground:<br />  LDA $2002             ; read PPU status to reset the high/low latch<br />  LDA #$20<br />  STA $2006             ; write the high byte of $2000 address<br />  LDA #$00<br />  STA $2006             ; write the low byte of $2000 address<br />  LDX #$00              ; start out at 0<br /><br />  ;; we need to copy more that 256<br />  LDA #LOW(background)<br />  STA backgroundLo<br />  LDA #HIGH(background)<br />  STA backgroundHi<br />  ;; 960 bytes = $03C0<br />  LDA #$C0;<br />  STA counterLo<br />  LDA #$03<br />  STA counterHi<br /><br />  LDY #$00; keep y zero, we jut need y to be init to 0 for indirect index mode to work in the square bracket<br />LoadBackgroundLoop:<br />  LDA [backgroundLo], y ; load data from background<br />  STA $2007             ; write to PPU data port to copy to background data<br />  LDA backgroundLo      ; load the low byte of the background address into A<br />  CLC                   ; clear the carry bit<br />  ADC #$01              ; add 1 to A<br />  STA backgroundLo      ; store A back into the mem addr<br />  LDA backgroundHi      ; load the high byte of the background address into A<br />  ADC #$00              ; add 0, but if there is a carry (overflow) add 1<br />  STA backgroundHi      ; inc poitner to the next byte if necessary<br /><br />  LDA counterLo         ; load the counter low byte<br />  SEC                   ; set cary flag<br />  SBC #$01              ; subtract with carry by 1<br />  STA counterLo         ; store the low byte of the counter<br />  LDA counterHi         ; load the high byte<br />  SBC #$00              ; sub 0, but there is a carry<br />  STA counterHi       ; decrement the loop counter<br /><br />  LDA counterLo         ; load the low byte<br />  CMP #$00              ; see if it is zero, if not loop<br />  BNE LoadBackgroundLoop<br />  LDA counterHi<br />  CMP #$00              ; see if the high byte is zero, if not loop<br />  BNE LoadBackgroundLoop  ; if the loop counter isn't 0000, keep copying<br /><br /><br />  ;LDA background, x     ; load data from address (background + the value in x)<br />  ;STA $2007             ; write to PPU<br />  ;INX                   ; X = X + 1<br />  ;CPX #$80              ; Compare X to hex $80, decimal 128 - copying 128 bytes<br />  ;BNE LoadBackgroundLoop  ; Branch to LoadBackgroundLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 128, keep going down<br /><br />LoadAttribute:<br />  LDA $2002             ; read PPU status to reset the high/low latch<br />  LDA #$23<br />  STA $2006             ; write the high byte of $23C0 address<br />  LDA #$C0<br />  STA $2006             ; write the low byte of $23C0 address<br />  LDX #$00              ; start out at 0<br />LoadAttributeLoop:<br />  LDA attribute, x      ; load data from address (attribute + the value in x)<br />  STA $2007             ; write to PPU<br />  INX                   ; X = X + 1<br />  CPX #$40              ; Compare X to hex $40, decimal 64<br />  BNE LoadAttributeLoop  ; Branch to LoadAttributeLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 128, keep going down<br /><br /><br />;  PPUCTRL ($2000)<br />;  76543210<br />;  | ||||||<br />;  | ||||++- Base nametable address<br />;  | ||||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)<br />;  | |||+--- VRAM address increment per CPU read/write of PPUDATA<br />;  | |||     (0: increment by 1, going across; 1: increment by 32, going down)<br />;  | ||+---- Sprite pattern table address for 8x8 sprites (0: $0000; 1: $1000)<br />;  | |+----- Background pattern table address (0: $0000; 1: $1000)<br />;  | +------ Sprite size (0: 8x8; 1: 8x16)<br />;  |<br />;  +-------- Generate an NMI at the start of the<br />;            vertical blanking interval vblank (0: off; 1: on)              <br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />  STA $2000<br /><br />;  PPUMASK ($2001)<br />;  binary byte flags<br />;  76543210<br />;  ||||||||<br />;  |||||||+- Grayscale (0: normal color; 1: AND all palette entries<br />;  |||||||   with 0x30, effectively producing a monochrome display;<br />;  |||||||   note that colour emphasis STILL works when this is on!)<br />;  ||||||+-- Disable background clipping in leftmost 8 pixels of screen<br />;  |||||+--- Disable sprite clipping in leftmost 8 pixels of screen<br />;  ||||+---- Enable background rendering<br />;  |||+----- Enable sprite rendering<br />;  ||+------ Intensify reds (and darken other colors)<br />;  |+------- Intensify greens (and darken other colors)<br />;  +-------- Intensify blues (and darken other colors)<br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side<br />  STA $2001<br /><br /><br />;;;;;;;;;;;;;;;;;;;;<br />; Initialze some game state variables<br />InitialzeState:<br />  LDA #$80   ; player x offset<br />  STA playerx<br /><br />  LDA #$00   ; player y offset<br />  STA playery<br />  LDA #$C8   ; player y offset<br />  STA ground  <br /><br />  LDA #$00   ; controller state<br />  STA controller1<br />  STA playervx;<br />  STA playervy;<br />  STA loopCount<br /><br />  LDA #$03<br />  STA gravity<br /><br /><br /><br /><br />Forever:<br />  JMP Forever     ;jump back to forever MAINLOOP will interrupt for game logic, infinite loop to keep the rom from exiting<br /> <br />;; Game main loop<br />MAINLOOP: ; non-maskable interrupt (draw screen)<br />  ;; Needs to be done every frame<br />  ;; Load graphics into PPU from the memory<br />  LDA #$00   ; load 1 bytes of 0 in A<br />  STA $2003  ; set the low byte (00) of the RAM address<br />  LDA #$02   ; load 1 byte of $02, <br />  STA $4014  ; set the high byte (02) of the RAM address, start the transfer<br /><br />  ;; Draw game first<br />  JSR Draw <br />  <br />  ;; Update game<br />  JSR Update <br /><br />  RTI        ; return from interrupt<br /><br /><br />;;;;;;;;;;;;;;;;;;;;;;<br />; Draw sprite to screen<br />Draw:<br />  <br />  JSR DrawPlayer<br /><br />  ;;This is the PPU clean up section, so rendering the next frame starts properly.<br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />  STA $2000<br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side<br />  STA $2001<br />  LDA #$00        ;;tell the ppu there is no background scrolling<br />  STA $2005<br />  STA $2005<br /><br />  RTS<br /><br /><br />;;;;;;;;;;;;;;;;;;;;;<br />; Draw Sprites <br />DrawPlayer:<br />  LDX #$00              ; start at 0 <br />  LDY #$00              ; start at 0<br />DrawPlayerLoop:<br />  <br />  LDA $0203, x          ; load current x sprite position<br />  CLC  <br />  LDA playerspriteoffset, y    ; add player x with sprite offset<br />  ADC playerx <br />  INY                   ; increment sprite offset coutner<br />  STA $0203, x          ; store into RAM address ($0203 + x)<br /><br />  LDA $0200, x          ; load current y sprite position<br />  CLC<br />  LDA playerspriteoffset, y   ; add player y with sprite offset<br />  ADC playery<br />  INY<br />  STA $0200, x          ; store into RAM address ($0200 + x)<br />  INX                   ; X = X + 4 loop to the next sprite<br />  INX<br />  INX<br />  INX <br />  CPX #$1C              ; Compare X to hex $1C, decimal 28 meaning all 7 Player sprites done<br />  BNE DrawPlayerLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 32, keep going down<br />  RTS<br /><br />DrawEnemey:<br />  LDX #$00              ; start at 0 <br />  LDY #$00              ; start at 0<br />DrawEnemyLoop:<br />  <br />  LDA $0203, x          ; load current x sprite position<br />  CLC  <br />  LDA enemyspriteoffset, y    ; add player x with sprite offset<br />  ADC enemyx<br />  INY                   ; increment sprite offset coutner<br />  STA $0203, x          ; store into RAM address ($0203 + x)<br /><br />  LDA $0200, x          ; load current y sprite position<br />  CLC<br />  LDA playerspriteoffset, y   ; add player y with sprite offset<br />  ADC enemyy<br />  INY<br />  STA $0200, x          ; store into RAM address ($0200 + x)<br />  INX                   ; X = X + 4 loop to the next sprite<br />  INX<br />  INX<br />  INX <br />  CPX #$08              ; Compare X to hex $1C, decimal 28 meaning all 7 Player sprites done<br />  BNE DrawEnemyLoop   ; Branch to LoadSpritesLoop if compare was Not Equal to zero<br />                        ; if compare was equal to 32, keep going down<br />  RTS<br /><br />Update:<br />    JSR LatchController<br />    JSR PollController<br />    JSR ReadLeft<br />    JSR ReadRight<br />    JSR ReadA<br />    INC loopCount<br />    JSR UpdatePlayerPosition<br />    RTS<br /><br /><br />UpdatePlayerPosition:<br />  CLC<br />  LDA loopCount<br />  CMP #$0A<br />  BNE SkipGravity<br />  LDA gravity<br />  ADC playervy<br />  STA playervy<br />  LDA #$00<br />  STA loopCount<br />SkipGravity:<br />  LDA playervy<br />  CLC<br />  ADC playery<br />  STA playery  <br />  CMP ground<br />  BCS PutPlayerOnGround<br />PlayerOnGroundDone: <br />  LDA playervx<br />  CLC<br />  ADC playerx<br />  STA playerx <br />  RTS<br />PutPlayerOnGround:<br />  LDA ground<br />  STA playery<br />  LDA #$00<br />  STA playervy<br />  STA inAir<br />  JMP PlayerOnGroundDone<br /><br /><br />LatchController:<br />  LDA #$01<br />  STA $4016<br />  LDA #$00<br />  STA $4016       ; tell both the controllers to latch buttons<br />  RTS<br /><br />;;;;;;;;;;;;;;;;;;<br />; Read controller input into byte vector<br />; 76543210<br />; ||||||||<br />; |||||||+- RIGHT button<br />; ||||||+-- LEFT Button<br />; |||||+--- DOWN Button<br />; ||||+---- UP Button<br />; |||+----- START Button<br />; ||+------ SELECT Button<br />; |+------- B Button<br />; +-------- A Button<br /><br />PollController:<br />  LDX #$00   ; 8 buttons total<br />PollControllerLoop:<br />  LDA $4016  ; player 1 - A <br />  LSR A      ; shift right<br />  ROL controller1    ; rotate left button vector in mem location $0003<br />  INX<br />  CPX #$08<br />  BNE PollControllerLoop<br />  RTS<br /><br />ReadRight: <br />  LDA controller1  ; controller1 1 - A button<br />  AND #%00000001  ; only look at bit 0<br />  BEQ ReadRightDone   ; branch to ReadADone if button is NOT pressed (0)<br />                  ; add instructions here to do something when button IS pressed (1)<br />  LDA $0203       ; load sprite X position<br />  CLC             ; make sure the carry flag is clear<br />  LDA playerx <br />  ADC #$02<br />  STA playerx;<br />ReadRightDone:        ; handling this button is done<br />  RTS<br />  <br /><br />ReadLeft: <br />  LDA controller1       ; controller1 1 - B button<br />  AND #%00000010  ; only look at bit 0<br />  BEQ ReadLeftDone   ; branch to ReadBDone if button is NOT pressed (0)<br />                  ; add instructions here to do something when button IS pressed (1)<br />  LDA $0203       ; load sprite X position<br />  CLC<br />  LDA playerx<br />  ADC #$FE <br />  STA playerx<br />ReadLeftDone:        ; handling this button is done<br />  RTS<br /><br />ReadA: <br />  LDA controller1       ; controller1 1 - B button<br />  AND #%10000000  ; only look at bit 0<br />  BEQ ReadADone   ; branch to ReadBDone if button is NOT pressed (0)<br />                  ; add instructions here to do something when button IS pressed (1)  <br />  LDA inAir<br />  CMP #$01<br />  BEQ ReadADone<br /><br />  LDA ground<br />  STA playery<br />  LDA #$FA<br />  STA playervy<br /><br />  LDA #$01<br />  STA inAir<br /><br />ReadADone:        ; handling this button is done<br />  RTS<br /><br />;;;;;;;;;;;;;;  <br />; Data initialization<br />; .db command is a macro for storing bytes in memory without having to write<br />; LDA (byte)<br />; STA (mem)<br />  <br />  .bank 1<br />  .org $E000<br />palette:<br />  ;; Background Palletes (0-3)<br />  .db $08,$1A,$38,$18, $08,$02,$38,$3C, $08,$1C,$15,$14, $08,$02,$38,$2A<br />  ;;  Character Palletes (0-3)<br />  .db $21,$2C,$11,$15, $0F,$35,$36,$37, $0F,$39,$3A,$3B, $0F,$3D,$3E,$0F<br /><br />playersprite:<br />; 1st byte encodes the y position<br />; 2nd byte encodes the tile index loaded into the PPU <br />; 3rd byte encodes any sprite attributes<br />;  76543210<br />;  |||   ||<br />;  |||   ++- Color Palette of sprite.  Choose which set of 4 from the 16 colors to use<br />;  |||<br />;  ||+------ Priority (0: in front of background; 1: behind background)<br />;  |+------- Flip sprite horizontally<br />;  +-------- Flip sprite vertically<br />; 4th byte encodes the x position<br /><br />     ;vert tile attr horiz<br />  .db $80, $00, $00, $80   ;sprite 0<br />  .db $80, $01, $00, $88   ;sprite 1<br />  .db $80, $02, $00, $90   ;sprite 2<br />  .db $88, $10, $00, $80   ;sprite 3<br />  .db $88, $11, $00, $88   ;sprite 4<br />  .db $88, $12, $00, $90   ;sprite 5<br />  .db $90, $21, $00, $88   ;sprite 6<br /><br />playerspriteoffset:<br />      ;x   y<br />  .db $F8, $F0; (-8, -16)<br />  .db $00, $F0; (0,  -16)<br />  .db $08, $F0; (8 , -16)<br />  .db $F8, $F8; (-8, -8) <br />  .db $00, $F8; (0,  -8)<br />  .db $08, $F8; (8,  -8)<br />  .db $00, $00; (0,  0)  <br /><br /><br />enemyspriteframe1:<br />  .db $F0, $04, $00, $00<br />  .db $F0, $05, $00, $08<br /><br />enemyspriteframe2:<br />  .db $F0, $14, $00, $00<br />  .db $F0, $15, $00, $08<br /><br />enemyspriteoffset:<br />  .db $00, $00<br />  .db $00, $08<br /><br />background:<br />  ; nametable 960 bytes long for the background<br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br /><br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br /><br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br /><br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  ;.db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br /><br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br /><br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br /><br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />    <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  <br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;row 1<br />  .db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11  ;;all sky<br /><br />  .db $00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01<br />  .db $00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01  ;;ground<br /><br />  .db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  .db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10  ;; dirt<br /><br />  .db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  .db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10  ;; dirt<br />  <br />  .db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10<br />  .db $10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10  ;; dirt<br /><br />attribute:<br />   ; 64 bytes following a nametable<br />  ;.db $C7,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br />  .db $00,$00,$00,$00, $00,$00,$00,$00<br /><br /><br /><br /><br />; Load in level columns<br />; The first 32 bytes is the first column and so on, each byte is sprite index<br />;columnData:<br />  ;.incbin &quot;level.bin&quot;<br /><br />; Load column sprite attributes<br />; TODO how is this defined?<br />;attribData:<br />  ;.incbin &quot;attr.bin&quot;<br /><br /><br />;;;;;;;;;;;;;;  <br />; Define interrupt vectors at the top of memory $FFFF<br />; Basically registering callbacks for different functions NMI, RESET, IRQ<br />; .org means starting at $FFFA<br />; .dw means store dataword, in the NES that means 16 bits 2 bytes<br />; stores in little endian order, superior ordering <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> least sig byte first<br /><br />  .bank 1<br />  .org $FFFA     ;first of the three vectors starts here<br />nescallback:<br />  ; after this $FFFA + 2 = $FFFC<br />  .dw MAINLOOP      ;when an NMI happens (once per frame if enabled) the <br />                   ;processor will jump to the label NMI:<br />  ; after this $FFFC + 2 = $FFFE<br />  .dw RESET      ;when the processor first turns on or is reset, it will jump<br />                   ;to the label RESET:<br />  ; after this $FFFC + 1 = $FFFF <br />  .dw 0          ;external interrupt IRQ is not used in this tutorial<br />  <br />  <br />;;;;;;;;;;;;;;  <br />; Load in external sprite or audio data<br />  <br />  .bank 2<br />  .org $0000<br />  .incbin &quot;art.chr&quot;   ;includes 8KB graphics file<br /><br />disassembled code<br /><br /><span style="font-size: 200%; line-height: normal">[size=200][size=50][size=85][size=85][size=200]</span>[/size][/size][/size][/size][/size]                  * = 0000<br />0000   E1 EC      SBC ($EC,X)<br />0002   1E A0 E1   ASL $E1A0,X<br />0005   E0 00      CPX #$00<br />0007   0C         ???<br />0008   1A         ???<br />0009   E1 AE      SBC ($AE,X)<br />000B   1A         ???<br />000C   E1 AE      SBC ($AE,X)<br />000E   1C         ???<br />000F   E1 1A      SBC ($1A,X)<br />0011   1D 1A 1E   ORA $1E1A,X<br />0014   E1 EE      SBC ($EE,X)<br />0016   1B         ???<br />0017   AC D1 BA   LDY $BAD1<br />001A   CD 1C E1   CMP $E11C<br />001D   CE 1C 1A   DEC $1A1C<br />0020   EA         NOP<br />0021   BE 1C 1C   LDX $1C1C,Y<br />0024   1C         ???<br />0025   E1 CE      SBC ($CE,X)<br />0027   1C         ???<br />0028   BE 1B A0   LDX $A01B,Y<br />002B   C0 00      CPY #$00<br />002D   EE EC DD   INC $DDEC<br />0030   40         RTI<br />0031   40         RTI<br />0032   17         ???<br />0033   DF         ???<br />0034   F2         ???<br />0035   00         BRK<br />0036   02         ???<br />0037   00         BRK<br />0038   14         ???<br />0039   01 0B      ORA ($0B,X)<br />003B   AA         TAX<br />003C   1B         ???<br />003D   20 02 BB   JSR $BB02<br />0040   AA         TAX<br />0041   1C         ???<br />0042   ED A0 0A   SBC $0AA0<br />0045   00         BRK<br />0046   00         BRK<br />0047   A0 10      LDY #$10<br />0049   0A         ASL A<br />004A   03         ???<br />004B   00         BRK<br />004C   A0 40      LDY #$40<br />004E   0A         ASL A<br />004F   05 00      ORA $00<br />0051   A0 60      LDY #$60<br />0053   0A         ASL A<br />0054   07         ???<br />0055   00         BRK<br />0056   DA         ???<br />0057   FE A0 20   INC $20A0,X<br />005A   0B         ???<br />005B   EC EB AA   CPX $AAEB<br />005E   2B         ???<br />005F   20 02 BB   JSR $BB02<br />0062   AA         TAX<br />0063   2A         ROL A<br />0064   DA         ???<br />0065   EE DA 20   INC $20DA<br />0068   02         ???<br />0069   DA         ???<br />006A   3F         ???<br />006B   A2 00      LDX #$00<br />006D   6D A0 0A   ADC $0AA0<br />0070   20 06 D0   JSR $D006<br />0073   0A         ASL A<br />0074   DA         ???<br />0075   EE DA AE   INC $AEDA<br />0078   EA         NOP<br />0079   20 07 C2   JSR $C207<br />007C   0B         ???<br />007D   EA         NOP<br />007E   DA         ???<br />007F   EE AD ED   INC $EDAD<br />0082   00         BRK<br />0083   AD ED AA   LDA $AAED<br />0086   EE A0 20   INC $20A0<br />0089   0C         ???<br />008A   1C         ???<br />008B   BE AD EA   LDX $EAAD,Y<br />008E   DB         ???<br />008F   AC DD A2   LDY $A2DD<br />0092   00         BRK<br />0093   2D A2 0A   AND $0AA2<br />0096   20 06 DA   JSR $DA06<br />0099   00         BRK<br />009A   A2 00      LDX #$00<br />009C   6D 00 DA   ADC $DA00<br />009F   BA         TSX<br />00A0   CD AB AC   CMP $ACAB<br />00A3   DD AB AC   CMP $ACAB,X<br />00A6   DA         ???<br />00A7   BA         TSX<br />00A8   CD DA C0   CMP $C0DA<br />00AB   AC ED A0   LDY $A0ED<br />00AE   3A         ???<br />00AF   CE D0 0A   DEC $0AD0<br />00B2   DB         ???<br />00B3   AC DD AB   LDY $ABDD<br />00B6   AC DA 20   LDY $20DA<br />00B9   07         ???<br />00BA   DA         ???<br />00BB   BA         TSX<br />00BC   CD CC AD   CMP $ADCC<br />00BF   C0 1A      CPY #$1A<br />00C1   BA         TSX<br />00C2   CD DA BA   CMP $BADA<br />00C5   CD AD C0   CMP $C0AD<br />00C8   0A         ASL A<br />00C9   BA         TSX<br />00CA   CD DA CE   CMP $CEDA<br />00CD   EC BC 01   CPX $01BC<br />00D0   AC ED AC   LDY $ACED<br />00D3   EB         ???<br />00D4   C0 0A      CPY #$0A<br />00D6   CE DA CE   DEC $CEDA<br />00D9   C0 0B      CPY #$0B<br />00DB   EA         NOP<br />00DC   DB         ???<br />00DD   AC DD AC   LDY $ACDD<br />00E0   EC 00 BE   CPX $BE00<br />00E3   AD BA CD   LDA $CDBA<br />00E6   AD AB ED   LDA $EDAB<br />00E9   A2 00      LDX #$00<br />00EB   2D A2 3A   AND $3AA2<br />00EE   20 06 DA   JSR $DA06<br />00F1   C0 A2      CPY #$A2<br />00F3   00         BRK<br />00F4   6D 00 AD   ADC $AD00<br />00F7   AB         ???<br />00F8   ED AA BE   SBC $BEAA<br />00FB   A2 00      LDX #$00<br />00FD   7C         ???<br />00FE   40         RTI<br />00FF   BE AD AB   LDX $ABAD,Y<br />0102   ED A1 00   SBC $00A1<br />0105   10 00      BPL $0107<br />0107   0A         ASL A<br />0108   20 00 DA   JSR $DA00<br />010B   00         BRK<br />010C   01 11      ORA ($11,X)<br />010E   10 A2      BPL $00B2<br />0110   00         BRK<br />0111   1A         ???<br />0112   EA         NOP<br />0113   ED A8 0A   SBC $0AA8<br />0116   AE DA 00   LDX $00DA<br />0119   AA         TAX<br />011A   ED AC 8A   SBC $8AAC<br />011D   DD A0 0A   CMP $0AA0,X<br />0120   CE 1A AE   DEC $AE1A<br />0123   AA         TAX<br />0124   EA         NOP<br />0125   CD A0 3A   CMP $3AA0<br />0128   AF         ???<br />0129   EE FE EA   INC $EAFE<br />012C   DA         ???<br />012D   00         BRK<br />012E   A2 00      LDX #$00<br />0130   3D A0 2A   AND $2AA0,X<br />0133   40         RTI<br />0134   14         ???<br />0135   DA         ???<br />0136   DA         ???<br />0137   ED AD AA   SBC $AAAD<br />013A   ED A1 00   SBC $00A1<br />013D   10 00      BPL $013F<br />013F   0A         ASL A<br />0140   20 00 DA   JSR $DA00<br />0143   00         BRK<br />0144   01 11      ORA ($11,X)<br />0146   10 A2      BPL $00EA<br />0148   00         BRK<br />0149   1D A0 0A   ORA $0AA0,X<br />014C   20 05 A2   JSR $A205<br />014F   00         BRK<br />0150   5D AA ED   EOR $EDAA,X<br />0153   00         BRK<br />0154   D0 0D      BNE $0163<br />0156   AA         TAX<br />0157   ED A0 20   SBC $20A0<br />015A   3C         ???<br />015B   CD AA EE   CMP $EEAA<br />015E   FF         ???<br />015F   EA         NOP<br />0160   DC         ???<br />0161   AE A0 20   LDX $20A0<br />0164   3D A0 20   AND $20A0,X<br />0167   0C         ???<br />0168   CD AA EE   CMP $EEAA<br />016B   FF         ???<br />016C   EA         NOP<br />016D   DC         ???<br />016E   AE A0 20   LDX $20A0<br />0171   0C         ???<br />0172   1C         ???<br />0173   BE DA AE   LDX $AEDA,Y<br />0176   DA         ???<br />0177   EE ED 00   INC $00ED<br />017A   D0 0D      BNE $0189<br />017C   AE ED A0   LDX $A0ED<br />017F   20 3C CD   JSR $CD3C<br />0182   AE EE FF   LDX $FFEE<br />0185   EA         NOP<br />0186   DC         ???<br />0187   EE A0 20   INC $20A0<br />018A   3D A0 20   AND $20A0,X<br />018D   0C         ???<br />018E   CD AA EE   CMP $EEAA<br />0191   FF         ???<br />0192   EA         NOP<br />0193   DC         ???<br />0194   EE A0 20   INC $20A0<br />0197   0C         ???<br />0198   08         PHP<br />0199   BE DA EE   LDX $EEDA,Y<br />019C   DA         ???<br />019D   EA         NOP<br />019E   CC EC EE   CPY $EEEC<br />01A1   AD EF EA   LDA $EAEF<br />01A4   DE AD AC   DEC $ACAD,X<br />01A7   CD AE AE   CMP $AEAE<br />01AA   DA         ???<br />01AB   EA         NOP<br />01AC   EC CD AC   CPX $ACCD<br />01AF   C0 AB      CPY #$AB<br />01B1   EA         NOP<br />01B2   DA         ???<br />01B3   AA         TAX<br />01B4   DC         ???<br />01B5   AE AA ED   LDX $EDAA<br />01B8   A0 0A      LDY #$0A<br />01BA   CA         DEX<br />01BB   DA         ???<br />01BC   AE CC AD   LDX $ADCC<br />01BF   CA         DEX<br />01C0   EA         NOP<br />01C1   AE CD BC   LDX $BCCD<br />01C4   AE DA ED   LDX $EDDA<br />01C7   DE DA AE   DEC $AEDA,X<br />01CA   CC AD CA   CPY $CAAD<br />01CD   EA         NOP<br />01CE   AE AE DD   LDX $DDAE<br />01D1   AD AA ED   LDA $EDAA<br />01D4   A0 0A      LDY #$0A<br />01D6   AE AA AE   LDX $AEAA<br />01D9   DD EA CC   CMP $CCEA,X<br />01DC   ED A0 1A   SBC $1AA0<br />01DF   40         RTI<br />01E0   16 DA      ASL $DA,X<br />01E2   00         BRK<br />01E3   A4 01      LDY $01<br />01E5   6C ED 00   JMP ($00ED)<br />01E8   CE DA 40   DEC $40DA<br />01EB   16 AC      ASL $AC,X<br />01ED   E1 C0      SBC ($C0,X)<br />01EF   8B         ???<br />01F0   EC EE AD   CPX $ADEE<br />01F3   DA         ???<br />01F4   CE 1A D0   DEC $D01A<br />01F7   00         BRK<br />01F8   00         BRK<br />01F9   00         BRK<br />01FA   1B         ???<br />01FB   EE AD DE   INC $DEAD<br />01FE   DA         ???<br />01FF   02         ???<br />0200   03         ???<br />0201   CC DA AE   CPY $AEDA<br />0204   AD C0 2A   LDA $2AC0<br />0207   AE EA DD   LDX $DDEA<br />020A   EE AD EF   INC $EFAD<br />020D   DA         ???<br />020E   CE 1A D0   DEC $D01A<br />0211   00         BRK<br />0212   00         BRK<br />0213   01 0B      ORA ($0B,X)<br />0215   EE AD EF   INC $EFAD<br />0218   DE DA 02   DEC $02DA,X<br />021B   03         ???<br />021C   CC DA AE   CPY $AEDA<br />021F   AD CF EA   LDA $EACF<br />0222   AE EA DE   LDX $DEEA<br />0225   FD EE AD   SBC $ADEE,X<br />0228   AD AC E1   LDA $E1AC<br />022B   AD 10 00   LDA $0010<br />022E   00         BRK<br />022F   00         BRK<br />0230   BE EA DA   LDX $DAEA,Y<br />0233   DE DA AC   DEC $ACDA,X<br />0236   01 BE      ORA ($BE,X)<br />0238   EA         NOP<br />0239   DA         ???<br />023A   DE DA DA   DEC $DADA,X<br />023D   AE DA FA   LDX $FADA<br />0240   AA         TAX<br />0241   ED A0 1A   SBC $1AA0<br />0244   AE AD AD   LDX $ADAD<br />0247   EB         ???<br />0248   A1 E0      LDA ($E0,X)<br />024A   00         BRK<br />024B   AE ED B0   LDX $B0ED<br />024E   81 A3      STA ($A3,X)<br />0250   81 80      STA ($80,X)<br />0252   80         ???<br />0253   23         ???<br />0254   83         ???<br />0255   C0 81      CPY #$81<br />0257   C1 51      CMP ($51,X)<br />0259   40         RTI<br />025A   80         ???<br />025B   23         ???<br />025C   82         ???<br />025D   AD B2 12   LDA $12B2<br />0260   C1 11      CMP ($11,X)<br />0262   50 F3      BVC $0257<br />0264   53         ???<br />0265   63         ???<br />0266   70 F3      BVS $025B<br />0268   93         ???<br />0269   A3         ???<br />026A   B0 F3      BCS $025F<br />026C   D3         ???<br />026D   E0 FA      CPX #$FA<br />026F   EE DB 80   INC $80DB<br />0272   00         BRK<br />0273   00         BRK<br />0274   80         ???<br />0275   DB         ???<br />0276   80         ???<br />0277   01 00      ORA ($00,X)<br />0279   88         DEY<br />027A   DB         ???<br />027B   80         ???<br />027C   02         ???<br />027D   00         BRK<br />027E   90 DB      BCC $025B<br />0280   88         DEY<br />0281   10 00      BPL $0283<br />0283   80         ???<br />0284   DB         ???<br />0285   88         DEY<br />0286   11 00      ORA ($00),Y<br />0288   88         DEY<br />0289   DB         ???<br />028A   88         DEY<br />028B   12         ???<br />028C   00         BRK<br />028D   90 DB      BCC $026A<br />028F   90 21      BCC $02B2<br />0291   00         BRK<br />0292   88         DEY<br />0293   AE EF FE   LDX $FEEF<br />0296   DB         ???<br />0297   F8         SED<br />0298   F0 DB      BEQ $0275<br />029A   00         BRK<br />029B   F0 DB      BEQ $0278<br />029D   08         PHP<br />029E   F0 DB      BEQ $027B<br />02A0   F8         SED<br />02A1   F8         SED<br />02A2   DB         ???<br />02A3   00         BRK<br />02A4   F8         SED<br />02A5   DB         ???<br />02A6   08         PHP<br />02A7   F8         SED<br />02A8   DB         ???<br />02A9   00         BRK<br />02AA   00         BRK<br />02AB   EE EF AE   INC $AEEF<br />02AE   1D BF 00   ORA $00BF,X<br />02B1   40         RTI<br />02B2   00         BRK<br />02B3   0D BF 00   ORA $00BF<br />02B6   50 00      BVC $02B8<br />02B8   8E EE FA   STX $FAEE<br />02BB   E2         ???<br />02BC   DB         ???<br />02BD   F0 14      BEQ $02D3<br />02BF   00         BRK<br />02C0   00         BRK<br />02C1   DB         ???<br />02C2   F0 15      BEQ $02D9<br />02C4   00         BRK<br />02C5   08         PHP<br />02C6   EE EF FE   INC $FEEF<br />02C9   DB         ???<br />02CA   00         BRK<br />02CB   00         BRK<br />02CC   DB         ???<br />02CD   00         BRK<br />02CE   08         PHP<br />02CF   BA         TSX<br />02D0   CD DB 11   CMP $11DB<br />02D3   11 11      ORA ($11),Y<br />02D5   11 11      ORA ($11),Y<br />02D7   11 11      ORA ($11),Y<br />02D9   11 11      ORA ($11),Y<br />02DB   11 11      ORA ($11),Y<br />02DD   11 11      ORA ($11),Y<br />02DF   11 11      ORA ($11),Y<br />02E1   11 DB      ORA ($DB),Y<br />02E3   11 11      ORA ($11),Y<br />02E5   11 11      ORA ($11),Y<br />02E7   11 11      ORA ($11),Y<br />02E9   11 11      ORA ($11),Y<br />02EB   11 11      ORA ($11),Y<br />02ED   11 11      ORA ($11),Y<br />02EF   11 11      ORA ($11),Y<br />02F1   11 11      ORA ($11),Y<br />02F3   DB         ???<br />02F4   11 11      ORA ($11),Y<br />02F6   11 11      ORA ($11),Y<br />02F8   11 11      ORA ($11),Y<br />02FA   11 11      ORA ($11),Y<br />02FC   11 11      ORA ($11),Y<br />02FE   11 11      ORA ($11),Y<br />0300   11 11      ORA ($11),Y<br />0302   11 11      ORA ($11),Y<br />0304   DB         ???<br />0305   11 11      ORA ($11),Y<br />0307   11 11      ORA ($11),Y<br />0309   11 11      ORA ($11),Y<br />030B   11 11      ORA ($11),Y<br />030D   11 11      ORA ($11),Y<br />030F   11 11      ORA ($11),Y<br />0311   11 11      ORA ($11),Y<br />0313   11 11      ORA ($11),Y<br />0315   DB         ???<br />0316   11 11      ORA ($11),Y<br />0318   11 11      ORA ($11),Y<br />031A   11 11      ORA ($11),Y<br />031C   11 11      ORA ($11),Y<br />031E   11 11      ORA ($11),Y<br />0320   11 11      ORA ($11),Y<br />0322   11 11      ORA ($11),Y<br />0324   11 11      ORA ($11),Y<br />0326   DB         ???<br />0327   11 11      ORA ($11),Y<br />0329   11 11      ORA ($11),Y<br />032B   11 11      ORA ($11),Y<br />032D   11 11      ORA ($11),Y<br />032F   11 11      ORA ($11),Y<br />0331   11 11      ORA ($11),Y<br />0333   11 11      ORA ($11),Y<br />0335   11 11      ORA ($11),Y<br />0337   DB         ???<br />0338   11 11      ORA ($11),Y<br />033A   11 11      ORA ($11),Y<br />033C   11 11      ORA ($11),Y<br />033E   11 11      ORA ($11),Y<br />0340   11 11      ORA ($11),Y<br />0342   11 11      ORA ($11),Y<br />0344   11 11      ORA ($11),Y<br />0346   11 11      ORA ($11),Y<br />0348   DB         ???<br />0349   11 11      ORA ($11),Y<br />034B   11 11      ORA ($11),Y<br />034D   11 11      ORA ($11),Y<br />034F   11 11      ORA ($11),Y<br />0351   11 11      ORA ($11),Y<br />0353   11 11      ORA ($11),Y<br />0355   11 11      ORA ($11),Y<br />0357   11 11      ORA ($11),Y<br />0359   DB         ???<br />035A   11 11      ORA ($11),Y<br />035C   11 11      ORA ($11),Y<br />035E   11 11      ORA ($11),Y<br />0360   11 11      ORA ($11),Y<br />0362   11 11      ORA ($11),Y<br />0364   11 11      ORA ($11),Y<br />0366   11 11      ORA ($11),Y<br />0368   11 11      ORA ($11),Y<br />036A   DB         ???<br />036B   11 11      ORA ($11),Y<br />036D   11 11      ORA ($11),Y<br />036F   11 11      ORA ($11),Y<br />0371   11 11      ORA ($11),Y<br />0373   11 11      ORA ($11),Y<br />0375   11 11      ORA ($11),Y<br />0377   11 11      ORA ($11),Y<br />0379   11 11      ORA ($11),Y<br />037B   DB         ???<br />037C   11 11      ORA ($11),Y<br />037E   11 11      ORA ($11),Y<br />0380   11 11      ORA ($11),Y<br />0382   11 11      ORA ($11),Y<br />0384   11 11      ORA ($11),Y<br />0386   11 11      ORA ($11),Y<br />0388   11 11      ORA ($11),Y<br />038A   11 11      ORA ($11),Y<br />038C   DB         ???<br />038D   11 11      ORA ($11),Y<br />038F   11 11      ORA ($11),Y<br />0391   11 11      ORA ($11),Y<br />0393   11 11      ORA ($11),Y<br />0395   11 11      ORA ($11),Y<br />0397   11 11      ORA ($11),Y<br />0399   11 11      ORA ($11),Y<br />039B   11 11      ORA ($11),Y<br />039D   DB         ???<br />039E   11 11      ORA ($11),Y<br />03A0   11 11      ORA ($11),Y<br />03A2   11 11      ORA ($11),Y<br />03A4   11 11      ORA ($11),Y<br />03A6   11 11      ORA ($11),Y<br />03A8   11 11      ORA ($11),Y<br />03AA   11 11      ORA ($11),Y<br />03AC   11 11      ORA ($11),Y<br />03AE   DB         ???<br />03AF   11 11      ORA ($11),Y<br />03B1   11 11      ORA ($11),Y<br />03B3   11 11      ORA ($11),Y<br />03B5   11 11      ORA ($11),Y<br />03B7   11 11      ORA ($11),Y<br />03B9   11 11      ORA ($11),Y<br />03BB   11 11      ORA ($11),Y<br />03BD   11 11      ORA ($11),Y<br />03BF   DB         ???<br />03C0   11 11      ORA ($11),Y<br />03C2   11 11      ORA ($11),Y<br />03C4   11 11      ORA ($11),Y<br />03C6   11 11      ORA ($11),Y<br />03C8   11 11      ORA ($11),Y<br />03CA   11 11      ORA ($11),Y<br />03CC   11 11      ORA ($11),Y<br />03CE   11 11      ORA ($11),Y<br />03D0   DB         ???<br />03D1   11 11      ORA ($11),Y<br />03D3   11 11      ORA ($11),Y<br />03D5   11 11      ORA ($11),Y<br />03D7   11 11      ORA ($11),Y<br />03D9   11 11      ORA ($11),Y<br />03DB   11 11      ORA ($11),Y<br />03DD   11 11      ORA ($11),Y<br />03DF   11 11      ORA ($11),Y<br />03E1   DB         ???<br />03E2   11 11      ORA ($11),Y<br />03E4   11 11      ORA ($11),Y<br />03E6   11 11      ORA ($11),Y<br />03E8   11 11      ORA ($11),Y<br />03EA   11 11      ORA ($11),Y<br />03EC   11 11      ORA ($11),Y<br />03EE   11 11      ORA ($11),Y<br />03F0   11 11      ORA ($11),Y<br />03F2   DB         ???<br />03F3   11 11      ORA ($11),Y<br />03F5   11 11      ORA ($11),Y<br />03F7   11 11      ORA ($11),Y<br />03F9   11 11      ORA ($11),Y<br />03FB   11 11      ORA ($11),Y<br />03FD   11 11      ORA ($11),Y<br />03FF   11 11      ORA ($11),Y<br />0401   11 11      ORA ($11),Y<br />0403   DB         ???<br />0404   11 11      ORA ($11),Y<br />0406   11 11      ORA ($11),Y<br />0408   11 11      ORA ($11),Y<br />040A   11 11      ORA ($11),Y<br />040C   11 11      ORA ($11),Y<br />040E   11 11      ORA ($11),Y<br />0410   11 11      ORA ($11),Y<br />0412   11 11      ORA ($11),Y<br />0414   DB         ???<br />0415   11 11      ORA ($11),Y<br />0417   11 11      ORA ($11),Y<br />0419   11 11      ORA ($11),Y<br />041B   11 11      ORA ($11),Y<br />041D   11 11      ORA ($11),Y<br />041F   11 11      ORA ($11),Y<br />0421   11 11      ORA ($11),Y<br />0423   11 11      ORA ($11),Y<br />0425   DB         ???<br />0426   11 11      ORA ($11),Y<br />0428   11 11      ORA ($11),Y<br />042A   11 11      ORA ($11),Y<br />042C   11 11      ORA ($11),Y<br />042E   11 11      ORA ($11),Y<br />0430   11 11      ORA ($11),Y<br />0432   11 11      ORA ($11),Y<br />0434   11 11      ORA ($11),Y<br />0436   DB         ???<br />0437   11 11      ORA ($11),Y<br />0439   11 11      ORA ($11),Y<br />043B   11 11      ORA ($11),Y<br />043D   11 11      ORA ($11),Y<br />043F   11 11      ORA ($11),Y<br />0441   11 11      ORA ($11),Y<br />0443   11 11      ORA ($11),Y<br />0445   11 11      ORA ($11),Y<br />0447   DB         ???<br />0448   11 11      ORA ($11),Y<br />044A   11 11      ORA ($11),Y<br />044C   11 11      ORA ($11),Y<br />044E   11 11      ORA ($11),Y<br />0450   11 11      ORA ($11),Y<br />0452   11 11      ORA ($11),Y<br />0454   11 11      ORA ($11),Y<br />0456   11 11      ORA ($11),Y<br />0458   DB         ???<br />0459   11 11      ORA ($11),Y<br />045B   11 11      ORA ($11),Y<br />045D   11 11      ORA ($11),Y<br />045F   11 11      ORA ($11),Y<br />0461   11 11      ORA ($11),Y<br />0463   11 11      ORA ($11),Y<br />0465   11 11      ORA ($11),Y<br />0467   11 11      ORA ($11),Y<br />0469   DB         ???<br />046A   11 11      ORA ($11),Y<br />046C   11 11      ORA ($11),Y<br />046E   11 11      ORA ($11),Y<br />0470   11 11      ORA ($11),Y<br />0472   11 11      ORA ($11),Y<br />0474   11 11      ORA ($11),Y<br />0476   11 11      ORA ($11),Y<br />0478   11 11      ORA ($11),Y<br />047A   DB         ???<br />047B   11 11      ORA ($11),Y<br />047D   11 11      ORA ($11),Y<br />047F   11 11      ORA ($11),Y<br />0481   11 11      ORA ($11),Y<br />0483   11 11      ORA ($11),Y<br />0485   11 11      ORA ($11),Y<br />0487   11 11      ORA ($11),Y<br />0489   11 11      ORA ($11),Y<br />048B   DB         ???<br />048C   11 11      ORA ($11),Y<br />048E   11 11      ORA ($11),Y<br />0490   11 11      ORA ($11),Y<br />0492   11 11      ORA ($11),Y<br />0494   11 11      ORA ($11),Y<br />0496   11 11      ORA ($11),Y<br />0498   11 11      ORA ($11),Y<br />049A   11 11      ORA ($11),Y<br />049C   DB         ???<br />049D   11 11      ORA ($11),Y<br />049F   11 11      ORA ($11),Y<br />04A1   11 11      ORA ($11),Y<br />04A3   11 11      ORA ($11),Y<br />04A5   11 11      ORA ($11),Y<br />04A7   11 11      ORA ($11),Y<br />04A9   11 11      ORA ($11),Y<br />04AB   11 11      ORA ($11),Y<br />04AD   DB         ???<br />04AE   11 11      ORA ($11),Y<br />04B0   11 11      ORA ($11),Y<br />04B2   11 11      ORA ($11),Y<br />04B4   11 11      ORA ($11),Y<br />04B6   11 11      ORA ($11),Y<br />04B8   11 11      ORA ($11),Y<br />04BA   11 11      ORA ($11),Y<br />04BC   11 11      ORA ($11),Y<br />04BE   DB         ???<br />04BF   11 11      ORA ($11),Y<br />04C1   11 11      ORA ($11),Y<br />04C3   11 11      ORA ($11),Y<br />04C5   11 11      ORA ($11),Y<br />04C7   11 11      ORA ($11),Y<br />04C9   11 11      ORA ($11),Y<br />04CB   11 11      ORA ($11),Y<br />04CD   11 11      ORA ($11),Y<br />04CF   DB         ???<br />04D0   11 11      ORA ($11),Y<br />04D2   11 11      ORA ($11),Y<br />04D4   11 11      ORA ($11),Y<br />04D6   11 11      ORA ($11),Y<br />04D8   11 11      ORA ($11),Y<br />04DA   11 11      ORA ($11),Y<br />04DC   11 11      ORA ($11),Y<br />04DE   11 11      ORA ($11),Y<br />04E0   DB         ???<br />04E1   11 11      ORA ($11),Y<br />04E3   11 11      ORA ($11),Y<br />04E5   11 11      ORA ($11),Y<br />04E7   11 11      ORA ($11),Y<br />04E9   11 11      ORA ($11),Y<br />04EB   11 11      ORA ($11),Y<br />04ED   11 11      ORA ($11),Y<br />04EF   11 11      ORA ($11),Y<br />04F1   DB         ???<br />04F2   11 11      ORA ($11),Y<br />04F4   11 11      ORA ($11),Y<br />04F6   11 11      ORA ($11),Y<br />04F8   11 11      ORA ($11),Y<br />04FA   11 11      ORA ($11),Y<br />04FC   11 11      ORA ($11),Y<br />04FE   11 11      ORA ($11),Y<br />0500   11 11      ORA ($11),Y<br />0502   DB         ???<br />0503   11 11      ORA ($11),Y<br />0505   11 11      ORA ($11),Y<br />0507   11 11      ORA ($11),Y<br />0509   11 11      ORA ($11),Y<br />050B   11 11      ORA ($11),Y<br />050D   11 11      ORA ($11),Y<br />050F   11 11      ORA ($11),Y<br />0511   11 11      ORA ($11),Y<br />0513   DB         ???<br />0514   11 11      ORA ($11),Y<br />0516   11 11      ORA ($11),Y<br />0518   11 11      ORA ($11),Y<br />051A   11 11      ORA ($11),Y<br />051C   11 11      ORA ($11),Y<br />051E   11 11      ORA ($11),Y<br />0520   11 11      ORA ($11),Y<br />0522   11 11      ORA ($11),Y<br />0524   DB         ???<br />0525   11 11      ORA ($11),Y<br />0527   11 11      ORA ($11),Y<br />0529   11 11      ORA ($11),Y<br />052B   11 11      ORA ($11),Y<br />052D   11 11      ORA ($11),Y<br />052F   11 11      ORA ($11),Y<br />0531   11 11      ORA ($11),Y<br />0533   11 11      ORA ($11),Y<br />0535   DB         ???<br />0536   11 11      ORA ($11),Y<br />0538   11 11      ORA ($11),Y<br />053A   11 11      ORA ($11),Y<br />053C   11 11      ORA ($11),Y<br />053E   11 11      ORA ($11),Y<br />0540   11 11      ORA ($11),Y<br />0542   11 11      ORA ($11),Y<br />0544   11 11      ORA ($11),Y<br />0546   DB         ???<br />0547   11 11      ORA ($11),Y<br />0549   11 11      ORA ($11),Y<br />054B   11 11      ORA ($11),Y<br />054D   11 11      ORA ($11),Y<br />054F   11 11      ORA ($11),Y<br />0551   11 11      ORA ($11),Y<br />0553   11 11      ORA ($11),Y<br />0555   11 11      ORA ($11),Y<br />0557   DB         ???<br />0558   11 11      ORA ($11),Y<br />055A   11 11      ORA ($11),Y<br />055C   11 11      ORA ($11),Y<br />055E   11 11      ORA ($11),Y<br />0560   11 11      ORA ($11),Y<br />0562   11 11      ORA ($11),Y<br />0564   11 11      ORA ($11),Y<br />0566   11 11      ORA ($11),Y<br />0568   DB         ???<br />0569   11 11      ORA ($11),Y<br />056B   11 11      ORA ($11),Y<br />056D   11 11      ORA ($11),Y<br />056F   11 11      ORA ($11),Y<br />0571   11 11      ORA ($11),Y<br />0573   11 11      ORA ($11),Y<br />0575   11 11      ORA ($11),Y<br />0577   11 11      ORA ($11),Y<br />0579   DB         ???<br />057A   11 11      ORA ($11),Y<br />057C   11 11      ORA ($11),Y<br />057E   11 11      ORA ($11),Y<br />0580   11 11      ORA ($11),Y<br />0582   11 11      ORA ($11),Y<br />0584   11 11      ORA ($11),Y<br />0586   11 11      ORA ($11),Y<br />0588   11 11      ORA ($11),Y<br />058A   DB         ???<br />058B   11 11      ORA ($11),Y<br />058D   11 11      ORA ($11),Y<br />058F   11 11      ORA ($11),Y<br />0591   11 11      ORA ($11),Y<br />0593   11 11      ORA ($11),Y<br />0595   11 11      ORA ($11),Y<br />0597   11 11      ORA ($11),Y<br />0599   11 11      ORA ($11),Y<br />059B   DB         ???<br />059C   11 11      ORA ($11),Y<br />059E   11 11      ORA ($11),Y<br />05A0   11 11      ORA ($11),Y<br />05A2   11 11      ORA ($11),Y<br />05A4   11 11      ORA ($11),Y<br />05A6   11 11      ORA ($11),Y<br />05A8   11 11      ORA ($11),Y<br />05AA   11 11      ORA ($11),Y<br />05AC   DB         ???<br />05AD   11 11      ORA ($11),Y<br />05AF   11 11      ORA ($11),Y<br />05B1   11 11      ORA ($11),Y<br />05B3   11 11      ORA ($11),Y<br />05B5   11 11      ORA ($11),Y<br />05B7   11 11      ORA ($11),Y<br />05B9   11 11      ORA ($11),Y<br />05BB   11 11      ORA ($11),Y<br />05BD   DB         ???<br />05BE   11 11      ORA ($11),Y<br />05C0   11 11      ORA ($11),Y<br />05C2   11 11      ORA ($11),Y<br />05C4   11 11      ORA ($11),Y<br />05C6   11 11      ORA ($11),Y<br />05C8   11 11      ORA ($11),Y<br />05CA   11 11      ORA ($11),Y<br />05CC   11 11      ORA ($11),Y<br />05CE   DB         ???<br />05CF   11 11      ORA ($11),Y<br />05D1   11 11      ORA ($11),Y<br />05D3   11 11      ORA ($11),Y<br />05D5   11 11      ORA ($11),Y<br />05D7   11 11      ORA ($11),Y<br />05D9   11 11      ORA ($11),Y<br />05DB   11 11      ORA ($11),Y<br />05DD   11 11      ORA ($11),Y<br />05DF   DB         ???<br />05E0   11 11      ORA ($11),Y<br />05E2   11 11      ORA ($11),Y<br />05E4   11 11      ORA ($11),Y<br />05E6   11 11      ORA ($11),Y<br />05E8   11 11      ORA ($11),Y<br />05EA   11 11      ORA ($11),Y<br />05EC   11 11      ORA ($11),Y<br />05EE   11 11      ORA ($11),Y<br />05F0   DB         ???<br />05F1   11 11      ORA ($11),Y<br />05F3   11 11      ORA ($11),Y<br />05F5   11 11      ORA ($11),Y<br />05F7   11 11      ORA ($11),Y<br />05F9   11 11      ORA ($11),Y<br />05FB   11 11      ORA ($11),Y<br />05FD   11 11      ORA ($11),Y<br />05FF   11 11      ORA ($11),Y<br />0601   DB         ???<br />0602   11 11      ORA ($11),Y<br />0604   11 11      ORA ($11),Y<br />0606   11 11      ORA ($11),Y<br />0608   11 11      ORA ($11),Y<br />060A   11 11      ORA ($11),Y<br />060C   11 11      ORA ($11),Y<br />060E   11 11      ORA ($11),Y<br />0610   11 11      ORA ($11),Y<br />0612   DB         ???<br />0613   11 11      ORA ($11),Y<br />0615   11 11      ORA ($11),Y<br />0617   11 11      ORA ($11),Y<br />0619   11 11      ORA ($11),Y<br />061B   11 11      ORA ($11),Y<br />061D   11 11      ORA ($11),Y<br />061F   11 11      ORA ($11),Y<br />0621   11 11      ORA ($11),Y<br />0623   DB         ???<br />0624   11 11      ORA ($11),Y<br />0626   11 11      ORA ($11),Y<br />0628   11 11      ORA ($11),Y<br />062A   11 11      ORA ($11),Y<br />062C   11 11      ORA ($11),Y<br />062E   11 11      ORA ($11),Y<br />0630   11 11      ORA ($11),Y<br />0632   11 11      ORA ($11),Y<br />0634   DB         ???<br />0635   11 11      ORA ($11),Y<br />0637   11 11      ORA ($11),Y<br />0639   11 11      ORA ($11),Y<br />063B   11 11      ORA ($11),Y<br />063D   11 11      ORA ($11),Y<br />063F   11 11      ORA ($11),Y<br />0641   11 11      ORA ($11),Y<br />0643   11 11      ORA ($11),Y<br />0645   DB         ???<br />0646   00         BRK<br />0647   01 00      ORA ($00,X)<br />0649   01 00      ORA ($00,X)<br />064B   01 00      ORA ($00,X)<br />064D   01 00      ORA ($00,X)<br />064F   01 00      ORA ($00,X)<br />0651   01 00      ORA ($00,X)<br />0653   01 00      ORA ($00,X)<br />0655   01 DB      ORA ($DB,X)<br />0657   00         BRK<br />0658   01 00      ORA ($00,X)<br />065A   01 00      ORA ($00,X)<br />065C   01 00      ORA ($00,X)<br />065E   01 00      ORA ($00,X)<br />0660   01 00      ORA ($00,X)<br />0662   01 00      ORA ($00,X)<br />0664   01 00      ORA ($00,X)<br />0666   01 DB      ORA ($DB,X)<br />0668   10 10      BPL $067A<br />066A   10 10      BPL $067C<br />066C   10 10      BPL $067E<br />066E   10 10      BPL $0680<br />0670   10 10      BPL $0682<br />0672   10 10      BPL $0684<br />0674   10 10      BPL $0686<br />0676   10 10      BPL $0688<br />0678   DB         ???<br />0679   10 10      BPL $068B<br />067B   10 10      BPL $068D<br />067D   10 10      BPL $068F<br />067F   10 10      BPL $0691<br />0681   10 10      BPL $0693<br />0683   10 10      BPL $0695<br />0685   10 10      BPL $0697<br />0687   10 10      BPL $0699<br />0689   DB         ???<br />068A   10 10      BPL $069C<br />068C   10 10      BPL $069E<br />068E   10 10      BPL $06A0<br />0690   10 10      BPL $06A2<br />0692   10 10      BPL $06A4<br />0694   10 10      BPL $06A6<br />0696   10 10      BPL $06A8<br />0698   10 10      BPL $06AA<br />069A   DB         ???<br />069B   10 10      BPL $06AD<br />069D   10 10      BPL $06AF<br />069F   10 10      BPL $06B1<br />06A1   10 10      BPL $06B3<br />06A3   10 10      BPL $06B5<br />06A5   10 10      BPL $06B7<br />06A7   10 10      BPL $06B9<br />06A9   10 10      BPL $06BB<br />06AB   DB         ???<br />06AC   10 10      BPL $06BE<br />06AE   10 10      BPL $06C0<br />06B0   10 10      BPL $06C2<br />06B2   10 10      BPL $06C4<br />06B4   10 10      BPL $06C6<br />06B6   10 10      BPL $06C8<br />06B8   10 10      BPL $06CA<br />06BA   10 10      BPL $06CC<br />06BC   DB         ???<br />06BD   10 10      BPL $06CF<br />06BF   10 10      BPL $06D1<br />06C1   10 10      BPL $06D3<br />06C3   10 10      BPL $06D5<br />06C5   10 10      BPL $06D7<br />06C7   10 10      BPL $06D9<br />06C9   10 10      BPL $06DB<br />06CB   10 10      BPL $06DD<br />06CD   AB         ???<br />06CE   ED B0 00   SBC $00B0<br />06D1   00         BRK<br />06D2   00         BRK<br />06D3   00         BRK<br />06D4   00         BRK<br />06D5   00         BRK<br />06D6   00         BRK<br />06D7   0D B0 00   ORA $00B0<br />06DA   00         BRK<br />06DB   00         BRK<br />06DC   00         BRK<br />06DD   00         BRK<br />06DE   00         BRK<br />06DF   00         BRK<br />06E0   0D B0 00   ORA $00B0<br />06E3   00         BRK<br />06E4   00         BRK<br />06E5   00         BRK<br />06E6   00         BRK<br />06E7   00         BRK<br />06E8   00         BRK<br />06E9   0D B0 00   ORA $00B0<br />06EC   00         BRK<br />06ED   00         BRK<br />06EE   00         BRK<br />06EF   00         BRK<br />06F0   00         BRK<br />06F1   00         BRK<br />06F2   0D B0 00   ORA $00B0<br />06F5   00         BRK<br />06F6   00         BRK<br />06F7   00         BRK<br />06F8   00         BRK<br />06F9   00         BRK<br />06FA   00         BRK<br />06FB   0D B0 00   ORA $00B0<br />06FE   00         BRK<br />06FF   00         BRK<br />0700   00         BRK<br />0701   00         BRK<br />0702   00         BRK<br />0703   00         BRK<br />0704   0D B0 00   ORA $00B0<br />0707   00         BRK<br />0708   00         BRK<br />0709   00         BRK<br />070A   00         BRK<br />070B   00         BRK<br />070C   00         BRK<br />070D   0D B0 00   ORA $00B0<br />0710   00         BRK<br />0711   00         BRK<br />0712   00         BRK<br />0713   00         BRK<br />0714   00         BRK<br />0715   00         BRK<br />0716   0B         ???<br />0717   A1 FF      LDA ($FF,X)<br />0719   FA         ???<br />071A   EC AB AC   CPX $ACAB<br />071D   DA         ???<br />071E   DE ED 0B   DEC $0BED,X<br />0721   A2 00      LDX #$00<br />0723   00         BRK<br />0724   CB         ???<br />0725   AC 00 00   LDY $0000<br />0728              .END

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu May 10, 2018 7:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: open source code not working help</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. Please ask a question. Do not expect anyone here to want to figure out what you're trying to do from just a big pile of code dumped into a forum post.<br /><br />2. It is better to attach large blocks of code as a file, or as a pastebin link.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Thu May 10, 2018 8:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: open source code not working help</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">2. It is better to attach large blocks of code as a file, or as a pastebin link.</div><br />Or at least enclose it in a [code] block so that we don't have to scroll down 35 pages just to get to the first reply...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Thu May 10, 2018 8:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: open source code not working help</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">1. Please ask a question. Do not expect anyone here to want to figure out what you're trying to do from just a big pile of code dumped into a forum post.</div><br />Also, please make the question more descriptive than &quot;why isn't it working?&quot;. When all you say is that something is &quot;not working&quot;, it's virtually impossible for anyone to actually know what you're having a problem with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu May 10, 2018 9:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: open source code not working help</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Should I dare mention that the disassembly is being done from the wrong origin address?  That honestly looks like CHR data, not PRG data.  Source is intended for use with NESASM (version unknown; it matters).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.inesprg 1 ; 1x 16KB PRG code<br />.ineschr 1 ; 1x 8KB CHR data<br />.inesmap 0 ; mapper 0 = NROM, no bank swapping<br />.inesmir 1 ; background mirroring<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.bank 0 ; NESASM arranges things into 8KB chunks, this is chunk 0<br />.org $C000 ; Tells the assembler where to start in this 8kb chunk<br />RESET:<br />SEI ; disable IRQs<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.bank 1<br />.org $FFFA ;first of the three vectors starts here<br />nescallback:<br />; after this $FFFA + 2 = $FFFC<br />.dw MAINLOOP ;when an NMI happens (once per frame if enabled) the <br />;processor will jump to the label NMI:<br />; after this $FFFC + 2 = $FFFE<br />.dw RESET ;when the processor first turns on or is reset, it will jump<br />;to the label RESET:<br />; after this $FFFC + 1 = $FFFF <br />.dw 0 ;external interrupt IRQ is not used in this tutorial<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Load in external sprite or audio data<br />.bank 2<br />.org $0000<br />.incbin &quot;art.chr&quot; ;includes 8KB graphics file<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>