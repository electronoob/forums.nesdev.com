<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How NES Music Was REALLY Composed</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How NES Music Was REALLY Composed</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=7390">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=7390</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlbertoG</b> [ Sat Feb 05, 2011 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Neil! it's good to see you <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />Seems you have been around here for some time, 429 posts wow! I have much to read <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />I'm writing some comments to the source code I posted before. With my turtle-slow rubbish English abilities it will take me some time to finish.
<br />
<br />Cheers,
<br />Alberto

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sun Feb 06, 2011 10:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Er, what is your native language?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Feb 06, 2011 11:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is written in his profile information.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlbertoG</b> [ Sun Feb 06, 2011 11:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My native language is Spanish.
<br />
<br />Once it's posted doesn't seem that difficult, but I write English pretty slow, just to be sure I don't make many mistakes. Then I see how miserably I fail sometimes.  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlbertoG</b> [ Sun Feb 06, 2011 11:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, here is the commented source code.
<br />
<br />I'm sure you all know that, but let me just remind you that in those times we had severe memory restrictions for both RAM and ROM, so the sound driver and the song data had to be designed to occupy the less bytes possible.
<br />
<br />This is the initialization routine, very simple. It uses macros to set the song sound driver pointers to the data of this particular song. You can see how channels 1, 2 and 3 are set to GOMEL, GOCHRD and GOBASS tables.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GAMEOVER&nbsp; &nbsp;INCHA&nbsp; &nbsp;GOMEL<br />&nbsp; &nbsp;INCHB&nbsp; &nbsp;GOCHRD<br />&nbsp; &nbsp;INCHC&nbsp; &nbsp;GOBASS<br />&nbsp; &nbsp;RTS<br /></div><br /><br />This is the table of tracks for channel 1. Since it's a very short tune it only lists one track. In a longer song it would address many more tracks or “chunks” of data. This is a never ending tune, so the final data instructs the driver to repeat the same table again and again.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOMEL&nbsp; &nbsp;DW&nbsp; &nbsp;GOMEL1<br />&nbsp; &nbsp;DW&nbsp; &nbsp;0,GOMEL<br /></div><br /><br />Same for channel 2.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOCHRD&nbsp; &nbsp;DW&nbsp; &nbsp;GOCHRD1<br />&nbsp; &nbsp;DW&nbsp; &nbsp;0,GOCHRD<br /></div><br /><br />Same for channel 3.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOBASS&nbsp; &nbsp;DW&nbsp; &nbsp;GOBASS1<br />&nbsp; &nbsp;DW&nbsp; &nbsp;0,GOBASS<br /></div><br /><br />This is the “real” data of the song, and this concretely is what I used to call the Bass Track, because it would contain mostly the bass notes. With the NES you were almost forced to use the triangle wave channel always for the bass part.<br /><br />The first command (VIB,0,4,5) tells the driver to set a vibrato with 0 initial delay, 4 depth and a speed of 5 frames. The second command (TRA,-2) sets this track to transpose the notes down 2 semitones.<br /><br />The next line (PERC 10, GOPERC) initializes a drum track with a note length of 10 for each sound. Since drum sequences are usually cyclic, I used to “invoke” drum tracks and breaks from any of the other tracks (usually the bass track), at any time, instead of having a separated table with all the drum sequences. This reduced the amount of data in the song.<br /><br />Next, there is a note length command (L40) which tells the driver to set the note length to 40 video frames.<br /><br />The rest of the data are notes, and tied notes (__), which just leave the last note sounding for the last length set, in this case 40.<br /><br />The last command (XM) marks the end of the track.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOBASS1&nbsp; &nbsp;DB&nbsp; &nbsp;VIB,0,4,5,TRA,-2<br />&nbsp; &nbsp;PERC&nbsp; &nbsp;10,GOPERC<br />&nbsp; &nbsp;DB&nbsp; &nbsp;L40<br />&nbsp; &nbsp;DB&nbsp; &nbsp;a1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,g1<br />&nbsp; &nbsp;DB&nbsp; &nbsp;e1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,e1<br /><br />&nbsp; &nbsp;DB&nbsp; &nbsp;a1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,g1<br />&nbsp; &nbsp;DB&nbsp; &nbsp;e1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,g1<br /><br />&nbsp; &nbsp;DB&nbsp; &nbsp;d1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,d2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;a1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,a1<br />&nbsp; &nbsp;DB&nbsp; &nbsp;d1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,d2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;e1,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;gs1,B1<br />&nbsp; &nbsp;DB&nbsp; &nbsp;XM<br /></div><br /><br />This is what I used to call the Chord Track, because it would contain most of the chords of the song, in the form of those fast arpeggios that made European chip music so distinctive.<br /><br />The first command (L10) sets the length note to 10 frames.<br /><br />The second command (SENV,$D1,3,$64) sets a volume envelope for the sound. The volume envelope routines of my NES and Game Boy drivers were very similar, so I could share code between them, but in the Game Boy I used hardware envelopes (because of hardware restrictions, nasty noises when changing volume), and in the NES I used a simulation by software.<br /><br />The next command (W1) instructs the channel to set the square waveform to 25% duty. W0 was 50% and W2 12.5% I think.<br /><br />Next there is an arpeggio command (EF0 to EF15). The arpeggios were defined globally for all the songs and consisted basically on tables of sequential notes used to transpose the current note. One arpeggio would contain a major chord (C,E,G,RET), other a minor chord (C,Ds,G,RET), and others may not contain a chord at all, only transpositions to different octaves. The transposition tables could be cyclic or not, depending on the final command (RET or END). This was another technique to reduce song data, since you didn't need to specify all the notes for a chord, only the root note and the chord type (if different than the previous one).<br /><br />The next command (DO2 to DO8) instructs the driver to repeat 2 times the block of data found between this and the next LOP command. This was used to reduce the size of the song data too.<br /><br />Next there is a “procedure” command (P1 to P9). Those commands were used to execute a portion of assembler code which modified whatever was needed in the sound driver. In this case I'm using the procedures to change the “instrument” of the song (sort of hard coded program change).<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOCHRD1&nbsp; &nbsp;DB&nbsp; &nbsp;L10,SENV,$D1,3,$64,W1,EF1<br /><br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,a2,P3,c3,e3,a3,c4,a3,e3,c3<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,e2,P3,g2,b2,e3,g3,e3,b2,g2<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,a2,P3,c3,e3,a3,c4,a3,e3,c3<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,e2,P3,g2,b2,e3,g3,e3,b2,g2<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,d2,P3,f2,a2,d3,f3,d3,a2,f2<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,a2,P3,c3,e3,a3,c4,a3,e3,c3<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,d2,P3,f2,a2,d3,f3,d3,a2,f2<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DO2<br />&nbsp; &nbsp;DB&nbsp; &nbsp;P9,EF5,e2,P3,gs2,b2,e3,gs3,e3,b2,gs2<br />&nbsp; &nbsp;LOP<br />&nbsp; &nbsp;DB&nbsp; &nbsp;XM<br /></div><br /><br />This is what I used to call the Melody Track, because usually it would contain the main melody of the song. There are some new commands here. <br />The first new command (REL,5,$02) is what I called the “release effect”. Literally, what this command instructs the driver is to set a decay envelope of $02 just 5 frames before the next note command is reached. This was used to shorten the sound of the notes, like if you released the key before pressing the next one (non-legato). This decay envelope means, in nibbles, no change in initial volume (0) and a decay time of 2, hence the $02 value.<br />The next new command (nn or NN = not note) is a simple command used to trigger the above mentioned “release effect”.<br /><br />This particular track has lots of tied note commands, this is because it's a short tune and probably I had enough memory available. Usually I would pack the data so it occupied less bytes by using the note length commands. For example instead of leaving “L10,C3,__,__,__” I would changed it to “L40,C3”. This had to be done by hand at the end of the composition process for all the tracks. Every byte counted!!<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOMEL1&nbsp; &nbsp;DB&nbsp; &nbsp;L10,SENV,$39,5,$90,VIB,20,1,4,W1,REL,5,$02<br />&nbsp; &nbsp;DB&nbsp; &nbsp;e3,__,a3,__,c4,__,__,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,NN,a3,b3,c4,__,d4,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;b3,__,__,g3,e3,__,__,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,__,__,__,__,f3,e3,d3<br />&nbsp; &nbsp;DB&nbsp; &nbsp;e3,__,a3,__,c4,__,__,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,NN,a3,b3,c4,__,d4,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;b3,__,__,a3,g3,a3,b3,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,__,e3,__,__,__,f3,g3<br /><br />&nbsp; &nbsp;DB&nbsp; &nbsp;a3,__,__,g3,f3,__,e3,f3<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,__,e3,__,d3,__,c3,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;d3,__,e3,__,e3,__,d3,e3<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,__,__,__,__,nn,f3,g3<br />&nbsp; &nbsp;DB&nbsp; &nbsp;a3,__,__,g3,f3,__,e3,f3<br />&nbsp; &nbsp;DB&nbsp; &nbsp;__,__,e3,__,c4,__,b3,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;e3,__,e3,__,d4,__,c4,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;c4,__,__,__,B3,__,__,__<br />&nbsp; &nbsp;DB&nbsp; &nbsp;XM</div><br /> <br /><br />Finally, this is the drum track, a pretty simple one. Each number means one different drum sound, except 0 which is no sound. The default note length is set by the channel that initializes the drum track. Setting the length inside the track was also possible using L commands, but this way I could use the same drum track on different songs that used different base note lengths, again to reduce song data.<br /><br />As you may figure if you listen to the song, 1=bass drum, 2= snare drum, 6 = short hit hat and 5 = slightly different short hit hat.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GOPERC&nbsp; &nbsp;DB&nbsp; &nbsp;1,0,6,5,2,0,6,5<br />&nbsp; &nbsp;DB&nbsp; &nbsp;1,0,6,5,2,5,1,5<br />&nbsp; &nbsp;DB&nbsp; &nbsp;END</div>
<br />
<br />
<br />I would really like to find commented code of other veteran musicians, just to know what commands and techniques they used on their sound drivers and compositions. Please let me know if you know of any place with such stuff <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Cheers!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Sun Feb 06, 2011 3:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not a <em>veteran</em> musician, but I still can outline how my music engine works. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> As far as I'm aware, Sivak is using it in Battle Kid 2. He also used an older version of my engine in Battle Kid 1.
<br />
<br />First thing is to define the instruments. Instruments are defined globally, so they apply to all songs, and all sound effects.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">envelopes<br />&nbsp;dc.w&nbsp; &nbsp;env_blank, env_s4_ch, env_s4_sd, env_s4_oh, env_s4_lead1<br />&nbsp;dc.w&nbsp; &nbsp;env_s4_lead2<br />env_blank<br />&nbsp;hex&nbsp; &nbsp;00 FF<br />env_s4_ch<br />&nbsp;hex&nbsp; &nbsp;0F 0E 0C 09 05 00 FF <br />env_s4_sd<br />&nbsp;hex&nbsp; &nbsp;0F 0E 0C 0A 08 06 05 04 03 03 02 02 02 01 01 01 01 00 FF<br />env_s4_oh<br />&nbsp;hex&nbsp; &nbsp;0C 0C 0B 0B 0A 0A 0A 09 09 09 09 08 FF<br />env_s4_lead1<br />&nbsp;hex&nbsp; &nbsp;4d 4d 4c 4b 4a 4a 49 49 48 48 48 47 46 45 44 44 44 44 44 43 FF<br />env_s4_lead2<br />&nbsp;hex&nbsp; &nbsp;4f 08 0c 08 09 08 07 06 06 05 05 04 FF<br /></div><br />You have a table of instruments, and then the data for each instrument.<br /><br />Since this runs on the NES, these are just sequences of bytes that get written to the volume/duty register for each channel. The exception being the triangle channel; I have the envelope code set up to write a constant instead. "FF" signals the end of the envelope, it just stops. "10 xx" is a "goto" command, for looping (I don't use that here).<br /><br />Next, if you want to use any pitch envelopes (like vibrato, for instance), you define those.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">pitch_envelopes<br />&nbsp;dc.w&nbsp; &nbsp;penv_1<br />penv_1<br />&nbsp;hex 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br />&nbsp;hex 01 FF 00 00 00 FF 01 00 00 00 01 00 FF 00 00<br />&nbsp;hex FF 00 01 00 01 00 01 FF FF FF 00 FF 01 01 8022<br /></div><br />This is a little different, this is a table of <em>differences</em>, and these are signed bytes. That 80xx is the "goto" command again. As an extra point of interest, I copied this particular vibrato out of Dr. Mario. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />Now comes the actual song data.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">songs<br />&nbsp;dc.w&nbsp; &nbsp;silence, song4<br /><br />silence<br />&nbsp;dc.w&nbsp; &nbsp;$0000, $0000, $0000, $0000<br />&nbsp;dc&nbsp; &nbsp;$00<br /><br />song4<br />&nbsp;dc.w&nbsp; &nbsp;song4_sq1, song4_sq2, song4_tri, song4_nse<br />&nbsp;dc $57<br /></div><br />Like with the instruments and the pitch envelopes, you start with a table that defines each song. I usually start with a "silence" song that basically sets a tempo of 00, and then just clears the channels. After that is an actual song. There's a pointer for each channel (use $0000 for unused channels), and then a tempo byte.<br /><br />For the sake of simplicity, here's just one of the channels:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">song4_sq1<br />&nbsp;hex ee 01 e4 04 c0 82 92 c3 a2 d1 13 e1 EB 0A c2 62 e0 c0 42 ca 52<br />&nbsp;hex e4 05 EB 0F c2 42 52 EB 07 52 EB 0F c0 52 c1 e0 EB 0F<br />&nbsp;hex e4 04 c2 33 13 a2 92 82 62 c5 32 82 c2 62 72 <br />&nbsp;hex e4 05 c2 42 52 EB 07 52 EB 0F E3 05 c5 52 e0 52 E3 00 EB 07 c5 52 c1 52 c0 e0<br />&nbsp;hex e4 04 EB 0F c5 e0 c2 13 e0 e0 03 e0 e0 a2 c8 e0 e4 05 EB 08 c2 a2 a2 e4 04 EB 0F c5 32<br />&nbsp;dc&nbsp; &nbsp;&nbsp; &nbsp;$e5<br />&nbsp;dc.w&nbsp; &nbsp;song4_sq1<br /></div>
<br />
<br /><ul><li>EE 01: set pitch envelope to 1 (EE 00 turns it off)</li><li>E4 04: set instrument to 4 (which, in reality, is the <em>fifth</em> instrument defined in the table)</li><li>C0: set a note length to 1. C0-DF is actually a one-byte alias for the two-byte note length command E2 xx. So for example, putting C6 is the same as putting E2 06.</li><li>82 92 are notes (F-2 and F#2). This is probably where I differ from a lot of engines, my notes are defined as (&lt;semitone&gt;&lt;octave&gt;), so 33 53 73 83 a3 04 24 34 is a full scale (C, D, E, ... B, C). Note that 0x is <em>A</em>, instead of C. I'll explain that in a bit.<br /><br />I went with &lt;semitone&gt;&lt;octave&gt; (versus a linear table) for programming reasons. &lt;semitone&gt; is an index into my pitch table, and &lt;octave&gt; is how many times to shift it right. Basically, if you have a pitch, you can raise it to the next octave by halving it, which is the same as shifting it right. This is very easy (and quick) for the CPU to decode, while also being easily human-readable.<br /><br />Next, the lowest pitch available to the NES APU is an A, which is why I chose to start my pitch table with A. Theoretically, this maximizes the amount of notes possible with the engine, because A, A#, and B are given 1 extra bit of resolution, rather than if I had started with C instead.<br /></li><li>C3: note length is set to 4, and then a G is played.</li><li>D1: note length is set to 18 ($12)</li><li>13: A#2 plays for 18 ticks. (Remember what I explained above, even though it's written as A#3, it's actually A#2)</li><li>E1: This is the "note tie" command, so that A# will continue for another 18 ticks.</li><li>EB 0A: Set volume to 10 ($A). 0 is silence, F is full volume.</li><li>C2: Note length is set to 3</li><li>62: D#2 plays for 3 ticks</li><li>E0: Rest for 3 ticks</li><li>C0, 42: C#2 for 1 tick</li><li>CA, 52: D2 for 11 ticks.</li></ul>
<br />Basically, stuff like this continues until that $e5 down there, which is the "goto" command. Here, it just loops the track over and over.
<br />
<br />Sound effects follow the same format, except they have a slightly different header, and sound effects always play at tempo FF, regardless of the tempo of the current song.
<br />
<br />The next cool thing is that you can have a track play sound effects instead of notes. That's actually how you do drums. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />I'm still working on things though. Lately, I've been playing around with the Nintendo SPC engine. If you want to know something crazy, it works very similarly to this. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Feb 07, 2011 3:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is the “real” data of the song, and this concretely is what I used to call the Bass Track, because it would contain mostly the bass notes. With the NES you were almost forced to use the triangle wave channel always for the bass part.</div><br />Well, why ? There is no reason Triangle can't be used in it's higer tones ! The only restriction is that you can't go really high either it sounds off-tune, but you can go pretty high before that happens anyways.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Once it's posted doesn't seem that difficult, but I write English pretty slow, just to be sure I don't make many mistakes. Then I see how miserably <br />I fail sometimes.</div><br />Or do it like me I write everything fast, do a lot of mistakes and don't give a damn about it.  <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not a veteran musician, but I still can outline how my music engine works.  As far as I'm aware, Sivak is using it in Battle Kid 2. He also used an older version of my engine in Battle Kid 1.</div><br />And you're ok about him making profit using your engine ? Man I don't understand you.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Since this runs on the NES, these are just sequences of bytes that get written to the volume/duty register for each channel. The exception being the triangle channel; I have the envelope code set up to write a constant instead. "FF" signals the end of the envelope, it just stops. "10 xx" is a "goto" command, for looping (I don't use that here).</div><br />This is a flexible system (i.e. it can allow anything), but can be a bit wasteful of bytes, especially since apparently duty cycle and volumes envelope comes together so it's impossible for example to use the same volume enveloppe with a different duty cycle without re-coding it.<br /><br />Also, if you wanted for example the volume to fade out really slowly, it would take a whole **** of bytes to get it done, when it could be otherwise done by software.<br />So I guess if I ever do that "ultimate" sound engine I wanted to do, I'd allow both software fades (when doing it slow) or hard-wired volume enveloppes like the ones you showed (when doing it fast).<br /><br /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm still working on things though. Lately, I've been playing around with the Nintendo SPC engine. If you want to know something crazy, it works very similarly to this.</div>
<br />I guess it's not so surprising. You don't change a forumla that works  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> 
<br />However, the hardware is very different on SNES, and all volume envelopes can be done by hardware. Also the use of instrument samples makes arpeggios mostly useless (unless you're imitating a chiptune).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlbertoG</b> [ Mon Feb 07, 2011 9:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@Drag
<br />That's a very interesting way of programming tunes. I couldn't do with so much HEX though, first I would do is define a bunch of macros to manage that driver <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />I mean, I can understand Rob Hubbard doing it that way in 1983 because of not having proper compilers and editors, but not now!
<br />I was very lucky to have the PDS since I programmed my first line of assembler code. It was an absolutely amazing and powerful editor and compiler / debugger. I used it for all my Spectrum / Amstrad / MSX, NES, GB and Master System / Game Gear soundtracks
<br />
<br />The cyclic envelopes in your driver are very cool. I used a similar approach for certain effects in my Spectrum sound driver. The main theme of Light Corridor used a modulation envelope on top of the main volume envelope to simulate a tremolo, and I used them in other unreleased works to simulate delays.
<br />
<br />My NES driver was quite simple, but I was pretty proud of it at the time. I had to learn 6502 (which I hated at first for having only 3 registers) and also draw the sprites of the games, so I didn't had much time to spend on the driver. But since it was written from scratch I did some things better than before. In the end I loved the 6502, and the sound of the NES too.
<br />Instead of having the properties of the instruments defined in a table, I used that "procedure" approach to change the sound of each one, by poking directly the driver variables as needed. I also did this on the Master System driver, but all my other sound drivers worked in a different way: instrument definitions were just like any other chunk of music data, with the same commands, and the sound effects worked the same way. The problem with this method is that changing the instrument was much more expensive in CPU cycles.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;instruments P9 and P3 in Asterix<br /><br />SDAT MACRO<br />&nbsp; &nbsp; LDY&nbsp; &nbsp;#@1<br />&nbsp; &nbsp; STA&nbsp; &nbsp;&#40;CHL&#41;,Y<br />ENDM<br /><br />_P9 LDA&nbsp; #&lt;EEF6<br />&nbsp; &nbsp; SDAT CHORDH<br />&nbsp; &nbsp; LDA&nbsp; &nbsp;#&gt;EEF6<br />&nbsp; &nbsp; SDAT CHORDL<br />&nbsp; &nbsp; LDA&nbsp; #0<br />&nbsp; &nbsp; SDAT CHORDP<br />&nbsp; &nbsp; LDA&nbsp; #$F1<br />&nbsp; &nbsp; SDAT ENVELOPE<br />&nbsp; &nbsp; LDA&nbsp; #5<br />&nbsp; &nbsp; SDAT SENVCNT<br />&nbsp; &nbsp; SDAT SENVCNTR<br />&nbsp; &nbsp; LDA&nbsp; #$92<br />&nbsp; &nbsp; SDAT SENV2ENV<br />&nbsp; &nbsp; JP&nbsp; &nbsp;NEWNOTE2<br /><br /><br />_P3 LDA&nbsp; #&lt;EEF13<br />&nbsp; &nbsp; SDAT CHORDH<br />&nbsp; &nbsp; LDA&nbsp; #&gt;EEF13<br />&nbsp; &nbsp; SDAT CHORDL<br />&nbsp; &nbsp; LDA&nbsp; #0<br />&nbsp; &nbsp; SDAT CHORDP<br />&nbsp; &nbsp; LDA&nbsp; #$A0<br />&nbsp; &nbsp; SDAT ENVELOPE<br />&nbsp; &nbsp; LDA&nbsp; #5<br />&nbsp; &nbsp; SDAT SENVCNT<br />&nbsp; &nbsp; SDAT SENVCNTR<br />&nbsp; &nbsp; LDA&nbsp; #$52<br />&nbsp; &nbsp; SDAT SENV2ENV<br />&nbsp; &nbsp; JP&nbsp; &nbsp;NEWNOTE2<br /></div>
<br />
<br />@Bregalad
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, why ? There is no reason Triangle can't be used in it's higer tones ! The only restriction is that you can't go really high either it sounds off-tune, but you can go pretty high before that happens anyways. </div><br />Yes I know, but since it had that big bass sound it was best suited for it, and drums. I used it once for melody, though, in the ending theme of Asterix.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or do it like me I write everything fast, do a lot of mistakes and don't give a damn about it. Rolling Eyes</div>
<br />That's something I should apply to more than one thing in my life...
<br />
<br />Cheers

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cartlemmy</b> [ Tue Feb 08, 2011 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not sure if anyone cares, but here's the instruction set of my sound engine thus far:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Instruction&nbsp; &nbsp; &nbsp; &nbsp; Code&nbsp; &nbsp; &nbsp; &nbsp;Param A&nbsp; &nbsp;Param B<br />Start Note&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%1AABBBBB&nbsp; Channel&nbsp; &nbsp;Note to play<br />Octave Set&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%000AABBB&nbsp; Channel&nbsp; &nbsp;Octave &#40;0-7&#41;<br />Envelope&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%0010AABB&nbsp; Channel&nbsp; &nbsp;Envelope # &#40;0-3&#41;<br />Note Mode&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %0011AABB&nbsp; Channel&nbsp; &nbsp;0 = Normal<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; 1 = Arpeggio<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2 = Duty Cycle Shift<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />Wait&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%0100AAAA&nbsp; &#40;A + 1&#41; 16th notes to wait&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />Loop To&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %01010AAA&nbsp; Loop times &#40;0 = infinite&#41; + Next two bytes is location to loop to<br />SqWave Duty Cycle&nbsp; %01011ABB&nbsp; Channel&nbsp; &nbsp;Duty Cycle<br />Play DMC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%01100AAA&nbsp; DMC # <br />Stop Note&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %011010AA&nbsp; Channel<br />Currently Unused&nbsp; &nbsp;%011011XX<br />Start Arpeggio&nbsp; &nbsp; &nbsp;%01110000<br />Currently Unused&nbsp; &nbsp;%01110001<br />Stream 2 Jump To&nbsp; &nbsp;%01110010<br />Stream 2 Restart&nbsp; &nbsp;%01110011<br />Stream 2 Start&nbsp; &nbsp; &nbsp;%01110100<br />Stream 2 Stop&nbsp; &nbsp; &nbsp; %01110101<br />Describe Arpeggio&nbsp; %01110110<br />Currently Unused&nbsp; &nbsp;%01110111-%01111111</div>
<br />
<br />I found that creating an underlying loop (Stream 2) and playing notes on top of that saves a lot of data. My data format is by no means easily human readable, nor does it lend itself to hard coded opcodes, so I created a separate script to parse a more human readable format to this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 08, 2011 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes I know, but since it had that big bass sound it was best suited for it, and drums. I used it once for melody, though, in the ending theme of Asterix.</div><br />Well, it sounds good I think ! Squares in the lower tones sounds good as well, I think it's best to explore different possibilities instead of relying on a fixed patter all the time.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My NES driver was quite simple, but I was pretty proud of it at the time.</div>
<br />Well it probably was quite complex in fact. Apparently it supports complex arpeggio effects and drums on triangle that interrupts the actual note triangle plays (I think you understand what I mean). My driver, which I designed to be very compact and simple, doesn't support any of this the only effect I do is extremely simple volume decay and duty-cycle switch on the first frame.
<br />
<br />On a side note I really like this "short Triangle plugs" (combined with noise) way to make drums, that both Alberto and Neil used in their works. I think it sounds more accurate than DPCM ironically and it doesn't eat ROM space stupidly.
<br />However I have no idea how to implement this, so for now I go with noise-only drums (or another channel, but that is fully used for drums and never plays some melody and drums at the same time).
<br />
<br />The best I could attempt is for some kind of techno to have a note sliding downwards on beats (simulate a loud electronic bass drum) and a normal tone for counter-beats.
<br />
<br />I guess to fully implement this I'd need to have internally 2 triangle channels (one who plays fast percussion stuff and the other a melody) and have one take over another when needed, like how I have internally multiple channels for music and sound effects, and the the latter take over the former. So I'd end up with 3 triangle channels  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 08, 2011 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The music engine in LJ65 and Concentration Room uses the sound effects system for percussion. So a kick drum would be stored as a sound effect and activated whenever the drum channel calls for it. In fact, the game might even reuse the kick drum as a sound effect proper, such as when an object lands.
<br />
<br />It also limits the pitches in a phrase to the two octaves above the base pitch at which the phrase is played. This frees three bits for duration: a note is either 1, 2, 3, 4, 6, 8, 12, or 16 divisions long, with in-between durations handled by the "tie" command. The base pitch allows for transpositions, like the way the Comic Bakery theme is played twice in different keys in the first outdoor level of Jurassic Park, or like a bass line can be played at multiple pitches depending on what chord is on top.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 08, 2011 2:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In fact, the game might even reuse the kick drum as a sound effect proper, such as when an object lands.</div>
<br />The method you use is interesitng, but in my opinion it is a very bad idea to reuse a sound effect like that.
<br />Because the player will think a sound effect is playing when in fact it's just the music. This is very disturbing.
<br />
<br />This has just happened to me when playing Mega Man Battle Network 6 this afternoon and listening <a href="http://www.youtube.com/watch?v=qAhIOTPVAcs" class="postlink">this</a> music, there seems to be a randomly high pitched sound effect, which sounds almost identical to the sound effect in the game when you move the cursor.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 08, 2011 2:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In fact, the game might even reuse the kick drum as a sound effect proper, such as when an object lands.</div><br />in my opinion it is a very bad idea to reuse a sound effect like that. Because the player will think a sound effect is playing when in fact it's just the music. This is very disturbing.</div>
<br />Occasionally, it's <em>supposed</em> to be disturbing. Hip Tanaka composed much of the music of Metroid to <a href="http://metroid.wikia.com/wiki/Hirokazu_Tanaka" class="postlink">sound like sound effects, on purpose</a>.
<br />
<br />But in practice, does it end up disturbing when pieces land using a kick drum sound in <a href="http://www.youtube.com/watch?v=4caZN5x0uEA" class="postlink">this video</a>? Your brain separates them out: kick drum in the sound effects happens a quarter second after you press up on the Control Pad, while kick drum in the music happens at predictable times compared to the bass line.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Doommaster1994</b> [ Fri Oct 21, 2011 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I recently got in touch with Michelle Simon, who composed Roundball 2-on-2 Challenge for the NES. She told me that the game's music was composed as MIDI files in Cakewalk for DOS. I'd like to say that this is probably the millionth NES game developer (Park Place Productions) to use converted MIDI files, so I don't think converting MIDI to NES/NSF should be THAT hard.
<br />A long time ago, I also contacted Doug Brandon, who composed Great Waldo Search and Rollerblade Racer. He said the music was composed on CuBase for the Atari ST.
<br />While I'm still on the same subject, I said that Paul Wilkinson used hex code and Cakewalk. He told me that at first he composed in hex code (Terminator was one of them), then he wrote a MIDI conversion tool and converted his MIDI files to NES and he did the rest of his NES music that way.
<br />For David Whittaker, I think he just wrote in hex code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Oct 21, 2011 8:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is not hard, you just going to get crap as output.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>