<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Digital Foundry Retro Doom port comparison</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Digital Foundry Retro Doom port comparison</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16524">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16524</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Revenant</b> [ Sun Oct 01, 2017 3:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The traditional definition of raycasting (at least with regard to Wolf3D and similar games) means simply doing a single distance check for each column of pixels on the screen, which is what leads to Wolf3D (and later iterations like Rise of the Triad) having relatively simplistic level geometry, with floors and ceilings always being at a fixed height, walls being completely solid, etc.<br /><br />Doom instead breaks the level down into <a href="https://doomwiki.org/wiki/Doom_rendering_engine#Node_building" class="postlink">a BSP tree</a> which it traverses from the player's point of view every frame to determine what's visible and where. The process is a lot more complex than simply doing a fixed number of simple distance checks like Wolf3D does, but it allows for much more elaborate geometry.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 01, 2017 3:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">What exactly does &quot;raycaster&quot; even mean?</div><br />A raycaster casts rays from the player, extending them until they hit walls. Once a ray hits a wall, the length of the ray can be used to calculate the apparent height of the wall (short rays mean large walls, long rays mean small walls), and the point of the wall that was hit indicates what texture column to use for that wall slice. Here's an animation illustrating how ray lengths translate into wall heights: <!-- m --><a class="postlink" href="https://commons.wikimedia.org/wiki/File:Simple_raycasting_with_fisheye_correction.gif">https://commons.wikimedia.org/wiki/File ... ection.gif</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I know it's not how the walls are actually rendered, as Doom renders walls the same way as Wolfenstein 3D, (in one pixel wide, vertical slivers) but how the engine figures out where the walls are and their distance from the camera?</div><br />Yeah, the actual wall rendering is just 1D texture scaling, you just have to figure out a way to do it as fast as possible. In Wolfenstein 3D they apparently generated unrolled code in RAM for all possible wall sizes. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How does Wolfenstein 3D accomplish this?</div><br />Wolfenstein 3D is just a raycaster. Overdraw isn't a problem because rays stop once they hit a wall, which means that hidden surfaces can never be hit by rays. This is one big advantage that raycasting has, you don't have to worry about clipping, walls that are behind the player, and so on. You just have one ray for each screen column and that one ray will give you all the information you need to draw that screen column. Raycasting doesn't help with rendering objects/sprites though, which require more traditional math.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Sun Oct 01, 2017 3:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, Tokumaru. The only questions I have left are, does the &quot;ray&quot; have to be calculated &quot;pixel by pixel&quot;? Is this first speed this up by doing the equation using &quot;map blocks&quot; a grid instead of each &quot;wall pixel&quot; (if that makes sense)? This way, the bulk of performance loss would be due to how far a ray has to travel across the &quot;map block&quot; it is in before it hits the wall, rather than how far the ray has to travel in total.<br /><br />Really though, I feel like drawing each wall column would take much more CPU time than &quot;casting&quot; each &quot;ray&quot; at a reasonable vertical resolution, but it also appears much easier to hardcode drawing walls. Isn't raycasting sometimes used in modern 3D graphics for reflections on non-flat surfaces?<br /><br />I've never understood how this works: (Stage #10 of Expert Mode on Super Monkey Ball) <!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=q1cfJ9WOptg#t=1m50s">https://www.youtube.com/watch?v=q1cfJ9WOptg#t=1m50s</a><!-- m --> However, with how glitchy the reflection can be (not easily apparent in the video) I imagine they are just rendering the scene from the perspective of the reflection and stretching it. If I'm not mistaken, using raycasting for reflections is even out of the scope of games on modern consoles?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 01, 2017 4:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In <a href="https://forums.nesdev.com/viewtopic.php?p=138807#p138807" class="postlink">a previous post</a>, I proposed run-length-encoded ray casting, which checks each map cell only once, not once for each ray that passes through it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 01, 2017 4:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Thanks, Tokumaru. The only questions I have left are, does the &quot;ray&quot; have to be calculated &quot;pixel by pixel&quot;?</div><br />If you do it pixel by pixel I think you'll lose precision, and it'll be really slow. Normally you only check the intersections of the map's grid, like this:<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=10326" alt="raycasthit.gif" /><br />
			<span class="gensmall">raycasthit.gif [ 2.3 KiB | Viewed 1126 times ]</span>
		

		<br />
	</div><br />The downside is that your maps have to be blocky (i.e. like Wolfenstein 3D instead of Doom) for this to work. This can be pretty fast if you pre-calculate the distances between intersections for all possible angles:<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=10327" alt="raycastdelta.gif" /><br />
			<span class="gensmall">raycastdelta.gif [ 3.24 KiB | Viewed 1126 times ]</span>
		

		<br />
	</div><br />Notice how the deltas repeat as the ray extends.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I feel like drawing each wall column would take much more CPU time than &quot;casting&quot; each &quot;ray&quot;</div><br />I guess it depends on how powerful the hardware is. On the NES, adding a delta, updating the map pointer, reading from the map and checking the block type repeatedly can use a lot of CPU time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Sun Oct 01, 2017 4:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you do it pixel by pixel I think you'll lose precision</div><br />Each pixel wouldn't be 100% precise, but it can be precise as each column which is all that matters (if that makes sense), and there wouldn't be a drop off in precision the longer the ray is, as the equation would keep getting recalculated. Now that I think about it, with any moderately sized texture, (and thus moderately large pixel grid for each map block) this will be really slow though...<br /><br />Do you only pay attention to the Y Delta if you hit a wall from the Y axis, and only pay attention to the X Delta if you hit a wall from the X axis?<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">In <a href="https://forums.nesdev.com/viewtopic.php?p=138807#p138807" class="postlink">a previous post</a>, I proposed run-length-encoded ray casting, which checks each map cell only once, not once for each ray that passes through it.</div><br />That looks interesting...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Oct 01, 2017 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are the walls in Wolfenstein completely flat, or do they have volume?<br /><br />EDIT:  Okay, I looked it up, and the walls are blocks, but the doors that open are completely flat.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 01, 2017 5:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Do you only pay attention to the Y Delta if you hit a wall from the Y axis, and only pay attention to the X Delta if you hit a wall from the X axis?</div><br />The technique used in the <a href="http://lodev.org/cgtutor/raycasting.html" class="postlink">tutorial</a> I took the image from, which I loosely follow, each ray has 2 lengths, one for horizontal walls and one for vertical walls. At each step you extend the shortest length (H or V) by its respective delta, and advance one square in that axis in the map and check if that results in a collision. In the end, once a wall is found, one of the lengths is indeed discarded.<br /><br />Here's the code from that tutorial that extends the ray (it's incredibly simple!):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; //perform DDA<br />&nbsp; &nbsp; &nbsp; while (hit == 0)<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; //jump to next map square, OR in x-direction, OR in y-direction<br />&nbsp; &nbsp; &nbsp; &nbsp; if (sideDistX &lt; sideDistY)<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sideDistX += deltaDistX;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mapX += stepX;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; side = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sideDistY += deltaDistY;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mapY += stepY;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; side = 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; //Check if ray has hit a wall<br />&nbsp; &nbsp; &nbsp; &nbsp; if (worldMap&#91;mapX&#93;&#91;mapY&#93; &gt; 0) hit = 1;<br />&nbsp; &nbsp; &nbsp; }</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 01, 2017 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">Are the walls in Wolfenstein completely flat, or do they have volume?<br /><br />EDIT:  Okay, I looked it up, and the walls are blocks</div><br />Yeah, but you could just as well have flat walls while still using the same overall technique. Instead of assuming each map cell is a solid block, you could assign different types to its 4 sides.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">but the doors that open are completely flat.</div><br />Yeah, they probably are like that because that's pretty easy to implement... When you hit a door block, just extend the ray for the door's axis by half the delta, and you have the distance to the paper-thin door. If that distance is shorter than the distance in the other axis (i.e. the distance to the solid wall that's perpendicular to the door), then you draw the door. Well, you still have to check the exact column of the door that was hit if the door is animating, to finally decide whether to draw the door or let the ray keep going because that specific part is already open.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nicole</b> [ Sun Oct 01, 2017 7:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Isn't raycasting sometimes used in modern 3D graphics for reflections on non-flat surfaces?<br /><br />I've never understood how this works: (Stage #10 of Expert Mode on Super Monkey Ball) <!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=q1cfJ9WOptg#t=1m50s">https://www.youtube.com/watch?v=q1cfJ9WOptg#t=1m50s</a><!-- m --> However, with how glitchy the reflection can be (not easily apparent in the video) I imagine they are just rendering the scene from the perspective of the reflection and stretching it. If I'm not mistaken, using raycasting for reflections is even out of the scope of games on modern consoles?</div><br />Be careful not to confuse &quot;raycasting&quot; and &quot;raytracing&quot;.<br /><br />&quot;Raycasting&quot; usually specifically means the rendering technique used by Wolfenstein 3D and similar games, whereas &quot;raytracing&quot; is the 3D rendering technique where rays can reflect off of objects and so on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 01, 2017 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And then there are hybrids of &quot;raycasting&quot; and &quot;raytracing&quot;, like in the <a href="https://en.wikipedia.org/wiki/Build_(game_engine)" class="postlink">Build</a> engine of <em>Duke Nukem 3D</em>. Build uses <a href="https://en.wikipedia.org/wiki/Portal_rendering" class="postlink">portal casting</a>, a generalization of raycasting to an arbitrary mesh of sectors rather than a square grid. A portal caster traverses the graph of sectors using something analogous to the RLE technique that I linked above, where each solid wall splits the viewing cone into fractions at the left and right, and each wall of a sector that <em>isn't</em> solid extends the viewing cone to a different sector. And when a wall extends back onto the same sector, you get reflection, used for bathroom mirrors and the like.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Mon Oct 02, 2017 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had somehow gotten the impression that Doom drew the walls in horizontal strips.  If it really draws them in vertical strips (which honestly makes a lot more sense), then either the SNES version uses a different technique or it's wasting a lot of RAM bandwidth.  It's possible the mosaic trick could actually result in a material speedup, if I can get it to work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Mon Oct 02, 2017 9:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />SNES Doom doesn't actually use the Doom engine, so it very well could draw walls from left to right rather from top to bottom, although I have no idea why it would. I don't know anything about the Super FX, but I've always felt the SNES Doom port runs shittier than it needs to for how scaled back it is (pixel doubling, no textured floors).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Mon Oct 02, 2017 11:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Super FX has an opcode called PLOT, that plots a pixel into a virtual framebuffer based on the coordinates in a pair of (otherwise general-purpose) CPU registers, and increments the register containing the x-coordinate.<br /><br />What it actually does is plot the pixel into the primary pixel cache, which represents a specific tile-aligned 8-pixel sliver in the actual framebuffer (which is in SNES bitplane format), plus a bit for each pixel to denote whether or not you've plotted to it.  Once the primary cache is full, or a pixel is plotted outside the sliver it corresponds to, it dumps itself to a secondary pixel cache so it can quickly receive new data.  The secondary cache then empties itself into RAM, which takes quite a bit longer - at 21 MHz it's 5 cycles per byte, so that's 40 cycles for an 8bpp sliver, or 80 if some of the pixels are transparent/un-plotted, because it has to read the old sliver from RAM first to properly blit the new data into it.  If the secondary cache is still doing this when the primary cache fills or is invalidated, instruction execution has to wait until the secondary cache is emptied so the primary cache can get rid of its old data and receive the new data.<br /><br />This means that at 21 MHz and 8bpp, plotting solid scanlines is bottlenecked at 5 cycles per pixel, and plotting solid two-pixel columns is bottlenecked at 40 cycles per pixel.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ap9</b> [ Tue Oct 03, 2017 3:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital Foundry Retro Doom port comparison</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">I had somehow gotten the impression that Doom drew the walls in horizontal strips.  If it really draws them in vertical strips (which honestly makes a lot more sense), then either the SNES version uses a different technique or it's wasting a lot of RAM bandwidth.  It's possible the mosaic trick could actually result in a material speedup, if I can get it to work.</div><br />I remember a while back stepping through the Mac version of Doom in a debugger to discover a horizontal technique to render more than one pixel at a time by storing two 16 bit portions in a 32 bit register, for the low-res. mode. This method, of course, is not conceivable on a 16 bit system.<br /><br />DOOM uses a lot of 32 bit math (esp. fixed point math); a proper port of Doom to SNES would be pretty slow in software because of the 16 bit limit. The Nintendo 64, on the other hand, had some hardware comparable to that of a low-end Power Mac— a 32/64 bit RISC CPU, for one— making the N64 port mentioned in the first post fairly easy. (RAM and other technical limitations still killed the N64 in the marketplace.)<br /><br />I know the math well enough regarding 3D rendering that a divide operation is needed for every depth, which makes columns the fastest way for rendering walls— only one divide per x coordinate.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This means that at 21 MHz and 8bpp, plotting solid scanlines is bottlenecked at 5 cycles per pixel, and plotting solid two-pixel columns is bottlenecked at 40 cycles per pixel.</div><br />God, that's slow, lol.<br /><br /><a href="https://www.youtube.com/watch?v=BbX5TUwvePM" class="postlink">The SuperFX 2 was overclocked to 30 MHz</a>, and the game was still slow for my taste. The engine Williams Entertainment used was maintained mostly in C, so there was plenty of room for performance improvements.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>