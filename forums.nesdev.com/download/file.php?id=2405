db "NES",$1a
db $02
db $01
db $00
db $00
dsb 8,0

;CONSTANTS

NUM_SONGS = #$09 ;if you add a new song, change this number.
                ;the main asm file checks this number in its song_up and song_down subroutines
                ;to determine when to wrap around.

PRG_COUNT = 2
MIRRORING = %0001

;SOUND ENGINE CONSTANTS
SQUARE_1 = #$00 ;these are channel constants
SQUARE_2 = #$01
TRIANGLE = #$02
NOISE = #$03

MUSIC_SQ1 = #$00 ;these are stream # constants
MUSIC_SQ2 = #$01 ;stream # is used to index into variables
MUSIC_TRI = #$02
MUSIC_NOI = #$03
SFX_1     = #$04
SFX_2     = #$05

ve_short_staccato = #$00
ve_fade_in = #$01
ve_blip_echo = #$02
ve_tgl_1 = #$03
ve_tgl_2 = #$04
ve_battlekid_1 = #$05
ve_battlekid_1b = #$06
ve_battlekid_2 = #$07
ve_battlekid_2b = #$08
ve_drum_decay = #$09

endsound = #$A0
loop = #$A1
volume_envelope = #$A2
duty = #$A3
set_loop1_counter = #$A4
loop1 = #$A5
set_note_offset = #$A6
adjust_note_offset = #$A7
transpose = #$A8

;Note: octaves in music traditionally start at C, not A
A1 = #$00    ;the "1" means Octave 1
As1 = #$01   ;the "s" means "sharp"
Bb1 = #$01   ;the "b" means "flat"  A# == Bb, so same value
B1 = #$02

C2 = #$03
Cs2 = #$04
Db2 = #$04
D2 = #$05
Ds2 = #$06
Eb2 = #$06
E2 = #$07
F2 = #$08
Fs2 = #$09
Gb2 = #$09
G2 = #$0A
Gs2 = #$0B
Ab2 = #$0B
A2 = #$0C
As2 = #$0D
Bb2 = #$0D
B2 = #$0E

C3 = #$0F
Cs3 = #$10
Db3 = #$10
D3 = #$11
Ds3 = #$12
Eb3 = #$12
E3 = #$13
F3 = #$14
Fs3 = #$15
Gb3 = #$15
G3 = #$16
Gs3 = #$17
Ab3 = #$17
A3 = #$18
As3 = #$19
Bb3 = #$19
B3 = #$1a

C4 = #$1b
Cs4 = #$1c
Db4 = #$1c
D4 = #$1d
Ds4 = #$1e
Eb4 = #$1e
E4 = #$1f
F4 = #$20
Fs4 = #$21
Gb4 = #$21
G4 = #$22
Gs4 = #$23
Ab4 = #$23
A4 = #$24
As4 = #$25
Bb4 = #$25
B4 = #$26

C5 = #$27
Cs5 = #$28
Db5 = #$28
D5 = #$29
Ds5 = #$2a
Eb5 = #$2a
E5 = #$2b
F5 = #$2c
Fs5 = #$2d
Gb5 = #$2d
G5 = #$2e
Gs5 = #$2f
Ab5 = #$2f
A5 = #$30
As5 = #$31
Bb5 = #$31
B5 = #$32

C6 = #$33
Cs6 = #$34
Db6 = #$34
D6 = #$35
Ds6 = #$36
Eb6 = #$36
E6 = #$37
F6 = #$38
Fs6 = #$39
Gb6 = #$39
G6 = #$3a
Gs6 = #$3b
Ab6 = #$3b
A6 = #$3c
As6 = #$3d
Bb6 = #$3d
B6 = #$3e

C7 = #$3f
Cs7 = #$40
Db7 = #$40
D7 = #$41
Ds7 = #$42
Eb7 = #$42
E7 = #$43
F7 = #$44
Fs7 = #$45
Gb7 = #$45
G7 = #$46
Gs7 = #$47
Ab7 = #$47
A7 = #$48
As7 = #$49
Bb7 = #$49
B7 = #$4a

C8 = #$4b
Cs8 = #$4c
Db8 = #$4c
D8 = #$4d
Ds8 = #$4e
Eb8 = #$4e
E8 = #$4f
F8 = #$50
Fs8 = #$51
Gb8 = #$51
G8 = #$52
Gs8 = #$53
Ab8 = #$53
A8 = #$54
As8 = #$55
Bb8 = #$55
B8 = #$56

C9 = #$57
Cs9 = #$58
Db9 = #$58
D9 = #$59
Ds9 = #$5a
Eb9 = #$5a
E9 = #$5b
F9 = #$5c
Fs9 = #$5d
Gb9 = #$5d

rest = #$5e

;NOTE LENGTH CONSTANTS (aliases)
thirtysecond = #$80
sixteenth = #$81
eighth = #$82
quarter = #$83
half = #$84
whole = #$85
d_sixteenth = #$86
d_eighth = #$87
d_quarter = #$88
d_half = #$89
d_whole = #$8A   ;don't forget we are counting in hex
t_quarter = #$8B
five_eighths =#$8C
five_sixteenths=#$8D


sleeping equ $7ff ; for debugging purposes
joypad1 equ $700
joypad1_old equ $701
joypad1_pressed equ $702

 ENUM $0003
 ;joypad1 .dsb 1 ;joypad1 .rs 1           ;button states for the current frame
 ;joypad1_old .dsb 1 ;joypad1_old .rs 1       ;last frame's button states
 ;joypad1_pressed .dsb 1 ;joypad1_pressed .rs 1   ;current frame's off_to_on transitions
; sleeping .dsb 1;sleeping .rs 1          ;main program sets this and waits for the NMI to clear it.  Ensures the main program is run only once per frame.                        ;   for more information, see Disch's document: http://nesdevhandbook.googlepages.com/theframe.html
 needdraw .dsb 1 ;needdraw .rs 1          ;drawing flag.
 dbuffer_index .dsb 1 ;dbuffer_index .rs 1     ;current position in the drawing buffer
 ptr1 .dsb 2 ;ptr1 .rs 2              ;a pointer
 sound_ptr: .dsb 2 ;sound_ptr .rs 2
 sound_ptr2 .dsb 2 ;sound_ptr2 .rs 2
 current_song .dsb 1 ;current_song .rs 1
 ;ENDE

;ENUM $0400
sound_disable_flag .dsb 1 ;sound_disable_flag  .rs 1   ;a flag variable that keeps track of whether the sound engine is disabled or not.
sound_temp1 .dsb 1 ;sound_temp1 .rs 1           ;temporary variables
sound_temp2 .dsb 1 ;sound_temp2 .rs 1
sound_sq1_old .dsb 1 ;sound_sq1_old .rs 1  ;the last value written to $4003
sound_sq2_old .dsb 1 ;sound_sq2_old .rs 1  ;the last value written to $4007
soft_apu_ports .dsb 16 ;soft_apu_ports .rs 16

;reserve 6 bytes, one for each stream
stream_curr_sound .dsb 6 ;stream_curr_sound .rs 6     ;current song/sfx loaded
stream_status .dsb 6 ;stream_status .rs 6         ;status byte.   bit0: (1: stream enabled; 0: stream disabled)
stream_channel .dsb 6 ;stream_channel .rs 6        ;what channel is this stream playing on?
stream_ptr_LO .dsb 6 ;stream_ptr_LO .rs 6         ;low byte of pointer to data stream
stream_ptr_HI .dsb 6 ;stream_ptr_HI .rs 6         ;high byte of pointer to data stream
stream_ve .dsb 6 ;stream_ve .rs 6             ;current volume envelope
stream_ve_index .dsb 6 ;stream_ve_index .rs 6       ;current position within the volume envelope
stream_vol_duty .dsb 6 ;stream_vol_duty .rs 6       ;stream volume/duty settings
stream_note_LO .dsb 6 ;stream_note_LO .rs 6        ;low 8 bits of period for the current note on a stream
stream_note_HI .dsb 6 ;stream_note_HI .rs 6        ;high 3 bits of period for the current note on a stream
stream_tempo .dsb 6 ;stream_tempo .rs 6          ;the value to add to our ticker total each frame
stream_ticker_total .dsb 6 ;stream_ticker_total .rs 6   ;our running ticker total.
stream_note_length_counter .dsb 6 ;stream_note_length_counter .rs 6
stream_note_length .dsb 6 ;stream_note_length .rs 6
stream_loop1 .dsb 6 ;stream_loop1 .rs 6          ;loop counter
stream_note_offset .dsb 6 ;stream_note_offset .rs 6
ENDE

org $8000

sound_init:
    lda #$0F
    sta $4015   ;enable Square 1, Square 2, Triangle and Noise channels

    lda #$00
    sta sound_disable_flag  ;clear disable flag
    ;later, if we have other variables we want to initialize, we will do that here.
    lda #$FF
    sta sound_sq1_old   ;initializing these to $FF ensures that the first notes of the first song isn't skipped
    sta sound_sq2_old
se_silence:
    lda #$30
    sta soft_apu_ports      ;set Square 1 volume to 0
    sta soft_apu_ports+4    ;set Square 2 volume to 0
    sta soft_apu_ports+12   ;set Noise volume to 0
    lda #$80
    sta soft_apu_ports+8     ;silence Triangle

    rts
    
sound_disable:
    lda #$00
    sta $4015   ;disable all channels
    lda #$01
    sta sound_disable_flag  ;set disable flag
    rts
    
;-------------------------------------
; load_sound will prepare the sound engine to play a song or sfx.
;   input:
;       A: song/sfx number to play
sound_load:
    sta sound_temp1         ;save song number
    asl a                   ;multiply by 2.  We are indexing into a table of pointers (words)
    tay
    lda song_headers, y     ;setup the pointer to our song header
    sta sound_ptr
    lda song_headers+1, y
    sta sound_ptr+1
    
    ldy #$00
    lda (sound_ptr), y      ;read the first byte: # streams
    sta sound_temp2         ;store in a temp variable.  We will use this as a loop counter: how many streams to read stream headers for
    iny
streamattribloop:
    lda (sound_ptr), y      ;stream number
    tax                     ;stream number acts as our variable index
    iny
    
    lda (sound_ptr), y      ;status byte.  1= enable, 0=disable
    sta stream_status, x
    beq check_next_stream        ;if status byte is 0, stream disabled, so we are done
    iny
    
    lda (sound_ptr), y      ;channel number
    sta stream_channel, x
    iny
    
    lda (sound_ptr), y      ;initial duty and volume settings
    sta stream_vol_duty, x
    iny
    
    lda (sound_ptr), y
    sta stream_ve, x
    iny
    
    lda (sound_ptr), y      ;pointer to stream data.  Little endian, so low byte first
    sta stream_ptr_LO, x
    iny
    
    lda (sound_ptr), y
    sta stream_ptr_HI, x
    iny
    
    lda (sound_ptr), y
    sta stream_tempo, x
    
    lda #$A0
    sta stream_ticker_total, x
    
    lda #$01
    sta stream_note_length_counter,x
    
    lda #$00
    sta stream_ve_index, x
    sta stream_loop1, x
    sta stream_note_offset, x
check_next_stream:
    iny
    
    lda sound_temp1         ;song number
    sta stream_curr_sound, x
    
    dec sound_temp2         ;our loop counter
    bne streamattribloop
    rts

;--------------------------
; sound_play_frame advances the sound engine by one frame
sound_play_frame:
    lda sound_disable_flag
    bne framedone   ;if disable flag is set, don't advance a frame

    jsr se_silence  ;silence all channels.  se_set_apu will set volume later for all channels that are enabled.
                    ;the purpose of this subroutine call is to silence channels that aren't used by any streams.
    ldx #$00
streamcheckloop:
    lda stream_status, x
    and #$01    ;check whether the stream is active
    beq endstreamloop  ;if the stream isn't active, skip it
    
    ;add the tempo to the ticker total.  If there is a FF-> 0 transition, there is a tick
    lda stream_ticker_total, x
    clc
    adc stream_tempo, x
    sta stream_ticker_total, x
    bcc set_apubuffer    ;carry clear = no tick.  if no tick, we are done with this stream
    
    dec stream_note_length_counter, x   ;else there is a tick. decrement the note length counter
    bne set_apubuffer    ;if counter is non-zero, our note isn't finished playing yet
    lda stream_note_length, x   ;else our note is finished. reload the note length counter
    sta stream_note_length_counter, x
    
    jsr se_fetch_byte   ;read the next byte from the data stream
    
set_apubuffer:
    jsr se_set_temp_ports   ;copy the current stream's sound data for the current frame into our temporary APU vars (soft_apu_ports)
endstreamloop:
    inx
    cpx #$06
    bne streamcheckloop
    jsr se_set_apu      ;copy the temporary APU variables (soft_apu_ports) to the real APU ports ($4000, $4001, etc)
framedone:
    rts

;--------------------------
; se_fetch_byte reads one byte from a sound data stream and handles it
;   input: 
;       X: stream number    
se_fetch_byte:
    lda stream_ptr_LO, x
    sta sound_ptr
    lda stream_ptr_HI, x
    sta sound_ptr+1
    
    ldy #$00
fetchbyte:
    lda (sound_ptr), y
    bpl notefetch                ;if < #$80, it's a Note
    cmp #$A0
    bcc note_length_fetch         ;else if < #$A0, it's a Note Length
opcodefetch:                     ;else it's an opcode
    ;do Opcode stuff
    jsr se_opcode_launcher
    iny                      ;next position in the data stream
    lda stream_status, x
    and #%00000001
    bne fetchbyte               ;after our opcode is done, grab another byte unless the stream is disabled
    rts                      ; in which case we quit  (explained below)
note_length_fetch:
    ;do note length stuff
    and #%01111111          ;chop off bit7
    sty sound_temp1         ;save Y because we are about to destroy it
    tay
   ; lda note_length_table, y    ;get the note length count value
    sta stream_note_length, x
    sta stream_note_length_counter, x   ;stick it in our note length counter
    ldy sound_temp1         ;restore Y
    iny                     ;set index to next byte in the stream
    jmp fetchbyte              ;fetch another byte
notefetch:
    ;do Note stuff
    sta sound_temp2
    lda stream_channel, x
    cmp #NOISE
    bne not_noise_channel
    jsr se_do_noise
    jmp reset_ve
not_noise_channel:
    lda sound_temp2
    sty sound_temp1     ;save our index into the data stream
    clc
    adc stream_note_offset, x   ;add note offset
    asl a
    tay
   ; lda note_table, y
    sta stream_note_LO, x
    lda note_table+1, y
    sta stream_note_HI, x
    ldy sound_temp1     ;restore data stream index
    
    ;check if it's a rest and modify the status flag appropriately
    jsr se_check_rest
reset_ve:    
    lda #$00
    sta stream_ve_index, x  
update_streampointer:
    iny
    tya
    clc
    adc stream_ptr_LO, x
    sta stream_ptr_LO, x
    bcc endfetch
    inc stream_ptr_HI, x
endfetch:
    rts

se_do_noise:
    lda sound_temp2
    and #%00010000
    beq mode0noise
    lda sound_temp2
    ora #%10000000      ;set bit 7 to set mode1
    sta sound_temp2
mode0noise:
    lda sound_temp2
    sta stream_note_LO, x
    rts
;--------------------------------------------------
; se_check_rest will read a byte from the data stream and
;       determine if it is a rest or not.  It will set or clear the current
;       stream's rest flag accordingly.
;       input:
;           X: stream number
;           Y: data stream index
se_check_rest:
    lda (sound_ptr), y  ;read the note byte again
    cmp #rest
    bne not_rest
    lda stream_status, x
    ora #%00000010  ;set the rest bit in the status byte
    bne storerestbit  ;this will always branch.  bne is cheaper than a jmp.
not_rest:
    lda stream_status, x
    and #%11111101  ;clear the rest bit in the status byte
storerestbit:
    sta stream_status, x
    rts
    
;-----------------------------------------
; se_opcode_launcher will read an address from the opcode jump table and indirect jump there.
;    input: A: opcode byte
;               Y: data stream position
;               X: stream number
se_opcode_launcher:
    sty sound_temp1         ;save y register, because we are about to destroy it
    sec
    sbc #$A0                ;turn our opcode byte into a table index by subtracting $A0
    asl a                   ;multiply by 2 because we index into a table of addresses (words)
    tay
    lda sound_opcodes, y    ;get low byte of subroutine address
    sta sound_ptr2
    lda sound_opcodes+1, y  ;get high byte
    sta sound_ptr2+1
    ldy sound_temp1         ;restore our y register
    iny                     ;set to next position in data stream (assume an argument)
    jmp (sound_ptr2)           ;indirect jump to our opcode subroutine    
    
;----------------------------------------------------
; se_set_temp_ports will copy a stream's sound data to the temporary apu variables
;      input:
;           X: stream number
se_set_temp_ports:
    lda stream_channel, x
    asl a
    asl a
    tay
    
    jsr se_set_stream_volume
    
    lda #$08
    sta soft_apu_ports+1, y     ;sweep
    
    lda stream_note_LO, x
    sta soft_apu_ports+2, y     ;period LO
    
    lda stream_note_HI, x
    sta soft_apu_ports+3, y     ;period HI

    rts    

;----------------------------------
;    
se_set_stream_volume:
    sty sound_temp1             ;save our index into soft_apu_ports (we are about to destroy y)
    
    lda stream_ve, x            ;which volume envelope?
    asl a                       ;multiply by 2 because we are indexing into a table of addresses (words)
    tay
    lda volume_envelopes, y     ;get the low byte of the address from the pointer table
    sta sound_ptr               ;put it into our pointer variable
    lda volume_envelopes+1, y   ;get the high byte of the address
    sta sound_ptr+1
    
read_ve:
    ldy stream_ve_index, x      ;our current position within the volume envelope.
    lda (sound_ptr), y          ;grab the value.
    cmp #$FF
    bne set_vol                ;if not FF, set the volume
    dec stream_ve_index, x      ;else if FF, go back one and read again
    jmp read_ve                ;  FF essentially tells us to repeat the last
                                ;  volume value for the remainder of the note
set_vol:
    sta sound_temp2             ;save our new volume value (about to destroy A)
    
    cpx #TRIANGLE               
    bne setvolsquares                ;if not triangle channel, go ahead
    lda sound_temp2
    bne setvolsquares                ;else if volume not zero, go ahead (treat same as squares)
    lda #$80
    bmi store_vol              ;else silence the channel with #$80
setvolsquares:
    lda stream_vol_duty, x      ;get current vol/duty settings
    and #$F0                    ;zero out the old volume
    ora sound_temp2             ;OR our new volume in.

store_vol:
    ldy sound_temp1             ;get our index into soft_apu_ports
    sta soft_apu_ports, y       ;store the volume in our temp port
    inc stream_ve_index, x      ;set our volume envelop index to the next position

rest_check:
    ;check the rest flag. if set, overwrite volume with silence value 
    lda stream_status, x
    and #%00000010
    beq restcheckdone                   ;if clear, no rest, so quit
    lda stream_channel, x
    cmp #TRIANGLE               ;if triangle, silence with #$80
    beq resttri                    ;else, silence with #$30
    lda #$30        
    bne reststore                  ;this always branches.  bne is cheaper than a jmp
resttri:
    lda #$80
reststore:    
    sta soft_apu_ports, y
restcheckdone:
    rts   
    
;--------------------------
; se_set_apu copies the temporary RAM ports to the APU ports
se_set_apu:
setsquare1:
    lda soft_apu_ports+0
    sta $4000
    lda soft_apu_ports+1
    sta $4001
    lda soft_apu_ports+2
    sta $4002
    lda soft_apu_ports+3
    cmp sound_sq1_old       ;compare to last write
    beq setsquare2            ;don't write this frame if they were equal
    sta $4003
    sta sound_sq1_old       ;save the value we just wrote to $4003
setsquare2:
    lda soft_apu_ports+4
    sta $4004
    lda soft_apu_ports+5
    sta $4005
    lda soft_apu_ports+6
    sta $4006
    lda soft_apu_ports+7
    cmp sound_sq2_old
    beq settriangle
    sta $4007
    sta sound_sq2_old       ;save the value we just wrote to $4007
settriangle:
    lda soft_apu_ports+8
    sta $4008
    lda soft_apu_ports+10   ;there is no $4009, so we skip it
    sta $400A
    lda soft_apu_ports+11
    sta $400B
setnoise:
    lda soft_apu_ports+12
    sta $400C
    lda soft_apu_ports+14   ;there is no $400D, so we skip it
    sta $400E
    lda soft_apu_ports+15
    sta $400F
    rts
    
    



    
;-----------------------------------------------------------------
; these are the actual opcode subroutines
se_op_endsound:
    lda stream_status, x    ;end of stream, so disable it and silence
    and #%11111110
    sta stream_status, x    ;clear enable flag in status byte
    
    lda stream_channel, x
    cmp #TRIANGLE
    beq silence_tri        ;triangle is silenced differently from squares and noise
    lda #$30                ;squares and noise silenced with #$30
    bne silence            ; (this will always branch.  bne is cheaper than a jmp)
silence_tri:
    lda #$80                ;triangle silenced with #$80
silence:
    sta stream_vol_duty, x  ;store silence value in the stream's volume variable.

    rts
    
se_op_infinite_loop:
    lda (sound_ptr), y      ;read ptr LO from the data stream
    sta stream_ptr_LO, x    ;update our data stream position
    iny
    lda (sound_ptr), y      ;read ptr HI from the data stream
    sta stream_ptr_HI, x    ;update our data stream position
    
    sta sound_ptr+1         ;update the pointer to reflect the new position.
    lda stream_ptr_LO, x
    sta sound_ptr
    ldy #$FF                ;after opcodes return, we do an iny.  Since we reset  
                            ;the stream buffer position, we will want y to start out at 0 again.
    rts
    
se_op_change_ve:
    lda (sound_ptr), y      ;read the argument
    sta stream_ve, x        ;store it in our volume envelope variable
    lda #$00
    sta stream_ve_index, x  ;reset volume envelope index to the beginning
    rts
    
se_op_duty:
    lda (sound_ptr), y
    sta stream_vol_duty, x
    rts
    
se_op_set_loop1_counter:
    lda (sound_ptr), y      ;read the argument (# times to loop)
    sta stream_loop1, x     ;store it in the loop counter variable
    rts
    
se_op_loop1:
    dec stream_loop1, x     ;decrement the counter
    lda stream_loop1, x
    beq last_iteration     ;if zero, we are done looping
    jmp se_op_infinite_loop ;if not zero, jump back
last_iteration:
    iny                     ;skip the first byte of the address argument
                            ; the second byte will be skipped automatically upon return
                            ; (see se_fetch_byte after "jsr se_opcode_launcher")
    rts
    
se_op_set_note_offset:
    lda (sound_ptr), y          ;read the argument
    sta stream_note_offset, x      ;set the note offset.
    rts
    
se_op_adjust_note_offset:
    lda (sound_ptr), y          ;read the argument (what value to add)
    clc
    adc stream_note_offset, x   ;add it to the current offset
    sta stream_note_offset, x   ;and save.
    rts
    
se_op_transpose:
    lda (sound_ptr), y          ;read low byte of the pointer to our lookup table
    sta sound_ptr2              ;store it in a new pointer variable
    iny
    lda (sound_ptr), y          ;read high byte of pointer to table
    sta sound_ptr2+1
    
    sty sound_temp1             ;save y because we are about to destroy it
    lda stream_loop1, x         ;get loop counter, put it in Y
    tay                         ;   this will be our index into the lookup table
    dey                         ;subtract 1 because indexes start from 0.
    
    lda (sound_ptr2), y         ;read a value from the table.
    clc
    adc stream_note_offset, x   ;add it to the note offset
    sta stream_note_offset, x
    
    ldy sound_temp1             ;restore Y
    rts

irq:
    rti
NMI:
    pha     ;save registers
    txa
    pha
    tya
    pha
    
    ;do sprite DMA
    ;update palettes if needed
    ;draw stuff on the screen
    
    lda needdraw
    beq drawing_done   ;if drawing flag is clear, skip drawing
    lda $2002           ;else, draw
    jsr draw_dbuffer
    lda #$00            ;finished drawing, so clear drawing flag
    sta needdraw

    jsr read_joypad
    jsr handle_input
    jsr prepare_dbuffer

drawing_done:
    lda #$00
    sta $2005
    sta $2005   ;set scroll

    jsr sound_play_frame    ;run our sound engine after all drawing code is done.
                            ;this ensures our sound engine gets run once per frame.

    lda #$01
    sta sleeping           ;wake up the main program

    inc $100               ; frame counter

    pla     ;restore registers
    tay
    pla
    tax
    pla
    rti


RESET:
    sei
    cld
    ldx #$FF
    txs
    inx

vblankwait1:
    bit $2002
    bpl vblankwait1

clearmem:
    lda #$00
    sta $0000, x
    sta $0100, x
    sta $0300, x
    sta $0400, x
    sta $0500, x
    sta $0600, x
    sta $0700, x
    lda #$FE
    sta $0200, x
    inx
    bne clearmem

 vblankwait2:
    bit $2002
    bpl vblankwait2

;set a couple palette colors.  This demo only uses two
    lda $2002   ;reset PPU HI/LO latch

    lda #$3F
    sta $2006
    lda #$00
    sta $2006   ;palette data starts at $3F00

    lda #$0F    ;black
    sta $2007
    lda #$30    ;white
    sta $2007

    jsr draw_background

;Enable sound channels
    jsr sound_init

    lda #$01
    sta current_song
    jsr sound_load

    lda #$88
    sta $2000   ;enable NMIs
    lda #$18
    sta $2001   ;turn PPU on

; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!     THESE THREE LINES CHANGE THE OUTCOME OF THIS PROGRAM. CHECK THIS.
    ldy #$00
    ldx #$00
    lda #$00
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

; FOREVER LOOP *************************************************************************************
forever:
    lda sleeping ;go to sleep (wait for NMI).
    beq dostuff
    bne dontdostuff


    ;when NMI wakes us up, handle input, fill the drawing buffer and go back to sleep

dostuff:


    lda #$00
    sta sleeping
dontdostuff:
    jmp forever ;go back to sleep
    
    
;----------------------------
; read_joypad will capture the current button state and store it in joypad1.  
;       Off-to-on transitions will be stored in joypad1_pressed
read_joypad:
    lda joypad1
    sta joypad1_old ;save last frame's joypad button states
    
    lda #$01
    sta $4016
    lda #$00
    sta $4016
    
    ldx #$08
joyloop:    
    lda $4016
    lsr a
    rol joypad1  ;A, B, select, start, up, down, left, right
    dex
    bne joyloop
    
    lda joypad1_old ;what was pressed last frame.  EOR to flip all the bits to find ...
    eor #$FF    ;what was not pressed last frame
    and joypad1 ;what is pressed this frame
    sta joypad1_pressed ;stores off-to-on transitions
    
    rts

;---------------------
; handle_input will perform actions based on input:
;   up - play current song
;   down - stop playing the song
;   left - cycle down a song
;   right - cycle up a song
handle_input:
    lda joypad1_pressed
    and #$0F ;check d-pad only
    beq checkingdone
check_up:
    and #$08 ;up
    beq check_down
    lda current_song
    jsr sound_load
check_down:
    lda joypad1_pressed
    and #$04 ;down
    beq check_left
    lda #$00
    jsr sound_load
check_left:
    lda joypad1_pressed
    and #$02 ;left
    beq check_right
    jsr song_down
check_right:
    lda joypad1_pressed
    and #$01 ;right
    beq checkingdone
    jsr song_up 
    inc $101
checkingdone:
    rts

;--------------------
; song_down will move selection down a song.  Song 1 wraps around to last song
song_down:
    dec current_song
    lda current_song
    bne songdn_ok
    lda #NUM_SONGS-1    ;last song.  We wrapped from Song 1
    sta current_song
songdn_ok:
    rts
    
;----------------------
; song_up will move selection up a song.  Last song will wrap to song 1   
song_up:
    inc current_song
    lda current_song
    cmp #NUM_SONGS          ;did we move past the last song?
    bne songup_ok           ;if not, no problem
    lda #$01            ;but if we did, wrap around to song 1
    sta current_song
songup_ok:
    rts
    
;-------------------------------
; prepare_dbuffer fills the drawing buffer with the text strings we need 
prepare_dbuffer:    
    ;write either "playing" or "not playing" to the dbuffer
    lda stream_status
    ora stream_status+1
    ora stream_status+2
    ora stream_status+3
    ora stream_status+4
    ora stream_status+5
    and #$01
    beq show_not_playing  ;if all streams disabled, write "NOT PLAYING" on the screen
    lda sound_disable_flag
    bne show_not_playing  ;if the disable flag is set, we want to write "NOT PLAYING" too
show_playing:
    lda <(text_playing)  ;set ptr1 to point to beginning of text string
    sta ptr1
    lda >(text_playing)
    sta ptr1+1
    jmp prepdbuffer
show_not_playing:
    lda <(text_not_playing)
    sta ptr1
    lda >(text_not_playing)
    sta ptr1+1
prepdbuffer:
    lda #$21    ;target PPU address.  add_to_dbuffer expects the HI byte in A and the LO byte in Y
    ldy #$0B
    jsr add_to_dbuffer
    
    jsr song_num_to_dbuffer
    
    lda #$01
    sta needdraw    ;set drawing flag so the NMI knows to draw
    
    rts

;-------------------------
; add_to_dbuffer will convert a text string into a dbuffer string and add it to the drawing buffer.
;   add_to_dbuffer expects:
;       HI byte of the target PPU address in A, 
;       LO byte of the target PPU address in Y
;       pointer to the source text string in ptr1
;   dbuffer string format:
;       byte 0: length of data (ie, length of the text string)
;       byte 1-2: target PPU address (HI byte first)
;       byte 3-n: bytes to copy
;   Note:   dbuffer starts at $0100.  This is the stack page.  The
;               stack counts backwards from $1FF, and this program is small enough that there
;               will never be a conflcit.  But for larger programs, watch out.
add_to_dbuffer:
    ldx dbuffer_index
    sta $0101, x    ;write target PPU address to dbuffer
    tya
    sta $0102, x
    
    ldy #$00
dbufferloop:
    lda (ptr1), y
    cmp #$FF
    beq dbufferingdone
    sta $0103, x    ;copy the text string to dbuffer,
    iny
    inx
    bne dbufferloop
dbufferingdone:
    ldx dbuffer_index
    tya
    sta $0100, x        ;store string length at the beginning of the string header
    
    clc
    adc dbuffer_index
    adc #$03        
    sta dbuffer_index   ;update buffer index.  new index = old index + 3-byte header + string length
    
    tax
    lda #$00
    sta $0100, x        ;stick a 0 on the end to terminate dbuffer.
    rts

;----------------------------------------------
; song_num_to_dbuffer tells the drawing buffer to write the currently selected song number on the screen.
song_num_to_dbuffer:
    ldx dbuffer_index
    lda #$01        ;write one byte
    sta $0100, x
    lda #$21        ;destination PPU $214A
    sta $0101, x
    lda #$4A
    sta $0102, x
    lda current_song ;which byte to write
    sta $0103, x
    lda #$00         ;terminate the dbuffer with 0
    sta $0104,x
    txa              ;update our index
    clc
    adc #$04
    sta dbuffer_index
    rts
    
;------------------------
; draw_dbuffer will write the contents of the drawing buffer to the PPU
;       dbuffer is made up of a series of drawing strings.  dbuffer is 0-terminated.
;       See add_to_dbuffer for drawing string format.
draw_dbuffer:
    ldy #$00
header_loop:
    lda $0100, y
    beq drawingdone       ;if 0, we are at the end of the dbuffer, so quit
    tax             ;else this is how many bytes we want to copy to the PPU
    iny
    lda $0100, y    ;set the target PPU address
    sta $2006
    iny
    lda $0100, y
    sta $2006
    iny
stringcopyloop:
    lda $0100, y    ;copy the contents of the drawing string to PPU
    sta $2007
    iny
    dex
    bne stringcopyloop
    beq header_loop    ;when we finish copying, see if there is another drawing string.    
drawingdone:
    ldy #$00
    sty dbuffer_index   ;reset index and "empty" the dbuffer by sticking a zero in the first position
    sty $0100
    rts

;----------------------------
; draw_background will draw some background strings on the screen
;   this hard-coded routine is called only once in RESET
draw_background:

    lda #$21
    sta $2006
    lda #$04
    sta $2006
    ldy #$00
string1loop:
    lda text_sound, y
    bmi s1_done
    sta $2007
    iny
    bne string1loop
s1_done:
    lda #$21
    sta $2006
    lda #$44
    sta $2006
    ldy #$00
stringloop2:
    lda text_song, y
    bmi done
    sta $2007
    iny
    bne stringloop2
done:
    rts

; ************************************************************************************************************************************
; ************************************************************ DATA COLLECTION *******************************************************
; ************************************************************************************************************************************

;these are our text strings.  They are all terminated by $FF

sound_opcodes:
    .dw se_op_endsound            ;$A0
    .dw se_op_infinite_loop       ;$A1
    .dw se_op_change_ve           ;$A2
    .dw se_op_duty                ;$A3
    .dw se_op_set_loop1_counter   ;$A4
    .dw se_op_loop1               ;$A5
    .dw se_op_set_note_offset     ;$A6
    .dw se_op_adjust_note_offset  ;$A7
    .dw se_op_transpose           ;$A8
    ;etc, 1 entry per subroutine

text_song:
    .db $22, $1E, $1D, $16, $0D, $FF ;"SONG:"
    
text_sound:
    .db $22, $1E, $24, $1D, $13, $0D, $FF ;"SOUND:"
text_not_playing:
    .db $1D, $1E, $23, $00 ;"NOT "
text_playing:
    .db $1F, $1B, $10, $28, $18, $1D, $16, $00, $00, $00, $00, $FF ;"PLAYING    "

volume_envelopes:
    .dw se_ve_1
    .dw se_ve_2
    .dw se_ve_3
    .dw se_ve_tgl_1
    .dw se_ve_tgl_2
    .dw se_battlekid_loud
    .dw se_battlekid_loud_long
    .dw se_battlekid_soft
    .dw se_battlekid_soft_long
    .dw se_drum_decay

note_length_table:
    .byte $01   ;32nd note
    .byte $02   ;16th note
    .byte $04   ;8th note
    .byte $08   ;quarter note
    .byte $10   ;half note
    .byte $20   ;whole note
              ;---dotted notes
    .byte $03   ;dotted 16th note
    .byte $06   ;dotted 8th note
    .byte $0C   ;dotted quarter note
    .byte $18   ;dotted half note
    .byte $30   ;dotted whole note?
              ;---other
    .byte $07   ;modified quarter to fit after d_sixteenth triplets
    .byte $14   ;2 quarters plus an 8th
    .byte $0A

se_ve_1:
    .byte $0F, $0E, $0D, $0C, $09, $05, $00
    .byte $FF
se_ve_2:
    .byte $01, $01, $02, $02, $03, $03, $04, $04, $07, $07
    .byte $08, $08, $0A, $0A, $0C, $0C, $0D, $0D, $0E, $0E
    .byte $0F, $0F
    .byte $FF
se_ve_3:
    .byte $0D, $0D, $0D, $0C, $0B, $00, $00, $00, $00, $00
    .byte $00, $00, $00, $00, $06, $06, $06, $05, $04, $00
    .byte $FF
    
se_ve_tgl_1:
    .byte $0F, $0B, $09, $08, $07, $06, $00
    .byte $FF
    
se_ve_tgl_2:
    .byte $0B, $0B, $0A, $09, $08, $07, $06, $06, $06, $05
    .byte $FF
    
    
se_battlekid_loud:
    .byte $0f, $0e, $0c, $0a, $00
    .byte $FF
    
se_battlekid_loud_long:
    .byte $0f, $0e, $0c, $0a, $09
    .byte $FF
    
se_battlekid_soft:
    .byte $09, $08, $06, $04, $00
    .byte $FF
    
se_battlekid_soft_long:
    .byte $09, $08, $06, $04, $03
    .byte $FF
    
se_drum_decay:
    .byte $0E, $09, $08, $06, $04, $03, $02, $01, $00
    .byte $FF

note_table:
    .word                                                                $07F1, $0780, $0713 ;A1-B1 ($00-$02)
    .dw $06AD, $064D, $05F3, $059D, $054D, $0500, $04B8, $0475, $0435, $03F8, $03BF, $0389 ;C2-B2 ($03-$0E)
    .dw $0356, $0326, $02F9, $02CE, $02A6, $027F, $025C, $023A, $021A, $01FB, $01DF, $01C4 ;C3-B3 ($0F-$1A)
    .dw $01AB, $0193, $017C, $0167, $0151, $013F, $012D, $011C, $010C, $00FD, $00EF, $00E2 ;C4-B4 ($1B-$26)
    .dw $00D2, $00C9, $00BD, $00B3, $00A9, $009F, $0096, $008E, $0086, $007E, $0077, $0070 ;C5-B5 ($27-$32)
    .dw $006A, $0064, $005E, $0059, $0054, $004F, $004B, $0046, $0042, $003F, $003B, $0038 ;C6-B6 ($33-$3E)
    .dw $0034, $0031, $002F, $002C, $0029, $0027, $0025, $0023, $0021, $001F, $001D, $001B ;C7-B7 ($3F-$4A)
    .dw $001A, $0018, $0017, $0015, $0014, $0013, $0012, $0011, $0010, $000F, $000E, $000D ;C8-B8 ($4B-$56)
    .dw $000C, $000C, $000B, $000A, $000A, $0009, $0008                                    ; C9-F#9 ($57-$5D)
    .dw $0000 ;rest


songinclude:
    .include "song0.i"  ;holds the data for song 0 (header and data streams)
    .include "song1.i"  ;holds the data for song 1
    .include "song2.i"
    .include "song3.i"
    .include "song4.i"
    .include "song5.i"
    .include "song6.i"
    .include "song7.i"
    .include "song8.i"

song_headers:
    .dw song0_header  ;this is a silence song.  See song0.i for more details
    .dw song1_header  ;The Guardian Legend Boss song
    .dw song2_header  ;a sound effect.  Try playing it over the other songs.
    .dw song3_header  ;Dragon Warrior overland song
    .dw song4_header  ;a new song taking advantage of note lengths and rests
    .dw song5_header  ;another sound effect played at a very fast tempo.
    .dw song6_header
    .dw song7_header
    .dw song8_header

org $fffa
    .dw NMI        ;when an NMI happens (once per frame if enabled) the
                   ;processor will jump to the label NMI:
    .dw RESET      ;when the processor first turns on or is reset, it will jump
                   ;to the label RESET:
    .dw irq        ;external interrupt IRQ is not used in this tutorial
    
    ;.bank 4
    ;.org $0000
    .incbin "drums.chr"
