board <- {
  mappernum = 133,
  cpu_rom = {
    size_base = 0x10000, size_max = 0x10000, banksize = 0x8000
  },
  ppu_rom = {
    size_base = 0x8000, size_max = 0x8000, banksize = 0x2000
  },
  cpu_romsize = 0x10000, cpu_banksize = 0x8000,
  ppu_romsize = 0x8000, ppu_banksize = 0x2000,
  ppu_ramfind = false, vram_mirrorfind = true
};

function cpu_dump(d, pagesize, banksize) {
  for (local i = 0; i < pagesize; i += 1) {
    cpu_write(d, 0x8000, 0x01);
    cpu_write(d, 0x8001, i << 2);
    cpu_write(d, 0x8000, 0x04);
    cpu_write(d, 0x8001, i << 2);
    cpu_write(d, 0x8000, 0x21);
    cpu_write(d, 0x8001, i << 2);
    cpu_write(d, 0x8000, 0x24);
    cpu_write(d, 0x8001, i << 2);
    // Delay
    for (local j = 0x0000; j < 0x7FFF; j += 1) {
    }
    cpu_read(d, 0x8000, 0x4000);
    cpu_read(d, 0xC000, 0x4000);
  }
}

function ppu_dump(d, pagesize, banksize) {
  for (local i = 0; i < pagesize; i += 1) {
    local val = i | (((i & 1) << 4) ^ 0x10) | ((i & 2) << 2);
    cpu_write(d, 0x8000, 0x01);
    cpu_write(d, 0x8001, val);
    cpu_write(d, 0x8000, 0x04);
    cpu_write(d, 0x8001, val);
    cpu_write(d, 0x8000, 0x21);
    cpu_write(d, 0x8001, val);
    cpu_write(d, 0x8000, 0x24);
    cpu_write(d, 0x8001, val);
    // Delay
    for (local j = 0x0000; j < 0x7FFF; j += 1) {
    }
    ppu_read(d, 0x0000, 0x2000);
  }
}
