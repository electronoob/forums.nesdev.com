/* Nintendulator Mapper DLLs
 * Copyright (C) 2002-2011 QMT Productions
 *
 * $URL: svn+ssh://quietust@svn.code.sf.net/p/nintendulator/code/mappers/trunk/src/iNES/mapper064.cpp $
 * $Id: mapper064.cpp 1311 2015-03-01 03:56:04Z quietust $
 */

#include	"..\DLL\d_iNES.h"

namespace {
uint16 IRQcounter, IRQlatch;
uint8 M2RaiseIRQ, IRQmode, IRQreload, IRQenabled, prescaler;
uint8 Cmd;
uint8 PRG[3];
uint8 CHR[8];
uint8 Mirror;

#define MODE_A12 0
#define MODE_M2 1

void	Sync (void)
{
	uint8 SwCHR = (Cmd & 0x80) >> 5;
	if (Cmd & 0x40)	{
		EMU->SetPRG_ROM8(0xA, PRG[0]);
		EMU->SetPRG_ROM8(0xC, PRG[1]);
		EMU->SetPRG_ROM8(0x8, PRG[2]);
	} else {
		EMU->SetPRG_ROM8(0x8, PRG[0]);
		EMU->SetPRG_ROM8(0xA, PRG[1]);
		EMU->SetPRG_ROM8(0xC, PRG[2]);
	}
	EMU->SetPRG_ROM8(0xE, -1);

	if (Cmd & 0x20)	{
		for (int i = 0; i < 8; i++) {
			EMU->SetCHR_ROM1(SwCHR ^ i, CHR[i]);
			if (ROM->INES_MapperNum == 158) EMU->SetCHR_NT1(SwCHR ^ i, (CHR[i] & 0x80) >> 7);
		}
	} else {
		for (int i = 0; i < 4; i += 2) {
			EMU->SetCHR_ROM2(SwCHR ^ i, CHR[i] >> 1);
			if (ROM->INES_MapperNum == 158) EMU->SetCHR_NT1((SwCHR ^ i)+8, (CHR[i] & 0x80) >> 7);
			if (ROM->INES_MapperNum == 158) EMU->SetCHR_NT1((SwCHR ^ i)+9, (CHR[i] & 0x80) >> 7);
		}
		for (int i = 4; i < 8; i++) {
			EMU->SetCHR_ROM1(SwCHR ^ i, CHR[i]);
			if (ROM->INES_MapperNum == 158) EMU->SetCHR_NT1((SwCHR ^ i)+8, (CHR[i] & 0x80) >> 7);
		}
	}
	if (ROM->INES_MapperNum != 158) {
		if (Mirror & 0x1)
			EMU->Mirror_H();
		else
			EMU->Mirror_V();
	}

}

int	MAPINT	SaveLoad (STATE_TYPE mode, int offset, unsigned char *data) {
	SAVELOAD_BYTE(mode, offset, data, prescaler);
	SAVELOAD_BYTE(mode, offset, data, Cmd);
	for (int i = 0; i < 3; i++)
		SAVELOAD_BYTE(mode, offset, data, PRG[i]);
	for (int i = 0; i < 8; i++)
		SAVELOAD_BYTE(mode, offset, data, CHR[i]);
	SAVELOAD_BYTE(mode, offset, data, Mirror);
	SAVELOAD_WORD(mode, offset, data, IRQcounter);
	SAVELOAD_WORD(mode, offset, data, IRQlatch);
	SAVELOAD_BYTE(mode, offset, data, IRQenabled);
	SAVELOAD_BYTE(mode, offset, data, IRQmode);
	SAVELOAD_BYTE(mode, offset, data, IRQreload);
	SAVELOAD_BYTE(mode, offset, data, M2RaiseIRQ);
	
	if (mode == STATE_LOAD)	Sync();
	return offset;
}

void	MAPINT	ClockRambo (void) {
	if (IRQreload || !IRQcounter)
		IRQcounter = IRQlatch;
	else
		IRQcounter--;
	if (!IRQcounter) M2RaiseIRQ = 4;
	IRQreload = 0;
}

void	MAPINT	PPUCycle (int Addr, int Scanline, int Cycle, int IsRendering) {
	if (IRQmode==MODE_A12 && Cycle==256 && IsRendering) ClockRambo();
}

void	MAPINT	CPUCycle (void) {
	if (M2RaiseIRQ) if (!--M2RaiseIRQ) if (IRQenabled) EMU->SetIRQ(0);
	if (IRQmode==MODE_M2 && !(++prescaler & 3)) ClockRambo();
}

void	MAPINT	Write89 (int Bank, int Addr, int Val) {
	if (Addr & 1)
		switch (Cmd & 0xF) {
			case 0:	CHR[0] = Val;	break;
			case 1:	CHR[2] = Val;	break;
			case 2:	CHR[4] = Val;	break;
			case 3:	CHR[5] = Val;	break;
			case 4:	CHR[6] = Val;	break;
			case 5:	CHR[7] = Val;	break;
			case 6:	PRG[0] = Val;	break;
			case 7:	PRG[1] = Val;	break;
	
			case 8:	CHR[1] = Val;	break;
			case 9:	CHR[3] = Val;	break;
			case 15:PRG[2] = Val;	break;
		}
	else
		Cmd = Val;
	Sync();
}
void	MAPINT	WriteAB (int Bank, int Addr, int Val) {
	if (Addr & 1)
		;
	else
		Mirror = Val;
	Sync();
}
void	MAPINT	WriteCD (int Bank, int Addr, int Val) {
	if (Addr & 1) {
		IRQmode = Val &1;
		IRQreload = 1;
		IRQlatch |= 1;
		prescaler = 0;
	} else {
		IRQlatch = Val;
	}
}
void	MAPINT	WriteEF (int Bank, int Addr, int Val) {
	IRQenabled = (Addr & 1);
	if (!IRQenabled) EMU->SetIRQ(1);
}

void	MAPINT	Reset (RESET_TYPE ResetType) {
	EMU->SetCPUWriteHandler(0x8, Write89);
	EMU->SetCPUWriteHandler(0x9, Write89);
	EMU->SetCPUWriteHandler(0xA, WriteAB);
	EMU->SetCPUWriteHandler(0xB, WriteAB);
	EMU->SetCPUWriteHandler(0xC, WriteCD);
	EMU->SetCPUWriteHandler(0xD, WriteCD);
	EMU->SetCPUWriteHandler(0xE, WriteEF);
	EMU->SetCPUWriteHandler(0xF, WriteEF);

	if (ResetType == RESET_HARD) {
		for (int i = 0; i < 3; i++) PRG[i] = 0xFF;
		for (int i = 0; i < 8; i++) CHR[i] = i;
		IRQenabled = IRQcounter = IRQlatch = IRQmode = IRQreload = M2RaiseIRQ = prescaler = 0;
		Cmd = 0;
		Mirror = 0;
	}
	Sync();
}

uint16 MapperNum = 64;
uint16 MapperNum2 = 158;
} // namespace

const MapperInfo MapperInfo_064 = {
	&MapperNum,
	_T("Tengen RAMBO-1"),
	COMPAT_NEARLY,
	NULL,
	Reset,
	NULL,
	CPUCycle,
	PPUCycle,
	SaveLoad,
	NULL,
	NULL
};

const MapperInfo MapperInfo_158 = {
	&MapperNum2,
	_T("Tengen RAMBO-1 with Single-Screen Mirroring"),
	COMPAT_NEARLY,
	NULL,
	Reset,
	NULL,
	CPUCycle,
	PPUCycle,
	SaveLoad,
	NULL,
	NULL
};
