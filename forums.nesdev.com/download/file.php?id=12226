waitFrame:
	inc sleeping
	@loop:
		lda sleeping
		bne @loop
	rts

drawFrame
	lda #$01
	sta flagDRAW	; drawing needed
	sta flagOAM		; OAM needed
	sta flagPPUREG	; PPUREG changes needed
	jsr waitFrame	; wait for NMI
	jsr readController1
	rts
	
turnScreenOn:     ; Enable screen rendering       
    BIT $2002   ; read from PPUSTATUS 
    LDA #$00
    STA $2005
    STA $2005
        
    LDA #%10010000      ; re-enable NMI 0                                                   
    STA $2000     
    LDA #%00011110          
    STA $2001                                                        
    RTS   
	

turnScreenOff:          ; Disable screen rendering
    LDA #$00                                                         
    STA $2000       ; disables the NMI                                                   
    STA $2001       ; disables rendering                                                
    RTS  

clearScreen:
    JSR turnScreenOff
    LDA $2002    ; read PPU status to reset the high/low latch
    LDA #$20
    STA PPUADDR
    LDA #$00
    STA PPUADDR
    
    LDX #$04
    LDY #$00
	
clearscreenloop:
	JSR turnScreenOff
    LDA #$08				
    STA $2007
    INY
    BNE clearscreenloop
    DEX
    BNE clearscreenloop
    
    JSR loadAttributes
    
    JSR turnScreenOn

    RTS

loadPalettes:
	bit PPUSTATUS          	; read PPU status to reset the high/low latch
	LDA #$3F	
	STA PPUADDR            	; write the high byte of $3F00 address
	LDA #$00	
	STA PPUADDR            	; write the low byte of $3F00 address
	LDX #$00             	; start out at 0
loadpalettesloop:	
	LDA palette, x       	; load data from address (palette + the value in x)
							; 1st time through loop it will load palette+0
							; 2nd time through loop it will load palette+1
							; 3rd time through loop it will load palette+2
							; etc
	STA $2007            	; write to PPU
	INX                  	; X = X + 1
	CPX #$20             	; Compare X to hex $20, decimal 32 - copying 16 bytes = 8 palettes
	BNE loadpalettesloop 	; Branch to LoadPalettesLoop if compare was Not Equal to zero
							; if compare was equal to 32, keep going down
							
	; reset scroll after lda PPUADDR
	bit PPUSTATUS
	lda xscroll
	sta PPUSCROLL
	lda yscroll
	sta PPUSCROLL
	
	rts
	
loadBackground:
  
	LDA PPUSTATUS             ; read PPU status to reset the high/low latch
	LDA #$20
	STA PPUADDR             ; write the high byte of $2000 address
	LDA #$00
	STA PPUADDR             ; write the low byte of $2000 address
	
	LDA #<background
	STA pointerLo       ; put the low byte of the address of background into pointer
	LDA #>background
	STA pointerHi       ; put the high byte of the address into pointer
	
	LDX #$00            ; start at pointer + 0
	LDY #$00
@outsideloop:
  
@insideloop:
	LDA (pointerLo), y  ; copy one background byte from address in pointer plus Y
	STA $2007           ; this runs 256 * 4 times
	
	INY                 ; inside loop counter
	CPY #$00
	BNE @insideloop      ; run the inside loop 256 times before continuing down
	
	INC pointerHi       ; low byte went 0 to 256, so high byte needs to be changed now
	
	INX
	CPX #$04
	BNE @outsideloop     ; run the outside loop 4 times before continuing down
	
secondtime:

	LDA $2002             ; read PPU status to reset the high/low latch
	LDA #$24
	STA PPUADDR             ; write the high byte of $2400 address
	LDA #$00
	STA PPUADDR             ; write the low byte of $2000 address
	
	LDA #<background
	STA pointerLo       ; put the low byte of the address of background into pointer
	LDA #>background
	STA pointerHi       ; put the high byte of the address into pointer
	
	LDX #$00            ; start at pointer + 0
	LDY #$00
@outsideloop:
  
@insideloop:
	LDA (pointerLo), y  ; copy one background byte from address in pointer plus Y
	STA $2007           ; this runs 256 * 4 times
	
	INY                 ; inside loop counter
	CPY #$00
	BNE @insideloop      ; run the inside loop 256 times before continuing down
	
	INC pointerHi       ; low byte went 0 to 256, so high byte needs to be changed now
	
	INX
	CPX #$04
	BNE @outsideloop     ; run the outside loop 4 times before continuing down
	
	rts
  
loadAttributes:
	LDA $2002           	; read PPU status to reset the high/low latch
	LDA #$23	
	STA PPUADDR           	; write the high byte of $23C0 address
	LDA #$C0	
	STA PPUADDR           	; write the low byte of $23C0 address
	LDX #$00            	; start out at 0
loadattributesloop:	
	LDA attributes, x   	 ; load data from address (attribute + the value in x)
	STA $2007           	; write to PPU
	INX                 	; X = X + 1
	CPX #$40            	; Compare X to hex $40, decimal 64 - copying 64 bytes
	BNE loadattributesloop  ; Branch to LoadAttributeLoop if compare was Not Equal to zero
							; if compare was equal to 128, keep going down              
	
      
	rts

clearBackground:
	LDA $2002             ; read PPU status to reset the high/low latch
	LDA #$20
	STA PPUADDR             ; write the high byte of $2000 address
	LDA #$00
	STA PPUADDR             ; write the low byte of $2000 address

	ldx #$00
	ldy #$00
	
clearbgoutsideloop:
	
clearbginsideloop:
	lda #$00
	sta PPUDATA
	inx
	cpx #$00
	bne clearbginsideloop
	
	sta PPUDATA
	iny
	cpy #$04
	
	bne clearbgoutsideloop
	
	lda PPUSTATUS
	lda #$23
	sta PPUADDR
	lda #$C0
	sta PPUADDR
	
	ldx #$00
	
clearbgloadattributesloop:
	lda #$00
	sta PPUDATA
	inx
	cpx #$10
	bne clearbgloadattributesloop
	
	; reset scroll after sta PPUADDR
	bit PPUSTATUS
	lda xscroll
	sta PPUSCROLL
	lda yscroll
	sta PPUSCROLL
	
	rts
	
readController1:
  LDA #$01
  STA $4016
  LDA #$00
  STA $4016
  LDX #$08
readcontrollerloop:
  LDA $4016
  LSR A            ; bit0 -> Carry
  ROL buttons1     ; bit0 <- Carry
  DEX
  BNE readcontrollerloop
  RTS
	
initSprites:
	ldx #$00
	
spritesloop:
	lda sprites,x	; load first sprites
	sta $0200,x
	inx
	cpx #$00
	bne spritesloop
	
	rts
	
loadSprites:
	lda #$00		; low byte of $0200
	sta $2003		; load into PPU
	lda #$02		; high byte of $0200
	sta $4014		; start DMA
	
	rts

renderBackground:

	; TODO

	rts
	
loadStartScreen:
	
	; TODO
	
	rts
	
waitForStart:

	rts






