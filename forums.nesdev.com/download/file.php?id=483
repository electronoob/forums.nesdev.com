diff -c6 -r source-orig/core/NstMachine.cpp source/core/NstMachine.cpp
*** source-orig/core/NstMachine.cpp	2012-11-28 15:23:14.000000000 -0600
--- source/core/NstMachine.cpp	2013-03-18 20:36:57.850196439 -0500
***************
*** 507,518 ****
--- 507,520 ----
  				if (cheats)
  					cheats->BeginFrame( tracker.IsFrameLocked() );
  
  				cpu.ExecuteFrame( sound );
  				ppu.EndFrame();
  
+ 				renderer.bgColor = ppu.output.bgColor;
+ 
  				if (video)
  					renderer.Blit( *video, ppu.GetScreen(), ppu.GetBurstPhase() );
  
  				cpu.EndFrame();
  
  				if (image)
diff -c6 -r source-orig/core/NstPpu.cpp source/core/NstPpu.cpp
*** source-orig/core/NstPpu.cpp	2012-11-28 15:23:14.000000000 -0600
--- source/core/NstPpu.cpp	2013-03-18 20:36:57.850196439 -0500
***************
*** 949,960 ****
--- 949,962 ----
  
  				if (!(address & 0x3))
  				{
  					palette.ram[address ^ 0x10] = data;
  					output.palette[address ^ 0x10] = final;
  				}
+ 
+ 				output.bgColor = palette.ram[0] & uint(Palette::COLOR);
  			}
  			else
  			{
  				address &= 0x3FFF;
  
  				if (address >= 0x2000)
diff -c6 -r source-orig/core/NstPpu.hpp source/core/NstPpu.hpp
*** source-orig/core/NstPpu.hpp	2012-11-28 15:23:14.000000000 -0600
--- source/core/NstPpu.hpp	2013-03-18 20:36:39.582196143 -0500
***************
*** 307,318 ****
--- 307,319 ----
  				explicit Output(Video::Screen::Pixel*);
  
  				Video::Screen::Pixel* target;
  				Video::Screen::Pixel* pixels;
  				uint burstPhase;
  				word palette[Palette::SIZE];
+ 				uint bgColor;
  			};
  
  			struct Oam
  			{
  				Oam();
  
***************
*** 409,421 ****
--- 410,424 ----
  			Regs regs;
  			Scroll scroll;
  			Tiles tiles;
  			Chr chr;
  			Nmt nmt;
  			int scanline;
+ 		public:
  			Output output;
+ 		private:
  			PpuModel model;
  			Hook hActiveHook;
  			Hook hBlankHook;
  			const byte* rgbMap;
  			const byte* yuvMap;
  			Oam oam;
diff -c6 -r source-orig/core/NstVideoFilterNtsc.cpp source/core/NstVideoFilterNtsc.cpp
*** source-orig/core/NstVideoFilterNtsc.cpp	2012-11-28 15:23:14.000000000 -0600
--- source/core/NstVideoFilterNtsc.cpp	2013-03-18 15:21:34.166633754 -0500
***************
*** 40,60 ****
  
  			template<typename Pixel,uint BITS>
  			void Renderer::FilterNtsc::BlitType(const Input& input,const Output& output,uint phase) const
  			{
  				NST_ASSERT( phase < 3 );
  
  				const Input::Pixel* NST_RESTRICT src = input.pixels;
  				Pixel* NST_RESTRICT dst = static_cast<Pixel*>(output.pixels);
  				const long pad = output.pitch - (NTSC_WIDTH-7) * sizeof(Pixel);
  
  				phase &= lut.noFieldMerging;
  
  				for (uint y=HEIGHT; y; --y)
  				{
! 					NES_NTSC_BEGIN_ROW( &lut, phase, lut.black, lut.black, *src++ );
  
  					for (const Input::Pixel* const end=src+(NTSC_WIDTH/7*3-3); src != end; src += 3, dst += 7)
  					{
  						NES_NTSC_COLOR_IN( 0, src[0] );
  						NES_NTSC_RGB_OUT( 0, dst[0], BITS );
  						NES_NTSC_RGB_OUT( 1, dst[1], BITS );
--- 40,61 ----
  
  			template<typename Pixel,uint BITS>
  			void Renderer::FilterNtsc::BlitType(const Input& input,const Output& output,uint phase) const
  			{
  				NST_ASSERT( phase < 3 );
  
+ 				const uint bgcolor = this->bgColor;
  				const Input::Pixel* NST_RESTRICT src = input.pixels;
  				Pixel* NST_RESTRICT dst = static_cast<Pixel*>(output.pixels);
  				const long pad = output.pitch - (NTSC_WIDTH-7) * sizeof(Pixel);
  
  				phase &= lut.noFieldMerging;
  
  				for (uint y=HEIGHT; y; --y)
  				{
! 					NES_NTSC_BEGIN_ROW( &lut, phase, bgcolor, bgcolor, *src++ );
  
  					for (const Input::Pixel* const end=src+(NTSC_WIDTH/7*3-3); src != end; src += 3, dst += 7)
  					{
  						NES_NTSC_COLOR_IN( 0, src[0] );
  						NES_NTSC_RGB_OUT( 0, dst[0], BITS );
  						NES_NTSC_RGB_OUT( 1, dst[1], BITS );
***************
*** 66,86 ****
  						NES_NTSC_COLOR_IN( 2, src[2] );
  						NES_NTSC_RGB_OUT( 4, dst[4], BITS );
  						NES_NTSC_RGB_OUT( 5, dst[5], BITS );
  						NES_NTSC_RGB_OUT( 6, dst[6], BITS );
  					}
  
! 					NES_NTSC_COLOR_IN( 0, lut.black );
  					NES_NTSC_RGB_OUT( 0, dst[0], BITS );
  					NES_NTSC_RGB_OUT( 1, dst[1], BITS );
  
! 					NES_NTSC_COLOR_IN( 1, lut.black );
  					NES_NTSC_RGB_OUT( 2, dst[2], BITS );
  					NES_NTSC_RGB_OUT( 3, dst[3], BITS );
  
! 					NES_NTSC_COLOR_IN( 2, lut.black );
  					NES_NTSC_RGB_OUT( 4, dst[4], BITS );
  					NES_NTSC_RGB_OUT( 5, dst[5], BITS );
  					NES_NTSC_RGB_OUT( 6, dst[6], BITS );
  
  					dst = reinterpret_cast<Pixel*>(reinterpret_cast<byte*>(dst) + pad);
  
--- 67,87 ----
  						NES_NTSC_COLOR_IN( 2, src[2] );
  						NES_NTSC_RGB_OUT( 4, dst[4], BITS );
  						NES_NTSC_RGB_OUT( 5, dst[5], BITS );
  						NES_NTSC_RGB_OUT( 6, dst[6], BITS );
  					}
  
! 					NES_NTSC_COLOR_IN( 0, bgcolor );
  					NES_NTSC_RGB_OUT( 0, dst[0], BITS );
  					NES_NTSC_RGB_OUT( 1, dst[1], BITS );
  
! 					NES_NTSC_COLOR_IN( 1, bgcolor );
  					NES_NTSC_RGB_OUT( 2, dst[2], BITS );
  					NES_NTSC_RGB_OUT( 3, dst[3], BITS );
  
! 					NES_NTSC_COLOR_IN( 2, bgcolor );
  					NES_NTSC_RGB_OUT( 4, dst[4], BITS );
  					NES_NTSC_RGB_OUT( 5, dst[5], BITS );
  					NES_NTSC_RGB_OUT( 6, dst[6], BITS );
  
  					dst = reinterpret_cast<Pixel*>(reinterpret_cast<byte*>(dst) + pad);
  
diff -c6 -r source-orig/core/NstVideoRenderer.cpp source/core/NstVideoRenderer.cpp
*** source-orig/core/NstVideoRenderer.cpp	2012-11-28 15:23:14.000000000 -0600
--- source/core/NstVideoRenderer.cpp	2013-03-18 20:36:57.850196439 -0500
***************
*** 802,813 ****
--- 802,815 ----
  						UpdateFilter( input );
  
  					if (Output::lockCallback( output ))
  					{
  						NST_VERIFY( std::labs(output.pitch) >= dword(state.width) << (filter->format.bpp / 16) );
  
+ 						filter->bgColor = bgColor;
+ 
  						if (std::labs(output.pitch) >= dword(state.width) << (filter->format.bpp / 16))
  							filter->Blit( input, output, burstPhase );
  
  						Output::unlockCallback( output );
  					}
  				}
diff -c6 -r source-orig/core/NstVideoRenderer.hpp source/core/NstVideoRenderer.hpp
*** source-orig/core/NstVideoRenderer.hpp	2012-11-28 15:23:14.000000000 -0600
--- source/core/NstVideoRenderer.hpp	2013-03-18 20:27:55.046187656 -0500
***************
*** 1,6 ****
--- 1,7 ----
+ 
  ////////////////////////////////////////////////////////////////////////////////////////
  //
  // Nestopia - NES/Famicom emulator written in C++
  //
  // Copyright (C) 2003-2008 Martin Freij
  //
***************
*** 195,206 ****
--- 196,209 ----
  					virtual ~Filter() {}
  
  					virtual void Blit(const Input&,const Output&,uint) = 0;
  					virtual void Transform(const byte (&)[PALETTE][3],Input::Palette&) const;
  
  					const Format format;
+ 
+ 					uint bgColor;
  				};
  
  				struct State
  				{
  					State();
  
***************
*** 234,245 ****
--- 237,249 ----
  
  				Filter* filter;
  				State state;
  				Palette palette;
  
  			public:
+ 				uint bgColor;
  
  				Result SetBrightness(int brightness)
  				{
  					return SetLevel( state.brightness, brightness );
  				}
  
