<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - N64 programming (libdragon)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">N64 programming (libdragon)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15988">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15988</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 13, 2017 1:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Would using a <a href="https://en.wikipedia.org/wiki/Bucket_sort" class="postlink">bucket sort</a>, maintaining a display list for each texture and adding each quad to the appropriate texture, run faster than qsort? You might need <a href="https://en.wikipedia.org/wiki/American_flag_sort" class="postlink">two passes over the tilemap</a>, one to count tiles using each texture and one to actually build the display lists.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Fri Jul 14, 2017 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Would using a <a href="https://en.wikipedia.org/wiki/Bucket_sort" class="postlink">bucket sort</a>, maintaining a display list for each texture and adding each quad to the appropriate texture, run faster than qsort? You might need <a href="https://en.wikipedia.org/wiki/American_flag_sort" class="postlink">two passes over the tilemap</a>, one to count tiles using each texture and one to actually build the display lists.</div><br /><br />Dunno, how much memory would take the bucket sort?<br /><br />For the function i did 2 codes, the first one seems to run faster than qsort on layers like that:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// tile size: (32x32)<br />// 10 x 4<br />static uint16_t map2 &#91;40&#93; =<br />{<br />&nbsp; &nbsp;106,107,106,107,0,106,107,106,107,0,<br />&nbsp; &nbsp;108,109,108,109,0,108,109,108,109,0,<br />&nbsp; &nbsp;110,0,110,0,0,110,0,110,0,0,<br />&nbsp; &nbsp;111,0,111,0,0,111,0,111,0,0<br />};</div>	<br /><br />Textures from 106 to 111 in consecutive way with not so many calls (0 is ignored), however the difference is 1 or 2fps.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void texture_list(int opt)<br />{<br />&nbsp; &nbsp;int zx,zy;<br /><br />&nbsp; &nbsp;// optimized for layers<br />&nbsp; &nbsp;if (opt==0)<br />&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;// check<br />&nbsp; &nbsp;&nbsp; &nbsp;if (min_tex&gt;max_tex) { min_tex=max_tex; }<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;for(zx=min_tex;zx&lt;max_tex+1;zx++)<br />&nbsp; &nbsp;&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// load texture into TMEM<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (last_texture!=zx) <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{ <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rdp_load_texture(graph&#91;zx&#93;);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;last_texture=zx;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for(zy=0;zy&lt;num_tex;zy++)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (zx==tex_tile&#91;zy&#93;.tex) <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// draw&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rdp_draw_sprite(tex_tile&#91;zy&#93;.x,tex_tile&#91;zy&#93;.y,0);&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;}&nbsp; &nbsp;<br />&nbsp; &nbsp;else // optimized for main scroll<br />&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;qsort( tex_tile, num_tex, sizeof(tex_tile&#91;0&#93;), compare );<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;// display<br />&nbsp; &nbsp;&nbsp; &nbsp;for(zx=0;zx&lt;num_tex;zx++)<br />&nbsp; &nbsp;&nbsp; &nbsp;{&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// load texture into TMEM<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (last_texture!=tex_tile&#91;zx&#93;.tex) <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{ <br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rdp_load_texture(graph&#91;tex_tile&#91;zx&#93;.tex&#93;);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;last_texture=tex_tile&#91;zx&#93;.tex;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// draw&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;rdp_draw_sprite(tex_tile&#91;zx&#93;.x,tex_tile&#91;zx&#93;.y,0);&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;}&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;// reset values<br />&nbsp; &nbsp;min_tex=9999;<br />&nbsp; &nbsp;max_tex=0;<br />&nbsp; &nbsp;num_tex=0;<br />&nbsp; &nbsp;texture_sort=0;<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 14, 2017 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMBx64 wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Would using a <a href="https://en.wikipedia.org/wiki/Bucket_sort" class="postlink">bucket sort</a>, maintaining a display list for each texture and adding each quad to the appropriate texture, run faster than qsort? You might need <a href="https://en.wikipedia.org/wiki/American_flag_sort" class="postlink">two passes over the tilemap</a>, one to count tiles using each texture and one to actually build the display lists.</div><br />Dunno, how much memory would take the bucket sort?</div><br />Unlike question inversion in some other languages, question inversion in English moves only the tensed verb: the &quot;would&quot; in &quot;would take&quot;. This way, the listener can still tell subject and object apart: &quot;Weena would eat...&quot; becomes &quot;What would Weena eat?&quot; not &quot;What would eat Weena?&quot;, which sounds a bit more cannibalistic to an English speaker. With that out of the way:<br /><br />&quot;how much memory would the bucket sort take?&quot;<br />Enough to hold all the display list entries, plus as many pointers as there are textures. Each pointer points to the display list associated with a particular texture. For example, if there can be up to 300 tiles or portions thereof with four textures and 320 tiles on the screen (assuming a 304x224 canvas with partial tiles), you'd need four display list pointers plus enough memory for 300 quads.<br /><br />How did I arrive at 300 tiles? Say you're drawing 16x16-pixel tiles to a 304x224-pixel canvas, with 8 pixels of black border on each side. This is the typical canvas size for Neo Geo and Nintendo 64 games so that they don't have to spend GPU time rendering so much of the part of the picture hidden by overscan. This is 14 rows of 19 tiles each. But when scrolling a tilemap, you need an additional row and column to account for tiles being half scrolled off, so 15 rows of 20 tiles, or 300 in all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sun Jul 23, 2017 5:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>ALPHA BLENDING TEST</strong><br />Small test that shows 32 levels of transparency in 1cycle mode (16bit mode / RDP).<br /><img src="https://i.imgur.com/WtJdl2K.png" alt="Image" /><br /><br /><strong>CONTROLS</strong><br />A - Flip Sprite<br />Z - Enable/Disable Additive blending<br />L/R - Alpha control<br />Joy - Scroll<br />C buttons - X / Y Scale (zoom)<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!g4ZlELCY!1Wbgx4wzpJalM798Ck0zXLHRK2Q6qNmYzyY9zFcOHvY" class="postlink">https://mega.nz/#!g4ZlELCY!1Wbgx4wzpJalM798Ck0zXLHRK2Q6qNmYzyY9zFcOHvY</a> (edit: fixed NTSC video)<br /><br />New functions added to libdragon (i may post the new lib if anyone interested):<br /><br />fixes x_scale, RGB scale support, no alpha support<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_texture_1cycle( void );</div><br />same, with bilinear filter when zoomed<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_texture_filter( void );</div><br />like 1cycle but enables alpha support<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_alpha_blending( void );</div><br />like 1cycle with alpha support plus additive<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_additive_blending( void );</div><br />controls alpha blending and rgb scale (tint)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_rgba_scale(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _alpha);</div><br /><br />- Add have no color cap and needs to be controlled with rgba_scale.<br />- RDP commands used: Set Other Modes, Color Combiner, Set Prim Color.<br />- Small fixes on libdragon.<br /><br />Thanks Krom for explaining to me how the RDP works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Jul 23, 2017 9:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMBx64 wrote:</div><div class="quotecontent">Thanks Krom for explaining to me how the RDP works.<br /></div>I found a post on ElOtroLado.net containing your username and their username ... is that basically the same information?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sun Jul 23, 2017 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This one?<br /><a href="https://www.elotrolado.net/hilo_hilo-de-detalles-y-curiosidades-de-n64_2171497" class="postlink">https://www.elotrolado.net/hilo_hilo-de-detalles-y-curiosidades-de-n64_2171497</a><br /><br />Yeah, similar info regarding libdragon, there is a bit of trivia and analysis of comercial games as well (framerate, debug, wireframes, poly count, etc).<br /><br />Krom ASM examples can be found here:<br /><a href="https://github.com/PeterLemon/N64" class="postlink">https://github.com/PeterLemon/N64</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sun Aug 20, 2017 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>ADDED 4/8 BIT TEXTURES</strong><br />This took a while, i had to update Sprite64 tool as well which i will post on the next days.<br /><br />The implementation is not finished yet, i followed Krom's ASM examples to do it, for some reason working together with libdragon it fails at showing any texture above 1KB (2KB max, the next 2KB are for TLUT), so i can't do 64x64 4bit textures (2 pixels byte) or 64x32 8bit textures yet, but im working on fixing it.<br /><br />I did only the RDP side, these textures won't be compatible with the software rendering of libdragon (graphics.c).<br /><br /><strong>TEST 1: PALETTE EDITOR</strong><br />This test uses a 4bit sprite (1cycle, 2x scaled), you can pick a color and replace any palette color (A button).<br /><img src="http://i.imgur.com/QV1Pe3a.png" alt="Image" /><br /><br />By pressing L starts an automatic palette rotation, you can stop it at any time with R.<br /><img src="http://i.imgur.com/f7vCczU.gif" alt="Image" /><br /><br />Press Start to default palette.<br /><br />I had problems with invalidate cache on this concrete test (palette won't refresh), the problem was solved replacing -O2 with -Os on compiler options.<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!l4JFxIiB!jTS5TAQl8-0b5008yk7QQ392qOlYw0cbAK0QbAGOKSw" class="postlink">https://mega.nz/#!l4JFxIiB!jTS5TAQl8-0b5008yk7QQ392qOlYw0cbAK0QbAGOKSw</a><br /><br /><strong>TEST 2: PERFORMANCE TEST</strong><br />Same Goldenaxe test of the previous page, 16x16 4bit textures, 1 unique palette, since the whole map uses only 1 of the 4 Mega Drive palettes.<br /><img src="http://i.imgur.com/3QyVOni.png" alt="Image" /><br /><br />4bit Mirrored (with the current optimization align)<br />x= 0 - 166fps<br />x= 194 - 161fps<br />x= 974 - 143fps<br />x= 1552 - 169fps<br /><br />16bit Mirrored (same align)<br />x= 0 - 161fps<br />x= 194 - 156fps<br />x= 974 - 138fps<br />x= 1552 - 163fps<br /><br />Overall seems to be an small improvement when all the tiles uses the same palette, could be quite interesting to check this map with 64x64 tiles.<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!5x4zAYrT!6xAwSK76h8GaGyKfLo05vDUHjEU33MMmKpHDGAumUSc" class="postlink">https://mega.nz/#!5x4zAYrT!6xAwSK76h8GaGyKfLo05vDUHjEU33MMmKpHDGAumUSc</a><br /><br /><strong>NEW FUNCTIONS</strong><br />I have organized a bit better all the functions i did on the RDP, they have changed a bit since the last post:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_send( void );<br />void rdp_command( uint32_t data );<br />void rdp_cp_sprite( int x, int y, int flags, int cp_x, int cp_y, int line );<br />void rdp_cp_sprite_scaled( int x, int y, float x_scale, float y_scale, int flags, int cp_x, int cp_y, int line );<br />void rdp_enable_filter( int type );<br />void rdp_enable_alpha( int type );<br />void rdp_enable_tlut( int type );<br />void rdp_texture_1cycle( void );<br />void rdp_additive_blending( void );<br />void rdp_intensify( void );<br />void rdp_color( void );<br />void rdp_rgba_scale(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _alpha);<br />void rdp_load_tlut(uint8_t _pal_bp, uint8_t _pal_num, uint16_t *_palette);</div><br /><br />All the following functions works combined with a call to rdp_enable_texture_copy or rdp_texture_1cycle:<br /><br />// 0 disable, 1 enable<br />void rdp_enable_filter( int type ); // point sampled or bilinear<br />void rdp_enable_alpha( int type );<br />void rdp_enable_tlut( int type );<br /><br />These functions works combined with rdp_rgba_scale, to control RGB values:<br /><br /><strong>void rdp_intensify( void );</strong>, RGB from 0 (normal) to 255 (white), can do this:<br /><img src="http://i.imgur.com/o9qs6Pn.gif" alt="Image" /><br /><br /><strong>void rdp_color( void );</strong> shows the sprite silouette in 1 RGB color, can do this kind of effects:<br /><img src="http://i.imgur.com/HhtzC1G.gif" alt="Image" /><br /><br />I will be adding more combiner options for different effects, i will update rdp.c and rdp.h soon, i wan't to fix the small bugs commented and few things more.<br /><br />As well im interested on disabling atomic_prim on libdragon, i already did it, but then sometimes the sprites may miss 1 vertical or horizontal line.<br /><img src="http://i.imgur.com/XGJqL52.png" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>claws</b> [ Wed Aug 23, 2017 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does libdragon support triangle rendering, shading, etc?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Thu Aug 24, 2017 5:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">claws wrote:</div><div class="quotecontent">Does libdragon support triangle rendering, shading, etc?</div><br />On the default libdragon you can render 2D Non shaded triangles, using blend color, function rdp_draw_filled_triangle.<br /><img src="http://i.imgur.com/YMhinF4.gif" alt="Image" /><br /><br />On my side i have added a function to select any from this list called <strong>rdp_triangle_setup( num );</strong>, 0 = flat, 1 = goraud, 2 = textured, etc<br /><img src="https://i.imgur.com/Ay5A7JA.png" alt="Image" /><br /><br />Right now im trying to do textured triangles to rotate sprites, it will work when i update texture coefficients accordingly, im planning more effects with triangles.<br /><img src="http://i.imgur.com/9uux3Xy.gif" alt="Image" /><br /><br />--<br />I have fixed as well <strong>32bit mode</strong>, textures on this mode had to be set to 1cycle to be displayed with the RDP or system crashes (they worked on software render on libdragon examples, but thats pretty slow).<br /><br />32bit mode supports textures of 4,8,16 and 32bits.<br />16bit mode supports textures of 4,8,16 and 32bits too (they are converted on the fly)<br /><br />This is a screen build with 32bit textures of 16x16 32bit mode in cen64.<br /><img src="http://i.imgur.com/aGnkmiY.png" alt="Image" /><br /><br />16bit mode with 32bit textures, the colors are lowered as you can see banding on the sky.<br /><img src="http://i.imgur.com/fvTysMQ.png" alt="Image" /><br /><br /><strong>PERFORMANCE TEST</strong><br />This test is mario scroll again with 3 different settings:<br /><br />Same spot<br />16bit mode, 16x16 16bits copy texture = 333fps<br />16bit mode, 16x16 16bits 1cycle texture  = 266fps<br />32bit mode, 16x16 16bits 1cycle texture = 211fps<br /><br />1cycle texture slowdowns things a bit, 32bit mode is pretty slow as well, maybe for some special effects or intros, but i would stay at 16bit mode for 2D.<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!5gIiAACS!V--UGTsV7FULDG0-E2OC_b2QO7HX02-ujwxZF7xzuDA" class="postlink">https://mega.nz/#!5gIiAACS!V--UGTsV7FULDG0-E2OC_b2QO7HX02-ujwxZF7xzuDA</a><br /><br />--<br /><br />Other things to fix:<br />- Triple buffer is not working, you get full speed instead of sync video<br />- AA disabled causes glitches at 60hz (PAL seems fine)<br />- Fix loading speed, load 1200 tiles/files of 512bytes = 47 seconds<br />- 4, 8 and 32bit textures only uses half of TMEM (this is top priority)<br />- Palette colors are sent in a different way, to upload 16 colors you have to send 64 instead (4 times more)<br /><br />* 16bit textures can use full 4KB of TMEM, surprisingly 16bit textures were the only ones supported on the RDP by libdragon.<br />* Both palette and texture problems are TMEM related.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Thu Aug 24, 2017 10:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Amazing work as usual! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  <br /><br /><span style="font-size: 75%; line-height: normal">If only I were determined enough to make this much progress... <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> </span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Wed Aug 30, 2017 3:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thx Espozo  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> <br /><br /><strong>32bit TMEM texture fix</strong><br />Now the 4KB of TMEM can be used for 32bit textures (32x32)<br /><br />It was a bug on the rdp_load_texture function of libdragon:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(((((real_width / 8) + round_amount) * sprite-&gt;bitdepth) &amp; 0x1FF) &lt;&lt; 9)</div><br />The fix (tile line param is the same one for 16bit and 32bit textures):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(((((cache.real_width&nbsp; &gt;&gt; 3) + round_amount) &lt;&lt; 1) &amp; 0x1FF) &lt;&lt; 9)</div><br /><br /><strong>TEST</strong><br /><img src="http://i.imgur.com/CpmSzsV.png" alt="Image" /><br /><br />Scroll of 32x32 tiles 32bit textures, 320x240x32bit, each tile have a different texture.<br /><br />Performance:<br />16x16 = 51-55fps<br />32x32 = 72-76fps<br /><br />No optimizations were possible besides disabling the framebuffer clear, repeating 32bit textures could be necessary to keep a good performance.<br /><br />The test uses 300 tiles instead of 1200, that reduced loading times to 3 or 4 sec.<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!w1IFWD4A!k4F3BoVzp1vQ-69SQ4Tfti1E5MTEotgGTYDrw-acxPM" class="postlink">https://mega.nz/#!w1IFWD4A!k4F3BoVzp1vQ-69SQ4Tfti1E5MTEotgGTYDrw-acxPM</a><br /><br /><strong>rdp_set_blend_color fix</strong><br />The function its necessary to color triangles, RDP command requires RGBA components:<br /><br />Original function may provide wrong colors (specially on 16bit color mode), its called in combination with graphics_make_color :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_set_blend_color( uint32_t color )<br />{<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0xF9000000 );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( color );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br />}</div><br />Fix (direct RGBA input):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void rdp_set_blend_color(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _alpha)<br />{<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( 0x39000000 );<br />&nbsp; &nbsp; __rdp_ringbuffer_queue( _r &lt;&lt; 24 | _g &lt;&lt; 16 | _b &lt;&lt; 8 | _alpha );<br />&nbsp; &nbsp; __rdp_ringbuffer_send();<br />}</div><br /><strong>Color combiner fix</strong><br />It seems textured rectangles and triangles have different color combinations, some works for rectangles while triangles looks like this:<br /><img src="http://i.imgur.com/X7TgFin.jpg" alt="Image" /><br /><br />I found a compatible combination for both rectangles and triangles for every effect, now triangles can do alpha blending, intensify, etc just like rectangles.<br /><br /><strong>Added rdp_enable_1primitive</strong><br />This function enables or disables atomic prim since there's some performance impact on the fillrate.<br /><br />Some glitches happens on concrete sizes / bitdepth textures, for example a 16x16 16bit texture is fine while 16x16 4bit may show a garbage line (or empty line) at the bottom, i think this function could be useful for tiles since you know all them will have the same size, but could be safe to keep enabled it for sprites because of them being variable.<br /><br />Performance tests (no glitches in any of them):<br /><br />Mario scroll<br />On - 333fps<br />Off - 342fps<br /><br />Goldenaxe scroll<br />On - 167fps<br />Off - 172fps<br /><br />Fillrate test<br />On - 1280 16x32 sprites at 50fps<br />Off - 1320 at 50fps<br /><br />5-6 fps improvement or close to 1Mp/s fillrate gain like the book suggests.<br /><br />--<br /><br />To fix TLUT it seems necessary to load 4 times the same palette (and it works that way on libdragon), however Krom's ASM examples loads only 16 colors instead of 64  <img src="./images/smilies/icon_question.gif" alt=":?:" title="Question" /> <br /><img src="http://i.imgur.com/UGDJTJg.png" alt="Image" /><br /><br />Right now i can do a 64x32x4bit texture but 64x64 won't display, maybe the problem is related to the way the colors are loaded, my next goal is try to fix 4 and 8bit textures then release the current rdp.c.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Thu Sep 07, 2017 4:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>ADDED FRAMEBUFFER EFFECTS</strong><br />There are several games that uses different framebuffer effects, such as Mario Kart 64 for the background screen, i though it was a good idea have few functions to allow this:<br /><img src="https://i.imgur.com/j7m8za9.gif" alt="Image" /><br /><br /><strong>void rdp_buffer_screen( display_context_t disp, int texture_mode );</strong><br /><br />This function reads the buffer and generates 16bit textures on the fly, it reads only the necessary pixels to build it.<br /><br />Have 3 texture modes:<br />0 - Full Screen on 1 texture of 32x32 (respect ratio of any resolution)<br />1 - Upper half on maximum texture size (around 64x32)<br />2 - Bottom half <br /><br /><img src="https://i.imgur.com/fmX3LWm.gif" alt="Image" /><br /><br />Mario Kart example have a very slow refresh rate, i could improve the function to select a refresh rate to increase performance at the cost of saving the textures on memory, an option to select a concrete area could be great too.<br /><br /><strong>void rdp_buffer_copy( display_context_t disp, uint16_t x_buf, uint16_t y_buf, uint8_t width, uint8_t height );</strong><br /><br />This one is more flexible and allows a 1:1 buffer copy of any compatible texture size in any position of the screen.<br /><br />Once the texture is loaded on TMEM can be draw as normal, any effect can be applied, on this example a row of textures are reversed with blue scale to simulate ice or water reflection.<br /><br /><img src="https://i.imgur.com/p0vtYzw.gif" alt="Image" /><br /><br />Both functions are only 16bit mode compatible at the moment, few more are planned to provide different effects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sat Sep 09, 2017 3:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made a github page, is not a clone / fork of the original libdragon github, im still learning how it works, so this is just a test but i did uploaded some files meanwhile.<br /><br />Github:<br /><a href="https://github.com/conker64/libdragon" class="postlink">https://github.com/conker64/libdragon</a><br /><br />The interesting ones are rdp.c &amp; rdp.h, there is one TLUT example as well, i will keep adding more examples.<br /><br />On tools you can find an update of Sprite 64.<br /><img src="https://i.imgur.com/uZPRWqU.png" alt="Image" /><br /><br />For 4 and 8 bit use PNG TO TILEMAP of a max of 64x32x4bit or 32x32x8bit textures, they are not fixed yet and PNG TO SPRITE will attempt to reach the maximum size for each sprite.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sun Sep 17, 2017 10:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>ADDED FIRE EXAMPLE</strong><br /><img src="https://i.imgur.com/Y1y25dn.gif" alt="Image" /><br /><br />This example features few effects provided by the new libdragon functions.<br />- S deformation of concrete framebuffer area<br />- Blur using multiple alpha levels<br /><br />CONTROLS<br />Hold Z - To do blur effect<br />Press A - To generate fire (up to 99, fire variables are shared with blur and recycled when maxed)<br />Press Start - Delete fire<br /><br />DOWNLOAD (with source)<br /><a href="https://github.com/conker64/libdragon/tree/master/examples/fire" class="postlink">https://github.com/conker64/libdragon/tree/master/examples/fire</a><br /><br />--<br />Working on more framebuffer tricks, this one needs to be cleaned up before uploading, since framebuffer is sent as texture for manipulation other effects can be applied like reverse flip, resize or mask with invisible colors.<br /><img src="https://i.imgur.com/IPGhtuB.gif" alt="Image" /><br /><br />Other effects that im interested on replicate (such as expansive waves):<br /><img src="https://i.imgur.com/4mNwXPH.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Fri Oct 20, 2017 3:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>ADDED DITHER</strong><br />Another in build RDP setting.<br /><br />- rdp_rgb_dither(num);<br />0 magic square<br />1 standard<br />2 random<br />3 disabled<br /><br />- rdp_alpha_dither(num);<br />0 pattern<br />1 ~pattern<br />2 random<br />3 disabled<br /><br />Random rgb dither applied on the sky surface, can be useful for film effect or Silent Hill filter.<br /><img src="https://i.imgur.com/0yzS9G8.gif" alt="Image" /><br /><br />Random rgb dither + rdp_rgba_scale test.<br /><img src="https://i.imgur.com/4KBJ4Ro.gif" alt="Image" /><br /><br />These new functions needs at least 1CYCLE mode since COPY bypasses most of the RDP.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>