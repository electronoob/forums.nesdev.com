<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Opinon needed: Data structure for my sound engine</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Opinon needed: Data structure for my sound engine</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=13395">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=13395</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Oct 24, 2015 11:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I did most of the Nerdy Nights sound tutorials. I'm at chapter 7 now. But now the tutorial includes all the really advanced features, like volume envelopes, opcodes etc.<br />But my music engine is supposed to be simple since it is intended for a simple game.<br /><br />So, I created my own sound data structure that I want to base my code on. And I'd like you to judge it. Is this a reasonable attempt?<br /><br /><br />O.k., the first data structure is a tune.<br />A tune consists of the following values:<br /><br />1. Volume and duty cycle (1 byte)<br />Just 1:1 the value that you would write into the corresponding APU port.<br /><br />2. Note or length (1 byte, can occur multiple times)<br />If bit 7 of this value is 0, then it is a note. Or rather: It is the index to a lookup table that includes the 96 frequency values from this list, each of them consisting of two bytes: <!-- w --><a class="postlink" href="http://www.freewebs.com/the_bott/NotesTableNTSC.txt">www.freewebs.com/the_bott/NotesTableNTSC.txt</a><!-- w --><br />If bit 7 of the value is a 1, then this value (or rather: value AND %01111111) is the length (in frames) of all the following notes until the next length value is read.<br /><br />3. $FF as an indicator for the end of the tune.<br /><br />That was the &quot;inner&quot; data structure.<br /><br /><br />The second data structure, the &quot;outer&quot; data structure, is a song.<br />A song consists of the following values:<br /><br />1. Address to a tune on square wave channel 1 (2 bytes, can occur multiple times)<br />2. Value $0000 (2 bytes) as an indicator that the song needs to be looped now, i.e. it starts at the first tune again.<br />3-8: Like 1 and 2, only for square wavel channel 2, triangle channel and noise channel.<br />If any of the tune address values is 0, this channel is deactivated for the song.<br /><br />So, if we have the song &quot;For he's a jolly good fellow&quot;, we would have the following tunes:<br /><br />Tune 1: &quot;For he's a jolly good&quot;<br />Tune 2: &quot;fellow.&quot;<br />Tune 3: &quot;fehellooow.&quot;<br />Tune 4: &quot;Which nobody can deny.&quot;<br /><br />And the song array (for one channel) would look like this:<br />Tune 1<br />Tune 2<br />Tune 1<br />Tune 2<br />Tune 1<br />Tune 3<br />Tune 4<br />0<br /><br /><br />Sound effects are not included yet. But they're basically the same, only that they don't loop and will probably just consist of one tune anyway. When they happen, they &quot;steal&quot; one of the sound channels from the corresponding music stream.<br /><br /><br />What do you say?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Oct 24, 2015 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">2. Note or length (1 byte, can occur multiple times)<br />If bit 7 of this value is 0, then it is a note. Or rather: It is the index to a lookup table that includes the 96 frequency values from this list, each of them consisting of two bytes: <!-- m --><a class="postlink" href="http://www.freewebs.com/the_bott/NotesTableNTSC.txt">http://www.freewebs.com/the_bott/NotesTableNTSC.txt</a><!-- m --><br />If bit 7 of the value is a 1, then this value (or rather: value AND %01111111) is the length (in frames) of all the following notes until the next length value is read.</div><br />You could increase the range of the length (from 128 to 256 frames) if only the note byte used bit 7 as a flag: if the bit is 0, play the note using the previous length, if the bit is 1, play the note using the length specified in the next byte (all 8 bits of it), which becomes the new default length.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sat Oct 24, 2015 12:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Or rather: It is the index to a lookup table that includes the 96 frequency values from this list, each of them consisting of two bytes:</div><br />You can represent the same information in 36 bytes. To do that, you'd use a table of 12 frequency values and 12 &quot;rounding&quot; values. The frequency value is right-shifted to the correct octave, and the &quot;rounding&quot; either keeps the result or subtracts 1 to arrive at the correct value.<br /><br />I also worked out tables that round to the nearest pitch* instead of the nearest frequency. I can give you a copy if you're interested. (Really, it probably belongs on the wiki.)<br /><br /><span style="font-size: 85%; line-height: normal">*If you have an offset the same number of Hz above and below the target frequency, below will sound further away because pitch does not map linearly to frequency.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Oct 24, 2015 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">You could increase the range of the length (from 128 to 256 frames) if only the note byte used bit 7 as a flag</div><br />I dont understand this. Bit 7 is already there to check whether it's a length at all or whether it's a note.<br />Can you write down what you mean in pseudo code with a few ifs and elses please?<br /><br /><div class="quotetitle">Joe wrote:</div><div class="quotecontent">You can represent the same information in 36 bytes. To do that, you'd use a table of 12 frequency values and 12 &quot;rounding&quot; values. The frequency value is right-shifted to the correct octave, and the &quot;rounding&quot; either keeps the result or subtracts 1 to arrive at the correct value.</div><br />I don't think I will do this. The lookup table is merely 96 bytes for the whole program. So, with your method I would save 30 bytes. But it would add logic to the function. And time per frame is a much more serious issue than a few constants in the ROM.<br /><br /><div class="quotetitle">Joe wrote:</div><div class="quotecontent">I also worked out tables that round to the nearest pitch* instead of the nearest frequency. I can give you a copy if you're interested. (Really, it probably belongs on the wiki.)</div><br />Sure, post it. I'd need some of the music experts on this forum to compare which one is better, though. Since I have no idea.<br /><br />Which rounding method does the Famitracker use? (Since my composer works with that program, so if he enters a certain note and I paste it into my game, then it should of course still sound the same in my own engine.)<br /><br /><br />Another question: How important is it to be able to change the volume and duty cycle of the square waves in the middle of the song? I'm thinking about putting these values at the beginning of the whole song instead of the start of every tune. Saves me a few bytes, but most important: It saves me time since those values only need to be set once in the beginning instead writing (and even checking for them) every tune.<br />So, do songs with a constant duty cycle per square wave stream still sound good?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sat Oct 24, 2015 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">So, with your method I would save 30 bytes.</div><br />96 - 36 = 60<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">But it would add logic to the function. And time per frame is a much more serious issue than a few constants in the ROM.</div><br />Fair enough. It's an option you can consider if ROM space becomes more important than CPU time.<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Sure, post it. I'd need some of the music experts on this forum to compare which one is better, though. Since I have no idea.</div><br />Here's the NTSC table. It looks like I stopped when I started getting duplicate values for adjacent notes, so the (basically useless) highest values are missing. There might be some typos since I did all of the math with a graphing calculator.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A&nbsp; | 7F0 | 3F8 | 1FB | FD | 7E | 3F | 1F | F<br />Bb | 77E | 3BF | 1DF | EF | 77 | 3B | 1D | E<br />B&nbsp; | 713 | 389 | 1C4 | E1 | 70 | 38 | 1B | D<br />C&nbsp; | 6AD | 356 | 1AA | D5 | 6A | 34 | 1A | C<br />C# | 64D | 326 | 192 | C9 | 64 | 31 | 18 |<br />D&nbsp; | 5F2 | 2F9 | 17C | BD | 5E | 2F | 17 |<br />Eb | 59D | 2CE | 166 | B3 | 59 | 2C | 15 |<br />E&nbsp; | 54C | 2A6 | 152 | A9 | 54 | 29 | 14 |<br />F&nbsp; | 500 | 27F | 13F | 9F | 4F | 27 | 13 |<br />F# | 4B8 | 25C | 12D | 96 | 4B | 25 | 12 |<br />G&nbsp; | 474 | 23A | 11C | 8E | 46 | 23 | 11 |<br />Ab | 434 | 21A | 10C | 86 | 42 | 21 | 10 |</div><br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Another question: How important is it to be able to change the volume and duty cycle of the square waves in the middle of the song?</div><br />That's probably up to your composer. For something like <a href="https://www.youtube.com/watch?v=yBISfv-6hfo" class="postlink">this</a>, it's very important.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Oct 24, 2015 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent"><div class="quotetitle">DRW wrote:</div><div class="quotecontent">So, with your method I would save 30 bytes.</div><br />96 - 36 = 60</div><br />Yeah, that's all a matter of opinion. That's what I like so much about mathematics: There isn't <em>the</em> one correct answer. <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /><br />So, what do the others say? Which list is better? Joe's or <a href="http://www.freewebs.com/the_bott/NotesTableNTSC.txt" class="postlink">this one</a>?<br /><br />Also, which list does the Famitracker use? How do they convert the notes into 11 bit hex values?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Oct 24, 2015 5:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">A&nbsp; | 7F0 | 3F8 | 1FB | FD | 7E | 3F | 1F | F<br />Bb | 77E | 3BF | 1DF | EF | 77 | 3B | 1D | E<br /></div></div>That table is wonky. Are you using A440? Or are you doing something clever with tuning harmonics?<br /><div class="quotetitle">my program wrote:</div><div class="quotecontent">7F0 → A-1 +01.5<br />7F1 → A-1 +00.7<br />7F2 → A-1 -00.1<br />7F3 → A-1 -00.9<br />7F4 → A-1 -01.8<br /></div> All five periods here are within two cents of 12-TET A55, but 7F0 is not what I'd've picked if I was trying to be as close as possible.<br /><br />On the NES, with its NTSC-based timing, there may be something to be said for detuning to 13 or 15 cents flat; you get more in-tune notes in the highest octaves that way. There may also be something to be said for using D-6=1202.8Hz (40 cents sharp, period of exactly 93): then the noise channel's tonal noise mode is in tune.<br /><br /><br />Anyway, here's some simple math to convert from a divisor (as used by the NES) to a note name and a detuning in cents.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;frequency = 39375000 / 22 / 16 / divisor;<br />&nbsp; &nbsp;pitch = 1200*log(frequency / 440)/log(2);<br />&nbsp; &nbsp;semitones = floor( (pitch + 50) / 100);<br />&nbsp; &nbsp;cents = pitch - semitones * 100;<br />&nbsp; &nbsp;octave = (semitones - 3) / 12 + 5;<br />&nbsp; &nbsp;notenameindex = (semitones + 120 - 3) % 12;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 25, 2015 2:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">I dont understand this. Bit 7 is already there to check whether it's a length at all or whether it's a note.</div><br />My point is you stop using it to tell notes and lengths apart, and assume all bytes are notes, but when the bit is set, you load a new length, which will be specified in the next byte.<br /><br />I find it redundant to have a bit identifying notes and lengths, because there's no need (as far as I can tell) to have consecutive length bytes, since you're using the concept of persistent lengths that are changed sporadically. Notes on the other hand are absolutely necessary all the time, and since you have the free bit, you can simply have a note &quot;request&quot; that a new length be loaded when the current one is not what it needs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sun Oct 25, 2015 3:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">That table is wonky. Are you using A440? Or are you doing something clever with tuning harmonics?</div><br />I wasn't trying to do anything clever beyond rounding to the nearest pitch, so you probably found a mistake.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">frequency = 39375000 / 22 / 16 / divisor;</div></div><br />Isn't that off by one? The wiki says this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">f = CPU / (16 * (t + 1))</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Oct 25, 2015 3:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">My point is you stop using it to tell notes and lengths apart, and assume all bytes are notes, but when the bit is set, you load a new length, which will be specified in the next byte.</div><br />No, the length won't be specified in the next byte, but in the current byte:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ReadNextNote()<br />{<br />start:<br /><br />&nbsp; &nbsp; value = ReadNextValue();<br /><br />&nbsp; &nbsp; if (value AND %10000000 == 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; CurrentNote = Notes&#91;value&#93;;<br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; CurrentLength = value AND %01111111;<br />&nbsp; &nbsp; &nbsp; &nbsp; goto start;<br />&nbsp; &nbsp; }<br />}</div><br /><br />Is that alright?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 25, 2015 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">No, the length won't be specified in the next byte, but in the current byte:</div><br />I know how it is, I just think that using a bit to identify the length byte is a waste of a perfectly good bit. Here's what I mean:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ReadNextNote() {<br />&nbsp; &nbsp;Value = ReadNextValue();<br />&nbsp; &nbsp;if (Value AND %10000000 != 0) {<br />&nbsp; &nbsp;&nbsp; &nbsp;CurrentLength = ReadNextValue();<br />&nbsp; &nbsp;&nbsp; &nbsp;Value = Value AND %01111111;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;CurrentNote = Notes&#91;Value&#93;;<br />}</div><br />There's no need to identify the byte as a length byte if it implicitly comes after the note when needed. The meaning of the high bit of the note is:<br /><br />0: play this note using the previous length; <br />1: play this note use a new length, provided in the next byte;<br /><br />And then you don't need to &quot;sign&quot; each byte as being either a note or a length... They're all notes, except for the bytes that follow notes that request new lengths.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Oct 25, 2015 4:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know why this is better than the other method. You still have a bit to indicate that a length is coming and you still need an additional byte for the length. So, why does this make a difference?<br /><br />The only thing that I noticed here is that you have a strange order in your song data:<br /><br />My data: LengthA, NoteA1, NoteA2, NoteA3, LengthB, NoteB1, NoteB2, LengthC, NoteC1, NoteC2 ...<br />Your data: NoteA1, LengthA, NoteA2, NoteA3, NoteB1, LengthB, NoteB2, NoteC1, LengthC, NoteC2 ...<br /><br />I guess I'm missing something here, but I just don't know what exactly. What do I gain from switching the two values around?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 25, 2015 4:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">So, why does this make a difference?</div><br />The length can be 1..256 instead of 1..128, that's all. You shouldn't need such long lengths very often, but if you do...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Oct 25, 2015 5:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, right. Now I understand it. Yeah, that's better. Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Oct 25, 2015 9:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Opinon needed: Data structure for my sound engine</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think this whole conversation points out that Famitracker could use a better tool (like Famitone) to specifically use Famitracker songs in a game. The easiest approach (IMHO) would be to modify Famitone to accept more/all Famitracker features.<br /><br />If I were smarter, I would write a tool to convert MIDI files directly to usable game song data. (And write an engine designed to play it). But that may be above my skill level.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>