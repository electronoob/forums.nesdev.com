<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Allegro sound</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Allegro sound</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=2528">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=2528</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Nov 07, 2006 4:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Allegro sound</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- The real problem relies on proper Allegro sound output. If someone here can help me with this... I had contacted Charles Mac Donald a long time ago, but he didn't solve the sound issue too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 07, 2006 6:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The real problem with what? Was this split from some other article? Are you having trouble getting Allegro audio streams to work properly? Do you want the source code of my own example that uses Allegro audio streams?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Nov 07, 2006 7:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem? Sync with the video. When sound is enabled, the speed isn't smooth, but much like 'frameskipping'. Before anything, yes, I'd like to see how you handle the Allegro audiostream thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 07, 2006 8:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />While developing <a href="http://www.pineight.com/lj/" class="postlink">LOCKJAW for PC</a>, I wrote a wrapper around the vorbisfile API to allow dead-easy .ogg playback from any Allegro program. This wrapper is in ljvorbis.c and ljvorbis.h, and it can probably easily be adapted to any source of streaming audio (such as your video file).
<br />
<br />Any stuttering can be decreased at the cost of latency. If you don't mind a lot of latency, such as if you are decoding a full-motion video stream, then try decoding audio to a ring buffer, and decode only a small, fixed amount of audio per frame.
<br />
<br />If you are trying to decode MPEG video, then you should be careful that some frames take much longer to decode than other frames. For instance, to render a B frame, you need to decode the following P or I frame first.
<br />
<br />What application are you trying to build that involves video and audio streams using the Allegro library?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Wed Nov 08, 2006 7:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm sorry, guess I wasn't specific... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I use Allegro in my NES emulator to output sound.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 08, 2006 3:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are you doing a whole bunch of sound emulation catch-up when <a href="http://alleg.sourceforge.net/onlinedocs/en/alleg028.html#get_audio_stream_buffer" class="postlink">get_audio_stream_buffer()</a> gives something other than a NULL pointer? For each frame, try generating that frame's sound into a <a href="http://en.wikipedia.org/wiki/Circular_buffer" class="postlink">ring buffer</a>, and when Allegro gives you a valid audio stream buffer, copy samples from your ring buffer into the buffer that the emulator gives.
<br />
<br />Blitting from your back buffer to the screen should be triggered by a timer set to fire at 3606 BPM (NTSC) or 3000 BPM (PAL), not based on when you get a valid sound buffer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>randilyn</b> [ Thu Nov 09, 2006 1:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello mighty Fx3 !
<br />
<br />I can tell you from experience, the best way to do this is to run sound updates (not emulation) in a separate thread and use a framebuffer.
<br />
<br />The basic idea is, you always have your emulation putting frames into a frame buffer ready to be output, then when a sound update occurs in the thread, it fetches N frames from the framebuffer (FIFO) and outputs them without your emulation portion ever having to worry about it.  On SMP machines, it may even be completely "no wait", meaning that no latency occurs in your main timing loop when audio updates occur.
<br />
<br />You will need to perform a hard-sync every so often though to account for drift.  Every time the CPU cycle counter wraps around should be sufficient.
<br />
<br />Video output is probably best done this way too.  You can probably even combine them into a single thread to reduce code overhead. :3
<br />
<br />Then, you can either use high performance timers to achieve the post-60Hz rate (1789772.727272727 / 29780.5 = 60.098814 Hz) or specify the Allegro timer rates in raw timer ticks, like so:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Determine how many timer ticks to a second.<br />const int timer_ticks_1_hz = SECS_TO_TIMER&#40;1&#41;;<br /><br />// Determine how often our throttle timer will execute, in timer ticks.<br />const int timer_ticks = &#40;int&#41;&#40;&#40;&#40;double&#41;timer_ticks_1_hz / &#40;1789772.727272727 / 29780.5&#41;&#41; + 0.5&#41;;<br /><br />// Install timers.<br />install_int_ex &#40;fps_timer, timer_ticks_1_hz&#41;;<br />install_int_ex &#40;throttle_timer, timer_ticks&#41;;<br /></div><br /><br />You can probably take my word on this, as I'm somewhat embedded in the Allegro community, even having quite a few friends who have not only used Allegro for many years, but actively work on the library.  The only reason *I* don't do sound and video output this way yet is because I'm so lazy. ^^;;<br /><br />For DOS, you'll probably need to instead skip some updates instead of waiting for the buffer.  This isn't too noticible if you do it right, and use a framebuffer.  Here's how <a href="http://atropine.ath.cx/~randilyn/seges/" class="postlink">Seges</a> does it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">buffer = &#40;unsigned short *&#41;get_audio_stream_buffer &#40;stream&#41;;<br />&nbsp; &nbsp;if &#40;!buffer&#41;<br />&nbsp; &nbsp; &nbsp; return;<br /></div>
<br />
<br />With buffer checks occuring every frame.
<br />
<br />wark on. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Nov 09, 2006 6:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The basic thing is...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">do &#123;<br />&nbsp; &nbsp; &nbsp; sound_buffer = &#40;unsigned short *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />//&nbsp; &nbsp; &nbsp; rest&#40;0&#41;;<br />&nbsp; &nbsp;&#125; while&#40;!sound_buffer&#41;;<br />&nbsp; &nbsp;memcpy&#40;sound_buffer, buffer, bytes_per_sample&#41;;<br />&nbsp; &nbsp;free_audio_stream_buffer&#40;sound_stream&#41;;</div>
<br />
<br />What happens? It always copies <strong>the same amount of bytes</strong>, as written in the Allegro docs, and the stream buffer size "must be" a power of two, like 2048 bytes. Here, once the buffer is full, this "infinity" loop is called to update the sound. That's what Allegro's docs teach you. 
<br />
<br />In other words, even if I specify a large buffer based on 'frames' (44100/60 = 735 samples per sync), there's no way to send less or more buffers AFAIK. <strong>*bump*</strong>
<br />
<br />The things you said about the timer looks correct, but two answers were given. Anyway, it would work for a program that LACKS sound. Plus, I already tried out to call <em>get_audio_stream_buffer</em> per frames, but it didn't work for the previous reasons... -_-;;;
<br />
<br />Additionally, I don't do 'native' Windows programming code (C++). To fit the things into Win32, I use that Allegro hack, END_OF_MAIN. Code is compiled with MinGW32, binaries *are* for Windows, but I let Allegro create the program window and GUI.
<br />
<br />So, the problem isn't THAT simple as it might see...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>randilyn</b> [ Thu Nov 09, 2006 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">The basic thing is...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">do &#123;<br />&nbsp; &nbsp; &nbsp; sound_buffer = &#40;unsigned short *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />//&nbsp; &nbsp; &nbsp; rest&#40;0&#41;;<br />&nbsp; &nbsp;&#125; while&#40;!sound_buffer&#41;;<br />&nbsp; &nbsp;memcpy&#40;sound_buffer, buffer, bytes_per_sample&#41;;<br />&nbsp; &nbsp;free_audio_stream_buffer&#40;sound_stream&#41;;</div><br /><br />What happens? It always copies <strong>the same amount of bytes</strong>, as written in the Allegro docs, and the stream buffer size "must be" a power of two, like 2048 bytes. Here, once the buffer is full, this "infinity" loop is called to update the sound. That's what Allegro's docs teach you. <br /><br />In other words, even if I specify a large buffer based on 'frames' (44100/60 = 735 samples per sync), there's no way to send less or more buffers AFAIK. <strong>*bump*</strong><br /><br />The things you said about the timer looks correct, but two answers were given. Anyway, it would work for a program that LACKS sound. Plus, I already tried out to call <em>get_audio_stream_buffer</em> per frames, but it didn't work for the previous reasons... -_-;;;<br /></div><br /><br />Yes, that's why you have to use a framebuffer (or as someone else above said, a ring buffer).  You'll never be able to output the same exact number of samples that the audio output API wants (almost all APIs are like this) - especially because the NES doesn't actually generate 735 samples per frame.  It's more like a sequence of 734, 733, 733, 733 or something like that every 4 frames, and almost all audio output APIs HATE this kind of stuff - emulation is largely incompatible with PCs in general.  That's why you have to buffer it and always just send what's in the buffer, even if you send no data or the same data twice.<br /><br />Anywho, threads was my answer to the infinity loop problem.  You can't really do that (the code example you provided) because you'll cause some massive drift between any other timers and the sound code (the rates are not perfect - even the docs point this out in more than one place).  Things like vsync have this exact same problem, too.  That's why it's just best to run sound and video output in a separate thread so they can be completely separated from the emulation timing and tuned exactly to what the OS wants, or something much closer at the very least.   Anything that requires a "hard" polling loop (meaning it doesn't return until finished - e.g, audio output, vsync, netplay sync) cannot be done alongside the emulation without inducing moderate to severe timer drift over time.<br /><br />This is how almost all media players, games, etc. work on every modern OS.  Emulators shouldn't be any different, although due to simultaneous audio/video output *on top* of a video("main") timing (post-60Hz for NTSC NES) that doesn't exactly match up to anything a monitor can do without a refresh rate hack, means you're going to have a lot of problems trying to do everything from the same linear code layout.  It's just too many things to time correctly, and too many hard loops and too much timeslice yielding (via Allegro's rest() function) to account for the massive amounts of drift that can occur.<br /><br />Consider this situation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">printf &#40;&quot;Current video frames to emulate: %d\n&quot;, framesToRender&#41;;<br />printf &#40;&quot;Waiting for audio buffer...&quot;&#41;;<br />while &#40;!&#40;void *buffer = get_audio_stream_buffer &#40;stream&#41;&#41;&#41;<br />&nbsp; &nbsp;rest &#40;0&#41;<br />printf &#40;&quot; done!\n&quot;&#41;;<br />printf &#40;&quot;Current video frames to emulate: %d\n&quot;, framesToRender&#41;;<br /></div><br /><br />Might produce the output:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Current video frames to emulate: 1<br />Waiting for audio buffer... done!<br />Current video frames to emulate: 3</div><br /><br />You now have to skip several frames of video to catch up and maintain the NES's logic rate.  Ugh. <img src="./images/smilies/icon_mad.gif" alt=":x" title="Mad" /><br /><br />Another thing that will help is to think of the output system in samples, not frames.  There's no real reason to send entire frames of NES audio (or even whole frames that matter).  This solves the sample count problem.  I'm sorry for using the word 'frames' in my original post, and I figured I probably should've gone back and corrected it to 'samples'.  Oh well. ^^;;<br /><br /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">Additionally, I don't do 'native' Windows programming code (C++). To fit the things into Win32, I use that Allegro hack, END_OF_MAIN. Code is compiled with MinGW32, binaries *are* for Windows, but I let Allegro create the program window and GUI.</div>
<br />I realize this.  I never do native programming either.  That's why there's <a href="http://sourceware.org/pthreads-win32/" class="postlink">pthreads</a>, which works on every platform (even DOS, I do believe).  This is the Win32 version. =)
<br />
<br />wark on. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 09, 2006 6:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Fx3 wrote:</div><div class="quotecontent">The basic thing is...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">do &#123;<br />&nbsp; &nbsp; &nbsp; sound_buffer = &#40;unsigned short *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />//&nbsp; &nbsp; &nbsp; rest&#40;0&#41;;<br />&nbsp; &nbsp;&#125; while&#40;!sound_buffer&#41;;<br />&nbsp; &nbsp;memcpy&#40;sound_buffer, buffer, bytes_per_sample&#41;;<br />&nbsp; &nbsp;free_audio_stream_buffer&#40;sound_stream&#41;;</div></div><br />Blocking your main thread on the audio stream like that is a bad idea. Allegro provides non-blocking way to check for audio stream updates, yet you still block on it. The right way to do this, used by DUMB and LJVorbis libraries, is to use non-blocking checks. Do something like the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned short OUTSAMPLE;<br />#define samplesPerBuf 1024<br /><br />void pollAudioOutput&#40;&#41; &#123;<br />&nbsp; OUTSAMPLE *outBuf = &#40;OUTSAMPLE *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />&nbsp; if &#40;outBuf&#41; &#123;<br />&nbsp; &nbsp; memcpy&#40;outBuf, buffer, sizeof&#40;OUTSAMPLE&#41; * samplesPerBuf&#41;;<br />&nbsp; &nbsp; ringBufferTail += samplesPerBuf;<br />&nbsp; &nbsp; free_audio_stream_buffer&#40;sound_stream&#41;;<br />&nbsp; &#125;<br />&#125;<br /></div><br />Then call pollAudioOutput() once a frame after updating your ring buffer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What happens? It always copies <strong>the same amount of bytes</strong>, as written in the Allegro docs, and the stream buffer size "must be" a power of two, like 2048 bytes.</div><br />In Allegro 4.2.0, <a href="http://alleg.sourceforge.net/onlinedocs/en/alleg028.html" class="postlink">this "must" has been downgraded to "should"</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Here, once the buffer is full, this "infinity" loop is called to update the sound. That's what Allegro's docs teach you.</div><br />You have a "producer" that makes 730 to 740 samples at a time. You have a "consumer" that wants 1,024 samples at a time. The canonical way to mate input and output block sizes that don't match is a "ring buffer".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In other words, even if I specify a large buffer based on 'frames' (44100/60 = 735 samples per sync), there's no way to send less or more buffers AFAIK.</div><br />You can send a buffer only when Allegro needs one and don't send a buffer otherwise.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The things you said about the timer looks correct, but two answers were given. Anyway, it would work for a program that LACKS sound. Plus, I already tried out to call <em>get_audio_stream_buffer</em> per frames, but it didn't work for the previous reasons... -_-;;;</div>
<br />I didn't catch why they didn't work. Calling get_audio_stream_buffer() once a frame worked for me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>randilyn</b> [ Thu Nov 09, 2006 7:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Blocking your main thread on the audio stream like that is a bad idea. Allegro provides non-blocking way to check for audio stream updates, yet you still block on it. The right way to do this, used by DUMB and LJVorbis libraries, is to use non-blocking checks. Do something like the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef unsigned short OUTSAMPLE;<br />#define samplesPerBuf 1024<br /><br />void pollAudioOutput&#40;&#41; &#123;<br />&nbsp; OUTSAMPLE *outBuf = &#40;OUTSAMPLE *&#41;get_audio_stream_buffer&#40;sound_stream&#41;;<br />&nbsp; if &#40;outBuf&#41; &#123;<br />&nbsp; &nbsp; memcpy&#40;outBuf, buffer, sizeof&#40;OUTSAMPLE&#41; * samplesPerBuf&#41;;<br />&nbsp; &nbsp; ringBufferTail += samplesPerBuf;<br />&nbsp; &nbsp; free_audio_stream_buffer&#40;sound_stream&#41;;<br />&nbsp; &#125;<br />&#125;<br /></div><br />Then call pollAudioOutput() once a frame after updating your ring buffer.<br /></div><br /><br /><div class="quotetitle">randilyn wrote:</div><div class="quotecontent">This isn't too noticible if you do it right, and use a framebuffer.<br />...<br /><br />With buffer checks occuring every frame.</div>
<br />
<br />Indeed, tepples solution can work if you just want a quick fix, but it is by no means the "right" way to do it.
<br />
<br />get_audio_stream_buffer() is *designed* for hard polling, since it simply doesn't return a buffer is none is available.  This means that if you're not polling it constantly, you might miss the buffer, and end up with some skipping while the sound playback timer (inside of Allegro) waits for you to grab the buffer.  Like I said, this is okay, and not generally noticeable if you poll it often enough. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />That's why my solution uses threads, because in a thread you could poll it constantly. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  (Though I really wonder now if Allegro 4.2 is "thread-safe" enough for this.)
<br />
<br />Also, there may still be emulation/output drift that needs to be accounted for, since you are no longer synchronizing them when using "no wait" code.  I'm not entirely sure. <img src="./images/smilies/icon_mad.gif" alt=":x" title="Mad" />
<br />
<br />I would just use OpenAL in a dedicated thread myself.  I've come to hate Allegro's audio. &gt;_&lt;
<br />
<br />wark on. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Nov 10, 2006 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, if you have an optional thing for sound output which must be easy-to-use-as-Allegro-is... so, it's welcome. DirectX routines are quite complex, and even the 'most advanced' Windows emus have the sound latency problem, well... most of them.
<br />
<br />Since Allegro is a DLL library (no clue if makes sense this), so wouldn't the <strong>entire</strong> library being executed into a separated thread?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hyde</b> [ Sun Nov 12, 2006 12:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I also had numerous problems while working on the audio portion of my emulator using Allegro. At best, you will get great sound in sync with graphics for a couple of minutes. Since this is not what you are looking for, avoid the Allegro audio routines at all costs. Go with something like portaudio.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Nov 12, 2006 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sure, an <a href="http://en.wikipedia.org/wiki/Open-loop_controller" class="postlink">open loop</a> will produce drift due to the inherent variation in sound cards. But if your Allegro front end monitors the ring buffer fullness and slightly adjusts the playback rate based on the ratio between buffer writes (by the emulation engine) and buffer reads (by the Allegro front end), then what produces the "drift" you're talking about?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Nov 12, 2006 4:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Sure, an <a href="http://en.wikipedia.org/wiki/Open-loop_controller" class="postlink">open loop</a> will produce drift due to the inherent variation in sound cards. But if your Allegro front end monitors the ring buffer fullness and slightly adjusts the playback rate based on the ratio between buffer writes (by the emulation engine) and buffer reads (by the Allegro front end), then what produces the "drift" you're talking about?</div>
<br />
<br />I didn't got what you mean <em>in terms of Allegro</em>, because you're <strong>always</strong> sending the same amount of samples at every "requested" update. No matter if it uses a ring or open buffer, it doesn't matter for audio stream updates... or am I wrong? Where? <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>