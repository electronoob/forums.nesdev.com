<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Mega Man 9 - Feasible on NES?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Mega Man 9 - Feasible on NES?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4407">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4407</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Sep 26, 2008 8:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I agree Bregalad, however I had suspected Capcom's first re-releases of Mega Man 1 - 6 (on PSX) were emulated since they seemed to experience the exact same slowdown issues as well as the very limited "enhancements" it really did seem like a hacked up emulator. And the Mega Man games aren't exactly very hard to get emulated. So I would imagine they lost the original ASM source code to Mega Man ages ago. 
<br />
<br />But the thing about the phsyics like those of Mega Man himself were basically the same in 6 games. So they probably have some idea of how to recreate that. Afterall Phantom Menace cloned The Legend of Zelda with his Zelda Classic, and he was able to do all that through observation. He didn't have any access to original code. And yet the clone is extremely accurate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>peppers</b> [ Fri Sep 26, 2008 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When it comes to ASM when you disassemble don't you get pretty much the same as the original? 
<br />
<br />Sept certain human touches that make it easier to read of course but for a professional team that should not take an extremely long time to fix that. It would be worth the effort considering they like to re-release the game often. Am I wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Sep 26, 2008 7:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No. When you disassemble a game such as for NES, there is no way to know what is CODE and what is DATA. There is no way to know where in memory a ROM bank is intended to be mapped to (except some minor clues for certain memory mappers) and you could have a ROM bank if you wanted that had code intended to be at more than one bank, or even relocatable code.
<br />
<br />So no, when you disassemble you are FAR from having the original source code. With alot of time and effort, you could probably go through ever little bit of code (with an emulator) and figure out exactly what does what and build a re-assemble-able source code with your own comments as some people have done. But this takes time and experience. And just because you have some "paid professionals" doesn't mean they would be any better at attempting this than those that aren't. 
<br />
<br />Nothing comes close to having the original source code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Sep 26, 2008 7:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">No. When you disassemble a game such as for NES, there is no way to know what is CODE and what is DATA.</div>
<br />
<br />Not entirely true.
<br />
<br />It's easy in some places to tell what is code, if you have something that disassembles it into legible 6502 instructions (not just hex editing). If you see something like this:
<br />
<br />sta $5203
<br />lsr $21
<br />brk
<br />cpx #$02
<br />jmp $FFFF
<br />.db $FF,$FF,$FF,$FF
<br />iny
<br />iny
<br />brk
<br />brk
<br />brk
<br />
<br />it's most likely not code. If there's a place where if it were code, it would crash, it's also most likely not code. Lots of "BRK" probably indicates data too.
<br />
<br />If you see something like this:
<br />
<br />lda ($42),y
<br />sta $2007
<br />iny
<br />lda ($42),y
<br />sta $2007
<br />iny
<br />
<br />You've most likely encountered code. And most banks that are filled with data don't have lots of code in them. If you find the Reset routine, you can basically act as a 6502 chip and find out how everything works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Fri Sep 26, 2008 8:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">If you see something like this:<br /><br />lda ($422),y<br />sta $2007<br />iny<br />lda ($422),y<br />sta $2007<br />iny<br /><br />You've most likely encountered code. And most banks that are filled with data don't have lots of code in them. If you find the Reset routine, you can basically act as a 6502 chip and find out how everything works.</div>
<br />
<br />Most likely not <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  "lda ($422),y" would be an AWESOME addressing mode, but it doesn't exist.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Sep 26, 2008 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha, good catch. Oops. Just changed it. =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMF54123</b> [ Fri Sep 26, 2008 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Look at the defect in the brick-breaking physics of SMB1 in Super Mario All-Stars.</div>
<br />I actually <a href="http://www.romhacking.net/hacks/167/" class="postlink">fixed that one</a> a while ago. Somehow, Nintendo got the Y velocity backwards in the brick hit code, so you get pulled upwards instead of rebounding downwards.
<br />
<br />As far as I can tell, the physics in the other games are identical to their NES counterparts, so I don't know what went wrong with SMB1/Lost Levels. They're all definitely based on the original code, since you can perform most of the same obscure tricks/glitches in the SMAS versions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sat Sep 27, 2008 4:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I thought about automating the code/data distinction so you can disassemble the ROM and quickly get code mixed with .db's.  Here's the scheme I came up with:
<br />
<br />First pass
<br />When a jsr lo hi is found:
<br />	-Go to that address - mark it as possible subroutine begin (psb).
<br />	-Rewind looking for RTS - mark every byte between RTS and psb as possible data (pd)
<br />	-Continue scanning after previous JSR until hitting another one
<br />	
<br />Second pass
<br />	-Go to every psb
<br />	-Scan through until RTS
<br />	-Separate opcodes from operands.  If no illegal opcodes, assume this is a real subroutine
<br />	
<br />Third pass
<br />	-Check every opcode that addresses memory
<br />	-If direct addressing is used, and the address is in ROM, check that address and ignore X/Y indexing
<br />
<br />	-Scan through until designated subroutine begin is found, check if the value of each
<br />	address was already marked as possible data and confirm it.
<br />-Ignore addresses that've been checked
<br />
<br />Not totally thorough (This assumes that every jsr will have a matching rts, which is false for SMB) and then there's indirect addressing, but could this work?
<br />
<br />Also, it could output a memory map and list possible data that was found on the first pass, but not confirmed on the third pass.  That way something like SMB's indirect jump routine could be found.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Sat Sep 27, 2008 4:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems to me that algorithm makes several assumptions that are not necessarily true for all games.
<br />
<br />A year ago or so I started work on a "static code analysis" project for NES games.  The goal was to determine code from data by tracing all possible execution paths.  For example, the utility (keep in mind, this is not an actual emulator) would begin at the reset vector and trace instructions.  When it got to a branch instruction, it would push the address of the instruction the branch pointed to onto a stack and then resume tracing assuming that the branch was not taken.
<br />
<br />The output of the utility was supposed to be asm code and a linker file suitable for ca65/ld65 to rebuild the original NES file byte for byte.  But I got bored and gave up on it after a week or so.
<br />
<br />I realized that I would have to actually emulate the instructions.  Not hard, but how do you know when to stop?  The reason was that some code would use jump tables and I had no provisions for tracking that.
<br />
<br />At this point I think that the best approach would be to take a hint from the world of professional software developers.  Many programming tool suites provide profilers and code coverage tests.  This is a program that will run your code in a debugger/profiler and record each line of each routine that gets executed.  It will then produce a report of what was executed or not executed.  FCEUltra can do this.  I'm not 100% sure on this, but I think that FCEUltra can also be used for 'TAS', tool assisted speed runs.
<br />
<br />Combined those...  Construct a TAS script that runs a game - not with the goal of winning (not right away anyway), but with the goal of exercising every code path.  FCEUltra will record which bytes were used as data, DMC samples and code (and bytes not used in that run).  It would take some work, but it should be possible to use TAS and FCEUltra's execution maps to create a full coverage test and identify the purpose for almost every byte in a NES file.
<br />
<br />Or I could be on drugs... one never knows <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>loopy</b> [ Sat Sep 27, 2008 6:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Has nobody heard of <a href="http://en.wikipedia.org/wiki/Interactive_Disassembler" class="postlink">IDA</a>?
<br />It's a godsend.  THE disassembler of disassemblers.  Surprised nobody's mentioned it yet...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sat Sep 27, 2008 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I downloaded the free 4.x version but it only works on x86.  :/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Sep 27, 2008 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made a nice <a href="http://www.ticalc.org/archives/files/fileinfo/349/34903.html" class="postlink">disassembler/static code analysis tool for the Z80</a> 4 years ago..
<br />Granted, it specifically targeted TI83 programs, but still.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Sep 28, 2008 1:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can do a jsr that returns somewhere else (by modifying the return adress on the stack), and branch instruction that are always taken.
<br />Also, a rts can be used to make indirect jumps more efficient.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Mon Sep 29, 2008 8:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey Clueless, I'm glad you mentioned that because I just found FCEUX (I was like huh, FCEU has that stuff?).  
<br />But it's not really clear to me what you're supposed to do with the code-data logger files.  Can you look at them in FCEUX or a hex editor or something?
<br />
<br />Also, it occured to me last night, it couldn't be that hard to figure out Mega Man physics playing the games one frame at a time.  Gotta be less work than going through code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Mon Sep 29, 2008 8:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent">Hey Clueless, I'm glad you mentioned that because I just found FCEUX (I was like huh, FCEU has that stuff?).  <br />But it's not really clear to me what you're supposed to do with the code-data logger files.  Can you look at them in FCEUX or a hex editor or something?<br /><br />Also, it occurred to me last night, it couldn't be that hard to figure out Mega Man physics playing the games one frame at a time.  Gotta be less work than going through code.</div>
<br />
<br />The logging files (this is from memory) are the same size as the iNES file.  Each byte in the log file corresponds to that byte in the iNES file, 1:1.  Each bit in the byte means something (read as code, read as data, written, read as DMC sample, etc...)
<br />
<br />I wrote tools in 'C' to digest them.  Now, I haven't done this since my work on reverse engineering Crystalis, and that was a long time ago (fall of 2002??)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>