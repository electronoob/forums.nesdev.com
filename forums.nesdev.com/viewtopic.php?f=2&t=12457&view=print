<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Map data formats</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Map data formats</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=12457">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=12457</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Mar 05, 2015 9:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I want to rewrite my map scrolling code, so I have been thinking about what kind of data format to use for the maps. The old format I used was sort of lazy: 16x16 pixel metatiles in a flat table. This time I'd like to go for something better. If any of you have any thoughts on the topic, please share them.<br /><br />Some design goals/constraints:<br /><br />- Should be generic rather than limited. I don't mind losing a little bit in efficiency (in space and time) due to this. No object based formats like used in SMB1.<br />- Should work with multi-directional scrolling.<br />- Shouldn't needlessly limit artistic freedom (no &quot;64 metatiles should be enough for everybody&quot;).<br />- Should be able to store a variety of extra info for tiles, such as 1) color attribute 2) slope type 3) collision flags<br />- Should not depend on extra cartridge RAM (but should be able to work with maps decompressed to WRAM).<br /><br />There are so many options available I'm having hard time coming up with anything concrete, because I don't have a good grasp on the benefits/drawbacks of things such as:<br /><br />- Metatile size (32x32 pixels? 16x16 pixels? Metatiles of metatiles?)<br />- Divide the map to screens of e.g. 256x256 pixels? (This seems like a good idea, so that sparse maps can be supported efficiently by having a map of screens. I guess &quot;screen&quot; here is really nothing but another name for a big metatile of metatiles.)<br />- Should attribute data be stored in metatiles, or should there be a separate map for them? Same goes for collision data. (Many, many options here. E.g. if we use 32x32 pixel metatiles which consist of 16x16 pixel metatiles, we could store attributes in the either metatile, or separated so that the same metatile could be used in two places with a different palette, for example).<br />- Maximum number of metatiles? 256 is a natural limitation to use here, but how likely are artists to run out of metatiles, say at the 16x16 pixel metatile level?<br /><br />Existing solutions in games:<br /><br />- Blaster Master apparently uses 256x256 pixel metatiles (screens), consisting of 64x64 pixel metatiles, consisting of 32x32 pixel metatiles, consisting of 16x16 pixel metatiles. I may have been misinterpreting the document I found, but it's something similar. The color attribute is associated with the 16x16 metatile.<br />- Gimmick uses 16x16 pixel metatiles. The whole map is stored more or less as is. The map is divided to screens, but the screens are not used to reduce redundancy. See <a href="http://forums.nesdev.com/viewtopic.php?p=131327#p131327" class="postlink">my earlier post</a> for some more info.<br />- Kirby uses 16x16 pixel metatiles and 256x192 pixel screens. Maps are stored compressed in ROM and decompressed to WRAM.<br />- &lt;add your favorite game here&gt;<br /><br />Thoughts?<br /><br />EDIT: Added an extra constraint about not requiring WRAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 05, 2015 12:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I once made an engine that did 8x8 blocks (quarter screen) of 16x16 tiles, and a big 16x16 map of those 8x8 blocks.  I did sort-of RLE compression (either run lengths, or run lengths taken from one row above) on the 16x16 big map.  This limits you to levels 2048x2048 pixels large.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Mar 05, 2015 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Definitely divide into something large like screens. I divide into screens, but while typing up this post, I actually think 128x128 metatiles would be super cool.*<br /><br />Definitely store attribute data with metatiles. (I don't think you'll have many metatiles that are identical except for their palette. Having a separate map would mean storing LOTS of redundant data whenever that's not true which is certainly the more common case.)<br />Definitely store collision info with metatiles. (Same as above. Is storing it separately likely to save you more space than having two of the same metatile with different collision info sometimes? Unless you mean define an arbitrary slope outside the metatiles so that multiple tiles can use it. In which case, yes, do that.)<br /><br />As far as which metatile size gets this data, I'd say always the smallest one possible. You're likely to have larger (say... 32x32) metatiles that have very slightly different arrangements of smaller (say... 16x16 metatiles) metatiles. You only save space if each small metatile is used fewer than 4 times in the large ones.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- Maximum number of metatiles? 256 is a natural limitation to use here, but how likely are artists to run out of metatiles, say at the 16x16 pixel metatile level?</div><br />The artists should be willing to meet you halfway, here. I would not go out of my way to support more than 256 of anything. (Err... but to actually answer your question, pretty likely if they don't know a lot. They're even likely to run of regular 8x8 tiles, which I see a lot a lot a lot.)<br /><br />I chose 32x32 metatiles as my second largest size, because you can fit 4 screens of them in a page of RAM. Having 512x512 pixels covered in RAM is super nice for a multidirectional scroller. I really, really recommend 32x32 tiles specifically, with some larger size to make it easy to seek through the level. (Screens or whatever)<br /><br />*So... I'm currently using 256x256 screens made of 32x32 metatiles made of 16x16 metatiles. I did it so I could fit 4 screens in RAM as mentioned above. However I have a problem now dealing with objects/enemies moving offscreen. Because it's possible the screen boundary is one pixel away from loading two new screens. If an object is then thrown offscreen to the right, it will either A: Interact with collision data from the left two loaded screens which could result in weird behavior, or B: Immediately be destroyed. <br /><br />I want some persistence off screen, but as it is now... it's very inconsistent persistence. You could throw an object a pixel off screen, and it might vanish. Or... it might stay there while you walk like 64 pixels away from it and come back. <br /><br />128x128 metatiles allows you to never have that situation come up. And of course still keeping all the benefits 32x32 metatiles provide. (512x512 pixels covered in RAM.) I'm now seriously considering changing to this, but man... there's a lot of things I'd have to update everywhere... (But I guess it also limits my level size without keeping 256x256 metatiles as well. Currently I can do any level dimensions that don't exceed 256. 64x4 screens, 128x2, 256x1 85x3 1x256... or anything less).<br /><br />I could post about how I store slopes or whatever if you want, but I'm not sure it helps with point 1. Generic. The thing to realize is that with metatiles everything is easily extendible. My 16x16 metatiles are 4 arrays of top left, top right etc. Need slope type? Add an array and a fifth byte. Need more info? Add it to the fifth byte. Out of space in the fifth byte? Add a sixth.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Mar 05, 2015 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Definitely store attribute data with metatiles. (I don't think you'll have many metatiles that are identical except for their palette. Having a separate map would mean storing LOTS of redundant data whenever that's not true which is certainly the more common case.)</div><br />Yeah I agree. This was actually my plan all along and what I've done in the past. I also haven't yet found a game which didn't do this. The reason I asked about it is that I talked with somebody (an artist) who disagreed, but he probably hadn't put much thought into it, or at least the technical ramifications of it. It probably wouldn't be terribly difficult to change the code to later on support this kind of scheme, if really needed (drop the data from the metatile data, load from a separate per-screen 2bpp bitmap).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Definitely store collision info with metatiles. (Same as above. Is storing it separately likely to save you more space than having two of the same metatile with different collision info sometimes? Unless you mean define an arbitrary slope outside the metatiles so that multiple tiles can use it. In which case, yes, do that.)</div><br />I guess the only counter-argument for that again is: do we want to save space, or to have as many graphically unique metatiles as possible? But yeah it's probably best stored in the metatile for a generic solution.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As far as which metatile size gets this data, I'd say always the smallest one possible. You're likely to have larger (say... 32x32) metatiles that have very slightly different arrangements of smaller (say... 16x16 metatiles) metatiles. You only save space if each small metatile is used fewer than 4 times in the large ones.</div><br />Yeah. As far as space savings go, it of course depends a lot on the data. I don't really have an intuition on which way would be better from that angle, but shoving all of it in the smallest metatiles seems like an easy way to go. I guess it shouldn't be <em>that</em> hard to change this later on, either.<br /><br />Might be interesting to throw &quot;raw&quot; 16x16 pixel metatile data from some games into an utility that tries different combinations of metatile sizes to see which yield the best compression, and see how much variation there is.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">- Maximum number of metatiles? 256 is a natural limitation to use here, but how likely are artists to run out of metatiles, say at the 16x16 pixel metatile level?</div><br />The artists should be willing to meet you halfway, here. I would not go out of my way to support more than 256 of anything. (Err... but to actually answer your question, pretty likely if they don't know a lot. They're even likely to run of regular 8x8 tiles, which I see a lot a lot a lot.)</div><br />Yeah, I guess. The 8x8 tile limit is easier, because no need to make a choice there (other than whether to use MMC5 or not.) And I wouldn't want to work with an artist who wasn't willing to make him or herself aware of that limitation. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I chose 32x32 metatiles as my second largest size, because you can fit 4 screens of them in a page of RAM. Having 512x512 pixels covered in RAM is super nice for a multidirectional scroller. I really, really recommend 32x32 tiles specifically, with some larger size to make it easy to seek through the level. (Screens or whatever)</div><br />Why do you have the map in RAM? Do you decompress it there, or load it dynamically, or something? What do you mean when you say you &quot;load new screens&quot;? Personally I was planning to keep the map data in ROM (or at least allow an option of doing so.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm now seriously considering changing to this, but man... there's a lot of things I'd have to update everywhere...</div><br />This is what I'm afraid of, so I want to make at least somewhat informed decisions. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Thanks for the reply, I was afraid I was going to have to do a monologue on this one. Looks like most of what you say align with what I've been thinking. And in the end, many of the differences between different methods are fairly small, so might as well just pick one and run with it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 05, 2015 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Metatiles of metatiles?</div><br />Always my first choice!<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I guess &quot;screen&quot; here is really nothing but another name for a big metatile of metatiles.</div><br />Exactly. I have metatiles all the way from 16x16 to 256x256 (going through 32x32, 64x64 and 128x128), which are the ones that are actually used in the level map. Sound crazy, but is really compact. I even considered sharing the structures across all metatiles, since they're all just arrays of 2x2 bytes no matter their size, to save even more data. That would have made the encoder insanely complex, so I never got to try this.<br /><br />To decompress the map, I first locate the specific 256x256 block I'll read from, and from there I use a set of pointers that I modify in ZP. Depending on the corner of the metatile I'm reading (which is specified by bits from the coordinates), I modify the pointers to point to the specific corner, and then it's just a matter of loading an index and moving on to the next pointer, until I reach the smallest block. Sounds slow, but it's not too bad. If you had lots of RAM you could decompress larger sections progressively instead of doing it the crazy way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Should attribute data be stored in metatiles, or should there be a separate map for them? Same goes for collision data.</div><br />I prefer to store attributes (and I really mean all attributes, not only the palette bits that the NES calls attributes) in the smallest metatile (16x16), but the collision maps are in a separate table, and are indexed in the metatiles. I have 2 sets of collision data per metatile, in order to simulate two layers in my level maps. Triggers cause the objects to switch layers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">256 is a natural limitation to use here, but how likely are artists to run out of metatiles, say at the 16x16 pixel metatile level?</div><br />I usually go with 256 because it's much simpler/faster to work with bytes. If you need more than that, the best option would probably be to store them in RAM and replace them progressively as the level is played.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Mar 05, 2015 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why do you have the map in RAM? Do you decompress it there, or load it dynamically, or something? What do you mean when you say you &quot;load new screens&quot;?</div><br />I have the map partially in RAM mainly because the screens are compressed in a way that doesn't allow random access, yeah. (Not sure if that means they're no longer considered metatiles. If so, my bad for calling them that.) I'd have to decompress for every collision if I didn't keep them in RAM somehow. They're also compressed in a way that's limited (against point 1.), so I didn't mention it.<br /><br />A map in RAM is also cool if you have some destructibility. You only have to change the state of a tile once when you load it, rather than check if it's solid every single time an object needs to collide with it.<br /><br />Basically when high byte of the scroll changes, I decompress the two screens that have just appeared to the 128 bytes that just moved offscreen. See GIF:<br /><img src="http://i.imgur.com/6oly7Cb.gif" alt="Image" /><br />To change to 128x128 metatiles, I'd need to change what updates this RAM. (And how objects are created when scrolled onto the screen.) Tile drawing and collision detection both read from this RAM to get the 32x32 metatile numbers, so the first change would fix those for free. (This is also why offscreen objects may collide with the wrong things, which wouldn't be a problem with an only ROM approach.) I mainly worry about updating the tool I use to create the maps. That's where I'd have to change things everywhere.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Personally I was planning to keep the map data in ROM (or at least allow an option of doing so.)</div><br />There's nothing wrong with this at all. I thought there were more benefits to the map in RAM, but now that I think about it...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thanks for the reply, I was afraid I was going to have to do a monologue on this one.</div><br />Any time. Not like my game will ever come out anyway, may as well share the thoughts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Mar 05, 2015 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You might need 'Tile Destroyed' flags, such as for collecting coins, already hit question blocks, blowing up walls, etc.<br />One way I've thought of doing it is to use a big map that corresponds directly to 8x8 areas of the map.  It would have numbers in it, such as FF for nothing destroyable, otherwise it would have a unique number for each area containing destructible tiles, think of them as 'cell numbers'.  This does not necessarily need to be in RAM, it could be in ROM.<br />Then you have the tiles destroyed bits, 8 bytes total per 'cell number', this is just the 64 bits of flags for whether tiles are destroyed or not.<br />Use a table to map a metatile to a 'destroyed' metatile.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 05, 2015 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">- Should be generic rather than limited. I don't mind losing a little bit in efficiency (in space and time) due to this. No object based formats like used in SMB1.</div><br />What's wrong in general with an object-based format?<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">A map in RAM is also cool if you have some destructibility. You only have to change the state of a tile once when you load it, rather than check if it's solid every single time an object needs to collide with it.</div><br />In a 2-way scroller like SMB2, if you're not going to have destructible objects above destructible objects, you could always use a single destruction bit per column.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Mar 05, 2015 5:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I have the map partially in RAM mainly because the screens are compressed in a way that doesn't allow random access, yeah. (Not sure if that means they're no longer considered metatiles. If so, my bad for calling them that.)</div><br />Understood. I think they should still be called metatiles, this method just caught me by surprise since I haven't heard of it before. The first thing that most people would probably think would be that decompressing entire screens while the game was running would be too slow, or at least make for an uneven processing load per frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A map in RAM is also cool if you have some destructibility. You only have to change the state of a tile once when you load it, rather than check if it's solid every single time an object needs to collide with it.</div><br />Definitely. I hadn't even thought of the option of storing only a partial view of the map in RAM (when using a big map), although I probably won't do it because it seems complicated. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Tile drawing and collision detection both read from this RAM to get the 32x32 metatile numbers, so the first change would fix those for free. (This is also why offscreen objects may collide with the wrong things, which wouldn't be a problem with an only ROM approach.)</div><br />Yeah, I had this same problem in STREEMERZ initially. I stored only the visible portion of the map in RAM, until I realized that the player should be able to interact with the walls of the upper/lower room during transitions. Since I wanted to make it behave the same way as the original, I had no option but to modify the code to load an additional couple of tile rows at the top and the bottom of the room. Of course this is not an option with a big map.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thanks for the reply, I was afraid I was going to have to do a monologue on this one.</div><br />Any time. Not like my game will ever come out anyway, may as well share the thoughts.</div><br />I guess many of us here are in the same boat. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I have actually realized I like working on engines more than I like working on games, so I'm not going to stress about getting anything complete out of this.<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">One way I've thought of doing it is to use a big map that corresponds directly to 8x8 areas of the map.</div><br />I want to go on a record to say that it can be really confusing when people talk about &quot;8x8 areas&quot; and don't specify what unit they use (pixels? metatiles? megatiles? inches?). I assume you meant metatiles here. This is why I used pixels all over the place in the original post in case anybody was wondering. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Still, thanks for the thought on destroyable terrain!<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">thefox wrote:</div><div class="quotecontent">- Should be generic rather than limited. I don't mind losing a little bit in efficiency (in space and time) due to this. No object based formats like used in SMB1.</div><br />What's wrong in general with an object-based format?</div><br />I didn't say anything was wrong with it. I said it's not a generic format, at least I think most people would feel limited by it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 05, 2015 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">You might need 'Tile Destroyed' flags, such as for collecting coins, already hit question blocks, blowing up walls, etc.</div><br />I like to implement all of those as actual objects, not part of the level map. Whenever the camera scrolls, the background objects check for overlaps between themselves and new rows/columns, and &quot;patch&quot; the row/column with their own tiles. This allows breakable/removable blocks to have actual graphics behind them, as apposed to just blank space. Plus, I like that the level map is just the static part, and everything you can interact with is an object.<br /><br />Objects might have permanent state bits assigned to them, so level deformation is possible, as long as the number of removable blocks isn't insanely high to the point where the CPU will have trouble dealing with so many objects or there won't be enough RAM to remember all the states.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Mar 06, 2015 2:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Myask's map data formats maundering...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><span style="font-size: 50%; line-height: normal">Disclaimer: rambling.</span><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">- Should be generic rather than limited.</div>Unfortunately, the preferred structure of data owes a good deal to its nature. I found reading about the MIDI format (and the superclass it owes its structure to, <a href="http://www.blitter.com/~russtopia/MIDI/~jglatt/tech/aboutiff.htm" class="postlink">Interchange File Formats</a>) to be fascinating; it seems relevant. Of course, 4 bytes for chunk-identification is likely going to be massive overkill for storing level data, but there are benefits to conforming to standards: (partial) compatibility, even if you don't understand every chunk, is feasible as the sizeof field allows you to simply discard unknowns. The non-mandatory nature of chunks suggests to me, one might have 'default' collision data for a metatile, and on occasion have a chunk added to a metatile saying &quot;no, use this collision instead&quot;. Similarly, one might have a &quot;this metatile relies on this memory data&quot;; if one is not making a geomod-fanatic game, this is going to be present in relatively fewer tiles...except for the obvious case of collectibles. A simliar (possibly the same, possibly different, depending on implementation) would be one depending on <em>saved</em> (password/SRAM/etc.) data.<br /><br />Variable-length quantities, like how <a href="http://www.blitter.com/~russtopia/MIDI/~jglatt/tech/midifile/vari.htm" class="postlink">MIDI</a> does for time-deltas <span style="font-size: 50%; line-height: normal">(summary: sign bit of a byte is &quot;is there another byte to this number&quot;)</span> are a simple way of providing extreme extensibility (and, if incautious, buffer overflows) to fields.<br /><br />The problem with this is that often, map-proximate tiles are going to be source-proximate, so you'll have a lot of data redundancy if you do this on a per-tile basis. One could instead specify the first (meta)tile as absolute, and for other (meta)tiles within the (meta)tile, only specify the relative address or lower byte(s), in similar fashion, using VLQs for the subsequent ones.<br /><br />On the crazy side, there will never be a time when you need more than 18 bytes to select a graphical 8px*8px tile on the NES. (16 bytes for the tile, 2 bytes for &quot;ridiculous-mapper&quot; per-8x1-sliver attribute).<br /><br />Attributes should <em>probably</em> be per-32*32px metatile under normal circumstances; this makes it easy to copy into the PPU attribute tables.<br /><br />Collision being stored separately to graphics, and at which level? There are two obvious NES-like cases where you want them disparate (illusionary/invisible walls/structures) as well as for &quot;foreground&quot;.<br /><br />A truly-universal object would just be a function pointer &quot;run this when this scrolls in&quot;, leaving further determination in said code. Obvious extensions are a &quot;dead&quot; or status flag to say when (/not) to run it again. One could store palette changes in this fashion, with a batch at the start of the level to initialize them.<br /><br />If you are doing a &quot;net-of-screens(~256*256px(240?) metatiles)&quot; approach, then one thought is that one might wish to is that one might wish to be able to change the direction of the coordinate system of said 'screen's, so as to more easily be able to extend the level forward. The one UR-scrolling level in SMB3 would have +y be up rather than down, in this thought...but you're likely to not have any need for this sort of affair if you are creating your own tools to produce the data.<br /><br /><span style="font-size: 75%; line-height: normal">Sources: the MIDI Technical Fanatic's Brainwashing Center (mirror)</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Mar 06, 2015 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Myask's map data formats maundering...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent"><span style="font-size: 50%; line-height: normal">Disclaimer: rambling.</span></div><br />Now, something like this is <em>too</em> generic for my purposes. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> And it would destroy performance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 06, 2015 12:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Myask's map data formats maundering...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">Attributes should <em>probably</em> be per-32*32px metatile under normal circumstances; this makes it easy to copy into the PPU attribute tables.</div><br />Unless you scroll vertically, in which case blocks in every other screen are misaligned to the attribute grid, and will require you to do some bit shuffling in order to form the attribute bytes. Another factor is that if you're using 8 or 4-way scrolling without extra name table RAM on the cartridge, one of the axes will not have 32 continuous pixels you can modify at once without causing glitches on the opposite side of the screen, so you will have to break up the bits anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Mar 06, 2015 3:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />True...unless one is using nametable-size &quot;screens&quot; so the cuts on the half-metatiles are already in-place.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 06, 2015 3:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Map data formats</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">unless one is using nametable-size &quot;screens&quot; so the cuts on the half-metatiles are already in-place.</div><br />True for the misalignment, but the 4/8-way scrolling and the lack of space to put the scrolling seam still applies.<br /><br />Still, I kinda like the idea of assigning attributes to the 32x32-pixel blocks, even if some bit shifting is necessary.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>