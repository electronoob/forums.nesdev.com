<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - FDS emulation attempt and questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">FDS emulation attempt and questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8712">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8712</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Mar 16, 2012 6:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Apparently the mathematical structure of CRC is such that appending the correct CRC value to a bitstream will cause the running CRC value to return to the starting value (e.g. $0000 or $FFFF).</div>
<br />At least the algorithm described at <!-- m --><a class="postlink" href="http://nesdev.com/FDS%20technical%20reference.txt">http://nesdev.com/FDS%20techni ... erence.txt</a><!-- m --> does not possess such property, in either endianess.
<br />
<br />EDIT: Oh, wait, it does, when you append two dummy zero-bytes to the stream before the CRC when encoding, and encode in little-endian. Then the reading algorithm becomes slightly simpler, though the writing algorithm becomes difficult:
<br /><ul><li><strong>after receiving 8 bits in READ MODE:</strong><br /><br />             Fetch the current disk byte into ShiftReg<br />	     <span style="color: #8080B0">Accumulate CRC with the contents of ShiftReg<br />	     (Note that $4032 bit 4 (CRC check result) is a bit-wise OR of all bits of the CRC at all times. If the CRC accumulator is zero, the bit is 0. Otherwise, it is 1.)</span><br />             <span style="color: #90B890">If $4025 bit 6 is 0, then clear internal flag: GapCovered=0<br />	     If GapCovered=1, then </span>Set $4032 bit 1 (to indicate $4031 is filled with data), and signal the IRQ if allowed; Then put contents of ShiftReg into $4031<br />	     <span style="color: #90B890">If the current disk byte was nonzero AND $4025 bit 6 is 1, then set internal flag: GapCovered=1</span><br />	     Move to next byte on disk<br />             Wait ～149 cycles, and repeat<br /></li><li><strong>when writing 8 bits in WRITE MODE:</strong><br />	     <br />	     <span style="color: #8080B0">if CRC-verify flag was PREVIOUSLY UNSET, Accumulate CRC with the contents of ShiftReg<br />	     If CRC-verify flag is SET, but was PREVIOUSLY UNSET, suddenly accumulate CRC twice with value 0x00.<br />	     If CRC-verify flag is SET, put the CRC low bits into ShiftReg and shift the CRC right by 8 bits, filling the top with zerobits.</span><br />	     Store the value from ShiftReg into the disk<br />	     Put value 0x00 into ShiftReg<br />             <span style="color: #90B890">If $4025 bit 6 is 0, then clear internal flag: GapCovered=0<br />	     If GapCovered=1, then </span>Set $4032 bit 1 (to indicate $4024 is ready for next byte), and signal the IRQ if allowed. Then, <span style="color: #8080B0">if CRC-verify flag is unset,</span> put contents of $4024 into ShiftReg.<br />	     <span style="color: #90B890">If the current disk byte was nonzero AND $4025 bit 6 is 1, then set internal flag: GapCovered=1</span><br />	     Wait ～149 cycles, and repeat<br /></li><li>Or merged:<br /><br />             If READING, fetch the current disk byte into ShiftReg<br />	     <span style="color: #8080B0">if CRC-verify flag was PREVIOUSLY UNSET, Accumulate CRC with the contents of ShiftReg<br />	     If WRITING, and CRC-verify flag is SET, but was PREVIOUSLY UNSET, suddenly accumulate CRC twice with value 0x00.<br />	     If WRITING, and CRC-verify flag is SET, put the CRC low bits into ShiftReg and shift the CRC right by 8 bits, filling the top with zerobits.</span><br />	     if WRITING, Store the value from ShiftReg into the disk<br />	     If WRITING, Put value 0x00 into ShiftReg<br />             <span style="color: #90B890">If $4025 bit 6 is 0, then clear internal flag: GapCovered=0<br />	     If GapCovered=1, then </span>Set $4032 bit 1 (to indicate that next CPU-adapter data transfer can happen), and signal the IRQ if allowed. Then put contents of ShiftReg into $4031, and <span style="color: #8080B0">if CRC-verify flag is unset,</span> put contents of $4024 into ShiftReg.<br />	     <span style="color: #90B890">If the current disk byte was nonzero AND $4025 bit 6 is 1, then set internal flag: GapCovered=1</span><br />	     Wait ～149 cycles, and repeat</li></ul>
<br />
<br />(The write algorithm needs reviewing)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 18, 2012 9:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To switch a disk side, is the "formula" <em>disk_data[active_side*65550]</em> valid ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Mar 18, 2012 9:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">To switch a disk side, is the "formula" <em>disk_data[active_side*65550]</em> valid ?</div>
<br />When the disk_data contains the data read from FDS file (excluding "FDS\x1A" header) without any conversion (such as adding gaps &amp; start marks &amp; crc necessary for a low-level emulation), yes.
<br />EDIT: Except the number has to be 65500, not 65550.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 18, 2012 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent">EDIT: Except the number has to be 65500, not 65550.</div>
<br />
<br />Yup, my bad. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Mon Mar 19, 2012 7:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is my refined algorithm on low-level FDS DISK I/O emulation in pseudocode.  I have tested both the reading and writing for functional correctness (games I have tried so far do not complain, and the disk contents read/written match their apparent intention perfectly). It does not mean it is proven correct, though. There may be another game that does not like it.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Register bits:<br />$4025 bit 0: DontStopMotor<br />$4025 bit 1: DontScanMedia<br />$4025 bit 2: DontWrite<br />$4025 bit 4: TransmitCRC<br />$4025 bit 6: InData<br />$4025 bit 7: DiskIRQ_enable<br />$4030 bit 0: TIMER_IRQ<br />$4030 bit 1: DataReady<br />$4030 bit 4: CRC&#91;0..15&#93; != 0x0000<br />$4030 bit 6: EndOfDisk<br />$4032 bit 0: DiskNotInserted<br />$4032 bit 1: DiskNotInserted || !Scanning<br />$4032 bit 2: DiskNotInserted<br />$4031 8 bits: ReadData<br />$4024 8 bits: WriteData<br />Writing or reading any of these registers does no immediate action aside from reading/storing the relevant bits in memory, and possibly reprogramming nametable mirroring and/or acknowledging an IRQ.<br /><br />Internal bits:<br />..... bit .: DiskNotInserted&nbsp; &nbsp;&#40;0 if disk is inserted, 1 otherwise&#41;<br />..... bit .: Scanning&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#40;used internally, indicates whether the motor has awakened&#41;<br />..... bit .: GapCovered&nbsp; &nbsp; &nbsp; &nbsp; &#40;used internally, indicates whether the end of gap was found&#41;<br />..... bit .: PreviousCRCflag&nbsp; &nbsp;&#40;used internally, stores last value of TransmitCRC&#41;<br />..... bit .: DoIRQ&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&#40;used internally as temporary&#41;<br />..... 8 bits&nbsp; : ShiftRegister&nbsp; &#40;used internally to store current disk-transfer byte&#41;<br />..... 16 bits : CRCaccumulator &#40;used internally for CRC calculation&#41;<br />..... integer : DiskPosition&nbsp; &nbsp;&#40;indicates current byte-position in the raw disk data&#41;<br />..... integer : DELAY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#40;indicates amount of remaining wait in CPU cycles&#41;<br /><br />FDS algorithm &#40;invoked on every CPU cycle&#41;:<br />&nbsp; &nbsp;-- Do nothing if motor is stopped, or if disk is not inserted.<br />&nbsp; &nbsp;IF DontStopMotor = 0 OR DiskNotInserted = 1,<br />&nbsp; &nbsp;&nbsp; &nbsp;Scanning&nbsp; := 0<br />&nbsp; &nbsp;&nbsp; &nbsp;EndOfDisk := 1<br />&nbsp; &nbsp;&nbsp; &nbsp;END CYCLE<br />&nbsp; &nbsp;-- At this point, DontStopMotor=1, and DiskNotInserted=0.<br />&nbsp; &nbsp;-- Do nothing if scanning is not started and has not been started.<br />&nbsp; &nbsp;IF DontScanMedia = 1 AND Scanning = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;END CYCLE<br />&nbsp; &nbsp;-- At this point, DontStopMotor=1, and DiskNotInserted=0, and &#40;DontScanMedia=0 OR Scanning=1&#41;.<br />&nbsp; &nbsp;-- So motor and scanning are permitted. Are they not started yet?<br />&nbsp; &nbsp;IF EndOfDisk = 1,<br />&nbsp; &nbsp;&nbsp; &nbsp;-- Start with delay.<br />&nbsp; &nbsp;&nbsp; &nbsp;DELAY&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;:= 50000&nbsp; &nbsp;&#40;arbitrary number&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;EndOfDisk&nbsp; &nbsp; := 0<br />&nbsp; &nbsp;&nbsp; &nbsp;-- Set internal variables for starting from the beginning of disk.<br />&nbsp; &nbsp;&nbsp; &nbsp;DiskPosition := 0<br />&nbsp; &nbsp;&nbsp; &nbsp;GapCovered&nbsp; &nbsp;:= 0<br />&nbsp; &nbsp;-- Elapse any pending delay &#40;read-delay, motor spin-up delay&#41;<br />&nbsp; &nbsp;IF DELAY &gt; 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;DECREMENT DELAY<br />&nbsp; &nbsp;&nbsp; &nbsp;END CYCLE<br /><br />&nbsp; &nbsp;-- Motor is now running and disk is being scanned. Set the flag thus indicating,<br />&nbsp; &nbsp;-- so that we don't get knocked back into halt, when the game sets DontScanMedia=1.<br />&nbsp; &nbsp;-- Also this reports in $4032 bit 1.<br />&nbsp; &nbsp;-- TODO: Figure out what happens on real hardware, if you set DontScanMedia=1<br />&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;a few cycles after setting DontScanMedia=0, but before $4032 bit 1 indicates Scanning=1.<br />&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;In this emulator, such action resets the disk drive without starting scanning,<br />&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;but there is a possibility that the real hardware would ignore the flag setting.<br />&nbsp; &nbsp;Scanning := 1<br /><br />&nbsp; &nbsp;-- At this point, DontStopMotor=1, and DiskNotInserted=0, and Scanning=1, and DontScanMedia=irrelevant.<br />&nbsp; &nbsp;-- READING?<br />&nbsp; &nbsp;IF DontWrite = 1,<br />&nbsp; &nbsp;&nbsp; &nbsp;-- Begin read-cycle:<br />&nbsp; &nbsp;&nbsp; &nbsp;READ DISK&nbsp; --&gt; ShiftReg<br />&nbsp; &nbsp;&nbsp; &nbsp;IF PreviousCRCflag = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;UPDATE CRCaccumulator WITH ShiftReg<br />&nbsp; &nbsp;&nbsp; &nbsp;-- End read-cycle:<br />&nbsp; &nbsp;&nbsp; &nbsp;DoIRQ&nbsp; &nbsp; &nbsp; &nbsp; := DiskIRQ_enable<br />&nbsp; &nbsp;&nbsp; &nbsp;-- If InData = 0, we are to think we are in a gap.<br />&nbsp; &nbsp;&nbsp; &nbsp;IF InData = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;GapCovered&nbsp; &nbsp; &nbsp;:= 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;CRCaccumulator := 0<br />&nbsp; &nbsp;&nbsp; &nbsp;ELSE, IF ShiftReg != 0x00,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- InData = 1. If we found a nonzero byte, we're no longer in the gap.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;GapCovered&nbsp; &nbsp; &nbsp;:= 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DoIRQ&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; := 0&nbsp; -- Don't signal IRQ for data-begin byte<br />&nbsp; &nbsp;&nbsp; &nbsp;-- If we are not in gap, signal the read data.<br />&nbsp; &nbsp;&nbsp; &nbsp;IF GapCovered = 1,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DataReady&nbsp; &nbsp; &nbsp; := 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ReadData&nbsp; &nbsp; &nbsp; &nbsp;:= ShiftReg<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;If DoIRQ, SIGNAL IRQ<br /><br />&nbsp; &nbsp;-- WRITING?<br />&nbsp; &nbsp;IF DontWrite = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;IF TransmitCRC = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- If we are not writing CRC, signal the readiness for data.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- TODO: Figure out whether DataReady should also be signalled<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;when InData=0. In this emulator, it will.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;The FDS BIOS never polls $4030 when InData=0, nor<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;never has DiskIRQ_enable=1 when InData=0, but a game<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;may do direct disk access differently.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DataReady&nbsp; &nbsp; &nbsp; := 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ShiftReg&nbsp; &nbsp; &nbsp; &nbsp;:= WriteData<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DoIRQ&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; := DiskIRQ_enable<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;If DoIRQ, SIGNAL IRQ<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;-- ShiftReg now contains the value of $4025 that was<br />&nbsp; &nbsp;&nbsp; &nbsp;-- given to us in the beginning of the write cycle.<br />&nbsp; &nbsp;&nbsp; &nbsp;IF InData = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- If InData = 0, we are to produce a gap.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ShiftReg&nbsp; &nbsp; &nbsp; &nbsp;:= 0x00<br />&nbsp; &nbsp;&nbsp; &nbsp;IF TransmitCRC = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;UPDATE CRCaccumulator WITH ShiftReg<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- TODO: Figure out what happens on real hardware if you have<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;InData=0 and TransmitCRC=1 simultaneously.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;Will the CRC &#40;first two bytes thereof anyway&#41; be written?<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;--&nbsp; &nbsp; &nbsp; &nbsp;In this emulator, they will.<br />&nbsp; &nbsp;&nbsp; &nbsp;ELSE,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;IF PreviousCRCflag = 0,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;-- If CRC was RAISED, finish the CRC calculation with TWO zero-bytes.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;UPDATE CRCaccumulator WITH 0x00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;UPDATE CRCaccumulator WITH 0x00<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ShiftReg&nbsp; &nbsp; &nbsp; &nbsp;:= CRCaccumulator low 8 bits<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;DOWNSHIFT CRCaccumulator by 8 bits<br />&nbsp; &nbsp;&nbsp; &nbsp;WRITE DISK &lt;-- ShiftReg<br />&nbsp; &nbsp;&nbsp; &nbsp;-- These flags may be useless at the moment:<br />&nbsp; &nbsp;&nbsp; &nbsp;GapCovered&nbsp; &nbsp;:= 0<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;-- After processing this byte, go to next byte.<br />&nbsp; &nbsp;PreviousCRCflag := TransmitCRC<br />&nbsp; &nbsp;INCREMENT DiskPosition<br />&nbsp; &nbsp;IF DiskPosition &gt;= DISK_SIZE,<br />&nbsp; &nbsp;&nbsp; &nbsp;-- End of disk reached. Stop motor.<br />&nbsp; &nbsp;&nbsp; &nbsp;-- I don't know if this is correct, or if the motor should rewind automatically, or something.<br />&nbsp; &nbsp;&nbsp; &nbsp;-- In any case, this will also set the EndOfDisk flag at next cycle.<br />&nbsp; &nbsp;&nbsp; &nbsp;DontStopMotor := 0<br />&nbsp; &nbsp;ELSE,<br />&nbsp; &nbsp;&nbsp; &nbsp;DELAY := 149<br />&nbsp; &nbsp;END CYCLE</div><br /><br />Updating the 16-bit CRC:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for&#40;unsigned n = 0x01; n &lt;= 0x80; n = n &lt;&lt; 1&#41;<br />&#123;<br />&nbsp; #if 0<br />&nbsp; &nbsp; /* OPTION 1: CRC is stored in an at least 17-bit variable */<br />&nbsp; &nbsp; if&#40;databyte &amp; n&#41; CRC = CRC | 0x10000;<br />&nbsp; &nbsp; if&#40;CRC &amp; 1&#41;&nbsp; &nbsp; &nbsp; CRC = CRC ^ 0x10810;<br />&nbsp; &nbsp; CRC = CRC &gt;&gt; 1;<br />&nbsp; #else<br />&nbsp; &nbsp; /* OPTION 2: CRC is exactly 16 bit, requires temporary status flag */<br />&nbsp; &nbsp; bool c = &#40;CRC &amp; 1&#41;;<br />&nbsp; &nbsp; CRC = CRC &gt;&gt; 1;<br />&nbsp; &nbsp; if&#40;c&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CRC = CRC ^ 0x8408;<br />&nbsp; &nbsp; if&#40;databyte &amp; n&#41; CRC = CRC ^ 0x8000;<br />&nbsp; #endif<br />&nbsp; &nbsp; /*<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6502 Assembler equivalent without tables, for reference only:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda databyte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ldx #8<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- lsr a<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ror crc_hi<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ror crc_lo<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc +<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tay<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda crc_lo : eor #$08 : sta crc_lo<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda crc_hi : eor #$84 : sta crc_hi<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tya<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ dex<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne -<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Assuming zeropage-addressing, costs 164..323 cycles.<br />&nbsp; &nbsp; */<br />&#125;</div>
<br />Note that when the CRC is 0 and the databyte is 0, the outcome CRC is also 0. Also, CRC(  string + CRC(string + "\x00\x00") ) = 0. This trait happens even if the 0x8408 is changed to some other arbitrary 16-bit integer.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>