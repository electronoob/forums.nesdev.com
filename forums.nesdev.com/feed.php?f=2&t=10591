<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=10591" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-01-25T13:34:36-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=10591</id>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2014-01-25T13:34:36-07:00</updated>
<published>2014-01-25T13:34:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124484#p124484</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124484#p124484"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124484#p124484"><![CDATA[
They're just from me playing around with different numbers until I got flicker pattern I liked. They're changable of course, but the currIndex increment/decrement must be an odd number * 4.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Sat Jan 25, 2014 1:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-01-25T04:18:48-07:00</updated>
<published>2014-01-25T04:18:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124436#p124436</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124436#p124436"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124436#p124436"><![CDATA[
Mmm.... yeah looks pretty nice ! I don't know where the numbers $34 and -$0c came from but I don't really care anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Jan 25, 2014 4:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2014-01-24T21:11:26-07:00</updated>
<published>2014-01-24T21:11:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124426#p124426</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124426#p124426"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124426#p124426"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />It has nothing to do with me <em>personally </em>not enjoying it, it runs at 15 FPS and you barely control what is going on.<br /></div><br />No problem, it was just an example of the technique you were curious about. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Even though it didn't run at 60 fps, you could still get a glimpse of the chaotic nature of the technique. I personally don't prefer it, but I don't actually care if someone chooses to implement it or not.<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />And if RNG is a bad idea, please come up with a better one. The forward/backward trick is great, but sprites will disappear completely if there is more than 16 on the scanline, and if there is like 9 of them, two of them will be flickering in a much worse way than if it was random (or sort-of-random).<br /></div><br /><a href="http://forums.nesdev.com/viewtopic.php?p=119521#p119521" class="postlink">The method I posted earlier should address your concerns.</a><br /><br />Castle Excellent uses this same idea, if you want to see an example. (They also combined it with the forward/backward technique, but it doesn't really look much different in my opinion)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Fri Jan 24, 2014 9:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-01-24T00:59:23-07:00</updated>
<published>2014-01-24T00:59:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124392#p124392</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124392#p124392"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124392#p124392"><![CDATA[
It has nothing to do with me <em>personally </em>not enjoying it, it runs at 15 FPS and you barely control what is going on.<br /><br />And if RNG is a bad idea, please come up with a better one. The forward/backward trick is great, but sprites will disappear completely if there is more than 16 on the scanline, and if there is like 9 of them, two of them will be flickering in a much worse way than if it was random (or sort-of-random).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Jan 24, 2014 12:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2014-01-23T23:47:58-07:00</updated>
<published>2014-01-23T23:47:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124390#p124390</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124390#p124390"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124390#p124390"><![CDATA[
An RNG seems like a bad idea. It tends to be 50% whatever on average but since it's not uniform that means there can be runs of one or the other state, thus uneven flickering. Audibly it's like the difference between a low tone and a geiger counter clicking rapidly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Jan 23, 2014 11:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2014-01-23T22:53:10-07:00</updated>
<published>2014-01-23T22:53:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124388#p124388</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124388#p124388"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124388#p124388"><![CDATA[
From the very beginning of the game, allow the fourth balloon to scroll on screen, float up to be in the same vertical position as it, and then pause.<br /><br />Also, just because you personally don't enjoy a game doesn't mean you can't learn anything from it. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Jan 23, 2014 10:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-01-23T02:10:07-07:00</updated>
<published>2014-01-23T02:10:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124368#p124368</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124368#p124368"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124368#p124368"><![CDATA[
This game has so many flaws, that you can't use it to compare it with anything. I didn't ever manage to get sprites to flicker, and it looks VERY messy before that. Relatively close to Ghostbusters or Action52 level of mediocrity.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Jan 23, 2014 2:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2014-01-22T14:07:01-07:00</updated>
<published>2014-01-22T14:07:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124341#p124341</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124341#p124341"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124341#p124341"><![CDATA[
Hello Kitty World uses an RNG for its oam cycling. It kinda looked messy. I think a regular pattern would be more aesthetic, when compared to complete randomness.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Wed Jan 22, 2014 2:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2014-01-21T15:26:13-07:00</updated>
<published>2014-01-21T15:26:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124283#p124283</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124283#p124283"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124283#p124283"><![CDATA[
Luckily, my project doesn't require priority, so I use a simple technique that I got from Bregalad where you draw sprites in the order of sprite #1, #3, #7, #10... #58, #61, #0, #2, #5... (except I use sprite #0 so I skip that) and then I think you start from a different index the next frame. This naturally cycles all the sprites.<br /><br />I had an idea. I think it might be beneficial, if you were designing a system were priority is a concern, to never have to worry about priority within a metasprite. When drawing metasprites, the individual sprites can always be cycled. But then you'd have another layer that says what metasprites an object is made of (so you could have multiple metasprites making up an object), which would handle priority of those metasprites. So an object that would normally be one metasprite with defined single sprite priority could be turned into multiple metasprites, which are prioritized by this engine. I'm struggling with words today; I hope that makes some sense.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Tue Jan 21, 2014 3:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-01-20T19:44:03-07:00</updated>
<published>2014-01-20T19:44:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124239#p124239</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124239#p124239"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124239#p124239"><![CDATA[
I have 16 objects, and I have a small table of numbers relatively-prime to 16. Each frame I cycle through the objects adding a relatively-prime number to choose the next object index, and call each object's draw routine in that order (the draw routines just fill up the OAM buffer in linear order as tiles are added). Every frame I just advance to the next number in the table. I always start the index at 0, allowing me to use sprite-0 hit if necessary and to always prioritize one of the objects.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Jan 20, 2014 7:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-01-20T16:18:06-07:00</updated>
<published>2014-01-20T16:18:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124229#p124229</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124229#p124229"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124229#p124229"><![CDATA[
If priority matters, you could reserve sprites 1-31 for top halves and sprites 33-63 for bottom halves.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jan 20, 2014 4:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-01-20T15:49:23-07:00</updated>
<published>2014-01-20T15:49:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124224#p124224</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124224#p124224"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=124224#p124224"><![CDATA[
Now that I had a second thought about it, it sounds like it could be possible to reach &quot;ideal&quot; sprite cycling at the price of extra CPU power the following way :<br />You have a list of numbers (for example 0-63) and you shuffle it every frame using <a href="http://en.wikipedia.org/wiki/Talk:Fisher%E2%80%93Yates_shuffle" class="postlink">something like this</a>.<br />Then you just render the sprites following the order of the list. This way you're guaranteed their priorities are as random as your RNG is, and they will flicker evenly (if you have N (&gt;8) sprites, each one of them has a (N-8)/N probability of disappearing on a given frame).<br /><br />If you need priorities between various metasprites, you can shuffle only the individual sprites within the metasprite.<br />If inversely you need priorities within a metaprite for layering, you can shuffle the metasprites but not individual sprites within it.<br /><br />You can of course only shuffle the part that needs to be shuffled, and keep order in parts that require orders.<br /><br />However the major problem would be that it would be extremely slow, as there would be multiple calls to the shufflers every frame, and sprite drawing is already often the CPU bottleneck of a NES game. Shuffling requires random numbers in non-power of two ranges, which in turn requires either the modulo operator (-&gt; division -&gt; slow) or a re-call to the random algorithm if out of range (probably better as it's not biased and can be made faster than a division).<br /><br />So I wonder how useful it would be to use shufflers in the context of sprite cycling. I think that at global scope in a game where priorities never matters, it can be a great idea, as shuffling is only done once per frame. In a case where it would be required to shuffle among smaller set of sprites might be more ambigious as the overhead would eat significant time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Jan 20, 2014 3:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bananmos]]></name></author>
<updated>2013-10-17T15:42:07-07:00</updated>
<published>2013-10-17T15:42:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119540#p119540</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119540#p119540"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119540#p119540"><![CDATA[
Just want to add that besides staggering the sprite layout like Tepples mentioned, it can also be useful to make the sprites used to cover your cel overlap each other. <a href="http://sourceforge.net/apps/mediawiki/tilificator/index.php?title=Tilificator_Tutorial" class="postlink">Tilificator</a> favours this sort of overlap in its sprite coverage algorithms.<br /><br /><br />megaman_original.png<br /><br />Above image shows original tiles in Megaman. Notice how the two sprites making up the top of Megaman's head have no overlap, so if one disappears then ~50% of the graphics the two tiles cover will disappear as well.<br /><br />megaman_tilificator.png<br /><br />Above show an alternate tile coverage, where the same two sprites have up to 4 horizontal pixels of overlap. If one of them disappears, only ~25% of the graphics the two tiles cover will disappear.<br /><br />Of course, favoring such overlap can have a drawback as well: Covering more of your cel can also mean less opportunity to to re-use the sprite for similar cels where only some pixels differ, so it can be trade-off between minimizing flickering pixels and minimizing your tileset. This is quite dependent on how your cels look though, and the optimal coverage given a particular set of cels is most likely an NP-complete problem. (though I personally lack the computer science math skillz to formally prove it)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=106">Bananmos</a> — Thu Oct 17, 2013 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2013-10-16T23:33:04-07:00</updated>
<published>2013-10-16T23:33:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119521#p119521</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119521#p119521"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119521#p119521"><![CDATA[
The way I do it:<br /><br />Start: Offset = $00, CurrIndex = $00<br /><br />On sprite clear: Offset += $34, CurrIndex = Offset<br /><br />Upon allocating a sprite: Copy sprite to CurrIndex, CurrIndex -= $0C<br /><br />This &quot;scatters&quot; the sprites so that the flickering on the scanline is more evenly distributed, creating more of a &quot;rolling&quot; flicker effect.<br /><br />If you used the simple method of just reversing your sprites every frame and had 9 sprites on a scanline, you'd get two sprites that flicker each frame (and thus are at 50% opacity), and 7 sprites that are solid. Although it's pretty iconic looking for older games, it doesn't look as good in my opinion.<br /><br />If you need to have some semblence of priority, you can split the sprite OAM into two parts: one part is shuffled, and the other part is not. To do that, you just repeatedly apply your incrementation/decrementation to CurrIndex (and possibly also Offset) if the value is within the section that isn't shuffled, so you skip over it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Wed Oct 16, 2013 11:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2013-10-16T17:48:14-07:00</updated>
<published>2013-10-16T17:48:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119512#p119512</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119512#p119512"/>
<title type="html"><![CDATA[Re: Standard flicker mitigation techniques?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10591&amp;p=119512#p119512"><![CDATA[
<div class="quotetitle">slobu wrote:</div><div class="quotecontent"><br />Is flicker mitigation ever part of enemy AI?  Something like an enemy will intentionally avoid being on the same horizontal plane?<br /></div><br /><br />It very much is.  I think it was Streets of Rage (1? 2?) on the Genesis that did this, with enemies programmed to walk up or down if more enemies come on the screen, also never aligning all enemies on a single horizontal strip, for obvious reasons.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Wed Oct 16, 2013 5:48 pm</p><hr />
]]></content>
</entry>
</feed>