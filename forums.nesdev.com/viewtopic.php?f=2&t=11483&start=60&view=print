<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Creating the 'best possible' NES game</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Creating the 'best possible' NES game</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11483">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11483</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>5</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Aug 07, 2014 10:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Or do you just place values in a part of RAM that the sound code picks up?</div><br />That one.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But when you replace the sounds, you might have to come up with new logic to trigger the replaced sounds. For example, if you decide to add a &quot;5, 4, 3, 2, 1&quot; countdown, you need to add the logic to compare the timer to those values.</div> <br />If I'm following that's not a strict replace, right? You're ADDING the extra unique sounds. If you were just replacing, the logic is already there. But it's also not difficult. You can't possibly think I meant that if I make say... a new skid sound or jump sound when there wasn't one before, I wouldn't have to add logic for it right? It's just really easy. If the character can already jump, you already have logic that detects whatever makes him jump. And from that you can add the 6 or 8 bytes for a load/ora/store to make the new sound play. I'm sure you could come up with 7 cases where it ain't that easy, I can too. But yo... even the timer thing can be done in 17 bytes with the way I'd have set up the timer in the first place. Edit: Actually it'd be less than 17 bytes more, because we're presupposing the timer already did play a sound effect, it just didn't play a unique one for each value, right?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course it is. I ran out of space in <em>RHDE</em>, and now I have to postpone features to a sequel using UNROM.</div><br />I say that's more a symptom of bad scope. i.e. your game was too ambitious for NROM. I'd also say running out of space is different than running out of fixed bank space. If I run out of space in a data bank for instance, that's an easy fix. There are different shades of running out of space. I'd further say the fight I mentioned was between multiple developers. I've got around 300 bytes free in the fixed bank, and that's fine. That's the road. Imagining tetrising code in there with other developers is what I meant, not the fight for space in general, which yes, is always present. Edit: Usually I'd assume that the fight for space at the end of a well scoped NROM game would be for data, not code, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>43110</b> [ Thu Aug 07, 2014 11:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Now that I have an actual idea for a game to go with that engine, and now that <a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=11137" class="postlink"><em>Flight Minigames</em> is canceled</a>, I might end up actually making something I've wanted to make since the air date of the &quot;Dogmother&quot; episodes of the animated series <em>Garfield and Friends</em>, which was 20 years ago. This game was originally planned to be on Apple II, for cricket's sake. (<a href="http://forums.nesdev.com/viewtopic.php?p=124164#p124164" class="postlink">Related</a>)</div><br />I apologize for that hold up. I didn't truly understand the consequences of that PM I sent log ago at March. In fact I forgot about it altogether. That and I severely overestimated my skills at that time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>OneCrudeDude</b> [ Thu Aug 07, 2014 10:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Allow me to interject quickly for a moment here.  I would like to ask (and know) how much more difficult would NES game development be if you were to make your game for a more advanced mapper?  I don't think any homebrew games go above anything higher than UNROM, and if they do, they must be relatively few.  Is the reason why more advanced mappers are ignored is because the games don't need them, or they're harder to work with?  What about something as grand as the MMC5, would that be tricky to work with?  And while on the subject, would it be possible to combine features of mappers?  For example, making an MMC5 derivative where it uses Namco-163 audio instead of two extra squares and a PCM channel?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Aug 07, 2014 10:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />More advanced mappers don't usually make things too much easier or harder. The reason you don't see many is because a lot of homebrew developers would like to make carts of their game without destroying old games, and stuff like MMC5 isn't hardware cloned and easily available to buy, unlike the simpler mappers. (Could be wrong about MMC5. If I am, I'd love to hear about it.)<br /><br />Also, if you're making cartridges cost is a factor. More advanced mappers cost more.<br /><br />Edit: And it's possible to combine features of mappers, or make custom mappers sure. Several carts one can buy or could have bought on retrousb use/used custom mappers.<br /><br />Edit2: NTRQ is MMC1, as is Super Bat Puncher and Assimilate.<br />Blade Buster is MMC3, as is Chu Chu Rocket and Hiatus Ward and Neotoxin.<br /><br />My game used to target MMC1, solely because it was available to buy on retrousb. Now I'm using MMC3 because it's hardware cloned and available on infiniteneslives.com. (Though I'm currently using no actual features I wouldn't have on a simpler mapper. But the scanline counter is attractive for when I get to cutscenes. If I REALLY wanted to keep costs down, I'd probably roll with whatevers cheapest that does the other kinds of swapping I need with no scanline counter.)<br /><br />Edit3: So it follows that yes, if you want scanline counting, life is easier with a mapper that supports it. And there are mappers with features that are hard to use, I'm sure. But you're not obligated to use those features. You choose the mapper based on the scope of project and what you need/what you're willing to pay for. I'd say in most cases, mappers don't make things easier. They just make them <em>possible</em> in the first place. You can't use extended audio without one. You can't use extra RAM without one. (Well... I guess on some emulator you probably could...) You can't have 256 KB of PRG without one. Scanline stuff CAN be done without one, it's just harder.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>OneCrudeDude</b> [ Thu Aug 07, 2014 11:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm really starting to like INL as a hardware manufacturer, he could probably make an MMC5/N163 hybrid, after he's done engineering a mass producible version of MMC5.  I chose the 163 simply by virtue of it's sound channels being incredibly flexible.  Do you want an extra square, an extra triangle, a sawtooth, etc.  Doesn't the FDS do something similar, or is it entirely different?<br /><br />Speaking of scanline stuff, supposedly the DPCM channel could be used as a makeshift scanline counter, or something to that extent.  Maybe it was an IRQ counter.  Did any games ever do that, or was it a mostly unused feature/trick?  Would that even be useful when you finally get it to work?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Aug 07, 2014 11:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">OneCrudeDude wrote:</div><div class="quotecontent">Speaking of scanline stuff, supposedly the DPCM channel could be used as a makeshift scanline counter, or something to that extent.  Maybe it was an IRQ counter.  Did any games ever do that, or was it a mostly unused feature/trick?  Would that even be useful when you finally get it to work?</div><br />Bee 52, an unlicensed game from Codemasters, uses the DPCM IRQ as a wannabe scanline IRQ. IRQ happens during scanlines 162..164, and a sprite 0 hit is used at Y=167 (scanline 168) to stabilize the timing. Inbetween those scanlines they read the controller, presumably because it's the one place where they know DPCM samples can't corrupt the controller reads.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Thu Aug 07, 2014 11:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">OneCrudeDude wrote:</div><div class="quotecontent">Is the reason why more advanced mappers are ignored is because the games don't need them, or they're harder to work with?<br /></div>Some of each? As far as I can tell, the more sophisticated the mapper, the greater the quandary of figuring out how to use the features you've been given.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And while on the subject, would it be possible to combine features of mappers?  For example, making an MMC5 derivative where it uses Namco-163 audio instead of two extra squares and a PCM channel?<br /></div>As far as &quot;what's possible&quot;, the limits have never been really reached:<br />Expansion audio can be arbitrary, so long as it's monaural.<br />For backgrounds, each 8Hx1V strip of pixels can have any one of the 4 palettes, so it's close (although short of) a 13 color bitmap.<br />However, sprites can't really be improved beyond the MMC5's &quot;8KB of CHR for 8x16 sprites and 4KB of CHR for background&quot; mode.<br /><br />In practice, the real constraint is bandwidth.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Doesn't the FDS do something similar, or is it entirely different?<br /></div>The FDS is a single channel, with controllable automated vibrato. Nice, and actually much more distinctive of a sound than the 163's simple wavetable synthesizer, but, well, not polyphonic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Aug 08, 2014 12:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">However, sprites can't really be improved beyond the MMC5's &quot;8KB of CHR for 8x16 sprites and 4KB of CHR for background&quot; mode.</div><br />I was thinking about this the other day, and I guess the main problem for extending the tile addressing capabilities for sprites is that when the PPU is fetching sprite tiles, you don't really know what sprite the tile belongs to (so even if you had extended tile number bits somewhere, you wouldn't know which ones to use).<br /><br />Maybe it would be possible to reuse some of the existing OAM bits, say the bottom 6 bits of tile number, to expose the sprite index to the mapper (via PPU address lines), and use that to index into mapper's internal memory that would have more bits for the tile number. Just a random thought, haven't thought this one through yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Aug 08, 2014 1:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Maybe it would be possible to reuse some of the existing OAM bits, say the bottom 6 bits of tile number, to expose the sprite index to the mapper (via PPU address lines), and use that to index into mapper's internal memory that would have more bits for the tile number.<br /></div>Slightly more efficient to use the uppermost 6 bits of tile number instead, so that you can share a few address lines with standard background banking. This basically becomes 4-tile banks for specific use of sprites. By allocating two bytes for a tile, it allows us to address 1-2MB (8x8 or 8x16) of sprite tiles ... and for sprites, unlike for background tiles, the overhead of writing that isn't so bad.<br />I'm not certain whether we get anything particularly useful by being able to change the effective sprite tile number in the middle of rendering...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Fri Aug 08, 2014 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If the mapper monitors the writes the CPU makes, it hypothetically could recognize writes to 2003/2004, and capture the unused three bits of the attribute byte (the third of every four bytes), and use that as 3 extra bits for the non-ID tile number.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 08, 2014 6:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Edit2: NTRQ is MMC1, as is Super Bat Puncher and Assimilate.</div><br />Super Bat Puncher could probably have used UNROM + WRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can't use extended audio without one.</div><br />You can't use extended audio on an unmodified NES anyway.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> You can't use extra RAM without one. (Well... I guess on some emulator you probably could...)</div><br />To put this in hardware terms, the common discrete mappers can be made to have RAM by adding a 74*20 to decode a 6264 at $6000, as Nintendo did to NROM in <em>Family BASIC</em>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Aug 08, 2014 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drag wrote:</div><div class="quotecontent">If the mapper monitors the writes the CPU makes, it hypothetically could recognize writes to 2003/2004, and capture the unused three bits of the attribute byte (the third of every four bytes), and use that as 3 extra bits for the non-ID tile number.<br /></div>How would the mapper know which sprite index mapped to when the tiles were fetched?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Fri Aug 08, 2014 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As was suggested beforehand, the sprites use 6 bits of the tile number to identify themselves, and I think the idea was to write 64 more bytes to the cart after that. However, I think the <em>core</em> idea behind this is to just have every 4 tiles of the pattern table be individually swappable. With just the extra bytes written to the cart, you could choose a group of four tiles out of 256 unique groups (1024 tiles total), and with the 3 extra bits, it'd be 2048 groups (8192 tiles total).<br /><br />The first use of this that comes to mind is a game that has 16x16 objects. You'd use the mapper writes to select the character you want to display, and the attribute bits can select 8 poses or animation frames, which'd be great because this information would be part of an ordinary sprite DMA, so it costs nothing extra.<br /><br />It's important to note that, using this scheme, the page-select bits in the attribute byte have nothing to do with the sprite itself. Sprite 0's attribute byte controls tiles 0-3, sprite 1's controls tiles 4-7, and so on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>OneCrudeDude</b> [ Fri Aug 08, 2014 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You know, I noticed something.  With the NES, you generally have to program various tasks (text rendering, scrolling, etc) from scratch each time you need to use it.  Modern platforms, at least modern game development software (flash, unity, et all), might already have those tasks already defined, and you don't need to build an engine completely from scratch.  Would that be the case?  On the flip side, what about developing the core NES engine (for example, that has seamless 8 way scrolling like Gauntlet, or dreaded slope collision), and then using that same engine with each new game?  You wouldn't need to program all those features every time you make a game, though the games that could be produced would be limited.<br /><br />Alternatively, I had an idea for an NES game making program that is -very basic- and can only produce -very basic- games with a proprietary engine.  Something similar to Game Maker, where you can use an interface to plot your graphics down, where the guy should be, and buttons that program how fast they should move.  Of course, given the limited nature of the NES, this seems more like a waste of time when the game won't be optimized, but the point still stands.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Aug 08, 2014 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Creating the 'best possible' NES game</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">OneCrudeDude wrote:</div><div class="quotecontent">that has seamless 8 way scrolling like Gauntlet</div><br />Gauntlet's way of doing 8 way scrolling doesn't take more than 5 minutes to implement: it &quot;cheats&quot; by using 4-screen mirroring (extra memory for nametables on cart) and the levels never span more than 4 nametables.<br /><br />But you are correct, there are many portions in a NES game that can be reused from game to game: map scrolling, compression, audio, sprite rendering, etc etc.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>5</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>