<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Development Languages</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Development Languages</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=9355">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=9355</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Garth</b> [ Thu Apr 20, 2017 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Development Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it only concern about speed that prevented people from using higher-level languages? or the lack of tools, perhaps? I remember seeing some game for the NES here was made with cc65's C compiler, and it didn't (seem) to have speed issues.</div><br />Are you kidding ? I tried to make a program that basically writes text on the screen, and even that was too much to handle, it lagged.</div><br />The 6502's architecture does not seem to lend itself well to C.  Fortunately, the same traits that cause this also make the '02 easy to envision solutions in assembly language.  Here's an example of compiled C code, an empty count-to-100 loop, the line<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for (i = 0; i &lt; 100; i++);</div><br />with i defined as a char (1 byte).  The equivalent BASIC line would be<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">FOR I = 0 to 99 : NEXT I</div><br />The popular CC65 C compiler, which admittedly is not optimizing, produces the following 6502 code from it.  The comments were added by hand, not by the compiler.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp; &nbsp;decsp1&nbsp; &nbsp; ; make 1 byte space on the stack<br /><br />000003r 1&nbsp; A2 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;#$00<br />000005r 1&nbsp; A9 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;#$00<br />000007r 1&nbsp; A0 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp; &nbsp;#$00<br />000009r 1&nbsp; 91 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;(sp),y&nbsp; &nbsp; ; initialize i to 0<br />00000Br 1&nbsp; A0 00&nbsp; &nbsp; &nbsp; &nbsp; L0003:&nbsp; ldy&nbsp; &nbsp; &nbsp;#$00<br />00000Dr 1&nbsp; A2 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;#$00<br />00000Fr 1&nbsp; B1 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;(sp),y<br />000011r 1&nbsp; C9 64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp&nbsp; &nbsp; &nbsp;#$64&nbsp; &nbsp; &nbsp; ; cmp i to 100&nbsp; &nbsp; <br />000013r 1&nbsp; 20 rr rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;boolult&nbsp; &nbsp;; do a less than comparison<br />000016r 1&nbsp; F0 03 4C rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; jne&nbsp; &nbsp; &nbsp;L0005&nbsp; &nbsp; &nbsp;; if less than<br />00001Ar 1&nbsp; rr<br />00001Br 1&nbsp; 4C rr rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;L0004&nbsp; &nbsp; &nbsp;; if equal to 100<br />00001Er 1&nbsp; A0 00&nbsp; &nbsp; &nbsp; &nbsp; L0005:&nbsp; ldy&nbsp; &nbsp; &nbsp;#$00<br />000020r 1&nbsp; A2 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp; &nbsp;#$00<br />000022r 1&nbsp; B1 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp; &nbsp;(sp),y&nbsp; &nbsp; ; get i again<br />000024r 1&nbsp; 48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pha<br />000025r 1&nbsp; 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;clc<br />000026r 1&nbsp; 69 01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; adc&nbsp; &nbsp; &nbsp;#$01&nbsp; &nbsp; &nbsp; ; increment i&nbsp; &nbsp; &nbsp;<br />000028r 1&nbsp; A0 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp; &nbsp;#$00<br />00002Ar 1&nbsp; 91 rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp; &nbsp;(sp),y&nbsp; &nbsp; ; store i<br />00002Cr 1&nbsp; 68&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />00002Dr 1&nbsp; 4C rr rr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;L0003<br />000030r 1&nbsp; 20 rr rr&nbsp; &nbsp; &nbsp;L0004:&nbsp; jsr&nbsp; &nbsp; &nbsp;incsp1&nbsp; &nbsp; ; restore stack</div><br />all for what can be done in assembly language with only:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; LDX&nbsp; #0<br />L0003:&nbsp; INX<br />&nbsp; &nbsp; &nbsp; &nbsp; CPX&nbsp; #$64<br />&nbsp; &nbsp; &nbsp; &nbsp; BNE&nbsp; L0003</div><br />which, besides being less than one-seventh as many bytes, has no subroutine calls to eat up even more time like the compiled C version did.<br /><br />Since the index value is not used inside the loop, we could further shorten the code by starting at 100 and counting down, to zero, to get the same number of loop iterations.  We'll use DEX, which like many other instructions, has an automatic, implied, compare-to-zero instruction built in, so we can omit the CPX #0:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; LDX&nbsp; #$64<br />L0003:&nbsp; DEX<br />&nbsp; &nbsp; &nbsp; &nbsp; BNE&nbsp; L0003</div><br />Clearly the assembly-language version will absolutely <em>fly</em> compared to the compiled C-language version.<br /><br />I'm sure a much better C compiler could be written for the '02.  Perhaps there is one and I'm just not aware of it.  The above is from the middle of my web page, &quot;<a href="http://wilsonminesco.com/AssyDefense/" class="postlink">Assembly Language:  Still Relevant Today</a>.&quot;  An experienced programmer came across it last week and emailed me saying he was working on a 68020 around 1990 and they were looking for the C compiler for it that put out the fastest-performing code.  One thing they tried was an empty count-to-10,000 loop, and timed it.  Zero.  What?  So they tried 10,000,000 instead.  Still zero.  It turned out that the compiler was smart enough to see that the loop did nothing, so it compiled no code for it.  Unless the desired delay is super short, a loop is usually a very poor way to get it; but if a programmer knew what the compiler should put out, he might have a very good reason for the empty &quot;for&quot; loop, and wouldn't want the compiler to delete it.<br /><br />I remember reading, back then, about compilers trying to optimize things to make their compiler look better than the competition's.  They watched for various things you might want to do, particularly well known benchmarks and tests, and replaced them with the hand-optimized version strenuously written by the few programmers who knew the processor a lot better than the customer would.  My reader commented that that was &quot;a bit naughty.&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Apr 20, 2017 7:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Development Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Garth wrote:</div><div class="quotecontent">The popular CC65 C compiler, which admittedly is not optimizing, produces the following 6502 code from it.  The comments were added by hand, not by the compiler.</div><br />If you add -O to the command line it will do a <em>bit</em> better job than that.<br /><br />You can to still better with a few very minor changes to your code:<br /><ul><li>use an unsigned char instead of an int (<em>always</em> a good idea to use 8-bit unsigned when you can)</li><li>use a static variable instead of a stack based variable (cc65's simulated stack is slow)</li><li>use ++i instead of i++ (i++ has a delayed side effect that carries a slight penalty)</li><li>use -O flag in command line (yes it actually has an optimization flag, and it helps)</li></ul><br />The result:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// static unsigned char i;<br />// for (i=0; i&lt;100; ++i);<br /><br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;L30D1<br />L3767:&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;L30D1<br />&nbsp; &nbsp;cmp&nbsp; &nbsp; &nbsp;#$64<br />&nbsp; &nbsp;bcs&nbsp; &nbsp; &nbsp;L30D3<br />&nbsp; &nbsp;inc&nbsp; &nbsp; &nbsp;L30D1<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;L3767<br />L30D3:&nbsp; &nbsp;rts</div><br /><br />So, yes your naive C code compiled to something pretty horrible, but with a few hints to the compiler it gets a <em>lot</em> better. It's never going to get as good as assembly, but it's usually not that hard to get it to behave a lot better than what you were looking at.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Fri Apr 21, 2017 3:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Development Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Garth, you necro 5-year old topics regularly...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Fri Apr 21, 2017 6:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Development Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What I keep wondering is why does cc65 produce such inefficient code without the O flag. Is there any reason whatsoever that somebody might want to compile without that flag with cc65?<br /><br />(It's not like some compilers where optimizing produces weird hard to understand assembly... It seems the opposite here, the unoptimized is weird and hard to make sense of, and the optimized produces normal looking code)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Fri Apr 21, 2017 7:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Development Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">calima wrote:</div><div class="quotecontent">Garth, you necro 5-year old topics regularly...</div><br />Nothing wrong with that IMO, so long as he's adding useful things to the discussion. Anyway, we necro 30+ year old consoles <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> <br /><br /><div class="quotetitle">gauauu wrote:</div><div class="quotecontent">What I keep wondering is why does cc65 produce such inefficient code without the O flag. Is there any reason whatsoever that somebody might want to compile without that flag with cc65?<br /><br />(It's not like some compilers where optimizing produces weird hard to understand assembly... It seems the opposite here, the unoptimized is weird and hard to make sense of, and the optimized produces normal looking code)</div><br />From the perspective of the compiler writer, I imagine the transformation without &quot;-O&quot; is more straightforward and thus less likely to be buggy. If there's an issue with some generated code, it's helpful to know whether the problem is in your optimizer or somewhere earlier in the compilation chain.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Apr 21, 2017 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Development Languages</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I think that's it. With CC65 there's no reason not to use -O, really, unless you're trying to debug the <em>compiler</em>.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>