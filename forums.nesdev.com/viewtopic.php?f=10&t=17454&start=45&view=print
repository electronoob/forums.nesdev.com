<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hello, new here, and need best recommandations.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hello, new here, and need best recommandations.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17454">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17454</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Tue Jun 26, 2018 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Verrryyy much post and I'm confused easily, when I just want to know if I did the examples of A X Y register right. <br /><br />But, what is the complete abilities or restrictions differs of A X Y [and other 2 registers?]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Jun 26, 2018 10:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A, X, and Y can all hold a single value in the range of 0 to 255. (Edit: 128 to 255 can optionally be interpreted as -128 to -1.) They can all load their value from and store their value to a specific location in memory. <br /><br />A value in A can be manipulated in many ways X and Y can't be. (Addition and subtraction of any value, division and multiplication by 2 and other &quot;bitwise operations&quot;.) If you wanted to do those things to a value in X or Y, you'd have to transfer them to A first, manipulate them, then transfer them back.<br /><br />You can add and subtract exactly 1 from the value in X or Y. (A allows for adding and subtracting of any value.)<br /><br />A also has more power to load and store its value to neighbors of a specific location in memory. If you're familiar with arrays, the value in X and Y can be used as an offset to access a specific array element. Y specifically allows a convenient way to access an array through a pointer. If that doesn't mean anything to you right now, that's totally fine.<br /><br />The other registers are <br />1. Program Counter, which a programmer doesn't really work with directly. (JMP directly changes it, I guess...)<br />2. Stack Pointer, which until one learns a bit more is touched once at the start of the program and then not worked with directly.<br />3. Processor Status Flags. These are individual bits that are updated after each instruction is run. You can &quot;branch&quot; conditionally based on whether individual bits are true are false, which is basically how &quot;if statements&quot; can be constructed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Jun 27, 2018 2:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">Verrryyy much post and I'm confused easily, when I just want to know if I did the examples of A X Y register right.</div><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum $0000 ;declare names for variables starting at beginning of the zeropage (location $0000)<br />&nbsp; BED .dsb 1 ;BED is now at location $0000<br />&nbsp; LAMP .dsb 1 ;LAMP is now at location $0001<br />.ende ;ends this variable declaration section<br /><br />...<br /><br />ROOM:<br />lda #100 ;yes, this loads the A register with #100 (A = #100)<br />sta BED ;$0000 = #100<br /><br />lda #10<br />sta LAMP ; $0001 = #10<br /><br />rts ;ends function ROOM</div><br /><br />...<br /><br />I don't have time to use your second part but for the most part it looked ok to me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>Sorry DocWaluigean, too much post from me. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><br />edited once to add some relevant code in my quote.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Wed Jun 27, 2018 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">Verrryyy much post and I'm confused easily, when I just want to know if I did the examples of A X Y register right.</div><br /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum $0000 ;declare names for variables starting at beginning of the zeropage (location $0000)<br />&nbsp; BED .dsb 1 ;BED is now at location $0000<br />&nbsp; LAMP .dsb 1 ;LAMP is now at location $0001<br />.ende ;ends this variable declaration section<br /><br />...<br /><br />ROOM:<br />lda #100 ;yes, this loads the A register with #100 (A = #100)<br />sta BED ;$0000 = #100<br /><br />lda #10<br />sta LAMP ; $0001 = #10<br /><br />rts ;ends function ROOM</div><br /><br />...<br /><br />I don't have time to use your second part but for the most part it looked ok to me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>Sorry DocWaluigean, too much post from me. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><br />edited once to add some relevant code in my quote.</div><br /><br />It's alright! I appreciate it though. <br /><br />I'm going to see something else about it, I'm going toward Week 4 now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sat Jun 30, 2018 8:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, I'm still on Week 4 because I just got NES Classic Editions, and I'm loving it so much. The fact I got Mario Adventure from DahrkDaiz [I wish xhe can tutor me xer style of 6502 programming] made me so happy, I didn't read any at all, just play play play.<br /><br />Right now, I'm burned out from playing it, and I'm worried if that will affect my concentrations in trying to learn to make NES games. Anyone have tips?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sat Aug 11, 2018 9:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">Ok, I'm still on Week 4 because I just got NES Classic Editions, and I'm loving it so much. The fact I got Mario Adventure from DahrkDaiz [I wish xhe can tutor me xer style of 6502 programming] made me so happy, I didn't read any at all, just play play play.<br /><br />Right now, I'm burned out from playing it, and I'm worried if that will affect my concentrations in trying to learn to make NES games. Anyone have tips?</div><br /><br />After months of no responses of motivations here, I got it back as I saw the NESMaker and the RIKI Japanese home-brew game; it helps me get back in now...<br /><br />Going to have to re-read the Nerdy Nights again, and this thread again...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sat Aug 11, 2018 10:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Onto Night 3; This is going to be ridiculous because I may ask so many questions. I will try this one from background.asm in the Nerdy Nights Week 3.<br /><br /><span style="text-decoration: underline">Remember - the only dumb question is the question that remains unasked.</span><br /><br />---<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br /></div><br /><br />-So the iNES header is an information. But I'm assuming this ines only works in the ASM6. <br /><br />-Is there a limit to numbers for each codes beside inesmap? I'm sure you can go up to inesmap 255 something with Namco mapper, Konami mapper, Sunsoft mapper, etc.<br /><br />-So PRG code is &quot;assign scripts to sprites, by limit&quot;? and CHR data &quot;the amount of sprite and tile banks&quot;? ineschr 1 = 1 bank of tiles/sprites? can it go up to over 128?<br /><br />-Obviously a good idea to ignore for now, but is there importances for inesmir 1?<br /><br />---<br /><br />Universal question: <span style="text-decoration: underline">At which part is needed to show the entire gray screen? Up to ines? need bank 0, 1, and 2 to make a correct blank NES? </span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sat Aug 11, 2018 10:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.bank 0<br />&nbsp; .org $C000 <br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0200, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0300, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br />&nbsp; &nbsp;<br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br /><br />&nbsp; LDA #%10000000&nbsp; &nbsp;;intensify blues<br />&nbsp; STA $2001<br /><br />Forever:<br />&nbsp; JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop<br />&nbsp; <br />&nbsp;<br /><br />NMI:<br />&nbsp; RTI<br /></div><br /><br /><br /><br />-----<br /><br />-Obviously the $C000 is in the cartridge ROM section, which is fine. But why is it in $C000 instead of $8000, which is more organize than in the middle of those code? I know in some sections, the address represent something for the NES &quot;lever and buttons&quot;, like $3F10 - $3F1F is the address section for color palettes. But for the Cartridge ROM, why isn't there an overview for the entire Address beside PPU? <br /><br />-I been looking further before reading back on Nerdy Nights, <br /> LDX #$40<br />  STX $4017    ; disable APU frame IRQ<br />  LDX #$FF<br />Why is it arranged like this instead &quot;LDX, LDX, STX&quot;? Obviously high and low power style, but why? For new people, it could mess up a code like this... I don't want to be judgeful, but coding is one of the hardest things I ever got to learn in my life.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DocWaluigean</b> [ Sat Aug 11, 2018 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 1<br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; <br />&nbsp; <br />;;;;;;;;;;;;;;&nbsp; <br />&nbsp; <br />&nbsp; <br />&nbsp; .bank 2<br />&nbsp; .org $0000<br />&nbsp; .incbin &quot;mario.chr&quot;&nbsp; &nbsp;;includes 8KB graphics file from SMB1 </div><br /><br />---<br /><br />Because of &quot;peer pressure&quot; situations, I can't even ask any questions about .dw, .nmi, and other situations. <br /><br />-------<br /><br />I know you guys literally sick and tired of hearing this about anyone like me requesting for a private tutor, but there's people like me who has capacities to do something very complex, like 3D modelling, ideas, free-writing storytellings, etc. But can't understand forms of writings and tutorials that keeps backing away from learning NES assembly languages. <br /><br />As for people who said, &quot;please do some research on your own now.&quot;, there's people like me who literally tried to comprehend writings from Bunnyboy, Easy6502, etc. that literally needs help, whose real serious in learning about this stuff. I got lucky on understanding what binary, HEX, and decimals do, and nearly all forms of Codes Layout, but further readings just threw me off with words that I can't put two and two together. I'm even willing to make a tutorial that's more comprehend-able than BunnyBoy if I understand everything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 11, 2018 11:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">-So the iNES header is an information. But I'm assuming this ines only works in the ASM6.</div><br />The .ines*** directives only exist in NESASM. In most other assemblers people just create the header using .db/.byte statements. It's also possible to create macros that simulate NESASM's directives.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-Is there a limit to numbers for each codes beside inesmap? I'm sure you can go up to inesmap 255 something with Namco mapper, Konami mapper, Sunsoft mapper, etc.</div><br />Mapper numbers are normally assigned by whoever discovers/creates them. The wiki has a list of the most popular mappers: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/List_of_mappers">https://wiki.nesdev.com/w/index.php/List_of_mappers</a><!-- m --><br /><br />The limits for the other fields will depend on the mapper. Each mapper supports different amounts of PRG and CHR stand use different techniques for bankswitching them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-So PRG code is &quot;assign scripts to sprites, by limit&quot;? </div><br />The PRG field is the amount of PRoGram-ROM, measured in units of 16KB. This is the memory used to hold the game program, the code that the CPU runs to make stuff happen. All the game logic is here, along with all the data used by the game (e.g. levels, music, etc.).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and CHR data &quot;the amount of sprite and tile banks&quot;?</div><br />Yes, that's the amount of CHaRacter-ROM, measured in units of 8KB (512 tiles).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ineschr 1 = 1 bank of tiles/sprites? can it go up to over 128?</div><br />Don't get too hung up on the term &quot;bank&quot; here, since the size of a bank varies from mapper to mapper. CHR-ROM banks can be any of 8KB, 4KB, 2KB or 1KB, but the INES header always measures the total amount in multiples of 8KB, regardless of the mapper.<br /><br />How high you can go will depend on the mapper. 128 x 8KB would be 1MB, and not many mappers support that. Another thing to keep in mind is that even though the total amount of tiles can be significantly high, you can't use any tile you want whenever you want, because the NES still only sees a small number of them at a time. The way in which you select which tiles will be usable at any given time will depend on the mapper.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-Obviously a good idea to ignore for now, but is there importances for inesmir 1?</div><br />The NES has a virtual background space of 4 screens arranged in a 2x2 grid, but it only has enough memory to hold 2 screens, which means that 2 of those 4 will have to be repeats. The mirroring setting selects whether the screens will repeat horizontally or vertically.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Universal question: <span style="text-decoration: underline">At which part is needed to show the entire gray screen? Up to ines?</div><br />I don't understand the question. What do you mean by &quot;entire gray screen&quot;?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">need bank 0, 1, and 2 to make a correct blank NES? </span></div><br />Memory chips are only manufacred in sizes that are powers of 2 (e.g. 8KB, 16KB, 32KB, 64KB, 128KB, etc.), so you need to have a number of banks that adds up to a power of 2 in order to represent a valid memory chip, even if they are empty.<br /><br />Do note that NESASM's .bank directive creates banks that are 8KB in size, while the INES header counts banks that are 16KB. So in this case, NESASM banks 0 and 1 would be the one 16KB bank defined via .inesprg, and bank 2 is the one 8KB bank defined via .ineschr.<br /><br />Like I said, don't focus too much on the work &quot;bank&quot; as used by NESASM and the INES header, because the actual size of the banks is defined by the bankswitching scheme of the mapper you use. Just think of INES banks as units for counting, and NESASM's banks as blocks of 8KB, which won't necessarily be manipulated individually.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Aug 11, 2018 11:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ninja'd by tokumaru, but the information presented is slightly different, so sure, I'll still post. <br /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br /></div><br /><br />-So the iNES header is an information. But I'm assuming this ines only works in the ASM6.<br /></div><br />On an actual NES catridge, hardware dictates behavior. An NES ROM mostly contains the software. Because there are so many different cartridge types with different hardware, an NES ROM also has a 16 byte &quot;header&quot; that describes the hardware so emulators can properly run it. <br /><br />The .ines commands are for creating this header. They only work with NESASM, not ASM6. In ASM6 you have to build the header manually. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-Is there a limit to numbers for each codes beside inesmap? I'm sure you can go up to inesmap 255 something with Namco mapper, Konami mapper, Sunsoft mapper, etc.</div><br />The limit is different for every cartridge type. I don't know of one offhand that allows 255. That's just shy of 4 Megabytes! (16 kilobytes * 255)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-So PRG code is &quot;assign scripts to sprites, by limit&quot;? and CHR data &quot;the amount of sprite and tile banks&quot;? ineschr 1 = 1 bank of tiles/sprites? can it go up to over 128?</div><br />PRG is just bytes of data the CPU can easily access. You can store code there, levels/text/music/other data there, or even graphics there. (Assuming you are using CHR RAM.)<br /><br />CHR is bytes of data the PPU can easily access. The amount of sprite and tile banks is a good way to think about it.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">-Obviously a good idea to ignore for now, but is there importances for inesmir 1?</div><br />NES has 4 screens worth of &quot;tilemap&quot; laid out in a 2 by 2 square. (That essentially repeats forever.) However, there can only be 2 unique screens usually. The other two are copies or &quot;mirrors&quot;.<br /><br />Super Mario Bros. has the top and bottom rows of the 2by2 square &quot;mirrored&quot; because it scrolls horizontally. This allows it to easily update the level offscreen to the right of the scroll edge.<br /><br />Ice Climber has the left and right columns of the 2 by 2 square &quot;mirrored&quot; because it scrolls vertically. This allows it to easily update the level offscreen above the top of the scroll edge.<br /><br />.inesmir 0 denotes Ice Climber Style.<br />.inesmir 1 denotes Super Mario Bros. style.<br /><br />Some cartridge types effectively ignore this.<br /><br />---<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Universal question: <span style="text-decoration: underline">At which part is needed to show the entire gray screen? Up to ines? need bank 0, 1, and 2 to make a correct blank NES? </span></div><br /><br />You need at least two NESASM banks to create a totally blank ROM, but you will probably want three, yes. <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.inesprg 1<br />&nbsp; &nbsp;.ineschr 1<br />&nbsp; &nbsp;.inesmir 0<br />&nbsp; &nbsp;.inesmap 0<br /><br />&nbsp; &nbsp;.code<br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $C000<br /><br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.bank 1<br />&nbsp; &nbsp;.org $E000 <br /><br />&nbsp; &nbsp;<br /><br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw 0;This is where you'd put the label where the CPU should jump to when an NMI happens<br />&nbsp; &nbsp;.dw 0;This is where you'd put the label where the CPU should jump to when the console is reset<br />&nbsp; &nbsp;.dw 0;This is where you'd put the label where the CPU should jump to when an IRW happens<br /><br />&nbsp; &nbsp;.bank 2<br />&nbsp; &nbsp;.org $0000<br /></div><br />Should give you an entirely blank ROM. .org tells the assembler where in memory the bytes that follow are meant to go. $FFFA is where it expects certain addresses. This is how the CPU knows where the game starts on reset, for example. You don't technically <em>need</em> that for a blank ROM, but you may as well have it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 11, 2018 11:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">But why is it in $C000 instead of $8000</div><br />Because this is probably a 16KB program, and the NES CPU can see 32KB of code, so the same code appears twice in that space. This means that either $8000 or $C000 will work fine, you can use whichever you like best, because in the end, THE CODE WILL APPEAR AT BOTH ADDRESSES. Most people like to think of the program as being aligned to the upper end of the address space though, because the CPU vectors are traditionally accessed at $FFFA-$FFFF, the very end of the ROM area. But like I said, you can use $8000 as the origin for your 16KB program if you prefer, because the vectors will appear at both $BFFA-$BFFF and $FFFA-$FFFF, where the CPU will actually look for them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But for the Cartridge ROM, why isn't there an overview for the entire Address beside PPU?</div><br />Here's the memory map for the CPU: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/CPU_memory_map">https://wiki.nesdev.com/w/index.php/CPU_memory_map</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">  LDX #$40<br />  STX $4017    ; disable APU frame IRQ<br />  LDX #$FF<br />Why is it arranged like this instead &quot;LDX, LDX, STX&quot;?</div><br />Because programming is basically moving numbers around and doing math operations on them. For moving data around, we need to use the CPU registers (A, X, Y). We need to send a number/code to the APU, telling it to disable frame IRQs, so we put this number in a register (LDX), and then store that register (STX) in the appropriate APU port. That part is done, we can now use X for other stuff, so we put the next value we'll use in it, $FF, that we'll use to initialize the stack pointer. This is just moving data around. If you mess up the order, you'll end up putting the wrong values in the wrong places.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> high and low power style</div><br />What is &quot;high and low power style&quot;?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 11, 2018 11:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DocWaluigean wrote:</div><div class="quotecontent">I'm even willing to make a tutorial that's more comprehend-able than BunnyBoy if I understand everything.</div><br />You'd be surprised by how many people have said that, but either &quot;forgot&quot; or just gave up on NES development.<br /><br />It's not easy to word this stuff in simpler terms, because this really isn't a simple subject. You can't replace terms like registers, mirroring, addressing, etc. by simpler ones because they describe unique things and behaviors that don't necessarily have counterparts that are easier to comprehend. We can EXPLAIN all the terms and behaviors individually so that when you see them at a later time they won't sound like alien concepts, but programming knowledge is something you build progressively, you have to understand one layer before moving on to the next, you can't skip to the topmost layer and expect things to be worded in a way that circumvents everything established in the layers below.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Aug 11, 2018 11:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tokumaru covered the other post WAY more succinctly than what I was working on.  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because of &quot;peer pressure&quot; situations, I can't even ask any questions about .dw, .nmi, and other situations.</div><br />I think both Tokumaru and I covered this a bit. <br /><br />.dw will add a 16byte number you give it to the ROM. <br />.db will add an 8 bit number you give it to the ROM. <br /><br />I had mentioned that the CPU looks for addresses starting at $FFFA to know where to start executing code in certain situations. There's no further explanation beyond, &quot;That's how the CPU was designed.&quot; It has to start <em>some</em> known place or software couldn't be run reliably on it. You can use .dw with a label. So if your code looks like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .org $E000<br />reset:<br />&nbsp; jmp reset<br /><br />NMI:<br />&nbsp; rti<br />IRQ:<br />&nbsp; rti<br /><br />&nbsp; .org $FFFA<br />&nbsp; .dw NMI<br />&nbsp; .dw reset<br />&nbsp; .dw IRQ<br /></div><br />When you turn the NES on, it will start executing code at $E000. (The reset label.) The NMI (on NES) can happen once every 60th of a second if you have it enabled. This is one thing that allows games on NES to run at a consistent speed.<br /><br />When a frame is about to start (every 60th of a second) the CPU will stop what it was doing, and go to the address (label) at $FFFA. The RTI will send it back to what it was doing before this happened. The NMI is an &quot;interrupt&quot; (Non Maskable Interrupt). Precisely because it interrupts whatever the CPU was doing and jumps somewhere else. And again, the RTI allows it to return to what it was doing before the interrupt happened.<br /><br />If some of that doesn't make sense, that's okay for now. You mentioned easy6502. Is there some part you're stuck on in that tutorial? If so, feel free to ask about it. 6502 itself is way easier than the NES hardware, so if you can get working there you might have more progress. There's less to do to get visual output that shows the code is working on the easy6502 website.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Aug 12, 2018 12:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hello, new here, and need best recommandations.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">6502 itself is way easier than the NES hardware, so if you can get working there you might have more progress.</div><br />I fully agree.<br /><br />Back when I started, I only knew how to program in QBASIC, and assembly didn't make any sense to me. Learning about hardware architecture and the NES registers at the same time I was learning assembly ended up being way too confusing, and I actually did give up for a few years.<br /><br />On my second try, I put the NES aside and studied only 6502 assembly, using a simulator, and I didn't move forward until I understood what every instruction did and I was able to code actual algorithms (multiplication, division, sorting, etc.) in that language. Only then did I try to make an NES ROM again.<br /><br />You see, talking to the NES is like other kinds of communication. Say you are the manager in a company that makes boxes. You must know how boxes are made, so you can tell the workers what they have to do, and you must speak the same language as the workers, so you can effectively communicate the instructions to them. If you don't speak the same language, and you don't know how to make boxes, it will be extra hard to end up with something that resembles a box in the end.<br /><br />So yeah, learn assembly first of you can, without the specificities of the NES getting in the way. Then, when you know HOW to communicate, focus on learning WHAT to say to the NES so it does what you want.<br /><br />And don't forget that in order to make games, you not only need to know the language and the architecture of the environment you're coding for, but also the general concepts of game programming, which are universal to any programming language, such as animation, object management, physics, collision, and so on.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>