<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Bounding Boxes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Bounding Boxes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3743">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3743</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Nov 28, 2007 9:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Bounding Boxes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm working on a sub-engine for handling sprite objects, and of course, I've come up to collision, and I'm kind of stuck. I know what I'm trying to do, I just need to think of a way that's much less sloppy and a lot faster. I'm constructing bounding boxes around each of the meta sprites, and I am going to keep track of the X/Y coordinates of each corner in RAM. The idea is to check if any of the bounding boxes are overlapping. 
<br />
<br />Right now, this is only for sprite to sprite collision. Sprite to BG collision detection is a lot easier, since I will be having a copy of what's on screen in RAM. I'll also be handling every object one at a time, so it's not too complicated for sprite to BG. I looked at the threads about collision here, and I came across a really good idea. Someone mentioned organizing coordinates from low to high to easily eliminate sprites that aren't colliding with whatever you're comparing it to. While this is a good idea, it seems that this is still an extremely long process.
<br />
<br />It would take a really long time to compare every coordinate on one bounding box with every coordinate on another. The bad part about that is that's only for 2 objects. The main reason I think this is so complicated compared to BG collision is that I already have a copy of what metatiles are on screen in RAM. Those will ALWAYS be in a fixed 16x16 pixel location. If you check whether or not sprites are in the same 16x16 pixel feild, you can end up with collisions like Bugs Bunny's Birthday Blowout, where you hit the enemy and they're about 16 pixels away from you. So you pretty much have to do precise comparisons.
<br />
<br />I feel like if I do all these comparisons, I'm wasting so much valuable time. I also feel like I'm going about doing things in a really sloppy way. Does anyone have any ideas on checking bounding box overlapping without wasting so much time? I'll be brainstorming ideas, but I just wanted to know what everyone else thinks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 28, 2007 9:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For one thing, you could keep a list of active sprites insertion-sorted by X or Y coordinate. Then you can compare each sprite only with other sprites near it in that dimension.
<br />
<br />How many objects per screen are you talking about?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 28, 2007 10:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It really depends on the type of the game too... in platformers, such as my Sonic engine, the objects only need to collide with the player, and never with each other. This sure makes things easier because each enemy/object will check if it collided with the player, and by the time all the objects have been processed (just once) everything is done. Most enemies/objects don't even need to collide with the background, and when they do it's just by a single central pixel or so.
<br />
<br />I imagine that other kinds of games will need to check for object vs. object collisions, and that could be very slow, depending on the amount of objects loaded at the time.
<br />
<br />I suggest you think about it and decide what types of collisions must be checked for. I doubt an object will collide with every type of object, so you could have a few flags assigned to each type of object, and the object being processed will scan the list of active objects, checking for collisions only with the relevant types of objects.
<br />
<br />If you are making a tiled RPG, where each character occupies a block and no one else can enter it, you'd have to be aware of everyone's positions. But this could be solved in a simpler way than with bounding boxes: a simple array could indicate if a square is used or not, and no character can enter an occupied square. Most RPG's only need really simple collision detection, because of their grid nature.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Nov 29, 2007 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm working on an action game right now, pretty much exactly like Castlevania: Symphony of the Night. But the objects just have to check if they're colliding with the player, or the weapon. So I need to check for collision for two objects, basically. By organizing their coordinates from low to high, it shouldn't take THAT long, but I was just thinking maybe it could take less. But yeah, if I had EVERY object collide with each other, it would be a nightmare.
<br />
<br />EDIT:
<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"> How many objects per screen are you talking about?</div>
<br />
<br />There are at most 15 objects on screen. 2 of them are the player and the weapon, 5 of them are enemies, and the rest are used for items/hearts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 29, 2007 8:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">But the objects just have to check if they're colliding with the player, or the weapon.</div>
<br />Then do it like I do... Since there is only one player and one weapon, the enemies should check for these collisions. In my game, there is a list of active objects, each one has a code and whatever other information they need that fits in the 20 bytes of RAM I give each one of them. Every frame, I'll scan this list, reading the codes of the objects and using the code as an index into a table that has the addresses of the routines of each object. Only when this code is executed the enemy itself will check for the collisions that are important to it.
<br />
<br />In your case, enemies will look at the player and at the weapon. You can even have routines to do this... you could pass the coordinates of the bounding box of the enemy as parameters to a routine that will verify if that box overlaps with the player's, and will return a flag as a result. You can also have a routine that will do the same, but with the weapon. The weapon routine can even check what's the current weapon (supposing it changes along the game) and take into account the different kinds... it would be able to handle even projectiles and all...
<br />
<br />This way you wouldn't need to sort anything... and each object will only call the collision routines if they need to.
<br />
<br />Bounding box collision detection can be quite fast... it takes more time to calculate the coordinates of the boxes than checking if they overlap. In fact, the best kind of bounding box collision detection I've seen checks for all the cases where a collision cannot happen, and if they all fail, the collision happened. This is good, because most of the time there is no collision happening.
<br />
<br />And you can optimize it according to the type of your game. If your game is a side-scroller where the player moves from left to right, the first thing you should check in the collision detection routine is if the left edge of the enemy is larger than the right edge of the player. Most of the time, this first step alone will indicate that a collision cannot happen. This already eliminates one of the 4 things you have to check for in order to detect collision:
<br />
<br />1. Is the left edge of the enemy larger than the right edge of the player? (if yes, the enemy is to the right of the player)
<br />2. Is the right edge of the enemy smaller than the left edge of the player? (if yes, the enemy is to the left of the player)
<br />3. Is the bottom edge of the enemy smaller than the top edge of the player? (if yes, the enemy is above the player)
<br />4. Is the top edge of the enemy larger than the bottom edge of the player? (if yes, the enemy is below the player)
<br />
<br />If any of the above is true, there was no collision. If they are all false, a collision happened. Just place the least likely conditions to happen at the top of the routine, like I said before, and you'll be optimizing it for you type of game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Nov 29, 2007 10:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh! I was thinking about it backwards, where I would check for collision from the player. But checking with enemies is A LOT better. And also, in the starting post of this thread, I mentioned that I saw someone check for no collision instead of checking for collision. I also thought this was a great idea. So yeah, I think that'll about do it for now. Thanks guys!
<br />
<br />EDIT: I hesitate when I say I'll only have two objects that need checking. The player will be casting magic as well as attacking. Also, there will be subweapons, so there could possibly be around 5 objects to check instead of 2. This is where things get a little more complicated. I think I can handle it though.
<br />
<br />EDIT 2: I had a typo. I meant to say I WAS thinking about it backwards, not I WASN'T.
<br />
<br />And besides. Would this be a good routine to go by?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;lda EnemyLeftEdge<br />&nbsp;cmp PlayerRightEdge<br />&nbsp;bcs NoCollision&nbsp; &nbsp; &nbsp; &nbsp;;If the left edge of the enemy is farther than the Player's Right edge, there is could be no collision.<br />&nbsp;lda EnemyRightEdge<br />&nbsp;cmp PlayerLeftEdge<br />&nbsp;bcc NoCollision&nbsp; &nbsp; &nbsp; &nbsp;;If the Player's Left edge is beyond the enemy's right, there's no way there could be a collision.<br />&nbsp;lda EnemyTopEdge<br />&nbsp;cmp PlayerBottomEdge<br />&nbsp;bcs NoCollision&nbsp; &nbsp; &nbsp; &nbsp;;If the Player's Bottom Border is above the top of the enemy, there is no way for collision.<br />&nbsp;lda EnemyBottomEdge<br />&nbsp;cmp PlayerTopEdge<br />&nbsp;bcc NoCollision&nbsp; &nbsp; &nbsp; &nbsp;;If the player's Top edge is below &#40;Greater than&#41; the enemy's bottom edge, there can be no collision.<br />&nbsp;lda EnemyStatus<br />&nbsp;ora #CollidedWithPlayer<br />&nbsp;sta EnemyStatus<br />&nbsp;rts<br />NoCollision:<br />&nbsp;lda EnemyStatus<br />&nbsp;and #NoCollisionWithPlayer&nbsp; &nbsp;;NoCollisionWithPlayer is the opposite of CollidedWithPlayer &#40;CollidedWithPlayer EOR #$FF&#41;<br />&nbsp;sta EnemyStatus<br />&nbsp;rts<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 30, 2007 12:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the idea is pretty much it. I don't know if you can get away with 8-bit math though... it's up to your engine and how you handle positions, so you're the one to decide, but keep in mind that you might have problems with objects near/past the edges of the screen. I try to use the actual coordinates of the objects within the level for any interactions among them, not their screen coordinates, as these are not very reliable.
<br />
<br />I think it's possible for each enemy to check for collisions against 3 to 5 objects... specially if you keep the order of the tests optimized. If possible, make some of the collidable objects be just a single pixel, instead of a box (I mean just for collisions, the sprites can have many pixels, of course). This should be possible with things small and fast, like bullets. Single pixels are faster to check because you don't have to calculate the 4 edges of the object, you just use that single point.
<br />
<br />Another thing I noticed is that you set a flag that's part of the enemy's status when it hits the player... sometimes you may actually want that, such as in games where the enemies step back after hurting the player, but you'll sure want to set a flag for the player too, so that it knows it was hurt.
<br />
<br />Another thing I'm thinking about right now is that you might not need a separate collision check for the weapon. If this weapon is something the player holds, you may get away with just expanding the player's collision box to include the weapon. If a hit was detected, you'd then check if the player and the enemy are facing each other, so you know the attack was successful, otherwise, the player was hit. This sure takes away some of the precision, if for example the enemies are able to duck so that the player's attacks do not hit them, this won't work.
<br />
<br />It might be simpler to just check if the player is attacking or not, and if so, test for a collision with the weapon. I guess you gotta test this and see what works best! =)
<br />
<br />EDIT: I just read how you'll distribute the active objects... if only 5 of them can be enemies, I don'tthink you'll have problems with the collision tests. The items can just check for collisions with the player, right? This will make things simpler too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Nov 30, 2007 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I could just make the player and the weapon one object, but that would set many limits. For instance, I couldn't have projectile weapons that way. I want to make the engine as flexible as possible.
<br />
<br />Also, I was thinking about what you said for 1 pixel collision points. I will definitely keep that in mind. However, I don't know if I can use this for too much. Perhaps hearts, which are 1 tile in size. But something like a sword would not be a very good idea. My default character now is going to be slashing with his sword (Not stabbing), so if I were to have somewhere close to the end of the sword be the collision point, the point might extend past the enemy if the enemy is really close, resulting in no collision when there should be one. Two objects would make this pretty much 100% reliable.
<br />
<br />The thing I'm worried most about is having too many objects on screen. I'll have to cut down on the hearts/items and make room for subweapons/magic. I haven't really started coding for this yet, I'm just getting the ideas together. I'm making all of these subengines seperately, and in the end, I'm going to combine them. Hopefully this won't be a disaster like my other projects (I tried making everything at once).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Nov 30, 2007 6:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I wrote a quick demo that is able to check for collisions with a fixed-size player object and variable-sized objects using only 25 clocks per object. This demo has 63 objects bouncing off the player object, using about 14 scanlines of time (the bar on the right shows how many are used for collision checking). Has NES ROM and asm source (nesasm, but easy enough to change to another assembler).
<br />
<br /><a href="http://www.slack.net/~ant/nes-hacks/nes_collisions.zip" class="postlink">nes_collisions.zip</a>
<br />
<br />At its core, the collision check usually only does one comparison per object. It checks the X axis first, since that is more likely to rule out a collision than the Y axis. I'll limit discussion to the X axis, since the Y axis is handled the same.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; Px = player x position<br />&nbsp; &nbsp; Pw = player width<br />&nbsp; &nbsp; Ex = enemy x position<br />&nbsp; &nbsp; Ew = enemy width</div><br />To see if there is any overlap, you only need to find whether Px falls between the range Ex-Pw to Ex+Ew, not including the end points:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Ex<br />---O#############O------<br />&nbsp; &nbsp;|--Pw--|--Ew--|</div><br />There is a way to quickly find whether a value is within the range 0...N-1, just do an unsigned compare with N, and if the value is &gt;= N, then it's not in that range. This example finds whether A is in the range 0...9:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; cmp #10<br />&nbsp; &nbsp; bcs out_of_range<br />in_range:<br />&nbsp; &nbsp; ; 0 &lt;= a &lt; 10<br />&nbsp; &nbsp; ; ...<br />out_of_range:</div><br />Since negative values are equivalent to large positive values, if we can somehow get the indicated values below when Px is at that position, we can do the range check with only one comparison:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Ex<br />---O#############O------<br />&nbsp; &nbsp;|--Pw--|--Ew--|<br />....0123456789ABC...</div><br />We can get this with Px+Pw-1-Ex. The value to compare with is Pw+Ew-1. The single comparison becomes (Px+Pw-1-Ex) &lt; (Pw+Ew-1). Most of this can be precalculated, as long as the player width never changes. When an enemy is created, Pw+Ew-1 can be calculated. Before the collision loop, Px+Pw-1 can be calculated, leaving only a subtraction of Ex and a comparison to the width expression:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda pw_ew_1<br />&nbsp; &nbsp; sec<br />&nbsp; &nbsp; sbc enemy_x,x<br />&nbsp; &nbsp; cmp enemy_w,x<br />&nbsp; &nbsp; bcc hit<br />no_hit:<br />&nbsp; &nbsp; ; next enemy<br /></div>
<br />The sec can be eliminated as well, by ensuring it is either always set or clear at that point, and adjusting pw_ew_1 as necessary (if carry is always clear, you need to add an extra 1 to pw_ew_1 before the loop).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jargon</b> [ Wed Dec 12, 2007 5:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My own personal best method to do bounding box collision:
<br />
<br />Sorry no 6502 version of mine. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />
<br />Elliptical/Ellipsoid method is on the way tho. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />btw both 2d and 3d for both Blitz Basic and C source return 1 for a collision and 0 if not.
<br />
<br />x,y,z is position in pixels.
<br />w,h,d is size in pixels.
<br />
<br />remember if your sprites are located via center point you need to subtract half with w,d,h from x,y,z
<br />
<br />you can subtract the right shift one bit each of w,d,h as needed in order to do this.
<br />
<br />also if your bounding region is smaller than the actual sprites or larger than them, then you need to set x,y,z as lowest value range contained in the region, with w,h,d set as the width, height, depth of the span of the region from lowest included pixel/voxel to highest included pixel/voxel.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br />//As follows is the Keal method for 2d box collision.<br />//Copyright 2007 12/12 Timothy Robert Keal<br />//Credit 'Timothy Robert Keal alias jargon' somewhere<br />//if you use this code or a derivative thereof.<br />*/<br /><br />;Blitz Basic Source<br />Function collide&#40;x,y,w,h,x2,y2,w2,h2&#41;<br />&nbsp; &nbsp;Local flag=0<br />&nbsp; &nbsp;If x&gt;=x2 And x&lt;x2+w2 Then flag=flag Or $1<br />&nbsp; &nbsp;If y&gt;=y2 And y&lt;y2+h2 Then flag=flag Or $2<br />&nbsp; &nbsp;If x2&gt;=x And x2&lt;x+w Then flag=flag Or $4<br />&nbsp; &nbsp;If y2&gt;=y And y2&lt;y+h Then flag=flag Or $8<br />&nbsp; &nbsp;flag=&#40;flag And $3&#41; Or &#40;flag Shr $2&#41;<br />&nbsp; &nbsp;flag=&#40;flag And $1&#41; And &#40;flag Shr $1&#41;<br />&nbsp; &nbsp;Return flag<br />End Function<br /><br />//C Source<br />char collide&#40;int x,int y,int w,int h,int x2,int y2,int w2,int h2&#41;&#123;<br />&nbsp; &nbsp;char flag=&#40;x&gt;=x2 And x&lt;x2+w2&#41;?0x1:0x0;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;y&gt;=y2 And y&lt;y2+h2&#41;?0x2:0x0&#41;;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;x2&gt;=x And x2&lt;x+w&#41;?0x4:0x0&#41;;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;y2&gt;=y And y2&lt;y+h&#41;?0x8:0x0&#41;;<br />&nbsp; &nbsp;flag=&#40;flag&amp;0x3&#41;|&#40;flag&gt;&gt;0x2&#41;;<br />&nbsp; &nbsp;return &#40;flag&amp;0x1&#41;&amp;&#40;flag&gt;&gt;0x1&#41;;<br />&#125;<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br />//As follows is the Keal method for 3d box collision.<br />//Copyright 2007 12/12 Timothy Robert Keal<br />//Credit 'Timothy Robert Keal alias jargon' somewhere<br />//if you use this code or a derivative thereof.<br />*/<br /><br />;Blitz Basic Source<br />Function collide&#40;x,y,z,w,h,d,x2,y2,z2,w2,h2,d2&#41;<br />&nbsp; &nbsp;Local flag=0<br />&nbsp; &nbsp;If x&gt;=x2 And x&lt;x2+w2 Then flag=flag Or $1<br />&nbsp; &nbsp;If y&gt;=y2 And y&lt;y2+h2 Then flag=flag Or $2<br />&nbsp; &nbsp;If z&gt;=z2 And z&lt;z2+d2 Then flag=flag Or $4<br />&nbsp; &nbsp;If x2&gt;=x And x2&lt;x+w Then flag=flag Or $8<br />&nbsp; &nbsp;If y2&gt;=y And y2&lt;y+h Then flag=flag Or $10<br />&nbsp; &nbsp;If z2&gt;=z And z2&lt;z+d Then flag=flag Or $20<br />&nbsp; &nbsp;flag=&#40;flag And $7&#41; Or &#40;flag Shr $3&#41;<br />&nbsp; &nbsp;flag=&#40;flag And $1&#41; And &#40;&#40;flag Shr $1&#41; And $1&#41; And &#40;flag Shr $2&#41;<br />&nbsp; &nbsp;Return flag<br />End Function<br /><br />//C Source<br />char collide&#40;int x,int y,int z,int w,int h,int d,int x2,int y2,int z2,int w2,int h2,int d2&#41;&#123;<br />&nbsp; &nbsp;char flag=&#40;x&gt;=x2 And x&lt;x2+w2&#41;?0x1:0x0;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;y&gt;=y2 And y&lt;y2+h2&#41;?0x2:0x0&#41;;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;z&gt;=z2 And z&lt;z2+d2&#41;?0x4:0x0&#41;;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;x2&gt;=x And x2&lt;x+w&#41;?0x8:0x0&#41;;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;y2&gt;=y And y2&lt;y+h&#41;?0x10:0x0&#41;;<br />&nbsp; &nbsp;flag=flag|&#40;&#40;z2&gt;=z And z2&lt;z+d&#41;?0x20:0x0&#41;;<br />&nbsp; &nbsp;flag=&#40;flag&amp;0x7&#41;|&#40;flag&gt;&gt;0x3&#41;;<br />&nbsp; &nbsp;return &#40;flag&amp;0x1&#41;&amp;&#40;&#40;flag&gt;&gt;0x1&#41;&amp;0x1&#41;&amp;&#40;flag&gt;&gt;0x2&#41;;<br />&#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jargon</b> [ Wed Dec 12, 2007 7:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Ellipses/Ellipsoids too..</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://mediaplague.com/projects/index.php?dev=jargon%202007&amp;prj=Keal%20Collision" class="postlink">MediaPlague :: Keal's Collision Methods</a>
<br />
<br />(btw if you haven't already i highly suggest setting JavaScript for mediaplague.com turned on in your browser's exceptions list)
<br />
<br />btw i ain't writing the C code for ellipses, it's too much work,
<br />
<br />i suggest using the normal bounding box method in the prior post first as first pass to cut down processing cycles for ellipsoidal collision.
<br />
<br />btw this will help for writing an all int version of the ellipse collision code for 6502:
<br />
<br /><a href="http://www.6502.org/source/integers/root.htm" class="postlink">6502.org :: Integers Root</a>
<br />
<br />(thank scanty for that 6502 integer square root url)

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>