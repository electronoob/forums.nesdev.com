<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - &quot;Mapper 1&quot; emulation &amp; extension</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">&quot;Mapper 1&quot; emulation &amp; extension</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7156">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7156</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Nov 17, 2010 5:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I agree it is kinda pointless but meh....whatever. It's not worth making. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />
<br />
<br />
<br />
<br />And yeah, more compression would be good. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 17, 2010 9:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">To me it seems like people here are afraid of compression or something... Rarely does anyone use anything beyond simple LZ or RLE. And a lot of people seem to think that you need lots of RAM in order to use compression, which is not true, since there are many ways to perform decompression "on the fly".</div><br />I think this has something to do with the fact that DEFLATE, an LZ77+Huffman family codec invented by Phil Katz that has since become one of the most widely used, uses a 32768-byte window. Even the version of LZSS used by the Allegro library and the GBA BIOS needs a 4096-byte window. I guess that in those cases where an LZ77-family codec with a 256-byte window would perform well, a game could freeze sprites during decompression and stick the window in the shadow-OAM buffer.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Maybe we could "wikify" the compression schemes we have personally researched</div>
<br />Great idea. I could polish up a toolkit out of the Golomb, exp-Golomb, and Canonical Huffman codes that I had been working on in the process of making that e-book reader. Golomb and exp-Golomb don't need a lot of memory to decode, and Canonical Huffman needs only a few tiny tables in ROM (one for each code length and one to translate ranked frequencies to entries), not a bunch of RAM like LZ77 family does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 17, 2010 9:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Even the version of LZSS used by the Allegro library and the GBA BIOS needs a 4096-byte window.</div>
<br />Do LZ77 and its relatives really need that much memory? AFAIK, the sliding window slides over the data that has already been decompressed, so you can read directly from the output area when copying strings. At least that's how the LZSS variants I coded for the NES work.
<br />
<br />I imagine that if you use another layer of compression (such as huffman), then you'd need more memory. Also, LZ78 and its relatives need a dedicated dictionary instead of a sliding window, so they also need more memory... But basic LZ77 by itself? I don't see why you'd need a lot of RAM besides the area you are decompressing to.
<br />
<br />My original comment was not that people think that compression schemes need a lot of work RAM, I meant that they think that a lot of RAM is necessary to hold the decompressed data. The general impression is that you can only compress level maps if you have 8KB of RAM to decompress the whole map at once, but this is not true, as there are many ways to decompress the data progressively, using small amounts of RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Nov 17, 2010 11:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not an expert of LZ-ish compression, but as far as I understand, it relies on the same strings of data to be present multiple times in a file to compress it. If you use a 256-byte window, the probability you have a string of the same data of a decent length is low (if the string is like 3 bytes and that you can compress it as a 2-byte reference, you don't gain MUCH from it). So I suspect you won't compress data very well in a randomly given case. I might be totally wrong, it probably depends on the kind of data, you can't know without trying.
<br />
<br />The problem is that in a NES game you don't want to compress a large file as a whole, but to access parts of this file at this time. Typically the case where you decode individual screens in a compressed map. This makes most info you find about compression on the net almost useless because they assume you have much more RAM at your disposal, and that you are compressing large chunks of data.
<br />Even the C64 has a ridiculous amount of RAM compared to the NES !
<br />
<br />It is however I guess possible to decode all the data from the whole "file" into a circular 256-byte buffer (overwriting history longer than 256 bytes ago), and stop decompressing when the part of it you want to acess (the screen) has just been decompressed. Needless to say, this will be slow, but it'll work. Then you'd probably want to shift data so that it starts at the start of your 256-byte cicrular buffer, or else it'll be needed to check for overflow each time you want to acess data in it for future use.
<br />
<br />For Huffman, its completely different. It relies on the fact some bytes are more probable than other to compress data. If that's not the case then you shouldn't even be considering huffman compression as it'll expand the data.
<br />
<br />However, if this is the case, all you'll need is a table, and some code to use it, which will take some ROM space but hopefully not too much. You don't have random acess to data, but it's possible for example to "stop" the compressed stream, and have it restart anywhere else without loosing efficiency of compression (at worst you'll loose 7 bits).
<br />So you could compress each map in a level or each sentence in a dialog separately, have pointers to each, but use the same table to decompress everything.
<br />You only need a buffer of the size of one map/one sentence to store the decompressed data. No need for a 256-byte circular buffer or anything.
<br />
<br />In this regard, it is more like RLE, and this is a huge advantage over LZ. No need to "redecompress everything from the start" every time.
<br />
<br />Apparently there also exists some sort of arithmetic coding that is an improvement of Huffman (also based on the probability stuff). As far I know it works on a theory with fractional numbers, I'd have to see an implementation of it in binary to judge how well it could perform on the NES, but it sounds like it could be quite an optimal algorithm.
<br />
<br />The "redecompress everyting from the start" and the 256-byte circular buffer on LZ compressions is probably the main problem, but if it compress well it's without a doubt worth implementing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 17, 2010 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Even the version of LZSS used by the Allegro library and the GBA BIOS needs a 4096-byte window.</div><br />Do LZ77 and its relatives really need that much memory? AFAIK, the sliding window slides over the data that has already been decompressed, so you can read directly from the output area when copying strings.</div><br />If the output area is VRAM, then reading from the output area can be done only during vertical or forced blanking, and use of audio channel 5 makes it occasionally skip a byte. Double-clock errors can even compound themselves if the erroneous data is itself referenced by a later run.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The general impression is that you can only compress level maps if you have 8KB of RAM to decompress the whole map at once, but this is not true, as there are many ways to decompress the data progressively, using small amounts of RAM.</div>
<br />Many of which invite destructibility tradeoffs, which an article about compression might have to mention.
<br />
<br />Arithmetic coding gives about a 5 percent improvement over Huffman. For a period of time, it was thought to be patented until someone discovered a "range coder" that predated IBM's "Q-coder" patent application. During this time, JPEG included both Huffman and arithmetic coding options, but this improvement wasn't considered to warrant paying royalties. In addition, bit-oriented methods such as Huffman have better random access and error recovery than arithmetic coding.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 17, 2010 12:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If the output area is VRAM, then reading from the output area can be done only during vertical or forced blanking</div>
<br />Well, the same goes for writing, which means that the need to buffer the data is a limitation of the system, not the compression scheme.
<br />
<br />But yeah, if you want to decompress tiles without turning rendering off you will need to buffer the data. This is not something I would recommend in a game with a lot of frame processing, it would be wasteful. If you do need to update tiles during gameplay, I suggest you keep them uncompressed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Wed Nov 17, 2010 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you were to take the SUROM superbank concept <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/UpToEleven" class="postlink">up to 11</a>, you'd only get 4 MiB because the lowest bit of CHR bank register is busy switching between the first and second banks of CHR RAM.<br /><br />It'd be possible to take it to 8 MiB, but then you could use only 4 KiB of the CHR RAM. But then even SNES and GBC games rarely exceeded 4 MiB.</div>
<br />
<br />Well I would figure you'd disconnect any control to the CHR-RAM from the MMC1 so it would appear as it does on a UNROM board. Then you'd have all 5bits free for PRG-ROM. 8MiB would be massive, and as you said even 4MiB would match late SNES games.
<br />
<br />But you see my point that you could just take the same idea of reusing the CHR register a bit further. You could use 16KB switching mode and duplicate the fixed bank into each 256K section so that you have 7680K +16K (fixed) of ROM space. More than most developers would have time to efficiently fill I think. Even if you don't take the one CHR line you said would need to be disconnected you could still get around 3584K + 16K out of MMC1.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 17, 2010 12:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If the output area is VRAM, then reading from the output area can be done only during vertical or forced blanking</div><br />Well, the same goes for writing, which means that the need to buffer the data is a limitation of the system, not the compression scheme.</div>
<br />The idea with a 256-byte window is to use the same buffer for LZ77 history and preparing a copy to VRAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Nov 17, 2010 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So overall the RAM memory requirement are :
<br />- RLE : Just a few pointers &amp; counters, memory to hold a portion decompressed data
<br />- Huffman : Just a few pointers &amp; counters, memory to hold a portion of decompressed data
<br />- LZ : A few pointers&amp;counters, A 256-byte (or larger) circular buffer (which includes memory to hold a portion of decompressed data)
<br />
<br />Random acess :
<br />- RLE : Can be simulated with pointers anywhere in the compressed stream
<br />- Huffman : Can be simulated with pointers anywhere in the compressed stream (at worst there is a 7-bit loss)
<br />- LZ : You need to start decompression from the very start to access data.
<br />
<br />ROM memory requirements (w/o code to handle decompression) :
<br />- RLE : Compressed stream, pointers to part of compressed data
<br />- LZ : Compressed stream, offset/lenght info for parts of compressed data
<br />- Huffman : Compressed steram, pointers to part of compressed data, lockup table for binary tree
<br />
<br />Anyone who knowns more about other algorithms is welcome.
<br />I'll probably port my huffman stuff to C and release it to the public so that it could be taken advantage off... the most algorithm we known and we try to implement on the NES, the best ! This make it more likely to compress data as efficiently as possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 17, 2010 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The idea with a 256-byte window is to use the same buffer for LZ77 history and preparing a copy to VRAM.</div>
<br />Yeah, I get that. But the only reason you need that window/buffer is because the NES won't let you write freely to VRAM, hence it's a limitation of the console, not the compression scheme.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Nov 17, 2010 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let's go split the Data Compression discussion out of this thread.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 18, 2010 5:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was thinking of splitting it <a href="http://nesdev.com/bbs/viewtopic.php?p=70086#70086" class="postlink">here</a>, but I found too many posts that talked about both the compression and other space-related aspects of a Pokemon clone. Feel free to PM me the exact split point(s).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Nov 18, 2010 7:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have implemented the compression algorithms found on that page.  I also implemented another filter, where it also uses the Top-Left pixel in addition to the top and left pixels.
<br />
<br />I also made a major change, when doing RLE on the prediction images, the value 0 appears far more often than any other, which makes sense because these low numbers come from sort order on how popular certain patterns are.  So I boosted 0 values, encoding them in just 1 bit.  In 2bpp mode, a value of 1 is second place, so it gets 2 bits.  Values 2 and 3 get 3 bits.
<br />I am not using this scheme on the regular RLE that is run on the original image, just the prediction images which have more 0 and 1 pixels.
<br />
<br />Note that when you use the predictors, you need to save which permutation of the color values was used.  For 2bpp data, one possible way to store a permutation takes up 5 bits.  Looking at 2 pixels with at 2bpp, that's 16 possible entries in the lookup table, and can be encoded in 10 bytes.
<br />
<br />The second prediction method I used looks at 3 pixels, so there's 64 possible entries, for 40 bytes, far more overhead.
<br />
<br />For 1bpp data, you don't need to store as much extra overhead data, 4 bits for the 2-pixel predictor, and 8 bits for the 3-pixel predictor.
<br />
<br />These are illustrations of what the prediction images look like.
<br />
<br />First: Original Image
<br />Second: Predicted Image using Top and Left
<br />Third: Predicted Image using Top, Left and Top-Left.
<br />
<br />
<br />Bubble Bobble TI83 Title screen:
<br /><img src="http://i.imgur.com/GDdQz.png" alt="Image" /> <img src="http://imgur.com/29SDx.png" alt="Image" /> <img src="http://imgur.com/U0MbZ.png" alt="Image" />
<br />Raw: 768
<br />RLE: 669
<br />2-pixel filter + RLE: 600 (+1)
<br />3-pixel filter + RLE: 642 (+1)
<br />
<br />Chu Chu Rocket Title:
<br /><img src="http://imgur.com/BaOXu.png" alt="Image" /> <img src="http://imgur.com/47aDJ.png" alt="Image" /> <img src="http://imgur.com/NMVqG.png" alt="Image" />
<br />Raw: 15360
<br />RLE: 8073
<br />2-pixel filter + RLE: 7845 (+10)
<br />3-pixel filter + RLE: 5702 (+40)
<br />
<br />Pokemon:
<br /><img src="http://imgur.com/03dWk.png" alt="Image" /> <img src="http://imgur.com/0U2Qn.png" alt="Image" /> <img src="http://imgur.com/zTlWD.png" alt="Image" />
<br />Raw: 784
<br />RLE: 473
<br />2-pixel filter + RLE: 437 (+10)
<br />3-pixel filter + RLE: 457 (+40)
<br />
<br />Dur Butter:
<br /><img src="http://imgur.com/iNTlV.png" alt="Image" /> <img src="http://imgur.com/qQvdR.png" alt="Image" /> <img src="http://imgur.com/styII.png" alt="Image" />
<br />Raw: 5408
<br />RLE: 1623
<br />2-pixel filter + RLE: 1440 (+10)
<br />3-pixel filter + RLE: 1470 (+40)
<br />
<br />Donkey Kong Land:
<br /><img src="http://imgur.com/MZYzU.png" alt="Image" /> <img src="http://imgur.com/tziK0.png" alt="Image" /> <img src="http://imgur.com/tlFaK.png" alt="Image" />
<br />Raw: 5760
<br />RLE: 3647
<br />2-pixel filter + RLE: 3110 (+10)
<br />3-pixel filter + RLE: 3078 (+40)
<br />
<br />
<br />The RLE specified on that page isn't good for long runs greater than 63 pixels long, the Chu Chu Rocket Title picture has lots of those.
<br />
<br />Looks like the 3-pixel filter only really helped with the "Chu Chu Rocket Title Screen" image, since it eliminated the vertical gridlines.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Nov 18, 2010 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, lets keep it here, it's interesting to see how all these work, and for the 2 pixel compression, I was thinking of it using one byte from CHAR and then repeating that X times in a new byte, but using the MSB's for the pixel and then the repetition bits is a great idea, and the obvious one. But I am probably going to mess with some RLE compression now that it's making sense amd justified. It'll save enough space for the 1K lookup table, so it's definitly something I am going to do. Compression isn't so bad, it's using it and justifying the lookup table space you need to create to keep the speed of processing as low as before and completely understanding it.
<br />
<br />
<br />Thanks for the idea guys.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Nov 18, 2010 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, tools are definitely badly lacking when it comes to compression.
<br />
<br />A great thing would be a tool that takes a .bin file or even a .asm file parsing .db statements (and ignoring everything else), compressing the deal with a couple of algorithms which are feasible on the NES, and display the results. Then the user is free to use data from the most efficient compression method (or the one he feels more implementing).
<br />
<br />But usability for a game developement case should be kept in mind. Typically for storing text or maps, you'd have the following :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TextPointers<br />&nbsp; .dw Text1 <br />&nbsp; .dw Text2<br />&nbsp; .dw Text3<br /><br />Text1<br />&nbsp; .asc &quot;Hello guys !&quot;<br />Text2<br />&nbsp; .asc &quot;I will dominate the world!&quot;<br />Text3<br />&nbsp; .asc &quot;All oposition is futile&quot;<br /><br /></div><br />Having this compressed in a single .bin file is completely unusable.<br />So a tool that would parse the original data, compress it, and re -output it keeping the labels but replace .asc or .db statements with compressed data would be amazing. So it would be like that :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TextPointers<br />&nbsp; .dw Text1 <br />&nbsp; .dw Text2<br />&nbsp; .dw Text3<br /><br />Text1<br />&nbsp; .db $64, $06, $1a, $2b, $6c&nbsp; &nbsp;;&quot;Random&quot; compressed data comes here<br />Text2<br />&nbsp; .db&nbsp; $1a, $7b, $84, $9a<br />Text3<br />&nbsp; .db $9c, $5d, $4e, $8a, $9c, $1a<br /><br /></div>
<br />
<br />Having every text / screen in a separate file is not practical, you don't want 100+ tiny files in your folder to be compressed.
<br />
<br />Of course if anyone has a better idea, this is welcome.
<br />
<br />I'll try to make a tool like that for RLE and huffman coding (the only codings I actually understand fully... so far) but since I'm not a PHD in non-Nesdev computer science and because I'm busy those times it will take ages for me to get something decent. I could probably get something done slightly faster using Java but I bet people would rather see it being made in C(++) compilable into an .exe file which doesn't need JRE.
<br />
<br />There is lot of C++ sources for Romhacking oriented (de)compression <a href="http://www.romhacking.net/docs/134/" class="postlink">here</a> but I don't know how to use that !

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>