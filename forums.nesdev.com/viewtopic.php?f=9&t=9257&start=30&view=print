<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - INL-ROM custom MMC3 hybrid mapper design</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">INL-ROM custom MMC3 hybrid mapper design</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9257">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=9257</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Sep 15, 2012 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"> If we were to use something like this for the bi-annual homebrew compo you could just sell the new SPI chip and users could swap it out with their cart.</div><br />Which is a pretty good argument for considering using (Micro)SD, actually. More expensive, but reprogrammable by almost everyone.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Sep 15, 2012 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"> If we were to use something like this for the bi-annual homebrew compo you could just sell the new SPI chip and users could swap it out with their cart.</div><br />Which is a pretty good argument for considering using (Micro)SD, actually. More expensive, but reprogrammable by almost everyone.</div><br /><br />True,  although significantly more difficult to design/implement with effectively requiring a mcu.  For the SPI flash I 'merely' need to toss a shift register with proper controls into my CPLD.  Going though the work with an mcu I'd rather have USB connectivity with the mcu to reprogram the SPI flash especially since I've already got most of that work done with the NESDEV1, just need to swap to SPI vice parallel.  A USB socket is also cheaper than microSD socket and card.  Having USB would have the added benefit of making game development less cumbersome, and not necessarily slower if the whole ROM didn't need to be programmed.  Plus if you only wanted to publish a game with this setup you wouldn't have to include the added cost of the mcu, socket, and flash card.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sat Sep 15, 2012 10:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, so going with the assumption that this is a go, I'd like to try and come up with an idea of how the data exchange might go so I can try to come up with the hardware design.  Sorry for the HUGE post, I was basically board this evening and decided to type this up while I thought through everything.<br /><br />So we've got an issue of where ROM/RAM/mapper registers are all located.  I figure the best way is to keep MMC3 registers untouched which would require all loading/writes to PRG memory to occur while the memory is mapped to $6000-7FFF only.  So you'd map the 8KB bank there by some variant of MMC3 prg bank control the prepare to load it up with your game data.<br /><br />So the SPI byte can't very easily be mapped to $6000-FFFF then if we want to keep the data exchange simple.  To keep from requiring too many more address inputs we could place it at $5000-5FFF with the addition of PRG A12 as an input.  So the most recent read byte would be there until the mapper was 'signaled' to read the next byte.<br /><br />Now to figure out how to handle the commands and addresses sent to the SPI via the mapper.  For anyone interested in details this is the data sheet I'm looking at for  <a href="http://www.winbond.com/NR/rdonlyres/63CFB9A9-816D-4DE0-85EE-FF08F9244193/0/W25Q16CV.pdf" class="postlink">winbond 2MB SPI flash.</a><br /><br />So I was trying to figure out someway to make it so that writes to the SPI wouldn't be serial so that writing 8bit instruction and 24bit address wouldn't be so slow.  But I after some looking into things I don't think it's worth spending the logic to keep writes from being serial.  I figure start with bare bones essentials, then if additional things are needed/desired we'll consider adding and weighing the trade off between CPU time and mapper logic.  Additionally this keep things independent of what type of SPI you're using.  Basically the mapper doesn't care how big it is, how large the pages are, whether it's EEPROM or flash etc.  So even if someone were interested in this for something small like save data alone the mapper doesn't care.  Emulator authors you're on your own I guess...  Good news is there are data sheets for this stuff and the commands and such are pretty universal.<br /><br />So for anyone unaware or not interested in reading the data sheet the SPI flash is pretty simple I'll spell out the basics.  You write a 8 bit command followed by the address if applicable.  For reads you just continue to clock the chip and it spits out data bit by bit, byte after byte on each clock until you disable it by taking /CS high.  Similarly for writes you just continue to write the data you'd like to save, assuming you set things up properly and erased the page in flash and everything before hand.  Once you're done with the long stream of reading/writing you take /CS high to finish the process.  To start another access you take /CS low and repeat the process with the next command, address, data etc.  Trust me though, if you want to write anything to the chip from the NES you'll have to look through the data sheet.  If you're just reading data the discussion below is probably enough.<br /><br />I figure the best way to signal the mapper to read the next byte is to write to a control register.  But conveintly we've also got PRG A0 as an input, so I figure we'll have two 'SPI registers' at $5000 and 5001 (more specifically: $5xxEVEN and $5xxODD in normal MMC3 style).  Here are the definitions I'm thinking:<br /><br />-----------------------<br />$5000 &quot;SPI WRITE&quot;  All writes to this register are fed directly to the SPI flash.  This is where you can write commands and data directly to the SPI flash.  Only PRG D7 is seen by the SPI flash.  Here is where you'll have to give the read command followed by the address before data can be pumped out by the mapper.  You'll also have to write save data here serially bit by bit (like controllers but writes).  Don't forget you'll have to supply the write command followed by the SPI address you want to save data to.  This is ALSO where you'll read full bytes from that the mapper will pump out for you. <br /><br />-----------------------<br />$5001 &quot;SPI READ/Mapper command&quot;  So we need to use this register to enable and disable the SPI flash by controlling the /CS pin on the chip.  I figure we'll just use D7.  So writing any value with D7=0 enables the SPI flash and disables it when D7=1.  Additionally this is the register to use to command the mapper to fetch the next byte from the SPI flash so you can read it out in one full byte.  So for now we'll say writing any value with D7=0 commands the mapper to fetch the next byte.  Writing D7=1 will disable the flash and stop the read data stream.<br /><br /><br />So I basically need 9 CPU clock cycles to fetch each byte.  one cycle per bit and one more to reset my control circuitry and set things up to pump out the next byte.  I *COULD* cut this down to 8 cycles and ABSOLUTELY REQUIRE 8 cycles no more no less.  Basically I'd only clock in 7 bits and the 8th bit wouldn't be clocked into the shift register, it'd just be placed on PRG D0 for the required READ on the 8th cycle.  I don't think this is very user friendly though, and could easily cause data to be read improperly. In my loop I insert a NOP to make an 8 cycle STA/LDA cycle stretch out to 10 cycles.<br /><br /><br /><strong><br />TL;DR:</strong><br />Here would be the sequence of operations to read data from the SPI flash:<br /><br />1) Write to $5001 with D7=0 to enable the SPI flash.  (while this does reset my pump/shift register control circuitry this intial command WILL NOT count for the command to fetch the FIRST byte.)<br /><br />2) Write serially to the SPI flash via $5000 bit PRG D7.  Things are written MSB first.  So you'll have to write 03h for the read command followed by the 24bit address.  <br /><br />3) Now write to $5001 with PRG D7=0 to give the 'read full byte' command to the mapper.<br /><br />4)Wait 9 clock cycles.  You can do anything during this time except read/write to $5xxx.  In a loop this is where I store the data from the previous read.<br /><br />5)Read the first/next byte from $5000.<br /><br />6) read next byte by looping back to step 3.<br /><br />7) when DONE reading, write to $5001 with PRG D7=1.<br /><br />Now you can save yourself some CPU time with step 7. Basically if you know the next stream of data you'd like to read is sequential from your current read you can just let the mapper and flash sit there idle.  You could then come back 5mins later and read the next byte in the stream.  Maybe the best way is to just leave it enabled after the read.  Then if before you start your next read/write cycle you decide if you need to disable, enable, and issue another command.<br /><br />Here is the code I wrote up as an example obviously there may be better ways to do this. But this should explain how it all works.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;;;;;copy SPI to $5000-$5FFF routine;;;;;;;;<br />;first you must place the desired PRG RAM bank at $5000-5FFF via the MMC3 style control registers. (details later)<br /><br />LDY #00&nbsp; &nbsp;&nbsp; &nbsp;<br />STY $5001&nbsp; &nbsp;; Writing to $5000 with D7=0 enables the SPI flash for access. (takes /CS low)<br /><br />;Now you must serially write to the SPI via $5000 bit 7.&nbsp; the read command (03h) followed by the 24bit address, MSB first.<br /><br />;Start unloading data now that everything is set up!<br />LDY #00&nbsp; &nbsp;&nbsp; &nbsp;<br />STY $5001&nbsp; &nbsp;;command to read the FIRST byte (with D7=0 still)<br />LDX #$00&nbsp; &nbsp;;2cyc; set up loop counter and provide 2 cycle delay for SPI data pump<br />NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc;<br />NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc; need total of 9 cycles to setup pump timing for entry to loop<br />NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc;<br />NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc; okay it's been 10 cycles since STA $5001, enter loop<br />load_spi_to_wram:&nbsp; &nbsp;;copies 8KB bytes from SPI flash into page at $6000-7FFF<br />&nbsp; &nbsp;LDA $5000&nbsp; &nbsp;&nbsp; &nbsp;;mapper places most recent flash read at $5000 (decoded by PRG A0,12-15)<br />&nbsp; &nbsp;STY $5001&nbsp; &nbsp;&nbsp; &nbsp;;command to mapper to fetch next byte<br />&nbsp; &nbsp;STA $6000, x&nbsp; &nbsp;;store first byte that was read<br />&nbsp; &nbsp;NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;provides at least 9 cycle delay from STA $5001<br />&nbsp; &nbsp;LDA $5000&nbsp; &nbsp;&nbsp; &nbsp;;read byte<br />&nbsp; &nbsp;STY $5001&nbsp; &nbsp;&nbsp; &nbsp;;fetch command<br />&nbsp; &nbsp;NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;delay<br />&nbsp; &nbsp;STA $6100, x&nbsp; &nbsp;;store byte<br />&nbsp; &nbsp;LDA $5000&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;STY $5001&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;STA $6200, x&nbsp; &nbsp;&nbsp; <br />&nbsp; &nbsp;LDA $5000&nbsp; &nbsp;&nbsp; &nbsp;;4cyc<br />&nbsp; &nbsp;STY $5001&nbsp; &nbsp;&nbsp; &nbsp;;4cyc<br />&nbsp; &nbsp;NOP&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc<br />&nbsp; &nbsp;STA $6300, x&nbsp; &nbsp;;4cyc<br />&nbsp; &nbsp;...<br />&nbsp; &nbsp;LDA $5000<br />&nbsp; &nbsp;STY $7F00, x<br />&nbsp; &nbsp;INX&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;BNE load_spi_to_wram&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />;;end the read stream if you know your next SPI access isn't going to be a sequential read.<br />LDY #$80<br />STY $5001&nbsp; &nbsp;;writing to $5001 with D7=1 disables the SPI flash (takes /CS high)<br /><br />&nbsp; &nbsp;;;;14cyc per byte * 8192bytes = ~115K cycles / 29800 = ~3.8 NTSC frames</div><br /><br />Obviously you wouldn't have to do an entire 8KB loop, but assuming I haven't made too many mistakes that should work I'd think.  Additionally it's require your data to be arranged in the correct order on the SPI flash to support this non-sequential copy loop.  Maybe you guys can come up with a better solution/loop.  I just did this to sort things out for myself.  Copying data to pattern tables is even easier with just repetitive read $5000, delay, write $2007 loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Sep 16, 2012 1:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So I basically need 9 CPU clock cycles to fetch each byte. one cycle per bit and one more to reset my control circuitry and set things up to pump out the next byte.</div>Could you use the NES's 21/26MHz clock source? I guess the down side is that It's not famicom/famiclone compatible. A crystal/resonator (digikey:HWZT-12.00MD,12MHz,28¢/1)? Or use both edges of of M2 somehow? Winbond's large SPI EEPROMs can be clocked at up to 104MHz so there doesn't seem to be a relevant upper bound. Or can you use the winbond quad/dual SPI modes?<br /><br />On the other hand, you can't really beat 224kB/s and you're still talking about aggregate read speeds of 200kB/s so whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Sep 16, 2012 1:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent">So I basically need 9 CPU clock cycles to fetch each byte. one cycle per bit and one more to reset my control circuitry and set things up to pump out the next byte.</div>Could you use the NES's 21/26MHz clock source? I guess the down side is that It's not famicom/famiclone compatible. A crystal/resonator (digikey:HWZT-12.00MD,12MHz,28¢/1)? Or use both edges of of M2 somehow? Winbond's large SPI EEPROMs can be clocked at up to 104MHz so there doesn't seem to be a relevant upper bound. Or can you use the winbond quad/dual SPI modes?<br /><br />On the other hand, you can't really beat 224kB/s and you're still talking about aggregate read speeds of 200kB/s so whatever.</div><br /><br />Yeah I considered most of those things actually.  I also thought about doing something like using a RMW instruction and direct reads from the SPI and writes to $6000.  So LARGE unrolled loop could conceivably do it in 6 cycles (~290KB/s) with a lot of trickery, complexity, logic expense, I/O, components, etc.  Like yourself, I realized it was plenty fast anyways so none of it's really justified.  <br /><br />Super simple, super cheap, plenty fast, tons of ROM so I'm happy <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 16, 2012 5:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Writing the saved game serially might be a little slow, but I guess players expect that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Sun Sep 16, 2012 10:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Writing the saved game serially might be a little slow, but I guess players expect that.</div><br /><br />Slow for the CPU, but pretty quick for the player.  I'm used to a few seconds on everything but the NES which is take no time with battery backing.  So even if you somehow managed to come up with 256bytes of save data (a full page of flash) It'll still be under a frame's worth of time.<br /><br />I wrote up the routine quick, keep in mind it could be even faster if you unrolled each byte.  Here I figured worst case looping  on each bit.<br /><br />Additionally I think I'm going to change my mind about D0 being connected to the SPI for the $5000 register.  The SPI handles everything MSB first.  So instead of hassling with rolling the MSB around to the LSB it just makes more sense to connect D7 to the SPI flash data input.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;;;save data to SPI routine;;;;<br />;this routine writes a full page of SPI flash<br />;before running you must erase the page <br />;and write the page program command (02h)and 24bit address<br />;alternatively you could load the command and address into your 'save_data' array:<br />&nbsp; &nbsp;&nbsp; &nbsp;;02h, addr4, addr3, addr2, addr1, save data (251 bytes)<br />;then this routine would give the program page command, address, and save_data all at once<br /><br />LDY #00&nbsp; &nbsp; &nbsp; <br />STY $5001&nbsp; &nbsp;; Writing to $5000 with D7=0 enables the SPI flash for access. (takes /CS low)<br /><br />LDX #$00<br />write_to_SPI: <br />&nbsp; &nbsp;LDA save_data, X&nbsp; &nbsp;;4cyc; load byte<br />&nbsp; &nbsp;LDY #$08&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc; bit counter<br />&nbsp; &nbsp;save_byte:<br />&nbsp; &nbsp;&nbsp; &nbsp;STA $5000&nbsp; &nbsp;&nbsp; &nbsp;;4cyc * 8; write MSB to SPI (only D7 is connected)<br />&nbsp; &nbsp;&nbsp; &nbsp;ASL A&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc * 8; move bit 6 to D7<br />&nbsp; &nbsp;&nbsp; &nbsp;DEY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc * 8;<br />&nbsp; &nbsp;&nbsp; &nbsp;BNE save_byte&nbsp; &nbsp;;3cyc * 7 + 2cyc last;<br />&nbsp; &nbsp;INX&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;2cyc; increment byte counter<br />&nbsp; &nbsp;BNE write_to_SPI&nbsp; &nbsp;;3cyc<br /><br />LDY #$80<br />STY $5001&nbsp; &nbsp;;writing to $5001 with D7=1 disables the SPI flash to end the write (takes /CS high)<br /><br />&nbsp; &nbsp;;TOTAL time: ~100 cycles per byte = ~25.6K cycles = ~1frame</div><br /><br />At a glance unrolling the byte loop would take around 55 cycles making it twice as fast which is around 32KB/sec.  I guess if you wanted to be safe and read the data back, verify every byte then it'll take longer obviously.  You could read back and compare all in one loop with only a few instructions so it's still not going to take more than a frame or two.  And 256 is a lot of save data, you don't have to program the entire page if you don't have that much data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Sep 16, 2012 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm sure with good game design, you can make it seemless. Palette fade? Save on top of it since the game won't be playing. Screen switches? Write a page. Save point in your game? Make it save and then a sound effect for the player to know. I'm sure you can find 1-10 frames in game play which you can reuse as a save point to seemlessly add it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 16, 2012 8:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I really don't think this is an issue... People are used to messages like &quot;saving the game, please don't turn the power off&quot; being displayed for a few seconds and I honestly don't remember anyone complaining. And apparently this will fast enough to not even require a message. As long as it takes less than 1 second, I don't think you need a message.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Sep 17, 2012 12:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I really don't think this is an issue... People are used to messages like &quot;saving the game, please don't turn the power off&quot; being displayed for a few seconds and I honestly don't remember anyone complaining. And apparently this will fast enough to not even require a message. As long as it takes less than 1 second, I don't think you need a message.</div>If it takes longer than one frame, display a message anyways, just to make sure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Sep 17, 2012 12:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I really don't think this is an issue... People are used to messages like &quot;saving the game, please don't turn the power off&quot; being displayed for a few seconds and I honestly don't remember anyone complaining. And apparently this will fast enough to not even require a message. As long as it takes less than 1 second, I don't think you need a message.</div>If it takes longer than one frame, display a message anyways, just to make sure.</div><br />Come on. It's actually BAD to display messages if the message won't be visible long enough for the player to see it properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Sep 17, 2012 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or use an icon, rather than a message. I know games that save extraordinarily fast, have a little SD card/floppy disk icon that appears in a bottom corner while it's saving.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Sep 17, 2012 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, sort of like the little floppy disk that would blink in the corner when Doom 1 would stall for loading. Super Smash Bros. Melee has a &quot;saving&quot; icon in the corner as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Grapeshot</b> [ Tue Sep 18, 2012 9:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you have the SPI flash and a shift register, would it be hard to add a way to stream PCM or DPCM audio from the flash to the expansion sound pin? I guess 1-bit PCM would be trivial (just connecting the LSB of the shift register to a spare CPLD pin and then automatically retriggering the read command) but for 4 or 8 bit audio you would need another latch and more spare pins on the CPLD.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Sep 18, 2012 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: INL-ROM custom MMC3 hybrid mapper design</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Grapeshot wrote:</div><div class="quotecontent">If you have the SPI flash and a shift register, would it be hard to add a way to stream PCM or DPCM audio from the flash to the expansion sound pin? I guess 1-bit PCM would be trivial (just connecting the LSB of the shift register to a spare CPLD pin and then automatically retriggering the read command) but for 4 or 8 bit audio you would need another latch and more spare pins on the CPLD.</div><br /><br />That's an interesting thought...  I had only considered storing DPCM samples on the SPI, loading them to RAM and playing.  But I'd think something like you're imagining could be possible as well assuming an EXP audio jumper/resistors were installed.<br /><br />You'll have to forgive me I'm not much of a sound buff but I am interested in the possibilities, so feel free to correct me on this stuff or suggest better solutions.  I made the exp pins easily accessible by extending all the pins into the cart (don't have to chip away at the cart shell to access them)  The CPLD that's going to handle the SPI flash should have a  free pin that could be assigned to the task.  Or if you were accepting of a 0-3.3v signal you wouldn't even need a CPLD pin, the SPI could be connected directly to the EXP pin.<br /><br />So really I'd imagine doing it a little differently than using the SPI for game/save/graphics data.  It could be set up to just run free, so after writing the command and address to the SPI via $5000 bit 7, reads would be automatically enabled (all this really means is the SPI needs to be continually clocked after the read cmnd/addr).  And the SPI would just spit out the data stream until the chip was disabled by writing to $5001 with D7=1.  You wouldn't even bother with the shift register, just let the flash stream bits on each clock pulse.  I'm guessing 1.79Mhz would be a little faster than desired for an audio stream.  Instead of a shift register a clock divider could be put in it's place.<br /><br />I'd guess you'd also want a low pass filter and could easily locate than in the perf area.<br /><br />If there was logic to spare both the shift register and clock divider could be implemented at once.  I'd just have to add another definition to $5001.  Perhaps something like D6=0 divided clock bit stream to EXP pin, D6=1 byte feeding as discussed previously.  D7 would still enable/disable the SPI which would stop either bit stream or byte feed reads.<br /><br />EDIT: it wouldn't be required, but might be nice.  The SPI's hold pin/function would basically act like a 'pause' for the bit stream. So you could stop the stream and pick up where you left off if control was given to that pin.  Perhaps by D5 on $5001.  We'll see how much logic and pins are available, but if desired this could be considered as well.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>