<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=4953" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-03-14T20:47:03-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=4953</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-14T20:47:03-07:00</updated>
<published>2009-03-14T20:47:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44285#p44285</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44285#p44285"/>
<title type="html"><![CDATA[How I made the music engine for Tetramino 0.37]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44285#p44285"><![CDATA[
I still need to step the instruments to the next frame, even if a sound effect is running. At that point, it's only about 6 instructions to stuff them into the $0002 (duty/vol) and $0003 (pitch) output addresses.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 14, 2009 8:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2009-03-14T20:08:56-07:00</updated>
<published>2009-03-14T20:08:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44282#p44282</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44282#p44282"/>
<title type="html"><![CDATA[Re: How I made the music engine for Tetramino 0.37]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44282#p44282"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Internal API used by update_sound():<br />update_music() - Interprets sequence data.<br />update_instrument(X=channel_id)<br />update_sound_effect(X=channel_id)<br /><br />Then it's easy to have sound effects interrupt music properly: First call update_instrument(), then have update_sound_effect() overwrite the duty+volume and pitch if a sound effect is running on that channel, then write the duty+volume and pitch to the channel's register.<br /></div><br /><br />What if you did it backwards?  You might be able skip a lot of unnecessary code calculating and writing duty/vol/pitch for instruments that you aren't going to use:<br /><br />1) Update the SFX first, and set bitflags for which channels are running SFX.<br />2) update the instruments (I'm assuming this is music instruments?), checking the bitflags and skipping calculations and writes for channels that are already used by the SFX.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Sat Mar 14, 2009 8:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-03-14T19:12:39-07:00</updated>
<published>2009-03-14T19:12:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44280#p44280</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44280#p44280"/>
<title type="html"><![CDATA[How I made the music engine for Tetramino 0.37]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4953&amp;p=44280#p44280"><![CDATA[
On <a href="http://www.43folders.com/2005/09/12/building-a-smarter-to-do-list-part-i" class="postlink">43folders</a>, I learned that a to-do list is more effective when broken up into tasks that can be done in one sitting, each of the form "use X to do Y, resulting in Z". It's also easier to make a music engine if you can factor it out into a separate module that exposes specific functions to the game. I wrote a separate test harness that calls the same API that I use in the game.<br /><br />External API used by the game:<br />init_sound() - Inits the audio subsystem. Called only at system startup.<br />init_music(A=song_id) - Starts a song.<br />stop_music() - Stops a song.<br />start_sound(A=fx_id) - Picks a channel for a PSG sound effect and starts it.<br />start_sample(A=dpcm_id) - Starts a DPCM sound effect.<br />update_sound() - Called once per vertical blank, after the PPU update code, to update the PSG registers.<br /><br />Compare to the NSF API:<br />nsf_init_music(A=song_id) - Calls init_sound() and init_music(A=song_id)<br />update_sound()<br /><br />Internal API used by update_sound():<br />update_music() - Interprets sequence data.<br />update_instrument(X=channel_id)<br />update_sound_effect(X=channel_id)<br /><br />Then it's easy to have sound effects interrupt music properly: First call update_instrument(), then have update_sound_effect() overwrite the duty+volume and pitch if a sound effect is running on that channel, then write the duty+volume and pitch to the channel's register.  In fact, I'm planning on doing drums using the sound effect system, which would make triangle drums easy as pie.<br /><br />Tetramino 0.33 implements all of this except music.  Because I had broken up the tasks, I was able to sketch out init_music(), update_music() and update_instrument() in about four fifteen-minute sessions on the bus today, and you'll see the result in Tetramino 0.37 once I get some non-trivial sequences and instruments developed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 14, 2009 7:12 pm</p><hr />
]]></content>
</entry>
</feed>