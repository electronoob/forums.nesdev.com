<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NTSC color palette emulation, with the square wave modulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NTSC color palette emulation, with the square wave modulator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8209">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8209</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>7</strong> of <strong>10</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 28, 2011 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent">It raises a new one, instead: Would that not mean that a stripe of constant color would appear having a fluctuating brightness?</div><br />No, because the color phase doesn't reset with every pixel:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#40;hhhhhhll&#41;&#40;llllhhhh&#41;&#40;hhllllll&#41;<br />\_pixel1_/\_pixel2_/\_pixel3_/</div></div>
<br />Doesn't that only confirm that it <em>would</em> appear to have a fluctuating brightness? Pixel 1 has the total amplitude of 6*h + 2*l. Pixel 2 has 4*h + 4*l. Pixel 3 has 2*h + 6*l.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Oct 28, 2011 1:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry, I realized I'd misread your post and explained the wrong thing, please go back and read my fixed version.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 28, 2011 1:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">No, because the reconstructed chroma is subtracted from the received composite signal to calculate the true brightness.</div><br />Hmm... Thanks for the explanation. I did not understand it, though... I am unsure how to phrase a question. I would think this in terms of an algorithm and I cannot figure out how to translate your words into an algorithm. I guess I will try to write something according to what I guess you meant and see if it produces anything that makes sense.<br /><br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Also the duty cycle is 50% unless you're doing something funny, not 33%.</div>
<br />Ah, sorry, my bad.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Oct 28, 2011 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">the color phase doesn't reset with every pixel:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#40;hhhhhhll&#41;&#40;llllhhhh&#41;&#40;hhllllll&#41;<br />\_pixel1_/\_pixel2_/\_pixel3_/</div></div><br />Doesn't that only confirm that it <em>would</em> appear to have a fluctuating brightness? Pixel 1 has the total amplitude of 6*h + 2*l. Pixel 2 has 4*h + 4*l. Pixel 3 has 2*h + 6*l.</div><br />An analog TV doesn't see pixel boundaries; it only sees a waveform.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">hhhhhhllllllhhhhhhllllll</div>
<br />It then uses various filters, which can be thought of as a moving weighted average, to separate this waveform into chroma (parts of the signal that are momentarily of the same frequency as the colorburst) and luma (the rest of the signal).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 28, 2011 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>yay</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I got quite a good result. It is now much closer to what I see on the tape than it was before.
<br />Thanks tepples and lidnariq.
<br />
<br />
<br />Source code (caching code redacted for brevity, performance may be bad):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; SDL_Surface *s;<br /><br />&nbsp; &nbsp; const int xres=256*1, yres=240*1;<br /><br />&nbsp; &nbsp; void Init&#40;&#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; SDL_Init&#40;SDL_INIT_VIDEO&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; SDL_InitSubSystem&#40;SDL_INIT_VIDEO&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; s = SDL_SetVideoMode&#40;xres, yres, 32,0&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; signal&#40;SIGINT, SIG_DFL&#41;;<br />&nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; static unsigned framecounter=0;<br />&nbsp; &nbsp; static unsigned prev2&#91;3&#93;&#91;240&#93;&#91;xres&#93;=&#123;&#123;&#123;&#125;&#125;&#125;, colorbursts&#91;240&#93;, Colorburst=4;<br />&nbsp; &nbsp; static u16 prev1&#91;3&#93;&#91;240&#93;&#91;256&#93;=&#123;&#123;&#123;&#125;&#125;&#125;; // NES pixels corresponding to each screen location in each tweak offset<br />&nbsp; &nbsp; static bool diffs&#91;240&#93; = &#123;false&#125;;&nbsp; &nbsp; &nbsp;// Whether this scanline has changed from what it was the last time<br /><br />&nbsp; &nbsp; void PutPixel&#40;unsigned px,unsigned py, unsigned pixel&#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; u16 v = 0x8000^pixel, &amp;p = prev1&#91;Colorburst/4&#93;&#91;py&#93;&#91;px&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; if&#40;p != v&#41; &#123; p = v; diffs&#91;py&#93; = true; &#125;<br />&nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; void FlushScanline&#40;unsigned py, unsigned length&#41; /* length is in pixels: 340 or 341. */<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; if&#40;py &lt; 240&#41; colorbursts&#91;py&#93; = Colorburst;<br />&nbsp; &nbsp; &nbsp; &nbsp; if&#40;py == 239&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //#pragma omp parallel for schedule&#40;guided&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;py=0; py&lt;240; ++py&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned y1 = &#40;py&nbsp; &#41;*yres/240;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned y2 = &#40;py+1&#41;*yres/240;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned colorburst = colorbursts&#91;py&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto&amp; target = prev2&#91;colorburst/4&#93;&#91;py&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto&amp; line&nbsp; &nbsp;= prev1&#91;colorburst/4&#93;&#91;py&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;diffs&#91;py&#93;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float sigbuf&#91;256*8&#93;, d07=0.f, d15=0.f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float sigi&#91;256*8&#93;, sigq&#91;256*8&#93;; // Match I &amp; Q at each position.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;unsigned p=0; p&lt;256*8; ++p&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Retrieve NTSC signal from PPU<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int pixel = line&#91;p/8&#93;%512, offset = &#40;colorburst+p&#41; % 12;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Decode the color index.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int color = &#40;pixel &amp; 0x0F&#41;, level = color&lt;0xE ? &#40;pixel&gt;&gt;4&#41; &amp; 3 : 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Voltage levels, relative to synch voltage<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; static const float black=.518f, white=1.962f, attenuation=.746f,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; levels&#91;8&#93; = &#123;.350f, .518f, .962f,1.550f,&nbsp; // Signal low<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.094f,1.506f,1.962f,1.962f&#125;; // Signal high<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto wave = &#91;&#93;&#40;int p, int color&#41; &#123; return &#40;color+8+p&#41;%12 &lt; 6; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // NES NTSC modulator &#40;square wave between two voltage levels&#41;:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float spot = levels&#91;level + 4*&#40;color &lt;= 12*wave&#40;offset, color&#41;&#41;&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // De-emphasis bits attenuate a part of the signal:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;&#40;&#40;pixel &amp; 0x40&#41; &amp;&amp; wave&#40;offset,12&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || &#40;&#40;pixel &amp; 0x80&#41; &amp;&amp; wave&#40;offset, 4&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || &#40;&#40;pixel &amp;0x100&#41; &amp;&amp; wave&#40;offset, 8&#41;&#41;&#41; spot *= attenuation;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Normalize:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float v = &#40;spot - black&#41; / &#40;white-black&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Apply slight signal degradation to it<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v = v-0.5f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d07 = d07*0.3f + 0.7f*v;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; d15 = d15*-.5f + 1.5f*v;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v = 0.5f + d07*0.7f + d15*0.3f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sigbuf&#91;p&#93; = v;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto cosf = &#91;&#93;&#40;int p&#41; &#123; return std::cos&#40;3.141592653 * p / 6&#41;; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sigi&#91;p&#93; = v * cosf&#40;p+12+colorburst&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sigq&#91;p&#93; = v * cosf&#40;p+21+colorburst&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float gamma = 1.8f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;unsigned x=0; x&lt;xres; ++x&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float i=0.f, q=0.f, y=0.f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;int s = x*256*8 / xres, p=0; p&lt;12; ++p, ++s&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;s &gt;= 0 &amp;&amp; s &lt; 256*8&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123; i += sigi&#91;s&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; q += sigq&#91;s&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y += sigbuf&#91;s&#93;; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i /= 12.f; q /= 12.f; y /= 12.f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //float amplitude = std::sqrt&#40;i*i + q*q&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //y = 0.9f * y + 0.1f * sigbuf&#91;x * 256*8 / xres&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //float y = sigbuf&#91;x * 256*8 / xres&#93; - amplitude;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto gammafix = &#91;=&#93;&#40;float f&#41; &#123; return f &lt;= 0.f ? 0.f : std::pow&#40;f, 2.2f / gamma&#41;; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto clamp = &#91;&#93;&#40;int v&#41; &#123; return v&lt;0 ? 0 : v&gt;255 ? 255 : v; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; target&#91;x&#93; = 0x10000 * clamp&#40;255.9f* gammafix&#40;y +&nbsp; 0.946882f*i +&nbsp; 0.623557f*q&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 0x00100 * clamp&#40;255.9f* gammafix&#40;y + -0.274788f*i + -0.635691f*q&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 0x00001 * clamp&#40;255.9f* gammafix&#40;y + -1.108545f*i +&nbsp; 1.709007f*q&#41;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; diffs&#91;py&#93; = false;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;unsigned y=y1; y&lt;y2; ++y&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u32* pix = &#40;&#40;u32*&#41; s-&gt;pixels&#41; + y*xres;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; std::memcpy&#40;pix, target, sizeof&#40;target&#41;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;++framecounter%1 == 0&#41; SDL_Flip&#40;s&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; Colorburst = &#40;Colorburst + length*8&#41; % 12;<br />&nbsp; &nbsp; &#125;</div>
<br />
<br />Various title screens rendered in 256x240 and in, umm, 800x240, as tests (vertical scaling would only have increased post length without any information value).
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_a_i.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_a_s.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_a_r.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_a_w.gif" alt="Image" />
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_b_i.gif" alt="Image" />
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_b_s.gif" alt="Image" />
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_b_r.gif" alt="Image" />
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_b_w.gif" alt="Image" />
<br />
<br />
<br />There is one thing that bothers me still in this, though. I am not calculating Y in the manner suggested by lidnariq. Instead, I am simply taking the average of the 12 amplitudes nearest to the current pixel. As a curiosity, here's what I get if I calculate the luma corresponding to the calculated chroma and subtract it from the momentary signal value...
<br />It looks a bit even weirder than it should because of aliasing artifacts.
<br />
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_ntsc_c_i.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Oct 28, 2011 9:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks very nice!<br /><br />So, the way I understand NTSC demodulation works is as follows:<br /><br />Read the colorburst. This is phase -U. Then either do the &quot;proper NTSC thing&quot;  according to the standards or the cheap thing (what the majority of analog televisions did).<br /><br />The cheap thing: Generate new sine waves at phases U (+ve means bluish) and V (+ve means reddish). Multiply your input composite samples by both sinusoids. Horizontally spatially lowpass both of these demodulated inputs at ~1.5MHz. These are your U and V samples to be used later. Now multiply (remodulate) your lowpassed U and V outputs by the original sinusoids you generated at the top. Subtract this from the input composite signal. Possibly lowpass (less clearly necessary) this at 4MHz to get your &quot;true&quot; Y.<br /><br />The 'proper NTSC thing': Using -U, generate carriers I and Q at 57° and 147° clockwise. Demodulate I (+ve is orangish) and Q (+ve is pinkish) components the same way as above. Lowpass I and Q at 1.4 MHz and 500kHz respectively instead of the common bandwidth specified for U and V above. You now have I and Q. The rest is the same as above.<br /><br />As tepples pointed out, nowhere does the TV know where the pixels are, so the edges of pixels are necessarily blurred; calculating the instantaneous luma from each 8-sample subset of pixels is giving you the weird result you have on the Ice Climbers screen there. By treating each 8-sample subset as isolated, you in fact do get the light-dark pattern you were earlier asking us about.<br /><br />The wikipedia article on <a href="http://en.wikipedia.org/wiki/YIQ" class="postlink">YIQ</a> is my source for the above frequencies. I've also taken the image of the <a href="http://en.wikipedia.org/wiki/File:YIQ_IQ_plane.svg" class="postlink">colorspace on the YIQ article</a> and combined it with the demonstration <a href="http://en.wikipedia.org/wiki/File:SMPTE_color_bars_on_NTSC_vectorscope.png" class="postlink">output</a>  from a <a href="http://en.wikipedia.org/wiki/Vectorscope" class="postlink">Vectorscope</a> showing the <a href="http://en.wikipedia.org/wiki/SMPTE_color_bars" class="postlink">standard test bars</a> and combined them with a small overlay to show the <a href="http://forums.nesdev.com/viewtopic.php?p=95756#p95756" class="postlink">NTSC NES hues</a> denoted in small black numbers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Sat Oct 29, 2011 12:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No one looked at my pictures from the oscilloscope? Let me tell you a terrible secret: PPU makes color subcarrier only for dyed colors. White, black and gray shades are always without subcarrier and look clearly at actual pixel boundaries. This is a terrible simplification goes against the standard of PAL / NTSC, but for decoder ultimately does not matter: there is no subcarrier means no color, simplicity doubles profit. However, the color burst is always present, because it sets the sync decoder.
<br />So, everything simple: you must stop shuffling whole lines - looks terrible. You must make 12 references for color brightness for each subcarrier phase and use it only for colored pixel index. Look at my example (wich a long time ago I made on some forum):
<br />Source:
<br /><a href="http://img515.imageshack.us/i/1rgb.png/" class="postlink"><img src="http://img515.imageshack.us/img515/8922/1rgb.th.png" alt="Image" /></a>
<br />Colored only:
<br /><a href="http://img59.imageshack.us/i/4color.png/" class="postlink"><img src="http://img59.imageshack.us/img59/685/4color.th.png" alt="Image" /></a>
<br />Colored and not colored are combined together:
<br /><a href="http://img688.imageshack.us/i/5compositebw.png/" class="postlink"><img src="http://img688.imageshack.us/img688/7058/5compositebw.th.png" alt="Image" /></a>
<br />Result:
<br /><a href="http://img59.imageshack.us/i/6composite.png/" class="postlink"><img src="http://img59.imageshack.us/img59/615/6composite.th.png" alt="Image" /></a>
<br />Quite simple, isn't it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LocalH</b> [ Sat Oct 29, 2011 1:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know so much about PAL, but with NTSC, the mere presence of color burst means that the set will try to decode the chroma, even where there is supposed to be none, and luma will bleed over into chroma in certain situations (it's the whole concept behind artifact colors such as seen on the Apple II, TRS-80 CoCo, and IBM CGA). It all depends on the relationship between the pixel clock and the color burst.
<br />
<br />I suppose PAL doesn't do this, however, seeing as none of the systems that can do artifact color will generate it on a PAL system, instead just outputting black and white (with occasional light color fringing but nothing that could be called "artifact color").

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Oct 29, 2011 2:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">HardWareMan wrote:</div><div class="quotecontent">No one looked at my pictures from the oscilloscope? Let me tell you a terrible secret: PPU makes color subcarrier only for dyed colors.</div>
<br />I do not understand how that is a secret. That is even described at <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/NTSC_video">http://wiki.nesdev.com/w/index.php/NTSC_video</a><!-- m --> .
<br />I did look at the pictures.
<br />
<br />For comparison, here is a signal dump of what my most recent version (source code above) produces for scanline 78 of Rockman 2 title screen (right under the "Rockman" text: black, purple solid, white text (begins atop the purple, then continues atop black), black, peach solid, one pixel black, purple solid, black); right above the black line between the peach and the purple in "2".
<br />Sync/colorburst are not shown, because I do not generate them as signals (they are just shortcut-implemented as logic rather than as signal). The dump length is 256*8 samples.
<br />
<br /><a href="http://bisqwit.iki.fi/kala/snap/nesemu1_rmdump8.png" class="postlink"><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_rmdump8_thu.png" alt="Image" /></a>
<br />Click to get a magnificated version.
<br />Sure it's not identical down to every detail, but I do not see any categorical differences.
<br />
<br />Top: Original, perfectly sharp signal. Bottom: The signal after applying two filters to it in order to get a smoother shape with some high frequency noise. This is the one that gets processed by the simulated "TV".
<br />The ones in the middle are various differently filtered versions, for testing.
<br />The gray bars in the background identify where PPU's pixels begin and end.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Oct 29, 2011 5:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I implemented the 1.4 Mhz and 500 kHz lowpass filters to I and Q respectively. Y is filtered at 3.5 MHz. (Actual implementation weighted-averages them at 31, 86 and 12 samples respectively; it's not a perfect solution to lowpass-filtering...)
<br />It also does the 57 and 147 degree offsets to the colorburst, which means that the colors are sightly different to previous demos.
<br />It's getting a bit too large for an inline GIF, so here's a 800x600 AVI, 60.0988 FPS, 18 seconds long, 8 megabytes. Be sure to rightclick and select "save as" and not try to watch it without saving first.
<br /><!-- m --><a class="postlink" href="http://bisqwit.iki.fi/kala/snap/nesemu1_ntscmario800by600b.avi">http://bisqwit.iki.fi/kala/snap/nesemu1 ... by600b.avi</a><!-- m -->
<br />I rendered it at 2048x1536 and lanczos-scaled down to 800x600 (because not many a computer can play 2048x1536 videos at 60 fps).
<br />
<br />I did not put it to YouTube because YouTube caps the FPS at 30, which is really inconvenient when you are trying to demo something that has relevant details at higher rate than that.
<br />
<br />P.S. Initially I accidentally used for Q a ratio 143 rather than 86 for some reason. For curiosity, it's available here. Nice gradients! <!-- m --><a class="postlink" href="http://bisqwit.iki.fi/kala/snap/nesemu1_ntscmario800by600wide.avi">http://bisqwit.iki.fi/kala/snap/nesemu1 ... 00wide.avi</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat Oct 29, 2011 5:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just a little question: the NES output come from the RF or composite cable for those pics?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Oct 29, 2011 5:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">Just a little question: the NES output come from the RF or composite cable for those pics?</div>
<br />Is not the difference only in whether it is modulated by the aerial carrier frequency (i.e. RF modulation) and whether the audio is also transmitted along it?
<br />I'm not doing audio side-effects in this simulation, and I also ignore any side-effects caused by the RF modulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Oct 29, 2011 6:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">Just a little question: the NES output come from the RF or composite cable for those pics?</div><br />Is not the difference only in whether it is modulated by the aerial carrier frequency (i.e. RF modulation) and whether the audio is also transmitted along it?</div>
<br />That, and the fact that RF is supposed to have a low-pass at 4.2 MHz, and the fact that RF tends to have more noise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Oct 30, 2011 10:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just want to say that I find it really cool that you are going this far to emulate the NES. Most people don't care about faithful video emulation.
<br />
<br />Why do flat areas have diagonal stripes though? I don't think my NES does this, or blargg's NTSC filter either.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 30, 2011 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Why do flat areas have diagonal stripes though?</div>
<br />Bisq and I discussed this on IRC, and it appears the filter for Y (luma) wasn't rejecting <em>all</em> of the chroma signal. The stopband attenuation around 3.6 MHz needed to be several dB greater. We tried switching to a 12-sample box filter for Y, and the stripes disappeared.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>7</strong> of <strong>10</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>