<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CHR-ROM vs. CHR RAM</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CHR-ROM vs. CHR RAM</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4806">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4806</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CartCollector</b> [ Sat Jan 31, 2009 12:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CHR-ROM vs. CHR RAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent">And one of the issues that I wanted advice on was CHR-ROM vs. CHR-RAM <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div> 
<br />
<br />This seems to be an issue that usually comes up with beginners who have learned about how the NES works and maybe written some programs for it. They eventually realize that a game that they want to make won't fit into the small memory of a mapperless (NROM) cartridge. So they first wonder what type of CHR memory to use, as this will greatly affect how the game is programmed and what is possible with the program. This topic will address the benefits of using each type of memory so that those just starting to make more complex NES games will have something to look at to decide which they want to use.
<br />
<br />BANKSWITCHED CHR-ROM:
<br />
<br />-Faster and easier to use. No need to load tiles into CHR memory, they are all there for you in ROM and if some tiles need to be switched out all one needs to do is write a few bits to the mapper. The small amount of time needed to switch banks frees up VBlank cycles which would otherwise be spent writing tiles to CHR-RAM.
<br />
<br />Possible advanced effects:
<br />
<br />-Storing non-graphics data in CHR-ROM. Can help save PRG-ROM.
<br />General method: The region of the CHR-ROM with the non-graphics data is read during VBlank or while PPU rendering is disabled. It can then be stored or decompressed into RAM. 
<br />-Requirements: Rendering must be off during reads.
<br />Examples: Super Mario Bros. (stores name table of title in CHR-ROM), some other NROM/CNROM games that I forgot
<br />
<br />-Switching between which tiles are displayed in the HUD and the game play area by using a raster interrupt. Allows more tiles to be displayed on screen at one time.
<br />General method: A bank full of text characters and other HUD-related tiles is switched to while the PPU is drawing the HUD and a bank full of game world-related tiles is switched to while the PPU is drawing the game play area.
<br />Requirements: HUD must be horizontally oriented, one raster interrupt between HUD and game play screen.
<br />Examples: ... crap I forgot, someone help me out here
<br />
<br />-Parallax scrolling without raster interrupts. Parallax scrolling is where things far away from the screen move slower than things closer to the screen. Using the CHR memory to do parallax scrolling frees up cycles for the processor to do other things and makes vertical and "window" parallax possible on the NES. If no raster interrupts are used it also makes it easier to play DMC samples in your game.
<br />General method: Banks containing parallax pattern are switched from bank to bank containing pattern in different scrolling positions to create a scrolling effect independent of the one made using the NES's scroll registers.
<br />Requirements: Pattern being parallax scrolled should repeat often - most games use 1- or 2-tile-wide patterns for this effect. Small bank sizes are desirable as they make it possible to use less memory for this effect.
<br />Examples: Batman: Return of the Joker (horizontal), Crisis Force (vertical), Metal Storm (window), Sword Master (window along with raster interrupt-based parallax)
<br />
<br />-Switching to banks of "blank tiles" during first and last 8 or 16 scanlines while using 4-way scrolling with vertical mirroring. Using 4-way scrolling without 4 nametables (ie in one-screen mode or with vertical or horizontal mirroring) creates glitches on the edges of the screen whenever the screen is scrolled in a direction that is mirrored. Horizontally mirrored games with 4-way scrolling, like Super Mario Bros. 3, have glitches on the horizontal edges. Vertically mirrored games with 4-way scrolling, like Super C, have them on the vertical edges. If one is making a game with 4-way scrolling and vertical mirroring, one way to remove the glitches is to use the following method, which doesn't need the PPU to ever be disabled.
<br />General method: During VBlank, all of the banks have been switched to the "blank tile" bank (bank filled with tiles whose bits are all set to zero) so that when the visible screen starts being drawn, only the blank tiles are fetched by the PPU. This makes the vertical mirroring with vertical scroll glitches impossible to see. Once 8/16 scanlines have been drawn, a raster interrupt triggers the 2A03 to switch the banks back to their normal values. Once there are only 8/16 scanlines before the screen is done being drawn, another interrupt triggers the 2A03 to switch the banks back to the blank tile bank, and the cycle begins anew.
<br />Requirements: No HUD made of background tiles, 2 raster interrupts (one for top and one for bottom) or at least very carefully timed code.
<br />Examples: Jurassic Park
<br />
<br />8k CHR-RAM:
<br />
<br />-Much more flexible. Instead of having to switch out big banks of 1k or more, CHR-RAM allows you to control every bit of every tile.
<br />-Can compress tiles to save memory. Tokumaru wrote a tile compressor that compresses tile data down to about 70% of the original size (<a href="http://nesdev.com/bbs/viewtopic.php?t=3347" class="postlink">link</a> and <a href="http://nesdev.com/bbs/viewtopic.php?t=3962" class="postlink">link</a>). So if you're using 128k of uncompressed tile data in a 256k UOROM you could compress the tile data down to around 90k and have 38k more PRG-ROM for whatever.
<br />-If you're making physical cartridges, you only need to program one chip.
<br />
<br />Possible advanced effects:
<br />
<br />-Parallax scrolling without raster interrupts. Parallax scrolling is where things far away from the screen move slower than things closer to the screen. Using the CHR memory to do parallax scrolling frees up cycles for the processor to do other things and makes vertical and "window" parallax possible on the NES. If no raster interrupts are used it also makes it easier to play DMC samples in your game.
<br />General method: Tiles containing parallax pattern are changed by 2A03 to create a scrolling effect independent of the one made using the NES's scroll registers.
<br />Requirements: Pattern being parallax scrolled should repeat often - most games use 1- or 2-tile-wide patterns for this effect. Lots of VBlank time is desirable as it makes it easier to update more tiles. Some games increase the VBlank for this purpose by disabling rendering at the top and bottom of the screen.
<br />Examples: Battletoads, Bee-52
<br />
<br />-Using 2A03 to render some of the screen. This makes drawing programs and 3D vector/polygon games possible on the NES. 
<br />-General method: Update tiles during VBlank with new screen.
<br />-Requirements: Lots of VBlank time for update - disabling PPU rendering at top and bottom of screen to extend VBlank is desirable, especially for NTSC games. Banked CHR-RAM is also desirable as it allows double buffering.
<br />-Examples: Color a Dinosaur, Videomation (drawing), Elite, Tank Demo (vector 3D), some projects by NesDev community
<br />
<br />BANKSWITCHED CHR-RAM:
<br />
<br />-Bankswitched CHR-RAM allows one to do most (if not all) of the techniques possible with bankswitched CHR-ROM and 8k CHR-RAM. However, there were few mappers produced during the NES's lifespan that had bankswitched CHR-RAM. The only one I can think of is CPROM, and that has only 32k of PRG-ROM. So most mappers using bankswitched CHR-RAM are custom-made by homebrewers. Examples: Garage Carts 1 and 2 (I think) and Glider.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jan 31, 2009 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I <a href="http://nesdevwiki.org/wiki/CHR_ROM_vs._CHR_RAM" class="postlink">rewrote this for the wiki</a>.
<br />
<br />But storing non-graphics data in CHR ROM to save PRG ROM isn't an advantage of CHR ROM; it's a workaround for fragmentation. With CHR RAM, you just don't have to worry about it as much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 31, 2009 7:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But storing non-graphics data in CHR ROM to save PRG ROM isn't an advantage of CHR ROM; it's a workaround for fragmentation. With CHR RAM, you just don't have to worry about it as much.</div>
<br />Storing data in CHR-RAM seems like an interesting way to get more than 2KB of RAM. If you can spare a few tiles, you could get enough memory to remember states of many objects.
<br />
<br />Even if you can access this extra RAM only during VBlank, game objects are usually activated and deactivated in small quantities, meaning that changes to this memory could be buffered and executed during VBlank without much sacrifice.
<br />
<br />What I mean is that CHR-RAM obviously can't be used for storing regular variables, but it's a good place to store tables that are manipulated few elements at a time or not very often.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Jan 31, 2009 11:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But storing non-graphics data in CHR ROM to save PRG ROM isn't an advantage of CHR ROM; it's a workaround for fragmentation. With CHR RAM, you just don't have to worry about it as much.</div><br />Storing data in CHR-RAM seems like an interesting way to get more than 2KB of RAM. If you can spare a few tiles, you could get enough memory to remember states of many objects.</div>
<br />
<br />Really? I thought reading from $2007 would give you garbage...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Feb 01, 2009 2:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But storing non-graphics data in CHR ROM to save PRG ROM isn't an advantage of CHR ROM</div><br />Yeah it is also possible to write non-graphics data in CHR-RAM, and read it back later, like Tokumaru said. The fact it would only be accessible during VBlank pretty much kills it but after thinking a little....<br />If you have levels that are compressed in ROM, you could decompress them into CHR-RAM before the level starts, where the screen is blanked, and then read the data from CHR-RAM and write it to nametables, and then write actual graphics on CHR-RAM and turn the screen on. That wouldn't work with levels scrolling over more than 2 screens. I'm sure clever things like that are possible.<br /><br />When it comes to what is on the wiki I have a few problems with that but I don't feel like editing it straight without discussing first :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(Only one MMC3 game had a board with MMC3 + CHR ROM + CHR RAM, and it was a Japan-exclusive RPG.) </div><br />Which game is mentionned here ? Pinbot is not a japanese RPG, nor is High-Q.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In some pseudo-3D games, each row of the floor texture can be stored in a separate bank. Racing games and things like 3D World Runner might have two to four banks; one forward-scrolling shooter called Cosmic Epsilon had dozens. </div>
<br />3D-Worldrunner uses CHR-RAM so it's relly not good to mention it in the list of advantages of CHR-ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Feb 01, 2009 6:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">When it comes to what is on the wiki I have a few problems with that but I don't feel like editing it straight without discussing first :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(Only one MMC3 game had a board with MMC3 + CHR ROM + CHR RAM, and it was a Japan-exclusive RPG.) </div><br />Which game is mentionned here ? Pinbot is not a japanese RPG, nor is High-Q.</div><br />Typo. I meant "CHR RAM + PRG RAM", and "Final Fantasy III". Fixing...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3D-Worldrunner uses CHR-RAM so it's relly not good to mention it in the list of advantages of CHR-ROM.</div>
<br />Fixed there too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 01, 2009 8:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I thought reading from $2007 would give you garbage...</div>
<br />The first byte is garbage, but the following ones are valid. While rendering is disabled, of course. How do you think commercial games used data that was stored in CHR-ROM (such as SMB's title screen data)? Quite a few CNROM games had data stored in CHR-ROM too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CartCollector</b> [ Sun Feb 01, 2009 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good job, and thanks for the link. I only see one problem:
<br />
<br /><div class="quotetitle">wiki wrote:</div><div class="quotecontent">A game that scrolls in all four directions will often have artifacts on one side of the screen because the NES doesn't have enough VRAM to keep the "seam" where new map data is loaded clean. To hide this, a game such as Jurassic Park might display tiles from a blank pattern table for the first 8 scanlines. </div>
<br />
<br />Jurrasic Park DOES do this, and it hides both the top and bottom 16 scanlines (taken from tokumaru's posts <a href="http://nesdev.com/bbs/viewtopic.php?t=4424" class="postlink">here</a> and <a href="http://nesdev.com/bbs/viewtopic.php?t=4320" class="postlink">here.</a>)
<br />
<br />Also, you might want to add something <a href="http://jonathan.microclub.ch/NES_raster/index.html" class="postlink">based on this</a> to the wiki.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>