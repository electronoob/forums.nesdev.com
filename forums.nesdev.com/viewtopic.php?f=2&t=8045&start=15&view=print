<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Generic compression on NES - *done*</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Generic compression on NES - *done*</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8045">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8045</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Aug 19, 2011 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dwedit, you claim that LZ78 allows random acess might be true, but still you need the whole dictionary in memory. In other words, you can immediately forget this if you don't want to use SRAM.
<br />
<br />However, I found on CSDb someone was mentioning a LZ77 variant that, instead to refer to (offset, lenght) references to previously decompressed output data, refers to (offset, length) references to compressed input data, so that this allows random access and removes the need for a RAM buffer larger than the small part of the file you want to decode.
<br />
<br />However, chances are that you'll have a harder time to find matching (offset,length) pairs in compressed data but who knowns.
<br />
<br />So, I'm thinking of the following compression shemes list (for now, might add some later) :
<br />- LZ77 variant with references to compressed data
<br />- TinyHuff : Huffman variant where the 7 most common values are represented with 2-8 bits, and all the others with 9 bits.
<br />- Xip 2,3,4,5 : The 2^n most common values are encoded on n+1 bits, while others are encoded with 9 bits.
<br />- Full huffman
<br />
<br />I'm also willing to do 6502 code that is as compact as possible, while being still decently fast. The size of the code will optionally be taken in account when comparing file sizes.
<br />
<br />I still hesitate between coding compression in C or Java or maybe something else...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Aug 19, 2011 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The dictionary sits in ROM, not RAM.  That's the whole purpose behind an explicit dictionary, you save RAM by only decoding what needs to exist in RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Fri Aug 19, 2011 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All this talk about LZ77 gave me some interesting inspiration:
<br />
<br />If you have linear levels (as in, you can only scroll "forwards" or "backwards", whichever directions those may be), you can design a variant of LZ77 that'll unpack the level as you're scrolling forwards, using the contents in ram as the sliding window.
<br />
<br />If you compress the stage twice (once from beginning to end, and again from end to beginning), you can allow the player to freely move forwards and backwards though a stage of virtually unlimited size, using the "forward stream" when moving forward, and the "backwards stream" when moving backwards.
<br />
<br />Ideally, the decompressor will unpack individual bytes as necessary, pausing when the screen stops scrolling, and stepping backwards if you allow backscrolling, so the position isn't lost.
<br />
<br />As for the actual compression ratio, you'd need to compress each level twice if you want 2-way scrolling, so it might not be terribly good storage wise, but it'd be incredible RAM wise, since you would only really need one page to store an entire screen's worth of metatiles for any given moment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Aug 19, 2011 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or just use LZ78 and not need a sliding window at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 19, 2011 3:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- TinyHuff : Huffman variant where the 7 most common values are represented with 2-8 bits, and all the others with 9 bits.</div><br />In other words, an entropy code with fixed probabilities. Other such codes include Golomb codes and gamma/exp-Golomb codes. The CHR codec I used for the MGC compo cart uses gamma codes for run lengths, except it swaps the code for the most common run length with the code for 1.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I still hesitate between coding compression in C or Java or maybe something else...</div>
<br />I have some example full-Huffman code in Python whose decoder shouldn't be too hard to translate into 6502. You said before that you're interested, but do you know Python?
<br />
<br />Dwedit: I haven't read about LZ78-style methods with a static dictionary other than metatiling, SMB-style object compression, and Huffword. Have you any interesting sources for me to read?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Aug 19, 2011 3:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Compressing the same data twice seems like a huge waste.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 19, 2011 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Compressing the same data twice seems like a huge waste.</div>
<br />Yet Blaster Master compresses its map data several times into metametametatiles.
<br />
<br />EDIT: Oh wait, you were talking about the bidirectional scrolling map compression. I guess object coding or metametametatiles might be a better option.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Aug 20, 2011 3:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">The dictionary sits in ROM, not RAM.  That's the whole purpose behind an explicit dictionary, you save RAM by only decoding what needs to exist in RAM.</div>
<br />That would be sweet. I've heard of static dictionary coders but I've never spent the time to track down and read up on the specifics. Can you describe or give us a reference on a good algorithm for crafting the dictionary of such a coder?
<br />
<br />Anyway, I don't see how LZ-78 is any better suited to static coding than LZ-77 is. I suppose you could write down the final LZ-78 dictionary to ROM but that would be much akin to just writing down the first LZ-77 window for use as a static dictionary. Besides, I rather think the NES is better suited to copying strings from a LZ-77 window than chasing down LZ-78 trees.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Sat Aug 20, 2011 12:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Compressing the same data twice seems like a huge waste.</div>
<br />I know, it was only an idea; if you had extremely tight RAM constraints, and <em>had to have</em> 2-way scrolling, then this is how I'd do it. You could just as easily drop the second compression if you were willing to have 1-way scrolling, like SMB.
<br />
<br />Metametameta tiles aren't too bad if you think about it, Tepples. If I recall correctly, Atlantis no Nazo compresses its stages into a sequence of screens that are sequences of metacolumns that are sequences of metatiles. It's pretty fast, too; the game will happy scroll at 16 pixels per second, if I remember right.
<br />
<br />This is probably a better option, I only posted my inspiration because it sounded neat. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Aug 20, 2011 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Rygar did that too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Aug 20, 2011 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Multilayer metatiling, or <a href="http://en.wikipedia.org/wiki/Quadtree" class="postlink">quadtree</a> map data storage, is fairly widespread in NES games. Mega Man series has a 2-layer quadtree (32x32 made up of four 16x16s, each made up of four 8x8s), Blaster Master has a 4-layer quadtree according to <a href="http://www.romhacking.net/docs/380/" class="postlink">this document</a>, and I seem to remember reading that one of tokumaru's Sonic-related projects has a 5-layer quadtree (256x256 down to 8x8).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Aug 20, 2011 1:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I know, it was only an idea; if you had extremely tight RAM constraints, and had to have 2-way scrolling, then this is how I'd do it. You could just as easily drop the second compression if you were willing to have 1-way scrolling, like SMB.</div><br />It's not like I'd do it. Remember, true LZ77 compression is not possible on the NES unless you have enough RAM for the whole sliding window, for small files that is basically the whole file.<br /><br />Instead, you can use any compression sheme that allows random acess and code level as a set of screens or rows or columns that you only decode one at once, and progressly advances as the player scrolls in any direction.<br /><br />Even if you when to store the data compressed twice, unless you can achieve more than 50% of compression, you'd end up having a better time not compressing at all ! Sorry but your idea wasn't a good one this time.<br /><br />Metametatiles isn't compressing the same data twice, it's just two layers of metatiles. I don't consider metatiles really compression, as the game designer really makes the game with metatiles in mind (instead of plain tiles).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have some example full-Huffman code in Python whose decoder shouldn't be too hard to translate into 6502. You said before that you're interested, but do you know Python?</div>
<br />I dont' know a thing abotu Python but why not. I'm open to anything, if you know a language you basically know them all. Although I'm typically confused when classes are used, which is why I prefer C over C++ as I feel like C++ is just a huge mess that didn't really improve C that much. Classes in Java are more oranized though, but I don't like how it forces all integers types to be signed and big endian.
<br />I'd really like to do all coders and decoders in high level, in addition to 6502 decoders.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Sat Aug 20, 2011 9:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's not like I'd do it. Remember, true LZ77 compression is not possible on the NES unless you have enough RAM for the whole sliding window, for small files that is basically the whole file.</div>
<br />
<br /> I've used 256byte and 512byte sliding window sizes with pucrunch before and had good results on the compression size. Again, I also used a ring/circular buffer so that's all the ram it took (the sliding window size).  Well, pucrunch also takes a small 16 byte array for a decoding table IIRC other than LZ stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Aug 21, 2011 11:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you don't use SRAM, even 512 bytes is a HUGE portion of the available memory. If you use SRAM however that will do the trick, but you'd have to decompress the file from the begining and go forward to the area you need just because you can't solve the backwards (lenght, offset) references otherwise... Unless you use the variant I mentioned that does references in the ROM compressed data instead of doing them in decompressed data, which allows random acess and uses no more RAM  than the buffer for the data you need.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Mon Aug 22, 2011 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Unless you use the variant I mentioned that does references in the ROM compressed data instead of doing them in decompressed data, which allows random acess and uses no more RAM  than the buffer for the data you need.</div>Random access is a bit of a stretch. You'd need to store (bit-)pointers to all potential access points and make sure they aren't straddled by match/literal runs.
<br />This is probably fine for dialogues in an RPG but it renders any sort of pointer arithmetic rather tricky, such as to display arbitrary chunks out of large two-dimensional tilemap arrays.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>