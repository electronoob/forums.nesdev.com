<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NESASM V3.01 giving syntax error for indirect address?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NESASM V3.01 giving syntax error for indirect address?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6588">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=6588</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Sun Jul 11, 2010 7:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NESASM V3.01 giving syntax error for indirect address?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Initially I tried something like below:
<br /><span style="color: green">STA (tempAdd),x</span>
<br />but this overwrote the memory location tempAdd instead.
<br />
<br />then I used '[' and ']' for indirect addressing:
<br /><span style="color: green">LDA  #$00</span>
<br /><span style="color: green">STA [tempAdd],x</span>
<br />but now the assmebler is giving error "Incorrect addressing mode":
<br />
<br />
<br />Should I use any other assembler?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jul 11, 2010 8:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The assembler is doing the correct thing: there is no LDA (addr),x mode on the processor.  You choices are:
<br />
<br />LDA (addr,x)
<br />LDA (addr),y
<br />
<br />And they are significantly different.  Please see <a href="http://www.obelisk.demon.co.uk/6502/addressing.html" class="postlink">http://www.obelisk.demon.co.uk/6502/addressing.html</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Jul 11, 2010 9:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shouldn't an assembler reject an instruction with an invalid addressing mode? Or is it supposed to accept lda #123,x,y,(z) foo bar simply because the lda #123 part would be valid?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jul 11, 2010 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Shouldn't an assembler reject an instruction with an invalid addressing mode?</div>
<br />The only time I can think of when an assembler changes the addressing mode is the change from indirect to absolute addressing. That's because 6502 assembly language uses the parentheses to indicate both grouping (within an expression) and indirection (around an expression). Here's how the assembler sees it:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #&#40;3+5&#41;&nbsp; &nbsp;; this matches lda #imm with imm being &#40;3+5&#41;<br />&nbsp; lda &#40;3+5&#41;,x&nbsp; ; this matches lda d,x with d being &#40;3+5&#41;<br />&nbsp; lda &#40;3+5&#41;,y&nbsp; ; this matches lda &#40;d&#41;,y with d being 3+5<br /></div>
<br />I think that's why NESASM uses [d] for indirection, as it resembles the indexing operator in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Sun Jul 11, 2010 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1) When using the below code to get the address of the compressed map:
<br />
<br /><span style="color: green">;load compressed map initial address<br />	LDA  #&lt;CompMapBuffer<br />        STA  mapPtr2<br />	LDA  #&gt;CompMapBuffer<br />        STA  mapPtr2+1<br />	RTS</span>
<br />
<br />getting below error:
<br /><span style="color: red">NES Assembler (v3.01)<br /><br />pass 1<br />#[1]   room2.asm<br />  754  00:C42A                    LDA  #&lt;CompMapBuffer<br />       Syntax error in expression!<br />  756  00:C42D                    LDA  #&gt;CompMapBuffer<br />       Syntax error in expression!<br /># 2 error(s)</span>
<br />
<br />
<br />Note: CompMapBuffer has been defined in the CHR area. i.e. under:
<br /><span style="color: green">  .bank 1<br />  .org $E000</span>
<br />
<br />2)When I try to use something like <span style="color: green">LDA  #$&lt;CompMapBuffer</span>, nesasm does not give any syntax error but the code does not load the expected address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 11, 2010 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What were the developers of NESASM smoking when they decided that it was a good idea to use different syntax than what was already established as the standard?
<br />
<br />I say guides should stop using this assembler. Too many newbies have problems because of how weird it is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Jul 11, 2010 2:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nadir, you want this:
<br />
<br />lda #low(CompMapBuffer)
<br />sta mapPtr2
<br />lda #high(CompMapBuffer)
<br />sta mapPtr2+1
<br />
<br />You should probably be reporting these "problems" to the NESASM folks -- I don't think there's anything people here can do about the shortcomings of the assembler.  I'm convinced people use it just because it's called "NESASM" and they think "Oh, an assembler for the NES, it'll be awesome!"  Bzzt.  Also be aware version 3.x of this assembler has known problems with things like long labels and other whatnots.  It's a "preview" release, not that that means much.
<br />
<br />I've harped on this in the past, and I'll do so again: <a href="http://www.nespowerpak.com/nesasm/usage.txt" class="postlink">it's the responsibility of the programmer to be (or become) familiar with the assembler they use</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Mon Jul 12, 2010 9:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks koitsu... 
<br />that info helped me move a bit ahead. But I am stuck again.
<br />
<br />I want to write accumulator to the address held in mapPtr1 using something like below:
<br />
<br />STA (mapPtr1,x)
<br />
<br />**mapPtr1 is in ZERO page and x holds the offset of current byte to be written to the uncompressed map. Below is the section of my program trying to decompress the compressed(RLE) map onto a location in RAM. The code in bold is the one I am getting error in. I dont know the exact syntax of this wrt NESASM.
<br />
<br />
<br /><span style="color: cyan">**************<br />DecompressRLE:<br />;**************<br /> LDX  #$00		<br /> STX  mapBuffPtr<br /> LDY  #$00                 <br />RLENxt:	<br /> LDA  [mapPtr2],y	<br /> BMI  RLInit               <br /> LDX  mapBuffPtr        <br /> BEQ  DecompRLEExit  <br /> <strong>STA  [mapPtr1,x]</strong>        <br /> INX<br /> JMP  RLRepeat	<br />RLInit:<br /> AND  #%01111111   <br /> CLC<br /> ADC  mapBuffPtr<br /> STA  targetPos         <br /> INY	               <br /> LDA  [mapPtr2],y     <br /> LDX  mapBuffPtr      	<br />RLLoop:	<br /> <strong>STA  [mapPtr1,x]</strong><br /> INX<br /> CPX  targetPos		<br /> BNE  RLLoop<br />RLRepeat: <br /> CPX #$00	               <br /> BEQ  DecompRLEExit<br /> STX  mapBuffPtr       <br /> INY                         <br /> JMP  RLENxt<br />DecompRLEExit:<br /> RTS</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Mon Jul 12, 2010 9:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can somebody please point to me to a better assembler(download link  please). I have seen in a few posts that asm6 is better?? 
<br />
<br />Cheers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Mon Jul 12, 2010 9:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nadia wrote:</div><div class="quotecontent">Thanks koitsu... <br />that info helped me move a bit ahead. But I am stuck again.<br /><br />I want to write accumulator to the address held in mapPtr1 using something like below:<br /><br />STA (mapPtr1,x)<br /><br />**mapPtr1 is in ZERO page and x holds the offset of current byte to be written to the uncompressed map. Below is the section of my program trying to decompress the compressed(RLE) map onto a location in RAM. The code in bold is the one I am getting error in. I dont know the exact syntax of this wrt NESASM.<br /><br /><br /><span style="color: cyan">**************<br />DecompressRLE:<br />;**************<br /> LDX  #$00		<br /> STX  mapBuffPtr<br /> LDY  #$00                 <br />RLENxt:	<br /> LDA  [mapPtr2],y	<br /> BMI  RLInit               <br /> LDX  mapBuffPtr        <br /> BEQ  DecompRLEExit  <br /> <strong>STA  [mapPtr1,x]</strong>        <br /> INX<br /> JMP  RLRepeat	<br />RLInit:<br /> AND  #%01111111   <br /> CLC<br /> ADC  mapBuffPtr<br /> STA  targetPos         <br /> INY	               <br /> LDA  [mapPtr2],y     <br /> LDX  mapBuffPtr      	<br />RLLoop:	<br /> <strong>STA  [mapPtr1,x]</strong><br /> INX<br /> CPX  targetPos		<br /> BNE  RLLoop<br />RLRepeat: <br /> CPX #$00	               <br /> BEQ  DecompRLEExit<br /> STX  mapBuffPtr       <br /> INY                         <br /> JMP  RLENxt<br />DecompRLEExit:<br /> RTS</span></div>
<br />
<br />EDIT: Okay, the docs I found online are flat out wrong (thanks again GBAGuy!  Sheesh...), so I found the <a href="http://www.magicengine.com/mkit/" class="postlink">official site for NESASM</a> (it's part of MagicKit) and read the docs.  DOC\NES\CPU_INST.TXT states:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; Operand syntax<br />&nbsp; &nbsp; --------------<br />&nbsp; &nbsp; &nbsp; &nbsp; A&nbsp; &nbsp; &nbsp; &nbsp; accumulator<br />&nbsp; &nbsp; &nbsp; &nbsp; #i&nbsp; &nbsp; &nbsp; &nbsp;immediate<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;n&nbsp; &nbsp; &nbsp; &nbsp;zero page<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;n,X&nbsp; &nbsp; &nbsp;zero page indexed by X<br />&nbsp; &nbsp; &nbsp; &nbsp; &lt;n,Y&nbsp; &nbsp; &nbsp;zero page indexed by Y<br />&nbsp; &nbsp; &nbsp; &nbsp; &#91;n&#93;&nbsp; &nbsp; &nbsp; indirect &#40;*&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#91;n,X&#93;&nbsp; &nbsp; indirect pre-indexed by X &#40;*&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#91;n&#93;,Y&nbsp; &nbsp; indirect zero page post-indexed by Y<br />&nbsp; &nbsp; &nbsp; &nbsp; r&nbsp; &nbsp; &nbsp; &nbsp; relative<br />&nbsp; &nbsp; &nbsp; &nbsp; n&nbsp; &nbsp; &nbsp; &nbsp; absolute<br />&nbsp; &nbsp; &nbsp; &nbsp; n,X&nbsp; &nbsp; &nbsp; absolute indexed by X<br />&nbsp; &nbsp; &nbsp; &nbsp; n,Y&nbsp; &nbsp; &nbsp; absolute indexed by Y<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &#40;*&#41; can be zero page or absolute<br /></div>
<br />
<br />This syntax is a joke.  This assembler is also 10 years old.  Let's hear it for DOS.
<br />
<br />I would recommend getting rid of this assembler entirely.  Peruse the <a href="http://wiki.nesdev.com/w/index.php/Tools" class="postlink">relevant section of the nesdev Wiki</a> to find an alternate you like.  Matter of personal preference, but I can't stand cc65.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 12, 2010 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A good replacement for NESASM is <a href="http://home.comcast.net/~olimar/NES/asm6.zip" class="postlink">ASM6</a>. It's just as simple to use, but doesn't have the same stupid errors and limitations. There are more "professional" assemblers out there, but those are the kind that require several configurations (like setting SEGMENTS and LINKING stuff, I could never understand how that works) before you can make them output anything you can run, so I use ASM6 for all my 6502 needs. 
<br />
<br />If you decide to convert your NESASM sources to ASM6, the first thing you'll notice is that there is no <strong>.bank</strong> directive, so you'll have to use <strong>.org</strong> (and <strong>.base</strong>, if you're using bankswitching) instead to control how PRG and CHR are organized. I have posted <a href="http://nesdev.com/bbs/viewtopic.php?t=6160" class="postlink">ASM6 templates</a> for 3 common mappers, by looking at them you can have an idea of how programs can be organized.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Jul 12, 2010 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only problem with ASM6 is that if you have one mistake, it generates about 50000 errors.  I've made patches to the C code to suppress most of the bogus errors if anyone wants them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 12, 2010 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nadia wrote:</div><div class="quotecontent">I want to write accumulator to the address held in mapPtr1 using something like below:<br /><br />STA (mapPtr1,x)<br /><br />**mapPtr1 is in ZERO page and x holds the offset of current byte to be written to the uncompressed map.</div>
<br />I think you didn't understand how this addressing mode works. STA (Pointer, X) will add X to Pointer (as opposed to the value <strong>at</strong> Pointer, like happens with STA (Pointer), Y) in order to get the actual pointer, which means X is not indexing <strong>data</strong>, it's indexing <strong>pointers</strong>. This addressing mode is only useful if you have a series of pointers and you want the value in X to select which pointer will be used. If I understood correctly, this is not what you want. Actually I think this is the least used addressing mode of the 6502, it's not very useful.
<br />
<br />Do you really need a pointer for outputting the decompressed data? I mean, it's understandable that you use a pointer for reading the data, since maps can be scattered across the whole ROM, but often we have a specific area in RAM where they are decompressed to, and this area is up to 256 bytes large you can use absolute indexed addressing (STA Map, X), no need for pointers.
<br />
<br />If you actually need to use a pointer (which is the case if your maps can be decompressed to an area larger than 256 bytes), you'll have to use Y. And since Y is also used for reading, you'll have to constantly save and load Y in order to use it for both reading and writing.
<br />
<br />The only other way I can think of is if you keep X as 0 when doing STA (Pointer, X) and increment the low byte of Pointer instead of incrementing X. If X is always 0 when these write occur, it will not make a difference when added to the pointer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jul 12, 2010 6:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">The only problem with ASM6 is that if you have one mistake, it generates about 50000 errors.</div>
<br />I'm not bothered by that... I just look at the first error and fix it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jul 12, 2010 6:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">STA (Pointer, X) will add X to Pointer (as opposed to the value <strong>at</strong> Pointer, like happens with STA (Pointer), Y) in order to get the actual pointer, which means X is not indexing <strong>data</strong>, it's indexing <strong>pointers</strong>. This addressing mode is only useful if you have a series of pointers and you want the value in X to select which pointer will be used. If I understood correctly, this is not what you want. Actually I think this is the least used addressing mode of the 6502, it's not very useful.</div><br />You're right that it's specialized, but let me give a couple examples where it might come in handy: I have used (d,x) mode in LJ65's music engine to track pointers associated with four sound channels, for x in [0, 4, 8, 12]. I can also see where it might be useful for, say, decompressing a bunch of run-length-encoded metatile rows of a scrolling map in parallel.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you really need a pointer for outputting the decompressed data?</div>
<br />One might. Here are examples from my own projects: In a book reader, each text page can be up to 1280 bytes long, sitting at $0300-$07FF. In a side-scrolling game engine, the active window is 384 bytes (32x12 metatiles). But then I agree that (d),y mode is more useful for these cases.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>