<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=11978" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-11-01T19:57:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=11978</id>
<entry>
<author><name><![CDATA[Dimeback]]></name></author>
<updated>2014-11-01T19:57:55-07:00</updated>
<published>2014-11-01T19:57:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135870#p135870</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135870#p135870"/>
<title type="html"><![CDATA[Re: Dimeback's Thread of Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135870#p135870"><![CDATA[
Thanks for all the responses. The general answer I seem to be getting from this is to focus on building my current knowledge until I feel comfortable, and with my game not being very far in development, I'll try and see what more I can do from here.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6265">Dimeback</a> — Sat Nov 01, 2014 7:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2014-11-01T19:23:30-07:00</updated>
<published>2014-11-01T19:23:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135866#p135866</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135866#p135866"/>
<title type="html"><![CDATA[Re: Dimeback's Thread of Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135866#p135866"><![CDATA[
What tokumaru says is true. Programming is logic. It is about clearly defining the result you want and using the tools available in the language you're using to get that result. Code written by a C++ programmer in C++ and code written in 6502 programmer in 6502 might have a wildly different method to get the same result. But all that matters is that that result is gotten. If you understand how to define a thing that can be programmed, you'll be able to make it in any language by simply looking up how said language accomplishes the basic pieces of programming (math, loops, conditionals, stealing tokumaru's paranthesis, etc.) I've helped many a friend do things in languages I had no idea about 5 seconds before they asked me. Programming skill comes from something above the language.<br /><br />There's still some weird meta stuff when switching between/learning both, like that branches and if statements are sort of inversed. An if statement runs the code below if true, a branch skips the code below if the branch condition is true. But things like this can be overcome by not getting hung up on reimplementing a way of doing things from high level to low level or vice versa. Think of the result you want, and how to get it with what's there. Don't think about how you got the result in that other thing.  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> There will be some gotchas if you learn one then attempt the other either way. If you start with 6502, you may wonder where including binaries went in something high level. If you start with something high level, you may wonder where your local variables, multiplication, division and floats went.<br /><br />For what it's worth, I'd say start with just 6502 assembly language. I started with higher level things, then learned 6502 and it filled so many gaps in my knowledge. I did used to make fairly complex programs despite these gaps... I made my own scripting language/parser. Yet I didn't know about bitwise operators, heh. And I used pointers in a by the book way, but now I really understand pointers, and pointers to pointers and how arrays and pointers are really accessed/stored. Same with classes, and all kinds of other things that used to seem kind of &quot;magic.&quot; Learning 6502 will give you true understanding of things that are sort of hand waved in a high level language. <br /><br />If you plan to make anything complex for NES, you will probably need to learn something higher level eventually, though. I would have gone crazy if I needed to write the things I use for text compression or level creation in 6502. Even worse is laying out the data by hand.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sat Nov 01, 2014 7:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-01T18:59:41-07:00</updated>
<published>2014-11-01T18:59:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135862#p135862</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135862#p135862"/>
<title type="html"><![CDATA[Re: Dimeback's Thread of Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135862#p135862"><![CDATA[
I learned the basics of programming (looping, decision, subroutines, etc.) in Applesoft BASIC on an Apple IIe before I learned 6502 assembly. Back then there were plenty of books in the library on how to integrate assembly subroutines with the BASIC runtime, so I could make part-BASIC, part-assembly programs. Then I learned structured programming (local variables, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">while</tt> instead of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">goto</tt>, etc.) in QBasic and Turbo C, after which point I felt confident enough to write an entire program in 6502 assembly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Nov 01, 2014 6:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-11-01T18:46:25-07:00</updated>
<published>2014-11-01T18:46:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135859#p135859</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135859#p135859"/>
<title type="html"><![CDATA[Re: Dimeback's Thread of Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135859#p135859"><![CDATA[
A good programmer isn't one that knows many programming languages, but one that masters all the logic that makes programs work. The most important things you have to learn if you want to make games is logic and program flow (i.e. math, loops, conditionals, etc.) and data structures (arrays, pointers, lists, stacks, etc.). Once you master that, in whatever language you choose, you'll be equipped to make a game. ASM isn't difficult by itself, after all it's just a language you use to communicate with the system, but there's no point in learning the language if you don't know WHAT you have to say to the system. <br /><br />Some people are comfortable with learning ASM as their first language, but if you're liking high level languages better, you can certainly learn a lot about what makes games tick with them and go back to the ASM later. ASM will certainly look much less intimidating once you're better acquainted with how programming in general works.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Nov 01, 2014 6:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dimeback]]></name></author>
<updated>2014-11-01T18:31:45-07:00</updated>
<published>2014-11-01T18:31:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135857#p135857</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135857#p135857"/>
<title type="html"><![CDATA[Dimeback's Thread of Questions]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11978&amp;p=135857#p135857"><![CDATA[
I have decided that all future questions I shall ask, I will keep in one thread.<br /><br />My first question is one directed towards NES programmers. Since I had such a determination to program for the NES, ASM was the first programming language I attempted to learn. I've been able to figure out a lot of things thanks to all the tutorials I've read on programming for the NES. I was developing a game, but I halted the process because I'm really not sure where to go and how I'm going to get any farther. Anything I want to do at this point just seems so far out there from what I currently know and have done. It occurred to me what a low level programming language I was dealing with when I explored C++. It seemed like tasks that would normally require several lines of code in ASM could be done in just a few lines in a higher level programming language. This brings me to my question: Would it help my ability to program for the NES if I knew a high level programming language? From what I've seen in these programming languages, it seems like programming for the NES would be easier if I knew a high level programming language alongside of ASM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6265">Dimeback</a> — Sat Nov 01, 2014 6:31 pm</p><hr />
]]></content>
</entry>
</feed>