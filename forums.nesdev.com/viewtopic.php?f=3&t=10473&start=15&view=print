<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Debugging the cpu core</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Debugging the cpu core</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10473">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10473</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Sep 10, 2013 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Nintendulator's log doesn't even make sense, or it's lying about the value read from $2002.</div><br />I believe this explains the $FF values:<br /><div class="quotetitle">NES Stuff by Quietust wrote:</div><div class="quotecontent">I suspect some confusion may have arisen from the fact that Nintendulator's debugger displays values of $FF within ExRAM even while executing - this is not what the CPU is actually executing, but it is what the debugger shows whenever it is viewing a region of memory it believes to contain I/O registers..</div><br /><!-- m --><a class="postlink" href="http://www.qmtpro.com/~nes/">http://www.qmtpro.com/~nes/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Tue Sep 10, 2013 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Nintendulator's log doesn't even make sense, or it's lying about the value read from $2002.</div><br /><br />Exactly.  I have no idea what how it's getting those results since they look nothing like what I'm expecting.<br /><br /><div class="quotetitle">NES Stuff by Quietust wrote:</div><div class="quotecontent">I suspect some confusion may have arisen from the fact that Nintendulator's debugger displays values of $FF within ExRAM even while executing - this is not what the CPU is actually executing, but it is what the debugger shows whenever it is viewing a region of memory it believes to contain I/O registers..</div><br /><br />Well that's great.  So there is no way to know what nestendulator is actually doing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 10, 2013 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It'd be better to make a log of the core CPU test that doesn't do any PPU stuff. It has a different starting address.<br /><br />Hmmm, I see that the <a href="http://wiki.nesdev.com/w/index.php/Emulator_tests#CPU" class="postlink">one mentioned on the wiki</a> does just this, and has no $2002 reads in the log. This is the way to go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Grapeshot</b> [ Tue Sep 10, 2013 9:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />$2002 is a read only PPU register and reading it has some effects on the PPU, which is why Nintendulator's debugger doesn't display it correctly, because reading it from the debugger might cause side effects and there is no extra read-with-no-side-effects function for the debugger to use. <br /><br /><s>If the tests are looping on $2002 that would indicate that the test is done and it&#39;s trying to print the results of the test to the PPU. I&#39;m not sure how that is happening if you don&#39;t see any output written at $6000 since that should happen first.</s><br /><br />edit: actually I went ahead and made a log of test 03 to compare with what you are seeing, and it looks like the test is checking for the existence of a PPU by looping for a few frames and seeing if that flag ever changes. You can ignore differences with Nintendulator on that part of the test and move on to line 27,000 or so of the log. (See why I said you needed a robust diff tool to analyze these?)<br /><br />The place where you were actually failing the test is around line 35,000 where this block of code is executed:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">E373 A0 LDY #$07&nbsp; &nbsp; &nbsp; &nbsp; PC:E374 A:BF X:8C Y:00 P:27 SP:9C CYC:109 SL:244<br />E375 84 STY $29&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E376 A:BF X:8C Y:07 P:25 SP:9C CYC:115 SL:244<br />E377 B9 LDA $E222,y&nbsp; &nbsp; &nbsp;PC:E378 A:BF X:8C Y:07 P:25 SP:9C CYC:124 SL:244<br />E37A 8D STA $03A1&nbsp; &nbsp; &nbsp; &nbsp;PC:E37B A:FF X:8C Y:07 P:A5 SP:9C CYC:136 SL:244<br />E37D A6 LDX $21&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E37E A:FF X:8C Y:07 P:A5 SP:9C CYC:148 SL:244<br />E37F 9A TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E380 A:FF X:90 Y:07 P:A5 SP:9C CYC:157 SL:244<br />E380 B9 LDA $E222,y&nbsp; &nbsp; &nbsp;PC:E381 A:FF X:90 Y:07 P:A5 SP:90 CYC:163 SL:244<br />E383 8D STA $03A1&nbsp; &nbsp; &nbsp; &nbsp;PC:E384 A:FF X:90 Y:07 P:A5 SP:90 CYC:175 SL:244<br />E386 A5 LDA $1D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E387 A:FF X:90 Y:07 P:A5 SP:90 CYC:187 SL:244<br />E388 48 PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E389 A:00 X:90 Y:07 P:27 SP:90 CYC:196 SL:244<br />E389 A5 LDA $1E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E38A A:00 X:90 Y:07 P:27 SP:8F CYC:205 SL:244<br />E38B A6 LDX $1F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E38C A:FF X:90 Y:07 P:A5 SP:8F CYC:214 SL:244<br />E38D A4 LDY $20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E38E A:FF X:00 Y:07 P:27 SP:8F CYC:223 SL:244<br />E38F 28 PLP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E390 A:FF X:00 Y:01 P:25 SP:8F CYC:232 SL:244<br />E390 4C JMP $03A0&nbsp; &nbsp; &nbsp; &nbsp;PC:E391 A:FF X:00 Y:01 P:20 SP:90 CYC:244 SL:244<br />03A0 A9 LDA #$FF&nbsp; &nbsp; &nbsp; &nbsp; PC:03A1 A:FF X:00 Y:01 P:20 SP:90 CYC:253 SL:244<br />03A2 4C JMP $E393&nbsp; &nbsp; &nbsp; &nbsp;PC:03A3 A:FF X:00 Y:01 P:A0 SP:90 CYC:259 SL:244<br />E393 08 PHP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC:E394 A:FF X:00 Y:01 P:A0 SP:90 CYC:268 SL:244</div><br /><br />Basically what's going on here is that the test is copying some data to RAM that was generated previously in the test, and then jumping to its location. The data itself happens to be a jump to the next portion of the test. So either your CPU can't execute code from RAM, or the wrong data is being copied to this location at some point, which could be caused by a bug thousands of lines previously in the log.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Tue Sep 10, 2013 11:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">It'd be better to make a log of the core CPU test that doesn't do any PPU stuff. It has a different starting address.<br /><br />Hmmm, I see that the <a href="http://wiki.nesdev.com/w/index.php/Emulator_tests#CPU" class="postlink">one mentioned on the wiki</a> does just this, and has no $2002 reads in the log. This is the way to go.</div><br /><br />My cpu passes that test up until the illegal opcodes come in.  Once those start, if I have my illegal opcodes turned off, the PC counter gets off once the first illegal opcode shows up.  If I have my illegal opcodes turned on, I pass up until I get to DCP instruction and then I couldn't figure out what Nintendulator was doing with the processor flags (I didn't know what I was comparing).  At that point I was told to go to your tests since the illegal opcodes would just print out as a wrong so I could focus on the official opcodes.<br /><br />As for grapeshot:  my core does fail in that $2002 loop.  A BMI instruction breaks out of the loop in Nintendulator that mine never does, so the PC is always off from that line on in the debugging file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Grapeshot</b> [ Tue Sep 10, 2013 11:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Like I said, it's breaking out of the loop because the PPU sets the VBlank flag in the $2002 register. It has nothing to do with the correctness of your CPU code, you just haven't emulated any of the PPU yet. Maybe try to get the PPU registers working properly and write some code to display the nametable, and try to run Balloon Fight.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Wed Sep 11, 2013 12:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll mess with that tomorrow I suppose.  I have a PPU written that has code for displaying nametables, but it doesn't work nearly as well as I'd hoped.  When a test passes, I just get a solid white line down down the right side of the screen.  Donkey Kong used to display a bunch of light blue rectangle all over the screen, but it doesn't do that anymore.  I was hoping to get the CPU 100% nailed down before I try to figure out why the PPU doesn't work right for the 50th time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Thu Sep 12, 2013 12:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well Grapeshot, you were right.  The ppu timing is off just enough that I'm not passing the BIT tests when I need to.  Time to figure out why my ppu timing isn't right like I had thought it was.<br /><br />Edit: I'm happy to report that I do get output now on 03-immedaite.  I'm missing the illegal opcodes but none of the official opcodes.  Unfortunately, my PPU still doesn't set the vblank bit at the right time, so I'm getting a segmentation error since the PC gets off.  I'll work on that more tomorrow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Sat Sep 21, 2013 12:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Almost no progress to report this week.  I spent a lot of time trying to figure out some financial problems that I had for school, so I didn't really work on this at all.  I'm starting school again a week, so I doubt I'll get this thing running anything before then.  I'll be taking systems programming fall term, so maybe that will help me when I come back to this project over winter break.<br /><br />Edit: Worked on the core tonight and got the nestest to pass.  No errors at all.  I still can't pass blarg's tests because of PPU timing.  The vblank flag somehow isn't being set on the right cycle, so I'll be working on that this week.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Wed Sep 25, 2013 3:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For some reason my BRK instruction is not working correctly.   I can't for the life of me figure out why.  For some reason, the PC just goes to some crazy wrong value.  What am I doing wrong?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">case 0x00:&nbsp; &nbsp;//BRK<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;data = ((PC &amp; 0xFF00) &gt;&gt; 8);&nbsp; &nbsp;&nbsp; &nbsp;//Push high byte first<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;pushStack(memory, data, ppu);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;data = PC &amp; 0xFF;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;pushStack(memory, data, ppu);&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Bit-----7--6--5--4--3--2--1--0 PHP always has B and bit 5 true<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Order = N, V, 1, B, D, I, Z, C<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;statusFlags&#91;0&#93; = C, statusFlags&#91;1&#93; = Z, statusFlags&#91;2&#93; = I, statusFlags&#91;3&#93; = D,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;statusFlags&#91;4&#93; = 1, statusFlags&#91;5&#93; = 1, statusFlags&#91;6&#93; = V, statusFlags&#91;7&#93; = N;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;statusByte = encodeBits(statusFlags);&nbsp; &nbsp;//Puts the status flags into a<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;pushStack(memory, statusByte, ppu);&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//byte&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PC = (memory-&gt;readRAM(0xFFFF, ppu) &lt;&lt; 8);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PC += memory-&gt;readRAM(0xFFFE, ppu);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;I = true;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;debugImplied(ppu, opcode, &quot;BRK&quot;);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;cycles = cycleCount&#91;opcode&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;break;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Wed Sep 25, 2013 8:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Try adding 1 to the PC before pushing it onto the stack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Sep 25, 2013 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Per official WDC documentation (pay close attention to the very first and last lines):<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The program counter is incremented by two, then pushed onto the stack; the status register, with the b break flag set, is pushed onto the stack; the interrupt disable flag is set; and the program counter is loaded from the interrupt vector at $FFFE-FFFF. It is up to the interrupt handling routine at this address to check the b flag in the stacked status register to determine if the interrupt was caused by a software interrupt (BRK) or by a hardware IRQ, which shares BRK vector but pushes the status register onto the stack with the b break flag clear.<br />...<br />BRK is 1 byte, but program counter value pushed onto stack is incremented by 2 allowing for optional signature byte.<br /></div><br />I should note the &quot;signature byte&quot; is not really &quot;optional&quot; despite how this is worded.  Assemblers/disassemblers which simply print &quot;BRK&quot; (rather than BRK $xx) are quite simply wrong.  :-)<br /><br />Regarding the flags which are set that are pushed onto the stack, this has been discussed on the forum before, and I even verified using an actual 65816 (in 65c02 emulation mode (the behaviour here is the same as 6502)) and made a video:<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6597">viewtopic.php?f=3&amp;t=6597</a><!-- l --> (READ THE ENTIRE THREAD, DO NOT SKIM IT)<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=1BWJ2vDr8v8">http://www.youtube.com/watch?v=1BWJ2vDr8v8</a><!-- m --><br /><br />You're welcome.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 25, 2013 4:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I should note the &quot;signature byte&quot; is not really &quot;optional&quot; despite how this is worded.  Assemblers/disassemblers which simply print &quot;BRK&quot; (rather than BRK $xx) are quite simply wrong.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /></div><br />It depends on what the BRK handler does. My understanding is that BRK was often used for debugging or to patch ROMs, so that the BRK handler never merely executed an RTI when it was done, rather it checked a table of patches based on the address. If one used BRK in source code, one might have the handler decrement the return address so that it became a one-byte instruction. Or one could do a PLP then RTS to have it become a three-byte instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Sep 25, 2013 6:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regardless of the BRK handler, PC+2 is still pushed onto the stack by the processor.  What the BRK handler wants to do after its called is purely up to the author of the 6502 code itself; but the processor still pushes PC+2 for that &quot;signature byte&quot;.<br /><br />This is even covered in the <a href="http://archive.6502.org/datasheets/synertek_programming_manual.pdf" class="postlink">6502 Programming Manual</a> -- see page 145 (or page 156 in the PDF itself), 2nd paragraph (gotta read the whole thing).  The same document mentions how BRK can be used to patch/tinker with existing code (page 144 (page 155 in PDF)).  However, the example code given on page 145 is incorrect/wrong (it says &quot;BRK 00&quot; when it should just say &quot;BRK&quot; (or more accurately, &quot;BRK 05&quot; for $FC21, then proceed onward with $FC23)).<br /><br />It's pretty remarkable how often this gets mucked up, simply because not a lot of people bother to use BRK.<br /><br />I should note I would not be surprised if there were some 6502 CPUs out there (somewhere) which really did do PC+1 instead and did not support the &quot;signature byte&quot;, but at least in the case of the NES/FC (and the Apple II series) the processor pushes PC+2.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 25, 2013 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Debugging the cpu core</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hadn't realized that people's emulators/disassemblers handled it wrong (looks like my disassembler shows the byte: &quot;BRK #n&quot;).<br /><br />Pushing PC+1 would actually be the better behavior for all uses. When used as a syscall with the second byte the selector, the handler could just pop the return address and examine the byte there to get the selector (rather than having to decrement it), and when returning, do PLP; RTS to skip the selector byte without any mucking around.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>