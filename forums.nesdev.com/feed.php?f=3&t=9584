<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=9584" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-01-22T08:35:26-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=9584</id>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2014-01-22T08:35:26-07:00</updated>
<published>2014-01-22T08:35:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124322#p124322</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124322#p124322"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124322#p124322"><![CDATA[
<div class="quotetitle">James wrote:</div><div class="quotecontent"><br />One other thing to keep in mind: the highest frequency the APU will generate is ~447kHz.  Therefore, instead of outputting a sample every cycle, you can output every other cycle (i.e., sample rate = 1.79MHz/2 = ~895kHz) and not exceed the Nyquist limit.<br /></div><br /><br />Yes. I did it in my emu.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Jan 22, 2014 8:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[James]]></name></author>
<updated>2014-01-22T08:22:28-07:00</updated>
<published>2014-01-22T08:22:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124320#p124320</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124320#p124320"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124320#p124320"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Zelex wrote:</div><div class="quotecontent">Which games use the APU IRQ interrupt?<br /></div><br />I can think of at least Fire Hawk, MiG, Time Lord, and a couple demos that I made.</div><br />Just to clarify, those games rely on DMC IRQs.  If Zelex is referring to frame IRQs, Dragon Quest relies on them (will hang after battle otherwise).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=88">James</a> — Wed Jan 22, 2014 8:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[James]]></name></author>
<updated>2014-01-22T08:00:24-07:00</updated>
<published>2014-01-22T08:00:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124319#p124319</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124319#p124319"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124319#p124319"><![CDATA[
One other thing to keep in mind: the highest frequency the APU will generate is ~447kHz.  Therefore, instead of outputting a sample every cycle, you can output every other cycle (i.e., sample rate = 1.79MHz/2 = ~895kHz) and not exceed the Nyquist limit.  This will reduce CPU requirements for mixing and filtering.<br /><br />I haven't tried this yet, but you should be able to reduce this to every third cycle.  There will be aliasing, but it won't affect frequencies below ~150kHz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=88">James</a> — Wed Jan 22, 2014 8:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-01-22T07:18:48-07:00</updated>
<published>2014-01-22T07:18:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124317#p124317</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124317#p124317"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124317#p124317"><![CDATA[
<div class="quotetitle">Zelex wrote:</div><div class="quotecontent"><br />Which games use the APU IRQ interrupt?<br /></div><br />I can think of at least Fire Hawk, MiG, Time Lord, and a couple demos that I made.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jan 22, 2014 7:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ReaperSMS]]></name></author>
<updated>2014-01-21T21:14:00-07:00</updated>
<published>2014-01-21T21:14:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124301#p124301</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124301#p124301"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124301#p124301"><![CDATA[
For the DMC, you'd trigger a catchup whenever the DMC ticked over to a new byte. Seeing as how that can't be any less than 432 6502 cycles between them, that probably won't have serious performance implications.<br /><br />If it did, you could also possibly get by with just doing the DMC memory access at that time, and stuff those bytes into a queue to be caught up when the rest of it needs it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8">ReaperSMS</a> — Tue Jan 21, 2014 9:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-01-21T20:16:17-07:00</updated>
<published>2014-01-21T20:16:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124297#p124297</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124297#p124297"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124297#p124297"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Only the MMC5 supports mapping RAM to the area from where the DPCM fetches data. You probably don't need to worry about that.<br /></div><br /><br />FDS has RAM in the DPCM area as well, though I haven't seen anyone use this to modify samples after load.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Jan 21, 2014 8:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2014-01-21T19:30:59-07:00</updated>
<published>2014-01-21T19:30:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124296#p124296</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124296#p124296"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124296#p124296"><![CDATA[
hmm, there's also accurate IRQ timing to think about as well. Which games use the APU IRQ interrupt?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Tue Jan 21, 2014 7:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2014-01-21T00:23:12-07:00</updated>
<published>2014-01-21T00:23:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124253#p124253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124253#p124253"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124253#p124253"><![CDATA[
Even then you only need to catch the DPCM to present before bank switches. Also, you pretty much have to do part of that for all memory accesses, to account for DPCM wait-states. It might be useful to treat the DPCM sample byte fetch as an interrupt-like hardware event. That way if your emulator uses an optimized scheme of keeping track of the next earliest interrupt/interrupt-like event that can happen, it only needs to do one timestamp comparison per cycle, rather than N comparisons where N is the total number of possible interrupt-like things that can happen (e.g. NMI, DPCM).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Jan 21, 2014 12:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-01-20T23:49:56-07:00</updated>
<published>2014-01-20T23:49:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124252#p124252</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124252#p124252"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124252#p124252"><![CDATA[
<div class="quotetitle">Zelex wrote:</div><div class="quotecontent"><br />DPCM [...] Or do games generally only play SFX from ROM?<br /></div>Only the MMC5 supports mapping RAM to the area from where the DPCM fetches data. You probably don't need to worry about that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jan 20, 2014 11:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2014-01-20T23:44:43-07:00</updated>
<published>2014-01-20T23:44:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124251#p124251</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124251#p124251"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=124251#p124251"><![CDATA[
blargg: would that approach work with DPCM channel? As the data that its playing from memory could have changed, so you can't really make it &quot;catch up&quot; on register change. Or do games generally only play SFX from ROM? In which case you could also just do a catch-up on bank swap I suppose.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Mon Jan 20, 2014 11:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2012-12-15T19:01:49-07:00</updated>
<published>2012-12-15T19:01:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104770#p104770</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104770#p104770"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104770#p104770"><![CDATA[
Turn it inside-out. Have your CPU keep track of the current time. When the APU is about to be written to, tell it to catch up to the current time, then do the write. The APU keeps track of the time of the next amplitude change, and just runs a loop skipping through time adding the appropriate deltas:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void apu_catchup_square( int end )<br />{<br />    while ( time &lt; end )<br />    {<br />        int new_amp = ...<br /><br />        int delta = new_amp - amp;<br />        add_delta( time, delta );<br /><br />        amp = new_amp;<br />        time = time + period;<br />    }<br />}</div><br /><br />Processor usage is based on the frequency of the square wave, rather than the clock rate.<br /><br />People have claimed that it's inherently slow to render sound at 1.79 MHz as opposed to lower rates. Is there interest in submitting these algorithms to a performance test that can be run on various platforms to find out what differences there really are?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Dec 15, 2012 7:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2012-12-15T18:26:17-07:00</updated>
<published>2012-12-15T18:26:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104767#p104767</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104767#p104767"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104767#p104767"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />But you don't need to explicitly run some loop of code 1.78 million times per second, I think that's what's being said here.<br /></div><br /><br />Yeah, exactly. The results are the same. If I did run a loop at 1.78 million times per second, almost all of that CPU time would be wasted. Might as well just calculate how many CPU ticks occur between an APU channel's tick and the next one, and only update the channel's sample that often and the resolution accuracy of it is still maintained because after every CPU instruction it checks if an update should be made and then it happens.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Sat Dec 15, 2012 6:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-12-15T17:50:26-07:00</updated>
<published>2012-12-15T17:50:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104765#p104765</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104765#p104765"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104765#p104765"><![CDATA[
But you don't need to explicitly run some loop of code 1.78 million times per second, I think that's what's being said here.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Dec 15, 2012 5:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2012-12-15T17:40:47-07:00</updated>
<published>2012-12-15T17:40:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104762#p104762</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104762#p104762"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104762#p104762"><![CDATA[
The APU can generate 1.79 MHz-accurate audio without any speed hit. In fact, it's more cumbersome to do it lower. There's no need to muddy the emulation code with consideration of output samples.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Dec 15, 2012 5:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2012-12-15T11:40:00-07:00</updated>
<published>2012-12-15T11:40:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104741#p104741</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104741#p104741"/>
<title type="html"><![CDATA[Re: Fast apu processing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9584&amp;p=104741#p104741"><![CDATA[
As was mentioned already, you absolutely do not and should not need to process the APU stuff at 1.7 MHz. What I do is just determine and keep track of how often each channel's sample gets updated (in terms of CPU ticks) and after every CPU instruction emulated, I check if it's time to do so yet. Likewise, I determine how many samples to create per second by taking the number of CPU ticks per second and dividing by the sample rate. Whenever it's time to create a new sample and put it in the output buffer, all I have to do is mix the sample value from all channels into one sample. That's all.<br /><br />The APU emulation takes nowhere near the CPU power of PPU emulaion. In fact, if you did only the APU stuff and ignored all graphics stuff, it would probably be fast enough to generate the audio full speed on a 386, or possibly even a high-end 286!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Sat Dec 15, 2012 11:40 am</p><hr />
]]></content>
</entry>
</feed>