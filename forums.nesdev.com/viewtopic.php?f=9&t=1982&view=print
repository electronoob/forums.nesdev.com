<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Misc Hardware Project Questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Misc Hardware Project Questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=1982">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=1982</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Mon Sep 04, 2006 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Misc Hardware Project Questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For what I'm working on I've got some questions, and might possibly have others as I come to'em, so I figure I'll just use this one topic as they come along instead of making a bunch for different things.
<br />
<br />Firstly, can anyone see any issue with putting a pulldown resistor of say 10k on the VRAM /CE, so that without a cartridge in the system, the onboard memory will automatically be activated?  I know that it's apparently safe to keep it pulled straight to ground, because my earliest breadboard NROM board didn't have any CHR rom or ram, and I was using the internal 2k full-time, but no cartridge could ever be put in with that setup.  So theoretically, the signal on the cartridge itself should override the pulldown, but when it comes to how them wacky electronics work, there might be some consequence I'm not thinking of.
<br />
<br />Second, is it okay to leave the /OE signal activated on an sram when you also have /WE active?  Will the chip ignore the output enable and go into write mode?  I already planned out how to do it the "safe" way, but if /WE always overrides, this'll save me from a little more logic wiring.  I just don't want the chip trying to possibly output anything when I'm trying to write to it.
<br />
<br />I think that's all for now!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Sep 04, 2006 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the SRAM datasheets I've seen, /WE will override /OE.  I don't know if that's standard, might depend on the chip.  I could see it causing bus conflicts if /OE goes low first and the SRAM is really fast.  I dunno how likely that is to happen though.
<br />
<br />I'd just get the PRG /RD signal, all you need is an inverter.  But since I do my tests as PCBs I tend to go the safest way.  Plus on Squeedo I already had a NAND gate that needed to be used. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Mon Sep 04, 2006 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I should mention that this particular project will be seperate from a cartridge; it'll still allow normal carts to be played.  Of course, I've never designed such a hardware project before, so one can only hope my designing will be correct!  I could probably go look at how folks have done certain similar elements, but that takes away from some of the satisfaction of doing it myself.
<br />
<br />In this case the idea behind my first question is to sever the PRG R/W going into the cartridge so that I can override the signal when wanting to write to a PRG eeprom or PRG sram, to prevent the mapper from detecting writes.  I'd have the pure PRG R/W signal coming through one of the EXP pins, which would deal with only the eeprom or sram's read and write control.  Using the inverter was what I had in mind for the safe method, using a second EXP line to avoid putting an inverter in the cartridge.  Otherwise I was just gonna tie /OE to ground.  But if I end up having the extra inverter to spare, I see no reason not to do it safe.
<br />
<br />Also, if there's no conclusive knowledge of whether a pulldown will work properly on the VRAM /CE, I had the idea that I can just tape over the CHR pins on my dev cart, connect the pulldown, and then write a simple test rom to verify that the internal ram is working.  Then I can pull the tape off and put the cart in again, and see if it uses the onboard.  And actually, since I already know what Galaga looks like when trying to run in the onboard 2K, I might could just use that, too.
<br />
<br />
<br />UPDATE:  I pulled out my breadboard jungle instead and used it for experimenting, simulating the cartridge being removed by changing some of the wiring.  From what I can tell, the pulldown works fine.  VRAM was always on with the CHR side disabled, and when re-enabled, VRAM seemed to behave normally.  I tried both a test rom which only used the internal 2k, as well as Galaga.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Tue Sep 05, 2006 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmm, I had a thought, which possibly messes up my idea.  While doing the resistor on VRAM /CE might keep it pulled low on no cartridge, and leave it alone when a cart is in it, I realized that I might have a problem if there's a cartridge inserted, but that particular one doesn't use the NES internal vram at all.  In such a case, I'd assume VRAM /CE gets pulled permanently high inside the cartridge.  But, I have no idea whether a particular cart might pull it high via tying it directly to 5v, or by using a resistor.  If they used a resistor, suddenly there'd be a conflict between their pull-up and my pull-down.  If the resistors were of the same amount, I assume my pull-down would win (right?), which would keep the internal vram on, even when the cart is wanting to use its own.
<br />
<br />I mean, to save on costs, one would think they'd prolly tie it straight to 5v, but unless it were possible for somebody to check every cartridge that used its own vram to confirm such a thing, I guess I'm going to have to change my method some.  Mind you if I'm wrong about anything mentioned above, I'm open to correction.
<br />
<br />I should explain a little first as to why I want to force internal VRAM on in the first place.  The overall plan is to have a "Disable CHR ROM" register bit (via an output from octal flip-flop).  0 = normal operation, 1 = CHR ROM disabled (aka holding A13 going to the rom high).  Aside from that main function, when 0, internal VRAM will also behave based on what the cartridge wants of it, and when 1, internal VRAM will be forced on, allowing me to use that 2K to hold 64 tiles and 1 background (now that the CHR ROM is disabled), which is fine for what I have in mind.
<br />
<br />Using a tri-state signal is the likely solution here in terms of forcing the internal vram on when I want it, and then going into tri-state mode when I want to let the cartridge take over.  But since that'd require sticking a whole buffer IC or something tri-statable into the project just for this one thing, it seems like overkill.  I'm not 100% certain what happens when an IC puts an output into tri-state mode, but I <strong>think</strong> it could be emulated using just a transistor.
<br />
<br />Shouldn't I be able to connect the output of my register bit to the base of an NPN transistor, connect the collector to VRAM /CE, and collect the emitter to ground?  When my register bit is high (CHR ROM off + VRAM forced enable), it should let current flow through the transistor, allowing VRAM /CE to flow to ground and hold it low.  When the register bit is off, nothing should flow through the transitor, but does this make it the equivalent of tri-state?  My knowledge of dealing with analog electronics is limited, so this might not work at all for all I know, but I figured I'd pass it along to those of you who know your stuff, and would appreciate any input!  If nothing else, I can stick that extra tri-statable chip on if I have to, but this seems so much simpler if I can figure it out properly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Sep 05, 2006 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When an IC puts I/O in tri-state mode (Hi-Z) it's as if they are open circuit.
<br />
<br />I'm a little bit confused as to what you're trying to do (that was a lot to digest!) but the transistor idea will definately beat a pullup. Back to your pulldown against a pullup, I think that'll cause a voltage divider and put the level in an indeterminate low state. Maybe you could use a 1M pulldown which will always loose.
<br />
<br />If you're planning to tri-state your octal DFF output, you could use a 74374 which already has /OE. If you're talking about tri-stating the data bus, you'll need two '244 since it's bidirectional and R/W select logic which could also disable the CROM/CRAM instead of holding /A13 high. (What if a game uses active high A13 to decode? :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Tue Sep 05, 2006 8:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah it'd prolly be easier if I could just show what all I've scribbled on paper, but I don't have access to a scanner as of the moment.  And it's probably about like programming, anyway; even with something to look at, it can be hard to tell what somebody elses stuff is doing sometimes, if it's very complicated.  I pretty much just want to be able to disable any cartridge CHR rom/ram (including any extra nametable ram it might have available), and be able to use the NES's internal 2k VRAM for both tiles and a single nametable.
<br />
<br />Something you said made me realize you could have a point, about some cartridges possibly using A13 in both high and low, which I wasn't taking into account.  Sure enough, it would seem that MMC5 for example connects to VRAM /CE, but CHR /A13 doesn't connect to the mapper.  Obviously it's inverting A13 on its own to control VRAM /CE.  This completely throws out what I was blabbering about, because intercepting/overriding CHR /A13 myself would be pointless on such a cartridge.
<br />
<br />But something else you said possibly put me on the right path, about tri-stating the data lines themselves.  I wouldn't even have to bother working out a bunch of logic to disable the CHR rom as well as any onboard vram it has; I can just sever any communication it attempts to have from reaching the NES.  But I think to do so, a '245 transceiver might work best, which I happen to have already.  It'd just take the one chip, using the CHR R/W line to toggle its direction.  I could tri-state the thing and activate the NES internal vram, and shouldn't have to worry about any chip enable types of conflicts that might arise from doing it the other convoluted way, since even when CHR chips and/or ram get activated, their data won't make it back to the NES.
<br />
<br />The only downside here is that I have to actually separate all 8 data lines to sit as the go-between, as opposed to my last plan which only required separating 2-3.  X_X
<br />
<br />I may have lost everyone again, but I'll put some thinking on all of this and see if it'll work out like I'm figuring it would.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Thu Sep 07, 2006 12:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've got all that worked out now, I believe.
<br />
<br />I'm curious though; the only way for a cartridge to determine whether an attempt to access WRAM has taken place is by using O2 and PRG /CE, right?  I won't go into another drawn-out explanation of what I want to do and the other ways I'm working around it, but I was thinking that as long as the clock was low going into the cart, the mapper (or any other hardware a cart used) would never be able to determine when the NES was trying to access the lower 32K of address space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Sep 07, 2006 3:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FyberOptic wrote:</div><div class="quotecontent">I'm curious though; the only way for a cartridge to determine whether an attempt to access WRAM has taken place is by using O2 and PRG /CE, right?<br /></div>
<br />
<br />It needs to use A13 and A14 too.  All 4 of those signals would be high during a WRAM access.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Thu Sep 07, 2006 3:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well true, though I mostly just meant that the only way for it to determine the upper and lower 32K was by using O2 and PRG /CE, since it doesn't have a pure A15 available for the true way of determining.  As far as I understand it, you can't base just an inverted PRG /CE on whether it's the lower 32K by itself, since once O2 goes low, all address decoding goes high due to how O2 is connected to the initial address decoder.  I just figured that holding O2 low seems like it would prevent the cart from ever enabling WRAM.  Holding PRG /CE high at the same time should theoretically prevent the cart from sending back anything else, as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Fri Sep 08, 2006 6:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This isn't so much a question, but I thought I'd put it here since it's all related, and someone might find it interesting.
<br />
<br />For my project here, I knew I was going to need a way to transfer code to the NES often for debugging purposes, since it'll be nearly impossible to test things in an emulator due to custom hardware. And where better to transfer data than the NES controller port, right?. Though I had only heard of people using it for replaying keystrokes, and not for any actual "useful" purpose (as far as I've seen, anyway), leaving me with no real idea if it'd be practical. The keystroke player also required some extra hardware, since the parallel port isn't fast enough to keep up with the data clock pulses, it would seem, from my own experiments.
<br />
<br />Well, after a lot of wasted time debugging my code, only to find I had an "AND" in place of an "ORA", I successfully managed to transfer a byte of data to the NES via the PC parallel port, without using any hardware in between. I don't have any spare controller cables (or even a second controller for that matter), but I used the plug off of a spare controller socket I had, and strung some speaker wire between it and a DB-25 connector. It's not really anything spectacular to see so I won't bother taking pictures this time. But basically it's a 2-bit data connection, using the third data line along with the latch line to maintain a flow control.  I'm also using controller port 2, so that the system's actually still usable.
<br />
<br />The first test was displaying the transferred byte on the screen in hex, to verify it's even getting the right byte. I then updated my PC-side code to increment it after each byte transfer, which made it count upwards on the NES just fine, showing that it seems to be a reliable connection. I updated the PC-side code again to track my transfer rate, but since I was waiting for a refresh to display each data byte on the screen, the cps was only about 55 bytes/second. That's pretty awful.
<br />
<br />So I decided to remove the screen updatery and just do a pure transfer. <a href="http://www.fybertech.com/nes/nescom_cps.gif" class="postlink">The results were much more pleasant.</a> I admit I was impressed to get 4kB/s, which is a fine speed considering the method involved, and is more than fast enough for my needs.
<br />
<br />Anyhoo, I don't know if anyone else has ever experimented with transferring data like that, which is why I thought I'd post about it. My next test will involve altering one of my NROM-to-UNROM patches to transfer the whole 8kB of CHR data from the PC instead of getting it from the eeprom. I can't think of any real reason why it wouldn't work properly, but it'll just be a fun experiment nonetheless.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Sep 08, 2006 8:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried coding a receive routine below to see what the maximum data rate might be. I assumed that the wait loop would run two iterations each time, so the NES has a little slack. I get 225 cycles to transfer one byte, resulting in about 8KB/sec maximum. I expected things to be a little more streamlined with a 2-bit interface, since this isn't much higher than the 5.8KB/sec I get over a software-based RS-232 version I use. I'm realizing that having to acknowledge each bit pair adds a fair amount of overhead, where the serial can just delay by a fixed time. Have you considered using RS-232, which has the advantage of not needing any special PC drivers? I bet you could do it without a MAX-232 level convertor chip if you just want a one-way connection from the PC to the NES. Here's the (definitely not optimized) code I came up with, with instruction cycle counts listed in the comments:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">page_loop:<br />&nbsp; &nbsp; &nbsp;lda&nbsp; #$00&nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;sta&nbsp; temp&nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; &nbsp;ldx&nbsp; #4&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;<br />loop:<br />&nbsp; &nbsp; &nbsp;lda&nbsp; #$XX&nbsp; &nbsp; &nbsp; ; 2<br />wait:<br />&nbsp; &nbsp; &nbsp;bit&nbsp; $4017&nbsp; &nbsp; &nbsp;; 4 wait for latch<br />&nbsp; &nbsp; &nbsp;beq&nbsp; wait&nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -1<br />&nbsp; &nbsp; &nbsp;lda&nbsp; #$XX&nbsp; &nbsp; &nbsp; ; 2 clear latch<br />&nbsp; &nbsp; &nbsp;sta&nbsp; $4016&nbsp; &nbsp; &nbsp;; 4<br />&nbsp; &nbsp; &nbsp;lda&nbsp; #$XX&nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;sta&nbsp; $4016&nbsp; &nbsp; &nbsp;; 4<br />&nbsp; &nbsp; &nbsp;lda&nbsp; $4017&nbsp; &nbsp; &nbsp;; 4 read two bits of data<br />&nbsp; &nbsp; &nbsp;and&nbsp; #$18&nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;ora&nbsp; temp&nbsp; &nbsp; &nbsp; ; 3 insert into buffer<br />&nbsp; &nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;adc&nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;adc&nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;sta&nbsp; temp&nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; &nbsp;dex&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;bne&nbsp; loop&nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; -1<br />&nbsp; &nbsp; &nbsp;sta&nbsp; &#40;addr&#41;,y&nbsp; ; 6<br />&nbsp; &nbsp; &nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; 2<br />&nbsp; &nbsp; &nbsp;bne&nbsp; page_loop ; 3<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FyberOptic</b> [ Fri Sep 08, 2006 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I once did a serial connection with a PIC by using manual timing, but it wasn't the most reliable.  I don't think I know enough about the timings of the instructions per clock and such of the 6502 to try and do it, though.
<br />
<br />If my math is right, 1.7897725mhz of the cpu should mean about 558ns per clock, I think.  If I look at <a href="http://www.6502.org/tutorials/6502opcodes.html" class="postlink">an opcode reference</a>, which says an immediate mode ADC takes 2 of "time", would this be direct clock cycles?  As in, that ADC would take about 1.116us?
<br />
<br />If I tweak my parallel port code I might could squeeze some more speed out, since it's not very optimized, and I think I might actually be doing an unneccessary extra bit of waiting at one point.  But I like the idea of actually triggering each bit transfer so that none get missed, despite a little bit of overhead.  Though if I could write an absolutely reliable serial protocol without using hardware, and just use a normal terminal app, that'd be pretty handy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Sep 08, 2006 10:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Right, ADC #immediate adds two ~1.79 MHz clocks to the total execution time. Just now I coded up 115.2kbps serial and it's working well on a 6KB random test data set. I found that using 2 stop bits gives a little more breathing room in the receive code. The 57.6kbps routines I've been using have been reliable for a couple of years now, and the loader that uses them does a checksum verification after every complete transfer. I'd like to help if you're going to make a serial-based devcart. I'm really happy with mine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 09, 2006 9:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can one be made with a USB to serial adapter chip? Such chips are likely to run at 5V (just like USB itself) and thus not need a level shifter. With the 9-pin RS232 being eliminated from newer mainboards (and already gone from Macs for a decade), this might be important in the future.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Sep 09, 2006 11:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Can one be made with a USB to serial adapter chip? Such chips are likely to run at 5V (just like USB itself) and thus not need a level shifter.</div>They probably still have a small <a href="http://en.wikipedia.org/wiki/Charge_pump" class="postlink">charge-pump convertor</a> to generate +/- 12V, as the standard MAX-232 does. For just receiving, a resistor or zener diode might suffice to convert the signal to something usable by the NES.
<br />
<br />The main problem with software-based serial is the lack of flow control. If the NES needs the PC to wait at all, it'd need to be implemented using custom code on the PC side. The main advantage of serial is that no low-level PC programming is needed, just standard serial writes and reads. I've got a self-contained USB-to-serial adaptor that I still haven't tested with my NES, though I'm fairly sure it'll work.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>