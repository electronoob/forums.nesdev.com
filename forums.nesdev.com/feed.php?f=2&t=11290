<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=11290" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-06-02T22:04:42-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=11290</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-06-02T21:50:05-07:00</updated>
<published>2014-06-02T21:50:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129495#p129495</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129495#p129495"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129495#p129495"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Updating tiles is even worse; you could only upload the same amount of data as you consumed with a visible height of ≈40 scanlines.<br /></div><br />A few mappers did combine CHR RAM with bank switching. Pinbot, RacerMate, and Videomation come to mind. So if your fictional cartridge has 128K PRG RAM, 32K CHR RAM bankable in 1K units, and a gigabyte of NAND flash, that could be close enough to unlimited CHR ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Jun 02, 2014 9:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-06-02T21:38:26-07:00</updated>
<published>2014-06-02T21:38:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129494#p129494</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129494#p129494"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129494#p129494"><![CDATA[
<div class="quotetitle">SriK wrote:</div><div class="quotecontent"><br />Here's a link to the <a href="https://dl.dropboxusercontent.com/u/29310043/styleGuide.PNG" class="postlink">game's current style guide</a> BTW.<br /></div><br />I have to say this: the technical justification for the unlimited number of sprite palettes is pretty bogus. All graphical expansions provided by the MMC5 have to do with carefully timed switching of memory external to the PPU.<br /><br />Greater attribute resolution is possible only because the PPU fetches attribute bits every 8 pixels. Normally, the same bits are fetched twice in a row, but the MMC5 is able sync with this fetch pattern and provide unique data for each fetch. You could even make a mapper with more attribute resolution than the MMC5, and have each row of each tile use a different palette.<br /><br />The simultaneous access to 16384 tiles is also only possible because both the name table memory and the pattern memory are external to the CPU, and the MMC5 can tell WHAT is being accessed WHEN and manipulate the data it feeds the PPU accordingly. The same goes for the 512 patterns for sprites.<br /><br />Palettes, however, are internal to the PPU, and even if the mapper was able to tell when they're being accessed, there's no way to interfere with that data. Sprite OAM is also internal to the PPU, so you can't give a purpose to unused attribute bits. Unfortunately you cannot pin this on &quot;expansion chips&quot;, unless the chip you're talking about is an entirely new PPU, which has to be installed inside the NES itself instead of the cartridge.<br /><br />There are a lot of things that can't possibly be changed by mappers: maximum of 8 sprites per scanline, maximum of 64 sprites per frame, the amount of colors per palette, the number of palettes, the 50-something colors master palette, the sprite clipping that happens at the top and left edges of the screen, and probably others I can't think of right now. All of these have to do with things that happen only inside the PPU and are not exposed or accessible to the outside in any way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Jun 02, 2014 9:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-06-02T20:52:49-07:00</updated>
<published>2014-06-02T20:52:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129490#p129490</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129490#p129490"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129490#p129490"><![CDATA[
<div class="quotetitle">SriK wrote:</div><div class="quotecontent"><br />So, theoretically, I could do things like e.g. render large bosses on arbitrary backgrounds and just use the excuse of &quot;lol CHR ROM&quot;?<br /></div>CHR RAM and slow memory; it's more like a Sega CD (or PC Engine, or maybe even the PS1). Still has attribute clash. Still bandwidth limited. You can only really upload about 220 bytes per vsync without reducing the vertical height, or extended blanking gets you enough bandwidth to completely redraw the nametables at a visible height of ≈192 scanlines. Updating tiles is even worse; you could only upload the same amount of data as you consumed with a visible height of ≈40 scanlines.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jun 02, 2014 8:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[SriK]]></name></author>
<updated>2014-06-02T22:04:42-07:00</updated>
<published>2014-06-02T20:29:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129486#p129486</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129486#p129486"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129486#p129486"><![CDATA[
Thanks, guys!<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent"><br />Anyway, this stuff is really, really cool. And I'd certainly love to read about your video compression/implementation. I was happy enough just to get 53% on text, heh.<br /></div><br /><br />The compression is actually extremely simple. The first frame is an intraframe (actual image data), encoded as follows:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1  = repeat current value for 3 bytes (12 pixels)<br />10 = repeat current value for 1 byte (4 pixels)<br />11 = change current value to following value (next 8 bits)</div><br /><br />And all the other frames are interframes (delta values), encoded as follows:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1  = no change for 3 bytes (12 pixels)<br />10 = no change for 1 byte (4 pixels)<br />11 = add following value to current value (next 8 bits)</div><br /><br />There's some other stuff about lossy encoding of delta values on the encoder side, but that's all the decompressor needs to do.<br /><br />The implementation is a little bit trickier. Rendering is done using a program I wrote to autogenerate a giant unrolled loop, which executes MMC5 ExRAM nametable changes until HBlank then sets the scroll appropriately (writing to the nametable as it's rendering so that new rows of the image are transferred just as the old ones finish). Part of the image is also transferred beforehand, at the start of every new video frame, to help allow a bit of leeway. Decompression is relatively straightforward in comparison, though still fairly optimized (I think about as much as it can be without changing the format, or relying on self-modifying code stored in RAM).<br /><br />If you or anyone else is interested, I can clean up the encoder/ASM generation programs as well as the asm6 source and post them in a bit. I don't know how much more I'm going to work on this myself, it was just a quick proof of concept for fun/out of curiosity, but maybe others can expand on it and make it more viable.<br /><br /><div class="quotetitle">ccovell wrote:</div><div class="quotecontent"><br />I did some NES experiments with animation/FMV back in 2000, but these had no compression and used no mapper.<br /></div><br /><br />Cool stuff! Especially awesome given that it was almost 15 years ago, I'm sure the state of NES emulation was far worse back then and there were far more unknowns. The mapper is kind of key to how this works as I mentioned above, so I'm not sure this same technique could be used for FMV off the MMC5 sadly. Regular nametable writes just seem too slow...<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Have you had time to look over my <a href="http://wiki.nesdev.com/w/index.php/Bad_Apple" class="postlink">reverse engineering of Bad Apple's video format</a>? Only the bitmap of what areas have changed is bit-based; the actual nametable values are byte-based.<br /></div><br /><br />LOL, can't believe I didn't think of that! That's awesome, I'm sure something similar could be used for 4-color video too (could possibly even save space?)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Anyway, assuming infinite cartridge space isn't really a cheat. Pretend you have a 128 kilobyte RAM and an eMMC (NAND flash) that you can read through a separate mapper port. Someone on this board has proposed exactly this configuration.<br /></div><br /><br />So, theoretically, I could do things like e.g. render large bosses on arbitrary backgrounds and just use the excuse of &quot;lol CHR ROM&quot;? (The interior of the boss would be tiles and the exterior would be sprites, in this hypothetical scenario.) Here's a link to the <a href="https://dl.dropboxusercontent.com/u/29310043/styleGuide.PNG" class="postlink">game's current style guide</a> BTW.<br /><br /><div class="quotetitle">BMF54123 wrote:</div><div class="quotecontent"><br />What would be really cool is something like the <a href="http://byuu.org/snes/msu1" class="postlink">MSU-1</a> for the PowerPak and/or Everdrive N8. Perhaps something with the same basic capabilities as an FME-7 or VRC6, but with the ability to stream a PCM sound file to the sound expansion pin, and a PRG/CHR data file to either a mapper register or directly to PRG/CHR RAM. Surely both cartridges have enough hardware to accomplish this.<br /></div><br /><br />That would be awesome. Compressing audio could also save more space here, I did some experiments with ADPCM on an 8-bit processor (the Z80 in the Sega Genesis) a few years back and it actually got to <a href="https://www.youtube.com/watch?v=YOk6X4rLpJk" class="postlink">a pretty advanced stage</a>. I'm sure similar techniques could be used on the NES (especially if video &quot;decompression&quot; just consists of switching CHR banks).<br /><br />Also, completely unrelated, are you the same BMF who made the Sonic 2 Genocide City mockup many years ago? lol<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6534">SriK</a> — Mon Jun 02, 2014 8:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[BMF54123]]></name></author>
<updated>2014-06-01T11:59:23-07:00</updated>
<published>2014-06-01T11:59:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129445#p129445</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129445#p129445"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129445#p129445"><![CDATA[
What would be really cool is something like the <a href="http://byuu.org/snes/msu1" class="postlink">MSU-1</a> for the PowerPak and/or Everdrive N8. Perhaps something with the same basic capabilities as an FME-7 or VRC6, but with the ability to stream a PCM sound file to the sound expansion pin, and a PRG/CHR data file to either a mapper register or directly to PRG/CHR RAM. Surely both cartridges have enough hardware to accomplish this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=935">BMF54123</a> — Sun Jun 01, 2014 11:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-05-31T09:08:26-07:00</updated>
<published>2014-05-31T09:08:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129417#p129417</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129417#p129417"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129417#p129417"><![CDATA[
Have you had time to look over my <a href="http://wiki.nesdev.com/w/index.php/Bad_Apple" class="postlink">reverse engineering of Bad Apple's video format</a>? Only the bitmap of what areas have changed is bit-based; the actual nametable values are byte-based.<br /><br />Anyway, assuming infinite cartridge space isn't really a cheat. Pretend you have a 128 kilobyte RAM and an eMMC (NAND flash) that you can read through a separate mapper port. Someone on this board has proposed exactly this configuration.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat May 31, 2014 9:08 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2014-05-31T06:44:55-07:00</updated>
<published>2014-05-31T06:44:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129412#p129412</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129412#p129412"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129412#p129412"><![CDATA[
Pretty cool to see some FMV going on for that long.<br /><br />I did some NES experiments with animation/FMV back in 2000, but these had no compression and used no mapper:<br /><br /><img src="http://www.chrismcovell.com/images/flame.gif" alt="Image" /><img src="http://www.chrismcovell.com/images/motion.gif" alt="Image" /><br /><br /><!-- m --><a class="postlink" href="http://www.chrismcovell.com/data/anims.zip">http://www.chrismcovell.com/data/anims.zip</a><!-- m --> (2 animation ROMs in archive)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Sat May 31, 2014 6:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-05-31T05:31:06-07:00</updated>
<published>2014-05-31T05:31:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129410#p129410</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129410#p129410"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129410#p129410"><![CDATA[
Cool stuff. Steel Assault seems nice too, despite not being an actual NES title.<br /><br />Some day I want to try to do hardware accelerated FMV on PowerPak.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sat May 31, 2014 5:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2014-05-31T04:40:21-07:00</updated>
<published>2014-05-31T04:40:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129407#p129407</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129407#p129407"/>
<title type="html"><![CDATA[Re: FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129407#p129407"><![CDATA[
<a href="http://wayofthepixel.net/index.php?topic=16525.0" class="postlink">Heh. I knew &quot;Steel Assault&quot; sounded familiar.</a><br /><br />Anyway, this stuff is really, really cool. And I'd certainly love to read about your video compression/implementation. I was happy enough just to get 53% on text, heh.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sat May 31, 2014 4:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[SriK]]></name></author>
<updated>2014-05-31T03:30:04-07:00</updated>
<published>2014-05-31T03:30:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129406#p129406</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129406#p129406"/>
<title type="html"><![CDATA[FMV on the NES ... kind of]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11290&amp;p=129406#p129406"><![CDATA[
Hi everyone! Recently I've been working on a PC game tentatively titled <em>Steel Assault</em>, which aims to emulate a late NES graphic style (inspired by games such as <em>Shatterhand</em> and <em>Batman</em> where heavy dithering and details in negative space are used to create a dark atmosphere within system limitations). The game isn't adhering strictly to limitations (two of my assumptions are infinite cartridge space and expanded sprite limits lol), but I'd like for most of it to be plausible on the NES in some limited form or another. Anyway, one of my ideas for the game is to have a short (60 seconds or so) FMV intro at the start, detailing the game's scenario and background. Searching these forums, it seems like not many people have tackled the problem of FMV on the NES (aside from the Bad Apple demo, which is super cool), so I decided to try my hand at it this past week, and also learn more about NES coding (I have a bit of homebrew experience on 16-bit consoles, but this was my first major foray into 8-bit). My approach was inspired by <a href="http://forums.nesdev.com/viewtopic.php?p=112229#p112229" class="postlink">this post by tokumaru</a>, though I haven't implemented all of the ideas he suggested yet.<br /><br />Well, it works! It's kind of stuttery at times, though (especially when there are large changes from frame to frame), and the pixelation/lack of double buffering isn't helping (more on this later). Here are some screenshots:<br /><br /><div style="text-align:center"><img src="https://dl.dropboxusercontent.com/u/29310043/fmvnes/500ds.png" alt="Image" /> <img src="https://dl.dropboxusercontent.com/u/29310043/fmvnes/goodfellas.PNG" alt="Image" /> <img src="https://dl.dropboxusercontent.com/u/29310043/fmvnes/bladeRunner.PNG" alt="Image" /></div><br /><br />The videos are clips from <em>500 Days of Summer</em>, <em>Goodfellas</em>, and <em>Blade Runner</em> respectively. The .nes files are attached; they look best in Nintendulator, but work on FCEUX and Nestopia as well. (My favorite is the Goodfellas clip, which plays part of the movie's famous Copacabana tracking shot.) Here are some statistics on the clips used:<br /><br /><ul><li><strong>goodfellas</strong> - 51 seconds; 441,086 bytes of video</li><li><strong>500ds</strong> - 74 seconds; 482,548 bytes of video</li><li><strong>bladeRunner</strong> - 48 seconds; 452,686 bytes of video</li></ul><br />Note that the ROMs crash after the clip ends lol, because I haven't bothered putting in video length values yet. Also, there isn't any music, and I doubt there's currently enough rendering time left to play any (but I haven't tried yet).<br /><br />The main bottleneck seems to be that the compressed video format is bit-aligned rather than byte-aligned.* I've implemented various techniques to mitigate the effect of this, but I still can't get it fast enough to consistently render all (15FPS video) frames in under 4 NES frames; in fact, some take as many as 6 to 8. In addition, given the approach I'm taking, double buffering wastes another frame or more when turned on (as it has to copy 2048 bytes from one RAM bank to another), so video is only single buffered. I'm going to try and come up with a byte-aligned format for interframes later and see if I can get better speed while still maintaining a decent compression ratio (right now it's about 25-30%, compared to an uncompressed video which uses 2KB for each frame).<br /><br />But yeah, I hope you enjoy the demos! And if anyone's interested, I can post more about the compression format and how rendering works later. (Or, you can try and find out yourself... :D)<br /><br />Sri<br /><br /><br /><br /><br /><span style="font-size: 90%; line-height: normal">* This decision was partially because, until I actually implemented decompression on the NES itself, I was using Huffman encoding on the delta values and naively thought I would be able to decode them in realtime.</span><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6534">SriK</a> — Sat May 31, 2014 3:30 am</p><hr />
]]></content>
</entry>
</feed>