<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=5549" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-09-02T17:48:43-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=5549</id>
<entry>
<author><name><![CDATA[kode54]]></name></author>
<updated>2009-09-02T17:48:43-07:00</updated>
<published>2009-09-02T17:48:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50413#p50413</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50413#p50413"/>
<title type="html"><![CDATA[BRR encoding]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50413#p50413"><![CDATA[
I wrote a brute force encoder ages ago, based on the IMA ADPCM encoder from SoX. I uploaded a copy of that <a href="http://kode54.foobar2000.org/brr.cpp.gz" class="postlink">here</a>. There's probably a better way of doing it, but at least this way ensures the closest representation of the original data.<br /><br />Basically, the encoder calculates each sample nibble, then calculates what the decoded result would be quantized to. It uses this for the sample history when encoding using the filters. It also uses this to calculate the mean square error, which is used by the brute force encoding loop. It picks the filter set and scale value that produce the least mean square error for each given block.<br /><br />Oh, and it also has an addition for encoding looping samples. Basically, it can optionally factor in the last two samples of the block before the loop start when encoding the last block in the sample, to try to make the loop match up without forcing the encoder to use a filter of 0 for the loop start block.<br /><br />Anyway, have fun and good luck.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=139">kode54</a> — Wed Sep 02, 2009 5:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2009-09-02T15:22:37-07:00</updated>
<published>2009-09-02T15:22:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50409#p50409</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50409#p50409"/>
<title type="html"><![CDATA[BRR encoding]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50409#p50409"><![CDATA[
<div class="quotetitle">mic_ wrote:</div><div class="quotecontent"><br />Unless I'm missing something, that doc describes how to decode BRR samples to raw PCM. I want want to do the opposite; encode raw PCM to BRR.<br /></div><br />To understand my explanation, first look up IMA ADPCM and how it's encoded and decoded. Encoding BRR or VAG is rawther similar.<br /><br />In BRR, each sample y is the sum of a prediction p and a residue r. The prediction is a linear function of the two previous samples.<br />y[t] = p[t] + r[t]<br />filter 0: p[t] = y[n - 1] * 0/64 - y[n - 2] * 0/16<br />filter 1: p[t] = y[n - 1] * 60/64 - y[n - 2] * 0/16<br />filter 2: p[t] = y[n - 1] * 122/64 - y[n - 2] * 15/16<br />filter 3: p[t] = y[n - 1] * 115/64 - y[n - 2] * 13/16<br />I added multiplications by 0 to make parallels among the filters more obvious.<br /><br />For each block of 16 samples, you need to first find the appropriate filter and range and then encode the block. To find the best filter and range: <ol style="list-style-type: decimal"><li>Compute r[t] = y[t] - p[t] for all four filters. </li><li>Compute the peak residue for each filter, as max(abs(r[t])). </li><li>Find the filter with the smallest peak residue. </li><li>Set the range to the smallest value that doesn't cause slope overload when encoding the peak residue with this filter. </li></ol>Then for each sample in the block: <ol style="list-style-type: decimal"><li>Compute p[t] based on the filter, y[n - 1], and y[n - 2]. </li><li>Compute the residue r[t] = y[t] - p[t]. </li><li>Quantize the residue based on the range, and output this scaled residue: rscaled[t] = r[t] &gt;&gt; range. </li><li>Recompute y[t] based on the scaled residue: y[t] = p[t] + (rscaled[t] &lt;&lt; range). </li></ol><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Sep 02, 2009 3:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2009-09-02T10:59:58-07:00</updated>
<published>2009-09-02T10:59:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50401#p50401</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50401#p50401"/>
<title type="html"><![CDATA[BRR encoding]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50401#p50401"><![CDATA[
Unless I'm missing something, that doc describes how to decode BRR samples to raw PCM. I want want to do the opposite; encode raw PCM to BRR.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Wed Sep 02, 2009 10:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2009-09-02T10:52:33-07:00</updated>
<published>2009-09-02T10:52:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50400#p50400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50400#p50400"/>
<title type="html"><![CDATA[BRR encoding]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50400#p50400"><![CDATA[
The BRR format should already be documented, both officially and unofficially.<br /><br /><!-- m --><a class="postlink" href="http://www.emulatronia.com/doctec/consolas/snes/brr.txt">http://www.emulatronia.com/doctec/consolas/snes/brr.txt</a><!-- m --><br /><!-- m --><a class="postlink" href="http://www.pikensoft.com/old/docs/SNES_sound_brr_%28Butcha%29.txt">http://www.pikensoft.com/old/docs/SNES_ ... cha%29.txt</a><!-- m --><br /><br />If you need something "more official" I can scan some pages from the development manual.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Wed Sep 02, 2009 10:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2009-09-02T10:03:49-07:00</updated>
<published>2009-09-02T10:03:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50397#p50397</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50397#p50397"/>
<title type="html"><![CDATA[BRR encoding]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=5549&amp;p=50397#p50397"><![CDATA[
Are there any docs out there that explains the BRR encoding process? I've seen some sites that talk about decoding, but nothing about encoding.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Wed Sep 02, 2009 10:03 am</p><hr />
]]></content>
</entry>
</feed>