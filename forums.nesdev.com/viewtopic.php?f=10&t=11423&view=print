<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Best way to generate bkg collision data?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Best way to generate bkg collision data?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11423">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11423</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Jul 11, 2014 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Best way to generate bkg collision data?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been reading many posts on the subject today and have plenty of good ideas.  I completely understand the concept of creating essentially a grid of (16x16) metatiles and dividing by 16 to determine an object's position relative to that grid (or dividing by 32, for instance, to get the object's position relative to each tile)...this is essentially how I've done collision detection in several environments, so I get the core concept just fine).  Most posts seem to suggest that a new attribute table is generated...sort of a collision map... to handle each of the four tiles' type and 'solidity', and then reading from that table and comparing it to an object's position to determine the result.<br /><br />Originally, my concept was to assign each tile number an attribute (or maybe rows of tiles an attribute ... $0-$0F= walkable, $10-$4F = solid, etc...) then use the grid position to determine what 'tile' was in the player's position to handle the result.  <br /><br />I am not sure what the most efficient way to handle this data would be.  I know that the former would allow for more diversity while the latter seems might be easier to implement?  But aside from that - I'm not completely sure the best way to store this data (something similar to loading nametable, perhaps?) or the best way to actually find the character's grid position (I can do this easily with multiplication and division in other environments, but trying to figure out the most efficient way to do it in ASM).<br /><br />I have found a few methods.  Are there any you guys would suggest?  (for right now, simple top down engine, no screen scrolling).<br /><br />Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jul 11, 2014 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to generate bkg collision data?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hardwiring any kind of attribute to tile/block numbers is useful if you have a limited amount of ROM, otherwise it's a useless restriction you're imposing on yourself. If you have the ROM space, I really suggest you make everything as explicit as possible, so you have more freedom to create unique levels. I'd only suggest the use of implied attributes if you were coding a game for a competition that required ROMs to be some small arbitrary size (e.g. 8KB) or a game with a large number of levels in 32KB or PRG-ROM or less.<br /><br />Collision data in particular is often associated with metatiles. Very few games recognize individual tiles as entities of the level, tiles are almost exclusively a graphical element used to represent a portion of a metatile. That's probably because without an MMC5 the NES is unable to color individual tiles arbitrarily, so it makes sense to always process them in groups of 2x2, and that includes collisions.<br /><br />One advantage of making the collision data part of the metatiles' attributes is that you can use the same code that decodes the level map to the screen to read the collision data. If you had a separate grid for collisions somewhere else you'd probably need different logic to access it.<br /><br />Keep in mind that even if your collision data is arranged as a grid of 16x16-pixel blocks, you can have finer collision resolution if you store more than &quot;solid&quot; or &quot;empty&quot; for each block. Slopes for example are often done by specifying the height of each of the 16 columns in the block.<br /><br />Since you don't seem to be working with metatiles yet, only (compressed?) name/attribute table data, and you don't scroll, maybe you'd benefit from a separate collision map for each screen. First you have to decide how many solidity states you have. If it's just &quot;solid&quot; vs. &quot;empty&quot;, 1 bit per block will do. If you have to include &quot;water&quot;, &quot;hazard&quot;, and so on you'll obviously need more bits per block. Once you have figured out how many states you'll need, you have to group the bits into bytes and arrange them in a 2D array.<br /><br />For example, if you have 4 solidity states you need 2 bits per block, meaning that 1 byte can hold the attributes of 4 blocks. If the collision blocks are 16x16 pixels, each screen has 16x15 = 240 blocks. Divided by 4 in each byte that's 60 bytes of collision date per screen.<br /><br />You can manually define this data with .db statements, like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Screen00Collision:<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;1st row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;2nd row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;3rd row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;4th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;5th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;6th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00111111, %11000000 ;7th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;8th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;9th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;10th row of collision blocks<br />&nbsp; &nbsp;.db %00000000, %00000000, %00000000, %00000000 ;11th row of collision blocks<br />&nbsp; &nbsp;.db %11111111, %11111111, %11110000, %11111111 ;12th row of collision blocks<br />&nbsp; &nbsp;.db %11111111, %11111111, %11110000, %11111111 ;13th row of collision blocks<br />&nbsp; &nbsp;.db %11111111, %11111111, %11110000, %11111111 ;14th row of collision blocks<br />&nbsp; &nbsp;.db %11111111, %11111111, %11110000, %11111111 ;15th row of collision blocks</div><br />Here I have used 00 = empty and 11 = solid to make the data easy to visualize. Like with level maps, you'll want to use a pointer to indicate the active collision map, so you can easily read from it at any time. Then you just need some simple math to convert pixel coordinates into an index into this table:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ByteIndex = (PixelY / 16) * 4 + (PixelX / 64);</div><br />In assembly this can be done with bit shifting and masking. Just put the result in Y and you can load the correct byte with LDA (CollisionMapPointer), Y. This will get you the collision data for 4 consecutive blocks, so you still have to select one out of these 4 blocks. You'll need another formula:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BlockIndex = (PixelX / 16) AND 3</div><br />The purpose of &quot;AND 3&quot; is to keep only the lower 2 bits of the result, since 3 in binary is %00000011. With this information in hand you can shift the collision byte right as many times as necessary (index 0: shit 6 times, index 1: shift 4 times, index 2: shift twice, index 3: don't shift) and mask away the upper 6 bits to get a value between 0 and 3 that will identify the solidity state of the block at the coordinate you checked.<br /><br />This is the absolute simplest way to arrange/access collision data I can think of.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Jul 11, 2014 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to generate bkg collision data?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Depending on your level/map structure, you might end up making multiple layers of metatiles. In my game, the level screens are made of 52 8x2 metatiles, which are actually sets of 4 2x2 metatiles (the game scrolls only horizontally, and has a status bar 4 tiles tall). 5 bytes go into defining the 8x2 metatile: 4 for the IDs of the 2x2 tiles, and 1 for the color attributes of the tiles (2 bits for each 2x2 tile). 5 bytes define the 2x2 metatiles: 4 for the IDs of the actual 8x8 pixel tiles, and 1 for the tile &quot;type&quot;. The &quot;type&quot; indicates whether or not its solid, liquid, hazardous, etc.<br /><br />Like tokumaru said, when I'm decompressing the level map down to the 8x8 pixel tile level, I can grab the tile type and put it into RAM. I use 2 pages of RAM to house the collision data for a rolling 2-screen window of level data. It gets updated as the screen scrolls. This makes collision detection very easy.<br /><br />The downside to this approach is that to keep the same graphic for a 2x2 tile but have it behave differently, you have to define a new 2x2 tile and make it a different type. 5 bytes is a small sacrifice, but depending on the complexity of your levels, sacrificing one of the available 2x2 tile IDs might be more of a problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Jul 11, 2014 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to generate bkg collision data?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've actually been considering developing a tool to create collision map data eventually, I just want to be sure I can get it working before I go down that road.<br /><br />I appreciate the response.  I'm still having a hard time understanding the use of a pointer.  With your help, I was able to implement a pointer for nametable data, but I'm still confused how to implement one for this purpose.<br /><br />I completely get the screen collision table you have created.  I also (think) I understand how to find the character's position (in terms of tiles...calculate how many rows he is down...x16...plus how many columns he is across sort of thing).  However, I'm not sure how to create a pointer and then call a reference to that pointer or where to write pointer data in this case (please forgive me if my nomenclature is off).  I think this is the main reason that my approach was to literally check the value of a tile since those values already exist, however the method your describing is what I definitely would rather pursue, it was sort of *next*.  If you could help me understand how the pointer would work in this instance (and subsequent instances where one might be required), that would be awesome.<br /><br />I'm sorry if this is vague, but thank you so much for your thought our and quick responses!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 11, 2014 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to generate bkg collision data?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Very few games recognize individual tiles as entities of the level, tiles are almost exclusively a graphical element used to represent a portion of a metatile.</div><br />Examples of the few games that do use 8x8 primitives include Dig Dug, Tetris, Dr. Mario, Wit's, NESnake 2, Battle City, Rampart, and other (mostly non-scrolling) games.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's probably because without an MMC5 the NES is unable to color individual tiles arbitrarily, so it makes sense to always process them in groups of 2x2, and that includes collisions.</div><br />An 8x8-oriented game separates its background into (usually predefined) &quot;zones&quot;. For example, in the snake games and the falling block games, the playfield has its own color set and everything else uses other color sets. In Rampart, each player's side has its own color set. Dig Dug uses color sets to represent soil strata. Battle City has destructible areas in one color set and in another. Attribute Zone is somewhere in the middle because while it uses 8x8 pixel cells, the areas of influence are 2x2 cells each. The Legend of Zelda uses &quot;vertical columns&quot; (16x176 pixel areas) as its primitive in outdoor areas but allows certain things like rocks to be placed at half-metatile boundaries, so long as the area just above and below the rocks uses the same color set.<br /><br />With that said, let's go back to games using 16x16 pixels as the primitive:<br /><br />There's a general <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" class="postlink">principle of not repeating yourself</a>. This means there should usually be a <a href="https://en.wikipedia.org/wiki/Single_version_of_the_truth" class="postlink">single version of the truth</a>, where &quot;the truth&quot; is the map layout. You'll end up <a href="https://en.wikipedia.org/wiki/Model_View_Controller" class="postlink">designing some sort of data model and then deriving various &quot;views&quot; of that model</a>. For example, if metatile value $1B represents a &quot;crate&quot; (or &quot;treasure chest&quot; or &quot;? block&quot;), then there will be one table describing the collision properties for $1B and other tables describing its appearance. The collision code takes the $1B and looks it up in the collision table; the drawing code takes the $1B and looks it up in the appearance table.<br /><br />Super Mario Bros. divides its 256 metatile numbers into four 64-metatile subspaces, and each subspace is hardcoded to one color set whose bits are the same as bits 7 and 6 of the metatile value. But this isn't redundant information because, say, values $04 and $44 represent completely unrelated metatiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Fri Jul 11, 2014 5:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Best way to generate bkg collision data?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, I understand the concept, thanks!  It's more the implementation I'm having a problem with.  I've done this sort in high level languages, just trying to translate it to my growing knowledge of ASM.  For instance, I can generally use my nametable setup as a reference of how to set up a table, however, For this instance, where would/should/could I store to values?  <br /><br />Once stored, i can use the figuring of the coordinate system to find what metatile is there and then read its value to determine what to do, i get this too.  I'm just trying to convert my logical understanding to ASM and the quirks of the NES.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br /><br />****EDIT****<br /><br />I was able to cobble together something based on all of your great advice, my intuition from high language environments, and other resources that 'works'...likely less than efficient, but for the learning exercise that this is supposed to be, it'll do!  Thanks so much!

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>