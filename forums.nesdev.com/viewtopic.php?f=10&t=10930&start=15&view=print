<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Getting around the DPCM bug in a ROM hack</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Getting around the DPCM bug in a ROM hack</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10930">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10930</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Sun Jan 26, 2014 8:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually that's fine because getting rid of the code for the second controller is of no consequence really. <br />But yeah, I've been meaning to learn all this, it's just that when I think about how much stuff there is, suddenly there's no wonder why there were so many people developing a single game. I just can't work on everything at once. It's no good that I'm interested in the APU features, and some of the PPU features, because there's still everything else to do.<br />And I really don't want much, just getting some sort of a NROM-based clone game done is the way to go at first I guess.<br /><br />Edit: Ok, I came up with something, but it's not even willing to compile it, saying I have illegal instructions in lines 7 and 9.<br />But it doesn't matter because it wouldn't work anyway.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">this_frame = $00<br />prev_frame = $14<br />usable_frame = $16<br />.org $C545<br /><br />controller_beg:<br />; Store two consecutive reads and then compare them<br />rts joyinit<br />sta this_frame<br />rts joyinit<br />tax <br />lda this_frame<br />sta prev_frame<br />txa <br />sta this_frame<br />lda prev_frame<br />cmp this_frame<br />bne controller_beg ; If reads don't match, start over<br />sta usable_frame<br />ldx #$00<br />stx this_frame<br />stx prev_frame<br />rts<br /><br />joyinit: ; Get all 8 bits from the controller port<br />ldx #$01<br />stx $4016<br />dex<br />stx $4016<br />ldx #$08<br />getbits:<br />lda $4016<br />and #$03<br />cmp #$01<br />ror this_frame<br />dex<br />bne getbits<br />rts<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 26, 2014 10:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />RTS takes no operand. Were you thinking of JSR?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Sun Jan 26, 2014 10:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh I'm an idiot, yeah that's probably what I meant, thanks.<br /><br />Edit: Yeah, this doesn't really work either. The bits are kind of the wrong way around now, and in the original game, my input is always seen at $16, flashes for a fraction of a second at $14 and I can't see a thing at $00 when I press something. <br />So actually, I don't even know which one of these the rest of the game gets the input from.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 26, 2014 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">za909 wrote:</div><div class="quotecontent">I have illegal instructions in lines 7 and 9.</div><br />That's because you tried to use an operand with the RTS operator, but RTS doesn't take any operators. You probably meant to use JSR here, to call the same subroutine twice. OK, now let's see what else is wrong:<br /><br />The actual joyinit looks correct, but unlike your first call to it suggests, it doesn't return any results in the accumulator, it stores the controller bits directly into the this_frame variable. This means that there's no point in having &quot;sta this_frame&quot; after the call. If the bits are already in this_frame, you're actually trashing them with the STA. Which leads to another problem:<br /><br />If the joyinit routine is overwriting the contents of this_frame, you have to back that up to prev_frame BEFORE calling it, otherwise you'll lose the previous frame's bits. Just do the &quot;lda this_frame; sta prev_frame&quot; before the calls to joyinit. Similarly, you will trash the first call's bits if you don't back them up before the second call to joyinit. You don't seem to be using the Y register, so that seems like a good place to temporarily put the bits in (put &quot;ldy this_frame&quot; between the two calls to joyinit).<br /><br />Now, after the second call, you already have the previous frame's bits in prev_frame, this frame's first read in Y and this frame's second read in this_frame. There's no need to store and load a bunch of stuff like you did, you can simply compare Y to this_frame with &quot;cpy this_frame&quot;. Now, the original suggestion was that you used the previous frame's bits in case the new reads didn't agree, but it seem you are trying to do the two reads again. Both are possible solution, and if you want to try again you have to jump back to the part after you have backed up last frame's bits, otherwise you'll trash them (if you think about it, you won't even the need the previous frame's bits y=if you're reading the joypad over and over, so you can get rid of everything related to prev_frame). If you just want to use the old bits, you can &quot;lda prev_frame; sta this frame&quot;. I see no need for the usable_frame variable, because the contents of this_frame will be the usable data.<br /><br />I guess this is all I can see wrong with your code. I have to agree that it looks very chaotic, and that you haven't planned the execution order very well in your head. Keep in mind that instructions in a program are executed in order, so it's easy to do a preliminary run of it in your head to see whether variables are being overwritten and where all the data is going when you move it around.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Jan 26, 2014 6:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Getting started on a game from scratch is much easier than getting started on a non-trivial hack. However, getting a game finished from scratch is much harder than most hacks, I'd say.<br /><br />There are several popular 6502 assemblers that will run on modern windows. I strongly prefer cc65, myself. cc65 comes with a disassembler, and you can use its linker's &quot;segment&quot; feature to easily align the code you are replacing in your hack.<br /><br />My advice is just to break your task down into small increments. Do a little bit at a time and make sure it works before moving on. Learn how to use FCEUX's debugger, or some other NES emulator's debugger as you're doing this.<br /><br />Another thing might help is generating a &quot;code data log&quot;. FCEUX can do this. It creates a map of what memory is code and which is data. This can help a lot when creating a disassembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sun Jan 26, 2014 8:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">When I'm stumped I pray. : )</div><br />I'm not a religious person, but if I were I wouldn't bother God with my NES ROM Hacking problems while so much bad stuff is happening all around the world!</div><br />God is omnipotent though, so he wouldn't care.<br /><br />(P.S. I'm not religious either.)</div><br />Oh, God is interested in what each one of us has to say to Him. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Sat Feb 01, 2014 3:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alrighty, update!<br />After a good 1 week of failing and only getting so close that I actually made a turbo controller out of the basic one, I decided to go ahead and use the code from tepples. (Thanks for that!) It still involved a tiny bit of work because I had to chop the code up and spread the pieces across the last two banks, so that I could avoid having to lose any space for samples.<br /><br />Before moving on to creating the DPCM player, I'll try to remove everything second controller-related (that'll be a thing...) on one hand because this way players won't be able to use the cheat features, plus I'll get a few bytes in the zero page to work with in my player routine.<br /><br />Please don't help me with this unless I'm tearing my hair out. The whole point of this should be that I figure things out myself, which I've already failed at doing.<br /><br />EDIT:Oh, never mind, that was pathetically easy. Right! Now comes the fun part with the DPCM samples.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Mon Feb 03, 2014 7:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I might get warning for double posting now or something, but noone's going to notice otherwise.<br />I sort of got it to work, but the rythmization isn't quite there, maybe you can spot some sort of a problem in my code, or it might be related to how and when the routine is called by the sound engine. The recording is supposed to be a single beat of two bass samples, and two kick drums, but it gets a little mixed up.<br /><br /><a href="http://acmlm.kafuka.org/uploader/get.php?id=4561" class="postlink">VirtuaNES Recording</a><br /><br />Current playback code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $8570<br /><br />eff_param = $C3<br />freq = $15<br />id = $17<br />ch_enable = $4015<br />dpcm_freq = $4010<br />dpcm_dc = $4011<br />dpcm_add = $4012<br />dpcm_len = $4013<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; The engine saves the parameter to $C3<br />&nbsp; &nbsp;jmp main <br /><br />&nbsp; &nbsp;; There's only 9 bytes of space here, so we're off to<br />&nbsp; &nbsp;; some other place!<br />&nbsp; &nbsp;<br />.org $8c9d<br />main:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; Save all 3 registers<br />&nbsp; &nbsp;; See if it's a sample (or a silence command (FF)). &nbsp; &nbsp;<br />&nbsp; &nbsp;; If not, disable channel and return<br />&nbsp; &nbsp;; If yes, stop currently playing sample, and play a new &nbsp; &nbsp;; one.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda eff_param<br />&nbsp; &nbsp;ldx #$0f<br />&nbsp; &nbsp;stx ch_enable<br />&nbsp; &nbsp;cmp #$ff<br />&nbsp; &nbsp;bne new_sample<br />&nbsp; &nbsp;jmp end<br />&nbsp; &nbsp;<br />new_sample:<br /><br />&nbsp; &nbsp;; Reset delta counter<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx #$00<br />&nbsp; &nbsp;stx dpcm_dc<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; Get sample ID and frequency<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;and #$0f<br />&nbsp; &nbsp;sta freq<br />&nbsp; &nbsp;lda eff_param<br />&nbsp; &nbsp;and #$F0<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;ror<br />&nbsp; &nbsp;sta id<br /><br />find_then_play:<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; Locate sample address and length in a lookup table<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx id<br />&nbsp; &nbsp;lda add_tbl,x<br />&nbsp; &nbsp;ldy len_tbl,x<br />&nbsp; &nbsp;sta dpcm_add<br />&nbsp; &nbsp;sty dpcm_len<br />&nbsp; &nbsp;lda freq<br />&nbsp; &nbsp;sta dpcm_freq<br /><br />&nbsp; &nbsp;; Re-enable channel to start playback<br /><br />&nbsp; &nbsp;ldx #$1f<br />&nbsp; &nbsp;stx ch_enable<br /><br />&nbsp; &nbsp;; Clear used RAM &amp; restore registers<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta freq<br />&nbsp; &nbsp;sta id<br />&nbsp; &nbsp;<br />end:<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;rts<br /><br />&nbsp; &nbsp;; I decided to make room for a maximum of 8 samples, in<br />&nbsp; &nbsp;; case this will be used in something else<br /><br />add_tbl:<br />&nbsp; &nbsp;.db $cd,$d2,$f7,$09,$ff,$ff,$ff,$ff<br />len_tbl:<br />&nbsp; &nbsp;.db $11,$0f,$04,$05,$00,$00,$00,$00<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Tue Feb 04, 2014 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />God is omnipotent!<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=U_b6TYxErY4&amp;t=59s">http://www.youtube.com/watch?v=U_b6TYxErY4&amp;t=59s</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Feb 08, 2014 12:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">za909 wrote:</div><div class="quotecontent">I might get warning for double posting now or something, but noone's going to notice otherwise.</div>No I haven't recieved any warnings for double posting, a few times I have quad posted <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> ...in my own thread though.  As long as you are making progress it's ok here, I think. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />   <br /><div class="quotetitle">za909 wrote:</div><div class="quotecontent">I sort of got it to work, but the rythmization isn't quite there, maybe you can spot some sort of a problem in my code, or it might be related to how and when the routine is called by the sound engine. The recording is supposed to be a single beat of two bass samples, and two kick drums, but it gets a little mixed up.</div>  When I was recieving odd sounding music from my .nes file I revisited the page where I had found the sound engine famiTone that Shiru made.  He had a good introduction webpage... and I read it slowly and it turned out that I hadn't setup one of the basic things he had talked about.  I had read his webpage quickly many times.  That slow read helped my song to sound correct!  Thought I should share this with you... hope you succeed too! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Sun Feb 09, 2014 1:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, yeah I figured out that it wasn't actually my programming that failed, but rather me translating the sequence data to hex, so things got uneven. I decided to throw a PHP-PLP in there just to be safe, and now it's working perfectly!<br /><br />The thing is though, that since I make it reset the delta counter for every new sample to avoid getting to $7F with the signal level by accident, the popping noise seems to differ a lot depending on certain emulators. In Famitracker it's next to inaudible, because the two bass samples leave the counter at $18 and $26 respectively. In VirtuaNES and VirtuaNSF, the popping is made even quieter. In FCEUX 2.2.2 everything is popping like mad. Nestopia is kind of ok. How bad could it be on a real console? I might have to add another comparison, so it resets to $00 only for the drum samples, and to $20 for the rest.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Feb 09, 2014 2:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">za909 wrote:</div><div class="quotecontent">The thing is though, that since I make it reset the delta counter for every new sample to avoid getting to $7F with the signal level by accident, the popping noise seems to differ a lot depending on certain emulators. In Famitracker it's next to inaudible, because the two bass samples leave the counter at $18 and $26 respectively. In VirtuaNES and VirtuaNSF, the popping is made even quieter. In FCEUX 2.2.2 everything is popping like mad. Nestopia is kind of ok. How bad could it be on a real console? I might have to add another comparison, so it resets to $00 only for the drum samples, and to $20 for the rest.</div><br />Some emulators have built-in DPCM pop filters. I would trust FCEUX in this case, I have found that its audio emulation seems to be quite accurate. Not sure what's going on with Nestopia, it doesn't have a pop filter as far as I know, but I could be wrong.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Feb 09, 2014 9:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting around the DPCM bug in a ROM hack</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Famitracker does not suppress DPCM pops. Its only filters are the usual lowpass on the whole circuit + DC filter highpass, which are pretty standard for emulating the NES.<br /><br />Because the DPCM pop is an all-band sound, it's affected by just about any subtle tweaks you could make to the overall signal. An emulator doesn't have to have specific DPCM pop suppression, a subtly different filter setup can make a quite audible difference. Even trying a few different NES or Famicom units, the pops will sound a little different.<br /><br />Some emulators do have methods specifically to suppress the DPCM pop, but if they do it should be an option and not on by default. I don't believe FCEUX, Nestopia, or VirtuaNES does this by default. I think in general the underlying digital emulation of DPCM pops is more or less the same across the board, but the subtle difference in analog filter implementations makes a bit of a difference on pops.<br /><br />Famitracker generally has very accurate sound emulation. I've compared it directly against hardware recordings many times. As I said above, though, the hardware is a bit of a moving target. DPCM pops are one of the most volatile sounds in terms of consistency across machines.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>