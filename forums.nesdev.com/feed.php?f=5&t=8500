<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=8500" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-01-09T10:21:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=8500</id>
<entry>
<author><name><![CDATA[kevtris]]></name></author>
<updated>2012-01-09T10:21:55-07:00</updated>
<published>2012-01-09T10:21:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88690#p88690</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88690#p88690"/>
<title type="html"><![CDATA[Re: Learning Principles of Hardware]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88690#p88690"><![CDATA[
<div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent"><br />I know my software side of computer engineering pretty well - but what about the hardware side?<br /><br />Like, for instance, what sort of knowledge allows kevtris to build an FPGA NES? Or allows someone to figure out how to design a modchip?<br /><br />I don't even know what I don't know, and I don't know how to start knowing. <br /><br />Does anyone know any good books, web sites, or other resources?<br /></div><br /><br /><br />I dunno, it didn't seem too difficult-  it just takes a long time.  <br /><br />I learned most of the basics before the internet existed in its current form; I had to learn from what few books I could find, and magazines.<br /><br />Today the magazines are all gone (except elektor, bleh.  I guess it might be OK for beginners/intermediates) and books are an endangered species.  Fortunately, the internet comes to the rescue, and if I need to learn anything new I just fire up google and search for it.<br /><br />The other day I had to learn something about infinite impulse response filters... so I googledit and sure enough, I learned enough to do what I wanted to do (SNES sample processing, actually).<br /><br />Unfortunately I don't know much about what kind of resources are available these days for learning, but my process for making something like an FPGA NES is to start small and work up.<br /><br />I started with the 6502,  made it run some code (by watching the address/data lines and internal registers on signaltap, the FPGA software's built in logic analyzer that lets you see what's going on inside).<br /><br />After the code ran more or less correctly (that was why I wrote nestest.nes, incidentally), I added 1 audio channel and got it playing an NSF or three, which I hard-coded at first.  After awhile, I got all the sound channels working.<br /><br />Then I made a PPU that didn't do much;  it just showed the tiles on the screen in black and white (no palette, no sprites, no scrolling, no attributes).  After that, I just added one piece at a time until it was working approximately correctly.<br /><br />Finally, the two were married in an unholy digital matrimony, and I had to find some small demos to run that'd fit in the FPGA's block RAM, so I could test it all.<br /><br />After that I read up a bunch on SDRAM and got it working good enough to store just program ROM (no CHR at that point).  So I could finally play games with more than 8K of PRG ROM (I was stuck with 8K of CHR RAM at this point).  That let me debug a mapper or two and get a few games running, like megaman 2 and fantastic adventures of dizzy.<br /><br />Finally, the SDRAM was dual ported after learning more about SDRAMs and stuff by making a small state machine to multiplex address reading, and then I could run games with CHR ROM and PRG ROM.<br /><br />So it just progressed via very small steps (there could be hundreds or thousands of these small steps in a project of this size) until it gets done.  <br /><br />The important thing is to not make the steps too big, or else you'll get discouraged and give up all too early.<br /><br />If you were to write a 6502 for the first time, the steps might be very small- getting the program counter to count.  adding 1 register (i.e. accumulator).  then adding an instruction decoder that can run 1 instruction (jmp maybe), and so on.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=230">kevtris</a> — Mon Jan 09, 2012 10:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2012-01-05T19:04:56-07:00</updated>
<published>2012-01-05T19:04:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88504#p88504</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88504#p88504"/>
<title type="html"><![CDATA[Learning Principles of Hardware]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88504#p88504"><![CDATA[
Start here: <!-- m --><a class="postlink" href="http://www.play-hookey.com/digital/">http://www.play-hookey.com/digital/</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Thu Jan 05, 2012 7:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-01-05T18:14:07-07:00</updated>
<published>2012-01-05T18:14:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88496#p88496</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88496#p88496"/>
<title type="html"><![CDATA[Learning Principles of Hardware]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88496#p88496"><![CDATA[
It's going to be tough...  Unless you're highly self motivated it's going to be pretty hard to get to that level without using an electrical engineering degree to get there.  You might be able to get a good starting point by snooping around the class and lab websites for a university with a good EE/CE program.  Here's the one for my school: <a href="http://eecs.oregonstate.edu/education/courses/" class="postlink">http://eecs.oregonstate.edu/education/courses/</a> There are links to the lab pages along with the lab manuals.  Might not be the best place to start but it's something.<br /><br />Don't get me wrong, I bet it can be done.  But a challenge at best.  My advice would be to find project to work on with digital logic.  Find a good computer architecture book and learn it, and work through the exercises.  I've rarely learned much from reading books but I do have a copy of one I can email if you PM me that's decent.  It's written by an instructor of mine and is actually based on the Atmega128 architecture.<br /><br />If you can get some basic things down you can start playing around with a CPLD/FPGA development board and some related projects.  At least for me I have a hard time learning things unless I work on a project and have to learn something and apply it to overcome the hurdle.  You can read page after page, but until you try and apply the knowledge and solidify it you're not likely to get anywhere.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Thu Jan 05, 2012 6:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[adam_smasher]]></name></author>
<updated>2012-01-05T17:24:07-07:00</updated>
<published>2012-01-05T17:24:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88492#p88492</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88492#p88492"/>
<title type="html"><![CDATA[Learning Principles of Hardware]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8500&amp;p=88492#p88492"><![CDATA[
I know my software side of computer engineering pretty well - but what about the hardware side?<br /><br />Like, for instance, what sort of knowledge allows kevtris to build an FPGA NES? Or allows someone to figure out how to design a modchip?<br /><br />I don't even know what I don't know, and I don't know how to start knowing. <br /><br />Does anyone know any good books, web sites, or other resources?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4826">adam_smasher</a> — Thu Jan 05, 2012 5:24 pm</p><hr />
]]></content>
</entry>
</feed>