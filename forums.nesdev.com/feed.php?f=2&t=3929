<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3929" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-02-24T23:15:04-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3929</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-02-24T23:15:04-07:00</updated>
<published>2008-02-24T23:15:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3929&amp;p=31189#p31189</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3929&amp;p=31189#p31189"/>
<title type="html"><![CDATA[Demo of queue for controller button presses]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3929&amp;p=31189#p31189"><![CDATA[
I wrote a clean example of how to queue controller button/D-pad presses inside an NMI, then read them from the main program outside the NMI. This allows the user to input lots of presses without the game losing any. The size of the queue can be adjusted to up to 128 presses, plenty for most programs. The example prints button presses, then waits half a second before checking the queue again, allowing you to easily queue up a bunch of presses, then watch them properly print out in sequence. Code assembles with ca65.<br /><br /><a href="http://h1.ripway.com/blargg/temp/controller_queue.zip" class="postlink">controller_queue.zip</a><br /><br />These are the core routines that implement the queue:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Adds byte A to queue<br />queue_press:<br />    ldx write_pos<br />    sta queue,x<br />    dex<br />    bpl :+<br />    ldx #queue_size<br />:   stx write_pos<br /><br />    cpx read_pos<br />    beq queue_overflowed<br />    <br />    rts<br /><br />; Removes byte from queue into A, or 0 if queue is empty<br />read_queue:<br />    lda #0<br />    ldx read_pos<br />    cpx write_pos<br />    beq @empty<br />    <br />    lda queue,x<br />    dex<br />    bpl :+<br />    ldx #queue_size<br />:   stx read_pos<br /><br />@empty:<br />    cmp #0<br />    rts</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Feb 24, 2008 11:15 pm</p><hr />
]]></content>
</entry>
</feed>