<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - FDS emulation attempt and questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">FDS emulation attempt and questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8712">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8712</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Tue Mar 13, 2012 3:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>FDS emulation attempt and questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Last night I struggled implementing FDS support in my emulator.
<br />I eventually got it working (as in it loads games successfully), but I am not happy with my implementation.*
<br />
<br />This is my current implementation. (Sound emulation parts are omitted for brevity.) Though it works, search for instances of "WRONG" in the source.
<br />
<br /><!-- m --><a class="postlink" href="http://pastebin.ca/2127813">http://pastebin.ca/2127813</a><!-- m -->
<br />
<br />Questions. (For now considering only <em>reading</em> operation mode.)
<br />
<br />– Does the disk reading position advance when disk IRQ is disabled? Logically it should, because the reading position is an aspect of the disk system, not the 2C33 which produces the IRQs, but I could not get my code working without that hack.
<br />
<br />– Can $4030 bit 1 indicate that data was transferred from/to disk even when the IRQ is disabled? I.e. could you possibly transfer data from/to disk with IRQ disabled, by just polling $4030 to see when $4024 can be updated or $4031 can be read?
<br />
<br />– In FCEU, clearing $4025 bit 6, when it was previously set, and bit 4 is zero, decrements the reading position by two bytes. I could not get my code working unless I did that too. Does that really happen on real FDS? If not, what should I do instead?
<br />
<br />– In general, the flowchart of my tick() is based half on experimentation (when disksys.rom stops giving error messages) and half on documentation. I would like it to be correct.
<br />
<br />
<br /><span style="font-size: 59%; line-height: normal">*) Not the least because it is more than third of the length of the original version of my entire NES emulator ;)</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Mar 14, 2012 7:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />iirc emulating the FDS correctly results in non-working games because the game dumps themselves are incorrect (missing GAP sections and some other crucial items).
<br />
<br />Emulators either have to employ hacks or attempt to reconstruct the missing sections in order for it to be operable.
<br />
<br />EDIT:  some related threads I dug up:
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=3372">http://nesdev.com/bbs/viewtopic.php?t=3372</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=738">http://nesdev.com/bbs/viewtopic.php?t=738</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Wed Mar 14, 2012 10:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">iirc emulating the FDS correctly results in non-working games because the game dumps themselves are incorrect (missing GAP sections and some other crucial items).<br /><br />Emulators either have to employ hacks or attempt to reconstruct the missing sections in order for it to be operable.</div>
<br />
<br />Allright, thanks. I got it working nicely now, by reading in the disk image in a format that includes the gaps, the start codes and the CRC (not calculated).
<br />Haven't tested writing yet, but at least the reading part now uses a simple and stupid model of operation, with no awkward hacks anywhere, and it works.
<br />
<br />I will post the code soonish.
<br />
<br />In the meantime, the answers to my own questions:
<br />-- Yes, the disk reading position does advance regardless of whether IRQs are enabled or not. However, the areas of data that are being accessed while the BIOS has the disk IRQ disabled, are usually the CRC (two bytes after the disk file that are not stored in the FDS image), and the "gap", which is a blank region of varying length separating files on the disk (also not stored in the FDS image), and the one-bit that signals the beginning of the new file.
<br />-- Clearing the $4025 bit 6 indicates that the RAM adapter connected to the FDS should set the internal flag (shown at $4032 bit 1) that indicates that the current disk position is outside a file. Setting the bit again makes the adapter wait for the next nonzero bit read from the disk (which is not in the FDS file), before clearing the flag again and continuing transferring bytes from/to the disk. If the bit is cleared during a write, a stream of zero-bytes will be written on the disk as long as the bit is clear. Clearing the bit also clears the CRC accumulator. As long as $4025 bit 6 is clear, the adapter will not notice one-bits on the disk even if it's currently scanning for them the first time.
<br />
<br />Answers to questions that I did not ask:
<br />-- Setting the $4025 bit 4 (handle CRC) during reading is done by the FDS BIOS in order to verify the CRC read from the disk. Without the bit set, it would accumulate the CRC instead. After verifying, the bit 4 in $4030 is set if there was a CRC error. During writing, the bit 4 of $4025 causes the contents of the CRC accumulator to be written to the disk. However, when the BIOS is not interested in the validity of the CRC, it will not set the flag after the end of the file, so you should not depend on it. Also one should note that setting the CRC flag does not signal the adapter that the current position is within a gap. After the CRC has been read/written, the adapter will still continue to transfer data bytes, even if it is within the gap.
<br />-- The gap in the between of files should be at least 5 milliseconds long (8950 cycles or 480 bits), or the FDS BIOS will be unable to load files. 976 bits is typical. There is no upper limit, as long as the data fits on the disk. (TODO: Check whether the gap should be longer when the file is to be loaded into VRAM. TODO: Check whether the minimum is different when writing.)
<br />-- The gap in the beginning of the disk (assuming that the FDS is immediately operational when $4032 bit 2 is cleared, which is not true on the real FDS) should be at least 271 milliseconds long (485520 cycles or 26150 bits), or the FDS BIOS will be unable to load files. 28300 bits is typical. There is no upper limit, as long as the data fits on the disk.
<br />-- The time to read 8 bits from the disk must be at least 106 CPU cycles, or the FDS BIOS will be unable to load files. 149 cycles is typical. There is no upper limit.
<br />-- The end of the gap is signalled by a single one-bit. In terms of bytes, you can consider it a $80 byte (this is what gets factored into the CRC calculation as well).
<br />-- The BIOS does not check the actual values returned in $4031 while it thinks it's reading the CRC. The values are still indicated there (I think), so at least theoretically a game could check them. In practise, you can just pass dummy values.
<br />
<br />Unanswered questions:
<br />-- Is there a delay to detecting an inserted disk?
<br />-- What kind of delay is there in powering up the motor? I.e. how many cycles from when the ($4025 &amp; 0x03) = 1 to when $4032 bit 1 is cleared.
<br />-- What happens if the disk is ejected while scanning?
<br />-- What happens if the motor is on while the disk is inserted?
<br />-- Whether the function of $4030 bit 1 is set to indicate the completion of 8 bits of data transfer even if $4025 bit 7 is clear, on the real FDS, is still unknown. (No known testcase. The BIOS never polls $4030 when $4025 bit 7 is clear.)
<br />-- Does the byte at $4031 indicate in real time what was read from the disk when $4025 bit 6 is clear, even though such data-assembly is not signalled through $4030 bit 1? (No known testcase. The BIOS never polls $4031 when $4025 bit 6 is clear or when $4032 bit 1 is set.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Wed Mar 14, 2012 9:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is no delay on disk insert. There is a switch that is engaged when the disk is set. If it's ejected then you just unset the disk and the BIOS will throw an error.
<br />
<br />The stuff you mentioned about Gaps and CRCs that are missing from the disk really annoyed me when looking at adding FDS support to my emulator. Most games though, atleast official games, use the BIOS for all disk operations. It was easy to just HLE these functions. Works just as well if not better since the time to complete is instant or atleast fully in your control.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Mar 15, 2012 1:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry to highhack this thread but there is something I really wonder about the FDS.
<br />
<br />Normally, the purpose to having a CRC is to compute the CRC after the transmission of data, and compare it with the CRC stored in the transmitted data.
<br />In our case that would be the 6502 computing the CRC of a FDS file when loading it and compare it with the CRC stored on the disc.
<br />
<br />But since the 6502 ingores the CRC, what's the point to even have the CRC stored on the disc ? Just having it stored on the disc (and ignored by the CPU) won't detect transmission errors. Or is there something I missed ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Thu Mar 15, 2012 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">But since the 6502 ingores the CRC, what's the point to even have the CRC stored on the disc ? Just having it stored on the disc (and ignored by the CPU) won't detect transmission errors. Or is there something I missed ?</div>
<br />The RAM adapter will calculate and verify the CRC. (If $4025 bit 4 is set at the end of file.) The CPU can check whether the RAM adapter detected a CRC error by reading $4032 bit 4 after the CRC has been read.
<br />It will detect errors in stored content on the disk, and errors in retrieval of the file data from the disk.
<br />Checking the CRC error is of course voluntary, but the CPU does not need to calculate it, because the hardware does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Mar 15, 2012 5:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh thanks !
<br />So in fact it's some chip in the RAM adapter who handles serialisation of bytes as well as CRC calculations.
<br />
<br />It's weird I don't understand why Nintendo choose to put so many electronics in it when this could have been done with the 6502 instead but oh well.... that's how it is.
<br />
<br />I think what's so messy with current FDS documentation is that it's never clear what is in the BIOS, what is done electronically in the RAM adapter and what is done electrically/electronically in the disk drive. This should be clarified and wiki-fied.
<br />
<br />Another think that makes me wondering is the varying gap sizes. Since the gap size can be so random, and there is 2 gaps for each files (one before block 3 and one before block 4), the disc capacity is probably not that fixed number (65k or whatever it was) but will decrease as there is more files, as the gaps will have to be stored on the disc as well. In that regard the .fds format is pretty unpractical (unless I missed something) since the disk may be full before the disk side on the image is full.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Thu Mar 15, 2012 5:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is the source code of my newer version. It also includes the audio synthesizer and the disk image parser. Because of some internal changes in the emulator it is no longer so self-contained unfortunately.
<br />
<br /><!-- m --><a class="postlink" href="http://pastebin.ca/2128362">http://pastebin.ca/2128362</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Thu Mar 15, 2012 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Another think that makes me wondering is the varying gap sizes. Since the gap size can be so random, and there is 2 gaps for each files (one before block 3 and one before block 4), the disc capacity is probably not that fixed number (65k or whatever it was) but will decrease as there is more files, as the gaps will have to be stored on the disc as well. In that regard the .fds format is pretty unpractical (unless I missed something) since the disk may be full before the disk side on the image is full.</div>
<br />
<br />That is a good point, but if you look at FDS images, there is always a fairly good amount of "free space". The amount of bits used in gaps easily fits into this ofcourse.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Mar 15, 2012 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Every emulator I know (with FDS driver) uses a couple of hacks for specific games. I don't know even if such stuff is useful for writing or improving my FDS driver.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 15, 2012 9:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">It's weird I don't understand why Nintendo choose to put so many electronics in it when this could have been done with the 6502 instead</div>
<br />Three reasons: <ul><li>They didn't have Mr. Wozniak or other Apple engineers on their team who were skilled in doing with software what other manufacturers felt the need to do in hardware. </li><li>CRC16 costs 66 cycles per byte. I use <a href="http://6502.org/source/integers/crc-more.html" class="postlink">this byte-at-a-time CRC</a> (with the alternative ending so I can use (d),Y addressing) as a PRNG in some of my newer projects, and it's a lot faster than the bit-at-a-time CRC32 that I had used in LJ65, Concentration Room, and Thwaite, but I still don't call it once per byte. </li><li>At some scale, the biggest cost of an ASIC is the pins, especially if you're already reserving the bulk of your die size for RAM. The circuit to calculate a CRC in hardware is tiny by comparison: just one more gate than the polynomial counter in the noise channels or in the CIC's program counter. </li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Mar 16, 2012 1:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent">There is a switch that is engaged when the disk is set. If it's ejected then you just unset the disk and the BIOS will throw an error.</div>
<br />That much was clear -- thanks for the reply anyway --, but I am wondering about the physical function of the drive. Does the motor still spin if signalled to do so, when the disk is out? What if the motor is already running (or instructed to be running) while the disk is inserted? How does it interact with finding the disk data beginning?
<br />And other questions I asked.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Mar 16, 2012 2:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The motor is definitely disabled when you press the eject button, as nothing prevents you to do that during a load for example.
<br />
<br />This is probably one of the only ways to have the reading head rest "in the middle of nowhere" instead of being at it's rest position at the end of the disc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Mar 16, 2012 2:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing I wonder about the CRC calculation.
<br />
<br />The BIOS sets the "check CRC" bit _after_ the first CRC byte has already been read (and presumably, accumulated into the CRC sum, rather than verified). How does that work?
<br />
<br />;checks the CRC	OK bit at the end of a block
<br />EndOfBlkRead:	JSR XferByte;	first CRC byte
<br />$E709	LDX #$28;	premature file end error #
<br />$E70B	LDA $4030
<br />$E70E	AND #$40;	check "end of disk" status
<br />$E710	BNE XferFail
<br />$E712	LDA $FA
<br />$E714	ORA #$10;	set while processing block end mark (CRC)
<br />$E716	STA $FA
<br />$E718	STA $4025
<br />$E71B	JSR XferByte;	second CRC byte
<br />$E71E	LDX #$27;	CRC fail error #
<br />$E720	LDA $4030
<br />$E723	AND #$10;	test CRC bit
<br />$E725	BNE XferFail
<br />$E727	BEQ ChkDiskSet
<br />
<br />Basically, it looks like the flowchart is like this.
<br />Assumptions:
<br />– our emulation model handles 8 bits at time instead of bit per bit.
<br />– the device has motor running and scanning, and the reaching of disk beginning has been confirmed.
<br />
<br />[EDIT: See posts on next page for corrected algorithm]
<br />
<br /><ul><li><strong>after receiving 8 bits in READ MODE:</strong><br /><br />	     <span style="color: #8080B0">If CRC-verify flag was not set, accumulate CRC with the contents of ShiftReg<br />	     If CRC-verify flag was set, XOR the ShiftReg into the CRC low 8 bits</span><br />             Fetch the current disk byte into ShiftReg<br />             <span style="color: #8080B0">If CRC-verify flag was set, XOR the ShiftReg into the CRC high 8 bits<br />	     (Note that $4032 bit 4 (CRC check result) is a bit-wise OR of all bits of the CRC at all times. If the CRC accumulator is zero, the bit is 0. Otherwise, it is 1.)</span><br />             Reload $4031 with the contents of ShiftReg<br />             <span style="color: #90B890">If $4025 bit 6 is 0, then clear internal flag: GapCovered=0<br />	     If GapCovered=1, then </span>Set $4032 bit 1 (to indicate $4031 is filled with data), and signal the IRQ if allowed<br />	     Move to next byte on disk<br />	     <span style="color: #90B890">If ShiftReg ≠ 0 AND $4025 bit 6 is 1, then set internal flag: GapCovered=1</span><br />             Wait ～149 cycles, and repeat<br /></li><li><strong>when writing 8 bits in WRITE MODE:</strong><br />	     <br />	     <span style="color: #8080B0">If CRC-verify flag was SET, put the CRC low bits into ShiftReg and shift the CRC right by 8 bits, filling the top with zerobits.</span><br />	     Store the value from ShiftReg into the disk<br />	     Reload ShiftReg from $4024<br />             <span style="color: #90B890">If $4025 bit 6 is 0, then clear internal flag: GapCovered=0<br />	     If GapCovered=1, then </span>Set $4032 bit 1 (to indicate $4024 is ready to accept data), and signal the IRQ if allowed<br />	     Move to next byte on disk<br />	     <span style="color: #90B890">If ShiftReg ≠ 0 AND $4025 bit 6 is 1, then set internal flag: GapCovered=1</span><br />	     Wait ～149 cycles, and repeat</li></ul>
<br />
<br />The moss-colored parts in this listing do the gap-end detection.
<br />The blue parts do CRC.
<br />
<br />Disclaimer: This is my analysis based on how the BIOS seems to expect the disk drive to work, and which implementation makes it work fine. It is not verified on actual console.
<br />It is worth noting in READING, that the interval between BIOS setting the CRC-check flag and checking the result of the check is just one disk-byte long. This implies that the adapter is supposed to perform the CRC check of 16 bits during the time of 8 disk bits.
<br />It is also worth noting in WRITING, that the CRC flag is set some time AFTER the IRQ for the first CRC byte is served. This means that you cannot write data into the disk immediately when $4024 is written into (or when IRQ is served), because at that point you do not yet know whether the actual data to be written into the disk is going to be a CRC.
<br />I think, the CRC shifting in writing also clears the CRC register rather than just rotating it. It will continue to write zero-bytes (gap) as long as writing is enabled and the motor is turned on.
<br />
<br />Questions: When game  / BIOS does not do any I/O writes, does the drive automatically return to the beginning of the disk (and continue running from there) upon reaching the end, or does it shut down? It seems like the BIOS is leaving the drive running after loading all files necessary for launching the game, and this screws up Zelda 2 in my emulator currently: When Zelda 2 begins accessing the disk at the title screen, the disk head is not in the beginning, but somewhere in the middle.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 16, 2012 6:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">_after_ the first CRC byte has already been read (and presumably, accumulated into the CRC sum, rather than verified). How does that work? </div>
<br />Apparently the mathematical structure of CRC is such that appending the correct CRC value to a bitstream will cause the running CRC value to return to the starting value (e.g. $0000 or $FFFF).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>