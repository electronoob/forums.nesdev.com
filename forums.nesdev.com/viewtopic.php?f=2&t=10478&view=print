<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - &quot;Stylistic&quot; question in NES programming</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">&quot;Stylistic&quot; question in NES programming</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10478">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10478</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Sep 09, 2013 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>&quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The other thread that I opened was about the hard facts of NES programming, especially with the CC65. Like &quot;What is a cfg file for?&quot; etc.<br /><br />In this thread here I'd like to discuss some questions about the programming <em>style</em>. I.e. common ways to achieve something, best practice etc. Things that aren't objective facts, but more certain styles that established themselves.<br /><br /><br />My first question is: How is the level structure for the game logic usually saved?<br /><br /><br />Possibility 1:<br /><br />There are some general variables that define how the level looks like and where the player can walk. From these variables, the background in the nametable is created. But during the algorithm that decides if the player can walk a certain way, only these general variables are used.<br /><br />Imagine a simple maze game where there are blocks/walls of 16 x 16 pixels that the player can't pass and the rest is the floor that the player can walk along.<br />Since the screen is 256 x 240 pixels and every block is 16 x 16 pixels, we have a playfield of 16 x 15 = 240 squares.<br />That means, the whole level structure (from a purely logical point of view, I'm not talking about the actual graphic tiles in the PPU yet) can be put into standard variables (or constants) of the size of 240 bits = 30 bytes. Each bit stands either for &quot;there is a wall in the way&quot; (1) or &quot;the way is free to walk&quot; (0).<br />In the beginning, the nametable is built up from these values: You loop through the bits and bytes of the variables and if there's a 1, you put the 2 x 2 wall tiles in the corresponding place and if there's a 0, you put the 2 x 2 floor tiles there.<br />Later, when the game runs, you don't look at the nametable anymore. All you do is take the x and y coordinate of the sprite, and through calculation, you extract the correct bits from your 30 bytes generic variables to see if the way that the character is about to go is free.<br /><br /><br />Possibility 2:<br /><br />You somehow create the background in the nametable (for example through some compressed ROM data that is extracted for this one action and then discarded again). And during gameplay, you actually literally read the values from the PPU itself. If the player wants to go up, you check the nametable at the corresponding location. If there is one of the wall tiles set, movement isn't possible, if one of the floor tiles is set, movement is possible.<br /><br /><br />In the first version, the level structure is abstracted away. Both, the nametable and the game logic use generic variables. To define if a character can walk somewhere, the PPU is never read, only the customly-defined variables that are either stored in the ROM or in the CPU's RAM.<br />In the second version, the level structure is directly defined by what is written in the nametable. The nametable, and therefore the PPU's RAM, is constantly read to see if the player is in a position to move.<br /><br /><br />How do real NES games do it?<br /><br />For example in &quot;Donkey Kong&quot;, can Mario climb a ladder because some variable tells the game that in this and that location there is supposed to be a ladder? Or does the game literally read the nametable at that location and recognizes that there is the ladder tile?<br /><br />So, if I manipulate the nametable in the PPU during a running game on an emulator, but I don't change anything in the regular CPU or the ROM data, could I change the gameplay, i.e. create working walls and ladders etc.? Or would the change only be visual while the movements of the player wouldn't be influenced, i.e. there would be a discrepancy between the gameplay's level structure and the visual representation on the screen?<br /><br /><br />What's the common practice for NES games here? In a normal PC game, I would of course put the level structure into a two-dimensional integer or byte or boolean array and only work from that array. I would never actually read the background graphics to decide what's to do in the game logic. Is this the same on the NES? Or are game logic conditions directly linked to the nametable contents?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Sep 09, 2013 1:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Because the NES (unlike the 2600) doesn't provide (almost) any PPU-assisted clipping calculations, NES games usually have better model-view-controller separation.<br /><br />(Exception: the NES has two readable bits in the register at $2002 pertaining to sprite behavior. These are usually used for UI, not for gameplay.)<br /><br />Also, because access to the nametables is restricted to only during vblank, doing such logic would require it being minimal enough to fit into the minimal amount of time (21/262 of the time) and so significantly restricts how much you can do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Sep 09, 2013 1:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright, so adding ladders in the nametable in &quot;Donkey Kong&quot; won't allow me to climb the platforms from any desired place, right?<br />I even find this better. I wouldn't have wanted to program against the graphics objects. I prefer cheking against abstract representations of the screen objects, saved in regular variables.<br /><br />By the way, is there an emulator that allows you to manipulate the nametable data at runtime? In FCEUX I can only <em>see</em> the data, but I didn't find a way to change it on the fly.<br /><br /><br />Now, how <em>is</em> the level data usually saved during gameplay? (I'm not talking about the initial data in the ROM chip which might be RLE compressed or whatever. I'm talking about the variables during live gameplay.)<br /><br />Let's take this here:<br /><img src="http://i43.tinypic.com/2emd3x2.png" alt="Image" /><br /><br />In this situation, would the data be saved in a bunch of variables that are all located right after another in the memory, having the below values?<br />(Four bits stand for one 16 x 16 big object. 0 is floor, 1 is fixed block, 2 is breakable block, 3, 4 and 5 would be the items and so on. The outer wall isn't saved since it's constant anyway.)<br /><br />Line 1: $00, $20, $00, $22, $20, $02, $20 <br />Line 2: $01, $01, $01, $21, $21, $01, $20<br />etc.<br />(The last half-byte per line is unused because the squares have an uneven number.)<br /><br />Is this how it works?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Sep 09, 2013 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">In FCEUX I can only <em>see</em> the data, but I didn't find a way to change it on the fly.</div><br />I'm pretty sure you can edit it in FCEUX's hex editor (I think it shows the CPU memory by default, but you can select PPU, ROM, etc.), but you don't have any visual feedback there. Maybe if you have both the name table viewer and the hex editor open you can see the tiles changing as you type them in.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Now, how <em>is</em> the level data usually saved during gameplay? (I'm not talking about the initial data in the ROM chip which might be RLE compressed or whatever. I'm talking about the variables during live gameplay.)</div><br />That will depend on the game, since every programmer is free to implement this as they see fit. Most games with large maps use metatiles of some kind. There are compression schemes that, unlike RLE or LZ, can be decompressed on the fly from the ROM. For example, just by using 32x32 metatiles (like Mega Man) levels become 16 times smaller than the raw name table data.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In this situation, would the data be saved in a bunch of variables that are all located right after another in the memory, having the below values?</div><br />Blocky maps like this are often stored in 2-dimensional arrays.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is this how it works?</div><br />I haven't looked at the game's code, but it could be. When you program a game it's important that you find the solution that works for your particular case, and you appear to have the right idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Grapeshot</b> [ Mon Sep 09, 2013 2:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />2k of RAM is enough to store about two screens worth of level data packed into a 2d byte array. That's the simplest solution and so the most widely used. Sometimes bit flags are used in those bytes for things like walkable/not walkable instead of being literal tile or metatile numbers.<br /><br />Games which need to scroll continuously in more than one direction will usually either use 8k of PRG-RAM and decompress an entire level worth of data into it at once, store one screen at a time with extra bytes for flags for enemies that can be killed or objects that can change state, or use some sort of display list format for the level data in memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Sep 09, 2013 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Now, how <em>is</em> the level data usually saved during gameplay? (I'm not talking about the initial data in the ROM chip which might be RLE compressed or whatever. I'm talking about the variables during live gameplay.)<br /></div> I don't think I can really say there's a consistent way people store the live copy of a level. Looking at a few homebrew:<br /><br />Driar stores the game state as a 224-byte array. Incrementing by one byte goes right, incrementing by 16 bytes goes down. Each byte specifies the corresponding metatile on screen. The 32s bit specifies whether the tile is foreground or background.<br />IsharaComix's Ludum Dare competition entry stores the map as a 120-byte array, one bit per tile.<br />A horizontally-scrolling game such as SMB1might store the game state as a series of vertical strips of game (i.e. increment pointer by one byte = go down)<br /><br />Generically, it's easiest if you can keep your entire map state to less than 256 bytes, because then you can just index a single array. Obviously you can exceed that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(Four bits stand for one 16 x 16 big object.<br /></div>The 6502 doesn't make indexing nybbles particularly easy. Unless I were in danger of running out of RAM, I'd probably stick with one byte per metatile. (Metatiles are most often 16x16 pixels, but not always)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Sep 10, 2013 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Grapeshot wrote:</div><div class="quotecontent">2k of RAM is enough to store about two screens worth of level data packed into a 2d byte array. That's the simplest solution and so the most widely used. Sometimes bit flags are used in those bytes for things like walkable/not walkable instead of being literal tile or metatile numbers.<br /><br />Games which need to scroll continuously in more than one direction will usually either use 8k of PRG-RAM and decompress an entire level worth of data into it at once, store one screen at a time with extra bytes for flags for enemies that can be killed or objects that can change state, or use some sort of display list format for the level data in memory.</div><br /><br />Did you mean to say 2 pages of RAM? I just ask because my levels are made of 16x16 pixel metatiles, which I decompress into RAM, two screens at a time. This takes exactly 2 pages of RAM.<br /><br />I would not recommend relying on actual tile numbers and their position on the name table to do collision detection. It's an alternative solution if you're running out of RAM, I guess, but you sacrifice flexibility, and often end up with redundant tiles in the CHR table (the same 8x8 pixel graphic can't serve more than 1 purpose unless you create a duplicate tile). It's really nice to have a separate collision map in RAM. It's typically much easier to work with, and can be formatted however you want.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Sep 10, 2013 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Grapeshot wrote:</div><div class="quotecontent">2k of RAM is enough to store about two screens worth of level data packed into a 2d byte array. That's the simplest solution and so the most widely used.</div><br />If you're saying the most widely used solution is to store the unpacked nametable (1024 bytes worth) in (CPU) RAM, you're simply wrong. Even for a game that has 8 KB WRAM that would be terribly wasteful.<br /><br />And there are plenty of games that don't have any extra RAM but still support multi-directional scrolling (e.g. Battletoads).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Grapeshot</b> [ Tue Sep 10, 2013 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I did actually mean 2 pages of RAM there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 10, 2013 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />SMB1 uses a 32x13-metatile sliding window, divided into a 16x13 array for nametable $2000 and a 16x13 array for nametable $2400.<br /><br />My current project uses a 32x24-byte array because it doesn't scroll (sorry, tokumaru) and there are 24 rows of 30 8x8 pixel cells.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Sep 10, 2013 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I'm pretty sure you can edit it in FCEUX's hex editor</div><br />Thanks. That works. I will have to play around with it a bit later.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Blocky maps like this are often stored in 2-dimensional arrays.</div><br />Assemply doesn't <em>really</em> have two-domensional arrays, does it? I assume it's a bunch of variables that are placed in memory right after another and where the current variable is calculated by<br />startLocation + y * width + x<br />Is this correct?<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">The 6502 doesn't make indexing nybbles particularly easy.</div><br />Why not? If I have a byte that includes two distinct values, one per half-byte, I would do the following:<br />If I want to read the value of the upper half-byte, I would shift the variable four bits to the right.<br />And if I want to read the value of the lower half-byte, I would AND-connect it with $0F.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I would not recommend relying on actual tile numbers and their position on the name table to do collision detection.</div><br />Yeah, as I said, I wouldn't have wanted to do this anyway. That's why I was asking if this is common practice in NES programming. Good that it isn't.<br /><br />I guess I will save the status of my background during gameplay in the following way:<br />No background object in my game will be smaller than 16 x 16 pixels. So, I would have to save a maximum of 16 x 15 statuses per screen. Since the gameplay will probably not happen on the whole screen because of the area that a TV might cut off, the gameplay might end up at 14 x 12 &quot;squares&quot;.<br /><br />Now, per square I don't have to save the ID of the actual meta-tile:<br />0: Street<br />1: Grass<br />2: Tree<br />3: House<br />4: Spikes<br />5: Hole<br />6: ...<br /><br />But only the status of the influence the square would have on the player:<br />0: Walkable (street, grass)<br />1: Wall (tree, house)<br />2: Walkable, but taking damage (spikes)<br />3: Instant death (hole)<br /><br />This way, each square would only require two bits (four possible statuses). That means:<br />14 x 12 squares = 168 squares<br />168 x 2 bits = 336 bits<br />336 bits / 8 = 42 bytes<br /><br />And that's it: For one screen, I need 42 bytes of background data and it includes everything that the game logic needs to communicate with the status values of the sprites. If there are more possible statuses for each square, I make it four bits instead and have 84 bytes.<br /><br />What would you say about it? (By the way, my game doesn't scroll, so I don't have to care for that.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 10, 2013 5:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">(sorry, tokumaru)</div><br />No, you suck! Hehe just kidding. I think I'm past the whole &quot;games need to SCROOOOOOLL!!!&quot; thing. I guess there's much more to a game than how technically complex it is if the idea is good.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 10, 2013 7:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Assemply doesn't <em>really</em> have two-domensional arrays, does it? I assume it's a bunch of variables that are placed in memory right after another and where the current variable is calculated by<br />startLocation + y * width + x<br />Is this correct?</div><br />Yup, you're right. In the past, I have pre-calculated the y * width part to create a table of pointers to each row, to make things faster. It was for a map made from really big blocks though, so there weren't that many pointers/rows and 256 horizontal blocks made a pretty long level.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I have a byte that includes two distinct values, one per half-byte, I would do the following:<br />If I want to read the value of the upper half-byte, I would shift the variable four bits to the right.<br />And if I want to read the value of the lower half-byte, I would AND-connect it with $0F.</div><br />It surely is possible, just not very efficient. If you do have the time necessary for the extra processing and you really don't need the extra bits, it's OK to use nibbles.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What would you say about it?</div><br />Sounds good. You will probably change this design later, that always happens... maybe because the packed bits are too hard to work with, maybe because you overlooked some types of blocks you might need... but you'll only know that when you start coding the engine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Sep 12, 2013 3:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another style question:<br /><br />Imagine we have a game character of 16 x 32 pixels (for example Mario). So, it consists of 2 x 4 actual sprite objects.<br /><br />If the character is mirrored, then it's of course not enough to just mirror every sprite object. Otherwise this:<br /><img src="http://i39.tinypic.com/2dvq5gl.png" alt="Image" /><br /><br />would not become this:<br /><img src="http://i42.tinypic.com/16hokmg.jpg" alt="Image" /><br /><br />but this:<br /><img src="http://i42.tinypic.com/4j28ab.jpg" alt="Image" /><br /><br />So, they also have to be re-arranged.<br /><br />Now, what's the common standard?<br />Do I reposition the eight sprite objects (i.e. sprite 1 switches places with sprite 2, sprite 3 switches places with 4, 5 with 6 and 7 with 8)?<br />Or do I change the tiles of each sprite object (i.e. sprite 1 switches tiles with sprite 2 etc.)?<br /><br />What's the value that is re-assigned to each sprite object when the whole character has to be mirrored? The location or the tile number?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Sep 12, 2013 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Stylistic&quot; question in NES programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Now, what's the common standard?</div><br />Meta-sprites. Just like with level maps, it's good practice to separate the game entities from the display hardware. In other words, don't hardcode OAM entries to your objects and manipulate them directly. The idea is is to have your objects modeled in RAM, and every frame use their coordinates to render meta-sprites to the OAM (this also helps with sprite cycling, because you can shuffle the objects/sprites around every frame). The routine that renders the meta-sprites scans lists of sprites and takes care of the mirroring, adjusting the coordinates and the step value based on the object's state (i.e. the x step can be 8 or -8 depending on the flipping). Some people prefer to simplify things by making 2 sets of meta-sprites, one facing left and the other facing right, so they don't have to deal with this. I guess this works fine if you have few sprites.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>