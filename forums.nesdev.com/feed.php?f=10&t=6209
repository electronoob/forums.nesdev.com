<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=6209" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-03-22T19:15:02-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=6209</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-03-22T19:15:02-07:00</updated>
<published>2010-03-22T19:15:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58837#p58837</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58837#p58837"/>
<title type="html"><![CDATA[Random questions from close examination...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58837#p58837"><![CDATA[
I'll try to answer in order:<br /><br /><strong>SEI</strong> - It sets the interrupt disable flag. This makes the CPU ignore any interrupt requests. Many NES programs never even use use interrupts (so they just use this instruction and never think about it again), but even the ones that do don't want any firing while the program is initializing. Only when the interrupts are properly configured the programs use the CLI instruction tell the CPU to answer to them.<br /><br /><strong>CLD</strong> - Yeah, the NES doesn't have decimal mode, but it's considered good practice to disable it for compatibility reasons. Nintendo was thinking about backwards compatibility (they considered making the SNES play NES games, but gave up), we are probably worried about the future... The NES won't last forever, so it doesn't hurt to stay compatible with a regular 6502.<br /><br /><strong>stack initialization</strong> - The stack pointer wraps around (it increments from $FF to $00 and decrements from $00 to $FF), so you don't have to initialize it for normal stack use. however, there are a few "tricks" you can do with the stack that require you to know where exactly it is. The NES doesn't have much RAM, and 256 bytes can be a lot to waste if all you do is back up a couple of values and use a few levels of subroutines, so if you know you are not gonna use all that space and initialize the SP to $FF you can safely use a good amount of RAM from $0100 onwards. There is also a trick to read values that are in the stack without having to pull them, which is transferring the SP to X (TSX instruction) and using different base addresses to read different elements ("lda $0101, x" to read the byte at the top, "lda $0102, x" to read the one below that, and so on) that fails if your stack wraps around.<br /><br /><strong>OAM</strong> - $2004 is used to write to the OAM byte by byte. If you use a lot of sprites that would take too much time, so much that you would hardly be able to update all the sprites in a single frame. To make the whole thing faster Nintendo implemented tha sprite DMA, which transfers 256 bytes from RAM to the OAM as fast as it can, so you don't have to do it the slow way. $4014 is not a mirror of $2004, it's a replacement. 100% of the commercial games use the DMA to update their sprites.<br /><br /><strong>Color 0</strong> - Yeah, the background is the one that stays at $3F00, but the NES doesn't really have the 32 bytes it was supposed to in order to hold 8 palettes of 4 colors. $3F10, $3F14, $3F18 and $3F1C do not exist, so they are mirrors of 3F00, 3F04, 3F08 and 3F0C. So when you write $3F10 (the 17th byte) it replaces what you wrote for $3F00. In my programs I treat palettes as having only 3 colors, and I have the background color separately. Something like this would make more sense than the typical loop that copies 32 bytes:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadPalette:<br />   lda #$3F<br />   sta $2006<br />   lda #$00<br />   sta $2006<br />   ldx #$01<br /><br />LoadPaletteLoop:<br />   lda Palette ;copy color 0<br />   sta $2007<br />   lda Palette, x ;copy color 1<br />   sta $2007<br />   inx<br />   lda Palette, x ;copy color 2<br />   sta $2007<br />   inx<br />   lda Palette, x ;copy color 3<br />   sta $2007<br />   inx<br />   cpx #25<br />   bne LoadPaletteLoop<br /><br />   &#40;...&#41;<br /><br />Palette:<br />   .db $00 ;background color<br />   .db $17,$37,$3C ;background palette 0<br />   .db $00,$00,$00 ;background palette 1<br />   .db $00,$00,$00 ;background palette 2<br />   .db $00,$00,$00 ;background palette 3<br />   .db $20,$22,$00 ;sprite palette 0<br />   .db $00,$00,$00 ;sprite palette 1<br />   .db $00,$00,$00 ;sprite palette 2<br />   .db $00,$00,$00 ;sprite palette 3</div><br />It's a bit more complex and bigger, but it pays off since you don't have to waste space storing colors that will never be displayed.<br /><br />EDIT: My answers are to big, people always post before I do... <img src="http://forums.nesdev.com/images/smilies/icon_mad.gif" alt=":x" title="Mad" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Mar 22, 2010 7:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-22T19:12:44-07:00</updated>
<published>2010-03-22T19:12:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58836#p58836</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58836#p58836"/>
<title type="html"><![CDATA[Random questions from close examination...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58836#p58836"><![CDATA[
You disable IRQs as your mapper if capable of IRQs isn't going to magically reset with the CPU. You could have an IRQ trigger during your startup code. Clearing decimal mode might be something Nintendo recommended. Maybe if the SNES had been backward compatible it would have been an issue with software that didn't do CLD. Setting up the stack is necessary as you have no idea what the state of it is until you initialize it like all memory. Ofcourse your program may be designed where it doesn't care if stack wraps around however some games use part of the stack page as RAM and it does matter then. <br /><br />The background color is mirrored in the palette. The first color (color 0) of every one of the 8 palette entries will change all the others as they are the same color. So the last write to a color 0 in a palette subset will set the background color.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Mon Mar 22, 2010 7:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-22T19:12:43-07:00</updated>
<published>2010-03-22T19:12:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58835#p58835</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58835#p58835"/>
<title type="html"><![CDATA[Re: Random questions from close examination...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58835#p58835"><![CDATA[
<div class="quotetitle">Orsi wrote:</div><div class="quotecontent"><br />Why do we write to this address instead of $2004?<br /></div><br />It triggers a DMA, which is the only sane way to get an entire sprite display list copied into OAM. See the bottom of <a href="http://wiki.nesdev.com/w/index.php/PPU_OAM" class="postlink">PPU OAM</a> on the wiki.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, I can't seem to figure out why the background colour of my rom is the 17th byte.<br /></div><br />The palette entries at $3F10, $3F14, $3F18, and $3F1C don't actually exist; they're mirrors of $3F00, $3F04, $3F08, and $3F0C respectively. (During normal rendering, $3F04, $3F08, and $3F0C are ignored.) So when you write $3F10, you overwrite the background color in $3F00.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Mar 22, 2010 7:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Orsi]]></name></author>
<updated>2010-03-22T17:52:32-07:00</updated>
<published>2010-03-22T17:52:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58828#p58828</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58828#p58828"/>
<title type="html"><![CDATA[Random questions from close examination...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6209&amp;p=58828#p58828"><![CDATA[
I've been analyzing code very thoroughly and I've come up with a few minor questions that I can't seem to answer. The questions I am asking are in the comments of the following code. I've attempted to detail every line of code to ingrain it into my head.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Reset:<br />        SEI       ;disable IRQs       - Why?<br />        CLD      ;disable decimal mode     - NES has no Decimal mode<br />                    ; would it really matter if this were left out?<br />        LDX #$FF<br />        TXS      ;Set up stack      - Is this necessary?<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;NMI routine, is called at the beginning of every frame if turned on<br />   ;uses: update graphics<br />NMI:<br />        LDA #$00      <br />        STA $2003        ;$2003 is the PPU's OAMADDR address<br />                 ; OAM &#40;Object Attribute Memory&#41;<br />                 ; write the address of OAM you want to access &#40;?&#41;<br />                 ; this is the low byte of the full address<br />                 ; since our sprites are at $0200, $xx00 is low byte<br />        LDA #$02  <br />        STA $4014           ;$4014 is the PPU's OAMDATA &#40;mirrored from $2004&#41;<br />                                ; write OAM data here &#40;NESWIKI&#41;<br />                                ; -Why do we write to this address instead of $2004?<br />        RTI           ;Returns program to where it was interrupted,<br />                        ; &#40;the Forever loop!&#41;</div><br /><br />Also, I can't seem to figure out why the background colour of my rom is the 17th byte. I thought the background colour was supposed to be the first byte of the palette at $3F00, am I doing something differently? Here are the following snippets.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadPalettes:<br />   LDA $2002          ;Set-up PPU to choose your colours <br />   LDA #$3F              ; a read to $2002 resets the address gate<br />        STA $2006          ; at $2006 which reads the high byte &#40;$00xx&#41;<br />        LDA #$00              ; followed by the low byte &#40;$xx00&#41;<br />        STA $2006           <br />        LDX #$00      <br />LoadPalettesLoop:   ;This loop goes through all the colours we chose<br />        LDA palette, x          ; in the palette routine at the bottom<br />        STA $2007                ; and sends them to the PPU's $2007 address<br />        INX                      ; where all data is sent/received<br />        CPX #$20               ;This checks if X has reached $20<br />        BNE LoadPalettesLoop     ;Go back if X isn't at $20 &#40;32 bytes&#41; yet</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">palette:         <br />.db $04,$17,$37,$3C      ;Background Palette &#40;first 16 colours/bytes&#41;<br />.db $00,$00,$00,$00      ; arranged in colour sets of 4<br />.db $00,$00,$00,$00      ; Byte 1 is always transparent<br />.db $00,$00,$00,$00      ; Byte 2-4 will be whatever colour you choose<br /><br />.db $00,$20,$22,$00      ;Sprite Palette &#40;second 16 colours/bytes&#41;<br />.db $00,$00,$00,$00<br />.db $00,$00,$00,$00<br />.db $00,$00,$00,$00<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4297">Orsi</a> — Mon Mar 22, 2010 5:52 pm</p><hr />
]]></content>
</entry>
</feed>