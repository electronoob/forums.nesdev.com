<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Spec for HLL targeting NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Spec for HLL targeting NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9143">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9143</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Thu Oct 18, 2012 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm still tweaking it but I have some good stuff working for ca65, at least I think so .. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I have the ability to use IF()-ELSE-ENDIF blocks and WHILE()-DO-ENDWHILE, DO-WHILE() (and alternate syntax with REPEAT-UNTIL)<br /><br />I can produce very efficient code, with the only limitations being that all ORs are first, then any ANDs. <br /><br />[You can place one OR block on the end in brackets - due to the recursive nature of the macro code you cannot have more than one test on the left of an AND or OR, such as (cond1 || cond2) &amp;&amp; cond3 ]<br /><br />Brackets are not needed - sort of - I'll explain more when I am finished<br /><br />Example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if ((buttonpressed BUTTON_A) &amp;&amp; ((comp a &gt; #$12) || (comp a &lt; #$8))<br />&nbsp; ; do stuff<br />endif<br /><br />;OR<br /><br />do<br />&nbsp; ;code<br />&nbsp; dex<br />while not zero &amp;&amp; bit6 clear<br /></div><br /><br />Of course there are a few other caveats (functions that could be called could destroy flags you want to check), but for the most part, if you understand basically what it is doing, it is very fast and will use all BXX instructions as expected rather than creating boolean tests.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sat Nov 30, 2013 10:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've finally made substantial progress, to the point it generates some workable assembly.  Here's a sample:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;index = 0<br />&nbsp; &nbsp;ii2 = 0<br />&nbsp; &nbsp;limit = 15<br />&nbsp; &nbsp;s8 src&#91;20&#93;<br />&nbsp; &nbsp;s8 dst&#91;20&#93;<br />&nbsp; &nbsp;while ii2 &lt; limit<br />&nbsp; &nbsp;&nbsp; &nbsp;dst&#91;index&#93; = src&#91;ii2&#93;<br />&nbsp; &nbsp;&nbsp; &nbsp;index = index + 1<br />&nbsp; &nbsp;&nbsp; &nbsp;ii2 = ii2 + 1<br />&nbsp; &nbsp;endw&nbsp; &nbsp;<br /></div><br /><br />6502 output:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta index<br />&nbsp; &nbsp; &nbsp; &nbsp; sta ii2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #15<br />&nbsp; &nbsp; &nbsp; &nbsp; sta limit<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp CHECK_0<br />LOOP_0:<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy ii2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda src,Y<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx index<br />&nbsp; &nbsp; &nbsp; &nbsp; sta dst,X<br />&nbsp; &nbsp; &nbsp; &nbsp; inc index<br />&nbsp; &nbsp; &nbsp; &nbsp; inc ii2<br />CHECK_0:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ii2<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp limit<br />&nbsp; &nbsp; &nbsp; &nbsp; bcc LOOP_0<br />ENDWHILE_0:<br /></div><br /><br />Of course this output isn't optimal - the finished compiler will do a second pass to keep the index vars in the x and y registers.  Mostly this is to let people who were interested know I'm back to working on it.  There's an updated spec in the original post.  Since uc65 is now live and open source, it might be tempting to simply add the features I was planning for Noism.  Except I don't like Java that much.  Here's a complete progress report:<br /><br />	Fully implemented:<br />		Syntax parsing and symbol generation<br />		Line comments and block comments<br />		Flow control and while/dowhile looping<br />		Nested parenthetical operations<br />		Indexed array accesses<br />                Pointer declaration and addressing<br />		Variable declaration<br />		Function calls and returns<br />		Number format checking<br />		Basic syntax checking (i.e. can a symbol follow the previous symbol)<br />                Output of pseudo-asm syntax, used for testing features and converting to target cpu<br />		<br />	Partially implemented:<br />		6502 asm output<br />		Structures<br />                Scoping and static allocation of space for inner-scoped variables<br />	<br />	Not started yet:<br />		Function pointers<br />		.asm file output<br />		Complete error checking<br />		Compiler directives<br />		Multi-byte variable accesses<br />		Signed numbers<br />		16-bit/multibyte code output<br />		for looping<br />                z80 asm output

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Nov 30, 2013 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had completely forgotten about this project. It's nice to see you have made some progress.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Dec 01, 2013 2:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I had completely forgotten about this project. It's nice to see you have made some progress.</div><br />I also had forgotten.<br />It looks like your code generation is pretty good !!<br />One thing it could do is to see that the check &quot;ii2 &lt; limit&quot; will always be true on it's first iteration, and transform the while loop into a do-while loop, saving a useless jump in the code.<br />However I admit it's not as simple as it sound to implement.<br /><br />Way better than the pure crap that CC65 generates (the same code would generate several kilobytes of code using indirect addressing all the time when you didn't even use pointers in the original code).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sun Dec 01, 2013 5:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Way better than the pure crap that CC65 generates (the same code would generate several kilobytes of code using indirect addressing all the time when you didn't even use pointers in the original code).</div><br /><br />Examples of the crap by cc65:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void test(void)<br />{<br />&nbsp; &nbsp;unsigned char index = 0;<br />&nbsp; &nbsp;unsigned char ii2 = 0;<br />&nbsp; &nbsp;unsigned char limit = 15;<br />&nbsp; &nbsp;unsigned char&nbsp; src&#91;20&#93;;<br />&nbsp; &nbsp;unsigned char&nbsp; dst&#91;20&#93;;<br />&nbsp; &nbsp;while (ii2 &lt; limit)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; dst&#91;index&#93; = src&#91;ii2&#93;;<br />&nbsp; &nbsp; &nbsp; ++index;<br />&nbsp; &nbsp; &nbsp; ++ii2;<br />&nbsp; &nbsp;}<br />}</div><br /><br />generates a crap indeed:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; ---------------------------------------------------------------<br />; void __near__ test (void)<br />; ---------------------------------------------------------------<br /><br />.segment&nbsp; &nbsp;&quot;CODE&quot;<br /><br />.proc&nbsp; &nbsp;_test: near<br /><br />.segment&nbsp; &nbsp;&quot;CODE&quot;<br /><br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;pusha<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;pusha<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$0F<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;pusha<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$28<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;subysp<br />L0015:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$29<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;cmp&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;bcs&nbsp; &nbsp; &nbsp;L0016<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;sp<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;sp+1<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$2A<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L001A<br />&nbsp; &nbsp;inx<br />L001A:&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;pushax<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;sp<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;sp+1<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#$16<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L001D<br />&nbsp; &nbsp;inx<br />L001D:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$2B<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L001E<br />&nbsp; &nbsp;inx<br />L001E:&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;stx&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;(ptr1),y<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;staspidx<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$2A<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$01<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(sp),y<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;L0015<br />L0016:&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$2B<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;addysp<br /><br />.endproc</div><br /><br />However,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void test(void)<br />{<br />&nbsp; &nbsp;static unsigned char index = 0;<br />&nbsp; &nbsp;static unsigned char ii2 = 0;<br />&nbsp; &nbsp;static unsigned char limit = 15;<br />&nbsp; &nbsp;static unsigned char&nbsp; src&#91;20&#93;;<br />&nbsp; &nbsp;static unsigned char&nbsp; dst&#91;20&#93;;<br />&nbsp; &nbsp;while (ii2 &lt; limit)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; dst&#91;index&#93; = src&#91;ii2&#93;;<br />&nbsp; &nbsp; &nbsp; ++index;<br />&nbsp; &nbsp; &nbsp; ++ii2;<br />&nbsp; &nbsp;}<br />}</div><br /><br />generates (DATA and BSS sections omited):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; ---------------------------------------------------------------<br />; void __near__ test (void)<br />; ---------------------------------------------------------------<br /><br />.segment&nbsp; &nbsp;&quot;CODE&quot;<br /><br />.proc&nbsp; &nbsp;_test: near<br /><br />.segment&nbsp; &nbsp;&quot;CODE&quot;<br /><br />L001A:&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;L0012<br />&nbsp; &nbsp;cmp&nbsp; &nbsp; &nbsp;L0014<br />&nbsp; &nbsp;bcs&nbsp; &nbsp; &nbsp;L001B<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#&lt;(L0019)<br />&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;#&gt;(L0019)<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;L0010<br />&nbsp; &nbsp;bcc&nbsp; &nbsp; &nbsp;L001F<br />&nbsp; &nbsp;inx<br />L001F:&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;stx&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;L0012<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;L0017,y<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y<br />&nbsp; &nbsp;inc&nbsp; &nbsp; &nbsp;L0010<br />&nbsp; &nbsp;inc&nbsp; &nbsp; &nbsp;L0012<br />&nbsp; &nbsp;jmp&nbsp; &nbsp; &nbsp;L001A<br />L001B:&nbsp; &nbsp;rts<br /><br />.endproc</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Sun Dec 01, 2013 6:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Glad to see you're making progress!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sun Dec 01, 2013 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looks good.<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">...saving a useless jump in the code.</div><br />I agree with this. I can't see a need to jump down to the branch. Have the branch at the start of the loop. Maybe I am missing something?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Dec 01, 2013 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What you're missing is that this optimization is complicated to implement (while perfectly possible).<br />For all declared &amp; initialized variables, there is need to have the initial value itself memorized in the compiler itself. If the variables are ever affected with anything other than a constant literal value (or another value that reduces to a constant literal) then it should be marked as &quot;scratched&quot;.<br /><br />Then when a while or for loop is encountered, the test condition has to be checked at compile time against the variables. If anything in the expression tree is marked as &quot;scratched&quot; then you can perrform no optimisation. Else you can evaluate the expression fully, and it'll either evaluate to &quot;true&quot; or &quot;false&quot;.<br />If it evaluates to &quot;false&quot; then you can remove the loop completely (and it'd be a good idea to issue a warning to the user, as it's probably an error of his side).<br />If it evaluates to &quot;true&quot; then you can turn it into a do-while loop, so you avoid a dummy check at loop entering.<br /><br />Note that this is my interpretation of the problem, the actual implementation might need to be even more complex than this short description.<br /><br />@Shiru : Wow, CC65 can produce such code ? Declaring the variables as &quot;static&quot; makes so much a difference ? I'm very impressed <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <br />Definitely far to optimal code, but it's somewhat decent compared as to what it produces under normal conditions.<br />I should try to use CC65 again and declare everything &quot;static&quot; and see how it turns out.<br /><br />Still it should be doable to hack the compiler so that everything is &quot;static&quot;. Although this keywoard always confused the heck out of me in C. As far as I undestand it can have completely different meaning depending on where it's used. With GCC &quot;static&quot; global variables are invisible to other files, and &quot;static&quot; functions can use nonstandard calling convention (leading often to much more optimal code). In fact all functions should be static ideally but then you can give up separate compilation and intermixing with other languages.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Dec 01, 2013 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Still it should be doable to hack the compiler so that everything is &quot;static&quot;. <br /></div>Look at the compile-time flag <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-Cl</tt>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Dec 01, 2013 3:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">As far as I undestand it can have completely different meaning depending on where it's used. With GCC &quot;static&quot; global variables are invisible to other files, and &quot;static&quot; functions can use nonstandard calling convention (leading often to much more optimal code). In fact all functions should be static ideally but then you can give up separate compilation and intermixing with other languages.</div><br />Yes, in global scope static makes the identifier (variable or a function) local to the module (file). In function scope it basically makes the variable a global variable in function scope.<br /><br />Many compilers nowadays have link time code optimization, so I don't think your &quot;ideal&quot; of all functions being static is that useful in the end.<br /><br />Also there's a slight difference between local static variables and the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-Cl</tt> switch of cc65. When local static variables are used, the variable is only initialized once at the beginning of the program. When <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-Cl</tt> is used, the variables are initialized every time the function is entered.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Sun Dec 01, 2013 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for continuing forward on this project.  There is definitely a target audience for this project and I'm thrilled to be one =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sun Dec 01, 2013 6:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Then when a while or for loop is encountered, the test condition has to be checked at compile time against the variables.</div><br /><br />I see what you are saying. I was thinking this would be better:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LOOP_0:<br />&nbsp; &nbsp; &nbsp; &nbsp; lda ii2<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp limit<br />&nbsp; &nbsp; &nbsp; &nbsp; bcs ENDWHILE_0<br />&nbsp; &nbsp; &nbsp; &nbsp; ldy ii2<br />&nbsp; &nbsp; &nbsp; &nbsp; lda src,Y<br />&nbsp; &nbsp; &nbsp; &nbsp; ldx index<br />&nbsp; &nbsp; &nbsp; &nbsp; sta dst,X<br />&nbsp; &nbsp; &nbsp; &nbsp; inc index<br />&nbsp; &nbsp; &nbsp; &nbsp; inc ii2<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp LOOP_0<br />ENDWHILE_0:<br /></div><br /><br />But this way a JMP is required each loop rather than just the first. I may have to rethink the way I do some things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sun Dec 01, 2013 6:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the encouragement, y'all.<br /><br />'dowhile' eliminates the jump to the first conditional check; the updated spec will mention that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I agree with this. I can't see a need to jump down to the branch. Have the branch at the start of the loop. Maybe I am missing something?</div><br /><br />If you need to test the condition before the loop runs at all, it's better to jump down there than to have the branch at the head of the loop, jumping past the loop if the test fails.  Then the actual loop has to keep jumping back to the test.  Ironically, this is one of the few sensible constructs of cc65.<br /><br />The one optimization I'm really concerned with is eliminating any lda/sta/cmp/inc instruction that can be replaced with ldy/sty/cpy/iny and if the index var needs arithmetic, using tay in place of sta/ldy.  I've got a good idea of how this will be implemented.  Also, another one I'd like to implement is removing the cmp operation for countdown loops.  (cc65 to its credit also eliminates cmp when beq/bne works).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;while ind &gt; 0<br />&nbsp; &nbsp;&nbsp; &nbsp;ind = ind - 1<br />&nbsp; &nbsp;&nbsp; &nbsp;ii2 = ii2 - 1<br />&nbsp; &nbsp;endw<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LOOP_0:<br />&nbsp; &nbsp;&nbsp; &nbsp;dec ii2<br />&nbsp; &nbsp;&nbsp; &nbsp;dec ind<br />&nbsp; &nbsp;&nbsp; &nbsp;bne LOOP_0<br /></div><br /><br />That second example of cc65 output still makes me glad to be working on this.  I actually made a map-scrolling demo in C earlier this year, just to see if working on a whole new language was even worthwhile, and the most tiresome thing was flagging each var as local or global with a comment.  cc65 doesn't allow anonymous unions, so that's also a little inconvenient though maybe tolerable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sun Dec 01, 2013 7:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But this way a JMP is required each loop rather than just the first.</div><br /><br />Yeah, I took extra care to make the compiler not output loops like this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Dec 02, 2013 11:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Spec for HLL targeting NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strat wrote:</div><div class="quotecontent"> Also, another one I'd like to implement is removing the cmp operation for countdown loops.</div><br />If you know your start and end values, this code snippet works for a FOR loop (8-bit, in ca65 macro code):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />; calculate the first invalid value (if this value is found at the test, exit the loop)<br />_END_COUNTER_VALUE_&nbsp; = &lt; ( ( _STEP_ + _TO_VALUE_) + ( _FROM_VALUE_ - _TO_VALUE_ .mod _STEP_) )<br /><br />; if high bit of 2nd iteration and high bit of 2nd LAST iteration are high AND END_COUNTER_VALUE_ is positive<br /><br />.if ( (_FROM_VALUE_ + _STEP_ ) &amp; ( _END_COUNTER_VALUE_ - _STEP_ ) &amp; $80 ) .and <br />&nbsp; &nbsp; (.not (_END_COUNTER_VALUE_ &amp; $80))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BMI START_LABEL<br />; if high bit of 2nd iteration and high bit of 2nd LAST iteration are low AND END_COUNTER_VALUE_ is negative<br />.elseif (.not (((_FROM_VALUE_ + _STEP_ ) | ( _END_COUNTER_VALUE_ - _STEP_ )) &amp; $80 )) .and <br />&nbsp; &nbsp; &nbsp; &nbsp; (_END_COUNTER_VALUE_ &amp; $80)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BPL START_LABEL<br />; last value is zero<br />.elseif _END_COUNTER_VALUE_ = 0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BNE START_LABEL<br />.else<br />&nbsp; &nbsp; ; need to check loop against end value:<br />&nbsp; &nbsp; .if .xmatch(_COUNTERVAR_, x) ; found X<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx #_END_COUNTER_VALUE_<br />&nbsp; &nbsp; .elseif .xmatch(_COUNTERVAR_, y) ; found y<br />&nbsp; &nbsp; &nbsp; &nbsp; cpy #_END_COUNTER_VALUE_<br />&nbsp; &nbsp; .elseif .xmatch(_COUNTERVAR_, a) ; found a<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #_END_COUNTER_VALUE_<br />&nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; lda _COUNTERVAR_<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #_END_COUNTER_VALUE_<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; BNE START_LABEL<br />.endif<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>