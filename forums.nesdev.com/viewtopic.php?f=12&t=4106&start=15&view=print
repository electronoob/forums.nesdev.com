<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SPC7110 Reverse Engineering Project</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SPC7110 Reverse Engineering Project</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=4106</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>21</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Wed Jun 04, 2008 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">A-1 is "address negative 1", because it's one bit lower than A0 which selects a WORD on a 16-bit ROM. When a 16-bit ROM can be put into 8-bit mode (/BYTE signal), D15 generally becomes an input which selects which byte of the word is output on D0-7. This is why in the document you mention that D0-7 and strangely D15 are connected, because D15 is really A0 and 16-bit A0 = 8-bit A1 etc.</div><br /><br />Hm. Like the  /BHE on the 8086. Only that there A0 does the job. Got it. <br />So that means that the MROM U2 is actually internally 16 Bytes. Thanks kyuusakku, one more mystery solved (for me at least <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />).<br /><br />I have some USB 2.0 documentation, but didnt' had a chance to look at that closer now. Will do so the next days. Any suggestions from you? <br /><br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Right now i don't have much free time, and the little i have is being devoted to another project that have higher priority in my list. In some weeks' place, however, i should have some time to try it but, as said, i'm not very optimist about it...</div>
<br />
<br />Well, I could shift the DD project a bit on lower priority..I got a blank new FEoEZ cart just yesterday and she eyes me all the time from the shelf ^^;
<br />
<br />Finally something seems to start moving. Its about time!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Wed Jun 04, 2008 4:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">I have some USB 2.0 documentation, but didnt' had a chance to look at that closer now. Will do so the next days. Any suggestions from you? </div>What do you expect to do with that documentation? lol If you want to just interface USB to a one time project, use a FTDI module like everyone else.
<br />
<br />BTW, USB 2.0 is way not necessary for SNES and USB modules are like <a href="http://cgi.ebay.com/FTDI-UM245R-USB-Parallel-FIFO-module-FT245-AVR-PIC-ARM_W0QQitemZ150254922781QQihZ005QQcategoryZ100184QQssPageNameZWDVWQQrdZ1QQcmdZViewItem" class="postlink">US$30 after shipping</a>... you could interface a ROM emulator to the EPP parallel port with less logic than the USB module's glue too.
<br />
<br />Do you plan on building a ROM emulator for this project? I've designed an 8/16-bit ROM emulator (13x 74 series chips - $5.50), and I could turn it into a dual ROM emulator and add an EPP interface but it'd be a big chore so I'd only do it if you're serious. PS: you know I'm Calpis on Assembler right? :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Wed Jun 04, 2008 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Do you plan on building a ROM emulator for this project? I've designed an 8/16-bit ROM emulator (13x 74 series chips - $5.50), and I could turn it into a dual ROM emulator and add an EPP interface but it'd be a big chore so I'd only do it if you're serious. </div><br /><br />Perhaps I explained myself wrong. I don't want to build an on-cart emulator, I want to directly supply the data in real time from the pc to the SPC7110. <br />I imagined it could work as follows :<br /><br />SPC asserts address + read to USB interface<br />USB forwards address + read request to the PC<br />A listening client program on the PC supplies the required memory content<br />back <br />the USB interface forwards it to the SPC.<br /><br />Tad√†. Piece of cake. Only issue? Speed.<br /><br />This way we would have a fast and reliable tool to use "on the fly". <br />And for that, im sure you'll agree, you need something damn fast - USB 2.0 seems just the best choice. You know what I mean : If I have the cannon, why can't i shoot the bird with it?<br />And since I don't care about spending something on that (knowing the results that may pop out), let's make something good and reliable rather than something that, well, may work but not as expected (like the CELL processor <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />, j/k).<br /><br />The device you listed is maybe too slow? Consider that the SPC7110 bus may not run at the same clock as the SNES bus. <br />Also, does the device support bidirectional tx or is it only one-way? <br /><br />Perhaps parts like those would be more suitable<br /><br />DLP-245PA, DLP-245PB-G, DLP-245SX and so on?<br /><br />Only "problem" is that those are 40 pins instead of the 44 pins on the cart, but who cares? If you confirm they are suitable, I'm going to buy them.<br /> <br />Damn you tempted me to buy it straight away <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">PS: you know I'm Calpis on Assembler right? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />
<br />No, really?? <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />   <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />
<br />And yes, I'm damn serious about this whole thing, been like that for the last two years  <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" />, but DD has always been my top priority so far cause I didnt know where to start. Of course I would be into building it and paying for it! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Jun 04, 2008 10:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">No need to bug me. I have consistently expressed my interest on this for a long time, from the time when i was bugging The Dumper for him to construct a hardware interface to the last Kammedo-Charles MacDonald attempt to build such a thing.</div>
<br />Can someone give a historical rundown of what has been done so far?
<br />
<br />I remember there was a whole discussion on CherryRoms, and at one point I understood what was in the files at least since some digging around showed I wrote some programs and began analyzing some things.  I however do not remember any of those things.
<br />
<br />All I have left is this apparrently:
<br />
<br />focussing on just the first few input bytes -&gt; output bytes
<br /><a href="http://filer.case.edu/kam17/feoez_0.txt" class="postlink">feoez_0.txt</a>
<br /><a href="http://filer.case.edu/kam17/feoez_all.txt" class="postlink">feoez_all.txt</a>
<br />
<br />similar for the other game
<br /><a href="http://filer.case.edu/kam17/mdh_all.txt" class="postlink">mdh_all.txt</a>
<br />
<br />Some indication that the algorithm is adaptive, which considering the SDD1 had changing contexts to maximize compression is not unreasonable. 
<br /><a href="http://filer.case.edu/kam17/allign0.gif" class="postlink">allign0.gif</a>
<br /><a href="http://filer.case.edu/kam17/allign2.gif" class="postlink">allign2.gif</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Wed Jun 04, 2008 11:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Perhaps I explained myself wrong. I don't want to build an on-cart emulator, I want to directly supply the data in real time from the pc to the SPC7110. </div><br />When you said you wanted a USB-"U2" interface, I assumed that was the ROM.<br /><br />Unless you manually clock the SPC, this way just doesn't make any sense, and clocking the SPC isn't practical since USB has huge latency! That's why all USB devices have FIFO, because it's not close to instantaneous.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">I imagined it could work as follows :<br /><br />SPC asserts address + read to USB interface<br />USB forwards address + read request to the PC<br />A listening client program on the PC supplies the required memory content<br />back <br />the USB interface forwards it to the SPC.<br /><br />Tad√†. Piece of cake. Only issue? Speed.<br /><br />This way we would have a fast and reliable tool to use "on the fly". <br />And for that, im sure you'll agree, you need something damn fast - USB 2.0 seems just the best choice.</div>You don't understand, USB is fast only because it's packets have big payloads. If every payload was a couple of bytes representing control signals to the SPC interface, it'd be slow as hell to interface since the process relies on FEEDBACK. Not only that but unless the SPC has an acknowledge signal, you'll still have to manually give the FIFO fixed wait states since it's not real time. Honestly, because of this using the parallel port will be much faster than USB if you directly interface with the chip. It's not possible for the 8 MHz parallel port to beat the propagation time of the chip.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">The device you listed is maybe too slow? Consider that the SPC7110 bus may not run at the same clock as the SNES bus. <br />Also, does the device support bidirectional tx or is it only one-way? </div>The ROM emulator works at over 1MiB/s, only limited by A) the operating system's LPT calls, B) the (pseudo) ISA bus (~4x 8 MHz cycles) C) the EPP device's wait state (adjusted for maximum RAM propagation).<br /><br />It doesn't matter what speed the SPC operates at with a ROM emulator since SRAM is without a doubt faster than the SPC's mask ROM.<br /><br />Of course the device is bidirectional, as I wrote initially I think the best plan of attack is to upload SPC data ROM, run a program on SNES which dumps decrypted data to the other RAM, which is then read back by the PC. Because the ROM emulator can reset the SNES, this can be entirely automated (though cycle speed would be severely limited by the SNES).<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Perhaps parts like those would be more suitable<br /><br />DLP-245PA, DLP-245PB-G, DLP-245SX and so on?<br /><br />Only "problem" is that those are 40 pins instead of the 44 pins on the cart, but who cares? If you confirm they are suitable, I'm going to buy them.<br /> <br />Damn you tempted me to buy it straight away :P</div>
<br />??? Those are the same thing I linked, but with PICs! How will that help?! You will now have to do I/O through the MCU lol Talk about slow! The FT245's maximum throughput is 1 MiB/s (like half maximum EPP), but with a MCU now it's gotta be less than a quarter of that... You should have bought the plain module and connected it to a CPLD (or better yet, just get the CPLD and connect directly to LPT).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Thu Jun 05, 2008 2:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can someone give a historical rundown of what has been done so far? </div>
<br />
<br />There is no much to say... There haven't any advance since your discussion in cherryroms' forum back in 2004; i think by that date i did an attempt to look at the data, but i failed to see anything interesting. However, i didn't employed any type of automatic processing that time, so i have always felt i could have done a more serious attempt; that's what is in my to-do list.
<br />
<br />In the while, i have been eagerly awaiting for somebody to construct a hardware interface, but the only serious attempt in this time has been Kammedo/Charles MacDonald's one.
<br />
<br />From what i remember, you did an analysis of the compressed data starting with variable amounts of zeros to conclude which ordering the input and output streams used (i mean, which bits were used first within every byte), and that the algorithm showed an adaptive behaviour, being stabilized the input bits/output bits rate in 1/128 (just like the S-DD1).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jun 05, 2008 5:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Of course the device is bidirectional, as I wrote initially I think the best plan of attack is to upload SPC data ROM, run a program on SNES which dumps decrypted data to the other RAM, which is then read back by the PC. Because the ROM emulator can reset the SNES, this can be entirely automated (though cycle speed would be severely limited by the SNES).</div>
<br />I agree that this is the only sane and reasonable approach. Also, correct me if I'm wrong, but isn't this a compression chip, not encryption, and hasn't all the data from the games already been decompressed and is known? I thought the main purpose was so that an emulator could have the original 2 MB or whatever compressed data, rather than something like 14 MB of decompressed data (compressed with zlib, which only halves it or so).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Thu Jun 05, 2008 6:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Of course the device is bidirectional, as I wrote initially I think the best plan of attack is to upload SPC data ROM, run a program on SNES which dumps decrypted data to the other RAM, which is then read back by the PC. Because the ROM emulator can reset the SNES, this can be entirely automated (though cycle speed would be severely limited by the SNES).</div><br />I agree that this is the only sane and reasonable approach. Also, correct me if I'm wrong, but isn't this a compression chip, not encryption, and hasn't all the data from the games already been decompressed and is known? I thought the main purpose was so that an emulator could have the original 2 MB or whatever compressed data, rather than something like 14 MB of decompressed data (compressed with zlib, which only halves it or so).</div><br /><br />Well actually its all about the adventure for me. Getting rid of those 14 MB of data is secondary <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />. And it's actually a decompressor, not a compressor or decrypter.<br /><br />I confirm what you said, : the SPC7110 can only _read_ (Charles MacDonald confirmed this, but im still hoping he was wrong) from the U2 bus, not _write_ on it.<br />This means that for dumping the decompressed data you would need to make it pass through the SPC7110 first, which means you would have to dump it either from the save chip (after a monitor program would had copied it there), or from the SNES's memory, which means the whole system would need :<br /><br />a) the feoez cart with the rom emulator connected to a second pc par port <br />b) a  GDSF7 (in my case) connected via a par port to the pc for dumping the results<br />c) a monitor program to control the SPC on the GDSF.<br /><br />Messy. There is still hope that one of the grounded pins is a write latch signal for the U2 pins, but how the hell should we find out which it is?<br /><br />OR, you bridge the ROM emulator to the SNES, through a latch barrier.<br />Then you can do everything from the GDSF and the monitor program.<br />Kyuusaku? Do you think that would be feasible?<br /><br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">Can someone give a historical rundown of what has been done so far?<br /><br />I remember there was a whole discussion on CherryRoms, and at one point I understood what was in the files at least since some digging around showed I wrote some programs and began analyzing some things.  I however do not remember any of those things.<br /><br /></div>
<br />
<br />Hey neviksti, great to see you are still alive ^^ !  Did you manage to work through the GDSF bios some more? I took the liberty to post the files on the ynt website btw (the Header file from TheDumper anbd the BIOS map from you). If you feel I should take them down, just tell me (cause i posted the map without your permission).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Jun 05, 2008 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">isn't this a compression chip, not encryption</div>I misspoke.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">This means that for dumping the decompressed data you would need to make it pass through the SPC7110 first, which means you would have to dump it either from the save chip (after a monitor program would had copied it there), or from the SNES's memory, which means the whole system would need :<br /><br />a) the feoez cart with the rom emulator connected to a second pc par port <br />b) a  GDSF7 (in my case) connected via a par port to the pc for dumping the results<br />c) a monitor program to control the SPC on the GDSF.</div>GDSF7?! This outline is ridiculous, the system only needs TWO small ROM emulators, one for each SPC bus. The ROM emulator which stores the SNES code also stores the results. BOTH emulators can be connected to the SAME parallel port.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Messy. There is still hope that one of the grounded pins is a write latch signal for the U2 pins, but how the hell should we find out which it is?<br /></div>Yeah, YOUR way is messy lol. What's a write latch? Memory control signals are active low, so any grounded pins will always be active (and not the write signal). So U2 *is* the SPC's ROM?<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">OR, you bridge the ROM emulator to the SNES, through a latch barrier. Then you can do everything from the GDSF and the monitor program. Kyuusaku? Do you think that would be feasible?<br /></div>What's a latch barrier? There's no reasonable way to use a GDSF7; The GDSF's I/O port must handshake in software, which means even more work and speed loss and that's assuming the GD and SPC can somehow cohabit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Thu Jun 05, 2008 4:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">Hey neviksti, great to see you are still alive ^^ !  Did you manage to work through the GDSF bios some more? I took the liberty to post the files on the ynt website btw (the Header file from TheDumper anbd the BIOS map from you). If you feel I should take them down, just tell me (cause i posted the map without your permission).</div>
<br />Those were notes I compiled for myself while I was working on that.  So, like most of my notes unfortunately, there's enough to be somewhat helpful but not enough to let me pick up were I left off (I'm not sure what some of the comments in those notes even mean now).  If you or anyone else find them useful, by all means feel free to share it.
<br />
<br />I haven't touched any SNES projects in quite awhile now, so forgive my rustiness.  Due to the fact that you have a cartridge, and a SF7, I'd suggest we start nice and simple:  make a SNES program that dumps decompressions from the cartridge to BRAM.  Using the copier menu you can then save the BRAM and check if your program worked fine.
<br />
<br />While we can't do completely arbitrary decompressions this way, it is likely that we can see the output from all possible first two bytes, and much other data to get us going.
<br />
<br />Basically, to get this moving as soon as possible, let's start as simple as possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Thu Jun 05, 2008 10:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">I misspoke.</div> <br />Oh god, kill him xD.<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">GDSF7?! This outline is ridiculous, the system only needs TWO small ROM emulators, one for each SPC bus. The ROM emulator which stores the SNES code also stores the results. BOTH emulators can be connected to the SAME parallel port.<br /></div><br /><br />Yep true. But then again, you have to mess around with two chips, not just one. Invasive, but surely effective.<br /><br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">Yeah, YOUR way is messy lol. What's a write latch? Memory control signals are active low, so any grounded pins will always be active (and not the write signal). <br /></div><br /><br />I misspoke. I meant attached to Vcc <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">So U2 *is* the SPC's ROM?<br /></div><br /><br /><br />Yep, I think you can pretty much see it like that, because the U2 is only accessible by the SPC7110, and nothing else.<br /><br />And another thing which you (kyuusaku) probably dont know : the SPC has 64K (Charles Mac Donald is convinced of that, I for myself think its only 32K) of dedicated RAM (mapped at bank $50) in which it decompresses all the data it reads from the U2 chip. As by now, we dont know if there is a way to tell the chip where to decompress the data (or I dont remember, have to take a look at the notes). So that means you wouldnt even need another ROM emulator, but only a transfer port, or a GDSF mapped in pass-through on bank $50  - god plese correct me if I am wrong.<br /><br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">What's a latch barrier? There's no reasonable way to use a GDSF7; The GDSF's I/O port must handshake in software, which means even more work and speed loss and that's assuming the GD and SPC can somehow cohabit.<br /></div><br /><br />No wait, now you are going out of context. I meant you just use the GDSF to actually sit between the SPC and SNES and thus dump the result from SNES memory (as a savestate for an example?).<br />Actually, neviksti said pretty much the same what I meant:<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">make a SNES program that dumps decompressions from the cartridge to BRAM.  Using the copier menu you can then save the BRAM and check if your program worked fine.<br /></div><br /><br />A latch barrier is what we (in Italy, or at least where I studied) call a serie of 244/245, which are usually used to enable write data / address from a (for example) CPU like the 8086 on the data / address bus. <br /><br />Because of that they are also called "drivers" here, dont know if tis the correct way to name them buut what wuold you expect from Italy <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /><br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">Those were notes I compiled for myself while I was working on that.  So, like most of my notes unfortunately, there's enough to be somewhat helpful but not enough to let me pick up were I left off (I'm not sure what some of the comments in those notes even mean now).  If you or anyone else find them useful, by all means feel free to share it.<br /><br />I haven't touched any SNES projects in quite awhile now, so forgive my rustiness.  Due to the fact that you have a cartridge, and a SF7, I'd suggest we start nice and simple:  make a SNES program that dumps decompressions from the cartridge to BRAM.  Using the copier menu you can then save the BRAM and check if your program worked fine.<br /><br />While we can't do completely arbitrary decompressions this way, it is likely that we can see the output from all possible first two bytes, and much other data to get us going.<br /><br />Basically, to get this moving as soon as possible, let's start as simple as possible.</div>
<br />
<br />I recall having tried to contact you for a while back then - welcome back ^^! Oh, and if Im not wrong, you said you had more notes about that somewere. Would you mind taking a look? I had planned to put the whole CR forums for read-only on the YnT (or the romhacking.net) site , but sadly I havent been able to contact CR's owner. And believe me, I tried.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Fri Jun 06, 2008 2:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent"><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">I misspoke.</div> <br />Oh god, kill him xD.</div><br />There's a bit more bickering going on here than is comfortable for a topic that should be friendly collaboration.  May I please request that everyone stop pouncing on mistakes and focus on the fun of reverse engineering this beast?<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">And another thing which you (kyuusaku) probably dont know : the SPC has 64K (Charles Mac Donald is convinced of that, I for myself think its only 32K) of dedicated RAM (mapped at bank $50) in which it decompresses all the data it reads from the U2 chip. As by now, we dont know if there is a way to tell the chip where to decompress the data (or I dont remember, have to take a look at the notes). So that means you wouldnt even need another ROM emulator, but only a transfer port, or a GDSF mapped in pass-through on bank $50  - god plese correct me if I am wrong.</div><br />This sounds like merely an additional method of reading data obtainable from the $00:48xx registers mentioned previously.  For our purposes this doesn't seem to give an advantage, unless I am missing something.  For example if there is some way to get the chip to use some of the RAM as input to the decompression.  Are the tests the cartidge runs completely understood?<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent">No wait, now you are going out of context. I meant you just use the GDSF to actually sit between the SPC and SNES and thus dump the result from SNES memory (as a savestate for an example?).<br />Actually, neviksti said pretty much the same what I meant:<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">make a SNES program that dumps decompressions from the cartridge to BRAM.  Using the copier menu you can then save the BRAM and check if your program worked fine.<br /></div></div>
<br />To be clear, what I was suggesting involved no modifications.  Therefore it would only allow decompressions of byte patterns we can already find on this chip.
<br />
<br />Assuming we are on the same page, the idea is then:
<br />If you get this to work, it would give us some great data to get us started.  This will hopefully give us enough data to figure out the class of compression used, and allow us to formulate precise test cases.  At this point these test cases will probably not be able to be found in the ROM randomly and therefore we will need a way to run arbitrary data through.  At this point we can add a ROM emulator to the board to replace U2.  It can be very small, 8kb would probably be more than enough.
<br />
<br />
<br />So first things first:
<br />Can you play the game on passthrough on the SF7?
<br />(basically checking if the delays are too long, and if the clock signal is making it to the cartridge)
<br />
<br />EDIT: Yes, kyuusaku's idea (which sounds not to need the SNES, and everything controlled from a parallel port) is the most automated and has a faster throughput (insert-&gt;decompress-&gt;readout) rate.  But the method I suggested above gets us data to play with almost immediately, which we can use to formulate some more specific test cases while you can work on extending your system with a rom emulator (of which you would only need one).
<br />
<br />As always, this is merely a suggestion.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kammedo</b> [ Fri Jun 06, 2008 3:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><div class="quotetitle">kammedo wrote:</div><div class="quotecontent"><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">I misspoke.</div> <br />Oh god, kill him xD.</div><br />There's a bit more bickering going on here than is comfortable for a topic that should be friendly collaboration.  May I please request that everyone stop pouncing on mistakes and focus on the fun of reverse engineering this beast?<br /></div><br /><br />Hehe no worries, that was actually just a friendly way to make fun, nothing more. But you are right, and I think we should focus more on the beast.<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">This sounds like merely an additional method of reading data obtainable from the $00:48xx registers mentioned previously.  For our purposes this doesn't seem to give an advantage, unless I am missing something.  For example if there is some way to get the chip to use some of the RAM as input to the decompression.  Are the tests the cartidge runs completely understood?<br /></div><br /><br />the $50 bank is the place where the decompressed data gets placed by the decompression process of the SPC7110 by default. <br /><br />That is, you supply the table offset, the pointer number, the number of bytes to be decompressed (or the numer of compressed bytes to process, I dont remember) to the relative regs, activate the chip, and you get the decompressed data from bank $50. <br /><br />The point of seeing if it can decompress data from the same bank is intresting tho. We can investigate more about it.<br /><br />Im not sure about it being the same if you use manual decompression (that is you read the data from the 00:48xx interface). I have to check that. Also, part of the tests I reversed, I will have a look at the rest too. I still have the old trace files i think.<br /><br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">To be clear, what I was suggesting involved no modifications.  Therefore it would only allow decompressions of byte patterns we can already find on this chip.<br /><br />Assuming we are on the same page, the idea is then:<br />If you get this to work, it would give us some great data to get us started.  This will hopefully give us enough data to figure out the class of compression used, and allow us to formulate precise test cases.  At this point these test cases will probably not be able to be found in the ROM randomly and therefore we will need a way to run arbitrary data through.  At this point we can add a ROM emulator to the board to replace U2.  It can be very small, 8kb would probably be more than enough.<br /></div><br /><br />Hm. Lets see if I got it right : you would suggest trying to find some specific patterns to look at, starting from the data present in the original U2 chip? Remember, we have both compressed and uncompressed data (aka graphics packs) already, and I even had started to write an analyzer tool which would allow you to handle comparisons on compressed / uncompressed data. <br />Hope to have it somewhere, If I do, @ Andreas: what functionality would be required for you to put the tool to good use?<br /><br /><div class="quotetitle">neviksti wrote:</div><div class="quotecontent">So first things first:<br />Can you play the game on passthrough on the SF7?<br />(basically checking if the delays are too long, and if the clock signal is making it to the cartridge)<br /><br />EDIT: Yes, kyuusaku's idea (which sounds not to need the SNES, and everything controlled from a parallel port) is the most automated and has a faster throughput (insert-&gt;decompress-&gt;readout) rate.  But the method I suggested above gets us data to play with almost immediately, which we can use to formulate some more specific test cases while you can work on extending your system with a rom emulator (of which you would only need one).<br /><br />As always, this is merely a suggestion.</div>
<br />
<br />I think that shouldn't be a big issue (playing the game in passthrough).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Fri Jun 06, 2008 7:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hope to have it somewhere, If I do, @ Andreas: what functionality would be required for you to put the tool to good use? </div>
<br />
<br />That's impossible to say at this point, and i would suggest you to completely forget about it. All the people who could be interested in taking a look at the data (neviksti, byuu, Nach, me, ...)  is perfectly able to make his own tools on the fly as the research progress. So raw compressed/uncompressed data is all we need.  <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jolly_codger</b> [ Fri Jun 06, 2008 9:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Could be coincidental. This 'pseudo-pattern' caught my eye.
<br />
<br /><!-- m --><a class="postlink" href="http://www.mediafire.com/?l39ddrmhtye">http://www.mediafire.com/?l39ddrmhtye</a><!-- m -->

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>21</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>