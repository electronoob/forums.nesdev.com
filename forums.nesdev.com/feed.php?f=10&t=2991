<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=2991" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-05-25T12:05:05-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=2991</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-05-25T12:05:05-07:00</updated>
<published>2007-05-25T12:05:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24447#p24447</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24447#p24447"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24447#p24447"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Do you mean if an NMI fired while the previous one was still running?<br /></div><br />Yes, that's why it's called the Non-Maskable Interrupt (NMI). The 6502 has no concept of an NMI routine, just that of the NMI being asserted and causing the code to vector to the handler address. Once it's there, the NMI is over in the 6502's eyes. NMI is meant for things which must be reliably responded to, and why it's edge-triggered (once NMI line is asserted, it can be de-asserted and NMI will still occur, unlike IRQ).<br /><br />The IRQ, on the other hand, has an inhibit flag which serves as a "still executing IRQ handler routine" flag, though there's no requirement that it be left set (inhibited) until the end of the IRQ handler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri May 25, 2007 12:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-05-25T12:04:17-07:00</updated>
<published>2007-05-25T12:04:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24446#p24446</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24446#p24446"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24446#p24446"><![CDATA[
Thanks for the info.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If a game is programmed to have the NMI routine not clearing $2000.7, and if the NMI holds longer than a frame, it's unavoidable that the programm will crash, until you do some tricks.<br /></div><br />I guess the NMI routine can take longer than a frame to execute, as long as this doesn't happen too often, or the stack will definitely overflow.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If this is possible (NMI's firing before the previous one ended), and you read a flag right at the begining of the routine it could still work well... if a flag indicates that the previous NMI hasn't finished yet, only do the music, then return.<br /></div><br />Yes, this would work well, unless the music code itself is very slow and slow downds things even more (wich is unlikely to be the case).</div><br />Yeah, I doubt any regular music code would take a significant ammount of time of the frame, as the rest of the game logic is more complicated and also has to run every frame. Anyway, I think this is a valid option, since the music code can execute quickly, NMI's won't pile up and overflow the stack.<br /><br />I prefer not to do this for my game, since I'll be using multiple NMI routines at different parts of the game, and I'd rather have the main code control what routines execute at what times, instead of the routines themselves doing that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri May 25, 2007 12:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-05-25T11:38:23-07:00</updated>
<published>2007-05-25T11:38:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24444#p24444</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24444#p24444"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24444#p24444"><![CDATA[
For IRQs, they will never fire while one is executing if you do nothing special, because the I flag is automatically set on all interupts, disabling IRQs. The flag is automatically returned when you return from the IRQ, wich is normally clear in all cases, exept if the IRQ was caused by a brk opcode. Nothing prevent the IRQ routine to clear the I flag once the source of the IRQ has been acknownledged, allowing new IRQ to occurs before the first finishes. If the I flag is clear befor the IRQ source is acknownledged, the IRQ won't stop firing as soon as the cli (or possibly plp) opcode is met, and then you'll get a never-ending chain of IRQs, crashing the processor.<br /><br />For NMIs, it's pretty much the same, the I flag is automatically set, unallowing IRQs to fire until the NMI returns or the flag is cleared by hand. The difference is that NMIs can still be triggered at anytime, regardless of the I flag, so the only way to disable NMIs is to clear $2000.7. If a game is programmed to have the NMI routine not clearing $2000.7, and if the NMI holds longer than a frame, it's unavoidable that the programm will crash, until you do some tricks.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If this is possible (NMI's firing before the previous one ended), and you read a flag right at the begining of the routine it could still work well... if a flag indicates that the previous NMI hasn't finished yet, only do the music, then return.<br /></div><br />Yes, this would work well, unless the music code itself is very slow and slow downds things even more (wich is unlikely to be the case). I even think many Konami games does something like that (I haven't checked in details).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri May 25, 2007 11:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-05-25T11:03:47-07:00</updated>
<published>2007-05-25T11:03:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24443#p24443</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24443#p24443"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24443#p24443"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />That is very bad programming from Nintendo, because they did everything in their NMI and disabled NMIs at all until it's finished<br /></div><br />Yeah, this sure causes music slowdown, because each NMI has to wait for the previous one to end, and if that takes longer than the time of a frame, a full frame will be lost.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />(without the disabling, the game would crash).<br /></div><br />Do you mean if an NMI fired while the previous one was still running? From a hardware point of view, does that even happen? Can an NMI fire while the previous one hasn't finished yet? I once read about IRQ's not firing before the previous IRQ routine finished, but I'm not sure.<br /><br />If this is possible (NMI's firing before the previous one ended), and you read a flag right at the begining of the routine it could still work well... if a flag indicates that the previous NMI hasn't finished yet, only do the music, then return. If the previous NMI has finished, do all the graphics, sound, and game logic last. It would work just as well as well as if the game logic was outside of the NMI routine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri May 25, 2007 11:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-05-25T09:27:53-07:00</updated>
<published>2007-05-25T09:27:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24441#p24441</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24441#p24441"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24441#p24441"><![CDATA[
You can hear the music slow down in Zelda when the game overloads, and you can hear the music slow down AND the status bar flicker in SMB where there is many enemies. That is very bad programming from Nintendo, because they did everything in their NMI and disabled NMIs at all until it's finished (without the disabling, the game would crash).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri May 25, 2007 9:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2007-05-24T12:40:23-07:00</updated>
<published>2007-05-24T12:40:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24415#p24415</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24415#p24415"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24415#p24415"><![CDATA[
Crap<br /><br />I knew about Final Fantasy, but got mixed up with SMB.  My mistake!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Thu May 24, 2007 12:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-05-24T12:36:50-07:00</updated>
<published>2007-05-24T12:36:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24414#p24414</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24414#p24414"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24414#p24414"><![CDATA[
My opinion is that if you already got hte program working by polling $2002, the quickest way to make use of NMI's is to just set a flag in the NMI code, and poll that flag instead of $2002, bacause that will need no modification in the structure of your code, and can be done in, what, 5 minutes? Anyway, this is a very quick modification.<br /><br />But with more complex games, where computing a frame may take more than a NES frame (if there are too many active enemies, for example), I think it'd be better to do the opposite. Have the main loop process everything and buffer the data to be written to the PPU, and set a flag when that data is ready. The NMI routine would then check that flag, and if a frame is ready for rendering, the data is sent to the PPU, but if it's not, you could still do other timed stuff that does not depend on graphic updates, such as music.<br /><br />That way, even if the game did slow down because of the complexity of current events, the music would still play normally. If you used the polling method and the processing took more than a frame, you'd miss the Vblank, and everything, including the music, would be delayed by one frame. Even worse, if the game logic finished in the middle of Vblank, you wouldn't be able to detect that (unless you only detect the start of Blank, by first waiting the flag to be clear and then set), and the PPU drawing code could very well spill out of Vblank time, causing very visible glitches.<br /><br />Polling should just be used with simple programs, where you know the processing time of each frame will fit nicely in a NES frame. Having all the code inside the NMI is already better than that, just do the graphical stuff first, game logic later.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu May 24, 2007 12:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[dvdmth]]></name></author>
<updated>2007-05-24T12:07:28-07:00</updated>
<published>2007-05-24T12:07:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24412#p24412</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24412#p24412"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24412#p24412"><![CDATA[
SMB and Final Fantasy are on opposite ends of the spectrum.  SMB lives and breates in NMI (the only piece of code that doesn't run in NMI is the reset code, which is very short), while Final Fantasy's NMI routine exits immediately and lets the main program resume execution.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=360">dvdmth</a> — Thu May 24, 2007 12:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-05-24T11:59:23-07:00</updated>
<published>2007-05-24T11:59:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24411#p24411</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24411#p24411"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24411#p24411"><![CDATA[
I don't know what you're talking about, but Super Mario Bros. runs the entire game as an NMI handler. After the init code, SMB's main thread is running the following code, which emulators running on handhelds (e.g. PocketNES and PocketNES) will usually automatically detect as a speed hack:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">:<br />  jmp :-<br /></div><br />The easiest way to convert $2002 spinning code to NMI based code uses a variable in RAM:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />retraces: .res 1<br /><br />.segment &quot;CODE&quot;<br />nmiHandler:<br />  inc retraces<br />  rti<br /><br />; In main loop:<br />  lda retraces<br />:<br />  cmp retraces<br />  beq :-<br /><br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu May 24, 2007 11:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2007-05-24T10:56:23-07:00</updated>
<published>2007-05-24T10:56:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24409#p24409</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24409#p24409"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24409#p24409"><![CDATA[
That is a style preference.  There's no "right" or "wrong" way.  SMB (I think?) and Final Fantasy simply has NMI return right away like blargg's example... while several other games do their work in the actual NMI routine.<br /><br /><br />The only thing I recommend is do drawing related stuff FIRST.  Anything that has to be done in VBlank should be done before you do other stuff.  Sprite DMA and any PPU writes should have top priority.  Only after all that stuff is done should you start doing other things, like polling joypads, calling the music routine, etc.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Thu May 24, 2007 10:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[albailey]]></name></author>
<updated>2007-05-24T10:49:35-07:00</updated>
<published>2007-05-24T10:49:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24408#p24408</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24408#p24408"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=24408#p24408"><![CDATA[
I know this is an old topic, but I think I probaby didn't do things correctly when I converted over to using NMIs.  <br /><br />All my code works and looks fine, but I might have just gotten lucky.  2 wrongs (or 20) making a right (so to speak).<br /><br />When I converted my code from polling 2002  to using NMIs I got everything working.  But I did it by creating a very large and complicated NMI routine.<br /><br />Within the NMI routine I was checking my state machine, processing input, moving sprites, invoking sprite DMA, updating backgrounds, etc..<br /><br />Should the actual "work" be done in the main loop and just the NMI timing or sync-ing (like the counter or flag variables mentioned by blargg) be all I maintain in the NMI?<br /><br />Al<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=772">albailey</a> — Thu May 24, 2007 10:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-02-22T10:29:45-07:00</updated>
<published>2007-02-22T10:29:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22101#p22101</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22101#p22101"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22101#p22101"><![CDATA[
<div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi_count = $10 ; one byte in zero-page, location up to you<br /><br />nmi:  inc nmi_count<br />      rti<br /><br />wait_nmi:<br />      lda nmi_count<br />loop: cmp nmi_count<br />      beq loop<br />      rts</div><br /><br />By not modifying nmi_count outside of NMI, other code can use it for timing, i.e.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      lda nmi_count<br />      cmp next_count<br />      beq one_second_passed<br />      ...<br />      <br />one_second_passed:<br />      clc               ; update next_count<br />      adc #60<br />      sta next_count<br />      ...</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Feb 22, 2007 10:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2007-02-21T19:18:23-07:00</updated>
<published>2007-02-21T19:18:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22098#p22098</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22098#p22098"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22098#p22098"><![CDATA[
You should use NMIs, you need it for all the PPU and sound stuff.  My main loop is timed by incrementing a variable in NMI and waiting for it to be non-zero.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Wed Feb 21, 2007 7:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-02-21T12:37:49-07:00</updated>
<published>2007-02-21T12:37:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22095#p22095</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22095#p22095"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22095#p22095"><![CDATA[
There is two ways to wait on VBlank :<br />- Poll $2002<br />- Use NMIs<br /><br />If you do the first method, you're sure you'll get a VBlank when your polling loop exits, however you don't know how many VBlanks you missed before, and it IS possible to miss VBlanks.<br />If you do it the second method, using NMIs, a NMI will trigger every VBlank no matter what (assuming they are enabled), so yeah, that method is better. The other is good only if you don't need smooth timing, so when the screen isn't used anyway. It is NO good for gameplay.<br />There is at least one Famicom game that does it all with $2002 polls : Portpia Renzoku Satsujin Jiken. However, since it's stricly an investigation game (so it doesn't scroll nor require any precise timing, it just have a blinking cursor that won't blink at constant rate on real hardware, but most user won't see that), and used frame IRQs for sound anyway, then it could rely on that method. That it still not recommanded.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Feb 21, 2007 12:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[albailey]]></name></author>
<updated>2007-02-21T12:19:41-07:00</updated>
<published>2007-02-21T12:19:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22094#p22094</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22094#p22094"/>
<title type="html"><![CDATA[Should I use NMI even though my stuff works without using it]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2991&amp;p=22094#p22094"><![CDATA[
My game is a simple NROM puzzle game.  The only scrolling is when I transition from the title screen, to the puzzle screen.   I wait for VBLANK, then scroll a bit, (looping until its all in).<br />Then I go to my game loop which:<br /> waits for VBLANK<br /> polls for input<br /> does updates<br /> repeat...<br /><br />Everything I've done so far works, but I am not using NMI.<br />I'm not "running long" and running out of cycles<br /><br />I guess my questions are:<br />Should I be using NMI?  <br /> Is it considered bad form to code it this way?<br />Do some games do what I've done, or do they all sync using NMI?<br /><br />I'd just like to hear peoples opinions.   After all, I plan on doing other games so I'll have to learn other techniques eventally.<br /><br />Thanks,<br />Al<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=772">albailey</a> — Wed Feb 21, 2007 12:19 pm</p><hr />
]]></content>
</entry>
</feed>