<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=12721" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-08-10T09:14:08-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=12721</id>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2018-08-10T09:14:08-07:00</updated>
<published>2018-08-10T09:14:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223249#p223249</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223249#p223249"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223249#p223249"><![CDATA[
Ooo I missed the new release... indeed it does. AWESOME thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Fri Aug 10, 2018 9:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Revenant]]></name></author>
<updated>2018-08-10T09:07:47-07:00</updated>
<published>2018-08-10T09:07:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223248#p223248</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223248#p223248"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223248#p223248"><![CDATA[
The current release does already have support for showing WRAM (as part of the entire CPU address space) in the graphics viewer, if that helps.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6992">Revenant</a> — Fri Aug 10, 2018 9:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2018-08-10T01:17:45-07:00</updated>
<published>2018-08-10T01:17:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223234#p223234</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223234#p223234"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223234#p223234"><![CDATA[
<div class="quotetitle">CypherSignal wrote:</div><div class="quotecontent"><br />Yeah, tell me about it... Ironically, despite the frustrations in trying to shake down the various pages and documentation on this, furiously asking &quot;What do you want from me?!?! <img src="http://forums.nesdev.com/images/smilies/icon_mad.gif" alt=":x" title="Mad" />  <img src="http://forums.nesdev.com/images/smilies/icon_mad.gif" alt=":x" title="Mad" /> &quot; the answer ended up being rather simple - but obfuscated because of much of the intended utility all of the debug adapter extension shenanigans.<br />(snip) <br />Not yet shippable, and there's some stuff that's going to change as I go, but this is kind of the skeleton of it so far (note that ExternDebugHandler::processRequests is called as part of the Application::run tick, if you're wondering about the re-entry point of it all)<br /></div><br />Awesome thanks. <br /><br /><br />Now we just need to get the newish debugger with a Windows binary <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> So one can see the WRAM as graphics <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Fri Aug 10, 2018 1:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CypherSignal]]></name></author>
<updated>2018-08-09T13:01:29-07:00</updated>
<published>2018-08-09T13:01:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223172#p223172</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223172#p223172"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223172#p223172"><![CDATA[
Yeah, when I say &quot;Based on&quot; I mostly mean &quot;I copied everything in <a href="https://github.com/CypherSignal/bsnes-plus/commit/3d0024d7c28de89b7a1e18f5e5512842f410ed1e" class="postlink">disassembler/symbols</a> and cleaned out some stuff that may not make sense in the immediate term but can be recuperated later&quot; (e.g. breakpoints specified in the symbol files themselves, being able to write out new symbol files from the emulator). I'm not operating on the full fork or anything. There will be some collision of code, but it should not be too significant because most of the changes in that vein should be shared. Later on, when a PR is actually filed and let's say you haven't integrated any of benny's work, I can do a check to see how bad a resolve looks like if, say, all of that stuff had to come in - since that would be some work that you have to do ultimately - but that can be handled at the time, if that scenario comes to pass. Otherwise, if it comes to it that you integrate his work, I'm fine handling the resolves myself.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9310">CypherSignal</a> — Thu Aug 09, 2018 1:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Revenant]]></name></author>
<updated>2018-08-09T12:28:47-07:00</updated>
<published>2018-08-09T12:28:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223166#p223166</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223166#p223166"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223166#p223166"><![CDATA[
That's a good point, and there isn't ever going to be a non-Qt5-based release that includes the new debugger GUI, so I'd probably consider working from (or merging) the qt5 branch if possible and working from there if possible.<br /><br />(Also, if you're planning a pull request, please be aware that I'm not planning to merge benny's entire fork all at once at any point, and there will likely be commits from that fork which end up being omitted entirely, depending on how I feel about certain changes/features, so you'll probably end up needing to rebase your changes at some point in the future)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6992">Revenant</a> — Thu Aug 09, 2018 12:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CypherSignal]]></name></author>
<updated>2018-08-09T09:56:51-07:00</updated>
<published>2018-08-09T09:56:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223141#p223141</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223141#p223141"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223141#p223141"><![CDATA[
Personally I have no major opinion on the timing of Qt5 integration, but I can give more information that may influence yours: Right now, to support JSON objects gracefully, I had to add an additional git submodule to the project to link in another JSON repo, and use the functionality that that provides. However, Qt5 provides a JSON system as well, that was absent from Qt4. If Qt5 is integrated before I prep a PR for the vscode work, I have no issue with supporting Qt5’s objects beforehand. If Qt5 is integrated after I prep a PR, then some work should be done after-the-fact to deprecate and remove the external JSON functionality I’m roping in. Aside from that it doesn’t affect me, really.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9310">CypherSignal</a> — Thu Aug 09, 2018 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Revenant]]></name></author>
<updated>2018-08-09T09:31:11-07:00</updated>
<published>2018-08-09T09:31:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223138#p223138</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223138#p223138"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223138#p223138"><![CDATA[
Cool stuff <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Although I'm not (currently) one myself, VSCode users may also be interested in <a href="https://github.com/Optiroc/libSFX/tree/master/extras/VisualStudioCode" class="postlink">Optiroc's syntax definitions</a> for SNES assembly. They're part of libSFX which is based around ca65 instead of WLA, but ideally I'd like to support loading symbols from both, especially since libSFX is already designed with some of bsnes-plus's existing debugging features in mind (namely software breakpoints, etc.) and it'd be great to support even tighter integration between a SNES development framework and other external tools like that.<br /><br />Anyway, while I've mostly been working on Cx4 and Satellaview emulation recently, I don't have a whole lot more to do for those for the time being (until I start setting up some more hardware tests on my actual Satellaview unit, anyway). Pretty soon I'll start to integrate Benny's debug frontend stuff a little bit at a time in order to get feedback/make some potential adjustments as needed. Once that's further along I can start to get this stuff integrated as well.<br /><br />(I also have a more-or-less working Qt5 branch of the existing frontend ready to go, so I might go ahead and merge that into master before I start doing any more big-time GUI updates; what do you think?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6992">Revenant</a> — Thu Aug 09, 2018 9:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CypherSignal]]></name></author>
<updated>2018-08-09T05:17:28-07:00</updated>
<published>2018-08-09T05:17:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223119#p223119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223119#p223119"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223119#p223119"><![CDATA[
Yeah, tell me about it... Ironically, despite the frustrations in trying to shake down the various pages and documentation on this, furiously asking &quot;What do you want from me?!?! <img src="http://forums.nesdev.com/images/smilies/icon_mad.gif" alt=":x" title="Mad" />  <img src="http://forums.nesdev.com/images/smilies/icon_mad.gif" alt=":x" title="Mad" /> &quot; the answer ended up being rather simple - but obfuscated because of much of the intended utility all of the debug adapter extension shenanigans.<br /><br />So, first off, there is the (newly created) <a href="https://microsoft.github.io/debug-adapter-protocol/" class="postlink">site for outlining the debug protocol</a> that msft put together. It still focuses a lot on &quot;So you want to make a debug adapter extension or something, eh?&quot; and doesn't discuss the raw mechanics. However, those raw mechanics just aren't that much:<br /><br /><ul><li><a href="https://github.com/Microsoft/vscode/blob/db638418440a4f043512e04467a6d1deb3fb925c/src/vs/workbench/parts/debug/node/debugAdapter.ts#L299" class="postlink">VS Code launches a process with pipe to stdin/stdout</a>. </li><li> <a href="https://github.com/Microsoft/vscode/blob/db638418440a4f043512e04467a6d1deb3fb925c/src/vs/workbench/parts/debug/node/debugAdapter.ts#L169" class="postlink">Requests get sent through to stdin as HTTP messages containing a JSON object.</a></li><li> <a href="https://github.com/Microsoft/vscode/blob/db638418440a4f043512e04467a6d1deb3fb925c/src/vs/workbench/parts/debug/node/debugAdapter.ts#L177" class="postlink">Responses and events are sent back out along stdout and interpreted as HTTP messages.</a></li></ul><br />and that's...pretty much it. With some additional notes:<br /><br />For one, in this case, I'm only launching the process because it implements the debug protocol directly - there isn't an adapter that has to reinterpret things to talk to another existing debugger (see: gdb, pdb, etc) or run in a node.js env. This is defined in what is currently a very light extension, that basically only <a href="https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesdebuggers" class="postlink">Contributes a debugger</a> that defines the path to bsnes to launch, and a couple configuration attributes that will be tacked onto the Launch request (e.g. &quot;program&quot; to define what ROM to load up, or &quot;stopAtEntry&quot; to have the game start in a frozen state) which the bsnes debugger has to acknowledge.<br /><br />Two, the specification for requests, responses, and events, are available <a href="https://microsoft.github.io/debug-adapter-protocol/specification" class="postlink">here</a> (this was also available historically as, at the very least, <a href="https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/common/debugProtocol.d.ts" class="postlink">this TypeScript definition file in the VSCode github repo</a>). As mentioned, those are JSON objects in HTTP messages, so the format of everything will be, with cr/lf visible, along the lines of:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Content-Length: 331\r\n<br />\r\n<br />{&quot;command&quot;:&quot;initialize&quot;, &quot;arguments&quot;: {&quot;clientID&quot;:&quot;vscode&quot;, &quot;clientName&quot;:&quot;Visual Studio Code&quot;, &quot;adapterID&quot;:&quot;bsnes debug&quot;, &quot;pathFormat&quot;:&quot;path&quot;, &quot;linesStartAt1&quot;:true, &quot;columnsStartAt1&quot;:true, &quot;supportsVariableType&quot;:true, &quot;supportsVariablePaging&quot;:true, &quot;supportsRunInTerminalRequest&quot;:true, &quot;locale&quot;:&quot;en-us&quot;}, &quot;type&quot;:&quot;request&quot;, &quot;seq&quot;:1}</div><br />And the responses back have to be the same way, including the Content-Length header, <em>and including the &quot;\r\n\r\n&quot;</em>, no more, no less (see &quot;responses and events are sent back...&quot; above). I only mention this part because I was tearing my hair out for a couple of hours trying to understand why my initial implementation wasn't working, and it turned out I had stdout in text mode, not binary, so my &quot;\r\n\r\n&quot; was turning into &quot;\r\r\n\r\r\n&quot; which was causing a silent failure.<br /><br />Getting back to the original question, though, <a href="https://github.com/dibyendumajumdar/ravi/tree/master/vscode-debugger" class="postlink">this implementation of a debug protocol written in C to do debugging of lua</a> is what you're probably looking for in terms of raw code that peels these covers back. Of course, you can get a tease of my current implementation of this stuff over <a href="https://github.com/CypherSignal/bsnes-plus/blob/vscode/bsnes/ui-qt/debugger/extern-debug/extern-debug.cpp" class="postlink">here</a>, too. Not yet shippable, and there's some stuff that's going to change as I go, but this is kind of the skeleton of it so far (note that ExternDebugHandler::processRequests is called as part of the Application::run tick, if you're wondering about the re-entry point of it all)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9310">CypherSignal</a> — Thu Aug 09, 2018 5:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2018-08-09T03:36:52-07:00</updated>
<published>2018-08-09T03:36:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223111#p223111</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223111#p223111"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223111#p223111"><![CDATA[
Do you have a good source that explains how to make VSCode plugins like this. Everything either just does simple stuff or assumes you are doing some JS stuff and know all this 80 things on how it works...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Thu Aug 09, 2018 3:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CypherSignal]]></name></author>
<updated>2018-08-08T16:13:07-07:00</updated>
<published>2018-08-08T16:13:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223057#p223057</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223057#p223057"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=223057#p223057"><![CDATA[
Been working away at this, and finally got to a proof of doing some light debugging in VS Code, i.e. being able to pause and step from VS Code, display the current PC in a file, and also setting/clearing breakpoints before launching a session or during a session: <a href="https://www.youtube.com/watch?v=hkuMV-1LLmI" class="postlink">https://www.youtube.com/watch?v=hkuMV-1LLmI</a><br /><br />Some parts of it are still rough and needs some cleanup and all that sort of thing, but it's at the point of being functional. As mentioned before, the VS Code interface really is pretty simple once you get things going: it throws down json requests to bsnes via stdin, and bsnes sends json responses and events about the current state of the debugger back through stdout.<br /><br />I've already got an issue/task filed on wla-dx to add the necessary addr-to-line mapping to the WLA symbol file, but haven't yet filed the PR for a few reasons, but I will get that going once I polish a few things up. I'll also take a look at asar to see how easy it'd be to add the same information to its wla-style symbol file output, since that's a popular tool.<br /><br />Once I polish up the bsnes stuff as well, I'll also file a PR (or just a task) to devinacker to add this functionality to bsnes. So far, it's basically taking a bunch of work <a href="https://forums.nesdev.com/viewtopic.php?f=12&amp;t=16625" class="postlink">benny already did around symbol loading/mgmt</a>, adding the functionality to communicate with vscode, adding a git submodule for another json project (though, Qt5 upgrade will deprecate that) and uplifting a handful of other systems accordingly.<br /><br />Also, ofc, got to prep the extension itself to launch the bsnes executable from vscode and publish that somewhere. It's not a whole lot - we don't need a debug adapter because bsnes supports the debug protocol directly - but it's just a little bit.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9310">CypherSignal</a> — Wed Aug 08, 2018 4:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2018-07-24T06:39:00-07:00</updated>
<published>2018-07-24T06:39:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221905#p221905</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221905#p221905"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221905#p221905"><![CDATA[
Most of the good SNES tools are Win95. Back then we had X816 which doesn't have a linker, Geiger's Debugger ( which has now been superseded ) and a bunch of viewing tools. Before Geiger's we had the ZSNES debugger. <br /><br />Using a linker assembler like WLA-DX will complicate things, I don't use WLA-DX <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> <br /><br />STDIN/STDOUT I guess works, I'm more use to using sockets and a telnet interface, which is basically the same code wise, just you can <br />a.) attach mid run and not have to set it up at the start<br />b.) can be piped through to another machine/VM - which is handy for when you need to run some Linux VM to get bleeding edge version that fixes some bug in the emulator you need, and its not in the windows build yet <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />Having<br />M<br />D<br />Bank<br />R<br />Break<br />Watch<br />Trace<br />&gt;<br />and I guess something that lets us change if A/Index should be 8/16bit is the bare minimum<br />having A would also be handy, L, S super handy as well <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Tue Jul 24, 2018 6:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CypherSignal]]></name></author>
<updated>2018-07-24T06:03:46-07:00</updated>
<published>2018-07-24T06:03:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221901#p221901</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221901#p221901"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221901#p221901"><![CDATA[
<div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent"><br />I guess when you have an external linker like WLA-DX you really don't know where stuff is compared to where you write it... that would really suck.<br /></div><br />That's kind of touching on something I was wondering myself: is there a toolchain I'm not aware of where that isn't the case, or am I missing some part of the process people pursue normally when doing rom dev where this functionality wouldn't be desired right from the get-go? I mean, aside from &quot;most rom development has just been hacking at existing rom files and <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10957" class="postlink">there really isn't much of a homebrew scene</a>&quot;  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Having a fully integrated VSCode module would be awesome. However for a first step ( and yes I know I'm a broken record at this point BUT ) having a remote &quot;monitor&quot; would be a more useful addition. Then we can use the monitor to debug and test the code. Then the VS Code debugger can interface with the monitor keeping it neatly separated.<br /></div><br />So, based on my understanding of how such a debug extension (and corresponding suite) would exist, that is kind of how it should be architectured, anyway. There would have to be a module added in the emulator that operates on stdin to be able to respond to external actions and stdout to relay information about the emulator's current state, e.g. the c++ debug extension can talk with GDB through stdin/stdout, and afaik the python debug extension talks with <a href="https://docs.python.org/2/library/pdb.html" class="postlink">python's existing pdb module</a> in a similar capacity. The debug extension in Code is then used to be the adapter/interface between Code's host UI and the target in question.<br /><br />I haven't dug into that part of it too much - don't want to put the cart before the horse too much - but the &quot;module in bsnes&quot; would probably turn into &quot;Expand the console in Debugger to include a lot more information, add a field to allow for user input for various commands and interactions, and then pipe each of those through stdout and stdin respectively&quot;.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9310">CypherSignal</a> — Tue Jul 24, 2018 6:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2018-07-23T23:36:00-07:00</updated>
<published>2018-07-23T23:36:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221874#p221874</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221874#p221874"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221874#p221874"><![CDATA[
So, this is really poor to debug when I compare it to the best debugger on the market <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> That is really not a fair comparison. <br /><br />I guess when you have an external linker like WLA-DX you really don't know where stuff is compared to where you write it... that would really suck. <br /><br />Having a fully integrated VSCode module would be awesome. However for a first step ( and yes I know I'm a broken record at this point BUT ) having a remote &quot;monitor&quot; would be a more useful addition. Then we can use the monitor to debug and test the code. Then the VS Code debugger can interface with the monitor keeping it neatly separated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Mon Jul 23, 2018 11:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[CypherSignal]]></name></author>
<updated>2018-07-23T20:05:15-07:00</updated>
<published>2018-07-23T20:05:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221863#p221863</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221863#p221863"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=221863#p221863"><![CDATA[
I'm trying to get started on some from-scratch homebrew work, and was very quickly vexed by the relative unfriendliness of the debugging process when dealing with existing asm code, especially compared to, say, debugging a C++ project in Visual Studio.<br /><br />I've started prodding at some parts of the toolchain so far, mostly just to get source-assembly files mapped to rom memory addresses in the disassembler, and wanted to gauge if there was any interest in this. So far, I've just got a <a href="https://i.imgur.com/SF2C4Gu.png" class="postlink">small proof-of-concept here</a>. (old disassembler is in the top left, and my local version showing source info is in the top right, plus a couple of the source asm files for one of the projects from Neviksti's Snes starter kit provided for reference). This consists of a couple small changes to wla-dx's linker to output the obj list info into the final symbol file (and generate the address-to-line map) and changes to bsnes to acknowledge that sym file and reformat the disassembler accordingly.<br /><br />In terms of long-term goals, I'd like to going beyond in-emulator debugging, though. Ideally, I'd like to get to a point where one can have a VS Code debugger extension that talks to bsnes in a robust capacity. For example, from VS Code, launch bsnes as a debug target, drop a breakpoint in Code in an asm file (which bsnes is able to acknowledge as an exec-breakpoint on the corresponding address), and be able to present some debug information in Code when the emulation is paused. That may be a ways away, but I wanted to sort of read the room to see if adding such functionality to bsnes - or at least this debug-centric fork of bsnes - would be up for consideration.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9310">CypherSignal</a> — Mon Jul 23, 2018 8:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Revenant]]></name></author>
<updated>2018-06-23T12:42:34-07:00</updated>
<published>2018-06-23T12:42:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=220131#p220131</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=220131#p220131"/>
<title type="html"><![CDATA[Re: bsnes-plus and xkas-plus (new debugger and assembler)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12721&amp;p=220131#p220131"><![CDATA[
Cool, glad it works <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />It's definitely a pretty rudimentary player; I originally made it for the completely silly reason of being able to debug some strange SPCs that I dumped from a Super Wild Card DX firmware a while ago. It's a good companion for the (equally rudimentary) sound viewer window though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6992">Revenant</a> — Sat Jun 23, 2018 12:42 pm</p><hr />
]]></content>
</entry>
</feed>