<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=17452" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-06-17T09:05:13-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=17452</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2018-06-17T09:05:13-07:00</updated>
<published>2018-06-17T09:05:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219922#p219922</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219922#p219922"/>
<title type="html"><![CDATA[Re: Question about emulating UxROM mapper (mapper 002)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219922#p219922"><![CDATA[
Register mirroring is a consequence of partial address deciding. You see, to pinpoint one specific address, one has to watch all 16 address lines, and that takes more resources. If you only have one or a few registers that must be mapped to such a big address space, it's much simpler and cheaper to watch and respond to as few address lines as possible, meaning that most of them are ignored, which results in mirroring.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jun 17, 2018 9:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2018-06-17T06:02:31-07:00</updated>
<published>2018-06-17T06:02:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219920#p219920</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219920#p219920"/>
<title type="html"><![CDATA[Re: Question about emulating UxROM mapper (mapper 002)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219920#p219920"><![CDATA[
<div class="quotetitle">wbrian wrote:</div><div class="quotecontent"><br />- The documentation lists the address for the bank select register as &quot;($8000-$FFFF)&quot;. This is confusing because it lists an address range. How should this be interpreted? I'm expecting a fixed memory location.<br /></div><br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />The register being mapped to $8000-FFFF means that writes anywhere in that range apply. It's the same register at all those addresses, it's really just responding to the write, and only has to pay attention to one bits worth of the address to see that it's in that particular range (i.e. address &amp; $8000).<br /></div><br /><br />In other words, it is a single register which can be accessed from 32,768 different addresses (which, conveniently, happen to be consecutive).<br /><br />You should be aware that nearly <em>all</em> mappers work this way (since it's less expensive to manufacture), and in many of them the addresses are <strong>not</strong> consecutive - for example, the MMC3 &quot;register mask&quot; is $E001, which means it has registers at $8000-$9FFE <em>even</em> (bank select at $8000,$8002,$8004,...,$9FFC,$9FFE), $8001-$9FFF <em>odd</em> (bank value at $8001,$8003,$8005,...,$9FFD,$9FFF), $A000-$BFFE even (nametable mirroring), $A001-$BFFF odd (PRG RAM write protection), $C000-$DFFE even (scanline counter value), $C001-$DFFF odd (scanline counter reset trigger), $E000-$FFFE even (scanline counter disable), and $E001-$FFFF odd (scanline counter enable). For cases like that, it's best to either mask the entire address and then switch() across it (e.g. &quot;switch (address &amp; 0xE001) { case 0x8000: ...; case 0x8001: ...; case 0xA000: ...; case 0xA001: ...; ... }&quot;) or divide it into larger sections and then subdivide it from there (e.g. have one function for $8000-$9FFF which checks &quot;if (address &amp; 0x1) { ... } else { ... }&quot;).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Sun Jun 17, 2018 6:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-06-16T22:20:59-07:00</updated>
<published>2018-06-16T22:20:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219911#p219911</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219911#p219911"/>
<title type="html"><![CDATA[Re: Question about emulating UxROM mapper (mapper 002)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219911#p219911"><![CDATA[
The register being mapped to $8000-FFFF means that writes anywhere in that range apply. It's the same register at all those addresses, it's really just responding to the write, and only has to pay attention to one bits worth of the address to see that it's in that particular range (i.e. address &amp; $8000).<br /><br />If a PRG-ROM only has 8 banks, yes only the low 3 bits apply to the bank selection. Larger or smaller roms will use more or less bits of the value being written to the register, and the high bits are ignored. (Other mappers might have other rules for this, but in most cases it's the least significant bits that count.)<br /><br />The iNES format specifies a CHR-ROM size of 0 to mean 8k of CHR-RAM. The CHR data ends up being stored somewhere in the PRG-ROM and copied over to the CHR-RAM by writes to $2007.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sat Jun 16, 2018 10:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[wbrian]]></name></author>
<updated>2018-06-16T21:54:41-07:00</updated>
<published>2018-06-16T21:54:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219909#p219909</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219909#p219909"/>
<title type="html"><![CDATA[Question about emulating UxROM mapper (mapper 002)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=17452&amp;p=219909#p219909"><![CDATA[
I have a few questions about emulating mapper 002. I've been looking at <a href="https://wiki.nesdev.com/w/index.php/UxROM" class="postlink">https://wiki.nesdev.com/w/index.php/UxROM</a> as a reference.<br /><br />- The documentation lists the address for the bank select register as &quot;($8000-$FFFF)&quot;. This is confusing because it lists an address range. How should this be interpreted? I'm expecting a fixed memory location.<br /><br />- Verifying an assumption: If a cart has 8 PRG-ROM banks, I assume the 3-bit bank select value can be thought of as an index to the bank mapped to $8000-$BFFF<br /><br />- Specifically regarding the mega man cart, which is mapper 02: It doesn't have CHR-ROM or CHR-RAM. I verified this in FCEUX to make sure I wasn't decoding the ROM file incorrectly. Where does it read CHR data from?<br /><br />As always, I appreciate any insights <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8270">wbrian</a> — Sat Jun 16, 2018 9:54 pm</p><hr />
]]></content>
</entry>
</feed>