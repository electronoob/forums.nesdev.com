<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=2148" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2009-01-13T10:43:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=2148</id>
<entry>
<author><name><![CDATA[mattmatteh]]></name></author>
<updated>2009-01-13T10:43:55-07:00</updated>
<published>2009-01-13T10:43:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2148&amp;p=41848#p41848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2148&amp;p=41848#p41848"/>
<title type="html"><![CDATA[Yet another bandlimited sound tutorial]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2148&amp;p=41848#p41848"><![CDATA[
blargg, do you still have the images ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=170">mattmatteh</a> — Tue Jan 13, 2009 10:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-09-28T08:58:06-07:00</updated>
<published>2006-09-28T08:58:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=2148&amp;p=18053#p18053</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=2148&amp;p=18053#p18053"/>
<title type="html"><![CDATA[Yet another bandlimited sound tutorial]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=2148&amp;p=18053#p18053"><![CDATA[
This is one of a series of attempts at showing how to generate bandlimited sound in the simplest possible way with as little math as possible. I use a NES square wave as an example, but this applies to any waveforms that are mostly flat. For a more detailed version, see <a href="http://www.slack.net/~ant/bl-synth/" class="postlink">my previous attempt</a>.<br /><br />This is the original waveform from the NES at its 1.79 MHz clock rate:<br /><br /><img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/nes_square.png" alt="Image" /><br /><br />PC sound runs at a much lower rate than this, so samples must be taken less often:<br /><br /><img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/naive_square.png" alt="Image" /><br /><br />Unfortunately, this simple approach doesn't give good sound quality. One sign of this is that the high and low parts of the waveform are sometimes one sample longer. Instead of exploring the technical reasons why this doesn't work, we can simply see what would happen if we connected the original NES signal to the sampler's line input on the PC. This is what we'd get:<br /><br /><img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/bl_square1.png" alt="Image" /><br /><br />The apparent noise around the transitions is caused by filtering that the PC's sampler performs before actually sampling the signal. If we looked at the signal after filtering but before sampling, this is what we'd see:<br /><br /><img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/bl_square2.png" alt="Image" /><br /><br />Every transition looks the same after filtering. It's the resulting sample points that differ, based on where the transition falls relative to the two nearest sample times. If it falls exactly on a sample point, you get the most ripply sampled version. If it falls exactly between sample points, you get the least ripply version. If it falls somewhere in between, you get varying degrees of ripples.<br /><br /><img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/ideal_step1.png" alt="Image" /> <img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/ideal_step2.png" alt="Image" /><br /><br /><img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/bl_step1.png" alt="Image" /> <img src="it's now http://h1.ripway.com/blargg/temp/bandlimited5/bl_step2.png" alt="Image" /><br /><br />Generating a sampled version is just a matter of finding each transition in the original NES signal then adding the appropriate samples as described above. It doesn't really matter why the ripples are there, just that you generate the same result as the PC would when sampling the real thing. The following portable C sample code implements this and writes the result to a sound file:<br /><br /><a href="it's now http://h1.ripway.com/blargg/temp/bandlimited5/bandlimited_square.c" class="postlink">bandlimited_square.c</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Sep 28, 2006 8:58 am</p><hr />
]]></content>
</entry>
</feed>