<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - .cfg for CA65 with mmc3 256kb CHR+ 256kb PRG?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">.cfg for CA65 with mmc3 256kb CHR+ 256kb PRG?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4526">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4526</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Sat Nov 01, 2008 6:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>.cfg for CA65 with mmc3 256kb CHR+ 256kb PRG?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm running into limitations with the ca65 default link file for .nes.
<br />
<br />Just wondering if any of you happen to have any example .cfg (or a set of .cfg) files (and maybe a batch file) for ca65 which I can use to link together a .nes with 256kb CHR and 256kb PRG.  
<br />
<br />I'm looking to have 8k banks for the .prg where I could specify different memory start addresses for different segments.
<br />
<br />For example I'm looking to learn how to specify that my sound routines that are assembled as if starting at $C000, and also game logic routines that are assembled as if starting at $C000 which would be swapped out at run time.  Would these need to be in seperate .asm files, and assembled seperately?  Or do I just define different segments in the .cfg which map to the same address? 
<br />
<br />Thanks!
<br />Crash

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 03, 2008 6:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Which board are you talking about? The only common boards that I know of that can switch $C000 are GNROM, BNROM, and A*ROM (32 KiB banks), and T*ROM (8 KiB banks; $E000 and either $8000 or $C000 must be fixed).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Nov 03, 2008 2:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is how my config file looks for my Chipography program.  It uses a modified UNROM so the lower 16kB is fixed, and the upper 16kB ($C000+) is banked.  Note that when bankswitching this area, you'll probably need vectors in every bank that point to valid addresses. (due to random startup bank or random reset button hitting by the user).
<br />
<br />I cut out a lot of redundant parts.  "DTT" btw is a DPCM note table for Nerdtracker 2, it's in the same place in every bank for the benefit of the sound engine.
<br />
<br />Also, you can surely disregard me using $C080 instead of $C000.  It's due to some little coding quirks with NT2.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ZP: start = $00, size = $100, type = rw;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RAM: start = $200, size = $600, type = rw;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG: start = $8000, size = $8000, type = ro, file = %O;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG2: start = $C000, size = $4000, type = ro, file = %O;<br />...<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG31: start = $C000, size = $4000, type = ro, file = %O;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG32: start = $C000, size = $4000, type = ro, file = %O;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; SEGMENTS &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CODE: load = PRG, type = ro, start = $8000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RODATA: load = PRG, type = ro;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DATA: load = RAM, type = bss;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ZEROPAGE: load = ZP, type = zp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BSS: load = RAM, type = bss, define = yes;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SAMPLES: load = PRG, type = ro, start = $C080;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DTT1: load = PRG, type = ro, start = $FCF8;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS: load = PRG, type = ro, start = $FFFA;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BANK2: load = PRG2, type = ro, start&nbsp; = $C080;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DTT2: load = PRG2, type = ro, start = $FCF8;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS2: load = PRG2, type = ro, start = $FFFA;<br />...<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BANK31: load = PRG31, type = ro, start = $C080;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DTT31: load = PRG31, type = ro, start = $FCF8;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS31: load = PRG31, type = ro, start = $FFFA;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BANK32: load = PRG32, type = ro, start = $C000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS32: load = PRG32, type = ro, start = $FFFA;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Sun Nov 09, 2008 3:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the info, so the board I'm considering is a TKROM, and I'm looking to swap out $8000 and $a000 keeping $c000 and $e000 fixed.
<br />
<br />I think I can build what I need from the snippet memblers provided, but having a TKROM example makefile I think would be useful to the community.  (256 or 512kb PRG and 256KB CHR)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Nov 09, 2008 3:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Here is how my config file looks for my Chipography program.  It uses a modified UNROM so the lower 16kB is fixed, and the upper 16kB ($C000+) is banked.</div>
<br />That's the <a href="http://nesdevwiki.org/wiki/INES_Mapper_180" class="postlink">Crazy Climber mapper</a>, right?
<br />
<br />For a T*ROM with a 256 KiB PRG and switchable $8000, you'll need to make a MEMORY list that defines 30 areas with size=$2000, fill=yes, and either start=$8000 or start=$A000 depending on where you plan to load the bank. Then you'll need one more MEMORY area with start=$C000, size=$4000. Finally, add corresponding SEGMENTS for each MEMORY area.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 09, 2008 4:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">For a T*ROM with a 256 KiB PRG and switchable $8000, you'll need to make a MEMORY list that defines 30 areas with size=$2000, fill=yes, and either start=$8000 or start=$A000 depending on where you plan to load the bank. Then you'll need one more MEMORY area with start=$C000, size=$4000. Finally, add corresponding SEGMENTS for each MEMORY area.</div>
<br />Sorry to interrupt, but I'm scared to death just from reading how complicated this can be. This kind of thing is exactly what scared me away from the common assemblers a while back.
<br />
<br />Can anyone point to me the advantage of using segments and have to deal with this whole mess even before one can start coding anything of the game itself? Seriously, I want to get, because I would like to know if it's worth learning all of this before I devote any brainpower to it.
<br />
<br />With the assembler I currently use, I can just tell where each bank will be mapped to and I can start coding. ORG statements at the end will define their sizes. I can have as many banks as I want, mapped anywhere I want, of any size I want, without any of this fuss, and the code is still pretty well organized. I'm also working on a TKROM game.
<br />
<br />I'm usually not scared of complicated things and will dedicate some effort into understanding them, as long as I see the point. In this case, I fail to see the advantage, so I'm curious to hear what you have to say in favor of the overly complicated assembler setups.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Nov 09, 2008 4:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One example of how I've used segments, is to keep my code more contained by allowing me to put anything anywhere.
<br />
<br />Say I have one subroutine that needs some RAM, some code, and a lookup-table.  In a normal assembler you'd end up spreading that crap all over the source file (with all the other RAM definitions, lookup-tables, etc.).  With my segments defined I could do this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;DATA&quot;<br />info_index: .res 1<br /><br />.segment &quot;CODE&quot;<br />thing_routine:<br />do_stuff:<br />&nbsp;ldx info_index<br />&nbsp;lda info_table,x<br /><br />.segment &quot;RODATA&quot;<br />info_table: &quot;Example stuff blah&quot;<br /></div>
<br />
<br />That just keeps it all together in one place, and lets the linker deal with the final placement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 09, 2008 5:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">That just keeps it all together in one place, and lets the linker deal with the final placement.</div>
<br />I see... I felt the need to organize things, but I handled it with a decent folder structure, and related things like the ones you mentioned share the same folder. A "master file" includes all the other ones at the proper locations, so it all feels pretty organized and I can easily locate pieces of code and data.
<br />
<br />Thanks for the example though. I'll consider looking into it some time, for my next project maybe, since at least for now I'm pretty comfortable with the way I'm currently working.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Sun Nov 09, 2008 11:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the help!  I got it working, the thing that I didn't realize was that I needed to hand assemble the file from the pieces using copy /b.
<br />
<br />Here's what I'm doing (64k PRG + up to 256kb CHR):
<br />
<br />.cfg file
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY &#123; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_ZEROPAGE: start = $00, size = $100, type = rw; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_RAM: start = $200, size = $600, type = rw; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_CHAR0:&nbsp; &nbsp;start = $0, size = $40000, type = ro, file = &quot;sdw.chr&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; M_HEADER: start = $0, size = $10, type = ro, fill = yes, file = &quot;sdw.hdr&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; M_WORKRAM: start = $6000, size = $2000, type = rw; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRGFIXED: start = $C000, size = $4000, fill = yes, type = ro, file = %O; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_AUDIO_CODE:&nbsp; start = $8000, size = $2000, type = ro, fill = yes, file = &quot;sdw_audio_code.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_MUSIC0:&nbsp; &nbsp; &nbsp; start = $A000, size = $2000, type = ro, fill = yes, file = &quot;sdw_music0.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_LEVEL0:&nbsp; start = $8000, size = $2000, type = ro, fill = yes, file = &quot;sdw_level0.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_MTILE0:&nbsp; start = $A000, size = $2000, type = ro, fill = yes, file = &quot;sdw_tile0.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_LEVEL1:&nbsp; start = $8000, size = $2000, type = ro, fill = yes, file = &quot;sdw_level1.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_MTILE1:&nbsp; start = $A000, size = $2000, type = ro, fill = yes, file = &quot;sdw_tile1.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_LEVEL2:&nbsp; start = $8000, size = $2000, type = ro, fill = yes, file = &quot;sdw_level2.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp; M_PRG_MTILE2:&nbsp; start = $A000, size = $2000, type = ro, fill = yes, file = &quot;sdw_tile2.prg&quot;; <br />&nbsp; &nbsp; &nbsp; &nbsp;&#125; <br /><br />SEGMENTS &#123; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HEADER:&nbsp; load = M_HEADER, type = ro;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CHARS:&nbsp; &nbsp; load = M_CHAR0, type = ro; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CODE:&nbsp; &nbsp; load = M_PRGFIXED, type = ro, start = $C000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS: load = M_PRGFIXED, type = ro, start = $FFF0; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ZEROPAGE: load = M_ZEROPAGE, type = zp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DATA:&nbsp; &nbsp; &nbsp;load = M_RAM, type = bss; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_AUDIO_CODE: load = M_PRG_AUDIO_CODE, type = ro, start = $8000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_MUSIC0:&nbsp; &nbsp; &nbsp;load = M_PRG_MUSIC0, type = ro, start = $A000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_LEVEL0:&nbsp; &nbsp; &nbsp;load = M_PRG_LEVEL0, type = ro, start = $8000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_MTILE0:&nbsp; &nbsp; &nbsp;load = M_PRG_MTILE0, type = ro, start = $A000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_LEVEL1:&nbsp; &nbsp; &nbsp;load = M_PRG_LEVEL1, type = ro, start = $8000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_MTILE1:&nbsp; &nbsp; &nbsp;load = M_PRG_MTILE1, type = ro, start = $A000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_LEVEL2:&nbsp; &nbsp; &nbsp;load = M_PRG_LEVEL2, type = ro, start = $8000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG_MTILE2:&nbsp; &nbsp; &nbsp;load = M_PRG_MTILE2, type = ro, start = $A000; <br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /></div><br /><br />And the batch file I use to piece together the .nes file<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">call ca65 %1.asm<br />call ld65 -C tkrom.cfg -o %1.prg %1.o<br />echo off<br />call copy /b /y sdw.hdr %1.nes<br />call copy /b /y %1.nes+sdw_level0.prg %1.nes<br />call copy /b /y %1.nes+sdw_tile0.prg %1.nes<br />call copy /b /y %1.nes+sdw_level1.prg %1.nes<br />call copy /b /y %1.nes+sdw_tile1.prg %1.nes<br />call copy /b /y %1.nes+sdw_level2.prg %1.nes<br />call copy /b /y %1.nes+sdw_tile2.prg %1.nes<br />call copy /b /y %1.nes+%1.prg %1.nes<br />call copy /b /y %1.nes+sdw.chr %1.nes<br />echo on<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>SecretServiceDude</b> [ Sun Nov 09, 2008 11:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's really awesome! That gives me some ideas that'll hopefully get my UNROM setup working.
<br />
<br />EDIT: That totally worked! Manually assembling the NES file from the individual header/PRG files at the end was the crucial step. Thanks!

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>