<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=10521" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-09-22T15:07:29-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=10521</id>
<entry>
<author><name><![CDATA[DRW]]></name></author>
<updated>2013-09-22T15:07:29-07:00</updated>
<published>2013-09-22T15:07:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118516#p118516</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118516#p118516"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118516#p118516"><![CDATA[
O.k., I guess I'll ignore the stack for now and use global variables or the registers directly. Thanks for your answers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6156">DRW</a> — Sun Sep 22, 2013 3:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2013-09-22T13:19:40-07:00</updated>
<published>2013-09-22T13:19:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118503#p118503</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118503#p118503"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118503#p118503"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />You can't really remove the parameters from the stack from inside the subroutine though, because the return address is the last thing on the stack. If you take the return address off the stack, the RTS command that follows will crash the program (it will &quot;return&quot; to an invalid location). If it as that easy, nothing would stop you from using PLA right at the beginning to read your parameters...<br /></div><br /><br />That is what I used to do before I abandoned the idea of using the stack for parameters. I had a macro that manually pushed the return address, pushed the parameters, then did a JMP to the subroutine. Not too horrible, but not great.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Sun Sep 22, 2013 1:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2013-09-22T13:07:43-07:00</updated>
<published>2013-09-22T13:07:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118499#p118499</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118499#p118499"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118499#p118499"><![CDATA[
Scratchpad RAM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sun Sep 22, 2013 1:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-09-22T13:08:04-07:00</updated>
<published>2013-09-22T13:06:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118498#p118498</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118498#p118498"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118498#p118498"><![CDATA[
You can't really remove the parameters from the stack from inside the subroutine though, because the return address is the last thing on the stack. If you take the return address off the stack, the RTS command that follows will crash the program (it will &quot;return&quot; to an invalid location). If it as that easy, nothing would stop you from using PLA right at the beginning to read your parameters instead of using <strong>LDA $0103, X</strong>, right?<br /><br />the correct thing to do here would be to pop the parameters out of the stack after the subroutine has returned (i.e. after the JSR), which is not as nice and might trash any return values you have in A. If you really really want to clean up the stack from inside the subroutine, you need to move the return address to the correct place. This is why not many people like to use the stack for passing parameters in 6502 assembly, it's not very efficient.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Sep 22, 2013 1:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sonder]]></name></author>
<updated>2013-09-22T13:03:59-07:00</updated>
<published>2013-09-22T13:03:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118497#p118497</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118497#p118497"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118497#p118497"><![CDATA[
<div class="quotetitle">DRW wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">  LDX $0104, X ; Loads &quot;length&quot; into X.</div><br /></div><br />This addressing mode doesn't exist, see <!-- m --><a class="postlink" href="http://www.obelisk.demon.co.uk/6502/reference.html#LDX">http://www.obelisk.demon.co.uk/6502/reference.html#LDX</a><!-- m --></div><br />I already feared that this won't work. Alright, last try:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">FillSpecificMemoryWithValue:<br />; Parameters (put them to the stack in this order):<br />; 1. Length<br />; 2. Value<br /><br />  TSX          ; Loads the current stack pointer.<br />  LDA $0103, X ; Loads &quot;value&quot; into A.<br />  LDY $0104, X ; Loads &quot;length&quot; into Y.<br /><br />Loop:<br />  STA $1000, Y ; Stores &quot;value&quot; at address $1000 + Y.<br />  DEY<br />  BNE Loop     ; If X isn't 0 yet, repeat, otherwise, leave function.<br /><br />  PLA          ; Removes &quot;value&quot; from stack.<br />  PLA          ; Removes &quot;length&quot; from stack.<br /><br />  RTS</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  LDA #$10 ; The parameter &quot;length&quot;.<br />  PSA      ; &quot;Length&quot; is put into the stack.<br />  LDA #$FF ; The parameter &quot;value&quot;.<br />  PSA      ; &quot;Value&quot; is put into the stack.<br />  JSR FillSpecificMemoryWithValue</div><br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />As for why $103, consider this example:<br /></div></div>[/quote]<br />O.k., now I understand.[/quote]<br /><br />This will not work.  Because you are pulling the return address off the stack, leaving the parameters you pushed to be treated as the return address, the program will crash.  If you reserve X as a data stack pointer as I do, you can avoid this specific issue while still keeping the same simple and easy methodology.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">fillstuff:   ; value length --<br />  tay<br />  lda 0,x<br />-<br />  sta $1000,y<br />  dey<br />  bne -<br />  inx<br />  drop<br />  rts<br /><br />caller:<br />  dup<br />  lda #0<br />  dup<br />  lda #length<br />  jsr fillstuff<br />  <br /><br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6048">sonder</a> — Sun Sep 22, 2013 1:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[DRW]]></name></author>
<updated>2013-09-22T12:25:34-07:00</updated>
<published>2013-09-22T12:25:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118489#p118489</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118489#p118489"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118489#p118489"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">  LDX $0104, X ; Loads &quot;length&quot; into X.</div><br /></div><br />This addressing mode doesn't exist, see <!-- m --><a class="postlink" href="http://www.obelisk.demon.co.uk/6502/reference.html#LDX">http://www.obelisk.demon.co.uk/6502/reference.html#LDX</a><!-- m --></div><br />I already feared that this won't work. Alright, last try:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">FillSpecificMemoryWithValue:<br />; Parameters (put them to the stack in this order):<br />; 1. Length<br />; 2. Value<br /><br />  TSX          ; Loads the current stack pointer.<br />  LDA $0103, X ; Loads &quot;value&quot; into A.<br />  LDY $0104, X ; Loads &quot;length&quot; into Y.<br /><br />Loop:<br />  STA $1000, Y ; Stores &quot;value&quot; at address $1000 + Y.<br />  DEY<br />  BNE Loop     ; If X isn't 0 yet, repeat, otherwise, leave function.<br /><br />  PLA          ; Removes &quot;value&quot; from stack.<br />  PLA          ; Removes &quot;length&quot; from stack.<br /><br />  RTS</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  LDA #$10 ; The parameter &quot;length&quot;.<br />  PSA      ; &quot;Length&quot; is put into the stack.<br />  LDA #$FF ; The parameter &quot;value&quot;.<br />  PSA      ; &quot;Value&quot; is put into the stack.<br />  JSR FillSpecificMemoryWithValue</div><br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />As for why $103, consider this example:<br /></div>[/quote][/quote]<br />O.k., now I understand.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6156">DRW</a> — Sun Sep 22, 2013 12:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2013-09-22T12:04:37-07:00</updated>
<published>2013-09-22T12:04:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118486#p118486</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118486#p118486"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118486#p118486"><![CDATA[
<div class="quotetitle">DRW wrote:</div><div class="quotecontent"><br />[code]<br />  LDX $0104, X ; Loads &quot;length&quot; into X.<br /></div><br />This addressing mode doesn't exist, see <!-- m --><a class="postlink" href="http://www.obelisk.demon.co.uk/6502/reference.html#LDX">http://www.obelisk.demon.co.uk/6502/reference.html#LDX</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If the stack starts at $0100, why do I have to get the most recent stack value with $010<span style="text-decoration: underline">3</span> + X? I assume that the first value in the stack might be the stack pointer itself, so that the actual stack variables start at $0101. But why $0103?<br /></div><br />Stack pointer is not at $100, it's a register inside the CPU itself. As for why $103, consider this example:<br /><br />Let's say stack pointer starts out as $FF, i.e. SP = $FF, i.e. it points to $1FF. Now let's say the caller pushes two values on the stack, so the bytes are placed at $1FF and $1FE and SP = $FD after. When you call a function, two more bytes (the return value) get pushed on the stack, so SP becomes $FB. And how do we get from the stack pointer value, $FB, to the parameter at $1FE? By adding $1FE - $FB = $103.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Sun Sep 22, 2013 12:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-09-22T11:45:55-07:00</updated>
<published>2013-09-22T11:45:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118483#p118483</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118483#p118483"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118483#p118483"><![CDATA[
<div class="quotetitle">never-obsolete wrote:</div><div class="quotecontent"><br />zero page variables that simulate MIPS registers<br /></div><br />I do something similar: $0000-$0007 for arguments and temporaries and $0008-$000F for caller-saved registers.<br /><br />As for $0103: The top two values are the return address.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Sep 22, 2013 11:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[DRW]]></name></author>
<updated>2013-09-22T11:37:58-07:00</updated>
<published>2013-09-22T11:37:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118482#p118482</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118482#p118482"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118482#p118482"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />This is wrong. TSX simply transfers the <em>stack pointer</em> to register X. You need to use LDA $0103,X etc to actually access the stack (like Quietust said).<br /></div><br />Alright, now I understand. Even better. This means I can access these variables at will.<br />So, next try:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">FillSpecificMemoryWithValue:<br />; Parameters (put them to the stack in this order):<br />; 1. Length<br />; 2. Value<br /><br />  TSX          ; Loads the current stack pointer.<br />  LDA $0103, X ; Loads &quot;value&quot; into A.<br />  LDX $0104, X ; Loads &quot;length&quot; into X.<br /><br />Loop:<br />  STA $1000, X ; Stores &quot;value&quot; at address $1000 + X.<br />  DEX<br />  BNE Loop     ; If X isn't 0 yet, repeat, otherwise, leave function.<br /><br />  PLA          ; Removes &quot;value&quot; from stack.<br />  PLA          ; Removes &quot;length&quot; from stack.<br /><br />  RTS</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  LDA #$10 ; The parameter &quot;length&quot;.<br />  PSA      ; &quot;Length&quot; is put into the stack.<br />  LDA #$FF ; The parameter &quot;value&quot;.<br />  PSA      ; &quot;Value&quot; is put into the stack.<br />  JSR FillSpecificMemoryWithValue</div><br />Correct now?<br /><br />If the stack starts at $0100, why do I have to get the most recent stack value with $010<span style="text-decoration: underline">3</span> + X? I assume that the first value in the stack might be the stack pointer itself, so that the actual stack variables start at $0101. But why $0103?<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Yes, you can use the stack as mentioned, but I find having to move the stack pointer into X to retrieve them makes it a little inconvenient/inefficient. You don't really need to use the stack unless you have a recursive/re-entrant subroutine.<br /></div><br />Yeah, I guess in a real game I will have to see for each function individually which version I'll take. But in the moment, I'll try the stack just to get it to know.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />If I misunderstood the question and you're looking for a simplified syntax<br /></div><br />No, you understood it correctly. I was just looking for the technique itself, not for syntax tricks.<br /><br />But thank you all for the example anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6156">DRW</a> — Sun Sep 22, 2013 11:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2013-09-22T11:06:00-07:00</updated>
<published>2013-09-22T11:06:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118481#p118481</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118481#p118481"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118481#p118481"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Now, if a subroutine is called from different subroutines, I'll either define it's locals after the last variable of the subroutine that uses the most scratchpad bytes<br /></div><br />Yeah that's an interesting problem I didn't want to think/worry about too much.<br /><br />Code is my subs looks like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">func myFunction<br /><br />    params 3        ; start at offset 3, bytes 0..2 are in use<br />        foo .byte<br />        bar .byte<br />    endparams<br /><br />    locals<br />        baz .byte<br />    endlocals<br /><br />    ; code<br />    lda param::foo<br />    sta local::baz<br /><br />    ; declare baz safe to overwrite:<br />    release local::baz<br />    call someOtherFunction<br /><br />    ; mark it as in use again<br />    reserve local::baz<br />    ; do some stuff<br /><br />    ; exit with baz in A, and release all local/param memory used<br />    return local::baz<br /><br />endfunc<br /></div><br /><br />Any overwritten locations display an error at runtime.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Sun Sep 22, 2013 11:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-09-22T09:42:07-07:00</updated>
<published>2013-09-22T09:42:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118469#p118469</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118469#p118469"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118469#p118469"><![CDATA[
Stacks (hardware or software) are cool and all, but most of the time not necessary in NES/6502 games. I often just use a ZP section for parameters... say, 16 bytes under the label &quot;Scratchpad&quot;. Then, before each subroutine I have the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum Scratchpad<br />   LocalVariable1 .dsb 1<br />   LocalVariable2 .dsb 2<br />   LocalVariable3 .dsb 1<br />.ende</div><br />And I just use these local variables for passing parameters. If a subroutine is called from another subroutine, I have to do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.enum Scratchpad<br />   Subroutine1.LocalVariable1 .dsb 1<br />   Subroutine1.LocalVariable2 .dsb 2<br />   Subroutine1.LocalVariable3 .dsb 1<br />   Subroutine1.LocalEnd<br />.ende<br />Subroutine1:<br /><br />(...)<br /><br />.enum Subroutine1.LocalEnd<br />   Subroutine2.LocalVariable1 .dsb 1<br />   Subroutine2.LocalVariable2 .dsb 1<br />.ende<br />Subroutine2:</div><br />Now, if a subroutine is called from different subroutines, I'll either define it's locals after the last variable of the subroutine that uses the most scratchpad bytes or I'll say &quot;fuck it&quot; and use the stack if there's no other way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Sep 22, 2013 9:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sonder]]></name></author>
<updated>2013-09-22T09:40:37-07:00</updated>
<published>2013-09-22T09:40:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118468#p118468</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118468#p118468"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118468#p118468"><![CDATA[
<div class="quotetitle">DRW wrote:</div><div class="quotecontent"><br />Since there's no built-in solution, I guess the one with the stack is the right one for me.<br /><br />So, please tell me if the following code snippets would be correct:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">FillSpecificMemoryWithValue:<br />; Parameters (put them to the stack in this order):<br />; 1. Length<br />; 2. Value<br />  TSX ; Loads the parameter &quot;value&quot; into X.<br />  TXA ; Copies X (i.e. parameter &quot;value&quot;) into A.<br />  TSX ; Loads the parameter &quot;length&quot; into X.<br />Loop:<br />  STA $1000, X ; Stores &quot;value&quot; at address $1000 + X.<br />  DEX<br />  BNE Loop ; If X isn't 0 yet, repeat, otherwise, leave function.<br />  RTS</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  LDX #$10 ; The parameter &quot;length&quot;.<br />  TXS<br />  LDX #$FF ; The parameter &quot;value&quot;.<br />  TXS<br />  JSR FillSpecificMemoryWithValue</div><br />I still haven't really understood the stack, though: Where is it located? I thought that all variables are put into RAM. You write <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STA $0500</tt> and the variable is put into that specific location. If some other function overwrites it, bad luck, you should have declared placeholder names with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.res</tt>. But for some reason, you can push variables to a region called the stack and when you retreive it, it's automatically deleted from the stack again. Where does this happen in memory? And can I just directly write to that location, screwing up the stack?<br /><br />And what do I have to do if there are more than three parameters that I can't just put into A, X and Y all at once? Wouldn't this again require some global variables to temporarily store those values?<br /></div><br /><br />I only use the 6502 stack for subroutines and temporarily saving values.  It's located at $100-$1ff.  But because it grows downward, and usually never ever gets close to filling up, you can safely store as many variables there as you feel comfortable.   Check out the technique I posted above, let me know if you have any questions and I'll be happy to explain <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6048">sonder</a> — Sun Sep 22, 2013 9:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[never-obsolete]]></name></author>
<updated>2013-09-22T09:33:42-07:00</updated>
<published>2013-09-22T09:33:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118465#p118465</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118465#p118465"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118465#p118465"><![CDATA[
I use the A, X, and Y registers first, but also have zero page variables that simulate MIPS registers:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   .org $0000<br />a0:   .db 0   ; argument registers<br />a1:   .db 0   ;<br />a2:   .db 0   ;<br />a3:   .db 0   ;<br />a4:   .db 0   ;<br />a5:   .db 0   ;<br />t0:   .db 0   ; temporary registers<br />t1:   .db 0   ;<br />t2:   .db 0   ;<br />t3:   .db 0   ;<br />t4:   .db 0   ;<br />t5:   .db 0   ;<br />t6:   .db 0   ;<br />t7:   .db 0   ;<br />t8:   .db 0   ;<br />t9:   .db 0   ;<br />s0:   .db 0   ; save registers<br />s1:   .db 0   ;<br />s2:   .db 0   ;<br />s3:   .db 0   ;<br />s4:   .db 0   ;<br />s5:   .db 0   ;<br />v0:   .db 0   ; return value registers<br />v1:   .db 0   ;  (or more arguments)<br />i0:   .db 0   ; temporary registers<br />i1:   .db 0   ;  (for interrupts)<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=187">never-obsolete</a> — Sun Sep 22, 2013 9:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sonder]]></name></author>
<updated>2013-09-22T09:21:30-07:00</updated>
<published>2013-09-22T09:21:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118461#p118461</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118461#p118461"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118461#p118461"><![CDATA[
In the latest version of my 6502 Forth (which is subroutine-threaded, and I wasn't going to talk about it until my game was done but, hey...) I have a standardized parameter passing system.  The X reg is an 8-bit pointer into a data stack on the zeropage, with A containing the top item.  I use two macros, &quot;dup&quot; and &quot;drop&quot; to manipulate the data stack for passing parameters, consuming them, and returning them.<br /><br />The beauty of this arrangement is it can be used completely divorced from the rest of the Forth language.<br /><br />The stack grows downward, allowing you to put pointers on it intuitively (push high first, low second - additionally, 8-bit add/sub with no carry is straightforward).  0,x normally contains the 2nd item on the stack.  Here are the macros:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">macro drop<br />   lda 0,x<br />   inx<br />endm<br /><br />macro dup <br />   dex<br />   sta 0,x<br />endm<br /></div><br /><br />To push something on the stack, you should first &quot;dup&quot; to effectively push A onto the stack freeing it to be LDA'd with something else.  When a routine is done with a value, it should &quot;drop&quot; it.  Or you can not &quot;drop&quot; it, changing the value of A to return something.  Or push more values to return multiple values if desired.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6048">sonder</a> — Sun Sep 22, 2013 9:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2013-09-22T08:04:01-07:00</updated>
<published>2013-09-22T08:04:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118454#p118454</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118454#p118454"/>
<title type="html"><![CDATA[Re: Parameters in sub routines]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10521&amp;p=118454#p118454"><![CDATA[
I generally either put the parameters in the registers A/X/Y or where that's not appropriate, I use a ZP variable. These places are also good for return values. This makes a function call something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    LDX #3<br />    LDY #7<br />    JSR multiply_xy<br />    ; at this line A contains 21</div><br /><br />Yes, you can use the stack as mentioned, but I find having to move the stack pointer into X to retrieve them makes it a little inconvenient/inefficient. You don't really need to use the stack unless you have a recursive/re-entrant subroutine.<br /><br />Most of my functions take a single parameter in A and put the return value in A.<br /><br /><br />If I misunderstood the question and you're looking for a simplified syntax, which seems to be what the other replies in this thread are about, once you've written your function it is easy to write an accompanying macro to set up the appropriate registers in a one-line statement:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro MULTIPLY_XY a, b<br />    LDX a<br />    LDY b<br />    JSR multiply_xy<br />.endmacro<br /><br />; called like this:<br />    MULTIPLY_XY #3, #7</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Sep 22, 2013 8:04 am</p><hr />
]]></content>
</entry>
</feed>