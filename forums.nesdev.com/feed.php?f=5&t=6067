<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=6067" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-02-20T09:52:03-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=6067</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-20T09:52:03-07:00</updated>
<published>2010-02-20T09:52:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56851#p56851</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56851#p56851"/>
<title type="html"><![CDATA[Game Boy]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56851#p56851"><![CDATA[
Balloon Kid is a Game Boy game, the spiritual sequel to Balloon Fight for NES. It was also released on Famicom under the name Hello Kitty World.<br /><br />Game Boy uses a 4-bit parallel line to read the gamepad; each read returns the state of all four buttons or all four directions on the Control Pad. It also doesn't have DPCM but instead a triangle channel with a reconfigurable waveform. So anything that reads the pad twice is either A. to get the bottom and top half of the key state, or B. to run input gesture recognition at more than 60 Hz (like in a fighting game).<br /><br />But as MetalSlime pointed out, XORing the gamepad data with the last frame's data is a common technique to detect button state transitions.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Feb 20, 2010 9:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MetalSlime]]></name></author>
<updated>2010-02-20T09:33:07-07:00</updated>
<published>2010-02-20T09:33:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56850#p56850</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56850#p56850"/>
<title type="html"><![CDATA[Re: Reverse Engineering Blues]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56850#p56850"><![CDATA[
<div class="quotetitle">strat wrote:</div><div class="quotecontent"><br />I've never seriously looked at a raw disassembly before and thought it would be neat to hack Balloon Kid.  It should've been easy to find a few things, like the joypad reading code.  Just follow the byte with the joypad state and you'll find the player moving code, right?  Nope.  The joypad state is constantly moved elsewhere and xor'ed with other bytes.  <br /><br />I did find where the oam buffer is written but everytime something becomes clear it branches off like a hydra.<br /><br />Any tips from people who've studied commercial games?<br /></div><br /><br />Yes, keep at it. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Trace through several frames and try to figure out what is going on.<br /><br />With joypad reading code, it's common to compare this frame's button states with last frame's button states to get some different information.  <br /><br />For example if you XOR last frame's button states by #$FF and then AND the result with this frame's button states, you will get a nice byte that tells you which buttons were newly pressed this frame (ie, unpressed last frame, but pressed this frame).<br /><br />On the flipside, if you XOR this frame's button states by #$FF and then AND the result with last frame's button states, you get the opposite - a byte that tells you which buttons were released this frame.<br /><br />Some games also read the controller twice in a frame and compare the results to make sure they match.  I forget the exact reason, but I think it had something to do with the DPCM affecting $4016.<br /><br />I have no idea what Balloon Kid does since I've never looked at it, but it may be using one or more of these techniques.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3632">MetalSlime</a> — Sat Feb 20, 2010 9:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[strat]]></name></author>
<updated>2010-02-20T09:00:30-07:00</updated>
<published>2010-02-20T09:00:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56848#p56848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56848#p56848"/>
<title type="html"><![CDATA[Reverse Engineering Blues]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6067&amp;p=56848#p56848"><![CDATA[
I've never seriously looked at a raw disassembly before and thought it would be neat to hack Balloon Kid.  It should've been easy to find a few things, like the joypad reading code.  Just follow the byte with the joypad state and you'll find the player moving code, right?  Nope.  The joypad state is constantly moved elsewhere and xor'ed with other bytes.  <br /><br />I did find where the oam buffer is written but everytime something becomes clear it branches off like a hydra.<br /><br />Any tips from people who've studied commercial games?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3506">strat</a> — Sat Feb 20, 2010 9:00 am</p><hr />
]]></content>
</entry>
</feed>