<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 16-bit division</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">16-bit division</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=143">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=143</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Link</b> [ Mon Jan 10, 2005 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>16-bit division</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hmmm, I was wondering if I could use the routine that I use to multiply any 8-bit number by any 8-bit to make a 16-bit result, and use it to divide also...I mean is there some  kind of relation that I could use to find the divided number from the multipled number...
<br />
<br />I don't want to write a big division routine that does the exact same thing as the multiplication routine except it's the opposite if I can use the multiplication routine for both.
<br />
<br />In other words could I relate a multiplied number to division by messing with the bits (do the bits have some relation in any way?)? thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>RedComet</b> [ Mon Jan 10, 2005 8:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Division is quite a bit different than Multiplication when it comes to writing a routine to do that, at least in my experience anyway.
<br />
<br />This site should be helpful in learning/refreshing you're memory on the workings of binary division: <!-- m --><a class="postlink" href="http://courses.cs.vt.edu/~cs1104/BuildingBlocks/divide.010.html">http://courses.cs.vt.edu/~cs1104/Buildi ... e.010.html</a><!-- m -->
<br />
<br />Writing a division routine was one of the hardest things I learned when I was first getting into 6502, so it may prove to be a challenge.
<br />
<br />Hope that helps, if you'd like I can post some code showing one way of doing a division on 8-bit numbers later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 10, 2005 10:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've coded a 16/8=16r8 divider in 6502 assembly language. I used it for dividing by 10 in the score display routine of a program that Memblers has tested on real NES hardware.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;; div16<br />;&nbsp; &nbsp;Given a 16-bit number in dividend, divides it by divisor and<br />;&nbsp; &nbsp;stores the result in dividend.<br />;&nbsp; &nbsp;out: A: remainder; X: 0; Y: unchanged<br />div16:<br />&nbsp; ldx #16<br />&nbsp; lda #0<br />@divloop:<br />&nbsp; asl dividend<br />&nbsp; rol dividend+1<br />&nbsp; rol a<br />&nbsp; cmp divisor<br />&nbsp; bcc @no_sub<br />&nbsp; sbc divisor<br />&nbsp; inc dividend<br />@no_sub:<br />&nbsp; dex<br />&nbsp; bne @divloop<br />&nbsp; rts<br /></div>
<br />Anyone have a faster one?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Jan 11, 2005 11:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16-bit division</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Link wrote:</div><div class="quotecontent">Hmmm, I was wondering if I could use the routine that I use to multiply any 8-bit number by any 8-bit to make a 16-bit result, and use it to divide also...I mean is there some  kind of relation that I could use to find the divided number from the multipled number...</div>
<br />Well, you could reuse it for division by reciprocal multiplication. A technique which is especially useful when dividing by constants (such as the digit extraction when displaying integers).
<br />The only problem is that this trick is best suited for machines with fast integer multiplication since it generally requires quite a bit of fixed point precision (*cough* ARM *cough*).
<br />
<br />However you very rarely need to do a full division by a variable denominator. There's almost always some trick you can use to get around doing it in the first place.
<br />So why don't you post what you're trying to use it for just in case someone can can find an alternative algorithm? Unless this is an academic exercise of course..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jan 11, 2005 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16-bit division</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">However you very rarely need to do a full division by a variable denominator. There's almost always some trick you can use to get around doing it in the first place.</div>
<br />What tricks have you found for binary to decimal conversion (which ordinarily uses a divide-by-10) and for projection in a 3D engine (which ordinarily uses a divide-by-Z)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Jan 11, 2005 3:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 16-bit division</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">What tricks have you found for binary to decimal conversion (which ordinarily uses a divide-by-10)</div><br />Reciprocal multiplication. Simply multiply the number by 1/10 represented as a fixed pointer number and subtract the result * 10 from the original number to get the remainder (i.e. digit).<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">.. and for projection in a 3D engine (which ordinarily uses a divide-by-Z)?</div>
<br />That one's a bit trickier.
<br />One possibility is use a reciprocal table, another is to skip it entirely (as One-Der does). Perhaps combine a series table lookups to gain precision without sacrificing too much space.
<br />If the objects are small enough (ships in a space shooter for instance) you can cheat by only using the z-coord of the object itself and thus incorporate projection into the transformation matrix.
<br />Also, since the projection is generally the last step of the vertex transformation it's probably possible to cut down on precision a lot, many modern GPUs still use 16-bit Z-Buffers in certain display modes. With care, and depth clipping, around 8-12 bits should suffice.
<br />
<br />I'm far from being a 3d guru though. Go ask some C64 sceners instead =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Link</b> [ Tue Jan 11, 2005 4:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>:-)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Well, you could reuse it for division by reciprocal multiplication. A technique which is especially useful when dividing by constants &#40;such as the digit extraction when displaying integers&#41;. <br />The only problem is that this trick is best suited for machines with fast integer multiplication since it generally requires quite a bit of fixed point precision &#40;*cough* ARM *cough*&#41;.</div><br /><br />That's exactly what I want to do. Using the multiplication routine and multiplicating the number by the recipricol which makes me get the divided answer. I just want to see if I can get this working, right now speed isn't a problem (it will be later), I just want to see if I can use the same routine for multiplying and dividing (recipricol multiplication). I sort of get how I'd do it, but not too well. Is there somewhere I could read about it? How much precission could I get out of it?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">However you very rarely need to do a full division by a variable denominator. There's almost always some trick you can use to get around doing it in the first place. <br />So why don't you post what you're trying to use it for just in case someone can can find an alternative algorithm? Unless this is an academic exercise of course..</div>
<br />
<br />Well, I want to try a little 3D demo for the NES, but otherwise I wanted to know if it was even possible in 6502 practically. 
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">One possibility is use a reciprocal table, another is to skip it entirely (as One-Der does). Perhaps combine a series table lookups to gain precision without sacrificing too much space. </div>
<br />
<br />Would then it be much more useful (and faster) to use a lookup table? What's One-Der?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Tue Jan 11, 2005 5:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: :-)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Link wrote:</div><div class="quotecontent">That's exactly what I want to do. Using the multiplication routine and multiplicating the number by the recipricol which makes me get the divided answer. I just want to see if I can get this working, right now speed isn't a problem (it will be later), I just want to see if I can use the same routine for multiplying and dividing (recipricol multiplication). I sort of get how I'd do it, but not too well. Is there somewhere I could read about it? How much precission could I get out of it?</div><br />The thing is that a standard multiplication loop isn't all that much slower than a general purpose division function. So in order to gain anything from it all you'll need to use some fast multiplication algorithm to begin with (probably table or hardware based). Another problem with reciprocal multiplication is that to avoid any loss of precision you need about as much fixed point precision as the numerator's size.<br />However in a controlled special case (i.e. demo) 8-bit precision 'should' be enough. The C-Hacking multiplication combined with a reciprocal table could be optimized down to about 40 cycles.<br /><br /><br />Lets go through previous example again with concrete numbers. We'll divide 172 by 10 three times to extract each digit, in 8-bit precision.<br />The reciprocal of 10 as an 8-bit fixed point number is (1/10)*256 = ~26.<br />Multiplying 172 by 26 gives 4472, since we only want the integer part of the resulting fixed pointer number we this by 256 to obtain 17.<br />Repeating the procedure once more we get 17*26 = 442, 442 / 256 = 1.<br /><br />In your case you probably want to prepare a table of the first 256 reciprocal divisors to feed the multiplication function. But that shouldn't be much of a sacrifice in a NES rom.<br /><br /><div class="quotetitle">Link wrote:</div><div class="quotecontent">Well, I want to try a little 3D demo for the NES, but otherwise I wanted to know if it was even possible in 6502 practically.</div>It's both possible and practical. With some optimizations you should be able to keep 64 (one per sprite) vertices flying around in 3d space without too much trouble. Unless you want to do vectors, like Elite does, but then you've got worse problems than vertex transformations to deal with.<br /><br /><div class="quotetitle">Link wrote:</div><div class="quotecontent">Would then it be much more useful (and faster) to use a lookup table? What's One-Der?</div>
<br />You should probably be using a lookup table for multiplication anyway, check the other 3d thread here on NesDev for a link.
<br />One-Der is a 64 kB C64 intro which (among other amazing effects) features a part with 256 vector plots in full framerate.
<br />
<br />One more thing, while the C64 might excell compared to the NES in most areas 'we' still have a a few advantages, most importantly there's enough ROM space available for some gigantic tables. Another thing is that updating raw 8-bit sprite coordinates is a whole lot easier (and faster) than having to do the plotting manually, especially if you need to clear it afterwards. You could even utilize the MMC5 to get hardware multiplication.
<br />
<br />Btw, why did you quote me as code? Seemed awfully official that way.. ;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Link</b> [ Tue Jan 11, 2005 6:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>thx</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Lets go through previous example again with concrete numbers. We'll divide 172 by 10 three times to extract each digit, in 8-bit precision. <br />The reciprocal of 10 as an 8-bit fixed point number is (1/10)*256 = ~26. <br />Multiplying 172 by 26 gives 4472, since we only want the integer part of the resulting fixed pointer number we this by 256 to obtain 17. <br />Repeating the procedure once more we get 17*26 = 442, 442 / 256 = 1</div><br /><br />Thanks <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> I completely get it now. That won't be that hard to code. I might eventually want to get the remainder also so I'll prolly have to change it to 16-bit precision later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Btw, why did you quote me as code? Seemed awfully official that way.. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div>
<br />
<br />That's a real good question......no idea, accident

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>abonetochew</b> [ Tue Jan 11, 2005 9:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The C-Hacking multiply looks really nice, but can it be used for 16-bit or 8.8 numbers without a prohibitively large lookup table?  If the algorithm expands well to 16 bits, then a reciprocal table would be reasonably accurate and really fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Wed Jan 12, 2005 6:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">abonetochew wrote:</div><div class="quotecontent">The C-Hacking multiply looks really nice, but can it be used for 16-bit or 8.8 numbers without a prohibitively large lookup table?  If the algorithm expands well to 16 bits, then a reciprocal table would be reasonably accurate and really fast.</div>
<br />I suppose you could, a 6:8 table should fit nicely into a 16 kB bank. However the real trick to getting decent framerates on the 6502 is to avoid 16-bit arithmetics completely, there's just too much overhead involved in handling them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Tue Jul 29, 2008 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just made a 16-bit division routine to brush up on my 6502.  It was written from scratch but it borrows a few ideas from the routine in Western Design's 65816 manual.  Written and debugged in the 6502 Simulator.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Divide:<br />&nbsp; &nbsp;<br />.shift:&nbsp; &nbsp;<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ASL DIVSOR&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;ROL DIVSOR+1<br />&nbsp; &nbsp;BCC .shift<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ROR DIVSOR+1<br />&nbsp; &nbsp;ROR DIVSOR<br /><br />.divloop:<br />&nbsp; &nbsp;DEY<br />&nbsp; &nbsp;ASL QUO<br />&nbsp; &nbsp;ROL QUO+1&nbsp; &nbsp;<br />&nbsp; &nbsp;SEC<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA DIVEND+1<br />&nbsp; &nbsp;SBC DIVSOR+1<br />&nbsp; &nbsp;BCC .skip<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;STA VAR&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA DIVEND<br />&nbsp; &nbsp;SBC DIVSOR<br />&nbsp; &nbsp;BCC .skip&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;STA DIVEND<br />&nbsp; &nbsp;LDA VAR<br />&nbsp; &nbsp;STA DIVEND+1<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$01<br />&nbsp; &nbsp;ORA QUO<br />&nbsp; &nbsp;STA QUO<br /><br />.skip:&nbsp; &nbsp;<br />&nbsp; &nbsp;LSR DIVSOR+1<br />&nbsp; &nbsp;ROR DIVSOR<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;CPY #$01&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;BPL .divloop<br /><br />&nbsp; &nbsp;RTS<br /><br />; DIVEND / DIVSOR = QUO&nbsp; &nbsp;<br />; DIVEND contains remainder when finished<br />; First loop: Shift LO DIVSOR and rotate HI DIVSOR until there's a 1 in the highest bit<br />;&nbsp; &nbsp;&nbsp; &nbsp;INY for each loop<br />; After first loop:&nbsp; rotate LO and HI DIVSOR right so correct divisor is in place<br />; Second loop:<br />; DEY, shift LO QUOTIENT and rotate HI QUOTIENT so the correct bits of the result are set<br />; Subtract DIVSOR from DIVEND<br />; if DIVSOR &gt; DIVEND, skip these steps<br />;&nbsp; &nbsp;-Store difference back in DIVEND<br />;&nbsp; &nbsp;-Set the lowest bit of the quotient<br />; Shift the HI and rotate the LO divisor right<br />; loop if Y &gt;= 1 - if the last loop is unnecessary, it will not affect the remainder or the quotient<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Roth</b> [ Tue Jul 29, 2008 10:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Whoa! Three-and-a-half year bump! haha
<br />
<br />It's good though, because just last night (maybe two nights ago) I was thinking that I had never messed with any multiplication or division in 6502... whatever day it was that Sivak said something about a Russian peasant routine, which I had never heard of before until then. It was pretty interesting after I looked it up.
<br />
<br />Thanks for the post, it'll be good for me to look at this and see how it works : )
<br />
<br />Speaking of the 6502 Simulator, Tokumaru, do you still primarily use that for all of your coding? Bit off-topic there, but it just kinda popped in my head to ask : P

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>