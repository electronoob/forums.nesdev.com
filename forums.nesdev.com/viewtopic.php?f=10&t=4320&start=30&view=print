<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 4-way Dragon Warrior scrolling</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">4-way Dragon Warrior scrolling</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4320">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4320</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Aug 24, 2008 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm pretty sure there was a place in a dungeon from FF1 where the map wrapped arround too (I guess it was in the main water elemental dungeon where there were sirens arround).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Thu Aug 28, 2008 7:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Attribute Hell</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello again.  I've been working away at my little scrolling engine.  Right now I'm just trying to get scrolling to the right to work.  My level map is 3 screens wide, 2 screens tall.  Here's how it works so far:
<br />
<br />1) The player presses the right directional button, starting a 16-pixel scroll
<br />2) Halfway through the scroll (8 pixels/frames), I draw one column offscreen.
<br />3) Next frame I draw another column.  My "metacolumn" is done.
<br />
<br />Note: Up to here, everything works perfectly all across the three level map pages (and it wraps around forever if you keep pressing right, with no errors).  It seems there are no problems with these 3 steps.
<br />
<br />4) Next frame, update the attribute data for the new column <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />This is where I've been having problems.  My subroutine works for almost a full page of attribute updates, but on the last attribute column it starts glitching, changing the colors for a part of the screen that I don't think I wrote to.
<br />
<br />I'm going to post the attributeupdate subroutine I've been fiddling with.  Before that, a note on how I'm storing the levelmap data.  I don't store it one screen at a time, but rather one whole 3-page-wide row at a time.  Like this (each byte is a 16x16 metatile):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">levelmap:<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;top row, 3 pages wide<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02<br />&nbsp; <br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;row 2<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00<br />&nbsp; .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00<br /><br />etc...</div><br /><br />The levelmap attribute data is stored in a similar way:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">levelmapattribute:<br />&nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000 ;first 3-page wide &quot;row&quot; of attribute data<br />&nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; <br />&nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000 ;2nd attribute &quot;row&quot;<br />&nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br />&nbsp; .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000<br /><br />etc.....</div><br /><br />Here's my subroutine:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UpdateRightColumnAtt:<br />;;;this algorithm finds which byte of the levelmapattribute corresponds to the top of our new column<br />&nbsp; LDA CurrentMapCol ;CurrentMapCol marks where in the levelmap data the top left corner of the visible screen is <br />&nbsp; CLC<br />&nbsp; ADC #$11&nbsp; ;new column map x coord. CurrentMapCol is the top left corner of the visible screen<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;the column we just drew offscreen is #$11 over from this<br />&nbsp; LSR A&nbsp; &nbsp; &nbsp;;divide by 2 to get the right place in the levelmapattribute data<br />&nbsp; TAX<br /><br />;;;this part will help us know whether to start at $2xC0, $2xC1, $2xC2 ... or $2xC7&nbsp; &nbsp;<br />&nbsp; LDA CurrentMapCol ;redundant.&nbsp; optimize later<br />&nbsp; CLC<br />&nbsp; ADC #$11&nbsp; ;same story as above<br />&nbsp; AND #$0F&nbsp; ;wipe out the left side<br />&nbsp; LSR A&nbsp; &nbsp; &nbsp;;divide by 2.&nbsp; Gives us a number #$00 through #$07.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;we will add this to #$C0 to get the low byte of the desired attribute table address<br />&nbsp; TAY<br />LoadAttribute2Loop2:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;let's pull this out of the loop dummy<br />&nbsp; LDA #$23<br />&nbsp; CMP DrawPointerHigh&nbsp; ;this was set in the preceding drawcolumn routines.<br />&nbsp; BCS vegetable ;if greater than, we are in the first nametable.&nbsp; Otherwise, second<br />&nbsp; LDA #$27<br />vegetable:&nbsp; ;they're good for you<br />&nbsp; STA $2006<br />&nbsp; <br />&nbsp; TYA<br />&nbsp; CLC<br />&nbsp; ADC #$C0<br />&nbsp; STA $2006<br />&nbsp; <br />&nbsp; LDA levelmapattribute, x&nbsp; &nbsp; &nbsp; ; load data from address &#40;levelmapattribute + the value in x&#41;<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU.&nbsp; This will write byte 1 &#40;then 2, 3 and 4&#41;<br />&nbsp; <br />&nbsp; TXA<br />&nbsp; CLC<br />&nbsp; ADC #$60 ;Map is three screens wide.&nbsp; If it were one screen wide, I'd add #$20. <br />&nbsp; TAX<br />&nbsp; <br />&nbsp; LDA levelmapattribute, x<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;this will write byte 5 &#40;then 6,7 and 8&#41;<br />&nbsp; <br />&nbsp; TXA<br />&nbsp; SEC<br />&nbsp; SBC #$48 ;put X where it needs to go for the next go-round<br />&nbsp; TAX<br />&nbsp; <br />&nbsp; TYA<br />&nbsp; CLC<br />&nbsp; ADC #$08<br />&nbsp; TAY<br />&nbsp; CPY #$20 ;The highest value Y should ever have is #$1F<br />&nbsp; BCC LoadAttribute2Loop2<br />&nbsp; <br />&nbsp; LDA CurrentMapCol ;update map position<br />&nbsp; CLC<br />&nbsp; ADC #$01<br />&nbsp; CMP MapWidth<br />&nbsp; BNE UpdateRightColumnAttEnd<br />&nbsp; LDA #$00<br />UpdateRightColumnAttEnd:<br />&nbsp; STA CurrentMapCol<br />&nbsp; <br />&nbsp; rts</div>
<br />
<br />If it helps, it seems to mess up starting when CurrentMapCol has a value of #$0D.
<br />
<br />Can somebody please help me?  Also, should I be storing my data in "screens" rather than rows?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Aug 28, 2008 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you have a copy of the attribute table in RAM? Updating attributes basically requires you to have a copy if you want to update one half of a 2x2 attribute chunk. And also, your attribute routine shouldn't load directly from the map. You should have a routine that takes the attribute data from the map and turns it into a string in RAM. You can then take this string, and modify it so you can store it directly into the attribute section of the Name Table.
<br />
<br />And if it makes you feel better, attributes are really tedious to deal with. It's definitely not uncommon to have problems with them. Well, not for me anyways.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Thu Aug 28, 2008 2:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Do you have a copy of the attribute table in RAM? Updating attributes basically requires you to have a copy if you want to update one half of a 2x2 attribute chunk. And also, your attribute routine shouldn't load directly from the map. You should have a routine that takes the attribute data from the map and turns it into a string in RAM. You can then take this string, and modify it so you can store it directly into the attribute section of the Name Table.<br /><br />And if it makes you feel better, attributes are really tedious to deal with. It's definitely not uncommon to have problems with them. Well, not for me anyways.</div>
<br />
<br />No I don't have a copy in RAM.  I just copy 8 bytes, one by one, from the data in ROM.  This means that for every two "steps" the player makes, I'm essentially writing the same data (whole 2x2 chunks) to the same location twice.  Not very efficient, but since its offscreen, I thought it couldn't hurt.
<br />
<br />I think I will have to change to doing it your way in the end, as I will run into trouble when I get to vertical scrolling (where all of my row updates will be ONSCREEN), but for now, putting aside that I'm not using the recommended method, do you know why my subroutine glitches for CurrentMapCol values of #$0D and up?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Aug 28, 2008 3:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure at the moment, but try seeing what happens using your mind as the 6502 processor. Stick #$OD or higher in, read it, and see what happens.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Thu Aug 28, 2008 8:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm embarrassed.  I found the problem and it was that I wasn't in 32-increment mode.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   The reason is because before I tried to do everything (draw both columns and update the attributes) in one frame.  That caused slowdown, so I broke it up into three frames.  When I broke it up, I remembered to set 32-increment mode for each of the column-drawing routines, but conveniently forgot it on the attribute update routine.  It was just a coincidence that it didn't break on lower values of CurrentMapCol.  (That's what I get for making a map that is 90% grass tiles).  Once I threw the write to $2000 in there it worked.
<br />
<br />Since we're on the topic, I wanted to ask some questions about your post:
<br />
<br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Do you have a copy of the attribute table in RAM? Updating attributes basically requires you to have a copy if you want to update one half of a 2x2 attribute chunk.</div><br /><br />When you say "RAM" do you mean 0-page RAM or WRAM?  Should I reserve 128 bytes in RAM for two whole attribute tables?<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">And also, your attribute routine shouldn't load directly from the map. You should have a routine that takes the attribute data from the map and turns it into a string in RAM.</div><br /><br />Is there a good reason I shouldn't load directly from the map?  Is it just because its slower?<br /><br />Also, are you suggesting that I copy the entire map's attribute data into RAM (a routine that would be called only once per map)?  or just the segment of attribute data that I need to work with at a particular time (a routine that would be called each time I need to update the attribute tables)?<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">You can then take this string, and modify it so you can store it directly into the attribute section of the Name Table. </div>
<br />
<br />Do you mean write directly to the attribute section of the nametable, or write to my RAM copy of the attribute section (where I can isolate 1/2 of each 2x2 attribute chunk) and then copy from the RAM copy to the nametable?
<br />
<br />I hope my questions are clear.  This stuff is really hard to talk about in words <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />.  Thanks for all the help btw.  It really makes a difference!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Aug 28, 2008 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent">When you say "RAM" do you mean 0-page RAM or WRAM?  Should I reserve 128 bytes in RAM for two whole attribute tables?</div><br />Yes, 128 bytes anywhere in RAM (could even be WRAM or ZP, although it would be a waste of ZP).This is useful in 4-way scrollers because you need to divide each attribute byte in 2 parts, because if you updated it all at once you'd get color glitches on the opposite side of the screen (in the axis that is mirrored). Side scrollers or vertical scrollers can get away with updating whole attributes at once because they have a full nametable that's hidden.<br /><br />Since we need to update only some bits of the bytes, this means that you need to read them, clear the bits you'll modify, set the new bits and finally write it back. It could be slow to read all 8 bytes that need to be changed directly from the PPU, so many people choose to keep mirrors in RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is there a good reason I shouldn't load directly from the map?  Is it just because its slower?</div><br />It depends a lot on the format you have chosen for you map, but I guess a good reason would be speed, yes. The routine that copies the data to VRAM must be pretty versatile in order to read directly from the map, because it needs to be able to read from anywhere in the map, and the code must be generic enough to support all possibilities. Reading from a buffer is generally faster, because the buffer is always at the same place, which means that the code can be very specific and quick.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, are you suggesting that I copy the entire map's attribute data into RAM (a routine that would be called only once per map)?</div><br />This would probably require too much ROM.<br /><br />I believe he's suggesting you break up the process into smaller ones. Instead of reading from the map and sending directly to VRAM, send the data to a buffer instead. Then, during VBlank, copy the data from the buffer to VRAM.<br /><br />But the "copy from the map to the buffer" part isn't so simple, because you have to do the read-modify-write thing. So it's more like: "Read from the map and COMBINE with the buffer".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This stuff is really hard to talk about in words <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />.</div>
<br />Yes, and the fact that attributes are the most hated aspect of the NES (from a programmer's point of view, since changing it dynamically is quite hard) doesn't really help. =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Aug 28, 2008 10:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When I meant RAM, I wasn't referring to 0 page. 0 page is incredibly valuable space, so I'd recommend against using it for this. I use $200-$27F for my copy.
<br />
<br />What you probably want to do is have every tile on the map be assigned to a specific attribute. So you'd want to have a routine that fetches an array from the metatile map which holds the metatiles that are going to be put on screen. After this, you'd have two separate routines, one that turns the metatiles into regular tiles, and the other will take those metatiles and fetch the appropriate attribute values from a list. These routines put tile and attribute values into separate arrays.
<br />
<br />The reason for separation is speed, and clean code so you don't go insane from all the bugs that you can't find. Those are my main reasons. And also, it's more structured, which makes it easier to program game logic.
<br />
<br /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent">Do you mean write directly to the attribute section of the nametable, or write to my RAM copy of the attribute section (where I can isolate 1/2 of each 2x2 attribute chunk) and then copy from the RAM copy to the nametable? </div>
<br />
<br />Exactly. And trust me; THIS is my worst nightmare. It took me SOO long to code an 8-way (Actually 4 way, but can scroll 2 directions at once, so I call it 8 way) scrolling engine because of the bottom attribute. This is horribly tedious to work with, because the bottom row isn't normal; it has only one half of a normal 2x2 block.
<br />
<br />What I did is I made a scrolling engine that I can basically drop into any game that I'll ever make that scrolls. I did this specifically so I wouldn't have to deal with attributes again.
<br />
<br />And tokumaru, is it really officially the most hated thing about the NES? Because if so, thank god there's not something worse <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Aug 29, 2008 9:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">And tokumaru, is it really officially the most hated thing about the NES? Because if so, thank god there's not something worse <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />!</div>
<br />Hahaha I don't think this is official, and my comment was mostly based on personal experience, but once in a while people do show up here with attribute problems, so I guess it could be a general thing! =)
<br />
<br />Many of the complete NES homebrew games out there use either a static screen or scroll in only one direction, so the attributes can't have been a great deal for their programmers, which explains why there aren't more complaints about it.
<br />
<br />Like you said, the fact that the last row of the nametable is just half a row complicates things a lot the whole process, because you always have to check if the nametable was crossed and fix the coordinates if so. Doesn't sound like much, but this prevents you from writing a quick column renderer, because the column can cross to the next nametable at anytime. Rows are not so tough to draw though, once you figured out their position.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>