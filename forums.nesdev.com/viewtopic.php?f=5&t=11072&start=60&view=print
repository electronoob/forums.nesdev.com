<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - YCPU: an imaginary 16-bit processor.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">YCPU: an imaginary 16-bit processor.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>5</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Mar 12, 2014 4:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">If you're going to have the MMU built in the chip, I still don't understand why you can't have the registers have their own selectable bank, since there's not going to be an absolute addressing mode.  You can probably use two banks for program counter, to avoid the need of a long jump instruction.</div>If you mean having each general purpose register addressing a different 16-bit area of memory --- I'd rather keep the virtual address space 16-bits in its entirety.<br /><br />Proposed boot sequence:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">============================&#91; 1.G. Boot Sequence &#93;==============================<br />At initial power on, the state of all memory, registers, and cache is unknown<br />with one exception: The Processor Status is set to $8000 (Supervisor mode, no <br />features enabled).<br /><br />At Power-On, the processor follows the following bootstrap sequence:<br />&nbsp; &nbsp; LOD R1, %1010000000000000<br />&nbsp; &nbsp; TRS R1, PS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Enable Memory Paging, Supervisor Mode<br />&nbsp; &nbsp; LOD R0, $0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; TRS R0, IA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; IA table begins at $0000<br />&nbsp; &nbsp; LOD R1, %1000000000000000<br />&nbsp; &nbsp; MMW R0, R1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; MMU Bank 0 = ROM Bank 0<br />&nbsp; &nbsp; .RESET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Raise RESET Interrupt</div>(Note that I moved the supervisor bit from $4000 to $8000).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Mar 12, 2014 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Each general purpose register r0-r7 will have it's own bank register b0-b7 for register indirect addressing.<br /><br />For example:<br /><br />mov b0,#$00ab<br />mov r0,#$cdef<br />move r1,(r0)<br /><br />will address $abcdef.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Mar 12, 2014 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The addition of bank registers has been suggested at least once before, and is one of the few suggestions that I haven't included in the specification. I like to imagine the YCPU as a relatively powerful processor that is limited by its 16-bit registers and virtual address space.<br /><br />In other words, it's like the Genie in Aladdin: Phenomenal cosmic powers! Itty bitty living space!<br /><br />EDIT: Updated the spec on the first post to 0.2b, which includes the dedication to the public domain.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Mar 12, 2014 7:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hm. Long addressing like that is <em>sorta</em> like the segment registers in x86 real mode. I'm not certain whether<br />1- having a full eight is useful<br />2- having those eight be uniquely mapped 1-to-1 for each register is preferable to dynamic pairing.<br />3- Poking a hole in the MMU is desirable. Given that the MMU has concepts of &quot;supervisor&quot; and &quot;write prohibited&quot; and &quot;execute prohibited&quot; ... probably not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Mar 12, 2014 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">3- Poking a hole in the MMU is desirable. Given that the MMU has concepts of &quot;supervisor&quot; and &quot;write prohibited&quot; and &quot;execute prohibited&quot; ... probably not.</div>Would you mind clarifying this point lidnariq? I'm afraid I don't understand what you mean.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Mar 12, 2014 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh ... I guess if updating the &quot;segment&quot; register is a privileged operation it would still be secure. It does have some weirdness with having 64 KiW segment size for long pointers but only 4 KiW segment size for near pointers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Wed Mar 12, 2014 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It's the kernel's job to configure the MMU for each process. I'd also recommend having a seventeenth page that replaces one of the pages in supervisor mode, so that the user process can see the full 64 Kwords.</div>I'm still considering this. More importantly, your comment made me realize that I had not considered that the state of the MMU was potentially unknown when an interrupt is raised - the bank of memory that contains the interrupt vector table might be switched out to some random page of data.<br /><br />I realize there are at least two options here:<br />1. Always require that the bank of memory with the interrupt vector table be switched in at MMU bank 0 (occupying $0000-$0FFF).<br />2. Before handling an interrupt, the processor switches in a specific bank of memory, in which a process can store its interrupt vectors and the code that will call its handlers.<br /><br />I've decided to go with the second route: when an interrupt is raised but before the interrupt vector is called, the processor switches in the first bank of memory to bank 0.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">=======================&#91; 3.F. Interrupt Instructions &#93;==========================<br /><br />RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Return from Interrupt<br />Returns from an interrupt.<br />Processor is currently in Supervisor mode.<br />&nbsp; &nbsp; 1.&nbsp; The word pair describing MMU bank 0 is&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LOD R5,$0000<br />&nbsp; &nbsp; &nbsp; &nbsp; popped from the Supervisor Stack, and&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;POP R6<br />&nbsp; &nbsp; &nbsp; &nbsp; MMU bank 0 is restored to its original&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMW R5,R6<br />&nbsp; &nbsp; &nbsp; &nbsp; bank using this data.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INC R5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; POP R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMW R5,R6<br />&nbsp; &nbsp; 2.&nbsp; PS is popped from the Supervisor Stack.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;POP R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TRS R6,PS<br />&nbsp; &nbsp; 3.&nbsp; PC is popped from the Supervisor Stack.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;POP R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TRS R6,PC<br />&nbsp; &nbsp; 4.&nbsp; R5 and R6 are popped from the Supervisor&nbsp; &nbsp; &nbsp; &nbsp; POP R5, R6<br />&nbsp; &nbsp; &nbsp; &nbsp; Stack.<br />&nbsp; &nbsp; 5.&nbsp; Q status bit is cleared.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .CLEAR Q<br />&nbsp; &nbsp; 6.&nbsp; Execution continues.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; <br />SWI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Call Software Interrupt<br />Raises the 'software interrupt' interrupt.<br />&nbsp; &nbsp; 1.&nbsp; Q status bit is set.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .SET Q<br />&nbsp; &nbsp; 2.&nbsp; R5 and R6 are pushed to the Supervisor&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PSH R5, R6<br />&nbsp; &nbsp; &nbsp; &nbsp; Stack.<br />&nbsp; &nbsp; 3.&nbsp; PC is pushed to the Supervisor Stack.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TSR R6,PC<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PSH R6<br />&nbsp; &nbsp; 4.&nbsp; PS is pushed to the Supervisor Stack.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TSR R6,PS<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PSH R6<br />&nbsp; &nbsp; 5.&nbsp; Supervisor status bit is set.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.SET S<br />&nbsp; &nbsp; 6.&nbsp; The word pair describing MMU bank 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LOD R5,$0000<br />&nbsp; &nbsp; &nbsp; &nbsp; is pushed to the Supervisor Stack.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMR R5,R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PSH R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INC R5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMR R5,R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PSH R6<br />&nbsp; &nbsp; 7.&nbsp; MMU bank 0 is switched to the internal&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LOD R6,$0000<br />&nbsp; &nbsp; &nbsp; &nbsp; processor memory bank 0.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMW R5,R6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DEC R5<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MMW R5,R6<br />&nbsp; &nbsp; 8.&nbsp; PC is set to Mem&#91;SWI&#93;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LOD R5,&#91;SWI&#93;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TRS R5,PC<br />&nbsp; &nbsp; 9.&nbsp; Execution continues.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Thu Mar 13, 2014 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Latest version adds floating point instructions and an operation which allows load/store of an <a href="http://en.wikipedia.org/wiki/Byte" class="postlink">octet value</a> from another register. I also implemented zzo38's suggestion regarding flag effects on shifts of zero bits<br /><br />The specification has come a long way in the past ten days, and while I don't think this will be the last draft, I do think that it's not missing anything crucial. I'm ready to start working on the emulator, which I'll write in C#. I plan on releasing the emulator as open source under the same waiver.<br /><br />Before I do so, if anyone has the time, I'd ask that they give the specification just one more once over, to see if I've missed any crucial instructions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Thu Mar 13, 2014 4:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You describe reset as a series of instructions executed by the processor, but I've never seen anything like that before. Usually reset is just described as the initial values loaded into registers when the CPU executes, without explicitly describing how those values get there. For example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PS &lt;- $A000<br />IA &lt;- $0000<br />MMU&#91;$00&#93; &lt;- $0000<br />MMU&#91;$01&#93; &lt;- $8000<br />PC &lt;- &#91;$0000&#93;</div><br />(By the way, your pseudocode doesn't seem to initialize the MMU correctly!)<br /><br />In a similar vein, &quot;RTI&quot; and &quot;SWI&quot; are described as a series of instructions, but also use R5 and R6 as scratch variables. That contradicts your description of hardware interrupt handling, which makes no mention of those two registers.<br /><br />And speaking of interrupts, why would the processor ignore SWI when interrupts are masked? How can the user interact with the supervisor when interrupts are masked? (Why does SWI set Q? Shouldn't hardware interrupts be able to interrupt most software interrupts? Why does RTI clear Q? It already restores PS, and explicitly clearing Q means you could get a hardware interrupt inside a hardware interrupt - that's bad!)<br /><br />...Err, sorry if it sounds like I'm being harsh. <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Thu Mar 13, 2014 7:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks Joe. I've really appreciate your comments, and I've updated the Bootstrap and Interrupt specifications to implement your suggestions. Specifically:<div class="quotetitle">Joe wrote:</div><div class="quotecontent">You describe reset as a series of instructions executed by the processor, but I've never seen anything like that before. Usually reset is just described as the initial values loaded into registers when the CPU executes, without explicitly describing how those values get there.</div>It seems I've put how little I know about hardware on display again. The bootstrap sequence is now written as you suggested.<div class="quotetitle">Joe wrote:</div><div class="quotecontent">In a similar vein, &quot;RTI&quot; and &quot;SWI&quot; are described as a series of instructions, but also use R5 and R6 as scratch variables. That contradicts your description of hardware interrupt handling, which makes no mention of those two registers.</div>Here, I think I was just being too enthusiastic with regards to imagining how the CPU might work. I've rewritten the RTI/SWI instructions to not include R5 and R6, included an explanation of how the processor responds to a hardware interrupt, and made sure not to clear the Q flag until the very last instruction.<br /><br />Specification is updated to 0.2e, which I've posted on the first post of this thread. Changes as follows:<div class="codetitle"><b>Code:</b></div><div class="codecontent">0.2e 03/13/2014<br />&nbsp; &nbsp;Complete rewrite of 'Interrupts' section.<br />&nbsp; &nbsp;Added new 'P2' register which is used by the BankFault interrupt.<br />&nbsp; &nbsp;Added new 'R' status bit in PS which defines if ROM or RAM should be<br />&nbsp; &nbsp;switched to bank 0 on interrupt.<br />&nbsp; &nbsp;Clarified what banks are loaded when the MMU is enabled/disabled.<br />&nbsp; &nbsp;Clarified bootstrap sequence.<br />&nbsp; &nbsp;Made MMR/MMW privileged instructions.<br />&nbsp; &nbsp;Added Real Time Clock stub.<br />&nbsp; &nbsp;Changed bit pattern of ALU to match FPU.<br />&nbsp; &nbsp;Noted that Immediate addressing is not available with the STO opcode.<br />&nbsp; &nbsp;Minor spelling errors.</div>The Specification is also available online as a <a href="https://dl.dropboxusercontent.com/u/22773626/ycpu.txt" class="postlink">text document</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Thu Mar 13, 2014 8:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That makes a lot more sense now. (However, I did notice in §2.D.3, shouldn't it say interrupts restore PS, not FL?)<br /><br />The only thing I have to ask right now is about this:<br /><div class="quotetitle">§2.D.2 wrote:</div><div class="quotecontent">software interrupts will not be acknowledged by the CPU if the I status bit is clear</div><br />What, exactly, happens when a program executes SWI when the I status bit is clear?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Thu Mar 13, 2014 10:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After reading about which interrupts can be masked on other CPUs, I realize that SWI should be unmaskable. Thanks for pointing this out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Fri Mar 14, 2014 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've started work on the emulator --- and am attempting to catch up on schoolwork from the past week. Neither of these tasks is continuing at a particularly fast pace.<br /><br />I've been thinking about memory management again, from the perspective that this processor should be able to run an OS that can run multiple child processes. With this in mind, I'm trying to think of how a program written in C, that does not necessarily 'know' what underlying hardware its running on, and therefore has no direct control over memory banking, segment registers, etc., could access more than the 64kw virtual address space which I've specified.<br /><br />The NES has 64kb of address space, but it can access additional banks of memory using a MMC. I have a similar scheme for my processor. It occurs to me that a single program on this processor would have no trouble with managing memory, as it would always know which banks it has access to and where all of its data is stored. This would certainly be true for a kernel...<br /><br />... but child processes wouldn't know which banks they are located in, and therefore wouldn't know how to access additional memory. I have no background in OS theory - how could an operating system on this processor expose more memory to a child process?<br /><br />On a similar note --- how does this work on a processor with segment registers? I see a similar problem: without changing the segment registers, a child process only has access to (# of segment registers * addressable units per segment register) address space. How does a child process on, say, a 286 know what segments are allowed for access? Does the kernel handle this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Mar 14, 2014 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">On a similar note --- how does this work on a processor with segment registers? I see a similar problem: without changing the segment registers, a child process only has access to (# of segment registers * addressable units per segment register) address space. How does a child process on, say, a 286 know what segments are allowed for access? Does the kernel handle this?<br /></div>In practice, 286 protected mode was basically not used for anything (There were Xenix and Minix ports, but otherwise...), and with the advent of 386 protected mode's 32-bit pointers we mostly (but not entirely) ignored the segment registers.<br /><br />C compilers targeting 8086 real mode (with segments) usually provided the concept of a &quot;far pointer&quot; which would use one of the segment pointers to deal with data bigger than 64 KiB. (<a href="http://www.delorie.com/djgpp/v2faq/faq17_7.html" class="postlink">here's DJGPP's comments</a>) But they were really slow ... checking when you had to move bits between the segment and offset words added a costly amount of overhead.<br /><br />Neither of these really help your question, which is how do you meaningfully provide the abstractions of &quot;how do I address more than 64KiW of memory when my near pointers only allow 64 KiW&quot;. One thing that works to your advantage here is that you <em>don't</em> have the 8086's kinda-useful (for relocations) mostly-awful segmentation: there's no overlap (no <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">segment&lt;&lt;4 + offset</tt>) and so the math is simpler. Regardless, you'll need help from both the kernel (to provide a series of 4 KiW slices that make a virtual larger chunk of memory) as well as from your compiler (to provide a notion of far pointers and handle requesting bank switches <strong>not</strong> on every memory access)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sun Mar 16, 2014 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks lidnariq. I think I now have a much better handle on how memory paging will work. I'm still considering what the optimal page size might be: although I initially decided on 4 KiW, I'm aware that everything from context switching to loading large arrays of data would be sped up by larger pages (perhaps 8 KiW or 16 KiW). Programs that had large global sets of data or functions spread throughout memory and did not access these in ways that a compiler could predict and optimize would be slower, perhaps. Just different things to weigh.<br /><br />I've completed a very basic console emulator that fills the memory space with random data and then executes the same. Not super impressive - and I have only a little more than half of the opcodes implemented and haven't even tested the output of those - but it's a start!<div class="attachtitle">Attachment:</div><div class="attachcontent">
			<a href="./download/file.php?id=1348&amp;mode=view"><img src="./download/file.php?id=1348&amp;t=1" alt="ycpu-emulator.png" /></a><br />
			<span class="gensmall">ycpu-emulator.png [ 14.28 KiB | Viewed 261 times ]</span>
		

		<br />
	</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>5</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>