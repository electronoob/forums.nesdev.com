<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Tile encoder/decoder</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Tile encoder/decoder</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5860">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5860</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Dec 20, 2009 9:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Tile encoder/decoder</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm releasing to the public the work I've done so far on the tile compressor based on the format used by Codemasters in some of their games (like Bee52 and Big Nose Freaks Out). Feel free to use it in projects that require CHR compression. Note that it works specifically with NES tiles, so it will hardly work well with other kinds of data.
<br />
<br />Apparently, the compressed tiles aren't as compact as the folks at Codemasters were able to make them, and my encoder is to blame. The format has the potential to be even more compact than theirs (because it doesn't have a few redundant bits the original has), but my encoder can't find the optimal way to divide the tiles into groups, and the key for this compression scheme is organizing tiles in groups of lengths that result in better compression.
<br />
<br />The source code is included, and if anyone wants to give a shot at modifying the compressor so that it divides the tiles better than it currently does, they are welcome to. As long as nothing about the format is changed, the decompressor will not need to be changed.
<br />
<br />Download <a href="http://membler-industries.com/tokumaru/tokumaru_tile_compression.7z" class="postlink">here</a>.
<br />
<br />Please let me know if you plan on using this, and please post here if you have suggestions on how to improve the encoder.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Dec 21, 2009 12:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ooooo... I'm kind of a fan of compression stuff.
<br />
<br />I might take a crack at touching up the compressor.  Is the compression format included in the download?
<br />
<br />*gets*
<br />
<br />
<br />EDIT:
<br />
<br />doh, no format outline in the package.  Is the format documented anywhere?  Or do I just have to decipher the source to figure it out?
<br />
<br />EDIT2:
<br />
<br />I dug up this post.  Is this the same compression scheme?
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=3725&amp;postdays=0&amp;postorder=asc&amp;highlight=bee52&amp;start=15">http://nesdev.com/bbs/viewtopi ... 2&amp;start=15</a><!-- m -->
<br />
<br />EDIT3:
<br />
<br />Tepples' followup post clarified a lot of it for me (actually I was totally lost until he throw in that C-ish syntax -- that really made it easier to understand).  But there are still some format details that are confusing me.  Specificlaly, what bits in the stream represent what.
<br />
<br />Here's what I understand:
<br />
<br />First byte in the stream is the number of tiles to decode, after that:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1-bit to determine whether or not to rebuild the tables.<br />&nbsp; 1:&nbsp; skip table rebuilding<br />&nbsp; 0:&nbsp; rebuild table:<br />&nbsp; &nbsp; 4 groups of 2 bits follow &#40;8 bits total&#41;.&nbsp; These bits<br />&nbsp; &nbsp; &nbsp; rebuild Table A.<br /><br />1-bit to determine row repeat<br />&nbsp; 1:&nbsp; repeat previous row &#40;next bit is the table rebuild bit&#41;<br />&nbsp; 0:&nbsp; this row is not a repeat<br /><br />&lt;&lt;if row is not a repeat&gt;&gt;<br />2-bits to determine the color, and the mode &#40;mode is A&#91;color&#93;&#41;<br />&nbsp; if the mode is 0, the same color is repeated for the whole row<br />&nbsp; if the mode is nonzero:<br /><br />&nbsp; &nbsp; 7 groups of 1-3 bits to determine the colors for the rest of the row<br />&nbsp; &nbsp; &#40;as per tepples outline in that other thread&#41;<br /></div>
<br />
<br />Do I understand this right?  I have a few questions about this:
<br />
<br />- I assume the tables can be changed mid-tile, correct?  Just not mid-row.
<br />
<br />- Can you change tables B,C, or D?  I only see how you'd change table A from this.  What determines the contents of B,C,D?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 21, 2009 6:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hehe... Sorry I didn't explain the format, but I didn't expect anyone to mess with the format itself. While coding the compressor I tried to separate the encoding (turning the tiles into a stream of bits) from the parsing (deciding how long each block should be).
<br />
<br />If you look at the source you can see that I tried a few different parsing functions, and those are kinda self explanatory (I hope!). The parsing functions can use whatever method they see fit to fill an array of block lengths, which later are used for actual encoding.
<br />
<br />But since you are interested in the format, let's get to the questions! You almost got it. Here is the format with as much detail as I can think of:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.start a new block by building the decompression tables:<br /><br />&nbsp; .for each color &#40;3 down to 0&#41;:<br /><br />&nbsp; &nbsp; .2 bits indicate how many colors can follow the current color.<br />&nbsp; &nbsp; &nbsp;This value goes straight to table A, indexed by the current<br />&nbsp; &nbsp; &nbsp;color.<br /><br />&nbsp; &nbsp; .if 1 or more colors can follow it, a color is specified in<br />&nbsp; &nbsp; &nbsp;encoded form. Since there are only 3 possibilities, the colors<br />&nbsp; &nbsp; &nbsp;are represented by the following codes: 0 &#40;first possibility&#41;,<br />&nbsp; &nbsp; &nbsp;10 &#40;second possibility&#41; and 11 &#40;third possibility&#41;. Depending<br />&nbsp; &nbsp; &nbsp;on the current color, the possibilities are different, because<br />&nbsp; &nbsp; &nbsp;they don't include the current color &#40;for example, the 3<br />&nbsp; &nbsp; &nbsp;possible colors that can follow color 2 are 0, 1 or 3&#41;. The<br />&nbsp; &nbsp; &nbsp;specified color is enough to find all of them: if only one<br />&nbsp; &nbsp; &nbsp;color can follow the original one, the specified one is it. If<br />&nbsp; &nbsp; &nbsp;it's 2 colors, the specified one is discarded and the 2 that<br />&nbsp; &nbsp; &nbsp;are not it are used. If it's 3 colors, the other 2 are the<br />&nbsp; &nbsp; &nbsp;ones that are not it. These colors go to tables B &#40;first color<br />&nbsp; &nbsp; &nbsp;that can follow the original&#41;, C &#40;second&#41; and D &#40;third&#41;.<br /><br />.decode the tiles that are part of the same block:<br /><br />&nbsp; .1 bit selects between repeating the previous row or decoding a<br />&nbsp; &nbsp;new one &#40;0 = new row, 1 = repeat previous row&#41;. It is possible<br />&nbsp; &nbsp;to repeat the first row of the first tile of a block, and a row<br />&nbsp; &nbsp;filled with color 0 is used in this case.<br /><br />&nbsp; .if the row is not a repeat:<br /><br />&nbsp; &nbsp; .2 bits specify the color of the first pixel. This color is<br />&nbsp; &nbsp; &nbsp;then used as an index into table A so that we know how many<br />&nbsp; &nbsp; &nbsp;colors can follow the current one.<br /><br />&nbsp; &nbsp; .if no color can follow the current one, the same color is<br />&nbsp; &nbsp; &nbsp;repeated for the rest of the row.<br /><br />&nbsp; &nbsp; .if there are colors following the current one, 1 bit selects<br />&nbsp; &nbsp; &nbsp;between repeating the previous pixel or reading a new one<br />&nbsp; &nbsp; &nbsp;&#40;0 = new pixel, 1 = repeat&#41;.<br /><br />&nbsp; &nbsp; .if the pixel is not a repeat, the next pixel depends on how<br />&nbsp; &nbsp; &nbsp;many colors follow the current one. If only 1 can follow it,<br />&nbsp; &nbsp; &nbsp;this is used &#40;it's the color from table B&#41;. If 2 can follow<br />&nbsp; &nbsp; &nbsp;it, 1 bit selects between them &#40;0 = color from table B, 1 =<br />&nbsp; &nbsp; &nbsp;color from table C&#41;. If 3 can follow it a value with 1 or 2<br />&nbsp; &nbsp; &nbsp;bits select between the 3 possibilities &#40;0 = from table B,<br />&nbsp; &nbsp; &nbsp;10 = from table C, 11 = from table D&#41;.<br /><br />&nbsp; &nbsp; .after each pixel is draw, its color is used as an index into<br />&nbsp; &nbsp; &nbsp;table A again so that the next pixel is processed the same way.<br /><br />&nbsp; .once the tile is complete, 1 bit selects between starting a new<br />&nbsp; &nbsp;block or not &#40;0 = no new block, 1 = new block&#41;.</div>
<br />I hope the above is clear enough, I'm having trouble organizing it any better than this.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I assume the tables can be changed mid-tile, correct? Just not mid-row.</div><br />No, they can't. A compressed stream always starts with a new block (and the definition of new tables), and after each completed tile a bit will select between continuing the current block or ending it and starting a new one.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can you change tables B,C, or D? I only see how you'd change table A from this. What determines the contents of B,C,D?</div>
<br />These are changed whenever a color can be followed by colors that are not itself. The first possible color goes to table B, the second goes to table C and the third goes to table D. Naming them with single letters was not a very good choice, but back then I wasn't sure what to name them. In the decoder I named them ColorCount (A), NextColor0 (B), NextColor1 (C) and NextColor2 (D), I hope those make more sense.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Mon Dec 21, 2009 8:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is great!  I'm going to take a look at it in more detail at work tomorrow.  Thanks for uploading this.  I've been intrigued ever since you wrote that post a few months ago where you reverse engineered the Codemasters algorithm.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Dec 21, 2009 8:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How does it compare to the Contra algorithm, or the Zelda Oracles algorithm?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 21, 2009 9:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">How does it compare to the Contra algorithm, or the Zelda Oracles algorithm?</div>
<br />I don't know anything about those. If you have any links to information about them, I'd be interested.
<br />
<br />I can tell you though that this compression scheme often compresses tiles to 60% of their size, sometimes more, sometimes less. It's one of the most efficient I have studied.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Dec 21, 2009 9:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay I think I get it... but I have a few more questions I forgot to ask before, but I'll be able to answer them myself when I get home from work and take a look at the compressed and decompressed data you provided in that archive.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 21, 2009 9:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll call it CMM (Codemasters Markov) for this post.
<br />
<br />Both Contra and Who's Cuter use variants of byte run-length encoding for their tiles. (LJ65 and my current project use the same thing for their nametables.) In essence, RLE has a short code for "repeat the previous byte". RLE also has a short code for 2-color tiles, such as those in text fonts: the bottom (blank) row of a glyph's first plane and the 9 blank rows of the font's second plane make up one run. CMM likewise has short codes for "repeat the previous row" and "group of tiles uses only two colors".
<br />
<br />But CMM also shrinks the data even when you don't have identical rows because it has a short code for repeated pixels <em>within</em> a row. Each pixel that's the same color as its neighbor to the left takes only 1 bit, not 2. This is a strict gain in tiles with three colors and an amortized gain in tiles with four colors because repeats are more likely than those colors that have to be coded with 3 bpp.
<br />
<br />If this codec works, multicarts can get bigger. Imagine Forbidden <strong>Five</strong> (though not Punch-Out!! obviously).
<br />
<br />And no, it isn't limited to NES tiles; it would be trivial to make the decoder output in Game Boy, Virtual Boy/NGPC, or any other 2bpp tile format. I seem to remember Commodore 64 also using 2bpp tiles in its 160px-wide mode.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Dec 21, 2009 9:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know the Contra algorithm, I've only stepped through it a couple times, but didn't bother to decipher the format.  It does not appear to be byte-aligned.
<br />
<br />
<br />Zelda Oracles either uses an LZ based scheme, or its own special format which I call "16 bits and common byte".
<br />
<br />"16 bits and common byte":
<br />Read a 16 bit value, these will indicate whether to use the common byte, or to copy a byte.
<br />If the value isn't zero (indicating that it has a common byte), read the common byte.
<br />For each bit in the 16 bits, either output the common byte, or copy a byte.
<br />Really simple.  It was intended for level data but is also used for graphics for some reason.
<br />You need at 3 instances of the common byte to break even.
<br />
<br />"LZ" format:
<br />You read a byte to indicate whether the next 8 things are literal bytes, or are LZ runs.  You read another byte for the next 8 flags when you are out of bits.
<br />For an LZ run, the distance is 5 bits, and the length is 3 bits.  If the length is zero, it reads a byte to get an 8-bit length.
<br />I think the game's "LZ format" has way too much overhead, of one bit per each byte!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 21, 2009 10:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Disch, if you need to ask anything, please do.
<br />
<br />If anyone is wondering what are the differences between this format and the one by Codemasters, there are basically 2:
<br />
<br />1. The original format used a bit to indicate that the first block was starting. I considered this redundant because before decompressing anything the first set of tables has to be built. This doesn't save much space, but why would I waste it, even if it's a single bit?
<br />
<br />2. When defining the tables, no matter how many colors can follow the original one, I can always build the whole list from a single color. The original format needed an extra bit to select between the 2 remaining colors when 2 colors followed the original one, in addition to specifying the color that doesn't follow it.
<br />
<br />Another difference, which has no effect on how compact the encoded data is, is that I use different codes for compressed colors, possibilities and such. The codes I picked seemed more appropriate to me, but the codes are the same size as before, so it really doesn't matter.
<br />
<br />So, if the format is more compact, why aren't the encoded files? Because I'm not that good with math, and couldn't find an algorithm to divide the tiles into blocks of optimal lengths. I order words, I can't seem to select the best times to end a block and start another one. However, I took note of the block lengths used by Bee52 in the Codemasters logo tileset, hardcoded them to my compressor and the result was indeed smaller than the original data in the ROM (by only 4 bytes, but still). This proves that this format is more compact then theirs, once the optimal lengths are selected. Hopefully one day I (possibly with some help) will be able to make an algorithm that finds the best lengths.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 21, 2009 10:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">And no, it isn't limited to NES tiles; it would be trivial to make the decoder output in Game Boy, Virtual Boy/NGPC, or any other 2bpp tile format.</div>
<br />I meant that the encoder and decoder I provided are specific to NES tiles, just in case someone decides to try with name table data, for example, which I'm pretty sure wouldn't work well. But sure, modifying it to work with other 2bpp tile formats should be trivial (the encoder would also have to be modified to interpret the input file correctly, but that's trivial too).
<br />
<br />Dwedit, it appears that the other formats you mentioned are byte-oriented, and I believe that CMM (as tepples named it), being pixel-oriented, will almost certainly compress better. This is because byte oriented compression will only take advantage of vertical redundancy (seeing as a byte represents an entire row of a tile), while pixel-oriented schemes will also take advantage of horizontal redundancy.
<br />
<br />The way I see CMM, it looks like they wanted something like RLE (they use a bit to repeat rows, which resembles the way RLE works), but they wanted to be able to repeat pixels within a row as well. However, since adding repetition flags to every pixel and row would cause a lot of expansion when there was no repetition, they came up with this crazy scheme of limiting the possibilities of colors that can be used, so that shorter codes could be used, and that would counterbalance the expansion caused by the excess of flags. I don't know if it was actually designed like that, but this is what it looks like to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Mon Dec 21, 2009 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Zelda Oracles either uses an LZ based scheme, or its own special format which I call "16 bits and common byte".<br /><br />"16 bits and common byte":<br />Read a 16 bit value, these will indicate whether to use the common byte, or to copy a byte.<br />If the value isn't zero (indicating that it has a common byte), read the common byte.<br />For each bit in the 16 bits, either output the common byte, or copy a byte.<br />Really simple.  It was intended for level data but is also used for graphics for some reason.<br />You need at 3 instances of the common byte to break even.</div><br />I call this RLZ. Just basically a bit mask for repeat byte/word/nibble/etc or literal fetch. 1bit RLE. I've a few versions of this. Some repeat a common/fixed value every so many bits (the size of the mask. I.e. next fixed value is fetched along with the bit mask) and some variations just repeat the last literal.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">"LZ" format:<br />You read a byte to indicate whether the next 8 things are literal bytes, or are LZ runs.  You read another byte for the next 8 flags when you are out of bits.<br />For an LZ run, the distance is 5 bits, and the length is 3 bits.  If the length is zero, it reads a byte to get an 8-bit length.<br />I think the game's "LZ format" has way too much overhead, of one bit per each byte!</div>
<br />Heh - LZSS with an extended/additional control code. 5bits is kind of a small window. But then again, the element size is smaller (2bit pixels).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Dec 21, 2009 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Zelda oracles also supports another LZ format with longer distances and lengths.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 21, 2009 6:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But then LZ77 works a lot better on platforms that have random access to VRAM (like Game Boy with rendering off), a work RAM big enough to hold a fairly large history (like Game Boy with rendering on or Super NES), or both (like GBA or PC). Methods with a static dictionary (e.g. Huffman, word encoding) and methods with a small state (e.g. RLE, CMM) work better when you have to decompress directly to a parallel port.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Dec 21, 2009 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Guys, I might have just found a way to make the files smaller than the Codemasters encoder did. I'm just making sure it works and that I did not screw up with the tests. I'll report back soon.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>