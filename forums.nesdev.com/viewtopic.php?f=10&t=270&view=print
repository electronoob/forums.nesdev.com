<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - About the mapper</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">About the mapper</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=270">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=270</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Wed Apr 06, 2005 2:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>About the mapper</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had found some files about mapper.
<br />But I have a trouble still.For example I use mapper 1,it's MMC1.
<br />It has 4 Registers.And some files told me the meaning of the value every bit of every register.
<br />My problem is that how can I get the value of the registers?How can I read these registers and know their value?
<br />Could anyone help me?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 06, 2005 5:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In hardware, a lot of registers are generally write-only. If there's a reason that you have to know what value was last written to each register, then you'll have to manually save the last written value somewhere in RAM whenever you write to the registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Wed Apr 06, 2005 6:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My English is too bad.I think you mistook my meaning.
<br />
<br />In the "mapperw.txt", <div class="codetitle"><b>Code:</b></div><div class="codecontent">┌────────────────┐<br />&nbsp;│ Mapper 1: MMC1 │<br />&nbsp;└────────────────┘<br />&nbsp;┌───────────────┐ ┌────────────────────────────────────────────────────────┐<br />&nbsp;│ $8000 ─ $9FFF ├─┤ RxxCFHPM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp;│ &#40;Register 0&#41;&nbsp; │ │ │&nbsp; │││││&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp;└───────────────┘ │ │&nbsp; ││││└─── Mirroring Flag&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││││&nbsp; &nbsp; &nbsp; 0 = Horizontal&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││││&nbsp; &nbsp; &nbsp; 1 = Vertical&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││││&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │││└──── One─Screen Mirroring&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │││&nbsp; &nbsp; &nbsp; &nbsp;0 = All pages mirrored from PPU $2000&nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │││&nbsp; &nbsp; &nbsp; &nbsp;1 = Regular mirroring&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │││&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││└───── PRG Switching Area&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││&nbsp; &nbsp; &nbsp; &nbsp; 0 = Swap ROM bank at $C000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││&nbsp; &nbsp; &nbsp; &nbsp; 1 = Swap ROM bank at $8000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; ││&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │└────── PRG Switching Size&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0 = Swap 32K of ROM at $8000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 = Swap 16K of ROM based on bit 2&nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; └─────── &lt;Carts with VROM&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VROM Switching Size&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 = Swap 8K of VROM at PPU $0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 = Swap 4K of VROM at PPU $0000 and $1000│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;1024K carts&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 = Ignore 256K selection register 0&nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 = Acknowledge 256K selection register 1 │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ └────────── Reset Port&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 = Do nothing&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 = Reset register 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;└────────────────────────────────────────────────────────┘<br /><br />&nbsp;┌───────────────┐ ┌────────────────────────────────────────────────────────┐<br />&nbsp;│ $A000 ─ $BFFF ├─┤ RxxPCCCC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp;│ &#40;Register 1&#41;&nbsp; │ │ │&nbsp; ││&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp;└───────────────┘ │ │&nbsp; │└──┴──── Select VROM bank at $0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;If bit 4 of register 0 is off, then switch│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a full 8K bank. Otherwise, switch 4K only.│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; └──────── 256K ROM Selection Register 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;512K carts&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 = Swap banks from first 256K of PRG&nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 = Swap banks from second 256K of PRG&nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;1024K carts with bit 4 of register 0 off&gt;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 = Swap banks from first 256K of PRG&nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 = Swap banks from third 256K of PRG&nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;1024K carts with bit 4 of register 0 on&gt; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Low bit of 256K PRG bank selection&nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ └─────────── Reset Port&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 = Do nothing&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 = Reset register 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;└────────────────────────────────────────────────────────┘<br /><br />&nbsp;┌───────────────┐ ┌────────────────────────────────────────────────────────┐<br />&nbsp;│ $C000 ─ $DFFF ├─┤ RxxPCCCC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp;│ &#40;Register 2&#41;&nbsp; │ │ │&nbsp; ││&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp;└───────────────┘ │ │&nbsp; │└──┴── Select VROM bank at $1000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; If bit 4 of register 0 is on, then switch&nbsp; │<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; a 4K bank at $1000. Otherwise ignore it.&nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; │&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ │&nbsp; └────── 256K ROM Selection Register 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│</div><br /><br />Row 2,How can I get the value of  "RxxCFHPM"? Or,If I want to "R"=1,C=F=H=P=M=0,so I write lda #80, sta ?????  <br /><br />Ok,if my English is too bad~~~A same way is,In  "mapper1.txt" ,segment 2,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">It is known that the MMC1 chip has four registers, to which data can be written by sending values to certain memory locations in the NES CPU address space</div><br /> What is the address?For example,segment 5 said,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bit 0 - toggles between horizontal and vertical mirroring&nbsp; &nbsp; 0 = vertical, 1 = horizontal</div>
<br />
<br />If I want to do vertical mirroring,so I must write "0" .but what address I write "0" to?
<br />Thank you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Apr 06, 2005 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Be carfull, many MMC1 docs are obsolete, and there is stupid mistakes like backward mirroring. Yes, vertical mirroring is 0 and horizontal mirroring is 1, not the opposite.
<br />Well, if you have trouble about controlling a mapper, don't begin with the MMC1. Writing to all mappers but MMC1 is easy.
<br />Imagine you're using a simple CNROM board (mapper 3). You have only one register that switches a 8kb CHR-ROM page. Writing at any adress between $8000 and $ffff will write to the mapper and switch the page you want to, normally CNROM uses only 2 bits, so you can have 4 different 8kb CHRROM page (into one 32kb CHRROM chip). Just write the number of the CHR page you want to the mapper (0, 1, 2 or 3), that's it (in pratice you also have to worry about bus conflicts, but I won't go into details now).
<br />
<br />Now let's process to the next level. You're using a UNROM board (mapper 2). You also have only one register, that expand PRGROM instead of CHRROM, and is 3 bit or 4 bit wide (depending of UNROM or UOROM boads). This allow you to swap a 16kb rom bank page at $8000-$bfff, but all the data at $c000-$ffff will remain always the same (the last 16kb page) because of the 74HC32 chip. This allow you to use 8 or 16 bank of 16kb to have a 128kb or 256kb PRGROM chip. Writing to the mapper works as simple as CNROM, write anything to $8000-$ffff will set one of your 8 (or 16) PRGROM banks.
<br />
<br />Now let's process to the third level, the MMC1. It has 4 different registers, one for mirroring and bankswitching control, two for the CHRROM banking value and one for the PRGROM switching value.
<br />Those are no usual registers, but boolean register so only the LSB is written to the mapper. Set the MSB if you want to "reset" the register (you have to always do it at CPU reset), regardless of the value of the register.
<br />When you write to the MMC1, it does 5 internal "temporary" switches to get the value in any register, and when you set up the 5th value the register is uploaded.
<br />The usual way to upload a register is like this. Typically you have a simple banksitching like UNROM does on the MMC1, so you have one 16kb bank switched at $8000-$bfff and a hardwired bank at $c000-$ffff and have vertical mirroring. Let's say you're using two 4kb ChrRom switch.
<br />So, regardeless of 1 bit switching, you have to write $1e into reg 0 (%0001'1110 = $1e). The code is :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$80&nbsp; ;Reset reg 0<br />sta $8000 ;This is needed only one at reset<br />lda #$fe<br />sta $8000 ;Write all 5 bits to the mappers<br />lsr A<br />sta $8000<br />lsr A<br />sta $8000<br />lsr A<br />sta $8000<br />lsr A<br />sta $8000 ;Reg 0 is uploaded NOW<br />rts</div>
<br />All MMC1 regs works the same, so you also have to swith your data 5 times in CHR ROM bank and PRG ROM bank registers, even if you don't use all the bits for your bankswitching. Typically, you have a 128kb PRG rom switch, so only 4 bits of reg 3 are used. Remember that bit 5 is still present in hardware, so you have to write 5 times to the mapper.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Wed Apr 06, 2005 7:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you.
<br />I understand it now.
<br />I had a try like this I made mapper=3,and I wrote "lda #1 ; sta $8001" ,that would use the second 8K CHR rom,yes? But in my .asm file,I don't know where I put my second 8K CHR rom in.I had put the first 8K CHR rom in $0000-$1fff".
<br />
<br />I know how to swap PRG rom in atari game.It just have 4K space for PRG rom.And if I have 8K 12K or 16K PRG rom,I can change it to which rom I want to.There is no CHR rom in atari game.So had not had a try about the CHR rom.I think maybe the method is similar  either atari or NES.
<br />
<br />I must find more information about how to swap CHR rom in NES first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed Apr 06, 2005 7:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You're using the NESAsm assembler, right?  I'm not sure how to include the extra CHR banks in there.  But you could always copy the extra ones on after assembly, with a command like "copy /b file.nes+file1.chr+file2.chr+file3.chr game.nes"
<br />
<br />Also, when you use mapper 3 (and some of the other simple mappers) on a cart, you have to use special way to write to ROM because of bus conflicts.  The value you write has to be in ROM.
<br />
<br />Here's the clearest way to do it:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">banktable: .byte 0,1,2,3<br /><br />&nbsp;lda #2 ; bank to select<br />&nbsp;tax<br />&nbsp;sta banktable,x<br /></div><br /><br />And a quicker way:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">banktemp:<br />&nbsp;lda #2<br />&nbsp;sta banktemp+1<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Wed Apr 06, 2005 8:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Memblers,long time no come into contact with you.How are you?
<br />I joined in a company writing some 8 bit games with 6502 assembler.
<br />
<br />About the mapper~,I think I must study some example first.Do you konw where I  can find some example using mapper 3?Using other simple mappers is good too.Thank you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hyde</b> [ Wed Apr 06, 2005 10:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">xian106 wrote:</div><div class="quotecontent">About the mapper ,I think I must study some example first.Do you konw where I  can find some example using mapper 3?Using other simple mappers is good too.Thank you.</div>
<br />
<br />I don't think there is such thing as a good doc on the various existing mappers. Mapper 3 is really simple though: all you have to do is write to $8000-$ffff the number of the 8K CHR bank that you would like to be swapped into the VRAM $0000-$1fff area. You have to be aware of the existence of bus conflicts (or perhaps not?), however. Here:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$8000:<br /><br />.data $00, $01<br /><br />lda #$00<br />sta $8000 ;swap page zero<br /><br />lda #$01 ;swap page one<br />sta $8001<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Wed Apr 06, 2005 10:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If I write,<div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />$8000: <br />lda #$00 <br />sta $8001 ;swap page zero <br /><br />lda #$01 ;swap page one <br />sta $8002&nbsp; <br /><br />lda #$02<br />sta $9005 ;swap page two<br /></div>
<br />Is it right also?Are all the address between $8000-$ffff  the same?
<br />And if page zero is $0000-$1fff,what is page one or two?
<br />OK,and just ask same question,where I put my extra CHR rom in?I put the first 8K in $0000-$1fff,and where the second 8K?Thanks all of you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Apr 07, 2005 12:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">xian106 wrote:</div><div class="quotecontent">Memblers,long time no come into contact with you.How are you?<br />I joined in a company writing some 8 bit games with 6502 assembler.<br /></div><br /><br />I'm doing well.  A company doing 8-bit games, that's awesome. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And if page zero is $0000-$1fff,what is page one or two? </div>
<br />
<br />They're also $0000-$1FFF, since that's the most the PPU can address at once.  Normally an assembler wouldn't need to know where it's loaded, since it wouldn't need to be referenced in the code.  But I'm not sure how NESAsm works for bankswitching.
<br />
<br />And your bankswitching code as you posted it will work on emulators (since they can ignore bus conflicts).  But with bus conflicts, the first one is right, but the second two wrote to the wrong addresses (should be $8006 and $800B in that example).  And you can do these writes anywhere in $8000-$FFFF, it's the same.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Thu Apr 07, 2005 12:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I will keep on studying 8 bit games,never give it up~~~  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> 
<br />
<br />I will  try to do mappers.
<br />BTW,I use DASM too now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>xian106</b> [ Thu Apr 07, 2005 4:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bregalad,you said,
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$80&nbsp; ;Reset reg 0 <br />sta $8000 ;This is needed only one at reset <br />lda #$fe <br />sta $8000 ;Write all 5 bits to the mappers <br />lsr A <br />sta $8000 <br /></div><br />I think it must be <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$80&nbsp; ;Reset reg 0 <br />sta $8000 ;This is needed only one at reset <br />lda #$1f <br />sta $8000 ;Write all 5 bits to the mappers <br />lsr A <br />sta $8000 <br /></div>
<br />YES?
<br />Because horizontal mirroring is 1,so LSB is not "E" ,it must be "F".And if you use "F" for MSB,it will rest the register 0 again,Yes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Apr 07, 2005 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, horizontal mirroring is 1, but I wanna to show something using vertical mirroring here.
<br />Yes, I mess up, and I've set all unused bits, doing $fe instead of $1e ($1f will be the same with horizontal mirroring). I think this would "reset" the reg 0 again at the first write, and so the segond write will be the first, etc.... so the reg 0 would wait for a fiveth write again and again.... but set all unused bit exept bit 7 is no problem.
<br />Did you understand or about bus conflicts ? This is not important when you're testing some of your code in emulation only, but this is VERY important on the real hardware. Writing to any adress $8000-$ffff will write to the mapper (D pins of the 74HC161 chips), but, the PRG rom chip is still enabled ( /OE enable pin is usually tied to GND, this means that the outpout is enabled), so if the walue at the adress you're writing is not exactly the same as the one who is stored in the ROM chip, bus conflicts will appears. This appends on the whole 8 bit data, not only to the pins used by the mapper. If the one outpout pin of the CPU is 0 (0v) and the output pin of the EPROM is 1 (+5v), a short would appear. Fortunataly, I think both chips are well protected agains this stuff, and this won't destroy the CPU or your ROM. But the voltage value at the 74HC161 is non determinated, and could be considerated as well as a low or a high voltage level. Anyway, this is very bad and you have to take care of this, just by writing to an array like Memblers said.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Apr 07, 2005 10:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Anyway, this is very bad and you have to take care of this, just by writing to an array like Memblers said.</div>
<br />Or, if you're switching to a fixed bank on C*ROM, U*ROM, or A*ROM, try writing over the instruction itself, using code similar to this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">@bankswitch:<br />&nbsp; lda #6<br />&nbsp; sta @bankswitch+1&nbsp; ; write over the instruction<br /></div>
<br />MMC1, on the other hand, appears to contain circuitry to handle bus conflicts gracefully, disabling ROM output enable on writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Apr 08, 2005 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, but conflics doesn't appears at all on MMC1 and MMC3 cartidges, so you can forget them when writing software for advanced mappers.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>