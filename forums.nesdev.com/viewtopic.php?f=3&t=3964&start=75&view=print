<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Got any tips for Early NES Emulator Development?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Got any tips for Early NES Emulator Development?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3964">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=3964</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Mar 22, 2008 10:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The thing is I did follow Loopys doc and it still has issues.
<br />
<br />How do you convert properly, the values written to $2005 and $2006 to new X/Y coordinates?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Mar 22, 2008 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Coarse X bits: 0-4  (in units of 8 pixels)
<br />Coarse Y bits: 5-9  (in units of 8 pixels)
<br />Most significant X bit: 10 (in units of an entire nametable, 256 pixels)
<br />Most significant Y bit: 11 (in units of an entire nametable)
<br />Fine Y bits: 12-14 (in units of 1 pixel)
<br />
<br />Fine X is separate from loopy_v

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Mar 22, 2008 10:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright hold onto your pants, time for some of my code. Tell me if something is screwwed up. There must be something.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;if&#40;Address==0x2005&#41;&nbsp; &nbsp;&nbsp; &nbsp;// Write to the &quot;Scroll&quot; Register<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Scroll Write &#40;2x write reg&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;PPU_LATCH==0&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Scroll_X=Byte;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_LATCH=1;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Mid-Frame Stuff<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Fine Horizontal Scroll. Immediately Effective.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_FH=Byte&amp;0x07;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Scroll_X=&#40;Scroll_X&amp;0xF8&#41;|MF_FH;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_HT=Byte&amp;0xF8;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_HT=MF_HT&gt;&gt;3;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Scroll_Y=Byte;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_LATCH=0;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Mid-Frame Stuff<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Fine Vertical Scroll, Lower 3 Bits &#40;&amp;0x07&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_FV=Byte&amp;0x07;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Large Vertical Scroll, Bits 3&amp;4.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_VT=Byte&amp;0xF8;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_VT=MF_VT&gt;&gt;3;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;Address==0x2006&#41;&nbsp; &nbsp;&nbsp; &nbsp;// Write to PPU_ADDR Register<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// PPU Address Write &#40;2x write reg&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;PPU_LATCH==0&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM_POINTER=&#40;Byte&lt;&lt;8&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_LATCH=1;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Midframe Stuff<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_NT=&#40;Byte&amp;0x0C&#41;&gt;&gt;2;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_FV=MF_FV&amp;0x30;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_VT=&#40;MF_VT&amp;7&#41;|&#40;&#40;Byte&amp;3&#41;&lt;&lt;3&#41;;<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;VRAM_POINTER=VRAM_POINTER | Byte;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_LATCH=0;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Midframe Stuff<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_HT=Byte&amp;0x1F; // Lower 5bits.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MF_VT=MF_VT&amp;&#40;&#40;Byte&amp;0xE0&#41;&gt;&gt;5&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Scroll_Y=&#40;MF_VT*8&#41;+MF_FV;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Scroll_X=&#40;MF_HT*8&#41;+MF_FH;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_CTRL&amp;=0xFC;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_CTRL|=MF_NT;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /></div>
<br />
<br />From what you posted I think I see some errors already but please point it out incase I don't figure it out.
<br />
<br />Edit: Well this fixed the Zelda 2 title screen scrolling. Checking again to make sure I'm affecting bits everywhere it should. Your post definitely helped.
<br />
<br />Edit: Updated code block.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Mar 23, 2008 12:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think that code you wrote is correct on 2005 writes.  Looks like it's not affecting loopy_t as it's supposed to.
<br />
<br />You can also just try using loopy_t and loopy_v directly in scrolling code.  
<br />While a scanline renders, loopy_v and fine X update.  After the scanline finishes, fine X ends up back where it started (because it drew 256 pixels)
<br />
<br />Basically there are several different events that affect scrolling...
<br />* Writes to PPU
<br />
<br />* Pixel clock 256 (I think?) on a scanline
<br />Copies X scroll bits from loopy_t to loopy_v  (not fine X scroll)
<br />
<br />* "Start of Frame" (When exactly is this?  Is it pixel clock 0 of first visible scanline, or pixel clock 256 of dummy scanline?)
<br />Copies loopy_t to loopy_v (which affects all scrolling except fine X scroll)
<br />
<br />
<br />Because X scrolling updates are delayed until pixel clock 256, when the game writes a new X scroll value to 2005 (done between pixel clock 256 and 341), they need to include Coarse X for the scanline AFTER the upcoming scanline, and fine X for the upcoming scanline.  If you emulate that wrong, you get nasty artifacts in Slalom.  Lots of emulators don't get it right.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sun Mar 23, 2008 12:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your code has flaws, although it will work with 99% of all games, it doesn't do loopy_v correctly on 2005 writes followed by 2006 writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Mar 23, 2008 2:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How would the order affect it? Don't I just need to move the right bits into certain values after 2005$ 1st, $2005 2nd, $2006 1st, and $2006 2nd?
<br />
<br />The games that are having scrolling issues for me are pretty important. Ninja Gaiden's cinema scenes, Zelda's vertical scrolling, and Battletoads.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sun Mar 23, 2008 3:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />MottZilla you must use the following:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">switch &#40;Address&#41; &#123;<br />&nbsp; &nbsp;case 0x2005:<br />&nbsp; &nbsp;&nbsp; &nbsp;...<br />&nbsp; &nbsp;&nbsp; &nbsp;break;<br />&nbsp; &nbsp;case 0x2006:<br />&nbsp; &nbsp;&nbsp; &nbsp;...<br />&nbsp; &nbsp;&nbsp; &nbsp;break;</div>
<br />Especially when it comes down to any code that goes into the RenderPixel function. You could use if/else, but those jump tables are so neat. Trust me, a couple of extra if/switch statements inside of RenderPixel and your FPS vanish.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Mar 23, 2008 4:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Until the emulator handles this correctly, speed isn't an issue. If speed were, you could incorrectly handle it with maximum efficiency like this:
<br />
<br />{
<br />/* empty */
<br />}

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sun Mar 23, 2008 4:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know at this stage speed isnt important, but having switch instead of a bunch of if/else's makes it clearer for him to read/debug etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 23, 2008 6:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">I know at this stage speed isnt important, but having switch instead of a bunch of if/else's makes it clearer for him to read/debug etc.</div>
<br />
<br />- Indeed, as if it was basic enough for a newbie. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sun Mar 23, 2008 10:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The register writes are in the CPU. Also I am rendering pixels and it still runs fine for me. ;o
<br />
<br />Now can you tell me anything about why my scrolling doesn't work in Battletoads, the Ninja Gaiden cinema scenes, and Zelda's vertical scrolling? 
<br />
<br />One question I have is that while I now have pixel accurate Sprite Hit, Ninja Gaiden's status bar has a single half line of garbage. Similarly the Zelda 2 title screen has a single half line of garbage before the split point. Am I supposed to delay name table and scroll changes (except for the lower scroll x bits) until the end of the line? 
<br />
<br />Also, Does Battletoads rely on the fact that while the screen is off, the VRAM pointer does not advance? I noticed in Battletoads &amp; Double Dragon's intro mode the "film strip" with character names at the top has the correct sprite 0 sprite, but looks like all the tile data is drawn higher than it should be. Right now I always increase where in the nametable I'm fetching from. 
<br />
<br />And if anyone can tell me what Dwedit meant by my 2005 writes followed by 2006 isn't right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sun Mar 23, 2008 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You're gonna have to provide us with some more information, like some source code, as to why you're scrolling is off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Sun Mar 23, 2008 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For small enough switches, the compiler will just spit it out as an if-else tree anyways.
<br />
<br />You really should look carefully at loopys doc or the 2C02 technical reference, but here is the gist:
<br />
<br />There are a series of latches that are loaded from various bits of the registers on particular writes, these are FV, V, H, VT, HT, and FH. Those are Fine Vertical, Vertical nametable, Horizontal nametable, Vertical Tile, Horizontal Tile, and Fine Horizontal.
<br />
<br />FV, V, H, VT, and HT have counters associated with them, and the output of those counters is what the PPU uses to address memory.
<br />
<br />$2000's nametable bits sets the V and H latches
<br />$2005's first write sets the HT and FH latches
<br />$2005's second write sets the FV and VT latches
<br />$2006's first write sets the low two bits of FV, V, H, and the high 2 bits of VT
<br />$2006's second write sets the low three bits of VT, and all of HT
<br />
<br />The counters get loaded with the values in the latches at specific times:
<br />at the beginning of scanline 20 (end of vblank), if sprite or BG rendering is enabled: FV, V, H, VT, HT
<br />
<br />on the second write to $2006: FV, V, H, VT, HT
<br />
<br />at the end of hblank: H and HT
<br />
<br />This is why you need the latches seperate from the counters. Writes to $2000 and $2005 (other than FH) will not effect rendering until the beginning of the next frame or scanline. Writes to $2006 will affect the counters, and thus rendering, immediately upon the second write.
<br />
<br />It's best to just implement the logic directly from the 2C02 doc. It keeps things the simplest, these latches update on these register writes, these counters get loaded at these times during rendering. It'll Just Work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sun Mar 23, 2008 5:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&lt;offtopic&gt;
<br />
<br />1. Depending of the source, one "if()" less means +2FPS.
<br />2. value = table[index] is faster than value = *(table + index).
<br />3. "value = color"; if( cond ) value &amp;= mask" is slower than value = color &amp; mask.
<br />
<br />Boo...
<br />&lt;/offtopic&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Sun Mar 23, 2008 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Late to the party, but... here's my 2 cents on __forceinline.
<br />
<br />It's a useful tool for occasional optimizations, however:
<br />
<br />(1) Since its a compiler extension and not a portable C++ keyword, Wrap it in a macro like NES_FORCEINLINE.  Use the preprocessor to detect the compilers that support it, and just define it to "inline" for any other ones.
<br />[Edit: oh, the GCC equivalent of __forceinline is:  __inline__  ]
<br />
<br />(2) NEVER USE IT WITHOUT PROFILING FIRST.  The only time you should use it is when you've discovered that the compiler chooses NOT to inline your little function, but its called very often and the the profiling shows that forcing the compiler to inline it results in faster program.  DON'T ASSUME IT WILL BE FASTER because often it won't.  Don't force the compiler to inline unless you *know* it should do it and isn't doing it, in that case.
<br />
<br />(3) If you have several call sites, one of which you want force-inlined and the others you don't, consider duplicating the source of the function into two copies (one to be forceinlined, the other to be left up to the compiler's discretion).  This can make code harder to maintain, but has less risk of code bloat than just using forceinline on a large function.
<br />
<br />
<br />By the way, another extension I read about somewhere, but I've never tried it?  (It might be MSVC-only)<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;__assume&#40;x &lt; 256&#41;</div>
<br />Does anyone know if this helps MSVC or GCC with the codegen for the bytecode dispatch switch statements?  Most compilers like to generate unnecessary range check(s) that can slow them down quite a bit, even if the switch expression has an 8-bit type.  I haven't checked any of them lately to see how they handle this; however, I've heard of at least one project which had a custom .obj-patching tool to remove those range checks from their bytecode interpreter after GCC compiled it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>