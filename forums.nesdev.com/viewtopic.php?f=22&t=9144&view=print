<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Pong tutorial failure</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Pong tutorial failure</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=9144">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=9144</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DC</b> [ Thu Aug 02, 2012 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried to finish bunnyboy's tutorial on nintendoage, but I had some issues.
<br />After a game over the game shortly plays and crashes. I can't get the collision date to work either.
<br />
<br /><!-- m --><a class="postlink" href="http://pastebin.com/5X1Us01D">http://pastebin.com/5X1Us01D</a><!-- m -->
<br />
<br />I can't figure out either; I've been playing around with the collision data for hours. Please help.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lazigamer</b> [ Thu Aug 02, 2012 8:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, I figured out the freezing problem you are having. During your &quot;EngineTitle&quot; and &quot;EngineGameOver&quot; you created a loop that never executes the RTI instruction until you hit START so the NMI is still firing which will fill up the stack. Then when it overflows and then RTI is executed you are not returned to where you are expected to and the game freezes.<br /><br />Since your NMI is called from an infinite loop the stack doesn't matter when calling it. So first, put three PLA's after the NMI call.<br />That seta the stack to back before the NMI was called.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br />&nbsp; PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&lt;--------------ADD THESE<br />&nbsp; PLA<br />&nbsp; PLA<br />&nbsp; LDA #$00<br />&nbsp; STA $2003&nbsp; &nbsp; &nbsp; &nbsp;; set the low byte (00) of the RAM address<br />&nbsp; LDA #$02<br />&nbsp; STA $4014&nbsp; &nbsp; &nbsp; &nbsp;; set the high byte (02) of the RAM address, start the transfer<br /><br />&nbsp; JSR DrawScore<br />&nbsp; JSR DrawScore2<br /></div><br /><br />This also means the RTI instruction needs to go since it is dependent on the stack. Just have it go back to the infinite loop.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; JSR UpdateSprites&nbsp; ;;set ball/paddle sprites from positions<br />&nbsp; <br />&nbsp; JSR MovePaddle1&nbsp; ;;get the current button data for player 1<br />&nbsp; JSR MovePaddle2&nbsp; ;;get the current button data for player 2&nbsp; <br />&nbsp; JSR CheckPaddleCollision<br /><br />&nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; return from interrupt &lt;---------REMOVE THIS LINE<br />&nbsp; JMP Forever ;&lt;---------ADD THIS LINE<br /><br /><br /></div><br /><br />And the freezing problems should go away.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DC</b> [ Fri Aug 03, 2012 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, thanks man. That fixed the freezing problem. Now I can't figure out why the collision won't work. The code works if I comment off parts ex. leave only the if greater than PADDLE1X part. If I leave in all the comparisons the code won't work :/.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lazigamer</b> [ Sat Aug 04, 2012 5:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok I solved the collision problem.<br /><br />Your second and third compares were reversed the idea is to skip the collision handling if NOT within the paddle's range (this is a VERY common error that I still find myself falling for).<br /><br />Also, the value of paddle1y2 being only 8 higher that paddle1y makes the paddle collision area 9 pixels. Subtracting 8 from bally for the comparison fixes that but you should find a better way of doing it.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckPaddleCollision:<br />&nbsp; LDA ballx<br />&nbsp; CMP #PADDLE1X+8<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; &nbsp; &nbsp; ;;if ball x &gt; left wall, still on screen, skip next section&nbsp; &lt;--BCC changed to BCS&nbsp; &nbsp; <br />&nbsp; LDA bally<br />&nbsp; CMP paddle1y<br />&nbsp; BCC CheckPaddleCollisionDone&nbsp; &nbsp; &nbsp; ;;if ball y &gt; top wall, still on screen, skip next section &lt;--BCS changed to BCC&nbsp; &nbsp;<br />&nbsp; LDA bally<br /><br />&nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;-- Fixes the width of the paddle so the ball collides with the whole thing <br />&nbsp; sbc #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;-- otherwise it would pass through the bottom half (effectively the same as adding 8 to paddle1y2)<br /><br />&nbsp; CMP paddle1y2<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; &nbsp; &nbsp; ;;if ball y &lt; bottom wall, still on screen, skip next section&nbsp; <br /></div><br /><br />All in all, the collision should work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DC</b> [ Sat Aug 04, 2012 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The ball acts spasticly and bounces below the paddle. Urgh... <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckPaddleCollision:<br />&nbsp; LDA ballx<br />&nbsp; SEC<br />&nbsp; SBC #$08&nbsp; <br />&nbsp; CMP #PADDLE1X<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; &nbsp; &nbsp; ;;if ball x &gt; left wall, still on screen, skip next section&nbsp; &lt;--BCC changed to BCS&nbsp; &nbsp; <br />&nbsp; LDA bally&nbsp; <br />&nbsp; CLC<br />&nbsp; ADC #$08<br />&nbsp; CMP paddle1y<br />&nbsp; BCC CheckPaddleCollisionDone&nbsp; &nbsp; &nbsp; ;;if ball y &gt; top wall, still on screen, skip next section &lt;--BCS changed to BCC&nbsp; &nbsp;<br />;&nbsp; LDA bally<br /><br />&nbsp; sec&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &lt;-- Fixes the width of the paddle so the ball collides with the whole thing <br />&nbsp; sbc #$08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; &nbsp; &lt;-- otherwise it would pass through the bottom half (effectively the same as adding 8 to paddle1y2)<br />;&nbsp; STA bally<br /><br />&nbsp; CMP paddle1y2<br />&nbsp; BCS CheckPaddleCollisionDone&nbsp; &nbsp; &nbsp; ;;if ball y &lt; bottom wall, still on screen, skip next section&nbsp; <br />&nbsp; LDA #$01<br />&nbsp; STA ballright&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA ballleft&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;;bounce, ball now moving right<br />&nbsp; JMP CheckPaddleCollisionDone <br />CheckPaddleCollisionDone:</div><br /><br />This seems to work better, but I don't understand why. What was wrong with the hitboxes?<br /><br />Finished:<br /><br /><!-- m --><a class="postlink" href="http://pastebin.com/cZAUUTfH">http://pastebin.com/cZAUUTfH</a><!-- m --><br /><br />Any tips for optimization?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lazigamer</b> [ Sat Aug 04, 2012 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After looking through your code I figured that i should optimize it as much as possible. That way you can look through it and see what kind of optimizations can be done and compare it to your original code.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .inesprg 1&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; .ineschr 1&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; .inesmap 0&nbsp; &nbsp;; mapper 0 = NROM, no bank swapping<br />&nbsp; .inesmir 1&nbsp; &nbsp;; background mirroring<br />&nbsp; <br />&nbsp; <br /><br />;;;;;;;;;;;;;;;<br /><br />;; DECLARE SOME VARIABLES HERE<br />&nbsp; .rsset $0000&nbsp; ;;start variables at ram location 0<br />&nbsp; <br />gamestate&nbsp; .rs 1&nbsp; ; .rs 1 means reserve one byte of space<br />ballx&nbsp; &nbsp; &nbsp; .rs 1&nbsp; ; ball horizontal position<br />bally&nbsp; &nbsp; &nbsp; .rs 1&nbsp; ; ball vertical position<br />balldirection&nbsp; &nbsp;.rs 1 ;direction the ball moves<br />ballspeedx .rs 1&nbsp; ; ball horizontal speed per frame<br />ballspeedy .rs 1&nbsp; ; ball vertical speed per frame<br />paddle1y&nbsp; &nbsp; &nbsp; .rs 1&nbsp; ; paddle vertical position<br />paddle2y&nbsp; &nbsp; &nbsp; .rs 1&nbsp; ; paddle vertical position<br />buttons1&nbsp; &nbsp;.rs 1&nbsp; ; player 1 gamepad buttons, one bit per button<br />buttons2&nbsp; &nbsp;.rs 1&nbsp; ; player 2 gamepad buttons, one bit per button<br />scoreOnes&nbsp; &nbsp; &nbsp;.rs 1&nbsp; ; byte for each digit in the decimal score<br />scoreTens&nbsp; &nbsp; &nbsp;.rs 1<br />scoreHundreds .rs 1<br />scoreOnes2&nbsp; &nbsp; &nbsp;.rs 1&nbsp; ; byte for each digit in the decimal score<br />scoreTens2&nbsp; &nbsp; &nbsp;.rs 1<br />scoreHundreds2 .rs 1<br /><br /><br />;; DECLARE SOME CONSTANTS HERE<br />STATETITLE&nbsp; &nbsp; &nbsp;= $00&nbsp; ; displaying title screen<br />STATEPLAYING&nbsp; &nbsp;= $01&nbsp; ; move paddles/ball, check for collisions<br />STATEGAMEOVER&nbsp; = $02&nbsp; ; displaying game over screen<br />&nbsp; <br />RIGHTWALL&nbsp; &nbsp; &nbsp; = $F4&nbsp; ; when ball reaches one of these, do something<br />TOPWALL&nbsp; &nbsp; &nbsp; &nbsp; = $20<br />BOTTOMWALL&nbsp; &nbsp; &nbsp;= $E0<br />LEFTWALL&nbsp; &nbsp; &nbsp; &nbsp;= $04<br />&nbsp; <br />PADDLE1X&nbsp; &nbsp; &nbsp; &nbsp;= $08&nbsp; ; horizontal position for paddles, doesnt move<br />PADDLE2X&nbsp; &nbsp; &nbsp; &nbsp;= $F0<br />PADDLESPEED&nbsp; &nbsp;= $04<br />PADDLELENGTH&nbsp; &nbsp; = $10<br />INITALBALLSPEED = $02<br /><br />A_BUTTON = %10000000<br />B_BUTTON = %01000000<br />SELECT_BUTTON = %00100000<br />START_BUTTON = %00010000<br />UP_BUTTON = %00001000<br />DOWN_BUTTON = %00000100<br />LEFT_BUTTON = %00000010<br />RIGHT_BUTTON = %00000001<br />;;;;;;;;;;;;;;;;;;<br /><br />&nbsp; .bank 0<br />&nbsp; .org $C000 <br />RESET:<br />&nbsp; SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable IRQs<br />&nbsp; CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; disable decimal mode<br />&nbsp; LDX #$40<br />&nbsp; STX $4017&nbsp; &nbsp; ; disable APU frame IRQ<br />&nbsp; LDX #$FF<br />&nbsp; TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set up stack<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; now X = 0<br />&nbsp; STX $2000&nbsp; &nbsp; ; disable NMI<br />&nbsp; STX $2001&nbsp; &nbsp; ; disable rendering<br />&nbsp; STX $4010&nbsp; &nbsp; ; disable DMC IRQs<br /><br />clrmem:<br />&nbsp; LDA #$00<br />&nbsp; STA $0000, x<br />&nbsp; STA $0100, x<br />&nbsp; STA $0300, x<br />&nbsp; STA $0400, x<br />&nbsp; STA $0500, x<br />&nbsp; STA $0600, x<br />&nbsp; STA $0700, x<br />&nbsp; LDA #$FE<br />&nbsp; STA $0200, x<br />&nbsp; INX<br />&nbsp; BNE clrmem<br /><br />vblankwait1:&nbsp; &nbsp; &nbsp; &nbsp;; First wait for vblank to make sure PPU is ready<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait1&nbsp; &nbsp;<br />vblankwait2:&nbsp; &nbsp; &nbsp; ; Second wait for vblank, PPU is ready after this<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwait2<br /><br /><br />LoadPalettes:<br />&nbsp; LDA $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch<br />&nbsp; LDA #$3F<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $3F00 address<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $3F00 address<br />&nbsp; LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0<br />LoadPalettesLoop:<br />&nbsp; LDA palette, x&nbsp; &nbsp; &nbsp; &nbsp; ; load data from address (palette + the value in x)<br />&nbsp; STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU<br />&nbsp; INX&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1<br />&nbsp; CPX #$20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites<br />&nbsp; BNE LoadPalettesLoop&nbsp; ; Branch to LoadPalettesLoop if compare was Not Equal to zero<br /><br />ClearNametable:&nbsp; &nbsp;&nbsp; &nbsp;;writes #$24 to the nametable 1024 times to make a clear screen<br />&nbsp; LDX #$00&nbsp; &nbsp;&nbsp; &nbsp;;X is for the first loop<br />&nbsp; LDY #$04&nbsp; &nbsp;&nbsp; &nbsp;;Y is for the second loop<br />&nbsp; LDA $2002<br />&nbsp; LDA #$20<br />&nbsp; STA $2006<br />&nbsp; LDA #$00<br />&nbsp; STA $2006&nbsp; &nbsp;&nbsp; &nbsp;;set PPU to $2000<br />&nbsp; LDA #$24<br />ClearNametableLoop:<br />&nbsp; STA $2007&nbsp; &nbsp;&nbsp; &nbsp;;store the value<br />&nbsp; INX<br />&nbsp; BNE ClearNametableLoop ;this loop runs 256 times<br />&nbsp; DEY<br />&nbsp; BNE ClearNametableLoop ;this loop runs 4 times<br /><br />&nbsp; LDA #$50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Set some initial ball stats<br />&nbsp; STA bally&nbsp; <br />&nbsp; LDA #$80<br />&nbsp; STA ballx<br />&nbsp; <br />&nbsp; LDA #INITALBALLSPEED&nbsp; &nbsp;;initalize ball speed<br />&nbsp; STA ballspeedx<br />&nbsp; STA ballspeedy<br /><br />&nbsp; LDA #$50&nbsp; &nbsp;&nbsp; &nbsp;;initalize paddle positions<br />&nbsp; STA paddle1y<br />&nbsp; STA paddle2y<br />&nbsp; <br />&nbsp; LDA #STATETITLE&nbsp; &nbsp;;Set starting game state<br />&nbsp; STA gamestate<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br /><br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br /><br />Forever:<br />&nbsp; JMP Forever&nbsp; &nbsp; &nbsp;;jump back to Forever, infinite loop, waiting for NMI<br />&nbsp; <br /><br />NMI:<br />&nbsp; LDA #$02<br />&nbsp; STA $4014&nbsp; &nbsp; &nbsp; &nbsp;; set the high byte (02) of the RAM address, start the transfer<br /><br />&nbsp; JSR DrawScore<br />&nbsp; JSR DrawScore2<br /><br />&nbsp; LDA #%10010000&nbsp; &nbsp;; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1<br />&nbsp; STA $2000<br />&nbsp; LDA #%00011110&nbsp; &nbsp;; enable sprites, enable background, no clipping on left side<br />&nbsp; STA $2001<br />&nbsp; LDA #$00&nbsp; &nbsp; &nbsp; &nbsp; ;;tell the ppu there is no background scrolling<br />&nbsp; STA $2005<br />&nbsp; STA $2005<br /><br />&nbsp; JSR ReadController1&nbsp; ;;get the current button data for player 1<br />&nbsp; JSR ReadController2&nbsp; ;;get the current button data for player 2<br />&nbsp; &nbsp;<br />GameEngine:&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;Game state selection (later you might want to make each state a subroutine)<br />&nbsp; LDA gamestate<br />&nbsp; CMP #STATETITLE<br />&nbsp; BEQ EngineTitle&nbsp; &nbsp; ;;game is displaying title screen <br />&nbsp; CMP #STATEPLAYING<br />&nbsp; BEQ EnginePlaying&nbsp; &nbsp;;;game is playing&nbsp; &nbsp;<br />&nbsp; CMP #STATEGAMEOVER<br />&nbsp; BEQ EngineGameOver&nbsp; ;;game is displaying ending screen <br />GameEngineDone:<br />&nbsp; JSR UpdateSprites&nbsp; &nbsp; ;this is best done every frame<br />&nbsp; RTI<br />&nbsp;<br /><br />EngineTitle:&nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; LDA buttons1&nbsp; &nbsp;&nbsp; &nbsp;;checks if start button was pressed<br />&nbsp; &nbsp; &nbsp; &nbsp; AND #START_BUTTON<br />&nbsp; &nbsp; &nbsp; &nbsp; BEQ EngineTitleBranch<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #STATEPLAYING&nbsp; &nbsp;;sets new state if pressed<br />&nbsp; &nbsp;sta gamestate<br />EngineTitleBranch:<br />&nbsp; &nbsp;jmp GameEngineDone&nbsp; &nbsp;;goes back either way<br /><br />EngineGameOver:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;similar to engine title but will reset values after start is pressed<br />&nbsp; &nbsp; &nbsp; &nbsp; LDA buttons1<br />&nbsp; &nbsp; &nbsp; &nbsp; AND #START_BUTTON<br />&nbsp; &nbsp; &nbsp; &nbsp; BEQ EngineGameOverBranch<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #STATEPLAYING<br />&nbsp; &nbsp;sta gamestate<br />&nbsp; &nbsp;lda #$00 <br />&nbsp; &nbsp;STA scoreOnes&nbsp; &nbsp;&nbsp; &nbsp;;clears scores<br />&nbsp; &nbsp;STA scoreTens<br />&nbsp; &nbsp;STA scoreHundreds<br />&nbsp; &nbsp;STA scoreOnes2<br />&nbsp; &nbsp;STA scoreTens2<br />&nbsp; &nbsp;STA scoreHundreds2<br />&nbsp; &nbsp;LDA #$50&nbsp; &nbsp;&nbsp; &nbsp;;resets paddles<br />&nbsp; &nbsp;STA paddle1y<br />&nbsp; &nbsp;STA paddle2y<br />EngineGameOverBranch:<br />&nbsp; &nbsp;jmp GameEngineDone&nbsp; &nbsp;;have all of your game states go back to somewhere that the rti triggers<br /><br />EnginePlaying:<br />&nbsp; &nbsp;jsr MovePaddle1&nbsp; &nbsp;&nbsp; &nbsp;;the playing engine<br />&nbsp; &nbsp;jsr MovePaddle2<br />&nbsp; &nbsp;jsr MoveBall<br />&nbsp; &nbsp;jsr CheckBallCollision<br />&nbsp; &nbsp;jsr CheckPaddleCollision<br />&nbsp; &nbsp; &nbsp;jmp GameEngineDone<br /><br />MovePaddle1:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;moves the paddle up or down<br />&nbsp; &nbsp;lda buttons1<br />&nbsp; &nbsp;and #UP_BUTTON<br />&nbsp; &nbsp;beq CheckPaddle1Down&nbsp; &nbsp;;check if up button pressed otherwise check down pressed<br />&nbsp; &nbsp;lda paddle1y&nbsp; &nbsp;&nbsp; &nbsp;;subtracts paddlespeed to move it up<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #PADDLESPEED<br />&nbsp; &nbsp;cmp #TOPWALL&nbsp; &nbsp;&nbsp; &nbsp;;if it passed through the top wall, fix it to the top wall, otherwise nevermind<br />&nbsp; &nbsp;bcs Paddle1NotTop<br />&nbsp; &nbsp;lda #TOPWALL<br />Paddle1NotTop:<br />&nbsp; &nbsp;sta paddle1y<br />&nbsp; &nbsp;rts<br />CheckPaddle1Down:<br />&nbsp; &nbsp;lda buttons1&nbsp; &nbsp;&nbsp; &nbsp;;same check as above<br />&nbsp; &nbsp;and #DOWN_BUTTON<br />&nbsp; &nbsp;beq CheckPaddle1Done<br />&nbsp; &nbsp;lda paddle1y&nbsp; &nbsp;&nbsp; &nbsp;;moves the paddle down<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #PADDLESPEED<br />&nbsp; &nbsp;cmp #BOTTOMWALL-16&nbsp; &nbsp;;checks the bottom wall the same way (the -16 is due to the paddles coordinate being at the top of the paddle)<br />&nbsp; &nbsp;bcc Paddle1NotBottom<br />&nbsp; &nbsp;lda #BOTTOMWALL-16 <br />Paddle1NotBottom:<br />&nbsp; &nbsp;sta paddle1y<br />CheckPaddle1Done:&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /><br />MovePaddle2:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;this is identical to above but with paddle 2 instead<br />&nbsp; &nbsp;lda buttons2<br />&nbsp; &nbsp;and #UP_BUTTON<br />&nbsp; &nbsp;beq CheckPaddle2Down<br />&nbsp; &nbsp;lda paddle2y<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #PADDLESPEED<br />&nbsp; &nbsp;cmp #TOPWALL<br />&nbsp; &nbsp;bcs Paddle2NotTop<br />&nbsp; &nbsp;lda #TOPWALL<br />Paddle2NotTop:<br />&nbsp; &nbsp;sta paddle2y<br />&nbsp; &nbsp;rts<br />CheckPaddle2Down:<br />&nbsp; &nbsp;lda buttons2<br />&nbsp; &nbsp;and #DOWN_BUTTON<br />&nbsp; &nbsp;beq CheckPaddle2Done<br />&nbsp; &nbsp;lda paddle2y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #PADDLESPEED<br />&nbsp; &nbsp;cmp #BOTTOMWALL-16<br />&nbsp; &nbsp;bcc Paddle2NotBottom<br />&nbsp; &nbsp;lda #BOTTOMWALL-16<br />Paddle2NotBottom:<br />&nbsp; &nbsp;sta paddle2y<br />CheckPaddle2Done:&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /><br />MoveBall:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;this routine simply moves that ball<br />&nbsp; &nbsp;lda balldirection&nbsp; &nbsp;;ball direction is now 1 byte, bit 0 is the X direction, bit 1 is the y direction (way more efficent)<br />&nbsp; &nbsp;and #%00000001&nbsp; &nbsp;&nbsp; &nbsp;;teste the x direction (0 for right, 1 for left)<br />&nbsp; &nbsp;bne BallMoveRight<br />&nbsp; &nbsp;lda ballx&nbsp; &nbsp;&nbsp; &nbsp;;moves the ball accordingly<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ballspeedx<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;jmp CheckBallY&nbsp; &nbsp;&nbsp; &nbsp;;afterwards ckeck the y direction<br />BallMoveRight:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;same as above but in the other direction<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc ballspeedx<br />&nbsp; &nbsp;sta ballx<br />CheckBallY:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;same as above but for Y<br />&nbsp; &nbsp;lda balldirection&nbsp; &nbsp;<br />&nbsp; &nbsp;and #%00000010&nbsp; &nbsp;&nbsp; &nbsp;;checks the y direction (bit 0 for down, bit 1 for up)<br />&nbsp; &nbsp;bne BallMoveUp<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ballspeedy<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;jmp MoveBallDone<br />BallMoveUp:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc ballspeedy<br />&nbsp; &nbsp;sta bally<br />MoveBallDone:&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /><br />CheckBallCollision:&nbsp; &nbsp;&nbsp; &nbsp;;this checks the four sides of the screen<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;cmp #TOPWALL&nbsp; &nbsp;&nbsp; &nbsp;;checks the top wall (similar to the paddles)<br />&nbsp; &nbsp;bcs CheckBottomWall<br />&nbsp; &nbsp;lda #TOPWALL&nbsp; &nbsp;&nbsp; &nbsp;;fixes the ball's y position to the edge of the wall <br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda balldirection<br />&nbsp; &nbsp;eor #%00000010&nbsp; &nbsp;&nbsp; &nbsp;;switches the ball's y direction by toggling the bit<br />&nbsp; &nbsp;sta balldirection<br />&nbsp; &nbsp;jmp CheckLeftWall<br />CheckBottomWall:<br />&nbsp; &nbsp;cmp #BOTTOMWALL-8&nbsp; &nbsp;;same as top wall<br />&nbsp; &nbsp;bcc CheckLeftWall<br />&nbsp; &nbsp;lda #BOTTOMWALL-8<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda balldirection<br />&nbsp; &nbsp;eor #%00000010<br />&nbsp; &nbsp;sta balldirection<br />CheckLeftWall:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;checks the side wall<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;cmp #LEFTWALL<br />&nbsp; &nbsp;bcs CheckRightWall<br />&nbsp; &nbsp;jsr IncrementScore2&nbsp; &nbsp;;if it hit the wall, increase the score<br />&nbsp; &nbsp;lda #$80&nbsp; &nbsp;&nbsp; &nbsp;;then rest the ball's position<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda balldirection<br />&nbsp; &nbsp;eor #%00000001&nbsp; &nbsp;&nbsp; &nbsp;;and change it's direction<br />&nbsp; &nbsp;sta balldirection<br />&nbsp; &nbsp;rts<br />CheckRightWall:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;same as left wall<br />&nbsp; &nbsp;cmp #RIGHTWALL<br />&nbsp; &nbsp;bcc CheckBallCollisionDone<br />&nbsp; &nbsp;jsr IncrementScore1<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda balldirection<br />&nbsp; &nbsp;eor #%00000001<br />&nbsp; &nbsp;sta balldirection<br />CheckBallCollisionDone:<br />&nbsp; &nbsp;rts<br /><br />CheckPaddleCollision:&nbsp; &nbsp;&nbsp; &nbsp;;this checks if the ball hit a paddle<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;cmp #PADDLE1X+8&nbsp; &nbsp;&nbsp; &nbsp;;test if the ballx is within the paddle area<br />&nbsp; &nbsp;bcs CheckOtherPaddle<br />&nbsp; &nbsp;lda paddle1y&nbsp; &nbsp;&nbsp; &nbsp;;if so, test if bally is within the paddle's top coordinate<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #$08&nbsp; &nbsp;&nbsp; &nbsp;;the sub 8 is to ensure that the bottom of the ball collides with the top of the paddle<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcs CheckOtherPaddle&nbsp; &nbsp;;if this fails go test the other paddle<br />&nbsp; &nbsp;lda paddle1y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #PADDLELENGTH&nbsp; &nbsp;;this tests the bottom of the paddle (16 is added to ensure that the top of the ball collides with the bottom of the paddle<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcc CheckOtherPaddle<br />&nbsp; &nbsp;lda balldirection&nbsp; &nbsp;;if the tests were sucessful then flip the x direction of the ball<br />&nbsp; &nbsp;eor #%00000001<br />&nbsp; &nbsp;sta balldirection<br />&nbsp; &nbsp;lda #PADDLE1X+8&nbsp; &nbsp;&nbsp; &nbsp;;and fix ballx to the edge of the paddle (otherwise causes wierd glitches)<br />&nbsp; &nbsp;sta ballx<br />CheckOtherPaddle:&nbsp; &nbsp;&nbsp; &nbsp;;same as paddle 1<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;cmp #PADDLE2X-8<br />&nbsp; &nbsp;bcc SkipCollision<br />&nbsp; &nbsp;lda paddle2y<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #$08<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcs SkipCollision<br />&nbsp; &nbsp;lda paddle2y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #PADDLELENGTH<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcc SkipCollision<br />&nbsp; &nbsp;lda balldirection<br />&nbsp; &nbsp;eor #%00000001<br />&nbsp; &nbsp;sta balldirection<br />&nbsp; &nbsp;lda #PADDLE2X-8<br />&nbsp; &nbsp;sta ballx<br />SkipCollision:&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /><br />UpdateSprites:&nbsp; &nbsp;;all sprite update should be done in one pass<br />&nbsp; LDA bally&nbsp; ;ball<br />&nbsp; STA $0200&nbsp; <br />&nbsp; LDA #$75<br />&nbsp; STA $0201&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA $0202&nbsp; <br />&nbsp; LDA ballx<br />&nbsp; STA $0203&nbsp; <br />&nbsp; LDA paddle1y ;left paddle top tile<br />&nbsp; STA $0204<br />&nbsp; LDA #$7F<br />&nbsp; STA $0205&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA $0206 <br />&nbsp; LDA #PADDLE1X <br />&nbsp; STA $0207 <br />&nbsp; LDA paddle1y ;left paddle bottom tile<br />&nbsp; CLC<br />&nbsp; ADC #$08&nbsp; &nbsp; &nbsp;;Add 8 to put it beneath the other tile<br />&nbsp; STA $0208<br />&nbsp; LDA #$7F<br />&nbsp; STA $0209<br />&nbsp; LDA #$00<br />&nbsp; STA $020A<br />&nbsp; LDA #PADDLE1X<br />&nbsp; STA $020B<br />&nbsp; LDA paddle2y ;right paddle top tile<br />&nbsp; STA $020C<br />&nbsp; LDA #$7F<br />&nbsp; STA $020D&nbsp; <br />&nbsp; LDA #$00<br />&nbsp; STA $020E <br />&nbsp; LDA #PADDLE2X <br />&nbsp; STA $020F <br />&nbsp; LDA paddle2y ;right paddle bottom tile<br />&nbsp; CLC<br />&nbsp; ADC #$08&nbsp; &nbsp; &nbsp;;Add 8 to put it beneath the other tile<br />&nbsp; STA $0210<br />&nbsp; LDA #$7F<br />&nbsp; STA $0211<br />&nbsp; LDA #$00<br />&nbsp; STA $0212<br />&nbsp; LDA #PADDLE2X<br />&nbsp; STA $0213&nbsp; <br />&nbsp; RTS<br />&nbsp;<br />DrawScore:<br />&nbsp; LDA $2002<br />&nbsp; LDA #$20<br />&nbsp; STA $2006<br />&nbsp; LDA #$21<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start drawing the score at PPU $2021 <br />&nbsp; LDA scoreHundreds<br />&nbsp; STA $2007<br />&nbsp; LDA scoreTens<br />&nbsp; STA $2007<br />&nbsp; LDA scoreOnes<br />&nbsp; STA $2007<br />&nbsp; RTS<br />&nbsp; <br />DrawScore2:<br />&nbsp; LDA $2002<br />&nbsp; LDA #$20<br />&nbsp; STA $2006<br />&nbsp; LDA #$3C<br />&nbsp; STA $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start drawing the score at PPU $203C<br />&nbsp; LDA scoreHundreds2<br />&nbsp; STA $2007<br />&nbsp; LDA scoreTens2<br />&nbsp; STA $2007<br />&nbsp; LDA scoreOnes2<br />&nbsp; STA $2007<br />&nbsp; RTS<br />&nbsp;<br />IncrementScore1:&nbsp; &nbsp;;increases the score by one and sets the gameover flag if it hits 100<br />&nbsp; &nbsp;inc scoreOnes<br />&nbsp; &nbsp;lda scoreOnes<br />&nbsp; &nbsp;cmp #$0A<br />&nbsp; &nbsp;bne IncrementScore1Done<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta scoreOnes<br />&nbsp; &nbsp;inc scoreTens<br />&nbsp; &nbsp;lda scoreTens<br />&nbsp; &nbsp;cmp #$0A<br />&nbsp; &nbsp;bne IncrementScore1Done<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta scoreTens<br />&nbsp; &nbsp;inc scoreHundreds<br />&nbsp; &nbsp;lda #STATEGAMEOVER<br />&nbsp; &nbsp;sta gamestate&nbsp; &nbsp;<br />IncrementScore1Done:<br />&nbsp; &nbsp;rts<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />IncrementScore2:<br />&nbsp; &nbsp;inc scoreOnes2<br />&nbsp; &nbsp;lda scoreOnes2<br />&nbsp; &nbsp;cmp #$0A<br />&nbsp; &nbsp;bne IncrementScore2Done<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta scoreOnes2<br />&nbsp; &nbsp;inc scoreTens2<br />&nbsp; &nbsp;lda scoreTens2<br />&nbsp; &nbsp;cmp #$0A<br />&nbsp; &nbsp;bne IncrementScore2Done<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta scoreTens2<br />&nbsp; &nbsp;inc scoreHundreds2<br />&nbsp; &nbsp;lda #STATEGAMEOVER<br />&nbsp; &nbsp;sta gamestate&nbsp; &nbsp;<br />IncrementScore2Done:<br />&nbsp; &nbsp;rts&nbsp; <br />&nbsp;<br />ReadController1:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016<br />&nbsp; LDX #$08<br />ReadController1Loop:<br />&nbsp; LDA $4016<br />&nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; bit0 -&gt; Carry<br />&nbsp; ROL buttons1&nbsp; &nbsp; &nbsp;; bit0 &lt;- Carry<br />&nbsp; DEX<br />&nbsp; BNE ReadController1Loop<br />&nbsp; RTS<br />&nbsp; <br />ReadController2:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016<br />&nbsp; LDX #$08<br />ReadController2Loop:<br />&nbsp; LDA $4017<br />&nbsp; LSR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; bit0 -&gt; Carry<br />&nbsp; ROL buttons2&nbsp; &nbsp; &nbsp;; bit0 &lt;- Carry<br />&nbsp; DEX<br />&nbsp; BNE ReadController2Loop<br />&nbsp; RTS&nbsp; &nbsp;<br /><br />palette:<br />&nbsp; .db $22,$29,$1A,$0F,&nbsp; $22,$36,$17,$0F,&nbsp; $22,$30,$21,$0F,&nbsp; $22,$27,$17,$0F&nbsp; &nbsp;;;background palette<br />&nbsp; .db $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C,&nbsp; $22,$1C,$15,$14,&nbsp; $22,$02,$38,$3C&nbsp; &nbsp;;;sprite palette<br /><br />&nbsp; .bank 1<br />&nbsp; .org $E000<br />&nbsp; .org $FFFA&nbsp; &nbsp; &nbsp;;first of the three vectors starts here<br />&nbsp; .dw NMI&nbsp; &nbsp; &nbsp; &nbsp; ;when an NMI happens (once per frame if enabled) the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;processor will jump to the label NMI:<br />&nbsp; .dw RESET&nbsp; &nbsp; &nbsp; ;when the processor first turns on or is reset, it will jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;to the label RESET:<br />&nbsp; .dw 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;external interrupt IRQ is not used in this tutorial<br />&nbsp; .bank 2<br />&nbsp; .org $0000<br />&nbsp; .incbin &quot;mario.chr&quot;&nbsp; &nbsp;;includes 8KB graphics file from SMB<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Aug 04, 2012 8:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org $E000<br />.org $FFFA</div><br /><br />That does nothing.<br /><br />And you missed the biggest coding optimization of them all. Take all the NMI out of the NMI so replacing different NMI engines of your game is actually easy.. If you need example program I can show you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DC</b> [ Sun Aug 05, 2012 11:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks lazigamer I noticed I had a bit of unnecessary code in the checking scoring system. This will be helpful for future reference. Please do post 3gengames.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Aug 06, 2012 10:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure if bunnyboy didn't want to teach signed numbers for a reason, but you would be a lot better of using signed values for moving the ball. You could reduce the size and complexity of the code that changes the ball's position:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />MoveBall:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;this routine simply moves that ball<br />&nbsp; &nbsp;lda balldirection&nbsp; &nbsp;;ball direction is now 1 byte, bit 0 is the X direction, bit 1 is the y direction (way more efficent)<br />&nbsp; &nbsp;and #%00000001&nbsp; &nbsp; &nbsp; ;teste the x direction (0 for right, 1 for left)<br />&nbsp; &nbsp;bne BallMoveRight<br />&nbsp; &nbsp;lda ballx&nbsp; &nbsp; &nbsp; ;moves the ball accordingly<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ballspeedx<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;jmp CheckBallY&nbsp; &nbsp; &nbsp; ;afterwards ckeck the y direction<br />BallMoveRight:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;same as above but in the other direction<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc ballspeedx<br />&nbsp; &nbsp;sta ballx<br />CheckBallY:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;same as above but for Y<br />&nbsp; &nbsp;lda balldirection&nbsp; &nbsp;<br />&nbsp; &nbsp;and #%00000010&nbsp; &nbsp; &nbsp; ;checks the y direction (bit 0 for down, bit 1 for up)<br />&nbsp; &nbsp;bne BallMoveUp<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ballspeedy<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;jmp MoveBallDone<br />BallMoveUp:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc ballspeedy<br />&nbsp; &nbsp;sta bally<br />MoveBallDone:&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /></div><br />Could be:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MoveBall:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;this routine simply moves that ball<br />&nbsp; &nbsp;lda ballx&nbsp; &nbsp; &nbsp; ;moves the ball accordingly<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ballspeedx<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ballspeedy<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;rts<br /></div><br /><br />But you would have to change the code that checks collisions:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />CheckBallCollision:&nbsp; &nbsp; &nbsp; ;this checks the four sides of the screen<br />&nbsp; &nbsp;lda bally<br />&nbsp; &nbsp;cmp #TOPWALL&nbsp; &nbsp; &nbsp; ;checks the top wall (similar to the paddles)<br />&nbsp; &nbsp;bcs CheckBottomWall<br />&nbsp; &nbsp;lda #TOPWALL&nbsp; &nbsp; &nbsp; ;fixes the ball's y position to the edge of the wall <br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda ballspeedy<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;negate ballspeed<br />&nbsp; &nbsp;eor #$FF&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;Invert all the bits<br />&nbsp; &nbsp;adc #1&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ballspeedy<br />&nbsp; &nbsp;jmp CheckLeftWall<br />CheckBottomWall:<br />&nbsp; &nbsp;cmp #BOTTOMWALL-8&nbsp; &nbsp;;same as top wall<br />&nbsp; &nbsp;bcc CheckLeftWall<br />&nbsp; &nbsp;lda #BOTTOMWALL-8<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda ballspeedy<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;negate ballspeed<br />&nbsp; &nbsp;eor #$FF&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;Invert all the bits<br />&nbsp; &nbsp;adc #1&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ballspeedy<br />CheckLeftWall:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;checks the side wall<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;cmp #LEFTWALL<br />&nbsp; &nbsp;bcs CheckRightWall<br />&nbsp; &nbsp;jsr IncrementScore2&nbsp; &nbsp;;if it hit the wall, increase the score<br />&nbsp; &nbsp;lda #$80&nbsp; &nbsp; &nbsp; ;then rest the ball's position<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda ballspeedx<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;negate ballspeed<br />&nbsp; &nbsp;eor #$FF&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;Invert all the bits<br />&nbsp; &nbsp;adc #1&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ballspeedx<br />&nbsp; &nbsp;rts<br />CheckRightWall:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;same as left wall<br />&nbsp; &nbsp;cmp #RIGHTWALL<br />&nbsp; &nbsp;bcc CheckBallCollisionDone<br />&nbsp; &nbsp;jsr IncrementScore1<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta ballx<br />&nbsp; &nbsp;sta bally<br />&nbsp; &nbsp;lda ballspeedx<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;negate ballspeed<br />&nbsp; &nbsp;eor #$FF&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;Invert all the bits<br />&nbsp; &nbsp;adc #1&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ballspeedx<br />CheckBallCollisionDone:<br />&nbsp; &nbsp;rts<br /><br />CheckPaddleCollision:&nbsp; &nbsp; &nbsp; ;this checks if the ball hit a paddle<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;cmp #PADDLE1X+8&nbsp; &nbsp; &nbsp; ;test if the ballx is within the paddle area<br />&nbsp; &nbsp;bcs CheckOtherPaddle<br />&nbsp; &nbsp;lda paddle1y&nbsp; &nbsp; &nbsp; ;if so, test if bally is within the paddle's top coordinate<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #$08&nbsp; &nbsp; &nbsp; ;the sub 8 is to ensure that the bottom of the ball collides with the top of the paddle<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcs CheckOtherPaddle&nbsp; &nbsp;;if this fails go test the other paddle<br />&nbsp; &nbsp;lda paddle1y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #PADDLELENGTH&nbsp; &nbsp;;this tests the bottom of the paddle (16 is added to ensure that the top of the ball collides with the bottom of the paddle<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcc CheckOtherPaddle<br />&nbsp; &nbsp;lda ballspeedx<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;negate ballspeed<br />&nbsp; &nbsp;eor #$FF&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;Invert all the bits<br />&nbsp; &nbsp;adc #1&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ballspeedx<br />&nbsp; &nbsp;lda #PADDLE1X+8&nbsp; &nbsp; &nbsp; ;and fix ballx to the edge of the paddle (otherwise causes wierd glitches)<br />&nbsp; &nbsp;sta ballx<br />CheckOtherPaddle:&nbsp; &nbsp; &nbsp; ;same as paddle 1<br />&nbsp; &nbsp;lda ballx<br />&nbsp; &nbsp;cmp #PADDLE2X-8<br />&nbsp; &nbsp;bcc SkipCollision<br />&nbsp; &nbsp;lda paddle2y<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #$08<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcs SkipCollision<br />&nbsp; &nbsp;lda paddle2y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #PADDLELENGTH<br />&nbsp; &nbsp;cmp bally<br />&nbsp; &nbsp;bcc SkipCollision<br />&nbsp; &nbsp;lda ballspeedx<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;negate ballspeed<br />&nbsp; &nbsp;eor #$FF&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ;Invert all the bits<br />&nbsp; &nbsp;adc #1&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ballspeedx<br />&nbsp; &nbsp;lda #PADDLE2X-8<br />&nbsp; &nbsp;sta ballx<br />SkipCollision:&nbsp; &nbsp;<br />&nbsp; &nbsp;rts<br /></div><br /><br />You no longer need balldirection either I don't think. Google &quot;two's complement&quot; if you don't understand the changes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DC</b> [ Fri Aug 10, 2012 8:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why do you have to add after you invert the bits?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Aug 10, 2012 9:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />#%00000001=1<br /><br />When you reverse the bits to make it -1...<br /><br />#%00000001=FE=-2.<br /><br />So you add 1 to correct it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri Aug 10, 2012 9:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When learning binary most people learn the weight of the bits in decimal:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">01010101<br /><br />128, 64,&nbsp; 32, 16, 8, 4, 2, 1<br />&nbsp; 0&nbsp; 1&nbsp; &nbsp; 0&nbsp; &nbsp; 1&nbsp; 0&nbsp; 1&nbsp; 0&nbsp; 1 = 64 + 16 + 4 + 1 = 85<br /></div><br /><br />With a signed byte you can think of the 7th bit (on the left end) as a value of -128<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">11010101<br /><br />128, 64, 32, 16, 8, 4, 2, 1<br />&nbsp; 1&nbsp; &nbsp;1&nbsp; &nbsp;0&nbsp; 1&nbsp; 0&nbsp; &nbsp;1&nbsp; 0&nbsp; 1 = -128 + 64 + 16 + 4 + 1 = -43<br /></div><br /><br /><br />So -1 is 11111111 (-128 + 127 = -1)<br /><br />edit: That was maybe a bit confusing, fixed

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DC</b> [ Fri Aug 10, 2012 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok thanks. My brain wanted to subtract :/. Hey 3gengames can you post an example of nmi switching?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 10, 2012 12:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />By &quot;NMI switching&quot; do you refer to having multiple NMI handlers?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Aug 10, 2012 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Pong tutorial failure</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NMI:<br />  INC Frame<br />RTI:<br />  RTI<br /><br />WaitForNMI:<br />  LDA Frame<br />.Loop:<br />  CMP Frame<br />  BEQ .Loop<br />  RTS<br /><br />....somewhere in your game<br />Engine:<br />JSR WaitForNMI<br />...other stuff...<br />JMP Engine.<br /><br /><br />And just make as many &quot;engines&quot; as needed but remember the PPU code and stuff has to go in each one and might not all be the same.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>