<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=6&amp;t=15586" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-03-19T14:24:33-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=6&amp;t=15586</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2017-03-19T14:24:33-07:00</updated>
<published>2017-03-19T14:24:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=191456#p191456</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=191456#p191456"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=191456#p191456"><![CDATA[
Looking more in detail at code once more, I'm pretty sure it does not play samples at all - instead it simply synthesize sounds with matematical formulas, made of additions substractions, logical operations and shifts.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Mar 19, 2017 2:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2017-02-28T14:18:02-07:00</updated>
<published>2017-02-28T14:18:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190174#p190174</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190174#p190174"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190174#p190174"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />Oh, so the samples are compressed in some way? That's interesting.<br /></div><br />Well, I don't know I just saw that the code arround the $4011 writes weren't a simple load/store/wait loop like you'd expect.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />(Also seems like the overall samples can be played at different pitches too.)<br /></div><br />I guess this can be easily done just by changing the wait time between writes. If you don't need precise pitch nor constant sample rate this is simple to achieve.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Feb 28, 2017 2:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-02-28T11:31:40-07:00</updated>
<published>2017-02-28T11:31:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190160#p190160</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190160#p190160"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190160#p190160"><![CDATA[
Oh, so the samples are compressed in some way? That's interesting.<br /><br />Just recording the intro's PCM part and looking at the waveforms in an editor, I see a lot of &quot;triangular&quot; straight lines, and in the code I saw a variable timer on the sample output... maybe the format involves straight-line ramp (inc/dec) pieces with variable speed/length?<br /><br />(Also seems like the overall samples can be played at different pitches too.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Feb 28, 2017 11:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2017-02-28T09:24:59-07:00</updated>
<published>2017-02-28T09:24:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190150#p190150</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190150#p190150"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190150#p190150"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I dunno, there's isn't a great way to get more than one PCM track to work.<br /></div><br />Both <em>Battletoads</em> and <em>Battletoads &amp; Double Dragon</em> have (at least) 2 different musical tracks with PCM drums. Battletoads have the title theme and the victory theme, Battletoads &amp; Double Dragon has the title theme and the character select screen theme.<br /><br />This still doesn't answer how Battletoads handles the PCM drums internally. So far there's a debate about how to implement this in NSF but that's somewhat different. The game seems to somehow freeze itself while playing but resume when not playing, you can see this during the intro when there is dialogue between T-Bird and the Dark Queen, the text appears only when PCM isn't playing. Also in many part (actually most) of the intro PCM playing is disabled.<br /><br />Trying to log it with FCEU just leads to a huge mess, I cannot even figure out where the data that is written to $4011 comes from. Apparently it's not just plain replaying what's in the ROM and there's some kind of calculations (possibly decompression or some kind of sound synthesis) going on.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Feb 28, 2017 9:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Rahsennor]]></name></author>
<updated>2017-02-27T18:03:48-07:00</updated>
<published>2017-02-27T18:03:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190124#p190124</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190124#p190124"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190124#p190124"><![CDATA[
The reentrancy required for a non-returning INIT is a pain in the ### and I will be dropping support for it next time I touch that part of my NSF player, NSF2 be damned. It's a giant unreadable and error-prone kludge.<br /><br />Is there any way to make a Battletoads rip whose PLAY return immediately when there's no PCM playing? It's not ideal, but given the choice between laggy controls and timing-variation-distorted sound, I'd pick laggy controls. And it's what I'd do when writing a PCM sound engine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7168">Rahsennor</a> — Mon Feb 27, 2017 6:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-02-27T15:46:20-07:00</updated>
<published>2017-02-27T15:46:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190114#p190114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190114#p190114"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190114#p190114"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Going forward, would it be a good idea to deprecate non-returning init in favor of non-returning play, and then fix the <em>Battletoads</em> rip to return whenever PCM isn't played for greater hardware player compatibility? Or has that already been done?<br /></div><br />Non returning INIT can't be &quot;deprecated&quot;, it was a single-use hack that has never been adopted as a standard. Non returning PLAY isn't exactly a substitute for non returning INIT, either. It's just something that's well established and supported in homebrew NSF circles. Non returning INIT is actually a good proposal, but doesn't work with most players.<br /><br /><br />Since the title track of Battletoads has PCM, if the NSF starts with that track, it'll lock the PowerPak to only playing that track. So, the Deflemask technique could be used as long as the PCM tracks aren't in between the PCM tracks and other tracks, I guess, but you'll only be able to access one of them. I dunno, there's isn't a great way to get more than one PCM track to work. (Polling the controller is effective on PowerPak, and all players I've tried though, but it's dependent on the implementation returning 00000000 with no controller. Then again, the Deflemask technique is already a bit of a hack anyway, since it disables IRQ, etc. so we're already outside the spec here.)<br /><br />Non-returning INIT is actually a good way to do things, but the arbitrary timeout / watchdog approach feels like a kludgy way to implement it, IMO. The PowerPak NSF player could implement a watchdog IRQ on the INIT routine, perhaps, but I think there are a bunch of problems.<br /><br />Non-returning INIT was part of the NSF2 proposal. What I think we should really have is an explicit end to the INIT, to tell it when to start doing PLAY. (There was discussion of this re: NSF2.) I'd kind of have a mind to do it as having three function pointers, INIT, PLAY, and IDLE. That way INIT runs, the NSF player sets up a timer IRQ then enters the IDLE loop, then its IRQ (or NMI) starts calling PLAY and checking input whenever it returns. That's the ideal, IMO, but it requires establishment of a new standard, reference implementation, demonstration NSFs, a new PowerPak player implementation, etc. etc. (I have been planning to implement NSF2 in NSFPlay eventually, but emulation accuracy was a higher priority so far, and of course my game project has completely pre-empted it for the time being.)<br /><br /><br />Anyhow, that's all speculation about the future state of NSF. If you want to make a Battletoads RIP that will run on PowerPak and some popular players, I think the most practical thing to do with current stuff would just be to have multiple NSFs. One for all the non-PCM music. One for each PCM track, using the Deflemask technique. (Or keep it in one NSF and poll the controller.)<br /><br />...but if you want something that is up to spec and runs on everything that properly implements the spec, we need a new spec and new players. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Feb 27, 2017 3:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-02-27T14:41:37-07:00</updated>
<published>2017-02-27T14:41:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190112#p190112</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190112#p190112"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190112#p190112"><![CDATA[
Going forward, would it be a good idea to deprecate non-returning init in favor of non-returning play, and then fix the <em>Battletoads</em> rip to return whenever PCM isn't played for greater hardware player compatibility? Or has that already been done?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Feb 27, 2017 2:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-02-27T12:54:50-07:00</updated>
<published>2017-02-27T12:54:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190110#p190110</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190110#p190110"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190110#p190110"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I thought a non-returning play routine worked only for an NSF with one song, as hardware players would have no chance to read the controller to navigate to other songs.<br /></div><br />Hmm, yes, that's a common problem with those. One way to get around this is to poll the controller and return when a button is pressed, but that's very implementation-dependent (and also outside the spec). So... maybe it's not the best way to rip Battletoads either. :S<br /><br />Anyhow, basically the &quot;return early from INIT&quot; idea solves a problem for exactly one special NSF (quietust's Battletoads rip), and I don't think causes problems for any existing INIT functions which may happen to run too long, but I'm not entirely sure about that. A timeout on PLAY, however, will break hundreds of homebrew NSFs. It kinda depends what you're intending to support, and/or what future NSF rips you're planning to make to rely on it.<br /><br />There's also the &quot;NSF2&quot; idea, which could add IRQ or other functionality, but nobody's really implemented that yet either.<br /><br />Actually, maybe I should add an option to NSFPlay to support quietust's Battletoads rip technique...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Feb 27, 2017 12:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-02-27T12:48:58-07:00</updated>
<published>2017-02-27T12:48:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190109#p190109</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190109#p190109"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190109#p190109"><![CDATA[
I thought a non-returning play routine worked only for an NSF with one song, as hardware players would have no chance to read the controller to navigate to other songs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Feb 27, 2017 12:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-02-27T17:09:50-07:00</updated>
<published>2017-02-27T12:43:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190108#p190108</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190108#p190108"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190108#p190108"><![CDATA[
No, a non-returning PLAY is allowed by the NSF spec and is used for <em>lots</em> of homebrew NSFs (e.g. SuperNSF). Can't remember if it's needed for any commercial game rips, though. There might be &quot;lag frame&quot; PLAY calls that run long and shouldn't be interrupted.<br /><br />The Deflemask trick (which is widely supported) also relies on a non-returning PLAY.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Feb 27, 2017 12:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2017-02-27T12:30:31-07:00</updated>
<published>2017-02-27T12:30:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190105#p190105</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190105#p190105"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190105#p190105"><![CDATA[
Wouldn't the best possible solution be for the NSF to return from play after 29780 cycles have passed?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Mon Feb 27, 2017 12:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-02-27T10:48:18-07:00</updated>
<published>2017-02-27T10:48:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190097#p190097</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190097#p190097"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190097#p190097"><![CDATA[
<div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><br />As far as I know... it requires the $4017 watchdog timer to work properly. Only Nintendulator has such feature. I wonder what's the big idea behind the $4017 register and music playback/control/whatever...<br /></div><br />You're talking about the Battletoads NSF rip that Quietust made <em>for</em> Nintendulator.<br /><a href="http://www.qmtpro.com/~nes/nsf/battletoads_pcm.zip" class="postlink">http://www.qmtpro.com/~nes/nsf/battletoads_pcm.zip</a> (<a href="http://forums.nesdev.com/viewtopic.php?p=9220#p9220" class="postlink">info</a>)<br /><br />I believe what this did was have an INIT that never returns, so it just ends in a spinning sample loop. The player detects an INIT that runs for an inordinately long number of cycles, and if it does, it just starts running PLAY as an interruption of the INIT routine. That way whenever it returns from PLAY, it goes back to that sample loop.<br /><br />If I recall, Blargg's GME also implemented this hack.<br /><br />I didn't like this &quot;solution&quot; for a few reasons, so I declined to implement it in my NSF player. It's only relevant to this one NSF, which was a one-off experiment. Hardware players like the PowerPak or TNS cart don't support it. (A hardware implementation of this idea would indeed require some kind of interrupt to break out of the non-returning INIT, but you don't need the VS watchdog, you could just use NMI and count frames until the arbitrary &quot;timeout&quot; is reached.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Feb 27, 2017 10:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2017-02-27T04:46:43-07:00</updated>
<published>2017-02-27T04:46:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190084#p190084</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190084#p190084"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190084#p190084"><![CDATA[
As far as I know... it requires the $4017 watchdog timer to work properly. Only Nintendulator has such feature. I wonder what's the big idea behind the $4017 register and music playback/control/whatever...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Mon Feb 27, 2017 4:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2017-02-26T15:08:08-07:00</updated>
<published>2017-02-26T15:08:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190042#p190042</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190042#p190042"/>
<title type="html"><![CDATA[Re: How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190042#p190042"><![CDATA[
I'm pretty sure its a separate &quot;channel&quot; of data, not keyed off of noise. It seemed from the intro/ending music that it could be turned on and off too, since it apparently intentionally cuts out the PCM drums during parts of the intro where there's more animation going on. (I guess they found the &quot;buzz&quot; undesirable otherwise.)<br /><br />I think it's a poll-based sample loop that just runs from the end of the regular update until the next NMI? (I doesn't appear to use IRQ.) Previous attempts to put it into an NSF used non-NSF-compliant stuff like using IRQs, and tend to work in only one or two very specific players, but since the &quot;<a href="https://wiki.nesdev.com/w/index.php/NSF#Pseudo-IRQ_Technique" class="postlink">Deflemask technique</a>&quot; proved to work in a lot of popular NSF player implementations (including powerpak), I think it would be a really good way to try to do the Battletoads soundtrack in an NSF.<br /><br />(I'd been meaning to re-rip Battletoads myself using the Deflemask technique for a long while, but it hasn't been high on my to-do list.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Feb 26, 2017 3:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2017-02-26T13:44:50-07:00</updated>
<published>2017-02-26T13:44:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190035#p190035</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190035#p190035"/>
<title type="html"><![CDATA[How does Battletoads generate it's PCM drums internally?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15586&amp;p=190035#p190035"><![CDATA[
I really wonder, is it considered like a 5th musical channel, or does it generate data based on what is present on the noise channel ? Is it possible to add drums to the regular level songs in order to make them sound better (in the NSF only obviously - not in the game) ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Feb 26, 2017 1:44 pm</p><hr />
]]></content>
</entry>
</feed>