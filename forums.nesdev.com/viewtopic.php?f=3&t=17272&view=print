<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Having a dumb moment with nestest.nes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Having a dumb moment with nestest.nes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=17272">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=17272</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>iOSBrett</b> [ Wed Apr 18, 2018 1:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,<br /><br />I am writing a NES emulator in Swift just for fun (yes I have read the sticky) and have implemented the CPU part and Mapper 0, no PPU or APU yet.<br />I want to test the instructions so I have loaded nestest.nes and set PC to 0xC000,  it runs about 20 or so instructions before finding an opcode it doesn't know.  This bit I can probably fix, but I thought it is probably better to first change all my logs to match those in the existing log file I found (this was hard to track down).  I have started doing that and am having a dumb moment, I don't understand a part of the log file.  What is the &quot;= 74&quot;, &quot;= 52&quot;, &quot;= 73&quot; mean after the STX instructions? Isn't this STX mean store what is found at memory location $00 in the X register?  In my memory model there is nothing stored at location 0, and the subsequent log of the X register shows it is 0.  Can anyone help me understand what is happening here?<br /><br />Cheers,<br />Brett<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C000&nbsp; 4C F5 C5&nbsp; JMP $C5F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:00 X:00 Y:00 P:24 SP:FD CPUC:0<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C000<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C001<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C002<br />C5F5&nbsp; A2 00&nbsp; &nbsp; &nbsp;LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:00 Y:00 P:24 SP:FD CPUC:3<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5F5<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5F6<br />C5F7&nbsp; 86 00&nbsp; &nbsp; &nbsp;STX $00 = 74&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:00 Y:00 P:26 SP:FD CPUC:5<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5F7<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5F8<br />&nbsp; &nbsp; &nbsp; WRITE&nbsp; &nbsp; &nbsp;$0000<br />C5F9&nbsp; 86 10&nbsp; &nbsp; &nbsp;STX $10 = 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:00 Y:00 P:26 SP:FD CPUC:8<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5F9<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5FA<br />&nbsp; &nbsp; &nbsp; WRITE&nbsp; &nbsp; &nbsp;$0010<br />C5FB&nbsp; 86 11&nbsp; &nbsp; &nbsp;STX $11 = 73&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:00 Y:00 P:26 SP:FD CPUC:11<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5FB<br />&nbsp; &nbsp; &nbsp; READ&nbsp; &nbsp; &nbsp; $C5FC<br />&nbsp; &nbsp; &nbsp; WRITE&nbsp; &nbsp; &nbsp;$0011<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Apr 18, 2018 1:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />References: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/Emulator_tests">https://wiki.nesdev.com/w/index.php/Emulator_tests</a><!-- m --> and <!-- m --><a class="postlink" href="http://www.qmtpro.com/~nes/misc/nestest.txt">http://www.qmtpro.com/~nes/misc/nestest.txt</a><!-- m --><br /><br />The log you're posting should be compared to logs from Nintendulator.  <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">STX $00 = 74</tt> is telling you that, at the time the instruction was encountered (but before it had run), the effective address (zero page address $00) contained value $74 (in hexadecimal; the $ is missing but implied).<br /><br />Here are some more complicated examples which should then become self-explanatory assuming you understand the addressing modes in question, but I'll explain the first two:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CFDB&nbsp; A1 80&nbsp; &nbsp; &nbsp;LDA ($80,X) @ 80 = 0200 = 5A&nbsp; &nbsp; A:5D X:00 Y:69 P:27 SP:FB CYC:118<br /><br />DB65&nbsp; 91 33&nbsp; &nbsp; &nbsp;STA ($33),Y = 0400 @ 0400 = 7F&nbsp; A:87 X:06 Y:00 P:E5 SP:FB CYC:239<br /><br />DB7B&nbsp; 6C 00 02&nbsp; JMP ($0200) = DB7E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:DB X:07 Y:00 P:E5 SP:FB CYC:326<br /><br />E2F2&nbsp; DD 00 06&nbsp; CMP $0600,X @ 0678 = 81&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:80 X:78 Y:63 P:A5 SP:FB CYC:270<br /></div><br />The entry at $CFDB is saying, in English, since indexed indirect addressing is used:<br /><br />* <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">@ 80</tt> -- indicates the calculated effective address of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&#40;$80,X&#41;</tt> was $80 (because X=$00, thus $80+X = $80)<br />* <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">= 0200</tt> -- indicates that the two bytes at $80 and $81 (for the indirect read) were $00 and $02 respectively, hence address $0200<br />* <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">= 5A</tt> -- indicates that address $0200 contained $5A when the instruction was encountered<br /><br />The entry at $DB65 is saying, in English, since indirect indexed addressing is used:<br /><br />* <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">= 0400</tt> -- indicates that the two bytes at $33 and $34 (for the indirect read) were $00 and $04 respectively, hence the address $0400<br />* <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">@ 0400</tt> -- indicates  the calculated effective address is $0400 (because Y=$00, thus $0400+Y = $0400).<br />* <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">= 7F</tt> -- indicates that address $0400 contained $7F when the instruction was encountered<br /><br />You get the idea.  This general &quot;real-time debugger&quot; output is helpful for people doing reverse-engineering, since it gives them an idea of what the calculated effective address was (for relevant addressing modes), as well as what that memory location contained.  Now you see why this is helpful in ensuring your 6502 CPU emulation is correct.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>iOSBrett</b> [ Wed Apr 18, 2018 2:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the very quick reply. <br /><br /> I have definitely read the nestext.txt file quite a few times, which is how I finally worked out how to run it without a PPU.  And because I don't have the PPU I have to run it automated, and as a first pass I wanted to compare my log with the log I've seen people talk about, but I couldn't find it.  I got the log I posted above from a post on this forum, it is called nestest-bus-cycles.log, I will hunt down one from Nintendulator and have a look at that one.<br /><br />I am pretty sure I understand the Addressing Modes, and I do follow what you are saying, but I have only just recently learnt all this so I expect my understanding to be incorrect in places, hence the testing. <br /><br />Looks like you have the same conclusion as me, there is a value $74 at location $00.  Having loaded the rom myself and written the Memory mapper I know even without checking that I have nothing but a lot of 0's in the zero page. I have loaded the PRGROM at $C000 and mirrored it at $8000.   But if you look at the log, the $74 is never written to the X register anyway.<br /><br />So I have another question for you, what should be in the zero page after loading nestest.nes?  I assume it is only what is written by the rom during execution, but here we are only 3 instructions in.<br /><br />I really appreciate you taking the time to write the really comprehensive reply.<br /><br />[EDIT]:  I see the log file in the first link, I swear I have looked at that page a million times and never saw the link, that one looks much better.  It has $00 instead of $74, which is exactly what I expected.  Thanks for pointing out the obvious link to me (not being sarcastic), told you I was having a dumb moment.<br /><br />Cheers,<br />Brett

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Apr 18, 2018 6:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">iOSBrett wrote:</div><div class="quotecontent">Looks like you have the same conclusion as me, there is a value $74 at location $00.  Having loaded the rom myself and written the Memory mapper I know even without checking that I have nothing but a lot of 0's in the zero page. I have loaded the PRGROM at $C000 and mirrored it at $8000.   But if you look at the log, the $74 is never written to the X register anyway.</div><br />The log was taken with initial memory contents randomized. Anyway, it's not very useful to try to make your log match the disassembly in the log, simply make sure that the register values (A, X, Y, SP, PC) match. When you want to take it a step further you can also verify that the READ/WRITE cycles match.<br /><br />There's a more terse log (without disassembly for ease of comparisons) at <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=155910#p155910">viewtopic.php?p=155910#p155910</a><!-- l -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 18, 2018 7:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">iOSBrett wrote:</div><div class="quotecontent">as a first pass I wanted to compare my log with the log I've seen people talk about</div><br />I agree with thefox: Just compare only program counter and AXYPS values, and you'll at least know where the program went off the rails. Unless nestest is reading uninitialized memory, the program counter and AXYPS values should not depend on initial contents of memory.  My first guess is that you're trying to produce the identical disassembly in your emulator in order to be able to use the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">diff</tt> tool included with macOS.* It'd probably be easier to just write your own comparison tool that checks only PC or only PC+AXYPS.<br /><br /><br /><span style="font-size: 85%; line-height: normal">* Assumption based on username and language choice. GNU/Linux and *BSD also include <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">diff</tt>. Windows includes the similar <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fc</tt>, and Windows users can also get GNU <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">diff</tt> through MSYS, Cygwin, or Windows 10 WSL.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Apr 18, 2018 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also make sure that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CPUC</tt> (CPU cycles) also matches; there are many &quot;edge cases&quot; to cycle additions on the 65xxx series, such as during page wrapping operations.  You can focus on this *after* you get opcodes/addressing modes emulated correctly.  This is just one aspect of &quot;timing-accurate&quot; emulation.<br /><br />As for ZP/RAM contents and so on on power-on (this is different than reset!), others have covered it already.  It's also a commonly-discussed-hot-topic around here because there are <a href="https://wiki.nesdev.com/w/index.php/Game_bugs#Reliance_on_RAM_values" class="postlink">some games</a> which sort of &quot;depend&quot; on certain power-on values.  I can link you to those threads if/when asked.  In general, for starters, try initialising ZP/RAM to all zeros, see how the tests fair, then try initializing ZP/RAM to $FF and see how the tests fair.  You get the idea.<br /><br />As for CPU state itself, this is covered: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/CPU_power_up_state">https://wiki.nesdev.com/w/index.php/CPU_power_up_state</a><!-- m --><br />PPU has similar for when you get to it: <!-- m --><a class="postlink" href="https://wiki.nesdev.com/w/index.php/PPU_power_up_state">https://wiki.nesdev.com/w/index.php/PPU_power_up_state</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>iOSBrett</b> [ Fri Apr 20, 2018 5:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thefox:  Ahh that explains the weird values in 0 page.<br /><br />And I have found it really helpful to compare the dissembled instructions.  The 6502 page I used when implementing my emulated CPU had a couple of opcode errors in it, and I added more with my typos.  I have had to change at least 5 opcode values that I would not have found with seeing the assembly code.<br /><br />Debugging the CPU is strangely more fun than the code writing, can't say this is true in the day job though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>iOSBrett</b> [ Fri Apr 20, 2018 5:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tepples:  Assumptions mostly correct.<br /><br />I had planned on using sublime to do the diff, but it turns out it is not very good at that, so diff it is.<br />As posted above, using the diff has turned out to be really useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>iOSBrett</b> [ Fri Apr 20, 2018 5:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />koitsu:  Yeah I am leaving the cycles to last, seems that none of my cycles match the log that you sent me.  Even the first two instructions I have wrong in terms of number of cycles.<br /><br />NesTest:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C000&nbsp; 4C F5 C5&nbsp; JMP $C5F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:00 X:00 Y:00 P:24 SP:FD CYC:&nbsp; 0<br />C5F5&nbsp; A2 00&nbsp; &nbsp; &nbsp;LDX #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:00 Y:00 P:24 SP:FD CYC:&nbsp; 9<br /></div><br /><br />Mine:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C000&nbsp; 4C F5 C5&nbsp; JMP $C5F5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A:00 X:00 Y:00 P:24 SP:FD CYC:0<br />C5F5&nbsp; A2 00&nbsp; &nbsp; &nbsp;LDX #$C5F6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A:00 X:00 Y:00 P:24 SP:FD CYC:3<br /></div><br /><br />Thanks for those two links, I have implemented reset, but I didn't know that power on was different.  I'll get everything else covered before taking that.<br /><br />Thanks again to everyone for all the help, this forum is full of friendly and helpful people.<br /><br />[EDIT]:  Just noticed I am applying the wrong addressing mode in the LDX command, however the incorrect cycles are for the JMP command.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Apr 20, 2018 7:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />CYC in a Nintendulator log is PPU dots, not CPU cycles. There are three dots in a cycle on NTSC systems and PAL famiclones, and it wraps around from 341 to 0. If you've ever emulated Z80 or LR35902 (Game Boy CPU) before, think of dots as like tstates and cycles as like mcycles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Apr 20, 2018 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">CYC in a Nintendulator log is PPU dots, not CPU cycles. There are three dots in a cycle on NTSC systems and PAL famiclones, and it wraps around from 341 to 0. If you've ever emulated Z80 or LR35902 (Game Boy CPU) before, think of dots as like tstates and cycles as like mcycles.</div><br />Well that's a wonderfully misnamed field then.  Good thing it's documented!  :|

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>iOSBrett</b> [ Sat Apr 21, 2018 7:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having a dumb moment with nestest.nes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh!  In that case my cycles may be correct.<br /><br /><img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>