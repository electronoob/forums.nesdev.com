<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What exactly are T-states doing?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What exactly are T-states doing?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14014">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14014</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Tue Mar 29, 2016 11:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I've been writing a GB emulator like so many others, mostly to learn about the innards. I'm trying to make it as accurate as possible. One thing I've been confused about is the &quot;4 clock cycles/1 machine cycle&quot; thing.<br /><br />All the sources I find list the instructions as taking a multiple of 4 clock cycles. I've noticed that the multiple is the number of memory accesses (plus one if the instruction is a branch). So &quot;ld a,b&quot; takes 4 ticks, &quot;ld a,1&quot; takes 8 (4 to fetch the instruction, 4 to fetch the operand), etc. My understanding is that each instruction has 4 &quot;T-states&quot;, which explains the 4-to-1 ratio. What I don't understand is what those T-states are doing.<br /><br />If I assume it's just &quot;fetch, decode, execute&quot;, then what's the 4th? If they're the &quot;sub-stages&quot; of the instruction (doing math, shuffling registers around, asserting the address bus) then why is it always a multiple of 4? Is there some limitation that memory accesses can only happen on every 4th cycle, or take a minimum 3 cycles? Are the docs that list every instruction as a multiple of 4 clock cycles just wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Tue Mar 29, 2016 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No idea exactly how it works, although I do know that every time the Z80 fetches an opcode it spends an extra cycle for DRAM refresh (no idea if the GBZ80 keeps this behavior though).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 29, 2016 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My guess is that it's analogous to <a href="http://courses.cs.tamu.edu/cpsc462/walker/Slides/68K_Timing_Diagrams.pdf" class="postlink">MC68000 memory cycle timing</a>. That CPU takes eight half-cycles to access memory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Tue Mar 29, 2016 7:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd be surprised if it used DRAM, since the need for constant refreshing would hurt battery life. Especially, Nintendo advises to use HALT to save battery power, but the Z80 manual says HALT just runs endless NOPs until interrupted, that would imply it's not really saving any power. So I would expect some changes there.<br /><br />I made a <a href="https://docs.google.com/spreadsheets/d/1tBJwCVpl4I9IUNS_AIh_CMgcxsPt0PYbfvRhkgG6vGw/edit?usp=sharing" class="postlink">spreadsheet</a> with my information and assumptions. I don't know how close these are to the actual stages of each instruction, but they make sense to me and fit the cycle counts for each. The only exception is PUSH that requires an extra cycle I can't account for. If I assume that, like the original Z80, cycles after the first are only 3 stages, and that decrementing SP takes two steps, then the cycle counts for PUSH are correct, but I didn't look too much into how that affects the other instructions. Anyway that would definitely disprove the &quot;every instruction takes a multiple of 4 clocks&quot; idea.<br /><br />I'm also not entirely sure what limitations there are on memory access timing. Again my assumptions fit the pattern without much fudging (a few instructions have a &quot;wait&quot; step or two) but I really can't verify.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Tue Mar 29, 2016 8:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Repeat after me. Gameboy is not Z80. Gameboy is not Z80. T state in this context would be Z80 terminology. Gameboy CPU is a Sharp CPU core which is kinda-sorta binary code similar with i8080 and Z80, but probably doesn't share much in common with those two interally. In other words, you cannot assume that it will behave like a Z80 in any given situation. The 4 cycle alignment is correct. The mental model I have for this is that the 4 steps are read, decode, execute, write which are on a &quot;grid&quot;. Ie, in every slot, the CPU has an opportunity to do one read and one write, but the time is consumed regardless of whether the read/write &quot;slots&quot; are used or not. <br /><br />Because all instructions take multiples of 4 cycles, GB instructions are often counted in &quot;instruction cycles&quot;, divided by 4. So a nop would take 1 such cycle for example.<br /><br />Regarding your spreadsheet, there is a similar one available here:<br /><br /><!-- m --><a class="postlink" href="http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html">http://www.pastraiser.com/cpu/gameboy/g ... codes.html</a><!-- m --><br /><br />Also, what you call rlc a, rl a etc are normally written as a single word, rlca, rla etc. The reason is that there are CB prefixed opcodes for rlc r8, rl r8 etc which work on arbitrary registers, including a, but take 8 cycles instead because they are two bytes long, and also affect flags differently. The &quot;native&quot; rlca, rla etc opcodes set z to 0, whereas the extended ones affect z depending on whether the operand is zero.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Wed Mar 30, 2016 9:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, I wasn't sure how similar the two are internally.<br /><br />Your model seems to make sense, though I haven't examined in detail. If you don't mind my asking, where is this information from?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nitro2k01</b> [ Wed Mar 30, 2016 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Various documents, my own experience of both programming and looking at oscilloscope traces of the address bus. Perhaps not all that rigorous, but probably correct. You may want to check out Blargg's test ROMs, for example instr_timing and cpu_instrs.<br /><br /><!-- m --><a class="postlink" href="http://gbdev.gg8.se/files/roms/blargg-gb-tests/">http://gbdev.gg8.se/files/roms/blargg-gb-tests/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Wed Mar 30, 2016 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Those test ROMs are super helpful. I just wish they gave more information about what, exactly, is wrong. (Trying to read their code isn't much help either...)<br /><br />I added a new sheet to the document (&quot;breakdown2&quot;) that tries to break down the instruction stages based on the &quot;read, decode, execute, write&quot; model, but there are a lot I can't reconcile this way. I'm really not sure what the decode stage would be doing after the first cycle, and some instructions take longer than this model suggests they should. Perhaps there are more limitations, such as not being able to directly manipulate some registers (like putting BC on the address bus, or directly manipulating SP) and/or not being able to perform both a read and a write in the same cycle? Or could the stages be in a different order?<br /><br />I don't really understand why decode and execute are two separate tasks, either.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shonumi</b> [ Wed Mar 30, 2016 10:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Gekkio has done extensive testing and verification on instruction timings. Have a look at the Mooneye GB emulator for documentation -&gt; <!-- m --><a class="postlink" href="https://github.com/Gekkio/mooneye-gb/">https://github.com/Gekkio/mooneye-gb/</a><!-- m --> Specifically, try looking through the tests if you have a certain area you want to look at.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Thu Mar 31, 2016 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice, that is very helpful. (Now how do I read Rust... :p)<br /><br />The main thing I'm after right now is understanding just what, exactly, is going on at each clock cycle. So for example <!-- m --><a class="postlink" href="https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-push-rr">https://github.com/Gekkio/mooneye-gb/bl ... of-push-rr</a><!-- m --> we can see many &quot;internal delay&quot; stages; my goal is to understand what's going on during those delays. Maybe it ultimately doesn't matter for emulation, but it definitely matters for my curiosity. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Fri Apr 01, 2016 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I've done more analysis in &quot;decode&quot; sheet based on a better understanding of how processors actually work (<a href="http://minnie.tuhs.org/CompArch/Tutes/week03.html" class="postlink">this</a> was very helpful) and the information from Mooneye. The decoding logic I've come up with probably isn't entirely the same as the real thing but it matches the known timings for almost all instructions and seems to make sense. (I don't know how understandable it is, though!)<br /><br />The few instructions that continue to confuse me are:<br /><br /><ul><li>LD   (i16),SP: the only instruction which has, in the &quot;load&quot; stage, a load into W</li><li>LD   SP, SP+i8 and LD   HL, SP+i8: why it takes longer to write the result into SP than into HL, and why it doesn't do &quot;SP = SP+W&quot; in the load stage</li><li>RET  cc: I have no idea what it does during M2. Mooneye states that the PC is pushed in M3 and M4. M2 happens even when condition isn't met, and I can't figure out what it could be doing.</li></ul><br />All of those involve SP, that makes me think there's some extra logic required to do certain operations to it?<br /><br />Also, I left some stages out of some M-states when they aren't used, just for clarity. The way I imagine, the instruction decode logic takes the current instruction, the current M-state, and some other inputs, and outputs a lot of control signals like &quot;do we modify a register? which one? what source? what modification?&quot; (the &quot;write reg&quot; stage) and &quot;do we copy/shift the low byte of W into the high byte?&quot;, but for the M-states where the answer is always &quot;no/none&quot;, I left those columns out.<br /><br />Perhaps it's impossible to know without decapping the chip, what exactly is going on under the hood when it's not generating any external signals we can analyze. On the plus side, at least we don't <em>need</em> to know to emulate it...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gekkio</b> [ Fri Apr 01, 2016 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You're very quickly delving deep into the &quot;not measurable nor known&quot; areas of Game Boy hardware. I share your curiosity, but there is no documentation about these things and if things are not measurable, it's just conjecture.<br />Of course, if a model such as your decoding model accurately predicts things, it is still useful even if it is not completely based on proof. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Did you notice the logic analysis directory under tests in the mooneye-gb repository? I've done some logic analysis on the Game Boy hardware, and you might be interested in things like the write and read timings in the external bus. The git repository has tex files, but I've got them rendered here:<br /><br /><!-- m --><a class="postlink" href="http://gekkio.fi/files/mooneye-gb/nightly/logic-analysis/external-bus/write_timing/write_timing.png">http://gekkio.fi/files/mooneye-gb/night ... timing.png</a><!-- m --><br /><!-- m --><a class="postlink" href="http://gekkio.fi/files/mooneye-gb/nightly/logic-analysis/external-bus/read_timing/read_timing.png">http://gekkio.fi/files/mooneye-gb/night ... timing.png</a><!-- m --><br /><br />I still need to verify when the data is sampled during a read cycle, but my current guess is the third falling or rising edge.<br />Also, I have not yet verified the exact durations of how long signals are valid, because the logic analyser cannot detect hi-z states.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">based on a better understanding of how processors actually work (this was very helpful)</div><br /><br />If you're interested in more material, I can recommend the book <a href="http://www.amazon.com/Digital-Design-Computer-Architecture-Edition/dp/0123944244" class="postlink">Digital Design and Computer Architecture</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Perhaps it's impossible to know without decapping the chip, what exactly is going on under the hood when it's not generating any external signals we can analyze. On the plus side, at least we don't need to know to emulate it...</div><br /><br />If you've got a couple thousand hours of spare time, take a look at the DMG CPU photos here <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><!-- m --><a class="postlink" href="http://siliconpr0n.org/archive/doku.php?id=digshadow:nintendo:dmg-cpu_b">http://siliconpr0n.org/archive/doku.php ... :dmg-cpu_b</a><!-- m --><br /><br />I've already done some initial tracing of signals, but the lack of other layers than the top layer make it (probably) impossible to identify the transistor structures.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Fri Apr 01, 2016 11:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, there's a lot of guesswork involved here. It's mainly just trying to come up with the most logical design that fits what we know and is nice and simple (=cheap). Unfortunately I wouldn't know where to begin actually looking at the decapped circuits.<br /><br />I did see those directories but I didn't know there were PNG versions. That might be very handy.<br /><br />My model does predict a few interesting things:<br /><br /><ul><li>If the CB prefix is an instruction itself, which sets a &quot;use alternate decoding logic for next instruction&quot; flag, then it might be possible for an interrupt to fire before that next instruction is fetched. This would be pretty bad, so probably it can temporarily block interrupts (or isn't a separate instruction).</li><li>Instruction D3 and DB might be &quot;JP ?,i16&quot; and &quot;JP N?,i16&quot; where ? is some unknown condition flag. (C3 is JP always, so CB could be JP never, but it's special-cased for the ALU instead.)</li><li>Instruction DD might function as &quot;CALLI i16&quot;, i.e. call and enable (or disable?) interrupts.</li><li>Instruction E4 and F4 might do &quot;LD (?+i8),A&quot; and &quot;LD A,(?+i8)&quot;.</li><li>Instruction EC and FC would be &quot;LD SP+i8,SP&quot; and &quot;LD SP+i8,HL&quot; which makes no sense, so who knows what they'd actually do...</li><li>Instruction ED and FD might be &quot;LD HL,PC&quot; and &quot;LD HL,SP&quot;?</li><li>No idea what E3 and EB would do. Possibly clear/set some control flag (like F3 and FB clear/set IME).</li></ul><br />I really need a hardware rig to test this on. Probably everyone has already tried these and they just lock up?<br /><br />BTW, corrected the matrix sheet. Anonymous users should be able to add notes/comments.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Apr 01, 2016 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Rena wrote:</div><div class="quotecontent">If the CB prefix is an instruction itself, which sets a &quot;use alternate decoding logic for next instruction&quot; flag, then it might be possible for an interrupt to fire before that next instruction is fetched. This would be pretty bad, so probably it can temporarily block interrupts (or isn't a separate instruction).</div><br />Unless the CB bit is in the status flags, as is the case for the T flag that the HuC6280's SET prefix sets. (SET-prefixed ALU ops use ZP[X] instead of the accumulator.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rena</b> [ Fri Apr 01, 2016 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What exactly are T-states doing?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Game Boy doesn't automatically push/pop when servicing an interrupt, except pushing PC (it basically forces a CALL nn). So if CB were one of the four &quot;always 0&quot; flags, we'd expect to see some effects in that situation:<br /><br /><ul><li>The CB prefix applies to the first instruction of the ISR (usually a push), and everything breaks</li><li>The CB flag automatically is cleared, and the interrupted instruction gets decoded incorrectly on resume, and everything breaks</li><li>The CB flag somehow doesn't affect the ISR, and we'd see it in the stack (hopefully your ISR does a PUSH AF toward the beginning)</li></ul><br />Only the third case would not lead to incorrect instruction decoding, and I don't know how it would happen.<br /><br />If someone cared to test (and had a flash cart to do it with), it should be simple enough to set up a test that would have an interrupt trigger just after the CB prefix is read, and then watch the address bus to see if the next memory access is to the stack (to push PC) or to fetch the next instruction, and have your program look at the pushed F register to check for unused bits being set.<br /><br />Another test would be:<br />ld bc, $01FF<br />push bc<br />pop af<br />nop<br /><br />If CB flag is in the status flags (and POP itself doesn't clear it), the NOP should be interpreted as RLC B, so B will be 3 now.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>