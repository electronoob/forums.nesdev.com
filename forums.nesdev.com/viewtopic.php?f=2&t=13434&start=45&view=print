<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How do I do in CA65 things I do in ASM6?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How do I do in CA65 things I do in ASM6?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13434</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 04, 2015 6:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.align 256</tt></div><br />Does that just pad the ROM until the next 256-byte boundary is reached or does the program try to be smart and fill the space with things from the same segment that might fit?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 04, 2015 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, the idea of using overlapping segments for the temporary RAM is getting a little out of hand. The RAM is already broken in 8 pages, so if I end up needing 8 non-permanent modules in my program that would mean 64 entries in each of the MEMORY and SEGMENT sections of the config file.<br /><br />Another possibility that comes to mind is creating only one set of MEMORY/SEGMENT definitions for all of the temporary modules, and use .org statements (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.org PERMANENT_RAM_PAGE_3_SIZE</tt>) to have the temporary variables start after the permanent ones. One problem is that I'd have to make these memory sections large enough to accommodate all variables from all temporary modules, instead of using their actual sizes. This sounds pretty kludgy to me, but it might just work and significantly de-clutter some files.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Nov 04, 2015 7:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Align will pad up to the alignment boundary. The linker is NOT allowed to re-order your code to fit; each segment is filled up in the order that material is given to it (i.e. in the order .o files are specified to the linker, then within each .o file in the order the code appeared in the file).<br /><br />It also requires you to put &quot;align&quot; in the segment definition too, I think? (<a href="http://www.cc65.org/doc/ca65-11.html#ss11.4" class="postlink">see docs</a>)<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Also, the idea of using overlapping segments for the temporary RAM is getting a little out of hand. The RAM is already broken in 8 pages, so if I end up needing 8 non-permanent modules in my program that would mean 64 entries in each of the MEMORY and SEGMENT sections of the config file.</div><br />I don't understand, why would they multiply?<br /><br />Each segment can be used in as many modules as you like. They're not per-assembly, they're per-link.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">use .org statements</div><br />There is .org in ca65, but it has some things to be aware of.  (<a href="http://www.cc65.org/doc/ca65-11.html#ss11.72" class="postlink">see docs</a>) By default it acts globally, meaning that switching to another .segment doesn't reset it (unless you enable per-segment org as a special feature). When you're done with .org located code, use .reloc to return to the normal way of laying down code.<br /><br />In general, using .org makes it really hard for the linker to do its job without putting in a lot of padding. See my earlier statement about how it is not allowed to re-order stuff. If you do use it, try to keep it confined to its own segments, and don't mix org-located code with relocatable code in the same segment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Nov 04, 2015 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.align 256</tt></div><br />Does that just pad the ROM until the next 256-byte boundary is reached or does the program try to be smart and fill the space with things from the same segment that might fit?</div><br />It's not smart at all. First of all it's applied at assembly time (the &quot;align&quot; specification in the linker config is used to do some sanity checks).<br /><br />I have made some macros, like one to detect page-crossing branches, and another to align such that it will let me know how much space was wasted for padding. It would be nice, though, if &quot;.align&quot; acted more like a constraint (&quot;this code must appear at an address multiple of 256&quot;) rather than an explicit instruction.<br /><br />This is actually also one of those things that could use some improvement. Applying the align at link time would be preferable, I think.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">each segment is filled up in the order that material is given to it (i.e. in the order .o files are specified to the linker, ...</div><br />I'm not so sure it gives the guarantee about preserving the order of the object files. Then again I doubt it's specified anywhere, it's just not something I would rely on. (Obviously it has to preserve the ordering within the file.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 05, 2015 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Align will pad up to the alignment boundary. The linker is NOT allowed to re-order your code to fit;</div><br />I see... Well, you probably wouldn't want it to do that most of the time anyway.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It also requires you to put &quot;align&quot; in the segment definition too, I think? (<a href="http://www.cc65.org/doc/ca65-11.html#ss11.4" class="postlink">see docs</a>)</div><br />Apparently.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't understand, why would they multiply?</div><br />There are 8 pages of RAM ($000-$0ff, $100-$1ff, $200-$2ff, $300-$3ff, $400-$4ff, $500-$5ff, $600-$6ff and $700-$7ff), and I use separate segments for them because there are several times when I need to use particular pages for certain variables/arrays, mainly to avoid page crossing. I can't simply define a huge segment of RAM and fill it linearly. Because of that, for each temporary module of my program, I have to create 8 new segments. I'll probably stick to this model though... it may clutter the configuration steps, but the code itself is cleaner.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When you're done with .org located code, use .reloc to return to the normal way of laying down code.</div><br />Yes, I did that and it worked fine.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In general, using .org makes it really hard for the linker to do its job without putting in a lot of padding.</div><br />This isn't a problem in this case, since I'd be using it for RAM. I just have to make these segments long enough to accommodate all the padding and all the temporary variables.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">It would be nice, though, if &quot;.align&quot; acted more like a constraint (&quot;this code must appear at an address multiple of 256&quot;) rather than an explicit instruction.</div><br />Maybe they could include a new directive for that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not so sure it gives the guarantee about preserving the order of the object files. Then again I doubt it's specified anywhere, it's just not something I would rely on.</div><br />I'll try to remember to not rely on that in case I use multiple object files.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 09, 2015 6:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, with the help that was given to me in this thread I was able to implement most of what I had working previously in ASM6. I've hidden all the complicated stuff behind macros, so the actual source code looks cleaner. The macros became much shorter once I found out about <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.IDENT</tt>, and started generating label and symbol names dynamically. I do have one question regarding this, though: Is there a way I can &quot;cache&quot; the identifiers generated by <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.IDENT</tt>? Having to generate them all the time results in really long lines with a lot of redundancy... I considered using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.DEFINE</tt>, but that doesn't really seem appropriate (also, the docs discourage you from using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.DEFINE</tt> altogether).<br /><br />Anyway, the only thing that I wasn't able to do yet is the &quot;scratchpad union&quot;. That actually works nearly the same as the temporary variables, in that different subroutines use the same memory for different variables because they never run concurrently, which means that I could implement it by declaring a shitload of scratchpad areas in the config file and having each subroutine use its own segment. The problem is that you can only have 254 segments in a single object file, and considering how many segments I'm already using for other purposes, that limit sounds quite reachable.<br /><br />If anyone has any ideas on how to make the declaration of scratchpad variables more dynamic, please share. I'm gonna try a couple things myself, but if nothing interesting comes up I might just end up manually adding offsets to the base address of the scratchpad area, something I really didn't want to do, but... oh well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Nov 09, 2015 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">So, with the help that was given to me in this thread I was able to implement most of what I had working previously in ASM6. I've hidden all the complicated stuff behind macros, so the actual source code looks cleaner. The macros became much shorter once I found out about <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.IDENT</tt>, and started generating label and symbol names dynamically. I do have one question regarding this, though: Is there a way I can &quot;cache&quot; the identifiers generated by <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.IDENT</tt>? Having to generate them all the time results in really long lines with a lot of redundancy... I considered using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.DEFINE</tt>, but that doesn't really seem appropriate (also, the docs discourage you from using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.DEFINE</tt> altogether).</div><br />It's not possible to make &quot;string constants&quot;, so really .define is the only reasonable choice here. Note that you can use .undefine if you need to avoid name clashes (e.g. if you do it in macros). Unfortunately this does mean that the expression will get re-evaluated again and again, but it's not a big problem. IMO the docs are overly anal about discouraging .define, because like #define in C, sometimes it's the best tool for the job.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If anyone has any ideas on how to make the declaration of scratchpad variables more dynamic, please share. I'm gonna try a couple things myself, but if nothing interesting comes up I might just end up manually adding offsets to the base address of the scratchpad area, something I really didn't want to do, but... oh well.</div><br />You can do macro tricks. Without macros you can do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;BSS&quot;<br />scratch: .res 16<br /><br />.segment &quot;CODE&quot;<br />.proc foo<br />&nbsp; .struct ; anonymous struct, so symbols are placed in parent scope<br />&nbsp; &nbsp; xyzzy .byte<br />&nbsp; &nbsp; bar .word<br />&nbsp; .endstruct<br /><br />&nbsp; lda scratch+xyzzy<br />&nbsp; sta scratch+bar+1<br />&nbsp; rts<br />.endproc<br /></div><br /><br />With macros you could get something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;BSS&quot;<br />scratch: .res 16<br /><br />.segment &quot;CODE&quot;<br />.proc foo<br />&nbsp; start_locals ; this would be a macro that starts a struct, it could have a name like &quot;locals&quot;<br />&nbsp; &nbsp; xyzzy .byte<br />&nbsp; &nbsp; bar .word<br />&nbsp; end_locals ; another macro for closing the struct<br /><br />&nbsp; ; &quot;local&quot; could be a .define macro defined as something like:<br />&nbsp; ;&nbsp; &nbsp;.define local(p) scratch+locals::p<br />&nbsp; lda local xyzzy<br />&nbsp; sta local bar+1<br />&nbsp; rts<br />.endproc<br /></div><br />This way is not really technically much different from adding to the base variable, but it does show intent better, IMO. You can also do some safety checks in &quot;end_locals&quot; (e.g. does the size of the struct fit within the scratch area).<br /><br />EDIT: Split up long line.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 09, 2015 10:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">.define is the only reasonable choice here.</div><br />OK.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Note that you can use .undefine if you need to avoid name clashes (e.g. if you do it in macros).</div><br />I actually started doing that, but it looked worse than with all the redundant expressions, so I left it how it was. I'll try not to obsess over this, as long as it's working.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">With macros you could get something like this:</div><br />That's a great idea!<br /><br />[tokumaDRW]There's just one thing I have to try, which is starting the labels from somewhere else than scratch. This will be necessary in functions that are called from other functions, when I need the inner function's locals to be after the outer function's.[/tokumaDRW]<br /><br />anyway, thanks for the great idea of combining macros and .define. I'll see what I can do with that idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Nov 09, 2015 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">[tokumaDRW]There's just one thing I have to try, which is starting the labels from somewhere else than scratch. This will be necessary in functions that are called from other functions, when I need the inner function's locals to be after the outer function's.[/tokumaDRW]</div><br />Here's one option:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.struct foo<br />&nbsp; padding .res 10 ; or whatever other size<br />&nbsp; bar .byte<br />&nbsp; ; ...<br />.endstruct<br /></div><br />(&quot;start_locals&quot; could also take the padding amount as a parameter and add it automatically.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Mon Nov 09, 2015 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Here's one option:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.struct foo<br />&nbsp; padding .res 10 ; or whatever other size<br />&nbsp; bar .byte<br />&nbsp; ; ...<br />.endstruct<br /></div><br /></div><br /><br />Just to add, I'm pretty sure you can omit the name:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.struct foo<br />&nbsp; .res 10 ; or whatever other size, or expression you want here (if it is constant at assemble time)<br />&nbsp; bar .byte<br />&nbsp; ; ...<br />.endstruct<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 09, 2015 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great idea!<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">(&quot;start_locals&quot; could also take the padding amount as a parameter and add it automatically.)</div><br />That would be the way to go! The padding amount would actually be the size of the outer function's struct, which I can apparently get with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.sizeof</tt>. I might have the start_locals macro receive a struct as an optional parameter, in which case I would pad as many bytes as the struct takes.<br /><br /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Just to add, I'm pretty sure you can omit the name</div><br />Makes sense, thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Nov 09, 2015 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FWIW ca65 does have a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.union</tt> directive [ss]which seems to be mostly omitted from its documentation[/ss]. It works just like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.struct</tt> except every line in a union starts at offset 0. The typical use of union appears to be to host overlapping structs.<br /><br />I don't think it would really help, here, since struct is essentially just a collection of offset enumerations. I don't know if you'd get much value from sticking multiple structures into a union, but at least the concept is there in the language, somewhat.<br /><br /><em>Edit:</em> The documentation I usually get to via google search is apparently just outdated. Union is documented here: <a href="http://cc65.github.io/doc/ca65.html#ss11.101" class="postlink">http://cc65.github.io/doc/ca65.html#ss11.101</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 09, 2015 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This single-pass thing is really annoying... It forces me to declare ZP variables before writing any code that accesses such variables, otherwise the assembler won't use ZP addressing. The program modules have to access each other's variables, so it's not like I can include the modules in a specific order to guarantee that ZP variables will only be used after they've been declared. Is there any way around this? I'm considering putting all functions inside macros, so I can write the code near the variable declarations, but delay the actual assembly of the code until absolutely all variables have been declared, but that sounds a little extreme...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 09, 2015 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.importzp</tt> a variable from another module, it'll be treated as zero page.<br /><br />You can also switch to a segment, define static variables used by a subroutine, and switch back before the subroutine's body.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />var1: .res 2<br />var2: .res 1<br />var3: .res 1<br /><br />.segment &quot;CODE&quot;<br />.proc something<br />&nbsp; lda (var1),y<br />&nbsp; rts<br />.endproc<br /><br />.segment &quot;ZEROPAGE&quot;<br />var4: .res 2<br />var5: .res 1<br />var6: .res 1<br /><br />.segment &quot;CODE&quot;<br />.proc something_else<br />&nbsp; lda (var4),y<br />&nbsp; rts<br />.endproc<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Nov 09, 2015 8:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How do I do in CA65 things I do in ASM6?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.importzp</tt> a variable from another module, it'll be treated as zero page.</div><br />I'm not sure I'm ready to assemble the modules separately, because there's a lot of communication between them. I'm sure I'm going to get lost in import/export hell if I try this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can also switch to a segment, define static variables used by a subroutine, and switch back before the subroutine's body.</div><br />That's what I figured, but having the variable declarations away from the function's body is very undesirable. They wouldn't need to be apart if the variables were used exclusively in their respective function, but there are several cases where parameters are passed to (and returned by) the subroutines in the scratchpad area, so one function might need access to another function's variables, meaning I'd have to put ALL functions after ALL variables, making the code hard to read. The only solution I could come up with was to wrap all functions in macros (not only the ones that go in the &quot;fixed bank&quot; and need to be output multiple times), so that I can still type them near their respective variables, but without outputting anything at that time. Then, after all variables have been declared, a bunch of macro calls would put the routines wherever they need to be. Is that too much of a hack?<br /><br />I feel like I'm having to jump through a lot of hoops to have everything automated the way I'm used to. I considered switching to ca65 because I thought I could make everything more versatile and dynamic, but while I can certainly see that the segment stuff, the macro system and the built-in functions are indeed very useful, I'm finding that the single pass aspect severely limits my options for arranging code, data and variables. I'm certain that most of my problems originate from me approaching this with the wrong mindset though, since I'm not used to object files, linking and that sort of thing.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>