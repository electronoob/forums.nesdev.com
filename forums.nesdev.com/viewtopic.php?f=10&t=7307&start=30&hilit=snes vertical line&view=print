<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hello World</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hello World</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>18</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 29, 2010 8:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">1) What does the ".segment "INESHDR" do? There's no predefined segment by that name, so I'm confused. What would happen if it was left out?</div><br />You wouldn't get a valid iNES header<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) Does "number of 16 KB program segments" mean that one has go through one's source and count how many segments there are?</div><br />Usually your link script template will specify how much PRG ROM it'll create. For example, an NROM-128 template will always make 16400 bytes (16 bytes of header and 16384 bytes of PRG ROM), an NROM-256 or CNROM template will always make 32784 bytes (16 bytes of header and 32768 bytes of PRG ROM), and a template for UNROM, BNROM, or ANROM will probably make 131088 bytes (16 header, 131072 PRG ROM).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) What is a mapper? Why do different games use different ones? I keep finding lists of them, but nothing that actually explains what they are and do.</div><br /><a href="http://wiki.nesdev.com/w/index.php/MMC" class="postlink">They turn the page in the ROM</a>, so to speak. Without them, the NES can't see more than 32 KiB of program and 8 KiB of graphic tiles. Some mappers have smaller "pages", which lets them have more than one active at once, and some have extra timing circuitry to make a few scrolling tricks easier.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) What is a nametable? What's stored in them?</div><br />In <a href="http://wiki.nesdev.com/w/index.php/Before_the_basics#Background" class="postlink">List of background topics</a>, please see <a href="http://en.wikipedia.org/wiki/Text_mode" class="postlink">Text mode</a> and <a href="http://en.wikipedia.org/wiki/Text_user_interface" class="postlink">Text user interface</a>. The nametables are a lot easier to explain if you're familiar with those.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does that mean it's used for games that scroll horizontally or not?</div><br /><span class="posthilit">Vertical</span> mirroring is used by some games that scroll horizontally, such as the original Super Mario Bros. and Super Mario Bros. 2.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, why doesn't one need ".org $0000" at the beginning of the header? Is it implied?</div>
<br />ca65 delegates placement of code in the binary image to the linker.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sat Jan 01, 2011 6:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You wouldn't get a valid iNES header.</div><br />Ok. Give me some time to figure out the linker...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Usually your link script template will specify how much PRG ROM it'll create. For example, an NROM-128 template will always make 16400 bytes (16 bytes of header and 16384 bytes of PRG ROM), an NROM-256 or CNROM template will always make 32784 bytes (16 bytes of header and 32768 bytes of PRG ROM), and a template for UNROM, BNROM, or ANROM will probably make 131088 bytes (16 header, 131072 PRG ROM). </div><br />Ok.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">They turn the page in the ROM, so to speak. Without them, the NES can't see more than 32 KiB of program and 8 KiB of graphic tiles. Some mappers have smaller "pages", which lets them have more than one active at once, and some have extra timing circuitry to make a few scrolling tricks easier. </div><br />Ok.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In List of background topics, please see Text mode and Text user interface. The nametables are a lot easier to explain if you're familiar with those.</div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><span class="posthilit">Vertical</span> mirroring is used by some games that scroll horizontally, such as the original Super Mario Bros. and Super Mario Bros. 2.</div><br />I've read up on nametables and mirroring, and I think I understand what they are, and what kind of games would use different types of the latter.<br /><br />As a side note, looking at <!-- m --><a class="postlink" href="http://tuxnes.sourceforge.net/nesmapper.txt">http://tuxnes.sourceforge.net/nesmapper.txt</a><!-- m --> , it gets Dragon Warrior 1, 3, and 4 wrong. I've just fired those games up myself with FCEUX and they all have <span class="posthilit">vertical</span> mirroring. Also, interestingly, Double Dragon 2 has a <span class="posthilit">vertical</span> mirroring for it's intro/title screen, but horizontal mirroring for everything else.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ca65 delegates placement of code in the binary image to the linker.</div>
<br />I see. All this makes me wonder what nbasic is programmed to do...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 01, 2011 7:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">As a side note, looking at <!-- m --><a class="postlink" href="http://tuxnes.sourceforge.net/nesmapper.txt">http://tuxnes.sourceforge.net/nesmapper.txt</a><!-- m --> , it gets Dragon Warrior 1, 3, and 4 wrong.</div>
<br />The mirroring settings in the iNES header are meant for games with hardwired mirroring, and are meaningless in games that have mapper-controlled mirroring. Games that use mappers like MMC1 or MMC3 can change the type of mirroring at any time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sat Jan 01, 2011 7:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The mirroring settings in the iNES header are meant for games with hardwired mirroring, and are meaningless in games that have mapper-controlled mirroring. Games that use mappers like MMC1 or MMC3 can change the type of mirroring at any time.</div>
<br />Oh, ok. That still begs to ask why they didn't match the iNES header mirroring value with the one actually used in the game though...
<br />
<br />But, am I right in assuming that the part of the header that says how many prg and chr rom sections there are? That is, the mapper specifies only a range, not the specific amount?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jan 01, 2011 7:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Oh, ok. That still begs to ask why they didn't match the iNES header mirroring value with the one actually used in the game though...</div><br />I bet most dumpers would just guess the mirroring when filling in iNES headers until the games worked, and no matter what they guessed, games with mapper-controlled mirroring would always work.<br /><br />But even if anyone cared about this, lots of games change the mirroring type at different times, and it would be very tedious to play through entire games just to make sure they use only one kind of mirroring all the way to the end, for the sole purpose of setting a bit in the header that doesn't really do anything.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But, am I right in assuming that the part of the header that says how many prg and chr rom sections there are? That is, the mapper specifies only a range, not the specific amount?</div>
<br />Each mapper has a maximum amount of PRG and CHR it can handle, and these limits are usually specified in detailed documents about them. The values in the iNES header count actual "pages", which are 16KB large in the case of PRG and 8KB in the case of CHR. These sizes were used because they were thought to be the smallest in commercial NES games (this assumption was wrong though, as there is at least one game with 8KB of PRG, and this game has to be doubled up in order to be correctly represented in the iNES format).
<br />
<br />Since the sizes of memory chips are always powers of 2 (32KB, 64KB, 128KB, 256KB, etc) it's best that your PRG and CHR sections are like that too, so you should never use a weird iNES configuration like 3 PRG pages (48KB).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Jan 02, 2011 12:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I bet most dumpers would just guess the mirroring when filling in iNES headers until the games worked, and no matter what they guessed, games with mapper-controlled mirroring would always work. <br /><br />But even if anyone cared about this, lots of games change the mirroring type at different times, and it would be very tedious to play through entire games just to make sure they use only one kind of mirroring all the way to the end, for the sole purpose of setting a bit in the header that doesn't really do anything.</div><br />I'd expect them to at least fire up the rom and check though. But you're right, it's not really needed.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Each mapper has a maximum amount of PRG and CHR it can handle, and these limits are usually specified in detailed documents about them. The values in the iNES header count actual "pages", which are 16KB large in the case of PRG and 8KB in the case of CHR. These sizes were used because they were thought to be the smallest in commercial NES games (this assumption was wrong though, as there is at least one game with 8KB of PRG, and this game has to be doubled up in order to be correctly represented in the iNES format). <br /><br />Since the sizes of memory chips are always powers of 2 (32KB, 64KB, 128KB, 256KB, etc) it's best that your PRG and CHR sections are like that too, so you should never use a weird iNES configuration like 3 PRG pages (48KB).</div><br />What happens if there's more? It's just simply not available? Linker error?<br /><br />I suppose mappers varied in price too, thus affecting how a development team chose which one to use.<br /><br />-----<br /><br />From <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/MMC3">http://wiki.nesdev.com/w/index.php/MMC3</a><!-- m --> ...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The MMC3 has 4 pairs of registers at $8000-$9FFF, $A000-$BFFF, $C000-$DFFF, and $E000-$FFFF - even addresses ($8000, $8002, etc.) select the low register and odd addresses ($8001, $8003, etc.) select the high register in each pair.</div><br />I don't understand what it means by "in each pair".<br /><br />So, in addition to setting the header correctly, one must set things at the address in the mapper correctly too, in order for a game to run?<br /><br />Also, it says:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Mirroring ($A000-$BFFE, even)</div>
<br />Does it reserve all of $A000 to $BFFE to say what the mirroring is? Why can't it just use a couple bits?? I think I'm misunderstanding something...
<br />
<br />-----
<br />
<br />And finally, do I have the following right?: The ca65 assembler creates an object file from assembly files, and then the ld65 linker creates a NES file from the object file?
<br />
<br />-----
<br />
<br /><!-- m --><a class="postlink" href="http://www.cc65.org/doc/ld65-2.html">http://www.cc65.org/doc/ld65-2.html</a><!-- m -->
<br />Looking at the ld65 documentation, the -t (specifies target system) option and -C (specifies custom config file) option can't be used together. What kind of rom does the linker default to when "-t nes" is used?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 02, 2011 1:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">What happens if there's more? It's just simply not available? Linker error?</div><br />More than what the mapper supports? I'm sure you can assemble very large ROMs, and some emulators will even run them without problems, but you will not be able to put them on real carts.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I suppose mappers varied in price too, thus affecting how a development team chose which one to use.</div><br />Yes. Things like extra RAM and batteries also played an important part in the manufacturing cost of the cartridges.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't understand what it means by "in each pair".</div><br />I think it's because most operations on the MMC3 are performed with two register writes: the first selects the operation and the second executes it. For example, to bankswitch a page of PRG-ROM you must first tell the mapper where in the addressing space the page will go, and then you tell it which page to put there.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So, in addition to setting the header correctly, one must set things at the address in the mapper correctly too, in order for a game to run?</div><br />Yes, you must configure the mapper to make sure everything (mirroring, active PRG and CHR pages, etc) is as you expect.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does it reserve all of $A000 to $BFFE to say what the mirroring is? Why can't it just use a couple bits?? I think I'm misunderstanding something...</div>
<br />Because the 6502 relies on memory-mapped registers to communicate with different devices, when you write something to the mapper, the mapper has to decode the address in order to know which register you wrote to. The cart receives 15 address bits, and if you wanted a register to be accessible through a single memory location, the mapper would have to decode all 15 bits, increasing its complexity (and cost) unnecessarily. Since the mapper only has a few registers, it's easier to just decode a few bits and ignore the rest. As a side effect, the few registers are mirrored several times across the addressing space (the actual layout depends on which bits are decoded and which are ignored).
<br />
<br />So, in the case you mentioned, it's not that the mapper needs a shitload of bytes just to configure the mirroring, it's just that the register that controls the mirroring can be accessed through any address in that range, but it's still just one register.
<br />
<br />EDIT: I can't help you with the ca65 stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Jan 02, 2011 2:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">More than what the mapper supports? I'm sure you can assemble very large ROMs, and some emulators will even run them without problems, but you will not be able to put them on real carts. </div><br />Yeah, that's what I meant.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think it's because most operations on the MMC3 are performed with two register writes: the first selects the operation and the second executes it. For example, to bankswitch a page of PRG-ROM you must first tell the mapper where in the addressing space the page will go, and then you tell it which page to put there.</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because the 6502 relies on memory-mapped registers to communicate with different devices, when you write something to the mapper, the mapper has to decode the address in order to know which register you wrote to. The cart receives 15 address bits, and if you wanted a register to be accessible through a single memory location, the mapper would have to decode all 15 bits, increasing its complexity (and cost) unnecessarily. Since the mapper only has a few registers, it's easier to just decode a few bits and ignore the rest. As a side effect, the few registers are mirrored several times across the addressing space (the actual layout depends on which bits are decoded and which are ignored).<br /><br />So, in the case you mentioned, it's not that the mapper needs a shitload of bytes just to configure the mirroring, it's just that the register that controls the mirroring can be accessed through any address in that range, but it's still just one register. </div>
<br />Ok, I understand the reasoning, and how they're supposed to work now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Sun Jan 02, 2011 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">And finally, do I have the following right?: The ca65 assembler creates an object file from assembly files, and then the ld65 linker creates a NES file from the object file?<br /><br />-----<br /><br /><!-- m --><a class="postlink" href="http://www.cc65.org/doc/ld65-2.html">http://www.cc65.org/doc/ld65-2.html</a><!-- m --><br />Looking at the ld65 documentation, the -t (specifies target system) option and -C (specifies custom config file) option can't be used together. What kind of rom does the linker default to when "-t nes" is used?</div>
<br />
<br />On my Gentoo Linux development server (with cc65 installed):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">djenkins@hera ~/code/nesyar $ find /usr/local -name &quot;nes*&quot;<br />/usr/local/lib/cc65/lib/nes.lib<br />/usr/local/lib/cc65/lib/nes.o<br />/usr/local/lib/cc65/joy/nes-stdjoy.joy<br />/usr/local/lib/cc65/asminc/nes.inc<br />/usr/local/lib/cc65/include/nes.h<br />/usr/local/share/doc/cc65/nes.cfg<br /></div><br /><br />The linker cnfig file is the last ("nes.cfg") file.  It is fairly well documented internally.  It implements a NES with no mapper (32K prog-rom), 8K char-rom, but adds the 8K of prog-ram ($6000 to $7fff).  This linker file also allocates 2 pages of ram ($300 to $4ff) for cc65's internal use with 'C' code.<br /><br />Personally, I would not use the default linker file, even if I were writing NES software in a mix of C and asm.<br /><br />In a NES game with a mapper, using ca65, one would give each banked segment a different segment name.  The linker will tell you when you try to put too much code (or data) into a segment.  The linker will (optionally) produce a "map" file that shows where it put each segment, and list how much free space is in each segment.  ld65 can also produce a "debugger" file which is much more detailed.<br /><br />These files are easy to parse with perl or python.  I wrote a small perl script that digests the map file to tell me hos much space I have left in the three segments that I care about (in my non bank-switched game):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">djenkins@hera ~/code/nesyar $ cat tools/free-space.pl<br />#!/usr/bin/perl -w<br /># NesYar/tools/free_space.pl<br /><br /># Analyze ld65 linker &quot;map&quot; file, print how much free space I have<br /># in various segments.<br /><br />use strict;<br />use warnings;<br />use diagnostics;<br /><br />my $segment_list = 0;<br />my $zp_end = 0;<br />my $kernel_end = 0;<br />my $vectors_start = 0;<br />my $data_end = 0;<br /><br />while &#40;&lt;STDIN&gt;&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; chomp;<br />&nbsp; &nbsp; &nbsp; &nbsp; my $<span class="posthilit">line</span> = $_;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; $segment_list = 1 if &#40;$<span class="posthilit">line</span> =~ m/^Segment list:$/&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; next if &#40;! $segment_list&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; $segment_list = 0 if &#40;$<span class="posthilit">line</span> =~ m/^Exports list:$/&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; if &#40;$<span class="posthilit">line</span> =~ m/^ZEROPAGE&#91;\s&#93;+&#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;$/&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $zp_end = hex &#40;$2&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125; elsif &#40;$<span class="posthilit">line</span> =~ m/^KERNEL&#91;\s&#93;+&#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;$/&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $kernel_end = hex &#40;$2&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125; elsif &#40;$<span class="posthilit">line</span> =~ m/^VECTORS&#91;\s&#93;+&#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;$/&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $vectors_start = hex &#40;$1&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125; elsif &#40;$<span class="posthilit">line</span> =~ m/^DATA&#91;\s&#93;+&#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;&nbsp; &#40;&#91;0-9A-F&#93;+&#41;$/&#41; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $data_end = hex &#40;$2&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&#125;<br /><br />print &quot;\x1b&#91;0;33m&quot; unless &#40;&quot;$^O&quot; eq &quot;MSWin32&quot;&#41;;<br />print sprintf &#40;&quot;ZP avail:&nbsp; &nbsp; &nbsp;%5d bytes\n&quot;, 256 - $zp_end&#41;;<br />print sprintf &#40;&quot;DATA avail:&nbsp; &nbsp;%5d bytes\n&quot;, 2048 - $data_end&#41;;<br />print sprintf &#40;&quot;ROM avail:&nbsp; &nbsp; %5d bytes\n&quot;, $vectors_start - $kernel_end&#41;;<br />print &quot;\x1b&#91;0m&quot; unless &#40;&quot;$^O&quot; eq &quot;MSWin32&quot;&#41;;<br /></div><br /><br />It produces output like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">./tools/free-space.pl &lt; ./nesyar.map<br />ZP avail:&nbsp; &nbsp; &nbsp; &nbsp; 16 bytes<br />DATA avail:&nbsp; &nbsp; &nbsp;961 bytes<br />ROM avail:&nbsp; &nbsp; &nbsp;7190 bytes<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 02, 2011 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">What happens if there's more? It's just simply not available? Linker error?</div><br />If you try to add more data than what the link script supports, you will get a linker error.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I suppose mappers varied in price too, thus affecting how a development team chose which one to use.</div><br />If you want more detail beyond what tokumaru explained, look at <a href="http://games.greggman.com/game/programming_m_c__kids/" class="postlink">one of the few published NES game post-mortems</a>. This one mentions mapper pricing: a scanline counter cost money (because it brought in MMC3), a dedicated switchable bank for DPCM samples cost money (because it also brought in MMC3), PRG RAM cost money (because it brought in a 6264 and at least MMC1), and a battery cost money on top of that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So, in addition to setting the header correctly, one must set things at the address in the mapper correctly too, in order for a game to run?</div><br />Yes. The first part of your startup code that sets up the mapper must be located in a fixed bank. For UNROM (mapper 2), this is $C000-$FFFF. For configurations of MMC3 and MMC6 (mappers 4, 118, and 119), this is $E000-$FFFF. For mappers with no fixed bank, such as A*ROM (mapper 7) or S*ROM (mapper 1), the first part of the code must be repeated at the same place in all banks.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And finally, do I have the following right?: The ca65 assembler creates an object file from assembly files, and then the ld65 linker creates a NES file from the object file?</div><br />Yes, just like a typical C toolchain.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">http://www.cc65.org/doc/ld65-2.html<br />Looking at the ld65 documentation, the -t (specifies target system) option and -C (specifies custom config file) option can't be used together. What kind of rom does the linker default to when "-t nes" is used?</div>
<br />It defaults to whatever the built-in link script for NES uses. I believe this built-in link script corresponds to a board that doesn't actually exist (NROM with 8 KiB PRG RAM), though it could be created with circuitry similar to that used in Family BASIC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Mon Jan 03, 2011 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ca65 delegates placement of code in the binary image to the linker.</div><br />So then, does .org do anything at all in ca65 asm?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you try to add more data than what the link script supports, you will get a linker error. </div><br />Ok.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you want more detail beyond what tokumaru explained, look at one of the few published NES game post-mortems. This one mentions mapper pricing: a scanline counter cost money (because it brought in MMC3), a dedicated switchable bank for DPCM samples cost money (because it also brought in MMC3), PRG RAM cost money (because it brought in a 6264 and at least MMC1), and a battery cost money on top of that. </div><br />Thanks for the link.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes. The first part of your startup code that sets up the mapper must be located in a fixed bank. For UNROM (mapper 2), this is $C000-$FFFF. For configurations of MMC3 and MMC6 (mappers 4, 118, and 119), this is $E000-$FFFF. For mappers with no fixed bank, such as A*ROM (mapper 7) or S*ROM (mapper 1), the first part of the code must be repeated at the same place in all banks. </div><br />Ok.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, just like a typical C toolchain.</div><br />Ok. It sounds stupid but I didn't realize it was so. It didn't help that other assemblers simply skip the linker step... With this in mind, my project assembles and links, and then plays in FCEUX without generating an error!, but the screen is blank and nothing happens... I don't have the linker set up correctly yet...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It defaults to whatever the built-in link script for NES uses. I believe this built-in link script corresponds to a board that doesn't actually exist (NROM with 8 KiB PRG RAM), though it could be created with circuitry similar to that used in Family BASIC.</div>
<br />Interesting.
<br />
<br />-----
<br />
<br />@clueless: Thank you for the script. I don't know Perl (I know some Python, but have never written anything major in it), but I have to get around to learning it sometime...
<br />
<br />Also, in your thread on the second page there's a link to <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=2997">http://nesdev.com/bbs/viewtopic.php?t=2997</a><!-- m --> . Where is the patch at/available for download though?
<br />
<br />-----
<br />
<br />I don't have the linker set up completely yet, so my next push will focus on that, which is bound to generate more questions, which I'll dump here. Stay tuned!
<br />
<br />-----
<br />
<br />Thank you to all for answering all my questions so far, especially when the average internet board would eat somebody alive for something like this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 03, 2011 11:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ca65 delegates placement of code in the binary image to the linker.</div><br />So then, does .org do anything at all in ca65 asm?</div><br />According to <a href="http://www.cc65.org/doc/ca65-11.html#ss11.72" class="postlink">the manual</a>, it turns on absolute code mode temporarily. It's one way of making overlay code intended to be copied to RAM before execution; the other (preferred?) way is to specify a segment in the link script whose load and run addresses differ.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, just like a typical C toolchain.</div><br />Ok. It sounds stupid but I didn't realize it was so.</div><br />It acts like a C compiler because it's bundled with one <img src="./images/smilies/icon_wink.gif" alt=";-)" title="Wink" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thank you to all for answering all my questions so far, especially when the average internet board would eat somebody alive for something like this.</div>
<br />Let me tell you part of why I <a href="http://en.wikipedia.org/wiki/Wikipedia:Please_do_not_bite_the_newcomers" class="postlink">don't bite newbies</a>: I want to help demonstrate the legality of NES emulators. To be legal under US law, a copying technology has to have a substantial noninfringing use. Debian (and hence Ubuntu) accepts NES emulators, but Fedora doesn't because someone on fedora-legal thinks the three dozen or so noninfringing ROMs on pdroms.de are not substantial compared to the hundreds of infringing ROMs in a typical GoodNES set. But every time we train an eager newbie to be an NES coder or artist, we potentially get one step closer to a substantial library of playable homebrew games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Mon Jan 03, 2011 12:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ca65 delegates placement of code in the binary image to the linker.</div><br />So then, does .org do anything at all in ca65 asm?<br /></div>Yeah, it screws it up, don't use it.  Seriously, I tried to use ".org" to create a very specific layout for my zero-page variables, to make viewing them in FCEUX's debugger easier.  However, after using ".org" and ".reloc" a few times, the assembler produced unlinkable code.  I don't remember the exact error.  So I replaced my usage of ".org" with lots of ".aligns" and ".assert" and I hand-tune my variable declaration list whenever an assert fails.  I also use lots of "structs", but I'm a C junkie. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Ex:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;; For ease of debugging, we want the &quot;Yar&quot; and &quot;Quotile&quot; at multiples of 16<br /><br />.align 16<br />.assert &#40;* = $30&#41;, error, &quot;Zero-page layout&quot;<br />qotile_obj:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.tag&nbsp; &nbsp; OBJ<br />qotile_dat:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.tag&nbsp; &nbsp; QOTILE<br /><br />.align 16<br />.assert &#40;* = $40&#41;, error, &quot;Zero-page layout&quot;<br />yar1_obj:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.tag&nbsp; &nbsp; OBJ<br />bullet1_obj:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .tag&nbsp; &nbsp; OBJ<br /></div><br /><br /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yes, just like a typical C toolchain.</div><br />Ok. It sounds stupid but I didn't realize it was so. It didn't help that other assemblers simply skip the linker step... With this in mind, my project assembles and links, and then plays in FCEUX without generating an error!, but the screen is blank and nothing happens... I don't have the linker set up correctly yet...<br /></div><br />If you wish, post your linker config somewhere and we'll take a look at it.<br />I also recommend that you enable the linker map file and debug file and review them.  They will show you where the linker actually put stuff.<br /><br />Also just load the ROM into FCEUX and look at it in the debugger.  Are the three 6502 vectors ($fffa - $ffff) set properly?<br /><br />You can use FCEUX's debugger to single-step through the execution of your ROM.  FCEUX can also take as input a "symbol file", but I'm yet to write a tool to convert the ld65's ".deb" file into something that pleases FCEUX.  When I do, I'll happily share it (but it will be in perl).  Tepples might be willing to create one in python, or convert mine.  I don't know python.<br /><br /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">@clueless: Thank you for the script. I don't know Perl (I know some Python, but have never written anything major in it), but I have to get around to learning it sometime...<br /></div><br />Sure!  I believe in sharing and giving back to the community and helping anyone that genuinely wants it.<br /><br /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Also, in your thread on the second page there's a link to <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=2997">http://nesdev.com/bbs/viewtopic.php?t=2997</a><!-- m --> . Where is the patch at/available for download though?<br /></div><br />I think that you are slightly mistaken.  I did not create that thread, I have no posts in it, and its only one page long.<br /><br />I read that thread when it came out.  I never noticed the bug in ca65.  Since my code works fine, I've not bothered to patch.  This is what I use:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">djenkins@hera ~/code/nesyar $ ca65 --version<br />ca65 V2.13.2 - &#40;C&#41; Copyright 1998-2005 Ullrich von Bassewitz<br /></div><br /><br /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Thank you to all for answering all my questions so far, especially when the average internet board would eat somebody alive for something like this.</div><br />Certainly.  You are most welcome.  We feed rude noobs to NovaYoshi.  We keep the good ones.<br /><br />One more suggestion: Read the ca65 and ld65 docs a few times.  Just pick some small section and read about a feature.  You might not use it right away, but you'll learn what is available for when you might need it.<br /><br />You won't need all features either, so if something looks really bizarre, skip it.<br /><br />If you need to, write your own run-time "assert" logic.  When an assertion fails, execute the invalid instruction $02.  This will "halt" the CPU.  Then set a breakpoint inside FCEUX to trip on invalid opcodes (there is a checkbox for this).<br />Ex:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda player_energy<br />&nbsp; cmp #MAX_ENERGY<br />&nbsp; bcc ok<br />&nbsp; .byte $02&nbsp; ;; 6502 &quot;KILL&quot; opcode.<br />ok:<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Jan 03, 2011 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">According to <a href="http://www.cc65.org/doc/ca65-11.html#ss11.72" class="postlink">the manual</a>, it turns on absolute code mode temporarily. It's one way of making overlay code intended to be copied to RAM before execution; the other (preferred?) way is to specify a segment in the link script whose load and run addresses differ.</div>
<br />
<br />I had been curious about the load and run addresses, but have never tried to use them because I (wrongly) thought it had to do with the C compiler's startup code or something.  How does that work, in practice?
<br />
<br />I've often used .org like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">outside_label:<br />.org $0700<br />inside_label:<br />&nbsp; nop<br />.reloc<br /><br />&nbsp;lda outside_label,x<br />&nbsp;sta inside_label,x<br />&nbsp;jmp inside_label<br /></div>
<br />
<br />But any kind of cleaner method would be nice to know, this is really useful when you have a lot of RAM.  I know I've been doing it "wrong", but haven't needed to change that yet.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 03, 2011 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The "load address" is where the code is placed in the ROM, and the "run address" is where you're expected to copy it in RAM before running it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>18</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>