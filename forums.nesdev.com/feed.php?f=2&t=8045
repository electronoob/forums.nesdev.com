<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=8045" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-08-26T22:20:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=8045</id>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-08-26T22:20:09-07:00</updated>
<published>2012-08-26T22:20:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98655#p98655</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98655#p98655"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98655#p98655"><![CDATA[
No problem! I'm just glad I <em>finally</em> had an idea that was actually helpful to someone. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Sun Aug 26, 2012 10:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-08-26T15:38:30-07:00</updated>
<published>2012-08-26T15:38:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98639#p98639</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98639#p98639"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98639#p98639"><![CDATA[
That's a pretty good idea, Drag. I once thought about saving some space by adding a second sprite decoding routine that would use the more compact rectangle representation, for simpler sprites. Each object would then call one routine or the other depending on which kind of sprites they used, but your idea is better. I already had planned something else for the unused attribute bits though (some sort of priority system), but I guess I can find another solution for that. Thanks a lot for the idea!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Aug 26, 2012 3:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-08-26T09:44:52-07:00</updated>
<published>2012-08-26T09:44:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98629#p98629</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98629#p98629"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98629#p98629"><![CDATA[
Don't forget, you have 3 unused bits in the attribute byte of each sprite. If you seriously needed to have compact metasprite data, here's something you can try:<br /><br />A lot of times, a metasprite's sprite tiles are arranged back-to-back in a rectangle or a square:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;1&#93;&#91;2&#93;<br />&#91;3&#93;&#91;4&#93;<br />&#91;5&#93;&#91;6&#93;</div><br />If you omit the X and Y positions of the sprite tiles, you can have your metasprite routine &quot;assume&quot; that you want each sprite tile to be 8 pixels to the right of the previous one. That way, you only need to store a tile and an attribute byte.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;1&#93;&#91;2&#93;&#91;3&#93;&#91;4&#93; ---&gt;</div><br />One of the unused bits in the attribute byte can act as a &quot;carriage return&quot;, placing the sprite tile on a new row 8 pixels underneath the previous one.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;1&#93;&#91;2&#93;! |<br />&#91;3&#93;&#91;4&#93;! |<br />&#91;5&#93;     v</div><br />Finally, if you needed to be fancy and have overlaying sprite tiles, you can have another unused bit specify that the sprite tile comes with X and Y coordinates.<br /><br />If most of your sprites were simple squares/rectangles, storing your data like this would offer huge improvements on space, but it would add some overhead in your metasprite-decoding routine.<br /><br />Edit: Diagrams.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Sun Aug 26, 2012 9:44 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-08-22T14:04:25-07:00</updated>
<published>2012-08-22T14:04:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98477#p98477</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98477#p98477"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98477#p98477"><![CDATA[
If an overhead game supports 8-directional movement, northeast and southeast can be flipped to make northwest and southwest.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Aug 22, 2012 2:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-08-22T12:28:30-07:00</updated>
<published>2012-08-22T12:28:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98460#p98460</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98460#p98460"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98460#p98460"><![CDATA[
I do sprite flipping dynamically, but that's in a platformer. Other types of games, such as RPGs, usually require different sprite definitions for facing up and down, and only left/right can take advantage of flipping. If I'm not mistaken, the game Bregalad is working on has an overhead view.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Aug 22, 2012 12:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-08-22T11:54:42-07:00</updated>
<published>2012-08-22T11:54:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98457#p98457</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98457#p98457"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98457#p98457"><![CDATA[
Sounds to me like figuring out how to reverse the sprite data in would be worth it. I mean, since it offers H/V sprite flips, just find the coorrds for each sprite, and basically mirror it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Wed Aug 22, 2012 11:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-08-22T11:45:53-07:00</updated>
<published>2012-08-22T11:45:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98456#p98456</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98456#p98456"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98456#p98456"><![CDATA[
Yes, metasprites takes SO much space !<br />It's 4 bytes per sprite, usually there is 4-6 sprites in a metasprite -&gt; 16-24 bytes per metasprite, and usually 2-3 frames for enemies in 4 direction, that makes between 128 and 288 bytes per enemy, not counting several pointers needed to decode the metasprites !<br />Also bosses are larger which makes this even bigger.<br /><br />I tried to compress some of my enemies and player metasprites sheet, apparently it compresses about 18% with ROM LZ77, which is not super-ultra cool but better than nothing.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Aug 22, 2012 11:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2012-08-22T00:34:06-07:00</updated>
<published>2012-08-22T00:34:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98433#p98433</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98433#p98433"/>
<title type="html"><![CDATA[Re:]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98433#p98433"><![CDATA[
Just now looking at this thread.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I have no idea what I'm talking about. That being said, here is a solution used by Genesis homebrew developers: <br /><!-- m --><a class="postlink" href="https://github.com/sikthehedgehog/mdtools">https://github.com/sikthehedgehog/mdtools</a><!-- m --><br /></div><br />Nice but unfortunately it looks like it's specifically for graphics. I'm no expert, but a codec made for graphics might not work well with other kind of data. I might be wrong though.</div><br />SLZ is a generic compression format, but it's LZ77 so it doesn't meet the &quot;random access&quot; criteria (on the Mega Drive you usually can afford to decompress entire chunks of data anyway). Also it doesn't meet the &quot;real-time&quot; criteria (by this I mean you probably should avoid using it in the middle of gameplay as it may cause framerate drops).<br /><br />UFTC was designed for decompressing sprites on the fly, and of course it <em>does</em> allow random access... for tiles. The format is designed specifically for Mega Drive tiles, and even moreso, it was designed to play to 68000's strengths, meaning it'd do bad on the NES horribly. Although I suppose you could adapt the general idea for something else to match whatever requirements you need. It's just a glorified dictionary-based format, after all.<br /><br />In practice if you really need real-time random access your best bet is to just make a dedicated format for the specific situation (as is the deal with UFTC and sprites). Dictionaries help a lot though, since you can use them as a replacement for sliding windows. And if you wonder, no, neither of those two algorithms use any RAM other than the required to store the decompressed data =P<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Wed Aug 22, 2012 12:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-08-21T12:57:22-07:00</updated>
<published>2012-08-21T12:57:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98414#p98414</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98414#p98414"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98414#p98414"><![CDATA[
Sorry, but the lack of any 6502 code was intentional.<br /><br />Probably because I want to force the users to fully understand how the encoding actually work (instead of just copying some code and not understanding anything) - and because there is several ways decoding the same data could be done, each one with it's pros &amp; cons, and I don't see why the decoding routine should be imposed to the user.<br /><br />I'll have to study hash codes harder and optimize my encodings a little - currently I don't really understand how this hash thing works at all, so don't expect the revised to come until some time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Aug 21, 2012 12:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Denine]]></name></author>
<updated>2012-08-20T07:36:41-07:00</updated>
<published>2012-08-20T07:36:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98369#p98369</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98369#p98369"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98369#p98369"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />Interesting, seems very good. Are the 6502 decompressors available anywhere?<br /></div><br />I second this.<br />It would be really handy to have the decompressions implementation on actuall NES, or 6502 in general.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4239">Denine</a> — Mon Aug 20, 2012 7:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-08-18T15:23:47-07:00</updated>
<published>2012-08-18T15:23:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98331#p98331</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98331#p98331"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98331#p98331"><![CDATA[
The generation of the hash itself need not be so optimized; a rolling hash is a fast way to make a hash, but it's not necessarily the best hash to use. The part that you need to speed up the most is the searching, for which any hash will do. Here's an alternative to a rolling hash:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">input: string&#91;n&#93;<br />output: hash_strings&#91;16&#93;&#91;n&#93;<br /><br />for i=0; i &lt; 16; ++i<br />  for j=0; j &lt; n; ++j<br />    hash = HASH_INIT // appropriate starting value<br />    for k=0; k &lt; i; ++k<br />      p = j + k<br />      if (p &gt;= n) break<br />      hash = hash_next( hash, string&#91;p&#93; ) // hash function that takes a byte, appends to hash<br />      hash_strings&#91;k&#93;&#91;j&#93; = hash<br /></div><br /><br />Since you need to hash for mutliple lengths, something like this might be just as efficient as a rolling hash, and might allow you to choose a stronger hash function. The hashing part is only O(n) anyway, or maybe O(m^2 * n) where m is the number of string lengths you need. The real savings come from the efficient search you do next.<br /><br />Once you have your hashed strings, you can build a hash table or just some sort of sort or balanced tree (either way, easy to accomplish in O(n log n)), and all your matching strings will be grouped together in the same hash bucket / contiguous sort region / branch.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sat Aug 18, 2012 3:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-08-18T14:35:24-07:00</updated>
<published>2012-08-18T14:35:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98330#p98330</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98330#p98330"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98330#p98330"><![CDATA[
It looks interesting and it sounds like this hash thing is probably the optimisation I was looking for. Also I remember the Java has built-in hash function, even though I have no idea what it is and how exactly it is used.<br />Sorry for sucking so much but I'll have to study this some other day, as right now I'll have to go to bed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Aug 18, 2012 2:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-08-18T14:29:26-07:00</updated>
<published>2012-08-18T14:29:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98329#p98329</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98329#p98329"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98329#p98329"><![CDATA[
Here's the quick version:  (from Rsync's source code, LPGL.  Somewhat based on adler32)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* the Rollsum struct type*/<br />typedef struct _Rollsum {<br />    unsigned long count;               /* count of bytes included in sum */<br />    unsigned long s1;                  /* s1 part of sum */<br />    unsigned long s2;                  /* s2 part of sum */<br />} Rollsum;<br /><br />/* macro implementations of simple routines */<br />#define RollsumInit(sum) { \<br />    (sum)-&gt;count=(sum)-&gt;s1=(sum)-&gt;s2=0; \<br />}<br /><br />#define RollsumRotate(sum,out,in) { \<br />    (sum)-&gt;s1 += (unsigned char)(in) - (unsigned char)(out); \<br />    (sum)-&gt;s2 += (sum)-&gt;s1 - (sum)-&gt;count*((unsigned char)(out)+ROLLSUM_CHAR_OFFSET); \<br />}<br /><br />#define RollsumRollin(sum,c) { \<br />    (sum)-&gt;s1 += ((unsigned char)(c)+ROLLSUM_CHAR_OFFSET); \<br />    (sum)-&gt;s2 += (sum)-&gt;s1; \<br />    (sum)-&gt;count++; \<br />}<br /><br />#define RollsumRollout(sum,c) { \<br />    (sum)-&gt;s1 -= ((unsigned char)(c)+ROLLSUM_CHAR_OFFSET); \<br />    (sum)-&gt;s2 -= (sum)-&gt;count*((unsigned char)(c)+ROLLSUM_CHAR_OFFSET); \<br />    (sum)-&gt;count--; \<br />}<br /><br />#define RollsumDigest(sum) (((sum)-&gt;s2 &lt;&lt; 16) | ((sum)-&gt;s1 &amp; 0xffff))<br /></div><br /><br />Rolling hash function: not that great for resisting hash collisions, but very fast to compute, and very fast to compute incrementally.<br />You roll bytes in and out.  So for a length of 16, you'd roll in 16 bytes, then after that, old bytes get rolled out when you roll new bytes in.<br />Combine this with a hash table (that uses this hash algorithm), and you can find which strings match what you are looking for easily.  Must be the same length as your current hash.  Since hash collisions will be common, combine hash matching with full memory comparison.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Aug 18, 2012 2:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-08-18T14:09:29-07:00</updated>
<published>2012-08-18T14:09:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98328#p98328</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98328#p98328"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98328#p98328"><![CDATA[
Maybe ? I have no idea what it is. <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Aug 18, 2012 2:09 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-08-18T13:26:26-07:00</updated>
<published>2012-08-18T13:26:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98327#p98327</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98327#p98327"/>
<title type="html"><![CDATA[Re: Generic compression on NES - *done*]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8045&amp;p=98327#p98327"><![CDATA[
Whenever I need to search a big string for multiple strings, I always turn to Rolling Hash functions.  Would anything like that help here?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Aug 18, 2012 1:26 pm</p><hr />
]]></content>
</entry>
</feed>