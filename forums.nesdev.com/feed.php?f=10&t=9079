<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=9079" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-07-08T01:58:55-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=9079</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-07-08T01:58:55-07:00</updated>
<published>2012-07-08T01:58:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96617#p96617</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96617#p96617"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96617#p96617"><![CDATA[
Apparently, Nintendo kept the tradition to store OAM and palettes "outside of VRAM" all though the years... The Nintendo DS still works exactly like that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Jul 08, 2012 1:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-07-07T19:33:08-07:00</updated>
<published>2012-07-07T19:33:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96609#p96609</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96609#p96609"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96609#p96609"><![CDATA[
<div class="quotetitle">noattack wrote:</div><div class="quotecontent"><br />So is it technically correct to say that OAM is part of the PPU but not part of VRAM, since it has its own bus and memory map, while the palette is both part of the PPU and VRAM?<br /></div><br /><br />I'm comfortable with that first statement.<br /><br />That second statement, I wouldn't say the palette is part of VRAM, because the palette isn't actually stored in the VRAM itself. It's part of the memory map, yes, but it isn't actually stored in any VRAM that you may connect to the PPU; instead, they are seperate registers in the PPU itself.<br /><br />Edit: Just for clarification, the reason I don't consider the palette to be part of VRAM is because the palette does not depend on any memory you can connect to the PPU; those bytes at PPU$3F00-$3FFF are always there, and they're completely internal to the PPU; the cartridge cannot manipulate them in any way, aside from having the software itself change them via $2006/$2007.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Sat Jul 07, 2012 7:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-07-07T13:45:48-07:00</updated>
<published>2012-07-07T13:45:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96596#p96596</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96596#p96596"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96596#p96596"><![CDATA[
Palette is part of the PPU's memory map, it's addressed just like any other PPU memory.  But it is not on a separate chip, it's part of the PPU itself.<br />OAM is separate from the PPU's memory map.  It's 256 bytes (some bits missing) of internal memory for the sprites, and is only accessed through the two registers that manipulate it (and the "sprite DMA" feature the CPU provides).<br /><br />There's also "secondary OAM" where it stores information for the 8 sprites it found that were in range.  It's used by the PPU itself when it does its sprite evaluation logic, and when it draws sprites.  It is completely inaccessible to the programmer.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sat Jul 07, 2012 1:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-07-07T12:13:29-07:00</updated>
<published>2012-07-07T12:13:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96593#p96593</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96593#p96593"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96593#p96593"><![CDATA[
By "home" you mean physical location, correct?<br /><ol style="list-style-type: decimal"><li>OAM (Object Attribute Memory, 256 bytes) is internal to the PPU and in a separate address space. It tells which sprites are placed where on the screen. </li><li>CGRAM (Color Generator RAM, 28 bytes) is internal to the PPU and on a separate bus while rendering is turned on, but it's hooked up "in front" of the video memory bus while rendering is turned off and the VRAM address is in $3Fxx. </li><li>CIRAM (Character Internal RAM, 2048 bytes) is outside the PPU but on the NES motherboard and connected to the video memory bus. It stores the nametables, which tell which background tiles are placed where on the screen. </li><li>CHR ROM/CHR RAM (8192 bytes) is on the cartridge and connected to the video memory bus. It stores the actual shapes of the tiles. </li></ol><br />The cartridge ultimately controls whether CIRAM and CHR ROM/RAM is enabled for a given PPU address, and a few cartridges repurpose memory on the cartridge as nametables.<br /><br />Have you ever programmed for the Game Boy, Super NES, or Game Boy Advance? If so, I might be able to explain by analogy to those.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 07, 2012 12:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[noattack]]></name></author>
<updated>2012-07-07T11:56:45-07:00</updated>
<published>2012-07-07T11:56:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96591#p96591</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96591#p96591"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96591#p96591"><![CDATA[
Thanks! I'm still not sure if that clarified the matter or further confused me.  <img src="http://forums.nesdev.com/images/smilies/icon_surprised.gif" alt=":o" title="Surprised" /> <br /><br />So is it technically correct to say that OAM is part of the PPU but not part of VRAM, since it has its own bus and memory map, while the palette is both part of the PPU and VRAM?<br /><br />To be clear, I understand how they operate and are accessed - I'm just curious about their proper <em>'home.'</em> (And the subsequent wording in the wiki.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=2462">noattack</a> — Sat Jul 07, 2012 11:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2012-07-07T10:34:11-07:00</updated>
<published>2012-07-07T10:34:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96587#p96587</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96587#p96587"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96587#p96587"><![CDATA[
I can only speak from a software perspective.  If you are looking for answers as to how the hardware is physically layed out, I can't help with that.  Below answers are conceptual only and may or may not be how the actual hardware is layed out.<br /><br /><br />Oam is in a separate block of memory and is accessed through it's own bus.  This bus is [indirectly] accessed by the CPU via $2003 (A bits) and $2004 (D bits)<br /><br />Palettes afaik do not have a bus and are totally internal to the PPU (possibly they're just a series of registers).<br /><br />The PPU sort of "hijacks" address $3Fxx to put palettes there.  But it's sort of like a special case, and isn't without side-effects (palettes are read differently when you try to read them via $2007)<br /><br /><br />The key difference is that for oam/nt/chr reads, the ppu has to perform a read on the appropriate bus.  But the palettes are immediately available for direct access so they can be accessed much more quickly.<br /><br /><br />EDIT:  also waddup Drag!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat Jul 07, 2012 10:34 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2012-07-07T10:26:53-07:00</updated>
<published>2012-07-07T10:26:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96586#p96586</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96586#p96586"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96586#p96586"><![CDATA[
I agree, "internal to the PPU itself" may not be clear.<br /><br />I think it means that the memory is physically inside the PPU chip, and directly connected to the circuitry that needs it, instead of being an external RAM chip connected to the PPU via the bus.<br /><br />However, the PPU can still provide access to this internal memory, and it does: $2006/2007 at address $3Fxx to access the palette, and $2003/2004 to access the OAM.<br /><br />I think the OAM is a separate register to make the sprite DMA a little less complicated (all it does is write to $2004 256 times. It doesn't need to set addresses or anything, as far as I know). However, they could've put the OAM into the address map, or moved the palette out of the address map and into separate registers like the OAM. Having the palette be accessed by its own separate registers would've made mid-screen palette changes a heck of a lot easier! <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Sat Jul 07, 2012 10:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[noattack]]></name></author>
<updated>2012-07-07T09:24:33-07:00</updated>
<published>2012-07-07T09:24:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96584#p96584</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96584#p96584"/>
<title type="html"><![CDATA[Clarification on OAM and palette locations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9079&amp;p=96584#p96584"><![CDATA[
From the Wiki:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Two separate, smaller address spaces hold a palette, which controls which colors are associated to various indices, and OAM (Object Attribute Memory), which stores the position, orientation, shape, and color of the sprites, or independent moving objects. These are <strong>internal to the PPU itself</strong> and use dynamic memory (which will slowly decay if the PPU is not rendering data).<br /></div><br /><br />So these are internal to the PPU, but have their own address space? Yet I see the palettes listed on the main VRAM memory map ($3F00-$3F1F) and not the OAM. What's the actual underlying physical arrangement? Both the Wiki and other documentation I've perused are unclear.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=2462">noattack</a> — Sat Jul 07, 2012 9:24 am</p><hr />
]]></content>
</entry>
</feed>