<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Doing functions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Doing functions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=285">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=285</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>family_programmer</b> [ Mon Apr 18, 2005 12:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Doing functions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was wondering, are there more optimized/effective ways to do functions or this is the way to go?
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; items in &lt;&gt; are placeholders<br /><br />; push parameters<br />lda &lt;param2&gt;<br />pha<br />lda &lt;param1&gt;<br />pha<br />; call function<br />jsr function<br /><br />function:<br />&nbsp; &nbsp;; save return address<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta &lt;somewhere&gt;<br />&nbsp; &nbsp;; get params and do something<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta $0800<br />&nbsp; &nbsp;...<br />&nbsp; &nbsp;; push return address<br />&nbsp; &nbsp;lda &lt;somewhere&gt;<br />&nbsp; &nbsp;pha<br /><br />&nbsp; &nbsp;rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Mon Apr 18, 2005 6:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When programming on the 6502, the way you access stack parameters is to do "TSX" followed by "LDA $0101,X" (last push), "LDA $0102,X" (2nd-last push), etc. to load the desired values off the stack; after the function returns, simply pop the items you pushed previously.
<br />
<br />For example:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; items in &lt;&gt; are placeholders<br /><br />; push parameters<br />lda &lt;param2&gt;<br />pha<br />lda &lt;param1&gt;<br />pha<br />; call function<br />jsr function<br />pla<br />pla<br />...<br /><br />function:<br />&nbsp; &nbsp;;save A/X registers &#40;optional - could alternately just state<br />&nbsp; &nbsp;; that this function kills the contents of A/X&#41;<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;tsx<br /><br />&nbsp; &nbsp;...<br />&nbsp; &nbsp;; load param1 &#40;4 bytes have been pushed already, so start at the 5th&#41;<br />&nbsp; &nbsp;lda $0105,X<br />&nbsp; &nbsp;...<br />&nbsp; &nbsp;; load param2<br />&nbsp; &nbsp;lda $0106,X<br />&nbsp; &nbsp;...<br /><br />&nbsp; &nbsp;; restore X/A regs &#40;see above&#41;<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;rts<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Mon Apr 18, 2005 1:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a book (6502 Assembly Language Subroutines by Leventhal/Saville) that has all it's subroutines the way family_programmer showed.
<br />
<br />It just seems odd, like it's subverting the purpose of the JSR/RTS, heh.  Doing 2 JMPs (the retern one being indirect) might save some cycles. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />But the way I do it is in cases where I've only got 3 parameters, is just loading them into A, X, and Y.  And I use temp memory in zeropage for any further parameters.  I don't know if it's the most optimized, but it's easy to write that way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beef3667</b> [ Mon May 02, 2005 6:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Stack Pointer</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there a way to store the stack pointer, push your values and such onto the stack and then access them from your previous reference to the stack pointer?
<br />
<br />It seems this would be easier than trying to calculate the offsets from the top of the stack as then the reference (in this case not the actual stack pointer but the previous address of it before you pushed all your values onto the stack) wouldn't keep changing. Any new items added would then just get a new offset value and the old offset values would not need to be recalculated.
<br />
<br />I've been trying to implement this in code but it seems I'm missing an instruction or just having a crappy non-thinking day. Anybody know how you would go about implementing this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>family_programmer</b> [ Tue May 03, 2005 12:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />in my opinion, membler's way (JMP/JMP indirect) is the best to go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Tue May 03, 2005 12:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stack Pointer</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">beef3667 wrote:</div><div class="quotecontent">Is there a way to store the stack pointer, push your values and such onto the stack and then access them from your previous reference to the stack pointer?</div><br /><br />I believe this is what I just described. The stack pointer always points to the next memory location where a value will be 'pushed'. By transferring S to X, you can read values at an arbitrary distance from the top of the stack ($0101,X will give you the last value pushed, $0102,X will give you the 2nd-last value, $0103,X for the 3rd-last value, etc).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It seems this would be easier than trying to calculate the offsets from the top of the stack as then the reference (in this case not the actual stack pointer but the previous address of it before you pushed all your values onto the stack) wouldn't keep changing. Any new items added would then just get a new offset value and the old offset values would not need to be recalculated.</div>
<br />
<br />As long as a function has a fixed number of 'parameters', the "base address" for each parameter will always be the same. In my example, param1 will always be at $0105,X and param2 will always be at $0106,X (if X/A are not pushed onto the stack at the beginning, then the parameters will be at $0103,X and $0104,X, respectively).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beef3667</b> [ Fri May 06, 2005 10:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stack Pointer</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah I was trying to do it in a bottom up fashion:
<br />
<br />
<br />----------------------------
<br />Empty
<br />---------------------------- &lt;--- Stack pointer
<br />35
<br />----------------------------
<br />.......
<br />----------------------------
<br />8
<br />---------------------------- &lt;--- offset of one...
<br />96                                 
<br />---------------------------- &lt;--- Static reference that does not change.
<br />                                      
<br />
<br />
<br />If in an if-then statement in a function where one branch pushed values onto the stack and one didn't you would need to calculate new offsets from the stack pointer right? It just seems if you originally had a static reference to certain values that you knew you would need, say where 96 is stored, and a couple memory addresses nearby (kinda like a struct?) it would be easier to code. Especially if you made this structure before any functions are called and you are a couple of functions deep where any of these functions may or may not have pushed values onto the stack.
<br />
<br />Sorry this is kind of off topic from functions now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Tue Jun 14, 2005 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Frame pointer</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>I believe this is what I just described. The stack pointer always points to the next memory location where a value will be 'pushed'. By transferring S to X, you can read values at an arbitrary distance from the top of the stack ($0101,X will give you the last value pushed, $0102,X will give you the 2nd-last value, $0103,X for the 3rd-last value, etc). </em>
<br />
<br />This is called a frame pointer in other  architectures and is easy to use.
<br />
<br />The frame pointer points to all of the parameters pushed on the stack.[/i]

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>