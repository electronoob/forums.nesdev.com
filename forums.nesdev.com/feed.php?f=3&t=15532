<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=15532" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-04-20T00:02:25-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=15532</id>
<entry>
<author><name><![CDATA[Eugene.S]]></name></author>
<updated>2017-04-20T00:02:25-07:00</updated>
<published>2017-04-20T00:02:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=193834#p193834</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=193834#p193834"/>
<title type="html"><![CDATA[Re: Nestopia and it's optimizations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=193834#p193834"><![CDATA[
<div class="quotetitle">Sour wrote:</div><div class="quotecontent"><br />I just released Mesen 0.8.1 which contains a fair amount of speed optimizations.<br />I know that it's still nowhere near as fast as Nestopia (and most likely never will be) - but I'm curious how much of an impact the changes had on your 1.5ghz Atom CPU.<br /><br />Is there any chance you could compare 0.8.0 and 0.8.1 with a few games and let me know how much of a speed improvement you get?<br /><br />On my i5 750 I get +22%, on an i3 I get +23%, and on a very old AMD Opteron (dual-core 2.0ghz) I get +26% performance. With a bit of luck, the Atom might get a +25-30% performance boost, too.<br /></div><br /><!-- m --><a class="postlink" href="https://github.com/SourMesen/Mesen/commit/619bc956bded4588acf760ac3b2f83af24f10b84">https://github.com/SourMesen/Mesen/comm ... af24f10b84</a><!-- m --><br /><!-- m --><a class="postlink" href="https://github.com/SourMesen/Mesen/commit/bf979be756ea71436623df25a71f9e9a99ce31e2">https://github.com/SourMesen/Mesen/comm ... 9a99ce31e2</a><!-- m --><br /><br />Here is results of testing, <br />intel Atom N550 1.50 GHz, 2 cores / 4 threads:<br /><br />Super Mario Bros:<br />0.8.0 - 38~45 FPS<br />0.8.1 - 49~56 FPS<br /><br />Rockman\Megaman 6:<br />0.8.0 - 36~42 FPS<br />0.8.1 - 46~55 FPS<br /><br />Akumajou Densetsu (CV3 japan with VRC6):<br />0.8.0 - 23~31 FPS<br />0.8.1 - 35~42 FPS<br /><br />Notice about task manager core utilisation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3884">Eugene.S</a> — Thu Apr 20, 2017 12:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Eugene.S]]></name></author>
<updated>2017-02-14T23:06:32-07:00</updated>
<published>2017-02-14T23:06:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189138#p189138</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189138#p189138"/>
<title type="html"><![CDATA[Re: Nestopia and it's optimizations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189138#p189138"><![CDATA[
You're right, nestopia core code is very hard to maintain.<br />FHorse takes 2 days of debugging to understand and <a href="https://github.com/rdanbrook/nestopia/commit/fcacc0babfa3564566c4bc86d9c35baa5683802e" class="postlink">solve bug</a> in NstPpu,<br />and it was too difficult!<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Watching routine Ppu::Run you can easily see that the flag of VBLANK and the NMI are performed to cycles.hClock 681 (HCLOCK_VBLANK_0), 682 (HCLOCK_VBLANK_1) and 684 (HCLOCK_VBLANK_2) that is virtually one scanline after the VACTIVE (240) scanlines. This is fine for PPU_RP2C02 (NTSC) and PPU_RP2C07 (PAL) but not for PPU_DENDY that needs another 50 sleep scanlines. What I did was nothing more than adding these 50 scanlines first of the HCLOCK_VBLANK_0 that are performed only when the variable (ssleep &gt;= 0) and this is true only in the case of PPU_DENDY. This way I left intact the logic with which the routine work for NTSC and PAL, intervening only for Dendy mode because ssleep will always be -1 for PPU_RP2C02 and PPU_RP2C07.<br />I hope that I was able to explain well.<br /></div><br />---<br />By the way, even &quot;easy&quot; things, like minor improvements to NSF-player, FDS, and region selector are difficult too.<br />Feos tried to fix some other <a href="https://github.com/rdanbrook/nestopia/issues/215" class="postlink">minor bugs</a>, but can solve only FDS.<br /><a href="https://github.com/vadosnaprimer/nestopia/commit/fca4ad3d1e92a41e3ef19c6542a813df53d4eb1f" class="postlink">NSF-player</a> and <a href="https://github.com/vadosnaprimer/nestopia/commit/80cf2d282f6be297b65dec0545007cbb0f518b1f" class="postlink">region selector</a> still need to fix. <br />Current patches by feos are broken.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3884">Eugene.S</a> — Tue Feb 14, 2017 11:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sour]]></name></author>
<updated>2017-02-14T19:06:34-07:00</updated>
<published>2017-02-14T19:06:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189124#p189124</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189124#p189124"/>
<title type="html"><![CDATA[Re: Nestopia and it's optimizations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189124#p189124"><![CDATA[
Just to give my 2 cents on the Mesen part of things:<br />Mesen is more or less optimized to run on at least 3 different threads (emulation, frame decoding/filtering, rendering), so running it on any dual-core will result in sub-par performance, especially since I abuse spin-locks due to their low latency - but spin locks only work well so long as you actually have free cores to run them on without slowing down the other thread you are waiting on.<br />On the upside, this design means Mesen can run HDNes' HD packs with very little FPS drop on a quad core machine (e.g Super Mario Bros goes from ~250fps to maybe ~190fps on my machine)<br /><br />Also, a lot of features result in small performance losses - e.g: debugger, cheats, unlimited sprites, support for HDNes' HD pack format, etc.  I try to optimize where I can (using VS' profiler mostly) - but I'm not going to start trying to optimize cache misses in an era where most low end computers are already able to run Mesen at 2-3x normal speed.  This made a lot of sense in 2005, but not so much in 2017 (Stuff like raspberry pis aside)<br /><br />And, this is a matter of taste of course (I'm sure some people might say the same about Mesen's code), but Nestopia's code can be very hard to process.  In particular, stuff like this drives me insane:<br /><!-- m --><a class="postlink" href="https://github.com/rdanbrook/nestopia/blob/master/source/core/NstPpu.cpp#L1435">https://github.com/rdanbrook/nestopia/b ... .cpp#L1435</a><!-- m --><br />It might result in slightly faster code, but in my opinion makes the code so much harder to read.<br />This kind of thing also leads to Nestopia's PPU code being 3.4k lines, against Mesen's 1k lines.<br /><br />P.S: I'm not trying to hate on Nestopia or anything - it's a great emulator, and I've used it as a reference countless of times!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7406">Sour</a> — Tue Feb 14, 2017 7:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Eugene.S]]></name></author>
<updated>2017-02-13T23:25:40-07:00</updated>
<published>2017-02-13T23:25:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189094#p189094</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189094#p189094"/>
<title type="html"><![CDATA[Nestopia and it's optimizations]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15532&amp;p=189094#p189094"><![CDATA[
Hi, nesdev.<br />I think this info will be interesting.<br /><br />Q:<br /><div class="quotetitle">Me wrote:</div><div class="quotecontent"><br />Hi, Marty.<br /><br />Just want to tell thank you again<br />for great nestopia emulation core.<br /><br />I did the test compare performance of modern cycle-accurate<br />emulators (written on C and C++) vs nestopia<br />on old intel-atom N550 1.50 GHz machine.<br /><br />Results is amazing. <br /><br />- puNES 0.100<br />- nintendulator 0.975b<br />- mesen 0.7.0<br />- bizHawk 1.11.9<br />- rockNES 5.41<br /><br />All of them eats 100% of CPU core and cannot<br />run fullspeed on the old low-powered netbook CPU. It gives only 30-40 FPS without frameskipping.<br />(real performance of Atom N550 is about good Pentuim 3~1000MHz)<br /><br />Nestopia result is only 40-45% CPU load, and it run at 60FPS fullspeed!<br />FCEUX with old inaccurate scanline-based PPU render + low sound quality have the same performance.<br /><br />For now, nestopia-libretro core (in fact it's your core with minimal modifications by Rdanbrook)<br />work perfect on the Raspberry Pi 3.<br /><br />I wonder how you did so _heavy_ optimization of your cycle accurate emulator!<br /></div><br />A:<br /><div class="quotetitle">Marty wrote:</div><div class="quotecontent"><br />Thanks Eugene. Nice to hear from you again, hope you are well.<br />Doing code optimizations without sacrifizing accuracy can be<br />real fun and I'm happy to see it payed off.<br /><br />As for the various optimizations I did to Nestopia at the time,<br />I heavily used Intel Vtune and AMD CodeAnalyst profiler to<br />find hotspots in the code and also let the compiled IA-32 assembly<br />code guide me through it.<br /><br />I also made heavy use of (or abused if you will) C++ template style<br />programming, or concept-oriented programming as I'd like to call it,<br />to let the compiler do as much work for me as possible and allowing<br />me to not needing to repeat myself in code.<br /><br />Using the Intel C++ Compiler and Microsoft Visual Studio at the time, I <br />also fine-tuned many parts of the code through compiler directives to give<br />hints to the compiler on what to optimize for speed and what to optimize for<br />size.<br /><br />As a programmer, having a knowledge of low level stuff such as branch-prediction, cache-lines<br />and other things helped a lot during development. Even if you're developing something in a high-level<br />language such as Java, C#, Python, I believe you can still influence performance a great deal in the way<br />you structure and arrange your code.<br /><br />For reference and maybe not surprisingly, the most critical method for performance in the whole Nestopia code<br />base I remember was Ppu::renderPixel(). That one I remember optimizing to be ~20FPS faster just by re-arranging<br />some statements. That was surely a branch-condition killer, but by allowing the CPU to not stall and do other work in parallell made it almost free.<br /></div><br /><br />21.01.2017<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3884">Eugene.S</a> — Mon Feb 13, 2017 11:25 pm</p><hr />
]]></content>
</entry>
</feed>