<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Fixing my PPU</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Fixing my PPU</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10817">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=10817</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Mon Dec 23, 2013 2:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright guys, I'm back.  School is over and I'm ready to work on my NES emulator again.  I'm still working on getting backgrounds to render correctly.  I've tested the individual functions of my PPU and they *seem* to work correctly on their own.  With that said, rendering still isn't correct, so I have a few questions I'd like to ask.<br /><br />1. On the PPU rendering diagram on the wiki, there is a line that states that the PPU doesn't output a pixel until cycle 4.  If the final pixel is rendered on cycle 256 and the screen is 256 pixels wide, shouldn't the first pixel be rendered on cycle 1 (this is what I'm doing).<br />2. Am I getting my background tile addresses correctly?  I'll include the current code that I am using, but I cannot for the life of me find where I found the document that gave me this information (namefetch holds the data at the nametable address):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if(reg2000 &amp; 0x10) tileAddress = 0x1000 | (nameFetch &lt;&lt; 4) | ((ppuAddress &amp; 0x7000) &gt;&gt; 12);<br />else tileAddress = 0x0000 | (nameFetch &lt;&lt; 4) | ((ppuAddress &amp; 0x7000) &gt;&gt; 12);</div><br />3. Do the attribute registers actually shift?  Since each attribute register is just filled up with either eight 1's or eight 0's, isn't it okay to just leave the registers until the next 8 cycles pass?<br />4. I'm currently using the RGB color values for the NES pallete from the NESDOC.pdf from 2004. Are these correct?  Or is a there a better source for the RGB values?<br /><br />Those are all the questions I can come up with for now.  I'll include two pictures that show what my screen looks like.  The blue blocks is the screen I get when I first load the game, and the white blocks occur once the demo starts.  The right half of blocks on the white screen do move up and down slowly, so I know at least something is happening.<br /><br />If it helps, here is all my code on Github: <a href="https://github.com/Dartht33bagger/NES-Emulator" class="postlink">https://github.com/Dartht33bagger/NES-Emulator</a>.  I'm not really looking for anyone to do the work for me - just put me in the right direction.  Thanks!

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> Demo screen</span><br />
		
			<a href="./download/file.php?id=1061&amp;mode=view"><img src="./download/file.php?id=1061&amp;t=1" alt="2.png" /></a><br />
			<span class="gensmall">2.png [ 13.26 KiB | Viewed 857 times ]</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> Startup screen</span><br />
		
			<a href="./download/file.php?id=1060&amp;mode=view"><img src="./download/file.php?id=1060&amp;t=1" alt="1.png" /></a><br />
			<span class="gensmall">1.png [ 16.91 KiB | Viewed 857 times ]</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Dec 23, 2013 3:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1. 1-256 are the pixel plotting cycles. That document, although fantastic, isn't perfect.<br />2. bit $10 of $2000 is correct but I don't really understand the rest of that code. How closely are you following loopy's PPU information?<br />3. Yes they shift as well. Actually always program the Attribute Shift Registers to be 16-bit and not 8-bit as stated. This is a mistake because if you don't make them 16-bit and X is not 0 then the last pixels of every tile will be without any attribute data. The first level of Castlevania is the best example. After you go into the castle look at the windows as the screen scrolls.<br />4. They are as good as any to be honest however here is the palette I and most other people use. Its for PAL;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">COLORREF PAL&#91;64&#93; =<br />{<br />&nbsp; &nbsp;0x00808080, 0x00003DA6, 0x000012B0, 0x00440096, 0x00A1005E, 0x00C70028, 0x00BA0600, 0x008C1700, 0x005C2F00, 0x00104500, 0x00054A00, 0x0000472E, 0x00004166, 0x00000000, 0x00050505, 0x00050505,<br />&nbsp; &nbsp;0x00C7C7C7, 0x000077FF, 0x002155FF, 0x008237FA, 0x00EB2FB5, 0x00FF2950, 0x00FF2200, 0x00D63200, 0x00C46200, 0x00358000, 0x00058F00, 0x00008A55, 0x000099CC, 0x00212121, 0x00090909, 0x00090909,<br />&nbsp; &nbsp;0x00FFFFFF, 0x000FD7FF, 0x0069A2FF, 0x00D480FF, 0x00FF45F3, 0x00FF618B, 0x00FF8833, 0x00FF9C12, 0x00FABC20, 0x009FE30E, 0x002BF035, 0x000CF0A4, 0x0005FBFF, 0x005E5E5E, 0x000D0D0D, 0x000D0D0D,<br />&nbsp; &nbsp;0x00FFFFFF, 0x00A6FCFF, 0x00B3ECFF, 0x00DAABEB, 0x00FFA8F9, 0x00FFABB3, 0x00FFD2B0, 0x00FFEFA6, 0x00FFF79C, 0x00D7E895, 0x00A6EDAF, 0x00A2F2DA, 0x0099FFFC, 0x00DDDDDD, 0x00111111, 0x00111111<br />};<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Dec 23, 2013 5:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Absolutely NO disrespect whatsoever but I've just been looking through your CPU code and it could do with a little love <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />.<br /><br />You repeat an awful lot of code that could just be inside of a function that opcodes of similar type (like all ADC opcodes) could call instead of repeating the ADC code every time. For instance have a ADC function that all 8 ADC opcodes can call. Otherwise this makes reading your code very hard to do.<br /><br />Have you tried to just draw 1 Name Table all at once to see if nestest.nes works? Doing so with some very basic Controller emulation is a must. If not then that should be your next move rather than doing something complicated like Loopy scrolling.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Mon Dec 23, 2013 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dartht33bagger wrote:</div><div class="quotecontent">1. On the PPU rendering diagram on the wiki, there is a line that states that the PPU doesn't output a pixel until cycle 4.  If the final pixel is rendered on cycle 256 and the screen is 256 pixels wide, shouldn't the first pixel be rendered on cycle 1 (this is what I'm doing).</div><br />The pixel <strong>starts</strong> getting rendered on cycle 1, but it doesn't actually hit the output pin until cycle 4 because the rendering is <strong>pipelined</strong>. Things like palette lookups and color emphasis happen at different stages in the pipeline, but you don't really need to worry about that.<br /><br /><div class="quotetitle">Dartht33bagger wrote:</div><div class="quotecontent">3. Do the attribute registers actually shift?  Since each attribute register is just filled up with either eight 1's or eight 0's, isn't it okay to just leave the registers until the next 8 cycles pass?</div><br /><br />Fine X scroll is used to determine which of those 8 bits you use, so either you shift it every cycle (and shift in the &quot;next&quot; bit each time as appropriate) and select the bit using fine X scroll or you use extra logic with counters to emulate the same behavior (e.g. something like &quot;if (curPixel % 8 &lt; fineX) use current attrib bit; else use next attrib bit;&quot; but actually correct).<br /><br /><div class="quotetitle">Dartht33bagger wrote:</div><div class="quotecontent">4. I'm currently using the RGB color values for the NES pallete from the NESDOC.pdf from 2004. Are these correct?  Or is a there a better source for the RGB values?</div><br />The only &quot;true&quot; RGB values are from the RP2C03, the Playchoice-10 PPU. They should probably be documented on the wiki, but I don't see them.<br /><br />The real NES palette is YIQ/YUV, which means you'll need to do a bit of math to translate it to RGB values. Fortunately, the wiki <strong>does</strong> document how to do this - see the <a href="http://wiki.nesdev.com/w/index.php/NTSC_video" class="postlink">NTSC video</a> page for more information.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Dec 23, 2013 12:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tbh, if you can get away with not doing something because it won't make a difference, then you should. For instance, rendering the first pixel at 1 instead of 4.<br /><br />Quietust, I think that in regards to his question about the palette it was more of a general one than an actual one. Obviously the palette I provided was just another one of those screen capture jobs but that's ok. It really won't make a difference if you pick one over the other. But if you can get the most accurate one then that is of course preferable. Over the years we've all learnt to use someone else's palette.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Dec 23, 2013 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Quietust wrote:</div><div class="quotecontent">The pixel <strong>starts</strong> getting rendered on cycle 1, but it doesn't actually hit the output pin until cycle 4 because the rendering is <strong>pipelined</strong>. </div><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">Tbh, if you can get away with not doing something because it won't make a difference, then you should. For instance, rendering the first pixel at 1 instead of 4.</div>Normally it won't matter, but maybe if you need to know the rendering delay for some reason, then you need to add three due to this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The only &quot;true&quot; RGB values are from the RP2C03, the Playchoice-10 PPU. They should probably be documented on the wiki, but I don't see them.</div>I don't see them either, but I think I have the RGB values in my computer, so I could add it. However, one thing I do not know about RGB PPU is whether the logic that disables the color emphasis when $xE/$xF is selected, is still applicable to the RGB PPU or not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Mon Dec 23, 2013 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">2. bit $10 of $2000 is correct but I don't really understand the rest of that code. How closely are you following loopy's PPU information?</div><br /><br />I've implemented everything from this document: <a href="http://wiki.nesdev.com/w/index.php/The_skinny_on_NES_scrolling" class="postlink">http://wiki.nesdev.com/w/index.php/The_skinny_on_NES_scrolling</a>.  I can't find anything on the wiki about how to calculate the tile address, so I have no idea where I got that piece of code in my original post.  How do I actually calculate the tile address from the nametable?<br /><br /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">Absolutely NO disrespect whatsoever but I've just been looking through your CPU code and it could do with a little love <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />.<br /><br />Have you tried to just draw 1 Name Table all at once to see if nestest.nes works? Doing so with some very basic Controller emulation is a must. If not then that should be your next move rather than doing something complicated like Loopy scrolling.</div><br /><br />I know my code isn't the best.  This is the first big project I've ever taken on, so I was learning a lot as I went.  I'm planning on cleaning everything up and optimizing the code more once I get something working.  The CPU core passes all of Blarg's tests right now, so I don't really want to mess with it until I can get a game fully running <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I'm not sure I understand what you mean by draw an entire nametable.  Do you mean just read from $2000 - $2400 and render it all at once?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Mon Dec 23, 2013 2:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could always emulate graphics in a more straight forward but less accurate way. For simple games to be playable like Donkey Kong and Donkey Kong Jr, all you need to do is draw the nametable tiles to the screen which isn't too hard. You just need a function that can draw a tile to the screen and then a couple loops can draw that on screen for you. <br /><br />When I first did PPU emulation I did not have the exact PPU cycle information available. Instead I just went with the basics and worked up from there. Atleast that way you could have decent graphics while you make sure your CPU is ironed out. It's not like it takes that much extra time writing a simple renderer that you will make obsolete later. It'll serve a useful purpose.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Dec 23, 2013 5:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dartht33bagger wrote:</div><div class="quotecontent"><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">I'm not sure I understand what you mean by draw an entire nametable.  Do you mean just read from $2000 - $2400 and render it all at once?</div></div><br /><br />Yes that. Its enough to get a lot of NROM games working like Donkey Kong etc. and nestest.nes too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Mon Dec 23, 2013 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think my main issue right now is that I don't know how to calculate the address for the lower background tile.  The skinny on NES scrolling gives the formulas for calculating the nametable address and the attribute address:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> tile address      = 0x2000 | (v &amp; 0x0FFF)<br /> attribute address = 0x23C0 | (v &amp; 0x0C00) | ((v &gt;&gt; 4) &amp; 0x38) | ((v &gt;&gt; 2) &amp; 0x07)<br /></div><br /><br />But I can't find anything on the wiki that tells me how to calculate the lower background tile address.  I know that the tile will be in the $0000 - $2000 range and that the byte read at the calculated nametable address effects the lower background tile address, but I'm not sure exactly how it effects it.  What is the formula for calculating the background tile address?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Dec 23, 2013 8:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />... &quot;lower&quot; background tile?<br /><br />The nametable contains 960 bytes of 8-bit numbers, which are then used to index into the pattern tables according to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">0s bbbb bbbb pyyy</tt>, where &quot;s&quot; is the setting in $2000, &quot;b&quot; is the value that was read from the nametable, &quot;p&quot; is the bitplane, and &quot;y&quot; is the fine y scroll for this scanline.<br /><br />Is that what you meant?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Mon Dec 23, 2013 9:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah yes!  That is what I meant.  My lower and upper background tile names came from my own code, which was obviously confusing.  Where does the bitplane bit come from?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 23, 2013 9:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It takes two bits to make each background pixel. Bit 0 of each pixel is stored in one plane ($xxx0-$xxx7), and bit 1 of each pixel is stored in the other plane ($xxx8-$xxxF). See <a href="https://en.wikipedia.org/wiki/Planar_%28computer_graphics%29" class="postlink">Planar graphics</a> and <a href="http://wiki.nesdev.com/w/index.php/PPU_pattern_tables" class="postlink">PPU pattern tables</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dartht33bagger</b> [ Tue Dec 24, 2013 3:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I made quite a bit of progress today.  I switched from freeglut to SDL 1.2 because SDL's input looked much easier.  I then took a dump of VRAM at the Donkey Kong title screen and compared my dump to a VRAM dump from Nintendulator.  The good news is that I am writing to VRAM correctly because my pattern table, name table and attribute table matched up with nintendular perfectly after I switched my mirroring mode (I accidentally had DK in vertical mirror mode).  For some reason the palette table was all $00 in Nintendulator, so I wasn't able to compare that.  I may attempt to write a function that draws the entire nametable at once instead of going pixel by pixel tomorrow.<br /><br />On the subject of input, my implementation isn't working for some reason.  First, if the CPU is trying to write to $4016, my writeRAM function turns off/on the strobe bit like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">else if(address == 0x4016)&nbsp; &nbsp;&nbsp; &nbsp;//Set or clear strobe value<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;if(data == 0x1) strobe = true;<br />&nbsp; &nbsp;&nbsp; &nbsp;else strobe = false;<br />&nbsp; &nbsp;}</div><br /><br />Then if the CPU is trying to read $4016, I have my readRAM function do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">else if(address = 0x4016)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;retval = RAM&#91;0x4016&#93; &amp; 0x1;&nbsp; &nbsp;//Grab only the first bit<br />&nbsp; &nbsp;&nbsp; &nbsp;RAM&#91;0x4016&#93; &gt;&gt;= 1;&nbsp; &nbsp;&nbsp; &nbsp;//Shift the register<br />&nbsp; &nbsp;}</div><br /><br />And finally, my actual function that gets the input is here:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void checkInput()<br />{<br />&nbsp; &nbsp;SDL_PumpEvents();<br />&nbsp; &nbsp;keyboard = SDL_GetKeyState(NULL);<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;if(keyboard&#91;SDLK_ESCAPE&#93;) quitEmu();<br /><br />&nbsp; &nbsp;//Only get key states if strobe is on<br />&nbsp; &nbsp;if(systemMemory-&gt;strobe)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;//Right<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_d&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x80; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x80;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//Left<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_a&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x40; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x40;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;//Down<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_s&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x20; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x20;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//Up<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_w&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x10; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x10;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//Start<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_RETURN&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x8; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x8;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//Select<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_l&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x4; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x4;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//B<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_LEFT&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x2; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x2;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//A<br />&nbsp; &nbsp;&nbsp; &nbsp;if(keyboard&#91;SDLK_UP&#93;) {systemMemory-&gt;RAM&#91;0x4016&#93; |= 0x1; cout &lt;&lt; hex &lt;&lt; (int)systemMemory-&gt;RAM&#91;0x4016&#93; &lt;&lt; endl;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else systemMemory-&gt;RAM&#91;0x4016&#93; &amp;= ~0x1;<br />&nbsp; &nbsp;}<br />}</div><br /><br />For some reason, strobe is never going high.  If I remove the if statement I can press all of the keys and the correct hex value will be stored in $4016.  Am I missing something on how input works?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Dec 24, 2013 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Fixing my PPU</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are misunderstanding what strobe does.<br /><br />When strobe is high, it instantly causes the controllers to reload the buttons held, which are then cached. This is different from what SDL does, which is approximately equivalent to giving you a FIFO of key presses/releases.<br /><br />The most trivial change is to replace RAM[0x4016] (which is technically wrong, but whatever) with two variables &quot;fromSDL&quot; and &quot;toNES&quot;, and reload &quot;toNES&quot; from the contents of &quot;fromSDL&quot; while strobe is high.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>