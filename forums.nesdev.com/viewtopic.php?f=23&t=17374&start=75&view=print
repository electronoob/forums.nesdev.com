<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How well can Metal Slug backgrounds be recreated with tiles?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How well can Metal Slug backgrounds be recreated with tiles?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17374">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=17374</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Tue Jun 12, 2018 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">If you figure out how many palettes or tiles you need before you do the dynamic animation routine, the dynamic animation routine can work around whatever DMA time is left.</div><br />Sounds good.<br /><br />I just remembered that Metal Slug, if it remains at 30 fps, only requires OAM to be updated every other frame.  That might leave some extra room even if CGRAM has to be updated every frame (which may not be necessary; it may be possible to reset any changed BG palettes with HDMA before the end of the frame, which would make CGRAM updates fairly rare if sprite palettes were harmonized rather than rewritten with HDMA).<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">I almost forgot, you can block move 5kB of data together to speed up DMA.  Although block moving could be kind've slow, unless you time DMA around HDMA.</div><br />Yeah, I'm not sure I like the idea of trying to manually work around the DMA crash bug.  And while I can't seem to track down any information on how the S-DD1 is addressed by the SNES, I imagine it uses a fixed source address for decompressed data, in which case you wouldn't be able to use block move anyway.  An unrolled loop would work, but if the data source is one byte wide, you can't do an unrolled loop faster than block move unless your target is in the same page as the source, and isn't 5 KB of block move 3/4 of your active CPU time?  Slow indeed.<br /><br />Considering how scripted the game is, I'm wondering if a partly scheduled OBJ VRAM partitioning might make some sense.  It sounds like you're dealing with very small chunks, which means a lot of overhead.  But if you could use somewhat constant-size slots for certain objects, you could optionally use just a few transfers, or even just one, to load such an object.  Any extra data required for an unusually large animation frame could be spilled to the general-purpose dynamic sprite area.  This might be useful for maximizing bandwidth, particularly if the S-DD1 requires a bit more setup than plain ROM.  Transferring a 70x80 explosion in 128-byte chunks seems unnecessarily fiddly...<br /><br />Maybe it could be possible to have a simple defragmentation algorithm that would rearrange VRAM to carve object slots out of dynamic sprite areas as desired during lulls in the action, by moving miscellaneous active sprites elsewhere to clear the slot.  This could allow object slots to be reversibly split into general-purpose sprite slots if necessary.  Any object corresponding to a slot type with no free instances could simply go in as individual sprites, so if you fail to clear a slot in time you just burn a bit more VBlank on the object rather than glitching out or missing important object appearances or state change cues.<br /><br />Am I making any sense?  I kinda wasn't paying much attention during the dynamic animation engine discussions, because I don't think I need one for the game I'm working on...<br /><br /><br />...It's too bad the SNES can only display black during forced blank.  Big explosions like shotgun blasts or the Slug's shells blank the screen white for a couple of frames, which could allow you to comfortably catch up with VRAM DMA if you could do VRAM DMA during a white screen.  Though it now occurs to me that if you could force blank with HDMA and get VRAM to open up during HBlank, you could transfer a good bit of extra data with HDMA because a white screen doesn't need to display any sprites.  Hmm...  maybe such explosions are too rare and unpredictable to help much?  At least you could clear a slot for the explosion graphic...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Jun 12, 2018 6:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think that would be possible.  I could search for as many free slots in a row, and occasionally defrag whenever there is free DMA and VRAM left over.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Jun 13, 2018 12:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bringing the threads of conversation together a bit:  how much CPU time does your method take?  Any idea how much this sort of thing would add?<br /><br />...<br /><br />Looking at the backgrounds for Mission 1, it seems that the use of colour is fairly modest; large areas could be done with no more than a single palette.  However, it has become evident to me that there's a lot of checkerboard dither.  This would have to be pretty carefully dealt with if one were to attempt to rescale the graphics horizontally.  It may be possible to partially automate it...<br /><br />I wonder if 8x8 attribute granularity (to partly make up for unaligned palettes in rescaled BG graphics) is worth the extra 2-3 KB of VRAM for the map data...  my first instinct is that it's not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Wed Jun 13, 2018 1:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm pretty sure it's a hypothetical at this point - maybe a team will come together around it someday, but I at least am certainly too busy right now. In any case I imagine Espozo would want to be involved; he started learning SNES dev with the idea of making this port himself.</div><br />Yeah, I would certainly be up for helping anyone if they were to attempt this. I've found out that I don't have near the perseverance to do something like this myself; I haven't programmed for the SNES at all since before the beginning of the year. Well, I found I'm never getting an Irem M92 with how prohibitively expensive they have become, so all my projects involving that are dead, so I have one less thing to distract myself with.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Looking at the backgrounds for Mission 1, it seems that the use of colour is fairly modest; large areas could be done with no more than a single palette.</div><br />You'd be surprised though; I remember using PCX2SNES's limited screen tool and finding something like an average of six background palettes. The thing is, a lot of the palettes are identical except for five or so unique colors. Hypothetical or not, I still think you're insane for suggesting rescalling all the graphics. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Jun 13, 2018 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />More insane than trying to port Metal Slug to the SNES in the first place?  It's not like the graphics would have to be redrawn from scratch.  With the proper tools up and running, the sprite graphics would just be a matter of light manual touch-ups.  Backgrounds might be a bit more involved (they look really good even with fairly primitive rescaling, but you'd have to fiddle with palettes and checkerboard dither a bit), but it still doesn't seem out of proportion.  Maybe because I haven't tried it seriously yet...<br /><br />I really do think aspect ratio is important.  Not so much the exact physical aspect ratio (which is difficult to figure out), but the size of the screen in game terms.  For the port to be accurate, the physical aspect ratio should be about right, <em>and</em> you should be able to see the same amount of stuff, including BGs, and each element of the stuff you can see should take up the same fraction of the viewable area as it does in the Neo Geo version.  This implies a scaling factor of 256/304 for all graphics (which actually implies a 67x80 large explosion; I don't believe I've mentioned that particular number yet).<br /><br />Unless you trim the sides of the screen, but my understanding is that the Neo Geo's 320-dot active area was wider than standard, with the 304-dot area being pretty close to 4:3, so trimming the sides would be further from the physical aspect ratio and thus not desirable.  On the other hand, if you trimmed the sides you might be able to get away with using just one tilemap per layer without having to use 16x16 tiles, which would give you 8x8 palette granularity, <em>and</em> you'd be able to get the full 20% size reduction for graphics...  but the visual aspect ratio would be a bit off, and the resolution would be even lower... also, with 8x8 tiles you wouldn't be able to pack two horizontally-scrolling BGs into one tilemap...  not to mention that you'd be perpetually tying up one window mask, leaving just one for anything else you might want to do...<br /><br />You don't want to be getting shot from offscreen.  Nobody likes that.  Have you played the Mario Advance games?  The smaller screen size does have a substantial effect; the gameplay suffers, and the gamefeel suffers.  It's a constant reminder (along with the bad audio and sore hands) that what you're playing is a crunched-down portable version of the actual game.<br /><br />Isn't the goal to produce the best possible port of Metal Slug?  If it takes more work to get better accuracy, so be it.  You gave up on rescaling when you were planning to actually do the whole thing yourself.  With a team, there'd ideally be at least one person who'd rather spend time massaging pixel art than programming slope physics, so it could happen in parallel.  And if it is just a hypothetical, like my port of BotW to the N64, then there's no reason to hold back because practicality isn't a consideration; clearly rescaling Metal Slug's graphics is not beyond human ability, because generating them from scratch wasn't.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 13, 2018 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One practical problem with a team is feeding and housing your team for the duration of development. This ultimately ends up leading to a requirement to find an agent for your team to negotiate with SNK.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 13, 2018 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, a port of Metal Slug to the SNES probably would have had at least a million dollar development budget. Whether or not the graphics could theoretically be ported without sacrifice wouldn't have been an important question for such an endeavour, though. They would have altered the game to be practical enough to finish the project.<br /><br />It's not really fair to compare to a commercial project, though. This is not a sane commercial undertaking. If you do it you'll do it because you're really interested in meeting this particular challenge. I don't think a lack of licensing from SNK is going to stop you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Wed Jun 13, 2018 9:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">Bringing the threads of conversation together a bit:  how much CPU time does your method take?  Any idea how much this sort of thing would add?<br /></div><br /><br />The last time I tested it, it was about 20 to 30 scanlines in the worst case scenario.  However I made a bunch of tweeks to it since because it was spagetti code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Jun 14, 2018 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">If you do it you'll do it because you're really interested in meeting this particular challenge. I don't think a lack of licensing from SNK is going to stop you.</div><br />Yeah, my idea of a &quot;team&quot; was less a bunch of guys in an office pulling a full-time salary while subsisting on pizza and Red Bull, and more a few like-minded hobbyists working in their spare time and somehow managing to harmoniously divide up the task over the internet.  No schedule, no budget.<br /><br />I'm not sure how demoscene teams manage themselves, but I'm pretty sure they don't pull full-time salaries either...<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">The last time I tested it, it was about 20 to 30 scanlines in the worst case scenario.</div><br />Not bad.<br /><br />So I guess we're hoping that the original game was at least twice as inefficient as it could have been, ideally three times - given the difference between Metal Slug 2 and Metal Slug X, there's clearly <em>some</em> room for improvement...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Thu Jun 14, 2018 3:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The routine is still pretty long.  This is how it looked a several months ago, <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10957&amp;start=255">viewtopic.php?f=12&amp;t=10957&amp;start=255</a><!-- l --> and I've been trying to squeeze the code down with macros so that it's less intimidating.  But, I've also added a &quot;single 32x32 sprite&quot; and &quot;single 16x16 sprite&quot; mode so that single sprite objects don't need large data tables.  In order to shrink data, I had to use more code.<br /><br /><span style="font-size: 75%; line-height: normal"><div class="codetitle"><b>Code:</b></div><div class="codecontent">animation:<br />-;<br />jsr do_animation<br />lda {next_slot}<br />bne -<br />lda {active_slot_pointer}<br />cmp {last_object_to_dma}<br />beq +<br />-;<br />jsr do_animation<br />lda {next_slot}<br />cmp {last_object_to_dma}<br />bne -<br />+;<br />rts<br /><br />do_animation:<br />tcd<br />ldy {metasprite_request}<br />bne +&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//no animation, if &quot;metasprite_request&quot; is blank<br />jsr clear_vram_slot<br />stz {frame_id}<br />rts<br />+;<br />lda {animation_update}&nbsp; &nbsp;&nbsp; &nbsp;//sprite is animated if &quot;metapsprite&quot; is different from<br />bne +&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;metasprite_request&quot; or &quot;animation_update&quot; is set<br />rts<br />+;<br />lda $000c,y<br />sta {vram_size}<br />clc<br />adc {total_dma_legnth}&nbsp; &nbsp;&nbsp; &nbsp;//check if there is enough DMA time for sprite<br />cmp #$0081<br />bcc ++<br />lda {first_object_to_dma}<br />bne +<br />tdc<br />sta {first_object_to_dma}<br />+;<br />rts<br />+;<br />jsr clear_vram_slot&nbsp; &nbsp;&nbsp; &nbsp;//clear previous animation frame<br />lda #$0002<br />trb {object_traits}<br />cmp {animation_update}&nbsp; &nbsp;&nbsp; &nbsp;//if &quot;animation_update&quot; is 2, then frame is rotated 180 degrees<br />bne +<br />tsb {object_traits}<br />+;<br />stz {animation_update}<br />ldy {metasprite_request}<br />lda $000e,y<br />clc<br />adc {animation_index}<br />inc #2<br />sta {frame_id}<br />tax<br />lda.w {animation_copies},x<br />inc<br />sta.w {animation_copies},x<br />dec<br />beq +&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//if animation_copies is not 0, then no further processing is needed<br />rts<br />+;<br />ldx #$ffff<br />lda $0008,y<br />sta {temp2}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp2&quot; is ROM bank<br />bpl +<br />jmp single_sprite<br />+;<br />cmp #$4000<br />bcc +<br />jmp single_small_sprite<br />+;<br /><br />lda $000a,y&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//find the ROM address of sprite graphics<br />asl #5&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//ROM address = metasprite ROM address + (animation frame)*(metasprite ROM size)<br />sta {vram_width}<br />sep #$20<br />lda {animation_index}<br />lsr<br />sta $4202<br />lda $000c,y<br />sta $4203<br />rep #$20<br />lda $4216<br />asl #5<br />adc $0006,y<br />sta {temp3}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp3&quot; is ROM address<br /><br />lda $0010,y<br />bpl +&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//if $0010,y is $7fff or less, it is the metasprite data itself<br />tya&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//if $0010,y is $8000 or more, it is the address pointing to metasprite data<br />clc<br />adc {animation_index}<br />tax<br />ldy $0010,x<br />+;<br />phd<br />lda #$0000<br />tcd<br />ldx #$ffff<br />-;<br />&nbsp; &nbsp;lda $0010,y<br />&nbsp; &nbsp;bne +<br />&nbsp; &nbsp;jmp invalid_chr<br />&nbsp; &nbsp;+;<br />&nbsp; &nbsp;sty.b {temp5}<br />&nbsp; &nbsp;lda $0012,y<br />&nbsp; &nbsp;sta.b {temp_x}<br />&nbsp; &nbsp;lda $0011,y<br />&nbsp; &nbsp;and #$0070<br />&nbsp; &nbsp;lsr #4<br />&nbsp; &nbsp;sta.b {temp8}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp8&quot; counts down the horizontal sprite run<br />&nbsp; &nbsp;lda $0018,y<br />&nbsp; &nbsp;xba<br />&nbsp; &nbsp;lsr #2<br />&nbsp; &nbsp;adc.b {temp3}<br />-;<br />&nbsp; &nbsp;&nbsp; &nbsp;sta.b {temp}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp&quot; is the ROM address of the sprite being added<br />&nbsp; &nbsp;&nbsp; &nbsp;sta.b {temp9}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp9&quot; is the ROM address of the top sprite in a vertical run<br />&nbsp; &nbsp;&nbsp; &nbsp;lda $0014,y<br />&nbsp; &nbsp;&nbsp; &nbsp;sta.b {temp_y}<br />&nbsp; &nbsp;&nbsp; &nbsp;lda $0011,y<br />&nbsp; &nbsp;&nbsp; &nbsp;and #$000f<br />&nbsp; &nbsp;&nbsp; &nbsp;sta.b {temp7}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp7&quot; counts down the vertical sprite run<br />&nbsp; &nbsp;&nbsp; &nbsp;jmp find_vram_slot<br />find_vram_slot_done:<br />&nbsp; &nbsp;&nbsp; &nbsp;ldy.b {temp5}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//this puts all the &quot;OAM&quot; information<br />&nbsp; &nbsp;&nbsp; &nbsp;ora $0016,y<br />&nbsp; &nbsp;&nbsp; &nbsp;sta {sprite_attributes},x<br />&nbsp; &nbsp;&nbsp; &nbsp;lda.b {temp_y}<br />&nbsp; &nbsp;&nbsp; &nbsp;sta {sprite_y},x<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;adc.b {temp10}<br />&nbsp; &nbsp;&nbsp; &nbsp;sta.b {temp_y}<br />&nbsp; &nbsp;&nbsp; &nbsp;lda.b {temp_x}<br />&nbsp; &nbsp;&nbsp; &nbsp;sta {sprite_x},x<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;dec.b {temp7}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//decreases &quot;temp 7&quot; until all sprites<br />&nbsp; &nbsp;&nbsp; &nbsp;bpl find_vram_slot&nbsp; &nbsp;&nbsp; &nbsp;//in the vertical run are put on linked list<br />&nbsp; &nbsp;&nbsp; &nbsp;dec.b {temp8}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//decreases &quot;temp 8&quot; until all sprites<br />&nbsp; &nbsp;&nbsp; &nbsp;bmi +&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//in the horizontal run are put on linked list<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;adc.b {temp10}<br />&nbsp; &nbsp;&nbsp; &nbsp;sta.b {temp_x}<br />&nbsp; &nbsp;&nbsp; &nbsp;lda.b {temp10}<br />&nbsp; &nbsp;&nbsp; &nbsp;asl #2<br />&nbsp; &nbsp;&nbsp; &nbsp;adc.b {temp9}<br />&nbsp; &nbsp;&nbsp; &nbsp;jmp -<br />+;<br />&nbsp; &nbsp;stx.b {temp6}<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$000a<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;jmp --<br /><br />macro find_slot(stack_index,stack,label) {<br />ldy {stack_index}<br />dey<br />dey<br />bmi {label}<br />txa<br />ldx {stack}-$a00000,y<br />sty {stack_index}<br />sta {next_sprite},x&nbsp; &nbsp;&nbsp; &nbsp;//adds slot to linked list<br />lda x16_lut,x<br />ora #$4000<br />ldy {dma_updates}<br />clc<br />}<br /><br />macro add_and_store_2x(a,b) {<br />sta {b},y<br />adc {a}<br />sta {b}+8,y<br />}<br /><br />macro add_and_store_4x(a,b) {<br />add_and_store_2x({a},{b})<br />adc {a}<br />add_and_store_2x({a},{b}+16)<br />}<br /><br />small_slot:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//this finds 16x16 VRAM slot<br />find_slot({small_slot_stack_index},{small_slot_stack},invalid_chr)<br />add_and_store_2x(#$0100,{dma_destination})<br />lda.b {temp}<br />add_and_store_2x({vram_width},{dma_address})<br />adc {vram_width}<br />sta.b {temp}<br />lda.b {temp2}<br />ora #$4000<br />sta {dma_bank},y<br />sta {dma_bank}+8,y<br />stz.b {temp4}<br />stz.w {sprite_size},x<br />lda #$0010<br />jmp +<br /><br />invalid_chr:<br />&nbsp; &nbsp;pld<br />done_with_animation_routine:<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;ldx {frame_id}<br />&nbsp; &nbsp;sta.w {animation_chr},x<br />&nbsp; &nbsp;lda {vram_size}<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc {total_dma_legnth}<br />&nbsp; &nbsp;sta {total_dma_legnth}<br />&nbsp; &nbsp;rts&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//this is where the game exits the routine<br /><br />find_vram_slot:<br />lda $0010,y<br />and #$0003<br />dec<br />beq small_slot<br />cmp #$0001<br />beq large_slot<br />repeat_slot:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//this finds repeat slots<br />ldy {repeat_slot_stack_index}<br />dey<br />dey<br />bmi invalid_chr<br />txa<br />ldx {repeat_slot_stack}-$a00000,y<br />sty {repeat_slot_stack_index}<br />sta {next_sprite},x&nbsp; &nbsp;&nbsp; &nbsp;//puts it on linked list<br />lda.b {temp4}<br />ora #$0002<br />sta {sprite_size},x<br />lda.b {temp6}<br />jmp find_vram_slot_done<br /><br />large_slot:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//finds open 32x32 VRAM slot<br />find_slot({large_slot_stack_index},{large_slot_stack},invalid_chr)<br />add_and_store_4x(#$0100,{dma_destination})<br />lda.b {temp}<br />add_and_store_4x({vram_width},{dma_address})<br />adc {vram_width}<br />sta.b {temp}<br />lda.b {temp2}<br />ora #$8000<br />sta {dma_bank},y<br />sta {dma_bank}+8,y<br />sta {dma_bank}+16,y<br />sta {dma_bank}+24,y<br />lda #$0001<br />sta.b {temp4}<br />sta {sprite_size},x<br />lda #$0020<br />+;<br />sta.b {temp10}<br />clc<br />adc.b {dma_updates}<br />sta.b {dma_updates}<br />txa<br />jmp find_vram_slot_done<br /><br />x16_lut:<br />dw $0000,$0020,$0040,$0060,$0080,$00a0,$00c0,$00e0,$0110,$0120,$0140,$0160,$0180,$01a0,$01c0,$01e0<br />dw $0200,$0220,$0240,$0260,$0280,$02a0,$02c0,$02e0,$0310,$0320,$0340,$0360,$0380,$03a0,$03c0,$03e0<br />dw $0400,$0420,$0440,$0460,$0480,$04a0,$04c0,$04e0,$0510,$0520,$0540,$0560,$0580,$05a0,$05c0,$05e0<br />dw $0600,$0620,$0640,$0660,$0680,$06a0,$06c0,$06e0,$0710,$0720,$0740,$0760,$0780,$07a0,$07c0,$07e0<br />dw $0800,$0820,$0840,$0860,$0880,$08a0,$08c0,$08e0,$0910,$0920,$0940,$0960,$0980,$09a0,$09c0,$09e0<br />dw $0a00,$0a20,$0a40,$0a60,$0a80,$0aa0,$0ac0,$0ae0,$0b10,$0b20,$0b40,$0b60,$0b80,$0ba0,$0bc0,$0be0<br />dw $0c00,$0c20,$0c40,$0c60,$0c80,$0ca0,$0cc0,$0ce0,$0d10,$0d20,$0d40,$0d60,$0d80,$0da0,$0dc0,$0de0<br />dw $0e00,$0e20,$0e40,$0e60,$0e80,$0ea0,$0ec0,$0ee0,$0f10,$0f20,$0f40,$0f60,$0f80,$0fa0,$0fc0,$0fe0<br />dw $1000,$1020,$1040,$1060,$1080,$10a0,$10c0,$10e0,$1110,$1120,$1140,$1160,$1180,$11a0,$11c0,$11e0<br />dw $1200,$1220,$1240,$1260,$1280,$12a0,$12c0,$12e0,$1310,$1320,$1340,$1360,$1380,$13a0,$13c0,$13e0<br />dw $1400,$1420,$1440,$1460,$1480,$14a0,$14c0,$14e0,$1510,$1520,$1540,$1560,$1580,$15a0,$15c0,$15e0<br />dw $1600,$1620,$1640,$1660,$1680,$16a0,$16c0,$16e0,$1710,$1720,$1740,$1760,$1780,$17a0,$17c0,$17e0<br />dw $1800,$1820,$1840,$1860,$1880,$18a0,$18c0,$18e0,$1910,$1920,$1940,$1960,$1980,$19a0,$19c0,$19e0<br />dw $1a00,$1a20,$1a40,$1a60,$1a80,$1aa0,$1ac0,$1ae0,$1b10,$1b20,$1b40,$1b60,$1b80,$1ba0,$1bc0,$1be0<br />dw $1c00,$1c20,$1c40,$1c60,$1c80,$1ca0,$1cc0,$1ce0,$1d10,$1d20,$1d40,$1d60,$1d80,$1da0,$1dc0,$1de0<br />dw $1e00,$1e20,$1e40,$1e60,$1e80,$1ea0,$1ec0,$1ee0,$1f10,$1f20,$1f40,$1f60,$1f80,$1fa0,$1fc0,$1fe0<br /><br />macro clear_slot(stack_index,stack) {<br />ldx {stack_index}<br />sta.w {stack},x<br />inx<br />inx<br />stx {stack_index}<br />lda {next_sprite}-$a00000,y<br />cmp #$ffff<br />bne -<br />rts<br />}<br /><br />-;<br />rts<br />clear_vram_slot:&nbsp; &nbsp;//this routine clears the VRAM slots of the previous animation frame<br />ldx {frame_id}<br />beq -<br />lda.w {animation_copies},x<br />beq -<br />dec<br />sta.w {animation_copies},x<br />bne -<br />lda.w {animation_chr},x<br />cmp #$ffff<br />beq -<br />-;<br />tay<br />ldx {sprite_size}-$a00000,y<br />beq clear_small_slot<br />dex<br />beq clear_large_slot<br />clear_slot({repeat_slot_stack_index},{repeat_slot_stack})<br />clear_small_slot:<br />clear_slot({small_slot_stack_index},{small_slot_stack})<br />clear_large_slot:<br />clear_slot({large_slot_stack_index},{large_slot_stack})<br /><br />//////////////////////////////////////////////////////////////////////////////////<br />sram_bank_crossing:<br />lda {animation_index}<br />xba<br />and #$ff00<br />-;<br />cmp #$2000<br />bcc +<br />sbc #$2000<br />inc {temp2}<br />clc<br />bra -<br /><br />single_sprite:<br />lda $0002,y<br />bmi sram_bank_crossing<br />lda {animation_index}<br />xba<br />and #$ff00<br />clc<br />+;<br />adc $0006,y<br />sta {temp3}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp3&quot; is ROM address<br />lda $0010,y<br />sta {temp5}<br />find_slot({large_slot_stack_index},{large_slot_stack},invalid_single_chr)<br />add_and_store_4x(#$0100,{dma_destination})<br />lda {temp3}<br />add_and_store_4x(#$0080,{dma_address})<br />lda {temp2}<br />sta {dma_bank},y<br />sta {dma_bank}+8,y<br />sta {dma_bank}+16,y<br />sta {dma_bank}+24,y<br />tya<br />clc<br />adc #$0020<br />sta {dma_updates}<br />lda #$0001<br />sta {sprite_size},x<br />lda #$fff0<br />-;<br />sta {sprite_y},x<br />sta {sprite_x},x<br />txa<br />ora {temp5}<br />sta {sprite_attributes},x<br />invalid_single_chr:<br />jmp done_with_animation_routine<br /><br />single_small_sprite:<br />lda {animation_index}<br />xba<br />and #$ff00<br />lsr #2<br />clc<br />adc $0006,y<br />sta {temp3}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//&quot;temp3&quot; is ROM address<br />lda $0010,y<br />sta {temp5}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//finds open 32x32 VRAM slot<br />find_slot({small_slot_stack_index},{small_slot_stack},invalid_single_chr)<br />add_and_store_2x(#$0100,{dma_destination})<br />lda {temp3}<br />add_and_store_2x(#$0040,{dma_address})<br />lda {temp2}<br />sta {dma_bank},y<br />sta {dma_bank}+8,y<br />tya<br />clc<br />adc #$0010<br />sta {dma_updates}<br />stz.w {sprite_size},x<br />lda #$fff8<br />bra -<br /></div></span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Fri Jun 15, 2018 12:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Only 30 scanlines tops for finding vram for objects? If I'm interpreting that right, wow... You've already added so many features to your game engine that I don't think I should bother finishing mine. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> I forgot, do you use ca65?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Jun 16, 2018 7:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just so you know, $a0 is now my default bank, because it is a mirror of bank $80, but with 8kB of SRAM.  I did this to avoid register juggling.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Sat Jun 16, 2018 7:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, so it's pretty much always 3.56MHz; I know you're a great programmer, but less than 30 lines for that much work seemed insane.<br /><br />I had Metal Slug in mind when designing it, but that dynamic palette changing idea could come in handy for just about any game with a fair level of verticality; I've been thinking about 4 player games on the SNES and how the players already eat up half of the sprite palettes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jun 16, 2018 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Er. Pages $60-$7F in banks $80-$BF are still 2.7MHz timing... but usually RAM access speed doesn't add up to much, because so many cycles are spent loading instructions (using K bank) relative to I/O cycles (using B bank)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sat Jun 16, 2018 11:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How well can Metal Slug backgrounds be recreated with ti</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, but most of $2000-$5FFF is fast, and large parts of it are unused.  Any SRAM in that area could also be mapped into bank $00 for use with direct page and rewritable interrupt routines.  All you need is the ability to wire up your own cartridge, or an emulator with manifest support.<br /><br /><br />How does using bank $A0 rather than $80 help avoid register juggling?<br /><br />Is it really 20-30 lines for the whole frame, or is it 20-30 lines for one metasprite?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>