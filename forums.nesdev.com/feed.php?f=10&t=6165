<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=6165" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-05-01T16:45:30-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=6165</id>
<entry>
<author><name><![CDATA[Petruza]]></name></author>
<updated>2010-05-01T16:45:30-07:00</updated>
<published>2010-05-01T16:45:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=60726#p60726</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=60726#p60726"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=60726#p60726"><![CDATA[
The one memory zone you can safely access without handler functions, is the zero page.<br /><br />At least, in my emu, I allocate RAM[0x800] to hold the RAM, so using the absolute address in the 6502 address space as the index to the RAM[] array will result in accessing the same byte.<br /><br />If you have a separate code for each addressing mode, as I do, there's some point in the code where you know for sure you will be accessing the zero page, then there's no possible side-effect, writing to registers, etc.<br />Then you simply access RAM[ address &amp; 0xFF ] for reading and writing<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3773">Petruza</a> — Sat May 01, 2010 4:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ehguacho]]></name></author>
<updated>2010-03-15T22:52:02-07:00</updated>
<published>2010-03-15T22:52:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58430#p58430</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58430#p58430"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58430#p58430"><![CDATA[
i won't give up! sooner or later my emulator will be out on the road... i just need to keep on trying and learning. time and work, time and work, time and work... <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4281">ehguacho</a> — Mon Mar 15, 2010 10:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-15T22:42:34-07:00</updated>
<published>2010-03-15T22:42:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58429#p58429</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58429#p58429"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58429#p58429"><![CDATA[
It is important to get your CPU core together first. When I did my emulator though I built it implementing new opcodes as my test roms ran into them and as soon as enough were implemented I worked on PPU emulation as I was in a rush to get playable results. It worked out for me. The key thing really is just to stick with it and not give up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Mon Mar 15, 2010 10:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ehguacho]]></name></author>
<updated>2010-03-15T16:50:16-07:00</updated>
<published>2010-03-15T16:50:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58410#p58410</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58410#p58410"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58410#p58410"><![CDATA[
ok, so this is what i'm gonna do: i'll try to finish the 6502 core emulation and then you'll help me out with the PPU emulation and with all those complex things <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4281">ehguacho</a> — Mon Mar 15, 2010 4:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-03-15T16:20:38-07:00</updated>
<published>2010-03-15T16:20:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58407#p58407</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58407#p58407"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58407#p58407"><![CDATA[
<div class="quotetitle">ehguacho wrote:</div><div class="quotecontent"><br />but i really don't what to get at such a complex point right now.<br /></div><br />Nobody is forcing you to implement those complex things, they are just warning you that if you go through with your current architecture you are gonna have to rewrite most of the program later on. They are just telling you to be prepared for the complex things, so that adding them later on is easier.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Mar 15, 2010 4:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-15T15:43:43-07:00</updated>
<published>2010-03-15T15:43:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58402#p58402</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58402#p58402"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58402#p58402"><![CDATA[
Even if you don't implement any bankswitching for now, you still have to handle the registers differently than the RAM and the PRGROM. <br /><br />PPU operation isn't terribly hard to figure out unless you want to try for absolute cycle accuracy.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Mon Mar 15, 2010 3:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ehguacho]]></name></author>
<updated>2010-03-15T13:47:27-07:00</updated>
<published>2010-03-15T13:47:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58379#p58379</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58379#p58379"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58379#p58379"><![CDATA[
i've seen those memory maps, its are currently on marat fayzullin's doc "nintendo entertainment system architecture".<br />obviusly you're right about the bankswitching and all that stuff, sooner or later i'll have to deal with it, but i really don't what to get at such a complex point right now. i'm still trying to understand the PPU operation... that's why i think that now it's a little early to worry about that... or maybe it isn't...<br />thanks again tepples and motzilla, you are really helping me! so please keep on touch, i really need that help!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4281">ehguacho</a> — Mon Mar 15, 2010 1:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-15T10:59:38-07:00</updated>
<published>2010-03-15T10:59:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58349#p58349</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58349#p58349"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58349#p58349"><![CDATA[
See the NES games besides NROM, can instantly change what appears at certain CPU and PPU address space. It is HORRIBLE performance to keep an array for $8000-$FFFF as many games switch banks many times per frame. <br /><br />The thing to do is to implement a system that can change what memory you make appear at any address space so you just change a variable rather than copy a bunch of memory. The common thing to do (atleast I think it is) is to use Pointers, or a Page Value variable. For example:<br /><br />unsigned char ReadMem(int Address)<br />{<br />if(Address&gt;=0x8000 &amp;&amp; Address&lt;0xA000)<br />{<br />return PRGROM[(PRGPAGENUMBER*0x2000)+Address&amp;0x1FFF];<br />}<br />}<br /><br />The concept is now you can change the PRGPAGENUMBER to different parts of PRG-ROM and when you implement memory mappers you'll have a system in place that lets you do it. This is just an example of one way to do it. Another way is to use Pointers. <br /><br />You do not declare 0x10000 for the "console". As I said, registers aren't regular RAM. You probably should make the registers variables in your program. With PPU memory, again don't declare 0x4000 of memory for it. It's split up too. <br /><br />Since you don't seem to have looked at enough documents I'll paste a memory map for you.<br /><br />CPU Memory Map<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    +---------+-------+-------+-----------------------+<br />    | Address | Size  | Flags | Description           |<br />    +---------+-------+-------+-----------------------+<br />    | $0000   | $800  |       | RAM                   |<br />    | $0800   | $800  | M     | RAM                   |<br />    | $1000   | $800  | M     | RAM                   |<br />    | $1800   | $800  | M     | RAM                   |<br />    | $2000   | 8     |       | Registers             |<br />    | $2008   | $1FF8 |  R    | Registers             |<br />    | $4000   | $20   |       | Registers             |<br />    | $4020   | $1FDF |       | Expansion ROM         |<br />    | $6000   | $2000 |       | SRAM                  |<br />    | $8000   | $4000 |       | PRG-ROM               |<br />    | $C000   | $4000 |       | PRG-ROM               |<br />    +---------+-------+-------+-----------------------+</div><br /><br />PPU Memory Map. The first is a basic version, the 2nd is more detailed.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      +---------+-------+--------------------+<br />      | Address | Size  | Description        |<br />      +---------+-------+--------------------+<br />      | $0000   | $1000 | Pattern Table #0   |<br />      | $1000   | $1000 | Pattern Table #1   |<br />      | $2000   | $800  | Name Tables        |<br />      | $3F00   | $20   | Palettes           |<br />      +---------+-------+--------------------+<br /><br /><br />        Programmer Memory Map<br />      +---------+-------+-------+--------------------+<br />      | Address | Size  | Flags | Description        |<br />      +---------+-------+-------+--------------------+<br />      | $0000   | $1000 | C     | Pattern Table #0   |<br />      | $1000   | $1000 | C     | Pattern Table #1   |<br />      | $2000   | $3C0  |       | Name Table #0      |<br />      | $23C0   | $40   |  N    | Attribute Table #0 |<br />      | $2400   | $3C0  |  N    | Name Table #1      |<br />      | $27C0   | $40   |  N    | Attribute Table #1 |<br />      | $2800   | $3C0  |  N    | Name Table #2      |<br />      | $2BC0   | $40   |  N    | Attribute Table #2 |<br />      | $2C00   | $3C0  |  N    | Name Table #3      |<br />      | $2FC0   | $40   |  N    | Attribute Table #3 |<br />      | $3000   | $F00  |   R   |                    |<br />      | $3F00   | $10   |       | Image Palette #1   |<br />      | $3F10   | $10   |       | Sprite Palette #1  |<br />      | $3F20   | $E0   |    P  |                    |<br />      | $4000   | $C000 |     F |                    |<br />      +---------+-------+-------+--------------------+</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Mon Mar 15, 2010 10:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-15T08:33:12-07:00</updated>
<published>2010-03-15T08:33:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58340#p58340</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58340#p58340"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58340#p58340"><![CDATA[
What do you plan to do when the cartridge decides to switch what part of memory appears in CPU $8000-$BFFF? What do you plan to do when the cartridge decides to switch what part of memory appears in PPU $0000-$0FFF?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Mar 15, 2010 8:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ehguacho]]></name></author>
<updated>2010-03-15T07:43:14-07:00</updated>
<published>2010-03-15T07:43:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58336#p58336</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58336#p58336"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58336#p58336"><![CDATA[
actualy i've declared 2 blocks of memory: one for the console (0x10000 kb) and one for PPU (0x4000). is that right?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4281">ehguacho</a> — Mon Mar 15, 2010 7:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-15T00:17:55-07:00</updated>
<published>2010-03-15T00:17:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58312#p58312</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58312#p58312"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58312#p58312"><![CDATA[
Registers are not RAM. Reads and writes to $2000 - $2007 refer to specific registers that don't behave like RAM. They could be part of the ReadMem function by checking if Address==0x2002 for example.<br /><br />VRAM is not a single "block" of memory. Neither is CPU address space.<br /><br />From $0000 to $1FFF is RAM. However, there is only $800 bytes of RAM. But because of mirroring the same RAM appears in that area. $2000-$2007 are registers that are special memory, not RAM. The address range of $6000 to $7FFF is often PRG-RAM in many cartridge types, but not always. Sometimes it is PRG-ROM. Most of the time it's nothing. $8000-$FFFF is almost always PRG-ROM. <br /><br />For the PPU you have $0000 - $2000 containing the Pattern Tables, the graphics. $2000 - $2FFF contain the nametables, the background array data. $3F00 - $3FFF contains the Palette RAM. <br /><br />You should read all the relevant documents on the memory map for sure.<br /><br />The main thing to realize is that you can't have one big array containing the entire address space for CPU and PPU.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Mon Mar 15, 2010 12:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ehguacho]]></name></author>
<updated>2010-03-14T22:25:10-07:00</updated>
<published>2010-03-14T22:25:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58304#p58304</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58304#p58304"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58304#p58304"><![CDATA[
<div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />There are many ways to do various parts of the emulator. Using a ReadMem type function to handle reading is one way. And yes your example seems correct. <br /><br />I'm not sure what you mean about large blocks of memory.<br /></div><br />let me show you my code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &lt;stdlib.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;conio.h&gt;<br />#include &lt;conio2.h&gt;<br />#include &lt;string.h&gt;<br /><br />// DECLARACION DE DEFINES<br /><br />#define LD_IMM&#40;REG&#41; REG = mem&#91;++pc&#93;; pc++; z_flag = !&#40;REG&#41;; n_flag = REG &amp; 0x80<br />#define LD_ABS&#40;REG&#41; REG = ReadMem&#40;&#40;mem&#91;pc + 2&#93; &lt;&lt; 8&#41; | mem&#91;pc + 1&#93;&#41;; pc += 3; z_flag = !&#40;REG&#41;; n_flag = REG &amp; 0x80<br />#define LD_ZP&#40;REG&#41; REG = ReadMem&#40;&#40;mem&#91;++pc&#93; &lt;&lt; 8&#41; | 0x00&#41;; pc++; z_flag = !&#40;REG&#41;; n_flag = REG &amp; 0x80<br />#define LD_ABSIND&#40;REG,IND&#41; REG = ReadMem&#40;&#40;&#40;mem&#91;pc + 2&#93; &lt;&lt; 8&#41; | mem&#91;pc + 1&#93;&#41; + IND&#41;;  pc += 3; z_flag = !&#40;REG&#41;; n_flag = REG &amp; 0x80<br />#define ST_ABS&#40;REG&#41; WriteMem&#40;&#40;mem&#91;pc + 2&#93; &lt;&lt; 8&#41; | mem&#91;pc + 1&#93;,REG&#41;; pc += 3;<br />#define IN&#40;REG&#41; REG++; pc++; z_flag = !&#40;REG&#41;; n_flag = REG &amp; 0x80<br />#define CP_IMM&#40;REG&#41; if&#40;REG &lt; mem&#91;++pc&#93;&#41; &#123; n_flag = 1; z_flag = c_flag = 0; &#125;; \<br />                    if&#40;REG == mem&#91;pc&#93;&#41; &#123; n_flag = 0; z_flag = c_flag = 1; &#125;; \<br />                    if&#40;REG &gt; mem&#91;pc&#93;&#41; &#123; n_flag = z_flag = 0; c_flag = 1; &#125;;\<br />                    pc++;<br />#define BRANCH&#40;FLAG,VALUE&#41; pc += 2; if&#40;FLAG == VALUE&#41; &#123; pc--; &#40;mem&#91;pc&#93; &gt; 0x7f&#41; ? pc -= &#40;~mem&#91;pc&#93; &amp; 0x00ff&#41; : pc += &#40;mem&#91;pc&#93; &amp; 0x00ff&#41;; &#125;<br /><br />// DECLARACION DE FUNCIONES<br /><br />static inline unsigned char ReadMem&#40;int addr&#41;;<br />static inline void WriteMem&#40;int addr,int value&#41;;<br />static inline void WritePPU&#40;int value&#41;;<br /><br />// DECLARACION DE VARIABLES GLOBALES<br /><br />unsigned char *mem,*ROM,*VRAM;<br />unsigned int pc;<br /><br />// INICIO DEL PROGRAMA PRINCIPAL<br /><br />int main&#40;void&#41;<br />&#123;<br />    int tecla;<br />    char romname&#91;50&#93;;<br />    FILE *romfile;<br />    unsigned long int ciclos_cpu;<br />    int z_flag,n_flag,c_flag;<br />    int acc,x,y;<br />    int opcode;<br />    int RomBanks16kb;<br />    unsigned int InitPC;<br />    const char tabla_ciclos_cpu&#91;256&#93; = // Vector que almacena los ciclos usados por cada opcode<br />    &#123;<br />        7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,2,5,2,8,4,4,6,6,2,4,2,7,5,5,7,7,<br />6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,2,5,2,8,4,4,6,6,2,4,2,7,<br />        5,5,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,2,5,2,8,4,4,6,6,2,4,2,7,<br />5,5,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,2,5,2,8,4,4,6,6,<br />        2,4,2,7,5,5,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,2,6,2,6,4,4,4,4,<br />2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,2,5,2,5,<br />        4,4,4,4,2,4,2,5,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,2,5,2,8,<br />4,4,6,6,2,4,2,7,5,5,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,<br />        2,5,2,8,4,4,6,6,2,4,2,7,5,5,7,7<br />    &#125;;<br /><br />    clrscr&#40;&#41;;<br /><br />    strcpy&#40;romname,&quot;demo.nes&quot;&#41;;<br />    romfile = fopen&#40;romname,&quot;rb&quot;&#41;;<br />    mem = &#40;unsigned char *&#41;malloc&#40;0x10000&#41;;<br />    VRAM = &#40;unsigned char *&#41;malloc&#40;0x4000&#41;;<br />    memset&#40;mem,0,0x10000&#41;;<br />    memset&#40;VRAM,0,0x4000&#41;;<br />    fseek&#40;romfile,16,0&#41;;<br />    fread&#40;&amp;mem&#91;0x8000&#93;,1,0x4000,romfile&#41;;<br />    fseek&#40;romfile,16,0&#41;;<br />    fread&#40;&amp;mem&#91;0xc000&#93;,1,0x4000,romfile&#41;;<br />    fseek&#40;romfile,16400,0&#41;;<br />    fread&#40;VRAM,1,0x2000,romfile&#41;;<br />    fclose&#40;romfile&#41;;<br /><br />    InitPC = &#40;mem&#91;0xfffd&#93; &lt;&lt; 8&#41; | mem&#91;0xfffc&#93;;<br />    pc = InitPC;<br />    acc = x = y = ciclos_cpu = 0;<br />    for&#40;;;&#41;<br />    &#123;<br />        opcode = mem&#91;pc&#93;;<br />        switch&#40;opcode&#41;<br />        &#123;<br />            // LDx IMMEDIATE<br /><br />            case 0xa9: LD_IMM&#40;acc&#41;; break;<br />            case 0xa2: LD_IMM&#40;x&#41;; break;<br />            case 0xa0: LD_IMM&#40;y&#41;; break;<br /><br />            // LDx ABSOLUTE<br /><br />            case 0xad: LD_ABS&#40;acc&#41;; break;<br />            case 0xae: LD_ABS&#40;x&#41;; break;<br />            case 0xac: LD_ABS&#40;y&#41;; break;<br /><br />            // LDx ZERO PAGE<br /><br />            case 0xa5: LD_ZP&#40;acc&#41;; break;<br />            case 0xa6: LD_ZP&#40;x&#41;; break;<br />            case 0xa4: LD_ZP&#40;y&#41;; break;<br /><br />            // LDx ABSOLUTE INDEXED<br /><br />            case 0xbd: LD_ABSIND&#40;acc,x&#41;; break;<br />            case 0xb9: LD_ABSIND&#40;acc,y&#41;; break;<br />            case 0xbe: LD_ABSIND&#40;x,y&#41;; break;<br />            case 0xbc: LD_ABSIND&#40;y,x&#41;; break;<br /><br />            // STx ABSOLUTE<br /><br />            case 0x8d: ST_ABS&#40;acc&#41;; break;<br />            case 0x8e: ST_ABS&#40;x&#41;; break;<br />            case 0x8c: ST_ABS&#40;y&#41;; break;<br /><br />            // INx IMPLIED<br /><br />            case 0xe8: IN&#40;x&#41;; break;<br />            case 0xc8: IN&#40;y&#41;; break;<br /><br />            // CPx IMMEDIATE<br /><br />            case 0xc9: CP_IMM&#40;y&#41;; break;<br />            case 0xe0: CP_IMM&#40;x&#41;; break;<br />            case 0xc0: CP_IMM&#40;y&#41;; break;<br /><br />            // BRANCH RELATIVE<br /><br />            case 0xd0: BRANCH&#40;z_flag,0&#41;; break;<br />            case 0xf0: BRANCH&#40;z_flag,1&#41;; break;<br />            case 0x90: BRANCH&#40;c_flag,0&#41;; break;<br />            case 0xb0: BRANCH&#40;c_flag,1&#41;; break;<br />            case 0x10: BRANCH&#40;n_flag,0&#41;; break;<br />            case 0x30: BRANCH&#40;n_flag,1&#41;; break;<br /><br />            default:<br />                printf&#40;&quot;%X: %X\n&quot;,pc,mem&#91;pc&#93;&#41;;<br />                pc++;<br />                break;<br />        &#125;<br /><br />        ciclos_cpu = tabla_ciclos_cpu&#91;opcode&#93;;<br /><br />        while&#40;kbhit&#40;&#41;&#41;<br />        &#123;<br />            tecla = getch&#40;&#41;;<br />            if&#40;tecla == 27&#41; &#123; free&#40;mem&#41;; free&#40;ROM&#41;; exit&#40;0&#41;; &#125;<br />        &#125;<br />    &#125;<br /><br />    free&#40;mem&#41;;<br />    free&#40;ROM&#41;;<br />    return 0;<br />&#125;<br /><br />static inline unsigned char ReadMem&#40;int addr&#41;<br />&#123;<br />    unsigned char temp2002,temp2007;<br /><br />    if&#40;addr &lt; 0x2000&#41; return mem&#91;addr&#93;;<br />    else<br />    &#123;<br />        switch&#40;addr&#41;<br />        &#123;<br />            case 0x2002:<br />                temp2002 = VRAM&#91;addr&#93;;<br />                VRAM&#91;addr&#93; &amp;= 0x7f; // Ponemos el bit 7 a 0<br />                VRAM&#91;0x2005&#93; = VRAM&#91;0x2006&#93; = 0;<br />                return temp2002;<br />                break;<br /><br />            case 0x2004:<br />                return VRAM&#91;0x2003&#93;;<br />                break;<br /><br />            case 0x2007:<br />                temp2007 = VRAM&#91;0x2007&#93;;<br />                &#40;VRAM&#91;0x2000&#93; &amp; 0x4&#41; == 0 ? VRAM&#91;0x2006&#93;++ : VRAM&#91;0x2006&#93; += 32;<br />                return temp2007;<br />                break;<br />        &#125;<br />    &#125;<br />    return 0;<br />&#125;<br /><br />static inline void WriteMem&#40;int addr,int value&#41;<br />&#123;<br />    int temp2006;<br />    static int PrimeraLectura = 1; // Valor 1 si es la primera lectura, 0 lo contrario<br /><br />    switch&#40;addr&#41;<br />    &#123;<br />        case 0x2000:<br />        case 0x2001:<br />            VRAM&#91;addr&#93; = value;<br />            break;<br /><br />        case 0x2006:<br />            if&#40;PrimeraLectura == 1&#41;<br />            &#123;<br />                temp2006 = mem&#91;pc + 1&#93; &lt;&lt; 8;<br />                PrimeraLectura = 0;<br />            &#125;<br />            else<br />            &#123;<br />                temp2006 |= mem&#91;pc + 1&#93;;<br />                PrimeraLectura = 1;<br />            &#125;<br />            break;<br /><br />        case 0x2007:<br />            if&#40;&#40;VRAM&#91;0x2002&#93; &amp; 0x10&#41; == 1&#41; break;<br />            else WritePPU&#40;value&#41;;<br />            break;<br />    &#125;<br />    return;<br />&#125;<br /><br />static inline void WritePPU&#40;int value&#41;<br />&#123;<br />    return;<br />&#125;<br /></div><br /><br />that all i've done until now. as you can se i only declared 2 block of memry: one for console internal memory and one for PPU memory. code it's not commented but i think its self explanatory. any doubts just ask me! i'm wide open to suggestions too!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4281">ehguacho</a> — Sun Mar 14, 2010 10:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-14T21:50:24-07:00</updated>
<published>2010-03-14T21:50:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58303#p58303</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58303#p58303"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58303#p58303"><![CDATA[
There are many ways to do various parts of the emulator. Using a ReadMem type function to handle reading is one way. And yes your example seems correct. <br /><br />I'm not sure what you mean about large blocks of memory.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Sun Mar 14, 2010 9:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ehguacho]]></name></author>
<updated>2010-03-14T20:47:47-07:00</updated>
<published>2010-03-14T20:47:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58300#p58300</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58300#p58300"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58300#p58300"><![CDATA[
thanks MottZilla! so i should been using that "ReadMem" function whenever an instruction of reading appears? i.e.:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">....<br />case 0xAD: // LDA ABSOLUTE<br />/* LDA Absolute emulation goes here*/<br />accumulator = ReadMem&#40;address&#41;;<br />...<br /></div><br /><br />writes to memory could be handled in a similar way.<br /><br />by the way, what about making a two large blocks of memory (one for the console internal memory and the other for PPU memory)? by doing this i might be forgetting about make several independents arrays (ROM,RAM,VROM,etc...)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4281">ehguacho</a> — Sun Mar 14, 2010 8:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2010-03-14T20:32:20-07:00</updated>
<published>2010-03-14T20:32:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58298#p58298</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58298#p58298"/>
<title type="html"><![CDATA[emulator's main loop]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6165&amp;p=58298#p58298"><![CDATA[
Just an example for read/write functions.<br /><br />unsigned char ReadMem(int Address)<br />{<br />if(Address&lt;0x2000)<br />{<br />//return ram value<br />}<br />if(Address&gt;=0x8000)<br />{<br />// return rom value<br />}<br />// exception should be noted if dummy value is returned<br />return 0;<br />}<br /><br />So whenever you access any memory from the emulated CPU's perspective you'd just be calling ReadMem(Address).<br /><br />You may also want to make PPU Read and Write memory functions too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Sun Mar 14, 2010 8:32 pm</p><hr />
]]></content>
</entry>
</feed>