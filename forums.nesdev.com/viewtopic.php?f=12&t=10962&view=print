<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Macros to assert current register size in ca65</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Macros to assert current register size in ca65</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10962">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10962</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 31, 2014 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The ca65 Users Guide lists a pseudo-variable <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.CPU</tt> for use in assertions about the CPU type. But it doesn't list anything for the state of a given CPU type, namely whether a 65816 is in 8-bit or 16-bit mode for the accumulator or index registers. So I wrote some macros to test these. They're useful if you're using smart mode (which tracks 65816 <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">REP</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SEP</tt> instructions to know which instruction size to generate for immediate operands. It requires the linker script to define a segment called &quot;DEVNULL&quot; that is not written to the output file.<br /><br />Am I doing it wrong?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro assert_regbits_816 ldr, expected_size<br />.pushseg<br />.segment &quot;DEVNULL&quot;<br />.local Code<br />.proc Code<br />&nbsp; ldr #0<br />.endproc<br />.popseg<br />.assert .sizeof(Code) = expected_size, error, .sprintf(&quot;expected %d-bit mode for %s but got %d-bit&quot;, 8 * (expected_size - 1), .string(ldr), 8 * (.sizeof(Code) - 1))<br />.endmacro<br /><br />.macro assert_a16<br />&nbsp; assert_regbits_816 lda, 3<br />.endmacro<br />.macro assert_i16<br />&nbsp; assert_regbits_816 ldx, 3<br />.endmacro<br />.macro assert_a8<br />&nbsp; assert_regbits_816 lda, 2<br />.endmacro<br />.macro assert_i8<br />&nbsp; assert_regbits_816 ldx, 2<br />.endmacro<br /><br />; Test cases ;;;;;;;;;;;;;;;;;;;<br /><br />.out &quot;The following should all succeed&quot;<br />.p02<br />assert_a8<br />assert_i8<br />.p816<br />.a16<br />assert_a16<br />.a8<br />assert_a8<br />.i16<br />assert_i16<br />.i8<br />assert_i8<br /><br />.out &quot;Six errors should follow&quot;<br />.a16<br />assert_a8<br />.i16<br />assert_i8<br />.a8<br />assert_a16<br />.i8<br />assert_i16<br />.p02<br />assert_i16<br />assert_a16<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jan 31, 2014 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Seems like a good way to test it. I'll be probably using this trick if/when I get around to doing some more SNES coding.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Jan 31, 2014 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm only imagining a use for this in macros. If you want to be sure the assembler is configured for a certain register size for a routine, just set it with .A8, .A16, etc. before the routine's code. If you want to be sure that the register is that size at run-time, an assemble-time macro can't help you; you ned REP and SEP.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jan 31, 2014 5:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have absolutely no idea what all of that pseudocode is about (nor do I have any idea what <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr</tt> does -- there is no such opcode on 65816), nor what it solves.  <a href="http://www.youtube.com/watch?v=tS64Mz-Z_7I" class="postlink">What's the issue?</a><br /><br />The ca65 assembler already seems to have brains for knowing what size your registers are at operation-time (by following <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sep/rep</tt> bits as you said).  If you want to change the behaviour or override it, then what blargg said is spot on.  This is how 65816 assemblers have behaved/worked for years (my own experience being with Merlin 16, ORCA/M, and x816).  You use the assemblers' pseudo-ops (ex. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.a16</tt>) to accomplish such overrides, all with the hope that the programmer knows what they're doing.  (Such overrides almost always justify a small comment explaining why it's being done)<br /><br />(Footnote: not in this thread, but the other -- people whining/crying over the dynamic register sizes on the 65816 need to get over it already, such complaints (at least with me) fall on deaf ears.  It isn't ever a problem when writing/creating new code, only when disassembling or reverse-engineering existing binary data.  And I'd take the pains of that over the nonsense of most present-day architectures any day of the week.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 31, 2014 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the macro, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldr</tt> is a macro argument whose value is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx</tt>.<br /><br />I just wonder what was in that Psygnosis assembler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Jan 31, 2014 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can understand the motivation for this. The processor has modes, and if you change them at all, you may be in the wrong one when some code is executing. To make it worse, there are <em>two</em> copies of this mode, in addition to the one you expect: the one the assembler is in, and the one the processor is in while the code is executing. These macros at least allow you to ensure the assembler is in the same mode you want, and presumably the programmer has the processor in the same mode as the assembler. The objection to changing the mode is that it has overhead and might require masking things if you're widening any registers.<br /><br />The above has led me to laying out a &quot;standard&quot; mode to run everything in, and only stray from it where the benefits outweigh the cost. This has some cost in slightly slower/larger code than optimizing register size everywhere and handling all the variations between routines in some globally-optimal way (which would be ripe for hard-to-find bugs).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Sat Feb 01, 2014 11:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This thread is confusing. Many directives &amp; variables &amp; macros, and it isn't quite clear to me what tepples was asking for.<br /><br />The .p02 .p816 directives seem to be selecting 6502 or 65816 mode.<br />The .a8 .a16 .i8 .i16 directives seem to be selecting 8bit/16bit modes.<br />I don't know if they do just tell the assembler which mode to use, or if they do additionally produce code (eg. REP/SEP).<br /><br />But I think tepples already knows that, and he wasn't asking what they are doing, or how to switch between 8bit/16bit modes - but rather how to <em>detect</em> if the assembler is in 8bit mode or 16bit mode.<br /><br />I can't imagine what tepples meant by &quot;useful if you're using smart mode&quot;. But that type of detection might be useful here or there. Like in a macro that shall generate REP/SEP opcodes only if needed (ie. only if the assembler state (and implied: the assumed cpu state) isn't already in the desired mode).<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Am I doing it wrong?<br />...<br />.out &quot;Six errors should follow&quot;<br /></div><br />If you were getting that six errors (?) then you are probably doing it right.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I just wonder what was in that Psygnosis assembler.</div><br />What Psygnosis assembler? Didn't you refer to something called &quot;ca65&quot;? Or is ca65 a compiler that interacts with the psygnosis assembler?<br /><br />The term &quot;assert&quot; (and the purpose &quot;.assert &quot; directive) are also confusing me. Maybe my english just too bad to understand the subject :-)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Feb 01, 2014 11:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I just wonder what was in that Psygnosis assembler.</div><br />What Psygnosis assembler? Didn't you refer to something called &quot;ca65&quot;? Or is ca65 a compiler that interacts with the psygnosis assembler?</div><br />Psygnosis had a SNES development kit (Psy-Q) with an assembler called ASM658. In another thread somebody mentioned that it had some automation related to checking that the register sizes are set correctly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Feb 01, 2014 11:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As I understand it (I haven't read tepples' code closely), these are macros to assert that the assembler's current A or X/Y size setting is a particular value. I noticed that the code generates an instruction that generates 2 or 3 bytes of code depending on the mode (and in a dummy segment so it doesn't add anything to the ROM), and has an .assert, which agree. It also has some tests where a concrete failure is an abstract pass. In another thread another assembler is mentioned and I think the question is how/what it did regarding this issue of verifying the assembler mode.<br /><br />Smart mode is probably where the assembler attempts to adjust its mode to match the code, e.g. it watches for REP/SEP. In this mode, one might not realize the register size changed and thus the assertion is a good way to express and verify the programmer's expectation in the source code.<br /><br />tepples' approach (perhaps all one can do within ca65's limitations) I don't think allows for anything other than an assertion/error, as the size of generated code can't feed back to deciding whether to generate some code (probably because this could easily lead to feedback loops where the assembler/linker would have to keep re-running).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ARM9</b> [ Sun Feb 02, 2014 7:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">But that type of detection might be useful here or there. Like in a macro that shall generate REP/SEP opcodes only if needed (ie. only if the assembler state (and implied: the assumed cpu state) isn't already in the desired mode).<br /></div><br />I'd rather have it throw an error than trying to write code for me in that case, not only because you'd also need to have the macro restore the processor state at the end with an additional rep and/or sep.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Feb 02, 2014 11:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Macros to assert current register size in ca65</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just had a realization that was delayed this long because of the premature-optimization disease. My troubled mind sees the register size mode bits and yells &quot;Oh my god, I have to optimize the size at all times or I'm not getting every last ounce out of the processor!&quot; But I just had a flash of insight: these mode bits are something you decide globally based on your overall design. Are you porting lots of 6502 code? Then you probably use emulation mode. Is size critical, and are you dealing with mostly small arrays? 8-bit everything is probably best. Larger arrays, size not critical? 16-bit X/Y. Compiled C code? Asm doing lots of large integer manipulation? Obviously 16-bit A. Basically it's a way to set the overall processor characteristics. Of course you might temporarily change them where it has a significant benefit, but it's not something you change constantly and try to accommodate as if it were just another ever-changing flag.<br /><br />I know I said that I do the above already, but it wasn't due to the above realization, mostly defeat and acceptance of terrible, dreadful sub-optimality.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>