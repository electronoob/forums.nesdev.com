<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Introducing myself. Starting off with mapper selection.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Introducing myself. Starting off with mapper selection.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12471">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12471</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitMicroGuy</b> [ Sun Mar 08, 2015 1:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello. I'm an 8-bit microcontroller programmer. I've been programming Atmel AVR microcontrollers. I've been working in ASM and C. I have 5 years of programming experience and also make C++ programs in Windows.<br /><br />When I was a teen, I played SMB on an emulator and wished to make an NES game.<br />Soon, I made my own hacks. They were level edits, music edits, text edits and graphics edits, but none of them were ASM edits.<br />Few years later, I've been working in asm to make some demos and such.<br />Now I decided to make my own NES game and I've been brainstorming about how things might work.<br />What I have on my mind are NES games that push the NES resources up to the maximum.<br /><br />What I need to know is which mapper and compiler suit my needs for these projects.<br />Please help me find a mapper and a compiler. I need these features:<br /><ul>Dynamically mapping of tiles into the PPU (like in Battletoads how Rash's current metasprite tiles are on the same address all the time! Just changing the tiles)<br />Need to somehow get at least (but I prefer more) 16KB of RAM and 16KB of save for a Minecraft-like project (I need to store the blocks somewhere)<br />Mapper with a multiplier while the C compiler must use the mapper's registers for multiplying and not the manual ASM multiplying<br />Extra channels for sound (like shown in FamiTracker)<br />Having the 0xE000-0xFFFF PRG-ROM bank static while other(s) is/are remapped by writing to a certain register<br />Synchronized scroll changing for each scanline during rendering (Does mapper do this or can I do this myself?)<br />Remapping background tiles during rendering between scanlines (Same question)<br />Must be compatible with FamiTracker's bankswitching for executing FamiTracker code and reading FamiTracker music data<br />4 PPU screens</ul><br />I can implement the game loop and the game object iteration myself, but I want to know which mapper to use before I start.<br />Projects on my mind are (sorted from less makeable to more makeable):<br /><ul>Team Fortress 2 for NES for 2 players<br />Minecraft for NES with 2 players<br />A Mario kind of a game, but you change weapons and suits during the action scene and fight like in Battletoads</ul><br />Thank you for your time to look at this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Mar 08, 2015 1:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds like you want to code for the SNES <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /> <br />Or write your own mapper and your own compiler, but beware, this is several years of works alone before you are able to write the first like of code for your hypothetical game.<br /><br />The only currently ready C compiler for the 6502 generates extremely inefficient code and certainly do not take advantage of the MMC5's builtin multiplier.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Mar 08, 2015 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">Dynamically mapping of tiles into the PPU (like in Battletoads how Rash's current metasprite tiles are on the same address all the time! Just changing the tiles)<br />Having the 0xE000-0xFFFF PRG-ROM bank static while other(s) is/are remapped by writing to a certain register<br />4 PPU screens<br /></div>Almost any non-trivial mapper supports these. The only question is how many tiles change at the same time. (The best you can get is &quot;upload things to RAM yourself&quot; or &quot;64 tiles at a time&quot;)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Need to somehow get at least (but I prefer more) 16KB of RAM and 16KB of save for a Minecraft-like project (I need to store the blocks somewhere)<br /></div>That basically limits you to MMC5. (If you're willing to give on &quot;16 KiB of RAM available always&quot;, Sunsoft 5B, mapper 30, and mapper 168 will provide larger save blocks)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Mapper with a multiplier while the C compiler must use the mapper's registers for multiplying and not the manual ASM multiplying<br /></div>MMC5 and JY-Company, but as bregalad pointed out, you'll have to use your own (inlineable) function, not <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">*</tt><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Extra channels for sound (like shown in FamiTracker)<br /></div>MMC5, VRC6, VRC7, Namco 163, Sunsoft 5B. I'll leave out the FDS's single channel because you said plural.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Synchronized scroll changing for each scanline during rendering (Does mapper do this or can I do this myself?)<br />Remapping background tiles during rendering between scanlines (Same question)<br /></div>The former <em>has</em> to be done by the CPU. The latter can be done by the MMC2 and MMC4.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Must be compatible with FamiTracker's bankswitching for executing FamiTracker code and reading FamiTracker music data<br /></div>You should instead look into the FamiTone replayer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Mar 08, 2015 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only option you have is the MMC5 (a moderately rare mapper that hasn't been fully replicated yet), but even it won't do 100% of the things you're asking for. Keep in mind that extra sound channels don't work on the NES without hardware mods, only on the famicom.<br /><br />The SNES will indeed fulfill your list of demands much better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitMicroGuy</b> [ Mon Mar 09, 2015 4:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Please excuse me. I made a miscalculation. I thought that one page/screen of blocks has 32x32 blocks while it has 16x16 blocks. This resulted in saying that I need 16K RAM. How embarrassing. When I looked into SMB3 RAM map on Data Crystal, I saw that the level data is held on 6000-794F. I divided it with 256 (16x16 blocks) and got 25. This means that I can have 25 blocks. So my Minecraft world would be of 6x4 pages which is 96x64 blocks which is actually very good. The rest of the save RAM of the MMC5 mapper (7950-7FFF) would be used for entity data (Zombies, Chests, Player inventory) and some other game save data.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">Dynamically mapping of tiles into the PPU (like in Battletoads how Rash's current metasprite tiles are on the same address all the time! Just changing the tiles)<br />Having the 0xE000-0xFFFF PRG-ROM bank static while other(s) is/are remapped by writing to a certain register<br />4 PPU screens<br /></div>Almost any non-trivial mapper supports these. The only question is how many tiles change at the same time. (The best you can get is &quot;upload things to RAM yourself&quot; or &quot;64 tiles at a time&quot;)</div><br /><br />Let's say we have a Tanooki Mario metasprite. If all sprites are 8x16 (which they must be because of some requirements of the MMC5 mapper for what I want), then the metasprite has 6 sprites: 2 for the head, 2 for the body and 2 for the tail. If it has 6 sprites, then, according to my rule, it can only have 12 sprite tiles allocated in the VRAM where each is 8x8 (of course). No more, no less! Having an addressed bank of 64 sprites for only one game object instance is a big waste of memory! That's why I want to do it Battletoads-style: One instance, one metasprite, only used sprite tiles are kept in VRAM. This will be the best solution for having SMB3 enemies from different worlds without having conflicts where the enemy A uses bank #Foo, the enemy B uses bank #Bar, and the enemy C wants bank #Baz, but can't because banks can only be allocated 64 by 64.<br /><br />My configuration is that every game object instance each allocates maximum 12 or 16 sprite tiles in VRAM. Those tile addresses belong to those instances until they change the metasprite to a metasprite with a different number of contained sprites or until the instances are destroyed. It works like malloc/free, new/delete, garbage collector. <sub>&#40;Yay malloc for the NES lol XD&#41;</sub><br />The first bank address space will be used for the sprites that are always there (Players, HUD, Cursor, etc.) (like .data segment), the second and third will be the heap (Enemies, Items, etc.) (like the .heap segment) and the fourth will be the one from which I copypaste the sprites into the other bank address spaces.<br /><br />However, I was thinking if there was a mapper that doesn't let the CPU copypaste, but that the mapper instantly puts a tile from a bank directly into VRAM at the needed position.<br /><br />The number of the tiles in the need to change at the same time would be... Let's say, Raccoon Mario, 2 fireballs, 2 Hammer Brothers, 4 Hammers. 12+2*2+2*4+4*2. That's 32 tiles per frame.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">The only option you have is the MMC5 (a moderately rare mapper that hasn't been fully replicated yet), but even it won't do 100% of the things you're asking for. Keep in mind that extra sound channels don't work on the NES without hardware mods, only on the famicom.<br /><br />The SNES will indeed fulfill your list of demands much better.</div><br /><br />Well, as long as emulators can do it, I'm happy. Can FCEUX emulate MMC5 including, but not limited to the extra sound channels?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 09, 2015 6:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">Well, as long as emulators can do it, I'm happy.</div><br />If you're not interested in running your game on a cartridge, you could always make a game for the Java or .NET platform. <a href="https://en.wikipedia.org/wiki/Java_virtual_machine" class="postlink">JVM</a> is an emulator, and <a href="https://en.wikipedia.org/wiki/Common_Language_Runtime" class="postlink">CLR</a> is an emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 09, 2015 9:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">This resulted in saying that I need 16K RAM.</div><br />This is the least of your worries, seeing as the MMC5 can address up to 64KB of RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's why I want to do it Battletoads-style: One instance, one metasprite, only used sprite tiles are kept in VRAM.</div><br />Then you definitely have to use CHR-RAM, because no existing mapper can switch chunks smaller than 1KB (64 tiles), even though it's technically possible.<br /><br />Don't forget that VRAM bandwidth is severely limited (you can only write to VRAM during VBlank or forced blanking), and changing 12 tiles means writing 192 tiles to the PPU. With the fastest code possible copying that data from ROM (i.e. string of LDA $XXXX; STA $2007) that would take 1536 CPU cycles, or 68% of the total VBlank time (about 2273 cycles) which leaves little time left for other updates (OAM, name + attribute tables, palettes).<br /><br />Common techniques to increase the amount of data you can send to VRAM are:<br /><br />1- Sacrificing part of the picture with forced blanking to get more time;<br />2- Copying the data to ZP before hand so you can transfer each byte in 7 cycles instead of 8;<br />3- Using insane amounts of RAM to generate strings of LDA #$XX; STA $2007 so each byte is transferred in 6 cycles;<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My configuration is that every game object instance each allocates maximum 12 or 16 sprite tiles in VRAM. Those tile addresses belong to those instances until they change the metasprite to a metasprite with a different number of contained sprites or until the instances are destroyed.</div><br />No matter the technique you use, it's safe to say you won't be updating several characters every frame. If you're lucky, you'll be able to update one without the need to double-buffer it. Enemies aren't typically animated like this for this reason. Actually, few games on the NES use this method of animation for anything.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, I was thinking if there was a mapper that doesn't let the CPU copypaste, but that the mapper instantly puts a tile from a bank directly into VRAM at the needed position.</div><br />AFAIK, there are no mappers that will help you with this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The number of the tiles in the need to change at the same time would be... Let's say, Raccoon Mario, 2 fireballs, 2 Hammer Brothers, 4 Hammers. 12+2*2+2*4+4*2. That's 32 tiles per frame.</div><br />32 tiles * 16 bytes * 8 cycles = 4096 cycles, with the fastest possible code copying directly from ROM to VRAM. You'd have to blank a little over 16 scanlines in order to be able to transfer this much data, but that's not counting the other updates (OAM, NT + AT, palettes).<br /><br />If you use have 2560 bytes of RAM to spare, you can update the 32 tiles in only 3072 cycles, in which case you'd only need 8 or so blanked scanlines (again, not considering the other VRAM updates).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can FCEUX emulate MMC5 including, but not limited to the extra sound channels?</div><br />I think so, but FCEUX isn't particularly accurate. Don't rely solely on it for development.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Mar 09, 2015 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I must admit, I don't really understand your aim, wanting to target the NES, but not wanting to be bound by its usual constraints... but good luck on your game! (Are you making a game?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 09, 2015 10:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're willing to budge on the use of MMC5 expansion audio in an English-language game, here's how to make CHR RAM work for sprite animation.<br /><br />The vast majority of CHR RAM boards have 8 KiB. The sprite half of the pattern table ($1000-$1FFF) holds 256 different tiles, which is is enough for 128 distinct 8x16 pixel sprites, twice as many as the NES can show. Thus you can double buffer the sprite cels. For example, while displaying a frame of animation with 6 sprites stored at $1000-$10BF, you can load the next frame of animation into $1800-$18BF and then switch to those tiles once the upload is complete. If you don't extend blanking, a moderately unrolled loop can copy 10 tiles to VRAM per vblank, enough for five 8x16 pixel sprites, and still have time to copy the display list to OAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Raccoon Mario, 2 fireballs, 2 Hammer Brothers, 4 Hammers. 12+2*2+2*4+4*2. That's 32 tiles per frame.</div><br />Provided that all of them are animating at 60 fps. If they're animating at 15 fps, you can spread the 32 tiles of updates across several vblanks.  Or you can statically allocate space for often-reused frames such as hammers and fireballs.<br /><br />But given how intrusive the MMC5 is on other aspects of rendering, I'm not entirely sure MMC5 even allows CHR RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Mar 09, 2015 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But given how intrusive the MMC5 is on other aspects of rendering, I'm not entirely sure MMC5 even allows CHR RAM.<br /></div>People have made reproductions of the Megaman−∞ ROM hack, which uses CHRRAM, and had it work, so... at least <em>that</em> isn't a problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 09, 2015 5:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I must admit, I don't really understand your aim, wanting to target the NES, but not wanting to be bound by its usual constraints... but good luck on your game!</div><br />With such high technical requirements, this better be the ultimate NES game... if it ends up looking like a normal game it will be a huge letdown. I mean, I hope you have something really cool planned for the MMC5 multiplications, because most games work just fine without any multiplications at all, and when they're absolutely necessary, look-up tables or plain multiplication algorithms are perfectly acceptable.<br /><br />IMO, most of the fun in coding for old consoles is about working around the limitations and designing creative solutions that will allow you to do things that aren't straightforward in those platforms, so beefing up the hardware in an attempt to get around the limitations kills all the fun. You might as well code the game for a much less restricted environment, specially considering you're not particularly interested in running it on real hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>8bitMicroGuy</b> [ Mon Mar 09, 2015 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">Well, as long as emulators can do it, I'm happy.</div><br />If you're not interested in running your game on a cartridge, you could always make a game for the Java or .NET platform. <a href="https://en.wikipedia.org/wiki/Java_virtual_machine" class="postlink">JVM</a> is an emulator, and <a href="https://en.wikipedia.org/wiki/Common_Language_Runtime" class="postlink">CLR</a> is an emulator.</div><br />Java has a garbage collector, but I like it when I can free/delete objects using free/delete function/statement when I want and not when those tangly references are released. If Java has no pointers, but only references, then it's not for me.<br /><br />Also, woah... I didn't actually realize that this copypasting would take away so much cycles! I guess I'll have to stick with bankswitching. I've been expecting so much out of this poor little primitive and tired machinie 6502 <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br />While studying the Battletoads ROM, I found out that the only tiles that are being copypasted are the noise generator (used for the bird pilot guy's screen), waterfall tiles and player tiles. All enemies use their own tiles which are static.<br />When I saw Tom and Jerry ROM, Jerry moves very smoothly, but there's no copypasting, just bankswitching for every 5th frame. Jerry's metasprite is 3x4 tiles if I'm not mistaken. That's 12 tiles. One bank has 64 tiles. 64 divided by 12 is 5+1/3.<br />This means that Jerry's walking animation uses two banks.<br /><br />For the minecraft project, I took 4 hours to write up this big document<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Minecraft for NES - Sprite analysis<br /><br />All sprites have 2 tiles because they're 8x16.<br />There are 4 bank address spaces.<br />All bank address spaces are switching constantly to make a walking effect for walking animations and breathing effect for steady creatures.<br />There are some tiles that are &quot;copypasted&quot; using this mechanism:<br />1. Bank address space 0 gets switched to the bank from which to copy<br />2. Needed data gets loaded from PPU address space into a buffer in RAM<br />3. Data from buffer gets written into PPU address space from 228th tile to 256th<br />4. Bank address space 0 gets switched back to its bankswitch animation default<br /><br />Tiles from 36th to 64th in the banks being mapped to the bank address space 3 are filled with color 2 with an X in color 0 for detection of failure in copypasting in time.<br /><br />These are the tile allocations:<br />Players = 4(head)*2(for each player)*2(normal, hurt)+4(body)*(12(steady/breathing, walking, running, jumping, falling, mining, hurt, crouching, crawling, crouching and mining, holding on ladder/wines, <br /><br />climbing on ladder/wines) = 64<br />Sheep = 4(head)*2(normal, hurt)+6(body)*3(steady/breathing, walk, hurt)) = 26<br />Pig = 4(head)*2(normal, hurt)+6(body)*3(steady/breathing, walk, hurt)) = 26<br />Cow = 4(head)*2(normal, hurt)+6(body)*3(steady/breathing, walk, hurt)) = 26<br />Zombie = 4(head)*2(normal, hurt)+4(body)*2(steady/shaking, walking) = 16<br />Skeleton = 4(head)+4(body)*2(steady, walking) = 12<br />Creeper = 4(head)+4(body)*2(steady, walking) = 12<br />Enderman = 4(head)+8(body)*2(steady, walking) = 20<br />Villager = 4(head)+4(body)*3(stop, walkA, walkB) = 16<br />Explosion = 4 (will be mirrored, is animated by bankswitch) = 4<br />Flames = 4 (will be mirrored, is animated by bankswitch) = 4<br />Shattered block piece = 2(that's the minimum of one sprite and metasprite, will be animated as a polar rotating piece of block by bankswitch) = 2<br />Cracking block animation = 4*2(for each player) = 8 (will be copypasted because it cannot be synchronous with the bankswitch animation)<br />Dropped items = 2(that's the minimum of one sprite and metasprite, they are copypasted on need)*8 = 16<br />Held items = 2(same)*2(for each player) = 4<br /><br />Copypasted tiles = Cracking block animation + Dropped items + Held items = 8 + 16 + 4 = 20<br /><br />Sprite Palette 0 = Orange, Red, Brown (Explosion, Fire, Wood, Wooden planks, Wheat, Bucket with Lava)<br />Sprite Palette 1 = White, Pink, Dark brown (Skeleton, Pig, Enderman, Pink dyed sheep, Player torso, Raw beef, Flowers)<br />Sprite Palette 2 = White, Green, Dark blue (Creeper, Cow, Green dyed sheep, Zombie, Player torso, Seeds, Bucket, Bucket with Water)<br />Sprite Palette 3 = White, Skin color, Dark gray (Sheep, Player head, Villager, Cracking block animation, Shattered block)</div><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The number of the tiles in the need to change at the same time would be... Let's say, Raccoon Mario, 2 fireballs, 2 Hammer Brothers, 4 Hammers. 12+2*2+2*4+4*2. That's 32 tiles per frame.</div><br />32 tiles * 16 bytes * 8 cycles = 4096 cycles, with the fastest possible code copying directly from ROM to VRAM. You'd have to blank a little over 16 scanlines in order to be able to transfer this much data, but that's not counting the other updates (OAM, NT + AT, palettes).<br /><br />If you use have 2560 bytes of RAM to spare, you can update the 32 tiles in only 3072 cycles, in which case you'd only need 8 or so blanked scanlines (again, not considering the other VRAM updates).</div><br />So how much would I need to sacrifice from the scanlines if I have 20 tiles? How much cycles? The game will run in PAL mode which means 50fps and it will not blank full frames. Maybe just a bit from the scanlines. Game code must run in each frame, not every second or third, etc.<br />I'll have source address selection code as explained in &quot;copypasting&quot;, then I'll copy the tiles from VROM into a buffer by using<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $2006 (is it 2006 for loading from VROM?)<br />STA $8000 (PRG-RAM from MMC5)<br />LDA $2006<br />STA $8001<br />etc...</div><br />Just finding the tile and then performing this without loops to save cycles.<br />Then I'll just do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $8000<br />STA $2007<br />LDA $8001<br />STA $2007<br />etc...</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Mar 09, 2015 6:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">So how much would I need to sacrifice from the scanlines if I have 20 tiles? How much cycles? The game will run in PAL mode which means 50fps and it will not blank full frames. Maybe just a bit from the scanlines. Game code must run in each frame, not every second or third, etc.<br /></div>2C07 (PAL) mode is kinda cheating, even if it's somewhat of a tradition.<br />To do the math:<br />70 scanlines of vblank × 341 = 23870 pixels ÷ 3.2 = 7459 cycles<br />-514 for OAM DMA = 6945 cycles<br />Fastest possible bulk upload, has to be fully unrolled in RAM: 6 cycles per byte, fully unrolled: 1157 bytes; consumes almost 6kB of RAM.<br />Unrolled, but can be in ROM: 8 cycles per byte: 828 bytes; consumes 5kB of ROM.<br />Not unrolled at all, but uploads have to be page-aligned (i.e. $XX00): 13 cycles per byte: 534 bytes; consumes 9 bytes of ROM.<br /><br />If you're going to instead target the 2C02 and Dendy, it's instead <br />20 scanlines × 341 = 6820 pixels ÷ 3 = 2273 cycles - 514 for OAM DMA = 1759 cycles<br />The same numbers then become 293, 219, and 135.<br /><br />Note that each time you change the address you're writing to that consumes the time that two bytes would have taken.<br /><br /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">This means that Jerry's walking animation uses two banks.<br /></div>Remember that sprites can be re-selected from <em>anywhere</em> in their 4 KiB bank on every vblank for ~free (you're probably already uploading new OAM data every frame). So it's not just the four 1 KiB banks but whatever clever management you can do within that bank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 09, 2015 9:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">The game will run in PAL mode</div><br />PAL has the advantage of a much longer VBlank (70 scanlines vs. 20 of NTSC), allowing way more VRAM updates. That means complete incompatibility with NTSC consoles though, which is not very nice.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $2006 (is it 2006 for loading from VROM?)<br />STA $8000 (PRG-RAM from MMC5)<br />LDA $2006<br />STA $8001<br />etc...</div></div><br />If you're transferring bytes you don't have VROM, only VRAM. Tiles are stored in regular PRG-ROM and you copy them to CHR-RAM.<br /><br />Also, you can't read $2006, this register is only used to set the PPU address, which you can read from or write to using register $2007.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $8000<br />STA $2007<br />LDA $8001<br />STA $2007<br />etc...</div></div><br />I'd recommend using some sort of indexing (along with interleaving the tile data), so you can use the same code to read different tiles each time, instead of having code that can only read from one location.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Mar 10, 2015 2:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Introducing myself. Starting off with mapper selection.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">8bitMicroGuy wrote:</div><div class="quotecontent">Java has a garbage collector, but I like it when I can free/delete objects using free/delete function/statement when I want and not when those tangly references are released. If Java has no pointers, but only references, then it's not for me.</div><br />I am getting completely off-topic, but I agree so much with you here ! Java as a language incitates people to write messy and disorganized programs. There is a couple of other, better, languages that targets the JVM. However I think tepples's comment about &quot;if you want to write code for an emulator, write for the JVM, because the JVM is an emulator&quot; is ironical and should be taken to the 2nd degree. (your rection makes it sounds you took it directly).<br /><br />Tepples' point is that if you don't care about hardware and just want to write a NES-like game that can run on a PC, then just do so (Mega Man 9 comes in mind, for instance). Making it possible on hardware is a very complicated extra step.<br /><br />Besides, the JVM is not really an emulator, it compiles the bytecode when you start to run the program to machine (binary) code and then executes it, which is why starting up a Java program can be extremely slow. Even back when it was interpreting the bytecode it doesn't make it an emulator, because there is no &quot;hardware&quot; equivalent of it, and it just emulates a CPU, not an entire machine.<br /><br />Also you keep mentionning minecraft, but besides the graphics being blocky, they are not possible to render on the NES (just so that you know) because they're 3D.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>