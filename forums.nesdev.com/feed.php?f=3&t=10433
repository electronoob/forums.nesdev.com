<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=10433" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-08-31T05:09:12-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=10433</id>
<entry>
<author><name><![CDATA[ArsonIzer]]></name></author>
<updated>2013-08-31T05:09:12-07:00</updated>
<published>2013-08-31T05:09:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117302#p117302</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117302#p117302"/>
<title type="html"><![CDATA[Re: PPU VRAM address write behavior?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117302#p117302"><![CDATA[
Thanks a lot for taking the time to explain this tepples, I now fully understand the role and working of the VRAM addresses <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6075">ArsonIzer</a> — Sat Aug 31, 2013 5:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-08-30T14:22:05-07:00</updated>
<published>2013-08-30T14:22:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117275#p117275</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117275#p117275"/>
<title type="html"><![CDATA[Re: PPU VRAM address write behavior?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117275#p117275"><![CDATA[
<div class="quotetitle">ArsonIzer wrote:</div><div class="quotecontent"><br />I was reading &quot;The skinny on NES scrolling&quot;, which, among other things, describes what happens with the current/temporary VRAM address when a program writes to $2000, $2005 and $2006. I either don't understand the general way the document explains things, or I just don't understand the VRAM address's working. This is what I mean: <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">$2000 write:<br />t: ...BA.. ........ = d: ......BA<br /></div><br /><br />Where t is supposedly the VRAM value, and d is the data written to it. So, as far as I can understand, if a program writes 11 to $2000, the VRAM value is set to 0001100 00000000? Why is this? Why is the location so seemingly random? </div><br />It's not random. In the NES memory map, those two bits are the bits that control which nametable the PPU will read from.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There are more of these cases which I cannot understand: <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">$2005 first write (w is 0):<br />t: ....... ...HGFED = d: HGFED...<br />x:              CBA = d: .....CBA<br />w:                  = 1<br /></div><br /><br />I just don't get the general premise of this one. What is meant with HGFED...? Am I misunderstanding when I say that any of these letters is a random 1 or 0? So if that's the case, HGFED... could be something like 10110000, right?</div><br />Yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Is the written value actually HGFEDCBA, and does it get split and written to different registers, i.e. the first 3 bits are written to the X register, and the last 5 are written to the T register?<br /></div><br />Yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Why is this?<br /></div><br />Scrolling on the NES works by reading part of a tile every 8 pixels of the screen, converting that tile to a sequence of 8 pixels, and delaying this sequence by a value between 0 and 7 pixels. Because each tile is 8 pixels wide, the horizontal position in tiles is one-eighth (1/8) of the horizontal position in pixels. Changing the nametable address moves around in the background plane by units of eight pixels. To move in units smaller than one tile, you need to control the delay value, which is why that's called the &quot;fine scroll amount&quot;.<br /><br />When you divide a binary number of the form HGFEDCBA by eight, you always get HGFED, remainder CBA. So the bits of the nametable address corresponding to the horizontal position in tiles are set to HGFED, which is the horizontal position divided by eight, and the fine scroll amount is set to CBA.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />what's with the random ordering of the bits?<br /></div><br />Again, converting a Y coordinate to position of the tile within the nametable (HGFED) and position of the pixel within the tile (CBA).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Aug 30, 2013 2:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ArsonIzer]]></name></author>
<updated>2013-08-30T14:10:30-07:00</updated>
<published>2013-08-30T14:10:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117274#p117274</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117274#p117274"/>
<title type="html"><![CDATA[PPU VRAM address write behavior?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10433&amp;p=117274#p117274"><![CDATA[
I was reading &quot;The skinny on NES scrolling&quot;, which, among other things, describes what happens with the current/temporary VRAM address when a program writes to $2000, $2005 and $2006. I either don't understand the general way the document explains things, or I just don't understand the VRAM address's working. This is what I mean: <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />$2000 write:<br />t: ...BA.. ........ = d: ......BA<br /></div><br /><br />Where t is supposedly the VRAM value, and d is the data written to it. So, as far as I can understand, if a program writes 11 to $2000, the VRAM value is set to 0001100 00000000? Why is this? Why is the location so seemingly random? <br /><br />There are more of these cases which I cannot understand: <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />$2005 first write (w is 0):<br />t: ....... ...HGFED = d: HGFED...<br />x:              CBA = d: .....CBA<br />w:                  = 1<br /></div><br /><br />I just don't get the general premise of this one. What is meant with HGFED...? Am I misunderstanding when I say that any of these letters is a random 1 or 0? So if that's the case, HGFED... could be something like 10110000, right? And what's with the second value, .....CBA? Does that belong with the previously mentioned HGFED...? Is the written value actually HGFEDCBA, and does it get split and written to different registers, i.e. the first 3 bits are written to the X register, and the last 5 are written to the T register? Why is this? What's the logic behind this functioning? The only thing I understand is the w: = 1, but other than that, all of this seems completely random. The same thing applies to the next couple of things: <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />$2005 second write (w is 1):<br />t: CBA..HG FED..... = d: HGFEDCBA<br />w:                  = 0<br />$2006 first write (w is 0):<br />t: .FEDCBA ........ = d: ..FEDCBA<br />t: X...... ........ = 0<br />w:                  = 1<br />$2006 second write (w is 1):<br />t: ....... HGFEDCBA = d: HGFEDCBA<br />v                   = t<br />w:                  = 0<br /></div><br /><br />$2005 second write: what's with the random ordering of the bits? <br /><br />$2006 first and second write are more understandable to me. I assume the first time data is written, the latter 7 bits are used to store the data, and the second time data is written, the first 8 bits are used to store it. What I don't really understand is the t: X...... ........ = 0 statement when doing the first write to $2006, and the v = t when doing the second write to $2006. <br /><br />I know the question seems a bit large and vague, but I just don't understand the concept behind these registers. I hope someone can explain this to me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6075">ArsonIzer</a> — Fri Aug 30, 2013 2:10 pm</p><hr />
]]></content>
</entry>
</feed>