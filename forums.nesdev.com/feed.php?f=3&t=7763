<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=7763" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-05-19T16:18:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=7763</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-05-19T16:18:35-07:00</updated>
<published>2011-05-19T16:18:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78348#p78348</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78348#p78348"/>
<title type="html"><![CDATA[How about a ฿ounty?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78348#p78348"><![CDATA[
<strong>฿฿฿ MAKE MONEY FAST ฿฿฿</strong><br /><br />The first to implement practical scriptable mapper support in a Free emulator that runs at real time on an Atom subnotebook PC will earn some Bitcoins.<br /><br />Anyway:<br />Of course the cart edge gets A15; it's just delayed by a fraction of a cycle.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu May 19, 2011 4:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-05-19T16:01:56-07:00</updated>
<published>2011-05-19T16:01:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78347#p78347</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78347#p78347"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78347#p78347"><![CDATA[
Any way this can be merged with all the other times it was talked about?<br /><br />I think it's another thing where everyone has their own implementation like the iNES successor.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Thu May 19, 2011 4:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-05-19T13:05:27-07:00</updated>
<published>2011-05-19T13:05:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78337#p78337</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78337#p78337"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78337#p78337"><![CDATA[
Just as a test, here's my attempt to describe MMC1 in this notation:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">var shiftValue = 0; // Holds the shift register value<br />var bitCount = 0; // Counts how many bits have been written<br />var latch = 0; // Is set to shiftValue when it has 5 bits<br />var latchFull = 0; // Flag determining if the latch has just been loaded<br />var mirroring = 0; // mirroring behavior<br />var prgMode = 0; // PRG bank behavior<br />var chrMode = 0; // CHR bank behavior &#40;flag&#41;<br />var chrBankA = 0; // PPU $0000-0FFF or $0000-1FFF bank<br />var chrBankB = 0; // PPU $1000-1FFF bank<br />var prgBank = 0; // PRG bank<br />var ramDisabled = 0; // Flag determining if cart RAM is disabled<br /><br />// Evaluate the shift register behavior first.<br />on CPU_Write:8000,FFFF &#123;<br />  if !&#40;PRG_Data &amp; 0x80&#41; &#123;<br />    shiftValue = shiftValue &lt;&lt; 1;<br />    shiftValue |= PRG_Data &amp; 1;<br />    bitCount++;<br />    if &#40;bitCount == 5&#41; &#123;<br />      latch = shiftValue &amp; 0x1F;<br />      bitCount = 0;<br />      latchFull = 1;<br />    &#125;<br />  &#125; else &#123;<br />    bitCount = 0;<br />  &#125;<br />&#125;<br /><br />// Afterwards, check which address range was written to.<br />// The appropriate code only runs when the latch has been freshly loaded from<br />// the previous routine.<br /><br />on CPU_Write:8000,9FFF &#123; // Control register<br />  if &#40;latchFull&#41; &#123;<br />    latchFull = 0;<br />    mirroring = latch &amp; 3;<br />    prgMode = &#40;latch &gt;&gt; 2&#41; &amp; 3;<br />    chrMode = latch &amp; 0x10; // Only need to know if this is zero or nonzero<br />  &#125;<br />&#125;<br /><br />on CPU_Write:A000,BFFF &#123; // CHR Bank A &#40;0000-0FFF or 0000-1FFF&#41;<br />  if &#40;latchFull&#41; &#123;<br />    latchFull = 0;<br />    chrBankA = latch &lt;&lt; 12; // %b bbbb.... ........<br />  &#125;<br />&#125;<br /><br />on CPU_Write:C000,DFFF &#123; // CHR Bank B &#40;1000-1FFF&#41;<br />  if &#40;latchFull&#41; &#123;<br />    latchFull = 0;<br />    chrBankB = latch &lt;&lt; 12; // %b bbbb.... ........<br />  &#125;<br />&#125;<br /><br />on CPU_Write:E000,FFFF &#123; // PRG Bank &#40;8000-FFFF or 8000-BFFF or C000-FFFF&#41;<br />  if &#40;latchFull&#41; &#123;<br />    latchFull = 0;<br />    prgBank = &#40;latch &amp; 0xF&#41; &lt;&lt; 14; // %bb bb...... ........<br />    ramDisabled = latch &amp; 0x10; // Only need to know if this is zero or nonzero<br />  &#125;<br />&#125;<br /><br />// Cart RAM<br />on CPU_Read:6000,7FFF &#123;<br />  if !&#40;ramDisabled&#41; &#123;<br />    PRG_Data = PRG_RAM_Space&#91;CPU_Addr &amp; 0x1FFF&#93;;<br />  &#125;<br />  // Assume open bus if PRG_Data isn't set during a read operation.<br />&#125;<br /><br /><br />// PRG Banks<br />on CPU_Read:8000,BFFF &#123;<br />  switch &#40;prgMode&#41; &#123;<br />  case 0: // PRG Bank 8000-FFFF, ignore lowest bit<br />  case 1: // CPU_Addr will fill that in, actually<br />    PRG_Data = PRG_Space&#91;&#40;prgBank &amp; 0x38000&#41; | CPU_Addr&#93;;<br />    break;<br />  case 2: // PRG Bank 8000-BFFF<br />    PRG_Data = PRG_Space&#91;prgBank | &#40;CPU_Addr &amp; 0x3FFF&#41;&#93;;<br />    break;<br />  case 3: // 8000-BFFF fixed to first bank<br />    PRG_Data = PRG_Space&#91;CPU_Addr &amp; 0x3FFF&#93;;<br />    break;<br />  &#125;<br />&#125;<br />on CPU_Read:C000,FFFF &#123;<br />  switch &#40;prgMode&#41; &#123;<br />  case 0: // PRG Bank 8000-FFFF, ignore lowest bit<br />  case 1: // CPU_Addr will fill that in, actually<br />    PRG_Data = PRG_Space&#91;&#40;prgBank &amp; 0x38000&#41; | CPU_Addr&#93;;<br />    break;<br />  case 2: // C000-FFFF fixed to last bank<br />    PRG_Data = PRG_Space&#91;CPU_Addr | 0x3C000&#93;;<br />    break;<br />  case 3: // PRG Bank C000-FFFF<br />    PRG_Data = PRG_Space&#91;prgBank | &#40;CPU_Addr &amp; 0x3FFF&#41;&#93;;<br />    break;<br />  &#125;<br />&#125;<br /><br />// CHR Banks<br />on PPU_Read:0000,0FFF &#123;<br />  if &#40;chrMode&#41; &#123; // nonzero == low bit considered<br />    PPU_Data = PPU_Space&#91;chrBankA | &#40;PPU_Addr &amp; 0x0FFF&#41;&#93;;<br />  &#125; else &#123; // zero == low bit ignored &#40;let PPU_Addr fill it in&#41;<br />    PPU_Data = PPU_Space&#91;&#40;chrBankA &amp; 0x1E000&#41; | PPU_Addr&#93;;<br />  &#125;<br />&#125;<br />on PPU_Write:0000,0FFF &#123;<br />  if &#40;chrMode&#41; &#123; // nonzero == low bit considered<br />    PPU_Space&#91;chrBankA | &#40;PPU_Addr &amp; 0x0FFF&#41;&#93; = PPU_Data;<br />  &#125; else &#123; // zero == low bit ignored &#40;let PPU_Addr fill it in&#41;<br />    PPU_Space&#91;&#40;chrBankA &amp; 0x1E000&#41; | PPU_Addr&#93; = PPU_Data;<br />  &#125;<br />&#125;<br />on PPU_Read:1000,1FFF &#123;<br />  if &#40;chrMode&#41; &#123; // nonzero == use chrBankB<br />    PPU_Data = PPU_Space&#91;chrBankB | &#40;PPU_Addr &amp; 0x0FFF&#41;&#93;;<br />  &#125; else &#123; // zero == use chrBankA and let PPU_Addr fill in low bit<br />    PPU_Data = PPU_Space&#91;&#40;chrBankA &amp; 0x1E000&#41; | PPU_Addr&#93;;<br />  &#125;<br />&#125;<br />on PPU_Write:1000,1FFF &#123;<br />  if &#40;chrMode&#41; &#123; // nonzero == use chrBankB<br />    PPU_Space&#91;chrBankB | &#40;PPU_Addr &amp; 0x0FFF&#41;&#93; = PPU_Data;<br />  &#125; else &#123; // zero == use chrBankA and let PPU_Addr fill in low bit<br />    PPU_Space&#91;&#40;chrBankA &amp; 0x1E000&#41; | PPU_Addr&#93; = PPU_Data;<br />  &#125;<br />&#125;<br /><br />// Nametable mirroring<br />on PPU_Read:2000,23FF &#123; // Upper Left<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />  case 2: // Vertical<br />  case 3: // Horizontal<br />    PPU_Data = CIRAM&#91;PPU_Addr &amp; 0x3FF&#93;;<br />    break;<br />  case 1: // 1 Screen B<br />    PPU_Data = CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93;;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Write:2000,23FF &#123; // Upper Left<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />  case 2: // Vertical<br />  case 3: // Horizontal<br />    CIRAM&#91;PPU_Addr &amp; 0x3FF&#93; = PPU_Data;<br />    break;<br />  case 1: // 1 Screen B<br />    CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93; = PPU_Data;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Read:2400,27FF &#123; // Upper Right<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />  case 3: // Horizontal<br />    PPU_Data = CIRAM&#91;PPU_Addr &amp; 0x3FF&#93;;<br />    break;<br />  case 1: // 1 Screen B<br />  case 2: // Vertical<br />    PPU_Data = CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93;;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Write:2400,27FF &#123; // Upper Right<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />  case 3: // Horizontal<br />    CIRAM&#91;PPU_Addr &amp; 0x3FF&#93; = PPU_Data;<br />    break;<br />  case 1: // 1 Screen B<br />  case 2: // Vertical<br />    CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93; = PPU_Data;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Read:2800,2BFF &#123; // Lower Left<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />  case 2: // Vertical<br />    PPU_Data = CIRAM&#91;PPU_Addr &amp; 0x3FF&#93;;<br />    break;<br />  case 1: // 1 Screen B<br />  case 3: // Horizontal<br />    PPU_Data = CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93;;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Write:2800,2BFF &#123; // Lower Left<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />  case 2: // Vertical<br />    CIRAM&#91;PPU_Addr &amp; 0x3FF&#93; = PPU_Data;<br />    break;<br />  case 1: // 1 Screen B<br />  case 3: // Horizontal<br />    CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93; = PPU_Data;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Read:2C00,2FFF &#123; // Lower Right<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />    PPU_Data = CIRAM&#91;PPU_Addr &amp; 0x3FF&#93;;<br />    break;<br />  case 1: // 1 Screen B<br />  case 2: // Vertical<br />  case 3: // Horizontal<br />    PPU_Data = CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93;;<br />    break;<br />  &#125;<br />&#125;<br />on PPU_Write:2C00,2FFF &#123; // Lower Right<br />  switch &#40;mirroring&#41; &#123;<br />  case 0: // 1 Screen A<br />    CIRAM&#91;PPU_Addr &amp; 0x3FF&#93; = PPU_Data;<br />    break;<br />  case 1: // 1 Screen B<br />  case 2: // Vertical<br />  case 3: // Horizontal<br />    CIRAM&#91;&#40;PPU_Addr &amp; 0x3FF&#41; | 0x400&#93; = PPU_Data;<br />    break;<br />  &#125;<br />&#125;<br /></div><br />There may be a better way to handle the mirroring than to duplicate the routines for both reads and writes...<br /><br />Maybe a PPU_Access event which triggers on both reads and writes (with PPU_Data being ignored) can be used to set up an address variable, and then seperate PPU_Read and PPU_Write routines can commit data.<br /><br />Also, it's worth noting that PRG_Addr only describes A0-A14, since the cart edge doesn't get A15. Though, if that's too much of a problem, PRG_Addr can represent all 16 bits of the address.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu May 19, 2011 1:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-05-19T11:41:46-07:00</updated>
<published>2011-05-19T11:41:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78330#p78330</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78330#p78330"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78330#p78330"><![CDATA[
<div class="quotetitle">6T4 wrote:</div><div class="quotecontent"><br />the emulator won't be able to run as fast since you'd have to run two CPUs at once<br /></div><br /><br />True, instead of a 100MHz machine, you'll need at least 150MHz. That may be a stretch for time travelers from 1989 :)<br /><br /><div class="quotetitle">6T4 wrote:</div><div class="quotecontent"><br />did you code the snes coprocessor chips in bsnes using 65c816 assembly? If not, why not and are you considering doing this then?<br /></div><br /><br />SNES coprocessors are not mappers, they are actual processors that execute instructions given to them.<br /><br />Example: the NEC uPD772x family has four opcodes. Load, Jump, Op, and Op+Return. Op can do 10 math functions. Total code size? 10KB. That code emulates the DSP-1, DSP-1B, DSP-2, DSP-3, DSP-4, ST-0010, ST-0011. Count them all as one processor with different programs.<br /><br />SuperFX and SA-1 are similarly processors that execute instructions. S-DD1 and SPC7110 are decompression codecs, much like an MPEG decoder. S-RTC is a real-time clock. Cx4 and ST-0018 are just like the NEC uPD (the latter may even be an enhanced uPD): we are waiting on the chip PROM dumps. That only leaves the OBC1, which is indeed a simple mapper.<br /><br />So in total we have (four or) five unique processors, two codecs, one clock, one mapper. The SuperFX and SA-1 even accept external programs, meaning they are not fixed-function. The rest benefit greatly from executing internal PROMs to get proper timing. Since these PROMs exist, and we have them, why simulate when we can emulate?<br /><br />Now compare to the NES, where we have 100-200 mappers, and not a single emulator supports all of them. Also plenty of pirate carts that some emulators will rightly refuse to ever support. Almost all of the NES mappers are extremely simplistic, like GameBoy MBCs.<br /><br />Look at my processor core for the NEC uPD: I support seven unique special chips with one interpreter that loads separate PROMs. That is the analogue I am making to NES mappers.<br /><br />There are of course problematic NES mappers, like the MMC5 and VRC6/7. The most complicated may be best to implement on a per-emulator basis.<br /><br />The important part is that emulators already support a 6502 virtual machine. If you want a scripting language, they will have to support that language as well. Even if you use one with a nice OSS C library, that will rule out non-C/C++ NES emulators from using it. Scripting will be just as slow (possibly slower), than doing the same in 6502.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Thu May 19, 2011 11:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-05-19T07:03:37-07:00</updated>
<published>2011-05-19T07:03:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78319#p78319</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78319#p78319"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78319#p78319"><![CDATA[
I was going to rant about how Lua is interpreted, and an interpreter run once for each of the nearly 4.5 million fetches a second has to be slow. But then I discovered that a <a href="http://code.google.com/p/llvm-lua/" class="postlink">JIT engine for Lua based on LLVM</a> existed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu May 19, 2011 7:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Hamburgler]]></name></author>
<updated>2011-05-19T05:20:04-07:00</updated>
<published>2011-05-19T05:20:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78317#p78317</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78317#p78317"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78317#p78317"><![CDATA[
LUA is a good choice for this kind of functionality.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3370">Hamburgler</a> — Thu May 19, 2011 5:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[6T4]]></name></author>
<updated>2011-05-19T00:48:09-07:00</updated>
<published>2011-05-19T00:48:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78311#p78311</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78311#p78311"/>
<title type="html"><![CDATA[Put the code in the games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78311#p78311"><![CDATA[
If we are going to make universal mapper scripts like this and use byuu's idea of writing them using 6502 assembly, why not put the scripts in the actual rom files. This is sort of my idea for a change in the header format. I mean, the real mappers exist on the game cartridges, not the NES itself, so doesn't it seem reasonable to design the emulation system like that as well? This would also do away with the need to CRC games to figure out which board of which mapper to use because the right script will be in the right game. We could also just write the scripts and have users put them into the games themselves. They'd just need to check a list to see which one to use.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4768">6T4</a> — Thu May 19, 2011 12:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[6T4]]></name></author>
<updated>2011-05-19T00:41:17-07:00</updated>
<published>2011-05-19T00:41:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78310#p78310</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78310#p78310"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78310#p78310"><![CDATA[
<div class="quotetitle">byuu wrote:</div><div class="quotecontent"><br />I've always felt it'd be best to write the mapper emulation in 6502 code. Any NES emulator will already have a 6502 core ready, anyway. Just make a new CPU context, map all the cartridge pins to MMIO addresses, add some custom MMIO to it for common functionality, and have at it.<br /></div><br />Interesting idea, but I'll believe it when I see it. It's more work than current methods to time the CPUs correctly, and the emulator won't be able to run as fast since you'd have to run two CPUs at once. The only advantage I see is that any NES emulator could easily incorporate it if desired. But I don't really see any reason any NES emulator would want to. I respect your opinions as you are the author of a very good snes emulator, but I have questions to pose... did you code the snes coprocessor chips in bsnes using 65c816 assembly? If not, why not and are you considering doing this then?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4768">6T4</a> — Thu May 19, 2011 12:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2011-05-18T22:17:57-07:00</updated>
<published>2011-05-18T22:17:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78308#p78308</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78308#p78308"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78308#p78308"><![CDATA[
try coding it in javascript <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Wed May 18, 2011 10:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[byuu]]></name></author>
<updated>2011-05-18T15:41:04-07:00</updated>
<published>2011-05-18T15:41:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78301#p78301</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78301#p78301"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78301#p78301"><![CDATA[
Of course, if someone wrote the compiler.<br /><br />I've always felt it'd be best to write the mapper emulation in 6502 code. Any NES emulator will already have a 6502 core ready, anyway. Just make a new CPU context, map all the cartridge pins to MMIO addresses, add some custom MMIO to it for common functionality, and have at it.<br /><br />For timing, easiest way would be to run at 'infinite' frequency, having an MMIO reg you can write to in order to 'tick' one cycle, clocked at the same rate as the NES CPU.<br /><br />Writing the code will be a bit harder, but will only ever need to be done once. Emulators can dynarec it to run faster if they want, but I doubt it would be all that demanding even on today's cell phones.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=375">byuu</a> — Wed May 18, 2011 3:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-05-18T15:20:41-07:00</updated>
<published>2011-05-18T15:20:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78300#p78300</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78300#p78300"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78300#p78300"><![CDATA[
Could a mapper description like this be compiled into code that runs in the emulator using LLVM?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed May 18, 2011 3:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-05-18T15:10:29-07:00</updated>
<published>2011-05-18T15:10:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78299#p78299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78299#p78299"/>
<title type="html"><![CDATA[Scripted mapper plugins]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7763&amp;p=78299#p78299"><![CDATA[
The idea is that the functionality of any mapper can be implemented in the form of a script, used by the emulator. Of course, you'd be able to come up with some wildly unrealistic mappers, but that's aside the point.<br /><br />Anyway, we should play around with this idea to see if anything might come of it. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />I had the idea to set up breakpoint-like behavior. It seemed like it was efficient enough for code, but modular enough to not be hardcoded into the emulator (which is the whole point of this in the first place <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> ).<br /><br />For NROM,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">on CPU_Read:8000,FFFF &#123;<br />  PRG_Data = PRG_Space&#91;CPU_Addr&#93;;<br />&#125;<br /><br />on PPU_Read:0000,1FFF &#123;<br />  CHR_Data = CHR_Space&#91;PPU_Addr&#93;;<br />&#125;<br />on PPU_Write:0000,1FFF &#123;<br />  CHR_Space&#91;PPU_Addr&#93; = CHR_Data; // This does nothing if it's ROM.<br />&#125;<br /></div><br />PRG_Space is just the collection of bytes the CPU can have access to at any time, from any collection of ROMs on the cart. Basically, it's just a way to access the PRG section of the iNES rom.<br />CHR_Space is the same thing, but in this case, it can either be a ROM or RAM.<br />I didn't specify what happens for PPU accesses to 2000-2FFF. In that case, the emulator should just assume everything is completely hardwired and determine the behavior based on the appropriate iNES header flags. Additionally, the same could be done if you don't specify CPU 8000-FFFF accesses, and PPU 0000-1FFF accesses.<br /><br />Let's try CNROM:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">var bank &#91;= initial value on reset&#93;;<br /><br />on CPU_Write:8000,FFFF &#123;<br />  bank = PRG_Data &lt;&lt; 13; // %bb..... ........<br />&#125;<br /><br />on CPU_Read:8000,FFFF &#123;<br />  PRG_Data = PRG_Space&#91;CPU_Addr&#93;;<br />&#125;<br /><br />on PPU_Read:0000,1FFF &#123;<br />  CHR_Data = CHR_Space&#91;bank | PPU_Addr&#93;; // bbppppp ppppppp<br />&#125;<br /></div><br />Now let's try AxROM, which has mapper-controlled mirroring, and PRG bankswitching.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">var bank;<br />var nametable;<br /><br />on CPU_Write:8000,FFFF &#123;<br />  bank = &#40;PRG_Data &amp; 7&#41; &lt;&lt; 15; // %bb b....... ........<br />  nametable = &#40;PRG_Data &amp; 0x10&#41; &lt;&lt; 6; // %n.. ........<br />&#125;<br /><br />on CPU_Read:8000,FFFF &#123;<br />  PRG_Data = PRG_Space&#91;bank | CPU_Addr&#93;; // %bb bccccccc cccccccc<br />&#125;<br /><br />on PPU_Read:0000,1FFF &#123;<br />  PPU_Data = PPU_Space&#91;PPU_Addr&#93;;<br />&#125;<br />on PPU_Write:0000,1FFF &#123;<br />  PPU_Space&#91;PPU_Addr&#93; = PPU_Data;<br />&#125;<br />on PPU_Read:2000,2FFF &#123;<br />  PPU_Data = CIRAM&#91;nametable | &#40;PPU_Addr % 0x3FF&#41;&#93;;<br />&#125;<br />on PPU_Write:2000,2FFF &#123;<br />  CIRAM&#91;nametable | &#40;PPU_Addr % 0x3FF&#41;&#93; = PPU_Data;<br />&#125;<br /></div><br /><br />There's a couple of kinks that would need to be ironed out, but I think this would be usable for describing mappers. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Wed May 18, 2011 3:10 pm</p><hr />
]]></content>
</entry>
</feed>