<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=8955" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-05-30T10:29:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=8955</id>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-30T10:29:45-07:00</updated>
<published>2012-05-30T10:29:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94829#p94829</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94829#p94829"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94829#p94829"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />This is weird because CHR-RAM based MMC1 carts lets you banskwtich the CHR-RAM in two 4k banks even if this makes few sense (similar to bankswitch 32kb PRG in two 16k banks).<br /></div><br /><br />Yeah I've thought about that as well.  I know it doesn't make much sense but wouldn't some bankswitching with CHR RAM allow you to do some ROM style animations?  It's probably the worst way to go about it when you've got CHR-RAM at your disposal, but it makes slightly more sense than double banking PRG ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Wed May 30, 2012 10:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-05-30T10:20:22-07:00</updated>
<published>2012-05-30T10:20:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94828#p94828</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94828#p94828"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94828#p94828"><![CDATA[
OK - I'll take your word, and therefore it's impossible to get the "0,0" and "1,1" configurations.<br />Euro boards are the same as the US boards - only the Famicom boards are different.<br /><br />This is weird because CHR-RAM based MMC1 carts lets you banskwtich the CHR-RAM in two 4k banks even if this makes few sense (similar to bankswitch 32kb PRG in two 16k banks).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed May 30, 2012 10:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-30T09:29:44-07:00</updated>
<published>2012-05-30T09:29:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94825#p94825</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94825#p94825"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94825#p94825"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Is anyone willing to sacrifice an SEROM board so that we can get a clear picture of where A14 on the PRG ROM comes from?<br /></div><br /><br />I've already done it.  You don't even need to sacrifice the board if you don't believe me and want to prove it to yourself.  All you need is a multimeter and you can do some non-destructive testing.<br /><br />The PRG ROMs A14 is connected to the 72 pin connector on SEROM boards.<br /><br />EDIT: It's not concrete evidence but if you assume it's a two layer board you can deduce that pin 1 of the MMC1 (PRG A14 output) is floating.  Based on pictures on the <a href="http://bootgod.dyndns.org:7777/profile.php?id=174" class="postlink">DB</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Wed May 30, 2012 9:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-05-30T09:32:28-07:00</updated>
<published>2012-05-30T09:23:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94824#p94824</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94824#p94824"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94824#p94824"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />@Tepples : In fact DrMario could probably have been NROM without any problem<br /></div><br />Not with the cut scenes. Beat level 05 of single-player on high speed. If you rip out the title screen and cut scenes, much as the pirate multicart version of Tengen's Tetяis ripped out the title screen, then yes, you might be able to fit it in NROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />it's just that it didn't cost much more to add a 32k CHR and a MMC1 since it was released late in NES' life.<br /></div><br />MMC1 cheaper than a 74HC161? Or perhaps they just stopped making CNROM boards by that time.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />PS : I haven't checked, but I'm pretty sure PRG-A14 on SEROM should be controlled by the MMC1, allowing you to get a 0,0 or 1,1 configuration.<br /></div><br />From the pictures of the Tetris and Dr. Mario carts on NesCartDB, A14 on the PRG ROM appears to go into a via behind the chip. Is anyone willing to sacrifice an SEROM board so that we can get a clear picture of where A14 on the PRG ROM comes from?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed May 30, 2012 9:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-30T08:37:57-07:00</updated>
<published>2012-05-30T08:37:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94822#p94822</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94822#p94822"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94822#p94822"><![CDATA[
I agree we'll never know for sure but here's my take on the matter.  As it's been said copy protection make more sense for something like INC $FF which is done by some games.  While not all games may have implemented it properly (maybe just due to bad knowledge) I believe the MMC1 was implemented like this for some anti piracy.  The main reason I conclude that is because the MMC1 had ADDED logic to prevent successive writes.  It's not like an optimization caused this phenomenon.  Additionally if you never toggle M2 the MMC1 WILL acknowledge subsequent writes, it's effectively left in the 'allow writes' state.<br /><br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />PS : I haven't checked, but I'm pretty sure PRG-A14 on SEROM should be controlled by the MMC1, allowing you to get a 0,0 or 1,1 configuration.<br /></div><br /><br />Maybe your Euro carts are different but I have checked and that's not how it is on my SEROM boards.  The MMC1 PRG A14 ROM output is floating.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Wed May 30, 2012 8:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-05-30T04:37:26-07:00</updated>
<published>2012-05-30T04:37:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94811#p94811</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94811#p94811"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94811#p94811"><![CDATA[
I see nothing special here - the INC instruction is used to reset the shift registers, and there is no distinction between writes to R0,R1,R2 or R3 when bit 7 is set - it just reset the shift registers.<br /><br />Almost all MMC1 games I've ever seen does this - it's really common and definitely no anti-piracy measure or whathever. Using INC instead of LDA/STA simply saves 2 bytes.<br /><br />I think that when people doesn't understand something in a commercial game they will say it's an anti-piracy measure, just because they have nothing else to say.....<br /><br />@Tepples : In fact DrMario could probably have been NROM without any problem, it's just that it didn't cost much more to add a 32k CHR and a MMC1 since it was released late in NES' life.<br /><br />PS : I haven't checked, but I'm pretty sure PRG-A14 on SEROM should be controlled by the MMC1, allowing you to get a 0,0 or 1,1 configuration.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed May 30, 2012 4:37 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-05-30T03:51:17-07:00</updated>
<published>2012-05-30T03:51:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94809#p94809</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94809#p94809"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94809#p94809"><![CDATA[
If Dr. Mario uses 4 KiB pages, does it ever use 4 KiB pages from different 8 KiB banks? If not, it could have been CNROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed May 30, 2012 3:51 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-05-30T02:18:22-07:00</updated>
<published>2012-05-30T02:18:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94808#p94808</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94808#p94808"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94808#p94808"><![CDATA[
Thanks guys -- you both have answered my questions.  Now I actually understand.<br /><br />I'm left wondering (well, pondering rather) why Nintendo decided to use INC $FC80 as a cheap way of writing LDA #$80 / STA $8000 (or any address from $8000 to $FFFF for that matter).<br /><br />Colleagues of mine theorise that possibly it's some kind of anti-piracy measure where pirate mappers or pirate Famicoms might not handle that situation correctly -- though value $D8 (first write) has bit 7 set, as does $D9 (2nd write).  So possibly $FC80 was chosen for a specific reason?  I mean, the guy could have picked $FC94 (value $A2) and accomplished the same thing.  Maybe on some pirated consoles that's a unique register location for the CPU or console itself?  Really not sure.  This is stuff we'll probably never know without getting in touch with whoever did the actual code at Nintendo, and I doubt that person even remembers why they did that.  I know that, at least in the case of the SFC/SNES and copiers (specifically the Super Magicom), some games actually wrote to memory-mapped registers that were specific to the SMC, causing the copier to nuke sector 0 on an inserted floppy disk, solely as a form of anti-piracy.  See <a href="http://cgfm2.emuviews.com/txt/swcteche.txt" class="postlink">registers $C000 to $C007</a>, which correlate with registers per the <a href="http://www.datasheetarchive.com/dl/Datasheets-111/DSAP0039438.pdf" class="postlink">MCS3201 floppy controller</a>.  Naughty..... :D<br /><br />Another theory is that someone noticed (shortly before game launch) that the MMC1 wasn't being reset before registers were being used, and they didn't have time to reassemble the entire game to add LDA / STA statements (5 bytes, thus would require reassembly due to branch offsets being completely wrong), so they nuked some 3-byte code at the start and turned it into INC $FC80 to solve that problem.  Again: doubt we'll ever know.<br /><br />As for the PRG bank 0 selection being superfluous -- yeah, agreed.  My guess based on looking at the code is that someone at Nintendo simply copy-pasted code from an existing MMC1 game that did have more than 32KBytes of PRG and simply set the bank to 0.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Wed May 30, 2012 2:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2012-05-29T23:38:36-07:00</updated>
<published>2012-05-29T23:38:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94803#p94803</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94803#p94803"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94803#p94803"><![CDATA[
Yeah MMC1 is a crazy.  I did some pretty heavy REing of the thing a couple months back.<br /><br />First off you confusion of writing 00000 vs 10000 is because when you reset the MMC1 (write D7 == 1) fully resets the MMC1 with NOTHING in the register.  It doesn't matter what D0 is on that write it's effectively not written.  So the first write with D7 = 1 resets the register, then it takes *5 additional* writes to the control register for it to get transfered to one of the 4 regs.  It looks like you're considering the reset write as the first write so it would only take 4 more writes which is not true.<br /><br />Also I did some looking around on the 32KB situation previously.  And all the 32KB PRG games appeared to be on SEROM which the ROMs A14 isn't tied to the MMC1.  It's controlled directly by the NES (connected to the cart edge).  So the MMC1 can't do jack with any SEROM game's PRG  (which I assumed is all the 32KB prg games).<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I wonder if there are any MMC1 games which have 32KBytes of PRG but would put PRG bank 1 into $8000-BFFF, meaning both $8000-BFFF and $C000-FFFF would point to PRG bank 1.<br /></div><br />I don't quite follow what Dwedit is saying with his X,X format of notation.  But for your question koitsu IF there were a game on say a SLROM board where the MMC1 actually controlled the ROM's A14 you could have the MMC1 in 16KB mode with $C000-FFFF fixed to bank 1, and then set the PRG reg (REG #3) to bank 1.  That would end up putting the last bank (bank 1) into both $8000-BFFF AND $C000-FFFF.  However I like I said before I don't know of any 32KB games that are on a SLROM board or similar.  If you were making the game and selecting board set up you could certainly do that.<br /><br />EDIT: Oh I get Dwedit's notation now 1,0 correlates to $8000 -&gt; bank 1, $C000 -&gt; bank 0<br /><br />Yes that is correct.  In 16KB mode if you fix $8000-BFFF it's always fixed to bank 0.  If you fix $C000-FFFF it's always fixed to the last bank.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Tue May 29, 2012 11:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-05-29T22:52:01-07:00</updated>
<published>2012-05-29T22:52:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94800#p94800</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94800#p94800"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94800#p94800"><![CDATA[
I checked the MMC1 docs, it is possible to have 0,0 or F,F mapped into the 16k blocks.  Even if there's 32k of total PRG, you can still have a 0,0 or 1,1 bank setup.  Can't get 1,0 though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue May 29, 2012 10:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-05-29T22:38:13-07:00</updated>
<published>2012-05-29T22:38:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94798#p94798</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94798#p94798"/>
<title type="html"><![CDATA[Re: Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94798#p94798"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Basically I'm asking what gets swapped in/out PRG-wise and what is the PRG size chosen?<br /></div>Because the game's only 32kB, nothing's swapped.<br /><br />It does seem fragile, though, since the initial <strong>INC $FC80</strong> does not seem to set the register value for what's mapped into $8000-$bfff until after the write to the control register.<br /><br />Writing 0 to the PRG bank select does seem entirely superfluous.</div><br /><br />Hrm, so I guess in the case of MMC1 games which only contain 32KBytes of PRG (total), PRG-ROM bank swapping doesn't actually change anything since as you say PRG-ROM bank 0 and bank 1 are respectively hard-wired to $8000-BFFF and $C000-FFFF?  That's more of an emulator-oriented question I suppose.<br /><br />I wonder if there are any MMC1 games which have 32KBytes of PRG but would put PRG bank 1 into $8000-BFFF, meaning both $8000-BFFF and $C000-FFFF would point to PRG bank 1.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue May 29, 2012 10:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-05-29T22:32:49-07:00</updated>
<published>2012-05-29T22:32:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94796#p94796</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94796#p94796"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94796#p94796"><![CDATA[
Thanks guys.  Yep, I forgot that INC was RMW, however that doesn't really provide enough insights to know what's going on with the PRG "stuff".<br /><br />What effectively this means is that the MMC1 load register is always "off by one".  Let me try to explain:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;<br />; Focusing on MMC1 load registers, control register, and PRG bank register<br />;<br />; MMC1 load register    = %????????<br />; MMC1 control register = %?????<br />;<br />FC97  EE 80 FC  INC $FC80 = D8                  A:80 X:FF Y:00 P:A4 SP:FF CYC: 32 SL:241<br />;<br />; INC is an RMW instruction.  MMC1 ignores 2nd write.<br />; $FC80 would correlate with the load register at this point.<br />; $D8 gets written to MMC1 load register; we only care about bit 0.<br />; $D8 = %11011000, so at this point:<br />;<br />; MMC1 load register    = %???????0<br />; MMC1 control register = %?????<br />;<br />FC9A  A9 10     LDA #$10                        A:80 X:FF Y:00 P:A4 SP:FF CYC: 50 SL:241<br />FC9C  20 D5 B8  JSR $B8D5                       A:10 X:FF Y:00 P:24 SP:FF CYC: 56 SL:241 <br />B8D5  8D FF 9F  STA $9FFF = 4F                  A:10 X:FF Y:00 P:24 SP:FD CYC: 74 SL:241<br />;<br />; MMC1 load register    = %??????00<br />; MMC1 control register = %?????<br />;<br />B8D8  4A        LSR A                           A:10 X:FF Y:00 P:24 SP:FD CYC: 86 SL:241<br />B8D9  8D FF 9F  STA $9FFF = 4F                  A:08 X:FF Y:00 P:24 SP:FD CYC: 92 SL:241<br />;<br />; MMC1 load register    = %?????000<br />; MMC1 control register = %?????<br />;<br />B8DC  4A        LSR A                           A:08 X:FF Y:00 P:24 SP:FD CYC:104 SL:241<br />B8DD  8D FF 9F  STA $9FFF = 4F                  A:04 X:FF Y:00 P:24 SP:FD CYC:110 SL:241<br />;<br />; MMC1 load register    = %????0000<br />; MMC1 control register = %?????<br />;<br />B8E0  4A        LSR A                           A:04 X:FF Y:00 P:24 SP:FD CYC:122 SL:241<br />B8E1  8D FF 9F  STA $9FFF = 4F                  A:02 X:FF Y:00 P:24 SP:FD CYC:128 SL:241<br />;<br />; At this point the MMC1 load register contents, since 5<br />; writes have been issued, should result in the MMC1<br />; control register being internally set.  Thus:<br />;<br />; MMC1 load register    = %???00000<br />; MMC1 control register = %00000<br />;<br />; Bit 1,0 = mirroring         = one-screen, lower bank<br />; Bit 3,2 = PRG ROM bank mode = switch 32KBytes at $8000 ignoring low bit of bank #<br />; Bit 4   = CHR ROM bank mode = switch 8KBytes at a time<br />;<br /></div><br /><br />So in effect, the LDA #$10 + JSR $B8D5 wouldn't actually result in the MMC1 control register containing %10000 -- it would instead contain %00000.<br /><br />After the next 5 writes to the load register, the result there would be %????1, and based on looking at the code, that's not very logical.  Furthermore, I believe Dr. Mario uses 4KByte CHR-ROM switching, not 8KByte, but I could be wrong there.  No emulator gives in-depth mapper debugging details so I really can't tell.<br /><br />So can someone shed some light on this?  This is incredibly confusing and has been absolutely the #1 reason I have avoided MMC1 like the plague over the years.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Tue May 29, 2012 10:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2012-05-29T22:15:36-07:00</updated>
<published>2012-05-29T22:15:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94794#p94794</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94794#p94794"/>
<title type="html"><![CDATA[Re: Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94794#p94794"><![CDATA[
<div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Basically I'm asking what gets swapped in/out PRG-wise and what is the PRG size chosen?<br /></div>Because the game's only 32kB, nothing's swapped.<br /><br />It does seem fragile, though, since the initial <strong>INC $FC80</strong> does not seem to set the register value for what's mapped into $8000-$bfff until after the write to the control register.<br /><br />Writing 0 to the PRG bank select does seem entirely superfluous.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue May 29, 2012 10:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-05-29T21:41:25-07:00</updated>
<published>2012-05-29T21:41:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94792#p94792</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94792#p94792"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94792#p94792"><![CDATA[
Yeah, seems they are resetting it, while everything else seems to just be writing each register. Not much else there. I have an MMC1 test ROM that doesn't do any INC $(Greater than 7E but less than FF) but can easily be modified if you'd want it to mess with real hardare, it's somewhere on the forums. But yeah, it accepts the first write.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Tue May 29, 2012 9:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-05-29T21:27:36-07:00</updated>
<published>2012-05-29T21:27:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94791#p94791</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94791#p94791"/>
<title type="html"><![CDATA[Dr. Mario MMC1B and register writes]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8955&amp;p=94791#p94791"><![CDATA[
A read-modify-write instruction writes to memory twice, first the original value, then the modified value.  And from what I hear, the MMC1 accepts the first write of a Read-Modify-Write, and ignores the second write.<br />So it would happen like Bill &amp; Ted: Accept the value read from ROM as the write, and ignore the second write of value+1.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue May 29, 2012 9:27 pm</p><hr />
]]></content>
</entry>
</feed>