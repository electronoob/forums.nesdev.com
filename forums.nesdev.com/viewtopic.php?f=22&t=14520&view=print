<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MintaBOOM - A WIP sample-based music engine for the NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MintaBOOM - A WIP sample-based music engine for the NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=22&amp;t=14520">http://forums.nesdev.com/viewtopic.php?f=22&amp;t=14520</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Mon Jul 11, 2016 5:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MintaBOOM - A WIP sample-based music engine for the NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a project I've been doing on the side for a while now, and it's time to finally reveal it and show my current progress. MintaBOOM (the word &quot;minta&quot; [mint…í] being the Hungarian word for &quot;sample&quot;) is a new, work-in-progress music player, which aims to make it possible to play sample-based music in games without having to completely suspend gameplay. The additional cost of an IRQ source in a cartridge has also been considered, and as a result, no complicated mapper hardware is needed to make use of the music player, as it runs using the DMC channel for its timing!<br />Here is a list of the current features, possible advantages and disadvantages, as usage of the player obviously comes at a significant cost:<br /><br />Features:<br />- Streams 7-bit PCM audio at a sampling rate of 8 272 Hz<br />- A &quot;measure&quot; system providing up to 128 reusable sections of music to make the most of the cartridge space available<br />- Hardware-controlled noise sounds can be played at any time to make up for the loss of high-frequency components in percussive instruments<br />- <em>Planned:</em> using the most significant bit in every sample for primitive RLE compression, or lowering the resoluton to 6 bits for more possible compression<br /><br />Advantages:<br />- Runs using the DMC IRQ, so there is no need for an extra IRQ source in the game cartridge<br />- Does not require full attention from the CPU, so a game can still be run in the meantime<br />- Since manual sample playback is not limited to $C000-$FFFF any amount of space may be used for music<br />- OAM DMA does not affect the sound severely<br /><br />Disadvantages:<br />- Requires a lot of PRG ROM space: ~485kB/minute of unique music<br />- The current version is guaranteed to use ~49.5% CPU time every frame (with fully optimized sample data - no bit shifting needed by the 2A03 - this could be lowered to 47.7%)<br />- The game must either be very quick to run, or be forced to run at 30/25 frames per second<br />- Use or certain instruments is heavily discouraged if they contain a lot of high-frequency components (harpsichord, distorted guitars, etc.)<br /><br />How it works:<br />MintaBOOM relies on the IRQ generated by the DMC channel. At rate $F, a 1-byte dummy sample is played with a bit pattern of %10101010, so the resulting high-pitched square wave does not affect the sound and the channel provides interrupts as frequently as possible. This would normally only allow a sampling rate of 4 136 Hz, meaning a write to $4011 every 432 clock cycles. However, MintaBOOM sits around in the IRQ handler just enough to ensure that only 216 clock cycles pass between writes, effectively doubling the sampling rate. This waiting time can be used for decompression, or to process one of the available effect commands.<br /><br />When an interrupt fires, a sample buffer (filled during the last IRQ) is sent to the output. Then, the waiting period is spent fetching the next byte for the buffer, and then another to be output right before exiting the IRQ handler. This means that every &quot;buffer byte&quot; will come from an odd address, and every directly output byte will come from an even address.<br /><br />Data format:<br />Currently the data structure is very simple. Every time an interrupt happens, two bytes are read. To save time, only the &quot;buffer byte&quot; is checked to see if it's actually an effect command. As a result, effect commands MUST be at an even address, and their argument byte must come BEFORE the command itself. <br />$00 means that an effect must be processed, and the argument byte denotes which effect:<br />$00-$7F: play the corresponding noise sound<br />$80-$FF: get the next segment ID from the song sequence - if the segment ID is signed, the player will loop back to the segment of the song specified by the 7-bit value<br /><br />The song sequence specifies which of the 128 possible segments are played, and where to loop back to at the end.<br /><br />The test ROM provided uses the NES 2.0 header format, so please make sure to use an emulator that is compatible, otherwise the song will loop prematurely. If you'd like to compare the music to the original, <a href="https://www.youtube.com/watch?v=06pdPdqoPTM" class="postlink">please follow this link!</a> This test does not demonstrate the usefulness of the noise accompaniment.<br />Any comments or feedback is much appreciated!

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=6228">PCM Test.nes</a> [2 MiB]
			</span><br />
			<span class="gensmall">Downloaded 313 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Mon Jul 11, 2016 6:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MintaBOOM - A WIP sample-based music engine for the NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is just impressive. <br /><br />Sadly my games tend to use most of the frame time (C coder here). But I'm sure this could be used in title screens and stuff like that. Or in visual novels and adventure games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Mon Jul 11, 2016 8:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MintaBOOM - A WIP sample-based music engine for the NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Pretty cool stuff. Could be a fun gimmick in a simple game that doesn't require all that much CPU/VBlank time.<br /><br />NDX says &quot;Header format not recognized&quot; for some reason, even though it should support NES 2.0. (Didn't test with the latest version of Nintendulator.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Mon Jul 11, 2016 10:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MintaBOOM - A WIP sample-based music engine for the NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">NDX says &quot;Header format not recognized&quot; for some reason, even though it should support NES 2.0. (Didn't test with the latest version of Nintendulator.)<br /></div>The NES2.0 magic number is wrong:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; if ((Header&#91;7&#93; &amp; 0x0C) == 0x0C)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _T(&quot;Header format not recognized - please repair it and try again.&quot;);<br /></div><br /><br />Nintendulator also complains that there's explicitly no CHR-RAM nor CHR-ROM, even though that's accurate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>za909</b> [ Mon Mar 27, 2017 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MintaBOOM - A WIP sample-based music engine for the NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Minor Update:<br />-------------<br />I am still working on this little project every now and then, and I have created a simple compression tool that optimizes a raw 8-bit PCM file sampled at 8 272Hz for the player. Currently the player uses a primitive 1-bit RLE compression, to make use of the MSB (since the $4011 register is only 7-bit), which can (depending on the high-frequency content of the audio) cut down the data size by 5-20%. I might make a version of this in the future that sacrifices one bit of fidelity in exchange for 2-bits of run-length, and also add a feature to the compressor to analyze the raw data and replace samples whose values are only different by 1 or 2 with the same sample twice, thus, allowing the RLE to save even more space. <br />In order to properly decompress the data during runtime, I'm thinking of introducing a large buffer (138 bytes) that would be filled once per frame, and then output in the interrupts. This could also reduce the time spent during an IRQ, and open up the possibility of running some fixed-time tasks from the IRQ handler during the wait between the two successive samples. Alternatively, this new available time could be used to generate and output averaged samples to have some kind of primitive linear interpolation in the sound (which would be missing between every two samples, when the CPU is outside the IRQ).<br /><br />So this project is not dead, and I'm very much open to suggestions because I really really want to make a digital audio soundtrack possible in an NES game.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>