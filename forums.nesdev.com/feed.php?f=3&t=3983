<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=3983" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-03-20T15:02:44-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=3983</id>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-03-20T15:02:44-07:00</updated>
<published>2008-03-20T15:02:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31883#p31883</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31883#p31883"/>
<title type="html"><![CDATA[NES APU, odd sample count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31883#p31883"><![CDATA[
How does it perform or how is it coded? <br /><br />Right now atleast on my machine it runs excellent. Unfortunately I have no other machines to test it on and can only go on unreliable test results from friends who don't really know what I'm asking. When I get a chance I'll try it on other machines.<br /><br />The way it is coded it has the do while loop to grab the buffer every frame, but with the increased sampling rate it never actually has to loop I imagine. All I know for sure is that for me, 44100hz output, 44400hz nesapu, and 2048 buffersize does the trick. When I can run it on a few other machines myself it will help as I could actually spot the problems I'm looking for.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Thu Mar 20, 2008 3:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2008-03-20T14:19:12-07:00</updated>
<published>2008-03-20T14:19:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31879#p31879</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31879#p31879"/>
<title type="html"><![CDATA[NES APU, odd sample count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31879#p31879"><![CDATA[
Well... how's your main loop now with audiostream?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Thu Mar 20, 2008 2:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-03-19T20:13:17-07:00</updated>
<published>2008-03-19T20:13:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31855#p31855</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31855#p31855"/>
<title type="html"><![CDATA[NES APU, odd sample count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31855#p31855"><![CDATA[
Well Blargg helped me resolve the issue. I made the buffer 2048 samples, upped the APU sampling rate to 44400hz, with the allegro stream rate still at 44100hz. <br /><br />I was getting stuck in a do while loop like you posted Fx3. It was waiting to be able to load more samples and causing that frameskip like effect. But increasing the internal sampling rate was enough. I'm not going to claim to fully understand it, I'm just going to be happy it works.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Wed Mar 19, 2008 8:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2008-03-19T18:40:17-07:00</updated>
<published>2008-03-19T18:40:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31850#p31850</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31850#p31850"/>
<title type="html"><![CDATA[NES APU, odd sample count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31850#p31850"><![CDATA[
- How funny it is... I had/have the exact same problem and never got something feasible, though I have a partial fix.<br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Let's say the PC's audio runs slightly faster. Since you're generating fewer samples per second than it plays, it will run the sample buffer dry periodically, resulting in clicks of silence between your audio. This isn't good.<br /></div><br /><br />- This <strong>is</strong> "good" with Allegro. The audiostream needs to be refilled with the same number of samples you created it; when the audiostream is ready to get more data, it doesn't mean it has rendered N samples, but always a bit less.<br /><br />- When you audio buffer is full:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AUDIOSTREAM *stream = get_audio_stream_buffer&#40;stream&#41;;<br />if&#40;stream&#41; &#123;<br />//transfer data<br />   memcpy&#40;stream, sound_buffer, numsamples&#41;;<br />   free_audio_stream_buffer&#40;stream&#41;;<br />&#125;<br />else<br />&#123;<br />//keep tracking the audiostream with the last buffer<br />&#125;</div><br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Let's say the PC's video runs slightly faster. You'd be generate more samples per second than the PC's audio hardware plays if you try to run at the PC's video rate. This would cause the sound driver's buffer to slowly get more and more full, until it eventually reached its maximum. At that point, your audio code would have to wait until the buffer was emptied some. While it was waiting, the video hardware would display your frame again, causing a slight lag in the image.<br /></div><br /><br />= This is the locked poll, inside a while loop, polling the audiostream until it returns a valid pointer to transfer more samples. This way, the video runs with a frameskip effect.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">AUDIOSTREAM *stream;<br />do &#123;<br />   stream = get_audio_stream_buffer&#40;stream&#41;;<br />   rest&#40;1&#41;;<br />&#125; while&#40;!stream&#41;;<br />memcpy&#40;stream, sound_buffer, numsamples&#41;;<br />free_audio_stream_buffer&#40;stream&#41;;</div><br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />The video lag in the second scenario is much less noticeable than the audio lag in the first, so you'd prefer that.<br /></div><br /><br />- NOT with Allegro, as far as I know. =)<br /><br />- Well, about making 60Hz with Allegro, you can adjust the time handler (in ms): 16,17,17,16,17,17...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Mar 19, 2008 6:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-03-19T16:28:21-07:00</updated>
<published>2008-03-19T16:28:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31845#p31845</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31845#p31845"/>
<title type="html"><![CDATA[NES APU, odd sample count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31845#p31845"><![CDATA[
If the NES frame rate were exactly 60 frames per second, then you'd expect exactly 735 samples from the APU every frame for a 44100 Hz sample rate. But the NES frame rate is slightly higher, so you get 735 or 734 samples per frame. Even if it were exactly 60, it's difficult to generate exactly that many per second when doing cycle-accurate sound synthesis.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So is there a way to adjust so that I get 735 samples per second every single frame, all the time.<br /></div><br />That won't help you, since the video and sound rates on your PC will very likely be slightly different than the claimed 60.0000000000... Hz and 44100.00000000000... Hz. Because of that, one will go faster than the other. So you need a solution which doesn't require them to be perfect.<br /><br />Let's say the PC's audio runs slightly faster. Since you're generating fewer samples per second than it plays, it will run the sample buffer dry periodically, resulting in clicks of silence between your audio. This isn't good.<br /><br />Let's say the PC's video runs slightly faster. You'd be generate more samples per second than the PC's audio hardware plays if you try to run at the PC's video rate. This would cause the sound driver's buffer to slowly get more and more full, until it eventually reached its maximum. At that point, your audio code would have to wait until the buffer was emptied some. While it was waiting, the video hardware would display your frame again, causing a slight lag in the image.<br /><br />The video lag in the second scenario is much less noticeable than the audio lag in the first, so you'd prefer that. Since you can't fine-tune the PC's video and audio rates, you must fine-tune your own. There's no reasonable way to alter the NES frame rate, but it's very simple to generate more audio samples per second. To do that, just tell your emulator that the sample rate is higher than it really is. For example, tell it the audio rate is 44200 Hz, when it's really only 44100 Hz. This way, even if the PC's video and audio rates are slightly different, you're guaranteed to have the second situation above.<br /><br />As for number of samples generated per frame, your audio system should be able to handle as many as are generated, even if it differs from one frame to the next. If your audio system can only handle a fixed number per write, you can easily add your own intermediate buffer which accepts samples in any quantity and allows them to be read out in any quantity.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Mar 19, 2008 4:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-03-19T15:25:00-07:00</updated>
<published>2008-03-19T15:25:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31842#p31842</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31842#p31842"/>
<title type="html"><![CDATA[NES APU, odd sample count]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3983&amp;p=31842#p31842"><![CDATA[
I've been trying to solve why my emulator has this issue with sound which causing the whole emulator to end up paused for a split second. I tracked this down to the emulator is waiting to load the audio buffer, but it can't because the audio is still playing. <br /><br />I didn't understand why that would be till I looked at how many samples are available each frame. At 44100hz, sometimes 734 samples are available. Other times it is the desired 735 ( 44100 / 60 = 735). I'm using Blargg's NES APU library, and my emulator uses Allegro. <br /><br />I want to sync to 60hz, via Vsync. If I can't do that, the emulator's drawing is not smooth at all. So is there a way to adjust so that I get 735 samples per second every single frame, all the time. I don't care if the sound gets somewhat off pitch as that is less important to me than the video being smooth.<br /><br />I've read things suggestions that underclocking the APU might help and other things. If anyone has a good idea or any idea let me know. I've been battling this thing for awhile. The default APU frequency is 1789773. Again I'm using Allegro.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Wed Mar 19, 2008 3:25 pm</p><hr />
]]></content>
</entry>
</feed>