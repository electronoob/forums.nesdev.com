<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - My first assembly program :D</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">My first assembly program :D</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4181">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4181</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Jun 21, 2008 10:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>My first assembly program :D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm proud to show here my first assembly program <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> 
<br />
<br />I tried to find informations about NES PPU in the forums (because well I don't fully understand it) and then I found this simulator in a thread I don't remember. The online simulator can be found here : <a href="http://www.6502asm.com" class="postlink">http://www.6502asm.com</a> 
<br />
<br />Press '0' to '9' to print digits to the screen.
<br />Press 'f' to change the font color, 'b' to change the background color.
<br />Press 'c' to clear the screen.
<br />
<br />In fact, it's only printing small 4x6 bitmaps 1-bit depth color. when pressing 'b' or 'f' it simply inc the color entry for the conresponding bit value in the bitmap, where '0' is for background and '1' is for the font. 
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;&nbsp; $8000= back color<br />;&nbsp; $8001= font color<br />;&nbsp; $8002= column <br />;&nbsp; $8003= row<br />&nbsp;<br />&nbsp;<br />lda #$0<br />sta $8000&nbsp; &nbsp;;back=0 &#40;black&#41;<br /><br />lda #$1<br />sta $8001&nbsp; &nbsp;;font=1 &#40;white&#41;<br /><br />lda #0<br />sta $8002&nbsp; &nbsp;;column=0<br />lda #0<br />sta $8003&nbsp; &nbsp;;row=0<br /><br /><br />main:<br /><br />&nbsp; &nbsp; jsr GetKey<br /><br />is_b:<br />&nbsp; &nbsp; cmp #$62&nbsp; &nbsp; ;key is 'b'?<br />&nbsp; &nbsp; bne is_c<br />&nbsp; &nbsp; &nbsp; &nbsp; inc $8000&nbsp; &nbsp; ;inc color back<br />&nbsp; &nbsp; jmp main<br />is_c:<br />&nbsp; &nbsp; cmp #$63&nbsp; &nbsp; ;key is 'c'?<br />&nbsp; &nbsp; bne is_f<br />&nbsp; &nbsp; &nbsp; &nbsp; jsr ClrScr&nbsp; &nbsp;;Clear screen<br />&nbsp; &nbsp; jmp main<br />is_f:<br />&nbsp; &nbsp; cmp #$66&nbsp; &nbsp; ;key is 'f'?<br />&nbsp; &nbsp; bne call_Putch<br />&nbsp; &nbsp; &nbsp; &nbsp; inc $8001&nbsp; &nbsp; ;inc color font<br />&nbsp; &nbsp; jmp main<br />call_Putch:<br />&nbsp; &nbsp; jsr PutCh<br />&nbsp; &nbsp; jmp main<br />&nbsp;<br /><br />&nbsp;<br /><br />;-------------------------------------------<br /><br />GetKey:<br /><br />&nbsp; &nbsp; lda #0&nbsp; &nbsp; &nbsp; &nbsp;;reset key read<br />&nbsp; &nbsp; sta $ff<br /><br />while_not_kbhit:<br /><br />&nbsp; &nbsp; lda $ff&nbsp; &nbsp; &nbsp; ;read key<br />&nbsp; &nbsp; beq while_not_kbhit<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;loop if NULL<br /><br />&nbsp; &nbsp; rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;leave key read in A<br /><br />;-------------------------------------------<br /><br />ClrScr:<br />&nbsp; &nbsp; lda #2<br />&nbsp; &nbsp; sta $11&nbsp; &nbsp; ;HI address of screen begin<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta $10&nbsp; &nbsp; ;LO address<br />&nbsp; &nbsp; tay<br />Next_Pts:<br />&nbsp; &nbsp; sta &#40;$10&#41;,y<br />&nbsp; &nbsp; inc $10&nbsp; &nbsp; ;increment LO address<br />&nbsp; &nbsp; bne Next_Pts<br />&nbsp; &nbsp; inc $11&nbsp; &nbsp; ;increment HI address<br />&nbsp; &nbsp; lda $11<br />&nbsp; &nbsp; cmp #6&nbsp; &nbsp; &nbsp;;if HI address==6<br />&nbsp; &nbsp; beq exit_ClrScr&nbsp; ;exit<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp;; same as lda #0<br />&nbsp; &nbsp; jmp Next_Pts<br /><br />exit_ClrScr:<br />&nbsp; &nbsp; rts <br />;-------------------------------------------<br />PutCh:<br /><br />;&nbsp; $10&nbsp; = screen write<br />;&nbsp; $12&nbsp; = chr read index<br />;&nbsp; $13&nbsp; = temp mem for display<br />;&nbsp; $14&nbsp; = down counter for shift reg<br /><br />&nbsp; &nbsp; sec<br />&nbsp; &nbsp; sbc #$30&nbsp; &nbsp; &nbsp; &nbsp;;subtract by '0'<br /><br />&nbsp; &nbsp; bmi Error_Exit ; if negative, <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; the ASCII value<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;is less than '0',<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; so it isn't a <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;number<br /><br />&nbsp; &nbsp; cmp #10<br />&nbsp; &nbsp; bmi OK_Continue<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;this time, if the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;value in accumula-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;tor is less than<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;10, it's a number<br /><br />Error_Exit:<br /><br />&nbsp; &nbsp; jmp exit <br /><br />OK_Continue:<br /><br />&nbsp; &nbsp; sta $12&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; ldy #2&nbsp; &nbsp; <br /><br />Multiply_chr:&nbsp; &nbsp; &nbsp; ;this loop multiplies<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;by three the number.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;this is for calcula-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;ting the offset from<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; adc $12&nbsp; &nbsp; ;the first bitmap.<br />&nbsp; &nbsp; &nbsp; &nbsp; dey<br />&nbsp; &nbsp; &nbsp; &nbsp; bne Multiply_chr<br />&nbsp; &nbsp; sta $12<br />;<br />; Calculate the memory offset of the first pt<br />; <br /><br />&nbsp; &nbsp; lda $8002&nbsp; &nbsp; &nbsp; &nbsp;;load X coord<br />&nbsp; &nbsp; jmp while_greater_than_8<br /><br />&nbsp;<br /><br />; while&#40;col&gt;=8&#41;<br />;&#123;<br />;&nbsp; &nbsp; col-=8;<br />;&nbsp; &nbsp; row++;<br />;&#125;<br />Subtract:<br />&nbsp; &nbsp; &nbsp; &nbsp; sec<br />&nbsp; &nbsp; &nbsp; &nbsp; sbc #8<br />&nbsp; &nbsp; &nbsp; &nbsp; inc $8003&nbsp; &nbsp;<br />while_greater_than_8:<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #8<br />&nbsp; &nbsp; &nbsp; &nbsp; bpl Subtract<br /><br />&nbsp; &nbsp; sta $8002<br />&nbsp; &nbsp; asl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;multiply by four <br />&nbsp; &nbsp; asl <br />&nbsp; &nbsp; sta $10&nbsp; &nbsp; &nbsp;;the 3 LSB of address<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;are now calculated<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta $11&nbsp; &nbsp; &nbsp;;clear the HI address<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;this is important because<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;later a value will be ROL'ed<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;in.<br />&nbsp; &nbsp; lda $8003<br />&nbsp; &nbsp; cmp #5&nbsp; &nbsp; &nbsp; ;if row is greater than 4, <br />&nbsp; &nbsp; bmi Continue;row will be set to 0<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $8003<br />Continue:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; ldy #5<br />multiply_1:&nbsp; &nbsp; &nbsp;;this loop multiplies by 6<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;the row's value<br />&nbsp; &nbsp; &nbsp; &nbsp; adc $8003<br />&nbsp; &nbsp; &nbsp; &nbsp; dey<br />&nbsp; &nbsp; &nbsp; &nbsp; bne multiply_1<br />&nbsp; &nbsp; ldy #5<br />multiply_2:&nbsp; &nbsp; &nbsp;;this loop multiplies by 32 the<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;previous value calculated in<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;the accumulator.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;since the screen is 32x32,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;and the bitmap 6 pts height,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;row*6*32 will give the <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;correct memory offset for<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;a vertical position.<br />&nbsp; &nbsp; &nbsp; &nbsp; asl<br />&nbsp; &nbsp; &nbsp; &nbsp; rol $011&nbsp; ;since rol zeropage is buggy,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;I use absolute mode instead<br />&nbsp; &nbsp; &nbsp; &nbsp; dey<br />&nbsp; &nbsp; &nbsp; &nbsp; bne multiply_2 <br />&nbsp; &nbsp; ora $10<br />&nbsp; &nbsp; sta $10<br /><br />&nbsp; &nbsp; lda $11<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc #2&nbsp; &nbsp; &nbsp; ;add 2 to HI address so it <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;effectively access screen<br />&nbsp; &nbsp; sta $11<br /><br />;<br />; Display the bitmap<br />;&nbsp; &nbsp;<br /><br />&nbsp; &nbsp; ldx $12&nbsp; &nbsp; &nbsp; &nbsp;;x holds offset from<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;CHR_0<br />&nbsp; &nbsp; inc $12&nbsp; &nbsp; &nbsp; &nbsp;;and $12 then holds the<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;offset of the next<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;caracter<br />&nbsp; &nbsp; inc $12<br />&nbsp; &nbsp; inc $12<br />&nbsp; &nbsp; ldy #0<br /><br />loop_fetch_byte:<br />&nbsp; &nbsp; lda #8<br />&nbsp; &nbsp; sta $14&nbsp; &nbsp; &nbsp; &nbsp;;this memory location<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;holds the remaining<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;bit to shift<br />&nbsp; &nbsp; lda CHR_0,x&nbsp; &nbsp;;load a byte of<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;bitmap <br /><br />loop_byte_scan:<br /><br />&nbsp; &nbsp; asl <br />&nbsp; &nbsp; sta $13&nbsp; &nbsp; &nbsp; &nbsp;;save accumulator for<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;later use<br />&nbsp; &nbsp; bcs FontPoint ; if Carry=1, Font<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;else Background<br />&nbsp; &nbsp; lda $8000&nbsp; &nbsp; &nbsp;;Load background <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;color<br />&nbsp; &nbsp; jmp Next_Point<br /><br />FontPoint:<br />&nbsp; &nbsp; lda $8001&nbsp; &nbsp; &nbsp;;Load Font color<br /><br />Next_Point:<br />&nbsp; &nbsp; sta &#40;$10&#41;,y&nbsp; &nbsp;;store color to <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;pixel <br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; cpy #4&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; bne cccontinue<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if y==4<br />&nbsp; &nbsp; ldy #0&nbsp; &nbsp; &nbsp; &nbsp; ;reset y<br />&nbsp; &nbsp; lda $10<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc #$20&nbsp; &nbsp; &nbsp; ;and add 32 to<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;LO address, thus<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;moving down&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; sta $10<br />&nbsp; &nbsp; bcc cccontinue<br />&nbsp; &nbsp; inc $11&nbsp; &nbsp; &nbsp; &nbsp;;if crossing page<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;boundary ;&#41;<br /><br />cccontinue:<br />&nbsp; &nbsp; dec $14&nbsp; &nbsp; &nbsp; &nbsp;;dec the bit counter<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;for shifter <br />&nbsp; &nbsp; bne load_0x13<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;if the shifter is<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;empty&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;increment offset<br />&nbsp; &nbsp; cpx $12&nbsp; &nbsp; &nbsp; &nbsp;;finished?<br />&nbsp; &nbsp; beq done&nbsp; &nbsp; &nbsp; ;yes quit<br /><br />&nbsp; &nbsp; jmp loop_fetch_byte<br /><br />load_0x13:<br />&nbsp; &nbsp; lda $13&nbsp; &nbsp; &nbsp; &nbsp;;reload value to<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;shift&nbsp; &nbsp; <br />&nbsp; &nbsp; jmp loop_byte_scan&nbsp; &nbsp;<br /><br />done: <br />&nbsp; &nbsp; inc $8002&nbsp; &nbsp; &nbsp;;increment column<br /><br />exit:<br />&nbsp; &nbsp; rts&nbsp; &nbsp; <br /><br />;-------------------------------------------<br />&nbsp;<br /><br />;characters from '0' to '9', bitmaps 1-bit 4x6 <br /><br />CHR_0:<br />&nbsp; &nbsp; &nbsp;dcb $02,$55,$52<br />CHR_1:<br />&nbsp; &nbsp; &nbsp;dcb $02,$62,$27<br />CHR_2:<br />&nbsp; &nbsp; &nbsp;dcb $06,$13,$47<br />CHR_3:<br />&nbsp; &nbsp; &nbsp;dcb $06,$12,$16<br />CHR_4:<br />&nbsp; &nbsp; &nbsp;dcb $05,$57,$11<br />CHR_5:<br />&nbsp; &nbsp; &nbsp;dcb $07,$47,$16<br />CHR_6:<br />&nbsp; &nbsp; &nbsp;dcb $03,$47,$57<br />CHR_7:<br />&nbsp; &nbsp; &nbsp;dcb $07,$12,$44<br />CHR_8:<br />&nbsp; &nbsp; &nbsp;dcb $07,$57,$57<br />CHR_9:<br />&nbsp; &nbsp; &nbsp;dcb $07,$57,$16</div>
<br />
<br />Speaking of which, I proved that I know very well 6502 assembly language, but I still don't know assembler directives (like doing macros, naming memory location, etc). Is directives unique to each assemblers?
<br />What are they? Maybe just put some links to read about. Thanks and thank for reading...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jun 22, 2008 7:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is directives unique to each assemblers? </div>
<br />Yes they are completely unique to each assemblers, but some have similarities. Typically, .db is used on almost every assembler to define bytes (but some have .dcb or .dsb). You should read each assembler's docuumentation to know more. If you're going to write something complex you should read the doccumentation of every assembler and try them to see which is the one with most features, which is a never-ending debate.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>