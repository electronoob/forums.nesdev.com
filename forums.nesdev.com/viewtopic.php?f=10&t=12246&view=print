<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - JMP, fine...JSR, nope...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">JMP, fine...JSR, nope...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12246">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12246</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Tue Jan 13, 2015 5:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So this is the first time I've experienced this.  It's sorta wacky.<br /><br />I have a routine that I'd like to use in a few instances, so I set up a JSR-&gt;Routine-&gt;RTS scenario.  It does not work.  I mean, there are no errors returned, however its effect does not work...<br /><br />Now, if I take the meat of the routine (all except for the RTS) and put it in line rather than JSRing to it, it works exactly as expected.<br /><br />Also, I tried JMPing to it and then JMPing back to the next line (which would, for all intents and purposes, do the same as a JSR-&gt;RTS I would think), and that actually worked as expected.  <br /><br />I could do it in line, except that I'd like to use the routine in a few places and I'd have to change the label names...it just seems gratuitous to have to put the exact same code in multiple places like that; I had intended to just JSR to it from the few places that I needed it.<br /><br />Can anyone think of a reason why it would work in line, JMPing to it and JMPing back would work, but cutting the exact code out, pasting it somewhere as a routine, and JSR-RTSing from it would not?<br /><br />In context, I feel like this might be a fundamental thing I don't understand rather than something wrong with the code.<br /><br />Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ROD</b> [ Tue Jan 13, 2015 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a problem like this not too long ago. I think it was because I did not push and pull my registers during NMI since I don't put everything in NMI. Maybe its that?<br /><br />Just my noobish 2 cents.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thenendo</b> [ Tue Jan 13, 2015 5:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In addition to possible interference by interrupt handlers, it's worth asking whether the meat of your routine touches the stack pointer or data on the stack at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Tue Jan 13, 2015 6:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey guys - thanks.  <br /><br />I push all my stack values at the top of the NMI and pull them at the end.  So that's not it...<br /><br />But more importantly, nothing is being pushed or pulled during this routine. <br /><br />I'm mostly perplexed that it works perfectly in line, but not as a routine.<br /><br />Thanks for the suggestions though, definitely appreciate them.  Any other thoughts?<br /><br /><br /><br />EDIT: Actually, I am using a data pointer to pull some info during the routine.  Could that have something to do with it?  In which case, what exactly is the problem and how could it be remedied?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Jan 13, 2015 7:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My only guesses are that there's something wrong with the stack or with the place you're putting this subroutine in the ROM.<br /><br />Is the stack being properly initialized? Is the subroutine outside of the program flow? Is it in a bank that's mapped in when you call it?<br /><br />Maybe if you shared some code or a ROM it would be easier for us to debug. This is definitely not common and shouldn't be happening.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Jan 13, 2015 7:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JoeGtake2 wrote:</div><div class="quotecontent">EDIT: Actually, I am using a data pointer to pull some info during the routine.  Could that have something to do with it?  In which case, what exactly is the problem and how could it be remedied?</div><br />Pushes and pulls from the stack could mess with a subroutine, but reading from an indirect location shouldn't, no.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$FF<br />pha;one byte pushed to the stack<br />dostuff:<br />pla;the same byte (#$FF) is pulled off the stack<br /></div><br /><br />Versus:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$FF<br />pha;one byte pushed to the stack<br />jsr dostuff;this pushes the return address to the stack<br />returnlabel:<br /><br />;Later in the code...<br /><br />dostuff:<br />pla;This pulls half the address of returnlabel-1 off the stack rather than<br />;#$FF, because the address was pushed onto the stack on top of<br />;#$FF<br />rts;And, because of half the address has been pulled<br />;the two bytes the RTS uses as the return address <br />;will no longer be the two pushed there by JSR<br /><br />;Your program will probably return to a garbage location<br /></div><br />If you're not touching the stack at all in the routine, it's not that. As tokumaru says, there's not much to talk about without seeing the code in question.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Tue Jan 13, 2015 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No problem - here is some code.  Hopefully it's enough context?<br /><br />I have added a acceleration and deceleration method to my movement (works fine).  Now I have to update my collision detection.  This is where the problem is coming in.<br /><br />Here is the code that works in line.  For example, this reads the point directly to the right of the player's right bounding box, first at the top bbx, then at the bottom bbx, and evaluates the tile there for a collision.  This works absolutely fine:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />TileCheckRight:<br />&nbsp; &nbsp; &nbsp;LDA playerXright<br />&nbsp; &nbsp; &nbsp;CLC<br />&nbsp; &nbsp; &nbsp;ADC maxSpeedHi<br />&nbsp; &nbsp; &nbsp;STA tempx<br /><br />&nbsp; &nbsp; &nbsp;LDA playerYtop<br />&nbsp; &nbsp; &nbsp;STA tempy<br /><br />&nbsp; &nbsp; &nbsp;JSR GetTilePosition&nbsp; ;; this reads from a collision table based on tempx and tempy<br />&nbsp; &nbsp; &nbsp;JSR CheckCollision ;; for right now, this just checks solid or not solid (1 or 0)<br />&nbsp; &nbsp; &nbsp;BEQ nextA<br />&nbsp; &nbsp; &nbsp;JMP skipDec<br />nextA:<br />&nbsp; &nbsp; &nbsp;LDA playerYbottom<br />&nbsp; &nbsp; &nbsp;STA tempy<br />&nbsp; &nbsp; &nbsp;JSR GetTilePosition<br />&nbsp; &nbsp; &nbsp;JSR CheckCollision<br />&nbsp; &nbsp; &nbsp;BEQ nextAA<br />&nbsp; &nbsp; &nbsp;JMP skipDec<br />nextAA:<br /><br /></div><br /><br />However, if I am to take that bit of code, turn it into a routine (i've tried putting it plenty of places just in sort of a trial and error way, and most I know have no conflicts as I can put other things in place there and JSR to them just fine), JSR-&gt;RTS to it (RTS coming right after the nextAA) , the values are not loaded.<br /><br />Again, if I put it elsewhere and do something like this instead:<br /><br />In the inline:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;;;;; the code leading up to it...<br />&nbsp; &nbsp; &nbsp;JMP TileCheckRight<br />whatever:<br /><br /></div><br /><br />and then in the routine:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />TileCheckRight:<br />&nbsp; &nbsp; &nbsp;LDA playerXright<br />&nbsp; &nbsp; &nbsp;CLC<br />&nbsp; &nbsp; &nbsp;ADC maxSpeedHi<br />&nbsp; &nbsp; &nbsp;STA tempx<br /><br />&nbsp; &nbsp; &nbsp;LDA playerYtop<br />&nbsp; &nbsp; &nbsp;STA tempy<br /><br />&nbsp; &nbsp; &nbsp;JSR GetTilePosition&nbsp; ;; this reads from a collision table based on tempx and tempy<br />&nbsp; &nbsp; &nbsp;JSR CheckCollision ;; for right now, this just checks solid or not solid (1 or 0)<br />&nbsp; &nbsp; &nbsp;BEQ nextA<br />&nbsp; &nbsp; &nbsp;JMP skipDec<br />nextA:<br />&nbsp; &nbsp; &nbsp;LDA playerYbottom<br />&nbsp; &nbsp; &nbsp;STA tempy<br />&nbsp; &nbsp; &nbsp;JSR GetTilePosition<br />&nbsp; &nbsp; &nbsp;JSR CheckCollision<br />&nbsp; &nbsp; &nbsp;BEQ nextAA<br />&nbsp; &nbsp; &nbsp;JMP skipDec<br />nextAA:<br />&nbsp; &nbsp; &nbsp;JMP whatever<br /><br /></div><br /><br />...this ALSO works just fine, and the values are loaded and everything works as expected...<br /><br />Does this help at all?<br /><br /><br />****EDIT, I've disabled all potential banks swapping in and out - so it's definitely not that.  Everything in this code is loaded from the start and never unloaded.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Tue Jan 13, 2015 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So the RTS should be after nextAA?<br /><br />Is there another RTS after whatever skipDec leads to? If not, you're jumping someplace and never actually returning from the subroutine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thenendo</b> [ Tue Jan 13, 2015 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Honestly what I would do is just run the rom in an emulator with a debugger like fceux or nintendulatordx, set a break-point on the routine, and step through it. You'll probably spot the problem immediately that way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Jan 13, 2015 9:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Random things that come to mind:<br /><br />1. Stack isn't initialised (i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ldx #$ff / txs</tt> and should only be done once during RESET) and/or cleared correctly (i.e. random crap is left in $0100-01FF that may be affecting certain behaviours depending on how your code actually works).<br /><br />2. Some of your variables are referencing areas of RAM that are intended to be used by the stack, e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">somevar eq $01ff</tt> with some code that modifies <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">somevar</tt> (thus modifying the value at $01ff), but if the modification is done within the subroutine and then you call <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rts</tt> the PC that you get returned to is going to be different than what you expected (because you essentially modified the stack contents).<br /><br />3. Bug in your code that is overwriting the stack when it shouldn't be.  Common reasons I can think of for this would be using indexing operations that wrap pages (e.g. $00ff -&gt; $0100) and you end up encountering Issue #2, or NMI routines periodically doing something to the stack area which they shouldn't.  Pre-assembled values being calculated within the stack space would be determined through an assembly listing generation, but ones in real-time would require a debugger (see emulator).  I would suggest looking through an assembly listing anyway, especially to make sure all of your variable accesses are zero page when they should be and absolute (16-bit) addresses when they should be (this matters if using modifiers that return the high byte or low byte of an address of something (a lot of code has to do this) -- and while that's done assemble-time, it can still have unexpected behaviours depending on what your goal is with your code).<br /><br />4. Bug in your code where you're already using the stack but aren't pulling (&quot;popping&quot;) values off entirely, resulting in a stack imbalance (more specifically: eventual stack underflow, I believe), e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">pha / phx / phy</tt> somewhere, but then only doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ply / plx</tt> at the end of your routine (3 pushes vs. 2 pulls).  Every time that routine would get called the stack pointer would decrement by 1 indefinitely and eventually bottom out (to $0100) and wrap back to $01FF.<br /><br />5. A few other things that are in the back of my mind but would rather not discuss without ruling out all of the above.<br /><br />It would really be more helpful if you could just post actual code snippets like &quot;This works&quot; {insert code block} &quot;This doesn't&quot; {insert code block}.  Your explanation given so far is pretty good, but the attempt to explain the code (at this stage) is more complex than just showing what does and doesn't work with verbatim 6502.<br /><br />Most importantly: I second thenendo's recommendation of using an emulator.  FCEUX will show you stack contents in real-time, so if you've got a stack exhaustion situation it's quite easy to determine.  Oh, and about FCEUX: remember, <a href="http://forums.nesdev.com/viewtopic.php?p=133993#p133993" class="postlink">it shows the stack in &quot;reverse order&quot;</a> -- that is to say, a stack that shows <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">C5,80,A5,57,80</tt> means that $C5 was the most-recently-pushed-value onto the stack.  I'd have expected it to show the most-recently-pushed values at the end of the list, not the start.<br /><br />I think you basically have a &quot;lingering bug&quot; somewhere in your code that manifests itself only because you're now using the stack more -- meaning this would probably bite you further down the road if you did more stack operations anyway, so fixing it now is wise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 14, 2015 6:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thenendo wrote:</div><div class="quotecontent">Honestly what I would do is just run the rom in an emulator with a debugger like fceux or nintendulatordx, set a break-point on the routine, and step through it. You'll probably spot the problem immediately that way.</div><br />You're absolutely right. We can continue to play the guessing game here, but the best way to approach this would be to trace through the code as it runs. Set up a breakpoint at the JSR instruction, then step through the code and see if the CPU can successfully reach the subroutine and return from it, and what happens afterwards. That should give you the answer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 14, 2015 6:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">a stack that shows <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">C5,80,A5,57,80</tt> means that $C5 was the most-recently-pushed-value onto the stack.  I'd have expected it to show the most-recently-pushed values at the end of the list, not the start.</div><br />Well, since the stack grows downwards (from $1FF down to $0100), when entries are sorted by their addresses the stack does look the way FCEUX shows it. Maybe they thought it would be confusing to display the same area of memory sorted differently (increasing addresses in the hex editor, decreasing addresses in the debug window). I guess I prefer to have the ordering consistent across windows, but I agree that there could be some sort of indication of where the top of the stack is.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think you basically have a &quot;lingering bug&quot; somewhere in your code that manifests itself only because you're now using the stack more -- meaning this would probably bite you further down the road if you did more stack operations anyway, so fixing it now is wise.</div><br />That's my opinion too. The bug is probably somewhere else, and even if you can get around it by not using JSR/RTS in this particular case, it will probably manifest itself some other way later in development, so you'd better find out what's wrong now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Wed Jan 14, 2015 7:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;The bug is probably somewhere else, and even if you can get around it by not using JSR/RTS in this particular case, it will probably manifest itself some other way later in development, so you'd better find out what's wrong now.</div><br /><br />Yeah - that's my inclination too.  I don't want to bury the gremlin and have it show up again later.  <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">the best way to approach this would be to trace through the code as it runs. Set up a breakpoint at the JSR instruction, then step through the code and see if the CPU can successfully reach the subroutine and return from it, and what happens afterwards. That should give you the answer.</div><br /><br />Thanks for the tip. Thus far, I have not played with the debugger in FCEUX at all.  How would I determine the address of the JSR instruction in question in order to set the breakpoint?  I'm looking now, but I'm not entirely sure how to find that info.<br /><br />You guys rock.<br /><br />Joe

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 14, 2015 7:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">JoeGtake2 wrote:</div><div class="quotecontent">How would I determine the address of the JSR instruction in question in order to set the breakpoint?  I'm looking now, but I'm not entirely sure how to find that info.</div><br />If your assembler can generate a listing file, that will contain all the addresses. I often do something more &quot;hacky&quot; though: I put &quot;sta $ff&quot; (or any other memory location other than $ff that's known to be unused) wherever I want to start debugging (in your case, that'd be right before the JSR) and set up a breakpoint for writes to $00ff. It's easier than looking addresses up.<br /><br />When the breakpoint is triggered, just keep clicking &quot;step into&quot; and watch what happens as each instruction is executed. After you solve the bug, don't forget to remove the &quot;sta $ff&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Wed Jan 14, 2015 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: JMP, fine...JSR, nope...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great advice.  I followed it.  I loaded $FF to A at the start of the routine so I could see if it was getting accessed, and then step through to see what the accumulator values were and to make sure things were going where expected.  I was able to follow the code line by line, and everything is exactly as expected.  The position counter goes where it should (from everything I can tell), the values in the accumulators are correct at the correct times, the branching seems to work the way it is supposed to...but when playing, it does not work as supposed to (read: as it does when this code is in line rather than JSRed to).<br /><br />...I still don't have any idea what the cause is, but in just doing some trial and error stuff... I tried storing the accumulator into Y before the returning from the routine (TAY), then restoring it to A after the jump back (TYA) and <em>then</em> did my evaluation on the value.  To my surprise, this worked.<br /><br />So despite the accumulator reading the right value in debugging, somehow during the return from the subroutine, the value is being corrupted.  Shifting it into Y and then pulling it out of Y after the return seems to fix the problem.  I find it incredibly peculiar, especially since there is no evidence of this value being corrupted in the debugger, and everything *seems* to work just as it should when stepping through it in the debugger.<br /><br />Anyhow, thought I'd give an update.  Weird.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>