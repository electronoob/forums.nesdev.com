<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Question about OAM and vertical comparator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Question about OAM and vertical comparator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6778">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6778</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>alexwinger</b> [ Sun Aug 08, 2010 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Question about OAM and vertical comparator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, i'm trying to emulate the ppu in a fpga, but first i'm writing a simple ppu emulator in order to test all the functions. Now i'm reading the patent (U.S. Patent 4824106) and Brad Taylor's NTSC 2C02 technical reference.
<br />
<br />My first question is: 
<br />Are the OAM and the temporary memory in the same RAM  so the OAM address register and the Temporary Memory register are multiplexed in order to address the same RAM (OAM + Temp)?
<br />
<br />
<br />The other question is:
<br />How the 4-bit result of the comparator is stored in the temporary memory if there is not a direct conection to the OAM data bus in the PPU diagram?
<br />
<br />Brad Taylor says that the 4 bit result from the comparator is stored in the temporary memory, but i dont see a bus that connects this result to the "OAM + Temp" data bus.
<br />
<br />
<br />
<br />
<br />
<br />i hope anyone can understand what i try to ask and clarify me about the function of this part of the ppu.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sun Aug 08, 2010 10:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't take Brad's doc (or a patent) literally, I found it best to read emulator source and study the forum here and wiki. Once you understand the operation, then choose the hardware implementation that makes the most sense to you. When you learn of more hardware nuances, then update the implementation.
<br />
<br />OAM is copied to "temp RAM" so it wouldn't really make sense for them to be the same.
<br />
<br />What 4-bit comparator are you referring to?
<br />
<br />OAM is either dual port (CPU &amp; "temp RAM") or is multiplexed between CPU &amp; "temp RAM" with one port having priority. Temp RAM then feeds the counters, attribute registers and shift registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 09, 2010 6:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">What 4-bit comparator are you referring to?</div>
<br />I think it refers to the result of scanline_y - sprite_y, evaluated for each sprite on each scanline.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Aug 09, 2010 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In that case the comparator is implemented as an 8-bit half-adder, 8-bit inverter, 8-bit NOR gate.
<br />
<br />copy_sprite_to_temp = ~|(~current_line + sprite_y)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>alexwinger</b> [ Mon Aug 09, 2010 9:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">OAM is copied to "temp RAM" so it wouldn't really make sense for them to be the same.<br /></div><br /><br />In the hardware it really makes sense, because during pixel rendering, the ppu is drawing the contents of the sprites found in range for this scanline (these are in the special buffer for sprites), but at the same time is searching for the sprites valid in the next scanline so the temporary memory is filled with 8 sprites (it has 8x4 bytes. but instead of the vertical position, it has the result of the comparator that tells which row is going to be drawn).<br /><br />When the horizontal blank is reached, the ppu scan this temporary memory in order to fill the buffer with the horizontal position, attribute bits and the 2 pattern bytes.<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">What 4-bit comparator are you referring to?<br /></div><br /><br />In the patent you see a comparator between scanline#+1 and Ypos of the sprite, so the IN-RANGE validator recieves 5 bits that only tells that you have to draw that sprite if the result is less than 8 (the substraction is done without sign).<br /><br /><br />But in case it has a valid sprite the 4bit result tells you which line you are going to fetch from the pattern table.<br /><br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">OAM is either dual port (CPU &amp; "temp RAM") or is multiplexed between CPU &amp; "temp RAM" with one port having priority. <br />Temp RAM then feeds the counters, attribute registers and shift registers.<br /></div>
<br />
<br />The problem here is that the OAM (Motion Picture Attribute Table in the patent fig.5) is 256 bytes (really 64 x 29 bits) with an 8bit address register, but the temporary memory is drawn within the same memory, so the OAM and the temporary memory is in the same entity (256 + 32 addresses). Then we need two different address registers, one for the OAM and one for the temporary memory in the same RAM, but we only need the OAM dual ported to CPU and PPU internal.
<br />
<br />See <a href="http://www.freeimagehosting.net/uploads/e57d4ec18a.jpg" class="postlink">this part of the schematic</a> from <a href="http://www.freepatentsonline.com/4824106.html" class="postlink">this patent</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Mon Aug 09, 2010 10:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Drawing conclusions on where some chunk of memory might live in reality from the patent diagrams is not a good idea. The address register for the temp memory is just a counter that gets cleared at the start of the active line (for evaluating) and again at the start of hblank (for fetching) The "temporary memory" could be just about anything from a raw copy of the sprite entry in question, to an index and a y-offset per sprite entry that gets examined in hblank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Aug 10, 2010 1:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the hardware it really makes sense, because during pixel rendering, the ppu is drawing the contents of the sprites found in range for this scanline (these are in the special buffer for sprites)</div><br />the line is delayed so the buffer is for the NEXT line. these registers are held until they are used for pattern table fetching.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the patent you see a comparator between scanline#+1 and Ypos of the sprite, so the IN-RANGE validator recieves 5 bits that only tells that you have to draw that sprite if the result is less than 8 (the substraction is done without sign).</div><br />What is your question about the comparator? I wasn't thinking in my last post, you NOR the high 5 bits for 8x8 sprites and high 4 bits for 8x16. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The problem here is that the OAM (Motion Picture Attribute Table in the patent fig.5) is 256 bytes (really 64 x 29 bits) with an 8bit address register, but the temporary memory is drawn within the same memory, so the OAM and the temporary memory is in the same entity (256 + 32 addresses). Then we need two different address registers, one for the OAM and one for the temporary memory in the same RAM, but we only need the OAM dual ported to CPU and PPU internal.</div>
<br />What is the problem? You don't know that they're the same. I think temp RAM is separate, and simply addressed by a "found valid sprite" counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dekoder</b> [ Tue Aug 10, 2010 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Question about OAM and vertical comparator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">My first question is: <br />Are the OAM and the temporary memory in the same RAM  so the OAM address register and the Temporary Memory register are multiplexed in order to address the same RAM (OAM + Temp)?<br /></div><br />I believe that OAM and TempM are separate units because their suggested structure differs (64x29 vs 32x8)<br />and they are referred to as separate entities. But why are you so concerned about their internal structure?<br />As I see it, nowadays there is little sense in making such RAM units authentic when targeting a FPGA.<br />For example, in those days it was feasible to conserve two hundred SRAM bits on a die (3*64 in case of OAM).<br />But today the size of minimal separately addressable RAM chunk found in low-cost Altera Cyclone II FPGA (that I use for my hw emu) is 9*256 bits. So why bother?<br /><br /><br /><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">The other question is:<br />How the 4-bit result of the comparator is stored in the temporary memory if there is not a direct conection to the OAM data bus in the PPU diagram?<br /><br />Brad Taylor says that the 4 bit result from the comparator is stored in the temporary memory, but i dont see a bus that connects this result to the "OAM + Temp" data bus.<br /></div><br />Let's take a look at <a href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation" class="postlink">http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation</a>:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. Cycles 256-319: Sprite fetches (8 sprites total, 8 cycles per sprite)<br />    <ul>* 1-4: Read the Y-coordinate, tile number, attributes, and X-coordinate of the selected sprite</ul></div>
<br />This statement implies that Y coordinate must actually be stored in TempM. So there is no need in storing calculated sprite line (i.e. the 4 bit result from the comparator) separately. Just route q outputs of both OAM and TempM via multiplexer to the comparator and it's done. Yes, this requires a 8bit 2-in-1 multiplexer, but, well, who cares? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Aug 10, 2010 10:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Question about OAM and vertical comparator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dekoder wrote:</div><div class="quotecontent">Let's take a look at <a href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation" class="postlink">http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation</a>:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. Cycles 256-319: Sprite fetches (8 sprites total, 8 cycles per sprite)<br />    <ul>* 1-4: Read the Y-coordinate, tile number, attributes, and X-coordinate of the selected sprite</ul></div><br />This statement implies that Y coordinate must actually be stored in TempM</div>
<br />But there's really no reason to do so. One could take the "Y coordinate" in this case to mean the 0-15 sprite_texel_y from the adder. It's exclusive-ORed with the vertical flip attribute and combined with the tile number and two bits from PPUCTRL ($2000) to form the source address for a sliver fetch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dekoder</b> [ Tue Aug 10, 2010 10:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Question about OAM and vertical comparator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But there's really no reason to do so. One could take the "Y coordinate" in this case to mean the 0-15 sprite_texel_y from the adder. It's exclusive-ORed with the vertical flip attribute and combined with the tile number and two bits from PPUCTRL ($2000) to form the source address for a sliver fetch.</div>
<br />Well, of course, she/he can (and actually suggested to do it this way) but as I see it, the question was not about the way of getting pattern line number but about the right moment to do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>alexwinger</b> [ Tue Aug 10, 2010 9:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Question about OAM and vertical comparator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dekoder wrote:</div><div class="quotecontent"><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">The other question is:<br />How the 4-bit result of the comparator is stored in the temporary memory if there is not a direct conection to the OAM data bus in the PPU diagram?<br /><br />Brad Taylor says that the 4 bit result from the comparator is stored in the temporary memory, but i dont see a bus that connects this result to the "OAM + Temp" data bus.<br /></div><br />Let's take a look at <a href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation" class="postlink">http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation</a>:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. Cycles 256-319: Sprite fetches (8 sprites total, 8 cycles per sprite)<br />    <ul>* 1-4: Read the Y-coordinate, tile number, attributes, and X-coordinate of the selected sprite</ul></div><br />This statement implies that Y coordinate must actually be stored in TempM. So there is no need in storing calculated sprite line (i.e. the 4 bit result from the comparator) separately. Just route q outputs of both OAM and TempM via multiplexer to the comparator and it's done. Yes, this requires a 8bit 2-in-1 multiplexer, but, well, who cares? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />Thanks dekoder, this info helped me out to understand the sprite part of the ppu, and it makes sense:<br />I think that the OAM and the temp memory are in the same memory array, because the access is done in different cycles, the drawing expose it  because they share the same buses and the same symbol. I think the addresses buses are multiplexed and with an ninth bit that enables each area. Mmm, maybe the multiplexer is a little waste, so i prefer if they are separated entities with their data bus interconnected.<br /><br />The result of the comparator is never stored but the 2 buses of its output are used 1 for the oam entry y-evaluation and 1 for the row # for pattern fetching.<br /><br />I'm going to write some code in c to test this. If you are interested, i'll show you the results.<br /><br /><div class="quotetitle">dekoder wrote:</div><div class="quotecontent">I believe that OAM and TempM are separate units because their suggested structure differs (64x29 vs 32x8)<br />and they are referred to as separate entities. But why are you so concerned about their internal structure?<br />As I see it, nowadays there is little sense in making such RAM units authentic when targeting a FPGA.<br />For example, in those days it was feasible to conserve two hundred SRAM bits on a die (3*64 in case of OAM).<br />But today the size of minimal separately addressable RAM chunk found in low-cost Altera Cyclone II FPGA (that I use for my hw emu) is 9*256 bits. So why bother?<br /></div>
<br />
<br />
<br />I just want to emulate the ppu the most accurately possible, so first i really want to understand the patent info and other documents.
<br />I can model these kinds of RAM bit by bit with many ports. So Why not replicate the hardware with minor changes? I'm using a Xilinx Spartan 3e FPGA. I want to buy an Altera for testing purposes.
<br />
<br />Do you have any online info of your hard-emu?
<br />Do you use VHDL or Verilog?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>alexwinger</b> [ Tue Aug 10, 2010 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Question about OAM and vertical comparator</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">dekoder wrote:</div><div class="quotecontent">Let's take a look at <a href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation" class="postlink">http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation</a>:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3. Cycles 256-319: Sprite fetches (8 sprites total, 8 cycles per sprite)<br />    <ul>* 1-4: Read the Y-coordinate, tile number, attributes, and X-coordinate of the selected sprite</ul></div><br />This statement implies that Y coordinate must actually be stored in TempM</div><br />But there's really no reason to do so. One could take the "Y coordinate" in this case to mean the 0-15 sprite_texel_y from the adder. It's exclusive-ORed with the vertical flip attribute and combined with the tile number and two bits from PPUCTRL ($2000) to form the source address for a sliver fetch.</div>
<br />
<br />The problem here is that you can't access these 4 bytes at the same time.
<br />
<br />We need 8 bytes to get all the info into the buffer memory:
<br />
<br />1.-You read the Y-cordinate just to feed the comparator that feeds the vertical inversion module (i think the v.inversion module is a holding register because we haven't loaded the attribute part of the sprite).
<br />2.-The attribute part is loaded so vertical and horizontal inversion modules holds these values.
<br />3.-The Tile number is loaded in the picture address register
<br />4.-The X-data is loaded in the buffer memory, the info for the pattern fetching is complete and we are going to fetch the 2 pattern bytes from the pattern table so we have to wait 4 cc (2 bytes fetching from PPU memory).
<br />5.-We are waiting.
<br />6.-1 pattern byte reached, but we need to wait for another 2 cycles.
<br />7.- we have to wait just one more clock cycle
<br />8.-All data is complete just for 1 sprite, now the same for the next sprite until the 8 are transferred from the temporary memory.
<br />
<br />
<br />The last 4 cycles are in a waiting state with the last X-data loaded in the data bus, i think that's the reason for the 4cycle repeatead read of the X-data in the "PPU sprite evaluation" doc.
<br />
<br />I'm not really sure because i just readed the document.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Wed Aug 11, 2010 12:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's a lot of nonsense going around in here regarding what could and could not be done, and what is and is not a reasonable internal architecture.
<br />
<br />The PPU sprite evaluation page, AFAIK, is tested on the real thing. Whatever you come up with should be able to produce the output it describes.
<br />
<br />Patent diagrams are notorious for not telling the whole story, or even a particularly accurate story. Most notably, there are 3 8-bit outputs coming out of that temp memory block, and one of those goes directly to the CPU lines, so it could be reading more than one thing at a time, and routing one of them to the CPU anyways.
<br />
<br />If it's built internally like the 2A03 is (fairly likely) then there isn't so much a register involved as much as there is some transmission gates acting as a dynamic latch for the comparator input. You're not implementing that directly in an fpga.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dekoder</b> [ Wed Aug 11, 2010 2:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">Thanks dekoder, this info helped me out to understand the sprite part of the ppu, and it makes sense:<br />I think that the OAM and the temp memory are in the same memory array, because the access is done in different cycles, the drawing expose it because they share the same buses and the same symbol. I think the addresses buses are multiplexed and with an ninth bit that enables each area. Mmm, maybe the multiplexer is a little waste, so i prefer if they are separated entities with their data bus interconnected. <br /></div><br />You're welcome :) But let me clarify the topic a bit. The matter discussed is somewhat superfluous because I depends on how you look at it. At the low hardware level there is just no sensible way to make a RAM unit with depth != 2^n (you'll just end up wasting more resources on address decoding). So even if RAM+TempM does have the shared addr bus in real hardware (the bus being open-drain, so there is no need in explicit multiplexer), they are internally two separate entities of the depth of 64 and 32, having "ninth bit" acting as chip(and bus) select. They can even have similar open-drain shared output bus and it is th only bus routed to the subtractor. It made sense 30 years ago. Now it doesn't. The FPGAs don't have <strong>internal</strong> open-drain outputs. You can describe them in HDL but you'll end up with multiplexed bus after the synthesis. In our case we definitely need two separate address pointer registers at the sprite evaluation state (one holding OAM address for reading, second - TempM for writing), so there is absolutely no point in multiplexing them into a single bus. You can do it but it is really unfeasible for <strong>internal</strong> logic when targeting an FPGA. Even if you do it that way, your synthesizing software will throw multiplexer away and simply route each pointer to it's memory unit - one for OAM, another for TempM. It is just the same consideration suggests you to make separate data_in and data_out buses for internal CPU for example, even if the real-life CPU has just one shared open-drain data bus.<br />But you have to use a multiplexer for OAM and TempM outputs that go to subtractor of course.<br /><br />Feel free to reply :)<br /><br /><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">The result of the comparator is never stored but the 2 buses of its output are used 1 for the oam entry y-evaluation and 1 for the row # for pattern fetching<br /></div><br />Yep, you can NOR upper N bits of the result. If you use a 9 bit result, than N = 5 for tall sprites, N = 6 otherwise. But you hardly will express it in terms on NOR in HDL anyway :)<br /><br /><br /><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">I just want to emulate the ppu the most accurately possible..<br /></div>
<br />Then you should definitely check the forum a lot. You can find info on all sorts of edge cases and quirks.
<br />Just as an example:
<br /><a href="http://nesdev.com/bbs/viewtopic.php?t=6424" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=6424</a>
<br /><a href="http://nesdev.com/bbs/viewtopic.php?t=4647" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=4647</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dekoder</b> [ Wed Aug 11, 2010 3:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">alexwinger wrote:</div><div class="quotecontent">Do you have any online info of your hard-emu?<br />Do you use VHDL or Verilog?<br /></div>
<br />No. VHDL.
<br />
<br />At the moment my emu is in it's early stage of development, I work on it from time to time in my spare time with no any schedule and I don't like blogging (it would take my precious time. I do all my hw designs using Terasic Altera DE2 board. It is really great in a way it has almost all needed chips already soldered fo you. It took me two weeks of intense coding to make a first working release of PPU (spr 0 hit test and spr overflow unimplemented at all, many bugs) + NTSC encoder. It was so boring watching he almost static screen, so I added Peter's Wendrich great and perfect (I really treat this core this way, the ones you can find on opencores.org have much less precise timings) 6502 core (<a href="http://www.syntiac.com/fpga64.html" class="postlink">http://www.syntiac.com/fpga64.html</a>). Just disabled BCD and got NESstres passing all tests (at that moment I didn't know this test is not so great) and Galaxians (he-he :) running. A half of a year later (today) there is not a lot of progress, it's very difficult to find a time to spare on the topic. The current state:
<br /><ul>1. No APU, though it is on the todo list and there is a sketch<br />2. No mappers other than 0 because there is no rom loader at the moment (the highest priority) and I use FPGA's internal memory as ROM.<br />3. PPU passing all blargg's tests (they are really handy), except for the "palette after reset" one that doesn't matter<br />4. Super Mario Bros. running, no visual glitches but without any sound it's just not fun at all<br />5. Playstation 2 controllers as gamepads<br />6. Double coherent video output: analog NTSC S-video from VGA DAC (found on DE2) and digital 320x240 color TFT (Terasic LCM, sells separately :))<br /></ul>
<br />As you can see, no point in publishing yet.
<br />
<br />Why VHDL? Well, it has more consistent syntax and semantics for my taste. I'm a software engineer with no formal education in electronics so when I found myself interested in it several years ago, a made a comparison of VHDL vs Verilog and had chosen the former (though I'm a C/C++, not ADA/Pascal guy). And VHDL is open from the start, it makes some difference for me.
<br />Oh, and jwdonal has been using SystemVerilog for his emu for a time.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>