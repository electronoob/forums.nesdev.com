<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Just a curious thing - more with nametables</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Just a curious thing - more with nametables</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11413">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11413</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Wed Jul 09, 2014 1:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So this is a pretty simple one - I'd like to have a variable determine which nametable to draw in my subroutine.<br /><br />What does work is if I make a constant (SCREEN00 = Nametable00) and then load my nametable through my subroutine, it works fine.<br /><br />There is an intermediary step, however...if I set constants for a few nametables and want to set a variable to determine which one to draw (nextNametable), I'm doing this...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;set up the variable earlier in the code - that's just fine.<br /><br />&nbsp; &nbsp; LDA SCREEN00<br />&nbsp; &nbsp; STA nextNameTable<br /></div><br /><br />It would seem to me that now the variable nextNameTable should house the same stuff that SCREEN00 housed...so if I jump to the subroutine...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadNametable:<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$20<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #&lt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />&nbsp; &nbsp;STA addrLo<br />&nbsp; &nbsp;LDA #&gt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />&nbsp; &nbsp;STA addrHi<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX #$04<br />&nbsp; &nbsp;LDY #$00<br />LoadNametableLoop:<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2001<br />&nbsp; &nbsp;LDA (addrLo),y<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;BNE LoadNametableLoop<br />&nbsp; &nbsp;INC addrHi<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;BNE LoadNametableLoop<br />&nbsp; &nbsp;RTS<br />&nbsp; &nbsp;<br /></div><br /><br />...it seems like it should do the same thing - the variable and the constant it's pointing to should be interchangeable, shouldn't they?  <br /><br />Again, this is my higher level language understanding actually tripping me up rather than helping me here...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Jul 09, 2014 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So LDA (addrLo),y fetches the address from a low and high byte stored at addrLo and addrLo+1, adds y to this address, and puts the value stored in the resulting address into A.<br /><br />So changing addrLo and addrLo+1 to store the low and high bytes of a different set of nametable data will indeed change what is drawn to the first nametable.<br /><br />If nextNameTable is a place in ROM you want to load nametable data from, why are you storing to it? <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; LDA SCREEN00<br />&nbsp; &nbsp; STA nextNameTable</div><br />That would write to RAM, which wouldn't change what this does at all:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #&lt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />&nbsp; &nbsp;STA addrLo<br />&nbsp; &nbsp;LDA #&gt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />&nbsp; &nbsp;STA addrHi</div><br />Becuase that loads a constant (# will always load a constant. The constant that is the address of this RAM which can't change, and not what's stored there.)<br /><br />Essentially you don't need nextNameTable at all to do what it is you want.<br /><br />Say you have two screens of nametable in ROM.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nametable1data:<br />&nbsp; .incbin nametabledata1.bin<br />nametable2data:<br />&nbsp; &nbsp;.incbin nametabledata2.bin<br /></div><br />To load the first, you'd do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;LDA #&lt;nametable1data <br />&nbsp; &nbsp;STA addrLo<br />&nbsp; &nbsp;LDA #&gt;nametable1data<br />&nbsp; &nbsp;STA addrHi<br />&nbsp; &nbsp;jsr LoadNametable<br /></div><br />To load the second, you'd do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #&lt;nametable2data <br />&nbsp; &nbsp;STA addrLo<br />&nbsp; &nbsp;LDA #&gt;nametable2data<br />&nbsp; &nbsp;STA addrHi<br />&nbsp; &nbsp;jsr LoadNametable<br /></div><br />where LoadNametable looks like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadNametable:<br />&nbsp; &nbsp;LDA $2002<br />&nbsp; &nbsp;LDA #$20<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp;LDX #$04<br />&nbsp; &nbsp;LDY #$00<br />LoadNametableLoop:<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2001<br />&nbsp; &nbsp;LDA (addrLo),y<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;INY<br />&nbsp; &nbsp;BNE LoadNametableLoop<br />&nbsp; &nbsp;INC addrHi<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;BNE LoadNametableLoop<br />&nbsp; &nbsp;RTS<br /></div><br />I understand what you're trying to do, and the above is how you do it. I don't understand what you're asking about the process, though.<br /><br />Edit: Wait... maybe I understand.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It would seem to me that now the variable nextNameTable should house the same stuff that SCREEN00 housed...so if I jump to the subroutine...</div><br />No. As said up top,  LDA (addrLo),y loads from two bytes to get an address. When you do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; LDA SCREEN00<br />&nbsp; &nbsp; STA nextNameTable</div><br />You have not changed the address for either thing. Only what's stored AT the address.<br />And similarly when you do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #&lt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />&nbsp; &nbsp;STA addrLo<br />&nbsp; &nbsp;LDA #&gt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />&nbsp; &nbsp;STA addrHi</div><br />What's AT the address doesn't actually matter as far as the address  LDA (addrLo),y will load from. The reason it works with SCREEN00 is because that's where the data actually is, and there is no way to make #&lt;nextNametable (which appears to be RAM) have the same address as two different things at runtime. You can store the address for two different things there yes, in which case it would need to be two bytes long not one. And you'd not use #, because you want the value stored at the address (which is one byte of the address you actually want to load indirectly from) and not the absolute address of the RAM. But all of that is extra work, as demonstrated by the code where you don't need nextNameTable at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Wed Jul 09, 2014 2:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Essentially, I was attempting a subroutine to handle screen changes (different name tables).  The idea was to have a variable to determine what 'next screen' to draw.  So if I was at SCREEN00, i could change the variable to SCREEN01 (and if at SCREEN01, change it to SCREEN02, etc etc etc) so when that condition was met again, it would jump to the subroutine and load whatever nametable was pointed to through the variable, and then update the variable.<br /><br />Does that make more sense?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Jul 09, 2014 2:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As always, check the edit. Because I make the post, then add good stuff later.  <img src="./images/smilies/icon_cry.gif" alt=":cry:" title="Crying or Very sad" /> <br /><br />Higher level stuff... hmm...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">int *addr;//Pointer used to access nametable data<br />int nextnametable;<br />int screen00&#91;1024&#93;;//Actual nametable data.<br /><br />// //LDA SCREEN00<br />//&nbsp; &nbsp; STA nextNameTable<br />//Is like below.<br />nextnametable = screen00&#91;0&#93;;<br />&nbsp; &nbsp;<br />//LDA #&lt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />//&nbsp; &nbsp;STA addrLo<br />//&nbsp; &nbsp;LDA #&gt;nextNameTable&nbsp; &nbsp; ;;note, this works fine when it is SCREEN00<br />//&nbsp; &nbsp;STA addrHi<br />//is like below<br /><br />addr = &amp;nextnametable;<br /><br /></div><br />The above is very different from:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">addr = &amp;screen00;<br /></div><br />Which is actually what you want. And from that you might be able to see why you don't need nextnametable, and what you're doing is equivalent to.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jul 09, 2014 2:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As Kasumi pointed out, you seem to be a little confused regarding constants, variables and labels.<br /><br />If you really want to load name tables based on numbers (indices) instead of addresses (like Kasumi suggested), you have to build a table of addresses which you can read using an index. Here's how a table of name table pointers might look:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NameTablePointers:<br />&nbsp; &nbsp;.dw nameTable0, nameTable1, nameTable2, nameTable3</div><br />All the addresses are now neatly arranged one after the other in a single list, so you can easily tell which one is the first, the second, and so on. Now you can just do this to specify which name table you'll load next:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #00 ;prepare to load the first screen<br />&nbsp; &nbsp;STA nextNameTable</div><br />Then, when you're setting the pointer inside the LoadNametable routine you have to do this to fetch the correct pointer from the table:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA nextNameTable ;load name table index<br />&nbsp; &nbsp;ASL ;multiply by 2, because each address is 2 bytes<br />&nbsp; &nbsp;TAX ;use it as an index into the table of pointers<br />&nbsp; &nbsp;LDA NameTablePointers+0, X ;get the lower byte<br />&nbsp; &nbsp;STA addrLo ;copy to RAM<br />&nbsp; &nbsp;LDA NameTablePointers+1, X ;get the upper byte<br />&nbsp; &nbsp;STA addrHi ;copy to RAM</div><br /><br />Is this what you want to do?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Wed Jul 09, 2014 3:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha, sure - the logic is sound.  I'll have to play with it to make sure it works, but that should achieve what I'm trying to make happen.<br /><br />**EDIT**<br />Yes, that works like a charm!  Thanks guys!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Jul 09, 2014 5:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Assembly can seem a bit weird compared to pure HL languages.<br /><br />In most high level languages a fixed literal value is a fixed literal value, but if used in a 6502 assembly instruction it's going to be interpreted as an address. If you want it to be a value you have to preface it with '#'. But if you are just defining data, no '#' is needed. (As in a define byte command.)<br /><br />While if you are using a labeled RAM location as a variable, it will work as you expect in an instruction, but prefacing it with a '#' will act almost like an address operator!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jul 09, 2014 5:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Eventually you have to realize that everything is numbers when it comes to assembly programming. Sometimes these numbers are values and sometimes they're addresses.<br /><br />When programming 6502 assembly you end up using pointers a lot if you don't want to replicate code. An index indicates a pointer, which points to another index and so on. It happens a lot in games, where you have several types of data to work with (metatiles, level maps, music patterns, sprite definitions, etc.).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Jul 09, 2014 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A more generalised view -- and it's important any programmer worth their weight know this -- is: many processors do not natively comprehend concepts that HL PLs advocate, i.e. arrays vs. hashes vs. strings vs. objects vs. integers whatever other crap someone comes up with (and I'm sure they will).  <strong>All of this abstractive nonsense, especially OO, chews away at CPU time.</strong>  There really isn't any gain from it other than allowing human beings to jack off over things that really aren't needed.  (I'm sorry but I will not bend on this stance, I've personally and professionally yet to encounter anything that actually needs such abstraction -- nor will I debate this in this thread or anywhere else.  It's unnecessary, period.)<br /><br />Processors mainly comprehend &quot;data&quot;, as in &quot;here's a bunch of bytes&quot;.  Strings aren't special; they're just a sequence of bytes and how they're used is up to the underlying code.  Literally the concept of a NULL-terminated C-style string breaks down into opcodes where the CPU iterates within a loop, effectively byte-by-byte (please note I used the word effectively), looking at it until it encounters a value of 0x00 and declaring the end of the string.  Pascal strings, same differ: first word represents string length in bytes, followed by the string itself (opcodes read the first word, know the length, then iterate in a loop over all the subsequent bytes).  Processors may have opcodes to do repeated operations on something N number of times (e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">REP*</tt> opcodes for x86), but some expect you to deal with it yourself.<br /><br />&quot;Pointers&quot; -- more specifically, memory addresses stored in memory, commonly used for indirect addressing -- are the only thing that many processors comprehend natively -- but again they're just sequences of bytes and there's nothing stopping you from modifying them as you would a string or anything other &quot;kind&quot; of data.<br /><br />The only exception that I've encountered to this are mainframes, where things like the IBM System/360 have <a href="http://en.wikibooks.org/wiki/360_Assembly/360_Instructions" class="postlink">actual processor opcodes</a> that comprehend things like Unicode (UTF-8) strings and certain types of packed data structures.<br /><br />And don't ask me about things like MMX, SSE2/3/4, or whatever other x86 extensions there are to manipulate data -- I stopped doing x86 around the time the original Pentium came out.  x86 architecture today is scary as hell; I'm glad I &quot;gave up&quot; when I did.  In comparison, the 65xxx is beautiful/wonderful and is only missing a few things that would make it easier to deal with (particularly multiplication/division opcodes).  Don't be discouraged -- stick with it!  It's a great processor series.<br /><br />Everything I learned from doing 65xxx I use even today when writing programs in Perl or C or even Ruby (part of my present job -- ugh): when I know what the underlying system is having to do under the hood, it irritates me when we have insanely fast processors (Core2/iX series are utterly crazy and I'm not talking about clock speeds) yet a task that should take microseconds takes full seconds because someone has utterly no concept of what's going on at a lower level.  &quot;The {PL, compiler, GC, or whatever} takes care of all of that for you&quot; == nonsense.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Wed Jul 09, 2014 8:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You guys are being incredibly helpful in this regard.  And it brings me to another source of confusion, which is sort of related.  I thought I had it figured out, but now things are acting funky.<br /><br />So if I have a variable, load it to A, and want to compare it's value to, say, another variable's value, is it this easy?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp; &nbsp; LDA var1<br />&nbsp; &nbsp; CMP var2<br /></div><br /><br />I just ran into an issue where both variables SHOULD have numeric values (set up as #$03 and #$06 respectively in an init subroutine just before the main game loop).  However, there is obviously something not happening correctly.  Is this because the variables are pointing to the registers rather than the values that are in them?  And if so, what is the best method to compare these values?<br /><br />Also, is something like this possible?  It seems that it would be correct (if the vars are reading the values), but it certainly is not having the expected results.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />LDA var1<br />CMP var2-var3<br /><br /></div><br /><br />*** Yes, I've also tried the longer method of subtracting 3 from 2 using SBC and then doing the compare with the same wonky results.  Just wondering what's the best way to do these sorts of things.<br /><br />I've made some huge progress today, but this is something that is throwing me off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Wed Jul 09, 2014 9:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So if I have a variable, load it to A, and want to compare it's value to, say, another variable's value, is it this easy?</div><br />Yes, what you have there does exactly that. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is this because the variables are pointing to the registers rather than the values that are in them?</div><br />Nope, when you don't have #, it will use what's stored in the address/variable which is generally what you'd want. So if you're getting an unexpected result, something else is wrong.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, is something like this possible?</div><br />Anything is possible. But let's replace this with not named RAM so you can see what might happen with what you have:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $00<br />CMP $09-$04<br /></div><br />The loads what is stored in $00 into A. Then compares it to the value in $05. A thing I said in PM is <a href="http://www.obelisk.demon.co.uk/6502/reference.html" class="postlink">this is all the 6502 can do</a>, and anything you type has to become one of those things. CMP something-something else doesn't exist. So the assembler does the subtraction before assembling and assembles CMP zeropage with the result of the subtraction. (in this case CMP $05). This means you get a compare with neither var2, nor var3, nor the result of the subtraction of the their values. Just something totally unrelated.<br /><br />Consider that the same thing would happen with an immediate value.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $00<br />CMP #$09-$04<br /></div><br /><br />This loads what's stored in $00 into A. Then compares it with 5. The math the assembler does to get one byte is the same regardless of if the # is there or not. What the # does is change whether you are using a value directly, or getting one from an address.<br /><br />If you want to compare what in var1 with the result of what's in var2-what's in var3, you do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda var2<br />sec<br />sbc var3<br />sta temp<br /><br />lda var1<br />cmp temp<br /></div><br />And again, if that didn't work for you something else is wrong.<br /><br />Edit: So think about it this way. When you use # with an instruction, what is assembled is a byte which is used directly.<br /><br />lda #$00<br /><br />sets A to the immediate value $00.<br />When you precede something with #, it's still an immediate value.<br /><br />lda #var1<br /><br />set A to the immediate value of whatever address var1 represents. Which means the value of var1 doesn't matter for the above code.<br /><br />Meanwhile<br /><br />lda var1<br /><br />sets A to the value stored at the address var1 represents. Which means the value of the address doesn't matter for the above code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jul 09, 2014 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or, more effectively, you should rearrange the order of operations to simplify the execution. Here's two options:<br /><br />1. Comparing A to B-C could be the same as comparing A+C to B:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda var1<br />clc<br />adc var3<br />cmp var2</div><br /><br />2. Comparing A to B-C could be similar to comparing B-C to A, only the sign of the result is opposite:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda var2<br />sec<br />sbc var3<br />cmp var1</div><br /><br />Note that in the second example the z flag (bne/beq) is the same, but the c flag (bcc/bcs) is opposite, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jul 10, 2014 12:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It seems you are a bit confused about what happens in the assembler and what happens in the 6502. Keep in mind that the instructions the 6502 understands are very simple, and are represented in very few different forms. 6502 commands, as seen by the CPU, always look like one of the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">XXX #$00<br />XXX $00<br />XXX $00, X<br />XXX $00, Y<br />XXX $0000<br />XXX $0000, X<br />XXX $0000, Y<br />XXX ($0000)<br />XXX ($00, X)<br />XXX ($00), Y</div><br />Where XXX is the instruction, $00 is an 8-bit number and $0000 is a 16-bit number. If you look at an automated disassembly, like in FCEUX's debugger, this is all you'll see, because that's all that the 6502 can see.<br /><br />Anything more complex than that, like names, math operators and such are used by the assembler only, and are available only for the convenience of the programmer. Assemblers allow you to give nicknames to memory locations, so you don't have to remember every address yourself. You should use these nicknames/labels whenever you'd otherwise use the raw addresses (e.g. $00 or $0000, like above), but if you try to use operators like + or -, you'll be messing with the addresses these labels point to, not the variables themselves (i.e. memory contents). In fact, the variables don't even exist when these symbols are processed. Operations like + and - happen at assembly time, when the raw machine code is generated. Only when this machine code runs on the 6502 your variables will actually exist, because that's when the RAM will be in use.<br /><br />When developing 6502 code you should always remember how simple the actual instructions are and know that that's what your source code will become after being assembled, and think of how you can use the features of the assembler to make the generation of the raw instructions easier on you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>JoeGtake2</b> [ Thu Jul 10, 2014 5:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks so much - this makes a lot more sense now and the problem is glaringly obvious now that I look at the code through this understanding.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jul 10, 2014 7:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Just a curious thing - more with nametables</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a good page to keep open while you're working, until you've got it memorized: <a href="http://www.obelisk.demon.co.uk/6502/addressing.html" class="postlink">http://www.obelisk.demon.co.uk/6502/addressing.html</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>