<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>17</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Mon Aug 22, 2011 6:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you make the first byte a BRANCH to the part of the program you want, you can just so JMP Label and it'll run the code from RAM. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Aug 22, 2011 7:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay. Here's a quick crash course. 
<br />
<br />So this is what an assembler does: It creates a sequence of bytes based on the instructions you give it. 
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">reset:<br />&nbsp; &nbsp; &nbsp;sei<br />&nbsp; &nbsp; &nbsp;ldx #$00<br /></div><br /><br />becomes $78, $A2, $00. This is rom. If you opened your assembled rom in a hex editor and searched for this byte sequence you would find it. A guide like this: <!-- m --><a class="postlink" href="http://www.obelisk.demon.co.uk/6502/reference.html">http://www.obelisk.demon.co.uk/6502/reference.html</a><!-- m --><br /><br />Tells you what byte each instruction is assembled as, but that is not that important. <br /><br />The next thing to know, is a label doesn't actually take any rom. What takes up space are references to it. In the code above, reset takes no rom. References to it are actually stored with the instruction. <br /><br />So this: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">reset:<br />&nbsp; &nbsp; &nbsp;sei<br />&nbsp; &nbsp; &nbsp;ldx #$00<br />&nbsp; &nbsp; &nbsp;lda reset<br /></div><br />would be assembled as<br />$78, $A2, $00, $AD, (low byte of reset), (high byte of reset).<br /><br />All these bytes are actually part of your games binary (the .nes rom), so they are rom. To further bring this home, you can actually load an instruction's opcode. Remember how I said sei becomes $78?<br /><br />So what do you think is stored in the accumulator when I lda reset in the code above? $78. lda reset+1? $A2.<br /><br />When you directly load a number (lda #$00), the actual number (here it's 0) is stored in rom. $A9, $00 would be what is assembled. When you're referring to an address, you don't include the # part.<br /><br />RAM is $0000-$07FF. Whenever you load a number from any of those locations, you're loading from RAM. These numbers can be changed. To put actual code in RAM is easy. You just look up the opcodes. Remember the byte stream of the code above? <br /><br />$78, $A2, $00 was sei, ldx #$00<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;lda #$78<br />&nbsp; &nbsp; &nbsp;sta $00<br />&nbsp; &nbsp; &nbsp;lda #$A2<br />&nbsp; &nbsp; &nbsp;sta $01<br />&nbsp; &nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp; &nbsp;sta $02<br />&nbsp; &nbsp; &nbsp;jmp $0000<br /></div><br />This stores code into RAM, then jmps there and runs it. The NES CPU makes no distinction between RAM and ROM when it's running through instructions. <br /><br />RAM can't be changed before the program is run. If you want a location in RAM to be a certain number, you need to set it to that number at startup. It's as easy as loading the number you want, and storing it there. If you want to load the number from rom, you can incbin a byte stream, and load each value then store it in RAM, but I just use immediate addressing. What I think is being suggested to you is something like this:<br /><br />You want ram locations $00, $01, $02, $03 to contain $F3, $FD, $08, $23 respectively. So you create a binary file that contains the bytes $F3, $FD, $08, and $23. <br /><br />Then you incbin that file after an address. <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">zeropageinitialvalues:&nbsp; incbin &quot;zeropagebinary.bin&quot;<br /></div><br /><br />Then you run code like what 3gengames wrote. <br /><br />For reference, I'd just do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;lda #$F3<br />&nbsp; &nbsp; &nbsp;sta $00<br />&nbsp; &nbsp; &nbsp;lda #$FD<br />&nbsp; &nbsp; &nbsp;sta $01<br />&nbsp; &nbsp; &nbsp;lda #$08<br />&nbsp; &nbsp; &nbsp;sta $02<br />&nbsp; &nbsp; &nbsp;lda #$23<br />&nbsp; &nbsp; &nbsp;sta $03<br /></div>
<br />since it's easier to change a number, and you won't necessarily be storing numbers so sequentially. 
<br />
<br />If I were you, I would try to read and understand thing like the difference between lda #$00 and lda $00 before doing anything else. I might also try to completely rewrite whatever you've got, since if you didn't know this stuff, it has gotta be messy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Mon Aug 22, 2011 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And also, I said use a branch because while you can only go about 127 bytes in either direction, the position doesn't matter wherever it is, while jumps will ALWAYS goto where it was compiled to go to weather it was moved or not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Aug 22, 2011 8:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />unregistered, you appear to be very lost, and not clear enough about what you want.
<br />
<br />RAM is where your variables (i.e. dynamic data) sit. Variables are values that will change as the program runs, such as the positions of objects, number of lives, things like that. RAM is always "empty" (it's not really empty, but since its contents are somewhat random we should think of it as empty, although the correct term is "uninitialized") when the NES first starts. Before using our variables, we must initialize them.
<br />
<br />When you do this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum $0000<br /><br />currControllerButtons .dsb 1<br />lastControllerButtons .dsb 1</div><br />You are just telling the assembler where your variables should be stored. currControllerButtons will be at memory location $0000 and lastControllerButtons will be at memory location $0001. This simply declares the variables but they will be uninitiated when the program starts, so you have to initialize them yourself in the code. Nobody is gonna do it for you. So in order to do what you want you have to first declare the variables:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum $0000<br /><br />;&#40;...&#41;<br />oX .dsb 1<br />oY .dsb 1</div><br />And then, before using those variables in the program you have to initialize them:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #$8b<br />&nbsp; &nbsp;sta oX<br />&nbsp; &nbsp;sta oY</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Aug 22, 2011 9:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you everyone for helping.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">unregistered, you appear to be very lost, and not clear enough about what you want.<br /><br />RAM is where your variables (i.e. dynamic data) sit. Variables are values that will change as the program runs, such as the positions of objects, number of lives, things like that. RAM is always "empty" (it's not really empty, but since its contents are somewhat random we should think of it as empty, although the correct term is "uninitialized") when the NES first starts. Before using our variables, we must initialize them.<br /><br />When you do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum $0000<br /><br />currControllerButtons .dsb 1<br />lastControllerButtons .dsb 1</div><br />You are just telling the assembler where your variables should be stored. currControllerButtons will be at memory location $0000 and lastControllerButtons will be at memory location $0001. This simply declares the variables but they will be uninitiated when the program starts, so you have to initialize them yourself in the code. Nobody is gonna do it for you. So in order to do what you want you have to first declare the variables:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum $0000<br /><br />;&#40;...&#41;<br />oX .dsb 1<br />oY .dsb 1</div><br />And then, before using those variables in the program you have to initialize them:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #$8b<br />&nbsp; &nbsp;sta oX<br />&nbsp; &nbsp;sta oY</div></div><br /><br />I understand at least most of that, but for this code: <div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><span style="color: yellow">oX .dsb 1,#$8b</span></div> How could one get that code to work successfully?  Why doesn't <span style="color: yellow">oX</span> equal <span style="color: violet">#$8b</span>?  Those are the two questions that went through my head... I'm sorry for my muddiness tonight.  My time sheet says I've worked over 10 hours on the "game" today... too long... time to sleep.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Mon Aug 22, 2011 9:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LDA #$NUMBER
<br />STA Label
<br />
<br />Wil make it equal what you need it to, you HAVE TO do that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Aug 22, 2011 10:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><span style="color: yellow">oX .dsb 1,#$8b</span></div> How could one get that code to work successfully?</div><br />Forget about this code, this is not how you do it! You simply can't declare the variable and give it a value at the same time, in assembly this is impossible (if someone mentions machines that load code into RAM only to confuse unregistered even more, I'll kill you). This has to be done in two steps: first declare the variable and later in the code you give it a value.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why doesn't <span style="color: yellow">oX</span> equal <span style="color: violet">#$8b</span>?</div>
<br />Because RAM is uninitialized on start up, period. There's no way to change that. No matter what value you try to assign it, the variable will always contain an unpredictable value on start up, this is just how RAM works. You absolutely must use LDA / STA to assign values to your variables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>booker</b> [ Mon Aug 22, 2011 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll do my take on this.
<br />
<br />Imagine a big deal of equally-sized boxes, like at a post office. 
<br />
<br /><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/30/USPS_Post_office_boxes_2.jpg/220px-USPS_Post_office_boxes_2.jpg" alt="Image" />
<br />That's RAM.
<br />
<br />When the "world starts", they're all empty. Completely empty, with nothing in them*. All the boxes are numbered, of course, but these numbers... are not terribly helpful. What we need are some labels. So, we take out the dymo-tape...
<br /><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Dymo_operation.jpg/250px-Dymo_operation.jpg" alt="Image" />
<br />
<br />...and start labeling! In ASM6, when you do .dsb and .dsw in the .enum range of $0000-$07FF, this is exactly what you're doing: labeling. That way, when you get your instructions, they can be written in the form "put this letter in the box for Mr. Howe" as opposed to "put this letter in the 53rd box." Note that you can reserve multiple boxes this way.
<br />
<br />Of course, the act of putting a letter in to the box doesn't just happen. You have to do it yourself! The world starts and all the boxes are empty (or "uninitialiazed" as tokumaru pointed out).
<br />
<br />As before, in your initiation code before any of the actual action happens, just load whatever value into the accumulator (LDA #letter) you want and then store it in the RAM (sta MR_HOWE).
<br />
<br />Finally note that .dsb and .dsw are general purpose and can be used to flood the ROM (the part of the game that is "written in stone") with values. That's what you're trying to do <em>in RAM</em> but this operation only works for ROM. In other words, that use of those directives only works on addresses $8000-$FFFF (or if you use more than one PRG bank and/or a mapper, whatever is applicable then).
<br />
<br />* - not necessarily true; may have garbage values that are <em>not</em> zero. Check standard init code. The samples you'll find have a place to reset all RAM to zero.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Aug 23, 2011 5:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">You simply can't declare the variable and give it a value at the same time, in assembly this is impossible (if someone mentions machines that load code into RAM only to confuse unregistered even more, I'll kill you).</div>
<br /><a href="http://www.cc65.org/doc/ld65-5.html#ss5.4" class="postlink">Load and run addresses</a> for segment ".DATA". Kill Ullrich von Bassewitz.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Aug 23, 2011 6:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a very good analogy, booker. Hopefully this ought to get message across.
<br />
<br />BTW, tepples, I knew you'd be the one to do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Aug 23, 2011 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah! Yes, booker, great analogy!  Thank you so much! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  It really helped me recieve the entire message that yall were trying to give me!  RAM is not ROM, it always starts uninitalized. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />tokumaru, my friend, please don't kill tepples. : )  I didn't follow his link. : )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Tue Aug 23, 2011 8:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ahhh, the girl starts at (#$8b, #$8b) now!!!!!!!!!!!!!!!!!!!   Tomorrow is going to be great!  S cr oll in g!!!  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Aug 27, 2011 11:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, so I'm at the point now where I'm tryiing to write the code.  My first goal is to get the screen to scroll  to the next nametable as our character makes her way across the floor she starts on.  This is susposed to be an easy goal to achieve.  So far:
<br />1.) I've set the PPU to mirror the nametables vertically.  
<br />2.) Both nametables have been set up correctly.
<br />3.) Our lady character moves forward and backward very easily because the sound really works now.
<br />
<br />The next step to reach my goal is to check if the lady character is far enough over to the right of the screen (then scrollling starts).  I'm going to use an iterative construct to acomplish that.  <span style="color: yellow">Is </span><span style="color: cyan">scroll</span><span style="color: yellow"> always at the bottom left corner of the screen?</span>  If <span style="color: cyan">scroll</span> is incremented every frame the screen scrolls over to the left.  If the screen can make it over to 255 most of all of the second nametable would be shown.   But you have to switch which nametable is on the left to get the rest of the second nametable to appear.   <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Aug 27, 2011 12:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The X,Y coordinate in the scroll register is that of the pixel at the top left corner of the screen, which does happen to be more or less equivalent to the bottom left corner but only in single-screen or vertical mirroring. To switch which nametable is at the top left corner, use bits 1 and 0 of PPUCTRL ($2000). One might think of these as the high bits of the scroll register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sat Aug 27, 2011 4:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I still don't understand why does the nametable on the left have to be switched for the right side of the second nametable to appear? I stopped my scroll at 255 and it is already showing most all of the second nametable.  I'm so confused.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />
<br />
<br />Thank you for reminding me it's the top left pixel! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  That helps!  And it's nice to know that I can think of it being the bottom left corner because I'm not  horizontally mirroring.
<br />
<br /><div class="quotetitle"><a href="http://www.nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=36958" class="postlink">Here,</a> bunnyboy wrote:</div><div class="quotecontent">To set the starting nametable, change bit 0 of the PPU control register at $2000.  Clearing it to 0 will put nametables 0 and 2 on the left side of the screen with 1 and 3 to the right.  Setting it to 1 will put 1 and 3 on the left, and 0 and 2 on the right.</div><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">To switch which nametable is at the top left corner, use bits 1 and 0 of PPUCTRL ($2000). </div>
<br />So setting bits 1 and 0 of PPUCTRL to <span style="color: yellow">10</span> will put nametables 2 and 0 on the left and 3 and 1 to the right?  And setting PPUCTRL to <span style="color: yellow">xxxxxx11</span> will put nametables 3 and 1 on the left and 2 and 0 on the right?   <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>17</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>