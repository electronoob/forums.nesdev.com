<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6186" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-06-03T17:54:18-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6186</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-06-03T17:54:18-07:00</updated>
<published>2010-06-03T17:54:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62349#p62349</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62349#p62349"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62349#p62349"><![CDATA[
I finally had time to go over your program. You're doing PPU writes during rendering. If you're doing a write within a small window, a small timing change could cause it to fall outside it and cause a graphical glitch. Your code doesn't seem to synchronize with the PPU very precisely, so it'd be easy for this to happen.<br /><br />Your code runs off NMI, with a simple HERE: JMP HERE loop running between NMIs. So you already have a variation of 3*16-1=47 master clocks when your NMI is called. You do sprite DMA during the NMI, which can take one extra CPU clock, so that adds another 16 master clocks of variance, totaling 63 master clocks. Divide by 5 and you get 12.6 PPU clocks.<br /><br />But, depending on the timing of the NMI routine and power/reset synchronization, it might not vary over this full 12.6 PPU clock range; after some powers/resets it may vary by less, and thus not flicker, while others it may vary by the full 12.6 PPU clocks. Analyzing this could be very complex, because the timing of every execution of NMI is relevant; the number of clocks until it RTIs determines when the JMP HERE loop resumes, and thus affects when the next NMI occurs relative to VBL.<br /><br />I wrote a simple test program that puts up a vertical line in a nametable, then does some $2006 writes mid-frame which have a major glitch only after some powers/resets.<br /><br /><a href="http://blargg.parodius.com/temp/pal_flicker_sometimes.zip" class="postlink">pal_flicker_sometimes.zip</a><br /><br />Normally it causes a slight flickering glitch to the right on one scanline (left image), but after some powers/resets, the whole vertical bar below flickers to the right every few frames (right image).<br /><br /><img src="http://blargg.parodius.com/temp/pal_flicker_sometimes.png" alt="Image" /><br /><br />After setting up the nametable and enabling NMI and rendering, the code is very simple:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">wait:   jmp wait<br /><br /><br />nmi:    ; Do sprite DMA and reset PPUADDR to 0<br />        bit PPUSTATUS<br />        lda #0<br />        sta SPRADDR<br />        sta SPRDMA<br />        sta PPUADDR<br />        sta PPUADDR<br />        <br />        delay 15012<br />        <br />        ; Set PPUADDR to $2121 mid-frame<br />        lda #$21<br />        sta PPUADDR<br />        sta PPUADDR<br />        <br />        rti</div><br />So, the conclusion is that yes, PAL has multiple PPU-CPU synchronizations, and that it's very easy to have code that works fine after some powers/resets, but not others.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Jun 03, 2010 5:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-06-02T16:33:00-07:00</updated>
<published>2010-06-02T16:33:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62287#p62287</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62287#p62287"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62287#p62287"><![CDATA[
I just confirmed that there are 8 distinct PPU-CPU synchronizations a PAL NES can power up/reset into, as predicted. Whatever one it uses (at random) doesn't change until you reset/power again. Lovely.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Jun 02, 2010 4:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-06-02T07:29:32-07:00</updated>
<published>2010-06-02T07:29:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62273#p62273</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62273#p62273"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62273#p62273"><![CDATA[
Yeah, I'm still trying to get my head around this.<br /><br />OK, there is one CPU clock every 16 master clocks. Therefore, VBL can begin at 16 different positions within a CPU clock. VBL occurs every 312*341 PPU clocks. There are 5 master clocks in a PPU clock, so VBL occurs every 312*341*5=531960 master clocks. This is a multiple of 8, but not 16, so VBL's position within a CPU clock will alternate between two points, each a half CPU clock apart. For a given power/reset, it will never fall on anything other than these two points in a CPU cycle. Since there are 16 points available, 16/2=8 possible states it could power/reset into.<br /><br />The above was from the CPU's point of view, which would be relevant for things like NMI. From the PPU's point of view, CPU reads/writes can occur in one of 5 positions within a PPU clock, which the CPU constantly cycles through every 5 CPU clocks. Every successive CPU clock begins one master clock (1/5 PPU clock) later within a PPU clock. This would suggest that the state at power/reset is irrelevant from the PPU's view, but PPU clocks aren't the only regular event in the PPU: there's also VBL. As above, after a power/reset, a CPU clock can begin in only two possible positions relative to VBL, each 8 master clocks apart.<br /><br />I've been working on tests which are able to show how many different power/reset states it can be in, by being able to have it print which one it's on, and never print anything different except after another power/reset.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Jun 02, 2010 7:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-06-02T05:05:27-07:00</updated>
<published>2010-06-02T05:05:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62272#p62272</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62272#p62272"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62272#p62272"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It also means that there are eight PPU-CPU synchronizations that it can power up/reset into!<br /></div><br />You lost me there. You told me before there was only one. Altough I definitely confirm a demo of mine, along with another old OAM reading demo, acted differently between resets, so you last theory seems much more realist to me.<br /><br />I still don't understand <em>why</em> there is 8 alignements.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jun 02, 2010 5:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-06-01T14:48:56-07:00</updated>
<published>2010-06-01T14:48:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62253#p62253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62253#p62253"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=62253#p62253"><![CDATA[
Been doing some PAL testing today (some info already known, just verifying). 312 scanlines per frame, 341 PPU clocks per scanline. 3.2 CPU clocks per PPU clock/0.3125 PPU clocks per CPU clock. Every frame is 312*341 PPU clocks, regardless of rendering being enabled; there's no skipped clock on odd rendered frames as on NTSC. This means that every frame is 33247.5 CPU clocks. It also means that there are <strong>eight</strong> PPU-CPU synchronizations that it can power up/reset into! There are so many partly because of the lack of a short frame as on NTSC. There are 16 different positions a PPU clock can fall within a CPU clock, and since the frame length ends in half a CPU clock, this is halved to 8, as it toggles between two synchronizations every frame.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Jun 01, 2010 2:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-03-20T02:11:15-07:00</updated>
<published>2010-03-20T02:11:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58669#p58669</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58669#p58669"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58669#p58669"><![CDATA[
Okay, <a href="http://jonathan.microclub.ch/dummy/logo.asm" class="postlink">I uploaded it</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Mar 20, 2010 2:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-19T15:51:19-07:00</updated>
<published>2010-03-19T15:51:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58653#p58653</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58653#p58653"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58653#p58653"><![CDATA[
It could still be that the initial timing it's started at is what determines this flicker, rather than something in hardware. The source code would help.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Mar 19, 2010 3:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-03-19T13:20:53-07:00</updated>
<published>2010-03-19T13:20:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58644#p58644</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58644#p58644"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58644#p58644"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />Bregalad, have you tested to be sure there really is some state that can only be changed by resetting/powering down and then up? That is, you power up, run your program many times, get one particular visual effect, then reset, run your program, and consistently get a different effect, then reset, and get another effect consistently (or maybe the first again)?<br /></div><br />Yes I am sure, it's like you said.<br />I did originally not meant to release it as a standalone, but anyway it is for the good of NESdev, so I uploaded it [url="http://jonathan.microclub.ch/dummy/logo%20%28E%29.nes"]here[/url].<br />The last line of the logo sometimes flicker, and is sometimes solid depending on resets. (note : I think the flickering is due to the second $2006 writes being sometimes slightly past cc 256, and as a result the adress loaded is incorrect). It seems it never flickers on power on, and other lines show fine.<br /><br />PS : Note that the point of this thread is NOT to solve the flickering issue (which I know how to deal with) but to understand why timing depends on resets.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Mar 19, 2010 1:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-03-18T09:50:17-07:00</updated>
<published>2010-03-18T09:50:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58579#p58579</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58579#p58579"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58579#p58579"><![CDATA[
Synchronized to vblank from NMI?  Maybe do some timed OAMDATA reads, then execute some instructions to get the timing into a narrower range.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Mar 18, 2010 9:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-03-18T09:45:17-07:00</updated>
<published>2010-03-18T09:45:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58578#p58578</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58578#p58578"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58578#p58578"><![CDATA[
There's the effect of the PPU ignoring writes to half its registers for the first frame after reset.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Mar 18, 2010 9:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-18T09:25:27-07:00</updated>
<published>2010-03-18T09:25:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58576#p58576</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58576#p58576"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58576#p58576"><![CDATA[
Bregalad, have you tested to be sure there really is some state that can only be changed by resetting/powering down and then up? That is, you power up, run your program many times, get one particular visual effect, then reset, run your program, and consistently get a different effect, then reset, and get another effect consistently (or maybe the first again)?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Mar 18, 2010 9:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2010-03-18T00:02:46-07:00</updated>
<published>2010-03-18T00:02:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58563#p58563</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58563#p58563"/>
<title type="html"><![CDATA[wow]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58563#p58563"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />After power/reset, PPU is randomly in one of four synchronizations with CPU. This synchronization cannot be changed without resetting/powering down. Trials of 50-60 power/resets were done to determine likelihoods. The third synchronization is the preferred one for emulators and test ROMs, due to the least special cases, and highest likelihood.<br /></div><br />Holy cow Blargg, you are frigin hard core with this RE'ing stuff.  Haha, that is awesome.  I'll tuck this post away for a much later date when I get to the point of fine tuning my emulator and so I can add an option to randomize these power up states to make it as close to the original as possible.  THANKS! <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Thu Mar 18, 2010 12:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-17T16:44:34-07:00</updated>
<published>2010-03-17T16:44:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58546#p58546</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58546#p58546"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58546#p58546"><![CDATA[
Interesting. Can you remove unncessary bits from your code until you're left with a very small amount which still displays different stable behavior depending on some power-up state? Or wait, we didn't examine the possible CPU synchronizations with respect to VBL. Basically consider all the possible number of PPU clocks between two VBL settings, and see if any are multiples of 5. Let's say the PPU frame length was 160000 (just some made-up value). That's a multiple of 16, so VBL would fall on the same relative CPU position every frame. It could be something like this going on.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Mar 17, 2010 4:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-03-17T13:43:13-07:00</updated>
<published>2010-03-17T13:43:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58536#p58536</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58536#p58536"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58536#p58536"><![CDATA[
Mmh... Thank you very much for your diagrams, they clarify things a lot.<br /><br />So I really don't understand why my program using a raster effect has a line who seems to sometimes flicker, and sometimes be solid depending on resets on my PAL NES. I didn't mean it to be a test demo or anything - I just want to understand what is happening.<br /><br />I synchronize from VBlank NMI for the effect, so I don't see how this can be an issue (but maybe it can ?).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Mar 17, 2010 1:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2010-03-17T11:28:11-07:00</updated>
<published>2010-03-17T11:28:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58523#p58523</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58523#p58523"/>
<title type="html"><![CDATA[CPU - PPU clock alignment]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6186&amp;p=58523#p58523"><![CDATA[
Nope, there are four for NTSC. Here are some notes I made a while back:<br /><br />After power/reset, PPU is randomly in one of four synchronizations with CPU. This synchronization cannot be changed without resetting/powering down. Trials of 50-60 power/resets were done to determine likelihoods. The third synchronization is the preferred one for emulators and test ROMs, due to the least special cases, and highest likelihood.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI     VBL         Hit             Overflow    Likelihood<br />        Reset   Reset   Set     Reset   Set<br />                6819+   7502+   6819+   7290+   Power   Reset<br />-------------------------------------------------------------<br />-1      -1      -1      0       -1      -1      27%     26%<br />0       -1      0       0       0       0       15%     22%<br />0       0       0       0       0       0       31%     30%<br />0       0       0       +1      0       0       27%     22%</div><br />Why four instead of three? It's due to the PPU and CPU using separate dividers. The CPU divides the master clock by 12, the PPU by 4. Thus, the CPU has four possible positions it can be in relative to the PPU:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPU   X---X---X---X---X---X---X---X---X---X---X-...<br />CPU 1 X-----------X-----------X-----------X-----...<br />CPU 2 -X-----------X-----------X-----------X----...<br />CPU 3 --X-----------X-----------X-----------X---...<br />CPU 4 ---X-----------X-----------X-----------X--...</div><br />I expect the same for the PAL system. The CPU divides the master clock by 16, the PPU by 5.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPU X----X----X----X----X----X----X----X----X----X----X----X----X----X----X----X----X--...<br />CPU X---------------X---------------X---------------X---------------X---------------X--...</div><br />Look at that, there is only ONE overall synchronization for PAL. The CPU hits all five sub-synchronizations from one clock to the next, though. That makes it both easier and harder for emulation of all the PAL special cases. It's easier in that there's only one to research, and no choice of which to emulate, but harder in that all 5 sub-synchronizations must be checked for different effects.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Mar 17, 2010 11:28 am</p><hr />
]]></content>
</entry>
</feed>