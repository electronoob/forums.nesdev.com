<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - WDC offers free C Compiler/Optimizer and more</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">WDC offers free C Compiler/Optimizer and more</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=16198">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=16198</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>charly400</b> [ Sun Apr 22, 2018 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have not been able to do it yet, I'm working from laevateinn, to see how every part of the snes hardware works as a whole, <br />there must be a way to imitate printf

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Sun Apr 22, 2018 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are some commercial SNES games that are strongly suspected to have used C (several are RPGs or involve complex text engines). I can't remember names off the top of my head right now, but disassembly and analysis turned up some signs that parts of some games may have involved code generated by a C compiler, mixed with very heavy amounts of native assembly for the SNES specifically. There were also games that had what were suspected to have a kind of &quot;home-grown intermediary language&quot; used to create portions of 65816 code -- disassembly turned up stuff that looked very &quot;C-like&quot; except not quite. So like I said, many companies just wrote their own tools.</div><br /><br />Trivia: Subsequently, Brevik of condor/blizzard north fame has repeatedly stated he did his work on Diablo for pc in assembly because he came from a SNES dev background and didnâ€™t yet know how to write C at the time. It may be a simplification, but i found it a bit insightful  the approximate mindset of early 90s game developers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Sun Apr 22, 2018 4:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">there must be a way to imitate printf</div><br />You'd have to establish the context first.  Since the SNES has no text mode, you'd need to supply typeface graphics as part of your program, load them into VRAM, and set up the display to use them.  Once you've done that, it's possible to write text to a tilemap in order to display it.<br /><br />...<br /><br />Apparently Google Translate doesn't do well with terms like &quot;font&quot; and &quot;tilemap&quot; when targeting Spanish...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>charly400</b> [ Mon Apr 23, 2018 2:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">You'd have to establish the context first.  Since the SNES has no text mode, you'd need to supply typeface graphics as part of your program, load them into VRAM, and set up the display to use them.  Once you've done that, it's possible to write text to a tilemap in order to display it.</div><br /><br /><br />Right 93143, the pixels have to be loaded, generate a function in assembly that loads each pixel of the letter in Vram, google traslate its under construction <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Mon Apr 23, 2018 2:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not exactly.  The SNES uses a tiled graphics system, which means that the graphics are composed of 8x8-pixel tiles.  And there's no framebuffer; VRAM is solely for holding raw data for the video chip to use when rendering.  If you want to output text, the simplest way is not to render the text in software.  It's to load a set of tiles, one for each possible letter, number, and so on, into VRAM, and then to write the text string into the tilemap (also in VRAM) that specifies which tile to use for each location on the screen.  Writing to VRAM is best accomplished with DMA, since VRAM is locked during active display; this means that the tilemap containing the text should be held in WRAM so it can be transferred to VRAM during VBlank.<br /><br />Also, the data format of tiled graphics on the SNES is rather strange - it's an interleaved bitplane format where the data for each pixel is spread across multiple bytes, and it's very difficult to render into.  (Except for Mode 7, which uses a completely different and much more easily understood format.)  This is why graphics are usually not drawn in software on the SNES.<br /><br />There are of course other ways to do text, including drawing in software, but they are more complicated and slower.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>charly400</b> [ Tue Apr 24, 2018 2:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would like to understand what you say, but it is too sophisticated for me, I know that vblank is part of the kernels in other consoles, I think I understand that you would use dma to transfer a tile, dma uses block transfers, I think that's why you say  it is not convenient to write only one pixel at a time, because it would be slower than dma, I also understand that using dma while it is impossible to write in vram allows the letter to be sampled in tv faster than by processing it with cpu, because it is available for the vram faster than processing it with the cpu when the vram is unlocked, but really this is far from my current knowledge, for the moment I do not know the architecture of the snes, I only have a couple of examples, one that is called wdctest that is in assemblergames and the one that i uploaded the forum in this topic on page 1, I have to study snes programming, and snes architecture, to be able to understand the architecture, I have a couple of books, book 1 and book 2, book 1 lacks CPU snes data chapter

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Tue Apr 24, 2018 3:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's not just DMA. The way the PPU of machines like the SNES and the NES work, indexing into graphics as counted per tile (usually 8x8 pixels) is hardware supported, whereas reading/writing individual pixels must be done in software by the CPU (and as such, manipulation of graphics on a sub-tile/per-pixel level is rare on slow processors like these. You can sometimes see it used in some games as a way to destructively mask, skew or rotate graphics in RAM, but that's the practical extent of it).<br /><br />And even if you read/write individual pixels, you still do it to the interim storage of CHR RAM, which is still organized as tiles. You cannot (on the SNES) write individual pixels directly to screen. Where a 'normal' computer has one or several pixel-by-pixel drawn frame buffers, a SNES (and many other retro consoles) have &quot;name tables&quot; which are simple arrays of indexes on what tile to &quot;clone stamp&quot; where, from the graphics RAM/ROM to the screen.<br /><br />This info video helps explain it, using Commodore 64 and the NES as examples:<br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=Tfh0ytz8S0k">https://www.youtube.com/watch?v=Tfh0ytz8S0k</a><!-- m --><br /><br />He calls a &quot;tile&quot; a &quot;colour cell&quot;, but they're the same. The idea is that you have data about the graphical raster pattern stored in a tile/cell of a fixed size (again, usually 8x8 px), and then assign what collor corresponds to what bit in the pattern. It means you can reuse the same pattern with different colours on different parts of the screen by assigning different palettes to the pattern. This is akin to the indexed graphics mode you have in GIF:s, except you have several palettes applied to different areas, and not just one.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Apr 24, 2018 9:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">... I have to study snes programming, and snes architecture, to be able to understand the architecture, I have a couple of books, book 1 and book 2, book 1 lacks CPU snes data chapter</div><br /><em>Programming the 65816 (including the 6502, 65C02, and 65802)</em> by WDC, but originally by David Eyes and Ron Lichty, will be sufficient for learning the CPU.  You can find copies here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Programming_guide#Online">http://wiki.nesdev.com/w/index.php/Prog ... ide#Online</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Tue Apr 24, 2018 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">... I have to study snes programming, and snes architecture, to be able to understand the architecture, I have a couple of books, book 1 and book 2, book 1 lacks CPU snes data chapter</div><br /><em>Programming the 65816 (including the 6502, 65C02, and 65802)</em> by WDC, but originally by David Eyes and Ron Lichty, will be sufficient for learning the CPU.  You can find copies here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Programming_guide#Online">http://wiki.nesdev.com/w/index.php/Prog ... ide#Online</a><!-- m --></div><br /><br />I was about to complain about the link being down, until I noticed the note about &quot;in case the link is down, use this version provided by Koitsu&quot; -- thanks for hosting that!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>charly400</b> [ Wed Apr 25, 2018 11:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FrankenGraphics wrote:</div><div class="quotecontent">It's not just DMA. The way the PPU of machines like the SNES and the NES work, indexing into graphics as counted per tile (usually 8x8 pixels) is hardware supported, whereas reading/writing individual pixels must be done in software by the CPU (and as such, manipulation of graphics on a sub-tile/per-pixel level is rare on slow processors like these. You can sometimes see it used in some games as a way to destructively mask, skew or rotate graphics in RAM, but that's the practical extent of it).<br /><br />And even if you read/write individual pixels, you still do it to the interim storage of CHR RAM, which is still organized as tiles. You cannot (on the SNES) write individual pixels directly to screen. Where a 'normal' computer has one or several pixel-by-pixel drawn frame buffers, a SNES (and many other retro consoles) have &quot;name tables&quot; which are simple arrays of indexes on what tile to &quot;clone stamp&quot; where, from the graphics RAM/ROM to the screen.<br /><br />This info video helps explain it, using Commodore 64 and the NES as examples:<br /><!-- m --><a class="postlink" href="https://www.youtube.com/watch?v=Tfh0ytz8S0k">https://www.youtube.com/watch?v=Tfh0ytz8S0k</a><!-- m --><br /><br />He calls a &quot;tile&quot; a &quot;colour cell&quot;, but they're the same. The idea is that you have data about the graphical raster pattern stored in a tile/cell of a fixed size (again, usually 8x8 px), and then assign what collor corresponds to what bit in the pattern. It means you can reuse the same pattern with different colours on different parts of the screen by assigning different palettes to the pattern. This is akin to the indexed graphics mode you have in GIF:s, except you have several palettes applied to different areas, and not just one.</div><br />So, I have seen that a DMA transfer happens between the CHR ram of the cartridge and the memory of the PPU or the central memory WRAM, I understand that tiles are sent or palete information, DMA is how it works in the pcs however it is the rom programmer who fills the controller registers, as in the example kungfu1, instead of from the kernel as it is done in a pc, in both cases it is the CPU that fills those registers, but also the ppu can do it, I think I understood that point reading from nesdev.com, that DMA occurs between both memories,cpu's memory and chr and ppu's memory and chr, while the current processor that requested dma is in HALT state when DMA start. <br />What i dont know if tiles are hardware circuitry oriented like registers to be filled<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Programming the 65816 (including the 6502, 65C02, and 65802)[/i] by WDC, but originally by David Eyes and Ron Lichty, will be sufficient for learning the CPU.  You can find copies here: <!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Programming_guide#Online">http://wiki.nesdev.com/w/index.php/Prog ... ide#Online</a><!-- m --></div><br />Great that book, I already had it, thanks for the complete nesdev guide to learn how to program the SNES, as a fan of SNES I have dedicated to archive as many books as I could, I also have the WDC programmanual in assembly, snes is one of the few modern consoles that have no virtual memory or kernel , playstation 1 has a RISC architecture but it has a kernel, however it resides in an IOPRP image along with the drivers that manages the bios, the only way to know what are the driver routines for the snes, such as DMA controller and joysticks and more things is seeing that it is repeated among the roms in some emulator, it seems to me, but from the N64 onwards the consoles are more like the pcs, the routines of the kernel are hidden from the user

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 25, 2018 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">snes is one of the few modern consoles that have no virtual memory or kernel</div><br />Neither does the Genesis or the Game Boy Advance.<br /><br />The N64 cartridge's parallel interface (PI) behaves as an SSD, and I'm told its CPU has enough of an MMU to make virtual memory possible. But to make <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mmap&#40;&#41;</tt> practical, you'd need to write some sort of cooperative multithreading kernel so that one thread can execute while another thread is blocked on a page fault waiting for a DMA from PI to finish. Such a kernel isn't included in any BIOS in the console itself; it has to be linked into each game. I don't know whether commercial N64 games actually use page faults, or whether they just treat the N64 cart as a file system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Apr 25, 2018 3:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">the only way to know what are the driver routines for the snes, such as DMA controller and joysticks and more things is seeing that it is repeated among the roms in some emulator</div><br />There was no 100% standard way to operate the DMA unit or the joypad ports in software.  All of that was up to the developer.  You could learn by identifying code in commercial games that touches the relevant registers, or you could just study how the registers work and write your own.<br /><br />(Actually, if you were using normal joypads, you could take advantage of an auto-read function <em>in hardware</em> that did the serial port communications in the background and loaded some registers with the results.  But if you were using a weird device you had to do the serial polling yourself - there were standard BIOSes for things like the multitap, SNES Mouse and Super Scope, but at least in the case of the SNES Mouse a number of developers modified the BIOS.)<br /><br />I learned partly by using Neviksti's SNES Starter Kit, which contains a number of basic routines.  Once I figured out what they did, I became capable of writing my own, so I don't use the Starter Kit routines any more.  The SNES is far simpler than a modern computer, so it's actually quite reasonable to write hardware interface code in assembly.<br /><br />...<br /><br />As I understand it, the only official, non-developer-defined code used by every SNES game is the code used by the audio CPU to receive data from the main CPU during boot.  It resides in the only storage memory in the entire SNES: the audio module's 64-byte IPL ROM.  You see, the audio module is almost totally isolated from the rest of the system; its only window to the outside world is a set of four 8-bit I/O ports through which the main CPU can communicate with the audio CPU.  And since everything written to the ports from outside has to be read by the audio CPU on the inside, you can't just DMA things into audio RAM; you need the audio CPU's cooperation to pick up the data and put it where it's supposed to go.<br /><br />The audio module's IPL ROM defines a simple communications protocol, so that when the system boots, the audio CPU starts up running a data reception loop rather than random garbage.  The interface code on the main CPU side is not defined by Nintendo; the developer can do anything that properly respects the protocol implicitly defined by the IPL ROM code.<br /><br />Strictly speaking, the IPL ROM is only necessary for boot.  You can write your own audio-side communications driver and use the IPL ROM to load it, and once you've got that in the audio RAM, along with a way to get the audio CPU to jump to it, you never need to touch the IPL ROM again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Fri Apr 27, 2018 5:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">charly400 wrote:</div><div class="quotecontent">snes is one of the few modern consoles that have no virtual memory or kernel , playstation 1 has a RISC architecture but it has a kernel, however it resides in an IOPRP image along with the drivers that manages the bios,<br />...<br />but from the N64 onwards the consoles are more like the pcs, the routines of the kernel are hidden from the user</div>First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation so I like to draw the line of &quot;modern consoles&quot; at the 32-bit era and onward.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Apr 27, 2018 6:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation</div><br />I assume you mean the release PlayStation, not the <a href="https://forums.nesdev.com/viewtopic.php?p=195100#p195100" class="postlink">early PlayStation that plays <em>Magic Floor</em> and little else</a>. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>charly400</b> [ Sat Apr 28, 2018 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: WDC offers free C Compiler/Optimizer and more</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">There was no 100% standard way to operate the DMA unit or the joypad ports in software.  All of that was up to the developer.  You could learn by identifying code in commercial games that touches the relevant registers, or you could just study how the registers work and write your own.<br /><br />(Actually, if you were using normal joypads, you could take advantage of an auto-read function <em>in hardware</em> that did the serial port communications in the background and loaded some registers with the results.  But if you were using a weird device you had to do the serial polling yourself - there were standard BIOSes for things like the multitap, SNES Mouse and Super Scope, but at least in the case of the SNES Mouse a number of developers modified the BIOS.)<br /><br />I learned partly by using Neviksti's SNES Starter Kit, which contains a number of basic routines.  Once I figured out what they did, I became capable of writing my own, so I don't use the Starter Kit routines any more.  The SNES is far simpler than a modern computer, so it's actually quite reasonable to write hardware interface code in assembly.<br /><br />...<br /><br />As I understand it, the only official, non-developer-defined code used by every SNES game is the code used by the audio CPU to receive data from the main CPU during boot.  It resides in the only storage memory in the entire SNES: the audio module's 64-byte IPL ROM.  You see, the audio module is almost totally isolated from the rest of the system; its only window to the outside world is a set of four 8-bit I/O ports through which the main CPU can communicate with the audio CPU.  And since everything written to the ports from outside has to be read by the audio CPU on the inside, you can't just DMA things into audio RAM; you need the audio CPU's cooperation to pick up the data and put it where it's supposed to go.<br /><br />The audio module's IPL ROM defines a simple communications protocol, so that when the system boots, the audio CPU starts up running a data reception loop rather than random garbage.  The interface code on the main CPU side is not defined by Nintendo; the developer can do anything that properly respects the protocol implicitly defined by the IPL ROM code.<br /><br />Strictly speaking, the IPL ROM is only necessary for boot.  You can write your own audio-side communications driver and use the IPL ROM to load it, and once you've got that in the audio RAM, along with a way to get the audio CPU to jump to it, you never need to touch the IPL ROM again.</div><br />sure, dma registers can be filled in many ways, depends on the origin and destination, great the snes starter kit !, has a game, the walker example, very good game, I really appreciate the material that you have given me, regarding the programming of the joystick, sure there are ways to read / write the registers, they are waiting for the joystick signal, the registers are automatically read by the program, it should be like a while that repeats until there is a certain value in those registers, with respect to what you say about the sound routine is unique, I'll keep it in mind, I also have something to share, but I'm pretty sure you have it, this does not have to do with the topic, it's for playstation 2<br />code warrior: <!-- m --><a class="postlink" href="http://assemblergames.com/threads/request-code-warrior-ps2.63328/">http://assemblergames.com/threads/reque ... ps2.63328/</a><!-- m --><br />SDK: <!-- m --><a class="postlink" href="https://archive.org/details/PlayStation2July2005SDKversion3.0.3">https://archive.org/details/PlayStation ... rsion3.0.3</a><!-- m --><br /><br />repport me if the links are down<br /><br /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">First time I hear someone call the SNES a modern console. It has more things in common with the NES than the Playstation so I like to draw the line of &quot;modern consoles&quot; at the 32-bit era and onward.</div><br />is an old console but newer than the commodore 64 or apple 2 gs, it is true that it is not like the generation of 32-bit processors<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The N64 cartridge's parallel interface (PI) behaves as an SSD, and I'm told its CPU has enough of an MMU to make virtual memory possible. But to make <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mmap&#40;&#41;</tt> practical, you'd need to write some sort of cooperative multithreading kernel so that one thread can execute while another thread is blocked on a page fault waiting for a DMA from PI to finish. Such a kernel isn't included in any BIOS in the console itself; it has to be linked into each game. I don't know whether commercial N64 games actually use page faults, or whether they just treat the N64 cart as a file system.</div><br />I used mmap to sample files in memory, I know people who while debugging an application dump the trace in memory reserved by mmap, it is faster than generating a file, it is possible to generate a DMA in N64 from a device like a disk, a page fault occurs when the page is not in memory, but on the disk

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>