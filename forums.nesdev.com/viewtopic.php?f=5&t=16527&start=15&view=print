<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hypothetical non polygon based 3D?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hypothetical non polygon based 3D?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16527">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16527</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gilbert</b> [ Mon Sep 25, 2017 10:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">NURBS</div><br /><br />I think it's still widely used, just not so common in real-time generation (i.e. games).<br />Maybe it's too computationally intensive (just my random guess, maybe just BS) in comparison, that while hardware nowadays <em>may</em> be good enough to handle it reasonably well, it may still be less intensive to draw A WHOLE LOT of flat surfaces (triangles or quads) to make comparatively good looking stuff and performance, so people still choose polygons for games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Sep 25, 2017 10:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NURBS was sort of popular with earlier OpenGL stuff but not really used in games. Having hardware to do some sort of curve tesselation eventually just became the generalized thing of &quot;Geometry Shader&quot; and/or some other the other newer parts of the pipeline between the vertex and pixel shaders. You can do NURBS with that, or various other things.<br /><br />I don't think you see it that much in games because it's basically trading memory (which would be needed for more polygons) for GPU time (used to do the subdivisions). Vertex memory tends to be small potatoes compared to all those HD textures (especially when you have diffuse map, normal map, gloss map, etc. all on there), so I think in that majority case in games this just isn't a good tradeoff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Rahsennor</b> [ Mon Sep 25, 2017 10:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://potree.org/showcase/cooler_tower.html" class="postlink">Point cloud rendering</a> (bandwidth warning) and <a href="https://www.shadertoy.com/view/Mss3zM" class="postlink">raymarching</a> work quite well on modern GPUs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Alp</b> [ Mon Sep 25, 2017 11:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><a href="https://www.youtube.com/watch?v=PRCd2VVmLXw" class="postlink">Resident Evil on the GBC</a>?</div><br />I have a NES tech demo inspired by this game, that I want to get back to, after my current SNES commission is done!<br />I was considering making my own game more like Human Entertainment's Clock Tower on the Super Famicom.<br /><br />Minimal weapons, or none at all, and a constant threat somewhere in the map, looking for the player.<br /><br />The player sprites are scaled, using a simple &quot;squishing&quot; effect, to transition between each major frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Tue Sep 26, 2017 2:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Gilbert wrote:</div><div class="quotecontent">performance</div><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">GPU time</div><br />I figured it was probably something like that.  In my line of work, we sometimes find that going to a higher-order numerical technique doesn't pay for itself in compute time, or doesn't offer enough of an advantage to make the additional complexity worth it.  For example, high-order root finding techniques exist, but nobody cares; everybody just uses Newton's method.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Tue Sep 26, 2017 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NURBS</div><br />This is was thinking of; supporting actual curves instead of having to fake them with a bunch of lines. Of course, this will always look nicer, but will it always be more GPU intensive, as in, wouldn't traditional modeling become less efficient the smaller (less pixels) each polygon is? Of course, with 4K, we now we have 4x the number of pixels in the equivalent space...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Sep 26, 2017 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NURBS</div><br />This is was thinking of; supporting actual curves instead of having to fake them with a bunch of lines. Of course, this will always look nicer, but will it always be more GPU intensive, as in, wouldn't traditional modeling become less efficient the smaller (less pixels) each polygon is? Of course, with 4K, we now we have 4x the number of pixels in the equivalent space...</div><br />Yeah but the GPU implementations of NURBS were a subdivision surfice (i.e. &quot;faking them with a bunch of lines&quot;).<br /><br />Raytracers can do formulaic curves, even <a href="http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/" class="postlink">very complex ones</a>.<br /><br />You can raytrace in a pixel shader, too, I think there's been a lot of  demoscene stuff that does this over the years, but if your question is whether this can be done in a generally useful way for typical game situations e.g. modelling and animating a 3D human in realtime... well, the most practical/efficient way to do this so far is subdivision surfaces, not raytracing.<br /><br />Though, I would say the difference between a sufficiently fine subdivision surface and a &quot;real&quot; curve is probably not an important practical distinction? It's the same result at a certain point.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Tue Sep 26, 2017 5:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's all in how the compute time breaks down.<br /><br />It may not be worth it in most cases to go past Newton's method, but it's absolutely worth it to go past Euler's method, or Godunov's method.  There's still a limit, but the simplest possible method (analogous to triangles for a general 3D surface) is not the best one in those cases.<br /><br />Or perhaps voxels would be a better analogy...?<br /><br />One is tempted to wonder if this field is really mature, or if it's just gotten stuck in a rut and <em>looks</em> mature like the space launch industry did...<br /><br />EDIT:  I was careless.  Just so we're clear, I am aware that there are a number of root-finding techniques more primitive than Newton's method.  Voxels = bisection method?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Tue Sep 26, 2017 10:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">One is tempted to wonder if this field is really mature, or if it's just gotten stuck in a rut and looks mature like the space launch industry did...</div><br />This is what I was thinking. Triangles are the most efficient for GPUs, but modern GPUs are also built around rendering triangles, as in they are built to do this in hardware. Using thousands of small triangles to emulate a smooth surface just seems... Primitive? It's not that being basic is inherently bad, but we have developed tons of new, better lighting techniques as we have gotten more processing power, while actual modeling has been about the same for 20 years. Like I said earlier, I'm even curious if you would get better performance if you made a GPU that natively handles curves at this point. It's like how it used to be more efficient to just draw over everything while it is now more efficient to use z-buffering.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Sep 27, 2017 10:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">Triangles are the most efficient for GPUs, but modern GPUs are also built around rendering triangles, as in they are built to do this in hardware. Using thousands of small triangles to emulate a smooth surface just seems... Primitive? It's not that being basic is inherently bad, but we have developed tons of new, better lighting techniques as we have gotten more processing power, while actual modeling has been about the same for 20 years. Like I said earlier, I'm even curious if you would get better performance if you made a GPU that natively handles curves at this point. It's like how it used to be more efficient to just draw over everything while it is now more efficient to use z-buffering.</div><br />There's not really any promising algorithms for making this efficient though. Intel has been researching <a href="https://www.youtube.com/watch?v=mtHDSG2wNho" class="postlink">real time raytracing</a> for years (using supercomputers), but there's never been a promise of efficiency from it. Pixar experimented with raytracing (sparingly) for Cars, and then decided they should probably never do it again... <em>(Edit: thefox points out below that Pixar has since gone back to that well.)</em><br /><br />It's more that there are some things that raytracing inherently does easily (e.g. reflections, shadows, some curves), and if we ever reach enough CPU/GPU power in real time you can get some of those, but only by trading a huge performance advantage for it. For it to take over as a paradigm though, those benefits have to trade better than just throwing more polygons at the problem. It could be the difference between 10 raytraced trees and 1000 rasterized trees at the same framerate; yeah maybe those trees have great shadows and look nice in some special way, but I can just do so much more <em>stuff</em> with rasterization-- maybe I could even use some of that excess to fake or substitute for the special raytraced effect!<br /><br />The efficiency difference between solving e.g. raytracing a bi-cubic curve patch vs. subdividing it with a GPU is <em>immense</em>. Designing the hardware around this feature wouldn't negate the nature of the algorithm. They're accomplishing the same task in vastly different ways, and one of them just takes a lot more time to compute. If you have so much power that the difference in efficiency doesn't matter, then maybe you'd consider raytracing, but commodity graphics hardware isn't going to make that irrelevant any time soon.<br /><br />&quot;Better lighting techniques&quot; were developed and in use 30 years before GPU pixel shaders had enough power to use them. Depth buffers were the same, known long before GPUs made them standard. The examples you're using we could see coming from <em>decades</em> away. It was a matter of when we'd have enough cheap power/memory to make them practical.<br /><br />Rasterized triangles are actually a <em>really good solution</em> for rendering in 3D. I don't really see them going anywhere; just because a solution is old doesn't mean it's in danger of being replaced (maybe the opposite?). Hey are we still using knives to cut our food? Isn't there a better way yet? What about robots and lasers? (Not really trying to be mocking with this analogy, just trying to get across that some ideas become stable for good reason.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 28, 2017 3:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe to illustrate another approach besides raytracing, what about trying to rasterize a curve?<br /><br />To rasterize any shape, you need to be able to trace the boundary of the shape. and then find pairs of points along horizontal lines across that boundary.<br /><br />With a triangle, you have 3 points. Think about ways that 3 points could be arranged on the screen. Which one is at the top? Which one is at the bottom? Is the middle one on the left or right side? Is the triangle degenerate (i.e. are all 3 points on a line or on the same pixel)?<br /><br />There's a bunch of cases to consider, but in general you end up splitting the triangle into an upper wedge (from the top point to the split at the middle), and then a lower wedge from the middle split to the bottom point), and once split into these two wedges it's easy to trace the two boundary lines in parallel (<a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" class="postlink">with some appropriate efficient algorithm</a>) and use those as endpoints of each raster.<br /><br />So... why not just use curved lines to trace the boundary of a curved shape and rasterize that? Well, in some cases you can: there's <a href="https://en.wikipedia.org/wiki/Midpoint_circle_algorithm" class="postlink">effective circle rasterization algorithms</a>, for example. In this case, it's solving a quadratic equation insted of a linear one, so each step is more complex than the edge of a triangle, but it's still doable.<br /><br />However, a circle is an exceptionally &quot;simple&quot; case; has perfect symmetry that can be exploited for efficiency, has a very well defined shape and boundary, etc.<br /><br />Let's think about 3D curves in general, though. What's the simplest curve? Maybe a bi-quadritic patch? i.e. a quad but with an additional piece of curvature data on each axis.<br /><br />The triangle had a bunch of cases, but ultimately we could split it into two simple wedges. What do we need to do to split a quadratic patch? How do we find its boundary on the screen? This curve isn't contained by the 4 points of the quad, the curve bulges outside it! Does the buldge go left or right, up or down, in or out? Does part of the curve overlap itself from this viewpoint? (Triangles can't do that!) How do I split it to avoid the overlap? Splitting this into rasterizable pieces is not easy!!! We're only at the simplest possible thing above triangles here and there's already a combinatorial explosion of possibilities to deal with. It <em>can</em> be done, but there's a huge loss of efficiency dealing with all these cases. On top of that, even once you've split it up, tracing/interpolating a curved edge inherently takes more computation than tracing a line, as does interpolating across the raster between the split edges. Every single step of the operation has this added quadratic complexity to it!<br /><br />The easier to build alternative is basically raytracing. Find a bounding rectangle on the screen that you know will contain all the points of the curve to be rasterized, and then just raytrace every point in that rectangle. This is not that hard to implement, it's just one easily calculated surface intersection, but it's orders of magnitude more computation than rasterization. Not to mention that the bounding rectangle is necessarily wasteful (a lot of the pixels in the bounding rectangle will be off the shape, and ultimately discarded, but you have to do the intersection calculation to determine this). This is an even bigger loss of efficiency, but at least easier to implement.<br /><br />Then back to subdivision surfaces: it uses the GPU to automatically split a patch into smaller triangles, and then just use regular triangle rasterization. It's the same input data as these two other options, and the result is visually as close as you want to make it, but the subdivision process is relatively easy to implement <em>and</em> fairly efficient at the same time. You can even do level-of-detail adjustments where close stuff gets subdivided more than far away stuff. It's easy to scale up if you want smoother curves, and just as easy to scale back if you want coarser curves to save computation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 28, 2017 3:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">It may not be worth it in most cases to go past Newton's method, but it's absolutely worth it to go past Euler's method, or Godunov's method.  There's still a limit, but the simplest possible method (analogous to triangles for a general 3D surface) is not the best one in those cases.<br /><br />...<br /><br />One is tempted to wonder if this field is really mature, or if it's just gotten stuck in a rut and <em>looks</em> mature like the space launch industry did...</div><br />In cases where accuracy is needed, there are all sorts of advanced methods for calculating numerically stable solutions to problems like that. I don't think there's really a lack of advanced methods in application <em>where they're needed</em>. Especially in physical simulations, scientific research, etc.<br /><br />If you're talking about games, then relatively simple methods are usually sufficient. Accuracy isn't necessarily a problem; when the goal is just making something that's fun to interact with, and responds acceptably, that doesn't always require advanced computational techniques. In a lot of cases, keeping the algorithm simpler helps implement a lot of the cases where things interact.<br /><br />...or even sometimes it's just an advantage to use a simple method, even if it's not the best tool, just because it's easy to implement and you don't understand or don't want to take the time to properly think out the &quot;better&quot; solution. Sometimes you just have to &quot;roll your own&quot; solution with limited knowledge, and move on, because the quick solution was good enough for this project.<br /><br />But: if you look at physics engine middleware for games, they tend to have pretty well thought out computational methods. When you have experts that can specialize on something like that, they do get this stuff right. I wouldn't call solutions like Havok &quot;immature&quot; at all, from what I've seen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Sep 28, 2017 5:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's just an analogy.<br /><br />The idea I was trying to get across is that there are optimum methods.  In numerical physics, the tradeoff is not so much between speed and accuracy, but between how much time it takes to do a thing and how often you have to do it to get the accuracy you want.  This means that there will be a method that does the job faster than either a more primitive method or a more sophisticated method.<br /><br />Time marching is a good example.  Heun's method (predictor-corrector) is a significant improvement over Euler's method because you can take much longer time steps, but I believe it's been shown that going past a certain order is counterproductive because it takes so long to compute each step.  The commonly used Runge-Kutta (4,5) scheme is about as high as you want to go.<br /><br />With computer graphics, the tradeoff is a bit different, because the frame time is fixed (more or less) and the accuracy of the representation is not.  But it's fundamentally the same idea - there will be a method that produces the best picture within that frame time.  Maybe that method is texture-mapped triangles.  Maybe it's something that hasn't been thought of yet.  But triangles do seem to have some nice advantages over both simpler and more complicated representations...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Sep 28, 2017 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Pixar experimented with raytracing (sparingly) for Cars, and then decided they should probably never do it again...</div><br />They may have said that in 2006, but in recent years there has been a pretty significant shift towards using path tracing (a form of ray tracing) in movies. See this <a href="https://graphics.pixar.com/library/PathTracedMovies/paper.pdf" class="postlink">paper</a> and <a href="https://jo.dreggn.org/path-tracing-in-production/part1.pdf" class="postlink">these SIGGRAPH course notes</a> for example.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 28, 2017 9:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hypothetical non polygon based 3D?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Pixar experimented with raytracing (sparingly) for Cars, and then decided they should probably never do it again...</div><br />They may have said that in 2006, but in recent years there has been a pretty significant shift towards using path tracing (a form of ray tracing) in movies. See this <a href="https://graphics.pixar.com/library/PathTracedMovies/paper.pdf" class="postlink">paper</a> and <a href="https://jo.dreggn.org/path-tracing-in-production/part1.pdf" class="postlink">these SIGGRAPH course notes</a> for example.</div><br />Hmm, yeah, thinking back on this the comment I was referring to was something I'd heard someone say at a SIGGRAPH talk in ~2008. Basically that person expressed that the raytracing in Cars probably hadn't been worth the rendering time burdens. It may have been an isolated opinion, and it may have changed by now.<br /><br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">It's just an analogy. ... Maybe it's something that hasn't been thought of yet.  But triangles do seem to have some nice advantages over both simpler and more complicated representations...</div><br />I'm trying to think of times where there's been apparent leaps in computer graphics.<br /><br />Espozo mentioned depth buffering, but I thought it was important to note that it wasn't a new idea when it became standard in GPUs. It was just that the first generation of GPUs barely had enough power to do what they were doing at all; depth buffer requires not just more RAM for an extra layer of framebuffer but also an extra read and write and compare for every pixel. We just didn't quite have the bandwidth to spare at the time. Depth buffering was a convenience, rather than a necessity, but once you had a certain amount of power there's no reason to do without it. Very quickly just became a standard feature.<br /><br />Shader programs were another big change, but again not really a new idea, as software renderers had inherently &quot;programmable shaders&quot; since the beginning. It was just newly available to GPUs as the power grew enough that we could afford to let them run programs instead of optimizing the hardware to do only one very specific thing. The years of fixed function must have been hell for ARB standards, every new idea had to be implemented in hardware and given its own new API extension. Things have been simplified tremendously since the fixed function was abandoned.<br /><br />Most of the stuff that's changed is just due to predictable steady increase in available power. Most good techniques seem to be around for years in non-interactive graphics before there's enough power to do them in interactive stuff.<br /><br /><br />A new idea that changes everything, something better than a triangle... that'd be amazing, but I haven't seen anything of the sort on the horizon. I can see power continuing to get cheaper, and more viability for interactive raytracing eventually, but that's about it. There's other oddball rendering methods too... I dunno, how often does someone burst in with an entirely different way of doing things in any given field? It'd be exciting if it happened, but I'm not expecting it.<br /><br />With the way hardware has gone the last few years I've actually felt the opposite, that we finally have reached a really good generic solution for 3D rendering, and all the hardware is starting to settle down and look pretty much the same / interchangeable. I think this is a really good thing, too, because as things standardize programs can be more accessible and have more longevity.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>