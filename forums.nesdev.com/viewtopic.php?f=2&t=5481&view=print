<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - ca65 scopes and macros</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">ca65 scopes and macros</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5481">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5481</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sun Aug 09, 2009 3:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>ca65 scopes and macros</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dear experienced ca65 users,
<br />I've run into a problem and hope you can help me.
<br />
<br />particle.s:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope peng ;&quot;P&quot;article &quot;ENG&quot;ine<br /><br />;init - initializes particle engine<br />init:<br />&nbsp; &nbsp;...<br />&nbsp; &nbsp;rts<br /><br />;run - called once per frame, loops through all particles and updates their position etc.<br />run: <br />&nbsp; &nbsp;...<br />&nbsp; &nbsp;rts<br /><br /><br />;particle_create - create a particle and return its index in the X register<br />.macro particle_create <br />...<br />.endmacro<br /><br />.macro particle_setpos px,py<br />...<br />.endmacro<br /><br />;updates the particle specified in the X register<br />particle_run:<br />&nbsp; &nbsp;rts<br /><br /><br />.endscope</div><br /><br />Now, what I can do outside of the scope is:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr peng::init<br />jsr peng::run<br />jsr peng::particle_func</div><br /><br />However, using the macros like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">peng::particle_create #01<br />peng::particle_setpos #40,#120</div>
<br />doesn't work.
<br />Macros seem to be directly accessible from all scopes(?), so just calling them without the "peng::" part works. That defies the purpose of scopes, though.
<br />
<br />My questions: Is there any way around this? Is it even good practice to write code like this or is there a better, recommended way?
<br />
<br />It's the first time I've been using scopes in this way, but I've got older similar code that I want to convert to be more readable and organized.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Aug 09, 2009 5:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is what I found from the documentation:
<br />
<br />------------------------------------------
<br />Note: Macro names are always in the global level and in a separate name space. There is no special reason for this, it's just that I've never had any need for local macro definitions.
<br />------------------------------------------
<br />
<br />edit:
<br />
<br />Found <a href="http://www.cc65.org/doc/ca65-10.html#ss10.83" class="postlink">here</a>, when they talk about scope.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sun Aug 09, 2009 5:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, thanks. I've been browsing the documentation for a solution, but totally missed that bit about macros being global.
<br />
<br />That sucks, looks like it makes no sense using scopes to wrap my modules then.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Aug 09, 2009 5:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">miau wrote:</div><div class="quotecontent">That sucks, looks like it makes no sense using scopes to wrap my modules then.</div>
<br />
<br />It depends what you want to achieve.  I will try to answer from my little experience with ca65.  You want to "wrap modules". What does it exactly means?  All your code is in one file and want to create some scope to avoid some name clash? I could try to figure out what you're looking for. That will give me more experience with ca65 at the same time.
<br />
<br />The way I handle modules in ca65 is this way.  You create many files for the modules you want (view module, music module etc).  By separating by files you already create some scope, which is the file scope.  Then, if you want other modules to see the view module init procedure, you export the init method only.  You could always call the method viewInit (subViewInit, anyway that seems clear) to avoid any name clash.  The same thing can be done for variables by defining them in that specific file.
<br />
<br />For now this is the way I'm doing it.  All methods/variables not exported will not be seen by my external modules. The linker will be in charge to export/import the right symbols and glue everything together.  Defining scope with the scope symbol seems only useful if you want to create a local scope but still. hmm..  You could always create a scope inside your module, maybe export it and it will give it a C++ like look but I don't know how useful it would be.  Already just using .proc/.endproc create a scope for the labels.
<br />
<br />Just give me a little bit more information of want you want to do and I will see if I can find anything.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sun Aug 09, 2009 7:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />By export and import do you mean having a c-like separation of source and header files?
<br />Currently I've just got lots of separate source files for the different tasks that are included from the main source file. It works for small projects, I guess, but you can get dependency problems when one module tries to jump to code from another module and vice versa.
<br />Importing only the functions I need would help. I take it you're refering to the .export and .import commands, if so: it should work with macros, too, right?
<br />
<br />
<br />Still, I would have liked to use scopes to wrap the different modules.
<br />Here's just a somewhat extreme example if I would be very pedantic with my naming scheme. If not using scopes the macro in my first post would actually have to look like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">peng_particle_set_position</div><br />peng is a module, particle is a sub-module, but "set" isn't. This is messy.<br />The scope operator helps make things clear:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">peng::particle::set_position</div><br />peng is a module, particle is a sub-module, set_position is the function.<br /><br />I like keeping my function names as short and expressive as possible, but that doesn't always work.<br />Maybe changing my naming scheme might help. I.e. from underscore-separated identifiers to justleavingspacesoutentirely or <a href="http://en.wikipedia.org/wiki/CamelCase" class="postlink">CamelCase</a>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">peng_particle_SetPosition</div>
<br />
<br />
<br />What kind of naming scheme do you guys use? Are you strictly following it at all times?
<br />This is something I've been contemplating over for a long time. I don't want to spend most of my time writing variable and function names while coding, plus, it sometimes takes me longer to grasp the essence of a piece of code if identifiers are too long (too much information, same goes for too heavy commenting which people new to programming tend to do). On the other hand, the functions, variables and code structure should be self-explanatory to the outsider.
<br />
<br />I can't seem to find a balance between the two. Looks like you have to trade one thing off for the other.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Aug 09, 2009 9:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">miau wrote:</div><div class="quotecontent">By export and import do you mean having a c-like separation of source and header files?</div><br /><br />In a way, yes.<br /><br /><div class="quotetitle">miau wrote:</div><div class="quotecontent">Currently I've just got lots of separate source files for the different tasks that are included from the main source file. It works for small projects, I guess, but you can get dependency problems when one module tries to jump to code from another module and vice versa.<br /></div>
<br />
<br />If you code that way it will work but I think you will miss one of the advantage the cc65 linker give you.
<br />
<br />What the import/export do is mostly define scope for your function/variables.  It won't import code or anything, it will just tell that X symbol defined in a module is available at N address.  
<br />
<br />I will try to show an example of scope with import/export. Let say we have 3 modules: main, view an sound. Main will want to init the view and sound handler.  Then in the nmi, it will want to play the sound. Here's how it could look like (warning, wall of code sample):
<br />
<br />main.asm
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />zpGameState:&nbsp; &nbsp; .res 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Only main can access this variable<br /><br />; I'm importing a variable defined by the sound module, the music handler<br />.zpimport zpCurrentSong<br /><br />.segment &quot;CODE&quot;<br /><br />; I want to use these symbols from other modules<br />; &#40;usually I will define a H file with the same name<br />;&nbsp; as the module that export the symbol&#41;<br />.import subInitView<br />.import subInitSoundDriver<br />.import subPlayNextMusicFrame<br /><br />reset:<br />&nbsp; &nbsp;; I decide to init the view with the symbol I imported<br />&nbsp; &nbsp;jsr subInitView<br /><br />&nbsp; ; Let's init the song with the variable I imported<br />&nbsp; &nbsp;lda #$03<br />&nbsp; &nbsp;sta zpGameState<br /><br />&nbsp; ; then init the song<br />&nbsp; jsr subInitSoundDriver<br /><br /><br />; do nothing for now<br />mainLoop:<br /><br />&nbsp; &nbsp; &nbsp;jmp mainLoop<br /><br />nmi:<br />&nbsp; ; call the next frame on sound driver<br />&nbsp; jsr&nbsp; subPlayNextMusicFrame<br /></div><br /><br />Now let's check the content of the view manager view.asm<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />zpMyLocalVariable1:&nbsp; .res 1&nbsp; &nbsp; &nbsp;; Only the view can access this variable<br />zpMyLocalVariable2:&nbsp; .res 1&nbsp; &nbsp; &nbsp;; Only the view can access this variable<br /><br />.segment &quot;CODE&quot;<br /><br />; First export the symbols I want to be public<br />.export subInitView&nbsp; ; Only this symbol can be seen by outside module<br /><br />; this method can be called by anybody who imports it<br />.proc subInitView<br />&nbsp; &nbsp;; do some stuff here<br /><br />&nbsp; &nbsp;; call private method<br />&nbsp; &nbsp;jsr subViewInternalMethod<br />&nbsp; &nbsp;rts<br />.endproc<br /><br />; Only view module can access this method, making it private<br />.proc subViewInternalMethod<br />&nbsp; &nbsp; rts<br />.endproc<br /></div><br /><br />Finally, the sound handler module:<br /><br />music.asm<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />zpMyLocalVariable1:&nbsp; .res 1&nbsp; &nbsp; &nbsp;; Only music module can access this variable<br />zpMyLocalVariable2:&nbsp; .res 1&nbsp; &nbsp; &nbsp;; same thing here<br />zpCurrentSong: .res 1<br /><br />.zpexport zpCurrentSong&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; This variable is now viewable by anybody who decide to import it<br /><br />.segment &quot;CODE&quot;<br /><br />; First export the symbols <br />.export subInitSoundDriver&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this symbol can be seen by outside module<br />.export subPlayNextMusicFrame&nbsp; ; this symbol can be seen by outside module<br /><br />; this method can be called by anybody who imports it<br />.proc subInitSoundDriver<br />&nbsp; &nbsp;; do some stuff here<br /><br />&nbsp; &nbsp;; call private method<br />&nbsp; &nbsp;jsr subDriverInternalMethod<br />&nbsp; &nbsp;rts<br />.endproc<br /><br />; this method can be called by anybody who imports it<br />.proc subPlayNextMusicFrame<br />&nbsp; jsr subMusicReadStuff<br />&nbsp;rts<br />.endproc<br /><br />; Only music module can access this method, making it private<br />.proc subDriverInternalMethod<br />&nbsp; &nbsp; rts<br />.endproc<br /><br />; Only music module can access this method, making it private<br />.proc subMusicReadStuff<br />&nbsp; &nbsp;; do things here<br />&nbsp; &nbsp;rts<br />.endproc<br /></div>
<br />
<br />So now you may start to see a pattern.  Every module reside in their own file.  Each module can define their own private variable/function and if they need to give access to a variable/function, they will export it.  If another module requires to use it, they will import it.  This way, you reduce the chance of the main/view calling internal functions of the music engine and so it the opposite true. By defining your variable in the module, only that module can access that variable and will help reducing coding errors.
<br />
<br />Each module could reside in different segments. Each segments could be in different banks.  The segments will be set by the configuration file.  Now by exporting symbols, you don't have to worry where is X variable/function etc: the linker will take care of it.  Of course, if the segment is in a bank that is not available while calling it (you forgot to switch bank), it will fail but that's nothing the linker can do. That part is still your responsibility.
<br />
<br />As for macro, I would be careful. Macro are not functions: they are just a way to avoid rewriting repetitive code. This mean they don't have scope. It's like a define in C. Every time you call it, that code will be included again, and again and again. With modules, the function will be called instead, which is better.  Maybe a way to recognize a macro coulb be to use hungarian notation and put a prefix in front of it. I already do this for function (sub) and zero page variables (zp).
<br />
<br />I can explain more in details if you want, now it's just that it's 1h in the morning, getting sleepy and I should be in bed since I have to work tomorrow, sorry ^^;;;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Sun Aug 09, 2009 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, this method is much better than what I've been doing until now. I should have been using it from the start, really not much different from the way you do it in C, except for explicitly having to state .imports and .exports. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />
<br />I like macros for one reason - parameters.
<br />
<br />In my opinion the way you usually call functions can get confusing, especially if there are many parameters. you have to know the exact registers and memory locations they have to be stored in and it bloats the code visually.
<br />Example with just a single parameter to keep it simple:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #1<br />jsr particle_create</div><br />vs.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">particle_create #1</div><br /><br />I like creating macros to wrap functions that require parameters. So yeah, they usually don't contain the actual code, should have mentioned it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro particle_create id<br />&nbsp; &nbsp;.if .match&#40;&#123;id&#125;, a&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;;a as parameter, do nothing<br />&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;;memory location or constant, just lda it<br />&nbsp; &nbsp;&nbsp; &nbsp;lda id<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;jsr particle_create_f<br />.endmacro</div><br /><br />This way they are flexible and the code you have to change if the memory location or register for a parameter changes is not scattered around the files, but in one central place. I can call them in different ways, so I don't have to waste space or cycles. The above macros handles two cases:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">particle_create $10<br /><br />lda $10<br />beq @skip<br />&nbsp; &nbsp;particle_create a<br />@skip:</div>
<br />
<br />There might be cases where different parameters aren't easy to handle, that's when I just go for readability over cycle- or space-saving - at least until I hit the optimization stage in my project.
<br />
<br />
<br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">Maybe a way to recognize a macro coulb be to use hungarian notation and put a prefix in front of it. I already do this for function (sub) and zero page variables (zp).</div>
<br />Yeah, I see the point. I just prefer hacky code with underscores in identifiers, because I'm used to it, I guess (hello unix gurus!). Let's see how other people are doing it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Aug 09, 2009 7:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For the macro, as long as you don't put too much logic in it that should fine I guess. I'm not using much macro yet that way, so maybe I should try. The more logic in it, the more change of missing an error thought.  For public methods, I would define the macro in the header file.
<br />
<br /><div class="quotetitle">miau wrote:</div><div class="quotecontent">Yeah, I see the point. I just prefer hacky code with underscores in identifiers, because I'm used to it, I guess (hello unix gurus!). Let's see how other people are doing it.</div>
<br />
<br />There is no best way. As long as you define rules, follow and understand them and feel comfortable with it then everything is fine.  There will be always one group that prefer certain rules over others because they're used to it.  Don't fall in those religion like wars about syntax <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />
<br />edit:
<br />
<br />For the import/export thing, if you find it annoying to always import in every module you can do this with the assembler:
<br />
<br />------------------------------
<br />-U                    Mark unresolved symbols as import
<br />------------------------------
<br />
<br />This mean if a symbol is not found in the module, it will try to check automatically if there is an export somewhere.  This is one way of doing it but hmm.. for now I prefer to explicitly import it, habit I guess.
<br />
<br />edit2:
<br />
<br />I found something interesting in my lunch time that may help you with the way you wanted to write code when not using macro thought.  For example, let's take back the view module.  Let's say the view module will export the init method and , I don't now, processFrame method.
<br />
<br />Since init could be re-used elsewhere, you could have a name clash.  What I didn't like is that I have to prefix every method with the module it's related.  Now I found one solution. Instead of prefixing your method with view, do this in your h files:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.scope view<br />&nbsp; &nbsp;.import init<br />&nbsp; &nbsp;.import processFrame<br />.endscope<br /></div><br /><br />So in every module you have imported your h file, if you want to access the view public methods, you have to write:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr view::init<br />jsr view::processFrame<br /></div>
<br />
<br />Still, I know, it doesn't process your parameters but I found that way of scoping interesting.
<br />
<br />And I found that in macro you can check the count of parameter and make the compiler fail if it's not the right count. This part seems interesting.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Mon Aug 10, 2009 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">For the import/export thing, if you find it annoying to always import in every module you can do this with the assembler:<br />------------------------------<br />-U Mark unresolved symbols as import<br />------------------------------</div>
<br />This is quite useful if you need to include the header file into the module it belongs to as well (if you've got macros or constants you need to share). Else, .export and .import clash and you get errors like "Symbol `xyz' is already an import".
<br />
<br />
<br />
<br />Unfortunately, problems persist with the source/header file method.
<br />
<br />I had hoped to get a bit more object-oriented-ness into my project with it, i.e. having private variables that only functions of the class have access to. So to change a variable you call a function. That seems to be common practice in OOP.
<br />
<br />However, it means I can't use some macros as function replacements.
<br />E.g. the following should be a perfectly valid task for a macro:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro peng_particle_setpos px,py<br />&nbsp; &nbsp;.ifnblank px<br />&nbsp; &nbsp;&nbsp; &nbsp;lda px<br />&nbsp; &nbsp;&nbsp; &nbsp;sta p_x,x<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.ifnblank py<br />&nbsp; &nbsp;&nbsp; &nbsp;lda py<br />&nbsp; &nbsp;&nbsp; &nbsp;sta p_y,x<br />&nbsp; &nbsp;.endif<br />.endmacro</div>
<br />
<br />This would mean, though, that I would have to export the variables p_x and p_y as well... defies the concept of public/private members. Plus, to avoid future name clash, I would have to assign other, longer names to these variables - which is what I wanted to avoid in the first place.
<br />
<br />It would be much easier if macros could be scoped. I understand I might be the only one who would like to use them in such a way.
<br />The problem is never inside the computer, but sitting in front of it, as they say. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Mon Aug 10, 2009 5:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess for the includes and how you uses them is a matter of taste so I cannot say much about this.
<br />
<br />As for macro, to my knowledge, the #define in C/C++ doesn't have any scope.  I'm not aware of scope for macro in assembler (never did enough to confirm).  Is it something that you want to reproduce that you where doing in another assembler?
<br />
<br />To me, a macro is a pre-processor that will be included inside a file before it will be parsed. Seen that way, it make sense that the macro doesn't have scope since scope will be inspected during the parsing/assembling phase.
<br />
<br />edit:
<br />
<br />The only thing I could see to avoid the loading the parameters before every method is to compromise this way.  For example, you make sure that all functions can only receive parameters with registers (when possible) and always in the same order. You define a macro that receive as a parameter:
<br />
<br />- the name of the function
<br />- Parameters 1 to 3
<br />
<br />You have to define in every header file which parameters you can receive this way. When there is an exception, you have to document it.  So your macro lpr (load ParameteR) could receive this:
<br />
<br />lpr view::Init #$01, #$FF
<br />
<br />So instead of calling "jrs", you call the lpr (Load ParameteR) macro to do the job.  A function is just an address so it should not be an issue. What you have to make sure is the order of parameter is always the same.
<br />
<br />An example. hmm..   I never write macro so I will write more like pseudocode:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Order is anything you define in your rules<br />; Note: More validation could be done here too<br />.macro lpr target, param1, param2, param3<br />&nbsp; &nbsp;.ifnblank param1<br />&nbsp; &nbsp; &nbsp; lda param1<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.ifnblank param2<br />&nbsp; &nbsp; &nbsp; ldx param2<br />&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.ifnblank param3<br />&nbsp; &nbsp; &nbsp; ldy param3<br />&nbsp; &nbsp;.endif<br /><br />&nbsp; &nbsp; ; finally, load the function<br />&nbsp; &nbsp; jsr target<br />.endmacro<br /></div>
<br />
<br />That's one possiblity.  Try to make it generic and follow some rules.  Then, if you need some exception, you can create Load Parameter Variable (lpv) which receive the name of a variable with a value, 1 to N.
<br />
<br />ex: lpv view::Init myVarName, $00, mayVarName2, $35
<br />
<br />etc.
<br />
<br />If you cannot do it one way because of the limitation, find a way around the limitation. That's what I would do. I don't know if what I said make sense but I will surely try it and see how it goes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 10, 2009 6:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">To me, a macro is a pre-processor that will be included inside a file before it will be parsed. Seen that way, it make sense that the macro doesn't have scope since scope will be inspected during the parsing/assembling phase.</div>
<br />Then what would be the direct counterpart to an inline function from C or C++? At this point, I'm pretty sure that's what miau was aiming for: something that's inline like a macro but scoped like a proc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>miau</b> [ Mon Aug 10, 2009 6:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You're right, being just a preprocessor command it makes perfect sense.
<br />
<br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">As for macro, to my knowledge, the #define in C/C++ doesn't have any scope. I'm not aware of scope for macro in assembler (never did enough to confirm). Is it something that you want to reproduce that you where doing in another assembler?</div>
<br />No, basically, I want to find a way to reduce the confusion when working with parameters.
<br />Also, in C/C++ you can declare functions as "inline" so instead of a function call the whole code is inserted into the program code whenever you call it. Gives you the speed of macros, but can still be inside a scope. Although I must admit that the concepts of macros and inline functions are completely different.
<br />
<br />So yeah, what I'm REALLY trying to do with macros is emulate some of the comforts that higher-level languages offer to make code more readable and flexible in case of changes. I realize that might be a bit overzealous.
<br />
<br />I'll just stick to my old method for now and move over to a scope-based system once I find a satisfying solution.
<br />
<br />EDIT: tepples was right and faster than me <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Mon Aug 10, 2009 6:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I read the complete ca65 doc today (always find new things on the next read when you have more experience) and don't remember anything that would be similar to inline function in C/C++.
<br />
<br />I guess you will have to find a workaround for it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 10, 2009 7:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">miau wrote:</div><div class="quotecontent">So yeah, what I'm REALLY trying to do with macros is emulate some of the comforts that higher-level languages offer to make code more readable and flexible in case of changes. I realize that might be a bit overzealous.</div>
<br />You could always write your own extended assembly language that compiles to a .s file for ca65. That's arguably what Dennis Ritchie did in 1972 when he invented C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Mon Aug 10, 2009 10:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Regarding the comment of making scope to avoid name clash: doesn't work.  You need to import first and if you have 2 init method, it will not know which one to put in that scope you want to create.
<br />
<br />My mistake.  You can rename an export symbol but you cannot do it for import. If it was possible, my idea would have worked.
<br />
<br />Oh well. I will forget this concept.
<br />
<br />Edit:
<br />
<br />I found a work around. Let say I have my Sound driver called SoundManager. In the export, I could do this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.export __SoundManagerInit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; := subInitSoundDriver<br />.export __SoundManagerPlayNextFrame := subPlayNextSoundFrame<br /></div><br /><br />I export the routine in a way that usually I would never uses. If I would see some code using __Method, I know someone didn't use it properly, kind of.  You can call it if you want and it will work. It just that it will not conform to the rules you defined to use the module.<br /><br />Then, in the header file, I would do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; <br />; Symbols that can be imported from the music manager<br />;<br /><br />.import __SoundManagerInit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; X: current song<br />.import __SoundManagerPlayNextFrame <br /><br />.scope SoundManager<br />&nbsp; &nbsp;Init&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = __SoundManagerInit<br />&nbsp; &nbsp;PlayNextFrame = __SoundManagerPlayNextFrame<br />.endscope<br /></div>
<br />
<br />As you can see, I defined some symbols in that scope with the value of the import.  Basically I'm just saying that in the scope SoundManager, the symbol Init is actually the address of __SoundManagerInit.
<br />
<br />So after making it work, I tried to do the same thing with a macros. No luck. this mean macros have no symbols/address and are really parsed before the compiler do the job.
<br />
<br />If I find a trick to simulate inline methods, I will let you know.  What I shown may seem extreme for some people but I'm starting to like it. It just a way of writing code after all.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>