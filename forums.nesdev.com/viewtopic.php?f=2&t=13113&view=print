<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What do we want in a tutorial?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What do we want in a tutorial?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13113">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=13113</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 10, 2015 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nerdy Nights is a huge improvement over the tutorials that preceded it (GBAGuy, etc.) But it has come to my attention in <a href="http://forums.nesdev.com/viewtopic.php?p=152813#p152813" class="postlink">this topic</a> that even it has room for improvement. What might the outline of a new tutorial look like? And would it be a good or bad idea to rely on libraries for things like linker script, system init, nametable clearing, and gamepad reading, without explaining them in the first lesson?<br /><br />I'm guessing it'd start like this:<br /><br /><strong>Chapter 1: Gathering tools</strong><br />Installation of ca65, GIMP, and tile converter would need to be described separately for apt-based Linux, yum-based Linux, OS X, and Windows<br /><br /><strong>Chapter 2: Hello World</strong><br /><ol style="list-style-type: decimal"><li>Immediate mode and PPU addressing: Turn the screen green</li><li>Indexed addressing and looping: Display &quot;Hello World&quot;</li><li>Subroutines: Display &quot;Hello World&quot; at different positions</li><li>More looping: Display a pattern of &quot;Hello World&quot;</li><li>Indirect indexed addressing: Display multiple strings </li><li>Reading the controller (using a library): Display one set of strings, then another</li><li>Wrap-up: Text file viewer</li></ol><br /><strong>Chapter 3: A bouncing ball</strong><br /><ol style="list-style-type: decimal"><li>Clearing and filling OAM: Display a circle</li><li>Position variables and waiting for vblank: Move the circle</li><li>Position comparison: Limiting the circle's movement</li><li>Velocity variables: Bounce the circle off the walls</li><li>Nametable updating: Displaying the state of the controller</li><li>Binary to decimal conversion and nametable updating: Displaying the position of the circle</li><li>Reading the controller and 2D movement: Control the circle's direction</li><li>Acceleration and subpixel math: Give the circle some momentum</li></ol><br />Other chapters: Air hockey game, Brick breaking game, Platforming, Scrolling, Sound effects, Music<br /><br />Any leaps too far in the pacing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Aug 10, 2015 9:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Random thought: what would happen if it focused first on sprites and later on backgrounds? (at least having sprites alone you can make some minimal games, but having backgrounds alone will limit your choices more)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Aug 10, 2015 10:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Will there be a primer on ASM language, or will this be explained as you go? I think alot of people get confused with CMP instructions.<br /><br />Also, I like a wiki kind of approach, with links to further information on each page.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 10, 2015 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Random thought: what would happen if it focused first on sprites and later on backgrounds? (at least having sprites alone you can make some minimal games, but having backgrounds alone will limit your choices more)</div><br />What kind of game could be made with only sprites? You'd probably need a background to 1. define where the sprites are allowed to go (such as top and bottom walls in Pong) and 2. display the score. Even if you could do so with only sprites, I conjecture that doing so with a background would be easier to understand.<br /><br /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">Will there be a primer on ASM language, or will this be explained as you go?</div><br />Both. The installation chapter will link to the <a href="http://6502.org/tutorials/" class="postlink">list of 6502 tutorials</a> if the user wants to learn assembly language in another environment first. But each instruction and each addressing mode will be explained as it's first used. This is why I've broken &quot;Hello World&quot; down the way I did.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>darryl.revok</b> [ Mon Aug 10, 2015 10:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm really glad you're doing this. If there's anything I can do to help with the project, I'd be happy to do so. If the pace ends up feeling too fast, you could always break up the lessons you have planned.<br /><br />I'll throw out a few ideas in no particular order:<br /><br />Disambiguation of the flags and the operands that use them. As long as I thought BEQ was &quot;branch on equal&quot;, I wasn't really understanding what that operand did. I had several CMP #$00 commands which were totally redundant.<br /><br />Perhaps some collision detection with the other objects in the ball game.<br /><br />Stack usage. I don't think this ever gets covered in Nerdy Nights, not even to protect your registers during NMI.<br /><br />Optimization of code. This would be a later tutorial, but I think it would be helpful to address general ways to improve programming for the system, perhaps as a wrap-up. Sometimes writing efficient code in assembly is much different than a higher level language, and sometimes a new potential developer may not have experience with programming at all. You could show some ways to replace operands with others that take less clock cycles, as well as structure, such as creating unrolled loops, something that you'd almost never do with a higher language, and why/when you would do things like that in assembly. I'm putting together a spreadsheet of the operands, and their various clock cycles and byte lengths if that's useful for a download file.<br /><br />This is probably covered all too well in other articles online, but general best practices in programming would be useful for anyone like myself who hasn't had classical training. Conventions for naming variables, commenting on code, indenting, structuring blocks of code might be helpful. Just a link to another article would be plenty.<br /><br />Nerdy Nights doesn't really go into animation. This might be useful, especially for someone who's never programmed before.<br /><br />Programming enemy AI perhaps. That would be a more advanced topic.<br /><br />For me, and I'd imagine a lot of people, I can read stuff a lot but it doesn't usually click until I do it a few times. I'm not really sure how this information would come in to play, as it would be the reader's responsibility to read, practice, and then come back and reread, but maybe you could pose completing a program and then review the completion in the next article. Nerdy Nights gives incomplete programs but doesn't really go over and say, &quot;let's review that task and see how you did&quot;<br /><br />Operands that confused me most at the start:<br />AND, OR, EOR - The first thing I tried to do with one of these was to:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CMP #$xx<br />AND #$nn</div><br />That obviously didn't work. I thought about these commands from their higher-level language uses. I had to look at and break down the functions of the seven logic gates in a very simple manner before I actually got this.<br />BIT - This kind of goes with the last one, as those without assembly experience probably won't be used to the idea of directly working with the 1s and 0s of a byte. Most people who really use computers probably know a bit is a 0 or 1, and that a byte is 8 bits, but how just those two options create a functioning computer system didn't really start to come in for focus for me until I started doing this.<br />Anything to do with the flags - I didn't get these at first, and I feel like it helped a lot to understand that every branch instruction is checking these flags. In a higher level language, you're controlling all of your branching with variable values, but here, all of the variable values are controlling the flags which control your program flow. I think because of that they deserve more attention than they get.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Mon Aug 10, 2015 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Random thought: what would happen if it focused first on sprites and later on backgrounds? (at least having sprites alone you can make some minimal games, but having backgrounds alone will limit your choices more)</div><br />What kind of game could be made with only sprites? You'd probably need a background to 1. define where the sprites are allowed to go (such as top and bottom walls in Pong) and 2. display the score. Even if you could do so with only sprites, I conjecture that doing so with a background would be easier to understand.</div><br /><br />Baby's first pong game is best done using the top and bottom borders as the boundary, and foregoing score entirely - for this, sprites are fine. The goal isn't to make a fun, complete, NTSC-safe-zoned game (I know that last bit was going to get mentioned), but just to get people familiar with the idea of putting a few elements together.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Mon Aug 10, 2015 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tepple's example looks pretty good so far. If there's something to criticize I would say that it looks like it takes an awful long time before you can make a game lol. But I don't know how long each lesson is. And if they properly teach you how to make structured code it may be worth it.<br />The other thing is that you are using ca65 (newbies might want to make their first ROM as fast as possible lol).<br /><br />Also I wonder what you mean by reading the controller by using a library? Aren't you teaching how to program everything by themselves? Or are you covering controller reading later?<br /><br />For sound, I don't really have anything to complain about in the Nerdy Nights sound tutorial that Metal Slime wrote, as the sound engine he teaches you to make is quite versatile. Except that he never finished it. He is still missing how to use the DPCM channel, any expansion sound channel and PAL compatibility. He also mentioned something about sound effects and more advanced drums in his next lesson that never came. I guess he was going to introduce the DPCM channel there.<br /><br />For animation, there are nothing in Nerdy Nights but NA has other tutorials here: <!-- m --><a class="postlink" href="http://nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=33287">http://nintendoage.com/forum/messagevie ... adid=33287</a><!-- m -->.<br /><br />I think teaching assembly as you teach how to program the NES is fine. That's how I learned 6502 after all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 10, 2015 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">The other thing is that you are using ca65 (newbies might want to make their first ROM as fast as possible lol).</div><br />Lesson 1 would get people to the point where they can build a working ROM from a <a href="https://pineight.com/nes/#template" class="postlink">source zipfile</a>. This is intentionally a more complex program than the first program of lesson 2 because I want to exercise more of the toolchain (ca65, ld65, Python, Pillow, GNU Make, GNU Coreutils) to prevent problems later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also I wonder what you mean by reading the controller by using a library? Aren't you teaching how to program everything by themselves? Or are you covering controller reading later?</div><br />A later lesson would explain what goes on in nrom128.cfg (linker script), nrom.s (iNES header), init.s (init code), pads.s (controller reading), and ppuclear.s (OAM and nametable clearing), which come with the template.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Aug 10, 2015 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think lesson 1 should be a warning about how game development is going to suck up hundreds of hours of your life, and after months of frustrations and bug fixes, you will still have a game that's only 1/100th as good as most of the commercial games of that era. And if that's ok with you...here's how to make a game. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> <br /><br />I'm kidding, I love this stuff, even the annoying technical documents.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Aug 10, 2015 6:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see your tutorial is going to have Python. Would you say that Python is easier to use than C++? I only know C++, Pascal, and JavaScript, oh and 6502 ASM, which I learned back in high school because we had an Apple II.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Aug 10, 2015 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Code examples that make everything look easier than it really is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Aug 10, 2015 7:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I see your tutorial is going to have Python. Would you say that Python is easier to use than C++? I only know C++, Pascal, and JavaScript, oh and 6502 ASM, which I learned back in high school because we had an Apple II.</div><br />Because the NES cannot read PNG files, we first need to convert them to a format that the NES understands. I could make data conversion tools in PHP, JavaScript, Pascal, or C++ instead, but then we'd have to install PHP, Node, Free Pascal, or GCC in chapter 1.<br /><br />In my experience, Python is easy to install on both Windows and Debian, and I imagine it's just as easy on Fedora, FreeBSD, or OS X. One thing it has over C++ is memory safety. Like JavaScript, Python has exceptions instead of &quot;undefined behavior&quot;, which means it's harder to shoot your own sit bone than in C++.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Mon Aug 10, 2015 8:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, I'll give it a try...a little later...the next programming language I want to learn is ASM for the SNES. It's your tutorial, so do it with the tools you're most comfortable with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nicklausw</b> [ Mon Aug 10, 2015 8:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're going to teach beginners with ca65, that might as well be a tutorial on its own...(although I suppose config files are the only thing you'd HAVE to comprehend).<br /><br />2 questions about python:<br />1. What version do you use?<br />2. How to install Pillow on Windows?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Tue Aug 11, 2015 2:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What do we want in a tutorial?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also I wonder what you mean by reading the controller by using a library? Aren't you teaching how to program everything by themselves? Or are you covering controller reading later?</div><br />A later lesson would explain what goes on in nrom128.cfg (linker script), nrom.s (iNES header), init.s (init code), pads.s (controller reading), and ppuclear.s (OAM and nametable clearing), which come with the template.</div><br />I see, that makes perfect sense.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I see your tutorial is going to have Python. Would you say that Python is easier to use than C++? I only know C++, Pascal, and JavaScript, oh and 6502 ASM, which I learned back in high school because we had an Apple II.</div><br />Because the NES cannot read PNG files, we first need to convert them to a format that the NES understands. I could make data conversion tools in PHP, JavaScript, Pascal, or C++ instead, but then we'd have to install PHP, Node, Free Pascal, or GCC in chapter 1.<br /><br />In my experience, Python is easy to install on both Windows and Debian, and I imagine it's just as easy on Fedora, FreeBSD, or OS X. One thing it has over C++ is memory safety. Like JavaScript, Python has exceptions instead of &quot;undefined behavior&quot;, which means it's harder to shoot your own sit bone than in C++.</div><br />Still if you made it in C++ you could just include a binary for Windows users and they wouldn't have to install anything at all. For Linux users it shouldn't be any harder than installing Python (plus Python extension for bitmaps) and they are likely already setup.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>