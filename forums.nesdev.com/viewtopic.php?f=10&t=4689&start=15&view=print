<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - arrangement of pattern tables in use by sprites</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">arrangement of pattern tables in use by sprites</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4689">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4689</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Jan 07, 2009 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I forgot to mention for my buffer I have a variable outside of the page that contains how many object slots are being used. So I don't need to clear anything, because if my routine knows I have only 3 metasprites on screen, it will know to only read the first 24 bytes (8 bytes a piece, 3 metasprites). Every frame, this "counter" for the number of objects on screen is reset after all metasprites are drawn. Then whenever a metasprite is put into a new slot, that counter is incremented.
<br />
<br />If you want, you can use the idea; I'd be happy knowing that I had a legitimately good concept that other people would like to use. But I believe you if you say you also came up with a similar system.
<br />
<br />My game might need more objects because there are lots of spells cast, fireballs thrown, axes thrown, basically lots of independently moving metasprites. But I decided on this system because it was really flexible, and that is my number 1 goal in programming a game, flexibility.
<br />
<br />EDIT: About the invisible object, you're right that it's not stupid. It could be stupid though, if executed stupidly, but of course, anything could be stupid if executed stupidly. I actually think I'll be having invisible objects that act as event switches, like your enemy at the end of the level. Though since I have unique code for every room in my game, I could just hard code event switches into that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jan 07, 2009 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">Celius wrote:</div><div class="quotecontent">My engine for drawing metasprites doesn't know anything about objects really. At max, there can be 32 metasprites on screen at once, since there is a 256 byte buffer that holds 8 byte chunks for each metasprite. This buffer kind of acts like a stack, where you put the information for one metasprite on, then in the next "slot" you put the info for the next metasprite.</div><br />My, this is a really great idea. Can I plagiarize it ?</div><br />Balloon Fight does something similar, except it can have only 9 "normal" active objects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's not stupid to have invisible enemies. I have a level who is not terminated by a boss. In order to terminate the level, I have an invisible enemy next to the exit and if the player step on him, instead of getting damaged it just set the stage end flag</div>
<br />Then it shouldn't be called an "enemy"; it's a trigger. Invisible triggers are useful; invisible enemies that can damage the player, not as much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jan 07, 2009 1:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK maybe not an enemy, but technically in my game engine there is no difference between that and a true enemy, other than what is inside the AI.
<br />
<br />And I'll think whether I continue to use my system or if I'll switch to the metasprite buffer idea. If I make a sidescrolling game where priorities doesn't matter at all, I'll definitely use that. But for my current game I think I'll work with the 1 object = 1 metasprite limitation, and find other tricks arround that. Limitations aren't THAT bad, they are guidlines. Altough being limited when you want to do something very cool that breaks the limit can be annoying.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Jan 07, 2009 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The one thing that is annoying about the way I physically draw the sprites in my game is that I do a quick-and-dirty priority shuffling method, so currently any visible sprite pixels that are layered will constantly flicker. But if I somehow got around that, the stack system wouldn't necessarily mean that all sprites drawn couldn't have priority. I understand though that you'd have to make some fixes to make sure that it is displayed correctly when the player is in front of an object or behind it, etc.
<br />
<br />On a side note, being limited is the one thing I try to eliminate when programming a game. I can do almost anything I want with my game engine once I program it. It's a side scrolling platformer with rooms, and each room points to event code. If it's a really simple room, it might just point to "rts". But it's nice because I can have unique 6502 code for every room, and with 6502 code, well, a -lot- is possible. I could tell it to change the palette midway through the room, I could tell it to display the player upside down, I could tell it do display the sum of variables $0-$2E in the center of the screen, etc. Though the last two I mentioned were completely ridiculous, it's just an example of flexibility. It gets really really fun as a game designer when you know nearly anything (within the realm of reasonability) is possible  <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" /> .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Sun Jan 11, 2009 7:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I got Celius's method working, for the most part.  Here is my current routine, for your consideration.  A waste of cycles?  Unclean and trashy?  Let me know!
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;an example of one metasprite this routine interprets<br />ExampleSprite:<br />.db 6<br />.db 0,$01,$00,0<br />.db 0,$02,$00,8<br />.db 8,$11,$00,0<br />.db 8,$12,$00,8<br />.db 16,$21,$00,0<br />.db 16,$22,$00,8</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loadsprite:<br /><br />;tmpada = address of sprite data<br />;tmp16x/tmp16y = 16-bit x and y of sprite's position, this will be culled to fit onscreen<br />;tmp8x = sprite flip values<br />;tmp8y = where to store this data in the sprite table<br />;sprY sprID sprAtt sprX = final data to be inserted into table<br /><br />&nbsp; &nbsp;ldy #0<br />&nbsp; &nbsp;lda &#40;tmpada&#41;,y&nbsp; &nbsp;;load number of tiles in this sprite<br />&nbsp; &nbsp;beq +&nbsp; &nbsp;&nbsp; &nbsp;;if 0, jump to simple sprite routine<br /><br />&nbsp; &nbsp;tax<br />-&nbsp; &nbsp;dex<br />&nbsp; &nbsp;ldy Table4,x&nbsp; &nbsp;;y = x * 4<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#40;tmpada&#41;,y&nbsp; &nbsp;;a = tile x's y offset<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc tmp16y&nbsp; &nbsp;;add y offset to low bits of y position<br />&nbsp; &nbsp;sta sprY<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;adc tmp16y+1&nbsp; &nbsp;;finish the add<br />&nbsp; &nbsp;beq ++&nbsp; &nbsp;&nbsp; &nbsp;;move on if there's nothing in the high bits<br />&nbsp; &nbsp;lda $FF&nbsp; &nbsp;&nbsp; &nbsp;;otherwise, this part of the sprite is offscreen<br />&nbsp; &nbsp;sta sprY<br /><br />++&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#40;tmpada&#41;,y&nbsp; &nbsp;;a = tile x's index<br />&nbsp; &nbsp;sta sprID<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#40;tmpada&#41;,y&nbsp; &nbsp;;a = tile x's palette<br />&nbsp; &nbsp;ora tmp8x&nbsp; &nbsp;&nbsp; &nbsp;;merge palette with flip values<br />&nbsp; &nbsp;sta sprAtt<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#40;tmpada&#41;,y&nbsp; &nbsp;;a = tile x's x offset<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc tmp16x&nbsp; &nbsp;;add y offset to low bits of x position<br />&nbsp; &nbsp;sta sprX<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;adc tmp16x+1&nbsp; &nbsp;;finish the add<br />&nbsp; &nbsp;beq +++&nbsp; &nbsp;&nbsp; &nbsp;;move on if there's nothing in the high bits<br />&nbsp; &nbsp;lda $FF&nbsp; &nbsp;&nbsp; &nbsp;;otherwise, this part of the sprite is offscreen<br />&nbsp; &nbsp;sta sprX<br /><br />+++&nbsp; &nbsp;txa<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc tmp8y<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda Table4,y&nbsp; &nbsp;;4 * &#40;x + sprite number&#41; = OAM offset<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda sprY&nbsp; &nbsp;&nbsp; &nbsp;;store all final values in shadow OAM<br />&nbsp; &nbsp;sta OAM,y<br />&nbsp; &nbsp;lda sprID<br />&nbsp; &nbsp;sta OAM+1,y<br />&nbsp; &nbsp;lda sprAtt<br />&nbsp; &nbsp;sta OAM+2,y<br />&nbsp; &nbsp;lda sprX<br />&nbsp; &nbsp;sta OAM+3,y<br /><br />&nbsp; &nbsp;cpx #0&nbsp; &nbsp;&nbsp; &nbsp;;are we done with this sprite?<br />&nbsp; &nbsp;bne -<br />&nbsp; &nbsp;rts<br /><br />+&nbsp; &nbsp;nop&nbsp; &nbsp;&nbsp; &nbsp;;simple sprite loading not implemented<br />&nbsp; &nbsp;rts</div>
<br />
<br />Table4 is a short multiplication table of 4s since I can't be bothered to a multiplication routine now and it's faster anyway, as long as I can spare the bytes.
<br />
<br />You'll notice I preserve x the whole time as a counter, and it actually counts backwards from the end of the metadata.  Seemed like it might save a few instructions that way.
<br />
<br />Now obviously, the biggest problem with this is that it does not take into account flipping the whole sprite, rather than just individual tiles!  If you try to flip it you get a mess.  How would I start fixing this?  It's a pretty big problem.  The main issue is deciding which tiles switch places; in 2x2, you just swap them side to side, but in 3x3 you preserve the center one a swap the far sides, and it gets more complex as you go.
<br />
<br />I could duplicate my metadata with things positioned and offset correctly but that seems very wasteful to me...however it would save on a lot of cycles.
<br />
<br />The easiest solution might be to store an extra byte with the sprite that somehow indicates a flipping routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 11, 2009 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Multiplication by 4 is dead easy on a 6502. Replace this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; tay<br />&nbsp; lda times_four,y</div><br />with this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; asl a<br />&nbsp; asl a</div>
<br />to save two bytes and two cycles.
<br />
<br />As for flipping, that's more a matter of turning x+=8 into x+=248 when you see attribute 2 bit 6 turned on; most of the rest of the code stays the same.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 11, 2009 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">UncleSporky wrote:</div><div class="quotecontent">Now obviously, the biggest problem with this is that it does not take into account flipping the whole sprite, rather than just individual tiles!  If you try to flip it you get a mess.  How would I start fixing this?  It's a pretty big problem.  The main issue is deciding which tiles switch places; in 2x2, you just swap them side to side, but in 3x3 you preserve the center one a swap the far sides, and it gets more complex as you go.</div>
<br />This is indeed a big problem, and, IMO, the main reason why drawing metasprites is slow. In my routine, that uses relative coordinates for each hardware sprite, I just invert the coordinate of each sprite if the metasprite is flipped (4 becomes -4). Of course I have to account for the fact that sprite coordinates represent the top left corner of the picture, but ideally I'd like them to represent the top right corner when they are flipped horizontally, and since that's just not possible, I fix the origin coordinate before drawing the individual sprites in case of flipping to compensate for that.
<br />
<br />You did present a good idea though, of using different routines for the different flipping states. If you had 4 different sprite rendering routines, you'd get the maximum speed possible out of them. Many conditional branches within a repeated operation (such as outputting sprites) are big performance killers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Jan 11, 2009 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I didn't like the idea of flipping sprites, when I had that situation I just made walking the other way to be a separate animation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Jan 11, 2009 10:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It can prove to be a big life saver if you have tons of different animations to handle flipping.
<br />
<br />Oh, but one thing I will say is that it might indeed be a good idea to handle flipping with different routines. I think in my routine, I use a ZP variable for a flip byte, so I will draw something like this:
<br />
<br />lda SpriteRelativeX
<br />eor FlipX
<br />clc
<br />adc MetaSpriteXCoordLow
<br />...
<br />
<br />Where if FlipX is 0, the sprite will be drawn as is, but if FlipX is $FF, it will like Tokumaru does, invert the value so that values are multiplied by -1.
<br />
<br />If you really wanted to flip a sprite with separate routines, you could do away with signed numbers all together. So in the unflipped drawing you'd do:
<br />
<br />clc
<br />lda SpriteRelativeX
<br />adc MetaSpriteXLow
<br />
<br />and in the other you'd do
<br />
<br />sec
<br />lda MetaSpriteXLow
<br />sbc SpriteRelativeX
<br />
<br />So you do additions in one, and subtractions in the other. Though using signed numbers makes for more universal code, it might end up saving you time to do straight up addition and subtraction of positive values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jan 12, 2009 3:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It can prove to be a big life saver if you have tons of different animations to handle flipping.<br /></div>
<br />Maybe life saver, but ROM waster for sure. In my game I don't want to waste any ROM so I do automatic flipping horizontally (but not vertically as you'd hardly flip whole sprites vertically anyway). I just use a EOR instruction to do this, so that if the sprite is already flipped horizontally in the definitions, it's not flipped finally. I had a little trick to compute the horizontal position, but it works 100% fine. I belive I had put much tought in it back then.
<br />
<br />I will share my routine too and you guys will say what you think about it. It only uses 8-bit coordinates toug. Oh yeah I use another system which allow sprites to be automatically disabled when in a certain area, this is usefull when drawing textboxes and you don't want sprites to be visible in them (I call this sprite clipping).
<br />
<br />In my game this routine is copied into RAM, and the instructions in comments are regularly exchanged with their uncommented counterparts above them to get sprite cycling (the metasprites is copied either forwards or backwards). Having 2 versions of the routine in ROM would have been possible but more wasteful. I don't know if I could do anything better, if anyone has a great idea please share it.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SetupSpriteTable<br />&nbsp; &nbsp;sty PointerH<br />&nbsp; &nbsp;sta PointerL<br />&nbsp; &nbsp;ldy #$00<br />&nbsp; &nbsp;lda &#91;Pointer&#93;,Y<br />&nbsp; &nbsp;beq _done&nbsp; &nbsp;&nbsp; &nbsp;;Make sure to skip if the sprite is transparent<br /><br />&nbsp; &nbsp;sta SpriteCtr&nbsp; &nbsp;&nbsp; &nbsp;;This is the # of sprites in this frame<br />&nbsp; &nbsp;sbc #$03<br />&nbsp; &nbsp;nop<br />;&nbsp; &nbsp;asl A<br />;&nbsp; &nbsp;asl A<br />;&nbsp; &nbsp;sbc #$03<br />;&nbsp; &nbsp;tay<br />_loop<br />&nbsp; &nbsp;lda SpriteDMAFlag&nbsp; &nbsp;&nbsp; &nbsp;;Make sure that the buffer isn't already full<br />&nbsp; &nbsp;bne _done<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#91;Pointer&#93;,Y&nbsp; &nbsp;&nbsp; &nbsp;;$$<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc SpritePosV<br />&nbsp; &nbsp;sta SpriteBuffer.PosV.w,X&nbsp; &nbsp;;Set the vertical position<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#91;Pointer&#93;,Y&nbsp; &nbsp;&nbsp; &nbsp;;$$&nbsp; &nbsp;;Tile number<br />&nbsp; &nbsp;sta SpriteBuffer.TileNmr.w,X<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda SpriteHFlipFlag<br />&nbsp; &nbsp;lsr A<br />&nbsp; &nbsp;and #$40<br />&nbsp; &nbsp;eor &#91;Pointer&#93;,Y&nbsp; &nbsp;&nbsp; &nbsp;;$$&nbsp; &nbsp;;Read attributes<br />&nbsp; &nbsp;eor SpriteGlobalColor&nbsp; &nbsp;&nbsp; &nbsp;;Main palette adder<br />&nbsp; &nbsp;sta SpriteBuffer.Palette.w,X<br /><br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#91;Pointer&#93;,Y&nbsp; &nbsp;&nbsp; &nbsp;;$$&nbsp; &nbsp;;Add relative horizontal offset<br />&nbsp; &nbsp;bit SpriteHFlipFlag<br />&nbsp; &nbsp;bpl +<br />&nbsp; &nbsp;eor #$ff<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc #$07<br />+&nbsp; &nbsp;cmp #$80<br />&nbsp; &nbsp;bcc +<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc SpritePosH<br />&nbsp; &nbsp;bcc _skip&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Skip if underflow if offset is negative<br />&nbsp; &nbsp;bcs _noskip<br />+&nbsp; &nbsp;adc SpritePosH<br />&nbsp; &nbsp;bcs _skip&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;If positive ofset skip if overflow<br />_noskip<br />&nbsp; &nbsp;sta SpriteBuffer.PosH.w,X&nbsp; &nbsp;;Store definite H position<br /><br />&nbsp; &nbsp;bit SpriteClippingFlag<br />&nbsp; &nbsp;bpl _noClipping&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Check if there is clipping<br /><br />&nbsp; &nbsp;cmp SpriteClippingHMin<br />&nbsp; &nbsp;bcc _noClipping<br />&nbsp; &nbsp;cmp SpriteClippingHMax<br />&nbsp; &nbsp;bcs _noClipping&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Check if the sprite is horizontaly in the clipped window<br /><br />&nbsp; &nbsp;lda SpriteBuffer.PosV.w,X<br />&nbsp; &nbsp;cmp SpriteClippingVMin<br />&nbsp; &nbsp;bcc _noClipping&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Check if the sprite is vertically in the clipped window<br />&nbsp; &nbsp;cmp SpriteClippingVMax<br />&nbsp; &nbsp;bcc _skip<br /><br />_noClipping<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;inx&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Process to next sprite in memory index<br />&nbsp; &nbsp;bne _skip&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Avoid overflow<br />&nbsp; &nbsp;inc SpriteDMAFlag&nbsp; &nbsp;&nbsp; &nbsp;;This will be set if the buffer is full<br />_skip<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;dec SpriteCtr<br />&nbsp; &nbsp;nop<br />&nbsp; &nbsp;bne _loop<br />;&nbsp; &nbsp;tya<br />;&nbsp; &nbsp;sec<br />;&nbsp; &nbsp;sbc #$08<br />;&nbsp; &nbsp;tay<br />;&nbsp; &nbsp;bcs _loop<br />_done<br />&nbsp; &nbsp;rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Jan 12, 2009 3:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh wow, that was really misleading sorry. I meant to say that it's a life saver to handle flipping for animations if you have tons of different animations. I didn't mean it's good to use tons of different animations to handle flipping. Sorry about that.
<br />
<br />It's a little late and I can't quite follow the routine without looking at it some more, but it looks like if you separated flipped and unflipped sprite drawing, along with having 8 bit coords, you would be able to have really time saving routines. Though it might take a little more space.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jan 12, 2009 4:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It's a little late and I can't quite follow the routine without looking at it some more, but it looks like if you separated flipped and unflipped sprite drawing, along with having 8 bit coords, you would be able to have really time saving routines. Though it might take a little more space.</div>
<br />It's fun you mention it's a bit late, because here it's 12 AM.
<br />
<br />And I didn't really separate flipped and unflipped sprites. If the sprite is flipped just use a eor #$ff and for some reason I substract 7 afterwards. I guess it's what worked best.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Mon Jan 12, 2009 4:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess it would save time though to seperate them, because you wouldn't have to do any eoring for drawing metasprites. You could just have one routine that does all adding for relative coordinates, and another that does subtracting for when it's flipped. This would take up a little more ROM space, but maybe a lot less time.
<br />
<br />Oh, and by the way, it's 5:20 AM here. Usually my "late" is someone else's "early" (Actually, my dad just woke up, and I'm just going to bed, haha).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 05, 2009 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Celius, I'm curious: How do you handle the high byte of the relative coordinates? I mean, I've seen your EOR trick to invert the low byte, but since the relative coordinate is added to a 16-bit number, it has to be extended to 16 bits as well (the high byte is either $00 or $FF).
<br />
<br />Obviously, the high bytes of the relative coordinates are not stored in tables, because it'd be a waste to store all those $00's and $FF's, so I generate them based on bit 7 of the coordinates. The fastest way I found to generate it is the following:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda #$ff<br />&nbsp; &nbsp; cmp coord<br />&nbsp; &nbsp; adc #$80<br /></div>
<br />What makes this process is slow is that I have to do this before the addition (because the carry is used), so the result must be stored in a temp location, and other small details. So I was wondering if you had found a better way to deal with this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Feb 05, 2009 8:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm sorry, I don't think I quite understand what you're asking. All of my relative coordinates are 8 bits in size, and unsigned. My current sprite drawing engine uses a temporary variable as the "high" byte of relativity in case the sprites are flipped, and I set all of this up before drawing. This is either $FF or $00 ($FF if flipped, $00 if not).
<br />
<br />So I'll take that value, EOR the relative X coordinate with it and add it as the "high" coordinate. If the value is $00, it'll add $00 as the relative high, eoring the unsigned relative X coordinate by 0, thus doing nothing to the low part. If the value is $FF, it'll add that as the relative high, and invert the low value.
<br />
<br />I set it up like this so I wouldn't have to do really any checks in the actual drawing code, but the initialization took like 200 cycles and I ended up adding all sorts of values for the sake of the code being universal.
<br />
<br />I'm going to rewrite my code to have 4 different routines that will each be smaller, simpler, and faster. Each one corresponds with the flip status of an object:
<br />
<br />00 - No flipping
<br />01 - Horizontal flipping
<br />10 - Vertical flipping
<br />11 - both vertical and horizontal flipping
<br />
<br />So in the one without flipping, I can just add the coordinates as is. In the horizontal one, I will do an SBC instead of ADC for the X coordinates. For the vertical one, I'll do SBC instead of ADC for Y coords, and for the last one I'll do SBC instead of ADC for both.
<br />
<br />In that case, I really won't need a high byte for the relative X. Well, it may be an immediate value like:
<br />
<br />clc
<br />lda XCoordLow
<br />adc RelativeX
<br />sta XCoordLow
<br />lda XCoordHigh
<br />adc #0
<br />sta XCoordHigh
<br />
<br />Sorry if this doesn't at all answer your question. Please elaborate if it doesn't.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>