<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Starting Out</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Starting Out</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1283">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1283</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Sun Mar 26, 2006 9:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Starting Out</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,
<br />
<br />I've always wanted to write an NES emulator and for some reason I've finally just gotten to the point where I actually started. I'm reading everything I can get my hands on (minus the 6502 manual <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />), but I'm having trouble figuring out from a high level perspective of what it is that needs to be written.
<br />
<br />The problem I'm finding is that every document I read either explains some things very detailed or very vaguely, either implying a lot between the lines, or simply expecting you to know everything else. I haven't been able to put together a clear picture of how things work.
<br />
<br />Starting with the 6502 core from iNES, I've written a bit of code implementing some of basics of the memory and PPU, but I'm suck on a general lack of understanding. Some questions I have follow. I feel foolish asking some of these, but I'd rather ask and make a fool of myself than do something completely wrong. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />1) What big pieces need to be written? The CPU is taken care of, then there's the PPU, APU, memory, controllers (not sure how much there is to do there), and then the mappers (which I haven't quite fully digested the details of, but I basically get it). 
<br />
<br />2) When the processor starts running do I need to load data from the cartridge into memory, or does the MMC map straight to the cartridge in such a way that access to certain areas of CPU memory automatically read from the cartridge? 
<br />
<br />3) With the CPU memory, do I really need to mirror chunks of memory or do I just look at every single address coming in and reduce it to a common unmirrored chunk? For example, on the PPU, $4000 - $10000 mirrors $0000-$3FFF. Is there any point at all of having any data in $4000+? Am I correct in guess that with $2008-$3FFF in CPU memory that as long as the address is &gt;= $2000 and &lt;= $2007 then it just looks at the least significant 4 bits? Is this why $3456 is the same as $2006?
<br />
<br />It's actually difficult to formulate specific questions to ask because basically I'm just kind of confused as to where to start. Lets start with these for now, if you will. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Thanks guys

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Mar 26, 2006 11:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Starting Out</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent">1) What big pieces need to be written?</div><br /><br />CPU, APU, PPU, mappers.  That's pretty much it.  Basic controllers are very simple to impliment, but nonstandard controllers (like the zapper, ROB, keyboard, other crap) are a bit harder.<br /><br />If you have a CPU running code, a PPU drawing pixels, an APU playing sound, and mappers managing the game -- you have a fully working emulator.<br /><br />PPU should be next highest priority after the CPU.  Even if you don't have input... getting a game's title screen displayed or watching the intro demo of a game is very satisfying.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">or does the MMC map straight to the cartridge in such a way that access to certain areas of CPU memory automatically read from the cartridge?</div><br /><br />Bingo.<br /><br />You may instinctively think to have a big array of $10000 bytes that hosts the RAM and PRG, but it's actually somewhat harder to manage an emu with that setup.<br /><br />I find it's best to load the ROM's PRG and CHR into their own buffers, then use a series of function pointers to cover certain addressing spaces.<br /><br />I get into more details, and other people have recommendations in this thread:<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=990">http://nesdev.com/bbs/viewtopic.php?t=990</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) With the CPU memory, do I really need to mirror chunks of memory or do I just look at every single address coming in and reduce it to a common unmirrored chunk?</div><br /><br />Mirroring can easily be accomplished by masking out the appropriate bits of the address.  For example system RAM is at $0000-07FF but is also mirrored at $0800-1FFF.  In an emu this is easily done with something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BYTE read_ram&#40;WORD a&#41;<br />&#123;<br />&nbsp; return RAM&#91; a &amp; 0x07FF &#93;;<br />&#125;<br /></div><br /><br />where 'a' is an address between $0000-$1FFF.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is there any point at all of having any data in $4000+?</div><br /><br />Not really.  Whenever you're dealing with PPU memory accesses, just mask the address with 0x3FFF to have larger addresses mirror the first 16k.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Am I correct in guess that with $2008-$3FFF in CPU memory that as long as the address is &gt;= $2000 and &lt;= $2007 then it just looks at the least significant 4 bits? Is this why $3456 is the same as $2006?</div>
<br />
<br />Yeah, you have the right idea.  When the CPU accesses $2000-3FFF, only the low <em>3</em> bits are significant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Mon Mar 27, 2006 1:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Starting Out</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">PPU should be next highest priority after the CPU.  Even if you don't have input... getting a game's title screen displayed or watching the intro demo of a game is very satisfying.</div><br /><br />I bet <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I find it's best to load the ROM's PRG and CHR into their own buffers, then use a series of function pointers to cover certain addressing spaces.</div><br /><br />Now all of these map to the CPU's memory, not the PPU's right? The PPU's memory is physical?<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Mirroring can easily be accomplished by masking out the appropriate bits of the address.</div><br /><br />Hey there's a good idea.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yeah, you have the right idea.  When the CPU accesses $2000-3FFF, only the low <em>3</em> bits are significant.</div>
<br />
<br />Who came up with this stuff? :p
<br />
<br />
<br />
<br />Ok, now just a quick overview of how the whole thing works... 
<br />
<br />The system turns on, and initial states are loaded into all of the registers. The CPU runs for a fixed amount of cycles (113.333 for NTSC etc) then the PPU draws the line to the screen. (Nothing happens during H-Blank?) This happens for 240 lines, then the V-Blank period starts. The CPU runs one cycle, performs (if enabled) an NMI (generated by hardware I assume), then runs the rest of the cycles per line, runs for the rest of the lines, then starts on the new frame. 
<br />
<br />Right? I'll gather my thoughts and re-read some things and ask more tomorrow.... err... today. It's getting early in the morning. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Mon Mar 27, 2006 3:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, it's always nice to see new people starting on an NES emulator.
<br />
<br />I don't think it's a good approach to use an existing 6502 emulator, as it's the core and will make it hard for you to understand how it works. If you won't write your own CPU emulator, at least do some reading on the subject, and you'll see your general lack of understanding isn't as bad as you thought it was.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Now all of these map to the CPU's memory, not the PPU's right? The PPU's memory is physical?</div><br />CHR is always mapped to the PPU memory area $0000-$1fff. It can also be mapped to the PPU nametable area, with specific mappers, you can worry about that later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The CPU runs for a fixed amount of cycles (113.333 for NTSC etc) then the PPU draws the line to the screen. (Nothing happens during H-Blank?) This happens for 240 lines, then the V-Blank period starts. The CPU runs one cycle, performs (if enabled) an NMI (generated by hardware I assume), then runs the rest of the cycles per line, runs for the rest of the lines, then starts on the new frame.</div>
<br />This quick overview would be the behaviour of an emulator with a scanline based renderer. Is that what you meant ? On the other hand, a real NES behaves differently; every component runs in parallel, and something does happen during hblank (PPU fetching sprites, and the first 2 tiles of the upcoming scanline).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dXtr</b> [ Mon Mar 27, 2006 8:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />if this is your first emulation project I would recommend to start a little simpler with writing a Chip8 emulator  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Mon Mar 27, 2006 10:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">hap wrote:</div><div class="quotecontent">I don't think it's a good approach to use an existing 6502 emulator, as it's the core and will make it hard for you to understand how it works. If you won't write your own CPU emulator, at least do some reading on the subject, and you'll see your general lack of understanding isn't as bad as you thought it was.</div><br /><br />I'm well aware of how processors in general work (I made one in VDHL and Verilog) as well as assembly (80806 for a class), I just don't think I need to know the specifics of the 6502 right now. I do plan to write the core eventually.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Now all of these map to the CPU's memory, not the PPU's right? The PPU's memory is physical?</div><br />CHR is always mapped to the PPU memory area $0000-$1fff. It can also be mapped to the PPU nametable area, with specific mappers, you can worry about that later.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This quick overview would be the behaviour of an emulator with a scanline based renderer. Is that what you meant ? On the other hand, a real NES behaves differently; every component runs in parallel</div>
<br />
<br />Of course. I was actually playing with the idea of running separate components in threads just to see if it would work pretty well (I'm looking to emulate more complicated hardware later on, and being able to take advantage of multiple cores would be a big boost). Though I think I'll just get it working in a single thread for now. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />A few more questions:
<br />
<br />A) How does the NES hardware vsync itself with the TV? Or does it work the other way around? hsync?
<br />
<br />B) bah... I'll ask more later, I have to go.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teaguecl</b> [ Mon Mar 27, 2006 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FreakSW,
<br />Glad to see another NES enthusiast join the community.  You have a somewhat unique perspective on this since you are starting from scratch.  I was thinking maybe you could help us out by testing our wiki out <a href="http://nesdevwiki.ath.cx/index.php/Main_Page" class="postlink">http://nesdevwiki.ath.cx/index.php/Main_Page</a>
<br />
<br />This is intended to be the collection of all NES technical info we know about.  Theoretically you should be able to implement an emulator from scratch using info from the wiki.  Of course we're not there yet, but you are in a good position to let us know what is missing or confusing.  Regardless, it's a good reference for someone in your position, and it's difficult to find (not linked from main page).  Good luck!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Mon Mar 27, 2006 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">teaguecl wrote:</div><div class="quotecontent">FreakSW,<br />Glad to see another NES enthusiast join the community.  You have a somewhat unique perspective on this since you are starting from scratch.  I was thinking maybe you could help us out by testing our wiki out <a href="http://nesdevwiki.ath.cx/index.php/Main_Page" class="postlink">http://nesdevwiki.ath.cx/index.php/Main_Page</a></div>
<br />
<br />Oh believe me, I am. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />There's a lot of details, but nothing really explains how it works from the top down in a high level sense and that's one thing I'm trying to put together.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Mon Mar 27, 2006 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is "one-screen mirroring" just a typical game like Mario Brothers would be?
<br />
<br />A document describing MMC1 says that the chip has four registers:
<br />   Register 0 (reg0) - written to via $8000-$9FFF
<br />   Register 1 (reg1) - written to via $A000-$BFFF
<br />   Register 2 (reg2) - written to via $C000-$DFFF
<br />   Register 3 (reg3) - written to via $E000-$FFFF
<br />
<br />I don't quite follow how you can write to a register via an address range. Can someone explain that, or is the above simply misleading?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Mon Mar 27, 2006 2:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't need to create multithreaded software to simulate components running in parallel; a 'catch-up' implementation is sufficient, that has been described on these forums before; run the PPU to catch up with the CPU at each write or read of any PPU register, and at vblank.
<br />
<br />and A): The same way cable tv broadcasting does, by outputting high voltage 'blacker than black' synchronisation and screen transition pulses to let the television screen know when the beam must retrace.
<br />
<br />*edit* that question about MMC1 registers, I suggest you to do some reading on the subject of 'memory mapped I/O'..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Mon Mar 27, 2006 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">hap wrote:</div><div class="quotecontent">You don't need to create multithreaded software to simulate components running in parallel;</div><br /><br />No, but running them in parallel a) is interesting b) can run faster.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and A): The same way cable tv broadcasting does, by outputting high voltage 'blacker than black' synchronisation and screen transition pulses to let the television screen know when the beam must retrace.</div>
<br />
<br />So the signal source just says "VBlank now" and then goes from there. Ok.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Mar 27, 2006 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent">Is "one-screen mirroring" just a typical game like Mario Brothers would be?</div><br /><br />No.  One screen mirroring is typically for games which want to have a 4-way scrolling screen AND a stationary status bar of some sort.  Examples of this are Conflict, Battletoads, RC Pro Am, etc.<br /><br />Such games that use 1-screen in this manner can reserve the second nametable to hold nothing but the status bar... and have the scrolling map on its own nametable.  This way the map will never overlap the status bar in the nametable as the screen scrolls.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't quite follow how you can write to a register via an address range. Can someone explain that, or is the above simply misleading?</div>
<br />
<br />It's the same concept of mirroring.
<br />
<br />The same reason the CPU address $3726 is the same as $2006.  Within a certain range, only certain address bits are used.
<br />
<br />On MMC1, when you write in the $8000-FFFF range, only bits 13-15 are significant for determining which of the 4 MMC1 regs you're writing to (well really only 13 and 14, since bit 15 is always 1).
<br />
<br />ie: writing to $9213 is the same as writing to $8000 because when you mask out bits 13-15 (address &amp; 0xE000), you get the same value ($8000)
<br />
<br />If it helps to think of it this way... you could say that $8001-9FFF are all mirrors of $8000, etc.  (but only when writing)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Mon Mar 27, 2006 10:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent">Is "one-screen mirroring" just a typical game like Mario Brothers would be?</div><br /><br />No.  One screen mirroring is typically for games which want to have a 4-way scrolling screen AND a stationary status bar of some sort.  Examples of this are Conflict, Battletoads, RC Pro Am, etc.<br /><br />Such games that use 1-screen in this manner can reserve the second nametable to hold nothing but the status bar... and have the scrolling map on its own nametable.  This way the map will never overlap the status bar in the nametable as the screen scrolls.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't quite follow how you can write to a register via an address range. Can someone explain that, or is the above simply misleading?</div><br /><br />It's the same concept of mirroring.</div><br /><br />Oh so they literally mean that every one of those address writes to the same register. That's crazy.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">On MMC1, when you write in the $8000-FFFF range, only bits 13-15 are significant for determining which of the 4 MMC1 regs you're writing to (well really only 13 and 14, since bit 15 is always 1).<br /><br />ie: writing to $9213 is the same as writing to $8000 because when you mask out bits 13-15 (address &amp; 0xE000), you get the same value ($8000)<br /><br />If it helps to think of it this way... you could say that $8001-9FFF are all mirrors of $8000, etc.  (but only when writing)</div></div>
<br />
<br />See, now that's a beautiful explanation! You should describe everything in that way so I don't have to ask <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Be back later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FreakSoftware</b> [ Tue Mar 28, 2006 1:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Continuing on MMC1 registers... If I understand this correctly, writing to $8000-$FFFF writes to the actual registers in the MMC, but reading from those address reads from the select ROM banks defined by the bits in the registers?  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> 
<br />
<br />So for example if we have Register 0 as 00001100, then a) writing 11111111 to $A234 would actually write 11111111 to register 0, but b) reading from $A234 would read from address $2234 of the low 16 KB PRGROM bank? 
<br />
<br />What ranges in the CPU address range are mapped and which ones are real? Is only $0000 to $07FF real? $2000-$2007 are mapped to PPU registers, $4000 to $401F is kind of sketchy so I don't know about them, but then from $4020 to $10000 it's all mapped somehow onto the cartridge?
<br />
<br />Addresses lower than $2000 only use the least significant 11 bits, addresses from $2000 to $3FFF use the least significant 3 bits... 
<br />
<br />Yeah, I don't get the memory mapping. I'm doing my best sorry 
<br />
<br />A diagram would help. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 28, 2006 8:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FreakSoftware wrote:</div><div class="quotecontent">Continuing on MMC1 registers... If I understand this correctly, writing to $8000-$FFFF writes to the actual registers in the MMC, but reading from those address reads from the select ROM banks defined by the bits in the registers?  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> </div><br />Correct. Consider the CPU's read/write flag to be like another address bit in some cases.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So for example if we have Register 0 as 00001100, then a) writing 11111111 to $A234 would actually write 11111111 to register 0, but b) reading from $A234 would read from address $2234 of the low 16 KB PRGROM bank? </div><br />Almost. The MMC1 is actually loaded through a serial port, so writing 11111111 would reset the mapper. If you want to write 11111 to register 0, then write 00000001 00000001 00000001 00000001 00000001, or 00011111 00001111 00000111 00000011 00000001, etc. (Bits 6 to 1 don't matter.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What ranges in the CPU address range are mapped and which ones are real? Is only $0000 to $07FF real? $2000-$2007 are mapped to PPU registers, $4000 to $401F is kind of sketchy so I don't know about them, but then from $4020 to $10000 it's all mapped somehow onto the cartridge?</div>
<br />That's about right.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>