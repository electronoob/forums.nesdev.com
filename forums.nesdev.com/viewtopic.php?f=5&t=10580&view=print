<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Digital pitch scaling without aliasing</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Digital pitch scaling without aliasing</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10580">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10580</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Oct 13, 2013 2:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I ask it here because I'm pretty sure there is people highly skilled in signal processing.<br /><br />I'd like to be able to pitch scale an audio sample. In order to do this, some kind of interpolation has to be used. I already know how to use nearest neighboor interpolation, linear interpolation, cubic, and so on.<br /><br />The problem is that all those interpolation techniques are &quot;impure&quot; on the theoretical viewpoint, as they all allow aliasing.<br /><br />I think the procedure to do a &quot;theorically perfect&quot; pitch scaling by a factor k &gt; 0 would be the following<br />1) If up-scaling (k &gt; 1) :<br />    1.1 Low-pass filter the input singal with a relative cutoff of 1/k (where a cutoff of 1 would &quot;map&quot; into a cutoff of fs/2)<br />    1.2 Pick samples from the filtered input using nearest neightboor interpolation<br /><br />This <em>should </em>work because after step 1.1, the input signal doesn't contains any relative frequencies above 1/k, so it's safe to use nn interpolation without fearing any more aliasing.<br /><br />2) If down scaling (k &lt; 1) :<br />    2.1 Pick samples from the input using nearest neighboor interpolation<br />    2.2 Low-pass filter the output signal with a relative cutoff of k<br /><br />This <em>should</em> work because of course the original signal doesn't contain any relative frequencies greater than 1, so anything above this is aliasing, which is supressed on step 2.2<br /><br />Please tell me if this approach is correct or if I'm completely missing something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Sun Oct 13, 2013 3:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1) Scale the sample (nearest neighbor will do), remember the scale factor<br />2) Run decimation filter that kills anything above half the sample rate of original sample +/- scale factor.<br />3) Mix to your buffer, and repeat for another channel.<br /><br />It is computationally expensive, but it seems to be what my Yamaha SW1000XG is doing in hardware.<br />It also won't destory the crispness of the original sample which happens with most interpolation methods.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Oct 13, 2013 3:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry I don't understand much of what you're saying.<br />For information I just do this for an update of my BRR sample encoder, where the user is allowed to specify a resample ratio and resampling technique. Curently nearest neighboor, linear, cubic and cosine interpolation are implemented. I'd like to add bandlimited interpolation as it sound it's the &quot;correct&quot; interpolation theoretically.<br /><br />I'm not doing multichannel nor doing it in real time so it's no problem if it's computationally extensive (up to a certain point of course).<br /><br />The problem is that the resampling ratio is typically a floating point number, NOT a rational number. Even if the user don't enter a number, the resampling will be affected by looping if this is a looping sample, as it has to loop on a multiple of 16 samples.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Sun Oct 13, 2013 4:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You kill all the aliases past the nyquist rate with the decimation filter after scale operation. It does not matter if the scale factor is fractional, it better be for any fine adjustment. As you increase or lower the pitch, the nyquist rate will slide proportionally which is why you remember the scale factor - to know where to start decimation.<br /><br />The 16 sample loop issue of BRR will greatly limit the scale factors, there's not a whole lot to do about it. Non rational numbers can sound right but it is highly sample dependant, you may end up with just right amount of data and things won't break.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Oct 13, 2013 6:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, but my question is the following :<br />- I assume it's correct to use filtering first and resampling next when upscaling (reducing amount of samples / increasing pitch), and use resampling first then filtering when downscaling (increasing amount of samples / decreasing pitch). Is this correct ?<br /><br />- Since it appears the resampling algoritm doesn't matter, I might as well use the simpler, faster one : Nearest neighboor. Is this correct ?<br /><br />- Is there a way to short circuit this opperation (resampling then filter or filter then resample) in a single operation, to save memory usage ?<br /><br />I guess I could answer 3 by myself by thinking correctly and look at the algorithms, but if there is a well known algorithm that I somehow missed I'd like to hear about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Oct 13, 2013 6:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The ideal filter is a <a href="https://en.wikipedia.org/wiki/Sinc_filter" class="postlink">sinc filter</a>. It is the precise definition of a filter that removes everything above a particular frequency and nothing else. In practice, you can only estimate it with an <a href="https://en.wikipedia.org/wiki/Fir_filter" class="postlink">FIR filter</a> implementation.<br /><br />The IIR formula for the filter is on the wiki page I linked. This is pretty simple, your FIR window should stretch backward and forward in time, with &quot;0&quot; at the centre. To account for the cutoff at the edges (e.g. converting infinite response to finite response) you need to apply a <a href="https://en.wikipedia.org/wiki/Window_function" class="postlink">window function</a> to taper the edges off. A hanning window, for example, is one of the simplest effective ones, which is just a cosine. The wider your FIR window is, the closer your filter will be to the ideal.<br /><br />Using a FIR filter is pretty simple. Just gather enough samples to fill the window, multiply each by the corresponding entry in the FIR window, sum the result, and that's your new output sample.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Sun Oct 13, 2013 8:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Ok, but my question is the following :<br />- I assume it's correct to use filtering first and resampling next when upscaling (reducing amount of samples / increasing pitch), and use resampling first then filtering when downscaling (increasing amount of samples / decreasing pitch). Is this correct ?<br /><br />- Since it appears the resampling algoritm doesn't matter, I might as well use the simpler, faster one : Nearest neighboor. Is this correct ?</div><br />When you pre-filter and then resample you will add back all or some of the junk depending on what exactly you are using for the resample operation. Post filtering will remove all that excess regardless what you did before.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Oct 13, 2013 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When you pre-filter and then resample you will add back all or some of the junk depending on what exactly you are using for the resample operation. Post filtering will remove all that excess regardless what you did before.</div><br />I don't understand you. When shifting the pitch up, I reduce the number of samples, so I loose information. The information lost actually got aliased. So since it's &quot;merged&quot; with the actual meaningful data in the frequency domain, there's no way I can filter it out after resampling. So this has to be done before.<br /><br />Also, I know how to use FIR and IIR filter, I just don't know how to use them <em>in the scope of pitch scaling</em>. Sp far, all pitch scaling methods I did were with interpolation and didn't involve explicit filtering (although I think interpolation is some form of implicit filtering).<br /><br />Also as far I know IIR has many advantages over FIR :<br />- Less calculation to be done for a filter of similar quality -&gt; faster<br />- Simulates an analog filter<br />- No problem with relying on sample data before the start and after the end of the signal<br /><br />but that's another topic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 13, 2013 10:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Convolution with a linear-phase FIR filter (that is, anything symmetric in time) can be calculated fast because samples corresponding to the opposite sides of the impulse response can be added up before being multiplied by the filter coefficient. But then if you want fast convolution with a really sharp cutoff, you'll be doing FFT-multiply-IFFT.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Oct 13, 2013 12:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">When shifting the pitch up, I reduce the number of samples, so I loose information. The information lost actually got aliased. So since it's &quot;merged&quot; with the actual meaningful data in the frequency domain, there's no way I can filter it out after resampling.<br /></div>In the situation you're worrying about, you are shifting original frequency content up above the Nyquist frequency of your output stream. You cannot keep that information because there is no way to encode it. Hopefully, you're feeding into an analog system where those now-lost frequencies are imperceptible anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Oct 13, 2013 12:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Also, I know how to use FIR and IIR filter, I just don't know how to use them <em>in the scope of pitch scaling</em>. Sp far, all pitch scaling methods I did were with interpolation and didn't involve explicit filtering (although I think interpolation is some form of implicit filtering).<br /><br />Also as far I know IIR has many advantages over FIR :<br />- Less calculation to be done for a filter of similar quality -&gt; faster<br />- Simulates an analog filter<br />- No problem with relying on sample data before the start and after the end of the signal</div><br /><br />IIR has some serious limitations. It is usually the practical way to implement analog filters. Sinc is not an analog filter, though, and anything you do to reduce its complexity comes at an accuracy cost. It's very hard to build an analog filter that has a sharp cutoff and doesn't introduce unpleasant phase delay; this is actually one of the reasons &gt;44kHz audio has recently become a thing, since the filters required to roll off aliasing are a lot easier to build when you can have a soft cutoff that falls gradually from 22kHz.<br /><br />To implement the ideal sync filter as IIR, it is the same, computationally, as if your FIR was as wide as the entire waveform stream, i.e. every sample in the output is now a convolution of the sinc function with every sample in the input (N^2 complexity).<br /><br />Tepples suggested FFT, and it is efficient for large convolutions, but its accuracy (i.e. ability to suppress aliasing) also severely limited by the necessity of windowing. If you make an FFT filter that zeroes all frequencies above the intended nyquist, it is identical to the sinc filter. In practice, though, the aliasing that leaks through because of windowing makes it slightly less effective for resampling than the straight FIR approach, IMO (it's a tradeoff though, depending how wider your FIR is). You could probably do the IIR sinc as a giant FFT that encompasses your entire waveform stream (padded to a power of two, and maybe doubled again to avoid reflections from the other side), and that way you could avoid the windowing issue.<br /><br />Anyhow, here's how to use the sinc filter FIR to resample:<br /><br />Downsampling:<br /><br />At the input samplerate, build a windowed sinc function FIR that looks backward X samples and ahead X samples. This sinc should have a cutoff below the nyquist frequency of the output samplerate. Then, for each sample in the output, multiply sample-by-sample the input with your FIR window and take their sum.<br /><br />Upsampling:<br /><br />Resample to the output samplerate using nearest neighbour filtering, or whatever is fast (it doesn't matter, you are about to remove the extra frequencies created). Create a windowed sinc function FIR that has a cutoff below the nyquist frequency of the input samplerate. Apply the FIR to the output.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Oct 13, 2013 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can't use nearest-neighbor for selecting samples, as that will introduce artifacts. Just consider the case of a sine wave well below the output Nyquist, and changing pitch very slightly. You'll be taking every input sample and then occasionally skip/double one, clearly not correct. You must use sinc interpolation. Each input sample is multiplied by the sinc function and it's all added together, in continuous time. Then you pick the output samples at the new time positions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Oct 13, 2013 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">You can't use nearest-neighbor for selecting samples, as that will introduce artifacts.</div><br /><br />Well, if you have an ideal sinc, all of the artifacts should be removed, but you're right: the sinc filter implementation is only an approximation of an ideal, so the sampling method chosen will likely leak through a bit. Using simple interpolation for the input sample selection might be a good idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Oct 13, 2013 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can't use nearest-neighbor for selecting samples, as that will introduce artifacts. Just consider the case of a sine wave well below the output Nyquist, and changing pitch very slightly. You'll be taking every input sample and then occasionally skip/double one, clearly not correct. You must use sinc interpolation. Each input sample is multiplied by the sinc function and it's all added together, in continuous time. Then you pick the output samples at the new time positions.<br /></div><br />I tried writing code from this description but I failed. I see that the filtering is done from the input buffer, but how do you pick output points from the filtered input ? Is what you said specific to upscaling, or is it applicable in both cases.<br />Anyways, I tried to come up with some (probably wrong/broken) pseudocode to help you guys know what I'm trying to do.<br /><br />The input is the array called samples[] and the output is called out[], resample is a floating point representation of the resample ratio (&gt;1 = upsample, loose quality, higher pitch, &lt;1 = downsample, lower pitch).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;coef&#91;0&#93; = 1.0;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Compute FIR coefficients (only do it in a single direction since it's symmetrical anyway)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for(int j=1; j&lt;FIR_QUALITY; ++j)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;coef&#91;i&#93; = sin(resample*pi*j) / (resample*pi*i);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;coef&#91;i&#93; *= i/FIR_QUALITY;&nbsp; &nbsp;&nbsp; &nbsp;// Factulative filter windowing (improves filtering quality)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for(int i=0; i&lt;out.length; ++i)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//Linear (?!?) interpolation at the output<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;accumulator = samples&#91;floor(i*resample)&#93; * fract(resample) + samples&#91;ceil(i*resample)&#93; * fract(1.0-resample);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;for(int j=0; j&lt;FIR_QUALITY; ++j)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(i-j &gt;= 0)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;accumulator += samples&#91;i-j&#93;*coef&#91;j&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if(i+j &lt; out.length)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;accumulator += samples&#91;i+j&#93;*coef&#91;j&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;out&#91;i&#93; = accumulator;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sun Oct 13, 2013 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Digital pitch scaling without aliasing</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's very hard to make clear code where all the steps are folded into one.<br /><br />The unambiguous way to do resampling is:<br /><br />* Upsample. Insert 0s between samples. This will produce overtones; we don't care because of the next step. Using any interpolator more sophisticated than sample-and-hold will just be wasted calculation.<br />* Lowpass filter. Probably a sinc FIR filter. This filter should have its stop band below the lesser of the two Nyquist frequencies of input and output.<br />* Downsample. Throw away every Nth sample.<br /><br />Everything after that is optimization. Folding the last two steps together is the most obvious one, because you can skip some stages of the FIR.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>