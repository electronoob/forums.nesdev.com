<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Best way to organize labels, references, data groups, etc.?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Best way to organize labels, references, data groups, etc.?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6447">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6447</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beneficii</b> [ Wed Jun 02, 2010 12:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Best way to organize labels, references, data groups, etc.?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Basically, this is an idea I have been floating around in my head for a while.  A user through a GUI will be able to organize all the labels, equates, references, strings, data groups, data types, etc., used in a project into <em>informational lists</em> and when the time comes to disassemble, will be able to use the CDL file obtained from FCEUXD to do a disassembly, while entering all the labels and equates at proper places, entering the proper references, grouping together data in a manner defined by the user, etc.
<br />
<br />It will work in a linear fashion, where the program will start at the beginning of the PRG, and will move along by PRG address, with the sorted by PRG address of insertion of lists of references, labels, etc., and doing the text file output line by line, moving from address to address.
<br />
<br />I implemented this in a couple of C programs using a data storage type of INF0 called INF0EDIT (which edits the informational files to be used in the disassembly) and CDLDIS2 (named after CDLDIS from <!-- m --><a class="postlink" href="http://sm2.beneficii.net/">http://sm2.beneficii.net/</a><!-- m --> ).  Unfortunately, I had to use different types with each type of data and there was no good way of organizing it, so I used a whole bunch of macros to come up with stock functions for each type and I had to treat each kind separately.   I came up with a rudimentary way of of sorting, for example, 2 labels being put at the same address, but I'm not satisfied with that, especially with making the ordering at the same address user friendly in INF0EDIT.
<br />
<br />Also, INF0EDIT was used with the command-line.  You could construct an entire informational file with it, but it was better to create a tab-delimited text file with something like Excel to input it and create the informational file which would then be used with the disassembly.
<br />
<br />I'm considering starting from scratch in C++, using templates and function overloading to dealing with the basic types; using inheritence to create a base type with features every type shares and derive the types from it; and using the STL to organize the informational lists.
<br />
<br />What are some tips for implementing this?  Also, what kind of STL list should I use to organize the informational lists?  I'm leaning toward map, but I'm wondering what others think.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Thu Jun 03, 2010 6:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What exactly are you trying to do? There were so many implementation details in your post I didn't quite understand what your goals are.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Jun 03, 2010 11:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">What exactly are you trying to do? There were so many implementation details in your post I didn't quite understand what your goals are.</div>
<br />
<br />Seconded.  The post reeks of merging two development models/methods (low-level assembly development and high-level object-oriented/GUI-based development) together.  That never works.  Yes, I said never, and I do mean never.  :-)
<br />
<br />I guess I'm old-fashioned.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Jun 04, 2010 2:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For some reason, this reminds me of that Z80 Disassembler I made a while ago.  Every time it needed a 16-bit number, it displayed it as a number relative to a label.  It followed the code, taking the jumps, calls, and branches to map out the code, then treated anything else as data.  You could also add addresses to look for code to get stuff it missed.
<br />But the Z80 isn't a 6502.  There is no "ld hl,xxxx" instruction on the 6502, so you can't easily discover 16-bit labels other than jumps and calls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beneficii</b> [ Fri Jun 04, 2010 11:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">What exactly are you trying to do? There were so many implementation details in your post I didn't quite understand what your goals are.</div><br /><br />Seconded.  The post reeks of merging two development models/methods (low-level assembly development and high-level object-oriented/GUI-based development) together.  That never works.  Yes, I said never, and I do mean never.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /><br /><br />I guess I'm old-fashioned.</div>
<br />
<br />It would disassemble it to 6502.  Basically, it would disassemble using information from the code/data logger as used in some variants of FCEU and then would put labels, put equates, put references*, organize data into groups/strings as specified by the user+, and insert comments where specified.
<br />
<br />I plan to use C++ for this, as there would be a need for informational maps that keep track of everything and would be accessed by the machine code file address.  The disassembler would, each time it moves to the next address, check for the next item in each of the lists, and would implement them in a specified order (if there is more than 1 for a specific file address).
<br />
<br />I plan to also create a GUI that would be a WYSIWYG editor, and would let you go to a line for example and select "Insert label" or "Put as reference" or, perhaps, select several lines of data and select "Organize into data group" (and you could still put references there).  The GUI would create and organize the informational maps and let you load/save them.
<br />
<br />It does seem ambitious, but I think that it can be implemented, and I did implement it, without the GUI, already in a project called INF0EDIT/CDLDIS2.  But the project is written in GNU C and I had to do a lot of tricks with macros to deal with the different types I used.  This is why I want to move onto C++ and use STL maps, classes, etc., to implement this.  I am trying to work on how I will be implementing it now, and was wondering if anyone had any advice.
<br />
<br />*It would also check that the reference/string actually matches what is in the binary.  To do this for references, it would organize all labels and equates into a Names map specifying the value and location of the labels/equates; this will be accessible to a parser that will check the references.  So, you could make clearer, for example, that
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $55</div><br /><br />is actually an implementation of<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda dungeonlevel &gt;&gt; 1</div><br /><br />Basically, the parser would go through, use the reference to the label/equate dungeonlevel, and then check to make sure the whole statement comes out to the value of $55 in the implemented code.  If not, it would return an error.  Basically, this allows you to put in the labels, equates, and references at the time the disassembly is made, and to check to make sure your use actually matches what is implemented in the binary.<br /><br />By keeping track of location, I also plan to add support for the insertion of +/- labels.<br /><br />+For example, instead of <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.db $14<br />.db $55<br />.db $ae<br />.db $55<br /></div><br />It would let you specified that it needs to be organized like either<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.db $14, $55, $ae, $55<br /></div><br /><br />or like <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.dw $5514, $55ae<br /></div>
<br />
<br />You would be able to specify base (bin, dec, hex, etc.), the length of the data group, and the number of entries per line.  It would still check for the use of references or strings within the group, and would implement them when it comes across their file address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jun 04, 2010 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So sort of like <a href="http://www.cc65.org/doc/da65.html" class="postlink">da65</a>?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>beneficii</b> [ Fri Jun 04, 2010 11:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So sort of like <a href="http://www.cc65.org/doc/da65.html" class="postlink">da65</a>?</div>
<br />
<br />*Looks at the file.*
<br />
<br />Right, something like that, but which would produce output assembleable with something closer to ASM6.
<br />
<br />*Downloads DA65 to study their implementation.*

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>