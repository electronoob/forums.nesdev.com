<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Who actually actively devlops free software</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Who actually actively devlops free software</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12254">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12254</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jan 16, 2015 9:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />He's also convinced that gameplay ideas should be copyrighted (this includes derivatives, so it'd go further than &quot;clones&quot;). If he got his way it would be possible to literally own genres.<br /><br />Although it's true that there are good reasons why free software fails spectacularly in the commercial territory (terminology aside, that could be changed quickly if people cared). Consider that the kind of people who would be attracted to not locking up the software are also the same kind of people who would be in favor of sharing, and economy is all about restricting sharing (you won't get what you want unless you get rid of something else). It's not hard to see why most programmers involved in doing that would not want to do it commercially.<br /><br />Also there's the fact that the vast majority of programmers make money by doing code for others (i.e. for hire) or by providing support for existing software, not by selling products, so in practice it's only a few that truly care since the majority of the industry isn't affected. (the one place where it's an issue is with games, since good luck following those models with something not made for a business!)<br /><br />PS: that said, this reminds me, I wonder how many people know that what would become the GPL was first used for commercial purposes (yeah, Stallman used to sell Emacs at first).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 16, 2015 9:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can still sell emacs if you want. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> The GPL never forbid that, you just have to provide the source for free. That's often a dealbreaker on selling it, but not always!<br /><br />Also worth noting is that you don't have to choose a license like the GPL. You can share source code without giving other rights away.<br /><br />Some open source software is also for sale. <a href="http://www.aseprite.org/" class="postlink">Aseprite</a> is one I use regularly, and was happy to pay for. Whether or not this is viable depends on the situation, but it's not terribly uncommon. A lot of people are willing to pay for quality software, even if they could build it from source themselves.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jan 16, 2015 9:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the point I was making is that the culture that formed around it is one that isn't very fond on selling software in the first place (even when the GPL itself was designed explicitly to allow it, and that's one of the most restrictive licenses).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jan 16, 2015 10:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">It's also worth noting that if I recall correctly GCC was the first program ever made in the GNU project (Emacs doesn't count since it was started before GNU was a thing). We're talking about <em>three decades</em>.</div><br />I was around during this era, so I can expand a bit on the progression of gcc:<br /><br />Originally it (I'm talking gcc 1.x) worked, but it had bugs.  So Stallman and whoever else (I've forgotten names, sadly) started working on gcc 2.x, which is what most early-gcc-users remember as being used predominantly by open-source operating systems everywhere.  gcc 2.x (I can't remember the minor version numbers, but the minor versions at the time were more like major versions in the sense that going from, say, 2.1 to 2.2 could introduce massive problems or massive benefits) was bug-ridden (especially optimiser functionality), but worse, patches to gcc were often (read: regularly) rejected.  It was super common to see sad hacks in the Linux kernel, for example, that worked around gcc bugs (until then I often thought people were just bitching for no reason).<br /><br />This is primarily what prompted the EGCS project (done by completely different volunteers unrelated to GNU).  gcc with EGCS patches were phenomenally fantastic, with lots of bugs worked out and performance benefits that were incredible, plus you had lots of other architectures available.  So for a long while you would find Linux (and BSD, and SunOS, and HP/UX, and...) compilers that were gcc+egcs.  This went on for a while (3 or 4 years I think?), and eventually Stallman et al pulled their heads out of their asses and handed gcc over to the EGCS folks -- which is where it's remained since.  I remember rejoicing when that happened, because it meant actual progress and not ridiculous arguing that harmed only users.<br /><br />And nowadays we have the same sort of thing going on with gcc vs. LLVM/Clang.  Sorry to say I'm part of the gcc crowd, simply because for the software I use and write, and the OSes I use (FreeBSD, Linux), building gcc (from source) takes a substantially shorter amount of time compared to LLVM/Clang, and the <a href="https://lists.freebsd.org/pipermail/freebsd-current/2012-September/036380.html" class="postlink">performance benefits LLVM offers are not very impressive</a> (anyone interested in compilers and benchmarks will really enjoy this link, it's highly informative with actual numbers).  We're talking gcc being literally 3-4x faster to build.<br /><br />Footnote: Why did I just write all this?  Sheesh... <a href="http://en.wikipedia.org/wiki/GNU_Compiler_Collection#History" class="postlink">Wikipedia seems to have it covered</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Fri Jan 16, 2015 10:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Hobby projects are easier to start than commercial projects, and more likely to fail. With no money to sustain it, nobody working full time, and often only amateur labour, there's a lot bigger chance that it will be abandoned. The ones that do well often become popular and well maintained, otherwise it may be doomed to become another software corpse buried in the graveyard of github.<br /><br />When a commercial project fails you usually don't even hear about it. It has to be a public success first for you to know about it.</div>Yes, this is why there seems to be more bad quality open source programs than commercial programs. The other reason for this is that since people can look at the source codes, if it looks like written badly then people can say so, but if no source codes available it might be badly even if you cannot easily tell. The difference is that for open source, even if it is released a little bit and then abandoned, occasionally someone else will work on it more and improve it a lot (this doesn't happen very often, but it nevertheless happens somewhat more often than it does with proprietary software). But actually there is bad quality both free and proprietary, and good quality of both, and the quality is independent of this.<br /><br />My own opinion is that free-software/open-source is a superior way. Despite this, a lot of people make bad arguments in both directions, both for and against it. The software may be just as bad of course, but there are still advantages:<ul><li>You can study how it works, which might help with better understanding of the use of the software, or to learn how the algorithms work if you need similar algorithms in your own software. (Depending on the software this may be difficult, but it is even more difficult with proprietary software.)</li><li>You can modify it, if it doesn't do something you want, and/or to share your modifications with others if it would help them too. This also includes the possibility to port the program to other computers and operating systems.</li><li>You do not need to worry about EULA in order to execute the program. You may be able to use the program for purposes other than only what it is designed for (and even if you can't, well, at least it is still allowed to do so).</li><li>If the software development is abandoned later on, improvements can still be made by other people.</li><li>If the main programmer of the software allows it, patches can be submitted to them, in case there is something that might not be considered as a high priority to him but other people are willing to fix the program. (Of course he may not want to allow it, but it can be free-software/open-source despite that.)</li><li>In case they are just doing a really bad job, or if someone wants a lot of different features than the mainstream, and someone else believes they can greatly improve it in such ways, the software can be forked. There is even the potential some changes can later be merged (in either direction) if wanted.</li></ul><br />However, a lot of things apply to any program and should not be precluded just because it is open-source. For example, whether the software is proprietary or free, you can still do:<ul><li>You can still optionally copyright it, and you can still apply trademarks. (If you are writing free software for commercial purposes, I highly recommend enforcing your trademarks on it.)</li><li>You can still sell the program and/or support contracts and/or physical media and/or documentation.</li><li>It is still possible to form a company, or do it without.</li><li>The software could still be digitally signed if you find this useful.</li><li>The software can be maintained in the same ways too if it is wanted, where the original author would still maintain it and accept bug reports and so on; or they might not want to do this, regardless if source-codes are available or not.</li></ul><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Also worth noting is that you don't have to choose a license like the GPL. You can share source code without giving other rights away.</div>Well, the to be valid free-software/open-source, requires certain rights, although the copyright holder still has the same rights too. I often release source-codes in the public domain. This allows anyone to do whatever and you do not need to worry about how the license is working in such a case.<br /><br />However, for commercial free software I recommend GPL3 (or maybe AGPL3 if applicable), with enforced trademarks. This builds your business better as it requires any competitors who use the same software to also release their changes, and you can then improve your product in the same way. If a different license such as BSD or MIT license is used, then you have no such guarantee and you could lose your business. Making it free software helps that other people may use and perhaps even improve it even if they cannot afford it otherwise; it may later result in more sales due to people who do pay, especially if you sell computer hardware too it can help. Trademarks help too, since it protects your business from counterfeits and from confusion with unofficial versions and various other stuff. (However I haven't tested this (yet) so I cannot say for sure. This may also be an unusual opinion, but it is something to consider.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Some open source software is also for sale. Aseprite is one I use regularly, and was happy to pay for. Whether or not this is viable depends on the situation, but it's not terribly uncommon. A lot of people are willing to pay for quality software, even if they could build it from source themselves.</div>Yes, that is certainly possible and is allowed. If you are willing to pay it can be good you can make such a payment. If you don't want to you can still build from source-codes. If you can neither afford it nor compile it yourself, you can copy it from someone else and then later on you can pay if you believe it is worth it. You could even donate extra if you think it is a good idea!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jan 17, 2015 4:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First, I can't believe this thread has mostly generated into a Free Software vs Non Free Software debate. I have absolutely no interest in this and this is no the reason for me opening this thread, if you guys are interested in this please do it in another thread. Personally I am already convinced about free software so there is no need for debate. <strong>I just want to understand by what kind of miracle this actually worked and still works for such large gigantic programs, because I honestly still don't understand.</strong><br /><br />Debating the pros and cons of free software will not help me to undersand who is behind it and why it works.<br /><br />@Tepples, yes I belive a callback graph tracking like those you describes absolutely make sense to make it easier for newcommers an overall organization of the programs. Alas automated tools can't do everything, an animated presentation presenting the architecture of a software would also be a need for a newcomer.<br /><br />@zzo38 : Who said I didn't like GCC ? I like it a lot, and I use it almost everyday. As I said it's by far the &quot;free software&quot; I use the most, and Linux is on #2 spot (I use it mostly at work). Both of them I would be completely unable to contribute in any way, because they are gigantic projects. Therefore my original question.<br /><br />@Koitsu : I understand you philosophy of my bugs == my responsability to fix it, but what if a programmer dies, or simply leaves because he has no longer time or interest in maintaining his program ? The very point of free software is that, theoretically, anyone can take his sport. In practice however...<br />Also your post you linked to reflect <em>exactly </em>my thoughts. It'd be interesting to know the percentage of GCC users could support the program in any meaningful way. Same for linux, open office, etc... The free software idealists think that most of them can, the reality is maybe one in ten thousands has any chance ? I don't know.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Footnote: Why did I just write all this? Sheesh... Wikipedia seems to have it covered.</div><br />Because you are more trustworthy than Wikipedia, and that we are tired of it, and it's end-of-year-ask-for-donations ? (ok it's finished now but it still annoyed me last month)<br /><br />@Rainwarrior : If other people can't compile the source there is no much point in giving it out, thus it would not be free software.<br /><br />@Koitsu (again) : This is a bit out-topic, but the compile time for gcc varies tremendously depending on the machine you compile it. Some time ago I compiled on a laptop and it took like 2-3 hours. But on a desktop it took me like only 12 minutes to build it. Probably a little RAM size and cache size difference can make a tremendous difference in the end. In the end I wouldn't compare compilers on the time it takes to compile them, because you only do this once every update at worst. But rather on the quality of the back-end optimisations, and of error messages, which matters a lot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Jan 17, 2015 9:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My donation to Wikipedia was deleted due to lack of notability.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Jan 17, 2015 9:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a couple of progressions I've personally been through as I begin to contribute to an open source project.<br /><br />For example, when I use a program a lot, eventually I will find bugs. If I care about the program, I'll send a bug report (1). If it really bothers me, I might try to fix it by looking at the source. Sometimes I don't manage to see the problem in the source, but I still get a better idea of what's wrong,which makes a better bug report (2). When I'm lucky though, I actually find the bug and fix it myself, and am able to submit a patch with the bug report (3).<br /><br />1. Bug reports.<br />2. Bug reports with a more educated description of the problem because you could look at the source.<br />3. Bug reports with a patch that will fix it.<br /><br />There is a similar progression I've been through with feature requests. At first I start thinking of little things that could improve the program (1). Later I learn to build the program and add them myself, posting the patch with the request (2). Once I get familiar enough, if I really like the program I may eventually want to implement something large for it, at which point I might ask for an account on its source control to become a regular contributor to the project (3).<br /><br />1. Feature request.<br />2. Feature request with a patch that will implement it.<br />3. Large feature request with offer to implement, join the project and get source control account.<br /><br />Other times, I have a weird idea that wouldn't make a good feature, but would be an interesting experiment for me to try locally, so I do (1). That can be a stepping stone to more involvement with that project. You could also start a new project yourself (2), and you will start to experience all these other forms of contribution from others. Finally, the most advanced thing I've done with an open source project is to pick up and take on old one that was abandoned (3).<br /><br />1. Make experimental modifications.<br />2. Write your own open source project from scratch.<br />3. Take over an abandoned project.<br /><br /><br />So, what I'm saying is that there's very easy ways to contribute to open source projects. At the lowest level, anybody can submit a bug report, they don't have to be a programmer, they just have to care enough to want the software to improve. Programmers who are interested might take a peek at what caused the bug. You don't have to have advanced skill levels to do this. Just take it as far as you can, reasonably, and then hand it off to the project maintainers. If you keep doing it, eventually you'll learn enough to contribute directly.<br /><br />It's kind of a pyramid. I submit bug reports to a lot of projects (open source, or not). Some of them I keep the source around and try to diagnose the problem. A small number of them I have submitted patches to. One or two projects I've taken on enough responsibility with that people give me bug reports and questions that they should really be sending to the project owner.<br /><br /><br />If your dream is to contribute to GCC, well, it's a bit hard to find a bug in GCC, but that's mostly because it's one of the most well tested pieces of software. I've submitted several bug reports about MSVC, and some smaller compilers, but never GCC. (I did find one bug in GCC back in 1998 but I was too green to understand that I was looking at a compiler error.) Feature requests are similarly difficult, since it's function is so rigorously specified. If I really wanted to get into GCC, I'd probably start with a local experiment, try to add a weirdo language feature or something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jan 17, 2015 3:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I did not mean to suggest that you (or anyone in particular) don't like GCC; I only mention the possibility. (GCC is probably also the free software I use the most, too.)<br /><br />Free software can become good quality if many people use it and many company are interested in it, and a lot of such people can fix the software; in this case it helps a lot because it is free software. The other way is if the person or team who writes the software is willing and able to make a good quality, just as much as if it wasn't free software; being free software does not change this. Even if you can't contribute, other people can. I do not know such people and groups personally, but that doesn't mean it can't exist. Also some software is just much easier to fix than others. I have never worked on modifying such large programs myself, although I have looked at some of the source codes of Linux. I work mainly on smaller programs, but I suppose people who have more time and resources to work on large programs are going to do so. I don't know if you can get a proper answer if nobody on here knows working on such large program, but maybe someone does or else know who to ask possibly, but I myself am don't know.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Because you are more trustworthy than Wikipedia, and that we are tired of it, and it's end-of-year-ask-for-donations ? (ok it's finished now but it still annoyed me last month)</div>You can turn them off if you want to (at least with user-defined CSS, if there aren't any preferences to turn them off)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Sat Jan 17, 2015 5:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"> Wikipedia, [...] and it's end-of-year-ask-for-donations ? (ok it's finished now but it still annoyed me last month)</div> And that &quot;this week&quot; turned out to be &quot;this month&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. Feature request.<br />2. Feature request with a patch that will implement it.</div>These various lists are accurate as to ways to get into this sort of thing. For instance, the stance of the Nethack devs about getting empty bottles from drinking potions is &quot;Provide a working patch and we'll consider it&quot;; and moderate chunks of the SLASH'EM mod were backported into &quot;vanilla&quot; nethack.<br /><br />I've modded Dungeon Crawl, myself.<br /><br />I was considering making a CHR-export plugin for GIMP but the file I/O plugin community appears to be rather severely sink-or-swim.<br /><br />ROMhacking, at some levels, is basically open-source work without creator's consent.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jan 17, 2015 6:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Who actually actively devlops free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Myask wrote:</div><div class="quotecontent">I was considering making a CHR-export plugin for GIMP but the file I/O plugin community appears to be rather severely sink-or-swim.</div><br />Which is why I ended up writing a CHR exporter that runs out of process as a command line utility that takes the filename of a PNG file.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>