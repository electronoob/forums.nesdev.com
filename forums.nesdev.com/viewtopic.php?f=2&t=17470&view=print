<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cc65: Unnecessary code when accessing pointers</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cc65: Unnecessary code when accessing pointers</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17470">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17470</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Jun 24, 2018 4:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Inspired by Banshaku's recent threads, I did some analyzing and I found out that the cc65 compiler is not very efficient when it comes to pointer access, even though this has nothing to do with the architecture and could easily be avoided, if I'm not mistaken.<br /><br />When I have this simple code snippet:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">extern unsigned char *pNumber;<br />#pragma zpsym(&quot;pNumber&quot;)<br /><br />void __fastcall__ Test(void)<br />{<br />&nbsp; &nbsp; *pNumber = 5;<br />}</div><br />then this is what the compiler turns it into:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_pNumber+1<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_pNumber<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y<br />&nbsp; &nbsp;rts<br /></div><br />My own pointer is clearly declared as being located in the zeropage:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#pragma zpsym(&quot;pNumber&quot;)<br />--&gt; .importzp&nbsp; &nbsp;_pNumber</div><br />And yet, the compiler feels the need to always copy the pointer values to its own pointer instead of simply doing this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(_pNumber),y<br />&nbsp; &nbsp;rts<br /></div><br />Why is this the case at all? Is there any technical reason for it or is it simply an oversight by the programmer who created the parser?<br /><br />Is there any way to get the compiler to change this behavior without adding inline Assembly manually?<br /><br />I compiled with<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cc65 -O Test.c</tt><br />and the situation is the same in the old cc65 from cc65.org as well as the newer version from github.<br /><br /><br />By the way, if you do more than one variable access, like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; *pNumber = 5;<br />&nbsp; &nbsp; *pNumber = 6;</div><br />Guess what:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_pNumber+1<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_pNumber<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$05<br />&nbsp; &nbsp;ldy&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_pNumber+1<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1+1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_pNumber<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;ptr1<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;#$06<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;(ptr1),y</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Jun 24, 2018 4:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just avoid using pointers like this.<br /><br />I only used pointers to access individual enemies, and I sent it as a parameter to a function that I wrote a function in assembly to process drawing that enemy's sprite.<br /><br />I didn't write it until I needed to save cycles.<br /><br />So, anything that takes too many cycles, I rewrote in assembly, as a fastcall function.<br /><br />So basically, it translates to...<br /><br />function(&amp;enemy1);<br /><br />lda lowbyte.enemy1<br />ldx highbyte.enemy1<br />jsr function

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Jun 24, 2018 5:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I just avoid using pointers like this.</div><br />Well, sometimes you can't avoid using pointers.<br /><br />(Of course, my current example of accessing a single number through a pointer would be nonsense in a real situation, but it was just a simple minimalistic example to demonstrate the concept.)<br /><br />For example, my new game will have a whole bunch of enemies, so you cannot program each enemy behavior individually.<br />Instead, I created a script-based function. It reads the first item from an array and depending on the contents, it reads the next values in a certain way.<br /><br />For example:<br />If the current array value is &quot;Move forward&quot;, then read the next value as &quot;direction&quot; and the value after that as &quot;number of tiles&quot;.<br />If, instead, the current value is &quot;Wait&quot;, read the next value as the number of frames to wait.<br /><br />Etc.<br /><br />Same with the level buildup function: Each screen is stored in an array of arbitrary size because each screen can have an arbitrary number of background objects, NPCs, enemies etc. So, I need a pointer to iterate through it until the pointer reads the screen end byte.<br /><br /><br />How would you do these things without using pointers?<br /><br /><br /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">So, anything that takes too many cycles, I rewrote in assembly, as a fastcall function.</div><br />Well, yeah, writing directly in Assembly is <em>always</em> the best solution, but not wanting to do this is also the thing that's pretty much the reason why people use C to begin with.<br /><br />And in the current situation, we're not even discussing anything that a C compiler cannot optimize because of the architecture.<br />In the moment, it's simply the question: Why does the compiler always copy the pointer to its own pointer? Is there any reason for it? And can it be avoided (either by command line options or by a certain code style that we simply remember to always apply to C programs for the NES)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Jun 24, 2018 5:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I used to write inline assembly just like <s>your</s> na_th_an's example*, but I find it &quot;ugly&quot; to see C code with lots of assembly.<br /><br />You could write a macro that inserts inline assembly to make it &quot;pretty&quot; and more C like.<br /><br />edit<br />*example<br /><!-- m --><a class="postlink" href="https://github.com/mojontwins/MK1_NES/blob/master/src/dev/engine/enengine.h">https://github.com/mojontwins/MK1_NES/b ... enengine.h</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Jun 24, 2018 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Why is this the case at all? Is there any technical reason for it or is it simply an oversight by the programmer who created the parser?</div><br />I wouldn't expect any compiler to generate optimal code in all scenarios. If I was writing a code generator I, too, would definitely start by handling the general case (in this case, a pointer from anywhere in the memory space), and only then start thinking about case-specific optimizations like this.<br /><br />(By the way, no compiler would be doing optimizations like this in the parsing phase. Parsing simply checks the input against the grammar of the language.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Sun Jun 24, 2018 10:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The compiler lacks optimizations for this case. Nothing you can do, except write a patch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Sun Jun 24, 2018 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I avoid using pointers in cc65 as well, as I know they tend to behave worse than arrays. Sometimes you have to, as pointed. But it's fun how you better use array access when possible when targetting the 6502 via cc65, but you better use pointer based access when possible when targetting the Z80 via z88dk or SDCC. Sometimes porting is a nightmare because of this <img src="./images/smilies/icon_biggrin.gif" alt=":-D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Jun 24, 2018 6:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@DRW<br /><br />I checked the code regarding the array of structure and saving the reference was not so bad BUT accessing the data that is referenced by the pointer (2 arrays) causes the compiler to move the data inside PTR1 even though it had the information just before in the last statement.<br /><br />I guess even though it looked &quot;nicer&quot; code wise at first, I will avoid that pattern after all. I do not really need the array of structures, it just looked better to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Jun 25, 2018 12:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, looks like every pointer access of any kind does that.<br /><br />Unfortunately, I still need pointers if a character has a certain movement pattern that is stored in an array.<br /><br />I wrote some macros for this kind of stuff now, like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define AsmSetVariableFromZpArrayPointer(variable, zpArrayPointer, index)\<br />{\<br />&nbsp; &nbsp;__asm__(&quot;LDY %v&quot;, index);\<br />&nbsp; &nbsp;__asm__(&quot;LDA (%v), Y&quot;, zpArrayPointer);\<br />&nbsp; &nbsp;__asm__(&quot;STA %v&quot;, variable);\<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>gauauu</b> [ Tue Jun 26, 2018 9:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just to chime in because I had this same issue with my project: yes, cc65 generates terrible code for pointers. Anything using pointers in a loop will probably need to be written in assembly.<br /><br />In Robo Ninja Climb, I had a simple loop with some pointers that literally used 80% of a frame with cc65's version. Rewriting in assembly with a tiny bit of optimization dropped it to less than 5% of my frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Jun 27, 2018 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's another strange cc65 behavior:<br /><br />This:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">dest = (src + 3) &gt;&gt; 2;</div><br />gets turned into this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx&nbsp; &nbsp; &nbsp;#$00<br />&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_src<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;incax3<br />&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;shrax2<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_dest</div><br />Why doesn't the compiler simply use LSR?<br />It creates perfectly fine code when you turn the shift operator around:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_src<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc&nbsp; &nbsp; &nbsp;#$03<br />&nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;asl&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_dest</div><br />And if you use the right shift operator, but remove the + 3, then it's fine as well:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda&nbsp; &nbsp; &nbsp;_src<br />&nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;lsr&nbsp; &nbsp; &nbsp;a<br />&nbsp; &nbsp;sta&nbsp; &nbsp; &nbsp;_dest</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 27, 2018 3:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's actually correct. The temporary result <strong>src + 3</strong> is implicitly a 16-bit int. The high bits of the result can matter when you shift them down, but they won't matter when you shift them up. Think of <strong>(255+3)&gt;&gt;2</strong>.<br /><br />How does it deal with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">dest = (unsigned char)(src + 3) &gt;&gt; 2;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 27, 2018 3:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is this also incorrect?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clc<br />lda src<br />adc #3&nbsp; ; C:A ranges from 3 to 258<br />ror a<br />lsr a<br />sta dest<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 27, 2018 4:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Is this also incorrect?</div><br />No, that's fine, but that's a whole new class of optimization that you've ordered here. (Something about keeping track of not just 8 and 16 bit results, but 9 bit as well...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Jun 27, 2018 4:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: cc65: Unnecessary code when accessing pointers</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there any way I can force the compiler to treat this as a byte?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>