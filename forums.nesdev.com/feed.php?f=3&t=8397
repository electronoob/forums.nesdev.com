<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8397" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-12-30T17:03:57-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8397</id>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-12-30T17:03:57-07:00</updated>
<published>2011-12-30T17:03:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=88206#p88206</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=88206#p88206"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=88206#p88206"><![CDATA[
This is the table of opcodes that I used for creating the micro-op data for my emulator. It contains all opcodes supported by it, grouped by the mnemonic. (The combination of mnemonic and the addressing mode is used to select the list of micro-ops for the opcode.)<br />I have intentionally laid out the table in a manner that emphasizes regular patterns within the opcode numbers.<br /><br />Note that I changed some NOP/DOP/TOP opcodes into actual work-bearing opcodes (such as "STY imm" (80)), simply by following the pattern of existing opcodes. Of course, "STY imm" accomplishes nothing, hence it is considered a NOP opcode (in a similar manner as "XCHG AX, AX" is dubbed "NOP" in the x86 platform).<br />I also incorporated the JAM/KIL opcodes into the matrix, so e.g. "ASL imm" (02) does something nonsensical rather than jamming the emulator.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  // 0,4,8,C<br />  //              Imm   Zpg   ZpxY  IndY  AbsX<br />  //           ..    Rel   ZpgX  IndX  Abs   AbsY<br />  set&#40; &quot;bit&quot;, &quot;--'--'--'24'--'--'--'--'2C'--'--'--&quot; &#41;; // 20 = jsr, 28=plp<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'44'54'--'--'--'--'--'--'--&quot; &#41;; // 4C = jmp, 40=rti, 48=pha<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'64'74'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;sty&quot;, &quot;--'80'--'84'94'--'--'--'8C'--'--'--&quot; &#41;; // 80=DOP<br />  set&#40; &quot;ldy&quot;, &quot;--'A0'--'A4'B4'--'--'--'AC'BC'--'--&quot; &#41;; // A8=tay<br />  set&#40; &quot;cpy&quot;, &quot;--'C0'--'C4'--'--'--'--'CC'--'--'--&quot; &#41;; // C8=iny<br />  set&#40; &quot;cpx&quot;, &quot;--'E0'--'E4'--'--'--'--'EC'--'--'--&quot; &#41;; // E8=inx<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'04'14'--'--'--'0C'1C'--'--&quot; &#41;; // 0C=TOP, 1C = TOP<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'--'34'--'--'--'--'3C'--'--&quot; &#41;; // 34=DOP, 3C = TOP<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'--'--'--'--'--'--'5C'--'--&quot; &#41;; //         5C = TOP<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'--'--'--'--'--'--'7C'--'--&quot; &#41;; //         7C = TOP<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'--'D4'--'--'--'--'DC'--'--&quot; &#41;; // D4=DOP, DC = TOP<br />  set&#40; &quot;nop&quot;, &quot;--'--'--'--'F4'--'--'--'--'FC'--'--&quot; &#41;; // F4=DOP, FC = TOP<br /><br />  set&#40; &quot;brk&quot;, &quot;00'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;jsr&quot;, &quot;--'--'--'--'--'--'--'--'20'--'--'--&quot; &#41;;<br />  set&#40; &quot;rti&quot;, &quot;40'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;rts&quot;, &quot;60'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;  <br /><br />  set&#40; &quot;bpl&quot;, &quot;--'--'10'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;bmi&quot;, &quot;--'--'30'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;bvc&quot;, &quot;--'--'50'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;bvs&quot;, &quot;--'--'70'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;bcc&quot;, &quot;--'--'90'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;bcs&quot;, &quot;--'--'B0'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;bne&quot;, &quot;--'--'D0'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;beq&quot;, &quot;--'--'F0'--'--'--'--'--'--'--'--'--&quot; &#41;;<br /><br />  set&#40; &quot;php&quot;, &quot;08'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;plp&quot;, &quot;28'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;pha&quot;, &quot;48'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;pla&quot;, &quot;68'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;dey&quot;, &quot;88'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;tay&quot;, &quot;A8'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;iny&quot;, &quot;C8'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;inx&quot;, &quot;E8'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br /><br />  set&#40; &quot;clc&quot;, &quot;18'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 1 : 0001<br />  set&#40; &quot;sec&quot;, &quot;38'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 1 : 0011<br />  set&#40; &quot;cli&quot;, &quot;58'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 4 : 0101<br />  set&#40; &quot;sei&quot;, &quot;78'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 4 : 0111<br />  set&#40; &quot;clv&quot;, &quot;B8'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 64: 1011<br />  set&#40; &quot;cld&quot;, &quot;D8'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 8 : 1101<br />  set&#40; &quot;sed&quot;, &quot;F8'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // 8 : 1111<br /><br />  set&#40; &quot;tya&quot;, &quot;98'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br /><br />  set&#40; &quot;jmp&quot;, &quot;--'--'--'--'--'--'--'--'4C'--'--'6C&quot; &#41;;<br />  // 1,5,9,D<br />  set&#40; &quot;ora&quot;, &quot;--'09'--'05'15'--'01'11'0D'1D'19'--&quot; &#41;;<br />  set&#40; &quot;and&quot;, &quot;--'29'--'25'35'--'21'31'2D'3D'39'--&quot; &#41;;  <br />  set&#40; &quot;eor&quot;, &quot;--'49'--'45'55'--'41'51'4D'5D'59'--&quot; &#41;;<br />  set&#40; &quot;adc&quot;, &quot;--'69'--'65'75'--'61'71'6D'7D'79'--&quot; &#41;;<br />  set&#40; &quot;sta&quot;, &quot;--'89'--'85'95'--'81'91'8D'9D'99'--&quot; &#41;; // 89=DOP<br />  set&#40; &quot;lda&quot;, &quot;--'A9'--'A5'B5'--'A1'B1'AD'BD'B9'--&quot; &#41;;<br />  set&#40; &quot;cmp&quot;, &quot;--'C9'--'C5'D5'--'C1'D1'CD'DD'D9'--&quot; &#41;;<br />  set&#40; &quot;sbc&quot;, &quot;--'E9'--'E5'F5'--'E1'F1'ED'FD'F9'--&quot; &#41;;  <br /><br />  // 2,6,A,E<br />  set&#40; &quot;asl&quot;, &quot;0A'02'--'06'16'--'--'12'0E'1E'--'--&quot; &#41;; // 02=JAM, 12=JAM<br />  set&#40; &quot;rol&quot;, &quot;2A'22'--'26'36'--'--'32'2E'3E'--'--&quot; &#41;; // 22=JAM, 32=JAM<br />  set&#40; &quot;lsr&quot;, &quot;4A'42'--'46'56'--'--'52'4E'5E'--'--&quot; &#41;; // 42=JAM, 52=JAM<br />  set&#40; &quot;ror&quot;, &quot;6A'62'--'66'76'--'--'72'6E'7E'--'--&quot; &#41;; // 62=JAM, 72=JAM<br />  set&#40; &quot;stx&quot;, &quot;--'--'--'86'--'96'--'92'8E'--'--'--&quot; &#41;; //         92=JAM, 8A=txa<br />  set&#40; &quot;ldx&quot;, &quot;--'A2'--'A6'--'B6'--'B2'AE'--'BE'--&quot; &#41;; // AA=tax, B2=JAM<br />  set&#40; &quot;dec&quot;, &quot;--'--'--'C6'D6'--'--'D2'CE'DE'--'--&quot; &#41;; // CA=dex, D2=JAM<br />  set&#40; &quot;inc&quot;, &quot;--'--'--'E6'F6'--'--'F2'EE'FE'--'--&quot; &#41;; // EA=nop, F2=JAM<br /><br />  set&#40; &quot;nop&quot;, &quot;--'82'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;nop&quot;, &quot;--'C2'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;nop&quot;, &quot;--'E2'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br /><br />  set&#40; &quot;txa&quot;, &quot;8A'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;tax&quot;, &quot;AA'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;dex&quot;, &quot;CA'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;nop&quot;, &quot;EA'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br /><br />  set&#40; &quot;nop&quot;, &quot;1A&quot;&#41;; // 1 cycle<br />  set&#40; &quot;nop&quot;, &quot;3A&quot;&#41;;<br />  set&#40; &quot;nop&quot;, &quot;5A&quot;&#41;;<br />  set&#40; &quot;nop&quot;, &quot;7A&quot;&#41;;<br />  set&#40; &quot;txs&quot;, &quot;9A'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;tsx&quot;, &quot;BA'--'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;nop&quot;, &quot;DA&quot;&#41;;<br />  set&#40; &quot;nop&quot;, &quot;FA&quot;&#41;;<br />  // 3,7,B,F<br /><br />  set&#40; &quot;slo&quot;, &quot;--'--'--'07'17'--'03'13'0F'1F'1B'--&quot; &#41;; // ASL + ORA &#40;proper synthesis&#41;<br />  set&#40; &quot;rla&quot;, &quot;--'--'--'27'37'--'23'33'2F'3F'3B'--&quot; &#41;; // ROL + AND &#40;proper synthesis&#41;<br />  set&#40; &quot;sre&quot;, &quot;--'--'--'47'57'--'43'53'4F'5F'5B'--&quot; &#41;; // LSR + EOR &#40;proper synthesis&#41;<br />  set&#40; &quot;rra&quot;, &quot;--'--'--'67'77'--'63'73'6F'7F'7B'--&quot; &#41;; // ROR + ADC &#40;proper synthesis&#41;<br />  set&#40; &quot;sax&quot;, &quot;--'--'--'87'--'97'83'--'8F'--'--'--&quot; &#41;; // AND&#40;A,X&#41; + store t to memory &#40;register not changed&#41;; 93=SHA; 9B=SHS<br />  <br />  set&#40; &quot;lax&quot;, &quot;--'AB'--'A7'--'B7'A3'B3'AF'--'BF'--&quot; &#41;; // LDA + LAX &#40;proper synthesis&#41;<br />  set&#40; &quot;las&quot;, &quot;--'--'--'--'--'--'--'--'--'--'BB'--&quot; &#41;; // LAS = LDA+LAX + TXS<br />  set&#40; &quot;dcp&quot;, &quot;--'--'--'C7'D7'--'C3'D3'CF'DF'DB'--&quot; &#41;; // DEC + CMP<br />  set&#40; &quot;isb&quot;, &quot;--'--'--'E7'F7'--'E3'F3'EF'FF'FB'--&quot; &#41;; // INC + SBC<br /><br />  set&#40; &quot;anc&quot;, &quot;--'0B'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // AND, and CF=result.7, aka. AAC<br />  set&#40; &quot;anc&quot;, &quot;--'2B'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // AND, and CF=result.7<br />  set&#40; &quot;asr&quot;, &quot;--'4B'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // AND, LSR &#40;proper synthesis&#41;<br />  set&#40; &quot;arr&quot;, &quot;--'6B'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // AND + ROR, also sets V. And C differently.<br />  set&#40; &quot;ane&quot;, &quot;--'8B'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // &#40;A|0xEE&#41; &amp; x &amp; t, set nz<br />  set&#40; &quot;sbx&quot;, &quot;--'CB'--'--'--'--'--'--'--'--'--'--&quot; &#41;; // X = A&amp;X - t; store to X<br />  set&#40; &quot;sbc&quot;, &quot;--'EB'--'--'--'--'--'--'--'--'--'--&quot; &#41;;<br />  set&#40; &quot;shy&quot;, &quot;--'--'--'--'--'--'--'--'--'9C'--'--&quot; &#41;; // SHY/SYA/SAY<br />  set&#40; &quot;shx&quot;, &quot;--'--'--'--'--'--'--'--'--'--'9E'--&quot; &#41;; // SHX/SXA/XAS<br />  set&#40; &quot;shs&quot;, &quot;--'--'--'--'--'--'--'--'--'--'9B'--&quot; &#41;; // SHS<br />  set&#40; &quot;sha&quot;, &quot;--'--'--'--'--'--'--'93'--'--'9F'--&quot; &#41;;</div><br /><br />EDIT: Just wanted to add that lidnariq' layout is exceptionally clear and nice.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Fri Dec 30, 2011 5:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2011-12-12T12:22:57-07:00</updated>
<published>2011-12-12T12:22:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87387#p87387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87387#p87387"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87387#p87387"><![CDATA[
Also see the similar rearrangement I did <a href="http://nesdev.com/bbs/viewtopic.php?p=83966#83966" class="postlink">here</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Dec 12, 2011 12:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-12-11T18:55:10-07:00</updated>
<published>2011-12-11T18:55:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87372#p87372</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87372#p87372"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87372#p87372"><![CDATA[
Unless you generate your big jump table the way Bisqwit's sub-1000-line emulator written in C++11 does.<br /><br />This opcode matrix, widened to 32 instructions per row and with the columns shuffled, might help show the patterns in the 6502 opcodes. Maximize your browser, and if that's not enough, copy this table into a text editor, set the font size down, and maximize that.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   +00 +04 +08 +0c +10 +14 +18 +1c +01   +05 +09 +0d +11   +15 +19 +1d +02 +06 +0a +0e +12 +16 +1a +1e +03   +07 +0b +0f +13   +17 +1b +1f <br />00 BRK NOP PHP NOP BPL NOP CLC NOP ORA   ORA ORA ORA ORA   ORA ORA ORA KIL ASL ASL ASL KIL ASL NOP ASL SLO   SLO ANC SLO SLO   SLO SLO SLO <br />       d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x     d       a       d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x <br />20 JSR BIT PLP BIT BMI NOP SEC NOP AND   AND AND AND AND   AND AND AND KIL ROL ROL ROL KIL ROL NOP ROL RLA   RLA ANC RLA RLA   RLA RLA RLA <br />   a   d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x     d       a       d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x <br />40 RTI NOP PHA JMP BVC NOP CLI NOP EOR   EOR EOR EOR EOR   EOR EOR EOR KIL LSR LSR LSR KIL LSR NOP LSR SRE   SRE ALR SRE SRE   SRE SRE SRE <br />       d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x     d       a       d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x <br />60 RTS NOP PLA JMP BVS NOP SEI NOP ADC   ADC ADC ADC ADC   ADC ADC ADC KIL ROR ROR ROR KIL ROR NOP ROR RRA   RRA ARR RRA RRA   RRA RRA RRA <br />       d       &#40;a&#41; *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x     d       a       d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x <br />80 NOP STY DEY STY BCC STY TYA SHY STA   STA NOP STA STA   STA STA STA NOP STX TXA STX KIL STX TXS SHX SAX   SAX XAA SAX AHX   SAX TAS AHX <br />   #i  d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x #i  d       a       d,y     a,y &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,y a,y a,y <br />a0 LDY LDY TAY LDY BCS LDY CLV LDY LDA   LDA LDA LDA LDA   LDA LDA LDA LDX LDX TAX LDX KIL LDX TSX LDX LAX   LAX LAX LAX LAX   LAX LAS LAX <br />   #i  d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x #i  d       a       d,y     a,y &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,y a,y a,y <br />c0 CPY CPY INY CPY BNE NOP CLD NOP CMP   CMP CMP CMP CMP   CMP CMP CMP NOP DEC DEX DEC KIL DEC NOP DEC DCP   DCP AXS DCP DCP   DCP DCP DCP <br />   #i  d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x #i  d       a       d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x <br />e0 CPX CPX INX CPX BEQ NOP SED NOP SBC   SBC SBC SBC SBC   SBC SBC SBC NOP INC NOP INC KIL INC NOP INC ISC   ISC SBC ISC ISC   ISC ISC ISC <br />   #i  d       a   *+d d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x #i  d       a       d,x     a,x &#40;d,x&#41; d   #i  a   &#40;d&#41;,y d,x a,y a,x <br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Dec 11, 2011 6:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2011-12-11T15:42:10-07:00</updated>
<published>2011-12-11T15:42:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87370#p87370</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87370#p87370"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87370#p87370"><![CDATA[
<div class="quotetitle">infiniteneslives wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">It's really great. However, how would you handle the exceptions? Would you put an "if()" statement at each instruction fetch? That's my doubt.<br /></div><br /><br />I'm not sure if I understand what your asking in reguards to an exception.  But if I get the question the answer is that there is priority.  ie check these two bits first if they are 00 then go check these bytes to find out what to do.  if those two bits were 01 then you should have checked a different set of bytes to determine what to do.<br /><br />I guess you could think of it as an "if()" because that's what the control unit is doing with every single instruction that comes though.  If this opcode do this, if a different opcode do something different etc.  It's just doing it with hardware using gates vice a software programming "if()" as it sounds like your implying.</div><br /><br />there are several opcodes that follow no pattern whatsoever. you should have a string of if/elses or a switch block before anything else to find these. if they aren't one of the exceptions to the encoding patterns, then continue parsing based on the regular opcode bitfields.<br /><br />this is originally how a wrote a 6502 emu, but later changed it to using a function jump table for opcodes/addressing modes because it's slightly easier to maintain, and more readable. i think so, anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Sun Dec 11, 2011 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2011-12-11T15:45:24-07:00</updated>
<published>2011-12-11T15:38:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87369#p87369</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87369#p87369"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87369#p87369"><![CDATA[
<div class="quotetitle">Undubbed wrote:</div><div class="quotecontent"><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">http://www.llx.com/~nparker/a2/opcodes.html<br /></div><br /><br />PERFECT! I don't want to reinvent the wheel, so I'll just soak that page in.<br /><br />I'm curious how you found that. This subject is probably too obscure to find even with google.</div><br /><br />no, when i started writing my 6502 core i did a google search for "6502 instruction encoding" and that was one of the first three or four pages in the results.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Sun Dec 11, 2011 3:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-12-11T07:02:05-07:00</updated>
<published>2011-12-11T07:02:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87362#p87362</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87362#p87362"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87362#p87362"><![CDATA[
<div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><br />It's really great. However, how would you handle the exceptions? Would you put an "if()" statement at each instruction fetch? That's my doubt.<br /></div><br /><br />I'm not sure if I understand what your asking in reguards to an exception.  But if I get the question the answer is that there is priority.  ie check these two bits first if they are 00 then go check these bytes to find out what to do.  if those two bits were 01 then you should have checked a different set of bytes to determine what to do.<br /><br />I guess you could think of it as an "if()" because that's what the control unit is doing with every single instruction that comes though.  If this opcode do this, if a different opcode do something different etc.  It's just doing it with hardware using gates vice a software programming "if()" as it sounds like your implying.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sun Dec 11, 2011 7:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-12-11T06:09:59-07:00</updated>
<published>2011-12-11T06:09:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87360#p87360</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87360#p87360"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87360#p87360"><![CDATA[
It's really great. However, how would you handle the exceptions? Would you put an "if()" statement at each instruction fetch? That's my doubt.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Sun Dec 11, 2011 6:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Undubbed]]></name></author>
<updated>2011-12-11T02:30:17-07:00</updated>
<published>2011-12-11T02:30:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87358#p87358</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87358#p87358"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87358#p87358"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />http://www.llx.com/~nparker/a2/opcodes.html<br /></div><br /><br />PERFECT! I don't want to reinvent the wheel, so I'll just soak that page in.<br /><br />I'm curious how you found that. This subject is probably too obscure to find even with google.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4007">Undubbed</a> — Sun Dec 11, 2011 2:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-12-11T01:46:59-07:00</updated>
<published>2011-12-11T01:46:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87357#p87357</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87357#p87357"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87357#p87357"><![CDATA[
Well you've got the right idea.  CPUs are set up to decode the opcode and then determine the addressing mode based on the opcode.  I haven't looked into the specifics of the 6502 but there is definitely a pattern based on the addressing mode and related opcodes.<br /><br />As for the Jump, that is generally a special case opcode unlike others. Because it doesn't take any arguments just "jump to this address."  And in order to allow for jumps to a wider range of address the opcode is smaller than most allowing for more space for the address.<br /><br />Not sure if what I'm saying helps, like I said I don't know 6502 specifics.  But from what I know about MIPS, ARM, and AVR cpu structure your on the right track.  I don't know if there is much documentation on this for 6502, if you can't find much or don't get your answers here you might be better to learn the structure of something more heavily documented for education like MIPS then you could more easily understand why things are done in a certain manner and apply that to the 6502.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Sun Dec 11, 2011 1:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-12-11T01:40:21-07:00</updated>
<published>2011-12-11T01:40:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87356#p87356</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87356#p87356"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87356#p87356"><![CDATA[
<!-- m --><a class="postlink" href="http://www.llx.com/~nparker/a2/opcodes.html">http://www.llx.com/~nparker/a2/opcodes.html</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Dec 11, 2011 1:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Undubbed]]></name></author>
<updated>2011-12-11T00:33:30-07:00</updated>
<published>2011-12-11T00:33:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87355#p87355</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87355#p87355"/>
<title type="html"><![CDATA[Deriving the address mode through the opcode]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8397&amp;p=87355#p87355"><![CDATA[
I'm curious as to the nature of why certain instructions get certain opcodes, and I predict that they're not all arbitrary. I always wondered if you can determine the address mode used just by looking at the opcode. I have no idea what this area of cpu design is(opcode design?), so it's hard for me to search up on something like this. Also, I'm not sure if this info is even useful, it's only just to satisfy my curiosity of how exactly CPUs work.<br /><br />I <em>think</em> I've already figured out some address modes.<br /><br />Like for example, all absolute opcodes:<br /><br />The low 4 bits of the opcode are either 0x0C, 0x0D or 0x0E<br />AND<br />The high 4 bits are zero or a multiple of 2<br /><br />Any byte that doesn't fall under those criteria but is not listed, such as opcode $0C, is probably an unofficial opcode(but still absolute)<br /><br />So going by this observation, all of these opcodes must fit my criteria:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$0C   TOP &#40;NOP&#41; &#91;SKW&#93; &#40;UNOFFICIAL&#41;<br />$0D   ORA   <br />$0E   ASL   <br />$20   JSR  &#40;ANOMALY, neither C, D or E&#41;  <br />$2C   BIT   <br />$2D   AND <br />$2E   ROL<br />$4C   JMP<br />$4D   EOR  <br />$4E   LSR  <br />$6C   JMP  &#40;ANOMALY, it's Indirect&#41;<br />$6D   ADC   <br />$6E   ROR<br />$8C   STY <br />$8D   STA<br />$8E   STX<br />$AC   LDY<br />$AD   LDA   <br />$AE   LDX<br />$CC   CPY<br />$CD   CMP<br />$CE   DEC   <br />$EC   CPX<br />$ED   SBC<br />$EE   INC</div><br /><br />I notice how the anomalies are jump type instructions. Just gotta figure out why.<br /><br />I've also kind of figured out Relative mode (low: zeros, high: one, and multiples of 2 +1). Indirect X looks pretty straight forward too. But some others have me scratching my head, like Implied opcodes.<br /><br />I'm still kind of looking into this to see if there's a definite pattern. If there's someone here that knows about this kind of thing, wants to help figure this out, or knows where a .txt document on this is at, please tell me!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4007">Undubbed</a> — Sun Dec 11, 2011 12:33 am</p><hr />
]]></content>
</entry>
</feed>