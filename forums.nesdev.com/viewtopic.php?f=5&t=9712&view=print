<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - About zlib, anyone?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">About zlib, anyone?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9712">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9712</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Jan 17, 2013 8:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The zlib v1.2.7 is giving me a few warnings/errors. Could someone help me?<br /><br />Well, one example: the gzopen(gzFile file) instead of gzopen(gzFile *file).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2013 12:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* from zlib.h */<br /><br />typedef void* gzFile;&nbsp; &nbsp; &nbsp; &nbsp;/* opaque gzip file descriptor */<br /><br />gzFile gzopen (const char *path, const char *mode);<br /><br />/* example */<br /><br />gzFile file = gzopen( &quot;file.gz&quot;, &quot;rb&quot; );<br />if ( file == NULL )<br />&nbsp; &nbsp; error( &quot;couldn't open file&quot; );<br />...</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Jan 17, 2013 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Example 2: <br /><br />the compiler &quot;accepts&quot;<br /><em>gzclose(*fp);</em><br /><br />but not <br /><em>gzclose(fp);</em><br /><br />as it <strong>should be</strong> by default.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jan 17, 2013 1:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />gzclose takes a gzFile as a parameter, is fp a gzFile or a gzFile*? (it seems you should be using a gzFile)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2013 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yep, you're probably using gzFile* and thus the * satisfies the compiler (but hides the serious error, hidden by the implicit void* -&gt; gzFile* conversion C does). It's unfortunate that the zlib folks didn't make it so you would use gzFile*, since that's more similar to the C library's FILE* you use.<br /><br />Zepper, refer to some gzip example code for the proper way and you'll see where you've gone wrong. Or post some of your code that opens a file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jan 17, 2013 1:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">gzFile f = gzopen(path, mode);<br />...<br />gzclose(f);</div><br /><br />Unfortunately this is valid C, as blargg pointed out, even though it is invalid use of gzopen:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">gzFile* fp = gzopen(path, mode);</div><br /><br />In C++ that should give an error about converting a void* to a void**.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2013 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd say that either zlib.h is poorly designed in this regard, or there was some other technical consideration that made them choose not to do something like<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef struct gzFile_* gzFile;</div><br />This approach is superior because it keeps type safety <em>and</em> doesn't require casts in their library code:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void user()<br />{<br />&nbsp; &nbsp; // all errors here would compile fine with current zlib.h<br />&nbsp; &nbsp; gfFile f1 = gfopen( ... ); // OK<br />&nbsp; &nbsp; gzFile* f2 = gzopen( ... ); // error<br />&nbsp; &nbsp; FILE* f3 = gzopen( ... ); // compile error (used FILE*, oops!)<br />&nbsp; &nbsp; gzclose( f1 ); // OK<br />&nbsp; &nbsp; gzclose( f2 ); // compile error<br />&nbsp; &nbsp; gzclose( f3 ); // compile error<br />&nbsp; &nbsp; fclose( f1 ); // compile error<br />}<br /><br />/* zlib.c */<br />#include &quot;zlib.h&quot;<br /><br />struct gzFile_ {<br />&nbsp; &nbsp; int internal;<br />&nbsp; &nbsp; ...<br />};<br />void gzClose( gzFile f )<br />{<br />&nbsp; &nbsp; if ( f-&gt;internal == 1234 )<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />}<br /><br />/* -- versus -- */<br /><br />/* zlib.c */<br />typedef struct gzFile_ {<br />&nbsp; &nbsp; int internal;<br />&nbsp; &nbsp; ...<br />} gzFile_;<br />void gzClose( gzFile f )<br />{<br />&nbsp; &nbsp; gzFile_* p = (gzFile_*) f;<br />&nbsp; &nbsp; if ( p-&gt;internal == 1234 )<br />&nbsp; &nbsp; &nbsp; &nbsp; ...<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Jan 17, 2013 6:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;compiler errors<br />basically, they can be fixed by using *fd instead of fd.<br /><br />-----------------<br />libzip.c: In function 'gzfilelength':<br />libzip.c:32:4: warning: passing argument 1 of 'gzrewind' from incompatible pointer type &#91;enabled by default&#93;<br />In file included from unzip.h:51:0,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from libzip.c:14:<br />c:\program files (x86)\dev-cpp\mingw32\bin\../lib/gcc/mingw32/4.7.0/../../../../<br />include/zlib.h:1430:24: note: expected 'gzFile' but argument is of type 'struct gzFile_s **'<br />libzip.c:37:4: warning: passing argument 1 of 'gzeof' from incompatible pointer type &#91;enabled by default&#93;<br />In file included from unzip.h:51:0,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from libzip.c:14:<br />c:\program files (x86)\dev-cpp\mingw32\bin\../lib/gcc/mingw32/4.7.0/../../../../<br />include/zlib.h:1458:21: note: expected 'gzFile' but argument is of type 'struct gzFile_s **'<br />libzip.c:38:4: warning: passing argument 1 of 'gzrewind' from incompatible pointer type &#91;enabled by default&#93;<br />In file included from unzip.h:51:0,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from libzip.c:14:<br />c:\program files (x86)\dev-cpp\mingw32\bin\../lib/gcc/mingw32/4.7.0/../../../../<br />include/zlib.h:1430:24: note: expected 'gzFile' but argument is of type 'struct gzFile_s **'<br />libzip.c: In function 'gzLoadFile':<br />libzip.c:133:20: warning: initialization from incompatible pointer type &#91;enabled by default&#93;<br />libzip.c:139:13: warning: passing argument 1 of 'gzread' from incompatible pointer type &#91;enabled by default&#93;<br />In file included from unzip.h:51:0,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from libzip.c:14:<br />c:\program files (x86)\dev-cpp\mingw32\bin\../lib/gcc/mingw32/4.7.0/../../../../<br />include/zlib.h:1296:21: note: expected 'gzFile' but argument is of type 'struct<br />gzFile_s **'<br />libzip.c:144:10: warning: passing argument 1 of 'gzclose' from incompatible pointer type &#91;enabled by default&#93;<br />In file included from unzip.h:51:0,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;from libzip.c:14:<br />c:\program files (x86)\dev-cpp\mingw32\bin\../lib/gcc/mingw32/4.7.0/../../../../<br />include/zlib.h:1494:24: note: expected 'gzFile' but argument is of type 'struct gzFile_s **'</div><br /><br />source file (my old partner had written it, Mr. Bannister)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/*<br />-- RockNES - A NES 8-bit multi-platform emulator<br />-- Copyright ©1998-2012 Zepper (fx3rnes &#91;at&#93; hotmail &#91;dot&#93; com)<br />--<br />-- libzip.c<br />-- Small functions to manage compressed files<br />*/<br /><br />#include &lt;stdio.h&gt;<br />#include &lt;stdlib.h&gt;<br />#include &lt;string.h&gt;<br /><br />#ifndef _unz_H<br />#include &quot;unzip.h&quot;<br />#endif<br /><br />typedef struct<br />{<br />&nbsp; &nbsp;unsigned char *data;&nbsp; &nbsp; &nbsp;//file data<br />&nbsp; &nbsp;long length;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//file length<br />}<br />gzFILE_T;<br /><br />/*<br />// Check size of GZ file<br />*/<br />static int gzfilelength(gzFile *gd)<br />{<br />#define CHUNKSIZE&nbsp; &nbsp;0x10000<br />&nbsp; &nbsp;int size = 0, length = 0;<br />&nbsp; &nbsp;unsigned char buffer&#91;CHUNKSIZE&#93;;<br />&nbsp; &nbsp;gzrewind(gd);<br />&nbsp; &nbsp;do {<br />&nbsp; &nbsp; &nbsp; size = gzread(*gd, buffer, CHUNKSIZE);<br />&nbsp; &nbsp; &nbsp; if(size &lt;= 0) break;<br />&nbsp; &nbsp; &nbsp; length += size;<br />&nbsp; &nbsp;} while (!gzeof(gd));<br />&nbsp; &nbsp;gzrewind(gd);<br />&nbsp; &nbsp;return (length);<br />#undef CHUNKSIZE<br />}<br /><br />/*<br />// Check PK string (ZIP format)<br />*/<br />static int iszipfile(const char *filename)<br />{<br />&nbsp; &nbsp;unsigned char buf&#91;2&#93;;<br />&nbsp; &nbsp;FILE *fd;<br /><br />&nbsp; &nbsp;fd = fopen(filename, &quot;rb&quot;);<br />&nbsp; &nbsp;if(!fd)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; return 0;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;fread(buf, 2, 1, fd);<br />&nbsp; &nbsp;fclose(fd);<br /><br />&nbsp; &nbsp;return (memcmp(buf, &quot;PK&quot;, 2) == 0);<br />}<br /><br />/*<br />// Open a compressed file and load it<br />*/<br />gzFILE_T *gzLoadFile(char *path)<br />{<br />&nbsp; &nbsp;/* new stuff for zip support */<br />&nbsp; &nbsp;char zipfilename&#91;0x100&#93;;<br />&nbsp; &nbsp;unzFile zp;<br />&nbsp; &nbsp;int ziperr = UNZ_OK; /* fixed on Oct, Thu 14 2004 01:09 */<br />&nbsp; &nbsp;unz_file_info zipfileinfo;<br /><br />&nbsp; &nbsp;gzFILE_T *gz_context = malloc(sizeof(*gz_context));<br />&nbsp; &nbsp;if(!gz_context)<br />&nbsp; &nbsp; &nbsp; return NULL;<br /><br />&nbsp; &nbsp;memset(zipfilename, 0, 0x100);<br /><br />&nbsp; &nbsp;gz_context-&gt;data = NULL;<br />&nbsp; &nbsp;gz_context-&gt;length = 0;<br /><br />&nbsp; &nbsp;if(iszipfile(path)) { /* zip file */<br />&nbsp; &nbsp; &nbsp; int found = 0;<br />&nbsp; &nbsp; &nbsp; char *ptr;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; zp = unzOpen(path);<br />&nbsp; &nbsp; &nbsp; unzGoToFirstFile(zp);<br /><br />&nbsp; &nbsp; &nbsp; do<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;unzGetCurrentFileInfo(zp, &amp;zipfileinfo, zipfilename, 100, NULL, 0, NULL, 0);<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ptr = strchr(zipfilename, '.');<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (NULL != ptr)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ptr++;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if( (0 == strncmp(ptr, &quot;nes&quot;, 3)) ||<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (0 == strncmp(ptr, &quot;fds&quot;, 3)) || <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (0 == strncmp(ptr, &quot;nsf&quot;, 3)) )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;found = 1;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!found)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ziperr = unzGoToNextFile(zp);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br />&nbsp; &nbsp; &nbsp; } while ((!found) &amp;&amp; (ziperr == UNZ_OK));<br /><br />&nbsp; &nbsp; &nbsp; if (!found)<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;unzClose(zp);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;free(gz_context);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return NULL;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; unzOpenCurrentFile(zp);&nbsp; <br />&nbsp; &nbsp; &nbsp; gz_context-&gt;length = (long)zipfileinfo.uncompressed_size;<br />&nbsp; &nbsp; &nbsp; gz_context-&gt;data = malloc(gz_context-&gt;length);<br />&nbsp; &nbsp; &nbsp; if (!gz_context-&gt;data)<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;unzClose(zp);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;free(gz_context);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return NULL;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; unzReadCurrentFile(zp, gz_context-&gt;data, gz_context-&gt;length);<br />&nbsp; &nbsp; &nbsp; unzClose(zp);<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; // Not a zip - try GZ<br />&nbsp; &nbsp; &nbsp; gzFile *fp = gzopen(path, &quot;rb&quot;);<br />&nbsp; &nbsp; &nbsp; if(fp)<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gz_context-&gt;length = gzfilelength(fp);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gz_context-&gt;data = malloc(gz_context-&gt;length);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(gz_context-&gt;data) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gzread(fp, gz_context-&gt;data, gz_context-&gt;length);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;} else {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free(gz_context);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gz_context = NULL;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gzclose(fp);<br />&nbsp; &nbsp; &nbsp; } else {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;free(gz_context);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gz_context = NULL;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;return gz_context;<br />}<br /><br />/*<br />// Close the file<br />*/<br />void gzCloseFile(gzFILE_T *fp)<br />{<br />&nbsp; &nbsp;if(fp) {<br />&nbsp; &nbsp; &nbsp; free(fp-&gt;data);<br />&nbsp; &nbsp; &nbsp; free(fp);<br />&nbsp; &nbsp;}<br />}<br />//eof</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2013 8:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That code is wrong as far as I can tell, and this line is just broken:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">size = gzread(*gd, buffer, CHUNKSIZE);</div><br />It should be<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">size = gzread(gd, buffer, CHUNKSIZE);</div><br />Change the &quot;gzFile *&quot; instances to &quot;gzFile&quot; and it should compile correctly. Note that, confusingly, there is a gzFILE_T type which has nothing to do with gzFile.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Jan 17, 2013 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing I need to point out:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">gzFILE_T *gzLoadFile(char *path);<br /><br />//well, *path is a pointer to a string of chars.<br />//the compiler gives an error/warning right here:<br /><br />gzFile *fp = gzopen(path, &quot;rb&quot;);<br /><br />//which &quot;works&quot; when changed to:<br />gzFile *fp = gzopen(*path, &quot;rb&quot;);</div><br /><br />So, I don't understand. Why isn't a pointer acceptable? In older versions of zlib, it worked with gzopen(<strong>path</strong>, &quot;rb&quot;), but now it accepts only gzopen(<strong>*path</strong>, &quot;rb&quot;) with this newer version. In fact, I never had problems when compiling this code with older versions of zlib.<br /><br />This line:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">size = gzread(*gd, buffer, CHUNKSIZE);</div><br />actually &quot;works&quot; when compiling it.<br />Removing the &quot;*&quot; gives an error. I hope to be clear now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2013 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Avoid gzFile*. Never put a * after gzFile. Then fix any compile errors.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Jan 17, 2013 9:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />gzFile is meant to be treated similarly to a HANDLE. It is a primitive type that there is no reason to pass by reference instead of by value. i.e. you should never be using a gzFile*, or passing a gzFile around by reference. There is no performance advantage to the reference (the underlying type is already a pointer anyway, you're just forcing a second dereference for no reason), and there is considerable opportunity for error due to the unfortunate implicit casting from void* to other pointer types. For instance:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">gzFile* fp = gzopen(a,b);<br />gzclose(*fp);</div><br /><br />In C fp is actually equal to what the gzFile would have been, and now *fp won't actually do what you would expect. It points to the wrong place (it will look up the data fp was supposed to point to, and treat that as a pointer it can deference). To get the correct result you would actually need to use the counterintuitive:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">gzFile* fp = gzopen(a,b);<br />gzclose((gzFile)fp);</div><br /><br />Obviously you don't want to do that, but it demonstrates what's wrong with using gzFile*.<br /><br />Edit: also if you are writing gzopen(*path, ...) there is likely something wrong with your definition of path (unless path is a pointer to an array of strings or something like that).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Fri Jan 18, 2013 6:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />News to me. I didn't know about such thing, example:<br /><br />FILE fp = fopen(path, mode);<br /><br />without the * (pointer).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Jan 18, 2013 7:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">News to me. I didn't know about such thing, example:<br /><br />FILE fp = fopen(path, mode);<br /><br />without the * (pointer).</div><br />No, you don't do that unless the documentation for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fopen&#40;&#41;</tt> on your platform tells you it returns a struct on the stack rather than a pointer (I've never seen any which do).  You comply with what the documentation tells you.  Example: <a href="http://www.freebsd.org/cgi/man.cgi?query=fopen&amp;apropos=0&amp;sektion=0&amp;manpath=FreeBSD+9.0-RELEASE&amp;arch=default&amp;format=html" class="postlink">fopen() on FreeBSD</a>.  Thus this is the code you'd want:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; FILE *fp;<br />&nbsp; fp = fopen(path, mode);<br /></div><br />And NOT:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; FILE fp;<br />&nbsp; fp = fopen(path, mode);<br /></div><br />The latter will throw a warning about &quot;incorrect assignment&quot; or something along those lines, and will absolutely be unreliable/break/crash/whatever because <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fopen&#40;&#41;</tt> returns a pointer, not the entire contents on the stack of whatever <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">FILE</tt> is.  Different levels of compiler optimisation may actually result in code that works despite the warning (that's based on my own experience).  Here's proof of the warning:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 1 #include &lt;stdio.h&gt;<br />&nbsp; 2 int main(int argc, char *argv&#91;&#93;) {<br />&nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FILE *fp1;<br />&nbsp; 4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FILE fp2;<br />&nbsp; 5<br />&nbsp; 6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fp1 = fopen(&quot;dicks&quot;, &quot;r&quot;);<br />&nbsp; 7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fp2 = fopen(&quot;dicks&quot;, &quot;r&quot;);<br />&nbsp; 8<br />&nbsp; 9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return 0;<br />&nbsp;10 }<br /></div><div class="codetitle"><b>Code:</b></div><div class="codecontent">$ gcc -Wall -o x x.c<br />x.c: In function 'main':<br />x.c:7: error: incompatible types in assignment<br /></div><br />As for zlib and it's gzip-related functions, it seems quite clear to me what you want is to declare your <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">gzFile</tt> variable as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">gzFile myvarname</tt>.  Look at <a href="http://www.gzip.org/zlib/manual.html" class="postlink">the declaration for gzopen</a> and what it returns.<br /><br />Now, all of the above is talking about functions and what they return to you on the stack -- passing an argument to a function, and what you pass, based on what it's declared as, also matters.  For example, take the following pieces of code (let's stick with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fopen&#40;&#41;</tt> shall we?).  These two are the same:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; FILE fp;<br />&nbsp; fp = fopen(&quot;/some/file.gz&quot;, &quot;r&quot;);<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; char *path = &quot;/some/file.gz&quot;;<br />&nbsp; FILE fp;<br />&nbsp; fp = fopen(path, &quot;r&quot;);<br /></div><br />These two are the same.  They both statically allocate space within one of the segments (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.text</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.data</tt> or something, I forget) within the program loaded at run-time for the path/filename itself.  The difference is that in the latter case, there's now a variable called <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">path</tt> that points to this preallocated string.  You can also manipulate <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">path</tt> within the 2nd program if you wish, i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">path[1] = &#39;h&#39;</tt> which would turn the path into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">/home/file.gz</tt>; if you declared it as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">const char *path</tt> you wouldn't be able to do this (you'd get an error about trying to modify a read-only variable or something to that effect).<br /><br />This becomes more complex when something that is typedef'd is a struct -- and <a href="http://www.zlib.net/manual.html#Gzip" class="postlink">this appears to be the case</a> with zlib's <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">gzFile</tt>.  In fact, there was an example of that exact situation <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9529" class="postlink">in this thread</a>, specifically these posts where the author forced a cast on something when he shouldn't have, and -- more importantly -- was passing the wrong thing to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">memcpy&#40;&#41;</tt> (which happily stomped all over the memory regions allocated for his program).  I provided a write-up explaining when it's proper to hand a function the address of the variable itself (using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&amp;var</tt>) rather than just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">var</tt>:<br /><br />* <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=104677#p104677">viewtopic.php?p=104677#p104677</a><!-- l --><br />* <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=104680#p104680">viewtopic.php?p=104680#p104680</a><!-- l --><br />* <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=104703#p104703">viewtopic.php?p=104703#p104703</a><!-- l --><br />* <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=104705#p104705">viewtopic.php?p=104705#p104705</a><!-- l --><br />* <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=104706#p104706">viewtopic.php?p=104706#p104706</a><!-- l --><br /><br />So, the bottom line: if a compiler throws a warning at you, pay attention to it.  <strong>DO NOT</strong> just start typecasting things to clean up warnings, or start force dereferencing (i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">function&#40;*myvar&#41;</tt>) -- more often than not a forced cast still means your code is buggy/wrong and no longer does the compiler tell you about it, and forced dereferencing is only necessary when you <strong>know it's needed</strong> (and understand what this does).  Instead ask for help or advice; sometimes casting is the correct solution, but most of the time I see people force casting for no good reason or because they're trying to get rid of warnings that indicate an actual problem.  I only rarely see people dereferencing manually, and it's usually done within complex string manipulation or string parsing functions (where manipulating the address of a pointer, to point to parts of a string, are used heavily).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jan 18, 2013 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: About zlib, anyone?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">News to me. I didn't know about such thing, example:<br /><br />FILE fp = fopen(path, mode);<br /><br />without the * (pointer).</div><br /><br />The correct usage of FILE and fopen has nothing at all to do with gzFile and gzopen. fopen returns a FILE*, gzopen returns a gzFile.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>