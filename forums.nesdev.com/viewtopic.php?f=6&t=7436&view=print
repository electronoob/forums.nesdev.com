<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sound update timing problems</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sound update timing problems</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=7436">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=7436</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jan 28, 2011 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is a set of problems related to sound update routine calling in a more complex project than a simple demo. I still can't find nice NES-specific solutions to these, so maybe someone can give me some ideas or input how it was solved in existing games.
<br />
<br />
<br />Main problem is that you need to call sound update routine with constant rate. Usually it is TV frame rate. There are two common ways to sync code with TV frames on NES - NMI or some flag polling (either PPU status or one changed in NMI handler). However, you can't just call sound update right when new frame starts if you need to make some things with VRAM first, otherwise you just miss the VRAM access time.
<br />
<br />So I see few ways to call the sound update, all of them has drawbacks:
<br />
<br />- Flag polling, then VRAM update, then sound update. Easy to work with, however, it is not acceptable if there is lag possibility (i.e. more than one TV frame between the polls).
<br />
<br />- NMI handler, all the code that updates VRAM should be there, and after it sound update routine called. If it is a game, it could need many different pieces of code that updates VRAM depending from situation, that could make a lot of headache to organize and debug (compared to previous case).
<br />
<br />- IRQ from frame counter. Interrupts disabled before polling flag, then VRAM update, then interrupts enabled, so IRQ handler never called in VRAM access time. This works, but because frame counter rate is a bit slower than a TV frame, and VRAM updates delays IRQ handler call, the update rate is not stable, and it is noticeable, at least in tests I've done in emulators.
<br />
<br />- IRQ from DMC probably could be used too, and even could allow to compensate problems of previous way, but it limits or disables DPCM samples use. I guess, it is also the only way that allows to compensate NTSC/PAL frame rate difference without sound artefacts and without additional hardware (second problem).
<br />
<br />
<br />Second problem is the NTSC/PAL frame rate difference. Pitch difference is easy to compensate, and not that important anyway (most of people don't care, they only notice it when compare side-by-side). Speed difference is very noticeable, though.
<br />
<br />Simple way to compensate it is 'frame skip', either make 50hz music and call the update once per frame for PAL, but once per frame with skipping every sixth frame for NTSC; or make 60hz music and call the update once per frame for NTSC and once per frame but twice every fifth frame for PAL. However, this produces noticeable sound artifacts, and only works fine with simple music and sounds.
<br />
<br />Better way is to have interrupt with better resolution than 50/60 hz (scanline counter, for example), but it is only available with some mappers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 28, 2011 12:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">- NMI handler, all the code that updates VRAM should be there, and after it sound update routine called. If it is a game, it could need many different pieces of code that updates VRAM depending from situation, that could make a lot of headache to organize and debug (compared to previous case).</div><br />I don't understand how the complications you mentioned affect the sound in any way. The variation of the amount of VRAM updates will be at most 2000 or so cycles, not really enough to cause any audible distortion I think.<br /><br />This is the method I plan to use in my game (I don't have any sound yet), and since I in fact extend the vertical blank past the start of the frame (using timed code) the sound routine will actually be called at the same time every frame. Not that this matters much, because even the sound routine itself will write to the sound routine at varying times, depending on what calculations it has to perform first.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Second problem is the NTSC/PAL frame rate difference.</div>
<br />Yeah, this is something I'm not really sure how to fix yet. I'm thinking about using different tables for the note durations depending on whether the console is PAL or NTSC, but apply effects and such every frame regardless (I'm not sure how different the instruments will sound depending on the region because of this, though).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jan 28, 2011 12:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Simple way to compensate it is 'frame skip', either make 50hz music and call the update once per frame for PAL, but once per frame with skipping every sixth frame for NTSC; or make 60hz music and call the update once per frame for NTSC and once per frame but twice every fifth frame for PAL. However, this produces noticeable sound artifacts, and only works fine with simple music and sounds.</div>
<br />Pornotracker (and I believe Famitracker too) uses a 16-bit counter to achieve variable tempos. So you add some value to the counter each frame, and when it overflows/underflows, you increase the row count (new row means a new note can be started). Effects/envelopes are always updated every frame, so they don't run at exactly the same rate. This can also be used to compensate for PAL/NTSC timing differences. Of course it's not perfect, but it distributes the error more evenly than skipping updates or updating twice per frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 28, 2011 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Effects/envelopes are always updated every frame</div>
<br />Cool, I was afraid my solution wasn't good. Good to know that it's been tested (and approved I guess?).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jan 28, 2011 12:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">- NMI handler, all the code that updates VRAM should be there, and after it sound update routine called. If it is a game, it could need many different pieces of code that updates VRAM depending from situation, that could make a lot of headache to organize and debug (compared to previous case).</div><br />I don't understand how the complications you mentioned affect the sound in any way. The variation of the amount of VRAM updates will be at most 2000 or so cycles, not really enough to cause any audible distortion I think.</div>
<br />This does not affects to the sound, but it affects to the overall project design, makes it more complex. That's the drawback.
<br />
<br />thefox, thanks for reminder, somehow I've completely forgot about the alternating row length method (although I use it often). It is less noticeable than frame skips, indeed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jan 28, 2011 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Effects/envelopes are always updated every frame</div><br />Cool, I was afraid my solution wasn't good. Good to know that it's been tested (and approved I guess?).</div>
<br />Yeah I don't think it makes too much of a difference. Like Shiru said, people will notice if the tempo is different, but I doubt they'd notice if volume envelope update speed changed by 15% or whatever (without side-by-side comparison). I know I don't. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Besides, I really don't see any other solutions for this. While a scanline IRQ could be used to get a more stable update rate, I don't think it's a viable option if one wants to distribute the game on carts some day.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 28, 2011 12:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sound update timing problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">This does not affects to the sound, but it affects to the overall project design, makes it more complex.</div>
<br />Just a little bit, IMO. But the advantages of using this structure are tremendous, as you get to pick what lags and what doesn't in case the CPU gets overloaded. Things like music and status bars should never suffer from lag, because the results are very unpleasant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jan 28, 2011 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think that putting all the code that access to VRAM to NMI affects to project design just 'a little bit'. I mean, let's say you have a game of few screens. For one screen you need to update part of nametable when user press keys; for other you need to animate part of nametable; for other you need to update text sometimes (not every frame). You either need to make a general VRAM update system (not going to be fast because it is general), or make set of switchable NMI handlers. I suppose it is much more complex than separate loops for different parts of a game with VRAM-related code after a flag polling (nothing to switch, no need to move parts of related code in other place).
<br />
<br />Which advantages you see with moving all the VRAM updating code to NMI?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 28, 2011 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://wiki.nesdev.com/w/index.php/NMI_thread" class="postlink">This wiki page</a> should answer a few of your questions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jan 28, 2011 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It basically describes that I've meant under words 'a general VRAM update system'. Is there actual games that uses this method?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 28, 2011 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">You either need to make a general VRAM update system (not going to be fast because it is general), or make set of switchable NMI handlers.</div><br />I use both actually. My NMI first checks if the is a specialized routine defined, in which case it jumps to it. If there isn't, it just sets the good old flag to let the program know VBlank started (which means I can use the old "wait for VBlank" technique if I want to). In the specialized NMI I use for the main game, I used a slot system. So in addition to performing wat has to be done every frame (sprites, scrolling, etc), it also calls a number of updating routines defined in a list (the list was populated by the main game engine during the previous frame). Each of these routines performs a different task, like updating metatiles, patterns, palette, and so on.<br /><br />What I have is a bit more complex, but the typical NMI setup is pretty simple. I mean, this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GameLoop:<br /><br />&nbsp; &nbsp;;RUN GAME LOGIC<br /><br />&nbsp; &nbsp;;WAIT FOR THE NMI HANDLER TO FINISH<br /><br />&nbsp; &nbsp;jmp GameLoop<br /><br />NMI:<br /><br />&nbsp; &nbsp;;PERFORM PPU UPDATES<br /><br />&nbsp; &nbsp;rti</div><br />is hardly any more complex than this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GameLoop:<br /><br />&nbsp; &nbsp;;RUN GAME LOGIC<br /><br />&nbsp; &nbsp;;WAIT FOR VBLABK<br /><br />&nbsp; &nbsp;;PERFORM PPU UPDATES<br /><br />&nbsp; &nbsp;jmp GameLoop<br /><br />NMI:<br /><br />&nbsp; &nbsp;;INDICATE THAT VBLANK STARTED<br /><br />&nbsp; &nbsp;rti</div><br />Anf if you simply make <strong>JMP (NMIHandler)</strong> the first instruction in your NMI routine you can have as many different handlers as you like.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Which advantages you see with moving all the VRAM updating code to NMI?</div>
<br />If your program doesn't lag at all, ever, there's little advantage. But as programmers get better and start working on more complex games, chances are there will be lag at some points. In this case, the biggest advantage is that you get to pick what lags and what doesn't, because there is a piece of code that will run 50 or 60 times per second regardless of what happens.
<br />
<br />You mentioned how weird the music sounds when you miss updates... And what happens to a status bar when you miss the split point because of lag is catastrophic, it can even lock the game up in certain cases. So it's important that you have a way to perform these critical operations no matter what, and the NMI gives you that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jan 28, 2011 1:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In your example there is just GameLoop, but actual game could have many loops (one for menu, other for game, other for pause, other for a cutscene). I think that this is where things turns to be more complex with VRAM update code in NMI, with switchable handlers or general update system you need more code to do the same.
<br />
<br />Raster effects like splits are special case, I think - if game could lag, and no scanline IRQ available, there is just no other way than use NMI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 28, 2011 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">In your example there is just GameLoop, but actual game could have many loops (one for menu, other for game, other for pause, other for a cutscene).</div><br />But just like you might need specialized NMI handlers, wouldn't you have all these different kinds of updates next to their respective loops if you used the "newbie-friendly" method? I mean, if inside every loop you have a different code for PPU updates, how's that any different from having all of that as separate NMI handlers? It's practically the same amount of code, it's just ordered differently.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">with switchable handlers or general update system you need more code to do the same.</div>
<br />That might be the case with a general update system, but for switchable handlers, I fail to see how this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Loop1:<br />&nbsp; &nbsp;;RUN FRAME LOGIC FOR LOOP 1;<br />&nbsp; &nbsp;;WAIT FOR VBLANK;<br />&nbsp; &nbsp;;PPU UPDATES EXCLUSIVE TO LOOP 1;<br />&nbsp; &nbsp;jmp Loop1<br /><br />Loop2:<br />&nbsp; &nbsp;;RUN FRAME LOGIC FOR LOOP 2;<br />&nbsp; &nbsp;;WAIT FOR VBLANK;<br />&nbsp; &nbsp;;PPU UPDATES EXCLUSIVE TO LOOP 2;<br />&nbsp; &nbsp;jmp Loop2<br /><br />NMI:<br />&nbsp; &nbsp;;INDICATE THAT VBLANK STARTED<br />&nbsp; &nbsp;;rti</div><br />is significantly simpler or any more efficient than this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Loop1:<br />&nbsp; &nbsp;;RUN FRAME LOGIC FOR LOOP 1;<br />&nbsp; &nbsp;;WAIT FOR THE NMI HANDLER TO FINISH;<br />&nbsp; &nbsp;jmp Loop1<br /><br />Loop1NMI:<br />&nbsp; &nbsp;;PPU UPDATES EXCLUSIVE TO LOOP 1;<br />&nbsp; &nbsp;rti<br /><br />Loop2:<br />&nbsp; &nbsp;;RUN FRAME LOGIC FOR LOOP 2;<br />&nbsp; &nbsp;;WAIT FOR THE NMI HANDLER TO FINISH;<br />&nbsp; &nbsp;jmp Loop2<br /><br />Loop2NMI:<br />&nbsp; &nbsp;;PPU UPDATES EXCLUSIVE TO LOOP 2;<br />&nbsp; &nbsp;rti<br /><br />NMI:<br />&nbsp; &nbsp;;JUMP TO CURRENT NMI HANDLER;</div><br />It's practically the same code, it's just ordered differently. The only real overhead to the switchable NMIs is that you have to setup the pointer to the NMI handler, but that's something you can do once and really quickly during the initialization phase of each loop, and the stability you get more than makes up for that IMO. You can even reuse NMI handlers if different loops need similar kinds of updates. And like I said, you don't even have to sacrifice the other technique, you can use both. Here's the NMI routine I use in my game:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI:<br /><br />&nbsp; &nbsp;;branch if the program is just waiting for VBlank<br />&nbsp; &nbsp;bit WaitingVBlank<br />&nbsp; &nbsp;bmi +FlipFlag<br /><br />&nbsp; &nbsp;;branch if there is no custom interrupt routine defined<br />&nbsp; &nbsp;bit CustomNMI+1<br />&nbsp; &nbsp;bpl +Return<br /><br />&nbsp; &nbsp;;transfer control to the the custom routine<br />&nbsp; &nbsp;jmp &#40;CustomNMI&#41;<br /><br />+FlipFlag:<br /><br />&nbsp; &nbsp;;indicate that the interrupt happened<br />&nbsp; &nbsp;inc WaitingVBlank<br /><br />+Return:<br /><br />&nbsp; &nbsp;;return from the interrupt<br />&nbsp; &nbsp;rti</div><br /><br />I can either define custom NMI handlers for each section of my game, or wait for VBlank with this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;dec WaitingVBlank<br />-&nbsp; &nbsp;bit WaitingVBlank<br />&nbsp; &nbsp;bmi -</div>
<br />And I can even do that while a custom handler is still defined, as this flag is checked first, so it takes precedence over the custom handler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jan 28, 2011 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">if inside every loop you have a different code for PPU updates, how's that any different from having all of that as separate NMI handlers? It's practically the same amount of code, it's just ordered differently.</div>
<br />That's it, code located in other place. Drawback is that it makes code more difficult to mantain when you have a lot of t - look here for one part of a single thing, look there for other part, try to find related code in thousands of lines in few files, etc.
<br />
<br />If you use general VRAM update code, instead of straightforward VRAM update code pieces you have update setup code and (that's the overhead) the update code in NMI. Drawback here is that you need to design that system and always remember how it works, it is additional layer of complexity.
<br />
<br />If you have switching handlers or pointers, there is not only some code to switch them (not much), but also need to switch them safely. Otherwise you can have wrong handler for a moment, or even non-existant handler address (updated LSB, NMI happened, crash). It could be source of weird bugs.
<br />
<br />What I'm telling is not that this approach, with different handlers or general update code, is wrong, or bad, etc. I just think it is more complex.
<br />
<br />Anyway, I got idea that you prefer NMI way. I would like to hear what others use and what commercial games used (if someone examined them) - to get idea what is common, what is not, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 28, 2011 2:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Anyway, I got idea that you prefer NMI way.</div><br />Sure do! <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I would like to hear what others use</div><br />I believe most just wait for VBlank, as that's what all beginner tutorials seem to use (and many beginners end up polling $2002 instead of using NMIs to wait for VBlank, because a lot of old tutorials were made before we knew that frames can be missed that way). Most homebrew projects released so far don't even need very complex game logic, so many developers don't even realize that bad things could happen if there was any lag.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and what commercial games used (if someone examined them) - to get idea what is common, what is not, etc.</div>
<br />I think most commercial games use the NMI for PPU updates and critical things that can't lag, with a few earlier games (like, before 1989) having everything inside the NMI (which has the same shortcomings of waiting for VBlank in case there is lag). I'm not aware of any commercial games "waiting for VBlank" like many homebrewers do, but there probably are some. Let's see what others have to say.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>