<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Standardizing 6502-style SPC700 syntax</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Standardizing 6502-style SPC700 syntax</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10986">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10986</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Feb 05, 2014 3:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is one &quot;official&quot; syntax for SPC700 opcodes, which Sony allegedly made to hide the fact that there's a 6502 struggling to get out. There have been several attempts to adapt 6502-like mnemonics for the SPC700, such as byuu's <a href="http://forums.nesdev.com/viewtopic.php?p=121599#p121599" class="postlink">bass</a> and blargg's <a href="http://forums.nesdev.com/viewtopic.php?p=121690#p121690" class="postlink">macro pack</a>, which use slightly different syntax. In order to promote sharing of applicable code between NES and Super NES music engines, I'd recommend standardizing 6502-style assembly syntax as <a href="http://forums.nesdev.com/viewtopic.php?p=125061#p125061" class="postlink">byuu suggested</a>. A different syntax for the basic instructions in each assembler makes it harder to move code from one assembler to another or even to read code that someone else posted to a forum or pastebin. I'd like to get as many SNES developer and music hacking communities as possible to join in this standardization effort so that all views can be represented.<br /><br />My goal is to be able to share as much code as possible between an NES game and the Super NES port of the same game, on the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" class="postlink">principle of not repeating oneself</a>. Anything that the NES and Super NES versions share would be written in plain 6502 mnemonics, and anything specific to the Super NES could use 65816 or SPC700 instructions. A music engine, for instance, can be divided into music sequence interpretation (which should be shared) and instrument playing (which obviously can't be shared because the 2A03 PSG is not the S-DSP). Sharing code allows a bug fix or feature addition to propagate to the other platform. But anything not shared can use the extra instructions.<br /><br />Another goal is to ease 6502 and 65816 programmers into SPC700 more gently, even if they're making Super NES-exclusive projects. I prefer to try to make the world a better place by avoiding or correcting misfortunes instead of blindly submitting to them.<br /><br />First off, what assemblers support SPC700-in-drag? And what are the differences among their syntaxes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 05, 2014 8:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm assuming that the common 6502 instructions will have 6502 syntax. Is the goal to make up new three-character 6502-like mnemonics for all non-6502 instructions, so that one can take full advantage of the instruction set without ever using the official syntax? In my own code using the macro pack I've mostly used 6502, with some SPC-700-specific instructions occasionally. For some test code I've stuck to SPC-700 only, for clarity.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Feb 05, 2014 10:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Reply to message from <a href="http://forums.nesdev.com/viewtopic.php?p=125061#p125061" class="postlink">Why no SNES homebrew scene?</a><br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Well right off the bat, I offered to work on a consensus, but blargg already went his own way with his project. Given it had slightly different goals, but not a good omen.</div><br />I went back and found the message and I had never seen it, or it appeared to just be a pitch for your assembler at the time.<br /><br />So far I've done two things, which don't seem to preclude anything you and tepples are talking about&#058; I made a macro package that accepts standard SPC-700 syntax. I made another optional macro package that accepts the subset of 6502 instructions that have essentially direct equivalents (slight differences, e.g. PUSH PSW doesn't have all the exact same flags on the stack, POP A needs a comparison with zero afterwards to implement PLA). This macro package works with the first so that the standard SPC-700 syntax is still fully-supported. Thus, unless your proposal suggests to make the 6502 instructions behave differently (which would seem to break 6502 code reassembled with this), it is a compatible extension of what I've done.<br /><br />I made a specific point to not innovate anything in these macro packages. I had to make a concession with direct versus absolute addressing, due to the lack of a macro to differentiate and the conflicting approaches for 6502 and SPC-700 and that they share some mnemonics. My thought was that it should either consistently use direct-page where possible, or require the user to do it manually. Since the former can't be done, I chose the latter, rather than inconsistent behavior.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For what it's worth, I am open to changing my SPC700-6502 syntax if anyone wants to discuss it. There's some really hairy issues, like two-operand opcodes that the 65816 lacks (which is a problem as 65816 already uses , for + for some mindfucked reason), and some interesting problems like &quot;ora&quot; not really applying to the non-A or modes (eg or carry and or bit), which is inconsistent with &quot;and&quot; that is the same for carry and bit.</div><br />I have little interest in trying to make custom 6502-like mnemonics for SPC-700 instructions, so you'll have no differing opinions on how it should be done. If there are current incompatibilities with my 6502 macro pack, I'd be fine getting that fixed.<br /><br />EDIT: additions<br /><br />I just looked at some of your SPC-700 instructions in 6502 clothing and I'm wondering what the benefit is. For a 6502 programmer using the SPC-700, you'll have to learn new mnemonics either way, so why not learn SPC-700 ones for non-6052 operations?<br /><br />This highlights that making a 6502-like instruction set is yet a third distinct macro pack project. The first allows SPC-700 on ca65. The second allows common 6502 code shared between a 65xx and SPC-700, or just more familiar coding most of the time. The third that's being discussed here is a new instruction set that's 6502-like for 6502 programmers to learn instead of SPC-700. It's designed to be familiar. It's a new language so besides being familiar to a 6502 programmer, it doesn't give any benefits over using SPC-700 assembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Feb 06, 2014 2:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, like I said, some major goal differences separate us on the SPC700.<br /><br />Yes, when it comes to things like pla acting differently on flags between the processors, I don't attempt to compensate. It has to be a 1:1 mapping for a debugger/tracer to work with it. But then &quot;pop a&quot; really doesn't tell you that the flags are different from 65816's &quot;pla&quot;, either. You still have to learn to work with the chip you are on.<br /><br />The benefit to me is that SPC700 syntax is awful. Really awful. It looks ugly, and it takes me longer to visually parse out &quot;mov x,y&quot; than &quot;txy&quot;<br /><br />The 65816-like syntax is nearly twice as compact while accomplishing the same thing, and avoids the nasty &quot;src,dest&quot; vs &quot;dest,src&quot; confusion. That's a real problem for me because I hop between lots of assembly languages all the time: x86/amd64, ARM, SPC700, 65816, 6502, GBZ80, HG51B, NEC uPD, GSU1, etc. Have also done minor stuff in MIPS, SPARC and PPC.<br /><br />But yes, it also requires making 6502-analogues for the SPC700-only instructions. And those instructions definitely deviate strongly from a traditional 6502.<br /><br />If you really see no value in what I'm trying to do, then I suppose we can at least classify your pack and my table as separate goals. I don't think there's too much overlap. I'm not trying to have 100% portable code between 6502 and SPC700. I'm trying to make reading and writing SPC700 more bearable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Feb 06, 2014 7:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The very title of this thread (Standardizing 6502-style SPC700 syntax) is self-contradictory. You want to standardize something which is inherently non-standard.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 06, 2014 7:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CMOS. CMOS run.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I see two separate goals: covering all instructions with a self-consistent set of mnemonics and allowing code sharing. I'd say that if an SPC700 instruction also exists on 65C02, 65816, or HuC6280 (such as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">txy</tt>), use the mnemonic from that CPU. That might mean exceeding 3 characters for things like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">smb3</tt>.<br /><br />Bregalad: Standardizing need not involve ISO, IEC, ITU, IEEE, Ecma, or any comparable organization. It can also mean &quot;creating a parallel community practice that will be treated as a standard by the community&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Thu Feb 06, 2014 7:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CMOS. CMOS run.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It can also mean &quot;creating a parallel community practice that will be treated as a standard by the community&quot;.</div><br />Oh the <a href="http://xkcd.com/927/" class="postlink">xkcd</a> of it all.   <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 06, 2014 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Which is why we need to get as many of the 14 standards' stakeholders on board as possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Feb 06, 2014 10:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not going to say &quot;absolutely not&quot; to four-letter opcodes, but I'd really like to avoid it if possible.<br /><br />Definitely many opcodes where it'd help a lot, had to make dbnz &lt;label&gt; into bne --y=label. There's no three-letter abbreviation for &quot;decrement and branch if not zero&quot; which makes sense, so we have to express the decrement behavior in the operand section.<br /><br />But I'm a really, really big fan of the visual symmetry that equally sized opcodes adds. It's one of my favorite features of 6502 syntax.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 06, 2014 11:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />DBNZ and CBNE appear to be literally just macros for a DEC, DEY, or CMP followed by a BNE. A disassembler could just treat it as one opcode that expands to two instructions, which would cause a problem for the assembler. The 6502 assembler would want to emit two instructions, while the SPC700 assembler would emit one.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; dey bne label<br />&nbsp; dec dd bne label<br />&nbsp; cmp dd bne label<br />&nbsp; cmp dd,x bne label</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Feb 06, 2014 1:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Yeah, like I said, some major goal differences separate us on the SPC700.</div><br />You keep framing these differences as separation, conflict, but I'm not understanding where the conflict is.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Yes, when it comes to things like pla acting differently on flags between the processors, I don't attempt to compensate. It has to be a 1:1 mapping for a debugger/tracer to work with it.</div><br />Even with this 1:1 mapping it just means that a PLA will show up on yours as PLA; AND #$FF. It seems that the way to think about this is not that with my sp65c02 macro pack its meaning of PLA is differeny, but that its PLA is a macro that expands to (the real) PLA; AND #$FF (since the point of the macro pack is to share code between this and 6502).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The benefit to me is that SPC700 syntax is awful. Really awful. It looks ugly, and it takes me longer to visually parse out &quot;mov x,y&quot; than &quot;txy&quot;</div><br />nocash uses traditional OPERATION OPERAND [,OPERAND...] syntax for 6502, because it's beneficial to him, and there's no conflict, because he can use his, you can use yours, I can use mine, tepples can use his, etc.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But yes, it also requires making 6502-analogues for the SPC700-only instructions. And those instructions definitely deviate strongly from a traditional 6502.<br /><br />If you really see no value in what I'm trying to do, then I suppose we can at least classify your pack and my table as separate goals.</div><br />I don't understand the implicication that we have to have the same values, goals, and do things the same way. So what if I see little value <em>to me</em> in making 65xx-style syntax for all instructions? It doesn't matter what I think regarding its value to you and others that like 65xx-style syntax and are able to code more quickly in it. It's not like I'm going to try to stop you or try to make it difficult for my macros to work with yours.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't think there's too much overlap. I'm not trying to have 100% portable code between 6502 and SPC700. I'm trying to make reading and writing SPC700 more bearable.</div><br />Yes, exactly as I understand it.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The very title of this thread (Standardizing 6502-style SPC700 syntax) is self-contradictory. You want to standardize something which is inherently non-standard.</div><br />Actually, it's people in a community wanting to make an intentional shared language that attempts to meet everyone's needs, rather than each person doing their own thing and having multiple incompatible variations that hamper code sharing and learning.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">So I see two separate goals: covering all instructions with a self-consistent set of mnemonics and allowing code sharing. I'd say that if an SPC700 instruction also exists on 65C02, 65816, or HuC6280 (such as txy), use the mnemonic from that CPU. That might mean exceeding 3 characters for things like smb3.</div><br />Yeah, when I saw TSB in byuu's 65xx-style SPC-700 instruction list, I thought of HuC6280 and how ones like that would be a good source for ideas and &quot;closer&quot; adherence to 65xx.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">DBNZ and CBNE appear to be literally just macros for a DEC, DEY, or CMP followed by a BNE. A disassembler could just treat it as one opcode that expands to two instructions, which would cause a problem for the assembler. The 6502 assembler would want to emit two instructions, while the SPC700 assembler would emit one.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; dey bne label<br />&nbsp; dec dd bne label<br />&nbsp; cmp dd bne label<br />&nbsp; cmp dd,x bne label</div></div><br />That's an interesting solution. Why would a 6502 assembler be a problem, since this code isn't meant for 6502 assembly in the first place?<br /><br />if you're suggesting that the macro pack for shared code between 6502 and SPC-700 support this, I don't think it results in any speedup, just a savings of one byte, so it's pretty underwhelming.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Feb 06, 2014 4:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; You keep framing these differences as separation, conflict, but I'm not understanding where the conflict is.<br /><br />They're different. If one writes code for one, it either won't work or will be behave differently in the other. Eg my pla won't set flags as yours will. Yours will reject my version of dbnz.<br /><br />But believe me, I'm very, very well acquainted with the idea of having different implementation styles for different purposes. I make my own everything, just about. XML-&gt;BML, IPS-&gt;BPS, Snes9X-&gt;bsnes, pth-&gt;libco, Qt-&gt;phoenix, SDL-&gt;ruby, boost/zlib/libpng-&gt;nall, iNES-&gt;manifests, etc.<br /><br />It's just, you know, kind of the reason tepples made this thread was to discuss a unified syntax. I'm always open to the idea of changing my design when people raise good points, so I don't mind this discussion even if nothing comes of it. But I'm also not going to let it stop me from trying out my idea, either.<br /><br />&gt; Actually, it's people in a community wanting to make an intentional shared language that attempts to meet everyone's needs, rather than each person doing their own thing and having multiple incompatible variations that hamper code sharing and learning.<br /><br />You see, you just say you don't get it, and then you respond showing that you do get it. That's why tepples made the thread, and I'm happy to at least make an attempt to collaborate and compromise, different goals be damned. If nobody else wants to compromise on their different goals, then that basically just proves the original point I was making in the other thread. It's like herding cats.<br /><br />Am I all for a universal goal? You bet. Is there a rat's chance in hell of that happening? Nope. And that's fine, it's to be expected.<br /><br />That said, even if we can't come to an agreement, I am sure if we listen to each other we can at least each improve our own implementations.<br /><br />&gt; Yeah, when I saw TSB in byuu's 65xx-style SPC-700 instruction list, I thought of HuC6280 and how ones like that would be a good source for ideas and &quot;closer&quot; adherence to 65xx.<br /><br />Heh, I took TSB from the 65816. Good idea though to look at other 6502 derivatives like HuC for inspiration. I think I'll do just that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Feb 06, 2014 5:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />byuu, your messages to me here and in the other thread have been hurtful and I dread them. I'd really appreciate if you could stick to the technical arguments. You keep lamenting about how things can't happen, and these negative predictions are detrimental to me even participating at this point. I'm trying to understand the situation and offer my ideas, but I don't want to get attacked for misunderstanding or asking for clarification.<br /><br />The topic here is syntax, which I understand to be the characters you enter into an assembler source file.<br /><br />As I understand it, the goal here is to create a 65xx-style syntax for all SPC-700 instructions.<br /><br />I'm not clear on how this relates to 6502 code and SPC-700 code using official syntax. From what I can tell, one can port 6502 code to this new ISA. One can also write fresh code with this new ISA as well. Am I on track so far?<br /><br />From what you've said, this new ISA doesn't aim for compatibility with 65xx, only a similar style of instructions. Thus, it's not 6502 (semantic differences) and it's not official SPC-700 (syntactic differences). Am I following correctly here?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 06, 2014 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's easier to discuss semantic differences between similar syntaxes if the disputed semantics are right in front of us. Apart from anything related to decimal mode or interrupts, what are all the semantic differences between SPC instructions and corresponding instructions of the 65C02?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Feb 06, 2014 6:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Standardizing 6502-style SPC700 syntax</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />* POP A, POP X, and POP Y don't affect the flags.<br /><br />* RET doesn't increment the return address by one as on the 65C02, and likewise CALL pushes the address of the opcode of the next instruction.<br /><br />* The N, V, Z, and C flags are set the same for all supported instructions, including in the same bit positions for PUSH PSW etc. but the other flags differ.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>