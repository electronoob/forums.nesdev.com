<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9117" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-07-25T15:14:01-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9117</id>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-07-25T15:14:01-07:00</updated>
<published>2012-07-25T15:14:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97119#p97119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97119#p97119"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97119#p97119"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />What I tend to do is define procedure-local symbols at the start of each procedure:<br /></div><br />Or you could do the possibly more readable/maintainable:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc something_or_other<br />.enum<br />  src     .word<br />  srcLeft .byte<br />  dst     .word<br />.endenum<br />  lda #&lt;SRAM_BGCHR<br />  sta src+0<br />  lda #&gt;SRAM_BGCHR<br />  sta src+1<br />  lda #$10<br />  sta srcLeft<br />  ; etc.<br />  rts<br />.endproc</div><br />Be careful to not run in to <a href="http://nesdev.com/bbs/viewtopic.php?t=9110" class="postlink">this quirk</a> though.<br /><br />If you name the .enum you can also add an .assert to make sure its size is never more than 16 bytes, but then you'll have to use enum_name::foo to refer to the .enum members.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Jul 25, 2012 3:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-25T09:31:58-07:00</updated>
<published>2012-07-25T09:31:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97111#p97111</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97111#p97111"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97111#p97111"><![CDATA[
I see, thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Wed Jul 25, 2012 9:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-07-25T07:10:12-07:00</updated>
<published>2012-07-25T07:10:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97103#p97103</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97103#p97103"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97103#p97103"><![CDATA[
<div class="quotetitle">Movax12 wrote:</div><div class="quotecontent"><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">..you really should stop using memory addresses ($700, $E, $F, etc) directly, and use symbols instead.<br /></div><br />I will for sure, $0700 should be labelled, but I like using 0-$F as temp variables.. do they need a better name? (ex: temp1, temp2, temp3) I know what they are. This stems from using Tepple's nes.ini which has zeropage starting at $10 and using 0-$F as temp.. I liked the idea.</div><br />What I tend to do is define procedure-local symbols at the start of each procedure:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc something_or_other<br />src = 0<br />srcLeft = 2<br />dst = 3<br />  lda #&lt;SRAM_BGCHR<br />  sta src+0<br />  lda #&gt;SRAM_BGCHR<br />  sta src+1<br />  lda #$10<br />  sta srcLeft<br />  ; etc.<br />  rts<br />.endproc</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Jul 25, 2012 7:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-24T21:18:45-07:00</updated>
<published>2012-07-24T21:18:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97095#p97095</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97095#p97095"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97095#p97095"><![CDATA[
Is it specific to C? I can be pedantic too, so I don't want to be wrong. I assumed it was just the idea of jumping into the middle of an unrolled loop to make up the remainder of transfers. (Reading Wikipedia..) <br /><br />Wikipedia does say that it was a technique used in assembly and Duff simply implemented it in C, so I guess you are right, but it seems maybe one of those things that the definition changes with time to apply to other things.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />..you really should stop using memory addresses ($700, $E, $F, etc) directly, and use symbols instead.<br /></div><br /><br />I will for sure, $0700 should be labelled, but I like using 0-$F as temp variables.. do they need a better name? (ex: temp1, temp2, temp3) I know what they are. This stems from using Tepple's nes.ini which has zeropage starting at $10 and using 0-$F as temp.. I liked the idea.<br /><br />There are many more cycles to be saved.. I'll probably post better code sometime soon.<br /><br />EDIT: new code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />RAM_SUB = $0700<br />   <br />.segment &quot;CODE&quot;<br /><br />.proc PPU_Transfer<br /><br />.segment &quot;ZEROPAGE&quot;<br />save_stack:   .res   1<br /><br />.segment &quot;CODE&quot;<br /><br />   tsx   <br />   stx save_stack      ; save real stack<br />   ldx #$FF               ; start pulling data from $0100<br />   txs<br />        clv<br />   bvc   :++               ; branch always<br />:   sta PPU_ADDRESS<br />   pla<br />   sta PPU_ADDRESS<br />   pla                     ; Size, high nybble<br />   tax<br />   pla                     ; value for branch in RAM, precaclulated<br />   sta RAM_SUB + 1      <br />   jmp RAM_SUB<br />return_main:   <br />:   pla                   <br />   bpl   :--               ; if plus, valid ppu address, continue<br />   ldx save_stack      ; or not, exit<br />   txs<br />   rts<br />.endproc<br /><br /> .segment &quot;RODATA&quot;<br /> <br />.proc duff_copy_ram_code<br />      <br />   bvc jump_in  <br />   <br />   copy:<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />   jump_in:<br />      dex<br />      bpl   copy<br />      <br />      jmp PPU_Transfer::return_main<br />duff_copy_ram_code_end:<br />.endproc<br /><br />.segment &quot;CODE&quot;<br /><br />.proc setup_duff_copy<br /><br />   ldx #0<br />   @loop:<br />      lda duff_copy_ram_code,x<br />      sta $0700,x<br />      inx<br />      cpx #duff_copy_ram_code::duff_copy_ram_code_end - duff_copy_ram_code<br />   bne @loop<br />   rts<br />.endproc<br /></div><br /><br />Calling code just does: jsr PPU_Transfer<br /><br />(edit: small code fix..)<br /><br />edit: Some testing: I can copy 160 bytes in about 1600 cycles, 5 separate transfers in the stack.<br /><br />This is perfect, I think I'm done. I need ideas on how to calculate the two bytes after the PPU Address though. The code expects the high nibble of the count, and the offest into the loop (Original branch address - low nibble * 4). How to calculate that in game code?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Tue Jul 24, 2012 9:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2012-07-24T17:20:03-07:00</updated>
<published>2012-07-24T17:20:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97091#p97091</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97091#p97091"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97091#p97091"><![CDATA[
I like this thread, as it's a very worthy topic, but I just thought I'd clarify: Duff's Device is a C language construct; there is no Duff's Device in assembly. This is just loop unrolling.<br /><br />The stuff we are discussing has not much to do with Duff's Device except Duff's Device is a clever way to write an unrolled loop in C.<br /><br />Anyhow, sorry to be pedantic, just it seems like people think Duff invented the unrolled loop or something. Please continue.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Tue Jul 24, 2012 5:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-07-24T16:08:58-07:00</updated>
<published>2012-07-24T16:08:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97089#p97089</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97089#p97089"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97089#p97089"><![CDATA[
The code is fine, I have a very similar routine in my own code, but you really should stop using memory addresses ($700, $E, $F, etc) directly, and use symbols instead.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Tue Jul 24, 2012 4:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-24T10:39:38-07:00</updated>
<published>2012-07-24T10:39:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97086#p97086</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97086#p97086"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97086#p97086"><![CDATA[
I kind of like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;RODATA&quot;<br /> <br />duff_copy_ram_code:<br />   tsx<br />   stx $E; save stack <br />   ldx $F; load fake stack<br />   txs<br />   <br />   ldx 2<br /><br />   clv<br />   <br />   duff_branch_value: <br />   <br />   bvc jump_in <br />   <br />   copy:<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />   jump_in:<br />      dex<br />      bpl   copy<br />      <br />      tsx<br />      stx $F<br />      ldx $E<br />      txs<br />      <br />   <br />      rts      <br />duff_copy_ram_code_end:<br />   <br />.segment &quot;CODE&quot;<br /><br /><br />.proc duff_copy ; reg.a has count<br /><br />   <br />   tay         ; this can be done before and saved to stack data but will use one more byte<br />   lsr a<br />   lsr a<br />   lsr a<br />   lsr a                  <br />   sta 2<br />   tya<br />   and #$0F<br />   asl<br />   asl<br />   sta 1<br />   <br />   lda duff_branch_value+1<br />   sec<br />   sbc 1<br />   sta $0700 + &#40;duff_branch_value+1 - duff_copy_ram_code&#41;<br />   <br />   jsr $0700<br /><br />   rts<br />.endproc<br /><br />.proc setup_duff_copy<br /><br />   ldx #0<br />   @loop:<br />      lda duff_copy_ram_code,x<br />      sta $0700,x<br />      inx<br />      cpx # duff_copy_ram_code_end - duff_copy_ram_code<br />   bne @loop<br />   rts<br />.endproc<br /></div><br /><br />Calling code has something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr setup_duff_copy<br />;start PPU transfer<br />ldx $F ;fake stack<br />txs<br />pla<br />sta PPU_ADDRESS<br />pla<br />sta PPU_ADDRESS<br />pla<br />   <br />tsx<br />stx $F ;save fake stack<br /><br />ldx $E      ;real stack<br />txs<br />jsr duff_copy<br /></div><br /><br />A bit more tweaking, but I think I'm going to go with this, hope someone finds this interesting/useful.<br /><br />edit: minor change<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Tue Jul 24, 2012 10:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-07-24T09:33:46-07:00</updated>
<published>2012-07-24T09:33:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97083#p97083</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97083#p97083"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97083#p97083"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It does do that.<br /></div><br />I apologize, I was just being blind ^_^<br /><br />And yeah jmp is basically your branch always instruction... However in some cases you can optimizes it and use a SP flag which is in a known state to branch always.<br />For example if you know C is always going to be clear a a point of your code, you can optimize jmp in bcc and it takes only a single byte.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jul 24, 2012 9:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-24T08:47:37-07:00</updated>
<published>2012-07-24T08:47:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97082#p97082</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97082#p97082"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97082#p97082"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />..you should probably add  a loop arround the long pla/sta chain. For example if the chain transfer 16 ($10) bytes and that you want to transfer $25 bytes, you just execute the last 5 iterations of the chain, then you do the entire loop 2 times.<br /></div><br /><br />It does do that. <br />I had read that battletoads (I think it was) uses the PLA STA PPU_DATA pair, but I did come up with this code myself, I don't know how similar it is to code that exists. I do want to make it faster, but probably avoid placing code in RAM if possible. I think approach is fast enough for me, at least for now.<br /><br />It would be nice to just have a branch (always) instruction and modify the branch value, so I might go with RAM code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Tue Jul 24, 2012 8:47 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-07-24T08:23:13-07:00</updated>
<published>2012-07-24T08:23:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97079#p97079</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97079#p97079"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97079#p97079"><![CDATA[
Ah, the good old Battletoad's technique to transfer data faster to VRAM.  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br />The solution to use a jump table to change how many bytes are transfered is elegant, too, but here it seems the maximum number of bytes you can transfer is pretty low, you should probably add  a loop arround the long pla/sta chain. For example if the chain transfer 16 ($10) bytes and that you want to transfer $25 bytes, you just execute the last 5 iterations of the chain, then you do the entire loop 2 times.<br /><br />Also it would be an idea to have the chain generated automatically in RAM that way it doesn't waste ROM, and the jump address will be simpler to compute, as you could only compute the low byte, the high byte being constant.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Jul 24, 2012 8:23 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-24T06:48:01-07:00</updated>
<published>2012-07-24T06:48:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97074#p97074</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97074#p97074"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97074#p97074"><![CDATA[
I guess so.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc duff_copy ; reg.a has count<br /><br />.segment &quot;RODATA&quot;<br /><br />jump_in_table:<br />.word jump_in,jump_in-4,jump_in-8,jump_in-12,jump_in-16,jump_in-20,jump_in-24,jump_in-28,jump_in-32<br />.word jump_in-36,jump_in-40,jump_in-44,jump_in-48,jump_in-52,jump_in-56,jump_in-60<br /><br />.segment &quot;CODE&quot;<br />   ; split a into high low nybble:<br />   <br />   tsx<br />   stx $E; save stack <br />   ldx $F; load fake stack<br />   txs<br />    <br />   <br />   tay<br />   lsr a<br />   lsr a<br />   lsr a<br />   lsr a                  <br />   sta 2<br />   tya<br />   and #$0F<br />   asl<br />   tax<br />   <br />   <br />   lda jump_in_table+1,x<br />   sta 4<br />   lda jump_in_table,x<br />   sta 3<br />   jmp &#40;3&#41;<br />   <br />   copy:<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />   jump_in:<br />      dec 2<br />      bpl   copy<br />      <br />      tsx<br />      stx   $F<br />      ldx $E<br />      txs<br />      <br />      rts      <br />.endproc<br /></div><br /><br />Room for improvement, maybe right in the stack data, but here is one minor change.. if it is actually faster I didn't check, but it could be done before this routine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Tue Jul 24, 2012 6:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-07-24T00:22:53-07:00</updated>
<published>2012-07-24T00:22:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97070#p97070</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97070#p97070"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97070#p97070"><![CDATA[
You should pre-calculate whatever jump address and initial values you will use.  Then you can load a few registers and jump right in.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Jul 24, 2012 12:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-07-24T00:14:26-07:00</updated>
<published>2012-07-24T00:14:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97069#p97069</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97069#p97069"/>
<title type="html"><![CDATA[Duff's Device.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9117&amp;p=97069#p97069"><![CDATA[
Dunno if it the best code, more just wanted to practice some 6502, but here is a Duff's Device solution for loading PPU data. It expects that the address has been set and A holds the number of values to be copied from the (fake) stack.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc duff_copy ; reg.a has count<br />   <br />   tsx<br />   stx $E; save stack <br />   ldx $F; load fake stack<br />   txs<br />    <br />   ; split a into high low nybble:<br />   tax<br />   and #$0F<br />   asl<br />   asl<br />   sta 1                  ; low half  x 4<br />   txa<br />   lsr a<br />   lsr a<br />   lsr a<br />   lsr a                  <br />   sta 2                  ; high half<br />   <br />   lda #&lt;jump_in<br />   sec<br />   sbc 1                  ; subtract low nibble to find entry point<br />                           ; code must be aligned so that &lt;jump_in is greater than 15 * 4 &#40;which is 60&#41;<br />   sta 3                  ; 3+4 is indirect jump into loop<br />   lda #&gt;jump_in<br />   sta 4<br /><br />   jmp &#40;3&#41;<br />   <br />   copy:<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />      pla<br />      sta PPU_DATA<br />   jump_in:<br />      dec 2<br />      bpl   copy<br />      <br />      tsx<br />      stx   $F<br />      ldx $E<br />      txs<br />      <br />      rts      <br />.endproc<br /></div><br /><br />I don't like that the setup is so long, maybe room for improvment there.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Tue Jul 24, 2012 12:14 am</p><hr />
]]></content>
</entry>
</feed>