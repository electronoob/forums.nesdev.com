<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=15958" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2017-05-30T19:49:11-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=15958</id>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2017-05-30T19:49:11-07:00</updated>
<published>2017-05-30T19:49:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196969#p196969</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196969#p196969"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196969#p196969"><![CDATA[
When you're being a debugger, treating that as &quot;breakpoint, invoke debugger&quot; is gonna be preferable to &quot;crash&quot; or &quot;color a dinosaur&quot;.<br /><br />Tracelog-without-full-6502-core is the primary difficulty, but knowing where you hit a breakpoint doesn't require that at all.<br /><br /><span style="font-size: 60%; line-height: normal">How to deal with loading graphics of debugger, and where to map the code, are really more &quot;requires work&quot; than &quot;requires ideas&quot;.</span><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Tue May 30, 2017 7:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-30T19:30:43-07:00</updated>
<published>2017-05-30T19:30:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196968#p196968</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196968#p196968"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196968#p196968"><![CDATA[
I was more thinking &quot;fail hard and fast&quot; rather than &quot;fail soft and invisibly&quot;... the point being making the error Very Visible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue May 30, 2017 7:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2017-05-30T19:23:13-07:00</updated>
<published>2017-05-30T19:23:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196966#p196966</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196966#p196966"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196966#p196966"><![CDATA[
The point is to have the ability to tap the programmer's shoulder, not pull hm out of the fire.<br /><br />If you're doing that, then you might also forcibly stop any PPU.BG=master writes, and KIL opcodes…<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Tue May 30, 2017 7:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-30T19:16:30-07:00</updated>
<published>2017-05-30T19:16:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196964#p196964</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196964#p196964"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196964#p196964"><![CDATA[
<div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br />Keeping track of registers and scanline would allow flagging of mid-render PPU writes.<br /></div>... The bit where it's vaguely permissible to overpower the CPU's pullups mean you could find a mid-render $2007 write and move it to $2001...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue May 30, 2017 7:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2017-05-30T19:05:45-07:00</updated>
<published>2017-05-30T19:05:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196962#p196962</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196962#p196962"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196962#p196962"><![CDATA[
Keeping track of registers and scanline would allow flagging of mid-render PPU writes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Tue May 30, 2017 7:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-23T23:36:29-07:00</updated>
<published>2017-05-23T23:36:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196472#p196472</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196472#p196472"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196472#p196472"><![CDATA[
<div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent"><br />Tell on board CIC chip to Fail - thus forcing a RESET at some point<br />Bank in &quot;monitor/Freezer&quot; ROM <br />Wait for RESET Vector access<br />tell CIC to pass<br /></div>The motherboard's CIC will never stop the 1/2 second enabled 1/2 second hold in reset once the handshake fails, unfortunately.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue May 23, 2017 11:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2017-05-23T23:11:48-07:00</updated>
<published>2017-05-23T23:11:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196470#p196470</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196470#p196470"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196470#p196470"><![CDATA[
Other crazy idea... <br />You could use RESET in lieu of NMI as looking at the Schematic its not connected to the PPU... ALSO NOT ON THE CART EDGE!!!!!1111!!! 1<br /><br />Okay super crazy idea...<br />If one can make sure that BreakPoints are on instructions and if not, happy with &quot;weird stuff happens&quot;<br />Hit Break Address<br />Force Data Bus to $EA (nops)<br />Tell on board CIC chip to Fail - thus forcing a RESET at some point<br />Bank in &quot;monitor/Freezer&quot; ROM <br />Wait for RESET Vector access<br />tell CIC to pass<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Tue May 23, 2017 11:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2017-05-23T14:25:00-07:00</updated>
<published>2017-05-23T14:25:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196435#p196435</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196435#p196435"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196435#p196435"><![CDATA[
Yeah, I just keep the <a href="https://wiki.nesdev.com/w/index.php/Cartridge_connector" class="postlink">edge</a> bookmarked. Here's <br />So to go back to T₁ tracking…<br />keep track of instr. cycle (obviously)<br />a table of opcode=&gt;cycles (and which cycle is the data read, and whether optional fixup cycles)<br />fixup1: (izy | abx | aby) &amp; !Read (not RMW nor Write)<br />whch then requires X,Y to be tracked (and TAX/TAY require A to be tracked, adn ADC/SBC and ROR/ROL A require C to be tracked…but we're wanting to keep track of P anyway because…<br />fixup2: branches when taken, 2.branches when taken and pagecrossed<br />(we can do our own PC.low+arg ≥ $100 or read3[7] != PC[7] &amp;&amp; read3[0:6] != PC[0.6] (gotta not forget that -128 is an option) to see the latter one)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Tue May 23, 2017 2:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-23T10:14:47-07:00</updated>
<published>2017-05-23T10:14:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196400#p196400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196400#p196400"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196400#p196400"><![CDATA[
<div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent"><br />Which part of the EF3? The Action replay/Retro replay/Final Cart 3 emulation AKA Freezer Cartridges?<br /></div>Yeah, the freezer. At the cost of eating a pile of cycles, it should let you force the instruction phase to a known state from just the card edge. On the NES it does require that you use /IRQ and that the game permits IRQs, but.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />::looks up nes cart edge connector:: OH COME ON<br /></div>&lt;giggle&gt;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue May 23, 2017 10:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2017-05-23T04:12:39-07:00</updated>
<published>2017-05-23T04:12:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196385#p196385</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196385#p196385"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196385#p196385"><![CDATA[
<div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br />You don't have to drive R/W, don't have to drive CPU_data, can not compute high address byte (just a carry-into)…is Otten's core a complete, properly-functioning one? That post says many of the cores are still WIPs.<br /></div><br /><br />I don't know if it's been 100% audited, but I've noticed some people on 6502.org are using it in their projects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you tracelog one frame that would be about 117kB (if simply logging 4 bytes per frame) and that's reasonable, but can't be done on anything that exists (yet..!). I tend to think of this in terms of frames, because the NMI seems like an obvious entry/exit point.<br /></div>4 bytes per frame? do you mean, per branch? per PC-change? number seems to indicate per PC-change, including basic incrementation, including argument reads, which…why? It seems an exceptionally redundant<br /></div><br /><br />I meant to write 4 bytes per CPU cycle.  That would just be a log of everything like Oziphantom mentioned, CPU data, address, and R/W totals to 25 bits per cycle, padded into 4 bytes.  Then it would be up to the remote system to disassemble it.  This has the advantage of freeing up the FPGA for a bigger mapper, but I still prefer the cart to do more.  Plus a 6502-aware mapper could allow stuff like separate program and data banks, like the '816.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue May 23, 2017 4:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2017-05-23T01:39:02-07:00</updated>
<published>2017-05-23T01:39:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196376#p196376</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196376#p196376"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196376#p196376"><![CDATA[
Yeah, I though they put the Audio and Video in one chip so would have added an `AEC` ( or some other name ) as they have DMA <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> And the NES is after the MAX machine. But no they put it all inside and didn't put the signal on the cart so others could add extra DMA - disappointing, although very little use for DMA on a NES CPU side I guess, except to do this... and if they didn't put the audio on die we could drop a 6510 into the NES to get it GAHHHHHHHHHHHHH <br />Sorry I'm still stuck in the world of Commodore where you wanted you to be able to do things with their machines... <br /><br />Which part of the EF3? The Action replay/Retro replay/Final Cart 3 emulation AKA Freezer Cartridges? Or the Ultimax<sup>1</sup> mode KERNAL<sup>2</sup> SWAP? <br />The 64 is lucky as it has the VIC which will do a &quot;bad line&quot; and thus force BA/AEC lo for 40 clocks, which also handles the 3 clock delay. So you wait for the VIC to pull BA/AEC lo,  then you pull NMI lo, switch to Ultimax Mode which lets you replace the KERNAL ROM, which gives you control of the vectors. When the VIC releases BA/AEC the 6510 has to be in a read cycle and thus the NMI will be immediately taken. <br /><br />The 1541-11U+ has a lot more features, and does better take overs, DMA injection etc Gideon ( the designer of the 1541-11U ) made a PDF on his better take over findings here, <!-- m --><a class="postlink" href="http://rr.c64.org/rrwiki/images/6/67/Safely_freezing_the_c64.pdf">http://rr.c64.org/rrwiki/images/6/67/Sa ... he_c64.pdf</a><!-- m --> sadly they use the BA/AEC/DMA line which is missing on the NES <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /> <br /><br />There is an idea, if you want to step you could just force NMIs and take over with a ROM swap, taking care to note if there is a NMI on the bus that is not yours...looks up nes cart edge connector OH COME ON <br /><br /><span style="font-size: 85%; line-height: normal"><sup>1</sup>Ultimax mode is based upon the Commodore MAX machine, it places the C64 into a memory map of<br />0000-07FF RAM <br />0800-7FFF Open Bus<br />8000-9FFF 8K ROM<br />A000-CFFF Open Bus<br />D000-DFFF I/O<br />E000-FFFF 8K ROM<br /><br /><sup>2</sup>Somebody in Commodore marked a manual by mistake with KERNAL instead of KERNEL and well it stuck and was printed and became a &quot;standard&quot;</span><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Tue May 23, 2017 1:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2017-05-23T00:13:28-07:00</updated>
<published>2017-05-23T00:13:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196374#p196374</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196374#p196374"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196374#p196374"><![CDATA[
AEC isn't on the 6502 either, that's a 6510 addition. That's what I was talking about in the other thread about the difference between the VIC-20 and the C64. (The VIC-20 has the array of 74'245s to handle the equivalent functionality)<br />—<br />I was recently introduced to the C64's <a href="https://en.wikipedia.org/wiki/The_Final_Cartridge_III" class="postlink">Final Cartridge 3</a> which has a few neat tricks that <em>might</em> be useful? Maybe? Although I guess it basically boils down to &quot;trigger an IRQ or NMI, detect when the vector read happens, and intercept the handler&quot;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue May 23, 2017 12:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Oziphantom]]></name></author>
<updated>2017-05-22T23:36:31-07:00</updated>
<published>2017-05-22T23:36:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196372#p196372</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196372#p196372"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196372#p196372"><![CDATA[
<div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Surly it is connected to a PC of some sort to display said info<br /></div>THe idea was to not do that, but to create Powerpak firmware [etc.] that would allow the same sort of features as a debugging emulator without actually having to have any more hardware than that and your NES.<br /><br />That the design also work for an interposed GG-like device is a bonus.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />at which point the PC,R/W and data bus are all you need, were the PC could be encoded so that it only send the full 16bits if it is not a +1<br /></div>Program Counter is not a signal that leaves the CPU, AFAIK, only CPU_addr, which is a thing that can be loaded with the Program Counter. <br /><br />Also, you're using two different &quot;PC&quot; acronyms in the same post. Hazardous!</div><br />Yes I'm am using PC as the same as ADDR my bad. Sure but spend $5us and put a raspberry Zero on it, probably be a lot cheaper than any CPLD large enough to handle it, although it will need a power pack upgrade <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> OR keep a pet 6502 on board, if you drop the need for illigals the 65C02 would do, you can buy them new. Just user buffers to block its writes. although you would need to delay it properly during DMA... it really is damned if you do dammed if you don't.  Its always so annoying when you just need signal Y and it would be so easy to get, but they just don't give it to you isn't it... <br /><div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You can use the I switched from Write to Read, which says you are on an OpCode fetch<br /></div>I thought of that, but <a href="http://codebase64.org/doku.php?id=base:6510_instruction_timing#instructions_accessing_the_stack" class="postlink">nope.</a> IRQ/NMI/BRK/JSR are all counterexamples. (Someone have an actual IRQ cycle timing? 'cause obviously it's not going to advance past BRK and its &quot;argument&quot;…)</div>As far as I know, the IRQ/NMI is identical to BRK, they also take 7 clocks, but don't set B flag and don't increment the PC during the first 2 cycles,  and thus it is<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> BRK<br /><br />        #  address R/W description<br />       --- ------- --- -----------------------------------------------<br />        1    PC     R  fetch opcode, increment PC<br />        2    PC     R  read next instruction byte (and throw it away),<br />                       increment PC<br />        3  $0100,S  W  push PCH on stack, decrement S<br />        4  $0100,S  W  push PCL on stack, decrement S<br />        5  $0100,S  W  push P on stack (with B flag set), decrement S<br />        6   $FFFE   R  fetch PCL<br />        7   $FFFF   R  fetch PCH<br /><br /> IRQ/NMI<br /><br />        #  address R/W description<br />       --- ------- --- -----------------------------------------------<br />        1    PC     R  fetch opcode<br />        2    PC     R  fetch opcode<br />        3  $0100,S  W  push PCH on stack, decrement S<br />        4  $0100,S  W  push PCL on stack, decrement S<br />        5  $0100,S  W  push P on stack (with B flag clear), decrement S<br />        6   $FFFE   R  fetch PCL<br />        7   $FFFF   R  fetch PCH</div> For this case I was thinking the &quot;trap vector reads&quot; rule would kick in, but damn that JSR! Another horror case for the FSM is when the 6502 losses the NMI due to IRQ... <br /><div class="quotetitle">Myask wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However can you trap AEC on the cart,<br /></div>trap what?<br />You could detect DMA with just the RWRW alternation, as no 2-cycle instructions have a write. If you weren't just watching for $4014 writes, which is cheap enough if you're watching for $4016 write/reads to have a controller status to hook out to debugger from. (One probably wants to record all register accesses, anyway.)<br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />Not too long ago I also wanted to make a similar code/data discriminator fit in a CPLD, but I also hit that same brick wall of branches requiring that it know the status flags, which pretty much leads to emulating the whole 6502.<br /></div>You don't have to drive R/W, don't have to drive CPU_data, can not compute high address byte (just a carry-into)…is Otten's core a complete, properly-functioning one? That post says many of the cores are still WIPs.</div>Address Enable Control - its the line you use to Tri-state the CPU thus enabling you to perform DMA. Which I now see is not exposed on the NES..<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=8250">Oziphantom</a> — Mon May 22, 2017 11:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Myask]]></name></author>
<updated>2017-05-22T14:24:11-07:00</updated>
<published>2017-05-22T14:24:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196340#p196340</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196340#p196340"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196340#p196340"><![CDATA[
<div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent"><br />Surly it is connected to a PC of some sort to display said info<br /></div>THe idea was to not do that, but to create Powerpak firmware [etc.] that would allow the same sort of features as a debugging emulator without actually having to have any more hardware than that and your NES.<br /><br />That the design also work for an interposed GG-like device is a bonus.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />at which point the PC,R/W and data bus are all you need, were the PC could be encoded so that it only send the full 16bits if it is not a +1<br /></div>Program Counter is not a signal that leaves the CPU, AFAIK, only CPU_addr, which is a thing that can be loaded with the Program Counter. <br /><br />Also, you're using two different &quot;PC&quot; acronyms in the same post. Hazardous!<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />You can use the I switched from Write to Read, which says you are on an OpCode fetch<br /></div>I thought of that, but <a href="http://codebase64.org/doku.php?id=base:6510_instruction_timing#instructions_accessing_the_stack" class="postlink">nope.</a> IRQ/NMI/BRK/JSR are all counterexamples. (Someone have an actual IRQ cycle timing? 'cause obviously it's not going to advance past BRK and its &quot;argument&quot;…)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />However can you trap AEC on the cart,<br /></div>trap what?<br />You could detect DMA with just the RWRW alternation, as no 2-cycle instructions have a write. If you weren't just watching for $4014 writes, which is cheap enough if you're watching for $4016 write/reads to have a controller status to hook out to debugger from. (One probably wants to record all register accesses, anyway.)<br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />Not too long ago I also wanted to make a similar code/data discriminator fit in a CPLD, but I also hit that same brick wall of branches requiring that it know the status flags, which pretty much leads to emulating the whole 6502.<br /></div>You don't have to drive R/W, don't have to drive CPU_data, can not compute high address byte (just a carry-into)…is Otten's core a complete, properly-functioning one? That post says many of the cores are still WIPs.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If the cartridge was able to know which fetch is an opcode, assuming it's not running from internal RAM, then you could instead feed it a JMP or something into your own single-stepping code.<br /></div> This is one of the best reasons for pre-knowing T₁ (is_opcode_fetch), as it lets you do that. To explicitly point out the benefit, it means branching off without producing a stack write.<br /><br />Unfortunately it can be running from internal RAM, making that a different hazardous, so one might just be stuck with &quot;preemptively keep a copy of the stackpage to restore to&quot;.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If you tracelog one frame that would be about 117kB (if simply logging 4 bytes per frame) and that's reasonable, but can't be done on anything that exists (yet..!). I tend to think of this in terms of frames, because the NMI seems like an obvious entry/exit point.<br /></div>4 bytes per frame? do you mean, per branch? per PC-change? number seems to indicate per PC-change, including basic incrementation, including argument reads, which…why? It seems an exceptionally redundant and <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There is virtually no reason that anyone would read DPCM data manually with the CPU, so that seems safe enough.<br /></div>A debugger has the issue that one often is debugging something that isn't working correctly, so you don't get to make assumptions like &quot;won't execute $FFFA-$01FF&quot; or &quot;won't execute a KIL/STP&quot; or &quot;won't invoke PPU master mode&quot;.<br /><br />I'm pretty sure manual PCM loaders exist; for e.g. speech-synth.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6603">Myask</a> — Mon May 22, 2017 2:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2017-05-22T06:44:13-07:00</updated>
<published>2017-05-22T06:44:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196318#p196318</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196318#p196318"/>
<title type="html"><![CDATA[Re: musings for making a debugging-mapper]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=15958&amp;p=196318#p196318"><![CDATA[
<div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent"><br />If you have a break point though, you can assume that point is a valid opcode.<br /></div><br />Not necessarily. Setting a breakpoint against a previous build, adding 1 byte of code before the breakpoint, rebuilding the ROM, and then running the code again will likely cause the breakpoint to become on an operand instead of an opcode.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon May 22, 2017 6:44 am</p><hr />
]]></content>
</entry>
</feed>