<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - A little help with Blargg's nes_instr_test?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">A little help with Blargg's nes_instr_test?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6597">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=6597</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Jul 14, 2010 1:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>A little help with Blargg's nes_instr_test?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, so now I've got all of the "official" opcodes working as far as I can tell from the Nestress and Kevtris' Nestest ROMs.  I pass both of those 100% for official opcode and CPU tests.  So now I've moved onto Blargg's nes_instr_test ROM.  At the moment I am running the official-only test ROM.  I get the following output:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00 BRK<br />14-brk<br />Failed<br />While running test 14 of 15</div>
<br />I know that the readme says that the test is not supposed to tell you how to fix your CPU...but since I'm passing the other 2 test ROMs it seems strange that BRK would fail in this test ROM.  Can anyone tell me what the BRK test actually "tests"? I looked at the source but it's hard for me to understand as I am not (yet) a very avid NES programmer and the assembler syntax is throwing me for a loop - especially with all the macros.
<br />
<br />Are there CPU test ROMs that I should run before running this one?  I'm not sure if there is a particular order in which I should be trying these ROMs. Haha.
<br />
<br />Any input is appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pdq</b> [ Wed Jul 14, 2010 7:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Check that the PC pushed onto the stack is "PREV_PC+2", and that the P flags pushed onto the stack has the B bit set, but the actual P flags are not modified (B is still zero).
<br />
<br />Also, ensure the RTI instruction overwrites the B flag to zero when P is popped from the stack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jul 14, 2010 8:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />^^^ perfect example of the confusion the "B flag exists in status register" causes (pdq, nothing specific to you; this confusion is present in almost every 6502 book and web page).
<br />
<br />As pdq said, BRK does the following:
<br />
<br />1. Push address of BRK instruction + 2
<br />2. PHP
<br />3. SEI
<br />4. JMP ($FFFE)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Jul 14, 2010 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">^^^ perfect example of the confusion the "B flag exists in status register" causes (pdq, nothing specific to you; this confusion is present in almost every 6502 book and web page).<br /><br />As pdq said, BRK does the following:<br /><br />1. Push address of BRK instruction + 2<br />2. PHP<br />3. SEI<br />4. JMP ($FFFE)</div>
<br />
<br />Do you have verification of this claim on non-NES 6502 processors?  You're going to have a hard time convincing me of that, mainly because this feature is used on the Apple II to detect the difference between a hardware and software IRQ.
<br />
<br />If you want *me* to verify, I can bust out my IIGS and do exactly that.  It's fairly easy to test for.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jul 14, 2010 9:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But then few peripherals on the 8-bit Apple II used /IRQ, mostly because so many things (such as disk access) needed cycle-timed code run with SEI.
<br />
<br />Besides, I thought we determined <a href="http://nesdev.com/bbs/viewtopic.php?p=7365#7365" class="postlink">last time</a> that checking the stack to distinguish /IRQ from BRK takes too long.
<br />
<br />EDIT: I've updated <a href="http://wiki.nesdev.com/w/index.php/CPU_status_flag_behavior" class="postlink">the wiki page</a> to try to clarify this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Jul 14, 2010 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />thanks for the tips blargg, i will recheck my simulation
<br />
<br />@Koitsu: I too was skeptical about the B flag not actually existing.  However, in the research that I've done since then I'm pretty positive that Blargg et al. are correct about the B flag and it only being visible after it's been pushed to the stack during PHP/BRK instruction.  Here are some resources I've found.  All of which confirm the B flag not existing.
<br />
<br /><!-- m --><a class="postlink" href="http://www.virtualdub.org/downloads/Altirra%20Hardware%20Reference%20Manual.pdf">http://www.virtualdub.org/downloads/Alt ... Manual.pdf</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/NinTech.txt">http://nesdev.com/NinTech.txt</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/the%20%27B%27%20flag%20&amp;%20BRK%20instruction.txt">http://nesdev.com/the%20%27B%2 ... uction.txt</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/CPU_status_flag_behavior">http://wiki.nesdev.com/w/index.php/CPU_ ... g_behavior</a><!-- m -->
<br />
<br />And it really is weird because the huge official NMOS 6502 hardware/software manuals that I have refer to it "like" it actually exists, but they never _actually_ explicitly state that it exists or not. Haha.  Now that I've done a good bit of research and looking at how my only RTL is structured and what way would conserve the most physical resources it actually does make the most sense for the flag not to physically exist in the CPU.
<br />
<br />Pz!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jul 14, 2010 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just tried this on the Apple //c and got $38 in A:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$08<br />pha<br />plp<br />php<br />pla</div>
<br />PHP and BRK both always set bits 4 and 5 of the byte they push on the stack. NMI and IRQ both always clear bit 4 and set bit 5 of the byte they push on the stack. Thus, the status flags register only has 6 bits, not 8.
<br />
<br />If you read the descriptions of the B flag, you'll see that based on most descriptions that say it exists, there's no way to actually read its contents, hence it doesn't actually exist. It's like the E bit hidden away in every 6502 processor, which enables a super 128-bit processing mode, but that can't ever be set by any instruction unfortunately.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Jul 14, 2010 1:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">It's like the E bit hidden away in every 6502 processor, which enables a super 128-bit processing mode, but that can't ever be set by any instruction unfortunately.</div>
<br />LOL, that's awesome.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Jul 14, 2010 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This line of thought led me to go and look at the 6502 reverse-engineered schematic someone made a year ago... found where "B" was and found that it was just a couple inverters triggered by the lines from BRK and PHP in the logic array, and the I flag.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>jwdonal</b> [ Wed Jul 14, 2010 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, very cool. That settles it then.
<br />
<br />Say, are these schematics available to dl somewhere? It would be really kewl to see how it was all originally implemented.
<br />
<br />Pz

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jul 14, 2010 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm still trying to find where on this <a href="http://www.shiresoft.com/downloads/docs/6502.pdf" class="postlink">schematic</a> said logic is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Wed Jul 14, 2010 4:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Lower left center, labelled B flag, directly north of decode lines 116 and 115.
<br />
<br />Inputs are lines 105 and 106 (PHP/BRK), and D1x1, which is a lovely mess of the B flag, RDY0, phi2, /IRQ, Bxx, and the general interrupt line.
<br />
<br />That slew of lines is the data bus, usually pulled high and wired AND'd down I think.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Jul 14, 2010 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why is everyone having trouble understanding what I'm saying?  Frustrated koitsu commencing.
<br />
<br /><a href="http://wiki.nesdev.com/w/index.php/CPU_status_flag_behavior" class="postlink">The wiki page</a> states, in a highly convoluted way, what I've been saying and what pdq said.  Somehow this got turned into a "guess what PHP does" discussion which isn't the point.
<br />
<br />blargg's test above doesn't prove anything other than "what PHP and PLP do to bits 5 and 4".  I really don't care what PHP/PLP does to bits 5 and 4, that isn't what we're discussing (but please see below).  I also don't care about bit 5, because it's not applicable.  Please, let's focus on bit 4.
<br />
<br />Not once have I said that the P status register actually contains/uses bit 4.  All I've been saying -- same as pdq, and as <a href="http://nesdev.com/the%20%27B%27%20flag%20&amp;%20BRK%20instruction.txt" class="postlink">Brad Taylor</a> -- is that when BRK is encountered, internally the CPU pushes the contents of P onto the stack *with bit 4 set*.  A piece of code which is pointed to by the IRQ/BRK vector (at $FFFE-FFFF) can do the following to determine a hardware IRQ vs. software IRQ (BRK):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irq_vector:<br />&nbsp; &nbsp;PLA<br />&nbsp; &nbsp;PHA<br />&nbsp; &nbsp;AND #%00010000<br />&nbsp; &nbsp;BNE IRQ_caused_by_BRK</div>
<br />
<br />All <a href="http://nesdev.com/bbs/viewtopic.php?p=7365#7365" class="postlink">this code</a> does is exactly that, followed by some code that gets the BRK signature byte and uses it as an offset into a jump table so different pieces of code can be called based upon what the signature byte is.  I've never actually seen a program do this (though I did propose in a post a while back that it's highly possible -- case in point!), because the signature byte was usually used to indicate to the programmer (while debugging) "oh, it's this routine which called BRK".
<br />
<br />History lesson: one of BRK's historic purposes is outlined in "Programming the 65816, Including the 6502, 65C02, and 65802" book by David Eyes and Ron Lichty on page 255.  Quote:
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The fact that the opcode for the BRK instruction is $00 is directly related to one of its uses: patching existing programs.  Patching is the process of inserting instruction data in the middle of an existing program in memory to modify (usually to correct) the program without reassembling it.  This is a favoured method of some programmers in debugging and testing assembly language programs, and is quite simple if you have a good machine-level monitor program that allows easy examination and modification of memory locations.  However, if the program to be patched is stored in PROM (programmable read-only memory), the only way to modify a program that has already been "burned-in" is to change any remaining one bits to zeroes.  Once a PROM bit has been "blown" to zero, it cannot be restored to a one.  The only way to modify the flow of control is to insert BRK instructions -- all zeroes -- at the patch location and to have the BRK handling routing take control from there.</div>
<br />
<br />I will point out that the aforementioned book erroneously states on page 70 that the P register's bit 4 is "dedicated to determining software vs. hardware IRQ" -- as blargg has said, the P register actually doesn't use bits 5 and 4.  Otherwise, everything I said above stands.
<br />
<br />Finally, I don't know about pdq's claim that RTI clears bit 4 of the status registers popped off the stack by RTI itself.  The documentation I have doesn't indicate that happens, but it might.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jul 14, 2010 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><a href="http://wiki.nesdev.com/w/index.php/CPU_status_flag_behavior" class="postlink">The wiki page</a> states, in a highly convoluted way, what I've been saying and what pdq said.</div><br />I tried to make it less convoluted this time; could you go in and fix it further?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A piece of code which is pointed to by the IRQ/BRK vector (at $FFFE-FFFF) can do the following to determine a hardware IRQ vs. software IRQ (BRK):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irq_vector:<br />&nbsp; &nbsp;PLA<br />&nbsp; &nbsp;PHA<br />&nbsp; &nbsp;AND #%00010000<br />&nbsp; &nbsp;BNE IRQ_caused_by_BRK</div></div><br />This illustrates the point, but don't try it in production code. The old contents of A have been destroyed, and if the IRQ wasn't caused by BRK, the main program won't expect this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">one of BRK's historic purposes is outlined in "Programming the 65816, Including the 6502, 65C02, and 65802" book by David Eyes and Ron Lichty on page 255.  Quote:</div><br />That was interesting. Thanks.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Finally, I don't know about pdq's claim that RTI clears bit 4 of the status registers popped off the stack by RTI itself.  The documentation I have doesn't indicate that happens, but it might.</div>
<br />As I understand it, RTI and PLP don't "clear" bit 4, that is, they don't write back to the stack. They just ignore it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Jul 14, 2010 6:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />koitsu, no disagreement with what you wrote. The byte on the stack that holds the status flags also holds a flag indicating whether it was a BRK or IRQ. I suppose it is a "B flag", but it's not a flag like any of the other status flags are (not saying you said it was, just noting this in how it's often discussed, for example shown in the processor flags graphic along with all the main registers).
<br />
<br />tepples, throw an STA in there and it works:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irq_vector:<br />&nbsp; &nbsp; sta saved_a<br />&nbsp; &nbsp; pla<br />&nbsp; &nbsp; pha<br />&nbsp; &nbsp; and #%00010000<br />&nbsp; &nbsp; bne was_brk<br />&nbsp; &nbsp; ...</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>