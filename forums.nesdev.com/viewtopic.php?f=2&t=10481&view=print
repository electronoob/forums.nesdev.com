<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10481">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10481</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Sep 10, 2013 4:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the moment, I'm a bit lost with that &quot;nes.cfg&quot; file. My problem is: The default one is built for a game with 2 x 16KB PRG code. But I want a game with 1 x 16KB PRG code.<br />For some reason, the config files from <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10435" class="postlink">this link</a> always give me some overflow errors.<br /><br />So, I'm straight out asking: What do I have to do?<br /><br />This is my &quot;nes.cfg&quot;:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY<br />{<br />&nbsp; &nbsp;ZP:&nbsp; &nbsp; &nbsp;start =&nbsp; &nbsp; $2, size =&nbsp; &nbsp;$1A,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;type = rw,&nbsp; define = yes;<br />&nbsp; &nbsp;HEADER: start =&nbsp; &nbsp; $0, size =&nbsp; &nbsp;$10, file = %O,&nbsp; &nbsp; fill = yes;<br />&nbsp; &nbsp;ROM0:&nbsp; &nbsp;start = $8000, size = $7FF4, file = %O,&nbsp; &nbsp; fill = yes, define = yes;<br />&nbsp; &nbsp;ROMV:&nbsp; &nbsp;start = $FFF6, size =&nbsp; &nbsp; $C, file = %O,&nbsp; &nbsp; fill = yes;<br />&nbsp; &nbsp;ROM2:&nbsp; &nbsp;start = $0000, size = $2000, file = %O,&nbsp; &nbsp; fill = yes;<br />&nbsp; &nbsp;SRAM:&nbsp; &nbsp;start = $0500, size = $0300,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;define = yes;<br />&nbsp; &nbsp;RAM:&nbsp; &nbsp; start = $6000, size = $2000,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;define = yes;<br />}<br /><br />SEGMENTS<br />{<br />&nbsp; &nbsp;HEADER:&nbsp; &nbsp;load = HEADER,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro;<br />&nbsp; &nbsp;STARTUP:&nbsp; load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; define = yes;<br />&nbsp; &nbsp;LOWCODE:&nbsp; load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; optional = yes;<br />&nbsp; &nbsp;INIT:&nbsp; &nbsp; &nbsp;load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; define = yes, optional = yes;<br />&nbsp; &nbsp;CODE:&nbsp; &nbsp; &nbsp;load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; define = yes;<br />&nbsp; &nbsp;RODATA:&nbsp; &nbsp;load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; define = yes;<br />&nbsp; &nbsp;DATA:&nbsp; &nbsp; &nbsp;load = ROM0,&nbsp; &nbsp;run = RAM, type = rw,&nbsp; define = yes;<br />&nbsp; &nbsp;VECTORS:&nbsp; load = ROMV,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = rw;<br />&nbsp; &nbsp;CHARS:&nbsp; &nbsp; load = ROM2,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = rw;<br />&nbsp; &nbsp;BSS:&nbsp; &nbsp; &nbsp; load = RAM,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;type = bss, define = yes;<br />&nbsp; &nbsp;HEAP:&nbsp; &nbsp; &nbsp;load = RAM,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;type = bss,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;optional = yes;<br />&nbsp; &nbsp;ZEROPAGE: load = ZP,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = zp;<br />}<br /><br />FEATURES<br />{<br />&nbsp; &nbsp;CONDES: segment = INIT,&nbsp; &nbsp;type = constructor, label = __CONSTRUCTOR_TABLE__, count = __CONSTRUCTOR_COUNT__;<br />&nbsp; &nbsp;CONDES: segment = RODATA, type = destructor,&nbsp; label = __DESTRUCTOR_TABLE__,&nbsp; count = __DESTRUCTOR_COUNT__;<br />&nbsp; &nbsp;CONDES: segment = RODATA, type = interruptor, label = __INTERRUPTOR_TABLE__, count = __INTERRUPTOR_COUNT__;<br />}<br /><br />SYMBOLS<br />{<br />&nbsp; &nbsp;__STACKSIZE__ = $0300;<br />}</div><br />And yes, I know, there might be some things in there that can be thrown out later. But I will take care of this as soon as everything works. In the moment, I'd only like to solve my problem. I will take care of the cleanup afterwards.<br /><br />Alright, if you take this source code: <a href="https://bitbucket.org/ddribin/nerdy-nights/raw/e3d439692ddab25f3ba8bf8bafc3533b64e88b30/06-backgrounds2/background2.asm" class="postlink">background2.asm</a> and this chr file: <a href="https://bitbucket.org/ddribin/nerdy-nights/src/e3d439692ddab25f3ba8bf8bafc3533b64e88b30/06-backgrounds2/mario.chr?at=default" class="postlink">mario.chr</a> and compile it with<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cl65 -t none -C nes.cfg -o Test.nes background2.asm</div>then everything works fine.<br /><br />But as I said, I want 1 x 16 KB PRG code. So, I change the header in the asm file from<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;HEADER&quot;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;&quot;NES&quot;, $1A&nbsp; &nbsp;; iNES header identifier<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;2&nbsp; &nbsp;&nbsp; &nbsp;; 2x 16KB PRG code<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;1&nbsp; &nbsp;&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;$01, $00&nbsp; &nbsp;; mapper 0, vertical mirroring</div>to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;HEADER&quot;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;&quot;NES&quot;, $1A&nbsp; &nbsp;; iNES header identifier<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;1&nbsp; &nbsp;&nbsp; &nbsp;; 1x 16KB PRG code<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;1&nbsp; &nbsp;&nbsp; &nbsp;; 1x&nbsp; 8KB CHR data<br />&nbsp; &nbsp;.byte&nbsp; &nbsp;$01, $00&nbsp; &nbsp;; mapper 0, vertical mirroring</div>(Line 4 was changed.)<br /><br />Now, the nes file doesn't work anymore. It only shows a gray screen in fceux and a black screen in Nestopia.<br /><br />What do I have to change in the above &quot;nes.cfg&quot; so that the program works again?<br />I tried various things, like cutting down memory areas or using one of the sample cfg files. But it didn't work. So, could you please tell me which values I have to edit to make the program work as a 24 KB ROM instead of a 40 KB ROM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 10, 2013 4:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Try changing the start of memory area ROM0 to $C000 and subtracting $4000 from its size.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Sep 10, 2013 5:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks. That worked. Even though it was already enough to subtract the value. Why is it necessary to set the start location from $8000 to $C000? I mean, according to the Nerdy Nights tutorial's graphic, $8000 is the location where the cartridge ROM starts. Why should the whole ROM code be moved to the center of the cartridge ROM section? Wouldn't the start location on a real cartridge be at byte $8000 too? Or does it indeed start at $C000 if there's only 1 x 16 KB PRG? And if yes, why? Why is the lower part cut away instead of the upper part?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Sep 10, 2013 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The output file will still be 32k PRG if all you did was change the header. I believe most emulators would read the header and load the first 16KB PRG chunk only into $C000 (mirrored to $8000), which means all the vectors point to $0000 or whatever your fill value for ROM is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 10, 2013 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Why is it necessary to set the start location from $8000 to $C000?</div><br />It isn't. When you have only 16KB of PRG, it doesn't matter if it's assembled as $8000-$BFFF or $C000-$FFFF, both will work just fine.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I mean, according to the Nerdy Nights tutorial's graphic, $8000 is the location where the cartridge ROM starts.</div><br />Yes, but since there's only 16KB of data to fill a space of 32KB, it gets mirrored to fill the whole space, so your PRG does in fact get mapped to both $8000-$BFFF and $C000-$FFFF, which is why assembling it either way works.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why should the whole ROM code be moved to the center of the cartridge ROM section?</div><br />Not the center, the whole upper half. But it's not moved, just mirrored, it's still at $8000 as well.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why is the lower part cut away instead of the upper part?</div><br />I guess that by now you understand that nothing gets cut away... =)<br /><br />Anyway, the reason why some people prefer to assemble 16KB of PRG at $C000-$FFFF is because of the interrupt vectors. The CPU will ALWAYS look for them at $FFFA-$FFFF, while $8000 is just the arbitrary location chosen by Nintendo to be the beginning of PRG ROM. In the end it doesn't matter, because even if your vectors are assembled at $BFFA-$BFFF, because of mirroring they will also show up at $FFFA-$FFFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 10, 2013 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Both addresses in $8000-$BFFF and addresses in $C000-$FFFF work. But for one thing, DMC assumes $C000-$FFFF. And for another, it's traditional to use $C000-$FFFF.<br /><br />Advanced: Say you're making a multicart of NROM-128 games. For some common boards, either they must all be in $8000-$BFFF (if UNROM configured as mapper 2) or  they must all be in $C000-$FFFF (if UNROM configured as mapper 180). But for other mappers, mixing the two can be advantageous.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Sep 10, 2013 6:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should note that the start address in the memory section do not matter for how the ROM file is output (sizes do). Start address only tell the linker the offset in ROM for things like absolute addresses. For example, your start address for the ROMV is wrong, it should be $FFF4, but it doesn't matter since there is no code in the segment. (Ignoring the mistake that the vectors start at $FFFA).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Sep 11, 2013 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the answers.<br /><br />I put ROM 0 to start = $C000, size = $3FF4 and corrected ROMV start to $FFF4 because I want the values to be the correct and common ones, even if the game would work with other values as well.<br /><br />But why does ROMV start at $FFF4? The Nerdy Nights tutorial said it's from $FFFA to $FFFF. So, instead of<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ROM0: start = $C000, size = $3FF4, file = %O, fill = yes, define = yes;<br />ROMV: start = $FFF4, size = $C, file = %O, fill = yes;</div><br />wouldn't this be more correct:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ROM0: start = $C000, size = $3FFA, file = %O, fill = yes, define = yes;<br />ROMV: start = $FFFA, size = $6, file = %O, fill = yes;</div>?<br />Or is the tutorial wrong?<br />(Yes, I know it might not make a practical difference to the game file. But I'd like to have the correct values anyway.)<br /><br />Now it's time for cleaning up. Here, I've got a bunch of questions as well:<br /><br />What's LOWCODE and INIT good for? Is this something that should actually be used because there is a difference to normal code? Or can I throw it out completely?<br /><br />CODE and RODATA are both declared with the same parameters and they both appear right after another. So, isn't RODATA completely unnecessary?<br />Or is there any special thing that has to do with the fact that it's referenced in the FEATURES section again? What's the deal with this CONDES command anyway? In the manual, it's written: &quot;CONDES is used to tell the linker to emit module constructor/destructor tables.&quot; O.k., what does that mean in practice? Do I need it? Does <em>anybody</em> use it?<br /><br />Why does ZP (zero page) start at 2 with a size of $1A? Shouldn't it start at $00 with a size of $FF?<br /><br />As far as I know, the zero page is there for quicker access. Is this used in real NES games? If yes, what for? To store the most commonly accessed variables?<br />So, if I write <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $05</tt> that's a quicker command than if I write <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $0005</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $0505</tt>?<br />Do I have to pay attention to anything if I use the zero page?<br /><br />In the assembly file, what kind of code would go into the STARTUP segment? Or is this always empty, like in the example code?<br /><br />The memory location that is declared simply as RAM has the values start = $6000, size = $2000. This looks like the WRAM in the NES. Since my game will be built like a first generation game and those didn't have WRAM, I assume I can just delete it and don't need to declare it at all?<br /><br />Why does the SRAM section go from $0500 to $07FF (i.e. size = $0300)? Shouldn't RAM go from $0000 to $07FF?<br /><br />In the Nerdy Nights examples that are for NESASM, the command<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .bank 1<br />&nbsp; .org $E000</div>is put right before the constants that define palette, sprite, background and attribute data. (The ones that are declared with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.db</tt> in NESASM and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.byte</tt> in CC65.)<br />Does the address $E000 have a special meaning so that, in CC65, I should declare such a memory location (by splitting ROM0 into two values: one from $C000 to $DFFF and one from $E000 to the end) and then write the corresponding <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.segment</tt> command right before the constant data definitions? Or was $E000 just an arbitrary value? Because in the CC65 example, there is no special segment declaration before it and the constants appear right after the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RTI</tt> command.<br /><br />Does the symbol __STACKSIZE__ have any meaning for an NES program?<br /><br />I hope you don't mind that I ask so many questions, but those are the things that I didn't manage to find out by looking through <a href="http://oliverschmidt.github.io/cc65/doc/ld65-5.html" class="postlink">that manual</a>. And I finally want to finish my nes.cfg stuff so that I can continue concentrating on the actual source code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Wed Sep 11, 2013 4:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">wouldn't this be more correct:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ROM0: start = $C000, size = $3FFA, file = %O, fill = yes, define = yes;<br />ROMV: start = $FFFA, size = $6, file = %O, fill = yes;<br /></div><br /></div><br />Yes.<br />Even better: (skipping over other MEMORY and SEGMENT definitions)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY<br />{<br />&nbsp; &nbsp;ROM0:&nbsp; &nbsp;start = $C000, size = $4000, file = %O,&nbsp; &nbsp; fill = yes, define = yes;<br />}<br /><br />SEGMENTS<br />{<br />&nbsp; &nbsp;CODE:&nbsp; &nbsp; &nbsp;load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; define = yes;<br />&nbsp; &nbsp;VECTORS:&nbsp; load = ROM0, start = $FFFA<br />}<br /></div><br /><br />If you are coding in assembler, and you are not using C (CC65), you don't need most of those things. You can use <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9983" class="postlink">constructors</a>, but I wouldn't worry about that yet.<br /><br />If you create an identifier in zeropage, ca65 will use zeropage instructions when accessing it.<br /><br />This is my NROM <a href="http://forums.nesdev.com/viewtopic.php?p=108445#p108445" class="postlink">config</a>, it has some extra things that probably aren't really needed, like the stack segment.<br /><br />There is nothing special about $E000 that I am aware of.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 12, 2013 7:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What's special about $E000 will become clear once you start using the MMC3. It splits the ROM into 8K banks, and $E000-$FFFF is the only bank guaranteed to be available at all times. But for now it's just a quirk of NESASM having been originally written to target the TurboGrafx-16, which also uses 8K banks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Thu Sep 12, 2013 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">What's LOWCODE and INIT good for? Is this something that should actually be used because there is a difference to normal code? Or can I throw it out completely?</div><br />You can throw it out.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">CODE and RODATA are both declared with the same parameters and they both appear right after another. So, isn't RODATA completely unnecessary?</div><br />It's unnecessary, but it can make your program somewhat easier to understand because you'd have a clear separation of data from code. RODATA stands for &quot;Read Only Data&quot;. Mostly it's there just because the C compiler separates the data from the code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why does ZP (zero page) start at 2 with a size of $1A? Shouldn't it start at $00 with a size of $FF?</div><br />The author of the config may have wanted to reserve some values for other uses. But yes, generally it should start from $00 with a size of <strong>$100</strong> (off by one, once again! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As far as I know, the zero page is there for quicker access. Is this used in real NES games? If yes, what for? To store the most commonly accessed variables?<br />So, if I write <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $05</tt> that's a quicker command than if I write <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $0005</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA $0505</tt>?<br />Do I have to pay attention to anything if I use the zero page?</div><br />Zero page is quicker to access, and it's also the only way to access memory indirectly (you'll place the 16-bit pointer on zero page). Note that in CA65's eyes &quot;LDA $05&quot; and &quot;LDA $0005&quot; are the exact same thing; it will always use zero page addressing for it. To force absolute addressing, the syntax was something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LDA a:$05</tt> (not tested).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The memory location that is declared simply as RAM has the values start = $6000, size = $2000. This looks like the WRAM in the NES. Since my game will be built like a first generation game and those didn't have WRAM, I assume I can just delete it and don't need to declare it at all?</div><br />Yes, delete it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why does the SRAM section go from $0500 to $07FF (i.e. size = $0300)? Shouldn't RAM go from $0000 to $07FF?</div><br />SRAM is a very misleading name for this segment because in NES circles SRAM is usually taken to mean &quot;Save RAM&quot; (at $6000-7FFF). So you should probably rename it to &quot;RAM&quot;. I have no idea why they chose that start address and size, probably once again to reserve certain areas of memory for something else. But you can't make it start from $0000, that would overlap with zero page ($00-$FF) and stack ($100-1FF). You can make it start from $200, unless you want to reserve the page at $200 for shadow OAM, in which case it should start at $300.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In the Nerdy Nights examples that are for NESASM, the command<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .bank 1<br />&nbsp; .org $E000</div>is put right before the constants that define palette, sprite, background and attribute data. (The ones that are declared with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.db</tt> in NESASM and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.byte</tt> in CC65.)<br />Does the address $E000 have a special meaning so that, in CC65, I should declare such a memory location (by splitting ROM0 into two values: one from $C000 to $DFFF and one from $E000 to the end) and then write the corresponding <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.segment</tt> command right before the constant data definitions? Or was $E000 just an arbitrary value? Because in the CC65 example, there is no special segment declaration before it and the constants appear right after the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RTI</tt> command.</div><br />It's not arbitrary, in that $E000 is the starting address of the upper 8 KB of a 16 KB ROM. NESASM requires it, because it requires the ROM to be split into 8 KB banks (due to its legacy as a PC-Engine assembler). CA65 doesn't have such limitations, so you can put everything in a nice, linear &quot;bank&quot; (segment).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does the symbol __STACKSIZE__ have any meaning for an NES program?</div><br />Only if you write your program in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Sep 12, 2013 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for all the help. I altered the cfg file accordingly. But unfortunately, it's still not finished since I have some remaining questions.<br /><br /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">Even better: (skipping over other MEMORY and SEGMENT definitions)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY<br />{<br />&nbsp; &nbsp;ROM0:&nbsp; &nbsp;start = $C000, size = $4000, file = %O,&nbsp; &nbsp; fill = yes, define = yes;<br />}<br /><br />SEGMENTS<br />{<br />&nbsp; &nbsp;CODE:&nbsp; &nbsp; &nbsp;load = ROM0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type = ro,&nbsp; define = yes;<br />&nbsp; &nbsp;VECTORS:&nbsp; load = ROM0, start = $FFFA<br />}<br /></div></div><br />Why do you consider it better? Wouldn't it be better if only the MEMORY section has absolute address values while the SEGMENTS is just there to group it logically? Somehow, from an abstraction point of view, it doesn't look ideal to me to place the memory location at the SEGMENTS. Why should the VECTORS be a segment inside the ROM0 memory instead of a separate memory area?<br /><br /><div class="quotetitle">Movax12 wrote:</div><div class="quotecontent">If you are coding in assembler, and you are not using C (CC65), you don't need most of those things. You can use <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9983" class="postlink">constructors</a>, but I wouldn't worry about that yet.</div><br />Well, my game will be in C. In the moment, I use only assembly to understand the inner workings. But the game logic shall be written in C as soon as I understand the assembly program completely.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">What's special about $E000 will become clear once you start using the MMC3.</div><br />I guess that won't happen in the near future. In the moment, all I wanna do is write a simple 24 KB, non-scrolling mapper 0 game.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">It's unnecessary, but it can make your program somewhat easier to understand because you'd have a clear separation of data from code.</div><br />Yeah, that makes sense. Alright, I'll keep it so that when you look at the source code, you can differentiate between it.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">But yes, generally it should start from $00 with a size of <strong>$100</strong> (off by one, once again! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />).</div><br />You're right: $00 to $FF is $100 bytes. I totally overlooked that.<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I have no idea why they chose that start address and size, probably once again to reserve certain areas of memory for something else. But you can't make it start from $0000, that would overlap with zero page ($00-$FF) and stack ($100-1FF). You can make it start from $200, unless you want to reserve the page at $200 for shadow OAM, in which case it should start at $300.</div><br />So, when I declare variables, may I use them in the memory location of $100-$1FF? Or what's the difference between stack and general RAM on the NES?<br /><br />I looked at the commented version from the source code and it says this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"># $0100-$0200 cpu stack<br /># $0200-$0500 3 pages for ppu memory write buffer<br /># $0500-$0800 3 pages for cc65 parameter stack</div><br />Is this correct or do you still say I can make the RAM start at $0200?<br /><br /><div class="quotetitle">thefox wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does the symbol __STACKSIZE__ have any meaning for an NES program?</div><br />Only if you write your program in C.</div><br />Which I'm going to do. So, I assume the value has to be equal to my RAM size? (Or better yet: Declare the RAM size as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">size = __STACKSIZE__</tt>.)<br />What does the C compiler do when I omit the stack size, but the RAM section has a size of $300? Can the compiler define the stack size according to the RAM section?<br /><br />I still have no idea what this actually does:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CONDES: segment = RODATA, type = destructor, label = __DESTRUCTOR_TABLE__, count = __DESTRUCTOR_COUNT__;<br />CONDES: segment = RODATA, type = interruptor, label = __INTERRUPTOR_TABLE__, count = __INTERRUPTOR_COUNT__;</div><br /><em>&quot;CONDES is used to tell the linker to emit module constructor/destructor tables.&quot;<br />&quot;type: Describes the type of the routines to place in the table.&quot;</em><br />What does that mean? I don't get it. Especially for stuff like RODATA, i.e. constant readonly data. Why does that need a constructor or a destructor or whatever?<br /><br /><br />What I also noticed: How can both, the header and the CHARS/ROM2 data (i.e. the graphic tiles) start at location zero?<br /><br /><br />And why are VECTORS and CHARS declared as read/write? I don't want to change the tiles or the interrupt addresses during gameplay, do I?<br /><br /><br />What would get into the STARTUP code? In the moment, it's empty.<br /><br /><br />Alright, finally I know why people say that setting up a CC65 project can be a hassle.<br />But I'm really greatful for the detailed answers that I always get here. Those manuals can be a bit confusing sometimes, but when someone explains me specifically the one thing that I was asking for, I usually understand it immediately.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 12, 2013 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&quot;Why should the VECTORS be a segment inside the ROM0 memory instead of a separate memory area?&quot;<br /><br />Because it's in the same bank of the same chip, for one thing. In projects for mappers with 16K banks (UNROM, MMC1), I typically use one <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">MEMORY</tt> per bank.<br /><br />&quot;Well, my game will be in C. In the moment, I use only assembly to understand the inner workings. But the game logic shall be written in C as soon as I understand the assembly program completely.&quot;<br /><br />I get it: you're writing C with assembly drivers, and you want to understand what's going on well enough to write the assembly drivers.<br /><br />&quot;So, when I declare variables, may I use them in the memory location of $100-$1FF? Or what's the difference between stack and general RAM on the NES?&quot;<br /><br />The instructions PHA, PHP, PLA, PLP, JSR, RTS, BRK, and RTI are hardwired to use the stack. But I've been known to use $0100-$01BF of the stack as general memory, usually for buffers that will be copied to video memory during the next vertical blank, and use only $01C0-$01FF for the stack.<br /><br />&quot;$0200-$0500 3 pages for ppu memory write buffer&quot;<br /><br />My guess is that's meant for the implementation of stdio that ships with cc65.<br /><br />&quot;$0500-$0800 3 pages for cc65 parameter stack&quot;<br /><br />That's used for local variables in C functions, and I think it can be made smaller. I'm under the impression that cc65's default config is designed for C programs that store the heap in on-cartridge work RAM at $6000-$7FFF.<br /><br />&quot;Why do I have to declare zero page and RAM location in the config file anyway?&quot;<br /><br />So that you can use the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.RES</tt> keyword to allocate space for variables in those segments.<br /><br />&quot;If I declare one, don't I have to tell the assembler to store it at a specific location anyway, let's say, $0612?&quot;<br /><br />Not if you use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.RES</tt> to state that the variable will be allocated at the next available space within the current segment.<br /><br />&quot;Will the assembler warn me if I try to declare a variable that's outside of the defined RAM area?&quot;<br /><br />If you have too much <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.RES</tt> for a given segment, the linker will warn you.<br /><br />&quot;Or are these values necessary for when I program in C (which I'm going to end up with) so that the compiler knows where to put something when I declare it as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned char status;</tt>?&quot;<br /><br />Yes. The C compiler translates those to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.RES</tt>.<br /><br />&quot;<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CONDES</tt>&quot;<br /><br />Segments like this appear to be used for initialization before <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">main&#40;&#41;</tt> starts. For example, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;stdio.h&gt;</tt> wants to set up <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stdin</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stdout</tt>, and C++ programs want to run constructors for global objects.<br /><br />&quot;And why are VECTORS and CHARS declared as read/write?<br /><br />It might just be an error in a particular linker script.<br /><br />&quot;I don't want to change the tiles or the interrupt addresses during gameplay, do I?&quot;<br /><br />In a game with CHR ROM, you won't be changing tiles during gameplay. But if you use UNROM or SGROM/SNROM, you'll end up uploading tiles to the PPU fairly often. For example, Hatris and Qix modify CHR RAM to draw game objects smaller than one tile to the background, and Blargg and I wrote a library that renders a string to a set of tiles using a proportional font. But CHR RAM games don't use the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CHARS</tt> segment; instead, they store tile data in the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">RODATA</tt> segment and upload the data to the PPU. And some games do route NMI and IRQ vectors to trampoline code in RAM so that they can use different vectors for different parts of the game.<br /><br />A lot of the segments that you don't understand are more useful for programs that run on computers with a tape or disk drive and a keyboard, such as the Commodore 64, than on computers with an execute-in-place ROM and a joystick, such as the Nintendo Entertainment System.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Sep 12, 2013 2:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Because it's in the same bank of the same chip, for one thing.</div><br />Yeah, that makes sense. I changed it.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The instructions PHA, PHP, PLA, PLP, JSR, RTS, BRK, and RTI are hardwired to use the stack. [...] My guess is that's meant for the implementation of stdio that ships with cc65.</div><br />So, I'll use start = $0200, size = $0600. I don't wanna run into the CPU stack, so I won't do anything funny with it. But since I don't intend to use any external source code files for the C project, I will use the RAM from $0200 as I don't have to worry about any functions clashing with my code.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">&quot;$0500-$0800 3 pages for cc65 parameter stack&quot;<br /><br />That's used for local variables in C functions, and I think it can be made smaller.</div><br />Why should it be made smaller? Isn't it better to make it bigger to have more memory? Or does this make the program slower even if the stack is not fully used?<br /><br />Where in the RAM will the global variables in a C program be stored? Am I correct to assume that local variables will be stored in StackStartAddress while global variables are stored in StackStartAddress + StackSize?<br /><br />Also, what happens if I exceed the stack by declaring too many local variables? (I know, this won't happen in practice. But let's just assume it does.) Will they produce a glitch or will they just be declared in the RAM section outside the stack? If the latter is the case, will this have any influence on how the program works (like for example that they're not freed after the function is left)?<br /><br />I'm sorry that you got to see the questions about zero page and RAM declaration. After I checked one of my other threads and learned how to declare variables in CC65, it was suddenly clear to me and I deleted the questions here. (In NESASM you declare an absolute address first with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.rsset</tt>, so I didn't make the connection to the segments.)<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">&quot;<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CONDES</tt>&quot;<br /><br />Segments like this appear to be used for initialization before <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">main&#40;&#41;</tt> starts. For example, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;stdio.h&gt;</tt> wants to set up <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stdin</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">stdout</tt>, and C++ programs want to run constructors for global objects.</div><br />Is there even a C++ compiler for 6502 programs?<br />However, since I won't use any libraries, I assume it's safe to remove that stuff, right? Especially since in the default config file, after removing the WRAM stuff, the FEATURES section only has CONDES for RODATA anyway. And not for, like, STARTUP.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">&quot;And why are VECTORS and CHARS declared as read/write?<br /><br />It might just be an error in a particular linker script.</div><br />I set it to readonly now since my game won't have anything that has to do with CHR RAM.<br /><br />What I still like to know: How can both, the header and the CHARS/ROM2 data (i.e. the graphic tiles) start at location zero?<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">A lot of the segments that you don't understand are more useful for programs that run on computers with a tape or disk drive and a keyboard, such as the Commodore 64, than on computers with an execute-in-place ROM and a joystick, such as the Nintendo Entertainment System.</div><br />Yeah, it's good that the NES seems to be rather simple in comparison to the other systems.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 12, 2013 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Problem with the &quot;nes.cfg&quot; and 1 x 16 KB PRG</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">What I still like to know: How can both, the header and the CHARS/ROM2 data (i.e. the graphic tiles) start at location zero?</div><br /><br />1. The MEMORY locations are simply blocks of data that are output to the file in the other specified. The output file layout has nothing to do with their intended location on the CPU's memory bus.<br /><br />2. CHR data is on the PPU's bus, not the CPU's, so its memory address is unrelated to the ones used for PRG.<br /><br />3. If you use a mapper that supports PRG bank switching, you will create several PRG banks that have to use the same memory locations. The specified memory address is telling the linker where the code needs to be run from. Obviously you can't have two banks using the same memory location at the same time, but that is what bank switching is for. The PRG code still needs to be linked to run in the correct location.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>