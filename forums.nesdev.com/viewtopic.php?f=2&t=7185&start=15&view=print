<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - ATALAN - new programming language for 6502</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">ATALAN - new programming language for 6502</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7185">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7185</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Tue Nov 23, 2010 12:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> One thing about optimization, though, can it do it to entire basic blocks, or is it only at the statement level? For example, if I incremented a variable then immediately decremented it, is there any way that could be optimized out entirely?</div>
<br />
<br />Optimizations work on whole blocks and more. Some optimizations (for example live variable analysis) even perform data flow analysis, so they work with multiple blocks.
<br />
<br />Optimizations are performed at assembler level, i.e. after translation from 'high level' instructions to 'assembler' instructions are done. This means, that even unnecessary parts of multibyte instructions can be removed etc. Also theoretically it can try to optimize assmbler code in the future <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Tue Nov 23, 2010 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Adding support for peephole optimization would depend on keywords in the language to mark a variable as having side effects on read or write. For example, C uses volatile for this. Otherwise, it'd optimize out the first of two writes to $2005 or $2006 and the second through eighth reads from $4016.</div>
<br />
<br />It is possible to mark variable as IN (it can return different values in succesive reads) or OUT (writing to variable has some side effect). Optimizer will not optimize out writes to out registers or reads from in registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Tue Nov 23, 2010 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As an example of quality of generated code, see for example this simple program and it's translation to 6502 code.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Horizontal Stars<br />; Demo program for ATALAN programming language<br />;&#40;c&#41; 2010 Rudla Kudla<br /><br />i:0..242&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; number of lines with stars<br />hpos:array&#40;242&#41; of byte<br />speed:array&#40;242&#41; of 1..4<br />col:array&#40;242&#41; of color<br /><br />;Turn off screen, so we have nice black deep space<br /><br />DMACTL = 0<br />GRACTL = 0<br /><br />;Initialize start positions, speeds and colors<br /><br />for i <br />&nbsp; &nbsp;hpos&#40;i&#41;&nbsp; = RANDOM<br />&nbsp; &nbsp;speed&#40;i&#41; = &#40;RANDOM and 3&#41; + 1<br />&nbsp; &nbsp;col&#40;i&#41;&nbsp; &nbsp;= RANDOM or 3&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;make the star color light enough <br /><br />;Setup sprite 0<br /><br />player_gfx&#40;0&#41; = 1<br />player_size&#40;0&#41; = 0<br /><br />until STRIG&#40;0&#41; = pressed<br /><br />&nbsp; &nbsp;until VCOUNT = 4 <br />&nbsp; &nbsp;&nbsp; &nbsp;wait'line<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;for i<br />&nbsp; &nbsp;&nbsp; &nbsp;player_col2&#40;0&#41; = col&#40;i&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;player_x&#40;0&#41; = hpos&#40;i&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;hpos&#40;i&#41; = hpos&#40;i&#41; + speed&#40;i&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;wait'line<br /><br />;Turn off sprite and turn on screen<br /><br />player_gfx&#40;0&#41; = 0<br />player_gfx&#40;1&#41; = 0<br />GRACTL = 0<br />DMACTL = 34<br /></div><br /><br />6502:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />RANDOM equ 53770<br />VCOUNT equ 54283<br />WSYNC equ 54282<br />button__state__pressed equ 0<br />STRIG equ 644<br />DMACTL equ 559<br />player_size equ 53256<br />player_x equ 53248<br />player_gfx equ 53261<br />player_col2 equ 53266<br />GRACTL equ 53277<br />&nbsp; &nbsp;org $2e0<br />&nbsp; &nbsp;dta a&#40;$2000&#41;<br />&nbsp; &nbsp;org $2000<br />;### stars.atl&#40;12&#41; DMACTL = 0<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta DMACTL<br />;### stars.atl&#40;13&#41; GRACTL = 0<br />&nbsp; &nbsp;sta GRACTL<br />;### stars.atl&#40;17&#41; for i <br />&nbsp; &nbsp;tax<br />_lbl2:<br />;### stars.atl&#40;18&#41; &nbsp; &nbsp;hpos&#40;i&#41;&nbsp; = RANDOM<br />&nbsp; &nbsp;lda RANDOM<br />&nbsp; &nbsp;sta hpos,x<br />;### stars.atl&#40;19&#41; &nbsp; &nbsp;speed&#40;i&#41; = &#40;RANDOM and 3&#41; + 1<br />&nbsp; &nbsp;and #3<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #1<br />&nbsp; &nbsp;sta speed,x<br />;### stars.atl&#40;20&#41; &nbsp; &nbsp;col&#40;i&#41;&nbsp; &nbsp;= RANDOM or 3&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;make the star color light enough <br />&nbsp; &nbsp;lda RANDOM<br />&nbsp; &nbsp;ora #3<br />&nbsp; &nbsp;sta col,x<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #243<br />&nbsp; &nbsp;jne _lbl2<br />;### stars.atl&#40;24&#41; player_gfx&#40;0&#41; = 1<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta player_gfx<br />;### stars.atl&#40;25&#41; player_size&#40;0&#41; = 0<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta player_size<br />;### stars.atl&#40;40&#41; player_gfx&#40;0&#41; = 0<br />&nbsp; &nbsp;jmp _lbl3<br />_lbl10:<br />;### stars.atl&#40;32&#41; &nbsp; &nbsp;for i<br />&nbsp; &nbsp;jmp _lbl5<br />_lbl7:<br />;### stars.atl&#40;30&#41; &nbsp; &nbsp;&nbsp; &nbsp;wait'line<br />&nbsp; &nbsp;sta WSYNC<br />_lbl5:<br />;### stars.atl&#40;29&#41; &nbsp; &nbsp;until VCOUNT = 4 <br />&nbsp; &nbsp;lda VCOUNT<br />&nbsp; &nbsp;cmp #4<br />&nbsp; &nbsp;jne _lbl7<br />_lbl6:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;tax<br />_lbl9:<br />;### stars.atl&#40;33&#41; &nbsp; &nbsp;&nbsp; &nbsp;player_col2&#40;0&#41; = col&#40;i&#41;<br />&nbsp; &nbsp;lda col,x<br />&nbsp; &nbsp;sta player_col2<br />;### stars.atl&#40;34&#41; &nbsp; &nbsp;&nbsp; &nbsp;player_x&#40;0&#41; = hpos&#40;i&#41;<br />&nbsp; &nbsp;lda hpos,x<br />&nbsp; &nbsp;sta player_x<br />;### stars.atl&#40;35&#41; &nbsp; &nbsp;&nbsp; &nbsp;hpos&#40;i&#41; = hpos&#40;i&#41; + speed&#40;i&#41;<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc speed,x<br />&nbsp; &nbsp;sta hpos,x<br />;### stars.atl&#40;36&#41; &nbsp; &nbsp;&nbsp; &nbsp;wait'line<br />&nbsp; &nbsp;sta WSYNC<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #243<br />&nbsp; &nbsp;jne _lbl9<br />_lbl3:<br />;### stars.atl&#40;27&#41; until STRIG&#40;0&#41; = pressed<br />&nbsp; &nbsp;lda STRIG<br />&nbsp; &nbsp;cmp #button__state__pressed<br />&nbsp; &nbsp;jne _lbl10<br />_lbl4:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta player_gfx<br />;### stars.atl&#40;41&#41; player_gfx&#40;1&#41; = 0<br />&nbsp; &nbsp;sta player_gfx+1<br />;### stars.atl&#40;42&#41; GRACTL = 0<br />&nbsp; &nbsp;sta GRACTL<br />;### stars.atl&#40;43&#41; DMACTL = 34<br />&nbsp; &nbsp;lda #34<br />&nbsp; &nbsp;sta DMACTL<br />_lbl11:<br />&nbsp; &nbsp;jmp _lbl11<br />hpos:<br />&nbsp; &nbsp;.ds 243<br />speed:<br />&nbsp; &nbsp;.ds 243<br />col:<br />&nbsp; &nbsp;.ds 243<br />&nbsp; &nbsp;icl 'P:\atalan\atalan\platform\atari\atari.asm'<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Nov 23, 2010 1:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do see some optimization here:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;### stars.atl&#40;34&#41;&nbsp; &nbsp; &nbsp; &nbsp;player_x&#40;0&#41; = hpos&#40;i&#41;<br />&nbsp; &nbsp;lda hpos,x<br />&nbsp; &nbsp;sta player_x<br />;### stars.atl&#40;35&#41;&nbsp; &nbsp; &nbsp; &nbsp;hpos&#40;i&#41; = hpos&#40;i&#41; + speed&#40;i&#41;<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc speed,x<br />&nbsp; &nbsp;sta hpos,x</div><br />What happened here?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">_lbl6:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;tax<br />_lbl9:<br />&nbsp; &nbsp;lda col,x</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Tue Nov 23, 2010 1:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What happened here?</div>
<br />I'm guessing, this: 
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; inx <br />&nbsp; &nbsp;cpx #243 <br />&nbsp; &nbsp;jne _lbl9<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Tue Nov 23, 2010 1:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Optimizer currently has rule, that it won't change short instruction to longer one (i.e. tax to ldx #0). In this situation, the rule should be more complicated - it should recognize, the lda #0 would not b needed if ldx #0 is used. But that is to be done, yet.
<br />
<br />Optimizer is not perfect yet, but I believe, the produced code is already 'presentable'. <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />
<br />
<br />Btw. it is possible to write interrupt routines in Atalan.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Tue Nov 23, 2010 2:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@mic_:
<br />
<br />Your guess is correct.
<br />Loop optimizer decided x could be used throughout the loop and does not need to be reloaded - it's value was originally in a. The lda #0 tax is the last remaining artifact of this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Sun Nov 28, 2010 4:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You inspired me to develop optimization for these cases. <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> Now the code looks like this (see how that same optimization applied at the beginning of the source code):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">RANDOM equ 53770<br />VCOUNT equ 54283<br />WSYNC equ 54282<br />button__state__pressed equ 0<br />STRIG equ 644<br />DMACTL equ 559<br />player_size equ 53256<br />player_x equ 53248<br />player_gfx equ 53261<br />player_col2 equ 53266<br />GRACTL equ 53277<br />&nbsp; &nbsp;org $2e0<br />&nbsp; &nbsp;dta a&#40;$2000&#41;<br />&nbsp; &nbsp;org $2000<br />;### stars.atl&#40;12&#41; DMACTL = 0<br />&nbsp; &nbsp;ldx #0<br />&nbsp; &nbsp;stx DMACTL<br />;### stars.atl&#40;13&#41; GRACTL = 0<br />&nbsp; &nbsp;stx GRACTL<br />;### stars.atl&#40;17&#41; for i <br />_lbl2:<br />;### stars.atl&#40;18&#41; &nbsp; &nbsp;hpos&#40;i&#41;&nbsp; = RANDOM<br />&nbsp; &nbsp;lda RANDOM<br />&nbsp; &nbsp;sta hpos,x<br />;### stars.atl&#40;19&#41; &nbsp; &nbsp;speed&#40;i&#41; = &#40;RANDOM and 3&#41; + 1<br />&nbsp; &nbsp;and #3<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #1<br />&nbsp; &nbsp;sta speed,x<br />;### stars.atl&#40;20&#41; &nbsp; &nbsp;col&#40;i&#41;&nbsp; &nbsp;= RANDOM or 3&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;make the star color light enough <br />&nbsp; &nbsp;lda RANDOM<br />&nbsp; &nbsp;ora #3<br />&nbsp; &nbsp;sta col,x<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #243<br />&nbsp; &nbsp;jne _lbl2<br />;### stars.atl&#40;24&#41; player_gfx&#40;0&#41; = 1<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta player_gfx<br />;### stars.atl&#40;25&#41; player_size&#40;0&#41; = 0<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta player_size<br />;### stars.atl&#40;40&#41; player_gfx&#40;0&#41; = 0<br />&nbsp; &nbsp;jmp _lbl3<br />_lbl7:<br />;### stars.atl&#40;30&#41; &nbsp; &nbsp;&nbsp; &nbsp;wait'line<br />&nbsp; &nbsp;sta WSYNC<br />_lbl5:<br />;### stars.atl&#40;29&#41; &nbsp; &nbsp;until VCOUNT = 4 <br />&nbsp; &nbsp;lda VCOUNT<br />&nbsp; &nbsp;cmp #4<br />&nbsp; &nbsp;jne _lbl7<br />_lbl6:<br />&nbsp; &nbsp;ldx #0<br />_lbl9:<br />;### stars.atl&#40;33&#41; &nbsp; &nbsp;&nbsp; &nbsp;player_col2&#40;0&#41; = col&#40;i&#41;<br />&nbsp; &nbsp;lda col,x<br />&nbsp; &nbsp;sta player_col2<br />;### stars.atl&#40;34&#41; &nbsp; &nbsp;&nbsp; &nbsp;player_x&#40;0&#41; = hpos&#40;i&#41;<br />&nbsp; &nbsp;lda hpos,x<br />&nbsp; &nbsp;sta player_x<br />;### stars.atl&#40;35&#41; &nbsp; &nbsp;&nbsp; &nbsp;hpos&#40;i&#41; = hpos&#40;i&#41; + speed&#40;i&#41;<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc speed,x<br />&nbsp; &nbsp;sta hpos,x<br />;### stars.atl&#40;36&#41; &nbsp; &nbsp;&nbsp; &nbsp;wait'line<br />&nbsp; &nbsp;sta WSYNC<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #243<br />&nbsp; &nbsp;jne _lbl9<br />_lbl3:<br />;### stars.atl&#40;27&#41; until STRIG&#40;0&#41; = pressed<br />&nbsp; &nbsp;lda STRIG<br />&nbsp; &nbsp;cmp #button__state__pressed<br />&nbsp; &nbsp;jne _lbl5<br />_lbl4:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta player_gfx<br />;### stars.atl&#40;41&#41; player_gfx&#40;1&#41; = 0<br />&nbsp; &nbsp;sta player_gfx+1<br />;### stars.atl&#40;42&#41; GRACTL = 0<br />&nbsp; &nbsp;sta GRACTL<br />;### stars.atl&#40;43&#41; DMACTL = 34<br />&nbsp; &nbsp;lda #34<br />&nbsp; &nbsp;sta DMACTL<br />_lbl11:<br />&nbsp; &nbsp;jmp _lbl11<br />hpos:<br />&nbsp; &nbsp;.ds 243<br />speed:<br />&nbsp; &nbsp;.ds 243<br />col:<br />&nbsp; &nbsp;.ds 243<br />&nbsp; &nbsp;icl 'P:\atalan\atalan\platform\atari\atari.asm'<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Nov 30, 2010 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />- A minor thing: personally, I like the C stardard for comparison and attribution. Like...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;int A = 0; /* A becomes zero */<br /><br />while&#40; A == 0 &#41; &#123; /* compares A with zero */ <br />&#125;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-Basti-</b> [ Tue Dec 21, 2010 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great project. I learned Python at school and would really like to give this one a try.
<br />Does anyone know a good emulator to test my atalan code?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Dec 21, 2010 10:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd say FCEU (the plain version) because it has an easy to use debugger.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Sun Mar 25, 2012 7:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So, I had a go at trying out Atalan this weekend, and thought I'd summarize my experience with it for the benefit of others.
<br />
<br />I approached it with a quite positive attitude. While some of the syntax might seem strange at first, I did find it rather elegant, and saving a lot of characters to write compared to C/Java syntax.
<br />
<br />I decided to try and port the simple map editor I have written for my current game project, which allows you to do some simple editing of the map for easier debugging. This seemed like a good example of something I could try out a HLL for: performance is not a big issue and it requires a lot of repetitive code that becomes hard to maintain in asm. Besides, since it's not something you'd need in the final product, you wouldn't become dependent on it for the rest of your game.
<br />
<br />But when trying out the version available from the website, switching the platform to nes with the '-p nes' option would make the compiler crash with a "Atalan has stopped working" windows dialog. Compiling for the default atari target did work though. (for 'hello world' and the other included examples at least)
<br />
<br />Not wanting to give up just yet, I checked out the SVN source from the Atalan source repository trunk. And with this one, the 'hello world' example finally worked. However, when trying out the part of my map editor that I had re-written in Atalan, I got the same old compiler crash. Eventually, I tracked down that this code:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const SpriteImageEditCursor:array = &#40;<br />&nbsp; &nbsp; 4,<br />&nbsp; &nbsp; 0,EDIT_CURSOR_TILEID&amp;$FF,$00,0<br />&nbsp; &nbsp; 0,EDIT_CURSOR_TILEID&amp;$FF,$40,8<br />&nbsp; &nbsp; 8,EDIT_CURSOR_TILEID&amp;$FF,$80,0<br />&nbsp; &nbsp; 8,EDIT_CURSOR_TILEID&amp;$FF,$C0,8<br />&nbsp; &nbsp; &#41;<br /></div><br /><br />...should really look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">const SpriteImageEditCursor:array = &#40;<br />&nbsp; &nbsp; 4,<br />&nbsp; &nbsp; 0,EDIT_CURSOR_TILEID bitand $FF,$00,0<br />&nbsp; &nbsp; 0,EDIT_CURSOR_TILEID bitand $FF,$40,8<br />&nbsp; &nbsp; 8,EDIT_CURSOR_TILEID bitand $FF,$80,0<br />&nbsp; &nbsp; 8,EDIT_CURSOR_TILEID bitand $FF,$C0,8<br />&nbsp; &nbsp; &#41;<br /></div><br /><br />But I sure would have expected this to result in a syntax error rather than a crashing compiler.<br /><br />Anyways, now I was somewhat back on track to re-write my assembly code in Atalan. Atalan uses the syntax of the MADS assembler for the assembly code it outputs, while my project uses CA65. But fortunately, rewriting the m6502.atl and nes.atl files to produce code in CA65 syntax wasn't that hard, and was one of the things I found exciting about the Atalan project - to easily be able to tune the backend for your own needs. It did help that I know Polish as a second language though, since the MADS documentation is in Polish and I had to find out how certain directives worked to know which CA65 counterparts they should use instead. :)<br /><br />One strange error I never understood was how defining a byte value at a certain memory location like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">joyP0@$15:byte<br /></div><br /><br />And then using it like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if joyP0 bitand JOY_SELECT &lt;&gt; 0<br />&nbsp; &nbsp; CopyMapToSRAM<br />&nbsp; &nbsp; return $80<br /></div><br />Would produce "Logic error: Cannot infer type of result of operator 'bitand'." from the compiler (very common error message that kept creeping up in a lot of other cases as well)<br /><br />The solution I found by trial and error was to replace the declaration with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">in joyP0@$15:byte<br /></div><br />Which is really only supposed to be needed for hardware registers where you don't want the compiler to optimize away multiple reads from it.<br /><br />I had read a lot about Atalan's optimization features, so I was very eager to inspect the resulting code. Here's the routines I wrote one-by-one:<br /><br /><strong>* Atalan source *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UploadEditCursorCHR:proc =<br />&nbsp; &nbsp; addr:0..65535<br />&nbsp; &nbsp; addr = EDIT_CURSOR_TILEID*16<br />&nbsp; &nbsp; PPU_DATA_ADR = hi addr<br />&nbsp; &nbsp; PPU_DATA_ADR = lo addr<br />&nbsp; &nbsp; for i:0..7<br />&nbsp; &nbsp; &nbsp; &nbsp; PPU_DATA = 0<br />&nbsp; &nbsp; for i:0..7<br />&nbsp; &nbsp; &nbsp; &nbsp; PPU_DATA = EditCursorCHR&#40;i&#41;<br /></div><br /><br /><strong>* Assembly output *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc UploadEditCursorCHR<br />;### editmap.atl&#40;55&#41;&nbsp; &nbsp; &nbsp;addr = EDIT_CURSOR_TILEID*16<br />&nbsp; &nbsp;lda #240<br />&nbsp; &nbsp;sta UploadEditCursorCHR__addr+0<br />&nbsp; &nbsp;lda #31<br />&nbsp; &nbsp;sta UploadEditCursorCHR__addr+1<br />;### editmap.atl&#40;56&#41;&nbsp; &nbsp; &nbsp;PPU_DATA_ADR = hi addr<br />&nbsp; &nbsp;sta PPU_DATA_ADR<br />;### editmap.atl&#40;57&#41;&nbsp; &nbsp; &nbsp;PPU_DATA_ADR = lo addr<br />&nbsp; &nbsp;lda #240<br />&nbsp; &nbsp;sta PPU_DATA_ADR<br />;### editmap.atl&#40;58&#41;&nbsp; &nbsp; &nbsp;for i:0..7<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta _s1__i<br />_lbl6:<br />;### editmap.atl&#40;59&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PPU_DATA = 0<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta PPU_DATA<br />&nbsp; &nbsp;inc _s1__i<br />&nbsp; &nbsp;lda _s1__i<br />&nbsp; &nbsp;cmp #8<br />&nbsp; &nbsp;jne _lbl6<br />;### editmap.atl&#40;60&#41;&nbsp; &nbsp; &nbsp;for i:0..7<br />&nbsp; &nbsp;ldx #0<br />_lbl8:<br />;### editmap.atl&#40;61&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PPU_DATA = EditCursorCHR&#40;i&#41;<br />&nbsp; &nbsp;lda EditCursorCHR,x<br />&nbsp; &nbsp;sta PPU_DATA<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #8<br />&nbsp; &nbsp;jne _lbl8<br />&nbsp; &nbsp;rts<br />.endproc<br /></div><br /><br />First, I would have expected the stores to the intermediate 'addr' variable to be optimized out by the compiler. But even more strange is how the first loop writing zeros to $2007 produces much worse code than the one copying the contents of my array.<br /><br />Then finally, a small part of my original asm routine that updates the cursor movement in the map editor:<br /><br /><strong>* Atalan source *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UpdateMapEditor:proc &gt;modifiedFlags:byte = <br />&nbsp; &nbsp; DrawEditCursor<br /><br />&nbsp; &nbsp; if joyP0 bitand JOY_SELECT &lt;&gt; 0<br />&nbsp; &nbsp; &nbsp; &nbsp; CopyMapToSRAM<br />&nbsp; &nbsp; &nbsp; &nbsp; return $80<br />&nbsp; &nbsp; else if &#40;joyP0 bitand JOY_LEFT &lt;&gt; 0&#41; and editCursorX &gt; 0<br />&nbsp; &nbsp; &nbsp; &nbsp; dec editCursorX<br />&nbsp; &nbsp; else if &#40;joyP0 bitand JOY_RIGHT &lt;&gt; 0&#41; and editCursorX &lt; 15<br />&nbsp; &nbsp; &nbsp; &nbsp; inc editCursorX<br />&nbsp; &nbsp; else if &#40;joyP0 bitand JOY_UP &lt;&gt; 0&#41; and editCursorY &gt; 0<br />&nbsp; &nbsp; &nbsp; &nbsp; dec editCursorY<br />&nbsp; &nbsp; else if &#40;joyP0 bitand JOY_DOWN &lt;&gt; 0&#41; and editCursorY &lt; 14<br />&nbsp; &nbsp; &nbsp; &nbsp; inc editCursorY<br /><br />&nbsp; &nbsp; return 0<br /></div><br /><br /><strong>* Assembly output *</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc UpdateMapEditor<br />;### editmap.atl&#40;71&#41;&nbsp; &nbsp; &nbsp;DrawEditCursor<br />&nbsp; &nbsp;jsr DrawEditCursor<br />;### editmap.atl&#40;73&#41;&nbsp; &nbsp; &nbsp;if joyP0 bitand JOY_SELECT &lt;&gt; 0<br />&nbsp; &nbsp;lda joyP0<br />&nbsp; &nbsp;and #root__JOY_SELECT<br />&nbsp; &nbsp;sta UpdateMapEditor___37<br />&nbsp; &nbsp;jeq _lbl9<br />;### editmap.atl&#40;74&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CopyMapToSRAM<br />&nbsp; &nbsp;jsr CopyMapToSRAM<br />;### editmap.atl&#40;75&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return $80<br />&nbsp; &nbsp;jmp _exit32766<br />_lbl9:<br />;### editmap.atl&#40;76&#41;&nbsp; &nbsp; &nbsp;else if &#40;joyP0 bitand JOY_LEFT &lt;&gt; 0&#41; and editCursorX &gt; 0<br />&nbsp; &nbsp;lda joyP0<br />&nbsp; &nbsp;and #root__JOY_LEFT<br />&nbsp; &nbsp;sta UpdateMapEditor___39<br />&nbsp; &nbsp;jeq _lbl11<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;cmp editCursorX<br />&nbsp; &nbsp;jcs _lbl11<br />&nbsp; &nbsp;dec editCursorX<br />&nbsp; &nbsp;jmp _exit32766<br />_lbl11:<br />;### editmap.atl&#40;78&#41;&nbsp; &nbsp; &nbsp;else if &#40;joyP0 bitand JOY_RIGHT &lt;&gt; 0&#41; and editCursorX &lt; 15<br />&nbsp; &nbsp;lda joyP0<br />&nbsp; &nbsp;and #root__JOY_RIGHT<br />&nbsp; &nbsp;sta UpdateMapEditor___40<br />&nbsp; &nbsp;jeq _lbl12<br />&nbsp; &nbsp;lda editCursorX<br />&nbsp; &nbsp;cmp #15<br />&nbsp; &nbsp;jcs _lbl12<br />&nbsp; &nbsp;inc editCursorX<br />&nbsp; &nbsp;jmp _exit32766<br />_lbl12:<br />;### editmap.atl&#40;80&#41;&nbsp; &nbsp; &nbsp;else if &#40;joyP0 bitand JOY_UP &lt;&gt; 0&#41; and editCursorY &gt; 0<br />&nbsp; &nbsp;lda joyP0<br />&nbsp; &nbsp;and #root__JOY_UP<br />&nbsp; &nbsp;sta UpdateMapEditor___41<br />&nbsp; &nbsp;jeq _lbl13<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;cmp editCursorY<br />&nbsp; &nbsp;jcs _lbl13<br />&nbsp; &nbsp;dec editCursorY<br />&nbsp; &nbsp;jmp _exit32766<br />_lbl13:<br />;### editmap.atl&#40;82&#41;&nbsp; &nbsp; &nbsp;else if &#40;joyP0 bitand JOY_DOWN &lt;&gt; 0&#41; and editCursorY &lt; 14<br />&nbsp; &nbsp;lda joyP0<br />&nbsp; &nbsp;and #root__JOY_DOWN<br />&nbsp; &nbsp;sta UpdateMapEditor___42<br />&nbsp; &nbsp;jeq _exit32766<br />&nbsp; &nbsp;lda editCursorY<br />&nbsp; &nbsp;cmp #14<br />&nbsp; &nbsp;jcs _exit32766<br />&nbsp; &nbsp;inc editCursorY<br />_exit32766:<br />&nbsp; &nbsp;rts<br />.endproc<br /></div>
<br />
<br />The 'jmp' commands to _exit32766 could obviously be optimized away with an 'rts'. Also, the 'return N' commands don't seem to work at all since the return values aren't stored anywhere. 
<br />
<br />But most importantly, we again see lots of intermediate results being written to temporary variables for no good reason. For just this short piece of code, there are no less than 4 of them.
<br />
<br />So this looks like the real showstopper to me and I probably won't attempt to convert the rest of my mapeditor to Atalan. While I could live with some of the slower/larger code produced, it seems like the memory usage will just explode in Atalan code. While it is true that this is only temporary variable space, and Atalan did correctly re-use the same memory areas in other routines in my short program, the unnecessary memory stores could easily eat up most of your zeropage memory in a more complex routine. And really, ~16 bytes should be enough temporary space for most projects I could think of.
<br />
<br />So my conclusion would be that Atalan is a very fascinating proof-of-concept, and if it did perform what the documentation suggests, it would likely be the language I'd choose for non-performance critical AI code in my game. But at this point, the implementation is just not mature enough to be usable in practice. I hope that it reaches that stage in a few years from now, but looking at the source code repository and the discussion groups, development seems to have been ramping down quite a bit during the last year.
<br />
<br />Still, I recommend anyone who's thinking about implementing a compiler for the 6502 (or any other low-level system for that matter) to have a serious look at Atalan for inspiration. If you do like to have a go at language implementation in your spare time, improving Atalan could be a good start. But personally, I don't want to get stuck in yet another time-consuming sideproject that keeps me from actually working on my project :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Mar 25, 2012 10:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bananmos wrote:</div><div class="quotecontent">Anyways, now I was somewhat back on track to re-write my assembly code in Atalan. Atalan uses the syntax of the MADS assembler for the assembly code it outputs, while my project uses CA65. But fortunately, rewriting the m6502.atl and nes.atl files to produce code in CA65 syntax wasn't that hard, and was one of the things I found exciting about the Atalan project - to easily be able to tune the backend for your own needs. It did help that I know Polish as a second language though, since the MADS documentation is in Polish and I had to find out how certain directives worked to know which CA65 counterparts they should use instead. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />To whom it may concern, CA65 has an undocumented pseudo-op ".dbg" that CC65 uses to add debug line information (among other things) to asm generated from C code. With some changes to Atalan (I doubt it's possible just by modifying the templates?) it should be possible to use it to get source level debugging of Atalan code in emulators like NESICIDE and NintendulatorDX.
<br />
<br />Just throwing that out there since it's probably not common knowledge.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rudla.kudla</b> [ Sun Mar 25, 2012 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for trying Atalan. I'm sorry your experience has not been better. Atalan is still work in progress (and will probably be forever <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /> ) and not much code has been written in it, therefore it is not impossible (or even hard) to encounter error in parsing. They are usually easy to fix, and I will try to use your example to fix the error.
<br />
<br />Optimizations are similar story.  I only recently introduced support for processor flags, and not everything has been tuned up (again, having test examples helps a lot). For example 'STA' storing the result of 'AND' into local variable has not been removed, because it modifies flags and they are used in next instruction. Of course the same flag has been set by 'AND', but teaching this the compiler is one of hundreds little things that must be done. Now that I have the input, I may be able to do it.
<br />
<br />As for strange 'Logic error: Cannot infer type ' errors. This is side effect of very interesting (I believe) and very experimental feature of Atalan. It does interval type inferecing. The algorithm is complex and not yet complete and often needs much better error messages. So what happens in your case is, that Atalan fails to infer type of the variable joyP0 at that exact position. When you mark the variable as input, Atalan always takes the defined interval as the value range.
<br />
<br />All in all, although I would very much like someone to keep trying to use Atalan and thus give me the valuable inputs I'm currently missing, I would not recommend anyone to try to use it for 'real' development. Atalan is now just for the brave. <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" />
<br />
<br />I am now trying to develop some bigger game in Atalan for Atari while fixing any errors I encounter in the process and implementing necessary features. After I finish this, I may try to port the game for NES, and that may be the right moment to jump the train for others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Sun Mar 25, 2012 2:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well one input from me regarding parsing problems in general:
<br />Unless you want to dedicate a lot of your development time to writing a lexalizer/parser for the pure sake of learning, it is IMO an almost insane waste of time to write your own parser. 
<br />
<br />Parsing source code is one of the things in compiler programming that is very simple to write a first working implementation for, yet extremely hard and tedious to get bugfree. I'm willing to bet that replacing your own parsing code with Flex/Bison will make life much simpler for both you and Atalan users. Not to mention the fact that when the rest of the Atalan backend is so configurable and data-driven, it sure would be nice if the scanning&amp;parsing would be as easy for other people to understand and experiment with :)
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As for strange 'Logic error: Cannot infer type ' errors. This is side effect of very interesting (I believe) and very experimental feature of Atalan. It does interval type inferecing. The algorithm is complex and not yet complete and often needs much better error messages. So what happens in your case is, that Atalan fails to infer type of the variable joyP0 at that exact position. When you mark the variable as input, Atalan always takes the defined interval as the value range. </div>
<br />
<br />I did not understand this very well - would you mind explaining it in more detail? :)
<br /> 
<br />i.e., what is this "interval type inferecing"? And why does it only respect the "defined interval" (the :byte tag I presume?) if the variable is marked with 'in'? This one is really puzzling me.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>