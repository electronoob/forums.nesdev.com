<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - some questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">some questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1929">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1929</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>n6</b> [ Wed Aug 23, 2006 4:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>some questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, here are some questions iam wondering about...
<br />
<br />1. Can code be executed from anywhere? SRAM, $0x2000 etc.. I guess it should be treated as a normal read if this happens, like if reading $0x2002 and vblank flag is set, reset it. I guess this doesnt happen to often, is it a bad idea to just support code execution from $0-$0x1FFF, $0x4000-$0xFFFF ($0x4000 - $0x6000, treated as external RAM)
<br />
<br />2. What happens if an increment from an absolute address occur in ROM and a mapper is used. Is it something special that happens or do the general code work? Load from ROM, increment it, Store to Mapper reg.
<br />
<br />3. What exactly is it that can change the way the PPU renders the screen?
<br />Most things seems to be disabled? Scroll can be changed right?, Control1 and Control2 can they be changed? Is it possible to disable rendering inside of a screen and change more things that is disabled during rendering?
<br />
<br />thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Aug 23, 2006 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: some questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you think of everything in terms of CPU reads and writes, this stuff makes a bit more sense.  For example, 'LDA $2002' performs 4 reads -- one at PC (to fetch the opcode), then PC+1, and PC+2 to fetch the address, then $2002 for the actual desired data.  Fundamentally, there is no difference between these reads other than the address they read from.
<br />
<br />
<br />1)  Yes code can be executed from anywhere.  Even register space (JMP $2000 would be legal... though the opcode the CPU would read from $2000 would probably make the game crash).
<br />
<br />2)  Nothing special... what you described ("Load from ROM, increment it, Store to Mapper reg.") is pretty much what happens.  Again if you think of it just in terms of generic reads and writes -- a read from $8000 gets you ROM, but a write to $8000 goes to a mapper reg.  So if the game does something like INC $8000, it will perform the ROM read, then write back to the mapper reg.
<br />
<br />3)  
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What exactly is it that can change the way the PPU renders the screen?</div><br />Anything that affects PPU status.  $200x reads/writes, $4014 write (provided it's done in VBlank or the PPU is off), CHR swapping, mirroring mode change, etc.<br /><br />The only things which cannot safely be done during rendering while the PPU is on is $2003,$2004,$2007 and $4014.  Everything else is fair game.  But even some games (*cough*MicroMachines*cough*) will read $2004 during rendering in order to perform some tricky HBlank timing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is it possible to disable rendering inside of a screen and change more things that is disabled during rendering?</div>
<br />
<br />Absolutely.  When the PPU is switched off, it becomes safe to do anything.  And the PPU can be switched on/off at any time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Wed Aug 23, 2006 8:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) Nothing special...</div>Hmm, if I'm correct, in the case of INC (and several other so-called read-modify-write opcodes) it will write the old value, then modify it.
<br />
<br />eg. $8000=1
<br />INC $8000 would write 1, then 2

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>n6</b> [ Wed Aug 23, 2006 3:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks a lot!
<br />just need some clarify on this
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The only things which cannot safely be done during rendering while the PPU is on is $2003,$2004,$2007 and $4014. Everything else is fair game. But even some games (*cough*MicroMachines*cough*) will read $2004 during rendering in order to perform some tricky HBlank timing. <br /></div>
<br />
<br />When you say safe, do you mean they are ignored? is it true both for reading and writing, (no address increment/$2007) and no write/read in the $2004/$2007 case for example? why isnt it safely to write to $2003?
<br />
<br />
<br />my plan for rendering is to wait until something that affects rendering happens, then draw everything from the last time and then update and wait until the next time or end of frame. is this a tested and good approach? is it usual that things that change the screen happens a lot of times inside of a frame?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Aug 23, 2006 4:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">n6 wrote:</div><div class="quotecontent">When you say safe, do you mean they are ignored?</div><br /><br />Not exactly.  I can't be 100% on any of this, but here's my understanding:<br /><br /><br />$2003 writes <em>might</em> be ignored -- or at least if they have any effect, it would alter the currently rendering sprites.  The sprite address appears to be constantly updated as OAM is fetched (similar to how the PPU address is updated as NT bytes are fetched).. so IF $2003 writes do anything, it would probably be something that screws up the works.<br /><br />$2007 writes can be disaterous, since the PPU is already constantly accessing PPU memory during rendering.  Writing to $2007 would throw it into write mode when it's trying to read, possibly scrambling what is read, what is written, as well as even the address.<br /><br />$2007 reads probably have a similar effect.<br /><br />$2004 reads return the OAM byte the PPU is currently accessing (the behavior is outlined on the wiki)<br /><br />$2004 writes <em>might</em> screw up OAM for the same reasons $2007 writes would screw up vram.  Or they might be ignored?  Also writing $2004 causes $2003 to be incremented -- which, if allowed, would probably have the same effect as a $2003 write.<br /><br />$4014 is simply a macro which does "automatic" writes to $2004 -- so whatever effect $2004 writes have during rendering is shared by $4014 (or rather, is "triggered" by $4014).<br /><br /><br />In an emu -- these things really don't matter all that much.  Taking the "ignore if done during rendering" approach will work -- or maybe even screw things up (since the behavior is unreliable on the system anyway).  The only one you'll probably have to deal with is $2004 reads during rendering, since Micro Machines relies on that behavior.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">my plan for rendering is to wait until something that affects rendering happens, then draw everything from the last time and then update and wait until the next time or end of frame. is this a tested and good approach?</div><br /><br />This is sometimes called the "catch-up" method.  You run the CPU ahead of everything else and "catch up" the other areas when something interesting happens.<br /><br />My emu does this.. as do several emus.  I find it to be a great and efficient approach.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">is it usual that things that change the screen happens a lot of times inside of a frame?</div>
<br />
<br />Depends on the game.  Some games change things every scanline -- some parts of games change things multiple times in the same scanline.  Some games do the whole frame without changing a thing.
<br />
<br />But a majority of the games out there DO split the screen or do some other raster effect mid-frame at least once.  So yeah, this kind of thing is very usual.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>n6</b> [ Sun Sep 03, 2006 5:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for your reply! I just have to ask one question about the method I mentioned, since you used it... How do you handle sprite0hit and max sprites per scanline? if reading the status register is counted as something that change the output wouldnt games that waits for any of this flags to be set be really heavy?
<br />
<br />do you do these tests "correct" (synced to the cpu)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Sep 03, 2006 7:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sprite 0 hit: Earliest possible hit is Y coordinate of top of sprite. Latest possible hit is Y + 15 (less if you're smarter). During these scanlines, when $2002 is read you'll need to run the pixel engine to present, or you could run a copy of the pixel engine to an internal buffer for the entire scanline in advance, and if a hit is found, cache the time it will occur. Cached hit/possible hit times should be invalidated when any PPU writes occur.
<br />
<br />Sprite max: Once rendering begins for a frame, scan all sprites to build a list of the number of sprites appearing one each scanline. First scanline with 8 or more sprites is the earliest possible sprite max time. Invalidate this predicted time if any writes to sprite RAM or sprite height occur. Once you get to the first predicted scanline, as above, either run the pixel engine to present on $2002 reads, or determine whether sprite max will occur on scanline in advance.
<br />
<br />I use both of the above methods and pass my sprite #0 hit and sprite max test ROMs. More detailed implementations of this were discussed a while back:
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?p=5901">http://nesdev.com/bbs/viewtopic.php?p=5901</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=1308">http://nesdev.com/bbs/viewtopic.php?t=1308</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?p=5598">http://nesdev.com/bbs/viewtopic.php?p=5598</a><!-- m -->

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>