<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Can somebody show me code for jumping/velocity?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Can somebody show me code for jumping/velocity?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=12434">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=12434</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>9258</b> [ Thu Feb 26, 2015 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've started programming fairly recently and I've found I learn best by reading other code. I don't know if it's a taboo to ask to see someone else's code (like I'm gonna steal it or something I guess?) but if so I'd be fine with just an explanation of one or some of the ways you might make a character jump. I can make a character go up, of course, and I have a working gravity engine to make them come back down, but what I need to learn to do is make it go up, hit a certain point, then come back down. Y'know. Just a normal jump like in any game. I've been trying a couple different ways and the only time I got it to work, I don't understand why it works. At first it was more of a teleport followed by a fall due to the gravity I'd written, then I put the vblank wait in the middle of the code for the jump and that made it happen correctly for some reason. It looks like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Jump:<br />&nbsp; LDX #$08<br />Moving:<br />&nbsp; LDA Sprite1VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite1VerticalPosition<br />&nbsp; LDA Sprite2VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite2VerticalPosition<br />&nbsp; LDA Sprite3VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite3VerticalPosition<br />&nbsp; LDA Sprite4VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite4VerticalPosition<br />&nbsp; DEX<br /><br />&nbsp; CPX #$00<br />&nbsp; BEQ JumpDone<br />vblankwaitforjump<br />readyyy<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwaitforjump<br />&nbsp; JMP Moving<br />JumpDone:</div><br /><br />Without the Vblank wait there, all eight &quot;move up by 2&quot;s happen at the same time and the character just shoots up to the right point. With the wait it lets each one happen frame by frame, but I don't know why that all works in the context of the rest of the code.<br /><br />Sorry if this has been posted before. I searched a few different phrases but &quot;jump&quot; being an instruction gets in the way a lot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 26, 2015 2:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When you jump, set a velocity variable to upward. Each frame, add a constant downward acceleration value to the velocity, and add the velocity to the current Y position. Eventually, the accumulated downward accelerations will cause the velocity to cross from upward to downward, which produces the peak of the jump, and as you repeat the process, the Y position will start moving downward.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Feb 26, 2015 2:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've changed the Subject line to reflect the request more clearly.  &quot;Can somebody show me a working code for a jump?&quot; to me meant &quot;can someone show me how to use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp</tt> in some weird/quirky way, or how can I do this (e.g. branch tables, etc.)&quot;, not actual animation/velocity/movement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Feb 26, 2015 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not going to attempt an example in assembly, because it would probably get bogged down in details like how to do 16 bit signed math on the 6502 and so on, but here's sort of a skeleton of how a player that can move and jump might look in a higher level language like C.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void update_player()<br />{<br />&nbsp; &nbsp;if (on_ground)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;if (button_a) velocity_y = -500; // apply sudden upward velocity for jump<br />&nbsp; &nbsp;&nbsp; &nbsp;if (dpad_left) velocity_x -= 5; // accelerate left<br />&nbsp; &nbsp;&nbsp; &nbsp;if (dpad_right) velocity_x += 5; // accelerate right<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;position_x += velocity_x;<br />&nbsp; &nbsp;resolve_horizontal_collision();<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;position_y += velocity_y;<br />&nbsp; &nbsp;resolve_vertical_collision();<br /><br />&nbsp; &nbsp;velocity_y += 10; // apply gravity<br />}<br /><br />void main_loop()<br />{<br />&nbsp; &nbsp;setup_level();<br />&nbsp; &nbsp;draw_frame();<br />&nbsp; &nbsp;rendering_on();<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;while (!quit)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;poll_gamepad();<br />&nbsp; &nbsp;&nbsp; &nbsp;update_player();<br />&nbsp; &nbsp;&nbsp; &nbsp;update_enemies();<br />&nbsp; &nbsp;&nbsp; &nbsp;draw_frame();<br />&nbsp; &nbsp;&nbsp; &nbsp;wait_vblank();<br />&nbsp; &nbsp;}<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Feb 26, 2015 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Huge thanks to rainwarrior for this -- for almost my entire life I've wondered how to do that (cleanly/clearly).  Wow.  Awesome.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Espozo</b> [ Thu Feb 26, 2015 6:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One problem I always found is that even if you have the gravitational acceleration at even just 1 pixel, jumping is going to rise and fall very fast. Even though there isn't a half value, you could always make the value jump between 0 and 1 every frame and it seems to work fairly well. You just have to make sure the value starts the same every time you jump. Otherwise, the jumping height will fluctuate a little. You know, could you actually have a table for jump heights that you add to the players y position? you would increment a pointer every frame that offsets the table. You could check to see if you are at the last value of the table and stay there so you don't run into data from other things and have it freak out. The values in the table would be relative to the objects current position, so it would be like: 8,4,2,1,0,-1,-2,-4,-8 (can't you do negative numbers?).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Thu Feb 26, 2015 6:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, you will want to have more bits/bytes dedicated to velocity than are to position, otherwise the peak of your jump will be severely angled.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 26, 2015 7:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />rainwarrior's method is what I have always done, and it has worked perfectly. I remember someone suggesting &quot;turning gravity off&quot; for a few frames when a jump starts, but I never considered that necessary.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Feb 26, 2015 7:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you subdivide the pixel, the granularity of  your velocity isn't really a problem anymore.<br /><br />There are many ways to subdivide, but the way I usually go with on the NES is 8.8 fixed point. Simply use two bytes each to represent your position and velocity as 16 bit numbers. The high byte is now the pixel position, the low byte is subpixel precision. Other than where you add the velocity to the position, you can generally ignore the low byte most of the time, and just work with the high byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Fri Feb 27, 2015 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />(One presumes that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">resolve_vertical_collision&#40;&#41;</tt> sets/clears on_ground on landing/walking off)<br /><br />However, gravity should only be applied <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">if&#40;!on_ground&#41;</tt><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;if (on_ground) {<br />&nbsp; &nbsp; &nbsp; if (button_a) {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;velocity_y = -500; // apply sudden upward velocity for jump<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on_ground = false;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; if (dpad_left) velocity_x -= 5; // accelerate left<br />&nbsp; &nbsp; &nbsp; if (dpad_right) velocity_x += 5; // accelerate right<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; velocity_y += 10; // apply gravity<br /></div><br />Part of the point of an on_ground flag is to reduce calculation; you don't need to check &quot;did I bonk into something vertically&quot;, only &quot;is there still ground&quot;.<br /><br />Similarly, the order of <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;position_x += velocity_x;<br />&nbsp; &nbsp;resolve_horizontal_collision();<br />&nbsp; &nbsp;position_y += velocity_y;<br />&nbsp; &nbsp;resolve_vertical_collision();<br /></div> is important. Doing it like that will produce some discrepancies: it will collide in cases A and C when it shouldn't, but not case B nor D when it should. (Indeed, a more in-depth collision than &quot;before and after&quot; is required to get all of these ironed out.)<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<img src="./download/file.php?id=2753" alt="CollisionProblem.png" /><br />
			<span class="gensmall">CollisionProblem.png [ 606 Bytes | Viewed 458 times ]</span>
		

		<br />
	</div><br />(Caveat: often, objects move slowly enough that this is not a problem; bullets, however, are likely to.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 27, 2015 7:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, the actual character controller routine for the game I am working on is many hundreds of lines long. I kept this example simple for illustration purposes.<br /><br />There are many ways to determine &quot;on_ground&quot;. It depends on how you implement collision, and other things. Whether it's a variable, when to update it, how to update it, this requires a specific solution, and this is only a generic question.<br /><br />Yes, you might like to apply gravity only if not on the ground. It depends on how you're handling it in your game. (In some cases having less code is more important than saving cycles, too, especially if using NROM.)<br /><br />Yes, you might want vertical motion before horizontal motion. Again, depends on the specifics of your game. You might even want to handle movement and collision in a different way. For bullets, you might want to move both at once and do point tests for collision, for example.<br /><br />There are all sorts of different ways to do this stuff. I didn't think it would help the example. This is also why I didn't use assembly; I wanted to show the high level concepts involved, the details are for the implementer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Prime</b> [ Sat Feb 28, 2015 2:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />He made it clear coding is fairly new to him,supplying anything besides asm isn't helping him<br /><br /><br />I'll Quote him:<br />(I can make a character go up, of course, and I have a working gravity engine to make them come back down, but what I need to learn to do is make it go up, hit a certain point, then come back down. Y'know. Just a normal jump like in any game)<br />.....................<br />Obviously looking at his code he's lost,the last thing he needs is a OnGroundFlag seriously.He's inquiring about a simple object jumping.<br />It's also laughable(you guys assumed he was talking about Collision Detection with his comment hit a certain point, then come back down) besides tepples and myself did anyone else even look at his code?<br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I'm not going to attempt an example in assembly</div><br />Why bother answering then,did he request assistance in C code?,Which has logic errors as pointed out.<br /><br /><br /><br />I'll keep this simple 9258  for clarity<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda _JumpFlag<br />&nbsp; &nbsp; bne ObjectJumpCont<br />&nbsp; &nbsp; sta _YPlayerSubPixel<br />&nbsp; &nbsp; inc _jumpFlag<br />&nbsp; &nbsp; lda #28<br />&nbsp; &nbsp; sta _YPlayerSubPixelConst<br />&nbsp; &nbsp; lda #4<br />&nbsp; &nbsp; sta _YPlayerVelocity<br />ObjectJumpCont:<br />&nbsp; &nbsp;lda _YPlayerSubPixel<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc _YPlayerSubPixelConst<br />&nbsp; &nbsp;sta&nbsp; _YPlayerSubPixel<br />&nbsp; &nbsp;lda _YPlayerVelocity<br />&nbsp; &nbsp;sbc #0<br />&nbsp; &nbsp;sta _YPlayerVelocity<br />&nbsp; &nbsp;lda _YPlayer<br />&nbsp; &nbsp;sec<br />&nbsp; &nbsp;sbc _YPlayerVelocity<br />&nbsp; &nbsp;sta _YPlayer <br />&nbsp; &nbsp;rts<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Feb 28, 2015 8:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Prime wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">I'm not going to attempt an example in assembly</div><br />Why bother answering then,did he request assistance in C code?,Which has logic errors as pointed out.<br /></div><br />I don't think the C example is complicated, in fact because it's more like pseudocode, it's not 100% correct C but it's to the point and I think about anyone can understand the code, even if not knowing C. It's also very <em>concise</em> (that's why koitsu loved it afterall), much more concise than asm, and I believe it conveys much more easily the basic idea of an algorithm, without being bogged with implementation details at the machine level. The C example has flaws, of course, because it's too simple, but it was a basic, &quot;high level&quot; algorithm, and the flaws themselves don't impede with the understanding of the code.<br /><br />That being said, looking at the code, the OP needs help with assembly (and NES architecture in general) because that code would certainly benefit of indexed addressing, and also it spins on $2002, which is not 100% reliable (should use NMI), I don't see the sprite DMA so nothing will ever move (I assume this code is responsible of rendering, it could be done in NMI but the spin on $2002 will make it miss some NMIs). Other flaws are already covered by suggestions by others.<br /><br /><span style="font-size: 50%; line-height: normal">If someone talks about the useless CPX and other such optimisations, you're <em>not</em> helping!</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Sat Feb 28, 2015 12:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">9258 wrote:</div><div class="quotecontent">I've started programming fairly recently and I've found I learn best by reading other code. I don't know if it's a taboo to ask to see someone else's code (like I'm gonna steal it or something I guess?) but if so I'd be fine with just an explanation of one or some of the ways you might make a character jump. I can make a character go up, of course, and I have a working gravity engine to make them come back down, but what I need to learn to do is make it go up, hit a certain point, then come back down. Y'know. Just a normal jump like in any game. I've been trying a couple different ways and the only time I got it to work, I don't understand why it works. <strong>At first it was more of a teleport followed by a fall due to the gravity I'd written, then I put the vblank wait in the middle of the code for the jump and that made it happen correctly for some reason.</strong> It looks like this:</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Without the Vblank wait there, all eight &quot;move up by 2&quot;s happen at the same time and the character just shoots up to the right point. With the wait it lets each one happen frame by frame, <strong>but I don't know why that all works in the context of the rest of the code.</strong></div><br /><br /> I having a problem understanding.. what you're not understanding. That is to say, you don't understand why you need vblanks? I think you might have some serious gaps in the general fundamentals of game logic (which is strange, if you have the capability of coding in ASM then surely something simple in logic like this should be obvious or simply worked out). Did no one else feel similar about this post??? Maybe I'm just misunderstanding you, <strong>but I'm going to assume you really don't understand some very basic/simplistic ideas.</strong> I mean, I don't know how else to interpret your post, considering what you've said. <em>This should be in the newbie help section.</em> So I'm going to assume this is <em>ALL</em> relatively new to you.<br /><br /><br /> So, 'jumping' is obviously a state that exists for a period of frames. The object moves up, hits a point where the acceleration in that direction stops, then object falls back 'down'. However you implement this, linear or non-linear, it's all irrelevant if you <span style="text-decoration: underline">don't </span>understand why 'vblanks' in between each step made it not 'teleport', or why you would even need them. If you don't understand that, then I doubt you're gonna understand <em>any </em>of the examples/code given here. This isn't about ASM coding, this is about some pretty basic logic.<br /><br /> So OK, 'jumping' is an action that happens across a series of frames; a it's temporal thing (a series of events). You should have a main game engine loop that occurs, typically, every <em>vblank</em>. If the player pushes a button, then the main game loop executes the jump action. Each time, the game engine calls the jump routine, and <em>each time</em> that routine either adds height or decreases height - until either the object/player dies or hits solid ground, or <em>some other event</em> that game logic determines should <em>end </em>the jump routine. It needs to happen across a series of frames because otherwise the game logic will not execute correctly and you get that <em>teleporting </em>effect. To be honest, this shouldn't really need an explanation. Maybe you can give some history/background on what experience you have (programming, etc)?<br /><br />So your code here...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Jump:<br />&nbsp; LDX #$08<br />Moving:<br />&nbsp; LDA Sprite1VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite1VerticalPosition<br />&nbsp; LDA Sprite2VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite2VerticalPosition<br />&nbsp; LDA Sprite3VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite3VerticalPosition<br />&nbsp; LDA Sprite4VerticalPosition<br />&nbsp; SEC<br />&nbsp; SBC #$02<br />&nbsp; STA Sprite4VerticalPosition<br />&nbsp; DEX<br /><br />&nbsp; CPX #$00<br />&nbsp; BEQ JumpDone<br />vblankwaitforjump<br />readyyy<br />&nbsp; BIT $2002<br />&nbsp; BPL vblankwaitforjump<br />&nbsp; JMP Moving<br />JumpDone:</div><br /> <br /> ... screams something seriously wrong with your understanding of how even simple events work (disregarding the linear movement). So I'm gonna re-write this code in a context that you can hopefully understand or at your level. Whatever.<br /><br /> Here's my version of your code (kept as simple as possible):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;..........................................<br />;This is the main game engine loop. All<br />;actions happen inside this loop.<br />;<br /><br />GameEngineLoop:<br />&nbsp; &nbsp; BIT $2002<br />&nbsp; &nbsp; BPL GameEngineLoop<br />&nbsp; &nbsp; JSR ReadGamepad<br />&nbsp; &nbsp; JSR DoSomeOtherStuffs<br />&nbsp; &nbsp; JSR DoSomeMoreGameLogic<br />&nbsp; &nbsp; JSR DoJump<br />&nbsp; jmp GameEngineLoop&nbsp; <br />&nbsp; &nbsp; <br />&nbsp; &nbsp; <br />;..........................................<br />;Jump subroutine&nbsp; <br />; <br />DoJump:<br />&nbsp; &nbsp; LDA SpriteJumpState<br />&nbsp; &nbsp; CMP #$00<br />&nbsp; &nbsp; BEQ .out<br />&nbsp; &nbsp; CMP #$09<br />&nbsp; &nbsp; BCC .fall<br /><br />.rise<br />&nbsp; &nbsp; LDA Sprite1VerticalPosition<br />&nbsp; &nbsp; SEC<br />&nbsp; &nbsp; SBC #$02<br />&nbsp; &nbsp; STA Sprite1VerticalPosition<br />&nbsp; &nbsp; DEC SpriteJumpState<br />&nbsp; RTS<br />&nbsp; <br />.fall<br />&nbsp; &nbsp; LDA Sprite1VerticalPosition<br />&nbsp; &nbsp; CLC<br />&nbsp; &nbsp; ADC #$02<br />&nbsp; &nbsp; STA Sprite1VerticalPosition<br />&nbsp; &nbsp; DEC SpriteJumpState<br />&nbsp; RTS<br />&nbsp; &nbsp; <br />.out<br />&nbsp; RTS<br />&nbsp; <br /><br /><br />;..........................................<br />;Set the jump routine in motion<br />;<br />ActivateJump:<br />&nbsp; &nbsp; LDA #$10<br />&nbsp; &nbsp; STA SpriteJumpState<br />&nbsp; RTS<br />&nbsp; </div><br /><br /> And here's the explanation: The game engine loop handle all action, including reading the gamepad. Notice how it's aligned to happen every vblank. At some point, after reading the gamepad, the &quot;game logic&quot; decides whether if the jump button is pressed - should receive that action (it passes the requirements, whatever they may be). It then calls ActivateJump which enables the jump subroutine to actually play that out. The jump routine is always called inside the main game engine loop, but the required state of the <em>counter</em> &quot;SpriteJumpState&quot; dictates <em>whether </em>this will happen or not (I could have used a flag variable instead). If the counter isn't 0, then it's decremented <em>every time</em> by the routine. If the counter is between $10 and $09, then it will subtract from the vertical position (jumps &quot;up&quot;), when the value is between $08 and $01, then it will add to the vertical position (fall down). Since the counter is always decremented, it moves from one states (going up) to eventually the opposite state (going down), until it reaches a third state (counter=0) which nothing happens. Again, nothing is optimal here; it's just to help show how you would handle an event such as 'jumping'.<br /><br /> If I'm wrong, and I completely misunderstood your post - then I apologize (I don't mean to insult)... and I just wasted my time. If I'm right though, I hope this helps.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Feb 28, 2015 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can somebody show me code for jumping/velocity?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Prime wrote:</div><div class="quotecontent">He made it clear coding is fairly new to him,supplying anything besides asm isn't helping him</div><br />I fail to see how supplying ASM code someone can copy and paste is of any actual help. Pseudo-code helps a person understand a concept, while providing ready-to-use code hardly teaches anything. A person will grow much more as a programmer if they understand WHAT they have to do before actually doing it. Then, if he does have trouble implementing the idea in assembly, we can go about solving that problem too, but just understanding the concept is a great first step, much better than just copying/pasting and ending with something that appears to work but he doesn't understand why.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Why bother answering then,did he request assistance in C code?,Which has logic errors as pointed out.</div><br />ASM is a terrible language to convey ideas. ASM requires much more effort to understand than pseudo-code, and rainwarrior was trying to convey an idea, not a final product. A good teacher doesn't give you the answer, but instead helps you find it on your own.<br /><br /><strong>Now back to the topic:</strong> What the OP is doing is a common mistake for people who are getting started with game programming, often coming from more linear types of programming. He has a loop that controls only one thing. This is what you'd do when you processing database records or something like that, because the goal there is to just do whatever you have to do with all those records and be done with them, but a game is different.<br /><br />In a game, all the changes happen over time. You don't want to get it all done as fast as possible, otherwise players wouldn't be able to keep up. This is where VBlanks come in. Vertical blanks occur consistently 60 times per second, so they're perfect to set the pace of your game: every time a VBlank happens, you advance everything in the game 1 step. I said everything, so you can't focus on a single object/character. This will result in smooth 60fps animations, which is the goal of every game.<br /><br />Programmers who don't have any experience in game programming often have trouble switching from the &quot;get it all done at once&quot; mentality to the &quot;advance everything by 1 step each time&quot; mentality, which is the basis of every game. That's normal, but I would suggest getting more acquainted with this concept before experimenting with more specific things such as physics. You should probably focus on getting your game objects to do something on their own (like moving left and right) with smooth 60fps animations (to make sure you have a working game loop), before giving them more complex behaviors.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>