<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Programing 65xxx processors in C</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Programing 65xxx processors in C</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8867">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8867</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat May 05, 2012 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, something like this would definitely be a must.
<br />I mean, I have nothing against stack, but apparently all the existing compilers uses it WAY too much and this is the reason the output code is not optimized enough.
<br />
<br />Again, I'm pretty sure AVRGCC has something like it uses up to some number of registers (4 ?) when calling functions, and only if a function uses more than this number of arguments, it uses the stack for the last arguments. Something similar could be done on the 6502 using A (or AX or AY) for the first arguments, zero page for the N following arguments, and stack if you have a lot of arguments.
<br />
<br />Of course if the function itself calls another function (even if it doesn't call itself), it has to push and restore all the "argument" registers on the stack, but this is done on one cycle on the ARM - while it would be painful on the 6502.
<br />
<br />This is why I think, another option would be to keep the software-stack architecture of CC65, but make it use zero page instead.
<br />That way acessing it would take 3 cycles instead of 6, which is a major improvement.
<br />Also, in order to acess, let's say the 6th element of the stack, CC65 currently does :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldy #$6<br />&nbsp; &nbsp; lda &#40;sp&#41;,Y<br /></div><br /><br />With my suggetion it would be :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda $6,Y<br /></div>
<br />In my opinion it would become ridiculously better.
<br />Not only that but every time a pointer is passed as an argument it can be used directly - it doesn't have to be copied to zero page - therefore mic's example would compile into something decent.
<br />
<br />Maybe I should just go and talk about this to CC65 developers.
<br />I had a quick look through the CC65 sources but I am unfortunately not skilled enough to be able to really understand what they do - especially considering they are themselves written in C - which makes them probably more complex than if they had used a higher level language.
<br />
<br />Back to the topic I also fully agree it would be great to have the compiler pass arguments as static zero page addresses, and do a call tree automatically to have function not clash with each-other.
<br />This sound very complex to implement, but I'm sure in the end it would be completely worth it and produce optimized code, in fact it could even be more optimized than what a human programmer could do as it's not obvious when you can re-use variables and when you can't.
<br />
<br />However it would be terrible to force everything static and having the compiler produce incorrect code if you use re-entrant functions - the compiler should always produce correct code. It would also not be good to have to tell the user to say this manually to the compiler - doing it automatically sounds better to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Sat May 05, 2012 1:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd say a bigger problem in the CC65-generated code you showed are all of the subroutines it calls for simple operations that should be inlined (was this optimized for size rather than speed?).
<br />
<br />I'm talking about this kind of stuff:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;staxysp </div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr&nbsp; &nbsp; &nbsp;staspidx </div>
<br />
<br />Each of these has an overhead of 12 cycles (JSR+RTS), and they're being done inside an innermost loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat May 05, 2012 2:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK I had a deeper look at CC65's source code, and it seems like it would not be too hard to move the argument stack to zero page, by changing just a few things in codegen.c and codeopt.c, but it will probably not be that easy to get something stable that works as well as the official version.
<br />
<br />However it sounds making all arguments to functions static sounds harder.
<br />First we should need to build a call tree. I have no idea how to do it, but it should be done. This will be hard to do especially if C and ASM are mixed, and if jump tables are used.
<br />
<br />Once this is done, any function can use dummy static variables, and can even re-use variables that does not belong to any function that is higher or lower in the call tree, but re-using from concurrent (not related) function is okay.
<br />If a function is ascendant or descendant of itself then there is no other choice than to use some kind of stack (this should be rare).
<br />
<br />Changing CC65 to generate 65x816 code shouldn't be that complicated too - just change codegen.c and codeopt.c to produce 16-bit code instead.
<br />
<br />@mic : I used -OI, which theoretically inline as much code as possible. For some reason there is still some jsrs in the code...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Sat May 05, 2012 3:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First we should need to build a call tree. I have no idea how to do it, but it should be done. This will be hard to do especially if C and ASM are mixed, and if jump tables are used. </div><br />One heuristic you could use is to say that any function for which the address is ever assigned to something (a function pointer) is ineligible for this optimization, and the same applies for all other functions that can be called - directly or indirectly - by that function.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Changing CC65 to generate 65x816 code shouldn't be that complicated too - just change codegen.c and codeopt.c to produce 16-bit code instead. </div>
<br />If CC65 assumes that pointers are 16-bit and registers are 8-bit then that'd be easier said than done.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sat May 05, 2012 7:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First create a game that's worth playing THEN optimize where the compiler hasn't perhaps done as perfect a job as a human could.  This is similar to my goal at work...create a program that works THEN optimize to make it work better or within customer time/space requirements.  
<br />
<br />Shiru has managed to create many playable games without having to crack open the compiler and "enhance" it.  I strive to do the same.   <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Sat May 05, 2012 8:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First create a game that's worth playing THEN optimize where the compiler hasn't perhaps done as perfect a job as a human could. This is similar to my goal at work...create a program that works THEN optimize to make it work better or within customer time/space requirements. </div>
<br />That's all perfectly fine, but none of us are here for work.  The whole point of having your own projects is that you're entirely free to choose what those projects are going to be. 
<br />The question "Can I create a NES game in C?" would've made for a pretty short discussion, because the answer would've been "Yes". But that's not what this thread is about.
<br />
<br />And if you feel that discussing 65xxx C compilers / code generation has no real world importance.. well, that goes for pretty much every single discussion on this forum <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat May 05, 2012 9:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see your point, but for me generating code that is somehow optimal is important, because for example if you want to limit yourself to NROM, if the compiler is terrible, you will be able to fit much less code in 32k of PRG ROM than if you had an amazing compiler that writes codes as if it was directly written in ASM.
<br />
<br />And I mean look at mic's example - the generated code can be as big as ~8 times what it could have been if the compiler were better.
<br />Of course this example was probably made up to show the worst aspects of compilers, but still.
<br />
<br />I don't think CC65 is terrible - it is fine but it will still generate code that is probably bigger and slower than what it could be - which is a shame, because if this weren't the case we could all go and write games in C and finish games that we wanted to do since forever but couldn't because we are lost in our own projects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 05, 2012 9:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">another option would be to keep the software-stack architecture of CC65, but make it use zero page instead.</div><br />And in fact, the 65816 is explicitly designed to support this. The zero page's base can be moved, as if it were a "frame pointer" like BP on x86. Also, a couple of the zero page addressing modes (e.g. LDA dd and LDA (dd),Y) have counterparts that use the stack (LDA dd,S and LDA (dd,S),Y).<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">That way acessing it would take 3 cycles instead of 6, which is a major improvement.</div><br />Zero page indexed instructions take four cycles because the ALU needs the extra cycle to generate the address.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Maybe I should just go and talk about this to CC65 developers.</div><br />Who here has experience developing compilers?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">First we should need to build a call tree. I have no idea how to do it</div><br />I made the graph that I linked before using a call tree generator that scans only the source code and does some makeshift parsing. Access to the parse tree within the compiler would only make this easier.<br /><br /><div class="quotetitle">cpow wrote:</div><div class="quotecontent">First create a game that's worth playing</div>
<br />Initially targeting the PC, correct?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sat May 05, 2012 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Who here has experience developing compilers?<br /></div><br />I do.  Granted, it's withering on the vine because I haven't had a chance to use it.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Access to the parse tree within the compiler would only make this easier.<br /></div><br />This was the same idea that drove me to create my own assembler for NESICIDE years ago...so it could see the internal representations of the assembler and quickly access needed information for the debuggers.  That path fizzled though as I realized nobody wanted Yet Another Compiler [not to be confused with Yet Another Compiler Compiler].  CC65 does a wonderful job of providing just about all of the internal representations necessary in its debug info output.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">cpow wrote:</div><div class="quotecontent">First create a game that's worth playing</div><br />Initially targeting the PC, correct?</div>
<br />Of course not.  Why?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Sat May 05, 2012 9:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">- which is a shame, because if this weren't the case we could all go and write games in C and finish games that we wanted to do since forever but couldn't because we are lost in our own projects.</div>
<br />At lease one person has done it...creating playable production-quality games in C for the NES.  I am just disappointed I guess that the compiler is being blamed for why there aren't more like him.  Silly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat May 05, 2012 10:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cpow wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">cpow wrote:</div><div class="quotecontent">First create a game that's worth playing</div><br />Initially targeting the PC, correct?</div><br />Of course not.  Why?</div>
<br />If you work on making it fun, and later work on making it fit, the <a href="http://wiki.nesdev.com/w/index.php/Limitations" class="postlink">limitations of the architecture</a> won't get in the way of making it fun. With access to higher level languages such as C#, Java, Ruby, Python, and the like, one would be more free to experiment with game play concepts before <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/VideoGameDemake" class="postlink">demaking</a> the game for the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Sat May 05, 2012 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I am just disappointed I guess that the compiler is being blamed for why there aren't more like him. </div>
<br />I wouldn't say that I'm disappointed, but I agree with you that the compiler shouldn't be blamed. For a programmer on a limited platform like the NES, having to use assembly shouldn't be an obstacle.
<br />
<br />Someone who really wants to create a game for the NES and finds it hard to design and debug the game engine in 6502 assembly could benefit from tepple's suggestion of prototyping on a PC and porting the code once everything is working.
<br />
<br />My arguments about the current crop of 65xxx C compilers and the code they generate doesn't really have anything to do with making games, as my interest lie mainly in the tools and how they work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat May 05, 2012 12:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />By the way, mic_, could you please clarify a thing about TCC816? I recall you said that the compiler declares every function as a superfree section, so the linker could put it anywhere it fits. Is it capable to put the code across the banks, or it is limited to a single bank only? I'm asking because it seems that there is a limitation for amount of code, after some point adding an extra line of code result in a 'game.s:85: INPUT_NUMBER: Out of 16bit range.
<br />game.s:85: ERROR: Couldn't parse "sbc".' error message. It is always the same, no matter where the code is added. Rearranging data in other banks and splitting large functions into smaller ones does not seem to help.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat May 05, 2012 1:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I wouldn't say that I'm disappointed, but I agree with you that the compiler shouldn't be blamed. For a programmer on a limited platform like the NES, having to use assembly shouldn't be an obstacle.</div>
<br />Prorgamming in assembly is zero obstacle for me.
<br />
<br />It's just that you have to admit that assembly code is less maintenable, and not portable, which C code is.
<br />
<br />Let's say I have done a NES game, and I want to do a sequel for the Gameboy. If I programmed the game in C, I can reuse my game engine easily, I just have to change hardware related things.
<br />If I wrote it in assembly I can only re-use the concept and have to rewrite everything from scatch.
<br />
<br />Not only that but it will also take you much more time to write a game engine in assembly, and my free time is not extensible, and my motivation limited.
<br />
<br />I already wrote one fully functional game engine in 6502 assembly and multiple partially functional game engines for various things, but I never finished any game - and I have a feeling that writing things in C would be easier for people to finish game - Shiru proofed it.
<br />
<br />Now your point is that a compiler doesn't have to be good to be usable and I agree, but if it produce ridiculously oversized and slow code, then you're limiting yourself to something that is not limitations of the hardware, and I don't want that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat May 05, 2012 1:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I should mention yet again that most of the time using C compilers for 8-16 bit system I didn't have major problems with the speed (most time consuming parts are usually small and could be easily rewritten into asm), but almost always had problems with the size of compiled C code. The only exception was Sega Genesis that have the huge linear ROM.
<br />
<br />So in a compiler improvement I personally would set priority on reducing resulting code size - which usually leads to faster code too.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>