<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Getting into 8-bit NESdev with only 64-bit free software</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Getting into 8-bit NESdev with only 64-bit free software</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=13811">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=13811</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 08, 2016 5:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">You know, stupid question: what is Canonical's idea about what to do with 32-bit programs, wrap them in a VM automatically or expect users to run their own VM?</div><br />Going forward, free software should be recompiled for x86-64, and proprietary software should be packaged in a <a href="https://en.wikipedia.org/wiki/Snappy_(package_manager)" class="postlink">&quot;snap&quot; container</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because I noticed sh happily passes the ball onto Wine whenever it's told to run a Windows executable, so it sounds like the wrapping could just be automatic.</div><br />In theory, it could be. If Ubuntu continues to offer Wine, there are two options:<br /><br /><ol style="list-style-type: lower-alpha"><li>Package Wine as a &quot;snap&quot; with all its 32-bit dependencies </li><li>Run only 64-bit Windows programs, which would require ensuring that FCEUX (Win32) and FamiTracker are 64-bit clean </li></ol>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jul 08, 2016 7:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I never programmed any 8086 compatible machine in assembly, so I have absolutely no idea what you're talking about.</div><br />OK um:<br /><br /><ul><li>16-bit: real mode</li><li>32-bit: protected mode</li><li>64-bit: long mode</li></ul><br />Real mode gave you 1MB of address space, split in 64KB segments (each segment being 16 bytes apart - yeah there was overlap, what it did was basically segment * 16 + offset). Opcodes were less orthogonal as well (e.g. you couldn't do LEA arbitrarily). There were four segment registers: CS (code), DS (data), ES (extra) and SS (stack). The ES segment was mostly to help with operations working across two segments <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> (e.g. copying data)<br /><br />Protected mode, besides making instructions more orthogonal and making the default register size 32-bit, gives you access to up to 32GB (though Windows likes to see only 4GB unless you mess with a registry entry) and provides a MMU with paging (which means a virtual address range can be mapped onto arbitrary non-consecutive physical ranges). A given segment may be up to 4GB long, and there are four rings (0, 1, 2, 3) each given different execution privileges. Segments could be code or data, and could be 16-bit or 32-bit (regarding executing code). Accessing an invalid address triggers General Page Fault aka what we call segfault. As you can imagine all this complexity means segments aren't addresses anymore, instead they're indices into a look-up table with all the segment properties, and it also meant that changing a segment register costs a very large amount of cycles (not to mention cache flushing). There were also two more segment registers (FS and GS).<br /><br />...and most of that went ignored as usually only two rings would be used (for kernel and user space) and programs would normally just have three segments (code, data, stack) simulating a &quot;flat&quot; address space within each process and the segment registers only ever being touched by the kernel. Go figure.<br /><br />Long mode gets rid of all that segment mess and just enforces a flat address space (aside from keeping FS and GS because Windows uses them to hold thread-specific data &gt;_&gt;). It also doubles the amount of registers (<em>all</em>, not just the integer ones) and extends the integer ones to 64-bit, and gets rid of some rarely used opcodes. Essentially it's a much lean version of protected mode that happens to also support 64-bit operations =P<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Going forward, free software should be recompiled for x86-64, and proprietary software should be packaged in a <a href="https://en.wikipedia.org/wiki/Snappy_(package_manager)" class="postlink">&quot;snap&quot; container</a>.</div><br />Er, pretty sure you misunderstood both. Snaps are meant for <em>all</em> binaries (64-bit ones too), and they won't magically make 32-bit programs work out of nowhere if the kernel doesn't support it, which is the real problem from what I gather (hence the VM idea - it's literally about emulating those old programs). Only way snaps would work is if they actually included the full blown VM themselves and wrapped the program in it.<br /><br />Also that won't help with stuff like DOSBox that still doesn't have a dynamic recompiler for 64-bit (so a 64-bit build is stuck with the slow interpreter), and I'm not sure how feasible is that. (on that note: somebody work on that please =P)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 08, 2016 7:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I never programmed any 8086 compatible machine in assembly, so I have absolutely no idea what you're talking about.</div><br />OK um:<br /><br /><ul><li>16-bit: real mode</li><li>32-bit: protected mode</li><li>64-bit: long mode</li></ul></div><br />I thought at least somebody in this topic had referred to a 16-bit protected mode, which existed in the 286. Windows 3.x was designed for it.<br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">As you can imagine all this complexity means segments aren't addresses anymore, instead they're indices into a look-up table with all the segment properties, and it also meant that changing a segment register costs a very large amount of cycles (not to mention cache flushing). There were also two more segment registers (FS and GS).<br /><br />...and most of that went ignored as usually only two rings would be used (for kernel and user space) and programs would normally just have three segments (code, data, stack) simulating a &quot;flat&quot; address space within each process and the segment registers only ever being touched by the kernel. Go figure.</div><br />Perhaps the cycle penalty is <em>why</em> the flat address space was chosen.<br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Going forward, free software should be recompiled for x86-64, and proprietary software should be packaged in a <a href="https://en.wikipedia.org/wiki/Snappy_(package_manager)" class="postlink">&quot;snap&quot; container</a>.</div><br />Er, pretty sure you misunderstood both. Snaps are meant for <em>all</em> binaries (64-bit ones too), and they won't magically make 32-bit programs work out of nowhere if the kernel doesn't support it, which is the real problem from what I gather</div><br />As I understood it, the <em>kernel</em> would still support both 32-bit and 64-bit programs, but the <em>C library</em> and other required userspace libraries wouldn't.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jul 08, 2016 9:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I thought at least somebody in this topic had referred to a 16-bit protected mode, which existed in the 286. Windows 3.x was designed for it.</div><br />Which isn't present on the 386 or latter so it's not relevant to modern systems. I think it's safe to assume we talk about the 32-bit protected mode unless stated otherwise =P<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Perhaps the cycle penalty is <em>why</em> the flat address space was chosen.</div><br />It probably had more to do with the fact that all programmers wanted was just more memory. There were already real mode programs that behaved as if they were flat by doing arithmetic on segment:offset addresses (and why Intel couldn't go with their original plan of making segments not hardwired to 16 bytes granurality)<br /><br />What it <em>did</em> influence though is discouraging microkernels. Worse, it's why Windows 9x is so unsafe: the penalty introduced by a syscall (which requires going into kernel space) would have been gigantic when you consider how many syscalls are called over time, so they just put everything in ring 0. Ouch. (NT didn't, but it was also slower)<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">As I understood it, the <em>kernel</em> would still support both 32-bit and 64-bit programs, but the <em>C library</em> and other required userspace libraries wouldn't.</div><br />Then they wouldn't be talking about requiring running those programs from a VM (which you'd only do when the kernel is completely unable to run the programs on its own). I mean, Wine doesn't run 32-bit programs in a VM even though it provides all the libraries.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 08, 2016 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I thought at least somebody in this topic had referred to a 16-bit protected mode, which existed in the 286. Windows 3.x was designed for it.</div><br />Which isn't present on the 386 or latter so it's not relevant to modern systems. I think it's safe to assume we talk about the 32-bit protected mode unless stated otherwise =P</div><br />I'm not sure what you mean. My 486SX ran Windows 3.1.<br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">As I understood it, the <em>kernel</em> would still support both 32-bit and 64-bit programs, but the <em>C library</em> and other required userspace libraries wouldn't.</div><br />Then they wouldn't be talking about requiring running those programs from a VM (which you'd only do when the kernel is completely unable to run the programs on its own). I mean, Wine doesn't run 32-bit programs in a VM even though it provides all the libraries.</div><br />The exact wording from the message was &quot;snaps / containers / virtual machines&quot;. The first two are lighter weight than a full VM, more like a chroot or a Docker.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jul 08, 2016 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I'm not sure what you mean. My 486SX ran Windows 3.1.</div><br />Which also ran in real mode by default, and supported 386's protected mode if you passed the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">/3</tt> switch. (and Windows 3.11 <em>always</em> enabled it, effectively making 386 or later a requirement)<br /><br />286 protected mode is a completely different beast from 386 protected mode and isn't supported on any CPU other than 286. Note that 386 protected mode <em>can</em> run 16-bit code (depends on what you put on the segment, and really all it did was just set the default size for 16/32-bit opcodes). It also had VM86 to run real mode code under a supervisor (as 32-bit Windows would do to run 16-bit programs). But it's not compatible with 286's protected mode.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">The exact wording from the message was &quot;snaps / containers / virtual machines&quot;. The first two are lighter weight than a full VM, more like a chroot or a Docker.</div><br />OK reread it and you win =| Makes more sense.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NovaSquirrel</b> [ Fri Jul 08, 2016 2:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://wiki.osdev.org/X86-64" class="postlink">OSDev's page on 64-bit x86 CPUs</a> says that in the 64-bit long mode, the compatibility mode for running 32-bit programs alongside 64-bit ones also supports 16-bit protected mode. This leads me to believe that support's still there, and has always been there 286-onward.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sat Jul 09, 2016 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All modern x86 CPUs are almost completely backwards-compatible with older x86 CPUs, including 286 protected mode. There are a few situations where things aren't compatible, and they fit easily into three categories:<br /><br />1. Software that relies on undocumented behavior. Things like &quot;pop cs&quot; were never explicitly documented by Intel, so no one should have been using them in the first place.<br /><br />2. Software that ignores the documentation. A lot of 286 protected mode operating systems put important data in areas that Intel documented as &quot;reserved, must be zero&quot;. The 286 ignored that reserved data, but the 386 uses it to control 32-bit protected mode. This may be the reason why it seems like 286 protected mode doesn't work on newer CPUs - it's actually because the developers ignored the manual. (Software developers ignoring Intel's documentation is a common theme in PC history...)<br /><br />3. Software that relies on behavior that should have been backwards-compatible, but isn't. I know of exactly one <a href="http://www.os2museum.com/wp/sco-unix-3-2v4-0-vs-ia-32-semantics-changes/" class="postlink">compatibility-breaking change to the x86 architecture</a>. No one ever seems to bring up anything in this category when discussing x86 backwards compatibility issues.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jul 09, 2016 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent">(Software developers ignoring Intel's documentation is a common theme in PC history...)<br /></div>Not just software! 8259 IRQs 0 through 7 (interrupt 8-15) were configured to collide with bunch of CPU-internal faults, because interrupts 0 through 0x1F were supposed to be reserved for the CPU. (And the original 8088 didn't <em>yet</em> have anything above interrupt 4.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Myask</b> [ Sun Jul 10, 2016 5:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent">1. Software that relies on undocumented behavior. Things like &quot;pop cs&quot; were never explicitly documented by Intel, so no one should have been using them in the first place.</div><br />see also: LOADALL

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Sun Jul 10, 2016 8:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />LOADALL is kind of a funny case. <a href="http://www.pcjs.org/pubs/pc/reference/intel/80286/loadall/" class="postlink">Intel documented it</a>, but the documentation wasn't available to the public. Microsoft definitely had access to a copy of that document, which is why Microsoft's software only uses LOADALL when the CPU is a 286.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 19, 2016 8:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>I have numbers. Numbers don't lie.</strong><br />I love numbers almost as much as π.*<br /><br />I just installed Xubuntu 16.04 (amd64) on a blank SSD. This puts me in an unusual position to tell exactly how much space support for 32-bit free software on a 64-bit system takes. First I installed some 64-bit free software useful for participating in NESdev:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sudo apt-get update<br />sudo apt-get upgrade<br />sudo apt-get install build-essential gimp git python3-pil idle3 python3-numpy hexchat fceux retext</div><br /><br />Then I ran this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sudo apt-get install wine</div><br /><br />The result is three-fourths of a gigabyte.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Need to get 192 MB/192 MB of archives.<br />After this operation, 735 MB of additional disk space will be used.</div><br /><br />But at this point, much of this could be rendered moot by <a href="https://forums.nesdev.com/viewtopic.php?p=185086#p185086" class="postlink">Mesen for GNU/Linux</a>.<br /><br /><br /><span style="font-size: 85%; line-height: normal">* Yes, π is a number too.</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sverker</b> [ Wed Jan 04, 2017 11:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't see the point of principles like &quot;free/open source software only&quot; except for the sake of posturing, and at that point you've already lost the patient. It just seems so needlessly self limiting, but maybe I'm just utilitarian like that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Thu Jan 05, 2017 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You cannot tell what a binary blob does, it is a security nightmare that could do anything from cryptolocking your files to installing Windows 10.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jan 05, 2017 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Getting into 8-bit NESdev with only 64-bit free software</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could do the same thing you do with proprietary NES games: contain them. Once contained, proprietary software isn't substantially more dangerous than <a href="http://www.underhanded-c.org/" class="postlink">underhanded free software</a>. If proprietary software can't write outside its chroot, for example, it can encrypt only those files that get served writably into its container. And the container's administrator can set a quota for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">/home</tt> so small that the only way Windows 10 gets installed is by <a href="https://en.wikipedia.org/wiki/Windows_1.0" class="postlink">adding a decimal point</a>.<br /><br />I still don't see how 32-bit free software, such as FCEUX (debugging version) in Wine in multiarch Linux, is likewise &quot;a security nightmare&quot;.<br /><br />I run mostly free software on my laptop, both 32-bit and 64-bit, with a small set of carefully chosen exceptions. A few weeks ago, I replaced my laptop's HDD with an SSD and installed a fresh copy of Xubuntu. So I decided to keep a <a href="https://github.com/pinobatch/hello-world/blob/master/Xubuntu_setup.md" class="postlink">list of all programs that I have installed</a>. As far as I can tell, only these proprietary programs are installed on my laptop's SSD:<br /><ul><li>The firmware that bcmwl-kernel-source installs</li><li>Dropbox and Skype, needed to communicate with clients</li><li>A set of freeware fonts, including Microsoft core fonts (which run either in a bytecode emulator or with autohinting)</li><li>Scripts in HTML documents, which are restricted by the browser's sandbox, the same-origin policy, and Disconnect's blacklist</li><li>Programs that I make that haven't been distributed to the public yet</li><li>Programs that I make for clients, which must be proprietary because of <a href="https://pineight.com/mw/index.php?title=Genres_of_non-free_software#Video_games" class="postlink">industry constraints</a></li><li>Programs made by other forum members, which I am evaluating </li></ul>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>