<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=8171" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-10-01T17:39:11-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=8171</id>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2011-10-01T17:39:11-07:00</updated>
<published>2011-10-01T17:39:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8171&amp;p=84580#p84580</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8171&amp;p=84580#p84580"/>
<title type="html"><![CDATA[faster, but less accurate, sprite rotation algorithm]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8171&amp;p=84580#p84580"><![CDATA[
A year ago, I posted a code for software sprite rotation, and promised a demo for it, but never actually got finished with it.<br /><br />The reason being so was:<br /><br />1) I had school in the way.<br />2) It wasn't fast enough to do it in realtime.<br /><br />My old algorithm addresses pixels in a 256 x 256 grid.  First it calculates the y-coordinates for a line of 8 pixels using 16 bit values, with the low 8-bits being decimals.  Then it does the same with the x-coordinates, and stores them one byte before the y-coordinates, so the top x byte overwrites the bottom y byte, to create the 16-bit address for the pixel.<br /><br /><br />Last night in the shower, I came up with an idea that can gain a magnitude of speed.  Instead of calculating the pixel coordinates for every pixel, I can calculate the coordinates for the middle row, and middle column and use "LDA (dp),y" to add the row coordinate and the column coordinate and access the pixel in one instruction.<br /><br />Converting from packed pixel to planar takes a lot of work too, so I decided to use 2bpp as opposed to 4bpp.  I then realized, since I only need to calculate one row and one collumn of coordinates, I can arrange it so it uses a 128x128 pixel grid, with 2 bytes per pixel.  Each byte holds just 1 bit.  All it needs to do is "ASL" and "ORA (dp),y" the next pixel.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldy !row_0<br /><br />lda &#40;!collumn_0&#41;,y<br />asl<br />ora &#40;!collumn_1&#41;,y<br />asl<br />ora &#40;!collumn_2&#41;,y<br />asl<br />ora &#40;!collumn_3&#41;,y<br />asl<br />ora &#40;!collumn_4&#41;,y<br />asl<br />ora &#40;!collumn_5&#41;,y<br />asl<br />ora &#40;!collumn_6&#41;,y<br />asl<br />ora &#40;!collumn_7&#41;,y<br /><br />sta !bitmap</div><br /><br />To avoid carring a bit from the x-coordinate into the y-coordinate, a sprite needs to be within a box twice as large on all sides.<br /><br />For an upright 32x32 sprite the collumn and row coordinates are:<br /><br />Collumns:<br />(0,16),(1,16)...(30,16),(31,16)<br /><br />Rows:<br />(16,0),(16,1)...(16,30),(16,31)<br /><br />Notice how the middle row (16,16) and middle collumn (16,16) add up to (32,32), which is right in the middle of the 64x64 box!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> â€” Sat Oct 01, 2011 5:39 pm</p><hr />
]]></content>
</entry>
</feed>