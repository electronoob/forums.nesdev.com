<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hex to Decimal</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hex to Decimal</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11341">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11341</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is a routine I wrote to convert a 16 bit number (0-65535) to decimal, each digit separated. It only takes 150 to 162 cycles as shown below.<br /><br />Edit - This is now revision 2 of the code...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;--------------------------------<br />;0-9999 conversion stats<br />;--------------------------------<br />&nbsp; ;cycles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; occurances<br />&nbsp; &nbsp; ;150 - $0860 --&gt;&nbsp; 2,144<br />&nbsp; &nbsp; ;151 - 0<br />&nbsp; &nbsp; ;152 - 0<br />&nbsp; &nbsp; ;153 - $16C0 --&gt;&nbsp; 5,824<br />&nbsp; &nbsp; ;154 - 0<br />&nbsp; &nbsp; ;155 - 0<br />&nbsp; &nbsp; ;156 - $07F0 --&gt;&nbsp; 2,032<br /><br />&nbsp; ;average execution is 152.97 cycles<br /><br />;--------------------------------<br />;0-65535 conversion stats<br />;--------------------------------<br />&nbsp; ;cycles&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; occurances<br />&nbsp; &nbsp; ;150 - $1738 --&gt;&nbsp; 5,944<br />&nbsp; &nbsp; ;151 - 0<br />&nbsp; &nbsp; ;152 - 0<br />&nbsp; &nbsp; ;153 - $9528 --&gt; 38,184<br />&nbsp; &nbsp; ;154 - 0<br />&nbsp; &nbsp; ;155 - 0<br />&nbsp; &nbsp; ;156 - $2A30 --&gt; 10,800<br />&nbsp; &nbsp; ;157 - 0<br />&nbsp; &nbsp; ;158 - 0<br />&nbsp; &nbsp; ;159 - $1F18 --&gt;&nbsp; 7,960<br />&nbsp; &nbsp; ;160 - 0<br />&nbsp; &nbsp; ;161 - 0<br />&nbsp; &nbsp; ;162 - $0A58 --&gt;&nbsp; 2,648<br /><br />&nbsp; ;average execution is 154.31 cycles</div><br /><br />Here is the routine. It takes 258 bytes which is pretty good considering how fast it goes. There are other routines out there that are much shorter, but take 100's of cycles. My goal was speed while keeping the byte cost as low as possible.<br /><br />If you want ASCII, then you can compile it in at a cost of just 8 more bytes, and 8 more cycles.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;----------------------------------------------------------<br />;Convert 16 bit Hex to Decimal (0-65535) Rev 2<br />;By Omegamatrix<br />;Further optimizations by tepples<br />;<br />; Takes 150-162 cycles to execute.<br />;<br />; Starts with 16 bit number split into hexHigh and hexLow.<br />; Uses A,X,Y, and three bytes of zeropage ram:<br />;<br />;&nbsp; &nbsp; Ten Thousands digit - zp ram<br />;&nbsp; &nbsp; Thousands digit - returned in A register<br />;&nbsp; &nbsp; Hundreds digit - zp ram<br />;&nbsp; &nbsp; Tens digit - returned in X register<br />;&nbsp; &nbsp; Ones digit - zp ram<br />;----------------------------------------------------------<br /><br />;temp register and decHundreds are doubled up to save ram...<br />temp = decHundreds<br /><br /><br />ASCII_OFFSET = $30<br /><br /><br />Times256_Low:<br />&nbsp; &nbsp; .byte $00,$38,$0C,$44,$18,$50,$24,$5C<br />&nbsp; &nbsp; .byte $30,$04,$3C,$10,$48,$1C,$54,$28<br />Times256_Med:<br />&nbsp; &nbsp; .byte $00,$02,$05,$07,$0A,$0C,$0F,$11<br />&nbsp; &nbsp; .byte $14,$17,$19,$1C,$1E,$21,$23,$26<br /><br /><br />Times16_Low:<br />&nbsp; &nbsp; .byte $00<br />Times4096_Low:<br />&nbsp; &nbsp; .byte $00<br />Times4096_Med:<br />&nbsp; &nbsp; .byte $00<br />Times4096_High:<br />&nbsp; &nbsp; .byte $00 + ASCII_OFFSET<br /><br />&nbsp; &nbsp; .byte $10,$60,$28,$00 + ASCII_OFFSET&nbsp; &nbsp;; interlaced tables, this allows less shifts to be made...<br />&nbsp; &nbsp; .byte $20,$5C,$51,$00 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $30,$58,$16,$01 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $40,$54,$3F,$01 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $50,$50,$04,$02 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $60,$4C,$2D,$02 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $0C,$48,$56,$02 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $1C,$44,$1B,$03 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $2C,$40,$44,$03 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $3C,$3C,$09,$04 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $4C,$38,$32,$04 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $5C,$34,$5B,$04 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $08,$30,$20,$05 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $18,$2C,$49,$05 + ASCII_OFFSET<br />&nbsp; &nbsp; .byte $28,$28,$0E,$06 + ASCII_OFFSET<br /><br />ShiftedBcdTab<br />&nbsp; &nbsp; .byte $00,$01,$02,$03,$04,$08,$09,$0A,$0B,$0C<br />&nbsp; &nbsp; .byte $10,$11,$12,$13,$14,$18,$19,$1A,$1B,$1C<br />&nbsp; &nbsp; .byte $20,$21,$22,$23,$24,$28,$29,$2A,$2B,$2C<br />&nbsp; &nbsp; .byte $30,$31,$32,$33,$34,$38,$39,$3A,$3B,$3C<br />&nbsp; &nbsp; .byte $40,$41,$42,$43,$44,$48,$49,$4A,$4B,$4C<br /><br /><br />StartHexToDec:<br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @3<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @5<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @7<br />&nbsp; &nbsp; eor&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @10<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @12&nbsp; &nbsp;carry is clear, shifting just 2 times instead of 4,<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @14&nbsp; &nbsp;since interlaced tables are used.<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16<br />&nbsp; &nbsp; lda&nbsp; &nbsp; Times4096_High,Y&nbsp; &nbsp; &nbsp; ;4&nbsp; @20<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decTenThousands&nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @23<br />&nbsp; &nbsp; lda&nbsp; &nbsp; Times4096_Low,Y&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @27<br />&nbsp; &nbsp; adc&nbsp; &nbsp; Times256_Low,X&nbsp; &nbsp; &nbsp; &nbsp; ;4&nbsp; @31<br />&nbsp; &nbsp; sta&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @34<br />&nbsp; &nbsp; lda&nbsp; &nbsp; Times4096_Med,Y&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @38<br />&nbsp; &nbsp; adc&nbsp; &nbsp; Times256_Med,X&nbsp; &nbsp; &nbsp; &nbsp; ;4&nbsp; @42<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @44<br /><br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @47<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$F0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @49<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @51<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @53<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @55<br />&nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @57<br />&nbsp; &nbsp; cpx&nbsp; &nbsp; #13*4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2&nbsp; @59&nbsp; &nbsp;times 4 due to interlaced table<br />&nbsp; &nbsp; adc&nbsp; &nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @61<br />&nbsp; &nbsp; cpx&nbsp; &nbsp; #7*4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @63<br />&nbsp; &nbsp; adc&nbsp; &nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @65<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @67<br /><br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexLow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @70<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @72<br />&nbsp; &nbsp; adc&nbsp; &nbsp; Times16_Low,X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @76<br />&nbsp; &nbsp; adc&nbsp; &nbsp; temp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; @79<br />&nbsp; &nbsp; bcs&nbsp; &nbsp; .sub100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2³ @81/82<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @83<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .skip1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2³ @85/86<br /><br />.sub100:<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @87<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @89<br />.skip1:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @91<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .skip2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2³ @93/94<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @95<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @97<br />.skip2:<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @99<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @101<br />&nbsp; &nbsp; lda&nbsp; &nbsp; ShiftedBcdTab,X&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @105<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @107<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @109<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @111<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decOnes&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @114<br /><br />&nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @116<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @118<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @120<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @122<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; ENDIF<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @124&nbsp; &nbsp;or STA decTens<br />&nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @126<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @128<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .skip3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2³ @130/131<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @132<br />&nbsp; &nbsp; inc&nbsp; &nbsp; decTenThousands&nbsp; &nbsp; &nbsp; &nbsp;;5&nbsp; @137<br />.skip3:<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @139<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @141<br />&nbsp; &nbsp; lda&nbsp; &nbsp; ShiftedBcdTab,Y&nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; @145<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @147<br />&nbsp; &nbsp; rol&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @149<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @151<br /><br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; ENDIF<br />&nbsp; &nbsp; sta&nbsp; &nbsp; decHundreds&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @154<br /><br />&nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @156<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @158<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @160<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @162<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; ENDIF<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp;A = decThousands</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 15, 2014 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very fast. Such efficiency. Wow.<br /><br />To save 2 cycles and 2 bytes, can this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @3<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$F0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @5<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @7<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @9&nbsp; &nbsp; carry is clear, shifting just 2 times instead of 4,<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @11&nbsp; &nbsp;since interlaced tables are used.<br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @14<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @18<br /></div><br />be replaced with this?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @3&nbsp; &nbsp; fedcba98<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @5&nbsp; &nbsp; ....ba98<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @7 <br />&nbsp; &nbsp; eor&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @10&nbsp; &nbsp;fedc....<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @12&nbsp; &nbsp;.fedc...<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @14&nbsp; &nbsp;..fedc..&nbsp; &nbsp;carry is clear, shifting twice<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16&nbsp; &nbsp;instead of 4, since interlaced tables are used.<br /></div><br />To save one byte of RAM, can <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decThousands</tt> be the same address as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">temp</tt>?<br /><br />Source-wise, you don't need the constant <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CONVERT_TO_ASCII</tt>. Instead, the ORs can be wrapped with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">IF ASCII_OFFSET</tt>.<br /><br />Currently, the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ora #ASCII_OFFSET</tt> statements require <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ASCII_OFFSET</tt> to be a multiple of $10. Allowing it to be not a multiple, such as storing the digits at $06-$0F, would take additional bytes to ensure that the carry is clear. I'm looking into how many additional cycles those would take. The one for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decOnes</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decHundreds</tt> would take no additional cycles by turning <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rol A and #$0F</tt> into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">and #$07 rol A</tt> because the carry out of the rotation isn't used. But the ones for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decTens</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decThousands</tt> lack a convenient <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">and</tt> instruction before it. Cost: 4 cycles, 2 bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Jun 15, 2014 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Cool. Coincidentally only a few days ago I was looking for a 16-bit decimal conversion routine, so I'll probably give this one a shot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 12:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Very fast. Such efficiency. Wow.<br /><br />To save 2 cycles and 2 bytes, can this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @3<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$F0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @5<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @7<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @9&nbsp; &nbsp; carry is clear, shifting just 2 times instead of 4,<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @11&nbsp; &nbsp;since interlaced tables are used.<br />&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @14<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @18<br /></div><br />be replaced with this?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; lda&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @3&nbsp; &nbsp; fedcba98<br />&nbsp; &nbsp; and&nbsp; &nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @5&nbsp; &nbsp; ....ba98<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @7 <br />&nbsp; &nbsp; eor&nbsp; &nbsp; hexHigh&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3&nbsp; @10&nbsp; &nbsp;fedc....<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @12&nbsp; &nbsp;.fedc...<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @14&nbsp; &nbsp;..fedc..&nbsp; &nbsp;carry is clear, shifting twice<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16&nbsp; &nbsp;instead of 4, since interlaced tables are used.<br /></div><br /></div><br /><br />Ha! That is a good eye. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I haven't tried it yet, but looking at it I would say yes you can. The routine also executes that part of the code every time, so every execution case has been made better. Very cool, and I'll have to remember that trick (never thought of using it before). <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">To save one byte of RAM, can <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decThousands</tt> be the same address as <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">temp</tt>?<br /></div><br />Yep. I was going to actually going to equate it like that at the top, but I figured it was something people would do anyhow.<br /><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Source-wise, you don't need the constant <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">CONVERT_TO_ASCII</tt>. Instead, the ORs can be wrapped with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">IF ASCII_OFFSET</tt>.<br /><br />Currently, the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ora #ASCII_OFFSET</tt> statements require <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ASCII_OFFSET</tt> to be a multiple of $10. Allowing it to be not a multiple, such as storing the digits at $06-$0F, would take additional bytes to ensure that the carry is clear. I'm looking into how many additional cycles those would take. The one for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decOnes</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decHundreds</tt> would take no additional cycles by turning <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">rol A and #$0F</tt> into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">and #$07 rol A</tt> because the carry out of the rotation isn't used. But the ones for <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decTens</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">decThousands</tt> lack a convenient <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">and</tt> instruction before it. Cost: 4 cycles, 2 bytes.</div><br />I don't 100% follow what you are trying to do here so I'll wait and see what you come up with. Please continue to optimize the routine if you can. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 15, 2014 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Omegamatrix wrote:</div><div class="quotecontent">I don't 100% follow what you are trying to do here</div><br />Raw digits: $00 means zero and $09 means 9.<br />ASCII: $30 means zero and $39 means 9.<br />Possible layout of tiles in an actual game: $06 means zero and $0F means 9, or $F6 means zero and $FF means 9.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Omegamatrix wrote:</div><div class="quotecontent">I don't 100% follow what you are trying to do here</div><br />Raw digits: $00 means zero and $09 means 9.<br />ASCII: $30 means zero and $39 means 9.<br />Possible layout of tiles in an actual game: $06 means zero and $0F means 9, or $F6 means zero and $FF means 9.</div><br /><br />Gotcha. This is my in-experience with the NES coming into play ha ha.<br /><br /><br />I tested your optimization and it worked as expected. I then also changed the code so that Y ends with decThousands, and X ends with decTens. I thought about this before, but thought it might be too messy. I changed my mind because X and Y get trashed anyhow, and it's easy enough for someone to change it back if they like.<br /><br /><br />Doing so saved an additional 2 cycles and 2 bytes, and with your savings the code runs quicker and shorter then ever before. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I've updated the first post with the new routine, and I also put in the equate to specify the temp ram.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 5:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have some other Hex to Decimal routines. Here is one I wrote that takes converts 0-63 hex to 0-99 BCD. It doesn't split the digits apart but keeps them in the same bytes. The routine is doing a divide by 10 and then times it by 6 before adding it back to the original sum. The good thing about this routine is that it is constant cycles.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Hex to BCD (good 0-99)<br />;24 bytes, 39 cycles<br />&nbsp; sta&nbsp; temp<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; adc&nbsp; temp<br />&nbsp; ror<br />&nbsp; lsr<br />&nbsp; and&nbsp; #$3C<br />&nbsp; sta&nbsp; temp2<br />&nbsp; lsr<br />&nbsp; adc&nbsp; temp2<br />&nbsp; adc&nbsp; temp</div><br /><br />Next (and this won't work on the NES, but hey maybe some other programmers might be reading this) I wrote one that used BCD mode to help the conversion:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Hex to BCD (good 0-99)<br />;24 bytes, 28 cycles<br />&nbsp; &nbsp; tay&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @2<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @4<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @6<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @8<br />&nbsp; &nbsp; lsr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @10<br />&nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @12<br />&nbsp; &nbsp; tya&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @14<br />&nbsp; &nbsp; and&nbsp; #$0F&nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @16<br />&nbsp; &nbsp; sed&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @18<br />&nbsp; &nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @20<br />&nbsp; &nbsp; adc&nbsp; #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @22<br />&nbsp; &nbsp; adc&nbsp; BcdTab,X&nbsp; &nbsp; ;4&nbsp; @26<br />&nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2&nbsp; @28<br /><br /><br /><br />BcdTab:<br />&nbsp; .byte $00,$16,$32,$48,$64,$80,$96</div><br /><br />It was at this point where I became interested in the NES, and splitting the individual digits apart. I have some more routines that I wrote which I will post at another time that does this. There is also a nice compact routine that <a href="http://forums.nesdev.com/viewtopic.php?p=106385#p106385" class="postlink">Bregalad wrote</a> and Movax12 helped improved. At the end of the thread I reduced it a few more bytes as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 15, 2014 5:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks.<br /><br />Got anything to do 0-255 to three digits? My current routine is 53 bytes and takes 80 cycles including the RTS.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro bcd8bit_iter value<br />&nbsp; .local skip<br />&nbsp; cmp value<br />&nbsp; bcc skip<br />&nbsp; sbc value<br />skip:<br />&nbsp; rol highDigits<br />.endmacro<br /><br />;;<br />; Converts a decimal number to two or three BCD digits<br />; in no more than 80 cycles.<br />; @param a the number to change<br />; @return a: low digit; 0: upper digits as nibbles<br />; No other memory or register is touched.<br />.proc bcd8bit<br />highDigits = 0<br /><br />&nbsp; ; First clear out two bits of highDigits.&nbsp; (The conversion will<br />&nbsp; ; fill in the other six.)<br />&nbsp; asl highDigits<br />&nbsp; asl highDigits<br /><br />&nbsp; ; Each iteration takes 11 if subtraction occurs or 10 if not.<br />&nbsp; ; But if 80 is subtracted, 40 and 20 aren't, and if 200 is<br />&nbsp; ; subtracted, 80 is not, and at least one of 40 and 20 is not.<br />&nbsp; ; So this part takes up to 6*11-2 cycles.<br />&nbsp; bcd8bit_iter #200<br />&nbsp; bcd8bit_iter #100<br />&nbsp; bcd8bit_iter #80<br />&nbsp; bcd8bit_iter #40<br />&nbsp; bcd8bit_iter #20<br />&nbsp; bcd8bit_iter #10<br />&nbsp; rts<br />.endproc<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 6:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Thanks.<br /><br />Got anything to do 0-255 to three digits? My current routine is 53 bytes and takes 80 cycles including the RTS.<br /></div><br /><br /><br />Yes I do have some three digits. I am just preparing supper so I'll take a look in a bit. I also just realized I'm using a TAY at the end of the 16 bit routine for no reason. I could just return the value in A, and save 2 cycles and a byte. I'll update that later.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Sun Jun 15, 2014 9:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay here is one that I just tweaked to handle both (0-99) and (0-255) separately. It takes 43 bytes and cycles are listed below including the 12 cycles for jumping and returning from the subroutines.<br /><br />Edit - This is now rev 3... uses less bytes, slightly faster average execution time, and the BIT instruction has changed. ASCII support is now optional for 2 more cycles and 2 more bytes. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;--------------------------------<br />;0-99 conversion stats<br />;--------------------------------<br />&nbsp; ;cycles&nbsp; occurances<br />&nbsp; &nbsp; ;28&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;31&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;34&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;37&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;39&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;42&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;45&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;48&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;50&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;56&nbsp; -&nbsp; 10<br /><br />&nbsp; ;average execution is 41 cycles<br /><br />;--------------------------------<br />;0-255 conversion stats<br />;--------------------------------<br />&nbsp; ;cycles&nbsp; occurances<br />&nbsp; &nbsp; ;35&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;38&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;41&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;43&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;44&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;46&nbsp; -&nbsp; 30<br />&nbsp; &nbsp; ;49&nbsp; -&nbsp; 30<br />&nbsp; &nbsp; ;52&nbsp; -&nbsp; 26<br />&nbsp; &nbsp; ;54&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;55&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;57&nbsp; -&nbsp; 30<br />&nbsp; &nbsp; ;60&nbsp; -&nbsp; 20<br />&nbsp; &nbsp; ;63&nbsp; -&nbsp; 20<br />&nbsp; &nbsp; ;65&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;68&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;71&nbsp; -&nbsp; 10<br /><br />&nbsp; ;average execution is 52.78 cycles</div><br /><br />Here are the routines. You start with the value in A, and at the end of the routine A = Ones digit, X = Tens digit, and Y = Hundreds digit (when using 0-255) conversion. Y is not used for the HexToDec99 subroutine.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;---------------------------------------<br />;&nbsp; 0-255 Hex to Decimal conversion<br />;&nbsp; By Omegamatrix (rev 3)<br />;&nbsp; 35-71 cycles, average 52.78 cycles<br />;---------------------------------------<br /><br />;change to $30 for ASCII support. Adds 2 cycles and 2 bytes.<br />ASCII_OFFSET = $00<br /><br />HexToDec255; SUBROUTINE<br />&nbsp; &nbsp; ldy&nbsp; &nbsp; #0 + ASCII_OFFSET<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; A = 0-255<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .done100<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #200<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .use100<br />&nbsp; &nbsp; iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; If a mapper conflicts with SBC #-101 (becomes BIT $9BE9), then you can try:<br />&nbsp; &nbsp; .byte $2C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; - 'BNE .done100' instead of .byte $2C, as Y=2 or Y=$32 at this point...<br />.use100<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #-101&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; - substitute with SBC #-101 with ADC #100 (which would become BIT $6469) <br />.done100:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Y = decimal hundreds<br /><br />;---------------------------------------<br />;&nbsp; 0-99 Hex to Decimal conversion<br />;&nbsp; By Omegamatrix (rev 3)<br />;&nbsp; 28-56 cycles, average 41 cycles<br />;---------------------------------------<br /><br />HexToDec99; SUBROUTINE<br />&nbsp; &nbsp; ldx&nbsp; &nbsp; #0 + ASCII_OFFSET<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = 0-99<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .try20<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #50<br />&nbsp; &nbsp; ldx&nbsp; &nbsp; #5 + ASCII_OFFSET<br />&nbsp; &nbsp; bne&nbsp; &nbsp; .try20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; always branch<br /><br />.div20:<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; inx<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #20<br />.try20:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #20<br />&nbsp; &nbsp; bcs&nbsp; &nbsp; .div20<br />.try10:<br />&nbsp; &nbsp; cmp&nbsp; &nbsp; #10<br />&nbsp; &nbsp; bcc&nbsp; &nbsp; .finished<br />&nbsp; &nbsp; sbc&nbsp; &nbsp; #10<br />&nbsp; &nbsp; inx<br />.finished:<br />&nbsp; IF ASCII_OFFSET<br />&nbsp; &nbsp; ora&nbsp; &nbsp; #ASCII_OFFSET<br />&nbsp; ENDIF<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = decimal tens<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A = decimal ones<br />&nbsp; &nbsp; rts</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Omegamatrix</b> [ Mon Jun 16, 2014 11:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I updated the Hex to Decimal routine (0-255) to rev 2 in the above post. I've chopped 3 bytes out of the old routine and slightly speed it up.<br /><br />I'm doing BIT $6469 to skip over the ADC #100. From what I've seen of the NES memory map $6469 is just SRAM so reading there should be no problem...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Jun 17, 2014 2:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Omegamatrix wrote:</div><div class="quotecontent">I'm doing BIT $6469 to skip over the ADC #100. From what I've seen of the NES memory map $6469 is just SRAM so reading there should be no problem...</div><br />The cartridge is free to map whatever it wants at $6469. In fact, all of $4020..$FFFF. It could be RAM, ROM, mapper registers or nothing (= open bus). Most of the time it's (S)RAM or nothing, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 17, 2014 6:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But so long as the cart doesn't put something with read side effects into $6xxx, BIT $6469 should work. (The addresses with read side effects on the NES are $2002, $2007, $4015-$4017, and $4020-$5FFF for the Vs. System's credit acknowledge.) The only mapper that I can think of that has read side effects there is <a href="http://wiki.nesdev.com/w/index.php/Bandai_FCG_board" class="postlink">Bandai boards with an I²C EEPROM</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Jun 17, 2014 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Omegamatrix, nice code, but what I am more interested in at the moment is how you determine the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;--------------------------------<br />;0-99 conversion stats<br />;--------------------------------<br />&nbsp; ;cycles&nbsp; occurances<br />&nbsp; &nbsp; ;28&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;31&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;34&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;37&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;39&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;42&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;45&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;48&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;50&nbsp; -&nbsp; 10<br />&nbsp; &nbsp; ;56&nbsp; -&nbsp; 10<br /><br />&nbsp; ;average execution is 41 cycles<br /></div><br /><br />What method/tools do you use to create that information?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 17, 2014 5:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Hex to Decimal</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I can't speak for the OP's methodology, but I wrote a 6502 simulator in Python so that I could run automated <a href="https://en.wikipedia.org/wiki/Unit_testing" class="postlink">unit tests</a> on 6502 code. With <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">peek&#40;&#41;</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">poke&#40;&#41;</tt>, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr&#40;&#41;</tt> functions, I can determine whether a subroutine returns a correct result and how long it takes. Combining such a simulator with <a href="https://docs.python.org/2/library/collections.html#collections.Counter" class="postlink">collections.Counter</a> makes it easy to test all combinations of parameters and produce a cycle count histogram.<br /><br />Want to see my simulator?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>