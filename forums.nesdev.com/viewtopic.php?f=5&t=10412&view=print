<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - &quot;Constants&quot; in programming</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">&quot;Constants&quot; in programming</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10412">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10412</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Aug 22, 2013 2:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>&quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Usually, it is common belief that there is two kinds of numerical values in computer programming, variables and constants.<br /><br />I am confused at what a &quot;constant&quot; is, and I was most confused by the &quot;const&quot; keyword in C++ for insance. I can count many types of &quot;constants&quot; :<br /><br />1) Universal constants like pi, e, etc... Those never changes and are the only true constants.<br /><br />2) Compile-time constants. You decide their values when you compile your program, and never change this.<br /><br />3) Mathematical constant. They are almost the same as compile time constant, except they are not defined directly but are the result of another calculation involving several constants of the first two mentioned kinds. Like if you insert (3*10 / 4) in your code.<br /><br />4) Constant argument to function. It's when you call a function and one of your arguments is one of the already mentionned 3 types of constants. Like in &quot;my_function(2);&quot;<br /><br />5) Local constants. They are affected at their creation (can also be an argument inside a function, which is a special case of a variable/constant being created then affected by the caller). They can be affected by variables making them take different values at execution time. However they are &quot;constant&quot; in the sense that you can't affect any value to them a second time.<br /><br />As far I know there is 2 reasons to have constants in the 1st place :<br />1) Security - you don't want to accidentally affect a value to a &quot;variable&quot; whenre this shouldn't be allowed<br />2) Optimisation - knowing some value is constant allows the code to compile into something faster and smaller (for instance, if you know you multiply by 4, you avoid a MUL instruction and just preform a shift left by 2).<br /><br />All those 5 types of &quot;constants&quot; can lead to various optimisations which are drastically different from each others :<br /><br />1) In a HLL, since a constant is universal you could build it in the language directly, and avoid having the user define his own PIs and Es again and again. However this won't make any difference in compiled code<br /><br />2) Any compile time constant does not have to be stored in variable RAM, it can just be hardcoded with the ROM or program RAM.<br /><br />3) Any math involving more than one compile-time constant should be done by the compiler and not by the program ! Only exception : When it affects precision in integer math, as in 4*var/3 will not be the same as (4/3)*var = 1 * var !<br /><br />4) This can optimise the way in which the function is called since there is no need to push a variable on the argument stack, but just a raw number<br /><br />5) In the case of a function call with a &quot;constant&quot; argument, you could pass the argument by reference even if the user doesn't specify this, as it will never be modified anyway<br />In the case of a user declared &quot;constant&quot;, it doesn't make much of a difference I think.<br /><br />Apparently C used the const keyword for 5, but it can also mean 1, 2 and 3 but those have to be detected by the compiler in order to be optimized.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Aug 22, 2013 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The order of operations also affects precision in floating point math (albeit more subtly), so the compiler is really never allowed to reorder operations when it could change the result of the expression.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Aug 22, 2013 11:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Constants are named values that don't change during program execution, contrasted with variables which hold state and change. It's about the dynamic behavior.<br /><br />In C and C++, there are two basic kinds of constants: const objects, and compile-time constants.<br /><br />A const object is merely one which the programmer has marked <em>const</em> and for which the compiler will prevent accidental modification by giving an error during compilation if it's attempted. The programmer can circumvent this by using casts, though this can result in undefined behavior, e.g. when the object is placed in read-only memory. Const objects exist to express and enforce constraints that the programmer finds useful for catching bugs or making operation clearer.<br /><br />A compile-time constant is a value that can be used where the compiler must know the value during compilation, like the size of an array in a struct. There are rules for what is a compile-time constant, for example that it must be a literal value or an integer declared const, so that it will be consistent across compilers regardless of how &quot;smart&quot; they are and what all they are capable of calculating at compile-time (a really smart compiler might be able to run your entire program during compilation and predict the result, for example).<br /><br />There is a third type, the invisible constant where the compiler is able to determine the value when compiling the program, and can thus make optimizations of the kind you mention. Here making objects const can help, because combined with the rule that modification is undefined behavior, the compiler can know that it won't legitimately be modified anywhere and thus assume its value cannot change and make optimizations. In effect, const gives the compiler a larger view of the program and things it won't do while running , and optimizations are based on knowledge like this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Aug 24, 2013 11:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the major confusion comes from the fact that &quot;const&quot; is used for a read-only variable while #define is used (among other things) for real constants.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Aug 24, 2013 11:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, #define was traditionally used for constants, since it bypasses the need for the compiler to identify and apply constancy to immediate values. I think this has fallen out of favour, somewhat, though.<br /><br />In general, I prefer to use a const int in a header to a #define, for a couple of reasons. Modern compilers are fully capable of optimizing them as constants. You can place them in scopes, and use all the other language features that you get with variables that you would be bypassing with #define (e.g. sizeof). Also, as always macros are a great source of frustrating compiler errors (usually the error looks totally unrelated to what the problem is).<br /><br />There are situations where I would still use a #define for whatever reason, but they're not my preference for constants.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sun Aug 25, 2013 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah. Macros are often frowned upon, but they are sometimes very convenient.<br />So never listen to someone saying never do something.<br /><br />Ooops.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Aug 25, 2013 3:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Enum often works just as well: enum { foo = 1234 }; It's scoped so it won't conflict with local variables of the same name, etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sun Aug 25, 2013 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yep, and as they are actually symbols to the C compiler (and not text transformed by a preprocessor), you have access to enum values in debuggers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Aug 26, 2013 8:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Jarhmander wrote:</div><div class="quotecontent">Yeah. Macros are often frowned upon, but they are sometimes very convenient.<br />So never listen to someone saying never do something.</div>I think macros are very good, although C macros aren't as powerful as some others, you can make many things with macros.<br /><br />(I usually do use macros for constants, although this isn't the only way to make constants. Sometimes I use enum, which sometimes work better especially to auto-number them. There are other things can be done with macros, too, though.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>whicker</b> [ Mon Aug 26, 2013 11:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Yeah, the major confusion comes from the fact that &quot;const&quot; is used for a read-only variable while #define is used (among other things) for real constants.</div><br /><br />This is an amazingly insightful observation.<br /><br />There isn't anything more at fault for all the buffer overflow exploits than the mixup in C you just pointed out.<br /><br />#define typically resolves into an immediate load CPU instruction if used literally. It does not 'define' anything because everytime it is used, it could be redefined by changing the payload data in the immediate instruction for that one only.<br /><br />const typically leaves a memory location that something else can overwrite quite easily. This is seriously likely because although array size has to be declared with an exact known value, unfortunately then that value is completely forgotten about because C doesn't boundary check.<br /><br />Time has shown this aspect of C is completely, utterly wrong.<br /><br /><br />...On a more metaphysical but harmless sense in tune with your observation, MOVE is an incorrectly titled instruction. It does not relocate a value from one place to another, it makes a COPY of it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Aug 27, 2013 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A compiler can and does treat the two interchangeably. If it sees a literal value used often, it might put it into a register/memory (if it takes more than one instruction to produce). And if it knows about a const object, it might cache it in a register if it's used a lot in one place. Security has little to do with it, because if someone can overwrite your program, you've already got a gaping wide hole.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Aug 27, 2013 8:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: &quot;Constants&quot; in programming</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">whicker wrote:</div><div class="quotecontent">const typically leaves a memory location that something else can overwrite quite easily. This is seriously likely because although array size has to be declared with an exact known value, unfortunately then that value is completely forgotten about because C doesn't boundary check.</div><br /><br />Not really. On modern compilers a const int typically becomes an immediate value when optimizations are enabled. If you create a reference to it, the compiler is forced to put it in a memory location somewhere, but because it's const, it can be used both as an immediate value and a stored value in the same program (i.e. doing illegal things to change its stored value still won't affect the places it is immediate).<br /><br />Furthermore, const data that does need to be stored can also be grouped with the code, which on <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa366786%28v=vs.85%29.aspx" class="postlink">some systems</a> can be made read only to protect it from accidental or illegal overwrites.<br /><br /><br />The lack of boundary checking has the advantage that your code has less automatic overhead. In C++ it's fairly common practice to use array wrapper templates to add the boundary checking where needed. The default implementation of std::vector usually does bounds checking, but this can also be disabled. Additionally, there are many <a href="http://valgrind.org/" class="postlink">tools</a> available to help inspect your code for bounds safety. Yes, none of this is built into C directly as a language feature, but it's available, and most importantly it's optional.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>