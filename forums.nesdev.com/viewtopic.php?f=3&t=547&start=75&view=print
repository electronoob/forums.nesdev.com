<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cycle for cycle stuff</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cycle for cycle stuff</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=547</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon May 22, 2006 1:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />augnober, what you describe is exactly what I've done with my NES emulator. The save state format is laid out much like the NES registers, along with any internal state necessary. Pretty soon I'm going to write some code to <em>transfer</em> a save state from an emulator to a NES.
<br />
<br />The problem with byuu's system (ignoring that it's for the SNES) is a limitation of the emulator implementation. Some of the system state is represented in the host machine's internal state of several threads (program counter, stack contents, stack pointer). This can't be easily converted to an emulator-neutral format, and would probably be quite difficult to reconstruct back when restoring from a neutral save state. The only option left is an exact memory dump of the host process (or some subset), which results in a very volatile format that could change even when simply re-linking the executable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon May 22, 2006 3:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The problem with byuu's system (ignoring that it's for the SNES) is a limitation of the emulator implementation. Some of the system state is represented in the host machine's internal state of several threads (program counter, stack contents, stack pointer). This can't be easily converted to an emulator-neutral format, and would probably be quite difficult to reconstruct back when restoring from a neutral save state. The only option left is an exact memory dump of the host process (or some subset), which results in a very volatile format that could change even when simply re-linking the executable.</div>
<br />
<br />Exactly. By moving the parallelism from the software (eg a state machine as discussed in this thread before) to hardware (eg cooperative multithreading), you gain an enormous speedup, code simplification and you can control synchronization points as finely as you desire -- eg you can run multiple opcodes in a row before returning from the CPU, and yet still stop right in the middle of a bus hold delay of any given cycle, when needed. <em>However</em>, software or hardware, a save state has to save the current "state" of each processor, and your state format is now dependant on the host machine as well as the emulated machine.
<br />
<br />The closest thing to a savestate would be to dump the physical stack memory and context registers for each thread. However, like blargg said, offsets inside the EXE to procedures and variables can change even with the slightest modification to code. Also, different platforms with different implementations for malloc/etc will cause allocated memory addresses to be different between systems anyway. Any alternations between malloc calls between two separate runs of the program would also break the state captures. At the best case, you'd only reliably be able to run a savestate in this format on the system the savestate was captured on, and it would require a lot of trickery. Probably not even that.
<br />
<br />Anyway, it's again a tradeoff. And it isn't SNES dependant. It'll work with any emulator. However, I don't think I'll ever find any emu author willing to give up savestates for it :(

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 22, 2006 4:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That, or have all threads sync to a stable architectural state at every vblank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon May 22, 2006 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The problem with byuu's system (ignoring that it's for the SNES) is a limitation of the emulator implementation.</div><br /><br />I should have said that this is an <em>inherent</em> limitation of a design using multiple threads, not just a problem with byuu's implementation. Even though a solution isn't immediately obvious, I'm still unconvinced that one doesn't exist. I haven't even thought about this cooperatively threaded design much yet.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">That, or have all threads sync to a stable architectural state at every vblank.</div>
<br />
<br />If we define a stable state as the main CPU and sound CPU both having just completed instructions, this might not even be possible. I imagine that the only stable states that could be reliably gotten to would constrain the implementation enough that it would come to resemble the previous design that didn't use threads. How do you restore a situation like the following where the main CPU emulator and sound CPU emulators are both mid-instruction in their respective threads?
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Main CPU<br />int addr = read_mem&#40; pc++ &#41;;<br />yield&#40;&#41;;<br />int data = read_mem&#40; addr &#41;;<br />yield&#40;&#41;; // stopped here<br /><br />// APU<br />int operand = read_mem&#40; pc++ &#41;;<br />yield&#40;&#41;;<br />int result = a + operand;<br />yield&#40;&#41;; // stopped here</div>
<br />
<br />In this example several pieces of state are in registers or on the stack, in a way determined by the particular compiler used. I do have the start of an idea of a solution. It involves running each thread manually from some well-defined starting point, feeding it enough dummy data to get into the desired state. This is similar to testing microchips through a narrow serial test pin where lots of actions are necessary to get the chip into the desired state.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>augnober</b> [ Mon May 22, 2006 9:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You'd made it sound like it wouldn't be possible to avoid savestate versioning issues.. but since the NES is static, it's more a matter of how practical it is.</div><br /><br />This isn't related to the NES. The reason you can't use savestates with cooperative multithreading is because you can't save the stack + context registers of each thread into a savefile with any kind of reliability that it will ever work again. Let alone on a different OS or processor.<br /><br />You can save the current state of the NES, but you wouldn't be able to load it. You'd have no way to set program execution to the correct point in each of the threads. I'm sure it's possible to create a semi-hybrid design that would allow savestates + partial multithreading, but it would lose the main advantages of using threads in the first place: code simplicity and possibly accuracy.</div>
<br />So to get savestate support, you'd likely have to compromise the design enough that it would no longer be the design you were talking about.. Which means the design really doesn't support savestates.  Got it.
<br />
<br />I was about to say I was still pretty confident that there's some way to get savestate support while still retaining the benefits of using cooperative multithreading.. but since: a) optimizing the elegance of this may be the kind of work better suited for a master's thesis, and b) without or even with that kind of work, people may have a rough time understanding how you'd made it work (which would risk defeating the original purpose of your design selection), it's probably better to let it go.  On the other hand, it's a fun goal if someone wants to give it a try.. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danimal</b> [ Mon May 22, 2006 10:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unless you have a really creative emulator I don't see any problems to making save states.  Basically you need cycle alignment and an image of all the states of the emulated device.  At most you would needs all the states of registers and RAM images.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Mon May 22, 2006 10:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />that would be nice if you could load a save state on the nes.  then maybe we could a standard save state format.  one that works on the nes.  i wonder if the revearse could be done.   take a state from the nes and load it to the emulator.  doesnt seem possible unless the data buss is being logged and internal states are determined.  oh well.  but i think a common save state would be nice.  i know we discussed it before among emulators, but this time we (not me though as my emu is not mature enough) agree one one if its loadable on the nes.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>augnober</b> [ Mon May 22, 2006 11:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The problem with byuu's system (ignoring that it's for the SNES) is a limitation of the emulator implementation.</div><br /><br />I should have said that this is an <em>inherent</em> limitation of a design using multiple threads, not just a problem with byuu's implementation. Even though a solution isn't immediately obvious, I'm still unconvinced that one doesn't exist. I haven't even thought about this cooperatively threaded design much yet.</div>
<br />This is my situation too.  The more I think about it, the more I see byuu knew what he was talking about when he said saving the state is feasible, but restoring it in a platform independent way isn't.  It's looking that way to me.  I imagine the best chance at a solution is in a different programming language which has this in mind, but then I suppose that even if such a language exists, the compilers currently available are bound to be slow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Tue May 23, 2006 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">This isn't related to the NES. The reason you can't use savestates with cooperative multithreading is because you can't save the stack + context registers of each thread into a savefile with any kind of reliability that it will ever work again. Let alone on a different OS or processor.</div><br /><br />If you simulate the parallel pieces of hardware in lock-step, then you're right that there is no convenient way to save and restore the state because at any given moment, at least some of the parallel tasks will be in an "intermediate" state where some of their temporary values are in machine registers, etc.<br /><br />On the other hand, if you simulate parallel tasks using a "catch up" scheme, or some more general scheme where each task has a separate idea of the "current" time and you only synchronize them when they need to communicate, then there is a simple solution: advance each task to a point where it isn't in an "intermediate" state before attempting to save the state of that task, and save the current simulated time of each task as part of the state!<br /><br />In other words, if you were simulating the CPU and APU and PPU as three separate parallel tasks, you might end up with a savestate containing CPU state as of time T1, APU state as of time T2 and PPU state as of time T3.  But the timepoint T1 would be the beginning of a CPU cycle (not some intermediate point in the middle of a CPU cycle).  And the timepoint T2 would be the beginning of an APU cycle, etc.  Most importantly, the values T1,T2 and T3 would be part of the savestate, and after loading the savestate the emulator would resume emulating the tasks from those exact timepoints.  It's not even necessary for T1,T2,T3 to be close together in time... however, it might be desirable to get them as close as you can before taking the snapshots, so that other emulators with less precision could still load the saved state of each chip and pretend that all 3 of them were saved at time T.<br /><br /><br />Of course, the main reason to simulate the separate tasks out-of-sync with each other (as opposed to simulating them in lockstep) is performance: you can run one task for a hundred cycles before you switch and run a different one for a hundred cycles.  You only need to check if its time to switch infrequently (e.g. one test in the CPU instruction dispatch code), and if it is.  The memory read or write handlers for ports which could require synchronization with another task might also need to <strong>suspend</strong> the current task until another task has "caught up", but you can treat that differently.  I am tired, I hope I made some sense in this post.<br /><br />As usual, the stuff in this post would be difficult to apply to BSNES because it simulates tasks in lock-step (which is reasonable, because performance is not one of the main goals of BSNES---BSNES aims to be as accurate as possible while still being written in a clear and maintainable fashion).<br /><br /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Even though a solution isn't immediately obvious, ...</div>
<br />The most interesting problems usually require non-obvious solutions.  I would say writing an emulator which is both high-performance and highly-accurate is a very interesting problem!  At least, I've been thinking about how to do it for many months now.  I've had some good ideas that came easily to me, and some others that came only after a lot of thought and thus were non-obvious.  At this point, its hard for me to remember which were which.
<br />
<br />Edit: by the way, the idea in this post could be used for other things besides savestates.  For example, if you had the "Sands of Time" feature in your emulator, you'd do the same thing for taking the in-memory snapshots used to rewind time.
<br />
<br />Another random thought:  suppose your task / cothread (representing, for example, the CPU) could cause a context switch in multiple places but only ONE of them was the "safe place" to do a save.  When this cothread was not running, it would be easy to check if it had stopped at the "safe place" by comparing the saved host PC to an address in your "safe place" code.  A complete save operation would then involve running each task for a while until it stops at the "safe place", and then saving the state (and timepoint) of that task.  Of course, if a task suspends somewhere other than the "safe place" it might mean you have to run a different task for a while before you can resume the suspended task, and if you have already <strong>saved</strong> that other task, you would have to discard its saved state and save it again later !  So there are still some wrinkles.  My gut feeling is that this problem could be avoided: perhaps you could do something like, keep simulating tasks for short durations and checking if ALL tasks are stopped at a safe point.  As soon as they all are, save them all simultaneously with whatever current times they have.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed May 24, 2006 12:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If we define a stable state as the main CPU and sound CPU both having just completed instructions, this might not even be possible. I imagine that the only stable states that could be reliably gotten to would constrain the implementation enough that it would come to resemble the previous design that didn't use threads. How do you restore a situation like the following where the main CPU emulator and sound CPU emulators are both mid-instruction in their respective threads?</div><br /><br />Exactly. And even if it's not so difficult to align the CPU and APU for a snapshot, what about when you have more than two threads? How about eight, twelve? It becomes harder and harder to align all threads to resumable points. Of course, you can split things up to have more resumable points. The more you add, the more like your old slow state machine your code becomes. The less you add, and the more threads you use, the less likely you'll be able to take a snapshot at all this way.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was about to say I was still pretty confident that there's some way to get savestate support while still retaining the benefits of using cooperative multithreading.. but since: a) optimizing the elegance of this may be the kind of work better suited for a master's thesis, and b) without or even with that kind of work, people may have a rough time understanding how you'd made it work (which would risk defeating the original purpose of your design selection), it's probably better to let it go. On the other hand, it's a fun goal if someone wants to give it a try.. :)</div><br /><br />Indeed. If we eliminated this bottleneck, and kept all of the coding and performance benefits, we'd have the potential to do for accuracy what dynarec and HLE did for speed.<br /><br />Master's thesis, hm? Heh, college would be nice. I'd have to settle for it being a high school senior's thesis :)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is my situation too. The more I think about it, the more I see byuu knew what he was talking about when he said saving the state is feasible, but restoring it in a platform independent way isn't.</div><br /><br />I spent the better part of a year researching this (ok, a few hours a week). So yeah, I <em>probably</em> know what I'm talking about ... but then again, maybe not ;)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I imagine the best chance at a solution is in a different programming language which has this in mind, but then I suppose that even if such a language exists, the compilers currently available are bound to be slow.</div><br /><br />That's exactly it. This could be done in c++ too, using save states. You either implement execution context in hardware, using CPU registers and the stack, and gain a huge speedup but lose the ability to save and restore the state cross-platform; or you implement the execution context in software, which becomes a state machine, where you have many small functions and hold execution states in memory variables, and lose a lot of speed. It's irrelevant what language you use. Hardware is always faster, but by it's very nature makes the states platform-dependant. Of course, it'd be more convenient to use a language that had this sort of functionality built in, but I like c++ too much to switch.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In other words, if you were simulating the CPU and APU and PPU as three separate parallel tasks, you might end up with a savestate containing CPU state as of time T1, APU state as of time T2 and PPU state as of time T3.</div><br /><br />Again, this becomes increasingly difficult as the number of threads increases. Let's say I need CPU, APU, PPU, DSP, and SA-1. Now if <em>any</em> of those five components are communicating with each other, I won't be able to take a snapshot because the waitforevent delay inside one of those will force that thread to be stuck in the middle of a function. It's a good kludge that'd probably work for CPU&lt;&gt;APU synchronization, though.<br /><br />I'm also not interested in a complex timeshifting system where there are memory buffers and rewind executions and such to effectively allow out-of-order execution such that the CPU can execute an entire opcode, even though the middle cycle writes to the APU, and when the APU runs it is able to compensate by detecting there was a write from the CPU in the middle of its opcode. That's too complex for my design goals. However, that's not to say it's a worse idea than using cothreads. It may even be a superior method.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course, the main reason to simulate the separate tasks out-of-sync with each other (as opposed to simulating them in lockstep) is performance</div><br /><br />Cothreads allow you to get away with this to an even finer detail. Right now, you're probably executing one opcode at a time between sync calls, right? With cothreads, you can skip over the out-of-order complexity, and simply check what address is being written to.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint read&#40;uint addr&#41; &#123;<br />&nbsp; add_cycles&#40;bus_hold_read_delay&#41;;<br />&nbsp; if&#40;requires_sync&#91;addr&#93;&#41;yield&#40;&#41;;<br />uint result = memory_read&#40;addr&#41;;<br />&nbsp; add_cycles&#40;read_delay - bus_hold_read_delay&#41;;<br />&nbsp; return result;<br />&#125;</div><br /><br />The new CPU core will exit only when it absolutely needs to, even if that ends up being 2000 opcodes later! You can avoid overflowing your cycle counters with something like :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void add_cycles&#40;int cycles&#41; &#123;<br />&nbsp; cycle_counter += cycles;<br />&nbsp; while&#40;cycle_counter &gt;= too_many_cycles&#41;yield&#40;&#41;; //allow something else to run to lower this thread's cycle counter<br />&#125;</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">perhaps you could do something like, keep simulating tasks for short durations and checking if ALL tasks are stopped at a safe point. As soon as they all are, save them all simultaneously with whatever current times they have.</div>
<br />
<br />Answered already.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed May 24, 2006 11:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Again, this becomes increasingly difficult as the number of threads increases. Let's say I need CPU, APU, PPU, DSP, and SA-1. Now if any of those five components are communicating with each other, I won't be able to take a snapshot because the waitforevent delay inside one of those will force that thread to be stuck in the middle of a function. It's a good kludge that'd probably work for CPU&lt;&gt;APU synchronization, though. </div>
<br />I don't think this would be a problem in practice.  Consider the CPU cothread.  Once per emulated instruction (in the dispatch code), it will be at a "safe point" to save.  So as long as it isn't blocked waiting for something else to complete, you only have to advance it a relatively short amount of simulated time in order to get to a "safe point" to save.
<br />
<br />In other words, you might context switch away from the CPU cothread for two reasons: either because you <strong>want to</strong> (which will always be at a "safe point", e.g. at the beginning of dispatching an instruction), or because you <strong>have to</strong> (because you need to interact with a different cothread and need it to "catch up" to you before you can complete your operation, e.g. a read from a APU-&gt;CPU communication port).  In the case of "want to" points, you might want to switch to a different cothread to handle a timer interrupt, or to make sure other tasks aren't delayed for too much wall-clock time (i.e. must simulate APU often enough to keep sound buffer full of samples) or because you want to take a savestate.
<br />
<br />In order to arrange a save, you would just make all tasks stop at a "want to" point as soon as they can.  If one or more of them stopped at a "have to" point instead, you'd continue emulating normally, i.e. do whatever "catch up" was necessary to unblock it, until it reached a "want to" point.  Remember, "want to" points occur pretty frequently--every simulated instruction, for example--so you're not likely to "have to" suspend more than once to get to one.
<br />
<br />Another way to look at it:  In the quote above you seem to be implying a scenario where many cothreads need to synchronize at once (i.e. "have to" stop for each other) in a way that prevents you from getting them all to a "want to" point.  But even if it was possible for that to happen for short periods of time (I'm not at all sure that it is), it doesn't happen most of the time.  If it did, "catch up" implementations would be synchronizing so often that they would hardly perform better than lock-step simulation.  The reason they perform better in practice is that the parallel tasks spend most of their time NOT interacting with each other, so close synchronization is not usually needed.
<br />
<br />I'm just speculating about all of this.  At one time I was trying to come up with a formalized timing model that gave precise definitions for all of this stuff.  But I got busy doing other things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed May 24, 2006 4:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Another way to look at it: In the quote above you seem to be implying a scenario where many cothreads need to synchronize at once (i.e. "have to" stop for each other) in a way that prevents you from getting them all to a "want to" point. But even if it was possible for that to happen for short periods of time (I'm not at all sure that it is), it doesn't happen most of the time. If it did, "catch up" implementations would be synchronizing so often that they would hardly perform better than lock-step simulation. The reason they perform better in practice is that the parallel tasks spend most of their time NOT interacting with each other, so close synchronization is not usually needed.</div>
<br />
<br />I'm really truly very much against the idea of playing to chance, hoping that the one rare instance where things get stuck in "have to" syncs repeatedly never occurs. In other words, if it isn't guaranteed to work, then to me it's junk.
<br />I also need to do this for the PPU, and I <em>won't</em> be breaking it apart into a dot renderer. So it will have to run an entire scanline to be in a "want to" point to pause at.
<br />However, if it's the only way to get savestates, perhaps I'll consider it :/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>augnober</b> [ Wed May 24, 2006 11:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I imagine the best chance at a solution is in a different programming language which has this in mind, but then I suppose that even if such a language exists, the compilers currently available are bound to be slow.</div><br /><br />That's exactly it. This could be done in c++ too, using save states. You either implement execution context in hardware, using CPU registers and the stack, and gain a huge speedup but lose the ability to save and restore the state cross-platform; or you implement the execution context in software, which becomes a state machine, where you have many small functions and hold execution states in memory variables, and lose a lot of speed. It's irrelevant what language you use. Hardware is always faster, but by it's very nature makes the states platform-dependant. Of course, it'd be more convenient to use a language that had this sort of functionality built in, but I like c++ too much to switch.</div>
<br />Thinking about it more, I think a different language could help a lot.  Before, I was thinking about the ability of a state to be saved on one platform and loaded on another.  For a strictly easier goal.. How about have cross-platform emulator code supporting savestates but only allowing the states to be restored on the same platform?  I think the proper language could be very helpful in abstracting what would be required while also not horribly maiming execution speed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Thu May 25, 2006 6:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On what cycles are bit 7 of $2002 set and NMI executed? And in which order?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-_pentium5.1_-</b> [ Mon May 29, 2006 10:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">augnober wrote:</div><div class="quotecontent">Thinking about it more, I think a different language could help a lot.</div>
<br />What language in particular do you have in mind?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>