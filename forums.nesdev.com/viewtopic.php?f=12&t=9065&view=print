<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Nintendo Super System (NSS) (Arcade Cabinet)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Nintendo Super System (NSS) (Arcade Cabinet)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=9065">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=9065</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Jul 02, 2012 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Nintendo Super System (NSS) (Arcade Cabinet)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does somebody have a Nintendo Super System at home?
<br />
<br />---
<br />
<br />The NSS is an arcade cabinet that can hold up to three slightly customized SNES games. The SNES part is quite simple: A game over flag at port 4016h.W.bit2 (used in "skill mode"), and a DIP-Switch input at 4200h.R for changing difficulty (on cartridges that DO have DIP-switches).
<br />
<br />Then there's a Z80 CPU for handling coin input and such things (similar as in NES Playcoice 10 and SNES SFC-Box). The Z80 BIOS is very unstructured and messy. After 2-3 days, I've basically figured out most of the I/O ports.
<br />
<br />For the button input, I am still unsure about which-bit-is-which-button in some cases.
<br />
<br />Serial OSD chip access is (maybe intentionally) programmed in confusing fashion with mirrored I/O addresses and plenty nonsense bits. Apart from that, it's using a straight address + character/attribute transmission. Character numbers for A-Z, a-z, 0-9, # and space are quite obvious (though non-ASCII). Underline and (I think) 3bit RGB color are looking simple. There should be special commands for character size and BG color and maybe other features. And for dumping the full charset with all symbols and punctuation marks, it'd be nice to run a Test-EPROM on real hardware sooner or later.
<br />
<br />RTC and EEPROM are also serially accessed, but that part looks simple. Finally, there's some sort of 8pin "CIC" chip in the cartridges - it seems to be accessed by Writing-and-Reading-and-Jumping-To address E37Fh. I've no clue how THAT is working.
<br />
<br />And, for making own games, understanding the format of the Instruction ROM (32K EPROM) would be also important. Title is at DEF1h. Checksum LSB and MSB are unconventionally found via pointers at C032h and DFFEh. The 32h-byte "CIC" key seems to be found at [C034h]. And somehere, there must be some kind of entrypoint.
<br />
<br />---
<br />
<br />Anyways, does somebody have a NSS at home? At the moment, I am having some basic questions:
<br />
<br />Is it possible to light more than one of the three game LEDs? Or to disable ALL LEDs? If not, then the LEDs might be just bound to the slot-selection bits (and then, it'd be ridiculous to search for separate LED enable bits).
<br />
<br />What are the Test and Credit buttons doing? I guess one (which?) adds a credit? And the other one shows up the Bookkeeping/Coinage/Selftest menu?
<br />
<br />And can somebody verify the part number of the OSD chip? According to <!-- m --><a class="postlink" href="http://mamedev.org/source/src/mame/drivers/nss.c.html">http://mamedev.org/source/src/mame/drivers/nss.c.html</a><!-- m --> it's a "Mitsubishi M50458-001SP" chip. But then... that nss.c file is wrong on almost every possible detail concerning Memory and I/O, and even the pin-number of the 100pin slot is wrong. Alltogther, the file seems to be more aiming at a good laugh than actually emulating the NSS hardware.
<br />
<br />Wouldn't be too surprised if the M50458-001SP part number is wrong, too. Seems to be quite impossible to find a datasheet for that chip. But, it DOES seem exist. There are a few non-NSS pages mentioning it, including pinouts, schematics, and even some sample-code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Jul 02, 2012 4:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As always, I am in awe that you're willing to take on such obscure hardware unrelated to the actual games.
<br />
<br />Since you are focusing on it, would you be willing to help with another part of the NSS?
<br />I'd like to know the DIP switch settings for all NSS carts. For instance, here is ActRaiser:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &lt;setting name=&quot;Difficulty&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0000&quot; name=&quot;Easy&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0001&quot; name=&quot;Normal&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0002&quot; name=&quot;Hard&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0003&quot; name=&quot;Expert&quot;/&gt;<br />&nbsp; &nbsp; &lt;/setting&gt;<br />&nbsp; &nbsp; &lt;setting name=&quot;Lives&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0000&quot; name=&quot;5 lives&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0004&quot; name=&quot;4 lives&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0008&quot; name=&quot;3 lives&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x000c&quot; name=&quot;2 lives&quot;/&gt;<br />&nbsp; &nbsp; &lt;/setting&gt;<br />&nbsp; &nbsp; &lt;setting name=&quot;Minute Speed&quot;&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0000&quot; name=&quot;60 seconds&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0010&quot; name=&quot;54 seconds&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0020&quot; name=&quot;48 seconds&quot;/&gt;<br />&nbsp; &nbsp; &nbsp; &lt;option value=&quot;0x0030&quot; name=&quot;42 seconds&quot;/&gt;<br />&nbsp; &nbsp; &lt;/setting&gt;</div>
<br />
<br />(You OR all the options and that's what $4200-4201 returns when read.)
<br />
<br />I believe the MESS team has told me that some of the NSS dumps are "suspect", and may just be forgeries of regular games.
<br />Although some likely really don't have DIP switch settings at all.
<br />So it would be great if we could redump and reverify all the NSS games.
<br />
<br />The arcade machines are a very rare find though. And they're freaking huge :/
<br />
<br />Also ... can you explain the game over flag in a bit more detail? How does one go about triggering that? What is skill mode? When I put ActRaiser into expert mode, I get game over normally when I run out of lives. I'd love to see a video of it triggered, too. Like the SFC Box, I don't intend to simulate the non-SNES overlay hardware, but it would be good to do a rough simulation of this feature.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Jul 02, 2012 5:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As always, I am in awe that you're willing to take on such obscure hardware<br /></div><br />Obscure stuff is interesting. I guess most people never heard of that thing - at least, I never ever heard of it, until doing some NES playchoice 10 research last week.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'd like to know the DIP switch settings for all NSS carts.<br /></div><br />Okay, but now, that is TOO obscure. I'll try to add a DIP-switch option somewhere in the no$sns gui, so one can try what happens. Or otherwise, even without emulating it, one could just look at the opcodes that read 4200h.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(You OR all the options and that's what $4200-4201 returns when read.) <br /></div><br />Yup, Act Raiser is doing a 16bit read there (but uses only the lower some bits)... I would guess that 4201h..42FFh are just mirrors of 4200h.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I believe the MESS team has told me that some of the NSS dumps are "suspect", and may just be forgeries of regular games. <br /></div><br />I think the BIOS and INST-ROM are suspect by themselves. There are a lot of unused regions that are filled with unused code fragments (such like 50 opcodes from a "used" region, copied into an "unused" region). It's pretty hard to separate between meaningful code/data and garbage - on the other hand that's making it difficult to create own games or bootlegs - so far, if the dumps contain working PRG-ROMs and INST-ROMs, then they are probably original NSS games.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Although some likely really don't have DIP switch settings at all. <br />So it would be great if we could redump and reverify all the NSS games. <br /></div><br />There seem to be 3 different cartridge PCBs, type A without SRAM and without DIP switches. Type B with SRAM and optional DIP switches. And Type C is same as B, but with bigger ROM (on two ROM chips).<br />In practice, the DIPs seem to be installed only on Type C boards.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also ... can you explain the game over flag in a bit more detail? How does one go about triggering that? <br /></div><br />4016h.W.Bit2 is just a normally unused joypad output. Act Raiser sets that bit upon game over. Actually it seems to toggle the bit twice (don't know why twice). On the Z80 side that signal should probably show up in one of the I/O ports, and the Z80 could then reset the SNES and display some insert coin message. I haven't got that far yet to see what happens exactly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What is skill mode? When I put ActRaiser into expert mode, I get game over normally when I run out of lives.<br /></div>
<br />I haven't emulated the configuration menu yet, but there seem to be two modes: In Skill Mode the game does probably end when you lost all lives. And in the other mode one can set a Minute:Second time limit per credit, and the game should then end when you run out of time/money.
<br />
<br />Judging from photos, there seem to be 1-credit games and 2-credit games. Which probably means that one needs more money for the latter ones. Don't know if that can be configured in the Coinage screen, or if it's preset in the INST ROMs or "CIC" chip.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Mon Jul 02, 2012 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, one additional bit of info. There's apparently two firmware versions of the NSS board itself. You apparently need the newer one to play the later released games. I don't know which chip in particular, saw it on a video about the hardware.
<br />
<br />&gt; Okay, but now, that is TOO obscure.
<br />
<br />I dunno, I thought it was really cool. I understand it's a pain to do so, but I generate the GUI based on the XML when you first load the cart, so you can set how you want it to play.
<br />
<br />For ActRaiser more than any other game, it's really nice. The real ActRaiser requires you to beat the game before you can play a limited "arcade" mode that's every -other- level.
<br />
<br />The NSS game lets you skip story mode, play -every- level, and the DIP settings give you lots of skill settings. To me, the DIP settings are much more interesting than the insert coin and game selection overlays. I am still happy you are researching the latter of course. Everything that can be preserved should be.
<br />
<br />&gt; Yup, Act Raiser is doing a 16bit read there (but uses only the lower some bits)... I would guess that 4201h..42FFh are just mirrors of 4200h.
<br />
<br />I got that impression when AR only used 6-bits. It would be great to confirm whether 4201-42FF are open bus or mirrors of 4200. I just let you control both bytes just in case, until we verify all games' DIP settings.
<br />
<br />&gt; on the other hand that's making it difficult to create own games or bootlegs
<br />
<br />Unfortunately there are two bootlegs on eBay now =(
<br />
<br /><!-- m --><a class="postlink" href="http://www.ebay.com/itm/Nintendo-super-system-arcade-cartridge-super-Mario-world-BUT-it-saves-progress-/150845313269?pt=LH_DefaultDomain_0&amp;hash=item231f14d0f5">http://www.ebay.com/itm/Nintendo-super- ... 231f14d0f5</a><!-- m -->
<br />
<br /><!-- m --><a class="postlink" href="http://www.ebay.com/itm/Nintendo-super-system-arcade-cartridge-push-over-cartridge-conversion-/150845322839?pt=LH_DefaultDomain_0&amp;hash=item231f14f657">http://www.ebay.com/itm/Nintendo-super- ... 231f14f657</a><!-- m -->
<br />
<br />This page lists Super Copa on the display, which AFAIK was not an NSS game. It's also an insanely rare commercial cart from Mexico/Brazil only:
<br /><!-- m --><a class="postlink" href="http://distritofederal.quebarato.com.mx/gustavo-a-madero/nintendo-super-system-jamma-neo-geo__7731AC.html">http://distritofederal.quebarato.com.mx ... 731AC.html</a><!-- m -->
<br />
<br />Hopefully the real ones come on mask ROMs, so you can easily spot fakes before dumping. The non-standard connector won't make dumping easy, either. Nor will the scarcity.
<br />
<br />EDIT: they are apparently all EEPROMs, shit :(
<br />That makes absolute verification from one board impossible.
<br />
<br />&gt; In practice, the DIPs seem to be installed only on Type C boards.
<br />
<br />Ah, neat. So there were 14 games total.
<br />Do we know the type of each of the 14 games?
<br />Or even better, do we have PCB scans of all 14 somewhere?
<br />Knowing a game were type A or B to skip testing for DIP settings would be nice.
<br />
<br />Heh, here I thought the DIPs were software-based, and accessible in the arcade operator's menu. I sure hope there's at least a manual or something for arcade operators to know how the DIPs work.
<br />
<br />&gt; 4016h.W.Bit2 is just a normally unused joypad output.
<br />
<br />Oh, are you saying "Bit1-Bit8", or "Bit0-Bit7"? If the former, that's a fairly obvious choice to use controller Data2 line. If the latter, then that's pretty darn neat since the stock SNES doesn't use the third bit at all.
<br />
<br />FWIW, I always start from zero when indexing bits with bytes.
<br />
<br />&gt; I haven't got that far yet to see what happens exactly.
<br />
<br />Ah, so untested for now. Okay then, I won't support it for now. I look forward to more research :D

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jul 02, 2012 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />About toggling twice, I seem to remember an old article in Nintendo Power claiming that inserting coins bought extra lives. Perhaps the extra toggle was to see whether a coin had been inserted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Jul 02, 2012 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh, are you saying "Bit1-Bit8", or "Bit0-Bit7"? If the former, that's a fairly obvious choice to use controller Data2 line.</div>
<br />You mean like the 2nd bit in the 2-bit joypad INPUT register?
<br />No, I meant the 3rd bit in the 3-bit joypad OUTPUT register.
<br />The register is always 3-bit wide, nothing new there, though, in normal SNES consoles, the pins for bit1-2 are left unconnected.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jul 03, 2012 5:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; You mean like the 2nd bit in the 2-bit joypad INPUT register?
<br />
<br />Oops, yeah, my mistake.
<br />
<br />&gt; No, I meant the 3rd bit in the 3-bit joypad OUTPUT register.
<br />
<br />That's even more surprising to me. I was under the impression the register was 1-bit wide, and was connected to LATCH for both joypads.
<br />
<br />&gt; The register is always 3-bit wide, nothing new there, though, in normal SNES consoles, the pins for bit1-2 are left unconnected.
<br />
<br />Do you know where the pins are in the SNES? I use bit0 for sending serial data to my PC from the SNES. If I could solder two extra wires to send three bits at a time, I could send a byte on three writes instead of eight.
<br />
<br />And now I have to wonder what $4016w.d1 is for on the NSS :P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jul 03, 2012 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is a second pin that can be used as an output: the I/O Bit. The multitap, for example, uses it as an output, and it uses both D1 and D0 as inputs if I remember correctly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Tue Jul 03, 2012 12:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Since they are not on the same register, that really doesn't do us any good. I use IObit to toggle between serial and joypad passthru though. But that's getting off-topic now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Tue Jul 03, 2012 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are a lot of unused external I/O ports in the controller registers, and in APU registers, too. See the fullsnes.htm doc for details on bits and pins. The fastest possible transfer should be injecting data to WRAM, as done by the "xboo" circuit in fullsnes.htm, that'd theoretically offer "DMA speed", though waitstates on the PC side are slowing it down. But it's still very fast for doing things like 64Kbyte test-program uploads.
<br />
<br />----
<br />
<br />Okay, but back to the NSS - first, some questions about the 8pin protection chip:
<br />
<br />Did somebody ever manage to dump one of that chips (assuming that it DOES contain memory)?
<br />
<br />Did somebody ever identify the chip? The part number is reportedly scratched off (or at least hidden under the sticker). Probably it's a serial PROM, same or similar as the RP5H01 chips used on Playchoice 10 cartridges.
<br />
<br />Did somebody ever identify the pinouts? At least GND and VCC should be VERY simple to identify; and even that info would help to find out if it's a RP5H01 or not, and if it's wired to TEST mode or not.
<br />
<br />----
<br />
<br />On the Z80 side, I've figured out how the protection chip is accessed. The jumps to the memory mapped I/O port at E37Fh are apparently causing RST opcodes to be executed. Obviously not RST 0 (reset), but two of the other seven RST opcodes (one for receiving "0" bits from PROM, and one for "1" bits).
<br />
<br />The RST handler are then doing some confusing address indirections, and do finally end up at two small procedures in INST ROM, which do then return the PROM bit in CY flag. And alongsides, the PROM data is XORed with other rotated values.
<br />
<br />After that reading/xoring/rotations, one does have 32h bytes data: The number of "0" bits in the checksum for that region indicates how to handle the checksum of another region (which is addressed by the last two bytes of the 32h-byte data, and a bit from 2nd byte). Aside from being used as address, the last 2 bytes are also containing the expected checksum; eventually XORed by other bytes; depending on the number of "0" bits. Confusing, eh? Might be getting difficult to get that well-described, or to produce homebrew games for the NSS.
<br />
<br />The 2nd byte does also contain a 8bit GameID, if there's already a cartridge with same ID in one of the other slots, then the NSS won't show the cartridge in the game menu. That 8bit ID might have caused problems in case there would have been more than 256 games relesed.
<br />
<br />Don't know yet what the other bytes in the 32h-byte area are used for. I am afraid that they might contain important stuff like entrypoints to INST ROM - so, without also having dumped the protection chips, the INST ROM dumps might turn out to be totally useless.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu Jul 12, 2012 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Got it! The protection chip is the same RP5H01 serial 9-byte PROM as used in Playchoice 10, and contains a decryption key. It's first used to decrypt the 32h-byte block. And then used to decrypt the game title, in a second decryption pass (from the previously decrypted 32h-byte block).
<br />
<br />As long as the exact spelling of the title is known, one can write a brute-force program to find the correct decryption key. That is, yes, a very stupid idea, I wasted some days until I got it working, but I didn't have the real PROM chips, and thus couldn't dump them the normal way.
<br />
<br />Currently, the brute-force approach takes around a minute to find the key (it needs to brute on the first 24bit (16 million combinations) to be able to decrypt only the 1st byte of the title). But, eight of the 9-key bytes seem to be also stored in (almost) unencrypted form somewhere in the INST ROM. The only problem is that the location of that data is encrypted via the PROM. Anyways, there only 8192 bytes of the ROM used, so feeding key bytes from all possible ROM addresses should be around 2000 times faster than the current 16 million times bruting.
<br />
<br />The BIOS is quite some beast. At first glance it looks totally amateurish: For example, it doesn't have ONE menu function that shows the currently selected menu item. No, it has FOUR menu functions (one separate function, depending on which if the four menu items is selected). Even stranger, it never uses that four functions, but uses a fifth menu function (that cannot show the current selection at all).
<br />
<br />But aside from the GUI, there are some evil hacks. Like here - three overlapping procedures that share the same opcodes:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0000:65DA FD 21 F1 64&nbsp; ld&nbsp; &nbsp;iy,64F1 ;token_goto_if_zero<br />0000:65DE 18 &#40;EA&#41;&nbsp; &nbsp; &nbsp; jr&nbsp; &nbsp;65CA<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;*** below opcode EAh does OVERLAP with above EAh!<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cryptic_osd_callback:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;this is used on the hidden protection checks<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;in the OSD write string function<br />0000:65DF &#40;EA&#41; 3F 5F&nbsp; &nbsp;jp&nbsp; &nbsp;pe,5F3F ;cryptic_osd_callback_even<br />0000:65E2 E2 &#40;D9 5E&#41;&nbsp; &nbsp;jp&nbsp; &nbsp;po,5ED9 ;cryptic_osd_callback_odd<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;*** below opcodes D9h,5Eh do OVERLAP with above D9h,5Eh!<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; token_34_osd_wrstr_indirect:<br />0000:65E3 D9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;exx<br />0000:65E4 5E&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ld&nbsp; &nbsp;e,&#91;hl&#93;&nbsp; &nbsp; &nbsp; ;\<br />0000:65E5 23&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;inc&nbsp; hl&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; get string address<br />0000:65E6 56&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ld&nbsp; &nbsp;d,&#91;hl&#93;&nbsp; &nbsp; &nbsp; ;/<br /></div>
<br />As seen above, there's a token interpreter, I think the INST ROM also contains some tokens, not only text/data for the instructions. And the title decryption is also funny: It's hidden in the OSD write string function (and automatically displays &amp; decrypts the title when passing an invalid VRAM address to that function.
<br />
<br />The instructions are a bit disappointing. In ActRaiser, there's only one page, telling what controller buttons to use. There is really no story-mode there. Maybe there's a bit more text in other games. ActRaiser seems to have pre-allocated space for 10 pages (which would occupy 5K of used 8K area of the 32K INST ROM).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Thu Jul 19, 2012 7:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do we know the type of each of the 14 games? <br />Or even better, do we have PCB scans of all 14 somewhere?</div>
<br />What 14 games did you mean? I know only 12 games:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; PCB Title<br />&nbsp; C&nbsp; &nbsp;Act Raiser &#40;NSS&#41; 1992 Enix &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; C&nbsp; &nbsp;Addams Family, The &#40;NSS&#41; 1992 Ocean &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; C?&nbsp; Contra 3: The Alien Wars &#40;NSS&#41; 1992 Konami &#40;Two EPROMs+SRAM+DIPSW&#41;<br />&nbsp; C&nbsp; &nbsp;David Crane's Amazing Tennis &#40;NSS&#41; 1992 Abs.Ent.Inc. &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; B&nbsp; &nbsp;F-Zero &#40;NSS&#41; 1991 Nintendo &#40;ROM+SRAM&#41;<br />&nbsp; C&nbsp; &nbsp;Irem Skins Game, The &#40;NSS&#41; 1992 Irem &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; C&nbsp; &nbsp;Lethal Weapon &#40;NSS&#41; 1992 Ocean &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; C&nbsp; &nbsp;NCAA Basketball &#40;NSS&#41; 1992 Sculptured Software Inc. &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; C?&nbsp; Robocop 3 &#40;NSS&#41; 1992 Ocean &#40;Two EPROMs+DIPSW&#41;<br />&nbsp; A&nbsp; &nbsp;Super Mario World &#40;NSS&#41; 1991 Nintendo &#40;ROM&#41;<br />&nbsp; A&nbsp; &nbsp;Super Soccer &#40;NSS&#41; 1992 Human Inc. &#40;EPROM&#41;<br />&nbsp; A&nbsp; &nbsp;Super Tennis &#40;NSS&#41; 1991 Nintendo &#40;ROM&#41;<br /></div>
<br />Plus, there has been an advert announcing Push-Over, but I don't know if that game was actually released.
<br />
<br />And PCB scans, the "nss.c" file describes which game uses which PCB. According to that file, there are only 3 PCB versions (A,B,C). For A and B I've found good pictures of the component sides (but none of the solder side; which would  have been really helpful). And Type C seems to be quite rare - I've found only one low-res photo of that PCB. The one thing visible there is that it has only 8 DIP-switches, so Port 4101h is definitely containing some kind of garbage, no additional switches.
<br />
<br />With the brute force proggy, I've managed to get decryption keys for 7 of the 12 games. The missing ones are:
<br />All three Type A games - the title/spelling there is fully known, so the brute force stuff should have worked without problems. My current guess is that the PROM chip is wired differently on the Type A boards. I've found somebody who owns Type A carts, and hope to get pics of the solder side soon.
<br />
<br />And, keys for Robocop 3 and Contra 3 are also missing. Maybe they use different PCBs, too. Or it's just a spelling problem... though I've tried most possible combinations for Robocop/RoboCop/ROBCOP 3 or III. Well, and "Contra 3: The Alien Wars" must be somehow squeezed to 21 characters, which gives near endless possibilites... not to mention that some people are referring to the NSS version as "Super Contra" or "Alien Attack"; and... in the bookkeeping screen it does even identify itself as "New Game 1". Not too much chance to get that working, not without at least seeing a screenshot of the Game Menu showing the title. But I suspect Contra 3 has been some rare semi-official prototype (with INST ROM instructions "to be announced"), so it might be impossible to find somebody who actually owns the real cartridge.
<br />
<br />Aside from Contra 3, the other 11 games are having fully-featured INST ROMs and are looking like authentic original games to me. Amazing Tennis is a bit odd as it has GameID FFh (the others are numbered 00h and up). Making unlicensed games or bootlegs with real working INST ROMs should be more or less impossible. Well, almost impossible - next no$sns update will include a tool for doing that; but it took me 3 weeks to get there. It'll be working without decryption PROMs - so it should be still easy to separate between original and homebrew cartridges.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Jul 19, 2012 9:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a chance to get an NSS cabinet (with no boards tho) for cheap, kinda kicking myself for passing on that deal.  But I've been thinking of finding an NSS board eventually, since it is standard JAMMA.  I would be interested in making a game board for it, so your research really helps towards that.
<br />
<br />Sorry I don't have anything to contribute as far as NSS info, but I am curious how similar/different this is to the Playchoice instructions/protection, if you've looked into it much.  I've finished the layout for a Playchoice board, substituting the RP5H01 with a CPLD.  I've disassembled the system ROM a little bit, but being a total Z80 newb and examining obfuscated code is a little weird.  If you ever look into it sometime, I could use any tips on how it works.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Jul 19, 2012 11:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here are DIP settings for Addams Family. I wish we had these for all type C games ... doesn't seem anyone else is interested in making the DIP settings easy to configure though, MESS doesn't seem to care either :/
<br />To me, it's the only cool part about the system. The rest is no more exciting than multi-game Nintendo Power cartridges.
<br />
<br /><!-- m --><a class="postlink" href="http://arcarc.xmission.com/Arcade%20by%20Title/Ninento%20Super%20System/addams_settings.jpg">http://arcarc.xmission.com/Arcade%20by% ... ttings.jpg</a><!-- m -->
<br />
<br />&gt; What 14 games did you mean? I know only 12 games:
<br />
<br />Push-Over is advertised as existing here:
<br /><!-- m --><a class="postlink" href="http://arcarc.xmission.com/Arcade%20by%20Title/Ninento%20Super%20System/snes-4game-ad.JPG">http://arcarc.xmission.com/Arcade%20by% ... ame-ad.JPG</a><!-- m -->
<br />... but it seems nobody has ever actually seen it?
<br />
<br />On the screenshot near the bottom, this person is playing Super Copa:
<br /><!-- m --><a class="postlink" href="http://distritofederal.quebarato.com.mx/gustavo-a-madero/nintendo-super-system-jamma-neo-geo__7731AC.html">http://distritofederal.quebarato.com.mx ... 731AC.html</a><!-- m -->
<br />
<br />It seems that there are likely 12 games in the US. There are also international releases of games. I have seen a French copy of Super Soccer, complete with a French marquee insert for the cabinet. The ROM itself may be the English version though, I don't know. Not paying what the seller wants for it.
<br />
<br />&gt; And Type C seems to be quite rare - I've found only one low-res photo of that PCB.
<br />
<br />Here is NCAA Basketball:
<br /><!-- m --><a class="postlink" href="http://i.imgur.com/VvjYq.jpg">http://i.imgur.com/VvjYq.jpg</a><!-- m -->
<br />
<br />The DIP switches are quite hard to toggle, but there's definitely eight of them.
<br />
<br />&gt; The one thing visible there is that it has only 8 DIP-switches, so Port 4101h is definitely containing some kind of garbage, no additional switches.
<br />
<br />I've left it as open bus for now, ActRaiser still plays fine. It's either a mirror of $4100 or nothing at all. I'm more interested now in what happens if you write #$02 to $4016. It seems odd for them to use lines 1 &amp; 3 and not line 2. Random guess: gives extra credit for achieving some goal (eg certain score.)
<br />
<br />&gt; But I suspect Contra 3 has been some rare semi-official prototype (with INST ROM instructions "to be announced"), so it might be impossible to find somebody who actually owns the real cartridge.
<br />
<br />I'm wondering about a lot of these games actually. The only ones I've ever actually heard of anyone owning are:
<br />Super Mario World
<br />Super Tennis
<br />F-Zero
<br />Super Soccer
<br />NCAA Basketball
<br />ActRaiser
<br />
<br />&gt; Well, almost impossible - next no$sns update will include a tool for doing that; but it took me 3 weeks to get there.
<br />
<br />Great. We can look forward to bootlegs of the harder to find cartridges now, advertised as if they were authentic :P
<br />People have already sold bootleg Push-Over carts using the Super Mario World INST ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Fri Jul 20, 2012 6:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the NCCA Basketball PCB picture! That's better resolution than pic I had found. For Push-Over, I've only seen that advert, too. Aside from that, there seems to be nothing hinting that the game does really exist... no photos, no dumps, and nobody claiming to own it. When did you last check the Super Copa link? I only get "Invalid address" whenever clicking there.
<br />
<br />Playchoice relation would be interesting. I haven't yet looked too deep into the PC10 BIOS. It looks like being made by the same programmer, and the RP5H01 part is quite the same as in NSS - using RST opcodes, and even using the same databits in the E000h-EFFFh R/W area, and spitting out the same 16-byte data (9 bytes plus mirrors/padding).
<br />
<br />Don't know what the PROM is used for at software side on PC10s... There seems to be a homebrew replacement BIOS that works without PROMs - but I don't know if that BIOS can actually decrypt original games without the PROM ? (Assuming that the PC10 PROMs are containing decryption keys, too).
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've finished the layout for a Playchoice board, substituting the RP5H01 with a CPLD.</div>
<br />That sounds interesting. Is that only a layout - or do you already have a RP5H01 clone tested &amp; working on real PC10 hardware? I am wondering what comes out exactly from the DATA and COUNTER OUT pins:
<br />
<br />COUNTER OUT should output address bit 5. According to the RP5H01 datasheet, the address starts at zero. So I'd expect the pin to output 32 "null" bits, then 32 "ones", and so on. But, the signal arriving at the PC10/NSS I/O ports is exactly vice-versa: Starts with 32 "ones", then 32 "nulls". Do you know if that inversion takes place in the RP5H01 chip? Or is it inverted on the PC10 mainboard?
<br />
<br />DATA arrives at the PC10/NSS I/O ports as how it is stored in the pc10/mame "security.prm" files (aside from the wrong bit-order; storing bit0 (the first bit) in bit7 of the first byte of the file is total nonsense - it doesn't match up with the datasheet, nor with the BIOS functions, nor with the text/letters contained in the PROM).
<br />Anyways, what I wanted to say was: The "null" bits in the .prm file arrive as "null" bits in the I/O ports. But I am wondering if that is really correct (inverted COUNTER OUT and un-inverted DATA looks like a odd combination). Do you know if the security.prm files are containing bits exactly as seen on the DATA pin? Ie. the "padding bytes" are FFh? Or could it be vice-versa, padding 00h?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>