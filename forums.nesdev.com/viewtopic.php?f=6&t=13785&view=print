<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Implementing Original Music for Nintendo &amp; Sega Game Dev</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Implementing Original Music for Nintendo &amp; Sega Game Dev</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=13785">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=13785</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlexE</b> [ Fri Jan 29, 2016 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi! I'm Alex. I'm a music composer for video games and movies (as well as an animator, writer, etc.). <br /><br />FOR NES​<br />I have used FamiTracker (a music tracker designed to perfectly emulate the 2A03 audio chip of the NES/Famicom) for many years and I've always been fascinated by the fact that whatever music made in that program can be played on original hardware. That had me thinking about homebrew and ROM hack development, looking to improve my freelance music composition repertoire by expanding into the homebrew and ROM hack scene. I then found this site which deals specifically with retro game dev and so I figure that I would be able to get clear and more follow-able answers here.<br /><br />FamiTracker is able to export NSF, .NES, PRG, BIN, ASM, and tracker text formats. Here are my questions:<br /><br /><ul><li>What steps can I take to make sure that the music is more usable for the programmer(s) to implement into their development?<br />Are there size limits to individual tracks? I know that FamiTracker allows for limitless frames, but how much space can be used on a NES game to be used for audio?</li><li>How do I sort out sound effects? Should they be separate songs in FamiTracker or in one song? Is there something I can do in FamiTracker that would allow for the sound effect to return back to the background music after the sound effect is finished playing?</li><li>Are there specific Song Settings I should use (e.g. Speed, Tempo, Rows, Frames)? I understand that the NES does not build its tempo on BPM like the SNES does but on some kind of &quot;clock&quot; timer. Would changing the Speed or Tempo in the settings affect how the game performs? This includes the Fxy function which I use for ritardando and accelerando.</li><li>Expansion audio (e.g. VRC6, FDS, Namco 163) can only be used on Famicom hardware with the physical chip on the game cartridge (and on NES emulators, of course). Would a Famicom Everdrive/flash cart remove that problem?</li><li>If the ROM of a game with expansion audio implemented were to be played on the 2A03-only NES, would the expansion audio simply not play or would that lead to complications?</li><li>How should I export the music data to the programmer?</li><li>Will FamiTracker's &quot;New Style&quot; of vibrato (modulating the pitch up and down instead of the &quot;Old Style&quot; where it is just down) cause problems? Will having a very effect-heavy and musically busy soundtrack cause errors?</li></ul><br />According to HertzDevil on the FamiTracker forum, he said this.<br /><br /><em>&quot;Do not use FamiTracker BIN export, especially if there are going to be sound effects at all. FamiTracker's own NSF driver is never designed to allow fast playback; instead, leverage existing drivers like Shiru's FamiTone2 or Gradualore's sound driver, or create an intermediate format yourself, either with the text exporter output or with the (not very usable) CFamiTrackerDocInterface class. You are on your own when designing sound drivers that are compact yet sufficiently expressive.&quot;​</em><br /><br />After looking into it, FamiTone2 by Shiru allows for converting FamiTracker (v 0.3.6 and higher) music —<br />including DPCM — into NESASM, CA65, and ASM6 formats. Gradualore's GGSound was used in Super Bat Puncher (which is an outstanding game with outstanding music) and in Star Keeper (which I haven't played yet). I am not interested in developing my own program to convert FamiTracker data into usable code AND the actual implementation of that code into the game as my knowledge in these fields are very limited. If necessary, I will look into those things further.<br /><br />Unlike the SNES where the RAM for the audio and the RAM for the rest of the game are separate, the NES shares it. The largest official games for the NES were Kirby's Adventure at 6 megabits and Uncharted Waters at 5 megabits and most other games were at around 4 megabits. The largest Famicom game was Metal Slader Glory at 1 megabyte (or 8 megabits). I know they are capable of more, though it requires additional hardware for the cart (apparently the Nintendo 64 can handle a 4-GB cart! Resident Evil 2 was the largest game released at 64 megabytes). At any rate, I'm wondering how much of the RAM on the cartridge can be used for audio and read by NES and Famicom hardware? How much can be used for an NES emulator?<br /><br />I also found some neat things like this NES programming tutorial.<br /><br />FOR SNES​<br />In addition to NES music, I'm also interested in learning how to create SNES music so that it can be implemented into a SNES homebrew/ROM hack. I did a great deal of research into how the SNES handles audio in order to accurately create fakebit SNES music from scratch.<br /><br /><em>The audio chip of the 16-bit Super NES/Super Famicom (Sony SPC700 via 65816 RAM(?)) has 8 adaptive differential pulse-code modulation (ADPCM) channels for bitrate reduction- (BRR) compressed samples. All the samples had to be compressed with ADPCM/BRR formats at a ratio of around 3.5:1 (32:9?) to less than 64 Kilobytes to fit on the discrete audio chip’s RAM. This means that for every 32 bytes of 16-bit PCM there are 9 bytes of BRR. The size of the samples should in total not exceed more than 150 kilobytes. The raw samples of the instruments are tweaked for downsampling, then downsampled to 8 to 22 kHz, and cut into small loops that are then truncated to 8 bits. Equalizing to retain brightness can occur before or after downsampling. Samples are often no larger than 2 kilobytes, having 16 samples to be looped.<br /><br />The DSP also allowed for echo effects. Impressively enough, the SNES is capable of Dolby Surround Sound, albeit it was pseudo-surround sound using stereo Q-Sound.​<br /></em><br />I later learned that Shiru made a SNES music tracker that does all that busy work for me (except for the chorus effect). The tracker is more basic and less intuitive than FamiTracker, but it gets the job done. I don't know how I would go about exporting that data to be used for SNES development.<br /><br />FOR GAME BOY​<br />I have only been able to find a few ways to create Game Boy (and Game Boy Color) music: mGB (a hardware mod that allows for MIDI signals from a MIDI controller, effectively making the Game Boy a basic polyphonic synthesizer), Little Sound DJ (a music tracker cartridge for the Game Boy itself), and Deflemask (a tracker that emulates the Game Boy audio chip as well as the YM2612, YM2515, 2A03, MOS 8651 and 8580, and more). To my knowledge, only Deflemask allows me to create Game Boy music from the computer instead of from the Game Boy itself and in such a streamlined way. However, I don't know if it is able to export the tracker data to be used in Game Boy dev. It is able to export VGM format.<br /><br />FOR SEGA GENESIS / MEGA DRIVE​<br />The same for the Game Boy goes for the Genesis. I am aware of VGM Maker, a Genesis music tracker, but it is nowhere as clean looking and as streamlined as Deflemask. It is also able to export VGM format. I'll keep the rest of this topic in the Sega dev forum.<br /><br />This forum post was also posted to <a href="http://assemblergames.com/l/threads/implementing-original-music-sound-effects-into-nintendo-consoles.59810/" class="postlink">AssemblerGames.com</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Fri Jan 29, 2016 6:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AlexE wrote:</div><div class="quotecontent">FOR SEGA GENESIS / MEGA DRIVE​<br />The same for the Game Boy goes for the Genesis. I am aware of VGM Maker, a Genesis music tracker, but it is nowhere as clean looking and as streamlined as Deflemask. It is also able to export VGM format. I'll keep the rest of this topic in the Sega dev forum.</div><br />I never figured out how to make Deflemask work, to be honest (it keeps refusing to let me touch the track or load files from outside its directory?).<br /><br />Honestly I should make a tracker for Echo (which then would be guaranteed to be usable for games since Echo is a sound engine, not a player), but emulating the YM2612 is hard, and the existing emulators are either bad (I know composers will consistently run against problems with the Gens core) or have licensing issues (in particular, anything based off the MAME core has a &quot;non-commercial use&quot; limitation, which hits hard with homebrew in case something ever ends up in a cartridge).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 29, 2016 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">anything based off the MAME core has a &quot;non-commercial use&quot; limitation</div><br />MAME has been moving toward a free software license, and <a href="http://mamedev.emulab.it/haze/2016/01/27/mame-0-170-released/" class="postlink">only a handful of non-free drivers remain</a>. I wonder if there's a way to exclude them at compile time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Jan 30, 2016 3:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AlexE wrote:</div><div class="quotecontent">After looking into it, FamiTone2 by Shiru allows for converting FamiTracker (v 0.3.6 and higher) music —<br />including DPCM — into NESASM, CA65, and ASM6 formats.</div><br />Note that FamiTone supports only a limited set of features from FamiTracker, so it's a good idea to familiarize yourself with the limitations, and to test early and often with the music actually running in FamiTone.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Gradualore's GGSound was used in Super Bat Puncher (which is an outstanding game with outstanding music)</div><br />Are you sure about that? I always thought miau rolled his own playback routines for SBP, but I could be mistaken.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jan 30, 2016 7:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />NES restriction questions are sort of impossible to answer. For graphics. For code size. For scanline effects. There are so many configurations because of extensions being allowed in the cart. And that affects a lot more than just music.<br /><br />NES has 2KB of RAM. Cartridges can give 8 more kilobytes. or 32 more kilobytes. Or whatever. But even if that's true, that doesn't necessarily mean any extra is allocated to the music. As you already know, there's different music extensions. You can't use them on a project that doesn't have them, obviously.<br /><br />How much space is too much for the music is similarly impossible to answer generally. How to give data to a developer... You'll have to ask all of these questions every time you approach a developer. (If they approach you, they'll likely tell you the limitations.) I mean... I know it's no fun, but it really is different every time. Especially with hacks of existing games. Homebrew developers might use existing libraries, and then they might say, &quot;I use famitone2&quot; and you read what it can do. And then you don't do what it can't do. They might say, &quot;I need you to type up every single note/rest in a file in this format.&quot; And then you have to do it if that's how their game works and you want to make music for it. Or write your own program to make that easier for yourself. Or make them write a program to make it easier for you.<br /><br />Different engines/converters might make the same song wildly different filesizes, so there's no answer to how big the song could/should be. <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">At any rate, I'm wondering how much of the RAM on the cartridge can be used for audio and read by NES and Famicom hardware? How much can be used for an NES emulator?</div><br />All of the RAM on the cartridge could be used for audio. It depends on the design of the individual game. An NES emulator could give you an effectively limitless amount of RAM, but you could do something similar on the console itself by building your own cartridge. But if all you're doing is composing, you don't have to worry about that at all. If you don't use the things the engine doesn't support, and the engine is written well, it doesn't matter what you do you'll be fine on RAM. A bigger worry is actually CPU speed. If you make a really CPU intensive song, you could cause the game to start playing slower. And even what will make a song CPU intensive varies engine to engine.<br /><br />I know you're looking for some general metric, but there really isn't one. Actually there's one: You should never even expect to get to use any kind of expansion audio.<br /><br />Still, learning to compose music under Famitone2 is probably your best bet for practice. Its rules are in its readme. If there's some part of them that's tough to understand, that's an easier thing to help with than a general what can I do.<br /><br />Edit: These answers are mostly true for all the platforms you're looking at. There's X that the console can do. Y is the subset of that that the music engine for game Z can do. You need to know Y before writing music for Z. X practically doesn't matter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jan 30, 2016 8:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A reply from the point of view of a music engine developer:<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">They might say, &quot;I need you to type up every single note/rest in a file in this format.&quot; And then you have to do it if that's how their game works and you want to make music for it. Or write your own program to make that easier for yourself. Or make them write a program to make it easier for you.</div><br />By &quot;make them write a program&quot;, are you trying to imply that developers of music engines that operate by translating a textual input format ought to make and include tools for converting music sequences (&quot;every single note/rest&quot;) from formats used by more popular GUI composing tools (IT, S3M, XM, MOD, FTM, MIDI)?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Different engines/converters might make the same song wildly different filesizes, so there's no answer to how big the song could/should be.</div><br />How critical is it that a music engine developer include a guide to estimating file sizes in the music engine's manual? And how critical is it that a music engine include configuration options to enable or disable particular engine features at assembly time in order to push the engine's size even smaller?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An NES emulator could give you an effectively limitless amount of RAM, but you could do something similar on the console itself by building your own cartridge.</div><br />For example, the Sunsoft FME-7 has been shown to allow selection among up to sixteen 8192-byte banks of WRAM at $6000, for a total of 130 KiB (128 KiB on the cartridge and 2 KiB in the console).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There's X that the console can do. Y is the subset of that that the music engine for game Z can do. You need to know Y before writing music for Z. X practically doesn't matter.</div><br />X matters to the extent that Z's developer feels a need to add often-requested features to Y in order for his hard work not to be ignored.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Sat Jan 30, 2016 9:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey AlexE,<br /><br />We have a &quot;Music&quot; subforum here too.  Some regularly usually check that one first who are more musically inclined and attented.<br /><br />Perhaps this discussion should be moved over there as well.<br /><br />~~~~~~~~~~~~~~<br /><br />Regarding the additional SPC700 effects for SNES there is an IT converter program developed by Augustus Blackheart and KungFuFurby located:  <!-- m --><a class="postlink" href="http://www.morganleahrecords.com/augustus/blackheart/downloads.html">http://www.morganleahrecords.com/august ... loads.html</a><!-- m -->  Source code is available.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Jan 30, 2016 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By &quot;make them write a program&quot;, are you trying to imply that developers of music engines that operate by translating a textual input format ought to make and include tools for converting music sequences (&quot;every single note/rest&quot;) from formats used by more popular GUI composing tools (IT, S3M, XM, MOD, FTM, MIDI)?</div><br />Where are you getting ought to? Three choices were listed if a hypothetical musician pairs with the developer of a text based format and they both want to work with each other. If the composer is fine with typing the text, that's the first choice. If they're not and can program, making their own program is the second choice. If they're not fine with typing text and can't program, having the developer who wants the music make a program to help is the third. Who else <em>would</em> do it given that situation? If they didn't, they'd have to find a different composer, but even that doesn't mean they should write conversion tools.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How critical is it that a music engine developer include a guide to estimating file sizes in the music engine's manual? And how critical is it that a music engine include configuration options to enable or disable particular engine features at assembly time in order to push the engine's size even smaller?</div><br />File size estimation is not critical at all. I'd say it's unimportant. As far as disabling engine features, it's probably also not that critical. But as everything, it depends on how large the base engine is. Or maybe not even then, if it doesn't need to always be swapped in. Your engine can be 5KB and it'd be fine. NROM people would be out of luck, but there's a million edge cases to everything. I wouldn't care if an engine was 8KB, so long as it tried to be as fast as possible but that specific sentiment may be uncommon.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">X matters to the extent that Z's developer feels a need to add often-requested features to Y in order for his hard work not to be ignored.</div><br />That's only true if Z's developer also developed Y. (I realize that is you, yes.) I personally wouldn't be adding features to an engine I didn't write for a musician. I'd probably be willing to write stuff to make getting it in the actual format easier if I really liked the music, but that doesn't close the gap from Y to X. There's usually some meet halfway point. It's the way of things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jan 30, 2016 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Where are you getting ought to?</div><br />Because I want my engine to be adopted, while I'm told composers are willing only to work in a tool they already know. A couple months ago, I was almost offered a job as composer for an NES game project, but I was turned down because I wanted to use my engine, and it wasn't quite ready for other composers to use in case other composers needed to make changes to a song. The producer went with FamiTone instead because other composers would be more comfortable in FamiTracker.<br /><br /><a href="http://pastebin.com/eDmNQBa1" class="postlink">HertzDevil's analysis</a> of the 275 NSFs in the original and cover sections of Famicompo Pico '15 bears this out. Over 80 percent of all entries were composed in FamiTracker (71 0CC-FT; 65 FT 0.5.0; 67 FT 0.4.5/0.4.6; 29 FT 0.4.4 or earlier; 232 total). Only 22 used P*MCK, and 10 were converted from IT/S3M.<br /><br />My engine uses a similar &quot;what you say is what you mean&quot; (<a href="https://en.wikipedia.org/wiki/WYSIWYM" class="postlink">WYSIWYM</a>) approach to PPMCK. But I'm told PPMCK isn't popular here in the west, unlike in Japan where the popularity of MSX BASIC exposed people to MML. The other text-based format is LilyPond, which I'm guessing is popular in the classical scene, not so much in the chiptune scene. So I'm guessing that many western chiptune composers are not familiar with text-based WYSIWYM formats, nor can they program. They're more acquainted with the &quot;what you see is what you get&quot; (<a href="https://en.wikipedia.org/wiki/WYSIWYG" class="postlink">WYSIWYG</a>) approach, which WYSIWYM fans prefer to deride as &quot;what you see is <em>all</em> you get&quot;. It's like the difference between, say, Microsoft Word and LaTeX. Nor is an expert at 6502 assembly language programming necessarily an expert at PC tools programming.<br /><br />All this means I will likely need to either A. make a program to help convert formats commonly used by western chiptune composers; B. acquaint western chiptune composers with typing in text in some manner, such as by hosting a compo; or C. accept that my work will be ignored.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">Three choices were listed if a hypothetical musician pairs with the developer of a text based format and they both want to work with each other.</div><br />It's about willingness of a game's producer to pair a musician with a developer. Some programmers want to maximize the pool of composer labor in case they want to sign other composers onto a project in the future. And one way to maximize this pool is by choosing an engine that has the easiest path from the tool that is most popular among composers.<br /><br />Or am I making too big a deal about it, and are composers willing to learn new tools?<br /><br />(And is this a thread hijack?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Jan 30, 2016 10:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Or am I making too big a deal about it, and are composers willing to learn new tools?<br /></div><br /><br />It's sort of like asking a guitarist to write their next song on a xylophone or something, maybe they could and maybe it's mind-expanding, but it's not the process they're used to.  That's quite a different thing from asking them to take a song they wrote on guitar, and arrange it for a xylophone.  I'm sure what you would find is composers want to make their song in Famitracker, then they'll be wondering why they should bother to remake the same song with a different interface when it going to come out sounding the same.  If you can automate that boring part, and encourage users to then further enhance their songs with special features of your engine, then I think it would stand a chance of getting the usage it deserves.  Otherwise, the only good option is to let composers use whatever tools they want, and have someone else convert the song to whatever engine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlexE</b> [ Sat Jan 30, 2016 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">Note that FamiTone supports only a limited set of features from FamiTracker, so it's a good idea to familiarize yourself with the limitations, and to test early and often with the music actually running in FamiTone.<br /></div><br />I actually did look into that and I wrote out each limitation in FamiTracker in the instrument names. I also looked into RushJet's new DPCM tool creatively called RJDMC. It seems pretty neat from what I've seen.<br /><div class="attachtitle">Attachment:</div><div class="attachcontent">
			<span class="genmed">
				<img src="./images/upload_icons/mid.gif" alt="" /> 
				<a href="./download/file.php?id=5028">FamiTone2 Template (with limitation notes).ftm</a> [7.65 KiB]
			</span><br />
			<span class="gensmall">Downloaded 96 times</span>
		

		<br />
	</div><br />I'll get to noting the GGSound limitations another day since it's 1 AM currently and I feel like doing that thing that normal people do at 1 AM. What was it called again? Sleep? Never heard of it.<br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">How much space is too much for the music is similarly impossible to answer generally.</div><br />So that means that I could essentially write a 20-minute prog rock magnum opus for the 2A03 while adhering technically to the limitations of FamiTone2, GGSound, or whatever format the dev requires for his game and I'll have no problems? Or are you saying that whatever space is left from the more important aspects of the game like graphics and gameplay can be used to fill in with music? If the game is being created with the purpose of being played strictly on emulators, then that would mean I have free reign over the length and complexity — ultimately, the file size of whatever format the dev requires — of each song and SFX while adhering to each format's limitations (FamiTone2: no duty cycle sequence but DPCM supported; GGSound: duty cycle sequence but no DPCM supported; manually: no inherent limitations but complicated). If the game is being developed to be played on original hardware, the music would have to adhere to some size restrictions that would be put in place by the developer himself <em>unless</em> the cartridge uses additional, custom hardware (called mappers(?)) to accommodate for more RAM. <span style="font-size: 85%; line-height: normal">(I've heard of the MMC5 being used in <em>The Legend of Zelda: Adventure of Link</em>, a freakin' rad ROM hack of <em>The Legend of Zelda</em>. I tried using it on my Everdrive N8, but it would load because the cartridge hardware didn't have the right &quot;mappers&quot;.)</span> I wonder if this additional hardware is easy/cheap to manufacture for homebrews?<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you make a really CPU intensive song, you could cause the game to start playing slower. And even what will make a song CPU intensive varies engine to engine.</div><br />I assume that's where the &quot;speed&quot; of FamiTone, GGSound, etc. comes into play, right? I've heard some slick, complex NES jams (particularly music from Tim Follin, who is my new favorite video game composer) in games like <em><a href="https://youtu.be/DuhNpgaQW04?t=6m58s" class="postlink">Silver Surfer</a></em>.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I know you're looking for some general metric, but there really isn't one. Actually there's one: You should never even expect to get to use any kind of expansion audio.</div><br />:'( That's a shame. I absolutely adore VRC6 and FDS expansions. Is this not even possible (or realistic) on emulation-only homebrew dev?<br /><br /><div class="quotetitle">B00daW wrote:</div><div class="quotecontent">Regarding the additional SPC700 effects for SNES there is an IT converter program developed by Augustus Blackheart and KungFuFurby located: <!-- m --><a class="postlink" href="http://www.morganleahrecords.com/august">http://www.morganleahrecords.com/august</a><!-- m --> ... loads.html Source code is available.</div><br /><br />Thanks, man! I'll check that out.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">My engine uses a similar &quot;what you say is what you mean&quot; (WYSIWYM) approach to PPMCK. But I'm told PPMCK isn't popular here in the west, unlike in Japan where the popularity of MSX BASIC exposed people to MML. The other text-based format is LilyPond, which I'm guessing is popular in the classical scene, not so much in the chiptune scene. So I'm guessing that many western chiptune composers are not familiar with text-based WYSIWYM formats, nor can they program. They're more acquainted with the &quot;what you see is what you get&quot; (WYSIWYG) approach, which WYSIWYM fans prefer to deride as &quot;what you see is all you get&quot;. It's like the difference between, say, Microsoft Word and LaTeX. Nor is an expert at 6502 assembly language programming necessarily an expert at PC tools programming.<br /></div><br />I haven't heard of PPMCK. I'll check into that as well.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Otherwise, the only good option is to let composers use whatever tools they want, and have someone else convert the song to whatever engine.</div><br />That's what I'm hoping I can get out of this whole situation is a more simple method of converting from FamiTracker to usable code for the programmer.<em> It seems that it is more complicated than that from what I can tell.</em> <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Jan 31, 2016 12:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are also my improvements to ppMCK (tail-call optimizations, as well as * and ? commands), which is also possible in case you want to use MML. Also note that ppMCK is really meant for making .NSF rather than for games, although the output could be adapted for such use, I suppose.<br /><br />And about MAME, I would like to be able all program can be made properly FOSS, although I don't care about the license of the game manifests; I believe external manifests would be a better idea anyways.<br /><br />If a game has expansion audio and is used on NES, the expansion audio is simply bypassed (it won't play). You can have option in the game to configure such thing if you want to do so.<br /><br />How much space can be used in the game depend what mapper you are using, as well as on the game, and ROM size, and other stuff. However, there can be different storage formats depending on the playback engine, so compression may also be possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AlexE</b> [ Sun Jan 31, 2016 12:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">There are also my improvements to ppMCK (tail-call optimizations, as well as * and ? commands), which is also possible in case you want to use MML. Also note that ppMCK is really meant for making .NSF rather than for games, although the output could be adapted for such use, I suppose.</div><br />If it's able to incorporate FamiTracker effects like vibrato, arpeggio, tempo, etc. to NSF then to game dev, that would be great.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If a game has expansion audio and is used on NES, the expansion audio is simply bypassed (it won't play). You can have option in the game to configure such thing if you want to do so.<br /></div><br />That's good to hear. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How much space can be used in the game depend what mapper you are using, as well as on the game, and ROM size, and other stuff. However, there can be different storage formats depending on the playback engine, so compression may also be possible.</div><br />I heard that NES data could be compressed from a Reddit post I made asking why there hasn't been a decent ROM hack of <em>Metal Gear</em> yet. There wasn't a lot of info spilt on NES compression, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Jan 31, 2016 12:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AlexE wrote:</div><div class="quotecontent">If it's able to incorporate FamiTracker effects like vibrato, arpeggio, tempo, etc. to NSF then to game dev, that would be great.</div>With ppMCK it is possible to do vibrato, arpeggio, and tempo.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I heard that NES data could be compressed from a Reddit post I made asking why there hasn't been a decent ROM hack of <em>Metal Gear</em> yet. There wasn't a lot of info spilt on NES compression, though.</div>I don't know much about the compression used for music (although look at Pently for example), although there is more stuff about compression of other stuff such as map data and text and so on (if they are compressed, it also makes more room for the music; however note also CHR ROM is separate from PRG ROM and many games will have both; CHR ROM is normally used for graphics, although some games may use it for other stuff too (such as compressed map data)).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 31, 2016 8:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Implementing Original Music for Nintendo &amp; Sega Game Dev</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AlexE wrote:</div><div class="quotecontent">So that means that I could essentially write a 20-minute prog rock magnum opus for the 2A03 while adhering technically to the limitations of FamiTone2, GGSound, or whatever format the dev requires for his game and I'll have no problems?</div><br />Yes, if there's enough space. But in practice, a 20-minute composition would probably need to be synchronized with the game action, and that more than likely would mean auto-scrolling and no &quot;go back to save point when you die&quot;: either respawn in place or restart the whole thing. Unless, that is, the 20-minute composition itself has restart points.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or are you saying that whatever space is left from the more important aspects of the game like graphics and gameplay can be used to fill in with music?</div><br />Also yes. The size of PRG ROM on all but a single-digit number of NES games is a power of two.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">(I've heard of the MMC5 being used in <em>The Legend of Zelda: Adventure of Link</em>, a freakin' rad ROM hack of <em>The Legend of Zelda</em>. I tried using it on my Everdrive N8, but it would load because the cartridge hardware didn't have the right &quot;mappers&quot;.)</div><br />If you mean <em>Zelda II: The Adventure of Link</em>, that's nowhere near MMC5. It's a garden-variety MMC1 according to NesCartDB.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I wonder if this additional hardware is easy/cheap to manufacture for homebrews?</div><br />Basic mappers allowing more RAM are easy to manufacture: in theory, it's just a 6264 SRAM and a 74HC20 to decode it (meaning to enable it). If you're implementing some common ASIC mapper (such as MMC1) on a CPLD, the equivalent of a 74HC20 can likely fit into unused space on said CPLD. It gets more expensive if you want the data in RAM to persist across a power cycle, as in games with battery save, because you have to add a 3 volt lithium watch battery, a battery clip, and a circuit to control the RAM's voltage during power cycles.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I know you're looking for some general metric, but there really isn't one. Actually there's one: You should never even expect to get to use any kind of expansion audio.</div><br />:'( That's a shame. I absolutely adore VRC6 and FDS expansions. Is this not even possible (or realistic) on emulation-only homebrew dev?</div><br />On emulation-only homebrew dev, you can in theory just use MP3 music, which simulates an MP3 player being soldered to a Famicom PCB. Heck, on emulation-only homebrew dev, you can make games at PS2 or higher graphical complexity, as Java, C#, and asm.js programs are &quot;emulated&quot; in a way.<br /><br />Unlike the Famicom cassette connector, the NES Game Pak connector lacks the pins used for audio; instead, those are routed to the expansion connector at the bottom (for traditional front-loading NES consoles) or nowhere (for the top-loading NES-101). If you're intending to sell copies of the game on cartridge, you'll also have to sell a jumper pack that plugs into the expansion connector in order to make the sound audible. Such a jumper pack exists; it is one of the functions of chykn's ENIO board.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">My engine uses a similar &quot;what you say is what you mean&quot; (WYSIWYM) approach to PPMCK. But I'm told PPMCK isn't popular here in the west, unlike in Japan ... [It and] LilyPond [use] text-based WYSIWYM formats</div><br />I haven't heard of PPMCK. I'll check into that as well.</div><br />I'm not certain that PPMCK's engine is really optimized for the ROM size or RAM size requirement of coexisting with graphics and game logic code, as zzo38 pointed out. But once you're proficient with the MML input format of PPMCK, you'll have a big head start on learning to use my music engine, called <a href="http://forums.nesdev.com/viewtopic.php?p=162548#p162548" class="postlink">Pently</a>. I made Pently because small size was important to me in NROM-128 projects.<br /><br /><div class="quotetitle">AlexE wrote:</div><div class="quotecontent">FamiTracker effects like vibrato, arpeggio, tempo, etc.</div><br />Pently supports both arpeggio envelopes and arpeggio effects. It supports tempo changes down to fractional-BPM precision. It supports sound effects that interrupt music in an intelligent manner. The two things it doesn't support are vibrato and portamento, and that's probably a result of my training on discrete-pitch instruments (piano and trumpet).<br /><br /><div class="quotetitle">AlexE wrote:</div><div class="quotecontent">I heard that NES data could be compressed from a Reddit post I made asking why there hasn't been a decent ROM hack of Metal Gear yet. There wasn't a lot of info spilt on NES compression, though.</div><br />It depends on what kind of compression. Some are better suited to the (relatively) small RAM of the NES than others. Methods that involve looking small things up in a static table to get big things, such as byte pair encoding or Huffman coding, work well on NES. So do run-length encoding (RLE), which assumes that the each byte is likely to be the same as the previous byte, and Markov RLE, which uses a table to predict the most common byte that follows each byte. I've used RLE and Markov RLE to compress graphical tile data and map data, and data formats built around Huffman coding or byte pair encoding work well for text. Still other forms of &quot;compression&quot; could be described as clever ways of structuring data to avoid <a href="https://en.wikipedia.org/wiki/Fragmentation_%28computing%29#Internal_fragmentation" class="postlink">internal fragmentation</a>, such as a music engine whose sequence data combines 5-bit pitch and 3-bit duration of each note into a single byte.<br /><br />But one popular family of general-purpose compression methods, called LZ77, is based on references to previous decompressed data in a circular buffer. That's not so easy on NES, which has only 2048 bytes of RAM randomly accessible to the CPU unless extra RAM is on the cartridge. LZ77 is easier on the Master System, which has 8K of main RAM; the Game Boy, which also has 8K of main RAM as well as random access to video RAM while rendering is turned off; and on Genesis and Super NES, which have 64K or more of main RAM.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>