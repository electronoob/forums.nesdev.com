<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - asm6 Errors That Don't Occur On NESASM</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">asm6 Errors That Don't Occur On NESASM</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6288">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6288</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nathanpc</b> [ Sun Apr 11, 2010 5:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>asm6 Errors That Don't Occur On NESASM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello,
<br /> As many people suggested me to change from NESASM to asm6, but now I'm getting errors. My code is like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.inesprg 1&nbsp; &nbsp;; 1 bank of code<br />&nbsp; &nbsp;.ineschr 1&nbsp; &nbsp;; 1 bank of spr/bkg data<br />&nbsp; &nbsp;.inesmir 1&nbsp; &nbsp;; something always 1<br />&nbsp; &nbsp;.inesmap 0&nbsp; &nbsp;; we use mapper 0<br /><br />&nbsp; &nbsp;.bank 0&nbsp; &nbsp;; bank 0 - our place for code.<br />&nbsp; &nbsp;.org $0000<br />addrLO = $10 <br />addrHI = $11<br />Sprite1_X&nbsp; &nbsp;.db 50&nbsp; &nbsp; &nbsp; &nbsp;; a X position for our sprite, start at 20<br />Sprite1_Y&nbsp; &nbsp;.db 20&nbsp; &nbsp; &nbsp; &nbsp;; a Y position for our sprite, start at 20<br />;Sprite2_X&nbsp; &nbsp;.db 50&nbsp; &nbsp; &nbsp; &nbsp;; a X position for our sprite, start at 20<br />;Sprite2_Y&nbsp; &nbsp;.db 20&nbsp; &nbsp; &nbsp; &nbsp;; a Y position for our sprite, start at 20<br />&nbsp; &nbsp;.org $8000&nbsp; ; code starts at $8000<br />&nbsp; &nbsp;<br />Start:&nbsp; <br />&nbsp; &nbsp;lda #%10001000&nbsp; ; do the setup of PPU<br />&nbsp; &nbsp;sta $2000&nbsp; &nbsp; &nbsp; &nbsp;; that we<br /><br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp; ; clear X<br /><br />&nbsp; &nbsp;;set the destination address for sprite palettes &#40;$3F10&#41; <br />&nbsp; &nbsp;lda #$3F <br />&nbsp; &nbsp;sta $2006 <br />&nbsp; &nbsp;lda #$10 <br />&nbsp; &nbsp;sta $2006 <br /><br />&nbsp; &nbsp;;copy 16 colors <br />&nbsp; &nbsp;ldx #$00 <br />LoadSpritePalette: <br />&nbsp; &nbsp;&nbsp; &nbsp;lda tilepal, x <br />&nbsp; &nbsp;&nbsp; &nbsp;sta $2007 <br />&nbsp; &nbsp;&nbsp; &nbsp;inx <br />&nbsp; &nbsp;&nbsp; &nbsp;cpx #16 <br />&nbsp; &nbsp;&nbsp; &nbsp;bne LoadSpritePalette <br /><br />&nbsp; &nbsp;&nbsp; &nbsp;;set the destination address for background palettes &#40;$3F00&#41; <br />&nbsp; &nbsp;&nbsp; &nbsp;lda #$3F <br />&nbsp; &nbsp;&nbsp; &nbsp;sta $2006 <br />&nbsp; &nbsp;&nbsp; &nbsp;lda #$00 <br />&nbsp; &nbsp;&nbsp; &nbsp;sta $2006 <br /><br />&nbsp; &nbsp;&nbsp; &nbsp;;copy 16 colors <br />&nbsp; &nbsp;&nbsp; &nbsp;ldx #$00 <br />LoadBackgroundPalette: <br />&nbsp; &nbsp; &nbsp;lda bkgpal, x <br />&nbsp; &nbsp; &nbsp;sta $2007 <br />&nbsp; &nbsp; &nbsp;inx <br />&nbsp; &nbsp; &nbsp;cpx #16 <br />&nbsp; &nbsp; &nbsp;bne LoadBackgroundPalette<br /><br />Map_Load: <br />&nbsp; &nbsp; &nbsp;lda $2002&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; read PPU status to reset the high/low latch <br />&nbsp; &nbsp; &nbsp;lda #$20 <br />&nbsp; &nbsp; &nbsp;sta $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the high byte of $2000 address <br />&nbsp; &nbsp; &nbsp;lda #$00 <br />&nbsp; &nbsp; &nbsp;sta $2006&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write the low byte of $2000 address <br />&nbsp; &nbsp; &nbsp;lda #low&#40;ourMap&#41; <br />&nbsp; &nbsp; &nbsp;sta addrLO <br />&nbsp; &nbsp; &nbsp;lda #high&#40;ourMap&#41;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; start out at 0 <br />&nbsp; &nbsp; &nbsp;sta addrHI <br /><br />&nbsp; &nbsp; &nbsp;ldx #4 <br />&nbsp; &nbsp; &nbsp;ldy #0 <br /><br />Map_Load_loop: <br />&nbsp; &nbsp; &nbsp;LDA &#91;addrLO&#93;, y&nbsp; &nbsp; &nbsp;; load data from address &#40;background + the value in x&#41; <br />&nbsp; &nbsp; &nbsp;STA $2007&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; write to PPU <br />&nbsp; &nbsp; &nbsp;INy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = X + 1 <br />&nbsp; &nbsp; &nbsp;BNE Map_Load_loop&nbsp; ; Branch to LoadBackgroundLoop if compare was Not Equal to <br /><br />zero <br />&nbsp; &nbsp; &nbsp;inc addrHI <br />&nbsp; &nbsp; &nbsp;dex <br />&nbsp; &nbsp; &nbsp;bne Map_Load_loop <br /><br />waitblank1:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;lda $2002&nbsp; ; these 3 lines wait for VBlank, this loop will actually miss <br /><br />VBlank<br />&nbsp; &nbsp;bpl waitblank1 ; alot, in a later Day, I'll give a better way<br />&nbsp; &nbsp;txa <br />clrmem: <br />&nbsp; &nbsp;sta $000,x <br />&nbsp; &nbsp;sta $100,x <br />&nbsp; &nbsp;sta $200,x <br />&nbsp; &nbsp;sta $300,x <br />&nbsp; &nbsp;sta $400,x <br />&nbsp; &nbsp;sta $500,x <br />&nbsp; &nbsp;sta $600,x <br />&nbsp; &nbsp;sta $700,x&nbsp; ; Remove this if you're storing reset-persistent data <br />&nbsp; &nbsp;inx <br />&nbsp; &nbsp;bne clrmem<br />&nbsp; &nbsp;<br />waitblank2:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;lda $2002&nbsp; ; these 3 lines wait for VBlank, this loop will actually miss <br /><br />VBlank<br />&nbsp; &nbsp;bpl waitblank2 ; alot, in a later Day, I'll give a better way<br />&nbsp; &nbsp;lda #%00011110<br />&nbsp; &nbsp;sta $2001<br />&nbsp; &nbsp;<br />loop:<br />&nbsp; &nbsp;jmp loop<br />&nbsp; &nbsp;<br />infinite:&nbsp; ; a label to start our infinite loop<br />nmi:<br /><br />&nbsp; &nbsp;; Load Sprite1<br />&nbsp; &nbsp;lda Sprite1_Y<br />&nbsp; &nbsp;sta $0300<br />&nbsp; &nbsp;lda #$11<br />&nbsp; &nbsp;sta $0301<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta $0302<br />&nbsp; &nbsp;lda Sprite1_X<br />&nbsp; &nbsp;sta $0303<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; Load Sprite2<br />&nbsp; &nbsp;;lda Sprite2_Y<br />&nbsp; &nbsp;;sta $0304<br />&nbsp; &nbsp;;lda #$12<br />&nbsp; &nbsp;;sta $0305<br />&nbsp; &nbsp;;lda #$00<br />&nbsp; &nbsp;;sta $0306<br />&nbsp; &nbsp;;lda Sprite2_X<br />&nbsp; &nbsp;;sta $0307<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp;sta $4016&nbsp; ; lines<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;; setup/strobe the <br />&nbsp; &nbsp;sta $4016&nbsp; ; keypad.<br /><br />&nbsp; &nbsp;lda $4016&nbsp; ; load Abutton Status ; note that whatever we ain't interested<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Bbutton Status ; in we just load so it'll go to the next <br /><br />one.<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Select button status<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Start button status<br />&nbsp; &nbsp;lda $4016&nbsp; ; load UP button status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne UPKEYdown&nbsp; ; for some reason &#40;not gonna reveal yet&#41;, need to use NotEquals<br />&nbsp; &nbsp;;with ANDs. So it'll jump &#40;branch&#41; if key was down.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda $4016&nbsp; ; load DOWN button status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne DOWNKEYdown<br /><br />&nbsp; &nbsp;lda $4016&nbsp; ; load LEFT button status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne LEFTKEYdown<br /><br />&nbsp; &nbsp;lda $4016&nbsp; ; load RIGHT button status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne RIGHTKEYdown<br />&nbsp; &nbsp;jmp NOTHINGdown&nbsp; ; if nothing was down, we just jump &#40;no check for conditions&#41;<br />&nbsp; &nbsp;; down past the rest of everything.<br /><br />UPKEYdown:<br />&nbsp; &nbsp;lda Sprite1_Y ; load A with Y position<br />&nbsp; &nbsp;sbc #1&nbsp; ; subtract 1 from A. Only can do math on A register. SBC &#40;Subtract <br /><br />with Borrow&#41;<br />&nbsp; &nbsp;sta Sprite1_Y ; store back to memory<br />&nbsp; &nbsp;;lda Sprite2_Y ; load A with Y position<br />&nbsp; &nbsp;;sbc #1&nbsp; ; subtract 1 from A. Only can do math on A register. SBC &#40;Subtract <br /><br />with Borrow&#41;<br />&nbsp; &nbsp;;sta Sprite2_Y ; store back to memory<br />&nbsp; &nbsp;jmp NOTHINGdown&nbsp; ; jump over the rest of the handling code.<br /><br />DOWNKEYdown:<br />&nbsp; &nbsp;lda Sprite1_Y <br />&nbsp; &nbsp;adc #1&nbsp; ; add 1 to A. ADC &#40;Add with Carry&#41;&#40;&#40;to A register&#41;&#41;<br />&nbsp; &nbsp;sta Sprite1_Y<br />&nbsp; &nbsp;jmp NOTHINGdown ; jump over the rest of handling code.<br /><br />LEFTKEYdown:<br />&nbsp; &nbsp;lda Sprite1_X<br />&nbsp; &nbsp;sbc #1&nbsp; <br />&nbsp; &nbsp;sta Sprite1_X<br />&nbsp; &nbsp;jmp NOTHINGdown <br />;the left and right handling code does the same as UP and Down except.. well.. with<br />; left and right. :&#41;<br /><br />RIGHTKEYdown:<br />&nbsp; &nbsp;lda Sprite1_X<br />&nbsp; &nbsp;adc #1<br />&nbsp; &nbsp;sta Sprite1_X<br />&nbsp; &nbsp;; don't need to jump to NOTHINGdown, it's right below. Saved several bytes of<br />&nbsp; &nbsp;; PRG-Bank space! :&#41;<br />&nbsp; &nbsp;<br />NOTHINGdown:<br />&nbsp; &nbsp;lda #$03<br />&nbsp; &nbsp;sta $4014<br />&nbsp; &nbsp;rti<br /><br />tilepal:<br />&nbsp; &nbsp;.incbin &quot;our.pal&quot; ; include and label our sprite pallete<br />&nbsp; &nbsp;<br />bkgpal:<br />&nbsp; &nbsp;.incbin &quot;bkg.pal&quot; ; include and label our background pallete<br />&nbsp; &nbsp;<br />ourMap:<br />&nbsp; &nbsp;.incbin &quot;our.map&quot; ; assuming our.map is the binary map file.<br />&nbsp; &nbsp;.bank 1&nbsp; &nbsp;; following goes in bank 1<br />&nbsp; &nbsp;.org $FFFA&nbsp; ; start at $FFFA<br />&nbsp; &nbsp;.dw nmi&nbsp; &nbsp; ; dw stands for Define Word and we give 0 as address for NMI <br /><br />routine<br />&nbsp; &nbsp;.dw Start ; give address of start of our code for execution on reset of NES.<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp;; give 0 for address of VBlank interrupt handler, we tell PPU not to<br />&nbsp; &nbsp;; make an interrupt for VBlank.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;.bank 2&nbsp; &nbsp;; switch to bank 2<br />&nbsp; &nbsp;.org $0000&nbsp; ; start at $0000<br />&nbsp; &nbsp;.incbin &quot;our.bkg&quot;&nbsp; ; background data<br />&nbsp; &nbsp;.incbin &quot;our.spr&quot;&nbsp; ; our sprite pic data</div><br /><br />But when I try to compile it I got this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;~/NES&#93;$ asm6 our.asm<br /><br />pass 1..<br />our.asm&#40;1&#41;: Illegal instruction.<br />our.asm&#40;2&#41;: Illegal instruction.<br />our.asm&#40;3&#41;: Illegal instruction.<br />our.asm&#40;4&#41;: Illegal instruction.<br />our.asm&#40;6&#41;: Illegal instruction.<br />our.asm&#40;58&#41;: Illegal instruction.<br />our.asm&#40;60&#41;: Illegal instruction.<br />our.asm&#40;194&#41;: Illegal instruction.<br />our.asm&#40;201&#41;: Illegal instruction.<br /><br />&#91;~/NES&#93;$ </div>
<br />What can I do?
<br />
<br />Best Regards,
<br /> Nathan Paulino Campos

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Apr 11, 2010 6:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're not using an NES-specific assembler, you'll need to make the iNES header and set memory areas (your .bank) a different way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nathanpc</b> [ Sun Apr 11, 2010 6:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Inside which bank(or place) I need to put the iNES headers?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Apr 11, 2010 8:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Usually people set .org $7FF0 and then use .db statements to represent each of the 16 bytes of the iNES header.
<br />
<br />So you'd probably want to do this after the .org $0000 / .db section, but before the .org $8000 section.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Apr 11, 2010 8:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You hit the biggest issue with assembly : There is no standard way to give commands to the assembler. The only "semi-standard" are directive like .db, .include, .incbin but even then not all assemblers have them.
<br />
<br />You'll have to change a lot of things in your source so that ASM6 takes it, and whenever you decide to change again to yet another assembler, you'll have to do a lot of changes again. This is really terrible so you'd better be sure of you choice when you pick an assembler and be sure it has all features you 'd like it to do, and be prepared for a few boring weekends to change syntax of your code whenever you decide to change which assembler you use.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Apr 11, 2010 9:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Write a file that you include at the top of all your programs, which sets up the assembler-specific things. This of course fails for assemblers like wla that force you to do weird things all throughout your code. But for ones like ca65, nesasm, asm6, etc., it should work well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Apr 11, 2010 9:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nope, all assemblers handles labels, local labels and unlabeled labels differently. Without counting that many "forces you to do weird things in your code".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sun Apr 11, 2010 11:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Usually an assembler is intended for certain architectures or platforms (for example, x816) -- and because of that, offers pseudo-ops (ex: .ineschr) which control platform-specific details.
<br />
<br />This really isn't a downside or a negative.  asm6 chooses to remain a generic 6502 assembler, which means it lacks such psuedo-ops.  A NES developer would consider this a negative/fault, while someone working on, say, the Apple II would consider this a plus/feature.
<br />
<br />The method I described is how most things got done "back in the day" -- given that this is discussing development on hardware from "back in the day", I don't see the problem with using the same methods.  :)
<br />
<br />Bregalad's comments regarding how different assemblers behave differently is absolutely correct -- it's the responsibility of the developer to learn and become familiar with their assembler.  (That said, I do find it amazing how many people are attempting to develop "NES stuff" yet aren't familiar with the tools they're using -- don't people read README files any more?  I guess not...)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Apr 11, 2010 12:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">don't people read README files any more?  I guess not...)</div>
<br />
<br />Did they ever?
<br />
<br />XD

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Apr 11, 2010 3:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />nathanpc, did you look at the <a href="http://nesdev.com/bbs/viewtopic.php?t=6160" class="postlink">ASM6 templates</a> I posted? There you can see how to make the header. These ".inesprg", ".ineschr" and such directives are exclusive to NESASM, they won't work in any other assembler. But as you can see in my templates setting up a header with ".db" statements is not hard at all.
<br />
<br />Another obvious difference is the lack of ".bank" directives. In ASM6 you simply don't need them, just use ".org" and ".base" appropriately to organize your banks as necessary.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doppelganger</b> [ Mon Apr 12, 2010 2:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nathanpc wrote:</div><div class="quotecontent">Inside which bank(or place) I need to put the iNES headers?</div>
<br />
<br />iNES headers, being what they are, go at the beginning of the .nes file.  The easiest way to do this is to insert the header before any .org or .base directives.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nathanpc</b> [ Sun May 02, 2010 7:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">don't people read README files any more?  I guess not...)</div><br /><br />Did they ever?<br /><br />XD</div><br />Normal people(like me) never read a README file! <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">nathanpc, did you look at the <a href="http://nesdev.com/bbs/viewtopic.php?t=6160" class="postlink">ASM6 templates</a> I posted? There you can see how to make the header. These ".inesprg", ".ineschr" and such directives are exclusive to NESASM, they won't work in any other assembler. But as you can see in my templates setting up a header with ".db" statements is not hard at all.<br /><br />Another obvious difference is the lack of ".bank" directives. In ASM6 you simply don't need them, just use ".org" and ".base" appropriately to organize your banks as necessary.</div>
<br />Thanks mate, I've followed it, done all that you've said and now all is working. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>