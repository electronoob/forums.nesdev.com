<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reading the controller?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reading the controller?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3878">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3878</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 07, 2008 9:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">electro wrote:</div><div class="quotecontent">Maybe BEQ to a subroutine that clears the $4015 register?</div>
<br />Remember, you can't branch to a subroutine, ever. This was a very serious mistake in your first attempts to make a NES ROM. The only way to call a subroutine is by using the JSR instruction. You may use the branch instructions to decide if the subroutine will be called or not, but never directly branch to it. The JSR instruction is the only one that puts the current value of the program counter in the stack, so that the subroutine can return to the place where it was called after it finishes.
<br />
<br />I know you have no previous programming experience, but keep in mind that computers do not give a damn about english, and it really doesn't know what a subroutine is. This is a word, made up by humans, to make the commands easier to understand and remember. But as far as the CPU is concerned, what each command does is what matters, not what they are called.
<br />
<br />For example, when you look at <a href="http://www.obelisk.demon.co.uk/6502/reference.html#JSR" class="postlink">this page</a>, you can see that there is a description of what the JSR instruction actually does, and you can see that "Jump to Subroutine" is just there to help us remember that instruction. By reading that description, you can see that I lied about JSR being the only way to call a subroutine. For some crazy reason, you may want to place a fake return address on the stack, and then simply JMP or branch to the subroutine. When the subroutine ends, it will fetch that address you placed on the stack before, even though it isn't the location where the routine was called. This kind of trick is a bit too advanced for you right now (you don't need to worry about tricking the CPU yet), but this is just an example.
<br />
<br />Well, I'm saying all that because, with no programming background, you may end up relying too much on the name of the instructions. So this is just a heads uo, to let you know that computers are much more dumb than you think, and if you master the exact meaning of the instructions you give to them, you'll write better, more reliable, and faster code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Fri Feb 08, 2008 10:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm glad you pointed this out to me, looking at the previous code it makes sense now.
<br />
<br />Will do some more reading.
<br />
<br />Thanks again for that.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Feb 08, 2008 10:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A CPU provides the most basic nuts and bolts to build things from. Anything higher level than individual instructions is just a mental aid for us to understand and design programs; the CPU knows nothing about them. Every instruction is a distinct operation with well-defined inputs and effects, nothing more. Put another way, a program of random instructions (note I didn't say random bytes) is just as valid to the CPU as a carefully-coded one, even though the random ones do things that for most purposes would be nonsense.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Fri Feb 08, 2008 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For some crazy reason, you may want to place a fake return address on the stack, and then simply JMP or branch to the subroutine. When the subroutine ends, it will fetch that address you placed on the stack before, even though it isn't the location where the routine was called. This kind of trick is a bit too advanced for you right now (you don't need to worry about tricking the CPU yet), but this is just an example.</div>
<br />
<br />this trick is useful if you need a JSR ($aaaa). i've used it for menus and for virtual functions of objects (enemies and whatnot). kinda crazy thinking about oop in assembly.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda CursorCoorY&nbsp; &nbsp;&nbsp; &nbsp;; get address<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda modeptrs, Y<br />&nbsp; &nbsp;sta JmpIndLO<br />&nbsp; &nbsp;lda modeptrs + 1, Y<br />&nbsp; &nbsp;sta JmpIndHI<br />&nbsp; &nbsp;lda &gt;levelEdFuncReturn - 1&nbsp; &nbsp;; save the return address<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda &lt;levelEdFuncReturn - 1<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;jmp &#40;JmpIndLO&#41;<br />levelEdFuncReturn:<br />&nbsp; &nbsp;; go on about business<br /></div>
<br />
<br />though i've seen some comercial games push an address to the stack and RTS to it for the same effect.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Feb 08, 2008 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No need to push the new return address, just JSR to a JMP (...) instruction:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda CursorCoorY      ; get address <br />   asl <br />   tay <br />   lda modeptrs,Y <br />   sta JmpIndLO <br />   lda modeptrs+1,Y <br />   sta JmpIndHI <br />&nbsp; &nbsp;jsr jmp_JmpIndLO<br />&nbsp; &nbsp;; go on about business <br /><br />jmp_JmpIndLO:<br />&nbsp; &nbsp;jmp &#40;JmpIndLO&#41;</div><br />And further, you could just push the address on the stack (modeptrs table entries must have 1 subtracted from them):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr ind_jmp<br />&nbsp; &nbsp;; go on about business <br />&nbsp; &nbsp;<br />ind_jmp:<br />&nbsp; &nbsp;lda CursorCoorY      ; get address <br />   asl <br />   tay <br />   lda modeptrs+1,Y <br />   pha<br />   lda modeptrs,Y <br />   pha<br />&nbsp; &nbsp;rts<br /><br />modeptrs:<br />&nbsp; &nbsp;.word first-1, second-1 ...</div><br />Finally, if you split the table, you can eliminate more:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr ind_jmp<br />&nbsp; &nbsp;; go on about business <br />&nbsp; &nbsp;<br />ind_jmp:<br />&nbsp; &nbsp;ldy CursorCoorY      ; get address <br />   lda modeptrs_hi,Y <br />   pha<br />   lda modeptrs_lo,Y <br />   pha<br />&nbsp; &nbsp;rts<br /><br />modeptrs_lo:<br />&nbsp; &nbsp;.byte &lt;&#40;first-1&#41;, &lt;&#40;second-1&#41; ...<br />modeptrs_hi:<br />&nbsp; &nbsp;.byte &gt;&#40;first-1&#41;, &gt;&#40;second-1&#41; ...</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Mon Feb 25, 2008 4:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />have only gotten through page one, but this is a beautiful thread so far!! love it!
<br />
<br />but i do have one question(for now):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Clear_Sound: <br />&nbsp; &nbsp;sta $4000,x&nbsp; &nbsp; &nbsp; ; store accumulator at $4000 offset by x <br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; increment x <br />&nbsp; &nbsp;cpx #$0F&nbsp; &nbsp; &nbsp; ; compare x to $0F <br />&nbsp; &nbsp;bne Clear_Sound&nbsp; &nbsp; &nbsp; ; branch back to Clear_Sound if x != $0F <br /><br /></div>
<br />
<br />what is the point of clearing the sound if you want x to equal $0F?
<br />is that some kind of shift/mask trick?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Feb 25, 2008 4:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That code writes register A to memory locations $4000 through $400E. Here are comments describing the instructions. This is really basic stuff. Don't skip the basics in your learning process.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Clear_Sound: <br />   sta $4000,x      ; Store A at memory location $4000+X<br />   inx         &nbsp; &nbsp; &nbsp;; X = X + 1<br />   cpx #$0F     &nbsp; &nbsp; ; If X is not equal to $0F, jump to Clear_Sound<br />   bne Clear_Sound</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Mon Feb 25, 2008 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Laserbeak43 wrote:</div><div class="quotecontent">have only gotten through page one, but this is a beautiful thread so far!! love it!<br /><br />but i do have one question(for now):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Clear_Sound: <br />&nbsp; &nbsp;sta $4000,x&nbsp; &nbsp; &nbsp; ; store accumulator at $4000 offset by x <br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; increment x <br />&nbsp; &nbsp;cpx #$0F&nbsp; &nbsp; &nbsp; ; compare x to $0F <br />&nbsp; &nbsp;bne Clear_Sound&nbsp; &nbsp; &nbsp; ; branch back to Clear_Sound if x != $0F <br /><br /></div><br /><br />what is the point of clearing the sound if you want x to equal $0F?<br />is that some kind of shift/mask trick?</div>
<br />
<br />Ditto. I never learned so much from a thread in any other forum before.
<br />
<br />T

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Mon Feb 25, 2008 6:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">That code writes register A to memory locations $4000 through $400E. Here are comments describing the instructions. This is really basic stuff. Don't skip the basics in your learning process.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Clear_Sound: <br />   sta $4000,x      ; Store A at memory location $4000+X<br />   inx         &nbsp; &nbsp; &nbsp;; X = X + 1<br />   cpx #$0F     &nbsp; &nbsp; ; If X is not equal to $0F, jump to Clear_Sound<br />   bne Clear_Sound</div></div>
<br />
<br />it's more the other way around for me. i learn more in a community. always have.
<br />but anyway, it's true. learn the basics. but this still doesn't explain to me why you want to jump to Clear_Sound if x is NOT equal to $0F. if it is does this mean it IS clear? cause i'm under the impression that clear would be $00.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 25, 2008 6:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's trying to clear (set to zero) all registers from $4000 through $400E. Once all these registers have been cleared, X will equal $0F, and the loop ends.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Mon Feb 25, 2008 8:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">It's trying to clear (set to zero) all registers from $4000 through $400E. Once all these registers have been cleared, X will equal $0F, and the loop ends.</div>
<br />
<br />oh! duh! x serves ONLY as a counter. i was expecting it to do more. lol. i tend to make things more complicated than they are! sorry  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> and thanks XD

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Feb 25, 2008 9:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The best way to understand code is to run it in your mind, or with a simulator if you have one. Then you can see the big picture. For example, this is clearly a loop:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; A = $00<br />ldx #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; X = $00<br />Clear_Sound: <br />sta $4000,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Store 0 at memory location $4000<br />inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = $01<br />cpx #$0F<br />bne Clear_Sound&nbsp; &nbsp; &nbsp;; X is not equal to $0F, so this is taken<br />Clear_Sound: <br />sta $4000,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Store 0 at memory location $4001<br />inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = $02<br />cpx #$0F<br />bne Clear_Sound&nbsp; &nbsp; &nbsp;; X is not equal to $0F, so this is taken<br />...<br />sta $4000,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Store 0 at memory location $400E<br />inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = $0F<br />cpx #$0F<br />bne Clear_Sound&nbsp; &nbsp; &nbsp;; X is equal to $0F, so this is NOT taken<br />; done</div>
<br />Loops are useful when you need to process a lot of values, where doing each manually would take lots of code. The combination of conditional branches (decisions) and loops can allow a lot of functionality with a small amount of code. Loops are also useful when the number of values processed depends on some value while the program is running, rather than a fixed value as the above loop does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Laserbeak43</b> [ Tue Feb 26, 2008 6:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yeah i'm quite familiar with loops. just not in asm  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  which actually looks a lot simpler!! maybe that's why i've missed it? oh well. as always, thanks for the explanation!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>electro</b> [ Tue Feb 26, 2008 8:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a great explanation of the loop that clears the sound registers.
<br />
<br />This is awesome.
<br />
<br />Thanks.
<br />
<br />T
<br />
<br />P.S. I meant to say above that I have never learned <em>so much</em> in a forum before. I had to edit my original comment, I think the way I worded it, it sounded the opposite of what I meant!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Feb 26, 2008 8:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">electro wrote:</div><div class="quotecontent">Maybe BEQ to a subroutine that clears the $4015 register?</div><br />Remember, you can't branch to a subroutine, ever.</div>
<br /><a href="http://en.wikipedia.org/wiki/Tail_call" class="postlink">Ever?</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>