<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 6502 ASM trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">6502 ASM trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 29, 2012 6:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I'm even sure it would be possible to code an entiere RPG while keeping the HP, Mana, Money, etc... coded entirely in BCD at all times. It would also make people have a harder time to find cheat codes <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />No, it'd be <em>easier</em>. You just find the location that changes from 0 to 1 when your character earns 100 cio.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I wanted for example to do this in C (divide by 8 and round to the nearest integer) I'd have no choice but to do this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;if(variable &amp; 0x8 == 0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;result = variable / 8;<br />&nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = variable / 8 + 1;<br /></div></div><br />To round to nearest, add half the divisor before floor-dividing:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// In C, assuming variable and result are unsigned<br />result = (variable + 4U) / 8U;<br /><br /># In Python<br />from __future__ import division<br />result = (variable + 4) // 8<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Dec 30, 2012 3:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It would be just as easy (not easier) if they know the data is stored in BCD internally, but if they're looking for binary values they can search for a long time...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">// In C, assuming variable and result are unsigned<br />result = (variable + 4U) / 8U;</div><br /><br />This would translate into :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda variable<br />&nbsp; clc<br />&nbsp; adc #$04<br />&nbsp; lsr A<br />&nbsp; lsr A<br />&nbsp; lsr A<br />&nbsp; sta result<br /></div><br />which is only one byte and 2 cycles more than my super-optimized assembly code, I think it's ok. Great finding !

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Dec 30, 2012 5:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For signed variables when using this method, if the argument is negative, you have to negate the variable first, then perform the division, and then negate it again to get correct rounding. Just thought I'd mention that since it might not be immediately obvious.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sun Jan 20, 2013 1:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just stumbled into this one: How to check an unsigned byte range with one branch:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />&nbsp; &nbsp; ; assume register a has the value to check:<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc #(256 - LessThanThis)<br />&nbsp; &nbsp; cmp #(EqualOrGreaterThanThis + ( 256 - LessThanThis) )<br />&nbsp; &nbsp; bcs IsInRange<br /><br /></div><br /><br />As well, EqualOrGreaterThanThis cannot be more than (LessThanThis - 1 ). You could reverse the condition and check for numbers outside this range with bcc.<br /><br />Edit: Oops..Fixed some mistakes. I <em>think</em> that is correct now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Jan 20, 2013 6:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Didn't check if it was already mentioned, but here's something I have used a couple of times:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cmp something<br />lda #0<br />rol a</div><br /><br />I.e. how to set a flag based on the comparison result without using branches, in constant time.<br /><br />Now if I could figure out how to do that for arbitrary values. Currently I am doing this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ldy Bat_YCoordinateHi&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcs @nohide&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ldy #$FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;-1+2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;jmp @hideornohide&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3<br />@nohide:<br />&nbsp; &nbsp; &nbsp; &nbsp; nop<br />&nbsp; &nbsp; &nbsp; &nbsp; nop&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; 4 balance cycles<br />@hideornohide:</div><br /><br />Or with word data:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; setw $00, BatData1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;10<br />&nbsp; &nbsp; &nbsp; &nbsp; lda FrameCounter&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3<br />&nbsp; &nbsp; &nbsp; &nbsp; and #8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2<br />&nbsp; &nbsp; &nbsp; &nbsp; bne @frame0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;3<br />&nbsp; &nbsp; &nbsp; &nbsp; setw $00, BatData2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;-1+10<br />&nbsp; &nbsp; &nbsp; &nbsp; jmp @common&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;+3<br />@frame0:jsr rts12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&nbsp; &nbsp; &nbsp; 12 balance cycles: jsr to some random location that contains just rts.<br />@common:ldx #8*4 ; Sprite index&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2</div><br />Where setw is defined as lda #, sta, lda #, sta.<br /><br />(In my Castlevania II retranslation patch I have a savescreen with animation going on, and the animation is performed during scanline wait loops, and those loops are cycle-counted and ensured that all branches yield the same number of cycles.)<br /><br />If the data is compile-time constant, you could do:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">cmp ...<br />lda #0<br />rol a<br />tax<br />ldy @values,x<br />.pushseg<br />.data<br />@values: .byte $55, $FF ; example<br />.popseg</div><br />Which is 10 cycles excluding the cmp, 1 cycle fewer than the above.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 20, 2013 10:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To set A to one of two arbitrary constant values based on carry in eight cycles, do something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; CMP goes here<br />lda #$FF<br />adc #$00<br />; here, A = $00 if C was true else $FF; C unchanged<br />and #value_if_set ^ value_if_clear<br />; here, A = $00 if C was true else the bitwise difference<br />eor #value_if_set<br /></div><br />All this requires is that the value if carry is set and the exclusive OR of the two values, or (with a small change) the value if carry is set and the difference of the values, be known.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jan 20, 2013 10:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow, this is cool ! But it takes 8 bytes, while my variant :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #value 1<br />&nbsp; bcc +<br />&nbsp; lda #value 2<br />+<br /></div><br />Only takes 6. Also it is 5/6 cycles, not constant, but almost.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jan 20, 2013 10:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Only takes 6</div><br />Taking 6 or 5 cycles is fine in some cases, and I do this a lot in Thwaite for velocity modifications based on TV system because Thwaite doesn't do any raster effects other than a split on some fairly static screens to switch to the bank with font tiles. If you're trying to do something in constant time, on the other hand, you need to eliminate all time variability. Extending it to constant time would likewise take 8 bytes and 8 cycles:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; CMP goes here<br />&nbsp; lda #value_if_clear<br />&nbsp; bcc +<br />+<br />&nbsp; bcc +<br />&nbsp; lda #value_if_set<br />+<br /></div><br /><br />EDIT: clarify intent for the record

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Jan 20, 2013 10:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It takes 6 or 5. </div><br />I meant, 6 bytes (instead of 8 in your variant).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sun Jan 20, 2013 8:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Flipping bit 0 on non-zp variable if carry is set (9 bytes, constant 12 cycles) (clears carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ; Flip direction if carry was set <br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2<br />&nbsp; &nbsp; &nbsp; &nbsp; rol a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; eor Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4</div><br />To flip bit 7, change &quot;rol&quot; into &quot;ror&quot;.<br />To change flipping into setting, change eor into ora.<br /><br />Flipping bit 0 on non-zp variable if carry is CLEAR (11 bytes, constant 14 cycles) (clears carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ; Flip direction if carry was clear<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2<br />&nbsp; &nbsp; &nbsp; &nbsp; rol a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; eor #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2<br />&nbsp; &nbsp; &nbsp; &nbsp; eor Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4</div><br />To flip bit 7, change &quot;rol&quot; into &quot;ror&quot; and #1 into #$80.<br />To change flipping into setting, change the second eor into ora.<br /><br />Flipping any bit on non-zp variable if carry is set (12 bytes, constant 14 cycles) (doesn't change carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; ; Flip direction if carry was set<br />&nbsp; &nbsp; &nbsp; &nbsp; lda Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc *+4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc *+6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;eor #2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;-2+2&nbsp; &nbsp;(flip bit 1)<br />&nbsp; &nbsp; &nbsp; &nbsp; sta Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4</div><br />To flip if carry is clear, change both bcc into bcs.<br />To change flipping into setting, change eor into ora.<br />To change flipping into clearing, change eor into and and invert the constant.<br /><br />To transfer the carry flag into any particular bit on a non-zp variable (15 bytes, constant 15 cycles) (doesn't change carry):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; lda Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bcc @clear&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ora #2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;-1+2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bne @ok&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;3 :: 11 so far<br />@clear:&nbsp; and #(255-2)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;2<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nop&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;2 :: 11 so far<br />@ok:&nbsp; &nbsp; sta Bat_Direction&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;4&nbsp; &nbsp;</div><br />To invert the flag, change the bcc into bcs.<br /><br />Subtract 2 bytes and 2 cycles from each example if your variable is in zeropage.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Jan 21, 2013 2:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, how many times I did the good old<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$0<br />rol A</div><br />trick to have A = 0 if there is no carry and A = 1 if there is carry.<br /><br />Also, if you want to act on a simple flag, usually I use the carry but sometimes comes where you have to use an ADC or CMP instruction that will affect the flag (and overwrite it). I came with an elegant solution :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;...&#93;<br />&nbsp;ror Temp&nbsp; &nbsp; ;Our flag in bit 7 of temp (we don't care about what value was stored in temp)<br />&#91;...&#93;<br />adc #wathever&nbsp; &nbsp;;Carry is affected<br /><br />&#91;...&#93;<br />bit Temp&nbsp; &nbsp; &nbsp; &nbsp; ;Test the flag<br />bpl _flag_is_clear<br /><br />&#91;....&#93;<br />asl Temp&nbsp; &nbsp; &nbsp; &nbsp;;If anyhow the flag should be restored to the carry<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 21, 2013 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just discovered an <a href="http://www.6502.org/tutorials/compare_beyond.html" class="postlink">article about doing tricks with CMP</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Jan 24, 2013 3:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dunno if this is clever enough for this topic, but here's something basic I only just now thought of. Often I find myself adding an 8 bit number to a 16 bit number like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda low16<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc low8<br />&nbsp; &nbsp;sta low16<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda high16;3 (assuming zero page)<br />&nbsp; &nbsp;adc #$00;2<br />&nbsp; &nbsp;sta high16;3<br /></div><br />when this would work since the high byte is always 0.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda low16<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc low8<br />&nbsp; &nbsp;sta low16<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;bcc skip;2/3 <br />&nbsp; &nbsp;inc high16;5 (assuming zero page)<br />skip:<br /></div><br />Saves two bytes and a (couple) cycles.  <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> I might make it a macro.<br /><br />Edit: Ah yeah... but you could gain time on a page cross. It'd be rare, though<br />Edit2: Wait, no, you wouldn't gain time. Because when the branch is taken the inc isn't run.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Jan 24, 2013 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know if it's really a trick, or if it's been mentioned. When comparing signed values, you can just flip the negative bits and compare them as you would any other value.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda val1<br />eor #$80<br />cmp #&lt;The value you'd compare against, pre-xord $80&gt;<br /></div><br /><br />Or against a variable:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda val1<br />eor #$80<br />sta temp<br />lda val2<br />eor #$80<br />cmp temp<br /></div><br /><br />You guys could probably figure out something faster for the 2nd code <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Sat Jan 26, 2013 4:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This trick was mentioned in the old Allegro documentation: to convert signed samples to unsigned, you just had to flip the MSB. What this does is shift the range (so e.g. -0x80~0x7F gets shifted to 0x00~0xFF - it's equivalent to adding 0x80 to all values).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>