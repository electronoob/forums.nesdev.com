<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - cpu instructions with multiple reads/writes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">cpu instructions with multiple reads/writes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1294">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1294</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Wed Mar 29, 2006 1:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>cpu instructions with multiple reads/writes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />would an instruction that does multiple reads/writes on the same address (where the first one is a garbage read/write) trigger multiple reads/writes on a ppu register ?  i would assume that it does and games do not use instrucitons that do this.  i looked a few and only saw ABS addressing used on the registers.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Mar 29, 2006 1:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you are referring to the garbage write before the real one, then no. That does not count as two writes (thank god).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mattmatteh</b> [ Wed Mar 29, 2006 1:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />either, i guess.   thought of it while looking at my cpu.
<br />
<br />matt

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Mar 29, 2006 5:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">If you are referring to the garbage write before the real one, then no. That does not count as two writes (thank god).</div>
<br />
<br />Are you certain?
<br />
<br />I'm pretty sure it does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 29, 2006 6:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is the first time I've really investigated the extent of this. What a mess! At least now I see that it's possible to cause two consecutive reads from the same address, which will allow more detailed reverse-engineering in the future. Running this on my NES printed the indicated output:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx&nbsp; &nbsp;#0<br />stx&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />stx&nbsp; &nbsp;$2006<br />lda&nbsp; &nbsp;#$12&nbsp; &nbsp; &nbsp; &nbsp; ; write $12 $34 $56 $78<br />sta&nbsp; &nbsp;$2007<br />lda&nbsp; &nbsp;#$34<br />sta&nbsp; &nbsp;$2007<br />lda&nbsp; &nbsp;#$56<br />sta&nbsp; &nbsp;$2007<br />lda&nbsp; &nbsp;#$78<br />sta&nbsp; &nbsp;$2007<br />stx&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />stx&nbsp; &nbsp;$2006<br />rol&nbsp; &nbsp;$2007,x&nbsp; &nbsp; &nbsp;; read &#40;ignored&#41;, read, write junk, write<br />stx&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />stx&nbsp; &nbsp;$2006<br />lda&nbsp; &nbsp;$2007&nbsp; &nbsp; &nbsp; &nbsp;; fill buffer<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a&nbsp; &nbsp; &nbsp;; prints $12 $34 $02 $24<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a</div><br /><br />Nifty, you can use the ignored read of an indexed write to modify every other VRAM location (or every 64th location, if using the 32-increment mode):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx&nbsp; &nbsp;#0<br />stx&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />stx&nbsp; &nbsp;$2006<br />lda&nbsp; &nbsp;#$12&nbsp; &nbsp; &nbsp; &nbsp; ; write $12 $34 $56 $78<br />sta&nbsp; &nbsp;$2007<br />lda&nbsp; &nbsp;#$34<br />sta&nbsp; &nbsp;$2007<br />lda&nbsp; &nbsp;#$56<br />sta&nbsp; &nbsp;$2007<br />lda&nbsp; &nbsp;#$78<br />sta&nbsp; &nbsp;$2007<br />stx&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />stx&nbsp; &nbsp;$2006<br />lda&nbsp; &nbsp;#$AA<br />sta&nbsp; &nbsp;$2007,x&nbsp; &nbsp; &nbsp;; read &#40;ignored&#41;, write $AA<br />lda&nbsp; &nbsp;#$BB<br />sta&nbsp; &nbsp;$2007,x&nbsp; &nbsp; &nbsp;; read &#40;ignored&#41;, write $BB<br />stx&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />stx&nbsp; &nbsp;$2006<br />lda&nbsp; &nbsp;$2007&nbsp; &nbsp; &nbsp; &nbsp;; fill buffer<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a&nbsp; &nbsp; &nbsp;; prints $12 $AA $56 $BB<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a<br />lda&nbsp; &nbsp;$2007<br />jsr&nbsp; &nbsp;print_a</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Mar 29, 2006 6:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's more or less what I expected.  It looks as though all reads and writes are occuring, affecting the PPU address appropriately.
<br />
<br />I am somewhat suprised at that $02, instead of the expected $12, however.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Mar 29, 2006 7:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So RMW opcodes cause the PPU address to be incremented twice? Uh, oh. Someone had better update WedNESday...
<br />
<br />Is the dummy value always the same as the real one?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Mar 29, 2006 7:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">So RMW opcodes cause the PPU address to be incremented twice? Uh, oh. Someone had better update WedNESday...</div><br /><br />Depends on how many reads/writes there are.  It's incremented once for each appropriate read/write.  In blargg's example of ROL $2007,X -- it was actually incremented 4 times (2 reads, 2 writes)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is the dummy value always the same as the real one?</div><br /><br />again, from blargg's example it doesn't appear so.<br /><br />snippit:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr&nbsp; &nbsp;print_a&nbsp; &nbsp; &nbsp;; prints $12 $34 $02 $24<br /></div><br /><br />the value written back on the dummy write was $02, when the original value read was $12.  That's what threw me offguard at first.  I'd like to know the details on what is written back for the dummy write myself.  The only logic I could come up with that might explain the $02 here is that it's getting AND'd with the low byte of the write address ($07) -- although that doesn't make much sense at all.<br /><br /><br />EDIT -- oh crap... I may have misinterpretted that.<br /><br />if the first read is the discarded one, then wouldn't the $34 be the value being shifted?  Wait a minute....<br /><br />Just checked 6502_cpu.txt again and it doesn't specifically say which read is discarded:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> 4  address+X* R  read from effective address,<br />                         fix the high byte of effective address<br />        5  address+X  R  re-read from effective address<br /><br />-snip-<br />* The high byte of the effective address may be invalid<br />                at this time, i.e. it may be smaller by $100.<br /></div>
<br />
<br />Since the high byte of the address doesn't need fixing in this case, perhaps the second fetch is the one that's discarded?  Maybe the first fetch is only discarded on page boundary cross.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Mar 29, 2006 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Rockwell 6502 manual around page 151 shows the read-modify-write cycles:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; External&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Internal<br />Cycles&nbsp; &nbsp;Address Bus&nbsp; &nbsp;Data Bus&nbsp; &nbsp; &nbsp;Operation&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Operation<br /><br />&nbsp; 1&nbsp; &nbsp; &nbsp; 100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OP CODE&nbsp; &nbsp; &nbsp;Fetch&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Finish Previous<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OP CODE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Operation, Incre-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ment PC to 101<br />&nbsp; 2&nbsp; &nbsp; &nbsp; 101&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ADL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Fetch ADL&nbsp; &nbsp; &nbsp; &nbsp;Decode Current In-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;struction, Increment<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PC to 102<br />&nbsp; 3&nbsp; &nbsp; &nbsp; 102&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ADH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Fetch ADH&nbsp; &nbsp; &nbsp; &nbsp;Add ADL + X, Incre-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ment PC to 103<br />&nbsp; 4&nbsp; &nbsp; &nbsp; ADH, ADL + X&nbsp; &nbsp; ?&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False Read&nbsp; &nbsp; &nbsp; Add Carry from<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Previous Add to ADH<br />&nbsp; 5&nbsp; &nbsp; &nbsp; ADH + C,&nbsp; &nbsp; &nbsp; Data&nbsp; &nbsp; &nbsp; &nbsp; Fetch Value<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ADL + X<br />&nbsp; 6&nbsp; &nbsp; &nbsp; ADH + C,&nbsp; &nbsp; &nbsp; &nbsp; ?&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Destroy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Perform Rotate,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ADL + X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Memory&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Turn on Write<br />&nbsp; 7&nbsp; &nbsp; &nbsp; ADH + C,&nbsp; &nbsp; &nbsp;Shifted&nbsp; &nbsp; &nbsp; Store&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Set Flags<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ADL + X&nbsp; &nbsp; &nbsp; Data&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Results<br />&nbsp; 8&nbsp; &nbsp; &nbsp; 103&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OP CODE&nbsp; &nbsp; &nbsp; Fetch Next&nbsp; &nbsp; &nbsp; Increment PC to 104<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OP CODE</div><br /><br />From this I get that the first data read is ignored and from the un-page-crossed address, the second is used. In the first example I posted, the dummy read would fetch whatever was in the PPU's read buffer and fill it with $12, the second read would get $12 from the buffer and fill it with $34, then the first write would modify VRAM at address $0002, and the second at $0003, writing the value $24 ($12 &lt;&lt; 1). Apparently the dummy write is the low byte of the PPU's VADDR:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;clear_vram<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$00&nbsp; &nbsp; &nbsp; &nbsp; ; vaddr = 0<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp;#$00<br />&nbsp; &nbsp; &nbsp; dec&nbsp; &nbsp;$2007,x&nbsp; &nbsp; &nbsp;; garbage write is to $0002<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_vram&nbsp; ; prints $00 $00 $02 $FF $00 $00 $00 $00<br />&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;clear_vram<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$00&nbsp; &nbsp; &nbsp; &nbsp; ; vaddr = 3<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$03<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp;#$00<br />&nbsp; &nbsp; &nbsp; dec&nbsp; &nbsp;$2007,x&nbsp; &nbsp; &nbsp;; garbage write is to $0005<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_vram&nbsp; ; prints $00 $00 $00 $00 $00 $05 $FF $00<br />&nbsp; &nbsp; &nbsp; jmp&nbsp; &nbsp;forever<br />&nbsp; &nbsp; &nbsp; <br />clear_vram:<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$00&nbsp; &nbsp; &nbsp; &nbsp; ; clear vram<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp;#0<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$00<br />:&nbsp; &nbsp; &nbsp;sta&nbsp; &nbsp;$2007<br />&nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp;-<br />&nbsp; &nbsp; &nbsp; rts<br /><br />print_vram:<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$00<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006&nbsp; &nbsp; &nbsp; &nbsp;; vaddr = 0<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;$2007&nbsp; &nbsp; &nbsp; &nbsp;; fill buffer<br />&nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp;#8<br />:&nbsp; &nbsp; &nbsp;lda&nbsp; &nbsp;$2007<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_a<br />&nbsp; &nbsp; &nbsp; dey<br />&nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp;-<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_newline<br />&nbsp; &nbsp; &nbsp; rts</div><br /><br />Maybe the CPU leaves the bus open during the write, causing the PPU to see a phantom of the low byte of its own address bus.<br /><br />Now for even more weirdness that makes me wonder whether my code is causing it. Running the above test, but using inc $2007,x instead of dec, and running it multiple times with the starting VADDR at $0000, then again at $0001, etc., VRAM contents afterwards is really screwed up:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; ldy&nbsp; &nbsp;#0<br />:&nbsp; &nbsp; &nbsp;jsr&nbsp; &nbsp;clear_vram2<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$00&nbsp; &nbsp; &nbsp; &nbsp; ; vaddr = y<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; sty&nbsp; &nbsp;$2006<br />&nbsp; &nbsp; &nbsp; ldx&nbsp; &nbsp;#$00<br />&nbsp; &nbsp; &nbsp; inc&nbsp; &nbsp;$2007,x<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_vram<br />&nbsp; &nbsp; &nbsp; iny<br />&nbsp; &nbsp; &nbsp; cpy&nbsp; &nbsp;#12<br />&nbsp; &nbsp; &nbsp; bne&nbsp; &nbsp;-<br /><br />$01 $00 $02 $01 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 <br />$00 $00 $02 $03 $02 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 <br />$00 $01 $00 $00 $04 $01 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 <br />$00 $01 $00 $00 $00 $05 $01 $00 $00 $00 $00 $00 $00 $00 $00 $00 <br />$01 $00 $00 $00 $00 $00 $06 $01 $00 $00 $00 $00 $00 $00 $00 $00 <br />$00 $00 $02 $00 $00 $00 $00 $07 $02 $00 $00 $00 $00 $00 $00 $00 <br />$00 $01 $00 $00 $00 $00 $00 $00 $08 $01 $00 $00 $00 $00 $00 $00 <br />$00 $01 $00 $00 $00 $00 $00 $00 $00 $09 $01 $00 $00 $00 $00 $00 <br />$01 $00 $00 $00 $00 $00 $00 $00 $00 $00 $0A $01 $00 $00 $00 $00 <br />$00 $00 $02 $00 $00 $00 $00 $00 $00 $00 $00 $0B $02 $00 $00 $00 <br />$00 $01 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $0C $01 $00 $00 <br />$00 $01 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $0D $01 $00</div><br /><br />If I clear VRAM to $11 instead, I get this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$11 $11 $02 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 <br />$11 $11 $11 $03 $12 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 <br />$11 $11 $11 $11 $04 $13 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 <br />$11 $11 $11 $11 $11 $05 $12 $11 $11 $11 $11 $11 $11 $11 $11 $11 <br />$11 $11 $11 $11 $11 $11 $06 $11 $11 $11 $11 $11 $11 $11 $11 $11 <br />$11 $11 $11 $11 $11 $11 $11 $07 $12 $11 $11 $11 $11 $11 $11 $11 <br />$11 $11 $11 $11 $11 $11 $11 $11 $08 $11 $11 $11 $11 $11 $11 $11 <br />$11 $02 $11 $11 $11 $11 $11 $11 $11 $09 $02 $11 $11 $11 $11 $11 <br />$01 $11 $11 $11 $11 $11 $11 $11 $11 $11 $0A $01 $11 $11 $11 $11 <br />$11 $11 $02 $11 $11 $11 $11 $11 $11 $11 $11 $0B $02 $11 $11 $11 <br />$11 $03 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $0C $03 $11 $11 <br />$11 $02 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $11 $0D $02 $11</div>
<br />
<br />I have no idea how deep this rabbit hole goes. How the hell can it be modifying VRAM outside the current address?!? I think I'll take the blue pill and get some sleep, at least for now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Thu Mar 30, 2006 5:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So would ADC $2007;
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Read instructions &#40;LDA, LDX, LDY, EOR, AND, ORA, ADC, SBC, CMP, BIT,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LAX, NOP&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; address R/W description<br />&nbsp; &nbsp; &nbsp; &nbsp;--- ------- --- ------------------------------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch low byte of address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch high byte of address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; address&nbsp; R&nbsp; read from effective address</div>
<br />
<br />Modify the VRAM address?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Thu Mar 30, 2006 8:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yes -- ADC $2007 would modify it once, because there is one read from $2007

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Thu Mar 30, 2006 11:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does anyone know where I can get a copy of a 6502 manual which explains the opcode timing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Mar 30, 2006 4:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://users.pandora.be/kim1-6502/6502/proman.html" class="postlink">MCS6500 Microcomputer Family Programming Manual</a> (it's a quite hefty HTML document, which I finally just copied as text so I could open it quickly in a text editor rather than wait ages for the HTML to render).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>