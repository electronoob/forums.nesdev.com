<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - help on first demo?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">help on first demo?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3839">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3839</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Wed Jan 16, 2008 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>help on first demo?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've recently finished GBAguys horribly inaccurate tutorial.  The sound part about bit 5 of $4000 really pissed me off. And so did the .db 20 initial do-nothing variable setting. $4000.5 is to turn on the down count not another redundant  squarewave switch. 
<br />
<br /> But I don't think I'm permanently damaged from it. I just came back from reading these two post 
<br />
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=3605">http://nesdev.com/bbs/viewtopic.php?t=3605</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=3751">http://nesdev.com/bbs/viewtopic.php?t=3751</a><!-- m -->
<br />
<br />So I'm switching to asm6 and looking for the nes101 tut.
<br />
<br />My main concerns are how messed up my code is and what emu to use. I tested about 10 emulators and not a one of them ran my code the same way. I used FCEMU for 90 of the code and it was fine. Then I tested in JNES and the pallet didn't even resemble the intended one. 
<br />
<br />Also my code looks like hell. It feels really toomuch like patchwork/copypase. I have to setup small stupid loops because of the branching and I have to check every number I want since I don't have or haven't found greater then and less then.
<br />
<br />Ignore comments since they are from gbaguy tut.
<br />Also, I know running loops sprite switching is screwed. I'm just lazy.
<br />
<br />I would attach the code and rom if I had an upload feature...
<br />
<br />Thanks all!
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.inesprg 1<br />&nbsp; &nbsp;.inesmap 0<br />&nbsp; &nbsp;.inesmir 1<br />&nbsp; &nbsp;.ineschr 1<br /><br />&nbsp; &nbsp;.bank 1&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp;.org $FFFA<br />&nbsp; &nbsp;.dw VBlank_Routine ; address to execute on VBlank<br />&nbsp; &nbsp;.dw Start&nbsp; &nbsp; ; address to execute on reset<br />&nbsp; &nbsp;.dw 0&nbsp; &nbsp; &nbsp; &nbsp; ; no whatever<br /><br />&nbsp; &nbsp;.bank 0<br />&nbsp; &nbsp;.org $0000<br />falling .db 0<br />face_left .db 0<br />running&nbsp; &nbsp;&nbsp; &nbsp;.db 0<br />running_sprite .db 0<br />sprite_change .db 0<br />VBlankOrNo&nbsp; .db 0<br />&nbsp; &nbsp;.org $0300 ; OAM Copy location $0300<br />&nbsp; &nbsp;<br />Sprite0_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's Y value<br />Sprite0_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite0_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite0_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite1_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's Y value<br />Sprite1_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite1_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite1_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite2_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's Y value<br />Sprite2_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite2_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite2_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite3_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's Y value<br />Sprite3_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite3_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite3_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite4_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's Y value<br />Sprite4_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite4_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite4_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's X value<br /><br />Sprite5_Y:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's Y value<br />Sprite5_T:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's Tile Number<br />Sprite5_S:&nbsp; &nbsp; &nbsp;.db&nbsp; 0&nbsp; &nbsp;; sprite #1's special byte<br />Sprite5_X:&nbsp; &nbsp; &nbsp;.db&nbsp; 20&nbsp; &nbsp;; sprite #1's X value<br /><br /><br />; this would just go on and on for however many sprites you have<br />&nbsp; &nbsp;.org $8000&nbsp; ; code starts at $8000 or $C000<br />VBlank_Routine:<br />&nbsp; &nbsp;;start of function to execute on VBlank<br />&nbsp; &nbsp;inc VBlankOrNo<br />&nbsp; &nbsp;; add one &#40;1&#41; to VBlankOrNo, will be 1 if VBlank, 0 if not.<br />&nbsp; &nbsp;rti&nbsp; ; RTI is &#40;Interrupt RETurn or ReTurn from Interrupt&#41;<br />Start:<br /><br />&nbsp; &nbsp;lda #%10001000&nbsp; ;<br />&nbsp; &nbsp;sta $2000&nbsp; &nbsp; &nbsp; &nbsp;; <br />&nbsp; &nbsp;lda #%00011110&nbsp; ; Our typical PPU Setup code.<br />&nbsp; &nbsp;sta $2001&nbsp; &nbsp; &nbsp; &nbsp;; <br /><br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp; ; clear X&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; start of pallete loading code<br /><br />&nbsp; &nbsp;lda #$3F&nbsp; &nbsp; ; have $2006 tell<br />&nbsp; &nbsp;sta $2006&nbsp; &nbsp;; $2007 to start<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp; ; at $3F00 &#40;pallete&#41;.<br />&nbsp; &nbsp;sta $2006<br />&nbsp; &nbsp;<br />loadpal:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; this is a freaky loop<br />&nbsp; &nbsp;lda tilepal, x&nbsp; ; that gives 32 numbers<br />&nbsp; &nbsp;sta $2007&nbsp; &nbsp; &nbsp; &nbsp;; to $2007, ending when<br />&nbsp; &nbsp;inx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X is 32, meaning we<br />&nbsp; &nbsp;cpx #32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; are done.<br />&nbsp; &nbsp;bne loadpal&nbsp; &nbsp; &nbsp;; if X isn't =32, goto &quot;loadpal:&quot; line.<br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;; end of pallete loading code<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$20<br />&nbsp; &nbsp;sta $2006 ; give $2006 both parts of address $2020.<br />&nbsp; &nbsp;sta $2006 <br /><br />&nbsp; &nbsp;ldx #$00<br />loadNames:<br />&nbsp; &nbsp;lda ourMap, X ; load A with a byte from address &#40;ourMap + X&#41;<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;cpx #255 ; map in previous section 64 bytes long<br />&nbsp; &nbsp;bne loadNames ; if not all 64 done, loop and do some more<br />addzeros:<br />&nbsp; &nbsp;lda 0<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #255<br />&nbsp; &nbsp;bne addzeros<br />addzeros1:<br />&nbsp; &nbsp;lda 0<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #255<br />&nbsp; &nbsp;bne addzeros1<br />addzeros2:<br />&nbsp; &nbsp;lda 0<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #128<br />&nbsp; &nbsp;bne addzeros2<br />&nbsp; &nbsp;ldx $0<br />loadfloor:&nbsp; &nbsp;<br />&nbsp; &nbsp;lda floorMap, X ; load A with a byte from address &#40;ourMap + X&#41;<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;cpx #32 ; map in previous section 64 bytes long<br />&nbsp; &nbsp;bne loadfloor ; if not all 64 done, loop and do some more<br />&nbsp; &nbsp;<br />setup_Y_X:<br />&nbsp; &nbsp; lda #$20<br />&nbsp; &nbsp;sta Sprite0_Y<br />&nbsp; &nbsp;sta Sprite0_X<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #00<br />&nbsp; &nbsp;sta Sprite0_S<br />&nbsp; &nbsp;sta Sprite1_S<br />&nbsp; &nbsp;sta Sprite2_S<br />&nbsp; &nbsp;sta Sprite3_S<br />&nbsp; &nbsp;sta Sprite4_S<br />&nbsp; &nbsp;sta Sprite5_S<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta Sprite1_T<br />&nbsp; &nbsp;lda #2<br />&nbsp; &nbsp;sta Sprite2_T<br />&nbsp; &nbsp;lda #3<br />&nbsp; &nbsp;sta Sprite3_T<br />&nbsp; &nbsp;lda #4<br />&nbsp; &nbsp;sta Sprite4_T<br />&nbsp; &nbsp;lda #5<br />&nbsp; &nbsp;sta Sprite5_T<br />&nbsp; &nbsp;<br />Setupteh_Sprite:<br />&nbsp; &nbsp;lda face_left<br />&nbsp; &nbsp;cmp #0<br />&nbsp; &nbsp;beq faceleftloop<br />facerightloop:<br />&nbsp; &nbsp;lda #%01000000<br />&nbsp; &nbsp;sta Sprite0_S<br />&nbsp; &nbsp;sta Sprite1_S<br />&nbsp; &nbsp;sta Sprite2_S<br />&nbsp; &nbsp;sta Sprite3_S<br />&nbsp; &nbsp;sta Sprite4_S<br />&nbsp; &nbsp;sta Sprite5_S<br />&nbsp; &nbsp;<br />&nbsp; &nbsp; lda Sprite0_Y<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;sta Sprite1_Y<br />&nbsp; &nbsp;adc #7<br />&nbsp; &nbsp;sta Sprite2_Y<br />&nbsp; &nbsp;sta Sprite3_Y<br />&nbsp; &nbsp;adc #8<br />&nbsp; &nbsp;sta Sprite4_Y<br />&nbsp; &nbsp;sta Sprite5_Y<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda Sprite0_X<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;sta Sprite2_X<br />&nbsp; &nbsp;sta Sprite4_X<br />&nbsp; &nbsp;sbc #7<br />&nbsp; &nbsp;sta Sprite1_X<br />&nbsp; &nbsp;sta Sprite3_X<br />&nbsp; &nbsp;sta Sprite5_X<br />&nbsp; &nbsp;jmp infinite<br />faceleftloop:<br />&nbsp; &nbsp;lda #00<br />&nbsp; &nbsp;sta Sprite0_S<br />&nbsp; &nbsp;sta Sprite1_S<br />&nbsp; &nbsp;sta Sprite2_S<br />&nbsp; &nbsp;sta Sprite3_S<br />&nbsp; &nbsp;sta Sprite4_S<br />&nbsp; &nbsp;sta Sprite5_S<br /><br />&nbsp; &nbsp; lda Sprite0_Y<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;sta Sprite1_Y<br />&nbsp; &nbsp;adc #7<br />&nbsp; &nbsp;sta Sprite2_Y<br />&nbsp; &nbsp;sta Sprite3_Y<br />&nbsp; &nbsp;adc #8<br />&nbsp; &nbsp;sta Sprite4_Y<br />&nbsp; &nbsp;sta Sprite5_Y<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda Sprite0_X<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;sta Sprite2_X<br />&nbsp; &nbsp;sta Sprite4_X<br />&nbsp; &nbsp;adc #8<br />&nbsp; &nbsp;sta Sprite1_X<br />&nbsp; &nbsp;sta Sprite3_X<br />&nbsp; &nbsp;sta Sprite5_X<br /><br />&nbsp; &nbsp;<br />infinite:&nbsp; ; a label to start our infinite loop<br />WaitForVBlank:<br />&nbsp; &nbsp;lda VBlankOrNo ; A = VBlankOrNO<br />&nbsp; &nbsp;cmp #1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; if A == 1 then is VBlank<br />&nbsp; &nbsp;bne WaitForVBlank ; if not VBlank, then loop and do again<br />&nbsp; &nbsp;dec VBlankOrNo ; 1-- or VBlankOrNO - 1 . VBlankOrNo will be 0 again.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #3<br />&nbsp; &nbsp;sta $4014<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda #$01&nbsp; &nbsp;; these<br />&nbsp; &nbsp;sta $4016&nbsp; ; lines<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;; setup/strobe the <br />&nbsp; &nbsp;sta $4016&nbsp; ; keypad.<br /><br />&nbsp; &nbsp;lda $4016&nbsp; ; load Abutton Status ; note that whatever we ain't interested<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne jump_up<br />&nbsp; &nbsp;lda Sprite0_Y<br />&nbsp; &nbsp;cmp #200<br />&nbsp; &nbsp;beq un_fall<br />&nbsp; &nbsp;jmp set_fall<br />jump_up:<br />&nbsp; &nbsp;lda falling<br />&nbsp; &nbsp;cmp #1<br />&nbsp; &nbsp;beq fall<br />&nbsp; &nbsp;lda Sprite0_Y<br />&nbsp; &nbsp;cmp #150<br />&nbsp; &nbsp;beq set_fall<br />&nbsp; &nbsp;cmp #200<br />&nbsp; &nbsp;beq jump_sound<br />&nbsp; &nbsp;cmp #154<br />&nbsp; &nbsp;beq slow_jump<br />&nbsp; &nbsp;cmp #153<br />&nbsp; &nbsp;beq slow_jump<br />&nbsp; &nbsp;cmp #152<br />&nbsp; &nbsp;beq slow_jump<br />&nbsp; &nbsp;cmp #151<br />&nbsp; &nbsp;beq slow_jump<br />&nbsp; &nbsp;dec Sprite0_Y<br />&nbsp; &nbsp;dec Sprite0_Y<br />&nbsp; &nbsp;jmp check_b<br />slow_jump:<br />&nbsp; &nbsp;dec Sprite0_Y<br />&nbsp; &nbsp;jmp check_b<br />jump_sound:<br />&nbsp; &nbsp;lda #%11011111&nbsp; &nbsp;; #not# typical<br />&nbsp; &nbsp;sta $4000&nbsp; ; write<br /><br />&nbsp; &nbsp;lda #%10101011&nbsp; ; % means binary number, remember the '#' for immediate values.<br />&nbsp; &nbsp;sta $4001&nbsp; ; immediate means &quot;not an address, just a number&quot;.<br /><br />&nbsp; &nbsp;lda #$FF<br />&nbsp; &nbsp;sta $4002<br /><br />&nbsp; &nbsp;lda #%01111000<br />&nbsp; &nbsp;sta $4003<br /><br />&nbsp; &nbsp;lda #%00000001<br />&nbsp; &nbsp;sta $4015<br />&nbsp; &nbsp;dec Sprite0_Y<br />&nbsp; &nbsp;dec Sprite0_Y<br />un_fall:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta falling<br />&nbsp; &nbsp;jmp check_b<br />set_fall:<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta falling<br />fall:<br />&nbsp; &nbsp;lda Sprite0_Y<br />&nbsp; &nbsp;cmp #200<br />&nbsp; &nbsp;beq un_fall<br />&nbsp; &nbsp;cmp #153<br />&nbsp; &nbsp;beq slow_fall<br />&nbsp; &nbsp;cmp #152<br />&nbsp; &nbsp;beq slow_fall<br />&nbsp; &nbsp;cmp #151<br />&nbsp; &nbsp;beq slow_fall<br />&nbsp; &nbsp;inc Sprite0_Y<br />&nbsp; &nbsp;inc Sprite0_Y<br />&nbsp; &nbsp;jmp check_b<br />slow_fall:<br />&nbsp; &nbsp;inc Sprite0_Y<br /><br />check_b:<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Bbutton Status ; in we just load so it'll go to the next one.<br />&nbsp; &nbsp;and #1<br />&nbsp; &nbsp;bne BKEYdown<br />check_l_r:<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Select button status<br />&nbsp; &nbsp;lda $4016&nbsp; ; load Start button status<br />&nbsp; &nbsp;lda $4016&nbsp; ; load UP button status<br />&nbsp; &nbsp;lda $4016&nbsp; ; load DOWN button status<br />&nbsp; &nbsp;lda $4016&nbsp; ; load LEFT button status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne LEFTKEYdown<br />&nbsp; &nbsp;lda $4016&nbsp; ; load RIGHT button status<br />&nbsp; &nbsp;and #1&nbsp; &nbsp; &nbsp;; AND status with #1<br />&nbsp; &nbsp;bne RIGHTKEYdown<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br />BKEYdown:<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta running<br />&nbsp; &nbsp;sta running_sprite<br />&nbsp; &nbsp;jmp check_l_r<br />LEFTKEYdown:<br />&nbsp; &nbsp;lda running<br />&nbsp; &nbsp;cmp #1<br />&nbsp; &nbsp;beq run_left<br />&nbsp; &nbsp;dec Sprite0_X<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta face_left<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;inc sprite_change<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jmp check_sprite_change<br />run_left:<br />&nbsp; &nbsp;dec Sprite0_X<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta running<br />&nbsp; &nbsp;jmp LEFTKEYdown<br />RIGHTKEYdown:<br />&nbsp; &nbsp;lda running<br />&nbsp; &nbsp;cmp #1<br />&nbsp; &nbsp;beq run_right<br />&nbsp; &nbsp;inc Sprite0_X<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta face_left<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;inc sprite_change<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;jmp check_sprite_change<br />run_right:<br />&nbsp; &nbsp;inc Sprite0_X<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta running<br />&nbsp; &nbsp;jmp RIGHTKEYdown<br />&nbsp; &nbsp;<br />check_sprite_change:<br />&nbsp; &nbsp;lda running_sprite<br />&nbsp; &nbsp;cmp #1<br />&nbsp; &nbsp;bne sprite_load_new<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta running_sprite<br />&nbsp; &nbsp;lda sprite_change<br />&nbsp; &nbsp;cmp #0<br />&nbsp; &nbsp;beq sprite1<br />&nbsp; &nbsp;cmp #3<br />&nbsp; &nbsp;beq sprite2<br />&nbsp; &nbsp;cmp #6<br />&nbsp; &nbsp;beq sprite3<br />&nbsp; &nbsp;cmp #8<br />&nbsp; &nbsp;beq reset<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br />sprite_load_new:<br />&nbsp; &nbsp;lda sprite_change<br />&nbsp; &nbsp;cmp #0<br />&nbsp; &nbsp;beq sprite1<br />&nbsp; &nbsp;cmp #6<br />&nbsp; &nbsp;beq sprite2<br />&nbsp; &nbsp;cmp #9<br />&nbsp; &nbsp;beq sprite3<br />&nbsp; &nbsp;cmp #11<br />&nbsp; &nbsp;beq reset<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br />sprite1:<br />&nbsp; &nbsp;lda #2<br />&nbsp; &nbsp;sta Sprite2_T<br />&nbsp; &nbsp;lda #3<br />&nbsp; &nbsp;sta Sprite3_T<br />&nbsp; &nbsp;lda #4<br />&nbsp; &nbsp;sta Sprite4_T<br />&nbsp; &nbsp;lda #5<br />&nbsp; &nbsp;sta Sprite5_T<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br />sprite2:<br />&nbsp; &nbsp;lda #8<br />&nbsp; &nbsp;sta Sprite2_T<br />&nbsp; &nbsp;lda #9<br />&nbsp; &nbsp;sta Sprite3_T<br />&nbsp; &nbsp;lda #10<br />&nbsp; &nbsp;sta Sprite4_T<br />&nbsp; &nbsp;lda #11<br />&nbsp; &nbsp;sta Sprite5_T<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br />sprite3:<br />&nbsp; &nbsp;lda #14<br />&nbsp; &nbsp;sta Sprite2_T<br />&nbsp; &nbsp;lda #15<br />&nbsp; &nbsp;sta Sprite3_T<br />&nbsp; &nbsp;lda #16<br />&nbsp; &nbsp;sta Sprite4_T<br />&nbsp; &nbsp;lda #17<br />&nbsp; &nbsp;sta Sprite5_T<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br />reset:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta sprite_change<br />&nbsp; &nbsp;jmp Setupteh_Sprite<br /><br /><br />tilepal:&nbsp; &nbsp;.incbin &quot;agumon.pal&quot;&nbsp; ; a label for our pallete data<br />ourMap: .incbin &quot;agumon.map&quot; ; assuming our.map is the binary map file.<br />floorMap: .incbin &quot;floormap.map&quot;<br />&nbsp; &nbsp;.bank 2<br />&nbsp; &nbsp;.org $0000<br />&nbsp; &nbsp;.incbin &quot;alpha.bkg&quot;<br />&nbsp; &nbsp;.incbin &quot;agumon.spr&quot;<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jan 16, 2008 8:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The first thing that is seriously wrong with this code is how the PPU is configured only once at the start of the program (writes to $2000 and $2001).
<br />
<br />The correct way to configure the PPU is to write 0's to both registers (keeping rendering disabled). Then you must wait at least 2 frames for the PPU to become usable (it needs some time to become ready). You can just wait for VBlank twice, by reading bit 7 of $2002. You are free to do other things not related to the PPU while you are waiting for it to be ready, if you'd like, such as clearing memory or setting up variables.
<br />
<br />After those 2 frames have passed, you can use the PPU. You should keep rendering disabled while you do this. Only when you are done you can finally turn rendering on (by writing to $2001).
<br />
<br />The bad thing about your code is that you keep rendering enabled from the start, and then you just update the palette, write to the name tables... One of the most important rules of NEs programming is that YOU CAN'T WRITE DATA TO THE PPU (USING $2006 AND $2007) WHILE THE SCREEN IS RENDERING. If you do it, you not only get garbled graphics while you're doing it, but the writes will most likely go wrong and the PPU memory will be corrupt (wrong palettes, tiles, etc).
<br />
<br />So, the first thing to do is replace those 2 writes to $2000 and $2001 to write 0 to both locations. Then wait for 2 frames to go by... this can be done in a simple loop, where you read $2002 waiting for bit 7 to be set, twice. Then, after all the data has been written to the PPU, wait for VBlank again, so that you can enable rendering at a convenient time (instead of in the middle of a frame). THEN you write the definitive values to $2000 and $2001 (the values you have now).
<br />
<br />But never forget that you can't write data to the PPU while it's rendering graphics. If you need to write a lot of data to it (like when you are drawing a full screen), you must disable the rendering of sprites and background. Only when you're finished you can enable rendering again.
<br />
<br />During VBlank, you may send data to the PPU without disabling rendering, since VBlank is the time while the PPU is inactive anyway. But you must be careful not to go beyond VBlank time (about 2273 CPU cycles), or things will go pretty wrong, like I said earlier.
<br />
<br />Another pretty bad thing is that you seem to never set the scrolling registers through $2005. If you don't do this, rendering will start from a "random" location inside the name tables, and you'll hardly see what you expect. Be sure to ALWAYS set the scrolling AFTER you are finished with $2006 and $2007, and BEFORE rendering starts.
<br />
<br />If you are drawing tiles to the first name table, be sure to write 0 to $2005 twice (so that X and Y scroll are both 0). You also need to select which of the 4 name tables you want to show, and you do that by using the lower 2 bits of register $2000. You must do this every frame, after you are finished with writing stuff to the PPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Wed Jan 16, 2008 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow. Thanks for the fast reply. Again, this is taken straight from gbaguy so I thought something might be *fundamentally* wrong.
<br />
<br />Might that be why it throws sprite 0 into the very (PAL) top left? I guess changing will answer that. It's almost 1 her so I need some sleep. I'll try to implement all that tomorrow.
<br />
<br />Thank you!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 17, 2008 12:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another thing that make me wondering if how you declare your variables. It's really weird how you do this org .$300 and those .db $20, I wonder where you got this out (probably GBA guy ?). Oh, my, .db $20 in RAM what was that guy thinking make a tutorial with THIS inside ? He probably wrote some stuff he never tried to assemble, let alone maybe testing this on an emulator.
<br />
<br />While all of this may not be absolutely necessary, I strongly recommand setting the interupt disable flag (sei), initialise the stack pointer to $ff, and mute the sound at startup. I also recommand clearing your memory, but that isn't really necessary if you initialise each variable individually when you use them. You just cannot rely on them as having any initial value. If you initialise all variables to 0, then you are sure they have the value 0 at startup. This can also being a bad thing, because it's basically bad to rely on an initial value for newbies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jan 17, 2008 8:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">It's really weird how you do this org .$300 and those .db $20, I wonder where you got this out (probably GBA guy ?).</div><br />What is the correct way to declare variables in NESASM then? The other assemblers I've worked with had commands to reserve bytes, I'm not sure if NESASM has anything like this. Directly assigning values to the labels (Score = $05) is not practical at all.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I strongly recommand setting the interupt disable flag (sei)</div><br />That's quite important actually, since there is no IRQ handler defined in that code (he uses 0 for the vector). Should an IRQ happen (and AFAIK, APU IRQ's are enabled on startup), the 6502 will try to execute code from RAM address $0000, and that would be disastrous. So yeah, "sei" should be the very first command in the program.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">initialise the stack pointer to $ff, and mute the sound at startup.</div><br />These are less important, because the effects of not doing that are much less disastrous (for most uses, the stack pointer can be anything as long as you don't touch the memory at $0100-$01ff, and if the NES happens to output any kind of sound, that won't break your program either).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I also recommand clearing your memory, but that isn't really necessary if you initialise each variable individually when you use them.</div>
<br />My personal point of view is that clearing the whole memory is bad, because it induces bad programming. There is simply no need to do it if you are careful and initialize every variable. You have to be careful anyway if you want to reuse variables as you go along (for example, your bonus stage and your main game engine can use the same RAM for different purposes, since they are never executed together)... I'd rather only clear blocks of RAM in the case of arrays or other large structures, but never the whole memory.
<br />
<br />Some newbies like that idea because it sometimes does fix whatever is wrong with their programs, but that's because they weren't careful enough with their variables in the first place, and that part should be worked on, but instead people prefer to patch the problem with a memory-clearing routine, something that doesn't teach them anything about better programming practices.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 17, 2008 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What is the correct way to declare variables in NESASM then? The other assemblers I've worked with had commands to reserve bytes, I'm not sure if NESASM has anything like this. Directly assigning values to the labels (Score = $05) is not practical at all. </div><br />I remeber assigning values manually to all my variables back when I used NESAsm, but that wasn't for a very long time anyway. On a "normal" assembler .db $20 reserves $20 bytes or RAM, while .db alone is for one byte. .db 0 has no sense, and often they use dsb instead of db to avoid confusing with .db in ROM wich directly set bytes.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's quite important actually, since there is no IRQ handler defined in that code (he uses 0 for the vector). Should an IRQ happen (and AFAIK, APU IRQ's are enabled on startup), the 6502 will try to execute code from RAM address $0000, and that would be disastrous. So yeah, "sei" should be the very first command in the program. </div><br />Normally the I flag is automatically set on each CPU reset (no matter if it's hard or soft), just like it is automatically set on IRQs and NMIs. I'm not sure if many emulators does it that way. Doing a cli later withotu having a IRQ routine would, however, have the effect you mention.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Some newbies like that idea because it sometimes does fix whatever is wrong with their programs, but that's because they weren't careful enough with their variables in the first place, and that part should be worked on, but instead people prefer to patch the problem with a memory-clearing routine, something that doesn't teach them anything about better programming practices.</div>
<br />You are probably right, and I usually try to have variables initialised the good way (even if it can sometimes leaves less efficient code). Howver, in my current project I still have a memory reset routine at startup, and to be honnest I tried removing it and my game crashed... (but only when gameplay begin). I don't know wich variable exactly I rely to be zero on startup, but there is at least one in this case.
<br />
<br />Finally it's pratical for example the sound code routine have an "channel enabled" flag, and the music will be disabled on a particular channel if this variable is zero, while having it set to different value can have various effect. You'll admit that it's way easier to have the programm clearing the memory at startup and then you can call the sound programm directly without wondering anything, it won't try to play unexistant music or anything. If you don't clear the memory then you have to make a routine that proprely initialise the sound routine, and you'll admit that this is much less efficient. The same aplies to other domains as well, but sound code is the most representative.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Thu Jan 17, 2008 11:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i zero out ram because i (usually) have nothing else to do for 2 frames.  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />the idea of wasted cycles is frightening.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Jan 17, 2008 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You really don't need to wait two frames at startup, where did this idea come from?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Skidlz</b> [ Thu Jan 17, 2008 1:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Huzzah!</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It works! Thanks everyone! Before it worked on about 6 out of 10 emus now it works on all of them <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> . The only problem is part of the background is missing under Jnes. I assume this will fix it --v
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you are drawing tiles to the first name table, be sure to write 0 to $2005 twice (so that X and Y scroll are both 0). You also need to select which of the 4 name tables you want to show, and you do that by using the lower 2 bits of register $2000. You must do this every frame, after you are finished with writing stuff to the PPU.</div><br /><br />I gave $2005 two zeros but I don't know what to feed $2000. Do I give it normal 01 and 10 or does it need something else strange?<br /><br />From NES 101 --v<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">We're only scrolling vertically, which means that we should use Horizontal Mirroring. Our name tables will be at $2000 (mirrored at $2400) and $2800 (mirrored at $2C00) in VRAM.<br /></div>
<br />
<br />I want to add scrolling so it can at least slightly resemble a game. I guess that would be horizontal mirroring? Is it the direction or axis that they share?
<br />
<br />Thanks allot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2008 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On most assemblers, .db $nn defines one or more bytes of constant data. .ds n is what reserves n bytes without specifying their values. BTW, it makes no sense to assign values to RAM, since the assembler doesn't generate any initialization code, just gives names to addresses. At the very least an assembler should give a warning if you attempt to give RAM an initial value.
<br />
<br />As for clearing all RAM, it makes a lot of sense to me now, since you can declare a variable then rely on it being initialized to zero if you haven't used it yet. This eliminates lots of pointless clearing to zero before first use and the clutter that comes with it. That alone reduces bugs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Thu Jan 17, 2008 2:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">You really don't need to wait two frames at startup, where did this idea come from?</div>
<br />
<br />i don't know where it originated from, but i read it before and did it since it only adds 4 lines of code. the <a href="http://nesdevwiki.org/wiki/index.php/Init_code" class="postlink">wiki</a> has it under init code examples.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jan 17, 2008 2:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">On most assemblers, .db $nn defines one or more bytes of constant data. .ds n is what reserves n bytes without specifying their values. BTW, it makes no sense to assign values to RAM, since the assembler doesn't generate any initialization code, just gives names to addresses. At the very least an assembler should give a warning if you attempt to give RAM an initial value.</div><br />On wla-dx, the proper way to declare a signe-byte variable called "MyVariable" is :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ramsection &quot;MyRamSection&quot;<br />MyVariable&nbsp; &nbsp;db<br />.ends<br /></div><br />If you replace db per .db, it's about the same exept that the index isn't incremented, so the next db will assign the label to the same value. This is usefull to give multiple name to the same variable or if you want to declare it once as two separate bytes and once at a word.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You really don't need to wait two frames at startup, where did this idea come from?</div><br />Of course this is needed if you want to do anything with the PPU (exept than turning it off). This has been widely doccumented even since the Nesticle days, so I don't know where you are from. However to do uniquely CPU process, and most probably joypad reading will work straight on reset. I don't know about sound, I remember it had a short warming up time too. And I don't see what clearing RAM has to do with waiting 2 frames, exept that both are things you would usually do at startup.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I want to add scrolling so it can at least slightly resemble a game. I guess that would be horizontal mirroring? Is it the direction or axis that they share? </div>
<br />There is MANY scrolling methods, and the mirroring you want to use all depend on the scrolling method, how far your screen is scrolling or how you want to repeat it, if your cartridge has scanline IRQs or not, and what kind of mirroring your cartridge allows. Assuming it only allows the standard H/V mirroring, and that you have no status bar nor rasting effect, you want to use horizontal mirroring to scroll vertically and vice verse. Because to scroll vertically, you want screens to be arranged vertically, so mirrored horizontally.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Jan 17, 2008 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Of course this is needed if you want to do anything with the PPU (exept than turning it off). This has been widely doccumented even since the Nesticle days, so I don't know where you are from. </div>
<br />It may be "documented" but is it rooted in any fact? I thought this was debunked a while ago, so where were you? I know on my Famicom I can immediately start using the PPU address register, so it's not a rule, maybe an obscure exception, but probably not even.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Jan 17, 2008 5:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have definitely found odd PPU behavior when trying to use it immediately. Same for APU. Commercial games often wait at least two frames, adding to the evidence.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Jan 17, 2008 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What could you be waiting for though? An RC time constant in the POR circuit?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>