<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - USB Based GamePak Copier</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">USB Based GamePak Copier</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=822">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=822</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danimal</b> [ Mon Dec 12, 2005 5:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>USB Based GamePak Copier</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In another topic it was mentioned that a USB based cart copier would be a good idea.  I agree with that Idea, especially since MB manufacturers are moving away from Parallel and Serial ports and some people report limited success with PCI based alternatives.
<br />
<br />I have done some googling and checking and here is what I found:
<br />
<br />First I looked at USB and found that the memory sticks all have a common driver called USB Mass Storage Device.  This is a standard driver specified by the USB standard documents.
<br />
<br />Second I thought, this is one step away from writing a cart too so I started looking for EEPROM Programmer based on a USB Mass storage device.  (I realize that because not all EEPROMs (and Mappers) are the same this may be a bit naieve).  This is the closest thing I have to the idea:  <a href="http://www.sslug.dk/~chlor/prom/" class="postlink">http://www.sslug.dk/~chlor/prom/</a>  .  To overcome the mapper problem and any exceptional situtations a CRC database could be in the device's Firmware.
<br />
<br />Third, since there is no USB Mass Storage Device based EEPROM Programmer, is there a USB-MSD development kit.  I did find a few but their descriptions are a bit beyond my current technical level.  I do intend to bridge this knowledge gap.
<br />
<br />Based on my current understanding is that the device should work this way:
<br />A controller checks a connected cart's CRC, matchs it to the database then, creates a ramdrive of the ROM Data.  If writing wants to be done, hooks in the controller can be used to store it in the ram drive then copy to the EEPROM.
<br />
<br />Possible directory structure:
<br />&lt;device&gt;/prg/&lt;1, 2, 3, ..., page numbers&gt;
<br />&lt;device&gt;/chr/&lt;1, 2, 3, ..., page numbers&gt;
<br />&lt;device&gt;/unif/image.unif (.nes and pasofami too)
<br />&lt;device&gt;/info.txt (basic information file of the ROM ie CRC number, etc)
<br />&lt;device&gt;/firmware/firmware.bin
<br />
<br />What do you guys think?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 12, 2005 5:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: USB Based GamePak Copier</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">danimal wrote:</div><div class="quotecontent">To overcome the mapper problem and any exceptional situtations a CRC database could be in the device's Firmware.</div>
<br />Bad idea: <ul><li>If you plan to CRC the whole file, how would you know the mapper? </li><li>If you plan to CRC say the last 8 KB (which is usually hardwired), then how will you handle 32 KB mappers with no well-defined initial state (e.g. GNROM, A*ROM, Color Dreams)? </li><li>Most importantly, what would happen if the CRC doesn't match any in the database? </li></ul>
<br />Anyway, I'd suggest putting a USB Serial device and a USB Mass Storage device in the same unit. The serial device would be used for direct single-byte reads and writes to the buses; the mass storage device would allow for speedy bulk reads of raw 512 byte segments of CHR (sectors 0 to 31) or PRG (sectors 32 to 127) data. Sure, you'd need specialized software to control this sort of mapper, but it should be reasonably portable across different operating systems that know how to speak USB.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teaguecl</b> [ Mon Dec 12, 2005 11:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am developing a USB based cart dumper, I'm calling it CopyCart.  The schematic is done, I'm going to be ordering my first set of boards in the next week or so.  I have set it up to use the USB as an emulated UART, and defined a simple protocol to read/write from any address.  That way, all of the "mapping" smarts stay on the PC (equivalent of CopyNES's plugins).  The PC software is written in Python, which means even though I'm developing on Linux it should work just fine in Windows.  I'll post more info here when I get some web space set up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danimal</b> [ Tue Dec 13, 2005 7:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: USB Based GamePak Copier</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Bad idea: <ul><li>If you plan to CRC the whole file, how would you know the mapper? </li><li>If you plan to CRC say the last 8 KB (which is usually hardwired), then how will you handle 32 KB mappers with no well-defined initial state (e.g. GNROM, A*ROM, Color Dreams)? </li><li>Most importantly, what would happen if the CRC doesn't match any in the database? </li></ul></div>
<br />
<br />Reading the first 32kb PRG of most carts would work, even if its mirrored the CRC could still be calculated. If its not found in the list that way then different strategies can be used to find the consistant portion of ROM and CRC them.  (ie do a process of elimination around SRAMs and the like).
<br />
<br />Ultimately if there is no CRC a file can still represent the rom to. (32k PRG file, 10k CHR file)
<br />This one feature I find most important, because you could easily write programs to access files and have the device do all the leg work of putting the bits on the right bus and the like.  Still if you want access to the individual bits of the cart another file can be used.
<br />
<br />By having a standardize file system interface to the rom I only see programming and emulation benefits.  Theoretically you could emulate the 72 pin connector this way and run the emulator strait off the rom and all the copy tools and features you want, easily.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Dec 13, 2005 10:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm a "little" lost, by copier do you mean simply a backup device (ie no playback)? It sounded like you wanted a backup only device where a MCU does all the work and presents the PC with files similarly to a digital camera, that is until you start talking about EEPROM... I don't see how EEPROM fits into any of this unless your concept intends to playback games. 
<br />Also could you clarify what you mean by this:
<br />"Theoretically you could emulate the 72 pin connector this way and run the emulator strait off the rom and all the copy tools and features you want, easily."
<br />That sounds to me like an entirely different project for playback. When you say "run the emulator strait off the rom", what ROM are you referring to? What's running the emulator?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teaguecl</b> [ Tue Dec 13, 2005 11:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I agree with kyuusaku, what danimal is describing is just mapping a filesystem to a removable media (in this case a cartridge).  For purposes of playing a game back, this really isn't that great an idea.  It's no better than playing off a hard drive image, except that it's much slower.  In addition, the many variations of cart hardware make the FS implementation difficult - when you could just as easily have separate user space apps for each specific piece of hardware.  It's an interesting idea, but not worth the effort imo.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danimal</b> [ Wed Dec 14, 2005 3:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">"Theoretically you could emulate the 72 pin connector this way and run the emulator strait off the rom and all the copy tools and features you want, easily."<br />That sounds to me like an entirely different project for playback. When you say "run the emulator strait off the rom", what ROM are you referring to? What's running the emulator?</div>
<br />
<br />Sorry I wasn't clear, I mean the emu could read the rom directly through the file system inferface that is provided by the USB Mass Storage Device.
<br />
<br />ROM is basically similar to EEPROM, I think you could make a lot of money haveing a USB-MSD based EEPROM programmer too.
<br />
<br />Benefits:
<br /><ul><li>USB-MSD is cross platform and well standardized. (BSD, Linux, Windows, Mac) (Unix remember, everything is a file).</li><li>For C(++) programmers would you rather make standard file system calls to functions like fsetpos (), read (), and write (), than having to package the request in some protocol.  (ioctl () calls don't sound like fun to me) Java programmers would be able to make truly cross platform tools.</li><li>You could still keep all the complex utilities on the PC and use the standard I/O interface.</li><li>Bit by bit control of the cart is still possible with special file setups.</li><li>You would not be tied to one person's ROM dump interface or program if it were not an open project.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Wed Dec 14, 2005 6:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK I understand, this would be a way to legally play (and solely backup) games. As I'm sure you know the same thing could be realized far simpler with a simple USB&lt;-&gt;edge interface such as teaguecl's with a portable library. I'm also anti-CRC but should you find a input-less way around it, the more power to you.
<br />
<br />I don't know about a programmer though, without a doubt the programmer would need user input due since the MCU cannot properly choose algorithms based on product ID alone. Doesn't that negate the purpose of the MSD interface? I definately wouldn't go for a programmer without instantaneous feedback and I'm not so sure I'd even take in a free non-universal programmer anymore. I think energy would be better spent developing a simple yet effective open source ~100-pin USB universal programmer and control software which utilizes high level scripts. <em>That</em> truely would be a milestone in the programmer world, it may be the end of device support overhead due to the open algorithms.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>