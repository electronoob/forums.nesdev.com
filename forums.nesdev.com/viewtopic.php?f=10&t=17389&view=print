<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17389">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=17389</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dugongue</b> [ Thu May 24, 2018 4:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,<br />I'm trying to teach myself to read NES assembly code &amp; I hit a snag.<br />I used disasm6 v1.5, both with and without use of a CDL file from FCEUX and the resultant ASM file is chock full of invalid Opcode errors.<br />Here is a sample section:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bvc __83aa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $83e8: 50 c0&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $83ea: d8&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex ef a3 40&nbsp; &nbsp; &nbsp; ; $83eb: ef a3 40&nbsp; Invalid Opcode - ISC $40a3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex cf 0c 72&nbsp; &nbsp; &nbsp; ; $83ee: cf 0c 72&nbsp; Invalid Opcode - DCP $720c<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bcs __83a6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $83f1: b0 b3&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sbc #$9c&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $83f3: e9 9c&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex a3 02&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $83f5: a3 02&nbsp; &nbsp; &nbsp;Invalid Opcode - LAX ($02,x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex cf 20 09&nbsp; &nbsp; &nbsp; ; $83f7: cf 20 09&nbsp; Invalid Opcode - DCP $0920<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sbc $00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $83fa: e5 00&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; brk&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $83fc: 00&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex 6f 0c 7e&nbsp; &nbsp; &nbsp; ; $83fd: 6f 0c 7e&nbsp; Invalid Opcode - RRA $7e0c<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex d3 b3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $8400: d3 b3&nbsp; &nbsp; &nbsp;Invalid Opcode - DCP ($b3),y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sbc #$60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $8402: e9 60&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex d4 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $8404: d4 04&nbsp; &nbsp; &nbsp;Invalid Opcode - NOP $04,x<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex 57 c0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $8406: 57 c0&nbsp; &nbsp; &nbsp;Invalid Opcode - SRE $c0,x<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $8408: d8&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex 1f a4 0c&nbsp; &nbsp; &nbsp; ; $8409: 1f a4 0c&nbsp; Invalid Opcode - SLO $0ca4,x<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex 72&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $840c: 72&nbsp; &nbsp; &nbsp; &nbsp; Invalid Opcode - KIL <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex d3 8b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $840d: d3 8b&nbsp; &nbsp; &nbsp;Invalid Opcode - DCP ($8b),y<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex 12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $840f: 12&nbsp; &nbsp; &nbsp; &nbsp; Invalid Opcode - KIL <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda $8c,x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $8410: b5 8c&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pla&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; $8412: 68&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bvs __83d0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $8413: 70 bb&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .hex b3 e9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; $8415: b3 e9&nbsp; &nbsp; &nbsp;<br /></div><br /><br />I'm assuming that this isn't correct and that something went wrong?<br />I know that it's possible for this to happen if I have a bad ROM dump &amp; I saw bootgod's site mentioned but I don't know how to check the CRC32 values of the file I have against the database.<br /><br />Thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Thu May 24, 2018 4:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Out of context, it's impossible to know what this is. Not code. Possibly data.<br /><br />Probably better to step through the running game in a debugger, if you want to learn. Or better yet, look at some open-source properly labelled source code.<br /><br />I've been reading 6502 asm for 30 years, and I can't just look at a random bit of compiled code and have any idea what I'm seeing. Sometimes I do, like when there's a STA to a sound register, I know it's part of the music code. But usually I don't know.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nesrocks</b> [ Thu May 24, 2018 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do like dougeff said. With the emulator you can even hex edit the code/data 1 byte at a time in real time and see how the game changes (use savestates and breakpoints for this). Emulators recommended: mesen and fceux.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 24, 2018 4:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm off the opinion that disassembling code is not a particularly efficient way to get started with learning assembly. A full commercial game can be pretty daunting, specially without labels and comments. Also, if you're not already acquainted with common game programming patterns, it'll be really hard to make any sense of the raw assembly code.<br /><br />I can understand the sentiment of wanting to see what makes your favorite games tick, as opposed to dealing with boring introductory programs, but even experienced coders have a hard time making sense of disassembled code, so that's hardly a good path for people who are just getting started.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu May 24, 2018 5:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's data, not code.  100% certain.  I can tell by the pattern.  You get a kind of &quot;gut feeling&quot; for this stuff the familiar you get with it; pretty sure everyone here can attest to that.  :-)<br /><br />You cannot simply take a ROM and dissassemble it and expect &quot;obvious&quot; results.  It doesn't work like that.  It's up to you, the individual doing the reverse-engineering, to figure out what is code vs. data.  Disassemblers tend to not cater well to this kind of thing**.  You get to put in long, long, long hours.  PRG doesn't always mean &quot;program/code&quot; either, as many games use CHR-RAM thus graphical data is stored in PRG (and sometimes is compressed too, varies per game).  You get to RE all of it.  :-)<br /><br />You're better off if you can pinpoint something you want to reverse-engineer -- try to use breakpoints in FCEUX/Mesen/etc. to find out &quot;where&quot; the code might be, disassemble things (hopefully with the correct PRG bank and origin address), then look at that specific code.  You will be working in the emulator in real-time *as well* as referring to the dissassembly.  Large games that involve mappers (i.e. switch PRG) make this a bit more complicated.<br /><br />I could show you what I did with the Neo Demiforce FF2e/FF2j intro replacement, where I had to disassemble the last PRG bank (which represented $C000-FFFF) + inject my intro code and graphics + reassemble the entire thing (meaning I had to use a dissasembler that generated code that could be reassembled by a compatible assembler), but I haven't gotten around to putting together something official/clear/concise that explains it.  It's a mess -- RE'ing always is.  Here's the directory listing and bat file, which won't make much sense to you, but gives you some idea of the mess.  The disassembler I used was TRaCER for MS-DOS (I'm the author) and the assembler I used was x816 for MS-DOS.  Note neither of these programs work on present-day Windows:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1998-08-23&nbsp; 13:38&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;116,397 C000.ASM<br />1998-08-23&nbsp; 13:48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 C000.BIN<br />1998-08-23&nbsp; 13:48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;553,527 C000.LST<br />1998-03-19&nbsp; 00:28&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;245,776 FF2-MOD.NES<br />1998-08-23&nbsp; 13:48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;262,160 ff2-test.nes<br />1998-08-24&nbsp; 03:59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8,192 ff2-test.sav<br />1998-06-13&nbsp; 15:53&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;169,479 FF2-TEST.ZIP<br />1998-08-23&nbsp; 13:48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8,638 INTRO.ASM<br />1998-03-16&nbsp; 09:52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;111 make.bat<br />1998-03-26&nbsp; 14:09&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1,736 pal.txt<br /></div><br />make.bat:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">@echo off<br />x816 -l c000.asm<br />del ff2-test.nes<br />copy /b ff2-mod.nes+c000.bin ff2-test.nes &gt; nul<br />dir ff2-*.*</div><br />Other random brain dump stuff:<br /><br />Part of the above process involved using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fc /b</tt> to compare the newly-assembled ROM to that of the old, to ensure only the bytes that differed were the stuff I had changed.  Back then hex editors like HxD didn't exist, but there were other tools that did it similarly; I just happen to be used to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">fc</tt> which came with DOS/Windows.<br /><br />I recommend doing exactly that with a straight disassembly (i.e. no changes) as well: disassemble something, then reassemble it using a compatible assembler, and see if the results are identical.  If they aren't, then you get to figure out why -- it's often the assembler picking some wrong addressing mode, an incompatibility between disassembler and assembler, or a downright bug in the assembler.<br /><br />If things match, great.  After that, you get to try and start &quot;piecing together&quot; bits.  That often means going and editing the disassembly by hand to deal with places where there are code and data intermixed, turning the data into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.db</tt> statements, and then manually fixing the code so it's legible.  This often happens on a &quot;data/code boundary&quot;, where the piece of data happens to be a legitimate instruction (but isn't actually code), thus disassembled code with an operand, but the *actual* code is all of, or part of, the operand bytes themselves.  This is hard to describe in words so here's an example.  Take these addresses and their raw bytes:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">f9fb: d4<br />f9fc: 15<br />f9fd: e2<br />f9fe: ea<br />f9ff: 45<br />fa00: 4c<br />fa01: 9e<br />fa02: fa<br /></div><br />These might get disassembled like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">f9fb: d4&nbsp; &nbsp; &nbsp; &nbsp; .db $d4&nbsp; &nbsp; &nbsp; ; invalid opcode<br />f9fc: 15 e2&nbsp; &nbsp; &nbsp;ora $e2,x<br />f9fe: ea&nbsp; &nbsp; &nbsp; &nbsp; nop<br />f9ff: 45 4c&nbsp; &nbsp; &nbsp;eor $4c<br />fa01: 9e&nbsp; &nbsp; &nbsp; &nbsp; .db $9e&nbsp; &nbsp; &nbsp; ; invalid opcode<br />fa02: fa&nbsp; &nbsp; &nbsp; &nbsp; .db $fa&nbsp; &nbsp; &nbsp; ; invalid opcode<br /></div><br />But after appropriate analysis/reverse-engineering, it's determined that $FA00 is actually code, while preceding bytes are data.  So once cleaned up manually, you get this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">f9fb: d4&nbsp; &nbsp; &nbsp; &nbsp; .db $d4<br />f9fc: 15&nbsp; &nbsp; &nbsp; &nbsp; .db $15<br />f9fd: e2&nbsp; &nbsp; &nbsp; &nbsp; .db $e2<br />f9fe: ea&nbsp; &nbsp; &nbsp; &nbsp; .db $ea<br />f9ff: 45&nbsp; &nbsp; &nbsp; &nbsp; .db $45<br />fa00: 4c 9e fa&nbsp; jmp $fa9e<br /></div><br />How you determine this is through a combination of using an emulator to &quot;walk through&quot; the code in real-time to figure out what's actual code vs. data, and staring at the disassembly + following it carefully.  In this example, I learned that there was code doing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp $fa00</tt> so I therefore knew $fa00  itself had to contain code -- then later found some code that read $f970 to $f9ff as data.  Hence, I knew what was what.<br /><br />I'll add that this was in the days *before* there were emulators with CDL capability... but it doesn't change a thing -- you still have to know what it is you're looking at, you can't rely on a machine to &quot;magically figure it out&quot;.<br /><br />If your reaction is &quot;oh my god, doesn't that take a lot of time to do?!?!&quot; the answer is a <span style="text-decoration: underline">big fat yes</span>.  Welcome to reverse-engineering.<br /><br />As for games which use mappers / multiple banks of PRG, quite often you have to split the ROM up into its individual PRG banks and dissassemble each as needed.  An example of some of the never-completed work I did on Rampart (Japanese release) required that (I've since deleted all my work since someone last year or the year before made an English release so my work was pointless), ditto with some work I was doing on RoboWarrior / Bomber King:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2016-09-19&nbsp; 00:12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;557,626 prg00.asm<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg00.bin<br />2016-09-19&nbsp; 00:58&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;553,584 prg01.asm<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg01.bin<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg02.bin<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg03.bin<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg04.bin<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg05.bin<br />2016-09-19&nbsp; 01:35&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;524,844 prg06.asm<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg06.bin<br />2016-09-19&nbsp; 01:00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;470,263 prg07.asm<br />2016-09-19&nbsp; 00:07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16,384 prg07.bin<br />2016-06-13&nbsp; 22:45&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;131,088 Robo Warrior (U) &#91;!&#93;.nes<br />2016-09-19&nbsp; 00:09&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;131,072 rom.bin<br /></div><br />RoboWarrior is <a href="https://wiki.nesdev.com/w/index.php/UxROM" class="postlink">mapper 2 / UNROM</a> game, so the last 16KB bank is hard-wired to $C000-FFFF. You'll probably notice how I disassembled certain banks: prg00, prg01, and prg06 all had scattered code I was needing to examine/RE, and of course, prg07 (the last bank, thus a good starting point since it contains all 6502 vectors; for mappers like this it tends to contain &quot;the guts&quot; with critical routines that get used everywhere, etc.).  Started with the last bank, then gradually worked through the code (emulator + disassembler combined) until I figured out what other PRG banks I needed to look at, disassembled them, blah blah.  The disassembler I used for this was <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">disasm6</tt> v1.5.  There's no <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.bat</tt> file because I was doing everything manually by hand.<br /><br />Starting to get the picture?<br /><br />** Warning to pedants: yes I'm aware of a PHP-based disassembler that can read/use CDL files.  You cannot tote this as a one-line &quot;solution&quot;, and shouldn't.  Because then you have to explain how to generate a CDL file, and how an emulator generates that file, and how the emulator determines code vs. data, and how the person playing the game while generating the CDL has to do every single thing possible in the game, down to miniscule things like loading a menu from point A vs. point B, pressing up vs. down vs. left vs. right in every place in the game including pause screens, etc. -- when I say LITERALLY DO EVERY SINGLE THING, I do mean LITERALLY **EVERY SINGLE THING**.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Fri May 25, 2018 1:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There must be some &quot;manual&quot; for 6502 in Japanese that shows how to do the &quot;read data past the JSR with stack manipulations&quot; as for some reason a lot of Japanese games I look at do it. so you get<br />JSR somePlace<br />.word Address, Address, Address, Address<br />code<br /><br />just to make things more confusing.. this trend seems to carry onto the SNES where there are multiple ways to skin the cat...<br /><br />But basically as said above, reversing a 6502 game is a &quot;grand-master&quot; task, you really need to know how code works, flows, understand all the archaic tricks the programmers might have used, be able to make judgment calls on what is code and data, find Tables etc However you need to understand the data and then you will understand the code. Also using something interactive like Regenerator makes it a fair bit faster to edit and add variables.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Fri May 25, 2018 3:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">There must be some &quot;manual&quot; for 6502 in Japanese that shows how to do the &quot;read data past the JSR with stack manipulations&quot; as for some reason a lot of Japanese games I look at do it. so you get<br />JSR somePlace<br />.word Address, Address, Address, Address<br />code</div><br /><br />On the 6502, this technique goes all the way back to the Apple II firmware written by Woz. It's not unusual on the Z80 either.<br /><br />Dragon Warrior 3 and 4 actually do this with BRK! Effectively they use BRK as a prefix for a set of software-defined instructions. The most frequently used one, as you might expect, is the &quot;far JSR&quot; (call a subroutine in a different ROM bank, storing the return bank on the stack) but some of the software-defined instructions are more high-level things like playing sound effects, printing messages, and getting/setting character status (HP, experience, etc.)<br /><br />If you use BRK this way on the NES, your NMI handler has to detect the NMI hijack condition, and if necessary chain into your BRK handler rather than RTI into invalid code. The way the Dragon Warrior games do this is by encoding the software-defined instructions such that the first byte after the BRK always has bits 0 and 1 set--which no legal 6502 instruction does. The NMI handler epilogue peeks at the byte at the return address, and if it is not a 6502 instruction then it jumps to the BRK handler instead of executing an RTI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri May 25, 2018 11:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want to learn to read NES (6502) assembly by using this method, take one of the commented disassemblies, like <!-- m --><a class="postlink" href="http://www.romhacking.net/documents/367/">http://www.romhacking.net/documents/367/</a><!-- m --> (Metroid). You can find disassemblies of many other commercial games on that site, with varying levels of completeness.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CaH4e3</b> [ Mon Jul 02, 2018 10:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />little bit late, but Dragon Warrior 3 fully disassembled and somehow re'ed. <!-- m --><a class="postlink" href="https://github.com/zeromus/DragonWarrior3">https://github.com/zeromus/DragonWarrior3</a><!-- m --><br /><br />the special BRK opcodes are macrocified and can be read much more easier than the original commands

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Tue Jul 17, 2018 10:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Trying ROM Disassembly &amp; getting lots of Invalid Opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That’s data that disasm6 doesn’t recognize as data for whatever’s reason so it treats it as code.  Disasm6 tries to guess what is data based on if the memory area is read using lda or similar.. this chunk must not be read using those methods nor has the emulator encountered it when you recorded the cdl file.  It could just be dummy bytes

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>