<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8385" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-12-30T16:34:20-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8385</id>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-12-30T16:34:20-07:00</updated>
<published>2011-12-30T16:34:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=88205#p88205</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=88205#p88205"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=88205#p88205"><![CDATA[
<div class="quotetitle">Zelex wrote:</div><div class="quotecontent"><br />How did you generate the Base64 (err, Base256? =D) encoded strings? Another program, or by hand?<br /></div><br />Sorry about taking many days to notice your post. phpBB only sent me a notification of your first post, and I did not know about the second one. Or the third one.<br />Answer: Another program.<br /><br />For each micro-op (each of those lines is one), a list of opcodes using that micro-op is built.<div class="codetitle"><b>Code:</b></div><div class="codecontent">  // $point = current micro-op ID, $plans = list of micro-ops required by all opcodes &#40;the list is called a &quot;plan&quot;&#41;<br />  $ops = Array&#40;&#41;;<br />  foreach&#40;$plans as $op =&gt; $plan&#41;<br />    if&#40;isset&#40;$plan&#91;$point&#93;&#41;&#41;<br />      $ops&#91;$op&#93; = $op;</div>Then the list is converted into a string by translating 8 bits at once using a character lookup array:<div class="codetitle"><b>Code:</b></div><div class="codecontent">    $ranges = Array&#40;&#41;;<br />    for&#40;$n=0; $n*8&lt;0x103; ++$n&#41; //<br />      $ranges&#91;&#93; = 0;<br />    foreach&#40;$ops as $o&#41;<br />      $ranges&#91;&#40;int&#41;&#40;$o / 8&#41;&#93; |= 1 &lt;&lt; &#40;$o % 8&#41;;<br />    $s = '';<br />    for&#40;$n=0; $n*8&lt;0x103; ++$n&#41; //<br />      $s .= $rangebytetranslation&#91;$ranges&#91;$n&#93;&#93;;<br />    $s = '&quot;'.$s.'&quot;';</div><br />The lookup array (which determines which character maps into which byte) was built as follows:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$bitno = 0;<br />// Initial version, using BASE64 &#40;6 bits per character&#41;:<br />$charset = &quot; !&quot;;<br /> for&#40;$c=0; $c&lt;15; ++$c&#41; $charset .= chr&#40;65+$c&#41;; // A-O<br /> for&#40;$c=0; $c&lt;11; ++$c&#41; $charset .= chr&#40;80+$c&#41;; // P-Z<br /> for&#40;$c=1; $c&lt;10; ++$c&#41; $charset .= chr&#40;48+$c&#41;; // 0-9 <br /> for&#40;$c=0; $c&lt;15; ++$c&#41; $charset .= chr&#40;97+$c&#41;; // a-o <br /> for&#40;$c=0; $c&lt;11; ++$c&#41; $charset .= chr&#40;112+$c&#41;; // p-z<br /><br />// Figure out which kind of bytes we actually are going to need to present:<br />$rangebytetranslation = Array&#40;&#41;;<br />$rangebytes = Array&#40;&#41;;<br />foreach&#40;$points as $point =&gt; $code&#41;<br />&#123;<br />  $ops = Array&#40;&#41;;<br />  foreach&#40;$plans as $op =&gt; $plan&#41; if&#40;isset&#40;$plan&#91;$point&#93;&#41;&#41; $ops&#91;$op&#93; = $op;<br />  $ranges = Array&#40;&#41;;<br />  for&#40;$n=0; $n*8&lt;0x103; ++$n&#41; $ranges&#91;&#93; = 0;<br />  foreach&#40;$ops as $o&#41;         $ranges&#91;&#40;int&#41;&#40;$o / 8&#41;&#93; |= 1 &lt;&lt; &#40;$o % 8&#41;;<br />  foreach&#40;$ranges as $v&#41; @$rangebytes&#91;$v&#93; += 1;<br />&#125;<br />ksort&#40;$rangebytes&#41;; #$rangebytes = array_reverse&#40;$rangebytes, true&#41;;</div><br />By observing patterns within the bytes that need to be represented, I created an encoding which is easy to encode and relatively easy to decode.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// Assign a character for each of those distinct bytes.<br />$n=94;<br />$tab = ''; $firstn=-1;<br />foreach&#40;$rangebytes as $v=&gt;$tmp&#41;<br />&#123;<br />  if&#40;$v&lt;=1&#41; $c = 32+$v;<br />  #elseif&#40;$v &lt;= 26&#41; $c = 64 + $v;<br />  elseif&#40;$v &lt;  64&#41; $c = 40 + $v; <br />  else &#123; if&#40;$firstn&lt;0&#41; $firstn = $v;<br />         $tab .= chr&#40;32 + $v - $firstn&#41;;<br />         $c = $n++; &#125;//?<br />  $rangebytetranslation&#91;$v&#93; = chr&#40;$c&#41;;//$charset&#91;$n++&#93;;<br />&#125;</div><br /><br />By the way, here is a version that uses hexadecimal numeric constants, requiring no C++0x. One may guess why I did not use it in that video.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">        /* Decode address operand */<br />        t&#40;1,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, addr = 0xFFFA&#41; // NMI vector location<br />        t&#40;2,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, addr = 0xFFFC&#41; // Reset vector location<br />        t&#40;4,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001, addr = 0xFFFE&#41; // Interrupt vector location<br />        t&#40;0,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FA,0xFAFFF0FB,0xFAFFF0FA, addr = RB&#40;PC++&#41;&#41;<br />        t&#40;0,0xF0F0000A,0xF0F0000A,0x3030000A,0x3030000A,0xF0F0000A,0xF0F0000A,0xF0F0000A,0xF0F0000A, d = X&#41; // register index<br />        t&#40;0,0x0A0E0000,0x0A0E0000,0xCACE0000,0xCACE0000,0x0A0E0000,0x0A0E0000,0x0A0E0000,0x0A0E0000, d = Y&#41;<br />        t&#40;0,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A,0x00F0000A, addr=u8&#40;addr+d&#41;; d=0; tick&#40;&#41;&#41;              // add zeropage-index<br />        t&#40;0,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F000,0xFA00F001,0xFA00F000, addr=u8&#40;addr&#41;;   addr+=256*RB&#40;PC++&#41;&#41;       // absolute address<br />        t&#40;7,0x000E000A,0x000E000A,0x000E000A,0x000E000A,0x000E100A,0x000E000A,0x000E000A,0x000E000B, addr=RB&#40;c=addr&#41;; addr+=256*RB&#40;wrap&#40;c,c+1&#41;&#41;&#41;// indirect w/ page wrap<br />        t&#40;0,0x32020000,0x32020000,0xFA0E0000,0x00000000,0x32020000,0x32020000,0x32020000,0x32020000, Misfire&#40;addr, addr+d&#41;&#41; // abs. load: extra misread when cross-page<br />        t&#40;0,0xC80C0000,0xC80C0000,0x00000000,0xFA0E0000,0xC80C0000,0xC80C0000,0xC80C0000,0xC80C0000, RB&#40;wrap&#40;addr, addr+d&#41;&#41;&#41;// abs. store: always issue a misread<br />        /* Load source operand */<br />        t&#40;0,0x00000000,0xAAAAAAAA,0x00000500,0xAAAAAAAA,0x00000C04,0xAAAAAFAE,0xAAAABEBE,0xAAAAAEAE, t &amp;= A&#41; // Many operations take A or X as operand. Some try in<br />        t&#40;0,0x00001111,0x00000C00,0x00000000,0xCCCCCCC8,0x00000000,0x00000000,0x00000000,0x00000000, t &amp;= X&#41; // error to take both; the outcome is an AND operation.<br />        t&#40;0,0x00000000,0x00001111,0x00000000,0x11101111,0x00000000,0x00000000,0x00000000,0x00000000, t &amp;= Y&#41; // sty,dey,iny,tya,cpy<br />        t&#40;0,0x00000000,0x00000000,0x0C000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, t &amp;= S&#41; // tsx, las<br />        t&#40;7,0x01010000,0x01010000,0x01010000,0x00010000,0x01010000,0x01010000,0x01010000,0x01010101, t &amp;= P.raw|pbits; c = t&#41;// php, flag test/set/clear, interrupts<br />        t&#40;0,0x00001011,0xAAAABABB,0x00000000,0x00000000,0x00000000,0xAAAAA2AA,0xAAAAB2BA,0xAAAAA2AA, c = t; t = 0xFF&#41;        // save as second operand<br />        t&#40;0,0xEAEEF0FA,0xEAEEF0FA,0xFAFEF0FA,0x00000000,0xEAEEE0EA,0xEAEEE0EA,0xEAEEF0FA,0xEAEEE0EA, t &amp;= RB&#40;addr+d&#41;&#41; // memory operand<br />        t&#40;0,0x00000A05,0x00000A05,0x00000A05,0x00000A05,0x00000A04,0x00000A04,0x00000A04,0x00000A04, t &amp;= RB&#40;PC++&#41;&#41;   // immediate operand<br />        /* Operations that mogrify memory operands directly */<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00001010,0x00000000, P.V = t &amp; 0x40; P.N = t &amp; 0x80&#41; // bit<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCCCCC,0x00000000,0xC8CCC4CC,0x00000000, sb = P.C&#41;       // rol,rla, ror,rra,arr<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000800,0x00000000,0xC8CCCCCC,0xC8CCCCCC, P.C = t &amp; 0x80&#41; // rol,rla, asl,slo,&#91;arr,anc&#93;<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCC4CC,0xC8CCCCCC,0x00000000,0x00000000, P.C = t &amp; 0x01&#41; // lsr,sre, ror,rra,asr<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCC4CC,0xC8CCC4CC, t = &#40;t &lt;&lt; 1&#41; | &#40;sb &lt;&lt; 0&#41;&#41;<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0xC8CCCCCC,0xC8CCCCCC,0x00000000,0x00000000, t = &#40;t &gt;&gt; 1&#41; | &#40;sb &lt;&lt; 7&#41;&#41;<br />        t&#40;0,0x00000000,0xC8CCC4C8,0x00000000,0x00000100,0x00000000,0x00000000,0x00000000,0x00000000, t = u8&#40;t - 1&#41;&#41;  // dec,dex,dey,dcp<br />        t&#40;0,0xC8CCC1C8,0x00000100,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, t = u8&#40;t + 1&#41;&#41;  // inc,inx,iny,isb<br />        /* Store modified value &#40;memory&#41; */<br />        t&#40;0,0xC8CCC0C8,0xC8CCC0C8,0x00000000,0x22FEF0FA,0xC8CCC0C8,0xC8CCC0C8,0xC8CCC0C8,0xC8CCC0C8, WB&#40;addr+d, t&#41;&#41;<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0xD8000000,0x00000000,0x00000000,0x00000000,0x00000000, WB&#40;wrap&#40;addr, addr+d&#41;, t &amp;= &#40;&#40;addr+d&#41; &gt;&gt; 8&#41;&#41;&#41; // &#91;shx,shy,shs,sha?&#93;<br />        /* Some operations used up one clock cycle that we did not account for yet */<br />        t&#40;7,0xDDDCC5C8,0xDDDCC5C8,0x05000500,0x05000500,0xDDDCC5D9,0xDDDCC5D8,0xDDDCC5C9,0xDDDCD5D9, tick&#40;&#41;&#41; // nop,flag ops,inc,dec,shifts,stack,transregister,interrupts<br />        /* Stack operations and unconditional jumps */<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000001,0x00000100,0x00000000, tick&#40;&#41;; t = Pop&#40;&#41;&#41;                        // pla,plp,rti<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001,0x00000000,0x00000000, RB&#40;PC++&#41;; PC = Pop&#40;&#41;; PC |= &#40;Pop&#40;&#41; &lt;&lt; 8&#41;&#41; // rti,rts<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x00000000,0x00000000, RB&#40;PC++&#41;&#41;  // rts<br />        t&#40;7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001, d=PC+&#40;op?-1:1&#41;; Push&#40;d&gt;&gt;8&#41;; Push&#40;d&#41;&#41;      // jsr, interrupts<br />        t&#40;7,0x00000000,0x00000000,0x00000000,0x00000000,0x00001000,0x00001000,0x00000001,0x00000001, PC = addr&#41; // jmp, jsr, interrupts<br />        t&#40;7,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000000,0x00000101, Push&#40;t&#41;&#41;   // pha, php, interrupts<br />        /* Bitmasks */<br />        t&#40;7,0x01010000,0x01010000,0x01010000,0x00010000,0x01010000,0x01010000,0x01010000,0x01010001, t = 1&#41;<br />        t&#40;0,0x01010000,0x01010000,0x00000000,0x00000000,0x00000000,0x00000000,0x00010000,0x00010000, t &lt;&lt;= 1&#41;<br />        t&#40;7,0x01000000,0x01000000,0x01000000,0x00000000,0x01010000,0x01010000,0x00010000,0x00010001, t &lt;&lt;= 2&#41;<br />        t&#40;0,0x00000000,0x00000000,0x01000000,0x00000000,0x00010000,0x00010000,0x00010000,0x00010000, t &lt;&lt;= 4&#41;<br />        t&#40;0,0xAAAAAAAA,0x01000000,0x01000000,0x00000000,0x00000000,0x01000000,0x00000000,0x01000000, t = u8&#40;~t&#41;&#41; // sbc, isb,      clear flag<br />        t&#40;7,0x01000000,0x00000000,0x00000000,0x00000000,0x01000000,0x00000000,0x01000000,0xAAAAA2AB, t = c | t&#41;  // ora, slo,      set flag<br />        t&#40;0,0x00010000,0x01010000,0x01010000,0x00010000,0x00010000,0x01010000,0xAAABB2BA,0x01010000, t = c &amp; t&#41;  // and, bit, rla, clear/test flag<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xAAAAA2AA,0x00000000,0x00000000, t = c ^ t&#41;  // eor, sre<br />        /* Conditional branches */<br />        t&#40;0,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000, if&#40;t&#41;  &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />        t&#40;0,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000,0x00000000,0x00010000, if&#40;!t&#41; &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />        /* Addition and subtraction */<br />        t&#40;0,0xAAAAAAAA,0x00000000,0x00000000,0x00000000,0xAAAAA2AA,0x00000000,0x00000000,0x00000000, c = t; t += A + P.C; P.V = &#40;c^t&#41; &amp; &#40;A^t&#41; &amp; 0x80; P.C = t &amp; 0x100&#41;<br />        t&#40;0,0x00001011,0xAAAABABB,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, t = c - t; P.C = ~t &amp; 0x100&#41; // cmp,cpx,cpy, dcp, sbx<br />        /* Store modified value &#40;register&#41; */<br />        t&#40;0,0xAAAAAAAA,0x00000000,0xAAAAAAAA,0x01000C00,0xAAAAAFAE,0xAAAAAEAE,0xAAAAAEAE,0xAAAAAEAE, A = t&#41;<br />        t&#40;0,0x00000100,0x00000C00,0xCCCCCCCC,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000, X = t&#41; // ldx, dex, tax, inx, tsx,lax,las,sbx<br />        t&#40;0,0x00000000,0x00000100,0x10101111,0x00000100,0x00000000,0x00000000,0x00000000,0x00000000, Y = t&#41; // ldy, dey, tay, iny<br />        t&#40;0,0x00000000,0x00000000,0x08000000,0x0C000000,0x00000000,0x00000000,0x00000000,0x00000000, S = t&#41; // txs, las, shs<br />        t&#40;7,0x01000000,0x01000000,0x01000000,0x00000000,0x01000000,0x01000001,0x01000100,0x01000001, P.raw = t &amp; ~0x30&#41; // plp, rti, flag set/clear<br />        /* Generic status flag updates */<br />        t&#40;0,0xEAEEFBFB,0xEAEEFFFB,0xFEFEFFFF,0x01000D00,0xEAEEEFEE,0xEAEEEEEE,0xEAEEEEEE,0xEAEEEEEE, P.N = t &amp; 0x80&#41;<br />        t&#40;0,0xEAEEFBFB,0xEAEEFFFB,0xFEFEFFFF,0x01000D00,0xEAEEEFEE,0xEAEEEEEE,0xEAEEFEFE,0xEAEEEEEE, P.Z = u8&#40;t&#41; == 0&#41;<br />        t&#40;0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000800,0x00000000,0x00000000,0x00000000, P.V = &#40;&#40;&#40;t &gt;&gt; 5&#41;+1&#41;&amp;2&#41;&#41;         // &#91;arr&#93;</div>It can be decoded like this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">        // Define the opcode decoding matrix, which decides which micro-operations constitute<br />        // any particular opcode. &#40;Note: The PLA of 6502 works on a slightly different principle.&#41;<br />        const unsigned o8 = op / 32, o8m = 1u &lt;&lt; &#40;op%32&#41;;<br />        #define t&#40;w8,w7,w6,w5,w4,w3,w2,w1,w0,code&#41; if&#40; \<br />                &#40;o8&lt;1?w0##u : o8&lt;2?w1##u  : o8&lt;3?w2##u : o8&lt;4?w3##u : \<br />                 o8&lt;5?w4##u : o8&lt;6?w5##u  : o8&lt;7?w6##u : o8&lt;8?w7##u : w8##u&#41; &amp; o8m&#41; &#123; code; &#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Fri Dec 30, 2011 4:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2011-12-21T09:56:42-07:00</updated>
<published>2011-12-21T09:56:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87801#p87801</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87801#p87801"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87801#p87801"><![CDATA[
How did you generate the Base64 (err, Base256? =D) encoded strings? Another program, or by hand?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Wed Dec 21, 2011 9:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2011-12-21T09:38:42-07:00</updated>
<published>2011-12-21T09:38:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87799#p87799</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87799#p87799"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87799#p87799"><![CDATA[
The implementation is very clever. I must study this further.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Wed Dec 21, 2011 9:38 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zelex]]></name></author>
<updated>2011-12-21T08:35:14-07:00</updated>
<published>2011-12-21T08:35:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87796#p87796</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87796#p87796"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87796#p87796"><![CDATA[
Very awesome! Great job!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4854">Zelex</a> — Wed Dec 21, 2011 8:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[jwdonal]]></name></author>
<updated>2011-12-13T21:14:11-07:00</updated>
<published>2011-12-13T21:14:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87508#p87508</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87508#p87508"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87508#p87508"><![CDATA[
This is incredibly cool - and very impressive.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3962">jwdonal</a> — Tue Dec 13, 2011 9:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-12-09T04:58:22-07:00</updated>
<published>2011-12-09T04:58:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87328#p87328</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87328#p87328"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87328#p87328"><![CDATA[
<div class="quotetitle">sleepy9090 wrote:</div><div class="quotecontent"><br />cry<br /></div><br /><br />I AM ERROR.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Fri Dec 09, 2011 4:58 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[sleepy9090]]></name></author>
<updated>2011-12-09T00:26:43-07:00</updated>
<published>2011-12-09T00:26:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87323#p87323</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87323#p87323"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87323#p87323"><![CDATA[
cry<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3638">sleepy9090</a> — Fri Dec 09, 2011 12:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-12-08T14:17:27-07:00</updated>
<published>2011-12-08T14:17:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87295#p87295</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87295#p87295"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87295#p87295"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />http://www.ioccc.org/ :P<br /></div><br />2006 winner entries are finally available? Oh goodie! Thanks for telling.<br /><br />EDIT: Oh, and in all honesty, I was partially inspired by the 2005 winner that does a 6502 emulator (Commodore PET). But both algorithmically and structurally my emulator is very different. Mr. Sykes's emulator used addressing mode &amp; operation tables and switch-cases, albeit constructed from ?: operators. I studied his submission in great detail some time in 2009, deobfuscating it entirely. I doubt his approach would have worked well with my goals of accuracy and feature-completeness.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Thu Dec 08, 2011 2:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-12-08T13:47:06-07:00</updated>
<published>2011-12-08T13:47:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87294#p87294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87294#p87294"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87294#p87294"><![CDATA[
<!-- m --><a class="postlink" href="http://www.ioccc.org/">http://www.ioccc.org/</a><!-- m --> :P<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Thu Dec 08, 2011 1:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-12-08T03:14:52-07:00</updated>
<published>2011-12-08T03:14:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87286#p87286</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87286#p87286"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87286#p87286"><![CDATA[
<img src="http://images.cheezburger.com/completestore/2009/10/9/128995851346238364.jpg" alt="Image" /><br /><em><span style="font-size: 75%; line-height: normal">I know some of you don't like such images, but it's just a bit of humor, needless to say, eh?</span></em><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Thu Dec 08, 2011 3:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2011-12-08T01:20:01-07:00</updated>
<published>2011-12-08T01:20:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87277#p87277</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87277#p87277"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87277#p87277"><![CDATA[
<!-- m --><a class="postlink" href="http://bisqwit.iki.fi/jutut/kuvat/programming_examples/nesemu1/nesemu1.cc">http://bisqwit.iki.fi/jutut/kuvat/progr ... nesemu1.cc</a><!-- m --><br /><br />All I have to say is this, as I believe it speaks for itself (I hope you get my sarcasm -- and yes, I am well aware that you stated your goal was "to produce an emulator that has as compact source code as possible" -- I'm hearing you on FM):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void Ins&#40;&#41;       // With template magic, the compiler will literally synthesize &gt;256 different functions.<br />    &#123;<br />        // Note: op 0x100 means &quot;NMI&quot;, 0x101 means &quot;Reset&quot;, 0x102 means &quot;IRQ&quot;. They are implemented in terms of &quot;BRK&quot;.<br />        // User is responsible for ensuring that WB&#40;&#41; will not store into memory while Reset is being processed.<br />        unsigned addr=0, d=0, t=0xFF, c=0, sb=0, pbits = op&lt;0x100 ? 0x30 : 0x20;<br /><br />        // Define the opcode decoding matrix, which decides which micro-operations constitute<br />        // any particular opcode. &#40;Note: The PLA of 6502 works on a slightly different principle.&#41;<br />        enum &#123; o8 = op/8, o8m = 1 &lt;&lt; &#40;op%8&#41; &#125;;<br />        // Fetch op'th item from a bitstring encoded in a data-specific variant of base64,<br />        // where each character transmits 8 bits of information rather than 6.<br />        // This peculiar encoding was chosen to reduce the source code size.<br />        // Enum temporaries are used in order to ensure compile-time evaluation.<br />        #define t&#40;s,code&#41; &#123; enum &#123; \<br />            i=o8m &amp; &#40;s&#91;o8&#93;&gt;90 ? &#40;130+&quot; &#40;&#41;,-089&lt;&gt;?BCFGHJLSVWZ&#91;^hlmnxy|&#125;&quot;&#91;s&#91;o8&#93;-94&#93;&#41; \<br />                              : &#40;s&#91;o8&#93;-&quot; &#40;&#40;&quot;&#91;s&#91;o8&#93;/39&#93;&#41;&#41; &#125;; if&#40;i&#41; &#123; code; &#125; &#125;<br /><br />        /* Decode address operand */<br />        t&#40;&quot;                                !&quot;, addr = 0xFFFA&#41; // NMI vector location<br />        t&#40;&quot;                                *&quot;, addr = 0xFFFC&#41; // Reset vector location<br />        t&#40;&quot;!                               ,&quot;, addr = 0xFFFE&#41; // Interrupt vector location<br />        t&#40;&quot;zy&#125;z&#123;y&#125;zzy&#125;zzy&#125;zzy&#125;zzy&#125;zzy&#125;zzy&#125;z &quot;, addr = RB&#40;PC++&#41;&#41;<br />        t&#40;&quot;2 yy2 yy2 yy2 yy2 XX2 XX2 yy2 yy &quot;, d = X&#41; // register index<br />        t&#40;&quot;  62  62  62  62  om  om  62  62 &quot;, d = Y&#41;<br />        t&#40;&quot;2 y 2 y 2 y 2 y 2 y 2 y 2 y 2 y  &quot;, addr=u8&#40;addr+d&#41;; d=0; tick&#40;&#41;&#41;              // add zeropage-index<br />        t&#40;&quot; y z!y z y z y z y z y z y z y z &quot;, addr=u8&#40;addr&#41;;   addr+=256*RB&#40;PC++&#41;&#41;       // absolute address<br />        t&#40;&quot;3 6 2 6 2 6 286 2 6 2 6 2 6 2 6 /&quot;, addr=RB&#40;c=addr&#41;; addr+=256*RB&#40;wrap&#40;c,c+1&#41;&#41;&#41;// indirect w/ page wrap<br />        t&#40;&quot;  *Z  *Z  *Z  *Z      6z  *Z  *Z &quot;, Misfire&#40;addr, addr+d&#41;&#41; // abs. load: extra misread when cross-page<br />        t&#40;&quot;  4k  4k  4k  4k  6z      4k  4k &quot;, RB&#40;wrap&#40;addr, addr+d&#41;&#41;&#41;// abs. store: always issue a misread<br />        /* Load source operand */<br />        t&#40;&quot;aa__ff__ab__,4  ____ -  ____     &quot;, t &amp;= A&#41; // Many operations take A or X as operand. Some try in<br />        t&#40;&quot;                knnn     4  99   &quot;, t &amp;= X&#41; // error to take both; the outcome is an AND operation.<br />        t&#40;&quot;                9989    99       &quot;, t &amp;= Y&#41; // sty,dey,iny,tya,cpy<br />        t&#40;&quot;                       4         &quot;, t &amp;= S&#41; // tsx, las<br />        t&#40;&quot;!!!!  !!  !!  !!  !   !!  !!  !!/&quot;, t &amp;= P.raw|pbits; c = t&#41;// php, flag test/set/clear, interrupts<br />        t&#40;&quot;_^__dc___^__            ed__98   &quot;, c = t; t = 0xFF&#41;        // save as second operand<br />        t&#40;&quot;vuwvzywvvuwvvuwv    zy|zzywvzywv &quot;, t &amp;= RB&#40;addr+d&#41;&#41; // memory operand<br />        t&#40;&quot;,2  ,2  ,2  ,2  -2  -2  -2  -2   &quot;, t &amp;= RB&#40;PC++&#41;&#41;   // immediate operand<br />        /* Operations that mogrify memory operands directly */<br />        t&#40;&quot;    88                           &quot;, P.V = t &amp; 0x40; P.N = t &amp; 0x80&#41; // bit<br />        t&#40;&quot;    nink    nnnk                 &quot;, sb = P.C&#41;       // rol,rla, ror,rra,arr<br />        t&#40;&quot;nnnknnnk     0                   &quot;, P.C = t &amp; 0x80&#41; // rol,rla, asl,slo,&#91;arr,anc&#93;<br />        t&#40;&quot;        nnnknink                 &quot;, P.C = t &amp; 0x01&#41; // lsr,sre, ror,rra,asr<br />        t&#40;&quot;ninknink                         &quot;, t = &#40;t &lt;&lt; 1&#41; | &#40;sb * 0x01&#41;&#41;<br />        t&#40;&quot;        nnnknnnk                 &quot;, t = &#40;t &gt;&gt; 1&#41; | &#40;sb * 0x80&#41;&#41;<br />        t&#40;&quot;                 !      kink     &quot;, t = u8&#40;t - 1&#41;&#41;  // dec,dex,dey,dcp<br />        t&#40;&quot;                         !  khnk &quot;, t = u8&#40;t + 1&#41;&#41;  // inc,inx,iny,isb<br />        /* Store modified value &#40;memory&#41; */<br />        t&#40;&quot;kgnkkgnkkgnkkgnkzy|J    kgnkkgnk &quot;, WB&#40;addr+d, t&#41;&#41;<br />        t&#40;&quot;                   q             &quot;, WB&#40;wrap&#40;addr, addr+d&#41;, t &amp;= &#40;&#40;addr+d&#41; &gt;&gt; 8&#41;&#41;&#41; // &#91;shx,shy,shs,sha?&#93;<br />        /* Some operations used up one clock cycle that we did not account for yet */<br />        t&#40;&quot;rpstljstqjstrjst - - - -kjstkjst/&quot;, tick&#40;&#41;&#41; // nop,flag ops,inc,dec,shifts,stack,transregister,interrupts<br />        /* Stack operations and unconditional jumps */<br />        t&#40;&quot;     !  !    !                   &quot;, tick&#40;&#41;; t = Pop&#40;&#41;&#41;                        // pla,plp,rti<br />        t&#40;&quot;        !   !                    &quot;, RB&#40;PC++&#41;; PC = Pop&#40;&#41;; PC |= &#40;Pop&#40;&#41; &lt;&lt; 8&#41;&#41; // rti,rts<br />        t&#40;&quot;            !                    &quot;, RB&#40;PC++&#41;&#41;  // rts<br />        t&#40;&quot;!   !                           /&quot;, d=PC+&#40;op?-1:1&#41;; Push&#40;d&gt;&gt;8&#41;; Push&#40;d&#41;&#41;      // jsr, interrupts<br />        t&#40;&quot;!   !    8   8                  /&quot;, PC = addr&#41; // jmp, jsr, interrupts<br />        t&#40;&quot;!!       !                      /&quot;, Push&#40;t&#41;&#41;   // pha, php, interrupts<br />        /* Bitmasks */<br />        t&#40;&quot;! !!  !!  !!  !!  !   !!  !!  !!/&quot;, t = 1&#41;<br />        t&#40;&quot;  !   !                   !!  !! &quot;, t &lt;&lt;= 1&#41;<br />        t&#40;&quot;! !   !   !!  !!       !   !   !/&quot;, t &lt;&lt;= 2&#41;<br />        t&#40;&quot;  !   !   !   !        !         &quot;, t &lt;&lt;= 4&#41;<br />        t&#40;&quot;   !       !           !   !____ &quot;, t = u8&#40;~t&#41;&#41; // sbc, isb,      clear flag<br />        t&#40;&quot;`^__   !       !               !/&quot;, t = c | t&#41;  // ora, slo,      set flag<br />        t&#40;&quot;  !!dc`_  !!  !   !   !!  !!  !  &quot;, t = c &amp; t&#41;  // and, bit, rla, clear/test flag<br />        t&#40;&quot;        _^__                     &quot;, t = c ^ t&#41;  // eor, sre<br />        /* Conditional branches */<br />        t&#40;&quot;      !       !       !       !  &quot;, if&#40;t&#41;  &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />        t&#40;&quot;  !       !       !       !      &quot;, if&#40;!t&#41; &#123; tick&#40;&#41;; Misfire&#40;PC, addr = s8&#40;addr&#41; + PC&#41;; PC=addr; &#125;&#41;<br />        /* Addition and subtraction */<br />        t&#40;&quot;            _^__            ____ &quot;, c = t; t += A + P.C; P.V = &#40;c^t&#41; &amp; &#40;A^t&#41; &amp; 0x80; P.C = t &amp; 0x100&#41;<br />        t&#40;&quot;                        ed__98   &quot;, t = c - t; P.C = ~t &amp; 0x100&#41; // cmp,cpx,cpy, dcp, sbx<br />        /* Store modified value &#40;register&#41; */<br />        t&#40;&quot;aa__aa__aa__ab__ 4 !____    ____ &quot;, A = t&#41;<br />        t&#40;&quot;                    nnnn 4   !   &quot;, X = t&#41; // ldx, dex, tax, inx, tsx,lax,las,sbx<br />        t&#40;&quot;                 !  9988 !       &quot;, Y = t&#41; // ldy, dey, tay, iny<br />        t&#40;&quot;                   4   0         &quot;, S = t&#41; // txs, las, shs<br />        t&#40;&quot;!  ! ! !!  !   !       !   !   !/&quot;, P.raw = t &amp; ~0x30&#41; // plp, rti, flag set/clear<br />        /* Generic status flag updates */<br />        t&#40;&quot;wwwvwwwvwwwvwxwv 5 !&#125;&#125;||&#123;&#125;wv&#123;&#123;wv &quot;, P.N = t &amp; 0x80&#41;<br />        t&#40;&quot;wwwv||wvwwwvwxwv 5 !&#125;&#125;||&#123;&#125;wv&#123;&#123;wv &quot;, P.Z = u8&#40;t&#41; == 0&#41;<br />        t&#40;&quot;             0                   &quot;, P.V = &#40;&#40;&#40;t &gt;&gt; 5&#41;+1&#41;&amp;2&#41;&#41;         // &#91;arr&#93;<br />        /* All implemented opcodes are cycle-accurate and memory-access-accurate.<br />         * &#91;&#93; means that this particular separate rule exists only to provide the indicated unofficial opcode&#40;s&#41;.<br />         */<br />    &#125;<br /></div><br /><br />EDIT: Oh, I guess I'll include another bit.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    void Op&#40;&#41;<br />    &#123;<br />        /* Check the state of NMI flag */<br />        bool nmi_now = nmi;<br /><br />        unsigned op = RB&#40;PC++&#41;;<br /><br />        if&#40;reset&#41;                              &#123; op=0x101; &#125;<br />        else if&#40;nmi_now &amp;&amp; !nmi_edge_detected&#41; &#123; op=0x100; nmi_edge_detected = true; &#125;<br />        else if&#40;intr &amp;&amp; !P.I&#41;                  &#123; op=0x102; &#125;<br />        if&#40;!nmi_now&#41; nmi_edge_detected=false;<br /><br />        // Define function pointers for each opcode &#40;00..FF&#41; and each interrupt &#40;100,101,102&#41;<br />        #define c&#40;n&#41; Ins&lt;0x##n&gt;,Ins&lt;0x##n+1&gt;,<br />        #define o&#40;n&#41; c&#40;n&#41;c&#40;n+2&#41;c&#40;n+4&#41;c&#40;n+6&#41;<br />        static void&#40;*const i&#91;0x108&#93;&#41;&#40;&#41; =<br />        &#123;<br />            o&#40;00&#41;o&#40;08&#41;o&#40;10&#41;o&#40;18&#41;o&#40;20&#41;o&#40;28&#41;o&#40;30&#41;o&#40;38&#41;<br />            o&#40;40&#41;o&#40;48&#41;o&#40;50&#41;o&#40;58&#41;o&#40;60&#41;o&#40;68&#41;o&#40;70&#41;o&#40;78&#41;<br />            o&#40;80&#41;o&#40;88&#41;o&#40;90&#41;o&#40;98&#41;o&#40;A0&#41;o&#40;A8&#41;o&#40;B0&#41;o&#40;B8&#41;<br />            o&#40;C0&#41;o&#40;C8&#41;o&#40;D0&#41;o&#40;D8&#41;o&#40;E0&#41;o&#40;E8&#41;o&#40;F0&#41;o&#40;F8&#41; o&#40;100&#41;<br />        &#125;;<br />        #undef o<br />        #undef c<br />        i&#91;op&#93;&#40;&#41;;<br /><br />        reset = false;<br />    &#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Thu Dec 08, 2011 1:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2011-12-08T01:13:18-07:00</updated>
<published>2011-12-08T01:13:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87276#p87276</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87276#p87276"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87276#p87276"><![CDATA[
Metroid refuses to boot if the CHR-RAM is really dirty.  For a while, FCEUX was not initializing CHR-RAM to anything, so Metroid would often refuse to boot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Dec 08, 2011 1:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-12-08T00:59:17-07:00</updated>
<published>2011-12-08T00:59:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87275#p87275</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87275#p87275"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87275#p87275"><![CDATA[
<div class="quotetitle">thefox wrote:</div><div class="quotecontent"><br />Very cool, sir. BTW what TAS movies/games depend on the RAM initialization state?<br /></div><br />I seem to remember that I could not get the Wizards &amp; Warriors TAS to sync before I added the RAM initialization. It could have been caused by something else, but that's what I did that made the difference.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Thu Dec 08, 2011 12:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2011-12-08T00:50:52-07:00</updated>
<published>2011-12-08T00:50:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87274#p87274</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87274#p87274"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87274#p87274"><![CDATA[
Very cool, sir. BTW what TAS movies/games depend on the RAM initialization state?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Thu Dec 08, 2011 12:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2011-12-07T17:07:04-07:00</updated>
<published>2011-12-07T17:07:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87265#p87265</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87265#p87265"/>
<title type="html"><![CDATA[I created an emulator...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8385&amp;p=87265#p87265"><![CDATA[
bad ass, Bisqwit! this is pro.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Wed Dec 07, 2011 5:07 pm</p><hr />
]]></content>
</entry>
</feed>