<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=1503" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-05-15T07:26:59-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=1503</id>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-05-15T06:41:07-07:00</updated>
<published>2006-05-15T06:41:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12929#p12929</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12929#p12929"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12929#p12929"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />6. The NMI is triggered whenever the NMI signal to the CPU goes from low to high (edge-sensitive).<br /></div><br /><br />Other way around - NMI is triggered on a <strong>falling</strong> edge on the /NMI input line. The rest of your description was okay, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Mon May 15, 2006 6:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-05-15T07:26:59-07:00</updated>
<published>2006-05-15T01:35:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12917#p12917</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12917#p12917"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12917#p12917"><![CDATA[
One principle used in example code is to reduce dependency on the particulars of the NES 6502 whenever it's convenient to. Adding a few initialization instructions is trivial. Also you sometimes might want the code to run on other game consoles like NES clones and significantly inaccurate NES emulators, or perhaps even a generic 6502 simulator environment.<br /><br />1&amp;2: My findings indicate that <a href="http://nesdevwiki.ath.cx/index.php/Power-Up_State" class="postlink">SEI and CLD at power-up and reset is unnecessary on a NES</a>, as the hardware does that already.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />3. Storing $40 into $4017 (in Yoshi's doc)<br /></div><br /><br />Yoshi's doc is dated; use <a href="http://nesdevwiki.ath.cx/index.php/APU_Frame_Counter" class="postlink">the wiki's documentation of $4017</a>. For an IRQ to occur, the I flag in the CPU must be clear (CLI) and something must be generating an interrupt request. In this case the APU is an entity that can request one, and by writing $40 to $4017 the APU is told to refrain from requesting an interrupt. This isn't necessary if you never execute CLI, but once you do, it's nice not to have unexpected interrupts occurring; for example in the future you might try to use the MMC3's scanline interrupt and not even think about the APU's interrupts, then waste time tracking down problems to it.<br /><br />4. Stack pointer initialization isn't necessary if you don't use page 1 ($100-$1FF) for anything else. If you do, for example use $100-$180 for more variables, then you want the stack poiner to be $FF at power-up and after reset. After reset, the stack pointer is not reset to the top, so it needs to be initialized if you want a definite value.<br /><br />5. You have slightly less than 30000 clocks until the second vblank loop would normally complete. It can be started immediately or after those clocks, so anything you do to fill the time is essentially free. The loop itself doesn't rely on being started at a particular time.<br /><br />6. The NMI is triggered whenever the NMI signal to the CPU goes from deasserted to asserted (edge-sensitive). That occurs in two situations (that I know of): the last written value to $2000 had bit 7 set and vblank is just beginning, and when the last written value to $2000 had bit 7 clear and the CPU writes a value to $2000 with bit 7 set at a time during vblank.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Despite the skeptical questions, I really do like the init code. The fancy work with the X-index register is very nice.<br /></div><br /><br />Unfortunately such fancy register work is not that appropriate for tutorial code.<br /><br /><strong>EDIT</strong>: Corrected reference to NMI assertion.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon May 15, 2006 1:35 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Lucky]]></name></author>
<updated>2006-05-15T00:13:00-07:00</updated>
<published>2006-05-15T00:13:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12914#p12914</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12914#p12914"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12914#p12914"><![CDATA[
Thanks for all of the advice.  I fired up Nintendulator, and noticed more problems with my code.  A little more tweaking, and I got it working.<br /><br />I took a look at the following code provided in the Wiki, and have some questions...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">reset:<br />    sei        ; ignore IRQs<br />    cld        ; disable decimal mode<br />    ldx #$40<br />    stx $4017  ; disable APU frame IRQ<br />    ldx #$ff<br />    txs        ; Set up stack<br />    inx<br />    stx $2000  ; disable NMI<br />    stx $2001<br /><br />    ; Optional &#40;omitted&#41;:<br />    ; Set up mapper and jmp to further init code here.<br /><br />    ; First of two waits for vertical blank to make sure that the<br />    ; PPU has stabilized<br />@vblankwait1:  <br />    bit $2002<br />    bpl @vblankwait1<br /><br />    ; We now have about 30,000 cycles to burn before the PPU stabilizes.<br />    ; Use it to clear RAM.<br />    txa<br />@clrmem:<br />    sta $000,x<br />    sta $100,x<br />    sta $200,x<br />    sta $300,x<br />    sta $400,x<br />    sta $500,x<br />    sta $600,x<br />    sta $700,x  ; Remove this if you're storing reset-persistent data<br />    inx<br />    bne @clrmem<br />   <br />@vblankwait2:<br />    bit $2002<br />    bpl @vblankwait2<br /></div><br /><br />1.  The first line of code disables IRQs.  I have a basic understanding of IRQs, but why are we disabling them?  What IRQs exist on startup that we need to disable?<br /><br />2.  The second line disables decimal mode.  I've seen a lot of documents state that this isn't necessary, but is good practice and/or better for 6502 simulations.  What's your take on it?<br /><br />3.  Storing $40 into $4017 (in Yoshi's doc) says the vertical clock signal is set to not occur.  In this code example it states "disable APU frame IRQ".   What do both of these comments mean, and why is it important here?<br /><br />4.  Why are we reinitializing the stack pointer?  Shouldn't it already be set up?  Is this one of those "good programming practices" things too, or are we doubly making sure that the stack pointer isn't borked on reset?<br /><br />5.  The comments state that we have 30,000 cycles to burn before the PPU stabilizes.  Does this mean that we have 30,000 cycles or so before the 2nd vBlank occurs (so we have time to clear memory), or does 30,000 cycles imply that we're waiting for an even longer amount of time (perhaps several vblanks) before the ppu stabilizes?<br /><br />And one last question...<br /><br />6.  Does anything else trigger the NMI besides the VBlank?<br /><br />Despite the skeptical questions, I really do like the init code.  The fancy work with the X-index register is very nice.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=502">Lucky</a> — Mon May 15, 2006 12:13 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-05-14T16:11:52-07:00</updated>
<published>2006-05-14T16:11:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12888#p12888</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12888#p12888"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12888#p12888"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />If $2004 is mentioned at all (like if the doc wants to be "complete") it should also be mentioned that you should avoid using it.<br /></div><br />From the <a href="http://nesdevwiki.ath.cx/index.php/NES_PPU" class="postlink">PPU page in the new wiki</a>: "Most games access this register through $4014 instead."<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />- Sadly, I don't think any doc mentions that you need to shut the PPU off  and wait for two VBlanks to pass to give the PPU "warm up" time.<br /></div><br />Got that too. From the PPU page: "The first thing that should be done on startup is to write $00 to registers $2000 and $2001 (to disable rendering and NMIs) and then wait for $2002 bit 7 to be set twice." The sample <a href="http://nesdevwiki.ath.cx/index.php/Init_code" class="postlink">init code</a> does this too.<br /><br />If you have anything else to add to the descriptions on the wiki, be bold and make it so.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun May 14, 2006 4:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-05-14T12:04:54-07:00</updated>
<published>2006-05-14T12:04:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12880#p12880</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12880#p12880"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12880#p12880"><![CDATA[
I'm pretty sure that doccuments cover the two frames at startup. At least I found myself doing that in the first few NES programm I ever wrote.<br />However, I did use $2004 in the very begining. I think $4014 was covered, too, but included demoes used $2004 and anything about timing wasn't coverd. I think the real lack in the docs is that they doesn't say much about frames, timing, VBlank, forced blanking via $2001, etc.... wich are really important points, and almost all newbies (including me before) have serious problems with that.<br />Then, people would draw their own conclusions about limited writes to $2007, and the fact that $4014 is much better. Of course quickly cover that would be the best, but that doesn't make sense if frametiming related stuff isn't covered first.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun May 14, 2006 12:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-05-14T11:50:29-07:00</updated>
<published>2006-05-14T11:50:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12879#p12879</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12879#p12879"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12879#p12879"><![CDATA[
- Polling $2002 for VBlank is not a good idea.  As has been mentioned, this will lead to frames being ocasionally missed.  The only reliable way to catch EVERY frame EVERY time is to use NMIs.  Docs really SHOULD mention this, and they really SHOULD show how to use NMIs instead of relying on the "LDA $2002 BPL wait" loop.  However, polling $2002 for other information (like sprite overflow or Sprite-0 hit) is not only perfectly reliable and acceptable, but it's also the only way to check for those things.  AS LONG AS you don't poll it around when VBlank starts (or the same missed frames could happen).<br /><br /><br />- Beginner nesasm docs shouldn't even MENTION $2004 since it has practically no real use.  Docs should just cover $4014 and mention that you should write $00-&gt;$2003 before writing to $4014.  If $2004 is mentioned at all (like if the doc wants to be "complete") it should also be mentioned that you should avoid using it.<br /><br />It's not that $2004 is unreliable.  In fact it's very reliable.  It's just ultimately slower, much more difficult to use, and all around a bigger pain in the ass.<br /><br />- Sadly, I don't think any doc mentions that you need to shut the PPU off  and wait for two VBlanks to pass to give the PPU "warm up" time.  Every NES game should do this.  It's not difficult -- in fact you can even use the simple $2002 polling loops since it doesn't matter if frames are missed (you're not doing anything yet anyway, just waiting for bootup).<br /><br />Throwing a simple:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$00<br />sta $2000 ; disable NMIs<br />sta $2001 ; shut off PPU<br /><br />; kill two VBlanks to wait for PPU to warm up<br />:<br />lda $2002<br />bpl :-<br /><br />:<br />lda $2002<br />bpl :-<br /></div><br /><br />at the start of your program is very simple, and gets the job done.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sun May 14, 2006 11:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-05-14T10:27:54-07:00</updated>
<published>2006-05-14T10:27:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12873#p12873</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12873#p12873"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12873#p12873"><![CDATA[
Using $2007 is slow, but I doubt you would be able to show anything on the screen of the NES without the use of this register. I think you're confusing with $2004, wich isn't a reliable way to write to spries, use $4014 instead.<br />Docs aren't wrong, they just doesn't specify too much about VBlank time, rendering time and how $2001 affects rendering.<br /><br />There is no docs that say polling $2002 is more reliable than doing NMI... they just doesn't insist on the unreliability of $2002, wich is only useful at startup to wait the PPU to warm up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun May 14, 2006 10:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Roth]]></name></author>
<updated>2006-05-14T10:02:08-07:00</updated>
<published>2006-05-14T10:02:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12872#p12872</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12872#p12872"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12872#p12872"><![CDATA[
It would be nice if everything wasn't so dated.  Everytime I turn around, I'm being told, "Delete that document," "Throw that doc away," etc.  I've now read that:<br /><br />A.) Doing the basic Vblank routine that has been on the web forever pretty much sucks, as you will miss some frames from what I understand.<br /><br />B.) Using $2007 is slow, and probably wouldn't work on an NES, from what I understand.<br /><br />C.) Using $2004 for sprites is a bad idea, and I have no clue why, but I know I've read that just recently.<br /><br /><br />Almost EVERY damn document out there says to use these.  Why do these documents still float around if they're wrong?  Perhaps if there was something written up that was actually correct, then there wouldn't be so many people posting the EXACT same questions over and over and over and over and over again.<br /><br />I hope you can achieve what you are trying to, Lucky.  Sadly though, you'll probably end up like alot of people... in limbo not knowing what to do because of "bad documentation" which no one seems to care to fix.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=174">Roth</a> — Sun May 14, 2006 10:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-05-13T23:49:30-07:00</updated>
<published>2006-05-13T23:49:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12854#p12854</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12854#p12854"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12854#p12854"><![CDATA[
I tend not to release anything until it works in Nintendulator, Nestopia, and FCE Ultra.<br /><br />But it would be nice if somebody would post some general-purpose init code/project template to <a href="http://nesdevwiki.ath.cx/" class="postlink">the new wiki</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat May 13, 2006 11:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-05-13T21:40:10-07:00</updated>
<published>2006-05-13T21:40:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12853#p12853</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12853#p12853"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12853#p12853"><![CDATA[
I see 2 main reason for it not to work on a rea... oops, on a NES. =)<br /><br />1 - You wait one Vblank and start doing PPU stuff. Why is this wrong? Because the PPU seems to behave erratically during the first couple of frames, meaning you may get a corrupted display. You should wait at least 2 VBlanks before doing any PPU operations (except disabling rendering, wich you can do right in the beginning).<br /><br />2 - You are writing too much stuff, and the drawing probably spills out of VBlank, meaning you will get a corrupted display. You should do one of the following to avoid that: a) only turn rendering on <strong>after</strong> you have drawn everything, as the PPU is free for use when rendering is off. b) draw the graphics in smaller portions, that will fit inside VBlank time. c) Partially or completelly unroll the drawing loop, to make it faster so that you can draw more stuff in less time.<br /><br />Games usually use a combination of those, where the first screen is usually drawn with rendering turned off. Then, during gameplay, since only small parts of the screen change from frame to frame, there is enough time during VBlank to update only those parts with the new data.<br /><br />There are probably a couple of other things wrong with the code... such as the fact that you never set the scrolling values through $2005, wich means that the part of the name tables that is diplayed will be unstable and unpredictable.<br /><br />And you should consider using other emulators besides FCEU, as it can be pretty forgiving in certain aspects. Plus, if the program works correctly in more emulators it has a better chance of running on hardware, right? The most accurate emulator around is Quietust's Nintendulator, so you should probably include that in your list.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat May 13, 2006 9:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Lucky]]></name></author>
<updated>2006-05-13T20:38:36-07:00</updated>
<published>2006-05-13T20:38:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12850#p12850</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12850#p12850"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12850#p12850"><![CDATA[
Bingo, sprites it is!  Thanks a bunch to both of you.  Holy smokes you replied fast too!<br /><br />Bum deal on my code not working on a real NES.  Even more bum deal because I have no clue as to why it wouldn't work.  That's some good stuff to know, and I appreciate the feedback.<br /><br />Thanks again guys!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=502">Lucky</a> — Sat May 13, 2006 8:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-05-13T20:25:12-07:00</updated>
<published>2006-05-13T20:25:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12847#p12847</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12847#p12847"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12847#p12847"><![CDATA[
Your problem is probably rogue sprites.  The only way to hide sprites is to move them offscreen (give them a Y value &gt;= 240).  If you never do this, most emulators will default Spr-RAM being filled with all 00's, which will draw all sprites at coord 0,1 -- giving you that nice big 8x8 pixel block you see there.<br /><br /><br />The fast solution to this is to disable sprite rendering (set $2001.4 to 0).  You have:<br /><br />lda #%00011110<br />sta $2001<br /><br />Try changing that to:<br /><br />lda #%000<span style="text-decoration: underline">0</span>1110  ; disable sprites<br />sta $2001<br /><br /><br />Alternatively, you could fill Spr-Ram with $F8 or $FF to hide all the sprites, but that's a bigger job.<br /><br /><br />EDIT - bah Q is too fast.  I should also note I didn't really examine the code in detail, I just looked at the screen and brought up what I thought the problem was.  As for your other problems I may reply again tomorrow when I'm not so tired unless someone else does before then. ^^<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Sat May 13, 2006 8:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2006-05-13T20:27:17-07:00</updated>
<published>2006-05-13T20:23:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12846#p12846</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12846#p12846"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12846#p12846"><![CDATA[
You forgot to initialize/disable the sprites, so they're all appearing at the upper-left corner of the screen.<br /><br />Also, there are probably a few other problems in that program (which would prevent it from working on an NES), but I'll leave those for somebody else to describe in detail.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Sat May 13, 2006 8:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Lucky]]></name></author>
<updated>2006-05-13T20:03:07-07:00</updated>
<published>2006-05-13T20:03:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12844#p12844</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12844#p12844"/>
<title type="html"><![CDATA[Introduction and Graphic Artifact!]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1503&amp;p=12844#p12844"><![CDATA[
Hey Everybody!<br /><br />Summer vacation from college hit, and now I have some time to tackle some new fun projects.  The top on the list is to learn some embedded systems, and I figured I would start with the good old fashioned NES.  At the moment I am only interested in learning and writing roms (not emulators themselves).  Perhaps in the future my interests will expand.<br /><br />As I muddled through NES documentation last week, I hit the same problem that everybody has written about in a number of posts - There is very good documentation, but no comprehensive single source, especially on the level of noobs like me.  At about day 3 I said to myself "If I ever figure this stuff out, I'd like to write a good guide to NES programming."  Of course that's more in the pipe-dream phase right now, as I have yet to learn NES programming, learn it WELL, and then have time (provided I don't get tired of the subject) to write such a tome.  It's a nice idea, who knows.  Perhaps I'll fizzle out 2 weeks from now and never come back to NES programming.  However at the moment I'm very optimistic, and hope I don't lose the passion before I can contribute something.<br /><br />My ideas for approaching writing a tutorial are a little different.  At a first glimpse (and I don't know much mind you) I would suggest:<br /><br />6502 Programming<br />A basic (VERY VERY BASIC, barely applicable to programming) overview of NES architecture.  More of a fun read than educational.<br />Basic PPU programming (with pre-supplied iNes headers, register pre-sets, and maybe even chr-roms)<br />A look into the chr-rom format.<br />Sprites and animation.<br />Standard Control Pad programming<br />Basic game design and theory (supply exercises to make small games)<br />Intermediate PPU programming (explanation of register presets, iNes headers, scrolling, palettes)<br />Sound<br />Advanced PPU programming (the rest)<br />Advanced Control programming (light gun, power pad, etc.)<br /><br />I don't know enough to explicitly detail the concepts in order, but the main difference in approaches is to get the user programming quickly in a pre-defined environment without having them get bored or confused with the wealth of information that people have to shuffle through at the moment to learn how to get a simple pattern on the screen.<br /><br />I looked through most all of the posts in the NESdev subsection of this site, and it seems like a nice community, albiet a tough one to get into.  There's no way I can avoid being a noob for now, but I hope you don't hold it against me.  The question I'm about to pose seems really silly, yet I've spent 2 full days reading through Yoshi's 1.0 and 2.0 docs, Marat Fayzullin's doc, Patrick Diskin's doc, and a couple of others trying to figure it out.  I even read some retard's ultimate NES programming guide that only had 6502 op codes in it, with "NES PROGRAMMING: TO BE WRITTEN" at the end (and a thank you note to some other guy for giving him the op codes).  Still no dice for me.  I hope you don't take me as one of those "d00d I WANT TO MAD HAXOR THE NES LOL ROFLROXORS BUT WHAT THE CRAP IS 6250 ASSEMBLY YO?" people.  I have done a bit of research, and am still stumped.<br /><br />What I'm using:<br /><br />NESAsm 2.51 (don't know if there's a better version out)<br />NES-CHR-ROM Creator 1.1<br />FCEU 0.98.12<br />I'm designing with NTSC in mind.<br /><br />I saw that some people noted NESAsm as the "n00b" assembler, and a number of other opinions on chr-rom editors.  I'm very open to suggestions, as I really have no clue what I'm doing.<br /><br />And if I haven't bored you yet, on with the question!<br /><br />I keep seeing a purple block in the upper left hand corner of the screen.  In PAL mode it's horribly noticeable (I don't care much because I'm looking to do NTSC), but in NTSC mode it's still noticeable as a small line (the very bottom of the square still shows).  What is this artifact?  Is it something I shouldn't worry about?  Is it a result of a poor memory write?  Is it my emulator?  Grr....<br /><br />Here is a picture of a cheap demo program that draws a bunch of unhappy faces.  This is in PAL mode (Just to make it more obvious in the picture, though it is still somewhat noticeable in NTSC).<br /><br /><img src="http://www.geocities.com/thereallucky/unhappy.jpg" alt="Image" /><br /><br />And here is a file containing my source:<br /><br /><!-- m --><a class="postlink" href="http://www.geocities.com/thereallucky/ericnes.zip">http://www.geocities.com/thereallucky/ericnes.zip</a><!-- m --><br /><br />I suppose my source is short enough to show here if you like...<br /><br />; One programming bank<br />; One chr rom<br />; <br /><br />        .inesprg    1<br />        .ineschr    1<br /><br />; I have no clue yet as to what inesmir and inesmap do.<br />; Note:  Read Neshdr.doc<br /><br />        .inesmir    1<br />        .inesmap    0<br /><br />.org $8000<br />.bank 0<br /><br />Start:<br /><br />; Set up the PPU registers!<br />; PPU Register #1<br />; D7 - Execute NMI on VBlank is DISABLED<br />; D6 - Unused.<br />; D5 - Sprite size is 8x8<br />; D4 - Background Pattern Table Address is $0000<br />; D3 - Sprite Pattern Table ADdress is $1000<br />; D2 - PPU Address Increment is 1<br />; D1:D0 = Nametable Address to use is $2000<br /><br />lda #%00001000     <br />sta $2000          <br /><br />; PPU Register #2<br />; D7:D5 - (Color display determined by D0)<br />; D7:D5 - No color intensity<br />; D4 - Sprites VISIBLE<br />; D3 - Background VISIBLE<br />; D2 - NO Sprite Clipping<br />; D1 - NO Background Clipping<br />; D0 - Color Display (Effects D7:D5 function)<br /><br />lda #%00011110 <br />sta $2001<br /><br /><br />waitVBlank:<br /><br />lda $2002<br />        bpl waitVBlank<br /><br /><br />; **** THIS SECTION LOADS UP THE PALETTE ****<br /><br />; Time to write to the palette,<br />; starting at $3F00<br /><br />        lda #$3F<br />        sta $2006<br />        lda #$00<br />        sta $2006<br /><br />ldx #$00<br /><br />loadPalette:<br /><br />lda palette,x<br />sta $2007<br />inx<br />cpx #$20<br />bne loadPalette<br /><br />; **** FINISHED LOADING UP THE PALETTE ****<br /><br /><br />; **** DRAW A BUNCH OF UNHAPPY FACES TO THE SCREEN ****<br /><br />; We want to store data into the PPU's<br />; memory at $2000.  We set up the register at $2006.<br />;<br />; This sets our starting point on the background 32x30<br />; grid.  $2000 is the very upper left of the screen.<br /><br />lda #$20<br />sta $2006<br />lda #$00<br />sta $2006<br /><br />; We want to draw 7 rows of unhappy faces,<br />; which ends up being 224 unhappy faces.<br />; X will be our counter, so let's set it to 224<br />; in preparation for a countdown loop.<br /><br />ldx #$E0<br /><br />drawPattern:<br /><br />lda #$01<br />sta $2007<br />dex<br />bne drawPattern<br /><br />; **** FINISHED DRAWING UNHAPPY FACES ****<br /><br /><br />Loop:<br />jmp Loop<br /><br /><br />palette:<br /><br />; Image Palette<br /><br />.db $32,$01,$06,$2A,$32,$03,$10,$00<br />.db $32,$38,$33,$3C,$32,$21,$26,$02<br /><br />; Sprite Palette<br /><br />.db $32,$16,$12,$14,$32,$07,$17,$27<br />.db $32,$0B,$07,$2D,$32,$3A,$35,$31<br /><br /><br />    .bank 1<br />.org $FFFA<br />.dw 0; NMI_Routine<br />.dw Start ; Reset_Routine<br />.dw 0; IRQ_Routine<br /><br />.bank 2<br />.org$0000<br />.incbin "eric.chr"<br /><br /><br />**** END OF FILE *****<br /><br />If you can tell me what I'm doing wrong, me love you long time.<br /><br />PEACE!<br /><br />-Eric<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=502">Lucky</a> — Sat May 13, 2006 8:03 pm</p><hr />
]]></content>
</entry>
</feed>