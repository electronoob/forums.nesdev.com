<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9148" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-08-03T19:00:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9148</id>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-08-03T19:00:09-07:00</updated>
<published>2012-08-03T19:00:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97526#p97526</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97526#p97526"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97526#p97526"><![CDATA[
I mean I don't think I will have that big of a hard time. You gotta look at the base contex clues to figure out the addressing modes in geenral and I don't believe that will be hard at all because I'm first going to parse the equations, pointers, etc. and then break them down to (Lets say we're working with LDA [ZPPointerVariable],Y) something like LDY [ZP],Y and then the assembler would just loop it up, and I'm honestly not worried about that anyway, I believe I can handle it and it won't be harder than writing the actual program for the assembler. I'm worried about efficiently storing and processing the addressing modes for the opcodes and then generating the byte that you need. I guess I will just be looking at the status. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />And honestly, I don't believe this will ever amount to anything amazing, I am more so a just wanting to try this to just see what it's like, and more for educational experience.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Fri Aug 03, 2012 7:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-08-03T18:45:26-07:00</updated>
<published>2012-08-03T18:45:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97525#p97525</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97525#p97525"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97525#p97525"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Honestly, if I were to write an assembler, I'd probably do it in Python because it's so easy to process strings.<br /></div><br />I did mine in flex/bison since I've used it before and since it takes all of the processing of the input file [generally] out of the equation [or at least formats it as a grammar based on tokens instead of a series of characters].  That approach allows you to focus on the features instead of the parsing.<br /><br />That being said, my &quot;welcome to hell&quot; contribution would be: prepare for endless questions/complaints from users or potential users about why your assembler doesn't do things like NESASM, ASM6, CA65, WLA-DX, ...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Fri Aug 03, 2012 6:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-08-03T17:38:15-07:00</updated>
<published>2012-08-03T17:38:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97518#p97518</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97518#p97518"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97518#p97518"><![CDATA[
Honestly, if I were to write an assembler, I'd probably do it in Python because it's so easy to process strings.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Aug 03, 2012 5:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-08-03T17:15:12-07:00</updated>
<published>2012-08-03T17:15:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97514#p97514</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97514#p97514"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97514#p97514"><![CDATA[
<div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />Not sure exactly what you mean, but I was going to have the file reader detect that it's an opcode (already done in my very simple skeleton) and then determin the opcode and addressing modes. For all the modes that don't have a addressing mode, I was just going to call them &quot;general&quot; instructions. But, while that's probably something I need but don't understand yet.<br /><br />So LDA #$00 would then get put into it's basic form of &quot;LDA Immediate&quot; basically, and then my problem is how do I check for ambiguous cases and general decoding. I was thinking having a method of basically I will have every addressing mode out there in a list for each instruction. Then, the availability or not. So each instruction would basically have a &quot;allow&quot; and &quot;don't allow&quot; for every single addressing mode available. And then, if available, have the opcode for the addressing mode be there too. Is this a good solution or a bad on or neither but could be done better?<br /></div><br /><br />What you're asking is &quot;how do I write a text string parser?&quot;  I covered this in the last line of my previous post -- welcome to hell.<br /><br />For figuring out which mode is in use (immediate vs. indirect indexed vs. implied vs...), you have to do a bunch of string comparisons and/or regex.  Look into (god forbid I recommend this but...) sscanf() or if you want something better the PCRE library.<br /><br />You start by looking at the operand syntax provided and have to make some assumptions, then once you have a &quot;good idea&quot; what the mode is, you can iterate over the opcodes table (see previous post) and correlate the opcode + mode.<br /><br />I wrote what I did in my previous post with the knowledge of a disassembler in mind, and I imagine the same concept in general applies with an assembler, but you get to do a lot of string parsing, like I said.<br /><br />Alternately you could look at the source to asm6, which might blow your mind at how it does it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Aug 03, 2012 5:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-08-03T15:29:23-07:00</updated>
<published>2012-08-03T15:29:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97507#p97507</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97507#p97507"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97507#p97507"><![CDATA[
Why not replace &quot;assembler&quot; with &quot;emulator&quot; and ask the exact same question on NESemdev <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Fri Aug 03, 2012 3:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2012-08-03T15:07:56-07:00</updated>
<published>2012-08-03T15:07:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97505#p97505</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97505#p97505"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97505#p97505"><![CDATA[
Another assembler. Stay a while, stay forever... Er...<br /><br />Why another assembler? Which features are missing? Why not starting from an open-source assembler? Except for &quot;educationnal&quot; purpose, I don't see the point of starting from scratch a 6502 (NES) assembler.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Fri Aug 03, 2012 3:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-08-03T11:21:58-07:00</updated>
<published>2012-08-03T11:21:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97478#p97478</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97478#p97478"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97478#p97478"><![CDATA[
Not sure exactly what you mean, but I was going to have the file reader detect that it's an opcode (already done in my very simple skeleton) and then determin the opcode and addressing modes. For all the modes that don't have a addressing mode, I was just going to call them &quot;general&quot; instructions. But, while that's probably something I need but don't understand yet.<br /><br />So LDA #$00 would then get put into it's basic form of &quot;LDA Immediate&quot; basically, and then my problem is how do I check for ambiguous cases and general decoding. I was thinking having a method of basically I will have every addressing mode out there in a list for each instruction. Then, the availability or not. So each instruction would basically have a &quot;allow&quot; and &quot;don't allow&quot; for every single addressing mode available. And then, if available, have the opcode for the addressing mode be there too. Is this a good solution or a bad on or neither but could be done better?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Fri Aug 03, 2012 11:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2012-08-03T03:15:45-07:00</updated>
<published>2012-08-03T03:15:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97449#p97449</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97449#p97449"/>
<title type="html"><![CDATA[Re: 6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97449#p97449"><![CDATA[
Assuming there will be a secondary operand byte isn't wise (think of single-byte opcodes like NOP, LSR A, ASL A, etc.).  I can't really describe this to you in text easily, but:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">enum addressingmode_e {<br />  MODE_IMPLIED,<br />  MODE_IMMEDIATE,<br />  MODE_ZP,<br />  MODE_ABSOLUTE,<br />  MODE_INDIRECT_INDEXED,<br />  MODE_INDEXED_INDIRECT,<br />  MODE_INDIRECT,<br />  MODE_UNUSED<br />};<br /><br />struct opcode_t {<br />  const char *opcodestring;   /* opcode string; NULL if an unused opcode */<br />  uint16_t addressingmode;    /* see enum addressingmode_e */<br />  uint16_t operandsize;       /* number of literal operand byte size */<br />  uint16_t features;          /* spare field; use these for internal control/features/etc., as a bitmask */<br />};<br /><br />const struct opcode_t opcodetable = {<br />  /* 0x00: BRK imm */      { &quot;BRK&quot;, MODE_IMMEDIATE,         1, NULL },  /* note immediate syntax quirk */<br />  /* 0x01: ORA (zp,x) */   { &quot;ORA&quot;, MODE_INDEXED_INDIRECT,  1, NULL },<br />  /* 0x02: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  /* 0x03: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  /* 0x04: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  /* 0x05: ORA zp /*       { &quot;ORA&quot;, MODE_ZP,                1, NULL },<br />  /* 0x06: ASL zp /*       { &quot;ASL&quot;, MODE_ZP,                1, NULL },<br />  /* 0x07: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  /* 0x08: PHP /*          { &quot;PHP&quot;, MODE_IMPLIED,           0, NULL },<br />  /* 0x09: ORA imm /*      { &quot;ORA&quot;, MODE_IMMEDIATE,         1, NULL },<br />  /* 0x0a: ASL /*          { &quot;ASL&quot;, MODE_IMPLIED,           1, NULL },<br />  /* 0x0b: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  /* 0x0c: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  /* 0x0d: ORA abs /*      { &quot;ORA&quot;, MODE_ABSOLUTE,          2, NULL },<br />  /* 0x0e: ASL abs /*      { &quot;ASL&quot;, MODE_ABSOLUTE,          2, NULL },<br />  /* 0x0f: unused /*       { NULL,  MODE_UNUSED,            0, NULL },<br />  ...<br />};<br /></div><br /><br />For BRK, using the features bitmask would help, for example, to allow a syntax one-off for &quot;BRK $xxx&quot; syntax too, rather than what's normally expected for MODE_IMMEDIATE (which is usually some form of hexadecimal or decimal value preceded by &quot;#&quot;, or a label, etc...).  Alternately you could get around this by using, say, MODE_ABSOLUTE for BRK, with an operand size of 1, but you'd need to handle that in the subroutine for handling MODE_ABSOLUTE.  Your call.<br /><br />You get the idea I hope.<br /><br />P.S. -- You're entering a very painful arena writing an assembler.  Prepare for massive amounts of string parsing and syntax pain.  Disassemblers = easier.  ;-)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Fri Aug 03, 2012 3:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2012-08-03T00:46:19-07:00</updated>
<published>2012-08-03T00:46:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97443#p97443</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97443#p97443"/>
<title type="html"><![CDATA[6502 assembler questions: Opcode+Addressing Mode storage]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9148&amp;p=97443#p97443"><![CDATA[
Anybody know what methods assemblers compile opcodes with addressing modes and such in an assembler? Is it best to just sort it by Instruction-&gt;Addressing Modes-&gt;Value for the Opcode and Addressing mode like I was thinking of doing somehow or is best to code in the aaabbbcc encoding of the 6502 and then program for the exceptions? I'm really leaning to the 1st option, and just creating an array of all instructions, then look up if the addressing mode, then will finally lead to a byte value for the opcode. It's the easiest to extend and seems like it would just be simply the fastest way too. Oh well, just wanted to know other peoples ideas. There's more topics to come! Especially with the local labels and such.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Fri Aug 03, 2012 12:46 am</p><hr />
]]></content>
</entry>
</feed>