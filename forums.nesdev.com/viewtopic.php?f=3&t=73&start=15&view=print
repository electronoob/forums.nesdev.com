<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - A new NTSC palette generator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">A new NTSC palette generator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=73">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=73</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Jun 27, 2005 7:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry, that last post was me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Jun 27, 2005 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><em>If you do not emulate "artifact colors", then the bricks in underground levels of Super Mario Bros. won't look like those on real NES hardware. Instead, they might look like the bricks on a VS Unisystem or a PlayChoice 10. </em>
<br />
<br />And they won't shimmer when you scroll the screen (bothersome or not, it was part of the NES experience). I take it Nintendo's arcade boxes used RGB (why use lossy modulation schemes when you can just send the color components directly to the CRT?).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Mon Jun 27, 2005 8:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I take it Nintendo's arcade boxes used RGB (why use lossy modulation schemes when you can just send the color components directly to the CRT?).</div>
<br />
<br />Yes, NES-based arcade hardware generated RGB from a palette stored in a PROM, like typical arcade video hardware of the time (more modern arcade hardware has fully software-defined palettes, like a SNES or a PC's VGA card).  The only unusual thing about Nintendo's arcade hardware was that the color PROM was embedded right in the PPU rather than being on a separate chip; games with different palettes used different PPU models.  This may have been intended as a form of copy protection.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Wed Jun 29, 2005 11:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you do not emulate "artifact colors", then the bricks in underground levels of Super Mario Bros. won't look like those on real NES hardware. Instead, they might look like the bricks on a VS Unisystem or a PlayChoice 10.</div><br /><br />The NES does not use "artifact colors", period. Forget about them, they only apply to the Apple ][ and the CGA 160x200 composite color mode. It doesn't apply the NES simply because the NES generates colors differently. The word "artifact colors" has a specific meaning which does not apply to the NES PPU. <br /><br />What you're describing is the result of the fact that the PPU generates the luminance and the chrominance portion of the video signal in the same process and that it generates square waves instead of sine waves --- it has nothing to do with "artifact colors". The "shimmering" by the way only occurs in the NTSC PPU, the PAL PPU has constant "jagginess".<br /><br />I don't even know whether that's worth emulating --- after all, it doesn't affect the COLOR of a pixel, only the placement.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">NES-based arcade hardware generated RGB from a palette stored in a PROM,</div><br /><br />Right, but keep in mind that the palette found in RGB PPUs is not accurate in that it would correctly represent what NES games should look like --- several PlayChoice 10 games (Volleyball, Punch-Out) actually had their color values changed in the game code from their regular cartridge versions to look better on the PC10 PPU.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That would mean that the lightest row of non-gray colors is approximately half as saturated as the other three rows.</div><br /><br />It is true that x1-xc colors oscillate between the x0 and xd values, HOWEVER that information is only relevant when you're dealing in voltage levels --- it's unusable if you're trying to deduce saturations from a "TV-captured" palette, because there is not a set of x0/xd values that is not clipped --- for 0x and 1x, the d color is clipped at zero; for 2x and 3x, the 0 color is clipped at 255 (or 1.0, whatever your notation is).<br />Chances are that the 3x colors are just as saturated as the rest (level-wise), but appear less saturated because most TVs "hard clip" the input signal at 120 IRE, thus reducing modulation and therefore, saturation.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can you provide more details as to how US and Japanese sets differ from each other and from the NTSC specification, or does it vary from manufacturer to manufacturer?</div>
<br />
<br />The coefficients indeed differ from manufacturer to manufacturer and from model to model, but the algorithms are more-or-less the same. For example, a given US TV set might use a color decoder with the following characteristics (taken from a Sony service manual):
<br />
<br />R-Y: 112° ´ 0.83, G-Y: 252° ´ 0.3 (B-Y: 0° ´ 1)
<br />
<br />This would translate into the following decoder matrix:
<br />R = Y + 1.539*V - 0.622*U
<br />G = Y - 0.571*V - 0.185*U
<br />B = Y + 0.000*V + 2.000*U
<br />
<br />This matrix represents a typical "red boost", supposedly making flesh tones more "natural" on 9300K phosphors (manufacturers use 9300K phosphors because they look "brighter" than the 6500K that the standard calls for). Looks a little like Chris Covell's old captured palette.
<br />
<br />Again, other sets might use different coefficients, but the algorithm is basically the same, at least for US sets.
<br />
<br />Japanese TV sets are a different story, because Asian fleshtones are different; instead of a "red boost", you have a "yellow boost". Basically, "Yellowness" is (I-Q), so, to boost yellows, you'd do something like this:
<br />Yellowness = (I-Q);
<br />if (Yellowness &gt; 0) {
<br />  I = I + Yellowness*factor;
<br />  Q = Q - Yellowness*factor;
<br />}
<br />"factor" would of course be &lt; 1. The decoding matrix would be more-or-less like the above with a little less gain in the red channel, I suppose.
<br />
<br />Only as a general idea though, I don't know the exact coefficients for any given set because newer Japanese TVs (to whose service manuals I have access) don't use "yellow boost" anymore because everyone over there uses Digital TV now and thus these "picture improvement" features have become obsolete. Consequently, the matrices listed in today's Japanese TV's service manuals are basically like the same as the NTSC standard's.
<br />
<br />Anyway, maybe you'd like to see my calculated "Japanese" palettes, which I like very much and match those old Japanese TVs I've seen:
<br /><!-- m --><a class="postlink" href="http://www.lau-net.de/~nl2305/6500K.pal">http://www.lau-net.de/~nl2305/6500K.pal</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://www.lau-net.de/~nl2305/9300K.pal">http://www.lau-net.de/~nl2305/9300K.pal</a><!-- m -->
<br />
<br />Use the first one if your PC monitor is set to 6500K (it usually is if you've calibrated your monitor for photoshop) --- it will simulate the blueish picture of a 9300K monitor; if your PC monitor is set to 9300K (which most monitors are factory-setting-wise), use the second one, it's like the "raw output". Make sure you're getting the right one for accuracy --- if you use the 6500K.pal on a 9300K monitor, it'll look way too blue; if you use the 9300K.pal on a 6500K monitor, it'll look too yellowish. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />Notice how the yellow boost that is applied in these palettes makes SMB3's color combinations of 0x27 and 0x36 actually look sensible, or likewise 0x29 and 0x38 in Ice Climber and others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Wed Jun 29, 2005 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">It is true that x1-xc colors oscillate between the x0 and xd values, HOWEVER that information is only relevant when you're dealing in voltage levels --- it's unusable if you're trying to deduce saturations from a "TV-captured" palette, because there is not a set of x0/xd values that is not clipped --- for 0x and 1x, the d color is clipped at zero; for 2x and 3x, the 0 color is clipped at 255 (or 1.0, whatever your notation is).<br />Chances are that the 3x colors are just as saturated as the rest (level-wise), but appear less saturated because most TVs "hard clip" the input signal at 120 IRE, thus reducing modulation and therefore, saturation.</div><br /><br />So, can someone use a scope and get the actual voltage levels for all the x0 and xD colors?<br /><br /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">The coefficients indeed differ from manufacturer to manufacturer and from model to model, but the algorithms are more-or-less the same. For example, a given US TV set might use a color decoder with the following characteristics (taken from a Sony service manual):<br /><br />R-Y: 112° x 0.83, G-Y: 252° x 0.3 (B-Y: 0° x 1)<br /><br />This would translate into the following decoder matrix:<br />R = Y + 1.539*V - 0.622*U<br />G = Y - 0.571*V - 0.185*U<br />B = Y + 0.000*V + 2.000*U</div><br /><br />Hmm, it looks like I misunderstood what those angles meant.  I assumed that 112° and 252° were the angles of the hues that decoded to pure red (R &gt; G = B) and pure green (G &gt; R = B) relative to the hue that decoded to pure blue (B &gt; R = G)  For a standard NTSC decoder, the angles of the pure primary colors from the Q axis are:<br /><br />R = tan-1[(-0.647 - 1.703)/(-1.106 + 0.272)] = 70.5°<br />G = tan-1[( 0.621 - 1.703)/(-1.106 - 0.956)] = 207.7°<br />B = tan-1[( 0.621 + 0.647)/(-0.272 - 0.956)] = -45.9°<br /><br />The angle between red and blue is 116.4° and the angle between green and blue is 253.6°, which are very close to the angles given in the Sony datasheet, so you can see why I thought along these lines.<br /><br />Previously you referred to I and Q being 105°-120° apart on Japanese decoders, but now you're talking in terms of U and V.  Could you clarify what you meant earlier in reference to Japanese equipment?<br /><br /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">Anyway, maybe you'd like to see my calculated "Japanese" palettes, which I like very much and match those old Japanese TVs I've seen:<br /><!-- m --><a class="postlink" href="http://www.lau-net.de/~nl2305/6500K.pal">http://www.lau-net.de/~nl2305/6500K.pal</a><!-- m --><br /><!-- m --><a class="postlink" href="http://www.lau-net.de/~nl2305/9300K.pal">http://www.lau-net.de/~nl2305/9300K.pal</a><!-- m --></div>
<br />
<br />I think I'd rather see the algorithm you used to create those palettes.  What I'm really interested in is not creating a single "perfect" NES palette, but an algorithm with parameters which can be tweaked to simulate the colors produced on a variety of displays.  This algorithm could be used in emulators of other 
<br />
<br />Before I forget, I had one question about the PAL version of the NES.  Since PAL uses YUV instead of YIQ, are the hues on a PAL PPU "rotated" one step compared to a NTSC PPU?  I've never seen a PAL NES in operation, but the "PAL palettes" for emulators I've seen (such as the one hardcoded into FCEUltra) all make hue x8 orange-yellow, not green-yellow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Wed Jun 29, 2005 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This time not only did I forget my name, I left a sentence unfinished.  What I meant to say in the second-last paragraph was "This algorithm could be used for emulation of other composite video hardware similar to the NES PPU in the way they produced colors, such as the Atari TIA family and the Commodore VIC, VIC II and TED (used in the VIC20, C64/C128 and Plus4/C16 respectively)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Wed Jun 29, 2005 3:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For a standard NTSC decoder, the angles of the pure primary colors from the Q axis are:</div><br /><br />Nonono, that's completely wrong. If you want to convert RGB values to NTSC and back, you need to use the proper matrices. Trigonometry alone won't get you anywhere until you're using the proper scale factors.<br />See <!-- m --><a class="postlink" href="http://wwwzenger.informatik.tu-muenchen.de/lehre/vorlesungen/graphik/info/csc/COL_29.htm">http://wwwzenger.informatik.tu-muenchen ... COL_29.htm</a><!-- m --><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Previously you referred to I and Q being 105°-120° apart on Japanese decoders, but now you're talking in terms of U and V. Could you clarify what you meant earlier in reference to Japanese equipment?</div><br /><br />It's just different ways of talking about the same thing:<br />V = 0.877*(R-Y)<br />U = 0.493*(B-Y)<br />I = V plus 33 degrees<br />Q = U plus 33 degrees.<br /><br />R-Y is at 90 degrees, as is V.<br />B-Y is at 0 degrees, as is U.<br />I is at 123 degrees.<br />Q is at 33 degrees.<br /><br />You can decode the same signal either using I and Q, or U and V; the result is the same except that the hue offset is different, which is okay since all NTSC decoders have a hue control anyway.<br />I and Q, as well as U and V, are 90° apart in standard; they are further apart (up to 120°) in common implementations.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Since PAL uses YUV instead of YIQ, are the hues on a PAL PPU "rotated" one step compared to a NTSC PPU?</div><br /><br />The PAL NES creates hues that are rotated half a step (15°) vs. the NTSC PPU, making color x8 look like SMPTE yellow (R=G). Forget about "hard-coded" palettes, they're based on what emulator authors think "looks good". Yes, the PAL NES actually creates different colors than the NTSC NES.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think I'd rather see the algorithm you used to create those palettes.</div><br /><br />Well, what did I just post before, about "Yellowness" and such... <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This algorithm could be used for emulation of other composite video hardware similar to the NES PPU in the way they produced colors, such as the Atari TIA family and the Commodore VIC, VIC II and TED (used in the VIC20, C64/C128 and Plus4/C16 respectively</div>
<br />
<br />Well, these are American machines, so try the US decoder matrix I gave you. You can also convert SNES RGB values to YUV using the standard encoder matrix and back to RGB using the "Sony US TV" decoder matrix if you're in the mood. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Wed Jun 29, 2005 9:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For a standard NTSC decoder, the angles of the pure primary colors from the Q axis are:</div><br /><br />Nonono, that's completely wrong. If you want to convert RGB values to NTSC and back, you need to use the proper matrices. Trigonometry alone won't get you anywhere until you're using the proper scale factors.<br />See <!-- m --><a class="postlink" href="http://wwwzenger.informatik.tu-muenchen.de/lehre/vorlesungen/graphik/info/csc/COL_29.htm">http://wwwzenger.informatik.tu-muenchen ... COL_29.htm</a><!-- m --></div><br /><br />I think you misunderstood what I was doing.  I was using the "proper" matrix:<br />    <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91; R &#93;&nbsp; &nbsp;&#91; 1&nbsp; 0.956&nbsp; 0.621 &#93;&#91; Y &#93;<br />&#91; G &#93; = &#91; 1 -0.272 -0.647 &#93;&#91; I &#93;<br />&#91; B &#93;&nbsp; &nbsp;&#91; 1 -1.106&nbsp; 1.703 &#93;&#91; Q &#93;</div><br /><br />What I was doing was <em>inverting</em> this matrix to find the NTSC hues of SMPTE red, SMPTE green and SMPTE blue.  An equivalent (and simpler) way of doing it would have been to start with the inverse matrix:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91; Y &#93;&nbsp; &nbsp;&#91; 0.299&nbsp; 0.587&nbsp; 0.114 &#93;&#91; R &#93;<br />&#91; I &#93; = &#91; 0.596 -0.274 -0.322 &#93;&#91; G &#93;<br />&#91; Q &#93;&nbsp; &nbsp;&#91; 0.211 -0.523&nbsp; 0.312 &#93;&#91; B &#93;</div><br /><br />and just plug in RGB triplets of (1, 0, 0), (0, 1, 0) and (0, 0, 1)  (Yes, I know these are too saturated to be legal NTSC colors, but the math is simplest this way...)<br /><br />Doing this I get:<br /><br />RGB(1, 0, 0) = YIQ(0.299, 0.596, 0.211)<br />hue = tan-1(0.596 / 0.211) = 70.5°<br /><br />RGB(0, 1, 0) = YIQ(0.587, -0.274, 0.523)<br />hue = tan-1(-0.274 / -0.523) = 207.7°<br /><br />RGB(0, 0, 1) = YIQ(0.114, -0.322, 0.312)<br />hue = tan-1(-0.322 / 0.312) = -45.9°<br /><br />...which are exactly the same hues as I got by inverting the YIQ-to-RGB matrix (as expected).<br /><br />Since you've made it clear that this isn't what those numbers mean in the first place, this discussion is probably meaningless.<br /><br />By the way, the RGB-to-YIQ matrix on that page you linked to has a couple of the signs backwards.<br /><br /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Previously you referred to I and Q being 105°-120° apart on Japanese decoders, but now you're talking in terms of U and V. Could you clarify what you meant earlier in reference to Japanese equipment?</div><br /><br />It's just different ways of talking about the same thing:</div><br /><br />Yes, I already know what the relationship between I/Q and U/V is.  Sorry, I understand what you meant now.<br /><br /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Since PAL uses YUV instead of YIQ, are the hues on a PAL PPU "rotated" one step compared to a NTSC PPU?</div><br /><br />The PAL NES creates hues that are rotated half a step (15°) vs. the NTSC PPU, making color x8 look like SMPTE yellow (R=G). Forget about "hard-coded" palettes, they're based on what emulator authors think "looks good". Yes, the PAL NES actually creates different colors than the NTSC NES.</div>
<br />
<br />I suspected such, but every NES dever I asked insisted that NTSC and PAL units produced the exact same colors.  Thanks for the confirmation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Wed Jun 29, 2005 10:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> (Yes, I know these are too saturated to be legal NTSC colors, but the math is simplest this way...)</div><br /><br />Both 100% red and 100% blue are completly legal NTSC colors, in fact, the 0.877 and 0.493 coeffecients were deliberately chosen so that 100% red and 100% blue, which do occur in nature, WOULD be legal. 100% yellow is "illegal" in NTSC because the upper peak of the modulation exceeds 120 IRE (reaches about 133 IRE).<br />By the way, there's one more systematic difference between Japanese and "real" (American) NTSC: the NTSC standard calls for a 7.5% setup, Japanese devices however use 0%. I think you can even select between these two on some camcorders...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Since you've made it clear that this isn't what those numbers mean in the first place, this discussion is probably meaningless.</div><br /><br />Your equations would be right if it was about the R axis, not the R-Y axis... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By the way, the RGB-to-YIQ matrix on that page you linked to has a couple of the signs backwards.</div><br /><br />Right, I've been meaning to email the author of those pages a couple of times, but always forgot... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I suspected such, but every NES dever I asked insisted that NTSC and PAL units produced the exact same colors. Thanks for the confirmation.</div>
<br />
<br />I must say though that I have never seen an American NES unit in operation, I have only seen a PAL NES as well as Japanese Famicoms, Twin Famicoms and AV Famicoms; so MAYBE the American NES produces hues like the PAL NES, though I think that's extremely unlikely, as the PPU is the same.
<br />
<br />By the way, you wrote that you'd like to emulate the output for a variety of displays; that would mean you'd also have to adjust to different phosphor types, effectively necessitating complete color management, Photoshop-like. Basically what you'd want is a general conversion algorithm for RGB values between sets of given phosphor chromaticities. I've written a couple of C code lines for this, tell me if you need anything. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Thu Jun 30, 2005 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">Both 100% red and 100% blue are completly legal NTSC colors, in fact, the 0.877 and 0.493 coeffecients were deliberately chosen so that 100% red and 100% blue, which do occur in nature, WOULD be legal. 100% yellow is "illegal" in NTSC because the upper peak of the modulation exceeds 120 IRE (reaches about 133 IRE).<br />By the way, there's one more systematic difference between Japanese and "real" (American) NTSC: the NTSC standard calls for a 7.5% setup, Japanese devices however use 0%. I think you can even select between these two on some camcorders...</div><br /><br />Yeah, I remember reading somewhere about the difference in black levels between standard NTSC and "NTSC-J".<br /><br />I was wondering a while ago exactly where the 0.877 and 0.493 coefficients in the YUV matrix came from.  I was able to work out that their ratio determined the angle of G-Y, and presumably was chosen so that G-Y would be more or less equidistant from R-Y and B-Y (it's actually just a bit closer to B-Y)<br /><br /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">By the way, you wrote that you'd like to emulate the output for a variety of displays; that would mean you'd also have to adjust to different phosphor types, effectively necessitating complete color management, Photoshop-like. Basically what you'd want is a general conversion algorithm for RGB values between sets of given phosphor chromaticities. I've written a couple of C code lines for this, tell me if you need anything.</div>
<br />
<br />It would be great if you could point me to a general formula for converting between color temperatures.  The page you linked to has the following matrices for converting between NTSC and EBU (=PAL?) colors:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;Rntsc&#93;&nbsp; &nbsp;&#91;0.6984&nbsp; 0.2388&nbsp; 0.0319&#93;&#91;Rebu&#93;<br />&#91;Gntsc&#93; = &#91;0.0193&nbsp; 1.0727 -0.0596&#93;&#91;Gebu&#93;<br />&#91;Bntsc&#93;&nbsp; &nbsp;&#91;0.0169&nbsp; 0.0525&nbsp; 0.8450&#93;&#91;Bebu&#93;<br /><br /><br />&#91;Rebu&#93;&nbsp; &nbsp;&#91; 1.4425 -0.3173 -0.0769&#93;&#91;Rntsc&#93;<br />&#91;Gebu&#93; = &#91;-0.0275&nbsp; 0.9350&nbsp; 0.0670&#93;&#91;Gntsc&#93;<br />&#91;Bebu&#93;&nbsp; &nbsp;&#91;-0.0272 -0.0518&nbsp; 1.1081&#93;&#91;Bntsc&#93;</div>
<br />
<br />Are these color temperature conversions, or something else?  (And are they even correct, or are some of the signs reversed again?)  The page mentions that NTSC and EBU have different "white points", which I understand is related to color temperature (but am likely completely wrong)
<br />
<br />As you've probably guessed by now, my knowledge of this stuff is pretty fragmentary and mostly gleaned from a lot of Googling and doing math by hand.  My background is in biology, not color science...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Thu Jun 30, 2005 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">I was wondering a while ago exactly where the 0.877 and 0.493 coefficients in the YUV matrix came from.  </div><br /><br />Well, the low peak of the video signal must not go below a level of -0.33:<br />Luma - Chroma &gt; -0.33<br /><br />The nature of quadrature modulation means we can write it like this:<br />Y - sqrt (V² + U²) &gt; -0.33<br /><br />For R=1.0 or B=1.0, this would be violated if we just used V=R-Y and U=B-Y. Therefore, we need to scale them in such a way that R=1.0 and B=1.0 are just within range.<br />Let coR, coG, coB be given (they'd be 0.299, 0.587 and 0.114 in current implementations), and scR, scB the scale factors for R-Y,B-Y that we're looking for. The following must be fulfilled simultaneously (sorry, don't know how to do this in HTML):<br /><br /><img src="http://www.lau-net.de/~nl2305/scales.png" alt="Image" /><br /><br />The first line is for R=1.0, which means Y=coR, R-Y=1-coR, B-Y=0-coR. The second line is for B=1.0, you get the idea.<br />Have a lot of fun working out the scale factors from that. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It would be great if you could point me to a general formula for converting between color temperatures.  The page you linked to has the following matrices for converting between NTSC and EBU (=PAL?) colors:</div><br /><br />The general algorithm would be to convert from (linear!) RGB values for the source phosphor to CIE XYZ values, and then from those to linear RGB values for the target phosphor. Setting up RGB&lt;-&gt;XYZ matrices from a given set of chromaticities is somewhat involved and best shown using C code, not a formula.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are these color temperature conversions, or something else?  (And are they even correct, or are some of the signs reversed again?)  The page mentions that NTSC and EBU have different "white points", which I understand is related to color temperature (but am likely completely wrong)</div>
<br />
<br />Color temperature means white point. These equations are basically right, however meaningless since those "NTSC primaries" this page and other people keep talking about are completely obsolete (no real non-ancient NTSC TV uses them); unless you're trying to emulate the look of a <a href="http://home.att.net/~pldexnis/restoretv.html" class="postlink">1954 RCA CT-100 TV</a> set, you'd use "real world" primaries from actual monitor profiles, not these theoretical NTSC/SMPTE-C/EBU values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BootGod</b> [ Thu Jun 30, 2005 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been trying to come up with a NES palette of my own for the longest time. I tried using the vid capture method to grab colors (or more than one card) but the results of that are way off. I'd tried Kevin Horton's generator but could never get satisfactory results. I just found your (AWJ) method a few days ago, and it's better than Kevin's but still doesn't do it for me <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> 
<br />
<br />What I ended up doing a while back is color calibrating my TV and monitor as best I could and just winging my own pallete by eyeballing it from the NES playing on the TV. I'm still not %100 pleased with it, but I think it's pretty good. Like NewRisingSun said, I don't think there is a perfect hard coded palette.
<br />
<br />My results from my palette are interesting though, the hue shifts are quite uneven and so is the saturation, but to a lesser extent. I also noticed there is quite a difference between the color from RF output and composite output. The composite colors seem to be distributed better than RF (no surprise) but I actually found the RF colors to be more fitting and pleasing to the eye in most cases. BTW, I'm using an NTSC TV/NES.
<br />
<br />I am very interested in what you guys come up with here <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />
<br />NewRisingSun, this is a somewhat strange question, but it seems you may know or be able to find this out. The TV I'm using for my NES and other older consoles is a 27" RCA model# 27F630T. I'm wondering if you know how to enter the service mode on this? I've looked elsewhere on the net but have never found a combo that works. My screen geometry is messed up, it's rotated I would guess about 5 - 10 degrees. Very apparent with computer generated images.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NewRisingSun</b> [ Fri Jul 01, 2005 1:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know anything about current RCA sets --- they're not even sold here in Europe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 01, 2005 5:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">I don't know anything about current RCA sets --- they're not even sold here in Europe.</div>
<br />Are there any sets sold under the name THOMSON? Those are made by the same company as current RCA or current GE sets.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Sat Jul 02, 2005 7:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">NewRisingSun wrote:</div><div class="quotecontent">R-Y: 112° ´ 0.83, G-Y: 252° ´ 0.3 (B-Y: 0° ´ 1)<br /><br />This would translate into the following decoder matrix:<br />R = Y + 1.539*V - 0.622*U<br />G = Y - 0.571*V - 0.185*U<br />B = Y + 0.000*V + 2.000*U</div>
<br />
<br />How did you get those values from those angles ? When I don't understand something, I just do trial-and-error, and the only one I could find was tan(252)/2=1.539

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>