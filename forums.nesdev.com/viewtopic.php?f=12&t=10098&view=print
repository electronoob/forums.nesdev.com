<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Having trouble compiling snes source code</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Having trouble compiling snes source code</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10098">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10098</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Tue May 14, 2013 7:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello,<br /><br />I been trying to do some sprite work and learn for the SNES.<br /><br />I been practicing changing the sprites for Christmas Craze. But I am having trouble compiling the ROM.<br /><br />My Set up is Wind XP SP3, I have Python 2.7 installed.<br /><br />I grabbed the SNES SKD from Here:<br /><br /><!-- m --><a class="postlink" href="http://jiggawatt.org/notmine/SNES_SDK_r67_Win32.zip">http://jiggawatt.org/notmine/SNES_SDK_r67_Win32.zip</a><!-- m --> <br /><br />and I followed instructions on the source code step by step.<br /><br />The problem is starts when I try compile the ROM. <br /><br />I run the Compile_all.bat included on the CC source code and it runs all through. It outputs a game.ps1 file which gets deleted immediately.<br /><br /><br />Here is the log:<br /><br /><br />C:\snessdk\christmas&gt;call compsnd.bat <br /><br />C:\snessdk\christmas&gt;path=path;tools\ <br /><br />C:\snessdk\christmas&gt;del spc700.bin <br /><br />C:\snessdk\christmas&gt;pre spc700.asm <br /><br />C:\snessdk\christmas&gt;bass -arch=table -o spc700.bin spc700.s <br />unknown argument: -arch=table<br />bass v01<br />author: byuu<br />usage: bass -arch=(arch) [options] -o output input [input ...]<br /><br />supported archs:<br />  snes-cpu<br />  snes-cpu-canonical<br />  snes-smp<br />  snes-smp-canonical<br /><br />supported options:<br />  -case-insensitive<br /><br /><br />C:\snessdk\christmas&gt;rem pause <br /><br />C:\snessdk\christmas&gt;del spc700.s <br /><br />C:\snessdk\christmas&gt;call makeres.bat <br /><br />C:\snessdk\christmas&gt;path=path;tools\ <br /><br />C:\snessdk\christmas&gt;del gfx\*.chr <br /><br />C:\snessdk\christmas&gt;del gfx\*.pal <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\intro.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\title.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back1.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back2.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back3.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back4.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back5.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\backmenu.bmp -b -256 -s32 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\backdone.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\gameover.bmp -b -256 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\tileset.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\flares.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\leds.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\spr16.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_stand.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_walk.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_throw.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_jump.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_hit.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_make.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_lose.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_alt.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\ufo1.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\ufo2.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\ufo2_alt.bmp -b <br /><br />C:\snessdk\christmas&gt;call compile.bat <br /><br />C:\snessdk\christmas&gt;REM C -&gt; ASM / S <br /><br />C:\snessdk\christmas&gt;..\bin\816-tcc.exe -Wall -I../include -o game.ps1 -c game.c <br /><br />C:\snessdk\christmas&gt;rem pause <br /><br />C:\snessdk\christmas&gt;REM Optimize ASM files <br /><br />C:\snessdk\christmas&gt;..\bin\816-opt.py game.ps1  1&gt;game.s <br /><br />C:\snessdk\christmas&gt;REM ASM -&gt; OBJ <br /><br />C:\snessdk\christmas&gt;..\bin\wla-65816.exe -io game.s game.obj <br /><br />C:\snessdk\christmas&gt;REM OBJ -&gt; SMC <br /><br />C:\snessdk\christmas&gt;..\bin\wlalink.exe -dvSo game.obj game.smc <br /><br />C:\snessdk\christmas&gt;rem pause <br /><br />C:\snessdk\christmas&gt;REM delete files <br /><br />C:\snessdk\christmas&gt;del *.ps1 <br /><br />C:\snessdk\christmas&gt;del *.s <br /><br />C:\snessdk\christmas&gt;del *.obj <br /><br />C:\snessdk\christmas&gt;del *.sym <br /><br />C:\snessdk\christmas&gt;rem ..\zsnesw151\zsnesw.exe game.smc <br /><br />C:\snessdk\christmas&gt;game.smc<br /><br /><br /><br /><br />Anybody knows whats up? is it the SP3?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>whicker</b> [ Tue May 14, 2013 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />well, I know I'm probably pointing out the obvious, but the program bass is receiving -arch=table<br />Then it goes on to complain that &quot;table&quot; isn't one of the valid choices, and tells you what the choices should be.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Tue May 14, 2013 11:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah I tried it with the new bass at Byuu's site and the old bass that the original developer used, same results. I haven't restarted the PC after like 4-5 installations of the python and change of bass tool, so I will do so right now, just got home.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qwertymodo</b> [ Tue May 14, 2013 11:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm pretty sure bass has undergone several complete re-writes, so you'll definitely want to use the same version that the original author used, or get ahold of byuu and see if he can help you update to the new bass spec.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Wed May 15, 2013 12:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Got it to behave a bit better.<br /><br />C:\snessdk\christmas&gt;call compsnd.bat <br /><br />C:\snessdk\christmas&gt;path=path;tools\ <br /><br />C:\snessdk\christmas&gt;del spc700.bin <br /><br />C:\snessdk\christmas&gt;pre spc700.asm <br /><br /><strong>C:\snessdk\christmas&gt;bass -arch=table -o spc700.bin spc700.s <br />[bass error] spc700.s:123:1:<br />&gt; unknown command: org 0</strong><br /><br />C:\snessdk\christmas&gt;rem pause <br /><br />C:\snessdk\christmas&gt;del spc700.s <br /><br />C:\snessdk\christmas&gt;call makeres.bat <br /><br />C:\snessdk\christmas&gt;path=path;tools\ <br /><br />C:\snessdk\christmas&gt;del gfx\*.chr <br /><br />C:\snessdk\christmas&gt;del gfx\*.pal <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\intro.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\title.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back1.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back2.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back3.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back4.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\back5.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\backmenu.bmp -b -256 -s32 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\backdone.bmp -b -256 -s16 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\gameover.bmp -b -256 <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\tileset.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\flares.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\leds.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\spr16.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_stand.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_walk.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_throw.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_jump.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_hit.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_make.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_lose.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\hero_alt.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\ufo1.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\ufo2.bmp -b <br /><br />C:\snessdk\christmas&gt;snesbmp gfx\ufo2_alt.bmp -b <br /><br />C:\snessdk\christmas&gt;call compile.bat <br /><br /><br /><br />But still have a bass problem,  that line is on the compsnd.bat file which goes<br /><br />&quot;path=path;tools\<br />del spc700.bin<br />pre spc700.asm<br />bass -arch=table -o spc700.bin spc700.s<br />rem pause<br />del spc700.s&quot;<br /><br /><br />Im going to try to find the old Bass, if not get a hold of byuu<br /><br />Im clueless at this point!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed May 15, 2013 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">qwertymodo wrote:</div><div class="quotecontent">I'm pretty sure bass has undergone several complete re-writes, so you'll definitely want to use the same version that the original author used, or get ahold of byuu and see if he can help you update to the new bass spec.</div><br />Shiru included a copy of bass.exe in the ZIP, but apparently it's the wrong version. I would contact Shiru about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ramsis</b> [ Wed May 15, 2013 2:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pichichi010 wrote:</div><div class="quotecontent"><strong>C:\snessdk\christmas&gt;bass -arch=table -o spc700.bin spc700.s <br />[bass error] spc700.s:123:1:<br />&gt; unknown command: org 0</strong></div><br />You need to rephrase a few things in the source to be able to compile it with bass v11. I just had a look at it, here's what needs to be changed to avoid the compiler errors I encountered. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Open spc700.asm from the archive root with the text editor of your choice.<br /><br />Go to line 123, look for:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">org 0</div><br />Replace with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">origin 0x0000</div><br /><br />Go to line 562, look for:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">bra .read</div><br />Replace with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jmp .read</div><br /><br />Go to line 885-900, look for:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;macro for samples<br /><br />macro sample ptr,loop<br />&nbsp; &nbsp;dw {ptr}<br />&nbsp; &nbsp;dw {ptr}+{loop}<br />endmacro<br /><br />macro adsr ar,dr,sl,sr<br />&nbsp; &nbsp;db $80|{ar}|({dr}&lt;&lt;4)<br />&nbsp; &nbsp;db {sr}|({sl}&lt;&lt;5)<br />endmacro<br /><br />macro vib speed,depth<br />&nbsp; &nbsp;db {speed}<br />&nbsp; &nbsp;db {depth}<br />endmacro<br /></div><br />Replace with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;macro for samples<br /><br />macro sample ptr,loop<br />&nbsp; &nbsp;dw {self::ptr}<br />&nbsp; &nbsp;dw {self::ptr}+{self::loop}<br />endmacro<br /><br />macro adsr ar,dr,sl,sr<br />&nbsp; &nbsp;db $80|{self::ar}|({self::dr}&lt;&lt;4)<br />&nbsp; &nbsp;db {self::sr}|({self::sl}&lt;&lt;5)<br />endmacro<br /><br />macro vib speed,depth<br />&nbsp; &nbsp;db {self::speed}<br />&nbsp; &nbsp;db {self::depth}<br />endmacro<br /></div><br /><br />Finally, go to line 904, look for:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">org $0600&nbsp; &nbsp;;$0800 in memory</div><br />Replace with:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">origin 0x0600&nbsp; &nbsp;;$0800 in memory</div><br /><br />That should be it. Good luck! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Wed May 15, 2013 9:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haha had to change the spc700.asm to html so I could see the lines on dreamweaver I was using just wordpad to edit everything lol.<br /><br />Anyways it gave me a similar error on the bass &quot;org&quot;<br /><br /><br /><strong>C:\snessdk\christmas&gt;bass -arch=table -o spc700.bin spc700.s <br />[bass error] spc700.s:123:1:<br />&gt; unknown command: org 0x0000</strong><br /><br />I will check again if I missed any changes but I think everything was done correctly.<br /><br />Thanks for your help man!<br /><br /><br />ETA:<br /><br />I found this at the end of the compiling text<br /><br />DISCARD: data.asm: discarding an empty section &quot;.rodata1&quot;.<br /><br /><br />Now I get 3 files done, the game.ps1 game.s and game.obj and a spc700.bin file; all of them get deleted except the bin file.<br /><br />although these last 2 tries I didn't get the game.obj file, weird.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed May 15, 2013 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ramsis said to change <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">org 0</tt> to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">origin 0x0000</tt> (not <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">org 0x0000</tt>).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Wed May 15, 2013 9:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ahh crap, missed that, let me try it.<br /><br /><br />ETA:<br /><br />C:\snessdk\christmas&gt;bass -arch=table -o spc700.bin spc700.s <br />[bass error] spc700.s:518:1:<br />&gt; branch out of bounds

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed May 15, 2013 10:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And that error would indicate use of a branching instruction which should be turned into a jumping instruction; branch instructions have limited range (to save bytes and/or cycles), hence the phrase &quot;out of bounds&quot;.  This is similar to what Ramsis proposed around line ~562.  However, if it's a conditional branch instruction (vs. just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bra</tt>) then some additional code will have to be written (i.e. you cannot turn a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bbc/bbs/bcc/bcs/beq/bmi/bne/bpl/bvc/bvs</tt> instruction into a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp</tt>).<br /><br />I should note that the instructions I'm talking about/listed here are SPC-700 instructions and not 65816 instructions (though many are named similarly); I cannot tell if this <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">spc700.s</tt> file contains 65816 assembly or SPC-700 assembly, so I'm assuming it's SPC-700.<br /><br />You're not posting source code/lines so it's difficult for me to tell what the assembler is bitching about; all I have is an arbitrary line number.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Wed May 15, 2013 10:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, here it is from the Spc700.asm<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">arch snes.smp<br /><br /><br />define musicData $e000&nbsp; &nbsp;;fixed location for music data<br /><br />;I/O registers<br /><br />define TEST $f0<br />define CTRL $f1<br />define ADDR $f2<br />define DATA $f3<br />define CPU0 $f4<br />define CPU1 $f5<br />define CPU2 $f6<br />define CPU3 $f7<br />define TMP0 $f8<br />define TMP1 $f9<br />define T0TG $fa<br />define T1TG $fb<br />define T2TG $fc<br />define T0OT $fd<br />define T1OT $fe<br />define T2OT $ff<br /><br />;DSP channel registers, x0..x9, x is channel number<br /><br />define DSP_VOLL&nbsp; $00<br />define DSP_VOLR&nbsp; $01<br />define DSP_PL&nbsp; &nbsp; $02<br />define DSP_PH&nbsp; &nbsp; $03<br />define DSP_SRCN&nbsp; $04<br />define DSP_ADSR1 $05<br />define DSP_ADSR2 $06<br />define DSP_GAIN&nbsp; &nbsp; $07<br />define DSP_ENVX&nbsp; &nbsp; $08<br />define DSP_OUTX&nbsp; &nbsp; $09<br /><br />;DSP registers for global settings<br /><br />define DSP_MVOLL $0c<br />define DSP_MVOLR $1c<br />define DSP_EVOLL $2c<br />define DSP_EVOLR $3c<br />define DSP_KON&nbsp; &nbsp; $4c<br />define DSP_KOF&nbsp; &nbsp; $5c<br />define DSP_FLG&nbsp; &nbsp; $6c<br />define DSP_ENDX&nbsp; &nbsp; $7c<br />define DSP_EFB&nbsp; &nbsp; $0d<br />define DSP_PMON&nbsp; &nbsp; $2d<br />define DSP_NON&nbsp; &nbsp; $3d<br />define DSP_EON&nbsp; &nbsp; $4d<br />define DSP_DIR&nbsp; &nbsp; $5d<br />define DSP_ESA&nbsp; &nbsp; $6d<br />define DSP_EDL&nbsp; &nbsp; $7d<br />define DSP_C0&nbsp; &nbsp; $0f<br />define DSP_C1&nbsp; &nbsp; $1f<br />define DSP_C2&nbsp; &nbsp; $2f<br />define DSP_C3&nbsp; &nbsp; $3f<br />define DSP_C4&nbsp; &nbsp; $4f<br />define DSP_C5&nbsp; &nbsp; $5f<br />define DSP_C6&nbsp; &nbsp; $6f<br />define DSP_C7&nbsp; &nbsp; $7f<br /><br />;vars<br /><br />define D_TEMP&nbsp; &nbsp; $00<br /><br />define D_SYNC&nbsp; &nbsp; $08<br />define D_BUFPTR&nbsp; &nbsp; $09<br />define D_KON&nbsp; &nbsp; $0a<br />define D_KOF&nbsp; &nbsp; $0b<br />define D_STEREO&nbsp; &nbsp; $0c<br /><br />define M_ENABLE&nbsp; &nbsp; $10&nbsp; &nbsp;;byte<br />define M_ROW&nbsp; &nbsp; $11&nbsp; &nbsp;;byte<br />define M_ORDPTR_L $12&nbsp; &nbsp;;word<br />define M_ORDPTR_H $13<br />define M_ORDINC&nbsp; &nbsp; $14&nbsp; &nbsp;;byte<br />define M_CHCUR0x $15&nbsp; &nbsp;;byte<br />define M_CHCURx0 $16&nbsp; &nbsp;;byte<br />define M_CHOFF&nbsp; &nbsp; $17&nbsp; &nbsp;;byte<br />define M_UPDROW&nbsp; &nbsp; $18&nbsp; &nbsp;;byte<br />define M_SPEED&nbsp; &nbsp; $19&nbsp; &nbsp;;byte<br /><br />define M_ORDBEGIN_L&nbsp; &nbsp;{musicData}<br />define M_ORDBEGIN_H&nbsp; &nbsp;{musicData}+1<br />define M_ORDLOOP_L&nbsp; &nbsp;{musicData}+2<br />define M_ORDLOOP_H&nbsp; &nbsp;{musicData}+3<br />define M_CHANNELS&nbsp; &nbsp;{musicData}+4<br />define M_INITSPEED&nbsp; &nbsp;{musicData}+5<br />define M_PATTERNS_L&nbsp; &nbsp;{musicData}+6<br />define M_PATTERNS_H&nbsp; &nbsp;{musicData}+7<br /><br />define M_CHSIZE&nbsp; &nbsp;$0b&nbsp; &nbsp;;11 bytes per channel<br /><br />define M_CH0&nbsp; &nbsp;$20<br />define M_CH1&nbsp; &nbsp;{M_CH0}+{M_CHSIZE}<br />define M_CH2&nbsp; &nbsp;{M_CH1}+{M_CHSIZE}<br />define M_CH3&nbsp; &nbsp;{M_CH2}+{M_CHSIZE}<br />define M_CH4&nbsp; &nbsp;{M_CH3}+{M_CHSIZE}<br />define M_CH5&nbsp; &nbsp;{M_CH4}+{M_CHSIZE}<br />define M_CH6&nbsp; &nbsp;{M_CH5}+{M_CHSIZE}<br />define M_CH7&nbsp; &nbsp;{M_CH6}+{M_CHSIZE}<br /><br />define D_BUFFER&nbsp; &nbsp;$80<br /><br />;offsets for music channel vars<br /><br />define CH_FRAME&nbsp; &nbsp; $00<br />define CH_SPEED&nbsp; &nbsp; $01<br />define CH_PTR_L&nbsp; &nbsp; $02&nbsp; &nbsp;;word<br />define CH_PTR_H&nbsp; &nbsp; $03<br />define CH_WAIT&nbsp; &nbsp; $04&nbsp; &nbsp;;byte<br />define CH_VOL&nbsp; &nbsp; $05&nbsp; &nbsp;;byte<br />define CH_PAN&nbsp; &nbsp; $06&nbsp; &nbsp;;byte<br />define CH_NOTE&nbsp; &nbsp; $07&nbsp; &nbsp;;byte<br />define CH_VIBOFF $08&nbsp; &nbsp;;byte<br />define CH_VIBINC $09&nbsp; &nbsp;;byte<br />define CH_VIBMUL $0a&nbsp; &nbsp;;byte<br /><br /><br /><br />&nbsp; &nbsp;origin 0x0000<br />&nbsp; &nbsp;base $0200<br /><br /><br /><br />start:<br />&nbsp; &nbsp;clp<br /><br />&nbsp; &nbsp;ldx #0<br />&nbsp; &nbsp;stx {D_KON}<br />&nbsp; &nbsp;stx {D_KOF}<br />&nbsp; &nbsp;stx {D_STEREO}<br />&nbsp; &nbsp;stx {M_ENABLE}<br /><br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;txs<br /><br />&nbsp; &nbsp;lda {CPU0}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;read current value of cpu0, it is used as strobe<br />&nbsp; &nbsp;sta {D_SYNC}<br /><br />&nbsp; &nbsp;jsr bufClear<br /><br />setState:<br />&nbsp; &nbsp;ldx #0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;initialize registers<br />.1:<br />&nbsp; &nbsp;lda initDataSeq,x<br />&nbsp; &nbsp;beq .2<br />&nbsp; &nbsp;sta {ADDR}<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;lda initDataSeq,x<br />&nbsp; &nbsp;sta {DATA}<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;bra .1<br />.2:<br /><br />&nbsp; &nbsp;lda #160&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;8000/160=50hz<br />&nbsp; &nbsp;sta {T0TG}<br />&nbsp; &nbsp;lda #$81&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;enable timer 0 and IPL<br />&nbsp; &nbsp;sta {CTRL}<br /><br />mainLoop:<br /><br />waitForTimer:<br />&nbsp; &nbsp;jsr checkCommand<br />&nbsp; &nbsp;lda {T0OT}<br />&nbsp; &nbsp;beq waitForTimer<br /><br />&nbsp; &nbsp;jsr updatePlayer<br /><br />&nbsp; &nbsp;bra mainLoop<br /><br /><br /><br />checkCommand:<br />&nbsp; &nbsp;lda {CPU0}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;wait until cpu0 is changed<br />&nbsp; &nbsp;cmp {D_SYNC}<br />&nbsp; &nbsp;bne .read<br />&nbsp; &nbsp;rts<br />.read:<br />&nbsp; &nbsp;sta {D_SYNC}&nbsp; &nbsp;&nbsp; &nbsp;;remember for next time<br />&nbsp; &nbsp;sta {CPU0}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;confirm strobe<br /><br />&nbsp; &nbsp;lda {CPU1}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;read command code<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;and #$0f<br />&nbsp; &nbsp;tay&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;channel for sound effect commands<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;and #$0e<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;jmp (cmdList,x)<br /><br /><br /><br />cmdStereo:<br />&nbsp; &nbsp;lda {CPU2}<br />&nbsp; &nbsp;sta {D_STEREO}<br />&nbsp; &nbsp;rts<br /><br /><br />cmdVolume:<br />&nbsp; &nbsp;lda {CPU2}<br />&nbsp; &nbsp;ldx #{DSP_MVOLL}<br />&nbsp; &nbsp;stx {ADDR}<br />&nbsp; &nbsp;sta {DATA}<br />&nbsp; &nbsp;ldx #{DSP_MVOLR}<br />&nbsp; &nbsp;stx {ADDR}<br />&nbsp; &nbsp;sta {DATA}<br />&nbsp; &nbsp;rts<br /><br /><br />cmdMusStop:<br />&nbsp; &nbsp;jsr bufClear<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx #0<br />&nbsp; &nbsp;stx {M_ENABLE}<br /><br />.mute:<br />&nbsp; &nbsp;jsr keyOffBuf<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx {M_CHANNELS}<br />&nbsp; &nbsp;bne .mute<br /><br />&nbsp; &nbsp;lda {D_KOF}<br />&nbsp; &nbsp;eor #$ff<br />&nbsp; &nbsp;and {D_KON}<br />&nbsp; &nbsp;sta {D_KON}<br /><br />&nbsp; &nbsp;jmp keyOffApply<br /><br /><br />cmdMusPlay:<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta {M_ENABLE}<br />&nbsp; &nbsp;jmp musicInit<br /><br /><br />cmdSfxPlay:<br />&nbsp; &nbsp;cpy {M_CHANNELS}&nbsp; &nbsp;;don't play effects on music channels<br />&nbsp; &nbsp;bcs .play<br />&nbsp; &nbsp;rts<br />.play:<br />&nbsp; &nbsp;lda #{M_CHSIZE}&nbsp; &nbsp;&nbsp; &nbsp;;get channel offset<br />&nbsp; &nbsp;mul<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{M_CH0}<br />&nbsp; &nbsp;tax<br /><br />&nbsp; &nbsp;lda {CPU2}<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;tay<br /><br />&nbsp; &nbsp;lda soundData,y<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #soundData&amp;255<br />&nbsp; &nbsp;sta {CH_PTR_L},x<br />&nbsp; &nbsp;lda soundData+1,y<br />&nbsp; &nbsp;adc #soundData/256<br />&nbsp; &nbsp;sta {CH_PTR_H},x<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta {CH_WAIT},x<br />&nbsp; &nbsp;sta {CH_NOTE},x<br />&nbsp; &nbsp;sta {CH_VIBMUL},x<br />&nbsp; &nbsp;sta {CH_VIBINC},x<br />&nbsp; &nbsp;sta {CH_FRAME},x<br />&nbsp; &nbsp;lda #6<br />&nbsp; &nbsp;sta {CH_SPEED},x<br />&nbsp; &nbsp;lda {CPU3}<br />&nbsp; &nbsp;sta {CH_PAN},x<br />&nbsp; &nbsp;lda #$3f<br />&nbsp; &nbsp;sta {CH_VOL},x<br /><br />&nbsp; &nbsp;rts<br /><br /><br />cmdReload:<br />&nbsp; &nbsp;jmp $ffc0<br /><br /><br /><br />;reads variables from music data (it is at fixed location)<br />;reset channels variables<br /><br />musicInit:<br />&nbsp; &nbsp;ldy {M_CHANNELS}&nbsp; &nbsp;;get order pos width from music data, it is channels+1<br />&nbsp; &nbsp;sty {M_ORDINC}<br />&nbsp; &nbsp;inc {M_ORDINC}<br /><br />&nbsp; &nbsp;lda {M_ORDBEGIN_L}&nbsp; &nbsp;;get initial order list pointer<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{musicData}&amp;255<br />&nbsp; &nbsp;sta {M_ORDPTR_L}<br />&nbsp; &nbsp;lda {M_ORDBEGIN_H}<br />&nbsp; &nbsp;adc #{musicData}/256<br />&nbsp; &nbsp;sta {M_ORDPTR_H}<br /><br />&nbsp; &nbsp;ldx #{M_CH0}&nbsp; &nbsp;&nbsp; &nbsp;;initialize channels vars<br />.set:<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta {CH_WAIT},x<br />&nbsp; &nbsp;sta {CH_NOTE},x<br />&nbsp; &nbsp;sta {CH_VIBMUL},x<br />&nbsp; &nbsp;sta {CH_VIBINC},x<br />&nbsp; &nbsp;sta {CH_FRAME},x&nbsp; &nbsp;;reset frame counter<br />&nbsp; &nbsp;sta {CH_SPEED},x&nbsp; &nbsp;;disable channel<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta {CH_PAN},x<br />&nbsp; &nbsp;lda #$3f<br />&nbsp; &nbsp;sta {CH_VOL},x<br /><br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{M_CHSIZE}<br />&nbsp; &nbsp;tax<br /><br />&nbsp; &nbsp;dey<br />&nbsp; &nbsp;bne .set<br /><br />&nbsp; &nbsp;lda #$ff&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;keyoff for all the channels<br />&nbsp; &nbsp;sta {D_KOF}<br />&nbsp; &nbsp;lda #0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;reset frame counter<br />&nbsp; &nbsp;sta {D_KON}<br />&nbsp; &nbsp;lda {M_INITSPEED}&nbsp; &nbsp;;set initial speed<br />&nbsp; &nbsp;sta {M_SPEED}<br /><br />&nbsp; &nbsp;;rts&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;no rts because jsr musicUpdateOrder is needed for init<br /><br /><br /><br />;move to the next order list position<br /><br />define T_CHCNT $00<br /><br />updateOrder:<br />&nbsp; &nbsp;lda {M_CHANNELS}&nbsp; &nbsp;;read pattern pointers into channels vars<br />&nbsp; &nbsp;sta {T_CHCNT}<br />&nbsp; &nbsp;ldy #0<br />&nbsp; &nbsp;lda #{M_CH0}<br />&nbsp; &nbsp;sta {M_CHOFF}<br />.read:<br />&nbsp; &nbsp;lda ({M_ORDPTR_L}),y<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda {M_PATTERNS_L},x<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{musicData}&amp;255<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda {M_PATTERNS_H},x<br />&nbsp; &nbsp;adc #{musicData}/256<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sta {CH_PTR_H},x<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta {CH_PTR_L},x<br /><br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{M_CHSIZE}<br />&nbsp; &nbsp;sta {M_CHOFF}<br /><br />&nbsp; &nbsp;dec {T_CHCNT}<br />&nbsp; &nbsp;bne .read<br /><br />&nbsp; &nbsp;lda ({M_ORDPTR_L}),y;read order position length<br />&nbsp; &nbsp;sta {M_ROW}<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;lda ({M_ORDPTR_L}),y;check if next position is end of the order list<br />&nbsp; &nbsp;cmp #$ff<br />&nbsp; &nbsp;bne .next<br /><br />&nbsp; &nbsp;lda {M_ORDLOOP_L}&nbsp; &nbsp;&nbsp; &nbsp;;load loop position<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{musicData}&amp;255<br />&nbsp; &nbsp;sta {M_ORDPTR_L}<br />&nbsp; &nbsp;lda {M_ORDLOOP_H}<br />&nbsp; &nbsp;adc #{musicData}/256<br />&nbsp; &nbsp;sta {M_ORDPTR_H}<br />&nbsp; &nbsp;rts<br /><br />.next:<br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;move to the next position<br />&nbsp; &nbsp;lda {M_ORDPTR_L}<br />&nbsp; &nbsp;adc {M_ORDINC}<br />&nbsp; &nbsp;sta {M_ORDPTR_L}<br />&nbsp; &nbsp;lda {M_ORDPTR_H}<br />&nbsp; &nbsp;adc #0<br />&nbsp; &nbsp;sta {M_ORDPTR_H}<br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br />;run one frame of music player<br /><br />updatePlayer:<br />&nbsp; &nbsp;jsr bufApply&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;apply register writes from previous frame<br />&nbsp; &nbsp;jsr keyOnApply&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;apply keyon from previous frame<br /><br />&nbsp; &nbsp;lda #0&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;process all the channels, some of them for music, some for sound<br />&nbsp; &nbsp;sta {M_CHCUR0x}<br />&nbsp; &nbsp;sta {M_CHCURx0}<br />&nbsp; &nbsp;sta {M_UPDROW}<br />&nbsp; &nbsp;lda #{M_CH0}<br />&nbsp; &nbsp;sta {M_CHOFF}<br /><br />.loop:<br />&nbsp; &nbsp;jsr updateChannel<br /><br />&nbsp; &nbsp;lda {M_CHOFF}<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #{M_CHSIZE}<br />&nbsp; &nbsp;sta {M_CHOFF}<br /><br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc #$10<br />&nbsp; &nbsp;sta {M_CHCURx0}<br /><br />&nbsp; &nbsp;inc {M_CHCUR0x}<br />&nbsp; &nbsp;lda {M_CHCUR0x}<br />&nbsp; &nbsp;cmp #8<br />&nbsp; &nbsp;bne .loop<br /><br />&nbsp; &nbsp;jsr keyOffApply&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;apply keyoff, it always one frame earlier<br /><br />&nbsp; &nbsp;lda {M_UPDROW}<br />&nbsp; &nbsp;beq .noRow<br />&nbsp; &nbsp;dec {M_ROW}<br />&nbsp; &nbsp;bne .noRow<br />&nbsp; &nbsp;jsr updateOrder<br />.noRow:<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;update one channel<br /><br />define T_PTNPTR_L&nbsp; &nbsp; $00&nbsp; &nbsp;;word<br />define T_PTNPTR_H&nbsp; &nbsp; $01<br />define T_CHVOLL&nbsp; &nbsp;&nbsp; &nbsp; $02<br />define T_CHVOLR&nbsp; &nbsp;&nbsp; &nbsp; $03<br />define T_PITCH_OFF_L $04<br />define T_PITCH_OFF_H $05<br /><br />updateChannel:<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;lda {M_CHCUR0x}<br />&nbsp; &nbsp;cmp {M_CHANNELS}<br />&nbsp; &nbsp;bcc .checkMus<br />&nbsp; &nbsp;lda {CH_SPEED},x&nbsp; &nbsp;;if speed is 0, channel is inactive<br />&nbsp; &nbsp;bne .active<br />&nbsp; &nbsp;rts<br />.checkMus:<br />&nbsp; &nbsp;lda {M_ENABLE}<br />&nbsp; &nbsp;bne .active<br />&nbsp; &nbsp;rts<br />.active:<br />&nbsp; &nbsp;lda {CH_FRAME},x<br />&nbsp; &nbsp;beq .row<br />&nbsp; &nbsp;jmp .processVolume<br /><br />.row:<br />&nbsp; &nbsp;lda {CH_WAIT},x<br />&nbsp; &nbsp;beq .noWait<br />&nbsp; &nbsp;dec {CH_WAIT},x<br />&nbsp; &nbsp;jmp .processVolume<br /><br />.noWait:<br />&nbsp; &nbsp;lda {CH_PTR_H},x<br />&nbsp; &nbsp;sta {T_PTNPTR_H}<br />&nbsp; &nbsp;lda {CH_PTR_L},x<br />&nbsp; &nbsp;sta {T_PTNPTR_L}<br /><br />.read:<br />&nbsp; &nbsp;jsr readPtnByte<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;and #$c0<br /><br />&nbsp; &nbsp;beq .empty<br />&nbsp; &nbsp;cmp #$40<br />&nbsp; &nbsp;beq .volume<br />&nbsp; &nbsp;cmp #$80<br />&nbsp; &nbsp;beq .ins<br />.note:<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;cmp #$fc<br />&nbsp; &nbsp;bcs .effect<br /><br />&nbsp; &nbsp;and #$3f&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;it is a note, remember it<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sta {CH_NOTE},x<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta {CH_VIBOFF},x<br /><br />&nbsp; &nbsp;ldx {M_CHCUR0x}&nbsp; &nbsp;&nbsp; &nbsp;;keyoff and keyon<br />&nbsp; &nbsp;jsr keyOffBuf<br />&nbsp; &nbsp;jsr keyOnBuf<br /><br />&nbsp; &nbsp;jmp .done<br /><br />.effect:<br />&nbsp; &nbsp;cmp #$fc<br />&nbsp; &nbsp;bne .noPitch<br /><br />&nbsp; &nbsp;jsr readPtnByte&nbsp; &nbsp;&nbsp; &nbsp;;it is a pitch change without restarting note<br />&nbsp; &nbsp;and #$3f<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sta {CH_NOTE},x<br /><br />&nbsp; &nbsp;bra .done<br /><br />.noPitch:<br />&nbsp; &nbsp;cmp #$fd<br />&nbsp; &nbsp;bne .noStop<br />&nbsp; &nbsp;ldx {M_CHCUR0x}&nbsp; &nbsp;&nbsp; &nbsp;;it is note cut<br />&nbsp; &nbsp;jsr keyOffBuf<br />&nbsp; &nbsp;bra .done<br /><br />.noStop:<br />&nbsp; &nbsp;cmp #$fe<br />&nbsp; &nbsp;bne .noPan<br />&nbsp; &nbsp;jsr readPtnByte&nbsp; &nbsp;&nbsp; &nbsp;;it is pan, next byte is value<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sta {CH_PAN},x<br />&nbsp; &nbsp;bra .read<br /><br />.noPan:<br />&nbsp; &nbsp;jsr readPtnByte&nbsp; &nbsp;&nbsp; &nbsp;;it is speed, next byte is value<br />&nbsp; &nbsp;ldx {M_CHCUR0x}<br />&nbsp; &nbsp;cpx {M_CHANNELS}<br />&nbsp; &nbsp;bcs .setSpeed<br />&nbsp; &nbsp;sta {M_SPEED}<br />&nbsp; &nbsp;bra .read<br /><br />.setSpeed:<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sta {CH_SPEED},x<br />&nbsp; &nbsp;cmp #0<br />&nbsp; &nbsp;bne .read<br />&nbsp; &nbsp;lda {M_CHCUR0x}<br />&nbsp; &nbsp;jmp keyOffBuf<br /><br />.empty:<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sty {CH_WAIT},x<br />&nbsp; &nbsp;bra .done<br /><br />.volume:<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;and #$3f<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;sta {CH_VOL},x<br />&nbsp; &nbsp;jmp .read<br /><br />.ins:<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;and #$3f<br />&nbsp; &nbsp;pha<br /><br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;ora #{DSP_SRCN}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;jsr bufWrite&nbsp; &nbsp;&nbsp; &nbsp;;write instrument number<br /><br />&nbsp; &nbsp;asl&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;get offset for parameter tables<br />&nbsp; &nbsp;tax<br /><br />&nbsp; &nbsp;lda vibrato+1,x&nbsp; &nbsp;&nbsp; &nbsp;;get vibrato parameters<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda vibrato,x<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda adsr+1,x&nbsp; &nbsp;&nbsp; &nbsp;;get adsr parameters<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda adsr,x<br />&nbsp; &nbsp;pha<br /><br />&nbsp; &nbsp;lda {M_CHCURx0}&nbsp; &nbsp;&nbsp; &nbsp;;write adsr parameters<br />&nbsp; &nbsp;ora #{DSP_ADSR1}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;jsr bufWrite<br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;ora #{DSP_ADSR2}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;jsr bufWrite<br /><br />&nbsp; &nbsp;ldx {M_CHOFF}&nbsp; &nbsp;&nbsp; &nbsp;;write vibrato parameters<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta {CH_VIBINC},x<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta {CH_VIBMUL},x<br /><br />&nbsp; &nbsp;jmp .read<br /><br />.done:<br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;lda {T_PTNPTR_L}<br />&nbsp; &nbsp;sta {CH_PTR_L},x<br />&nbsp; &nbsp;lda {T_PTNPTR_H}<br />&nbsp; &nbsp;sta {CH_PTR_H},x<br /><br />.processVolume:<br />&nbsp; &nbsp;lda {D_STEREO}<br />&nbsp; &nbsp;beq .mono<br />.stereo:<br />&nbsp; &nbsp;lda {CH_PAN},x&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;calculate left volume<br />&nbsp; &nbsp;eor #$ff<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda {CH_VOL},x<br />&nbsp; &nbsp;mul<br />&nbsp; &nbsp;sty {T_CHVOLL}<br />&nbsp; &nbsp;ldy {CH_PAN},x&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;calculate right volume<br />&nbsp; &nbsp;lda {CH_VOL},x<br />&nbsp; &nbsp;mul<br />&nbsp; &nbsp;sty {T_CHVOLR}<br />&nbsp; &nbsp;bra .setVol<br /><br />.mono:<br />&nbsp; &nbsp;lda {CH_VOL},x<br />&nbsp; &nbsp;sta {T_CHVOLL}<br />&nbsp; &nbsp;sta {T_CHVOLR}<br /><br />.setVol:<br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;ora #{DSP_VOLL}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda {T_CHVOLL}<br />&nbsp; &nbsp;jsr bufWrite<br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;ora #{DSP_VOLR}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda {T_CHVOLR}<br />&nbsp; &nbsp;jsr bufWrite<br /><br />.processPitch:<br />&nbsp; &nbsp;ldx {M_CHOFF}<br /><br />&nbsp; &nbsp;lda {CH_VIBOFF},x<br />&nbsp; &nbsp;ldy {CH_VIBMUL},x<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda vibratoTable,x<br />&nbsp; &nbsp;mul<br />&nbsp; &nbsp;sty {T_PITCH_OFF_L}<br />&nbsp; &nbsp;lda #0<br />&nbsp; &nbsp;sta {T_PITCH_OFF_H}<br />&nbsp; &nbsp;asl {T_PITCH_OFF_L}<br />&nbsp; &nbsp;rol {T_PITCH_OFF_H}<br />&nbsp; &nbsp;asl {T_PITCH_OFF_L}<br />&nbsp; &nbsp;rol {T_PITCH_OFF_H}<br /><br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;lda {CH_NOTE},x<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda divTable,x<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc {T_PITCH_OFF_L}<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda divTable+1,x<br />&nbsp; &nbsp;adc {T_PITCH_OFF_H}<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;ora #{DSP_PH}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;jsr bufWrite<br />&nbsp; &nbsp;lda {M_CHCURx0}<br />&nbsp; &nbsp;ora #{DSP_PL}<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;jsr bufWrite<br /><br />&nbsp; &nbsp;ldx {M_CHOFF}<br />&nbsp; &nbsp;lda {CH_VIBOFF},x&nbsp; &nbsp;&nbsp; &nbsp;;advance vibrato table pointer<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc {CH_VIBINC},x<br />&nbsp; &nbsp;sta {CH_VIBOFF},x<br /><br />.processFrameRow:<br />&nbsp; &nbsp;lda {CH_FRAME},x<br />&nbsp; &nbsp;bne .noRow<br />&nbsp; &nbsp;lda {M_CHCUR0x}<br />&nbsp; &nbsp;cmp {M_CHANNELS}<br />&nbsp; &nbsp;bcc .processMus<br />&nbsp; &nbsp;lda {CH_SPEED},x<br />&nbsp; &nbsp;sta {CH_FRAME},x<br />&nbsp; &nbsp;bra .noRow<br /><br />.processMus:<br />&nbsp; &nbsp;lda {M_SPEED}<br />&nbsp; &nbsp;sta {CH_FRAME},x<br />&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;sta {M_UPDROW}<br /><br />.noRow:<br />&nbsp; &nbsp;dec {CH_FRAME},x<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;read one byte from pattern data<br />;out: A=data, Y=0<br /><br />readPtnByte:<br />&nbsp; &nbsp;ldy #0<br />&nbsp; &nbsp;lda ({T_PTNPTR_L}),y<br />&nbsp; &nbsp;inc {T_PTNPTR_L}<br />&nbsp; &nbsp;bne .1<br />&nbsp; &nbsp;inc {T_PTNPTR_H}<br />.1:<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;clear register writes buffer, just set ptr to 0<br /><br />bufClear:<br />&nbsp; &nbsp;str {D_BUFPTR}=#0<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;add register write in buffer<br />;in X=reg, A=value<br /><br />bufWrite:<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;ldx {D_BUFPTR}<br />&nbsp; &nbsp;sta {D_BUFFER},x<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta {D_BUFFER},x<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;stx {D_BUFPTR}<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;send writes from buffer and clear it<br /><br />bufApply:<br />&nbsp; &nbsp;lda {D_BUFPTR}<br />&nbsp; &nbsp;beq .done<br />&nbsp; &nbsp;ldx #0<br />.loop:<br />&nbsp; &nbsp;lda {D_BUFFER},x<br />&nbsp; &nbsp;sta {ADDR}<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;lda {D_BUFFER},x<br />&nbsp; &nbsp;sta {DATA}<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx {D_BUFPTR}<br />&nbsp; &nbsp;bne .loop<br />&nbsp; &nbsp;str {D_BUFPTR}=#0<br />.done:<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;set keyon for needed channel in temp variable<br />;in: X=channel<br /><br />keyOnBuf:<br />&nbsp; &nbsp;lda channelMask,x<br />&nbsp; &nbsp;ora {D_KON}<br />&nbsp; &nbsp;sta {D_KON}<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;send keyon from temp variable<br /><br />keyOnApply:<br />&nbsp; &nbsp;lda {D_KON}<br />&nbsp; &nbsp;eor #$ff<br />&nbsp; &nbsp;and {D_KOF}<br />&nbsp; &nbsp;ldx #{DSP_KOF}<br />&nbsp; &nbsp;stx {ADDR}<br />&nbsp; &nbsp;sta {DATA}<br />&nbsp; &nbsp;sta {D_KOF}<br /><br />&nbsp; &nbsp;lda #{DSP_KON}<br />&nbsp; &nbsp;sta {ADDR}<br />&nbsp; &nbsp;lda {D_KON}<br />&nbsp; &nbsp;str {D_KON}=#0<br />&nbsp; &nbsp;sta {DATA}<br /><br />&nbsp; &nbsp;rts<br /><br /><br /><br />;set keyoff for needed channel in temp variable<br />;in: X=channel<br /><br />keyOffBuf:<br />&nbsp; &nbsp;lda channelMask,x<br />&nbsp; &nbsp;ora {D_KOF}<br />&nbsp; &nbsp;sta {D_KOF}<br />&nbsp; &nbsp;rts<br /><br /><br /><br />;send keyoff from temp variable<br /><br />keyOffApply:<br />&nbsp; &nbsp;lda #{DSP_KOF}<br />&nbsp; &nbsp;sta {ADDR}<br />&nbsp; &nbsp;lda {D_KOF}<br />&nbsp; &nbsp;sta {DATA}<br />&nbsp; &nbsp;rts<br /><br /><br /><br />cmdList:<br />&nbsp; &nbsp;dw cmdStereo&nbsp; &nbsp;;0 set stereo mode, 0 or 1<br />&nbsp; &nbsp;dw cmdVolume&nbsp; &nbsp;;1 set global volume, 0..127<br />&nbsp; &nbsp;dw cmdMusStop&nbsp; &nbsp;;2 stops music<br />&nbsp; &nbsp;dw cmdMusPlay&nbsp; &nbsp;;3 restarts music<br />&nbsp; &nbsp;dw cmdSfxPlay&nbsp; &nbsp;;4 play sound effect, number 0..127 and pan 0..255<br />&nbsp; &nbsp;dw cmdReload&nbsp; &nbsp;;5 call IPL<br /><br /><br />divTable:<br />&nbsp; &nbsp;dw $0217,$0237,$0259,$027d,$02a3,$02cb,$02f5,$0322<br />&nbsp; &nbsp;dw $0352,$0385,$03ba,$03f3,$042f,$046f,$04b2,$04fa<br />&nbsp; &nbsp;dw $0546,$0596,$05eb,$0645,$06a5,$070a,$0775,$07e6<br />&nbsp; &nbsp;dw $085f,$08de,$0965,$09f4,$0a8c,$0b2c,$0bd6,$0c8b<br />&nbsp; &nbsp;dw $0d4a,$0e14,$0eea,$0fcd,$10be,$11bd,$12cb,$13e9<br />&nbsp; &nbsp;dw $1518,$1659,$17ad,$1916,$1a94,$1c28,$1dd5,$1f9b<br />&nbsp; &nbsp;dw $217c,$237a,$2596,$27d2,$2a31,$2cb3,$2f5b,$322c<br />&nbsp; &nbsp;dw $3528,$3851,$3bab,$3f37,$0000,$0000,$0000,$0000<br /><br /><br />vibratoTable:<br />&nbsp; &nbsp;db $00,$01,$03,$04,$06,$07,$09,$0a,$0c,$0d,$0f,$11,$12,$14,$15,$17<br />&nbsp; &nbsp;db $18,$1a,$1b,$1d,$1e,$20,$21,$23,$24,$26,$27,$29,$2a,$2c,$2d,$2f<br />&nbsp; &nbsp;db $30,$32,$33,$34,$36,$37,$39,$3a,$3b,$3d,$3e,$3f,$41,$42,$43,$45<br />&nbsp; &nbsp;db $46,$47,$49,$4a,$4b,$4c,$4e,$4f,$50,$51,$52,$54,$55,$56,$57,$58<br />&nbsp; &nbsp;db $59,$5a,$5b,$5d,$5e,$5f,$60,$61,$62,$63,$64,$65,$66,$66,$67,$68<br />&nbsp; &nbsp;db $69,$6a,$6b,$6c,$6c,$6d,$6e,$6f,$70,$70,$71,$72,$72,$73,$74,$74<br />&nbsp; &nbsp;db $75,$75,$76,$77,$77,$78,$78,$79,$79,$79,$7a,$7a,$7b,$7b,$7b,$7c<br />&nbsp; &nbsp;db $7c,$7c,$7d,$7d,$7d,$7d,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7e<br />&nbsp; &nbsp;db $7f,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7e,$7d,$7d,$7d,$7d,$7c<br />&nbsp; &nbsp;db $7c,$7c,$7b,$7b,$7b,$7a,$7a,$79,$79,$79,$78,$78,$77,$77,$76,$75<br />&nbsp; &nbsp;db $75,$74,$74,$73,$72,$72,$71,$70,$70,$6f,$6e,$6d,$6c,$6c,$6b,$6a<br />&nbsp; &nbsp;db $69,$68,$67,$66,$66,$65,$64,$63,$62,$61,$60,$5f,$5e,$5d,$5b,$5a<br />&nbsp; &nbsp;db $59,$58,$57,$56,$55,$54,$52,$51,$50,$4f,$4e,$4c,$4b,$4a,$49,$47<br />&nbsp; &nbsp;db $46,$45,$43,$42,$41,$3f,$3e,$3d,$3b,$3a,$39,$37,$36,$34,$33,$32<br />&nbsp; &nbsp;db $30,$2f,$2d,$2c,$2a,$29,$27,$26,$24,$23,$21,$20,$1e,$1d,$1b,$1a<br />&nbsp; &nbsp;db $18,$17,$15,$14,$12,$11,$0f,$0d,$0c,$0a,$09,$07,$06,$04,$03,$01<br /><br /><br />channelMask:<br />&nbsp; &nbsp;db $01,$02,$04,$08,$10,$20,$40,$80<br /><br /><br />initDataSeq:<br />&nbsp; &nbsp;db {DSP_FLG}&nbsp; ,%01100000;mute, no echo<br />&nbsp; &nbsp;db {DSP_PMON} ,0&nbsp; &nbsp;&nbsp; &nbsp;;no pitch modulation<br />&nbsp; &nbsp;db {DSP_NON}&nbsp; ,0&nbsp; &nbsp;&nbsp; &nbsp;;no noise<br />&nbsp; &nbsp;db {DSP_EON}&nbsp; ,0&nbsp; &nbsp;&nbsp; &nbsp;;no echo<br />&nbsp; &nbsp;db {DSP_ESA}&nbsp; ,255&nbsp; &nbsp;&nbsp; &nbsp;;echo at highest page<br />&nbsp; &nbsp;db {DSP_EDL}&nbsp; ,0&nbsp; &nbsp;&nbsp; &nbsp;;minimal length<br />&nbsp; &nbsp;db {DSP_DIR}&nbsp; ,(dir&gt;&gt;8)&nbsp; &nbsp;;address of sample dir<br />&nbsp; &nbsp;db {DSP_MVOLL},127&nbsp; &nbsp;&nbsp; &nbsp;;global volume to the max<br />&nbsp; &nbsp;db {DSP_MVOLR},127<br />&nbsp; &nbsp;db {DSP_EVOLL},0&nbsp; &nbsp;&nbsp; &nbsp;;echo volume to zero<br />&nbsp; &nbsp;db {DSP_EVOLR},0<br />&nbsp; &nbsp;db {DSP_FLG}&nbsp; ,%00100000;no mute, no echo<br />&nbsp; &nbsp;db {DSP_KOF}&nbsp; ,255&nbsp; &nbsp;&nbsp; &nbsp;;all keys off<br />&nbsp; &nbsp;db 0<br /><br /><br />;macro for samples<br /><br />macro sample ptr,loop<br />&nbsp; &nbsp;dw {self::ptr}<br />&nbsp; &nbsp;dw {self::ptr}+{self::loop}<br />endmacro<br /><br />macro adsr ar,dr,sl,sr<br />&nbsp; &nbsp;db $80|{self::ar}|({self::dr}&lt;&lt;4)<br />&nbsp; &nbsp;db {self::sr}|({self::sl}&lt;&lt;5)<br />endmacro<br /><br />macro vib speed,depth<br />&nbsp; &nbsp;db {self::speed}<br />&nbsp; &nbsp;db {self::depth}<br />endmacro<br /><br /><br />&nbsp; &nbsp;origin 0x0600&nbsp; &nbsp;;$0800 in memory<br />&nbsp; &nbsp;incsrc &quot;sound\samples.asm&quot;<br /><br />soundData:<br />&nbsp; &nbsp;incbin &quot;sound\sounds.bin&quot;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ramsis</b> [ Wed May 15, 2013 11:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are you using bass v11 now? That's the version I used. No compiling error on line 518 for me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />(Otherwise, just replace the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bra .done</tt> instruction on line 518 with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp .done</tt>.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pichichi010</b> [ Wed May 15, 2013 11:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Ramsis wrote:</div><div class="quotecontent">Are you using bass v11 now? That's the version I used. No compiling error on line 518 for me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br />(Otherwise, just replace the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bra .done</tt> instruction on line 518 with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jmp .done</tt>.)</div><br /><br />That solved the problem, but now I dont see where it placed the game.smc!<br /><br />I thought it should be on the same directory?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ramsis</b> [ Wed May 15, 2013 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Having trouble compiling snes source code</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pichichi010 wrote:</div><div class="quotecontent">That solved the problem, but now I dont see where it placed the game.smc!<br /><br />I thought it should be on the same directory?</div><br />The compile script says <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">..\bin\wlalink.exe -dvSo game.obj game.smc</tt>. So, if you were running it from <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">C:\snessdk\christmas</tt>, then it might be worthwile to check the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">C:\snessdk\bin</tt> folder. Or simply use your computer's search function. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>