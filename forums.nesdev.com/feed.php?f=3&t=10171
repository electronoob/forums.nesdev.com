<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=10171" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2018-05-23T14:05:40-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=10171</id>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2018-05-23T14:05:40-07:00</updated>
<published>2018-05-23T14:05:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218913#p218913</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218913#p218913"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218913#p218913"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Double that to about 4-5 because of the gamma characteristic of sRGB. Signal values represent voltage, while light output is closer to proportional to power, which is the square of voltage.<br /></div>Looking at quantization error at the low end, there's only really 3.5 orders of magnitude with good coverage. The last range between 10<sup>-4</sup> and 10<sup>-5</sup> is values of 1,2,3 out of 255 in sRGB.<br /><br />The difference between 4/255 and 5/255 in gamma 2.2 converted to linear light is a factor of 2, a whole photographic &quot;stop&quot;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Wed May 23, 2018 2:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2018-05-21T11:14:40-07:00</updated>
<published>2018-05-21T11:14:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218848#p218848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218848#p218848"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218848#p218848"><![CDATA[
I think a bloom effect emphasizes the wrong thing, though. You're trying to capture the fading trail of motion. The &quot;overexposed&quot; part is the non-moving image which should be bright and clean and clear, not fuzzed up with a bloom filter.<br /><br />The simulation of &quot;HDR&quot; in LDR space with bloom is for a very different purpose. This is trying to communicate that bright lights like the sun are &quot;brighter&quot; than the area the shape covers on the image by bleeding it out. This can correspond to some light scattering effects by particles in the atmosphere (e.g. fog), focal depth effects, or lens defects, which is why it gets that feeling across in the simulation, but it's not an actual representation of a high dynamic range, and the same physical effects that are being represented don't really apply here?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon May 21, 2018 11:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2018-05-21T10:29:10-07:00</updated>
<published>2018-05-21T10:29:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218842#p218842</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218842#p218842"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=218842#p218842"><![CDATA[
Found via link from <a href="https://forums.nesdev.com/viewtopic.php?p=218839#p218839" class="postlink">this post</a>. Topic age acknowledged.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />But we've only got 2-3 factors of ten on a standard monitor<br /></div><br />Double that to about 4-5 because of the gamma characteristic of sRGB. Signal values represent voltage, while light output is closer to proportional to power, which is the square of voltage.<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />so that's not going to be visible unless you're willing to horrifically overexpose any visible pixels. (log₂(10¹⁰) ≈33; we'd need 96-bit displays to represent this.)<br /></div><br />That or high dynamic range rendering, which uses a floating-point frame buffer and then a <a href="https://en.wikipedia.org/wiki/Bloom_(shader_effect)" class="postlink">bloom effect</a> during post-processing to indicate to the eyes which pixels were overexposed.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon May 21, 2018 10:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-27T11:09:18-07:00</updated>
<published>2013-06-27T11:09:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=114143#p114143</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=114143#p114143"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=114143#p114143"><![CDATA[
Sure, exponential curve. In a dark room, with a almost-entirely dark CRT, a human eye can see light over something like 10 factors of ten difference in brightness (not simultaneously. Just &quot;dimmest possible&quot; to &quot;brightest possible without being painful&quot;). But we've only got 2-3 factors of ten on a standard monitor, so that's not going to be visible unless you're willing to horrifically overexpose any visible pixels. (log₂(10¹⁰) ≈33; we'd need 96-bit displays to represent this.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Thu Jun 27, 2013 11:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mikejmoffitt]]></name></author>
<updated>2013-06-27T08:05:55-07:00</updated>
<published>2013-06-27T08:05:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=114129#p114129</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=114129#p114129"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=114129#p114129"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Fair enough! I tested with Galaxian, and see 3.7 halflives per 1/60th of a second, or a halflife of 4.5ms. This means that the correct constant (with this TV) for the expression I gave above is k=1/13. This is low enough that on the NES, the effect will only ever be visible when transitioning to black pixels. So here's an animated gif, simulating same:anim.gifIt's <em>really</em> subtle, especially without any of the phosphor size blur. You'll also want to enlarge it; I can't see anything when it's at 100dpi.<br /><br />And after manually capturing 17 frames from FCEUX, here's how I processed it:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for i in `seq 0 16`; do <br /> pnmarith -maximum $i.ppm previous.ppm &gt; n$i.ppm;<br /> ppmtogif n$i.ppm &gt; n$i.gif;<br /> pnmgamma -ungamma 2.2 n$i.ppm | ppmdim .077 | pnmgamma 2.2 &gt; previous.ppm;<br />done<br />pnmcat -tb n*.ppm | ppmtogif &gt; all.gif<br />gifsicle --use-colormap all.gif -O3 -V -o anim.gif -d2 n{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}.gif</div> Note that I'm fixing up the gamma; if I hadn't, it'd be even harder to see.<br /><br />I suspect that standard 24-bit displays are not actually deep enough to show this in a compelling way; after two refreshes (1/13)² even full scale content is just 1 LSB.<br /></div><br /><br />I should have mentioned that indeed, I only expect something like this to be visible on a totally unlit (black) section. <br />As the phosphor is no longer being struck by the electron gun, the &quot;Starting brightness&quot; of the fade is very dim, but the &quot;decay&quot; of the dim trail is very slow. <br />On mine, I can see the trails last for almost two seconds, but the curve is something like this (please excuse the graph quality):<br /><img src="http://i.imgur.com/Eru6ADV.png" alt="Image" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5314">mikejmoffitt</a> — Thu Jun 27, 2013 8:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2013-06-25T17:19:46-07:00</updated>
<published>2013-06-25T17:19:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113993#p113993</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113993#p113993"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113993#p113993"><![CDATA[
See something different this time? <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Jun 25, 2013 5:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-25T12:30:49-07:00</updated>
<published>2013-06-25T12:30:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113977#p113977</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113977#p113977"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113977#p113977"><![CDATA[
Fair enough! I tested with Galaxian, and see 3.7 halflives per 1/60th of a second, or a halflife of 4.5ms. This means that the correct constant (with this TV) for the expression I gave above is k=1/13. This is low enough that on the NES, the effect will only ever be visible when transitioning to black pixels. So here's an animated gif, simulating same:anim.gifIt's <em>really</em> subtle, especially without any of the phosphor size blur. You'll also want to enlarge it; I can't see anything when it's at 100dpi.<br /><br />And after manually capturing 17 frames from FCEUX, here's how I processed it:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for i in `seq 0 16`; do <br /> pnmarith -maximum $i.ppm previous.ppm &gt; n$i.ppm;<br /> ppmtogif n$i.ppm &gt; n$i.gif;<br /> pnmgamma -ungamma 2.2 n$i.ppm | ppmdim .077 | pnmgamma 2.2 &gt; previous.ppm;<br />done<br />pnmcat -tb n*.ppm | ppmtogif &gt; all.gif<br />gifsicle --use-colormap all.gif -O3 -V -o anim.gif -d2 n{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}.gif</div> Note that I'm fixing up the gamma; if I hadn't, it'd be even harder to see.<br /><br />I suspect that standard 24-bit displays are not actually deep enough to show this in a compelling way; after two refreshes (1/13)² even full scale content is just 1 LSB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jun 25, 2013 12:30 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mikejmoffitt]]></name></author>
<updated>2013-06-25T07:21:47-07:00</updated>
<published>2013-06-25T07:21:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113953#p113953</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113953#p113953"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113953#p113953"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />When I've recorded video of my CRT TV using a medium-high-speed (240fps) camera, I see no significant ghosting.<br /><br />So I took a CR2 of my screen. 1/2000th exposure, F/2, ISO-equiv 80 (i.e. minimal denoising). I played around with it in cinepaint for a bit. Asked for a linear decode, and pushed the contrast until I could manually calculate the halflife over several periods. By pushing the exposure (which currently shows the active region at about 75%FS), I had to push the exposure up by a factor of about 20 (or 4.5 stops, or 4.5 halflives) to compensate.<br /><br />With the final version of phosphors used in CRTs in the US before the transition to LCD sets, ghosting simply does not happen. The halflife is FAR too short.<br /><br />This is not to say that there won't exist CRTs that don't do this! Just that the CRTs that most of us in the USA have seen didn't.<br /></div><br /><br />Try playing your CRT in pitch dark with a game like Gradius - you will see the trails!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5314">mikejmoffitt</a> — Tue Jun 25, 2013 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-06-25T12:39:12-07:00</updated>
<published>2013-06-24T19:44:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113933#p113933</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113933#p113933"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113933#p113933"><![CDATA[
When I've recorded video of my CRT TV using a medium-high-speed (240fps) camera, I see no significant ghosting.<br /><br />So I took a CR2 of my screen. 1/2000th exposure, F/2, ISO-equiv 80 (i.e. minimal denoising). I played around with it in cinepaint for a bit. Asked for a linear decode, and pushed the contrast until I could manually calculate the halflife over several periods. By pushing the exposure (which currently shows the active region at about 75%FS), I had to push the exposure up by a factor of about 20 (or 4.5 stops, or 4.5 halflives) to compensate.<br /><br /><s>With the final version of phosphors used in CRTs in the US before the transition to LCD sets, ghosting simply does not happen. The halflife is FAR too short.<br /><br />This is not to say that there won&#39;t exist CRTs that don&#39;t do this! Just that the CRTs that most of us in the USA have seen didn&#39;t.</s><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jun 24, 2013 7:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2013-06-24T18:24:57-07:00</updated>
<published>2013-06-24T18:24:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113930#p113930</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113930#p113930"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113930#p113930"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />You guys keep posting images, but to actually appreciate these effects we need video!<br /></div><br />And YouTube won't be enough, because once the effect is done right it's going to take too few frames to be appreciated (we need the full 60FPS, we can't do with 30FPS), and even then, YouTube will most likely completely ruin the quality (since it'd rely on subtle details).<br /><br />I recall once (long ago) doing a test and the conclusion being that a white dot against a black background will stay at most 1/12th of a second on screen (possibly less), and I don't know how much of that was CRT lag and how much was eye persistence. Moreover, this was a PC monitor, no idea how different are TVs in that sense.<br /><br />Make what you want out of that, but basically trails shouldn't last longer than a handful of frames at most.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Mon Jun 24, 2013 6:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2013-06-23T10:45:18-07:00</updated>
<published>2013-06-23T10:45:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113855#p113855</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113855#p113855"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113855#p113855"><![CDATA[
Here's my recordings (no audio, crap).<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=Ve_IoAHocFc">http://www.youtube.com/watch?v=Ve_IoAHocFc</a><!-- m --> (blue-ish effect)<br /><br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=uIWj_RV8NEM">http://www.youtube.com/watch?v=uIWj_RV8NEM</a><!-- m --> (normal decay)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Sun Jun 23, 2013 10:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2013-06-23T09:45:36-07:00</updated>
<published>2013-06-23T09:45:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113853#p113853</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113853#p113853"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113853#p113853"><![CDATA[
<div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent"><br />I guess I really should have called it solid-state write cycles hell; I was referring to writing a new file every 1/60th of a second to the drive.<br /></div><br />You don't have to run the game in real time though, you can slow it down for video recording.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Jun 23, 2013 9:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mikejmoffitt]]></name></author>
<updated>2013-06-23T07:53:14-07:00</updated>
<published>2013-06-23T07:53:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113850#p113850</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113850#p113850"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113850#p113850"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you save every frame of raw RGB pixel data to a file as you generate it, you can pipe it through FFmpeg with zero dropped frames.<br /></div><br />This sounds tedious, unless scripts are readily available with little to no setup that will run on Windows. I am not booting linux for this.</div><br />My own game engine written in Pygame does this saving as easily on Windows as it does on Linux. FFmpeg does not distribute official binaries for Windows because of patent problems, but they are available if you know where to look.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Plus, I am not aware of a function Allegro has that will let me easily save the backbuffer as a file.<br /></div><br />I guess I'm spoiled by Pygame, which has the utility module <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">pygame.image</tt> that <a href="http://www.pygame.org/docs/ref/image.html#pygame.image.tostring" class="postlink">translates a memory buffer into a string</a>. But what you can do in Allegro is finish rendering and then call <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">save_bitmap</tt> (or however it was renamed in recent Allegro) to write to a single file. Or you can blit the render surface to a 24-bit bitmap and write each scanline.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This sounds like filesystem havoc as too...<br /></div><br />If you write all the individual 24-bit frames to a single file one after another, you can then pass the filename of that file, the width, the height, and whether the file is RGB24 or BGR24 to FFmpeg.</div><br /><br />al_save_bitmap looks to be in Allegro 5, so I think I will go ahead and put that in. Good call.<br /><br />I guess I really should have called it solid-state write cycles hell; I was referring to writing a new file every 1/60th of a second to the drive. <br /><br />As for PyGame, <a href="http://www.youtube.com/watch?v=V7zPsckwmtw" class="postlink">I used it for a while</a>, but stopped because I could not reliably get it to wait for vertical blank before flipping to the display buffer. As a result I could not time the game to Vblank, which is what I had wanted to do. Do you know of a way to get PyGame to do this?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5314">mikejmoffitt</a> — Sun Jun 23, 2013 7:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-06-23T06:28:56-07:00</updated>
<published>2013-06-23T06:28:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113848#p113848</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113848#p113848"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113848#p113848"><![CDATA[
<div class="quotetitle">mikejmoffitt wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">If you save every frame of raw RGB pixel data to a file as you generate it, you can pipe it through FFmpeg with zero dropped frames.<br /></div><br />This sounds tedious, unless scripts are readily available with little to no setup that will run on Windows. I am not booting linux for this.</div><br />My own game engine written in Pygame does this saving as easily on Windows as it does on Linux. FFmpeg does not distribute official binaries for Windows because of patent problems, but they are available if you know where to look.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Plus, I am not aware of a function Allegro has that will let me easily save the backbuffer as a file.<br /></div><br />I guess I'm spoiled by Pygame, which has the utility module <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">pygame.image</tt> that <a href="http://www.pygame.org/docs/ref/image.html#pygame.image.tostring" class="postlink">translates a memory buffer into a string</a>. But what you can do in Allegro is finish rendering and then call <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">save_bitmap</tt> (or however it was renamed in recent Allegro) to write to a single file. Or you can blit the render surface to a 24-bit bitmap and write each scanline.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />This sounds like filesystem havoc as too...<br /></div><br />If you write all the individual 24-bit frames to a single file one after another, you can then pass the filename of that file, the width, the height, and whether the file is RGB24 or BGR24 to FFmpeg.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jun 23, 2013 6:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mikejmoffitt]]></name></author>
<updated>2013-06-22T23:11:54-07:00</updated>
<published>2013-06-22T23:11:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113844#p113844</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113844#p113844"/>
<title type="html"><![CDATA[Re: CRT luminofor fading simulation]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10171&amp;p=113844#p113844"><![CDATA[
It continues to substantially improve, after a friend's comment and suggestion made it much more efficient as well as authentic looking:<br /><br /><img src="http://mikejmoffitt.com/img/phos3.png" alt="Image" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5314">mikejmoffitt</a> — Sat Jun 22, 2013 11:11 pm</p><hr />
]]></content>
</entry>
</feed>