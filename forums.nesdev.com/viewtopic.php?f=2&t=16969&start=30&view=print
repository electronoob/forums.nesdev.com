<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New technique for pushing video data faster</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New technique for pushing video data faster</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16969">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16969</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 26, 2018 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In <a href="https://forums.nesdev.com/viewtopic.php?p=212370#p212370" class="postlink">this post about the Spectre attacks on branch prediction</a>, Dwedit mentioned ROP, or <a href="https://en.wikipedia.org/wiki/Return-oriented_programming" class="postlink">return-oriented programming</a>. Before ROP became famous for use in stack-smashing attacks, this technique of storing a list of subroutines to be called was known as <a href="https://en.wikipedia.org/wiki/Threaded_code#Direct_threading" class="postlink">threaded code</a>.<br /><br />The name Popslide was derived from NOP slide and clockslide, both of which involve a jump into an unrolled loop, like a computed Duff's device.<br /><br />The technique discussed here combines storing a subroutine sequence in the return stack (the &quot;ROP&quot;) with jumping into an unrolled copy loop (like the &quot;slides&quot;). So could we call it ROPslide?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Fri Jan 26, 2018 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds good  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />I've come up with another neat little trick. Just like with unrolled loops, it can sometimes be beneficial to jump a ways into a subroutine to skip some unnecessary code. If you set the PPU &quot;increment mode&quot; at the beginning of every subroutine, you can opt to keep track of it manually as you build your video stack outside of vblank, and simply plus $5 to the subroutine's address to skip over the initial LDA #, STA $2000 when you know the increment mode is already correct.<br /><br />Unlike having &quot;set increment mode to 1&quot; and &quot;set increment mode to 32&quot; subroutines, this trick doesn't carry any extra overhead of jumping around additional times in the video stack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 28, 2018 10:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Drakim wrote:</div><div class="quotecontent">Actually, re-reading a couple of times, what do you mean &quot;But the extra JMP and the bogus VRAM address are used only once&quot;, how does that work? What exactly do you do to end your video subroutines if you are only using the JMP one time during the entire sequence? Don't you have to do it one time per subroutine?</div><br />I went looking for the posts I made about this and apparently <a href="http://forums.nesdev.com/viewtopic.php?p=155882#p155882" class="postlink">this</a> is the last piece of code I posted about this. The basic idea was to have 2 unrolled loops, both copying up to 32 bytes, but one sets the VRAM address before RTS'ing to the next update, while the other is meant to be used for the final update, so it doesn't set the VRAM address at the end. With this setup, there's no overhead at all, even the JMP at the end can be eliminated if the 2nd unrolled loop flows directly into the rest of the NMI handler.<br /><br />But then I decided that having two unrolled loops was too much trouble, and that it'd be better to just let the last update set a bogus VRAM address and RTS to the remainder of the NMI handler. Here's what the code could look like:<br /><br />As soon as possible in the NMI handler:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ;(swap the stack pointer)<br /><br />&nbsp; ;execute the first update<br />&nbsp; pla<br />&nbsp; sta $2006<br />&nbsp; pla<br />&nbsp; sta $2006<br />&nbsp; rts<br /><br />RestoreStackPointer:<br /><br />&nbsp; ;(restore the stack pointer)</div><br /><br />The unrolled data transfer loop, which has 32 possible entry points:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Copy32Bytes:<br /><br />&nbsp; pla<br />&nbsp; sta $2007<br /><br />Copy31Bytes:<br /><br />&nbsp; pla<br />&nbsp; sta $2007<br /><br />&nbsp; ;(...)<br /><br />Copy1Byte:<br /><br />&nbsp; pla<br />&nbsp; sta $2007<br /><br />&nbsp; ;execute the next update<br />&nbsp; pla<br />&nbsp; sta $2006<br />&nbsp; pla<br />&nbsp; sta $2006<br />&nbsp; rts</div><br />In this case, the only overhead is setting up a bogus VRAM address that won't be used for anything, something that happens only once per vblank, after the final data transfer (can be during the pre-render scanline, so it doesn't waste any actual vblank time).<br /><br />Like I said before, this is mostly for those looking to use generic VRAM update code without giving up on speed or lots of ROM space. I personally prefer to use specialized update routines so I can take advantage of certain characteristics of the NES architecture (e.g. palette mirroring, changing only the low byte of the VRAM address, etc.) to make updates even faster.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drakim</b> [ Mon Jan 29, 2018 1:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I understand finally!<br /><br />Your technique is cool in that you shave off the RTS in the subroutine that sets the address before the mass copy:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Video_SetAddress:<br />pla<br />sta $2006<br />pla<br />sta $2006<br />rts<br /></div><br /><br />By baking the address setting into the previous mass copy. Very clever!<br /><br />While this is probably the fastest way of pushing raw bytes from the faux stack to the VRAM directly in a &quot;video command&quot; manner (probably only beaten by doing it all static every vblank and not having any &quot;command&quot; system at all), I think you were right in switching to specialized routines, there are just too many situations on the NES that doesn't involve copying enormous amounts of bytes mindlessly. Plus, the specialized routines allows for micro optimizations here and there, like using &quot;LDA #&quot; instead of &quot;PLA&quot; when it's a static VRAM address, or skipping over the &quot;set increment&quot; code if the increment mode is already correct, or having specialized unrolled loops that doesn't PLA if the same value appears multiple times in a row. The sum of optimizations might very well end up being faster.<br /><br />Still, I'm going to have a think about the possibility of using this in my own specialized system in the case of several mass-copying routines being queued up in a row.  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jan 29, 2018 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: New technique for pushing video data faster</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, there are several opportunities for optimizations we can do with specialized update routines. You already mentioned how you can use a hardcoded VRAM address for palette updates, but there are many other optimizations you can do in this particular case:<br /><br />- start writing at $3F01 rather than $3F00, and set the background color later, when you reach $3F10 (a mirror of $3F00);<br /><br />- don't update any of the &quot;non-displayable&quot; entries ($3F04, $3F08, $3F0C) or their mirrors ($3F14, $3F18, $3F1C), just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">bit $2007</tt> instead, to advance the VRAM address and skip these;<br /><br />- read the palette data straight from the place where it's normally stored, not from the stack, saving the time it'd take to copy it there.<br /><br />Let's see how much time we could save:<br /><br />- set VRAM address to $3F01 (12 cycles);<br />- update 3 colors (24 cycles);<br />- skip $3F04 (4 cycles);<br />- update 3 colors (24 cycles);<br />- skip $3F08 (4 cycles);<br />- update 3 colors (24 cycles);<br />- skip $3F0C (4 cycles);<br />- update 3 colors (24 cycles); 108<br />- update the background color via $3F10 (8 cycles);<br />- update 3 colors (24 cycles);<br />- skip $3F14 (4 cycles);<br />- update 3 colors (24 cycles);<br />- skip $3F18 (4 cycles);<br />- update 3 colors (24 cycles);<br />- skip $3F1C (4 cycles);<br />- update 3 colors (24 cycles);<br />- call the next update (6 cycles);<br /><br />That's a total of 242 cycles, compared to the 278 cycles that a &quot;raw transfer&quot; of 32 bytes would take, and don't forget the time you save outside of vblank, by not copying the palette data to the stack.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>