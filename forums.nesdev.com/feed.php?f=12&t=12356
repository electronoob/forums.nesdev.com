<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=12356" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-02-28T20:04:11-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=12356</id>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2015-02-28T20:04:11-07:00</updated>
<published>2015-02-28T20:04:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142247#p142247</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142247#p142247"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142247#p142247"><![CDATA[
The size of such a room is about 4 screens in each dimension... yeah, not really worth doing any distance management unless you have <em>tons</em> of objects (and even then at that point you should consider if some should be processed all the time). Probably better to reserve it only to when the sprites are drawn.<br /><br /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />Almost every run'n'gun game I know of uses exactly 8 bullets.<br /></div><br />Not a run'n'gun but relevant:<br /><br /><img src="http://i.imgur.com/Q8UDtE6.png" alt="Image" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Sat Feb 28, 2015 8:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-28T19:32:56-07:00</updated>
<published>2015-02-28T19:32:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142244#p142244</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142244#p142244"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142244#p142244"><![CDATA[
<div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br />You could have a sub-list for each type of object really efficiently that way...<br /></div><br />Exactly.<br /><br />If you index the types (i.e. the variables that indicate the first elements of the linked lists could be arranged as an array), you won't even have to duplicate the collision routine. That way you could load an index register with the index of the type you want to test collisions with (e.g. 0 = enemies, 1 = bullets, 2 = items, etc.) and jump to the collision routine. The routine would then use this index to loop up the index of the object slot that contains the first object of the type you selected, and would traverse the entire list testing for collisions between these objects and the one that called the routine.<br /><br />Indexing the types should also prevent any code duplication for adding/removing objects to the sub-lists.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Actually, it has more of a metroid-style map system at the moment, each map being just a full 64x64 tilemap of 16x16s.  I'm not entirely certain if it'll be staying that way, but I suppose now would be the time to make up my mind on that.  It shouldn't be too difficult to process a full map that size, I wouldn't think...<br /></div><br />I see. Yeah, if the maps are this small I don't think you need complex object loading/unloading. Some sort of camera proximity test could help prevent unnecessary processing, but I'm not sure if that's necessary.<br /><br />If I were to do a camera proximity test, I'd probably do it in my meta-sprite rendering routine. I mean, it already calculates the position of the object relative to the camera (so that the individual sprites are generated based on this coordinate), it would just be a matter of checking if the upper bytes of these coordinates are over a certain threshold. Using this flag I could make the decision of unload the object (in case of bullets) or not do any more processing on it (physics, collisions, etc.) this frame.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Feb 28, 2015 7:32 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-02-28T18:36:03-07:00</updated>
<published>2015-02-28T18:36:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142239#p142239</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142239#p142239"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142239#p142239"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />That would be my suggestion. You can still have a single list of objects, to keep all the spawning and common routines working normally without duplicated code, but you could have linked lists of specific object types. A variable indicates the slot of the first enemy. Inside that slot, a byte indicates the slot of the second enemy, and so on. That way, inside the AI code for any object, you can call a CollideWithEnemies routine, that will test for collisions exclusively against the objects in the list of enemies. One nice aspect of this is that the types of collisions aren't hardcoded, you can still have a special enemy that collides with enemies, because his AI will call CollideWithEnemies, while most enemies won't.<br /></div><br />Yeah, I see what you mean.  That's good advice.  You could have a sub-list for each type of object really efficiently that way...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Does your game have a scrolling map? Are you loading and unloading objects as the screen scrolls? If you are (and you should be!), you are kinda already breaking the map into regions. The only objects being tested are the ones that are in the region surrounding the camera. I don't think that subdividing that space further would bring any benefits.<br /></div><br />Actually, it has more of a metroid-style map system at the moment, each map being just a full 64x64 tilemap of 16x16s.  I'm not entirely certain if it'll be staying that way, but I suppose now would be the time to make up my mind on that.  It shouldn't be too difficult to process a full map that size, I wouldn't think...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Sat Feb 28, 2015 6:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-28T17:08:01-07:00</updated>
<published>2015-02-28T17:08:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142230#p142230</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142230#p142230"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142230#p142230"><![CDATA[
<div class="quotetitle">Khaz wrote:</div><div class="quotecontent"><br />With each object, I test every other object that is FURTHER DOWN THE LIST for collisions.  It's the easiest way I know to test every pair with no duplication, but it starts to become exponentially more demanding once there are about 20-30 different objects on screen.<br /></div><br />Avoiding duplicate tests is a good improvement, but it's still terribly wasteful to test for all possible collisions between all the objects. Do bullets collide with bullets in your game? Enemies with enemies? Enemies with items? I'm sure you could be avoiding some of these.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />My only thoughts on improving this would be to have one or more separate lists of specific kinds of objects, say a separate enemy list.<br /></div><br />That would be my suggestion. You can still have a single list of objects, to keep all the spawning and common routines working normally without duplicated code, but you could have linked lists of specific object types. A variable indicates the slot of the first enemy. Inside that slot, a byte indicates the slot of the second enemy, and so on. That way, inside the AI code for any object, you can call a CollideWithEnemies routine, that will test for collisions exclusively against the objects in the list of enemies. One nice aspect of this is that the types of collisions aren't hardcoded, you can still have a special enemy that collides with enemies, because his AI will call CollideWithEnemies, while most enemies won't.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Or probably even better an idea, to simply keep the list sorted each frame.  When spawning an object, scan down the list and compare the ID variable until you find one greater than the new object, and insert it there (fill next available slot and re-link the list around it).  That way you only have to check each object against types further down the list and you can choose object numbers appropriately, hmm...  Now that I think about it, I should probably do that one.<br /></div><br />You think that's simpler? I honestly don't, and it doesn't sound like it'd work. Consider this: two types of objects are not supposed to collide with each other, such as enemies and items, but you still have to put both in the list. No matter which one you pick to go first, it will collide with the other, because it's further down the list.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Anyways, I'm curious if there is any common advice about object collisions I should know about.  I've read in various places about breaking down the map into regions, then only testing collisions within each region to reduce the number of comparisons, but am I correct in assuming this won't provide much benefit when we're limited to somewhere around 64 objects?<br /></div><br />Does your game have a scrolling map? Are you loading and unloading objects as the screen scrolls? If you are (and you should be!), you are kinda already breaking the map into regions. The only objects being tested are the ones that are in the region surrounding the camera. I don't think that subdividing that space further would bring any benefits.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Feb 28, 2015 5:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-02-28T15:41:40-07:00</updated>
<published>2015-02-28T15:41:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142223#p142223</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142223#p142223"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142223#p142223"><![CDATA[
Honestly, I've found few things more frustrating in old games than having to wait for a missed bullet to disappear before you can fire another one...  I am avoiding that at all costs.<br /><br />That said my projectiles don't also usually despawn on impact, you can run and pick them back up.  I've thought it would probably be smart to remove them from the object list when they become idle and stick them in a separate array of IDs and coordinates for pickups that just sit there until player contact.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Sat Feb 28, 2015 3:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-28T15:34:45-07:00</updated>
<published>2015-02-28T15:34:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142221#p142221</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142221#p142221"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142221#p142221"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />Almost every run'n'gun game I know of uses exactly 8 bullets.<br /></div><br />8 bullets? Do you mean only 8 enemy bullets or 8 bullets total? I'm absolutely sure Contra III puts more than 8 bullets on screen, but I don't know if there are more than 8 enemy bullets or not. I currently just have a counter for how many frames the player can't shoot bullets, and when shooting in a strait line, I've never gotten more than 5 because the bullets fly off the screen. This way, I don't have to keep track of how many bullets there are and you won't have it to were you get about five bullets back to back and then 0 after if you are using a turbo controller. I haven't done anything with enemies yet, just the player.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sat Feb 28, 2015 3:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-02-28T15:15:45-07:00</updated>
<published>2015-02-28T15:15:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142217#p142217</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142217#p142217"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142217#p142217"><![CDATA[
Almost every run'n'gun game I know of uses exactly 8 bullets.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sat Feb 28, 2015 3:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Khaz]]></name></author>
<updated>2015-02-28T13:50:15-07:00</updated>
<published>2015-02-28T13:50:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142214#p142214</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142214#p142214"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=142214#p142214"><![CDATA[
Just want to say thank you guys for creating this thread.  I build an object-handling engine in my game recently (then re-built it all to run on the direct page), and it's now working beautifully.  I see how WLA is such a pain in the ass now though.  If I try to do something like &quot;LDA $0000+obj0XPosn, x&quot; with x as the absolute object slot address, WLA takes the liberty of assuming I meant a one-byte operand because the result of the addition is below $0100, therefore I have to use LDA.w.  Also get the same problem if I want to do a &quot;LDA spr0XPosn, x&quot; with a label like &quot;.EQU spr0XPosn $0000&quot;, have to use the .w again or it defaults to direct page.  It wasn't obvious to me what was so wrong about that at first just because I hadn't touched direct page yet and WLA is basically the only assembler I've really used.  I get it now.<br /><br />Anyways.  What I have functions great, but I wonder if it could be better.  With each object, I test every other object that is FURTHER DOWN THE LIST for collisions.  It's the easiest way I know to test every pair with no duplication, but it starts to become exponentially more demanding once there are about 20-30 different objects on screen.  It also means I have essentially duplicate code mirrored for say colliding a projectile with an enemy, and an enemy with a projectile (which I guess I could simply invert the indexes and call a common routine, but at the expense of even more processing...)<br /><br />My only thoughts on improving this would be to have one or more separate lists of specific kinds of objects, say a separate enemy list.  Or probably even better an idea, to simply keep the list sorted each frame.  When spawning an object, scan down the list and compare the ID variable until you find one greater than the new object, and insert it there (fill next available slot and re-link the list around it).  That way you only have to check each object against types further down the list and you can choose object numbers appropriately, hmm...  Now that I think about it, I should probably do that one.<br /><br />Anyways, I'm curious if there is any common advice about object collisions I should know about.  I've read in various places about breaking down the map into regions, then only testing collisions within each region to reduce the number of comparisons, but am I correct in assuming this won't provide much benefit when we're limited to somewhere around 64 objects?<br /><br />(If my questions have already been answered in this thread I'm sorry, I did read it and I've probably forgotten some things.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6817">Khaz</a> — Sat Feb 28, 2015 1:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-02-22T19:27:47-07:00</updated>
<published>2015-02-22T19:27:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141787#p141787</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141787#p141787"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141787#p141787"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />The problem is you set aside 48 bytes of RAM for each instanciated object but you're not using them for anything besides the object ID. This will cause all instances of the same type of object to use the same global variables, while in fact you should be using the RAM you set aside for each instance.<br /><br />The variables used by the objects should live inside the object slot. You can do this by assigning an offset to each property. For example, you can create a symbol &quot;ObjectOffset&quot; that equals 8 (i.e. the 9th byte within the object slot). Then you can access it like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda ObjectTable+ObjectOffset, y</div><br />...assuming Y is pointing to the current object slot. I don't know if this is the same on the 65816, but on the 6502, the amount of operations you can perform using Y indexing is very limited... if this is the case you should consider using X instead of Y to point to the object slots.<br />For multi-byte properties, you can keep using &quot;+1&quot;, &quot;+2&quot;, and so on.<br /></div><br />Oh yeah, I was being stupid. <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> I know this would be the solution, because I tested it and it works<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ldy ObjectOffset   ;This was originally ObjectIdentifierCounter, but I change the name<br />  lda ObjectTable+4,y</div><br />I was trying not to use x or y earlier, but I guess I have to.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent"><br />Regarding memory/segments and ca65 templates: I've already expressed my displeasure with ca65's lack of knowledge there (more specifically: that the ZEROPAGE segment is a requirement and is highly 6502-centric).  But all of that can be worked around without too much effort.<br /></div><br />At least ca65 isn't broken like WLA.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Feb 22, 2015 7:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[koitsu]]></name></author>
<updated>2015-02-22T19:04:27-07:00</updated>
<published>2015-02-22T19:04:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141784#p141784</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141784#p141784"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141784#p141784"><![CDATA[
Issue has been discussed before.  ca65 will generate opcodes using direct page opcodes, as long as the addresses referenced are within $0000-00FF (ZEROPAGE segment), i.e. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda $0000</tt> will get turned into $A5 00, while <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda $0100</tt> would get turned into $AD 00 01 (there is no &quot;direct page&quot; version of this that is 3 bytes long; the zero page opcode on 6502/65c02 is the same opcode as on the 65816 for direct page).  I believe it will use absolute addresses for locations outside of that range, which is also okay (review all the addressing modes on 65816 to see why).  Things like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda &#40;$00&#41;</tt> (that's a 65c02/65816-ism) would get assembled into $B2 00, and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda &#40;$00,x&#41;</tt> would get assembled into $A1 00.<br /><br />if you want to force absolute addressing, it's possible to do so.  See said thread (read every post): <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?t=4166">viewtopic.php?t=4166</a><!-- l --><br /><br />Regarding memory/segments and ca65 templates: I've <a href="http://forums.nesdev.com/viewtopic.php?p=140560#p140560" class="postlink">already expressed</a> my displeasure with ca65's lack of knowledge there (more specifically: that the ZEROPAGE segment is a requirement and is highly 6502-centric).  But all of that can be worked around without too much effort.<br /><br />The &quot;memory segment&quot; thing is a requirement for ca65 (see above, re: config template).  That's just how it works.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3">koitsu</a> — Sun Feb 22, 2015 7:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-02-22T18:22:28-07:00</updated>
<published>2015-02-22T18:22:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141780#p141780</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141780#p141780"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141780#p141780"><![CDATA[
I looked around and according to this <!-- m --><a class="postlink" href="http://www.cc65.org/doc/ca65-6.html">http://www.cc65.org/doc/ca65-6.html</a><!-- m --> ca65 supports the ability to support labels, so you might be able to control what variables are accessed with DP, and what is accessed with absolute addressing.  Espozo is using some weird automatic memory labeling feature that involves &quot;memory segments.&quot;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun Feb 22, 2015 6:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-22T16:44:56-07:00</updated>
<published>2015-02-22T16:44:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141774#p141774</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141774#p141774"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141774#p141774"><![CDATA[
Wait a minute... the assembler doesn't let you do something that the CPU is capable of? WTF?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Feb 22, 2015 4:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-02-22T15:33:45-07:00</updated>
<published>2015-02-22T15:33:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141772#p141772</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141772#p141772"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141772#p141772"><![CDATA[
It looks really difficult to use the direct page in ca65, for anything other than local memory.  In bass, you can do &quot;define something($00)&quot; and have be an object variable, and do &quot;define something_else($0000)&quot;, and use it as a local variable.  In ca65, it expects the direct page to always be at $0000-$00FF.<br /><br />Maybe you can get around this problem by placing the stack at $0000-$00FF, and placing local memory at $0100-$01FF.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun Feb 22, 2015 3:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2015-02-22T12:34:21-07:00</updated>
<published>2015-02-22T12:34:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141761#p141761</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141761#p141761"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141761#p141761"><![CDATA[
That's beyond my knowledge, so maybe if you show some sample code he'll prefer that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sun Feb 22, 2015 12:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2015-02-22T12:26:36-07:00</updated>
<published>2015-02-22T12:26:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141758#p141758</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141758#p141758"/>
<title type="html"><![CDATA[Re: Main principles of creating an &quot;object&quot;]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12356&amp;p=141758#p141758"><![CDATA[
Does Espozo know how to use direct page?  I always used direct page for object slots, so I didn't have to keep juggling index registers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun Feb 22, 2015 12:26 pm</p><hr />
]]></content>
</entry>
</feed>