<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=403" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-07-12T12:28:13-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=403</id>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2005-07-12T12:28:13-07:00</updated>
<published>2005-07-12T12:28:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2751#p2751</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2751#p2751"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2751#p2751"><![CDATA[
<div class="quotetitle">beneficii wrote:</div><div class="quotecontent"><br /><div class="quotetitle">beneficii wrote:</div><div class="quotecontent">Then again, they could have just used indirect addressing.  It would have taken less memory space.  Perhaps they did it so that the IRQ would not take so long?  That's my best guess now.<br /></div><br /><br />Or, better, so it will not take so long from the start of the IRQ to that weird loop so they could control the timing better?</div><br /><br />Yeah, both those reasons.  IRQs are usually for something time-dependant, but it can be for different reasons.  So if they have a case where the delay would be unwanted, they could JMP to code without it.  On Squeedo I currently do that with a BPL that's not taken if it's a sound IRQ, so that only costs 2 cycles in that case.  It does an indirect JMP in all other cases.  I can get away with that though since I'm controlling every bit returned from the mapper read, heheh.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Jul 12, 2005 12:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-07-12T11:09:38-07:00</updated>
<published>2005-07-12T11:09:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2749#p2749</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2749#p2749"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2749#p2749"><![CDATA[
<div class="quotetitle">beneficii wrote:</div><div class="quotecontent"><br /><div class="quotetitle">beneficii wrote:</div><div class="quotecontent"><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Yeah, that's definitely a timing loop.  Probably to kill the time between IRQ trigger and the end of the scanline.  I dunno why it writes twice to the MMC3 register though.<br /><br />Actually, since my Squeedo BIOS has so much IRQ code I thought about doing something similar.  But not jumping to zeropage, just normal RAM (I don't see much advantage in using the ZP like that, heh).  But I'm sticking with ROM for now.<br /></div><br /><br />From looking at the RAM while it's running, I think that second write to E000 is just as a filler.  This was traced while it was on the title page and scrolling that save data select table up.  I looked at the RAM while it was running: before it started scrolling up the save data select table, it has a write to 2001 instead of a second write to E000.  Then it just changes the code.  That was probably why the IRQ vector is in such a weird place to begin with; they didn't want to waste time and memory with flags and branch statements.</div><br /><br />Then again, they could have just used indirect addressing.  It would have taken less memory space.  Perhaps they did it so that the IRQ would not take so long?  That's my best guess now.</div><br /><br />Or, better, so it will not take so long from the start of the IRQ to that weird loop so they could control the timing better?<p>Statistics: Posted by Guest — Tue Jul 12, 2005 11:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-07-12T11:06:30-07:00</updated>
<published>2005-07-12T11:06:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2748#p2748</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2748#p2748"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2748#p2748"><![CDATA[
<div class="quotetitle">beneficii wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Yeah, that's definitely a timing loop.  Probably to kill the time between IRQ trigger and the end of the scanline.  I dunno why it writes twice to the MMC3 register though.<br /><br />Actually, since my Squeedo BIOS has so much IRQ code I thought about doing something similar.  But not jumping to zeropage, just normal RAM (I don't see much advantage in using the ZP like that, heh).  But I'm sticking with ROM for now.<br /></div><br /><br />From looking at the RAM while it's running, I think that second write to E000 is just as a filler.  This was traced while it was on the title page and scrolling that save data select table up.  I looked at the RAM while it was running: before it started scrolling up the save data select table, it has a write to 2001 instead of a second write to E000.  Then it just changes the code.  That was probably why the IRQ vector is in such a weird place to begin with; they didn't want to waste time and memory with flags and branch statements.</div><br /><br />Then again, they could have just used indirect addressing.  It would have taken less memory space.  Perhaps they did it so that the IRQ would not take so long?  That's my best guess now.<p>Statistics: Posted by Guest — Tue Jul 12, 2005 11:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-07-12T11:03:59-07:00</updated>
<published>2005-07-12T11:03:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2747#p2747</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2747#p2747"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2747#p2747"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />Yeah, that's definitely a timing loop.  Probably to kill the time between IRQ trigger and the end of the scanline.  I dunno why it writes twice to the MMC3 register though.<br /><br />Actually, since my Squeedo BIOS has so much IRQ code I thought about doing something similar.  But not jumping to zeropage, just normal RAM (I don't see much advantage in using the ZP like that, heh).  But I'm sticking with ROM for now.<br /></div><br /><br />From looking at the RAM while it's running, I think that second write to E000 is just as a filler.  This was traced while it was on the title page and scrolling that save data select table up.  I looked at the RAM while it was running: before it started scrolling up the save data select table, it has a write to 2001 instead of a second write to E000.  Then it just changes the code.  That was probably why the IRQ vector is in such a weird place to begin with; they didn't want to waste time and memory with flags and branch statements.<p>Statistics: Posted by Guest — Tue Jul 12, 2005 11:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2005-07-12T10:39:33-07:00</updated>
<published>2005-07-12T10:39:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2742#p2742</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2742#p2742"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2742#p2742"><![CDATA[
Yeah, that's definitely a timing loop.  Probably to kill the time between IRQ trigger and the end of the scanline.  I dunno why it writes twice to the MMC3 register though.<br /><br />Actually, since my Squeedo BIOS has so much IRQ code I thought about doing something similar.  But not jumping to zeropage, just normal RAM (I don't see much advantage in using the ZP like that, heh).  But I'm sticking with ROM for now.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Jul 12, 2005 10:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-07-12T08:55:49-07:00</updated>
<published>2005-07-12T08:55:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2735#p2735</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2735#p2735"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2735#p2735"><![CDATA[
Here's the rest of that particular IRQ routine (my guess is that the code starting at 0029 is subject to change).  Note the NOP and that weird loop that decrements repeatedly y by 1 until it reaches zero.  There seems to be a timing reason for it, probably.  Perhaps somebody could explain why.  Also, why two writes to E000 (MMC3)?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$0029:48        PHA                        A:00 X:FF Y:00 P:nvUbdIZC<br />$002A:A9 00     LDA #$00                   A:00 X:FF Y:00 P:nvUbdIZC<br />$002C:8D 00 E0  STA $E000 = #$6E           A:00 X:FF Y:00 P:nvUbdIZC<br />$002F:8D 00 E0  STA $E000 = #$6E           A:00 X:FF Y:00 P:nvUbdIZC<br />$0032:4C BF FB  JMP $FBBF                  A:00 X:FF Y:00 P:nvUbdIZC<br />$FBBF:EA        NOP                        A:00 X:FF Y:00 P:nvUbdIZC<br />$FBC0:98        TYA                        A:00 X:FF Y:00 P:nvUbdIZC<br />$FBC1:48        PHA                        A:00 X:FF Y:00 P:nvUbdIZC<br />$FBC2:A0 0F     LDY #$0F                   A:00 X:FF Y:00 P:nvUbdIZC<br />$FBC4:88        DEY                        A:00 X:FF Y:0F P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:0E P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:0E P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:0D P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:0D P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:0C P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:0C P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:0B P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:0B P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:0A P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:0A P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:09 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:09 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:08 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:08 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:07 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:07 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:06 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:06 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:05 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:05 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:04 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:04 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:03 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:03 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:02 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:02 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:01 P:nvUbdIzC<br />$FBC4:88        DEY                        A:00 X:FF Y:01 P:nvUbdIzC<br />$FBC5:D0 FD     BNE $FBC4                  A:00 X:FF Y:00 P:nvUbdIZC<br />$FBC7:A9 00     LDA #$00                   A:00 X:FF Y:00 P:nvUbdIZC<br />$FBC9:8D 06 20  STA $2006 = #$A2           A:00 X:FF Y:00 P:nvUbdIZC<br />$FBCC:8D 06 20  STA $2006 = #$A0           A:00 X:FF Y:00 P:nvUbdIZC<br />$FBCF:8D 05 20  STA $2005 = #$00           A:00 X:FF Y:00 P:nvUbdIZC<br />$FBD2:8D 05 20  STA $2005 = #$00           A:00 X:FF Y:00 P:nvUbdIZC<br />$FBD5:A9 82     LDA #$82                   A:00 X:FF Y:00 P:nvUbdIZC<br />$FBD7:8D 00 80  STA $8000 = #$3A           A:82 X:FF Y:00 P:NvUbdIzC<br />$FBDA:A9 DA     LDA #$DA                   A:82 X:FF Y:00 P:NvUbdIzC<br />$FBDC:8D 01 80  STA $8001 = #$80           A:DA X:FF Y:00 P:NvUbdIzC<br />$FBDF:A9 83     LDA #$83                   A:DA X:FF Y:00 P:NvUbdIzC<br />$FBE1:8D 00 80  STA $8000 = #$3A           A:83 X:FF Y:00 P:NvUbdIzC<br />$FBE4:A9 DB     LDA #$DB                   A:83 X:FF Y:00 P:NvUbdIzC<br />$FBE6:8D 01 80  STA $8001 = #$80           A:DB X:FF Y:00 P:NvUbdIzC<br />$FBE9:A9 84     LDA #$84                   A:DB X:FF Y:00 P:NvUbdIzC<br />$FBEB:8D 00 80  STA $8000 = #$3A           A:84 X:FF Y:00 P:NvUbdIzC<br />$FBEE:A9 3F     LDA #$3F                   A:84 X:FF Y:00 P:NvUbdIzC<br />$FBF0:8D 01 80  STA $8001 = #$80           A:3F X:FF Y:00 P:nvUbdIzC<br />$FBF3:A9 85     LDA #$85                   A:3F X:FF Y:00 P:nvUbdIzC<br />$FBF5:8D 00 80  STA $8000 = #$3A           A:85 X:FF Y:00 P:NvUbdIzC<br />$FBF8:A9 DA     LDA #$DA                   A:85 X:FF Y:00 P:NvUbdIzC<br />$FBFA:8D 01 80  STA $8001 = #$80           A:DA X:FF Y:00 P:NvUbdIzC<br />$FBFD:4C 22 FB  JMP $FB22                  A:DA X:FF Y:00 P:NvUbdIzC<br />$FB22:68        PLA                        A:DA X:FF Y:00 P:NvUbdIzC<br />$FB23:A8        TAY                        A:00 X:FF Y:00 P:nvUbdIZC<br />$FB24:A5 38     LDA $38 = #$86             A:00 X:FF Y:00 P:nvUbdIZC<br />$FB26:8D 00 80  STA $8000 = #$3A           A:86 X:FF Y:00 P:NvUbdIzC<br />$FB29:68        PLA                        A:86 X:FF Y:00 P:NvUbdIzC<br />$FB2A:40        RTI                        A:00 X:FF Y:00 P:nvUbdIZC</div><p>Statistics: Posted by Guest — Tue Jul 12, 2005 8:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2005-07-12T08:50:42-07:00</updated>
<published>2005-07-12T08:50:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2734#p2734</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2734#p2734"/>
<title type="html"><![CDATA[Craziest 2$#% I Ever Saw]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=403&amp;p=2734#p2734"><![CDATA[
When, in Kirby's Adventure, I saw that the IRQ vector was 0029, I thought, No way.  I then checked a trace of a split-screen scrolling operation and saw that indeed, the IRQ vector is at 0029!  I guess it writes brand new code into the RAM and then executes it from there. <img src="http://forums.nesdev.com/images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" />  Then again, I sorta knew it was possible.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$0029:48        PHA                        A:00 X:FF Y:00 P:nvUbdIZC<br />$002A:A9 00     LDA #$00                   A:00 X:FF Y:00 P:nvUbdIZC<br />$002C:8D 00 E0  STA $E000 = #$6E           A:00 X:FF Y:00 P:nvUbdIZC<br />$002F:8D 00 E0  STA $E000 = #$6E           A:00 X:FF Y:00 P:nvUbdIZC<br />$0032:4C BF FB  JMP $FBBF                  A:00 X:FF Y:00 P:nvUbdIZC</div><p>Statistics: Posted by Guest — Tue Jul 12, 2005 8:50 am</p><hr />
]]></content>
</entry>
</feed>