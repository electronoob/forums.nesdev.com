<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - New approach to the fabled NES ethernet adapter</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">New approach to the fabled NES ethernet adapter</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5117">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=5117</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>7</strong> of <strong>9</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Thu Feb 25, 2010 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />SUCCESS!  Memblers, thanks for putting that together so fast.  I was finally able to send a signal from HyperTerminal through the ATTiny2313 and have it toggle the menu on your test code.  I also modified it to reply to the PC with an ACK code after the first signal was processed.  In short, send a single character command to the NES, the NES processes and a response is returned.
<br />
<br />I tried for some time to get SPI working on the Arduino.  I was able to receive without issue, but the Arduino would not send the SPI data.  Probably due to my inexperience with it, but I don't want to spend another day trying to figure it out.  Someone else could always take a look, but for now I'm bit-banging on the ATTiny2313.
<br />
<br />So, we've verified that we can send signals to the NES and have it respond.  In order to make it useful, the transmissions will have to be variable length.  If a single-byte data transaction occurs once every 16ms, it's gonna take a while to dynamically load up CHR-RAM.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  So it's time to discuss a protocol.  We have to hammer this out before proceeding, otherwise we'll be re-writing every piece of code (NES, MCU &amp; server) we write before it's done.
<br />
<br />Idea #1
<br />We could set it up so that the first byte of a transmission contains the command signal as well as the number of bytes to follow.  This would allow for 15 distinct command codes and 15 bytes to follow.  At least three command codes would be reserved for MCU session setup and teardown.  MCU available, Connected to Server and Server Disconnect.  The remaining 12 could be interpreted by each game independently.
<br />
<br />Idea #2
<br />We could set it up so that the first byte is the command byte and the number of bytes to be expected is pre-determined based on command received.  Not sure I like this since that may require more logic in the MCU.
<br />
<br />Idea #3
<br />A command byte and a data length byte would be mandatory for each transmission.  This would allow for about 254 commands with 254 bytes to follow.
<br />
<br />If we ever decided that this would be a cross-platform protocol, and it could, I'd probably go with option 3.  Doesn't add much more overhead, but it would greatly expand the possibilities.  Imagine playing Pong on the NES against someone playing the same re-written on the SNES.  Or an RPG.  Not saying it would happen anytime soon, just that we don't want to limit the possibilities because of one byte.
<br />
<br />Last thing - we need a project page to keep track of things.  I can install some wiki software on my web server (<a href="http://www.chykn.com" class="postlink">http://www.chykn.com</a>) if we need to and do it that way.  Some place where the code and protocol info can be easily found and modified (only by admins at first).  If we can do that on parodius.com, awesome.  I just prefer the wiki method due to ease of use.  Better ideas are more than welcome.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hyarion</b> [ Fri Feb 26, 2010 4:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />wouldn't it be better with just:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">datastream length &#40;in bytes&#41;<br />command<br />optional data</div><br /><br />example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0000 0001<br />8bit application specific command<br />no data<br /><br />0000 0002<br />8bit application specific command<br />8bit application specific data<br /><br />0000 0003<br />8bit application specific command<br />16bit application specific data<br /></div><br />but since it's a serial protocol we could change the lengths of each type of "byte"<br />for instance, if we have length 00000000 as a special case to setup the connection<div class="codetitle"><b>Code:</b></div><div class="codecontent">0000 0000 length 0 = setup command<br />0000 0000 command to make the divice identify itself &#40;type of device, revision, etc&#41;<br /><br />0000 0000 length 0 = internal setup command<br />0000 0001 command to setup how many bits each &quot;datastream length&quot; should use<br />aaaa aaaa how many bits to use in command &#40;defaults to 8bits&#41;<br /><br />0000 0000 length 0 = internal setup command<br />0000 0002 command to setup how many bits each application specific command will use<br />aaaa aaaa how many bits to use in command &#40;defaults to 8bits&#41;<br /><br />0000 0000 length 0 = internal setup command<br />0000 0003 command to setup how many bits it should be in each application specific<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data chunk for a specified command<br />aaaa aaaa application specific command to setup<br />bbbb bbbb how many bits to use in data chunk &#40;defaults to 8bits&#41;<br /><br />0000 0000 length 0 = internal setup command<br />0000 0004 command to setup number of data lines use for adapter -&gt; NES communication<br />aa&nbsp; &nbsp; &nbsp; &nbsp; number of datalines &#40;1-3&#41;<br />.<br />.<br />.<br /></div><br /><br />then it could look something like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0000 0000<br />0000 0001<br />0000 0011 setup length size to 2bits &#40;length between 1-3 chunks&#41;<br /><br />00<br />0000 0002<br />0000 0011 setup command size to 5 bits<br /><br />00<br />0000 0003<br />0000 0001<br />0000 0101 setup data chunk size for application command 1 to 5 bits<br /><br />00<br />0000 0003<br />0000 0002<br />0000 0101 setup data chunk size for application command 2 to 5 bits<br /><br />00<br />0000 0003<br />0000 0003<br />0000 0001 setup data chunk size for application command 3 to 1 bit<br /><br />00<br />0000 0003<br />0000 0004<br />0000 0001 setup data chunk size for application command 4 to 1 bit<br /><br />... start program in this case pong &#40;might not be the best application protocol&#41; ...<br /><br />10&nbsp; &nbsp; &nbsp;1 command and 1 data chunk<br />001&nbsp; &nbsp; command 1, my paddle position<br />0111 1 set it to somewhere in the middle<br /><br />10&nbsp; &nbsp; &nbsp;1 command and 1 data chunk<br />010&nbsp; &nbsp; command 2, your paddle position<br />0111 1 set it to somewhere in the middle<br /><br />01&nbsp; &nbsp; &nbsp;1 command no data<br />100&nbsp; &nbsp; command 4, syn, should be answered with an acc<br />... wait for acc...<br /><br />... play game for a while, then...<br /><br />10&nbsp; &nbsp; &nbsp;1 command and 1 data chunk<br />011&nbsp; &nbsp; game over<br />1&nbsp; &nbsp; &nbsp; player 2 won<br /><br />01&nbsp; &nbsp; &nbsp;1 command no data<br />100&nbsp; &nbsp; command 4, syn, should be answered with an acc<br />... wait for acc...<br /></div>
<br />
<br />the pros with this type of configurable protocol would be that it creates less overhead for transmitting data that only uses 1 bit since you don't need to transmit in 8bit block. It is also just as easy to interface with (from the nes side) as your 3:rd protocol option, but more configurable for the advanced user.
<br />
<br />cons however are that it is harder for beginners to program a compatible adapter and that it might be a bit confusing at first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Fri Feb 26, 2010 6:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'd go with your first idea.  The second it good, but since the data is transmitted from the server in whole bytes, I'd just as soon spend the time it takes to transmit a full byte.  Especially if it makes things easier on folks developing software.
<br />
<br />What I really like about your first idea is that the length byte could take into account the command byte.  That way if there is no command byte, the length would be zero.  The NES would then proceed without receiving an unnecessary empty byte.  Might also use this to track the last time you received a command to tell if the MCU has become unresponsive.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">datastream length &#40;in bytes&#41; <br />optional command <br />optional data</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Fri Feb 26, 2010 2:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To speed things along, I've created a wiki for this project.  It will describe the hardware, software and protocols used.  Source code and schematics will be posted where applicable.
<br />
<br /><a href="http://nesdev.chykn.com" class="postlink">http://nesdev.chykn.com</a>
<br />
<br />I've posted a VERY rough draft of the protocol, CGP.  Click on the CGP link from the main page to get more info.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Feb 26, 2010 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It may be smart to include CRC checking.  There is a great XMODEM routine for 6502 by <a href="http://sbc.rictor.org/" class="postlink">Daryl Rictor</a>.  I've used with the Squeedo interface and also while bit-banging over the controller port.  It was rare, but every now and then I would see a retransmitted block.  XMODEM is just 128 bytes of data, with CRC-16.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Fri Feb 26, 2010 4:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good idea, as long as it wouldn't chew up much CPU time.  Only one problem...
<br />
<br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"> XMODEM is just 128 bytes of data, with CRC-16</div>
<br />
<br />The ATTiny2313 chip only has 128 bytes of SRAM.  For now, this will effectively limit transactions to maybe 120 bytes each way.  It will slow things down if you're trying to send bulk data (populating CHR-RAM), but other than that it shouldn't be an issue.  When we move to a device with embedded ethernet, we'll have plenty of RAM to buffer larger transactions.
<br />
<br />Are you thinking about doing the CRC check on the NES itself or on the adapter?  I'm leery about putting it on the adapter since you still have one more serial hop until the data gets to the target.  Besides, if you do the CRC check on the NES, you can always update the software.  Let's implement as little as necessary in the hardware unless it's going to cause a serious performance hit on the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>NESHomebrew</b> [ Fri Feb 26, 2010 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent">To speed things along, I've created a wiki for this project.  It will describe the hardware, software and protocols used.  Source code and schematics will be posted where applicable.<br /><br /><a href="http://nesdev.chykn.com" class="postlink">http://nesdev.chykn.com</a><br /><br />I've posted a VERY rough draft of the protocol, CGP.  Click on the CGP link from the main page to get more info.</div>
<br />
<br />Shouldn't you just put it on the nesDev wiki?  It would make it easier to find.  Totally up to you though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Feb 26, 2010 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent">Good idea, as long as it wouldn't chew up much CPU time.  Only one problem...<br /></div><br />Yeah it is fairly fast.  There are a couple 256-byte lookup tables and a little code.  The receiving end could ignore it if it wants to, if there's some reason to prefer newer data instead of making a retransmission request.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are you thinking about doing the CRC check on the NES itself or on the adapter?<br /></div>
<br />
<br />I mean in the NES, and in the main client/server, since the adapter won't care what the data is.  BUT I am kind of concerned about the adapter getting bogus commands, I don't know how likely that is or if it's worth having a checksum, CRC or something for that.  I'm kind of curious what the NES or the adapter will be reading if something is being plugged in and swapped around the ports, or NES is being reset or powered on and off, someone plugs it in and tries to save a track in Excitebike and does a command to format their hard drive, heheh..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Fri Feb 26, 2010 7:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WhatULive4 wrote:</div><div class="quotecontent">Shouldn't you just put it on the nesDev wiki? It would make it easier to find. Totally up to you though.</div>
<br />Huh - didn't realize there was one until you mentioned that.  Asked yesterday morning and no one mentioned anything about it, so I went ahead and built the wiki on my site today.
<br />
<br />I added the "NES Online" project to the Nesdev wiki under "NES Hardware Projects".  If you search the wiki for "online" or "ethernet" it will show up and display the link to the project page on my site.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Sat Feb 27, 2010 4:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I mean in the NES, and in the main client/server, since the adapter won't care what the data is.</div><br />Sounds wonderful.  The less we put on the adapter, the sooner we can finalize the protocol and I can start sending out a few hardware samples.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">BUT I am kind of concerned about the adapter getting bogus commands </div>
<br />Wouldn't that be funny.  Right after we get this thing online someone will come up with come up with the first NES virus to wipe out the saved games on your battery backed SRAM.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Good point.  I can definitely see where there would be concern if the PC is being used to proxy the data.  Before I finish the proxy app, I'll be sure to add a strict data validation function based on the command received.  If the adapter were to get bogus commands, it would in turn re-transmit them to the NES.  The majority of the signals will be status updates and what not, so the effects of a single bogus command would be temporary.  Worst case, it locks up the NES and the player has to reset.  
<br />
<br />For the amount of work we'd put in trying to figure out all the possible attack vectors and the code we'd write to compensate, I'd just as soon take the chance and spend the time working on other things.  Spend a month figuring out some sort of signature or encryption scheme and someone will break it in two.  If the server and client do any type of validations, I'd leave it at doing the CRC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Feb 28, 2010 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I hope something comes out of this. Standardized way of NES&lt;-&gt;PC communication would be very useful. Especially when coupled with PowerPak <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Mon Mar 01, 2010 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">thefox wrote:</div><div class="quotecontent">I hope something comes out of this. Standardized way of NES&lt;-&gt;PC communication would be very useful.</div>
<br />
<br />Yeah, hopefully what we're doing will extend beyond games communicating with the server.  Downloading new games to a flash cart on the fly then playing then would be pretty sweet.
<br />
<br />Buffering the data is an interesting problem.  Because the MCU is a slave device to the NES, it requires very strict control in terms of clock cycle usage.  Because timing is so critical, it just about forces you to use a discrete device as a buffer and separate it from the IP device.  Otherwise an influx in IP traffic would spike the CPU and cause a temporary loss.  I found that out trying to use GPIO pins on a WRT54G.  Using a buffer device (in this case, the ATTiny2313) and the serial interface allows full commands to be sent or received with perfect timing even if the IP device is experiencing heavy load.  The upside/downside depending on how you look at it is that a command string can only be sent to the NES if it has been loaded in the buffer in it's entirety.  Will be working on the buffering mechanism tonight.
<br />
<br />I'm thinking about limiting individual command strings to 34 bytes each.  That's 1 LEN + 1 CMD + 32 DATA bytes.  Since the NES normally polls the controller ports every 14ms, we could safely assume that at least one command string could be transmitted in this timeframe.
<br />
<br />Also, the data receiving function needs to be reworked to receive multiple commands to expedite the loading of bulk data (CHR-RAM).  Make it so that the NES continues to poll for new commands until it receives a 0x00 signal.  Say the NES sends a signal to the game server for an 8KB chunk.  The IP proxy receives the data and holds it in memory.  The data is then transmitted to the NES in 32(+2) byte chunks.  The buffer device can continue to receive data from the IP proxy even while transmitting to the NES.  Unless the IP proxy becomes busy, this should let us avoid buffer starvation and get a nice continuous stream of data to the NES.  I know 34 bytes doesn't sound like much, but the ATTiny2313 only has 128 bytes RAM.  This would allow for 3 full command strings, hopefully enough buffer space to keep things going smoothly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Tue Mar 02, 2010 1:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Will the ATTiny always have to bit-bang the NES port to use it?  I'm wondering if this is full-duplex or not.  If SPI or something could work in hardware, I would think the adapter could safely do nothing but pass-through data, and let the host software deal with the commands and interpreting string/block sizes.
<br />
<br />At the other end of the cable for what I'd like to build, it would be a USB interface with a generic virtual COM port driver for the remote system.  So by that point I figure it's probably cheap and easy to use a USB PIC, that's what I'll be looking into using in a Squeedo revision.  Heheh if it was code-compatible you could theoretically have something like Squeedo's sound synth, controlled and played through the controller port. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Most of that is assuming there's not lots of bit-banging needed by the MCU, I don't know for sure but I wouldn't be surprised if there is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 02, 2010 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm pretty sure SPI would work on the ATtiny's side of the NES controller cable; it's just clocked serial like in the Game Boy. The NES side of this cable would of course have to bit-bang MOSI to $4016.D0 and MISO from $4017.D0 as it does with controllers. There are three wrinkles: <ul><li>DPCM double clocking, as mentioned before. </li><li>You might have to play with the CPOL and CPHA settings so that the lines are sampled on the correct side of the clock signal. </li><li>A transmission starts after a falling edge of /SS, but the NES has one output for MOSI and /SS. Controllers use $4016.D0 solely as /SS, but if $4016 is also used for MOSI, something will have to recover a /SS signal: perhaps no clocks for a while might reset it. </li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Wed Mar 03, 2010 2:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I'm pretty sure SPI would work on the ATtiny's side of the NES controller cable</div><br />If you can get SPI to work, that would be awesome.  After trying it with the Arduino as well as the ATTiny2313, I gave up on it.  Couldn't get transmits to work on either one.  Receives worked like a charm, though.  Oh well.<br /><br />I finally managed to do a buffered receive from the PC to the NES.  The adapter queued up 8 bytes @ 57600 then passed them to the NES as soon as the command was complete.  Now to implement an outgoing buffer to handle responses.  Speaking of the adapter, how's this for a name; the "NES232".  Simple and descriptive.  Adapts the control ports signals and provides buffering for RS232 communications.<br /><br /><div class="quotetitle">memblers wrote:</div><div class="quotecontent">If SPI or something could work in hardware, I would think the adapter could safely do nothing but pass-through data, and let the host software deal with the commands and interpreting string/block sizes.</div>
<br />The problem here is speed mismatch and possible congestion on the host.  The NES-&gt;RS232 speed mismatch alone would warrant a buffer since you'd run the risk of processing incomplete commands without one.  If you connect the NES directly to GPIO pins on a host and the host is unable to respond, you have to have a way to either queue the transactions and/or provide notification to the NES that data cannot be transmitted at this time.  Similar to congestion notication signalling in the routing world.  That way the NES doesn't send data that ends up in the bit bucket.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>7</strong> of <strong>9</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>