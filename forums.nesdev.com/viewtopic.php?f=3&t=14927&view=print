<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - APU mixer function efficiency</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/">https://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">APU mixer function efficiency</span><br /><span class="gensmall"><a href="https://forums.nesdev.com/viewtopic.php?f=3&amp;t=14927">https://forums.nesdev.com/viewtopic.php?f=3&amp;t=14927</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Oct 11, 2016 2:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="https://wiki.nesdev.com/w/index.php/APU_Mixer" class="postlink">The wiki</a> contains an approximation that uses 2 lookup tables.  However, since pulse, triangle and noise are 4-bit channels and DMC is a 7-bit channel, doesn't that mean a single lookup table with 2^23 = 8,388,608 entries could provide exact values?  Assuming that 16-bit values are required, the lookup table only needs to be 16 MB.  Are there any cache considerations for randomly reading from an array of that size?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Oct 11, 2016 2:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />... Yes?<br />Enormous ones?<br /><br />The largest in-die L3 cache I've heard of is on the order of 8 MiB, and you're talking about using more than twice that just for fixing APU non-linearity?<br /><br /><br />... That said, where did 2²³ come from? 4+4+7 = 15...<br /><br />Honestly, even using 32 KiW isn't worthwhile. The lookup table approach is only useful on architectures where floating point or division on integers is really expensive, i.e. &quot;before the pentium&quot;.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Oct 11, 2016 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The lookup tables are only one way to implement the given non-linearity formulae, which themselves are only an approximation of the actual output (which still needs more research, I think).<br /><br />I don't think the wiki really needs to prescribe how to implement the non-linearity; the formula is the important part. The lookup table is just an implementation detail. Whether or not it's worth doing depends entirely on the context of implementation.<br /><br />...and yes, those tables are much, much smaller than what you're saying.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Oct 11, 2016 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">Honestly, even using 32 KiW isn't worthwhile. The lookup table approach is only useful on architectures where floating point or division on integers is really expensive, i.e. &quot;before the pentium&quot;.</div><br /><br />Let's put that claim to the test.  Below is a Java application that compares 32-bit floating-point operations to lookup tables:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">public final class BenchmarkApuMixers {<br />&nbsp; <br />&nbsp; private static final float&#91;&#93; pulseTable = new float&#91;31&#93;;<br />&nbsp; private static final float&#91;&#93; tndTable = new float&#91;203&#93;;<br />&nbsp; <br />&nbsp; static {<br />&nbsp; &nbsp; for(int i = pulseTable.length - 1; i &gt;= 0; i--) {<br />&nbsp; &nbsp; &nbsp; pulseTable&#91;i&#93; = 95.52f / (8128f / i + 100f);<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; for(int i = tndTable.length - 1; i &gt;= 0; i--) {<br />&nbsp; &nbsp; &nbsp; tndTable&#91;i&#93; = 163.67f / (24329f / i + 100f);<br />&nbsp; &nbsp; }<br />&nbsp; }<br /><br />&nbsp; public static float noTableTest(final float pulse1, final float pulse2, <br />&nbsp; &nbsp; &nbsp; final float triangle, final float noise, final float dmc) {<br />&nbsp; &nbsp; return 95.88f / (8128f / (pulse1 + pulse2) + 100f) + 159.79f <br />&nbsp; &nbsp; &nbsp; &nbsp; / ((1f / (triangle / 8227f + noise / 12241f + dmc / 22638f)) + 100f);<br />&nbsp; }<br />&nbsp; <br />&nbsp; public static float lookupTableTest(final int pulse1, final int pulse2, <br />&nbsp; &nbsp; &nbsp; final int triangle, final int noise, final int dmc) {<br />&nbsp; &nbsp; return pulseTable&#91;pulse1 + pulse2&#93; + tndTable&#91;3 * triangle + (noise &lt;&lt; 1) <br />&nbsp; &nbsp; &nbsp; &nbsp; + dmc&#93;;<br />&nbsp; }&nbsp; <br /><br />&nbsp; public static void main(final String... args) throws Throwable {<br />&nbsp; &nbsp; float result = 0;<br />&nbsp; &nbsp; int x = 0;<br />&nbsp; &nbsp; int y = 0;<br />&nbsp; &nbsp; long startTime = System.nanoTime();&nbsp; &nbsp; <br />&nbsp; &nbsp; for(int i = 200_000_000; i &gt;= 0; i--) {<br />&nbsp; &nbsp; &nbsp; if (++x == 16) {<br />&nbsp; &nbsp; &nbsp; &nbsp; x = 0;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; if (++y == 128) {<br />&nbsp; &nbsp; &nbsp; &nbsp; y = 0;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; result += noTableTest(x, x, x, x, y);<br />&nbsp; &nbsp; }&nbsp; &nbsp; <br />&nbsp; &nbsp; System.out.format(&quot;%f nanos/iteration%n&quot;, (System.nanoTime() - startTime) <br />&nbsp; &nbsp; &nbsp; &nbsp; / 200_000_000.0);<br />&nbsp; &nbsp; result = 0;<br />&nbsp; &nbsp; x = 0;<br />&nbsp; &nbsp; y = 0;<br />&nbsp; &nbsp; startTime = System.nanoTime();<br />&nbsp; &nbsp; for(int i = 200_000_000; i &gt;= 0; i--) {<br />&nbsp; &nbsp; &nbsp; if (++x == 16) {<br />&nbsp; &nbsp; &nbsp; &nbsp; x = 0;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; if (++y == 128) {<br />&nbsp; &nbsp; &nbsp; &nbsp; y = 0;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; result += lookupTableTest(x, x, x, x, y);<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; System.out.format(&quot;%f nanos/iteration%n&quot;, (System.nanoTime() - startTime) <br />&nbsp; &nbsp; &nbsp; &nbsp; / 200_000_000.0);<br />&nbsp; &nbsp; System.out.println(result);<br />&nbsp; }<br />}</div><br /><br />The results:<br /><br />floating-point: 30.239289 nanos/iteration<br /><br />lookup tables: 2.060711 nanos/iteration<br /><br />That can't be right.  The iterations are way too brief.  This is only a 3 GHz machine.  <br /><br />Any suggestions for better ways to benchmark this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Oct 11, 2016 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried both ways in my emulator and I can't visually see a difference in the task manager.  This is a i5-2400 @ 3.1 GHz 64-bit Win7 box from mid-2012.  My emulator is not particularly efficient.  One of the 4 cores that appear in the task manager bounces between 30% and 40% load.  Overall, it uses up about 15% of the available CPU.  Maybe that's fine considering today's desktops.<br /><br />To my ears, there is no audible difference.  But, my hearing is not that great <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Oct 11, 2016 7:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A 203-entry LUT is short enough to fit into a few lines of L1 cache, so that might be the difference you're seeing.<br /><br />A tiny LUT is definitely a very different story than a multi-megabyte one.<br /><br />(FWIW, adapting your core loop to C and compiling it with gcc -O3 -ffast-math produces 15ns/loop with floats, 1.9ns/loop with LUTs, and 14ns/loop (as well as wrong results) with integers)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Tue Oct 11, 2016 7:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent">(FWIW, adapting your core loop to C and compiling it with gcc -O3 -ffast-math produces 15ns/loop with floats, 1.9ns/loop with LUTs, and 14ns/loop (as well as wrong results) with integers)</div><br /><br />On what box?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Oct 11, 2016 8:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Haswell i3-4330. (nominally 3.5GHz peak, and 64B/line of cache)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Oct 11, 2016 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Huge lookup tables = tons of cache misses = slow

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Wed Oct 12, 2016 6:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The reason that I am reviewing the mixer code is that I want to provide sound options that enable the user to adjust the mix via sliders similar to many other emulators.  Using floats, the code is straightforward and clean.  Using integer math, things become messy.  For ints only, a pre-scaled LUT could be used for each channel.  Or, I could multiply by a constant and right-shift.  But, it's not clear if either is really faster than a multiplication by a 32-bit float.  Or, in my case, if it is even worth it; after mixing, my emulator applies filtering and decimation, both of which use a ton of 64-bit float multiplications, additions and table look-ups.  In the fancy mixer formula, it's really the divisions that make me cringe.  We're all taught to stay away from them for speed reasons, but everyone owns a personal super computer these days.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 12, 2016 7:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zeroone wrote:</div><div class="quotecontent">In the fancy mixer formula, it's really the divisions that make me cringe.  We're all taught to stay away from them for speed reasons, but everyone owns a personal super computer these days.</div><br />Perhaps it's a matter of whether you want to target PCs or smartphones. On the one hand, people tend to want to play simpler games on the go rather than at home, and mobile devices with ARM CPUs have tended to perform far worse than desktop PCs at floating-point division in the past. On the other hand, the mobile devices that people are carrying nowadays have a touch screen and tilting the whole device as their only input methods, and these don't map quite so well to the twitchy actions that NES games tend to require on the Control Pad and A and B Buttons. Clip-on gamepads for phones exist, but I've never seen one in use in person.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Oct 12, 2016 10:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not certain exactly how the reciprocal-of-reciprocals model came about, but given how MOSFETs work it really &quot;ought&quot; to involve a square root instead. (<a href="https://en.wikipedia.org/wiki/MOSFET#cite_ref-Gray-Meyer2_22-0" class="postlink">wikipedia</a>)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Wed Oct 12, 2016 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The LUT approximation deviates from the float version by more than 10% when DMC is not being used.  For instance, plug-in the max values for pulse1, pulse2, triangle, and noise, and set dmc to 0.  Maybe there is an audible difference.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Oct 12, 2016 2:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zeroone wrote:</div><div class="quotecontent">The LUT approximation deviates from the float version by more than 10% when DMC is not being used.  For instance, plug-in the max values for pulse1, pulse2, triangle, and noise, and set dmc to 0.  Maybe there is an audible difference.</div><br />Yeah, it's unclear why the lookup table implementation on the wiki is using different numbers than blargg's formula, maybe mostly because it's using 3 magic values instead of summing triangle + noise + dmc. (Is the actual mix an analog combination of 3 DACs or a digital sum output to 1 DAC?)<br /><br />I hinted at this earlier, but you should know that this formula is an old approximation that blargg made up years ago to fit the data available at that time. It's not really that accurate to begin with, but it's better than the linear approximation that was used before it. Between Visual2A03, and the wealth of knowledge and available expertise this community has accumulated since then I'm sure someone could do a lot better if they were to take a crack at it now. (I intend to try once I'm finished my game project, if nobody else gets to it before then.)<br /><br />As for whether you can hear a difference, probably you won't. The analog mix between the two APU outputs is highly variable from system to system anyway; every release of NSFPlay I get complaints on both sides of &quot;this channel is too loud, it's quieter on my NES&quot; and the other way around. Every NES is a little different in that way, and it's a much stronger difference than the kind of thing you'll notice between these approximations of the same formula.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zeroone</b> [ Wed Oct 12, 2016 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: APU mixer function efficiency</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />According to <a href="https://wiki.nesdev.com/w/index.php/APU_Mixer" class="postlink">the wiki</a>, &quot;When the values for one of the groups are all zero, the result for that group should be treated as zero rather than undefined due to the division by 0 that otherwise results.&quot;  <br /><br />This is not the case.  In the limit, as the pulse channels approach 0, pulse_out smoothly approaches 0.  Similarly, tnd_out smoothly approaches a constant.  Consequentially, the checks are not necessary if the formulas are reduced to the expression below:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; public static float mix(final int pulse1, final int pulse2, <br />&nbsp; &nbsp; &nbsp; final int triangle, final int noise, final int dmc) {&nbsp; &nbsp; <br /><br />&nbsp; &nbsp; return (0.9588f * (pulse1 + pulse2)) / (pulse1 + pulse2 + 81.28f) <br />&nbsp; &nbsp; &nbsp; &nbsp; - 361.733f / (2.75167f * triangle + 1.84936f * noise + dmc + 226.38f) <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 1.5979f;<br />&nbsp; }</div><br /><br />Also, with fewer divisions, it should run a lot faster.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>