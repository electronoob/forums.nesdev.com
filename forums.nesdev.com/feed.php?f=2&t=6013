<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=6013" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-02-08T19:02:35-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=6013</id>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-08T19:02:35-07:00</updated>
<published>2010-02-08T19:02:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56330#p56330</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56330#p56330"/>
<title type="html"><![CDATA[Re: cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56330#p56330"><![CDATA[
I found a convenient way to build a branch table like in my original example above but with cleaner syntax. I just stumbled upon this in the CA65 documentation, having examined the ".global" directive miau mentioned in another post.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.HIBYTES and .LOBYTES <br />Define byte sized data by extracting only the high byte &#40;that is, bits 8-15&#41; from each expression. This is equivalent to .BYTE with the operator '&gt;' prepended to each expression in its list.<br /><br />Example:<br /><br />            .lobytes         $1234, $2345, $3456, $4567<br />            .hibytes         $fedc, $edcb, $dcba, $cba9<br />      <br /><br />which is equivalent to<br /><br />            .byte            $34, $45, $56, $67<br />            .byte            $fe, $ed, $dc, $cb<br />      <br /><br />Example:<br /><br />            .define MyTable TableItem0, TableItem1, TableItem2, TableItem3<br /><br />            TableLookupLo:   .lobytes MyTable<br />            TableLookupHi:   .hibytes MyTable<br />      <br /><br />which is equivalent to<br /><br />            TableLookupLo:   .byte &lt;TableItem0, &lt;TableItem1, &lt;TableItem2, &lt;TableItem3<br />            TableLookupHi:   .byte &gt;TableItem0, &gt;TableItem1, &gt;TableItem2, &gt;TableItem3<br />      <br /></div><br /><br />So, this would allow you to have up to 256 entries in your branch table (extreme, yes I agree), avoid the extra step of a left shift, but keep the code readable/maintainable. Kinda neat!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Mon Feb 08, 2010 7:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-02-03T10:39:23-07:00</updated>
<published>2010-02-03T10:39:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56119#p56119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56119#p56119"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56119#p56119"><![CDATA[
<div class="quotetitle">Anders_A wrote:</div><div class="quotecontent"><br />Unless ofcourse you were already executing from ram for some reason, then that trick is very neat.<br /></div><br />If the goal is to simulate an indirect JSR, you' need to use JSR anyway to save the return address, so you might as well have that subroutine bogax posted in RAM for the fastest code possible, without needing the stack or variables (although the space used by the code is more than a variable would occupy). Even if you don't want to save the return address, the 3 cycles needed to JMP to that code in RAM aren't a big deal (I haven't counted all the cycles to know if it's worth it though).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Feb 03, 2010 10:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Anders_A]]></name></author>
<updated>2010-02-03T10:09:26-07:00</updated>
<published>2010-02-03T10:09:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56118#p56118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56118#p56118"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56118#p56118"><![CDATA[
Self modifying code is neat and all, but to make that practical you'd probably have to jsr to ram and rts back anyway.<br /><br />Unless ofcourse you were already executing from ram for some reason, then that trick is very neat.<br /><br />EDIT:<br />Since you only have 3 posts you might be new to the NES platform. The NES doesn't load programs to ram in order to execute them, it executes them straight from the rom.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1601">Anders_A</a> — Wed Feb 03, 2010 10:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2010-02-03T04:36:45-07:00</updated>
<published>2010-02-03T04:36:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56110#p56110</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56110#p56110"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56110#p56110"><![CDATA[
Unless I'm missing something or you're wedded to fake jumps using<br />an rts for some reason, isn't the straight forward thing to use the jmp<br />indirect (directly, so to speak) with your jump table?<br /><br />something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br /> lda state<br /> asl<br /> sta JUMP+1<br />JUMP<br /> jmp &#40;xx00&#41;  ;xx being the page address for the jump table<br /><br /></div><br /><br />of course you're limited to 128 addresses and you have to be<br />mindful of the jump indirect bug and be able to write the indirect<br />address<br /><br />edit: oops, corrected the indirect address to be less little endian and<br />more like the usual four digit number<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Wed Feb 03, 2010 4:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2010-02-02T13:13:03-07:00</updated>
<published>2010-02-02T13:13:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56100#p56100</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56100#p56100"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56100#p56100"><![CDATA[
<div class="quotetitle">Gradualore wrote:</div><div class="quotecontent"><br />So I would basically load the state, and then basically say, is this the low half of my states (0 thru 1 for example with 4 states), if so, brach here, but if it is the higher half (2 thru 3), branch here, and then in each of those branches, split it up further?<br /></div><br />That's how binary search works. After every compare you get rid of half of the possibilities. With 256 possibilities you can imagine it would take quite a while to reach the higher ones, but with binary search you are guaranteed to find the number you are looking for after comparing at most 8 numbers. It's quite a difference.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I like how direct the jump table technique is, though.<br /></div><br />When I need to index words/addresses I usually use only even codes, so that I don't have to shift. Most of the times 128 possibilities is enough, so I don't see any problem. I have done this for program modes. I have a table like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ProgramModes:<br /><br />   ModeTitleScreen .dw ShowTitle<br />   ModeGameplay .dw PlayLevel<br />   ModeGameOver .dw ShowGameOver<br />   &#40;...&#41;</div><br />And then when I want to use one of these codes I do:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ldx #ModeGameOver-ProgramModes</div><br />so I don't even have to worry about what the codes actually are, I just use their names.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Feb 02, 2010 1:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-02T12:54:19-07:00</updated>
<published>2010-02-02T12:54:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56099#p56099</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56099#p56099"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56099#p56099"><![CDATA[
So I would basically load the state, and then basically say, is this the low half of my states (0 thru 1 for example with 4 states), if so, brach here, but if it is the higher half (2 thru 3), branch here, and then in each of those branches, split it up further? Interesting idea. I like how direct the jump table technique is, though. *edit* I guess I could just AND out bits in descending power. So for four states I'd actually do AND #2 to see whether I'm in the upper or lower half of my states.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Tue Feb 02, 2010 12:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2010-02-02T12:51:51-07:00</updated>
<published>2010-02-02T12:51:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56098#p56098</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56098#p56098"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56098#p56098"><![CDATA[
If you have a lot of cases, you can either use a jump table, or use a series of conditional branches shaped like a binary tree, to limit the number of comparisons.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Feb 02, 2010 12:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-02T12:29:15-07:00</updated>
<published>2010-02-02T12:29:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56097#p56097</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56097#p56097"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56097#p56097"><![CDATA[
*edit* In the last thread I was seeking primarily how to do an indirect jsr, which I am applying for intelligence routines for game objects. Now I am just trying to clean up bits of code where I have a sequence of cmp/beq to decide what branch of code to take. Most places where I have these "switch statements" have so few cases that I don't think splitting the upper and lower bytes of the addresses would cause much of a readability issue. Either way would beat a sequence of cmp/beq, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Tue Feb 02, 2010 12:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-02-02T12:23:39-07:00</updated>
<published>2010-02-02T12:23:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56096#p56096</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56096#p56096"/>
<title type="html"><![CDATA[Re: cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56096#p56096"><![CDATA[
<div class="quotetitle">Gradualore wrote:</div><div class="quotecontent"><br />I've seen a couple of hints on here about how to implement a simple branch table, but I was wondering what might be the best way of doing this.<br /></div><br />Didn't you <a href="http://nesdev.com/bbs/viewtopic.php?t=5997&amp;highlight=rts+trick" class="postlink">just ask about this</a>?<br /><br />The following is actual playfield state dispatch code used in <a href="http://lj65.org/" class="postlink">one of my projects</a>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">game_cycle:<br />  ; ...<br />  lda cur_state,x<br />  asl a<br />  tax<br />  lda state_jtable+1,x<br />  pha<br />  lda state_jtable,x<br />  pha<br />straight_rts:<br />  rts<br /><br />.align 2<br />state_jtable:<br />  .addr wait_for_join-1<br />  .addr do_new_game_menu-1<br />  .addr make_new_game-1<br />  .addr make_new_piece-1<br />  .addr falling_piece-1<br />  .addr falling_piece-1<br />  .addr find_full_lines-1<br />  .addr post_clear-1<br />  .addr move_down-1<br />  .addr move_up-1<br />  .addr game_over_anim-1<br /></div><br />(Ignore the straight_rts; that's used by the handler for wait_for_join.)<br /><br />As for the left shift, it will probably make the code clearer and easier to maintain when you add new states.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Feb 02, 2010 12:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[GradualGames]]></name></author>
<updated>2010-02-02T12:06:12-07:00</updated>
<published>2010-02-02T12:06:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56095#p56095</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56095#p56095"/>
<title type="html"><![CDATA[cmp/beq vs. simple branch table advice?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6013&amp;p=56095#p56095"><![CDATA[
I have some places in my game's code where I do a series of cmp and then beq to decide where to branch based on some state (usually a simple enumeration counting from 0). I've seen a couple of hints on here about how to implement a simple branch table, but I was wondering what might be the best way of doing this. My current idea:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">locationlowbyte:<br />    .byte &lt;branch1 ;state 0<br />    .byte &lt;branch2 ;state 1<br />locationhibyte:<br />   .byte &gt;branch1  ;state 0<br />   .byte &gt;branch2 ;state 1<br /><br />routine:<br />   ldx state<br />  lda locationlowbyte,x<br />  sta w0<br />  lda locationhibyte,x<br />  sta w0+1<br />  jmp &#40;w0&#41;<br /><br />branch1:<br />  ;do stuff<br />   jmp switchbreak<br />branch2:<br />  ;do different stuff<br />switchbreak:</div><br /><br />My very first thought was to have a table of words with the absolute addresses of the branch labels, but then I thought you'd have to shift your state left by 1 bit (unless you make sure your states are already 0, 2, 4, 6, etc.) before finding the entry in the table.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3735">GradualGames</a> — Tue Feb 02, 2010 12:06 pm</p><hr />
]]></content>
</entry>
</feed>