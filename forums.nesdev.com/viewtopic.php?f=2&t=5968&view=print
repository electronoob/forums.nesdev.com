<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprite 0 hit flag to find out if character is grounded?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprite 0 hit flag to find out if character is grounded?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5968">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5968</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Thu Jan 21, 2010 3:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sprite 0 hit flag to find out if character is grounded?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In paltformers can we use sprite 0 hit flag to find out if the character is grounded(on a platform) or not? What all can sprite 0 hit detection be used for?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Thu Jan 21, 2010 7:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can, but it's a pretty dangerous thing to rely on Sprite 0 hits for such a thing; it's too limiting.
<br />
<br />For one, your hit/polling loop might take up most of the screen time if your platform is near the bottom of the screen.  Your code will be practically idle for much of the valuable processing time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jan 21, 2010 7:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ccovell wrote:</div><div class="quotecontent">You can, but it's a pretty dangerous thing to rely on Sprite 0 hits for such a thing; it's too limiting.</div><br />True. In practice, games make an internal model of an area map and then do collision between a sprite's hit box and that model. Super Mario Bros., for instance, uses a "metatile" grid, where each byte represents a 16x16 pixel area of the map, and keeps a 32x13-metatile sliding window of the map in RAM for collision purposes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For one, your hit/polling loop might take up most of the screen time if your platform is near the bottom of the screen.</div>
<br />Unless it runs <em>during</em> vertical blanking. Remember that the sprite 0 hit flag doesn't get turned off until the pre-render line; I seem to remember some demos relying on this for finding the end of vertical blank in order to turn on rendering late for greater VRAM bandwidth.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Jan 21, 2010 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sprite zero hit should NEVER be used as a form of logical collision detection.  
<br />
<br />Its only use is to split the screen at a specific point, or if you need to know when the vblank period ends, you can force a sprite 0 collision, but not directly poll it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jan 21, 2010 11:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another reason why it's not a good idea to use sprite 0 hits to detect the ground is that for a collision to happen the sprite must have opaque pixels, so you'd have to constantly worry about how to hide those pixels so nothing weird shows up below your character.
<br />
<br />Also, you'd have to keep your player always 1 pixel into the ground, because you'd have no way to detect the collision before it happens. But what if your ground graphics do not have a plain surface, like usually happens with grass?
<br />
<br />That being said, I have to agree that it's not a good idea to have the graphical side of the game affect the logical side. The best thing is to have your world completely modeled logically, so that all collisions are handled mathematically to later be represented with graphics.
<br />
<br />Ideally, games should be able to run even if not displaying anything, because the game world is completely modeled and the simulation can happen even if nothing is shown. Graphics should just be visual snapshots of moments of the simulation. What I mean is, the graphics engine of your game should be as independent from the game logic as possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Thu Jan 21, 2010 2:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The main reason it wouldn't work is because you'd collide with everything.  It would detect when Mario intersected with the hill in the background.  I suppose you might use this to make a Worms/Scorched Earth sort of game, where you need pixel perfect collision on varied surfaces.
<br />
<br />I would hesitate to say its only possible use it to split the screen or finding the end of vblank.  Those are its most logical and common uses, but I'm sure a creative coder could come up with other good ways to take advantage of it.  Platformer-style collision detection is probably not going to work well, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Thu Jan 21, 2010 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Seems to me that Sprite Hit 0 was just a cheap way of allowing raster effects on the base hardware rather than including some sort of built in scanline counter like they probably should have done. There really is no other use for it than attempting to time code to interact with rendering in some way. Logical game operations should never rely on that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jan 21, 2010 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />And remember that back in 1983 when the Famicom was designed, even basic operation of game consoles was a patent minefield. The whole sprite 0 madness might have just been Nintendo's way to work around patents.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Jan 21, 2010 11:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">That being said, I have to agree that it's not a good idea to have the graphical side of the game affect the logical side. The best thing is to have your world completely modeled logically, so that all collisions are handled mathematically to later be represented with graphics.<br /><br />Ideally, games should be able to run even if not displaying anything, because the game world is completely modeled and the simulation can happen even if nothing is shown. Graphics should just be visual snapshots of moments of the simulation. What I mean is, the graphics engine of your game should be as independent from the game logic as possible.</div>
<br />
<br />I have tried to explain this so many times! Like when people do something like "INC $300" to move a sprite (assuming #3 is stored into $4014), I always tell them that it's a bad practice because of what you just said. So yeah, to all of you out there who hope to program a more complex game like a platformer, read what tokumaru just said because it is absolutely true. Well, the truth should never be deemed undeniable, I suppose, because if that were the case we would never think outside the box. However, in this case, I would say you shouldn't hard code things so that logic depends on what's displayed and the other way around. I would definitely stick with having a display engine that somehow displays what's going on inside the game world without the code in the game world being concerned with it. It shouldn't be the logic engine's responsibility to worry about what's displayed; the display engine should be the only code worried about that. It just makes cleaner, more logical, and more reliable code that is easier to modify should you decide to make changes.
<br />
<br />EDIT: Also, relying on sprite #0 for collision is not a good idea, in my mind. Not only are you mixing display and logic code which makes a mess, you have to then figure out how you're going to make other objects collide with stuff. Not only that, you actually have to wait for the sprite #0 hit, wasting possibly dozens of scanlines in a loop. And the amount of time spent in this loop would probably range from not very long to the entire frame. What if sprite #0 is on the bottom of the screen? It's not THAT bad if it's on top, but you might as well just recode your game engine to be:
<br />
<br />-
<br />jmp -
<br />
<br />If it's on the bottom, because you'll be wasting the whole frame waiting. And besides, once you find a way for other objects to collide with things, you might as well use that same method for the player (or whatever object would use the sprite #0 method). I also know from experience that using sprite #0 for collision is a bad idea; I've done it in a minigame I was working on.
<br />
<br />Don't get me wrong, sprite #0 can be a life saver, and bazillions of NES games wouldn't be the same without it. I can't tell you how many games use it for something like displaying a status bar and having the rest of the screen scroll. I actually use it for that exact purpose in my platformer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 22, 2010 12:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I would definitely stick with having a display engine that somehow displays what's going on inside the game world without the code in the game world being concerned with it. It shouldn't be the logic engine's responsibility to worry about what's displayed; the display engine should be the only code worried about that. It just makes cleaner, more logical, and more reliable code that is easier to modify should you decide to make changes.</div><br />Are you familiar with the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" class="postlink">Model-View-Controller</a> design pattern? If you're not, take a look at it. This is a simple image that describes it:<br /><br /><img src="http://troika-asp.com/images/mvc.gif" alt="Image" /><br /><br />Look at how the controller can, well, control both the view and the model, and how the view watches the model, but the model is completely unaware of what surrounds it. Ideally, that's how games should be. The controller is a sort of manager, which handles inputs and things like that and modifies the view and the model as necessary. The view watches the model in order to draw a representation (or representations) of it, while the simulation keeps going indefinitely in the model. This allows for some cool things, like having different cameras watching different parts of a level and things like that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Not only that, you actually have to wait for the sprite #0 hit, wasting possibly dozens of scanlines in a loop.</div><br />That's not correct. Using sprite 0 for detecting game object collisions is very different from using it for raster effects. For raster effects, you know for sure that <strong>the hit will happen</strong>, and knowing <strong>exactly when it happens is the crucial thing</strong>, because that's when you have to modify some PPU register for the effect. But if you are trying to figure out if the player is touching the ground or not, there may be a possibility that <strong>the flag doesn't get set</strong> (when the player is jumping, for example), so if you wait for it in a loop your program will lock up when the character jumps. Also, <strong>it doesn't matter when in the frame the hit happened</strong>, you just want to know if it happened or not, so reading the flag once during VBlank will do the trick.<br /><br />Still not a good idea by any means, but I felt like explaining this because it's not the first time that someone in this thread said that it would be necessary to wait for the sprite hit like it happens with raster effects.<br /><br />Anyway, using sprite 0 to test collisions is a bad idea for several reasons: The background would have to be blank, because everything that wasn't would be solid; The player would have to be 1 pixel into the floor, because you wouldn't be able to predict the collision, you'd have to let it happen before detecting it; When going back to the ground after a jump the player would sink several pixels into the floor if moving at more than 1 pixel per frame before being ejected back; Since you would only read the flag during VBlank, you'd only have the previous frame's data; Since there's only 1 sprite 0 you could only do this for 1 character (what about the enemies?); There are probably dozens of other reasons I can't think of right now.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Don't get me wrong, sprite #0 can be a life saver, and bazillions of NES games wouldn't be the same without it. I can't tell you how many games use it for something like displaying a status bar and having the rest of the screen scroll.</div>
<br />I don't know what the designers of the PPU had smoked when they came up with this feature. It's so limited! If at least it generated an IRQ or something... Or if it at least always set the flag when found to be in range... Seriously, doesn't every single game that uses sprite 0 hits make sure a hit will happen? Not a single game I know of is interested in knowing <strong>whether</strong> a hit happened, they are aways interested in <strong>when</strong> it happened, so Nintendo could very well have skipped the whole overlapping solid pixels bullshit.
<br />
<br />I tend to disregard sprite 0 hits, much like I do with MMC3 IRQs. I know it may be a little extreme, but I can always think of several instances where those features would fail in my programs, so I'd rather design them without even considering those.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Fri Jan 22, 2010 2:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, I see about what you were saying with the sprite #0 hit. I never thought about it that way. You mean reading the hit status of the previous frame in Vblank, right? That would definitely eliminate that whole dilemma I mentioned.
<br />
<br />And I agree that the feature is terribly limited, but given nothing else it makes things a lot easier. What I think would be really great is even if they had a register you could read that gives the value of the current scanline being rendered in a byte. Like say they made it so you could read $2008 to get the value of the current scanline being rendered. You could have something like:
<br />
<br />-
<br />lda $2008
<br />cmp #32
<br />bne -
<br />
<br />To wait until scanline 32 rather than having to put sprite #0 at that location. I think that would make things so much easier. And the whole solid pixel collision bit is SO DUMB. Why not just say the top-left corner? Well, if they were going to fix that, they might as well go the extra mile and make something better like an internal scanline counter.
<br />
<br />Just curious: in what situations would your programs inevitably fail from MMC3 or sprite #0 hits? Too much processing time before the wait for the hit? I'd just like to know if there's something I'm overlooking in my game that would cause the game to freeze in an infinite loop waiting for a sprite #0 hit that won't work. The scanline counter for me, also, doesn't work so well because of what you have to sacrifice to use it. It's too much hassle.
<br />
<br />Also, very interesting diagram. I'm glad you showed this to me. Now I can point to this model whenever I'm trying to explain the whole display/logic code separation. Thanks <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 22, 2010 3:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">What I think would be really great is even if they had a register you could read that gives the value of the current scanline being rendered in a byte. Like say they made it so you could read $2008 to get the value of the current scanline being rendered.</div><br />That would be great, and probably much simpler to implement on hardware than the sprite 0 thing. You'd still have to wait for the scanline (an IRQ feature would be even better), but it's better than making sure the sprite hits the background, and could easily be used for multiple splits. I think the SMS has a scanline counter like this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">in what situations would your programs inevitably fail from MMC3 or sprite #0 hits?</div><br />My problem with the MMC3 is that most of my projects have objects that can be drawn using either sprites or the background (like rings and monitors in my Sonic game), to compensate a bit for the sprites per scanline limit (it wouldn't be possible to have a row of 5 monitors if they were all sprites). To avoid wasting tiles, I want to put them on the BG side but use them as sprites too, but the extra fetches would break the scanline counter. I could even replicate the tiles if they weren't animated, but since they are (rings spin and monitors have static) it would be difficult, if not impossible, to update both sets of tiles in sync.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Too much processing time before the wait for the hit?</div>
<br />Yeah, this is one of the problems with sprite 0 hits, if you miss the spot, you get corrupted graphics, there's no way out. I have considered sprite 0 in boss fights for example (to have huge background bosses), since the camera is locked to the "arena" I could disable the the row/column rendering system, which is one of the most intense things of the game. Also, the floor will always be pretty close to the bottom of the screen, so it's unlikely that I'll miss a sprite hit, but there is another problem: if the floor is not straight, or if I use the background color for parts of it I may accidentally cause the sprite to not hit solid background pixels, in which case results would be disastrous.
<br />
<br />So I decided to not go through the trouble of working around these limitations and making things overly complex. I can do water without mid-screen palette changes, even if it means making water levels slightly less colored and not being able to move the water up and down. I can have background bosses if the floor is just made of horizontal lines (like in early Mega Man games or in Cocoron), because the floor can move sideways along with the bosses without anyone noticing (and a few sprites can be used to make the floor less dull, like in the intro of Darkwing Duck), even though I can only move them horizontally.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Nadia</b> [ Fri Jan 22, 2010 3:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Ideally, games should be able to run even if not displaying anything, because the game world is completely modeled and the simulation can happen even if nothing is shown. Graphics should just be visual snapshots of moments of the simulation. What I mean is, the graphics engine of your game should be as independent from the game logic as possible.</div>
<br />
<br />
<br />Yes. It makes a lot of sense. The game logic can work on 1 color solid tiles both for background and sprites. Once the game logic is ready and working actual graphics can be put it to present the graphics in a better way.
<br />
<br />Could you direct me to a game code(preferably small) where this has been applied?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>UncleSporky</b> [ Fri Jan 22, 2010 4:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Nadia wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />Ideally, games should be able to run even if not displaying anything, because the game world is completely modeled and the simulation can happen even if nothing is shown. Graphics should just be visual snapshots of moments of the simulation. What I mean is, the graphics engine of your game should be as independent from the game logic as possible.</div><br /><br /><br />Yes. It makes a lot of sense. The game logic can work on 1 color solid tiles both for background and sprites. Once the game logic is ready and working actual graphics can be put it to present the graphics in a better way.<br /><br />Could you direct me to a game code(preferably small) where this has been applied?</div>
<br />I still don't know if you're quite understanding.  You don't work on "1 color solid tiles," except in a logical/thematical sense.  For example, you might program your logic to say, every tile with an ID less than 32 doesn't count as a collision (these are background tiles), and every tile with an ID greater that 32 counts as a collision.  Or you might compress the map's data down to bitfields, so that a 0 is air and a 1 is solid ground:
<br />
<br />00001111
<br />00000111
<br />11000000
<br />00000000
<br />10001111
<br />11111111
<br />
<br />You don't actually draw solid color tiles anywhere, you just treat your map as if it was.  Some games do store the graphical map and data as above in separate areas; the data is known as a collision map.  Collision data, solid ground data, is not drawn on the screen - it's just worked on by the engine.
<br />
<br />As for examples, nearly every platforming game does it this way, in one form or another.  I know that's not really much of an example...
<br />
<br />An easy way to start programming this way is to first get your game showing one screen with background graphics and everything, and one character sprite.  Lay out your map data in such a way that background stuff is all first in the PPU, and solid ground is last in the PPU.  Then whenever the character moves, you can compare the character's coordinates on the screen with the background tile you are on top of at the moment (this will probably require some conversions depending on how you store your map data).  If the sprite is on top of a solid tile, you don't allow that movement.
<br />
<br />Think of button presses as a "request" to move, so that you check your map data and say, hmm, if the character moved one pixel forward he would be intersecting solid ground - I guess I'll stop that movement.  This includes gravity.  If you add to the character's y value each frame to make them fall, check where the character would be if his y was increased by that amount, and if it's inside something, then roll back the change.  Put them back on their previous pixel coordinates.
<br />
<br />Does that make sense?  And yeah, it sounds complicated with lots of comparison, but you do have time in your engine to do it.  The trouble is when you've got 10 enemies that also "request" to move in a certain direction as well. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jan 22, 2010 5:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">My problem with the MMC3 is that [its scanline counter is really a sprite fetch counter, but] most of my projects have objects that can be drawn using either sprites or the background (like rings and monitors in my Sonic game), to compensate a bit for the sprites per scanline limit (it wouldn't be possible to have a row of 5 monitors if they were all sprites). To avoid wasting tiles, I want to put them on the BG side but use them as sprites too, but the extra fetches would break the scanline counter. I could even replicate the tiles if they weren't animated, but since they are (rings spin and monitors have static) it would be difficult, if not impossible, to update both sets of tiles in sync.</div>
<br />Here's a CHR ROM bank layout similar to that of SMB3 that allows sharing animated tiles between background and sprites: <ul><li>Bank 0 ($0000-$07FF): level-specific tiles </li><li>Bank 1 ($0800-$0FFF): animated tiles, with spritable ones in the second half </li><li>Bank 2 ($1000-$13FF): player sprites </li><li>Bank 3 ($1400-$17FF): level-specific sprites </li><li>Bank 4 ($1800-$1BFF): common sprites </li><li>Bank 5 ($1C00-$1FFF): same bank number as second half of bank 1 </li></ul>
<br />Still doesn't solve replication though.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>