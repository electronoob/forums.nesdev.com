<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Desired Compiler Features</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Desired Compiler Features</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=7276">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=7276</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Wed Dec 15, 2010 1:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Desired Compiler Features</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am currently planning a 6502 compiler for a few reasons:
<br />1) I'm kind of annoyed by different features or the lack thereof with different compilers.
<br />2) I'm in an IB CS class and have to write a program for my final so I figured I'd go with something I might actually use and like.
<br />
<br />On the note of the IB CS part, it is recommended that I <em>interview</em> others who have the potential to use it about what they would want in the program.
<br />
<br />So what features would you find highly desirable in a compiler. Right now I'm looking at a few features:
<br />
<br />1) Basic Optimizations (Kind of obvious but not all compilers do this *cough*NESASM*cough*)
<br />2) Block commenting (I do not know of any compilers that offer this)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 15, 2010 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are you making an "assembler", which compiles a dialect of assembly language to an object file, or a "compiler", which is generally understood to compile a higher-level language?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Wed Dec 15, 2010 2:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awsome!  I wrote a mini C compiler for my final college project too.
<br />
<br />I've often thought about writing a "NES Friendly" compiler for a "C-like" language.  I like cc65, but not for NES development.
<br />
<br />One feature that I would add, and I recommend to you, is the ability for your language to handle 8, 16, 24 and 32 bit signed and unsigned integers and fixed-point math.
<br />
<br />For example, your game's world coordinate system might be 2^16 pixels wide, but you want sub-pixel precision for object movement.  So you really want an unsigned 24-bit variable to store the X coordinate. (I'm ignoring multiple dimensions).  However, you want to store your object's velocities as single (signed) bytes, where the upper bit is the sign (two's complement of course), the next 4 bits are pixel magnitude, and lower 3 bits are the sub-pixel part.  So you want to write in code "X += V" and have the compiler produce the correct bit-shifts, clcs, adcs, etc...
<br />
<br />Same for multiplication.  You might want to express "X += V * sin(A)".  There should be a way to give the compiler a hint that sin(A) is in range -1 to +1 and that V*sin(A) will not need all of the bits that a less-intelligent compiler would emit code for.  (where 'sin' and 'cos' are LUTs).
<br />
<br />Anyway, just some thoughts of mine about a NES-friendly compiler feature.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Wed Dec 15, 2010 4:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Are you making an "assembler", which compiles a dialect of assembly language to an object file, or a "compiler", which is generally understood to compile a higher-level language?</div>
<br />
<br />I'm writing an assembler. Straight 6502 -&gt; ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Dec 15, 2010 4:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">Basic Optimizations (Kind of obvious but not all compilers do this *cough*NESASM*cough*)</div><br /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">I'm writing an assembler. Straight 6502 -&gt; ROM.</div>
<br />You got me a little confused then... What kind of optimizations should assemblers do? Assembly should be a straight conversion from mnemonics to binary code, and I don't know what kind of optimizations you think would be desirable during this process.
<br />
<br />For example, on the NES there are times when you write the same value to the same memory location twice in a row, such as when you are resetting the scroll to (0, 0):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$00<br />STA $2005<br />STA $2005</div>
<br />An assembler that "optimizes" code might think that it's stupid to write the same value to the same location twice if it doesn't know that this address is mapped to a register and that all writes are being watched and have a meaning. I'd be very pissed if my assembler filtered out one of the writes, as that would produce a very hard to find bug.
<br />
<br />I don't think there is any case I would want an assembler to monkey around with the code I wrote. The whole point of ASM is that you give the CPU precise instructions that should be followed to the letter, even if they don't always make sense.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Wed Dec 15, 2010 4:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I'd be very pissed if my assembler filtered out one of the writes, as that would produce a very hard to find bug.</div>
<br />
<br />Well to be fair, I could program the optimization to recognize necessary double writes, seemingly useless reads, etc.
<br />
<br />Also, I'm not necessarily saying the compiler will have carte blanche and just do what it will with your code. I'm thinking more like make an option to that outputs possible spots of code that are not needed or could be better written. Just as an example:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA Some_Address<br />CMP #$00<br />BEQ Another_Location</div><br /><br />The user would be prompted of this possible optimization:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA Some_Address<br />BEQ Another_Location</div>
<br />
<br />Finally, I really had in mind the whole zero-page issue with NESASM3 although I'm not sure if you would consider that an optimization or not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 15, 2010 4:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It sounds like someone's trying to make an assembler capable of <a href="http://en.wikipedia.org/wiki/Peephole_optimization" class="postlink">peephole optimizations</a>. Such an assembler would need a keyword to declare a symbol exempt from such optimization, just as <a href="http://publications.gbdirect.co.uk/c_book/chapter8/const_and_volatile.html" class="postlink">C does with 'volatile'</a>. It might look like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">PPUCTRL&nbsp; &nbsp;= volatile $2000<br />PPUMASK&nbsp; &nbsp;= volatile $2001<br />PPUSTATUS = volatile $2002<br />OAMADDR&nbsp; &nbsp;= volatile $2003<br />OAM_DMA&nbsp; &nbsp;= volatile $4014<br />PPUSCROLL = volatile $2005<br />PPUADDR&nbsp; &nbsp;= volatile $2006<br />PPUDATA&nbsp; &nbsp;= volatile $2007</div>
<br />
<br />As for eliminating CMP #$00 after an instruction that loads A, CMP #$00 has the side effect of always setting the carry flag like SEC, and Another_Location might expect the carry to be set for an SBC, ROL, or ROR.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Dec 15, 2010 4:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">Well to be fair, I could program the optimization to recognize necessary double writes, seemingly useless reads, etc.</div><br />I think this severely limits the usefulness of your assembler. You might have a good understanding of the NES, but how much do you know about the hundreds of other computers that have a 6502 in them? I am really glad I can use the same assembler to make NES programs and Atari 2600 programs, something I probably couldn't do with NESASM and its stupid platform-specific things such as 8KB banks.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just as an example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA Some_Address<br />CMP #$00<br />BEQ Another_Location</div><br /><br />The user would be prompted of this possible optimization:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA Some_Address<br />BEQ Another_Location</div></div><br />I think of this kind of thing as unnecessary hand-holding. If you are coding in assembly, you must have some confidence in what you are doing. These little details are things that people usually learn to fix pretty early on, and it's not like they cause programs to be terribly inefficient. I think it's not worth the trouble because you'll spend a lot of time making a program smart enough to identify these situations (and the result is never 100% smart, I'm sure there will be dumb or plain wrong suggestions sometimes) but once newbies get past the "writing stupid code" phase it will rarely present any advantage. You might be spending your time better if you focused on other features related to macros, memory management and things like that, in order to make your assembler a very solid and useful program.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Finally, I really had in mind the whole zero-page issue with NESASM3 although I'm not sure if you would consider that an optimization or not.</div>
<br />I guess this is an optimization after all. I'd rather have the option to do it one way or the other though, like using a command to pick the default option but still have the mans to select a specific addressing mode for individual instructions when more than one are possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Dec 15, 2010 4:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">As for eliminating CMP #$00 after an instruction that loads A, CMP #$00 has the side effect of always setting the carry flag like SEC, and Another_Location might expect the carry to be set for an SBC, ROL, or ROR.</div>
<br />This is the perfect example of how optimizations like these can go terribly wrong. Assembly code is often more than what it appears to be, and making a program that always makes smart and *safe* decisions is not a trivial task.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Dec 15, 2010 5:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But what if the instruction is in there for cycle-accuracy? Then it would be taking out a VERY key component. I'd rather have no optimizations, but thats just me. If you want optimized code, it shouldn't be the assembler that does it, it should be you. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 15, 2010 5:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you are coding in assembly, you must have some confidence in what you are doing.</div><br />Some people code in assembly because they have full confidence in what they are doing. (You're likely to agree with me that action games' graphics engines should be left to such people.) Others code in assembly because most of the available high-level languages are nowhere near efficient enough to make even a non-scrolling game. Perhaps an assembler with a peephole optimizer could be a useful step toward making NES programming more accessible, if only as a base on which to build a compiler.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think it's not worth the trouble because you'll spend a lot of time making a program smart enough to identify these situations</div><br />Whenever I compile a C program with <strong>gcc -Wall -O2</strong>, I thank the GCC team for making its compiler smart enough to find type errors for me and to optimize the RTL that the C translation front-end generates.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You might be spending your time better if you focused on other features related to macros, memory management and things like that</div>
<br />At this point, would it be worth it to make this project an extension to ca65 (zlib licensed 6502 assembler) instead of a rewrite from scratch?
<br />
<br />@3gengames: For a cycle-timed subroutine, one should be able to mark a block of code as not suitable for peephole optimizations, and the assembler won't apply them there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Wed Dec 15, 2010 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let me clarify, the compiler will not optimize the code for you, it will output something saying "Check out this line, you might want to do this".
<br />
<br />Now I'm assuming someone who is writing code to be cycle-accurate would know what they are doing and know this would break the code. 
<br />
<br />The optimization recommendations are also triggered via a switch when the program is called e.g. 'assembler game.asm -optimize'. It is by no means a feature that is run without the user's expressed desire, and even then it will tread lightly.
<br />
<br />That said, do you still think it is a bad idea and just plain needs to be scrapped. In that case, for something like zero-page, how would you go about doing that? Would you always do zero-page unless told not to or always do $0001 unless told to do $01?
<br />
<br />Also, are there any other things you would want in a compiler? Anything you think I should avoid?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Dec 15, 2010 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So we introduce two qualifiers 'absolute' and 'volatile', and we introduce a directive '.peephole'.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">somelabel = $F1<br />anotherlabel = absolute $F2<br />SNDCHN = volatile $4015<br /><br />; These generate zero page/direct page addressing mode<br />lda $F1<br />lda somelabel<br /><br />; These generate absolute addressing mode<br />lda absolute $F2<br />lda anotherlabel<br /><br />; This LDA/CMP won't be changed to LDA/SEC.<br />.peephole off<br />LDA Some_Address<br />CMP #$00<br />BEQ Another_Location<br />.peephole on<br />; But if peephole were turned on, the SEC can be slid<br />; upward until it meets up with another that sets C.<br /><br />; This LDA won't get removed, even though the values of<br />; A and flags NZ after the second LDA would ordinarily be<br />; the same as after the first LDA, because the label has the<br />; volatile qualifier.<br />lda #$0F&nbsp; ; instruction setting NZ flags<br />sta SNDCHN<br />lda SNDCHN<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>atarimike</b> [ Wed Dec 15, 2010 5:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As someone pointed out, you're talking about a assembler, not a compiler.
<br />
<br />There's already great assemblers out there. You might want to focus just on the optimizations - instead of generating code and warnings, just generate warnings. Much like lint. Then people could run their code through your tool, fix the warnings they cared about, and then assemble it with ca65 or something else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Wed Dec 15, 2010 5:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">atarimike wrote:</div><div class="quotecontent">As someone pointed out, you're talking about a assembler, not a compiler.<br /><br />There's already great assemblers out there. You might want to focus just on the optimizations - instead of generating code and warnings, just generate warnings. Much like lint. Then people could run their code through your tool, fix the warnings they cared about, and then assemble it with ca65 or something else.</div>
<br />
<br />I just wanted to point out that I am doing this for a class and there are certain criteria my application <strong>must</strong> meet. Something that just goes through and generates warnings does not sound like it would meet all of my criteria.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>