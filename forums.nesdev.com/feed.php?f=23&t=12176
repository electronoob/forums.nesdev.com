<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=23&amp;t=12176" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-01-28T07:46:50-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=23&amp;t=12176</id>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2015-01-28T07:46:50-07:00</updated>
<published>2015-01-28T07:46:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140053#p140053</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140053#p140053"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140053#p140053"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />most instructions that does not deal with memory and that does not branch should appear to be 1 cycle (including when there is bitshifts involved for example).<br /></div><br /><br />With ARM.5, you'll be doing anything greater than 1S cycle as soon as the 2nd operand is a register shifted by another register. Only shifts by immediates will avoid adding a 1I-cycle penalty, but shifting by a register rather than immediate is not something I do often. THUMB.4 has a similar rule about shifting. Essentially, any PSR transfer or ALU operation (THUMB and ARM) that doesn't shift by a register or use the PC as the destination register will have an execution time of 1S which is as fast as you're going to get in any memory location. THUMB.12 and THUMB.13 probably act a lot like specific cases of ADD/SUB, so that explains their 1S execution time as well.<br /><br />Before I forget, unexecuted code also takes 1S cycle. The GBA will skip them at the speed of light <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Wed Jan 28, 2015 7:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2015-01-28T01:11:55-07:00</updated>
<published>2015-01-28T01:11:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140048#p140048</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140048#p140048"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140048#p140048"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Unlike the SNES, ARM processors are apparently supposed to do every instruction using one cycle<br /></div><br />Thanks to the processor pipeline, if you are using a memory where the processor can fetch instructions every cycle (in GBA's case read IWRAM), then most instructions that does not deal with memory and that does not branch should appear to be 1 cycle (including when there is bitshifts involved for example).<br /><br />However the GBA is a bit werid because the processor will spend it's time waiting on memory most of it's time when executing from ROM or EWRAM.<br /><br />Also the reason the tutorial teaches ARM assembly is that assembly is most likely used for the speed critical parts of a game engine, which should be coded in ARM and lay in IWRAM for maximum speed. If you want to save memory however, executing from ROM in THUMB is definitely the choice. Executing THUMB in IWRAM will be faster than ROM, but slower than ARM, and saving a lot of memory, and it also a good options for parts of the programs which are not too badly affected by the restrictions of the THUMB instruction set.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Jan 28, 2015 1:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2015-01-27T22:31:54-07:00</updated>
<published>2015-01-27T22:31:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140038#p140038</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140038#p140038"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140038#p140038"><![CDATA[
On the GBA, I've found ARM instructions useful for three things: fixed-point multiplication (where you need to get a 64-bit result and then shift it down), IRQ handlers (which the BIOS calls in ARM mode), and signal processing inner loops executed in IWRAM, such as audio mixers. For everything else, Thumb is faster over the 16-bit bus of EWRAM, VRAM, and ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jan 27, 2015 10:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2015-01-27T22:27:59-07:00</updated>
<published>2015-01-27T22:27:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140036#p140036</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140036#p140036"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140036#p140036"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />Personally, I kind of like it simple. Trying to memorize 50,000 different instructions seems more like taking a quiz than doing something as a pastime. <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><br /></div><br /><br />Well, there are really only a handful of ARM and THUMB instructions. See GBATEK for a nice breakdown. You can even go further an lump some of them generically as Loading, Storing, Branching, etc. Trust me, before I started digging into the GBA's ARM CPU, I was equally overwhelmed. Just immerse yourself slowly, one piece at a time. I originally came from the GB's Z80-like CPU, so you can imagine what a shock ARM was to me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Tue Jan 27, 2015 10:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2015-01-27T22:05:25-07:00</updated>
<published>2015-01-27T22:05:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140029#p140029</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140029#p140029"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140029#p140029"><![CDATA[
<div class="quotetitle">Shonumi wrote:</div><div class="quotecontent"><br />I'm a &quot;THUMB everywhere&quot; kinda person.<br /></div>(Tangent) Many years ago I was doing some development on Nokia's N800 tablet, and someone went and recompiled the entire userland to use THUMB instead of ARM. Just the smaller instructions helped speed things up and reduce memory consumption by a couple percent both. With the GBA's comparatively narrow and high latency memory bus, I have to assume it'd be even more useful.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Jan 27, 2015 10:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-01-27T21:55:20-07:00</updated>
<published>2015-01-27T21:55:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140025#p140025</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140025#p140025"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140025#p140025"><![CDATA[
Personally, I kind of like it simple. Trying to memorize 50,000 different instructions seems more like taking a quiz than doing something as a pastime. <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Tue Jan 27, 2015 9:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2015-01-27T21:21:52-07:00</updated>
<published>2015-01-27T21:21:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140021#p140021</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140021#p140021"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=140021#p140021"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />Everyone going to hate me for asking such a stupid question on an old thread<br /></div><br /><br />Actually, keep the questions coming. For the past 6+ months, I've been doing GBA dev. Personally, I'd be more than happy to answer anything.<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />What is the difference between mov and ldr? It seems that with mov, you can't load a very specific number and have to add latter to get the number you want, while with ldr, no such restriction exists. What is the point of mov then?<br /></div><br /><br />MOV is just as it sounds, it moves a value into a register, however, the value is not from memory. In ARM, MOV's 2nd operand can be a register, a register shifted by another register, a register shifted by an immediate, an 8-bit immediate value, or a shifted 8-bit immediate value. Yes, it's a lot of options, but it explains why you can't load some of those &quot;specific&quot; values.<br /><br />Any value you want to put into a register through MOV must 1) already exist in another register, or 2) can be created using bit-shifts of existing registers or immediates. LDR does not have this restriction since it's just taking bytes from memory, and memory values are generally arbitrary; they can be whatever. <br /><br />To illustrate this, it's easy enough to use MOV to put the value 0x4000000 into R0. The assembler just specifies (when writing the actual ARM opcode), that the instruction will use an immediate value of 0x1 and perform a Rotate-Right shift of 6 (R0 is a 32-bit register, so the 1 wraps around to the top of the register, look up what ROR is if you're curious). On the other hand, putting something like 0x13371337 is not something you should tackle with MOV. <br /><br />So what's the point of MOV? It doesn't use a memory access like lidnariq said, although MOV <strong>can</strong> take as long as some LDR instructions if you specify the Program Counter (R15) as the 1st operand and use a register shifted by another register as the second operand. MOV is nice and quick for setting registers to equal one another, or for many of the GBA's key addresses in the memory map (0x5000000 for Palette VRAM, for example). I use it a lot to clear out registers by setting them to zero. MOV can also affect the CPSR (Current Program Status Register) e.g. it sets the flags based on the result of the operation. <br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />Unlike the SNES, ARM processors are apparently supposed to do every instruction using one cycle<br /></div><br /><br />Where did you hear that? At least for the GBA and DS, there are 4 different cycles. N-cycles (Non-sequential memory accesses), S-cycles (Sequential memory accesses), I-cycles (Internal cycles, generally the same length as 1 S-cycle) and C-cycles (Coprocessor stuff, applicable to the DS, but not the GBA). You can find instruction timings for the GBA's ARM7TDMI here -&gt; <!-- m --><a class="postlink" href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0234b/i102180.html">http://infocenter.arm.com/help/index.js ... 02180.html</a><!-- m --><br /><br />As you can see, only a few cases occupy a single type of cycle (generally 1S). A single instruction on the GBA can actually run for multiple CPU cycles depending on the Wait State (basically how long the CPU waits on a memory access). It is possible to write some code that runs exactly for 1Hz of the GBA's CPU clock, but most (at least any code that you want to do anything interesting with) will take more than one cycle. But when you see what MOV is in comparison to LDR, MOV is faster for what it is designed to do.<br /><br /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />Another thing, if THUMB is supposedly faster on the GBA than ARM, then why is just about every single tutorial/document regarding GBA development exclusively using ARM instead of THUMB?)<br /></div><br /><br />Probably because most people aren't worried about following the development practices used for commercial games (e.g. ARM instructions executed in RAM, THUMB for most other things). ROM space likely isn't an issue when testing/distribution is going to be done on flashcarts or emulators, so the fact that ARM opcodes are twice as long as THUMB ones is probably not a concern. People doing ARM ASM on the GBA may also prefer the flexibility that ARM opcodes provide over the simplicity of THUMB opcodes. Then there is the possibility that for the programs they are making, speed just isn't an issue. Lastly, some people just don't like switching between ARM and THUMB. I'm one of them, but I'm a &quot;THUMB everywhere&quot; kinda person.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Tue Jan 27, 2015 9:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2015-01-26T17:10:53-07:00</updated>
<published>2015-01-26T17:10:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=139959#p139959</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=139959#p139959"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=139959#p139959"><![CDATA[
LDR (&quot;LoaD Relative&quot;) takes an extra memory access cycle. <br />And the assembler is supposed to convert it to a MOV if possible.<br /><br />LDR actually stores your literal number somewhere else in memory, and instead stores a pointer to it, and tells it to load that value from memory.<br /><br />See also <!-- m --><a class="postlink" href="http://www.coranac.com/tonc/text/asm.htm">http://www.coranac.com/tonc/text/asm.htm</a><!-- m --> , scroll down to &quot;PC-Relative specials&quot;; or <!-- m --><a class="postlink" href="http://www.raspberrypi.org/forums/viewtopic.php?t=16528">http://www.raspberrypi.org/forums/viewtopic.php?t=16528</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jan 26, 2015 5:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2015-01-26T16:37:24-07:00</updated>
<published>2015-01-26T16:37:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=139954#p139954</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=139954#p139954"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=139954#p139954"><![CDATA[
Bump! Everyone going to hate me for asking such a stupid question on an old thread, but I'm not going to start a new one for something as simple as this. What is the difference between mov and ldr? It seems that with mov, you can't load a very specific number and have to add latter to get the number you want, while with ldr, no such restriction exists. What is the point of mov then? Unlike the SNES, ARM processors are apparently supposed to do every instruction using one cycle, so you would have wasted twice as much time using mov than ldr. I even took the code from earlier:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.text<br />main:<br />   mov r0, #0x4000000<br />   mov r1, #0x400<br />   add r1, r1, #3<br />   str r1, &#91;r0&#93;<br /><br />   mov r0, #0x6000000<br />   mov r1, #0xFF<br />   mov r2, #0x9600<br />loop1:<br />   strh r1, &#91;r0&#93;, #2<br />   subs r2, r2, #1<br />   bne loop1<br /><br />infin:<br />   b infin</div><br />and made it...<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.text<br />main:<br />   ldr r0, =#0x4000000<br />   ldr r1, =#0x403<br />   str r1, &#91;r0&#93;<br /><br />   ldr r0, =#0x6000000<br />   ldr r1, =#0xFF<br />   ldr r2, =##0x9600<br />loop1:<br />   strh r1, &#91;r0&#93;, #2<br />   subs r2, r2, #1<br />   bne loop1<br /><br />infin:<br />   b infin</div><br />And it works exactly the same way. (By the way, is there a good SNES Starterkit equivalent for the GBA? I think I saw the HAM Devkit thing was using C, and all of the other ones I've seen are too. Another thing, if THUMB is supposedly faster on the GBA than ARM, then why is just about every single tutorial/document regarding GBA development exclusively using ARM instead of THUMB?)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Mon Jan 26, 2015 4:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mikejmoffitt]]></name></author>
<updated>2015-01-04T11:22:53-07:00</updated>
<published>2015-01-04T11:22:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138661#p138661</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138661#p138661"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138661#p138661"><![CDATA[
Ah yeah, I remember the HAM devkit. I host a copy of the installer since ngine.de went dead a long time ago. I have a decent tutorial PDF for the hamlib, but it would be nice to dig through actual documentation. I haven't looked at that since 2005 or so!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5314">mikejmoffitt</a> — Sun Jan 04, 2015 11:22 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[43110]]></name></author>
<updated>2015-01-03T10:41:12-07:00</updated>
<published>2015-01-03T10:41:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138550#p138550</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138550#p138550"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138550#p138550"><![CDATA[
Whoa, Jonathan S. Harbour is the same author for a old Allegro game programming library book.<br /><br />Anyway, back when I did GBA programing, <a href="http://coranac.com/tonc/text/" class="postlink">tonc</a> and gbatek were the only things I used, and they helped a lot.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6385">43110</a> — Sat Jan 03, 2015 10:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[DoNotWant]]></name></author>
<updated>2015-01-01T02:30:08-07:00</updated>
<published>2015-01-01T02:30:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138395#p138395</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138395#p138395"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138395#p138395"><![CDATA[
Sweet, I started with GBA dev just 3 days ago!<br />Look for &quot;Programming the GBA&quot; by  Jonathan S. Harbour. It's online in PDF format in various places, google around for it a little bit. Learn C also. The only reason C would look strange compared to any kind of ASM, is because you just never learned anything about C. You should be able to learn enough C to get going with the GBA book in a weekend, focus on pointers and type casting. The last chapter in the book is about using inline ASM in your C code.<br /><br /><!-- m --><a class="postlink" href="http://jharbour.com/gba/ham-280-full-win32.zip">http://jharbour.com/gba/ham-280-full-win32.zip</a><!-- m --> Dev tool-chain<br /><!-- m --><a class="postlink" href="http://jharbour.com/gba/gba_files.zip">http://jharbour.com/gba/gba_files.zip</a><!-- m --> Example code from book<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5690">DoNotWant</a> — Thu Jan 01, 2015 2:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2014-12-28T13:06:17-07:00</updated>
<published>2014-12-28T13:06:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138201#p138201</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138201#p138201"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138201#p138201"><![CDATA[
First of all, you seem to know only 6502 and 65c816 assembly at the time of your first post. You should be aware that every family of processors use completely different mechanisms for their registers, instruction sets and notation of their instructions. Think of every family of processors using different assembly languages.<br /><br />The ARM family is extremely popular, unfortunately not thanks to the GBA but thanks to telephones and tablets (who I despise but that's another story). Thus it should be relatively easy to find ARM assembly language tutorials. You should learn ARM assembly from scratch even if you know 6502/65c816, because <em>it's a completely different language</em>. The ARM is also one of the most complex assembly language I know off, but one of the most elegant also. Don't worry it's still much simpler than pretty much any high-level languages to learn, though very difficult to master (I don't master it).<br /><br />THUMB is yet another different assembly language, but it's similar to ARM with features taken off. It was designed to be more compact for code density (ARM is extremely bad in this respect, as all instructions are 32-bit, with THUMB all instructions are 16-bit instead, but you need to use more instructions to do the same task).<br /><br />Something which is especially complex with ARM is the conditional status flag setting (-s suffix), the conditional execution of the instructions (-eq, etc.. suffix) and the stack management, along with the pseudo-instructions. The number of instructions themselves is quite small, but because of the pseudo-instructions and the suffixes, you might think there is way more instructions there actually is when seeing some example code.<br />There is also many different addressing modes.<br /><br />In addition to pseudo instructions, there is also the shorthand notations for instructions. For example add r1, r2 will be a shorthand for add r1, r1, r2, LSL #0.<br /><br />For instance, &quot;beq&quot; looks like it's the exact same as the 6502, but there is no &quot;beq&quot; instruction on ARM, it's a &quot;b&quot; instruction with &quot;-eq&quot; suffix. You can also do &quot;addeq&quot; or &quot;moveq&quot; for instance. With THUMB you will probably feel more at home because the instructions are more 6502 like, as the &quot;-s&quot; suffix is implied in all instructions and only branches are conditional. However, we are still limited to load-store architecture, we can't have an arbitrary constant in the code, and it's still only a compression of ARM assembly, which is more interesting to know to code really fast part in assembly.<br /><br />If you are serious about coding a large-sized GBA game you don't want to do it all in assembly. You should also learn a mid/high level language (it doesn't have to be C).<br />Unlike 6502 and it's derivative, the ARM processor is very &quot;C language friendly&quot;. Depending on the task you're doing, today's optimizers can be really good for normal code that doesn't do anything fancy, and therefore there is no significant loss in neither speed or code size when coding in C (or another mid level language). However, for specific tasks, such as bit shift or rotation, or additions with overflow checking in large loops, the C language can be terrible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Dec 28, 2014 1:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-12-28T11:56:07-07:00</updated>
<published>2014-12-28T11:56:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138200#p138200</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138200#p138200"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138200#p138200"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">The downside, though, is that you can't use arithmetic instructions directly with memory.<br /></div><br />could you give me an example as to what you mean?</div><br /><br />This is to do with load/store architecture. On something like the 6502 where there are few registers, it wouldn't have been sensible to require all your operands to be in a register. For that reason, a lot of the time the operand is memory. On an ARM, you have to load it into a register first. When trying to optimize ARM code, it can be helpful to chose an algorithm that minimizes loads and stores, e.g. try to do a chain of operations before writing a variable back to RAM, instead of writing it back after each step.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; A contains value to be added to<br />ADC $0341<br />; A contains result</div><br /><br />VS<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; r0 contains value to be added to<br />LDR r1, $0341<br />ADC r2, r1, r0<br />; r2 contains result</div><br /><br />As for whether assembly is faster than C, well, yes it is. As a human who knows more about what your code does than the compiler, you can produce better optimized code than that compiler. A human optimizer takes vastly more time to do its work than a compiler does, though, so in that respect it is slower to write.<br /><br />On some platforms (like 6502), the C compilers available may not have very strong optimizers, in which case the performance difference might be magnified greatly.<br /><br />The other thing to take into consideration is that usually only a small amount of the code in the game needs much optimization. Often the bulk of CPU time is spent in many repitions of a few specific tasks, and the rest of the code it won't make much of a difference if it's optimized. Spend your coding time wisely, and try not to waste a lot of effort optimizing things that aren't a perfomance problem. The most important part of optimization is measuring the time your code takes. This lets you know what should be optimized, and it also lets you know whether your optimization attempt was a success.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Dec 28, 2014 11:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-12-28T10:48:57-07:00</updated>
<published>2014-12-28T10:48:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138199#p138199</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138199#p138199"/>
<title type="html"><![CDATA[Re: GBA ASM]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12176&amp;p=138199#p138199"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Isn't this bullet point the exact same thing as 2?<br /></div><br />What &quot;2&quot;? Could you please use the quote markup if you're going to be referring to a particular point of an article? A Wikipedia article may change between the day you write your post and the day when someone else reads your post, possibly months or years later.</div><br />I meant the second bullet point I commented on, but you're right in that I really should have quoted it.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I wonder if part of the problem is that forum.gbadev.org has made itself invisible to external search engines to deter spambots from finding it, registering, and posting.<br /></div><br />I really wasn't aware that that website even had a forum.  <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> But by the look of the website, It looks like it's been long forgotten by most people in that it doesn't seem to have been updated in quite some time. (The &quot;hardware&quot; tab on the home page just loaded perpetually when I clicked it.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Dec 28, 2014 10:48 am</p><hr />
]]></content>
</entry>
</feed>