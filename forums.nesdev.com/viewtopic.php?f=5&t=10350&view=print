<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Stuff I don't like with object oriented programming...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Stuff I don't like with object oriented programming...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10350">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=10350</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 07, 2013 1:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Object Oriented programming is great when it comes to dealing with relatively complex datasets and structure as it makes it easy to keep organized and write clean code with less lines.<br /><br />HOWEVER, there is several things that are really f*** up and in all OO languages I've learn (C++, Java and Javascript so far), and I'm surprised nobody fixed this.<br /><br /><strong>1) Constructors.</strong><br /><br />In at least 90% of the cases it will look like this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">constructor(string name, int age, string address, boolean male)<br />{<br />&nbsp; this.name = name;<br />&nbsp; this.age = age;<br />&nbsp; this.address = address;<br />&nbsp; this.male = male;<br />}<br /></div><br />Honestly I feel so dumb every time I have to write something like this. Why can't this be done automatically ?<br />Like if you could do :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Person = new person(name = 'John', age = '99', address = 'somewhere', male = 'true');</div><br />and it would automatically call the constructor with correct parameters. In addition, you could change the order and it won't screw things up.<br /><br /><br /><strong>2) calling methods related to an object is poorly worded</strong><br /><br />It's common to do things like this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; String str = &quot;Hello guys what's up ?&quot;;<br />&nbsp; &#91;...&#93;<br />&nbsp; str = str.substring(3, 4);<br /></div><br /><br />Why didn't anyone invent a .= operator so you could just write<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; str .= substring(3, 4);<br /></div><br />This would look way cleaner. In this case it's allright because &quot;str&quot; is a short name, but if you do this with a complex name with already several &quot;.&quot; in them (which is a common thing to do), it'll really make things more readable, as in :<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;group.person.get(i).name .= substring(3, 4);<br /></div><br /><br /><strong>3) Getters and setters</strong><br /><br />Those are not compulsory thanks god but apparently for some obscure reason they have been included in &quot;good practice&quot; by computer science teachers, so you'll encounter them as soon as you'll have to deal with someone else's code. What's the point, honneslty ? Why write :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; person.get(name)<br /></div><br />When you could instead do :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;person.name<br /></div><br /><br />Personally I'd say it's not good practice...<br /><br /><strong>4) Function can only return one thing</strong><br /><br />It's not restricted to OO but to high level languages in general. For some reason computer scientists used to decide that two kinds of subroutines exists, &quot;procedures&quot; which doesn't return anything, and &quot;function&quot; which returns a value.<br /><br />What if I want to return multiple things ? Well the answer is : &quot;You should make an object with those two values and return it&quot;. In other words &quot;go to hell, declare a new class and a new constructor just for this, at least 10-15 lines of code, when it could be done in 1 if the language was better made&quot;.<br /><br />So sorry for complaining here but I have to share my anger with someone.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Wed Aug 07, 2013 2:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Getters/setters exist for the sake of encapsulation.  Doing it the way you suggest would mean that all encapsulated data items in a class are public and thus accessible to *anyone* at *any* time.  What if you wanted to change the way &quot;name&quot; is accessed such that when it's set you also store a CRC of it?  Easy to do if you have a setName() method, because that will be the only way &quot;name&quot; could be set by anyone that is using your class.  If you've got users of your class all over the place and they all access &quot;name&quot; directly that's a pain in the ass to update.<br /><br />With regard to the suggested .= operator...I have no idea what you think is better about that?  Clearly str = str.substring() means &quot;string str is assigned the substring of itself&quot;.  What does str .= substr() mean?  &quot;string str has the method substr called on itself and the result assigned to itself?&quot;  Seems to me the first method is way more clear.  It is not equivalent to any of the other shortcut operators...those are mathematical shortcuts [num *= 5].<br /><br />Again with constructors it may be the case that 90% of them benignly assign data values directly from what they're passed.  But you're ignoring the fact that constructors can also do more complicated things with the information they're passed.  Assuming that all constructors do the former and thus could somehow be simplified by having the compiler do it automatically would just lead to programmers confusion.  If you *write* the constructor for the object you *know* the object is constructed the way you intended.  If you rely on the compiler to do it for you you're likely to want to blame the compiler for &quot;doing it wrong&quot;.<br /><br />I guess I see your function returns argument as the only valid point.  But then again you can return whatever the hell you want from any function by simply passing values by reference in the parameter list.   <img src="./images/smilies/icon_cool.gif" alt="8-)" title="Cool" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Wed Aug 07, 2013 2:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Seems to me you are learning OO <strong>languages</strong> without having a solid background of OO <strong>concepts</strong>.  That is like learning a whole bunch of words of French, German, Spanish, etc., but not learning anything about how sentences are formed in those languages.  I'd suggest reading a good OO methodology book and not so much focusing on the semantics of any given language.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ε-δ</b> [ Wed Aug 07, 2013 3:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1) I kind of agree, but:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Like if you could do :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Person = new person(name = 'John', age = '99', address = 'somewhere', male = 'true');<br /></div></div><br />This would be really annoying because you would have to <br />a) Know variable names to create an object<br />b) Write more text every time you create oan bject<br />c) Change all constructor calls if you change variable name or usage in the class<br />I would prefer simple object constructor calls over long constructor code.<br /><br />2) It seems that your problem isn't the language, but the class interface.<br />You can always create your own class inherited from the string that has function<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;str.substring_store_self(3, 4) </div><br /><br />3) Getters and setters prevent the direct modification of object variables. Sometimes you don't just want to set variable value, but also do something else in the constructor.<br />For example you can have multiple overloaded setters for the same property that take different types or different anmount of parameters.<br /><br />4) In some languages it's very easy to return multiple values. For example in python you return values in a tuple:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">def foo(): return (1, 'bar', 0.0434)<br />i, s, f = foo()<br /></div><br /><br />If such feature is not available you can always use pointers or references. I don't think it really makes a difference<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">float foo(int *i, const char **s)<br />{<br />&nbsp; *i = 1;<br />&nbsp; *s = &quot;bar&quot;;<br />&nbsp; return 0.0434;<br />}<br /><br />int main()<br />{<br />&nbsp; int i; <br />&nbsp; const char *s;<br />&nbsp; float f = foo(&amp;i, &amp;s);<br />&nbsp; return 0;<br />}<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Aug 07, 2013 6:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />C# made it look like this:<br /><br />var person = new Person() { name = &quot;Fred&quot;, age = -1 };

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Aug 07, 2013 6:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Like if you could do :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Person = new person(name = 'John', age = '99', address = 'somewhere', male = 'true');<br /></div><br />and it would automatically call the constructor with correct parameters. In addition, you could change the order and it won't screw things up.<br /></div><br /><br />Some languages have automatic initialization of object members. For example, in Scala you could do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">class Person(var name: String, age: Int, address: String, male: Boolean) {<br />&nbsp; &nbsp; def present() = println(name + &quot; is &quot; + age + &quot; years old and lives at &quot; + address)<br />}<br /><br />val donald = new Person(&quot;Donald Duck&quot;, 79, &quot;1113 Quack Street, Duckburg&quot;, true)<br />donald.present()<br /></div><br /><br />Go also has this kind of functionality, and I believe Dart does as well (and probably some other languages).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) Function can only return one thing</div><br />The Go language lets you specify multiple return values, each with their own type. For example, you could do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">type Person struct {<br />&nbsp; &nbsp; FirstName string<br />&nbsp; &nbsp; LastName string<br />&nbsp; &nbsp; Age int<br />}<br /><br />&nbsp; &nbsp; <br />func (person *Person) GetInfo() (fullName string, age int) {<br />&nbsp; &nbsp; fullName = strings.Join(&#91;&#93;string{person.FirstName, person.LastName}, &quot; &quot;)<br />&nbsp; &nbsp; age = person.Age<br />&nbsp; &nbsp; return<br />}<br /><br /><br />func main() {<br />&nbsp; &nbsp; donald := &amp;Person{&quot;Donald&quot;, &quot;Duck&quot;, 79}<br />&nbsp; &nbsp; name, age := donald.GetInfo()<br />&nbsp; &nbsp; fmt.Printf(&quot;%s is %d years old\n&quot;, name, age)<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; age += 1<br />&nbsp; &nbsp; name, _ = donald.GetInfo()&nbsp; // Ignore the 2nd return value<br />&nbsp; &nbsp; fmt.Printf(&quot;%s is now %d years old!\n&quot;, name, age)<br />}<br /></div><br />In many other languages you can return multiple values using a tuple/struct/list.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 07, 2013 6:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Constructors and setters allow the class to ensure that the values passed to them are sane and throw an exception if not. Getters allow the class to change from a value being stored in a field to it being computed or retrieved from some other service.<br /><br />In statically typed languages such as C++, the operator you call .= would work only for &quot;factory&quot; methods, meaning a method of a class that returns a new object of the same class. Apart from operations on immutable strings, those don't occur often enough to warrant a syntactic sugar.<br /><br />Python allows named arguments to constructors and other methods as well as returning a tuple (small dynamically typed array) of values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 7:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><strong>1.</strong> I think writing the trivial constructor in one place is better than having to write a=1, b=2, c=3 etc. for every single instance of the object. I'm more concerned with the thing I have to write many times (instances) than the thing I have to write only once (constructor).<br /><br />Consider these forms of initialization:<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Bob x = Bob&#40;1,2,3&#41;;</tt><br />vs.<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Bob x = Bob&#40;a=1,b=2,c=3&#41;;</tt><br />vs.<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Bob x;<br />x.a=1;<br />x.b=2;<br />x.c=3;</tt><br /><br />There are some languages where a class is basically implemented as a dictionary of members (JavaScript, Python, etc.) where the kind of initialization you mention might be a common way to do things.<br /><br />By the way, there are some interesting alternatives to named parameters available in C++: <a href="http://www.parashift.com/c++-faq/named-parameter-idiom.html" class="postlink">http://www.parashift.com/c++-faq/named-parameter-idiom.html</a><br /><br />Generally, if I want to initialize a class several different ways, I'm happy to write a constructor for each of those methods so that my code can be explicit about what gets a default value, etc. If you want an all-named-parameter init that means everything should have a default value (or be safe to leave uninitialized). Sometimes when I have multple constructors, I will create a protected/private Init member function that does the actual construction work, so that the various constructors can just call Init with various default parameters, and various things passed as arguments.<br /><br /><strong>3.</strong> You can make writing getters and setters slightly trivial in C++ by writing a few macros for it, like you could make at <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">READ_WRITE&#40;int,x&#41;</tt> that declares the variable and creates consistently named inline get and set functions for it.<br /><br />Other languages have built in shorthand for getters and setters, like C#.<br /><br /><strong>4.</strong> In C++ there a couple of easy ways to return multiple values:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">std::tuple&lt;int,char,char&gt; myfunc()<br />{<br />&nbsp; &nbsp;return std::tuple&lt;int,char,char&gt;(1,2,3);<br />}</div><br />or<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct T { int a; char b; char c; };<br />T myfunc2()<br />{<br />&nbsp; &nbsp;T r = {1,2,3};<br />&nbsp; &nbsp;return r;<br />}</div><br /><br />Alternatively T could be defined as: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">class T { public: int a; char b; char c; };</tt>. The only difference between a class and a struct is that structs default to public.<br /><br />Some other languages have slightly more succinct built in features for it (e.g. Python tuples).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Aug 07, 2013 7:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><strong>4.</strong> In C++ there a couple of easy ways to return multiple values:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">std::tuple&lt;int,char,char&gt; myfunc()<br />{<br />&nbsp; &nbsp;return std::tuple&lt;int,char,char&gt;(1,2,3);<br />}</div></div><br />Ah, C++11 (aka C++0x), that's why I hadn't heard about std::tuple it until now, I've wanted it for ages.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 7:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, sorry I didn't realize that was C++11. It's been available in MSVC since 2008 (without C++11 extensions enabled) so I thought it was just C++. The standard C++ library does have the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">pair</tt> template at least, which can be used for two return values. Otherwise you need the structure declaration, I suppose.<br /><br />The other thing I forgot to mention is that C99 actually had a designated initializer paradigm for structures:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct D { int a; int b; int c; };<br />struct D d { .a=1, .b=2, .c=3 };</div><br /><br />Unfortunately this is one of those C99 features that Microsoft never cared to implement, so I've never been able to use it professionally.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Wed Aug 07, 2013 7:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ε-δ wrote:</div><div class="quotecontent">1) I kind of agree, but:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Like if you could do :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Person = new person(name = 'John', age = '99', address = 'somewhere', male = 'true');<br /></div></div><br />This would be really annoying because you would have to <br />a) Know variable names to create an object<br />b) Write more text every time you create oan bject<br />c) Change all constructor calls if you change variable name or usage in the class<br />I would prefer simple object constructor calls over long constructor code.<br /></div><br /><br />Going to agree that this is annoying and wordy, but *also* going to point out that this is basically how Objective-C works:<div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />// Here is my function:<br /><br />-(void)doAFunction:(int)intParam1 intParameterTwo:(int)insideFunctionName theName:(NSString*)shootMeNow<br />{<br />&nbsp; NSLog(@&quot;Here are two numbers: %d %d&quot;,intParam1,insideFunctionName);<br />&nbsp; NSLog(@&quot;Such long wordy names like that aren't really uncommon in Obective-C world, %@.&quot;,shootMeNow);<br />}<br /><br />// Here is how I'd use it<br />&#91;self doAFunction:0 intParameterTwo:25 theName:@&quot;Denzel&quot;&#93;;<br />// This is also okay<br />&#91;self doAFunction:13 theName:@&quot;Marley&quot; intParameterTwo:37 &#93;;<br /><br />// The output for both:<br />Here are two numbers, 0 25<br />Such long wordy names like that aren't really uncommon in Objective-C world, Denzel.<br /><br />Here are two numbers, 13 37<br />Such long wordy names like that aren't really uncommon in Objective-C world, Marley.<br /></div><br />the advantage is that you can do them in any order, but still... I'm much more of a fan of compact, neat code with sufficient comments than huge, verbose code with little to no comments.<br />Sorry, this has been on my mind - I've been doing a lot of Objective C at work. While we watch Xcode produce huge complicated binaries from this convoluted stuff and a simple game grows in tens of megabytes from big resources, I like to bring up the daily reminder that Super Mario Bros is less than 64KB...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Aug 07, 2013 8:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OO is about explicit contracts between user and provider. Encapsulation is part of this, preventing the user from relying on implementation details. This allows the provider to change <em>how</em> it goes about providing, without breaking any user code. Constructors and accessors are both part of this, narrowing what the user can do to only what fits with the abstract model, rather than all the additional things that can be done with a particular implementation. If you've got lots of users, breaking their code is a significant problem. If they have full access to all your variables and internal functions, all bets are off when you change the implementation. But if your language enforces your decisions about what they are allowed to access, it's <em>much</em> easier. Developing a good sense of what needs to be accessible to others takes time. It will also always be inconvenient to some users in the short-term over having full access. If in a particular case the benefits this provides are greater than the costs, it naturally shouldn't be used.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 07, 2013 8:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />About encapsulation, I perfectly get your point. This is great if you're writing a library.<br /><br />HOWEVER if you're just writing something for yourself, no library, and nobody else is supposed to use your code without having full access to it (in which case he's in his right to modify it as his liking), then I see no point of having such strict encapsulation, other than &quot;because it's good practice&quot;.<br /><br />I hardly ever use private variables/functions or getters/setters, because, well, screw it, I don't think it's useful for what I'm doing. I see where they come from, but well it's not worth the trouble if you're not writing a library.<br /><br />As for return multiple values I know there is many workarounds, and I use them. The most obvious is use of an object which contains fields that are your multiple return values, the other alternative is to modify the value of global variables as a return. Both have their pros and cons, and depending on the context I'll use one or the others.<br /><br />Using global variables is no a very good practice, especially if it's just for this. It should normally be reserved for variables that represent the overall state of the program, stuff like that (so many CS teachers just says global variables are &quot;evil&quot; and shouldn't be ever used, but I'd say that it's because they really understood them...).<br /><br />Using a custom class for &quot;pair&quot; or &quot;tuplet&quot; is somewhat elegant, BUT it's still much more writing :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">function()<br />{<br />&nbsp; &#91;...&#93;<br />&nbsp; return new pair&lt;something, something&gt; (c, d);<br />}<br />(a, b) = function();<br /></div><br />as opposed to<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">function()<br />{<br />&nbsp; &#91;...&#93;<br />&nbsp; return c, d;<br />}<br />Pair&lt;something, something&gt; = function();<br />a = pair.getFirst();<br />b = pair.getSecond();<br /></div><br /><br />And it's good to know Python supports multiple returns, I've never learnt python but it sounds like this language at least does something right I'd have liked to see in more languages <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><br />As for constructors :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This would be really annoying because you would have to <br />a) Know variable names to create an object<br />b) Write more text every time you create oan bject<br />c) Change all constructor calls if you change variable name or usage in the class<br />I would prefer simple object constructor calls over long constructor code.</div><br />It is very annoying to have to know the order of often 5+ parameters anyways.<br />With &quot;my&quot; way of doing it, it's more writing in the main program, and you have to know the names of the variables instead of the order. In both cases it's necessary to refer to the constructor.<br /><br />Also, every-time I write a constructor I feel like a mentally handicapped dumbass.<br /><br />Finally something I'd say, is that it's also annoying how hard it is to get an exact deep copy of an object, without any reference copy, so that any changes to the new object doesn't affect the original one. Usually you have to do this by hand, because the language doesn't support it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Aug 07, 2013 9:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As a programmer, I find myself spending a lot more time thinking than coding. For this reason, I've never really thought little syntax details like this were very important. I would say that assembly is the most verbose by far, followed by Java, and then maybe C++ with OOP. Python or C can be relatively terse.<br /><br />Of the verbose languages, only assembly actually bothers me. It's not really the verbosity of assembly, though, it's the lack of tools to ensure code correctness. It's a lot of typing, yes, but the problem is that it's error prone. The only thing that's checked at assembly time is correct syntax, and that's beyond trivial to fix. Logical errors, type errors, etc. are much harder to diagnose in assembly than any other language.<br /><br />The only times in my professional or recreational coding experience that I thought typing was a significant bottleneck was in these two situations:<br /><br />1. Refactoring code. Here there is no thinking about the algorithm or anything like that to be done, I'm literally just processing text. Understanding regex can help a lot in these situations, but there's always stuff that can't be automated very well.<br /><br />2. Copying/boilerplating stuff in a rush to meet a deadline. I generally consider it the wrong way to structure my code when I'm copy-pasting a lot, but there are situations due to poor existing structure, etc. where it's going to be the quickest way to get something done in the short term.<br /><br />Other than these two cases, language verbosity has never been much of an issue to me. Maybe if I was a much slower typist...? I dunno.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 07, 2013 9:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Stuff I don't like with object oriented programming...</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem is not the typing speed, but rather that I want my code to be clear so I understand what I was doing when I come back into it 1 year (or more) later.<br /><br />In this regard, assembly is terrible, even if you are very generous with comments.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>