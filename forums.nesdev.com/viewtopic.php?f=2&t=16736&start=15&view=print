<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Checksum for savestates</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Checksum for savestates</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16736">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16736</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hackfresh</b> [ Fri Nov 24, 2017 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tecmo super bowl uses a simple two byte checksum. If the current checksum doesn't match the saved checksum it wipes the entire SRAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Fri Nov 24, 2017 3:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">I love these screens since they show up so rarely.</div><br />I've never even heard of those screens. Got some examples?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Fri Nov 24, 2017 3:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">calima wrote:</div><div class="quotecontent">The cc65 runtime includes crc32 and adler32. Adler32 is faster.</div><br />I read that Adler32 has some weaknesses in that it's pretty easy to have the same hash value if only a few bytes are changed around.<br /><br />CRC32 in cc65 requires 4 x 256 bytes in RAM. I wouldn't want to use an implementation that needs so many RAM values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Nov 24, 2017 4:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want a <em>cryptographic</em> hash, neither CRC32 nor adler32 are suitable.<br /><br />If you don't want a cryptographic hash, you don't need to worry about byte shuffling. That isn't the kind of failure mode that will come from save RAM corruption.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Nov 24, 2017 4:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">I read that Adler32 has some weaknesses in that it's pretty easy to have the same hash value if only a few bytes are changed around.</div><br />That's a <em>cryptographic</em> weakness, i.e. it's easy for an attacker to modify the data without changing the hash. That's a different problem than just detecting errors in transmission.<br /><br />You don't need to worry about attacks, though, users can already modify stuff easily in this case.<br /><br />Your problem is just error detection, which Adler32 is actually designed for and relatively good at.<br /><br /><br />Edit: LOL ninja'd by lidnariq making the exact same distinction i did.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Fri Nov 24, 2017 4:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't need a cryptographic hash or any protection against hackers, only one where even a small difference already produces a completely different result to reliably spot corrupted data.<br /><br />Regarding adler32, Wikipedia says:<br /><div class="quotetitle">https://en.wikipedia.org/wiki/Adler-32 wrote:</div><div class="quotecontent">Adler-32 has a weakness for short messages with few hundred bytes, because the checksums for these messages have a poor coverage of the 32 available bits.</div><br />The German Wikipedia mentions this:<br />If byte n of the input is incremented by k, byte n + 1 is decremented by 2 x k and Byte n + 2 is incremented by k, then s1 (the sum of all bytes) and s2 (the sum of all in-between values of s1) remain unchanged.<br /><br />So, doesn't this description mean that if three bytes next to each other are corrupted in this specific way, that the hash value still remains the same?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Nov 24, 2017 4:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You're describing a complex enough process that it can basically be assumed to not happen by chance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Nov 24, 2017 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When wikipedia says it's &quot;weak&quot; it's a relative comparison against similar 32-bit checksums.<br /><br />e.g. if you were comparing it against pretty much any 16-bit checksum it's rather strong.<br /><br />For protection against errors in an NES save game, a 32-bit checksum is almost absurdly overpowered. 8 bits is probably already more than sufficient?<br /><br />Think about it this way, if you had some sort of ideal hash (e.g. truly &quot;cryptographically secure&quot;), an 8-bit hash should give you a 1 in 256 chance of detecting an error. That's pretty good already, isn't it? Like the &quot;weakness&quot; of Adler32 is sort of like comparing a 1 in 4 billion chance to a 1 in 1 billion chance; the question is whether the result is still good <em>enough</em>, the magnitudes matter here. (...and the only result of failing to identify the error is just a save game with some wrong data in it, rather than just being destroyed. Not really a big deal?)<br /><br />Here's some info on just how &quot;weak&quot; that weakness isn't:<br /><a href="https://guru.multimedia.cx/crc32-vs-adler32/" class="postlink">https://guru.multimedia.cx/crc32-vs-adler32/</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Gilbert</b> [ Fri Nov 24, 2017 10:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Savestates is an emulator-only thing.</div></div><br />Not really. There were devices, namely some late Game Copier models, that you can save the state of games to FDS disks, to be restored for later play. It's correct that battery save files normally don't contain (nearly) complete dumps of the system's states though, so indeed the terms have to be used carefully to avoid confusion. This applies to many later consoles using memory cards too.<br /><br />I think in systems where storage is less of a concern, for example, PCs, some games probably dump (nearly) everything to their save files (so these files are indeed savestates), but for console games, especially on those retro systems, it's usually not cost effective to have the hardware or memory chips to hold the relatively huge states of games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Fri Nov 24, 2017 10:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah those devices are what I meant by special hardware. Modern flashcarts may also allow saving the state of the machine to a certain extent.<br />Western PC RPGs tend to allow you to store any item in any drawer or chest in the game and remembers them when saving, but even for that it may be enough if it only needs to remember changes I guess.<br /><br /><div class="quotetitle">Sumez wrote:</div><div class="quotecontent"><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">I love these screens since they show up so rarely.</div><br />I've never even heard of those screens. Got some examples?</div>Probably about any Dragon Quest game that uses a battery for saving (I and II uses passwords, although English Dragon Warrior I and II might have the screen). Joy Mecha Fight is another one I remember (when I bought it the battery was already old), I just tried it in an emulator by manually corrupting the save in a hex editor. It's just a text box that tells you the data corrupted in Japanese and some sound plays.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Nov 24, 2017 10:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />CRC16 should be good enough for practical error detection in most cases I can think of, and <a href="http://6502.org/source/integers/crc-more.html" class="postlink">Greg Cook's tableless CRC16</a> is fast enough (66 cycles per byte).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>yqqwe</b> [ Mon May 07, 2018 7:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i have made an adler32 online hash generator and the link is  <a href="https://hash.onlinetoolsland.com/adler-32/" class="postlink">https://hash.onlinetoolsland.com/adler-32/</a>,if you want to try it ,that will be good

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon May 07, 2018 7:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What's the license on that calculation script? (Or should I call Hormel?)<br /><br />In any case, I took this opportunity to write an (untested) implementation of Adler-32 based on the <a href="https://en.wikipedia.org/wiki/Adler-32" class="postlink">description at Wikipedia</a>. I will warn that it's weak for messages smaller than about 1000 bytes because the sum won't reach the wrap at the prime modulus 65521.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MOD_ADLER = 65521<br />.proc adler32<br />src = locals+$00<br />negcountlo = locals+$02<br />negcounthi = locals+$03<br />a_lo = locals+$04<br />a_hi = locals+$05<br />b_lo = locals+$06<br />b_hi = locals+$07<br /><br />&nbsp; lda #1<br />&nbsp; sta a_lo<br />&nbsp; lsr a<br />&nbsp; sta a_hi<br />&nbsp; sta b_lo<br />&nbsp; sta b_hi<br />&nbsp; ldy src<br />&nbsp; sta src<br />&nbsp; byteloop:<br />&nbsp; &nbsp; ; a += *src++<br />&nbsp; &nbsp; lda (src),y<br />&nbsp; &nbsp; iny<br />&nbsp; &nbsp; bne :+<br />&nbsp; &nbsp; &nbsp; inc src+1<br />&nbsp; &nbsp; :<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; adc a_lo<br />&nbsp; &nbsp; sta a_lo<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; adc a_hi<br />&nbsp; &nbsp; sta a_hi<br /><br />&nbsp; &nbsp; ; if (a &gt;= 65521) a -= 65521<br />&nbsp; &nbsp; bcs a_overflow<br />&nbsp; &nbsp; lda a_lo<br />&nbsp; &nbsp; adc #65536-MOD_ADLER<br />&nbsp; &nbsp; lda a_hi<br />&nbsp; &nbsp; adc #0<br />&nbsp; &nbsp; bcc a_no_overflow<br />&nbsp; &nbsp; a_overflow:<br />&nbsp; &nbsp; &nbsp; ; carry always set<br />&nbsp; &nbsp; &nbsp; lda a_lo<br />&nbsp; &nbsp; &nbsp; adc #65536-MOD_ADLER-1&nbsp; ; compensate for carry<br />&nbsp; &nbsp; &nbsp; sta a_lo<br />&nbsp; &nbsp; &nbsp; lda a_hi<br />&nbsp; &nbsp; &nbsp; adc #0<br />&nbsp; &nbsp; &nbsp; sta a_hi<br />&nbsp; &nbsp; &nbsp; clc<br />&nbsp; &nbsp; a_no_overflow:<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; b += a<br />&nbsp; &nbsp; lda b_lo<br />&nbsp; &nbsp; adc a_lo<br />&nbsp; &nbsp; sta b_lo<br />&nbsp; &nbsp; lda b_hi<br />&nbsp; &nbsp; adc a_hi<br />&nbsp; &nbsp; sta b_hi<br /><br />&nbsp; &nbsp; ; if (b &gt;= 65521) b -= 65521<br />&nbsp; &nbsp; bcs b_overflow<br />&nbsp; &nbsp; lda b_lo<br />&nbsp; &nbsp; adc #65536-MOD_ADLER<br />&nbsp; &nbsp; lda b_hi<br />&nbsp; &nbsp; adc #0<br />&nbsp; &nbsp; bcc b_no_overflow<br />&nbsp; &nbsp; b_overflow:<br />&nbsp; &nbsp; &nbsp; ; carry always set<br />&nbsp; &nbsp; &nbsp; lda b_lo<br />&nbsp; &nbsp; &nbsp; adc #65536-MOD_ADLER-1&nbsp; ; compensate for carry<br />&nbsp; &nbsp; &nbsp; sta b_lo<br />&nbsp; &nbsp; &nbsp; lda b_hi<br />&nbsp; &nbsp; &nbsp; adc #0<br />&nbsp; &nbsp; &nbsp; sta b_hi<br />&nbsp; &nbsp; b_no_overflow:<br /><br />&nbsp; &nbsp; inc negcountlo<br />&nbsp; &nbsp; bne byteloop<br />&nbsp; &nbsp; inc negcounthi<br />&nbsp; &nbsp; bne byteloop<br /><br />&nbsp; sty src<br />&nbsp; rts<br />.endproc<br /></div><br /><br />EDIT: The difference between this and the <a href="https://github.com/cc65/cc65/blob/master/libsrc/zlib/adler32.s" class="postlink">version bundled with cc65</a> is that 1. mine uses the fact that 65536-65521 fits into 8 bits, and 2. mine doesn't call a bunch of stack manipulation in the inner loop.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Mon May 07, 2018 11:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Checksum for savestates</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tepples, you of all people should have remembered the posts above <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>