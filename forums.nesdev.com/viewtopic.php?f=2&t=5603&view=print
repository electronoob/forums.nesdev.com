<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Communicating with the Miracle Piano</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Communicating with the Miracle Piano</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5603">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5603</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sir_cuitous</b> [ Sat Oct 03, 2009 12:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Communicating with the Miracle Piano</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />(Irrelevant?) background: I'm working on a project that makes NES peripherals and accessories USB plug-and-play capable out-of-the-box. Basically you plug your joypad / Power Pad / Power Glove / U-Force / Piano / whatever into one of the four ports on this little USB box, then bam, you instantly have a fully functioning and configured HID device available to your OS. It automagically detects what exactly you just plugged in (!), and it shows up on your computer in the appropriate device location, fully named and everything. The working prototype is sitting right here on a solderless breadboard, happily blinking away right next to my keyboard.
<br />
<br />Anyway, I have come to the point where I'm looking at my old (NES-flavored) Miracle Piano Teaching System in an attempt to incorporate support in my code. The problem is that I can find very little information on the matter; see <a href="http://nesdev.com/bbs/viewtopic.php?t=44" class="postlink">here</a> and <a href="http://nesdev.com/bbs/viewtopic.php?t=300" class="postlink">here</a>. I'm attempting to reverse-engineer the details myself, but it's exceedingly difficult because: a.) my project itself lives on a rickety solderless breadboard, b.) my logic analyzer consists of the very basic 1 MHz 3-channel probe that comes built into the PICkit 2 (which is also extremely difficult to use for this purpose, hooking rigid little wires on small metal contacts inside an open NES chassis), and 3.) I'm starting to run into some time constraints / pressure to focus on other areas.
<br />
<br />In a nutshell, I need to figure out how to at least read the MIDI data from the Miracle Piano in the same fashion as a genuine NES. Sending data back to it would be icing. If nothing else I've confirmed for myself that the bundled DB25 -&gt; NES adapter plug only connects pins to clock, latch, and the D0 line. I assume it transmits and receives standard MIDI messages with the NES, and it's obviously bidirectional, so it remains to be seen what, if anything, this means special for the NES hardware. I just simply don't have the equipment I need to tackle this problem...
<br />
<br />Yeah, so now that I'm reflecting on what it is that I'm actually attempting here, it's not surprising that there's so little Miracle info around. Figures I find literally the sole remaining niche purpose to hook up a really old keyboard using an even older interface when a completely perfect standard interface is literally built-in right next to it... haha. It makes zero sense, in every conceivable situation, <em>except</em> the one where I'm trying to provide universal NES interface support.
<br />
<br />If anyone has hints, suggestions, or can point me in a better direction it would be super duper appreciated. And the practical upshot is that if I can get this done, then at the very least schematics and firmware and/or code for this bad boy will be available to the NESing community at large before long. <img src="./images/smilies/icon_surprised.gif" alt=":o" title="Surprised" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Oct 03, 2009 2:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was curious about that adapter cable.  I found one (without the piano), and I could see a PCB in there through the little hole.
<br />
<br />Seems like there'd be no better way to know than to disassemble the Miracle Piano NES ROM.  Depends on how the code was written, there need not be more than a few subroutines in there to handle init/send/receive at least.
<br />
<br />MIDI is asynchronous, so if it's using the NES clock line it has to be hooked up to some extra hardware in the piano or adapter cable with a synchronous interface.
<br />
<br />If it's asychronous, of course then you may need to use real-time code to handle it, or an actual UART.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Sat Oct 03, 2009 10:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have the SNES Miracle Piano, and it has jacks in the back where you can hook it up to a regular MIDI-capable computer, via the standard MIDI cables.
<br />
<br />It's not GM though, so the instruments are all in a different order than they otherwise would be on a GM device, but none the less, the piano behaves just like any normal MIDI device would, at least when you hook it up to a computer. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Oct 03, 2009 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If it's not GM compatible, maybe it is MT-32, the other popular standard back then ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Oct 03, 2009 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Miracle uses MIDI on channels 0-7, just with its own set of instruments.  I can scan the page from the manual if you want to know what they are.  It does not use any standard drum kits.
<br />As far as I know, pressing B on player 1's controller tricks the Miracle NES game into endlessly polling for MIDI input events.  My guess to how input works is it checks if it reads a 1 as the first bit (which is the B button on a normal controller), then reads 7 bits, then checks if it reads a 1 again.  Or something like that.  I think it sends strobes between polling.  Output seems to work by just outputting 0s or 1s repeatedly in the strobe bit when writing to the controller 1 address.
<br />
<br />This is just what I got from messing around in FCEU though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sir_cuitous</b> [ Sat Oct 03, 2009 5:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I was curious about that adapter cable.  I found one (without the piano), and I could see a PCB in there through the little hole.</div><br /><br />Hmm, well how do you like that... I've had that thing for all these years and never noticed / bothered to look. Actually I'd look right this minute except that whole mess is balancing precariously in the corner and I don't want to disturb it until I'm ready to unhook it all. I'll check later.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">Seems like there'd be no better way to know than to disassemble the Miracle Piano NES ROM.  Depends on how the code was written, there need not be more than a few subroutines in there to handle init/send/receive at least.</div><br /><br />Wow, where'd my brain go for two days. I initially thought I'd just try to observe the signals, figuring it would save some time over tracking down a couple routines ... And I got so wrapped up that I failed to realize I probably could have at least made a little dent disassembling it by now. I'll get crackin'.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">...if it's using the NES clock line...</div>
<br />
<br />It's either using the clock line asynchronously or I'm observing very bad sample aliasing. Or both. In any case it seems to be operating very different from a joypad read cycle, or even those employed by the U-Force or the Power Glove (the Miracle data looks nothing like the standard "read one NES serial byte" protocol).
<br />
<br />For reference, here's a quick sample of a read from a standard NES joypad:
<br />
<br />Key: red = latch line, green = clock line, blue = serial data (D0), 12.5us/maj. div.
<br />
<br /><img src="http://i81.photobucket.com/albums/j207/decaheximal/joypad.png" alt="Image" />
<br />
<br />And here's some data going between my Miracle and NES:
<br />
<br /><img src="http://i81.photobucket.com/albums/j207/decaheximal/piano.png" alt="Image" />
<br />
<br />Obviously it uses the three lines in interesting ways. The best theory I came up with was that those three groups of pulses line up with maybe three average MIDI bytes. But that's a shot in the dark. So, I'll see about how much progress I can make disassembling the ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sir_cuitous</b> [ Sat Oct 03, 2009 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you everybody very much for the replies!
<br />
<br />Alrighty... as Drag and Dwedit said, the Miracle does in fact use the MIDI protocol, but it has its own custom patch assignments. Drag pointed out that all Miracle Pianos have standard MIDI DIN jacks in the back, which I guess brings up the point that even though this thing communicates with MIDI devices, I don't actually know with certainty that it communicates raw unprocessed MIDI data to/from the NES. The Miracle Port in the back (where the PC/SNES/Genesis/NES cable goes) also sends out MIDI data, at the very least, for the PC software... But on different pins from the ones that connect up to the NES cable. So I guess I need to consider that possibility.
<br />
<br />I'm not sure how I still have the manual, and in such good condition to boot, but:
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Miracle can be connected via MIDI (Musical Instrument Digital Interface) to a standalone or computer-driven sequencer that can digitally record your performances, as well as letting you edit, merge and play back these performances through the Miracle. Through MIDI, the Miracle can also be used as a keyboard input device for another synthesizer.</div><br /><br />and<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Miracle Keyboard always sends MIDI information on MIDI Channel 1 and receives on MIDI channels 1 through 8.</div>
<br />
<br />However... That information implies nothing about what kind of data goes to/from the NES, so. Again, I need to keep that in mind.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 04, 2009 5:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />"MIDI channel" is the low nibble of the "status" byte of each MIDI message that's assigned to a channel. For example, channel 4 would use message $93 kk vv for start note k with velocity v, $A3 kk vv for pressure of a held note, $B3 cc vv for controller value, $C3 ii for instrument change, $D3 vv for pressure of all held notes on this channel, and $E3 ll hh to set pitch bend to h*128+l, where $2000 is center. Channel 6 would use $95, $A5, $B5, $C5, $D5, and $E5 instead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sun Oct 04, 2009 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />it would be awesome to make an adapter to plug general midi devices into a NES

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Oct 04, 2009 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">frantik wrote:</div><div class="quotecontent">it would be awesome to make an adapter to plug general midi devices into a NES</div>
<br />
<br />The early prototype of MidiNES used the controller port, but later moved all the hardware to the cartridge.
<br />
<br />At the most basic level all you'd need for the controller port is a PIC (w/ UART) and an opto-isolator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Sun Oct 04, 2009 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />let me rephrase that
<br />
<br />it would be awesome if Memblers made an adapter to plug general midi devices into a NES
<br />
<br /><img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />midines seems cool but i want to write my own software to use with midi, like a 7bit pcm rompler or drum machine.. or even a midi sequencer would be awesome. 
<br />
<br /> i always thought the miracle plugged midi right into a controller port, but i guess not <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LoneKiltedNinja</b> [ Fri Aug 22, 2014 6:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Communicating with the Miracle Piano</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This thread... it does not fill me with confidence...<br />I finally got my hands on a Miracle (sans power supply, serial cable, and foot pedal, but all of those are trivially replaced).  I have hoped perhaps against hope that the serial comm would be as simple as latching and then reading a series of 1 bit per key.<br /><br />I still hold out a vague glimmer that sir_cuitous was simply seeing some bad aliasing on account of really really rapid polling, otherwise this thing may be even more of a monster than the Glove was to crack &gt;_&lt;<br /><br />Still, between the graphs and Dwedit's observation about polling, there may be some hope here.  And as I did on the Glove, if I can get the Miracle working and patched into some actual homebrew on an actual NES, I may be able to sidestep some of the overspecification and overgeneralization that other sources came up with testing black-box-style with raw leads against raw traces.<br /><br />If I succeed at anything, I'll be sure to leave notes here.<br /><br /><s>Edit:  In fact, just some hunches to throw off the bat:<br /><br />Think about the functions of the lines.  The only communication from the NES to the Miracle must occur in some combination of the red and green lines; the only return communication can occur on the blue line.<br /><br />Further, the green signal is a very specific animal- it can&#39;t be held high or low manually, it can merely be pulsed by a register read.  So its value as a communication tool is inherently limited.<br /><br />But the blue data line value is completely irrelevant except for when a clock pulse occurs- the NES game code has no way of accessing its value save through the clock strobe.  This very cleanly narrows our search space for meaning: when the clock triggers, the game must know what it&#39;s looking for.<br /><br />So.  I see two possible interpretations &#40;apart from the aliasing theory&#41;:<br /><br />A&#41; the clock, latch, and data lines are actually being used in a reasonable traditional manner, but in slow motion.  It only pulses a clock infrequently because either the game code or the piano hardware can only prepare data infrequently.  But if communication was observed over, say, the length of a musical beat rather than the typical length of a frame, that might be enough to transmit a meaningful number of keys at one key per clock pulse.  The software, after all, only needs enough information to determine whether someone hit a particular note in a particular span of wallclock time.<br /><br />B&#41; It&#39;s a time-sensitive signal.  It&#39;s a fixed blobby implicit time sensitive signal.  And eff you very much, Software Toolworks and your blobby horse-drawn 5.25&quot; floppies.  Basically, from the point the latch falls, the piano starts an internal timer and waits for the latch to rise, with different meanings for different delays.  And the protocol is to dial the correct number on a rotary phone using the latch line &#40;and a gratuitous amount of throwaway instructions for sub-second timing on the NES&#41; to invoke certain functions on the piano.  One can only hope that the simplest form of the protocol is 1 latch drop followed by a series of invisible time windows in which popping a clock will return the value of a specific key, and re-twiddling the latch will tell the keyboard to play a note on its own.  Because if it&#39;s anything more complex than that, we&#39;re throwing darts blindfolded.<br /><br />I&#39;ll spend a bit more time musing over the traces, but if anyone else can capture and post similar records of the lines and what the game is doing at the time &#40;I don&#39;t have sufficient equipment to do so&#41;, it would greatly help me narrow my hypotheses.<br /><br />Edit 2: The lack of the dog barking in the night<br />Anyone else notice how in the familiar use case, the clock line is steady low and pulsed high, whereas in the Miracle case, it <em>appears</em> to be held high and pulsed low?  That is immensely intriguing to me, and potentially profoundly significant.  I&#39;ll need to go back over my notes, but I&#39;m pretty sure my assertion in the first edit is correct: you as the NES programmer don&#39;t get to directly control the clock line.  Even if you want to.  You can directly write the latch, and you can directly read the data, but the clock is an autonomous entity which occurs automagically when you read the data.  So if the default state of the clock is low and it only pulses high automatically on a read, I see no explanation for the Miracle trace other than aliasing error.  The NES is flipping that line like mad, one can only hope in the process of reading 49 keys and 1 pedal per frame &#40;plus possible status bits&#41;, and the capture was merely hitting it high every time save when some amount of processing caused a slight delay.</s><br /><br />Edit 3: disregard the above.  Looks like sir_cuitous was on the right track from the start, and Dwedit's already solved the problem.  First post, second link - <!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?t=300">viewtopic.php?t=300</a><!-- l --><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Figured it out... At least output anyway.<br />First the game writes 00 to $4016 for the start bit<br />Then does this 8 times:<br />* Writes a byte out to $4016, only the least significant bit is received<br />* Dummy Read from $4016 for some reason (why?)<br />Writes a 00 to $4016 for the stop bit<br /><br />The bit order (after the start bit) is least significant bit first. The 8 sent bits form a byte.<br /><br />The data itself is pure MIDI. Looks like it could be easily integrated into any emulator. It will probably need a special patch map, since the Miracle does not use general midi instruments.<br /><br />I'll bet MIDI input is very similar, start bit, 8 data bits, stop bit.</div><br />So that's where I'll begin, and I can test whether reading is just as simple.  I suspect it is, modulo suspicions already voiced that the first read will return 1 if data is available and 0 otherwise.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LoneKiltedNinja</b> [ Sat Aug 23, 2014 10:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Communicating with the Miracle Piano</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One quick unrelated update: as tangentially suggested in <!-- m --><a class="postlink" href="http://www.racketboy.com/forum/viewtopic.php?f=52&amp;t=36962">http://www.racketboy.com/forum/viewtopi ... 52&amp;t=36962</a><!-- m --> , I have found that the enercell / RadioShack part number 273-0328 AT&amp;T multi-voltage 9.10.2/13/13VAC 800mA adapter is sufficient for the Miracle, and it's barrel is even the right size.  If you're making your own, the M-size barrel seems to be a good fit, although after finding the AT&amp;T adapter, I didn't actually need to test an a-la-carte configuration.<br /><br />I still would not as a general recommendation advise using a lower-amperage adapter than specified- put too much current load on a given rated voltage potential and the adapter will have a hard time maintaining that voltage potential.  But since this one advertises sustaining a top-end 13V potential at 0.8A for a total of 10.4W power load, it's not beyond reason to think it can hold 10.4W total at its 12V setting, equivalent to 867mA current draw which, allowing for safety tolerances on both ends, seems to be &quot;close enough&quot; to 1000mA; also keeping in mind that the original supply and power architecture anticipated a worst-case driving not just the piano guts but likely the headphones, speakers, serial port and MIDI-out all at once.  I would not try running this thing at full load on less than a 1000mA (12W) supply, and I'll definitely look for a more robust solution if the AT&amp;T adapter starts heating up or cutting out, but fingers-crossed it will hold for just running the piano, headphones, and the chipset driving the NES connector pins (which in grand theory ought not to be a power draw at all since there's already a power line from the NES that any connecting hardware would normally be expected to get its logic-power from.  Indeed, if the piano is trying to push its own voltage and ground to the NES, I could see some ugly current leakage going on that could damage both systems <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> )

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LoneKiltedNinja</b> [ Tue Aug 26, 2014 5:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Communicating with the Miracle Piano</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Update: upon conversing with one of the original development engineers, more light is shed:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The interface to the Nintendo uses a clocked shift register.  There are three signals, two are generated by the Nintendo itself (clock and load), and the third is data input to the Nintendo.<br />Normally, these signals make it easy to read the button controller using very simple hardware consisting of a shift register IC and some switches.  As I remember, MIDI data was sent to the Nintendo without much, if any, modification, just conversion from the asynchronous serial format to this synchronous clocked format.  MIDI data FROM the Nintendo to the Miracle was more complicated, and I believe it required use of the clock and load signals to carry data in the reverse direction.  This required special software on both sides.<br /><br />The Miracle data connector (a DB-25 connector), has both a standard serial MIDI interface, as well as the three-wire Nintendo interface on different pins.  If you're interested, I still have schematics for the Miracle showing the connections.  The data is standard MIDI over the serial port, though the baud rate may be non-MIDI standard when communicating to a PC serial port, which doesn't support the standard MIDI baud rate.</div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Miracle schematics<br />[attached]/MIRB1_0.pdf<br />[attached]/MIRB1_1.pdf<br /><br />Nintendo Weird Box schematic and source code<br />[attached]/midinin.pdf<br />[attached]/NINT3.ASM<br /><br />The power supply does not have to be AC, as I recall.  There is a bridge rectifier on the Miracle board to convert the AC to DC, and DC (or either polarity) would work as well.</div><br /><br />I'll probably get these re-hosed on my own site by the time I have any of my own work to show, but if you have better hosting locations, by all means grab copies.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="gensmall"><b>File comment:</b> NWB source &amp; schematics</span><br />
		
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=1915">Archive.zip</a> [107.29 KiB]
			</span><br />
			<span class="gensmall">Downloaded 35 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Aug 26, 2014 7:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Communicating with the Miracle Piano</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm far more amused by that 8031schematic than I probably should be. Kinda delightful seeing how minimally they'd used it: the entire data bus (/RD) just can read from the funny latch ('595./G) that's used to receive data from the NES. The 8031's port 1 and one bit of port 3 is used to transmit 9-bit symbols to the NES, while the '393 automatically counts bits (and the '595 remembers them) so that the 8031can know when the NES has shifted in 8 bits.<br /><br />It looks like in the keyboard itself there should be another 8032 microcontroller—fortunately both the 8031 and 8032 are ROMless versions, so they can't be hiding anything extra outside of the two 27C 'PROMs. Might be interesting to take a look at that.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>