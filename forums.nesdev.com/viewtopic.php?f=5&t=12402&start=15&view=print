<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Playing with pointers?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Playing with pointers?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12402">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=12402</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Feb 20, 2015 1:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@mikejmoffitt -- code there looks fine/correct for what you're wanting to do (initialise all members to zero), and it works solely due to the types of variables in the struct.  In general I recommend people actually initialise them all in a loop explicitly, e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">t.x = 0</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">t.anim = &#39;\0&#39;</tt>, etc. (I got into doing it the &quot;long way&quot; as a habit, particularly when working with nested structures, linked lists, or things like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char **</tt>).  The downside is that if you extend the struct members and forget to update the relevant intialisation routine, the consequences can be dire (e.g. spending an entire day to track down &quot;weird random behaviour&quot; caused by a missing line in the init routine); rainwarrior covered this caveat quite well.  :-)<br /><br />And that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;*t&#41;</tt> can be turned into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;struct test&#41;</tt>, which (to me) is a lot clearer.  Maybe even <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;test&#41;</tt> (not sure if that's going to refer to the struct itself or the tag though).<br /><br />Purely preference thing: I'm not big on the whole &quot;make an alias using a typedef with tag name&quot; thing.  I much rather prefer saying <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">struct blah { int x; };</tt> followed by declaration via <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">struct blah *varname</tt>.  My reasoning is that I prefer seeing the word <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">struct</tt> in the declaration, so I say &quot;oh it's a struct&quot;.  Just <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">blah *varname</tt> doesn't tell me what <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">blah</tt> effectively is, or how to use it.  Some people prepend <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">s_</tt> or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">_s</tt> (respectively) to something to indicate that, but eh whatever.  And if you use <a href="http://en.wikipedia.org/wiki/Struct_%28C_programming_language%29#Declaration" class="postlink">tags or aliases</a>, don't append <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">_t</tt> like some people do -- that conflicts with POSIX naming convention and is highly shunned.<br /><br />I'm kind of sore about typedefs in general and I'd rather not get into that (I had a 2 hour discussion a couple days ago with a friend about it and I'm still exhausted).  I've never liked C's &quot;ambiguous types&quot; (in the sense you don't truly know what size you're getting) and really appreciate things like inttypes.h declarations.  I'm &quot;fine&quot; with some typedefs, but things like time_t, off_t, gid_t, pid_t, mode_t, etc. can sod off -- there's no 100% reliable way to use them when intermixed with other types (you're forced to force-cast which is EXTREMELY dangerous, especially with time_t and off_t), or printf() them reliably (again, force-casting is needed).  size_t and intmax_t are the exceptions.  <strong>And FUCK ptrdiff_t</strong> -- I refuse to even look into what THAT mess is about (aforementioned friend laughed and said something to the effect of &quot;if you ever wanna kill yourself, go read about why that was created&quot;).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Feb 20, 2015 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />God if we're going to talk about all the flaws of the C language, followed by all the flaws of the common practice of C coders, we're never going to end the discussion.<br /><br />ptrdiff_t is a signed size_t I believe. I don't really see the point either, but if you ever do pointer arithmetic without knowing the direction you're going (something you normally should never do) then it could pehaps be useful.<br /><br />The fact you can't even know the size of types like short, int and long when coding is awful so I never use these, exept int which I use if I don't care about the size. Otherwise I always use uint16_t, uint32_t, etc... so at least I'm sure what I am doing. This should have been how the language was made. There is no reason you'd ever use an integer type other than &quot;int&quot; without knowing it's size, because either you don't care about the size and want it to be efficient, or you care about the size. But you never want something to be &quot;smaller than int&quot; without caring about it's size, this just make no sense.<br /><br />Don't even get me started on the floating point types. Why support &quot;float&quot;, &quot;double&quot; and &quot;long double&quot; when just one of these is enough to do anything ? Native support for fixed point types would certainly be more helpful than mulitple floating point types.<br /><br />As for int, whoever at ANSI decided int should never be smaller than 16-bit just ruined the perspective of developing (somewhat) efficient standard C application on 8-bits CPUs, thank you, sucker. The norm really suck in regards to integer size. Also the choice of defaulting to signed math is horrible. The only good thing is that they leave int to be the size that is most supported natively (for 16-bits or more CPUs).<br /><br />As for what I meant before, it's just if you have :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static uint8_t my_big_array&#91;0x10000&#93;;<br /></div><br />Then your resulting executable is going to be 64k larger than if you were doing it with malloc() and free(), because &quot;my_big_array&quot; is present in the executable, even without an initializer. Don't ask my why, it just is like that with gcc, using the default options with optimisations and stripping. If there is an option to disable this then I'd like to be informed about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikejmoffitt</b> [ Fri Feb 20, 2015 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">@mikejmoffitt -- code there looks fine/correct for what you're wanting to do (initialise all members to zero), and it works solely due to the types of variables in the struct.  In general I recommend people actually initialise them all in a loop explicitly, e.g. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">t.x = 0</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">t.anim = &#39;\0&#39;</tt>, etc. (I got into doing it the &quot;long way&quot; as a habit, particularly when working with nested structures, linked lists, or things like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char **</tt>).  The downside is that if you extend the struct members and forget to update the relevant intialisation routine, the consequences can be dire (e.g. spending an entire day to track down &quot;weird random behaviour&quot; caused by a missing line in the init routine); rainwarrior covered this caveat quite well.  <img src="./images/smilies/icon_smile.gif" alt=":-)" title="Smile" /></div><br /><br />For more complicated nested structures, I've been using memset to carpet-bomb the whole thing to zeroes then doing my more specific fields afterwards. <br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">And that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;*t&#41;</tt> can be turned into <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;struct test&#41;</tt>, which (to me) is a lot clearer.  Maybe even <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;test&#41;</tt> (not sure if that's going to refer to the struct itself or the tag though).<br /></div><br /><br />the &quot;typedef struct test test;&quot; allows just using test in all of these situations, so sizeof(test) works fine. I preferred sizeof(*t) simply because if I change what t is later on, I do not need to re-specify which type of struct it is. However I do agree that putting the struct type in there is clearer.<br /><br /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">I'm kind of sore about typedefs in general and I'd rather not get into that (I had a 2 hour discussion a couple days ago with a friend about it and I'm still exhausted).  I've never liked C's &quot;ambiguous types&quot; (in the sense you don't truly know what size you're getting) and really appreciate things like inttypes.h declarations.  </div><br />I wish I had been aware of inttypes.h earlier - I've always included my own exptypes.h in every project I do, containing this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#ifndef EXPTYPES_H<br />#define EXPTYPES_H<br />#define unsigned char u8<br />#define unsigned short u16<br />#define unsigned int u32<br />#define unsigned long u64<br />#define signed char s8<br />#define signed short s16<br />#define signed int s32<br />#define signed long s64<br />#endif<br /></div><br /><br />Of course, this is pretty dependent on the compiler and the platform in question. <br /><br />C has many flaws that aren't worth a lengthy discussion on, but I don't think they are so destructive as many other language's &quot;features&quot;. Common practices is an entirely different, much larger beast that isn't worth discussing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Feb 20, 2015 3:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">As for what I meant before, it's just if you have :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">static uint8_t my_big_array&#91;0x10000&#93;;<br /></div><br />Then your resulting executable is going to be 64k larger than if you were doing it with malloc() and free(), because &quot;my_big_array&quot; is present in the executable, even without an initializer. Don't ask my why, it just is like that with gcc, using the default options with optimisations and stripping. If there is an option to disable this then I'd like to be informed about it.</div><br />In this situation, the resulting executable <strong>will not</strong> be 64KBytes larger.  Instead (speaking about UNIX here because not sure how this works on Windows), the linker will generate necessary bits in the symbol table in the BSS segment, so that when ld.so starts up the executable, the loader &quot;pre-allocates&quot; 64KB of memory for that array.<br /><br />Now, if you said <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">static uint8_t my_big_array[0x10000] = {1, 2, 3}</tt> -- meaning you are pre-populating values into the array -- then that <strong>would</strong> increase the size of the executable by 64KBytes, because the array ends up pre-allocated in the DATA segment.<br /><br />If you pre-allocate with just a value of zero and nothing else, then that puts the symbol into the BSS segment (yes really), thus does not increase the size of the executable.  I'm not sure if memset() or equivalent gets called under the hood or what exactly happens here (I'm sure I can find out, I just haven't spent the time looking).  Edit: see bottom of post.<br /><br />Proof of my statements:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 1 #include &lt;stdio.h&gt;<br />&nbsp; 2 #include &lt;inttypes.h&gt;<br />&nbsp; 3<br />&nbsp; 4 int main(int argc, char *argv&#91;&#93;)<br />&nbsp; 5 {<br />&nbsp; 6&nbsp; &nbsp;static uint8_t my_big_array&#91;0x10000&#93;;<br />&nbsp; 7<br />&nbsp; 8&nbsp; &nbsp;return 0;<br />&nbsp; 9 }<br /><br />$ gcc -Wall -o x x.c<br />x.c: In function 'main':<br />x.c:6: warning: unused variable 'my_big_array'<br /><br />$ ls -l x<br />-rwx------&nbsp; &nbsp; 1 jdc&nbsp; &nbsp; &nbsp; &nbsp;users&nbsp; &nbsp; &nbsp;6482 Feb 20 13:44 x<br /><br />$ objdump -t x | grep my_big_array<br />00000000006008a0 l&nbsp; &nbsp; &nbsp;O .bss&nbsp; &nbsp;0000000000010000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my_big_array.2359<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 1 #include &lt;stdio.h&gt;<br />&nbsp; 2 #include &lt;inttypes.h&gt;<br />&nbsp; 3<br />&nbsp; 4 int main(int argc, char *argv&#91;&#93;)<br />&nbsp; 5 {<br />&nbsp; 6&nbsp; &nbsp;static uint8_t my_big_array&#91;0x10000&#93; = {1, 2, 3};<br />&nbsp; 7<br />&nbsp; 8&nbsp; &nbsp;return 0;<br />&nbsp; 9 }<br /><br />$ gcc -Wall -o x x.c<br />x.c: In function 'main':<br />x.c:6: warning: unused variable 'my_big_array'<br /><br />$ ls -l x<br />-rwx------&nbsp; &nbsp; 1 jdc&nbsp; &nbsp; &nbsp; &nbsp;users&nbsp; &nbsp; &nbsp;72026 Feb 20 13:48 x<br /><br />$ objdump -t x | grep my_big_array<br />0000000000600880 l&nbsp; &nbsp; &nbsp;O .data&nbsp; 0000000000010000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my_big_array.2359<br /></div><br /><br />Edit: Looks like gcc has a flag to change this behaviour.  gcc defaults to sticking pre-assigned-to-0 variables in BSS:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp;-fno-zero-initialized-in-bss<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;If the target supports a BSS section, GCC by default puts variables<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;that are initialized to zero into BSS.&nbsp; This can save space in the<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resulting code.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;This option turns off this behavior because some programs explic-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;itly rely on variables going to the data section.&nbsp; E.g., so that<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the resulting executable can find the beginning of that section<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and/or make assumptions based on that.<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The default is -fzero-initialized-in-bss.<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 20, 2015 5:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">fzero</div><br />Awesome.<br /><br />Whether or not it will make executable size optimizations based on various properties (static, const, initialized, etc.) is up to the compiler, it's not defined in the spec, I don't think. I've never seen a compiler put an uninitialized static array in the executable (and I wouldn't expect it), but it's technically allowed, just like GCC is apparently allowed to optimize away 0-fill initializations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Fri Feb 20, 2015 6:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah maybe it's purely a compiler thing.  I've never seen it myself either, but then again it's absolutely possible Bregalad is using a different set of tools and compilers than I have.  Sticking everything into the DATA segment would surprise (and upset!) me too.<br /><br />Aside from very specific things in C99, I really don't know or follow PL (programming language) standards.  I probably should, but my brain feels like it's already full.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 20, 2015 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The C standard specifies only the behavior of a conforming program. The compiler may produce any executable with that behavior. If a compiler wants to encode the data segment with RLE to store zero-filled arrays more efficiently, and then include startup code that decompresses the data segment, let it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 20, 2015 9:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Of course, there's the other <em>other</em> caveat that compilers aren't fully compliant to the spec either. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 20, 2015 9:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you can demonstrate that a compiler does not conform, post your test case to the compiler publisher's bug tracker.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Feb 20, 2015 10:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's not a bug if it's on purpose. There are all sorts of reasons it might be practical to go against spec when you're building a compiler, not the least of which that it's more work to implement more features.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat Feb 21, 2015 4:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey... back on the topic... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Just say if the following code is OK or not.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//example<br />unsigned short buffer&#91;0x2000&#93;;<br />unsigned short tmp&#91;0x2000&#93;;<br /><br />//...<br /><br />memcpy(tmp, buffer, 0x2000*sizeof(unsigned short));</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Feb 21, 2015 4:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Of course it is ok, what part of it aren't you sure of ?<br /><br />Personally I'd use uint16_t instead of unsigned short (and 2 instead of sizeof(unsigned short)), just in case some compiler has the weird idea to use another size for &quot;short&quot;, which is permitted by the standard.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Sat Feb 21, 2015 4:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">Hey... back on the topic... :)<br /><br />Just say if the following code is OK or not.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">//example<br />unsigned short buffer&#91;0x2000&#93;;<br />unsigned short tmp&#91;0x2000&#93;;<br /><br />//...<br /><br />memcpy(tmp, buffer, 0x2000*sizeof(unsigned short));</div></div><br /><br />Code is incorrect.  memcpy() destination and source (first 2 arguments) takes a pointer.  What you've declared aren't pointers to arrays, but the actual arrays themselves, thus you need to give memcpy the address of those arrays.  So that should be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">memcpy&#40;&amp;tmp, &amp;buffer, ...&#41;</tt>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat Feb 21, 2015 5:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Fine, fine... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> Interesting about <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">uint16_t</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">unsigned short</tt>, I didn't know such difference. ^_^;;<br /><br />@koitsu<br />Yup, my point was about the data size. Must be in bytes, correct? So, 0x4000 would be copied (assuming <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sizeof&#40;unsigned short&#41; = 2</tt>).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Feb 21, 2015 5:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Playing with pointers?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Code is incorrect.  memcpy() destination and source (first 2 arguments) takes a pointer.  What you've declared aren't pointers to arrays, but the actual arrays themselves, thus you need to give memcpy the address of those arrays.  So that should be <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">memcpy&#40;&amp;tmp, &amp;buffer, ...&#41;</tt></div><br />Doesn't the compiler decay automatically the array in a pointer in such case ? It's like when you pass a function as an argument it is automatically decayed into a function pointer, although I agree it's clearer to use the '&amp;' sign to explicit the fact you're passing a pointer to the array/function.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>