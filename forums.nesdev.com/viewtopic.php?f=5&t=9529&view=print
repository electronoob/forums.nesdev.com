<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - DirectDraw -&gt; Direct3D</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">DirectDraw -&gt; Direct3D</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9529">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9529</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Nov 28, 2012 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />DirectDraw is dead and I am totally rewriting my emulator and I have no experience whatsoever in programming D3D. What I need to do is what I did when I used DirectDraw; i.e. create a surface, fill a buffer with the pixels, lock the surface, pass the buffer, unlock and then blit to the window etc.<br /><br />Only I can't seem to find any really helpful info via google. How do you guys manage this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 28, 2012 12:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What you want to do is create a texture, put your pixels into that texture, and then draw that texture to the screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Nov 28, 2012 12:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">What you want to do is create a texture, put your pixels into that texture, and then draw that texture to the screen.</div><br /><br />Is that fast?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Nov 28, 2012 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, a better question is &quot;is that fast enough?&quot; and that  is best answered by you trying it an measuring it in the situation you want to use it in, but yes, most setups these days will have no problem with uploading a single texture to the GPU every frame and rendering it to the screen with a single draw call. (You can also get nearest neighbour or bilinear filtering in the same step, done by the GPU, if you want them.) Though, if that's all your doing, you don't even really need Direct3D, pasting your bitmap to the window through the vanilla windows API is fine too.<br /><br />If you want accurate NES emulation, you really don't have much opportunity to offload sprite and tile drawing to the GPU anyway, since what goes on the screen is interleaved with and affected by the NES CPU. Aside from the GPU rescaling step, there's really nothing that Direct3D can help you with (without a rather complicated solution).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Nov 28, 2012 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Well, a better question is &quot;is that fast enough?&quot; and that  is best answered by you trying it an measuring it in the situation you want to use it in, but yes, most setups these days will have no problem with uploading a single texture to the GPU every frame and rendering it to the screen with a single draw call. (You can also get nearest neighbour or bilinear filtering in the same step, done by the GPU, if you want them.) Though, if that's all your doing, you don't even really need Direct3D, pasting your bitmap to the window through the vanilla windows API is fine too.<br /><br />If you want accurate NES emulation, you really don't have much opportunity to offload sprite and tile drawing to the GPU anyway, since what goes on the screen is interleaved with and affected by the NES CPU. Aside from the GPU rescaling step, there's really nothing that Direct3D can help you with (without a rather complicated solution).</div><br /><br />I'd would like to use a Bitmap and Blit it but i can't get any of the examples of CreateDIBBitmap (or whatever they're called) to work in my own code. Does anyone else have an example that works?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Thu Nov 29, 2012 10:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">What you want to do is create a texture, put your pixels into that texture, and then draw that texture to the screen.</div><br />Yep.  This is what I do.  It's plenty fast.<br /><br />If you want to see how this is done in D3D10 (warning: everyone here will tell you that you suck for not supporting Win XP <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />), I can provide some sample code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Thu Nov 29, 2012 10:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Please do <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Fri Nov 30, 2012 11:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ok -- I'll put something together tomorrow morning.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Sat Dec 01, 2012 3:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ok -- you'll need a basic shader:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Texture2D tex;<br /><br />SamplerState sam_point<br />{<br />&nbsp; &nbsp;Filter = MIN_MAG_MIP_POINT;<br />&nbsp; &nbsp;AddressU = Clamp;<br />&nbsp; &nbsp;AddressV = Clamp;<br />};<br /><br />matrix world;<br />matrix view;<br />matrix proj;<br /><br />struct VS_INPUT<br />{<br />&nbsp; &nbsp; float4 pos : POSITION;<br />&nbsp; &nbsp; float2 tex : TEXCOORD;<br />};<br /><br />struct PS_INPUT<br />{<br />&nbsp; &nbsp;float4 pos : SV_POSITION;<br />&nbsp; &nbsp;float2 tex : TEXCOORD0;<br />};<br /><br />PS_INPUT VS (VS_INPUT input)<br />{<br />&nbsp; &nbsp;PS_INPUT output = (PS_INPUT)0;<br />&nbsp; &nbsp;output.pos = mul (input.pos, world);<br />&nbsp; &nbsp;output.pos = mul (output.pos, view);<br />&nbsp; &nbsp;output.pos = mul (output.pos, proj);<br />&nbsp; &nbsp;output.tex = input.tex;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;return output;<br />};<br /><br />float4 PS (PS_INPUT input) : SV_Target<br />{<br />&nbsp;float4 r = tex.Sample(sam_point, input.tex);<br />&nbsp;r.w = 1.0;<br />&nbsp;return r;<br />}<br /><br />technique10 render<br />{<br />&nbsp; &nbsp;pass P0<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;SetVertexShader(CompileShader(vs_4_0, VS()));<br />&nbsp; &nbsp;&nbsp; &nbsp;SetGeometryShader(NULL);<br />&nbsp; &nbsp;&nbsp; &nbsp;SetPixelShader(CompileShader(ps_4_0, PS()));<br />&nbsp; &nbsp;}<br />}<br /></div><br />Save it as shader.fx in the same directory as the .exe.<br /><br />And here's the code.  Try it out and let me know if you have any questions.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &quot;windows.h&quot;<br />#include &quot;d3d10.h&quot;<br />#include &quot;d3dx10.h&quot;<br />#include &quot;stdio.h&quot;<br /><br />#pragma comment (lib, &quot;d3d10.lib&quot;)<br />#pragma comment (lib, &quot;d3dx10.lib&quot;)<br /><br />#define release_com(x) { if(x) {x-&gt;Release(); x = 0;} }<br /><br />bool vsync = false;<br /><br />char *title = &quot;2d&quot;;<br />int client_width = 640;<br />int client_height = 480;<br />int tex_width = 256;<br />int tex_height = 256;<br /><br />HWND hwnd;<br />IDXGISwapChain *swapchain = 0;<br />ID3D10Device *d3d_dev = 0;<br />ID3D10Texture2D *depth_stencil_buffer = 0;<br />ID3D10RenderTargetView *render_target_view = 0;<br />ID3D10DepthStencilView *depth_stencil_view = 0;<br />ID3D10Texture2D *tex = 0;<br />ID3D10EffectTechnique *technique = 0;<br />ID3D10EffectMatrixVariable *var_world;<br />ID3D10EffectMatrixVariable *var_view;<br />ID3D10EffectMatrixVariable *var_proj;<br />ID3D10EffectShaderResourceVariable *var_tex;<br />ID3D10InputLayout *vertex_layout;<br />ID3D10Buffer *vertex_buffer;<br />D3DXMATRIX matrix_world;<br />D3DXMATRIX matrix_view;<br />D3DXMATRIX matrix_proj;<br /><br />int frame_count = 0;<br />LARGE_INTEGER prev_time;<br />LARGE_INTEGER cur_time;<br />LARGE_INTEGER counter_freq;<br /><br />struct vertex<br />{<br />&nbsp; &nbsp;D3DXVECTOR3 pos;<br />&nbsp; &nbsp;D3DXVECTOR2 tex;<br />};<br /><br />void on_resize()<br />{<br />&nbsp; &nbsp;release_com(depth_stencil_buffer);<br />&nbsp; &nbsp;release_com(render_target_view);<br />&nbsp; &nbsp;release_com(depth_stencil_view);<br /><br />&nbsp; &nbsp;swapchain-&gt;ResizeBuffers(1, client_width, client_height, DXGI_FORMAT_R8G8B8A8_UNORM, 0);<br />&nbsp; &nbsp;ID3D10Texture2D *back_buffer;<br />&nbsp; &nbsp;swapchain-&gt;GetBuffer(0, __uuidof(ID3D10Texture2D), (void **)(&amp;back_buffer));<br />&nbsp; &nbsp;d3d_dev-&gt;CreateRenderTargetView(back_buffer, 0, &amp;render_target_view);<br />&nbsp; &nbsp;release_com(back_buffer);<br /><br />&nbsp; &nbsp;D3D10_TEXTURE2D_DESC depth_stencil_desc;<br />&nbsp; &nbsp;depth_stencil_desc.Width = client_width;<br />&nbsp; &nbsp;depth_stencil_desc.Height = client_height;<br />&nbsp; &nbsp;depth_stencil_desc.MipLevels = 1;<br />&nbsp; &nbsp;depth_stencil_desc.ArraySize = 1;<br />&nbsp; &nbsp;depth_stencil_desc.Format = DXGI_FORMAT_D24_UNORM_S8_UINT;<br />&nbsp; &nbsp;depth_stencil_desc.SampleDesc.Count = 1;<br />&nbsp; &nbsp;depth_stencil_desc.SampleDesc.Quality = 0;<br />&nbsp; &nbsp;depth_stencil_desc.Usage = D3D10_USAGE_DEFAULT;<br />&nbsp; &nbsp;depth_stencil_desc.BindFlags = D3D10_BIND_DEPTH_STENCIL;<br />&nbsp; &nbsp;depth_stencil_desc.CPUAccessFlags = 0;<br />&nbsp; &nbsp;depth_stencil_desc.MiscFlags = 0;<br /><br />&nbsp; &nbsp;d3d_dev-&gt;CreateTexture2D(&amp;depth_stencil_desc, 0, &amp;depth_stencil_buffer);<br />&nbsp; &nbsp;d3d_dev-&gt;CreateDepthStencilView(depth_stencil_buffer, 0, &amp;depth_stencil_view);<br /><br />&nbsp; &nbsp;d3d_dev-&gt;OMSetRenderTargets(1, &amp;render_target_view, depth_stencil_view);<br /><br />&nbsp; &nbsp;D3D10_VIEWPORT vp;<br />&nbsp; &nbsp;vp.TopLeftX = 0;<br />&nbsp; &nbsp;vp.TopLeftY = 0;<br />&nbsp; &nbsp;vp.Width = client_width;<br />&nbsp; &nbsp;vp.Height = client_height;<br />&nbsp; &nbsp;vp.MinDepth = 0.0f;<br />&nbsp; &nbsp;vp.MaxDepth = 1.0f;<br /><br />&nbsp; &nbsp;d3d_dev-&gt;RSSetViewports(1, &amp;vp);<br /><br />&nbsp; &nbsp;D3DXMatrixPerspectiveFovLH(&amp;matrix_proj, D3DX_PI/4.0f, (float)client_width/(float)client_height, 1.0f, 1000.0f);<br />}<br /><br />void init_d3d()<br />{<br />&nbsp; &nbsp;DXGI_SWAP_CHAIN_DESC sd;<br />&nbsp; &nbsp;sd.BufferDesc.Width = client_width;<br />&nbsp; &nbsp;sd.BufferDesc.Height = client_height;<br />&nbsp; &nbsp;sd.BufferDesc.RefreshRate.Numerator = 0;<br />&nbsp; &nbsp;sd.BufferDesc.RefreshRate.Denominator = 1;<br />&nbsp; &nbsp;sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;<br />&nbsp; &nbsp;sd.BufferDesc.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;<br />&nbsp; &nbsp;sd.BufferDesc.Scaling = DXGI_MODE_SCALING_UNSPECIFIED;<br />&nbsp; &nbsp;sd.SampleDesc.Count = 1;<br />&nbsp; &nbsp;sd.SampleDesc.Quality = 0;<br />&nbsp; &nbsp;sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;<br />&nbsp; &nbsp;sd.BufferCount = 1;<br />&nbsp; &nbsp;sd.OutputWindow = hwnd;<br />&nbsp; &nbsp;sd.Windowed = true;<br />&nbsp; &nbsp;sd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;<br />&nbsp; &nbsp;sd.Flags = 0;<br /><br />&nbsp; &nbsp;HRESULT hr = D3D10CreateDeviceAndSwapChain(<br />&nbsp; &nbsp; &nbsp; 0,<br />&nbsp; &nbsp; &nbsp; D3D10_DRIVER_TYPE_HARDWARE,<br />&nbsp; &nbsp; &nbsp; 0,<br />&nbsp; &nbsp; &nbsp; 0,<br />&nbsp; &nbsp; &nbsp; D3D10_SDK_VERSION,<br />&nbsp; &nbsp; &nbsp; &amp;sd,<br />&nbsp; &nbsp; &nbsp; &amp;swapchain,<br />&nbsp; &nbsp; &nbsp; &amp;d3d_dev<br />&nbsp; &nbsp; &nbsp; );<br /><br />&nbsp; &nbsp;if (FAILED(hr))<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; MessageBox(NULL, &quot;D3D10CreateDeviceAndSwapChain failed.&quot;, 0, 0);<br />&nbsp; &nbsp; &nbsp; PostQuitMessage(0);<br />&nbsp; &nbsp; &nbsp; return;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;on_resize();<br /><br />&nbsp; &nbsp;D3D10_INPUT_ELEMENT_DESC element_desc&#91;&#93; =<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; { TEXT(&quot;POSITION&quot;), 0, DXGI_FORMAT_R32G32B32_FLOAT, 0,&nbsp; 0, D3D10_INPUT_PER_VERTEX_DATA, 0 },<br />&nbsp; &nbsp; &nbsp; { TEXT(&quot;TEXCOORD&quot;), 0, DXGI_FORMAT_R32G32_FLOAT,&nbsp; &nbsp; 0, 12, D3D10_INPUT_PER_VERTEX_DATA, 0 }<br />&nbsp; &nbsp;};<br /><br />&nbsp; &nbsp;UINT num_elements = sizeof(element_desc)/sizeof(element_desc&#91;0&#93;);<br />&nbsp; &nbsp;ID3D10Effect *effect = 0;<br /><br />&nbsp; &nbsp;hr = D3DX10CreateEffectFromFile(&quot;shader.fx&quot;, NULL, NULL, &quot;fx_4_0&quot;, 0, 0, d3d_dev, NULL, NULL, &amp;effect, NULL, NULL);<br />&nbsp; &nbsp;if (FAILED(hr))<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; MessageBox(NULL, &quot;D3DX10CreateEffectFromFile failed&quot;, 0, 0);<br />&nbsp; &nbsp; &nbsp; PostQuitMessage(0);<br />&nbsp; &nbsp; &nbsp; return;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;technique = effect-&gt;GetTechniqueByName(&quot;render&quot;);<br />&nbsp; &nbsp;var_world = effect-&gt;GetVariableByName(&quot;world&quot;)-&gt;AsMatrix();<br />&nbsp; &nbsp;var_view = effect-&gt;GetVariableByName(&quot;view&quot;)-&gt;AsMatrix();<br />&nbsp; &nbsp;var_proj = effect-&gt;GetVariableByName(&quot;proj&quot;)-&gt;AsMatrix();<br />&nbsp; &nbsp;var_tex = effect-&gt;GetVariableByName(&quot;tex&quot;)-&gt;AsShaderResource();<br /><br />&nbsp; &nbsp;D3D10_PASS_DESC pass_desc;<br />&nbsp; &nbsp;technique-&gt;GetPassByIndex(0)-&gt;GetDesc(&amp;pass_desc);<br />&nbsp; &nbsp;d3d_dev-&gt;CreateInputLayout(element_desc, num_elements, pass_desc.pIAInputSignature, pass_desc.IAInputSignatureSize, &amp;vertex_layout);<br /><br />&nbsp; &nbsp;vertex vertices&#91;&#93; = <br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; { D3DXVECTOR3( -4.0f/3.0f, -1.0f, 0.0f ), D3DXVECTOR2(0.0f, 1.0f) },<br />&nbsp; &nbsp; &nbsp; { D3DXVECTOR3( -4.0f/3.0f, 1.0f, 0.0f ), D3DXVECTOR2(0.0f, 0.0f) },<br />&nbsp; &nbsp; &nbsp; { D3DXVECTOR3( 4.0f/3.0f, -1.0f, 0.0f ), D3DXVECTOR2(1.0f, 1.0f) },<br />&nbsp; &nbsp; &nbsp; { D3DXVECTOR3( 4.0f/3.0f, 1.0f, 0.0f ), D3DXVECTOR2(1.0f, 0.0f) },<br />&nbsp; &nbsp;};<br />&nbsp; &nbsp;D3D10_BUFFER_DESC buffer_desc;<br />&nbsp; &nbsp;buffer_desc.Usage = D3D10_USAGE_DEFAULT;<br />&nbsp; &nbsp;buffer_desc.ByteWidth = sizeof(vertex) * 4;<br />&nbsp; &nbsp;buffer_desc.BindFlags = D3D10_BIND_VERTEX_BUFFER;<br />&nbsp; &nbsp;buffer_desc.CPUAccessFlags = 0;<br />&nbsp; &nbsp;buffer_desc.MiscFlags = 0;<br />&nbsp; &nbsp;D3D10_SUBRESOURCE_DATA init_data;<br />&nbsp; &nbsp;init_data.pSysMem = vertices;<br />&nbsp; &nbsp;hr = d3d_dev-&gt;CreateBuffer(&amp;buffer_desc, &amp;init_data, &amp;vertex_buffer);<br /><br />&nbsp; &nbsp;D3D10_TEXTURE2D_DESC tex_desc;<br />&nbsp; &nbsp;tex_desc.Width = tex_width;<br />&nbsp; &nbsp;tex_desc.Height = tex_height;<br />&nbsp; &nbsp;tex_desc.MipLevels = 1;<br />&nbsp; &nbsp;tex_desc.ArraySize = 1;<br />&nbsp; &nbsp;tex_desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;<br />&nbsp; &nbsp;tex_desc.SampleDesc.Count = 1;<br />&nbsp; &nbsp;tex_desc.SampleDesc.Quality = 0;<br />&nbsp; &nbsp;tex_desc.Usage = D3D10_USAGE_DYNAMIC;<br />&nbsp; &nbsp;tex_desc.BindFlags = D3D10_BIND_SHADER_RESOURCE;<br />&nbsp; &nbsp;tex_desc.CPUAccessFlags = D3D10_CPU_ACCESS_WRITE;<br />&nbsp; &nbsp;tex_desc.MiscFlags = 0;<br /><br />&nbsp; &nbsp;d3d_dev-&gt;CreateTexture2D(&amp;tex_desc, 0, &amp;tex);<br /><br />&nbsp; &nbsp;D3D10_SHADER_RESOURCE_VIEW_DESC desc_rv;<br />&nbsp; &nbsp;desc_rv.Format = tex_desc.Format;<br />&nbsp; &nbsp;desc_rv.ViewDimension = D3D10_SRV_DIMENSION_TEXTURE2D;<br />&nbsp; &nbsp;desc_rv.Texture2D.MipLevels = 1;<br />&nbsp; &nbsp;desc_rv.Texture2D.MostDetailedMip = 0;<br />&nbsp; &nbsp;ID3D10ShaderResourceView *tex_rv;<br />&nbsp; &nbsp;d3d_dev-&gt;CreateShaderResourceView(tex, &amp;desc_rv, &amp;tex_rv);<br /><br />&nbsp; &nbsp;D3DXMatrixIdentity(&amp;matrix_world);<br />&nbsp; &nbsp;D3DXMatrixLookAtLH(<br />&nbsp; &nbsp; &nbsp; &amp;matrix_view,<br />&nbsp; &nbsp; &nbsp; &amp;D3DXVECTOR3(0.0f, 0.0f, -(1.0 / tan( (D3DX_PI/4)/2.0 ))),<br />&nbsp; &nbsp; &nbsp; &amp;D3DXVECTOR3(0.0f, 0.0f, 0.0f),<br />&nbsp; &nbsp; &nbsp; &amp;D3DXVECTOR3(0.0f, 1.0f, 0.0f));<br />&nbsp; &nbsp;var_tex-&gt;SetResource(tex_rv);<br />}<br /><br />void draw_scene()<br />{<br />&nbsp; &nbsp;UINT stride = sizeof(vertex);<br />&nbsp; &nbsp;UINT offset = 0;<br />&nbsp; &nbsp;d3d_dev-&gt;IASetInputLayout(vertex_layout);<br />&nbsp; &nbsp;d3d_dev-&gt;IASetVertexBuffers(0, 1, &amp;vertex_buffer, &amp;stride, &amp;offset);<br />&nbsp; &nbsp;d3d_dev-&gt;IASetPrimitiveTopology(D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);<br /><br />&nbsp; &nbsp;D3D10_MAPPED_TEXTURE2D map;<br />&nbsp; &nbsp;map.pData = 0;<br />&nbsp; &nbsp;tex-&gt;Map(0, D3D10_MAP_WRITE_DISCARD, NULL, &amp;map);<br /><br />&nbsp; &nbsp;//*** plot pixels here ***<br /><br />&nbsp; &nbsp;int *p = 0;<br />&nbsp; &nbsp;for (int y = 0; y &lt; tex_height; ++y)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; p = (int*)map.pData + y * (map.RowPitch / 4);<br />&nbsp; &nbsp; &nbsp; for (int x = 0; x &lt; tex_width; ++x)<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*p++ = (0xFF &lt;&lt; 24) | (x &lt;&lt; 16) | y;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;tex-&gt;Unmap(0);<br />&nbsp; &nbsp;D3DXMatrixTranslation(&amp;matrix_world, 0.0f, 0.0f, 0.0f);<br />&nbsp; &nbsp;var_proj-&gt;SetMatrix((float*)&amp;matrix_proj);<br />&nbsp; &nbsp;var_view-&gt;SetMatrix((float*)&amp;matrix_view);<br />&nbsp; &nbsp;var_world-&gt;SetMatrix((float*)&amp;matrix_world);<br />&nbsp; &nbsp;technique-&gt;GetPassByIndex(0)-&gt;Apply(0);<br />&nbsp; &nbsp;d3d_dev-&gt;Draw(4, 0);<br />}<br /><br />void run()<br />{<br />&nbsp; &nbsp;MSG msg = {0};<br />&nbsp; &nbsp;while (msg.message != WM_QUIT)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; if (PeekMessage(&amp;msg, 0, 0, 0, PM_REMOVE))<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TranslateMessage(&amp;msg);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DispatchMessage(&amp;msg);<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; else<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;d3d_dev-&gt;ClearRenderTargetView(render_target_view, D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f));<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;d3d_dev-&gt;ClearDepthStencilView(depth_stencil_view, D3D10_CLEAR_DEPTH | D3D10_CLEAR_STENCIL, 1.0f, 0);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;draw_scene();<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;swapchain-&gt;Present(vsync ? 1 : 0, 0);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;frame_count++;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp;}<br />}<br /><br />LRESULT CALLBACK wnd_proc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)<br />{<br />&nbsp; &nbsp;switch (msg)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;case WM_SIZE:<br />&nbsp; &nbsp; &nbsp; client_width = LOWORD(lParam);<br />&nbsp; &nbsp; &nbsp; client_height = HIWORD(lParam);<br />&nbsp; &nbsp; &nbsp; if (d3d_dev)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;on_resize();<br />&nbsp; &nbsp; &nbsp; return 0;<br />&nbsp; &nbsp;case WM_GETMINMAXINFO:<br />&nbsp; &nbsp; &nbsp; ((MINMAXINFO*)lParam)-&gt;ptMinTrackSize.x = 100;<br />&nbsp; &nbsp; &nbsp; ((MINMAXINFO*)lParam)-&gt;ptMinTrackSize.y = 100;<br />&nbsp; &nbsp; &nbsp; return 0;<br />&nbsp; &nbsp;case WM_DESTROY:<br />&nbsp; &nbsp; &nbsp; PostQuitMessage(0);<br />&nbsp; &nbsp; &nbsp; return 0;<br />&nbsp; &nbsp;case WM_TIMER:<br />&nbsp; &nbsp; &nbsp; switch (wParam)<br />&nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; case 0:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;QueryPerformanceCounter(&amp;cur_time);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;double elapsed = ((cur_time.QuadPart - prev_time.QuadPart) * 1000) / (double)counter_freq.QuadPart;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;double fps = frame_count / (elapsed / 1000.0);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;char buf&#91;32&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_snprintf(buf, 32, &quot;%s - %.2f fps&quot;, title, fps);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SetWindowText(hwnd, buf);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;frame_count = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;prev_time = cur_time;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return 0;<br />&nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;return DefWindowProc(hWnd, msg, wParam, lParam);<br />}<br /><br />void init(HINSTANCE hinstance)<br />{<br />&nbsp; &nbsp;WNDCLASS wc;<br />&nbsp; &nbsp;wc.style = CS_HREDRAW | CS_VREDRAW;<br />&nbsp; &nbsp;wc.lpfnWndProc = wnd_proc;<br />&nbsp; &nbsp;wc.cbClsExtra = 0;<br />&nbsp; &nbsp;wc.cbWndExtra = 0;<br />&nbsp; &nbsp;wc.hInstance = hinstance;<br />&nbsp; &nbsp;wc.hIcon = LoadIcon(0, IDI_APPLICATION);<br />&nbsp; &nbsp;wc.hCursor = LoadCursor(0, IDC_ARROW);<br />&nbsp; &nbsp;wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);<br />&nbsp; &nbsp;wc.lpszMenuName = 0;<br />&nbsp; &nbsp;wc.lpszClassName = &quot;2d_wnd_class&quot;;<br /><br />&nbsp; &nbsp;RegisterClass(&amp;wc);<br /><br />&nbsp; &nbsp;RECT r = {0, 0, client_width, client_height};<br />&nbsp; &nbsp;AdjustWindowRect(&amp;r, WS_OVERLAPPEDWINDOW, false);<br />&nbsp; &nbsp;int width = r.right - r.left;<br />&nbsp; &nbsp;int height = r.bottom - r.top;<br /><br />&nbsp; &nbsp;hwnd = CreateWindow(&quot;2d_wnd_class&quot;,<br />&nbsp; &nbsp; &nbsp; title,<br />&nbsp; &nbsp; &nbsp; WS_OVERLAPPEDWINDOW,<br />&nbsp; &nbsp; &nbsp; CW_USEDEFAULT,<br />&nbsp; &nbsp; &nbsp; CW_USEDEFAULT,<br />&nbsp; &nbsp; &nbsp; width,<br />&nbsp; &nbsp; &nbsp; height,<br />&nbsp; &nbsp; &nbsp; 0,<br />&nbsp; &nbsp; &nbsp; 0,<br />&nbsp; &nbsp; &nbsp; hinstance,<br />&nbsp; &nbsp; &nbsp; NULL<br />&nbsp; &nbsp; &nbsp; );<br /><br />&nbsp; &nbsp;ShowWindow(hwnd, SW_SHOW);<br />&nbsp; &nbsp;UpdateWindow(hwnd);<br />&nbsp; &nbsp;QueryPerformanceFrequency(&amp;counter_freq);<br />&nbsp; &nbsp;QueryPerformanceCounter(&amp;prev_time);<br />}<br /><br />int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hprevinstance, LPSTR lp_cmdline, int n_showcmd)<br />{<br />&nbsp; &nbsp;init(hinstance);<br />&nbsp; &nbsp;init_d3d();<br />&nbsp; &nbsp;SetTimer(hwnd, 0, 1000, NULL);<br />&nbsp; &nbsp;run();<br />}<br /></div><br />James

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Tue Dec 11, 2012 3:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks, but tbh I can't really go through all of that.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LPDIRECT3D9 d3d;<br />LPDIRECT3DDEVICE9 d3ddev;<br />D3DPRESENT_PARAMETERS d3dpp;<br />IDirect3DTexture9 *Texture = NULL;<br />D3DLOCKED_RECT pLockedRect;<br />DWORD *Data;<br />HRESULT hResult;<br /><br />void CreateDirectX()<br />{<br />&nbsp; &nbsp;d3d = Direct3DCreate9(D3D_SDK_VERSION);<br /><br />&nbsp; &nbsp;ZeroMemory(&amp;d3dpp, sizeof(d3dpp));<br />&nbsp; &nbsp;d3dpp.hDeviceWindow = hWnd;<br />&nbsp; &nbsp;d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;<br />&nbsp; &nbsp;d3dpp.Windowed = true;<br />&nbsp; &nbsp;d3dpp.BackBufferFormat = D3DFMT_UNKNOWN;<br /><br />&nbsp; &nbsp;if (d3d-&gt;CreateDevice( D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &amp;d3dpp, &amp;d3ddev) != D3D_OK)<br />&nbsp; &nbsp;&nbsp; &nbsp;MessageBox(NULL, &quot;d3d fail&quot;, &quot;&quot;, 0);<br /><br />&nbsp; &nbsp;if (d3ddev-&gt;CreateTexture(256, 256, 0, D3DUSAGE_DYNAMIC, D3DFMT_A8R8G8B8, D3DPOOL_DEFAULT, &amp;Texture, NULL) != D3D_OK)<br />&nbsp; &nbsp;&nbsp; &nbsp;MessageBox(NULL, &quot;CT Fail!&quot;, &quot;&quot;, 0);<br />}<br /><br />int temp;<br /><br />void render_frame(void)<br />{<br />&nbsp; &nbsp;d3ddev-&gt;Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0, 0, 0), 1.0f, 0);<br />&nbsp; &nbsp;d3ddev-&gt;BeginScene();<br /><br /><br />&nbsp; &nbsp;if (Texture-&gt;LockRect(0, &amp;pLockedRect, 0, D3DLOCK_DISCARD) != D3D_OK)<br />&nbsp; &nbsp;&nbsp; &nbsp;MessageBox(NULL, &quot;LR Fail!&quot;, &quot;&quot;, 0);<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;Data = (DWORD*)pLockedRect.pBits;<br /><br />&nbsp; &nbsp;temp = 0;<br /><br />&nbsp; &nbsp;while (temp &lt; 10000)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;Data&#91;temp&#93; = 0x00FFFFFF;<br />&nbsp; &nbsp;&nbsp; &nbsp;temp++;<br />&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;if (Texture-&gt;UnlockRect(0) != D3D_OK)<br />&nbsp; &nbsp;&nbsp; &nbsp;MessageBox(NULL, &quot;UR Fail!&quot;, &quot;&quot;, 0);<br /><br />&nbsp; &nbsp;if (d3ddev-&gt;SetTexture(0, Texture) != D3D_OK)<br />&nbsp; &nbsp;&nbsp; &nbsp;MessageBox(NULL, &quot;ST Fail!&quot;, &quot;&quot;, 0);<br /><br />&nbsp; &nbsp;d3ddev-&gt;EndScene();<br />&nbsp; &nbsp;d3ddev-&gt;Present(NULL, NULL, NULL, NULL);<br />}<br /><br />void ReleaseDirectX()<br />{<br />&nbsp; &nbsp;d3ddev-&gt;Release();<br />&nbsp; &nbsp;d3d-&gt;Release();<br />}</div><br /><br />This throws up no error messages but still doesn't work. Does anyone know why?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Tue Dec 11, 2012 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What are you applying the texture to?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Dec 12, 2012 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just the client area of a window so that I can write pixels for my NES emulator to the texture and then Blt them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Wed Dec 12, 2012 7:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I understand what you're trying to do, but where is the code that actually applies the texture to something (not to mention camera setup, etc.)?  It looks like you're just updating a texture every frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Wed Dec 12, 2012 8:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">James wrote:</div><div class="quotecontent">I understand what you're trying to do, but where is the code that actually applies the texture to something (not to mention camera setup, etc.)?  It looks like you're just updating a texture every frame.</div><br /><br />No idea. In that case could you please rectify my mistake.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Wed Dec 12, 2012 9:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: DirectDraw -&gt; Direct3D</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><div class="quotetitle">James wrote:</div><div class="quotecontent">I understand what you're trying to do, but where is the code that actually applies the texture to something (not to mention camera setup, etc.)?  It looks like you're just updating a texture every frame.</div><br /><br />No idea. In that case could you please rectify my mistake.</div><br />Yes.  See DX10 version above <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />.<br /><br />In all seriousness, I don't know DX9, so I can't really help.  Maybe take a look at this: <a href="http://www.drunkenhyena.com/cgi-bin/view_cpp_article.pl?chapter=2;article=30" class="postlink">http://www.drunkenhyena.com/cgi-bin/view_cpp_article.pl?chapter=2;article=30</a>.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>