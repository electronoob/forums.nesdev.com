<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=1545" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-11-22T23:15:10-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=1545</id>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2007-11-22T23:15:10-07:00</updated>
<published>2007-11-22T23:15:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28653#p28653</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28653#p28653"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28653#p28653"><![CDATA[
That's a good idea, actually. I'd still need to play around with the pointers used to access the attribute data in the ram (if I decide to put it in the ram).<br /><br />It's probably a better idea to have the attribute in the ram for me, because I have a status bar, and the way it works is that the two nametables are the same, except one of them (the one on the bottom) contains the graphics for the status bar, so every write I make to the PPU would need to be doubled to the other nametable, while making sure not to overwrite the status bar.<br /><br />I don't think this is inefficient, because Gargoyle's Quest II does this exact thing, exactly the way I was going to do it (Kirby's Adventure mirrors the screen with a reduced height, whereas Gargoyle's Quest II just simply mirrors the two nametables, without disturbing the status bar on the one nametable)<br /><br />Thanks for the help! <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Nov 22, 2007 11:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2007-11-22T22:59:03-07:00</updated>
<published>2007-11-22T22:59:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28652#p28652</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28652#p28652"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28652#p28652"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />I need to write to every 8th byte, and there's really no good way to do this other than resetting $2006 for each write<br /></div><br /><br />Use the increment 32 mode anyway, just interleave the tiles.  4 passes will be just like update 8.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Nov 22, 2007 10:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-11-22T22:43:48-07:00</updated>
<published>2007-11-22T22:43:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28651#p28651</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28651#p28651"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28651#p28651"><![CDATA[
<div class="quotetitle">Drag wrote:</div><div class="quotecontent"><br />But yeah, is there any more of an efficient way to update a column of attribute data than to just reset $2006 for each write? (by resetting, I mean manually incrementing the address by $08, and rewriting the incremented value)<br /></div><br />I don't think so. I also got very upset because of this a while ago... it would be useful if the PPU had an "increment 8" mode, as it has "increment 1" and "increment 32". I don't think thisis such a problem though, because it's just so little data... you'll most likely update only 9 bytes, so the overhead of setting the address before each write is not so bad.<br /><br />At one point I even though about coding a very efficient routine to copy the whole 128 bytes of the attribute tables mirror every frame, but now I realize that would be insane.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Nov 22, 2007 10:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2007-11-22T22:28:07-07:00</updated>
<published>2007-11-22T22:28:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28649#p28649</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28649#p28649"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28649#p28649"><![CDATA[
I'm planning my scrolling engine out, and I've also run into an attribute issue.<br /><br />If I'm scrolling to the right, the attribute data has to be written in a column from top to bottom. Now, the issue I'm having is that it doesn't matter whether I have a copy of the attribute data in the ram or whether I just grab it from $2007, when updating a column of attribute data, I need to write to every 8th byte, and there's really no good way to do this other than resetting $2006 for each write, whereas updating a row is simply just write write write write 'kay done.<br /><br />And I'm doing 8-way scrolling, "rolling" with both axes, using horizontal mirroring (like Kirby's Adventure).<br /><br />But yeah, is there any more of an efficient way to update a column of attribute data than to just reset $2006 for each write? (by resetting, I mean manually incrementing the address by $08, and rewriting the incremented value)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Nov 22, 2007 10:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-11-17T18:36:43-07:00</updated>
<published>2007-11-17T18:36:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28381#p28381</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28381#p28381"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28381#p28381"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />If you need 72 bytes for this complicated scheme to work, why not just go all the way and mirror the whole attribute tables and use 128 bytes? It's not that much more, and will keep you from having this sliding buffer.<br /></div><br /><br />You know, that's not a bad idea. I could really benefit from this, and you're right, I wouldn't have to deal with the shifting thing. I'd already have all the information I'd need right in the table.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />The only complicated part is that now some math is required to calculate the exact index of the byte in the row you haveto change, but still much less than sifting that number of bytes.<br /></div><br /><br />Math is no problem for me. Everything in my scrolling/updating engine is calculated using the value of the scroll variables, or distorted scroll values. Calculating the index will be very easy, I think. But that's a very good idea to have the 2 attribute tables both in RAM. I think I'll have each row in RAM be 2 side by side rows of attributes. So $200-$207 is $23C0-$23C8, and $208-20F is $27C0-$23C8. That will make it very much easier.<br /><br />EDIT: I didn't see your post until now Tepples. My shift wouldn't have been that simple. Because if you just do that, what will happen is the attribute which would go to $23C8, which is at the left side of the screen, would be shifted to $23C7, which obviously is something someone would not generally want. I think I'll just stay away from shifts though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sat Nov 17, 2007 6:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-11-17T13:12:07-07:00</updated>
<published>2007-11-17T13:12:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28372#p28372</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28372#p28372"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28372#p28372"><![CDATA[
If you need 72 bytes for this complicated scheme to work, why not just go all the way and mirror the whole attribute tables and use 128 bytes? It's not that much more, and will keep you from having this sliding buffer.<br /><br />But if you do want to stick to that "shifting" scheme, that can usually be done by not shifting at all, but having a pointer indicate which entry represents the leftmost column.<br /><br />From your example, this variable would start as "0". But once you scrolled 32 pixels, the $00 is not the first any more, $55 is. So, instead of shifting the whole thing left, have the variable move right, incrementing it to 1. Of course, this changes the way you access that buffer. Instead of counting X bytes from the start of the row, you count X bytes from what the variable indicates is the first byte in the row. Continuing the example, the row now starts at position 1, and you have to update the byte at the other edge, 8 bytes later. So you add 8 to the variable (which holds 1) and you get 9. Since this value is beyond your range (0 to 8), you subtract 9 from it, and the result is 0, which is indeed the last byte in the row now. So you replace the $55 in there with the new $EF.<br /><br />In fact, since you know that last byte of the row is the one located before the first, it'd be better to subtract one from the variable instead of adding 8. The range check would be simpler, as you would just need to check if the result was negative, in which case you make it wrap to 8. The effect is exactly the same.<br /><br />The only complicated part is that now some math is required to calculate the exact index of the byte in the row you haveto change, but still much less than sifting that number of bytes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Nov 17, 2007 1:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2007-11-17T11:32:00-07:00</updated>
<published>2007-11-17T11:32:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28367#p28367</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28367#p28367"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28367#p28367"><![CDATA[
How long is a "very long time"?<br /><br />What you are describing involves shifting a 72-byte buffer by a distance of 1 byte. The following takes fewer than 1100 cycles per my count, and would take even fewer if unrolled:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  ldx #0<br />@loop:<br />  lda buffer+1,x<br />  sta buffer,x<br />  inx<br />  cpx #71<br />  bcc @loop<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Nov 17, 2007 11:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-11-17T11:10:40-07:00</updated>
<published>2007-11-17T11:10:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28366#p28366</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28366#p28366"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28366#p28366"><![CDATA[
That was my plan all along. But take a look at this:<br /><br />$00,$55,$AA,$FF,$1B,$09,$30,$44,$33<br /><br />This represents a 9 byte long row of attributes. It's 9 bytes, because if you scroll right 4 pixels from the very beggining nametable, You'll be seeing half of the tile at $2000 and half of the tile at $2400, as well as all of them in between. So there are 33 different tiles on screen at once, and I need to have the attribute information for the extra tile on the edge of the screen. But anyways, when I scroll 32 pixels to the right, this row will need to changed. It needs to shift one whole byte over. So $00 at the beggining will be sent to the garbage, and an extra byte will have to be added at the end. Say the attribute byte for the next column is $EF. I need to then add that after $33. So it will look like this:<br /><br />$55,$AA,$FF,$1B,$09,$30,$44,$33,$EF<br /><br />This is an easy concept, but to do, it would take a very long time. Does anyone know of a way I could do this without taking a very long time?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Sat Nov 17, 2007 11:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2007-11-17T07:07:46-07:00</updated>
<published>2007-11-17T07:07:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28353#p28353</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28353#p28353"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28353#p28353"><![CDATA[
16 pixels is the hardware minimum, and split an attribute nybble isn't too bad (you just need to work with 4 bits a time) so you can work with vertical 16 pixel blocks and horizontal 32 pixels blocks. Else, just work with 16x16 blocks everywhere, and when you update row/colums of meatiles, just be sure to refresh just a nibble at the same time (by keeping a copy of the attribute table in RAM for example).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Nov 17, 2007 7:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2007-11-16T18:42:05-07:00</updated>
<published>2007-11-16T18:42:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28339#p28339</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28339#p28339"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=28339#p28339"><![CDATA[
Hi, I'm sorry to bring up this old thread, but it's better than starting a new one for the same thing.<br /><br />I'm working on my universal scrolling/updating engine, and I have a problem (not a bug). I just have the engine updating the screen by storing columns and rows of attribute blocks (32x32 pixels) every 16 pixels. Since I'm using vertical mirroring, there is large color distortion on the top and bottom of the screen. <br />The problem is only when scrolling vertically, because there is no horizontal mirroring, so I can have all the color distortion I want off the sides of the screen. So when scrolling vertically, I need to update each row of attributes 16 pixels at a time, keeping the other half that's visible on the other end of the screen the same colors. So I'll need a table in RAM that holds $48 values (Not $40, because sometimes there are 33 tiles being displayed on screen in each row, and I need to have an attribute for that extra tile for every row of attributes.), and I'll need to shift that table a byte left, or right, or 8 bytes left or right (If I press up or down) when I cross 32 pixels.<br /><br />Does anyone have any ideas on how to either shift the table without taking 800 years, or any other suggestions on how to go about updating attributes 16 pixels at a time scrolling in the direction of the mirroring?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Fri Nov 16, 2007 6:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-05-24T07:49:12-07:00</updated>
<published>2006-05-24T07:49:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13305#p13305</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13305#p13305"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13305#p13305"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />You need that extra RAM for collision and deformable geometry (e.g. Mario breaking bricks) anyway.<br /></div><br />No you don't. At least not for simple broken bricks. In my engine, "breakable brick"-kind of things are treated as objects, and some space in regular RAM is used to define states of all objects in the level. With only 256 bytes, you could define the "alive-dead" state of 2048 objects. That is enough to keep track of a lot of broken blocks, and not loading them again if they are "dead".<br /><br />However, if you wanted the player to actually move blocks around and remember their position, then you'd need extra RAM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed May 24, 2006 7:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2006-05-23T22:46:28-07:00</updated>
<published>2006-05-23T22:46:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13299#p13299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13299#p13299"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13299#p13299"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Having a table with only 2 bits value seems a dream in the game loop's point of view, and a nightmare in NMI's point of view, also agreeing that it would be a lot more RAM wasted. If you use two nametables of 15x16 nybbles, it will be 480 bytes overall, wich wastes nearly 2 pages of RAM.<br /></div><br />You need that extra RAM for collision and deformable geometry (e.g. Mario breaking bricks) anyway.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue May 23, 2006 10:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Celius]]></name></author>
<updated>2006-05-23T14:45:09-07:00</updated>
<published>2006-05-23T14:45:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13288#p13288</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13288#p13288"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13288#p13288"><![CDATA[
You know, I was thinking of something. How about you have a copy of the attribute table in RAM. Then have $20 bytes in RAM. The $20 bytes of RAM will be used to store whole bytes that represent 2 bits for an attribute. Then when it's necissary, compress the $20 bytes, and store them on screen. The logic is actually simpler than I thought:<br /><br />1. Decide how you want to designate palletes<br /><br />ex. Having my metatiles arranged so $80-$83 is one, $84-$87 is another, etc. Then take the last two bits of the metatile ID to see the desired attribute bits.<br /><br />$82 - Metatile $80, Tiles $80-$83, Attribits - 10<br />$7F - Metatile $7C, Tiles $7C-$7F, Attribits - 11<br /><br />2. Store the desired pallete IDs in the $20 bytes of RAM<br />3. Compress them into $8 bytes<br />4. Update column/row when neccissary.<br /><br /><br />Does that make sense?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=138">Celius</a> — Tue May 23, 2006 2:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2006-05-23T09:14:50-07:00</updated>
<published>2006-05-23T09:14:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13283#p13283</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13283#p13283"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13283#p13283"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I like to find a general rule, that will work in all cases, even if it makes the one that would be the simplest situation a bit more complicated.<br /></div><br />I 100% agree with that, while as the programmer you don't always have the choise to how you will have to code some stuff.<br /><br />For attributes tables, the "easier way" to do it is to have a routine that update the color of a given metatile with its coordinates (x;y) and that convert it to attribute coordinate, combine it with already existing bits either by having a software copy of the attribute table, or by reading the real one trough $2007, and finally write the byte to $2007.<br />Having a table with only 2 bits value seems a dream in the game loop's point of view, and a nightmare in NMI's point of view, also agreeing that it would be a lot more RAM wasted. If you use two nametables of 15x16 nybbles, it will be 480 bytes overall, wich wastes nearly 2 pages of RAM. It may be good escient use, trough, but I think already combining the bytes in a RAM buffer should be do-able in most circonsences.<br /><br />To read other attributes 2-bits values that aren't modified, if your game isn't too complicated, it is also possible to read the maps 15 metatiles forward/backward if scrolling horizontally and vertically, and 16 metatiles forward/backward if scrolling vetically when the attribute byte is on the scroll lines, and simply read the previous/following meatatile if it the attribute byte is totally scolled. This way may seem complicated, but it actually isn't as long as you only scroll one direction and you're not cheating with a copy of the attribute table in RAM. With more complicated games that merge textboxes and maps such as RPGs, I'd go with the attribute table copy thing, but for a simple game it'd go with that "read backward" method, even if it looks complicated it isn't and it avoid wasting memory / VBlank time.<br />I'd recommand it for all games scrolling in only one dimension. My game scrolls in both directions and does it that way, but it works with nybbles, and metatiles actually are 32x32, and the byte is splitted in nybbles  or not in function of the vertical scrolling.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue May 23, 2006 9:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2006-05-22T22:57:56-07:00</updated>
<published>2006-05-22T22:57:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13278#p13278</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13278#p13278"/>
<title type="html"><![CDATA[Attribute updates]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1545&amp;p=13278#p13278"><![CDATA[
Yeah, that's great for side scrolling games.<br /><br />As for vertical scrolling games... I wish there was a simple way to skip the bottom 16 scanlines of a name table, to avoid the half used attribute bytes at all. The trouble of using mapper IRQ's doesn't seem to pay off though...<br /><br />*Think!*Think!* &gt;_&lt;<br /><br />There has to be a simpler way of handling attributes... Heck, it doensn't have to be so simple, but it has to make enough sense to be programmed without a bunch of "IF's"... I hate code with lot's of branching. I like to find a general rule, that will work in all cases, even if it makes the one that would be the simplest situation a bit more complicated.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon May 22, 2006 10:57 pm</p><hr />
]]></content>
</entry>
</feed>