<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=11072" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-03-23T21:28:26-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=11072</id>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-23T21:28:26-07:00</updated>
<published>2014-03-23T21:28:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127114#p127114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127114#p127114"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127114#p127114"><![CDATA[
I used my spring break to complete the first draft of the emulator, <a href="https://github.com/ZaneDubya/YCPU" class="postlink">hosted at Github</a>, which I'm releasing under the MIT license. It is a 99% implementation of the current specification - every single opcode, the MMU, interrupts, and so on. It also includes an integrated debugger. It runs at around ~40mhz on single-threaded 1.3Ghz Core i5, Windows 7 hosted in Parallels 9/OS X 10.9 - no speed demon, but no slowpoke, either. Screen Shot 2014-03-23 at 11.08.38 PM.pngThe emulator currently fills the memory with random words and executes the same. It does not include an assembler, or any way to load data into memory. Those are pretty essential parts of the puzzle, but they'll have to wait until I have some more free time.<br /><br />Thanks again to everyone who helped me flesh out the spec. I had a ton of fun designing and implementing the YCPU!<br /><br /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />Other ISAs call this the &quot;dirty&quot; flag/bit, where it indicates that the line of cache hasn't been flushed back to system RAM (which is mostly only a problem for SMP).<br /></div>That was exactly the idea I had for it. I wanted to give a developer some indication that a bank of memory had been edited - in case the developer was using a slow storage device for additional virtual memory.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It might be clever to arrange the indices such that the set that can be called from user mode are contiguous.<br /></div>Quite! I've chosen to order them by function however - all the jumps together, for example. Is it more common to keep unprivileged opcodes together than to order by function?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Sun Mar 23, 2014 9:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-03-22T11:48:14-07:00</updated>
<published>2014-03-22T11:48:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127079#p127079</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127079#p127079"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127079#p127079"><![CDATA[
<div class="quotetitle">pops wrote:</div><div class="quotecontent"><br />A - Access flag:<br />        This bit is set every time this bank is written to.<br /></div>Other ISAs call this the &quot;dirty&quot; flag/bit, where it indicates that the line of cache hasn't been flushed back to system RAM (which is mostly only a problem for SMP).<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Specification for the RTC. You get the current time using the HWQ instruction, and can enable/disable the interrupt, as well as specify the interrupt frequency of the CLOCK interrupt.<br /></div>It might be clever to arrange the indices such that the set that can be called from user mode are contiguous.<br />Note that the IBM PC had two separate &quot;RTC&quot;s; The original was an 8253 programmable timer, which allowed for interrupts at 13.125MHz÷11÷n, where 1≤n≤65536. But it didn't store the value while power was off, and had a minimum frequency of 18Hz. The other was added with the 286 AT, and is something equivalent to the MC146818, a conventional RTC, so it's only programmable to interrupt frequencies at powers of 2, 1 to 8192 Hz, as well as 1/min and 1/hr.<br />Modern PCs have added what they call an HPET because the 18 Hz minimum of the 8253, and the coarseness of the RTC's interrupts, didn't allow for the full range of sleep periods OS kernels wanted for reduced power consumption.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sat Mar 22, 2014 11:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-22T10:07:32-07:00</updated>
<published>2014-03-22T10:07:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127078#p127078</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127078#p127078"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127078#p127078"><![CDATA[
I've updated the specification to 0.2j. At this point I'm satisfied with the specification, and barring the discovery of additional errors, I don't see anything changing. Progress on the emulator has been slow, but as of this morning I have the entire thing implemented in software, except for the RTC, Hardware bus, and raising the 'UnPriv Opcode' interrupt while in User mode.<br /><br />In this update are a complete specification for the RTC, updates to the MMU, and new instructions that will help with changing the context of the processor.<br /><br />I added 'P' present and 'A' accessed bits to help with bank management.<div class="quotetitle">2.F.3. THE MMU CACHE wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">    A - Access flag:<br />        This bit is set every time this bank is written to.<br />    P - Not present flag:<br />        If this bit is set, any access to this bank will raise a bank fault.</div><br /></div><br />I specified the state of the U, W, and E bits on bank fault:<div class="quotetitle">2.F.5. BANK FAULTS wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">When a bank fault is raised, the processor status bits U, W, and E will describe<br />the operation that caused the bank fault:<br />        U W E   Bank Fault Type<br />        0 0 0   Bank not present<br />        0 0 1   Attempted execution of execute-protected memory.<br />        0 1 0   Attempted supervisor write of write-protected memory.<br />        1 0 0   Attempted user read of supervisor-only memory.<br />        1 1 0   Attempted user write of supervisor-only memory.<br /><br />Note that writes to ROM banks will fail silently unless the MMU is enabled and<br />the write-protect bit is set, which will generate a bank fault.</div><br /></div><br />Specification for the RTC. You get the current time using the HWQ instruction, and can enable/disable the interrupt, as well as specify the interrupt frequency of the CLOCK interrupt.<div class="quotetitle">2.H. The Real Time Clock wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">The processor contains an integrated Real Time Clock (RTC). The RTC maintains<br />and updates its internal time data indefinitely, even when the processor is<br />powered down. The processor can query the RTC for the current time.<br /><br />The clock provides time data with the following precision:<br />    Year:    8 bits (0-255)<br />    Month:   4 bits (0-11)<br />    Day:     5 bits (0-31)<br />    Hour:    5 bits (0-23)<br />    Minute:  6 bits (0-59)<br />    Second:  6 bits (0-59)<br />    Tick:   16 bits (0-65535)<br />    <br />The RTC also provides a CLOCK interrupt, which can be enabled, disabled, and the<br />frequency of which can be specified. When the RTC interrupt is enabled, the RTC<br />will raise the CLOCK interrupt at an interval which is specified by the<br />processor. The RESET interrupt disables the RTC.</div><br /></div><br />The new 'JCX' instruction allows the processor to change the entirety of the memory space and jump into user mode:<br /><div class="quotetitle">3.H. Jump &amp; Call Instructions wrote:</div><div class="quotecontent"><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">JCX         Unconditional Jump and change Context<br />    1. A pointer to a 32-word array of MMU data is popped from the stack.<br />    2. The MMU is loaded with the data in the 32-word array.<br />    3. The value iPS is popped from the stack.<br />    4. The remaining registers are popped from the stack in this order:<br />       SP, R6, R5, R4, R3, R2, R1, R0, FL, PC<br />    5. PS is set to iPS.<br />    6. Execution continues.<br />    <br />    NOTE: The following operations are the equivalent of 'save context':<br />    PSH R7, R6, R5, R4, R3, R2, R1, R0, FL, PC<br />    TSR R0, PS<br />    PSH R0<br />    ; determine the address where the 32-word MMU cache will be saved.<br />    LOD R0, {Address of 32-word MMU cache store location}<br />    MML R0<br />    PSH R0</div><br /></div><br />One other big change: I've though a ton about how interrupts should work. The supervisor memory state should be switched into memory so it can handle the interrupt, but the previous memory state should be maintained. Here's my solution:<br /><br />On an interrupt, the processor saves the current PS, enters supervisor mode, and disables the MMU. The memory space is as follows:<div class="codetitle"><b>Code:</b></div><div class="codecontent">While the 'Memory Banking' status bit is clear, the MMU is disabled, and the<br />processor's address space is mapped as follows:&#91;quote=&quot;2.F.1. ADDRESS SPACE WHEN THE MMU IS DISABLED&quot;&#93;&#91;code&#93;    Bank $0 - If R status bit is clear, Internal ROM Bank $00<br />              If R statis bit is set, Internal RAM Bank $00<br />    Bank $1 - Internal RAM Bank $01<br />    Bank $2 - Internal RAM Bank $02<br />        ...<br />    Bank $E - Internal RAM Bank $0E<br />    Bank $F - Internal RAM Bank $0F</div><br />Because this is a known state, the OS can plan out what data and routines it needs to have in memory to handle interrupts - and has the entire address space available to put this data in. Because the MMU cache hasn't been changed, the processor can either leave it unchanged and the pre-interrupt memory space will be 100% restored when the M status bit is set again, or save the MMU cache (easy to do with MML/MMS) if the OS needs to load different memory space.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Sat Mar 22, 2014 10:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-19T19:22:31-07:00</updated>
<published>2014-03-19T19:22:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127010#p127010</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127010#p127010"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127010#p127010"><![CDATA[
Implementing these opcodes is a pain in the butt. I'm regretting not designing a RISC processor. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> I spent two hours today trying to figure out the tricky math that allows bit shifting --- through the carry flag, ignoring the carry flag, etc., etc., etc.<br /><br />There were plenty of errors in the spec with regards to flag conditions, which have been fixed. I've updated the spec to 0.2f, which reflects these minor changes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Wed Mar 19, 2014 7:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-19T08:43:07-07:00</updated>
<published>2014-03-19T08:43:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127004#p127004</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127004#p127004"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=127004#p127004"><![CDATA[
Your story made me laugh, and that took the sting out of the realization that my long load/store idea was rather ridiculous.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Wed Mar 19, 2014 8:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-03-18T13:21:52-07:00</updated>
<published>2014-03-18T13:21:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126984#p126984</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126984#p126984"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126984#p126984"><![CDATA[
I think you've just described a page fault, albeit one with specific semantics. It's not so different than the traditional desktop &quot;trying to load data/execute code that has been paged to disk&quot;, only you don't need to stall the process while the kernel loads the data back into RAM.<br /><span style="font-size: 80%; line-height: normal"><br />(At one point for a class assignment I was tasked with designing an MMU, and I chose the lazy/minimalist way out: the PC had a minimum possible value, a maximum possible value, and if anything caused it to go out of bounds it would fault. All loads and stores would fault. Needless to say, my instructor was <em>not</em> pleased.)</span><br /><br />I suspect the overhead of faulting on every access isn't really acceptable for data, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Tue Mar 18, 2014 1:21 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-18T10:32:31-07:00</updated>
<published>2014-03-18T10:32:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126969#p126969</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126969#p126969"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126969#p126969"><![CDATA[
I've been thinking about jump / load / store long instructions (&quot;long access&quot;). I think a very reasonable addition would be to have the requested bank index in R0 for these instructions. If the OS is handling bank allocation, each process will have its own list of bank indexes (range from $0000-$FFFF), and the compiler will allocate data/text segments and generate long access opcodes as appropriate. These instructions will raise a 'long access' interrupt, and the OS will have to use R0 and the upper bits of the generated address to place the appropriate bank in virtual memory.<br /><br />Broken out:<br /><ol style="list-style-type: decimal"><li>At some point during initialization, a process informs the OS that it is requesting a new bank of free memory, which it will refer to as bank $20.</li><li>The OS reserves HW device $02, bank $05 for this bank.</li><li>During execution, the process executes a 'jump long' instruction with R0 = $20 and Address = $F040.</li><li>YCPU raises 'long access' interrupt with R0 = $20 and P2 = $F040.</li><li>OS checks its list of banks for this process. This process stores it's bank $20 in HW device $02, bank $05.</li><li>OS uses MMW instructions to switch in this bank in virtual address space $F000-$FFFF.</li><li>OS transfers control back to the process.</li></ol><br />This would be a fairly expensive operation in terms of cycles, but it would allow access to 32-bits of physical address space while maintaining 16-bit registers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Tue Mar 18, 2014 10:32 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-03-17T22:54:29-07:00</updated>
<published>2014-03-17T22:54:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126935#p126935</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126935#p126935"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126935#p126935"><![CDATA[
How about just making the program counter be 24 bit, with long jumps and long returns?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Mon Mar 17, 2014 10:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-03-16T18:41:21-07:00</updated>
<published>2014-03-16T18:41:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126878#p126878</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126878#p126878"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126878#p126878"><![CDATA[
<div class="quotetitle">pops wrote:</div><div class="quotecontent"><br />although I initially decided on 4 KiW, I'm aware that everything from context switching to loading large arrays of data would be sped up by larger pages (perhaps 8 KiW or 16 KiW). Programs that had large global sets of data or functions spread throughout memory and did not access these in ways that a compiler could predict and optimize would be slower, perhaps.<br /></div>On some level, the number of banks you have is the number of different libraries you can easily have available at the same time. (Less one for the program itself, and at least one for the program's data).<br /><br />You're basically encountering the reasons that people went to a 32-bit world for &quot;real&quot; machines. Psychopathicteen's suggestion for native hardware long pointer load/store will help with this a little ... you free up one or two banks formerly for data, but code banks will still be a limitation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Mar 16, 2014 6:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-16T16:53:43-07:00</updated>
<published>2014-03-16T16:53:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126876#p126876</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126876#p126876"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126876#p126876"><![CDATA[
Thanks lidnariq. I think I now have a much better handle on how memory paging will work. I'm still considering what the optimal page size might be: although I initially decided on 4 KiW, I'm aware that everything from context switching to loading large arrays of data would be sped up by larger pages (perhaps 8 KiW or 16 KiW). Programs that had large global sets of data or functions spread throughout memory and did not access these in ways that a compiler could predict and optimize would be slower, perhaps. Just different things to weigh.<br /><br />I've completed a very basic console emulator that fills the memory space with random data and then executes the same. Not super impressive - and I have only a little more than half of the opcodes implemented and haven't even tested the output of those - but it's a start!ycpu-emulator.png<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Sun Mar 16, 2014 4:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2014-03-14T13:12:06-07:00</updated>
<published>2014-03-14T13:12:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126802#p126802</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126802#p126802"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126802#p126802"><![CDATA[
<div class="quotetitle">pops wrote:</div><div class="quotecontent"><br />On a similar note --- how does this work on a processor with segment registers? I see a similar problem: without changing the segment registers, a child process only has access to (# of segment registers * addressable units per segment register) address space. How does a child process on, say, a 286 know what segments are allowed for access? Does the kernel handle this?<br /></div>In practice, 286 protected mode was basically not used for anything (There were Xenix and Minix ports, but otherwise...), and with the advent of 386 protected mode's 32-bit pointers we mostly (but not entirely) ignored the segment registers.<br /><br />C compilers targeting 8086 real mode (with segments) usually provided the concept of a &quot;far pointer&quot; which would use one of the segment pointers to deal with data bigger than 64 KiB. (<a href="http://www.delorie.com/djgpp/v2faq/faq17_7.html" class="postlink">here's DJGPP's comments</a>) But they were really slow ... checking when you had to move bits between the segment and offset words added a costly amount of overhead.<br /><br />Neither of these really help your question, which is how do you meaningfully provide the abstractions of &quot;how do I address more than 64KiW of memory when my near pointers only allow 64 KiW&quot;. One thing that works to your advantage here is that you <em>don't</em> have the 8086's kinda-useful (for relocations) mostly-awful segmentation: there's no overlap (no <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">segment&lt;&lt;4 + offset</tt>) and so the math is simpler. Regardless, you'll need help from both the kernel (to provide a series of 4 KiW slices that make a virtual larger chunk of memory) as well as from your compiler (to provide a notion of far pointers and handle requesting bank switches <strong>not</strong> on every memory access)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Mar 14, 2014 1:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-14T11:25:10-07:00</updated>
<published>2014-03-14T11:25:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126800#p126800</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126800#p126800"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126800#p126800"><![CDATA[
I've started work on the emulator --- and am attempting to catch up on schoolwork from the past week. Neither of these tasks is continuing at a particularly fast pace.<br /><br />I've been thinking about memory management again, from the perspective that this processor should be able to run an OS that can run multiple child processes. With this in mind, I'm trying to think of how a program written in C, that does not necessarily 'know' what underlying hardware its running on, and therefore has no direct control over memory banking, segment registers, etc., could access more than the 64kw virtual address space which I've specified.<br /><br />The NES has 64kb of address space, but it can access additional banks of memory using a MMC. I have a similar scheme for my processor. It occurs to me that a single program on this processor would have no trouble with managing memory, as it would always know which banks it has access to and where all of its data is stored. This would certainly be true for a kernel...<br /><br />... but child processes wouldn't know which banks they are located in, and therefore wouldn't know how to access additional memory. I have no background in OS theory - how could an operating system on this processor expose more memory to a child process?<br /><br />On a similar note --- how does this work on a processor with segment registers? I see a similar problem: without changing the segment registers, a child process only has access to (# of segment registers * addressable units per segment register) address space. How does a child process on, say, a 286 know what segments are allowed for access? Does the kernel handle this?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Fri Mar 14, 2014 11:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-13T22:06:11-07:00</updated>
<published>2014-03-13T22:06:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126784#p126784</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126784#p126784"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126784#p126784"><![CDATA[
After reading about which interrupts can be masked on other CPUs, I realize that SWI should be unmaskable. Thanks for pointing this out.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Thu Mar 13, 2014 10:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Joe]]></name></author>
<updated>2014-03-13T20:29:17-07:00</updated>
<published>2014-03-13T20:29:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126782#p126782</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126782#p126782"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126782#p126782"><![CDATA[
That makes a lot more sense now. (However, I did notice in §2.D.3, shouldn't it say interrupts restore PS, not FL?)<br /><br />The only thing I have to ask right now is about this:<br /><div class="quotetitle">§2.D.2 wrote:</div><div class="quotecontent"><br />software interrupts will not be acknowledged by the CPU if the I status bit is clear<br /></div><br />What, exactly, happens when a program executes SWI when the I status bit is clear?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5948">Joe</a> — Thu Mar 13, 2014 8:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[pops]]></name></author>
<updated>2014-03-13T19:47:06-07:00</updated>
<published>2014-03-13T19:47:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126776#p126776</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126776#p126776"/>
<title type="html"><![CDATA[Re: YCPU: an imaginary 16-bit processor.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11072&amp;p=126776#p126776"><![CDATA[
Thanks Joe. I've really appreciate your comments, and I've updated the Bootstrap and Interrupt specifications to implement your suggestions. Specifically:<div class="quotetitle">Joe wrote:</div><div class="quotecontent"><br />You describe reset as a series of instructions executed by the processor, but I've never seen anything like that before. Usually reset is just described as the initial values loaded into registers when the CPU executes, without explicitly describing how those values get there.<br /></div>It seems I've put how little I know about hardware on display again. The bootstrap sequence is now written as you suggested.<div class="quotetitle">Joe wrote:</div><div class="quotecontent"><br />In a similar vein, &quot;RTI&quot; and &quot;SWI&quot; are described as a series of instructions, but also use R5 and R6 as scratch variables. That contradicts your description of hardware interrupt handling, which makes no mention of those two registers.<br /></div>Here, I think I was just being too enthusiastic with regards to imagining how the CPU might work. I've rewritten the RTI/SWI instructions to not include R5 and R6, included an explanation of how the processor responds to a hardware interrupt, and made sure not to clear the Q flag until the very last instruction.<br /><br />Specification is updated to 0.2e, which I've posted on the first post of this thread. Changes as follows:<div class="codetitle"><b>Code:</b></div><div class="codecontent">0.2e 03/13/2014<br />   Complete rewrite of 'Interrupts' section.<br />   Added new 'P2' register which is used by the BankFault interrupt.<br />   Added new 'R' status bit in PS which defines if ROM or RAM should be<br />   switched to bank 0 on interrupt.<br />   Clarified what banks are loaded when the MMU is enabled/disabled.<br />   Clarified bootstrap sequence.<br />   Made MMR/MMW privileged instructions.<br />   Added Real Time Clock stub.<br />   Changed bit pattern of ALU to match FPU.<br />   Noted that Immediate addressing is not available with the STO opcode.<br />   Minor spelling errors.</div>The Specification is also available online as a <a href="https://dl.dropboxusercontent.com/u/22773626/ycpu.txt" class="postlink">text document</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4328">pops</a> — Thu Mar 13, 2014 7:47 pm</p><hr />
]]></content>
</entry>
</feed>