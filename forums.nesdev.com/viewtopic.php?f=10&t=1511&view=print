<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NMI vs. Vblank???</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NMI vs. Vblank???</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1511">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1511</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nineTENdo</b> [ Mon May 15, 2006 4:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NMI vs. Vblank???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What is the difference between these two?  
<br />How do they relate?  
<br />What can you use them for?
<br />
<br />What is Rendering?
<br />
<br />Is NMI where all the sprite action and scrolling occur?
<br />
<br />I think after getting hardcore ill write my own tutorials and documentation for the NES world.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jaffe</b> [ Mon May 15, 2006 5:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The NMI-interrupt is triggered by the PPU when VBlank occurs. The CPU then push the PC and status registers on stack, and jumps to the NMI-routine that you give the adress to in $FFFA (correct me if any of this is wrong). The code in the NMI section should always end with a RTI instruction that makes the CPU pop back PC and status register, and continue where it had come when the NMI was triggered. 
<br />
<br />In the NMI-code, you will probably do all the stuff that has to be done each VBlank (50 / 60 times per second), like writing to VRAM (since you can't write to VRAM when the PPU are writing on the screen).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Mon May 15, 2006 6:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI vs. Vblank???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">What is the difference between these two?  <br />How do they relate?  <br />What can you use them for?</div><br /><br />VBlank is what happens once every ~1/60th of a second. NMI is an interrupt that happens at each VBlank if you enable it.<br /><br /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">What is Rendering?<br /><br />I think after getting hardcore ill write my own tutorials and documentation for the NES world.</div>
<br />
<br />If you don't know what rendering is, then it'll probably be quite a while before you're qualified to write tutorials or documentation.
<br />
<br />Also, with respect to your recent topic names, only <strong>one</strong> question mark is used when denoting a question.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon May 15, 2006 10:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's exactly what I was saying in the other topic. Most tutorials doesn't insist too much on that very important aspect of NES programming that is rendering and timing.
<br />Most <em>tutorials</em> just mention that NMI is happening 60 times per second if you enable them, and doesn't mention correctly what is VBlank, its relation with the screen rendering, why it is the base of timing in all NES games, that the frequency slows down in PAL systems, that you cannot write to the PPU outside of VBlank, that VBlank is about 10% of the frame and that means all updating should be here, etc, etc....
<br />Everyone says that on the boards, but there is nothing in <em>tutorials</em>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon May 15, 2006 2:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Most tutorials just mention that NMI is happening 60 times per second if you enable them, and doesn't mention correctly what is VBlank, its relation with the screen rendering, why it is the base of timing in all NES games, that the frequency slows down in PAL systems, that you cannot write to the PPU outside of VBlank, that VBlank is about 10% of the frame and that means all updating should be here, etc, etc.... <br />Everyone says that on the boards, but there is nothing in tutorials.</div>
<br />
<br />And that's why. Everyone wastes time posting well-worded answers in the forums, only to be lost in the mess over time. Rather than benefiting <em>every single person</em> looking for that information in the future, it only benefits a few. Want to work in a group and intentionally design some good documentation?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nineTENdo</b> [ Mon May 15, 2006 7:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI vs. Vblank???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Quietust wrote:</div><div class="quotecontent"> NMI is an interrupt that happens at each VBlank if you enable it.<br /><br /></div>
<br />
<br />Why would you want to enable it is want i dont understand.  What im thinking  what happens is that you mainly use them when making demos that sprite action is happening and scrolling action is happening.  Take for example a sprite moving back and forth on the screen. It moves 20 steps.
<br />Vblank,Step 1, Vblank, Step 2, Vblank, Step 3,Vblank...Step 20.  
<br />
<br />The NMI is the non maskable interrupt (sprite) that happen at the end of vblank that moves on the screen and is updated by the vblank each move.
<br />
<br />Thats what im thinking is happening.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon May 15, 2006 7:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: NMI vs. Vblank???</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">Why would you want to enable it is want i dont understand.</div><br /><br />Two reasons:<br /><br />1)  So you can be notified when VBlank starts.  This is important because VBlank is the only time that you can draw things to the nametables, palettes, or update sprites without having to shut off the screen or disrupt the picture being displayed to the player.<br /><br />2)  A steady framerate of 60 fps is how you time your game.  You can't just run the game as fast as the code will execute, or else the game will fly by way too fast for the user to react to it.  Plus it will move faster or slower depending on how much work is being done, causing an inconsistent framerate for the player, making the game very awkward to play.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Take for example a sprite moving back and forth on the screen. It moves 20 steps.<br />Vblank,Step 1, Vblank, Step 2, Vblank, Step 3,Vblank...Step 20.</div><br /><br />EXACTLY.  That sprite would be moving 1 step (let's say 1 pixel) per frame.  It'll produce a constant speed for the sprite.  You'll want to do this in games, too, like have the screen scroll at a constant rate, or have the player walk at a constant rate.<br /><br />If you want to have the player move 2 pixels per frame, then you need to be notified at every frame so that you know when to move the player a little more.  The NMI is what notifies you that a new frame is starting.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The NMI is the non maskable interrupt (sprite) that happen at the end of vblank that moves on the screen and is updated by the vblank each move.</div>
<br />
<br />No no.   NMI is not a sprite.  It has nothing to do with sprites.  An NMI is what you said... a "non maskable <span style="text-decoration: underline">interrupt</span>".  "Interrupt" meaning that <em>all it does</em> is interrupt your code and make you jump somewhere else.  That's how you know that a new frame has started, when your program gets pulled to a different area of code.
<br />
<br />Also -- NMI happens at the START of VBlank... not at the end.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nineTENdo</b> [ Mon Jun 26, 2006 1:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello Everyone,
<br />       I gotta new question about the STACK and the NMI.  Are  NMI routines carried out in the stack.    Ive seen alot Push, Pull carried out in NMI routines before and after  the code within the NMI.  How does this work? Any  Helpful tips?  Also ive seen that on reset many people Set the stack at #$FF.  Do they do this so it will start  at the beginning "00" upon exection of the NMI code.
<br />
<br />Thanks in Advance,
<br />EL

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Jun 26, 2006 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A stack is a programming concept which stores variables in "FILO" (First In, Last Out) order.
<br />
<br />Imagine, if you would, a stack of plates.  You can only access the top plate in the stack, to reach the plate below it, you must first remove the top plate so that the plate below it is the new top.
<br />
<br />A programming stack works in such a fashion.  Numbers are "pushed" onto the stack (like adding a new plate on top), and then can later be "pulled" off the stack (like taking the top plate off).  When you pull from the stack, you will receive the number most recently pushed.
<br />
<br />To demonstrate this, here's some examples with PHA, and PLA.  If you're unfamiliar with these instructions, PHA just pushes the value in A onto the stack, and PLA pulls the top value off the stack and puts it in A.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; assume for this example, that here, the stack is empty:<br />; Stack -&gt; &#91;empty&#93;<br /><br /><br />LDA #$20<br />PHA&nbsp; &nbsp; &nbsp; ; push $20 onto the stack<br /><br />; Stack -&gt; $20<br /><br />LDA #$15<br />PHA<br /><br />; Stack -&gt; $15&nbsp; &#40;top&#41;<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $20&nbsp; &#40;bottom&#41;<br /><br />LDA #$3F<br />PHA<br /><br />; Stack -&gt; $3F<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $15<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $20&nbsp; &#40;bottom&#41;<br /><br />LDA #$00&nbsp; ; fill A with garbage<br />PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; pull from the stack, put in A<br /><br />; Stack -&gt; $15&nbsp; &#40;top&#41;<br />;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $20&nbsp; &#40;bottom&#41;<br />;<br />; A is now $3F -- the value pulled from the top of the stack<br />;&nbsp; though it was briefly set to $00 -- I only did that to show that PLA<br />;&nbsp; will change the value in A.&nbsp; After that PLA, A will no longer be $00<br /><br />PLA<br /><br />; Stack -&gt; $20&nbsp; &#40;top &amp; bottom&#41;<br />;<br />; A is now $15<br /></div><br /><br />Interrupts (NMI, IRQ), automatically push the old PC and status flags to the stack (so that when you RTI, status flags are restored to how they were before the NMI).  However, A, X, and Y are NOT automatically pushed, so they will retain their values through an interrupt.  This can be fatal if an NMI occurs during some calculations:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">somecode:<br />&nbsp; CLC<br />&nbsp; LDA #$10<br />&nbsp; ADC #$10<br />&nbsp; STA $00<br />&nbsp; RTS<br /><br />nmi:<br />&nbsp; LDA #$00<br />&nbsp; RTI<br /></div><br /><br />if you look at 'somecode', you'll see that it will add $10 and $10 together, then store the result ($20) at address $00.<br /><br />BUT!  What happens if the NMI occurs right between that LDA and ADC command!  The CPU will do the following:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; CLC<br />&nbsp; LDA #$10<br /><br />--&nbsp; NMI OCCURING, jump to NMI code&nbsp; --<br /><br />&nbsp; LDA #$00<br />&nbsp; RTI<br /><br />--&nbsp; RTI returns to area before NMI occured, continue with original code --<br /><br />&nbsp; ADC #$10<br />&nbsp; STA $00<br />&nbsp; RTS<br /></div><br /><br />now, instead of adding $10 and $10 together, it's actually adding $00 and $10 together!<br /><br />Because of this it's common practice for games to back up A X and Y in an interrupt, then restore them before RTI.  This way A X and Y will not be changed by the interrupt.<br /><br />You've probably seen this code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br />&nbsp; PHA&nbsp; &nbsp;; push A onto the stack &#40;back it up&#41;<br /><br />&nbsp; TXA<br />&nbsp; PHA&nbsp; &nbsp;; push X onto the stack<br /><br />&nbsp; TYA<br />&nbsp; PHA&nbsp; &nbsp;; push Y onto the stack<br /><br /><br />;&nbsp; blah blah, do NMI stuff here<br /><br />&nbsp; PLA<br />&nbsp; TAY&nbsp; &nbsp;; pull Y off the stack &#40;restore the backed-up version&#41;<br /><br />&nbsp; PLA<br />&nbsp; TAX&nbsp; &nbsp;; pull X off the stack<br /><br />&nbsp; PLA&nbsp; &nbsp;; pull A off the stack<br /><br />&nbsp; RTI<br /></div>
<br />
<br />
<br />As for why games set the stack pointer to $FF at startup -- this is due to the stack being "upside down" and games want the bottom of the stack to start at the VERY bottom to allow for the most stack space possible.  I'm too lazy/tired to explain it any further than this, maybe someone else will field this part.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-_pentium5.1_-</b> [ Mon Jun 26, 2006 2:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">A stack is a programming concept which stores variables in "FILO" (First In, Last Out) order.</div>
<br />BTW, the abbreviation normally used is LIFO (Last In, First Out).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Jun 26, 2006 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've seen both, but yeah that is clearer.
<br />
<br />I actually mistakenly typed FIFO at first, then realized that wasn't right.  I guess the change to FILO was just more instinctive, even though it would have been just as easy to change to LIFO.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nineTENdo</b> [ Mon Jun 26, 2006 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />As for why games set the stack pointer to $FF at startup -- this is due to the stack being "upside down" and games want the bottom of the stack to start at the VERY bottom to allow for the most stack space possible.  </div>
<br />
<br />So is starts $FF and goes to $00?
<br />
<br />By the way thanks for the quick and lengthy reply.  I appreciate it very much:)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Mon Jun 26, 2006 4:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">So is starts $FF and goes to $00?</div><br /><br />Yes.  Not FF-&gt;00, but rather FF-&gt;FE-&gt;FD-&gt;...-&gt;01-&gt;00<br /><br />If the Stack Pointer (hereon: "SP") is $FF, pushing a value to the stack will change SP to $FE.  Pushing another value decreases SP again and makes it $FD.  Pulling would increase it.<br /><br />The stack lies in RAM on the $01xx page.  The top of the stack is determined by SP -- if SP is $E4, then the top of the stack is $01E4 (here, when I say "top", I mean the space which is to receive the next pushed value).  When SP is $FF it typically means the stack is empty -- hence why many games reset SP to that on startup.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By the way thanks for the quick and lengthy reply.  I appreciate it very much:)</div>
<br />
<br />No prob ^^

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jun 26, 2006 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nineTENdo wrote:</div><div class="quotecontent">So [the 6502 stack] starts $FF and goes to $00?</div><br />Yes, it starts at $FF and grows toward $00. It goes through $FE, $FD, $FC, $FB, $FA, etc., with each push. A 'PHA' or 'PHP' is one push, a 'JSR' two pushes, and a 'BRK' or interrupt three pushes. Many games never push the stack pointer deeper than $C0, meaning they can use the rest of the memory normally used by the stack for other purposes. (The stack lives in addresses $0100 through $01FF of CPU memory.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">By the way thanks for the quick and lengthy reply.  I appreciate it very much:)</div>
<br />At least it's easier than having only the donknotts clone to talk to.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mozz</b> [ Wed Jun 28, 2006 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The point of using the stack is that you don't have to know the exact address where your values are being stored -- it might even be different for different executions of the same code, under different circumstances.  The <strong>stack pointer</strong> register (S) keeps track of the current "top" of the stack as you push or pop values.
<br />
<br />The important thing about using the stack is that if you push 3 values---A then B and then C---and then try to pop 3 values, you know you will get the values C, B and A back in that order.  It doesn't matter exactly where they were stored (unless you try to store too many and run out of space!)
<br />
<br />Of course the stack abstraction is just that, a useful abstraction.  You can still access the stack memory addresses with normal instructions if you know the address.  But most of the time you won't want to know it.
<br />
<br />So a subroutine call (JSR) works by pushing two bytes (the return address) and then changing the PC to the new address.  When you return with an RTS or whatever, it will pop two bytes and set the PC back to that address, "return"ing you to the next instruction right after the JSR.
<br />
<br />An "interrupt" is a hardware event that causes the CPU to automatically push its old PC (and perhaps other info, such as flags?  it varies for different processor types, but the basic idea is the same) and then jump to a new address for handling the interrupt.  When you return from the interrupt (with e.g. an RTI instruction) it will pop those same bytes that were pushed when the interrupt occurred, and your program can resume doing whatever it was doing before it was "interrupted".  It won't even know the difference (unless you do something in your interrupt handler which affects the state of the main program).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>