<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 6502 ASM trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">6502 ASM trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Nov 13, 2007 3:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll probably do some improving in the future, but for now, I think it's pretty okay. I'm very comfortable using it. I think I will first do something where instead of having the unused ones going to "Return", I think I'll have the first one that's not used go to a routine that just does RTI, and not waste NMI time. However, as it is, I can simply tell it to do what I want whenever, and I won't have to look at an ugly NMI routine when debugging.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Nov 13, 2007 10:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I understand why you needed such a dynamic way to handle your NMIs, because I had the same problem. My game has a LOT of things to do during VBlank, but the time is really short and there is no way to do everything every frame. Because of this, some tasks are interchangeable. For example: I have reserved some time for updating a row of metatiles, but if the screen did not scroll there is no need to, and I'll update the palette instead. I'm pretty sure that a similar situation inspired you to come up with that mode.
<br />
<br />But I see a serious problem with your solution: The insane amount of valuable zero page RAM you set aside just for holding pointers that most of the time you won't even use.
<br />
<br />My solution to the same problem, as I said above was to define interchangeable tasks. My solution ends up looking a lot like yours, but I waste less memory by defining which tasks replace which.
<br />
<br />As I said before, I use the concept of multiple NMIs. In the main game, for example, which has it's own NMI, I have defined that during VBlank I need to:
<br />1. Update a row of metatiles;
<br />2. Update a column of metatiles;
<br />3. Update the palette;
<br />4. Update sparse metatiles;
<br />5. Update the OAM through a sprite DMA;
<br />6. Update some patterns;
<br />
<br />There is no time to do it all every frame, but I can right away tell what will be done every frame: OAM updates. The rest of the tasks I handle just like you:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;jsr CopySlot1<br />&nbsp; &nbsp;jsr CopySlot2<br />&nbsp; &nbsp;jsr CopySlot3<br /><br />&nbsp; &nbsp;;Do OAM transfer here<br />&nbsp; &nbsp;;Handle music here;<br /><br />&nbsp; &nbsp;rti<br /></div><br />This would be the NMI for the main game. I used a different trick to compensate for the lack of an indirect JSR instruction:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CopySlot1:<br />&nbsp; &nbsp;jmp &#40;CopyRout1&#41;&nbsp; &nbsp;;column or palette<br />CopySlot2:<br />&nbsp; &nbsp;jmp &#40;CopyRout2&#41; ;pattern block or palette and metatiles<br />CopySlot3:<br />&nbsp; &nbsp;jmp &#40;CopyRout3&#41; ;row or metatiles</div><br />With the concept of interchangeable tasks, I defined just a few time slots that I allocate to subroutines as needed. And in the cases where you need to do 2 things during the time otherwise used by a slower routine, you can just make a wrapper routine to call the other two:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">UpdatePalette:<br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts<br /><br />UpdateMetatiles:<br />&nbsp; &nbsp;&#40;...&#41;<br />&nbsp; &nbsp;rts<br /><br />UpdatePAletteAndMetatiles:<br />&nbsp; &nbsp;jsr UpdatePalette<br />&nbsp; &nbsp;jsr UpdateMetatiles<br />&nbsp; &nbsp;rts</div>
<br />Anyway, I'm just pointing out a different solution for the same problem. Your way is probablymore dynamic, because you can just use the same NMI routine for the whole game. But when combined, the two techniques I use (multiple NMIs with interchangeable tasks) are almost as dynamic, without using so much RAM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Nov 14, 2007 9:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, Tokumaru's solution also looks clever, and definitely more optimal.
<br />My simple solution so far has always been to just give a priority to tasks. If something like the palette should absolutely be updataed, the main programm knowns that it should do it when all request to update metatiles are done, else the palette will be ignored, so I just programm things with this in mind. My game doesn't scroll very often and does it pretty slowly, so it is dratiscally differnt from a sonic platformer wich scrolls very fasts and almost always.
<br />I will post the NMI I use (and that worked fine for me) for global information, but be sure to not use it as it or anything, because that's a piece of code I actually use (not just an example).
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">NMI<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;tya<br />&nbsp; &nbsp;pha&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;;Saves the registers<br />&nbsp; &nbsp;bit $2002.w&nbsp; &nbsp;&nbsp; &nbsp;;VBlank flag clear<br /><br />&nbsp; &nbsp;lda SpriteDMAFlag<br />&nbsp; &nbsp;beq _skipSpriteDMA&nbsp; &nbsp;;Is the sprite buffer ready ?<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta SpriteDMAFlag&nbsp; &nbsp;;Sprite buffer is read<br />&nbsp; &nbsp;sta $2003.w<br />&nbsp; &nbsp;lda #$02<br />&nbsp; &nbsp;sta $4014.w&nbsp; &nbsp;&nbsp; &nbsp;;Do sprite DMA at $200<br />_skipSpriteDMA<br />&nbsp; &nbsp;lda BlockFlag<br />&nbsp; &nbsp;beq +<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta BlockFlag<br />&nbsp; &nbsp;jsr WriteBlock&nbsp; &nbsp;&nbsp; &nbsp;;Need to write some block data to the PPU ?<br />&nbsp; &nbsp;jmp _skipPPUUpload<br />+&nbsp; &nbsp;lda PPUStringSize&nbsp; &nbsp;;Need to upload a name-table string ?<br />&nbsp; &nbsp;beq +<br />&nbsp; &nbsp;jsr WriteNamStrings<br />&nbsp; &nbsp;jmp _skipPPUUpload<br />+&nbsp; &nbsp;lda PalFlag&nbsp; &nbsp;&nbsp; &nbsp;;Need to upload the palette ?<br />&nbsp; &nbsp;beq _skipPPUUpload<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta PalFlag<br />&nbsp; &nbsp;jsr WritePalette<br />_skipPPUUpload<br />&nbsp; &nbsp;lda #$3f<br />&nbsp; &nbsp;sta $2006.w<br />&nbsp; &nbsp;lda #$00<br />&nbsp; &nbsp;sta $2006.w<br />&nbsp; &nbsp;sta $2006.w<br />&nbsp; &nbsp;sta $2006.w<br />&nbsp; &nbsp;sta $2005.w&nbsp; &nbsp;&nbsp; &nbsp;;PPUScrollH is always 0 &#40;exept when changed midframe&#41;<br />&nbsp; &nbsp;lda PPUScrollV<br />&nbsp; &nbsp;sta $2005.w&nbsp; &nbsp;&nbsp; &nbsp;;Upload PPU regs<br />&nbsp; &nbsp;lda M2000<br />&nbsp; &nbsp;sta $2000.w<br />&nbsp; &nbsp;jsr PlaySound<br />&nbsp; &nbsp;jsr NumberLogic<br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;;Clears the flag to stop waiting the frame<br />&nbsp; &nbsp;sta NMIFlag<br />&nbsp; &nbsp;pla&nbsp; &nbsp;&nbsp; &nbsp;;Restore registers<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />IRQ&nbsp; &nbsp;rti</div><br />So yeah this is exactly the routine I use, and it's absolutely simple, and works absolutley fine. The Sprite DMA is updated every frame, unless the main programm doesn't do this or if the game lags. Then the other PPU updates are sorted by priority, first comes the "block" update (block is just the word I used for metatiles, where the routine write a single "big" 32x32 metatile on the screen, the format I use in my game). If no block write is requested, it will check if a regular PPU string update should be done (there is a universal format my game uses for all non-map graphics). If none of this is to be done, the palette is updated if needed. If all 3 of these things are requested by the main program at the exact same time, 3 NMIs are needed in order to complete everything. Finally the music is handled every frame (no matter if we're still in VBlank or not), and "Number Logic" is applied (this routine increase/decrease some counters/timers and re-seed the random number generator). Then the NMI returns. I could do some improvement, because I guess it could be possible to update both a PPU String and the palette at the same time, or it could be possible to update only the BG or sprite palette to save time, however I keep things as simple as possible in the NMI (as long as it doesn't limit too much the main programm), and try to work with it as it.<br /><br />By the way I noted I used a coule of times (4 exactly) code looking like this :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">asl A<br />tax<br />lda JumpTable,X<br />sta PointerL<br />lda JumpTable+1,X<br />sta PointerH<br />jmp &#91;Pointer&#93;<br /><br />JumpTable:<br />&nbsp;.dw Adress1<br />&nbsp;.dw Adress2<br />&nbsp;etc...</div><br />Would it be possible to just replace it by this and save space without corrupting anything ?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">asl A<br />tax<br />lda JumpTable,X<br />pha<br />lda JumpTable+1,X<br />pha<br />rts<br /><br />JumpTable:<br />&nbsp;.dw Adress1-1<br />&nbsp;.dw Adress2-1<br />etc...</div>
<br />This saves 4 bytes and the use of the word Pointer, which is free for use anyways since I already wrote the code with that in mind and since I use that variable for other fonctions as well.
<br />
<br />By the way, since Tokumary mentionned this, I have a complete game engine (without much running on it for now) that uses zero page bytes $00 to $9e (62% of zero page taken), uses BSS RAM bytes $300 to $583 (plus the stack and OAM taking $100-$2ff), making the BSS RAM (50.2% of BSS RAM taken, without counting the OAM nor the stack).
<br />So even if your game engine is more complex that mine, and even if the my game isn't compltetly completed, I guess RAM is still somewhere you have enough space to work what you must do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Nov 14, 2007 10:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">But I see a serious problem with your solution: The insane amount of valuable zero page RAM you set aside just for holding pointers that most of the time you won't even use.<br /></div>
<br />
<br />I really don't see how I'm using an insane amount of zero page. I just think I'm using a moderately sized section of it. I have plenty of RAM to work with. I can store a variable or two in something that isn't zero page. I'm sure it'll take more time, and the cycles will add up. But, for the flexibility that I have now, I think it's well worth the zero page. I'll change it in the future to use less.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Nov 14, 2007 12:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried the pha/pha/rts thing, and it works fine ! In fact I think this is the standard way to do the jmp() thing on some other processors who doesn't have the jmp() isntruction.
<br />
<br />About the NMI I trough of a programm who can automatically write an adress to $2006 and a string to $2007, while computing the time it will take to itself so it can automatically maximize the amount of data written to the PPU. Then the main programm doesn't have to worry much about things, as things are getting updated as soon as possible, and in the order specified, with as much data as possible on one single frame, the rest being automatically left for the next frame. Thing of it as a FIFO between the main programm and the NMI, where the buffer is emptied by a computed size automatically. This should be somewhat complicated to implement, tough. I'd prefer this to have the programm manually change the adress where the NMI is going to update things, tough, as the NMI can happen anywhere and you're always set for it, and the code will be overall more clearer, and easier to use as view from the main programm.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 12, 2008 1:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Soooo... I was thinking of a way to generalize the fast updating of Name Tables I talked about in <a href="http://nesdev.com/bbs/viewtopic.php?p=29772#29772" class="postlink">this post</a>, and I ended up coding some sort of pseudo-DMA thing for writing data to the PPU.
<br />
<br />This uses a lot of ROM space, because of the big jump table and the big unrolled loop (about 1KB total, not counting the ByteTable I use for X and Y operations), but it optimizes a lot the whole process of writing data to the Name Tables. Here is the code I used to test the idea (it runs on the 6502 simulator):
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">TempAddress = $00<br />Buffer = $0480<br /><br />&nbsp; &nbsp;.start Reset<br /><br />&nbsp; &nbsp;.org $8000<br /><br />ByteTable:<br />ByteValue .set 0<br />&nbsp; &nbsp;.rept 256<br />&nbsp; &nbsp;.db ByteValue<br />ByteValue .set ByteValue + 1<br />&nbsp; &nbsp;.endr<br /><br />JumpTableLo:<br />CopyAddress .set CopyEnd - 6<br />&nbsp; &nbsp;.rept 128<br />&nbsp; &nbsp;.db &lt;CopyAddress<br />CopyAddress .set CopyAddress - 6<br />&nbsp; &nbsp;.endr<br />JumpTableHi:<br />CopyAddress .set CopyEnd - 6<br />&nbsp; &nbsp;.rept 128<br />&nbsp; &nbsp;.db &gt;CopyAddress<br />CopyAddress .set CopyAddress - 6<br />&nbsp; &nbsp;.endr<br /><br />Reset:<br />&nbsp; &nbsp;ldx #$7f<br />FillBuffer:<br />&nbsp; &nbsp;txa<br />&nbsp; &nbsp;sta Buffer, x<br />&nbsp; &nbsp;dex<br />&nbsp; &nbsp;bpl FillBuffer<br /><br />&nbsp; &nbsp;lda #$0f&nbsp; &nbsp;;data length<br />&nbsp; &nbsp;ldx #$00&nbsp; &nbsp;;data offset<br />&nbsp; &nbsp;jsr UpdateData<br /><br />&nbsp; &nbsp;brk<br /><br />UpdateData:<br />&nbsp; &nbsp;;INPUT:<br />&nbsp; &nbsp;;A: length of the string to copy -1<br />&nbsp; &nbsp;;X: where in the buffer the string starts;<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ByteTable, x<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda JumpTableLo, y<br />&nbsp; &nbsp;sta TempAddress+0<br />&nbsp; &nbsp;lda JumpTableHi, y<br />&nbsp; &nbsp;sta TempAddress+1<br />&nbsp; &nbsp;jmp &#40;TempAddress&#41;<br /><br />CopyData:<br />Displacement .set 128<br />&nbsp; &nbsp;.rept 128<br />Displacement .set Displacement - 1<br />&nbsp; &nbsp;lda Buffer-Displacement, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;.endr<br />CopyEnd:<br />&nbsp; &nbsp;rts</div>
<br />Just watch as the values are written to $2007 to make sure the right values are being fetched. This code is pretty incomplete, of course, (I can't even say if it's 100% bug-free) it just demonstartes the idea, but you could very well implement a list of updates to perform during VBlank, composed of the destination address, the increment mode (1 or 32), the length of the data and it's offset into the buffer. Then, during VBlank, you simply scan this list and execute all the requested copying.
<br />
<br />I limited the buffer to 128 bytes because that's the most you can do without crossing pages (which would make reads 1 cycle slower), and the buffer must be placed in the upper half of a memory page for the same reason. However, 128 bytes should be enough for data that is witten to unpredictable locations. I mean, you wouldn't use this to update the palette, since you always know where the palette goes, this is mostly for Name Table writes, and hardly you'll need to write more than 128 bytes to them when scrolling.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Apr 12, 2008 1:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing that bothers me is that useless byte table :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">stx Temp<br />clc<br />adc Temp<br />tax<br /></div><br />Would take about the same time as :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;tay<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc ByteTable, x<br />&nbsp; &nbsp;tax </div>
<br />and would save 256 bytes.
<br />
<br />Also, why use indirect adressing in the Displacement routine ? This could potentially waste cycles if a page boundary is crossed, but well... anyway that was just for the idea. It looks good for really fast transfer, as it would be almost as fast as self-modified code but wouldn't waste a lot of RAM.
<br />Using $300-$7ff (or $200-$6ff or anything else) you're able to store a chain of exactly 256 lda#$xx/sta $2007 instruction which is cool.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 12, 2008 1:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">One thing that bothers me is that useless byte table</div><br />In this case, yeah, there is no advantage in using it, but I used because I have this table in my game and got used to using it for X and Y operations (as described in the first post of this topic). Since I have the table anyway, and in some cases it really does reduce the complexity of the code a lot, I used it here too, just to avoid the temp.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, why use indirect adressing in the Displacement routine ? This could potentially waste cycles if a page boundary is crossed, but well... </div>
<br />Indirect? Where? Do you mean indexed? If you think about this code a bit more, you'll see that LDA absolute can't be used for this, as it wouldn't allow for random access to the buffer. X is used to displace the start of the buffer around. As far as I know, the way I did it would be the only way to have access to any part of the buffer, starting anywhere in the list of LDAs STAs (depending on the amount of bytes to copy) so that the copying process ends with the last byte you want to copy. If you know of a better way to do the same thing, I'd like to know.
<br />
<br />Also, as long as you respect the rules I talked about (the limit of 128 bytes and the location of the buffer), there will be no page crossing.
<br />
<br />EDIT: Just to make it clear, the beauty of this is that you can copy a variable amount of data from anywhere in the buffer, without having to manage an index register for every byte, and without having to check for an ending condition. This is what makes it fast, it's a flexible unrolled loop. With absolute addressing you'd only be able to read hardcoded positions of the buffer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 12, 2008 4:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've actually been using something similar in my tile copying loop, it needs to be able to start and stop at arbitrary indices because a single transfer usually takes several frames. In my case I need to transfer up to 240 different characters from two separate buffers which would correspond to about 53k of unrolled code, perhaps a bit hefty ;)
<br />
<br />Thankfully with a bit of arithmetic and you can get much the same benefits from partially unrolled loop. Now the following codes tries to copy the buffer to VRAM starting from x up continuing up to (but not including) limit. Unfortunately you lose as many bytes as the unrolling factor at the end of the array, so in this case we could only copy up to 248 bytes, and be sure to place those "wasted" bytes at the start of the page such that buffer-8 doesn't cross a page. Furthermore the initialization code and especially the computed goto could be sped up a bit but I'm thinking that it might as well be prepared outside of vblank anyway. Oh and "identity" is tokumaru's byte table which I've actually been using in my own code. It's damned nice having bytes to spare on such things for once :)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">copy:<br />&nbsp; &nbsp;lda limit<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;sbc identity,x<br />&nbsp; &nbsp;and #$07<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;adc identity,x<br />&nbsp; &nbsp;tax<br /><br />&nbsp; &nbsp;lda .enter_lo,y<br />&nbsp; &nbsp;sta trampoline+0<br />&nbsp; &nbsp;lda .enter_hi,y<br />&nbsp; &nbsp;sta trampoline+1<br /><br />&nbsp; &nbsp;lda #$ff<br />&nbsp; &nbsp;jmp &#40;trampoline&#41;<br /><br />.enter_lo:<br />&nbsp; &nbsp;.byte &lt;.enter7,&lt;.enter6,&lt;.enter5,&lt;.enter4<br />&nbsp; &nbsp;.byte &lt;.enter3,&lt;.enter2,&lt;.enter1,&lt;.enter0<br />.enter_hi:<br />&nbsp; &nbsp;.byte &gt;.enter7,&gt;.enter6,&gt;.enter5,&gt;.enter4<br />&nbsp; &nbsp;.byte &gt;.enter3,&gt;.enter2,&gt;.enter1,&gt;.enter0<br /><br />.loop:<br />&nbsp; &nbsp;sbx #-8<br /><br />.enter0:<br />&nbsp; &nbsp;ldy buffer-8,x<br />&nbsp; &nbsp;sty $2007<br />.enter1:<br />&nbsp; &nbsp;ldy buffer-7,x<br />&nbsp; &nbsp;sty $2007<br />.enter2:<br />&nbsp; &nbsp;ldy buffer-6,x<br />&nbsp; &nbsp;sty $2007<br />.enter3:<br />&nbsp; &nbsp;ldy buffer-5,x<br />&nbsp; &nbsp;sty $2007<br />.enter4:<br />&nbsp; &nbsp;ldy buffer-4,x<br />&nbsp; &nbsp;sty $2007<br />.enter5:<br />&nbsp; &nbsp;ldy buffer-3,x<br />&nbsp; &nbsp;sty $2007<br />.enter6:<br />&nbsp; &nbsp;ldy buffer-2,x<br />&nbsp; &nbsp;sty $2007<br />.enter7:<br />&nbsp; &nbsp;ldy buffer-1,x<br />&nbsp; &nbsp;sty $2007<br /><br />&nbsp; &nbsp;cpx limit<br />&nbsp; &nbsp;bne .loop</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 12, 2008 12:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, the idea is very similar... I understand that you have to do things a bit differently, as the purposes aren't the same.
<br />
<br />My motivation for this was my Sonic game, since because of the fast scrolling, I must be able to write up to 128 bytes of Name Table data, for the new columns and rows of metatiles that scroll in. I doubt it would be possible to write as much data within standard VBlank time, considering that there are still other things to write, such as Attribute Tables, sprite DMA, and so on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 12, 2008 12:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, the idea is very similar... I understand that you have to do things a bit differently, as the purposes aren't the same.</div>I'd say it's exactly the same thing, the only difference is that I'm copying up to 8k which makes complete unrolling tad impractical. But my "innerloop" works exactly the same way as your raw copying, well except for that fact that you're copying downwards IIRC.<br />Perhaps even 768 bytes of code might become too some day if the interrupt code has to run from the fixed bank.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My motivation for this was my Sonic game, since because of the fast scrolling, I must be able to write up to 128 bytes of Name Table data, for the new columns and rows of metatiles that scroll in. I doubt it would be possible to write as much data within standard VBlank time, considering that there are still other things to write, such as Attribute Tables, sprite DMA, and so on.</div>Just how are you extending the blanking period by the way? I had all kinds of issues with this if you recall.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 12, 2008 1:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Perhaps even 768 bytes of code might become too some day if the interrupt code has to run from the fixed bank.</div><br />I see what you mean... I'm not worried about this because I have an 8KB ROM bank dedicated to the VBlank routines, enough to unroll everything.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just how are you extending the blanking period by the way? I had all kinds of issues with this if you recall.</div>
<br />I'm not. I was when I was using the MMC1 with CHR-RAM, so that I could copy 256 bytes to it every frame, in addition to all the other PPU operations. I simply had all my VBlank code use a fixed amount of cycles (which was a bit hard, because I alternated some tasks, so I had to make sure that alternating tasks took the same amount of time), so I always enabled rendering at the same point, 16 scanlines past the start of the frame. It worked fine, except for a few sprite problems (I couldn't seem to find the exact moment to turn sprite rendering on, so I always had a few glitchy pixels at the top left corner of the screen), and the different dot crawl pattern that results from skipping the pre-render scanline, which may or may not bother people.
<br />
<br />Because of how hard it was to keep the Vblank code constant-timed and because of the sprite glitches, I ended up switching to the MMC3 with CHR-ROM, and all PPU updates fit in the standard Vblank time now. I didn't have to sacrifice much, and ended up getting more usable frame time from not having to manually copy tiles to the PPU. I still blank the top 16 scanlines though, by having blank tiles switched in, and only switching the actual patterns when a mapper IRQ fires 16 scanlines into the frame. This is to avoid scrolling glitches usually visible when you use vertical mirroring and scroll vertically.
<br />
<br />I know a lot of commercial games had visual glitches, but I just couldn't live with them in my game(s). If it is possible to get rid of them, I'll do everything I can! =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Apr 12, 2008 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, time-optimising is definitely the exact opposite to byte optimising.
<br />These times I had to do a lot of or byte-optimising, where I could save 4 bytes or so about everywhere in my game engine, and now you guys talk about 8k of unrolled code that makes me crazy.
<br />
<br />That identity thing is a bit fun, it's true it allows easy and fast operations with index registers (adding, substract, and even and, or etc..), and each time you use it you save 1 byte, but still you have to use this trick more than 256 times for it to be really worth it.
<br />
<br />Speaking of 6502 tricks, I just figured out how many times I had to do 4 consecutive ASL A or LSR A, so I just made 2 routine that does them and return, and call them, saving one byte everytime this trick is used. I was able to save about 30 bytes doing that, which is great.
<br />
<br />However I had to do a lot of time-optimising for my mode-7 demo, as I perform raster-timed code and calculations at the same time.
<br />Put some code in RAM and modify the argument of the instructions rocks, as you can add one level of indirection and then save time (lda #$xx can be equivalent to lda $xxxx, and lda $xxxx,Y can be the equivalent to lda [$xx],Y, plus you get the equivalent of the inexistant lda [$xx],X).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 12, 2008 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I know you are not using any kind of PRG bankswitching in your current project, so these tricks probably do not interest you much.
<br />
<br />These tricks are for games with much larger PRG-ROM, which are usually more complex anyway. You'll hardly see an NROM or CNROM with complex scrolling and animations, large sprites, and so on...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Apr 12, 2008 3:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can definitely make a very fun game with NROM or CNROM. You may have heard of a little game called Super Mario Bros. :p
<br />
<br />But seriously there are alot of fun games that use no mapper. Atleast I find them fun.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>