<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MMC1 questions</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MMC1 questions</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16492">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16492</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Thu Sep 14, 2017 3:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />O.k., so you're suggesting to mark the start of a bank switch and to skip the sound update in the rare cases when NMI actually entered while the bank switch was done.<br />This might be a solution.<br /><br />Although, personally, I guess I'll just put the sound update inside the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">if NmiCanBeProcessed</tt> condition instead of out of it. Then I don't need to save any kind of status at all and can be sure that MMC1 writes are never interrupted by other MMC1 writes.<br />My game is supposed to be mostly lag-free anyway, so if it does lag for a short moment, then I don't care if the sound lags as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Sep 14, 2017 3:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">MMC1_switch:<br />&nbsp; &nbsp;pha<br />&nbsp; &nbsp;lda M2000<br />&nbsp; &nbsp;and #$7f<br />&nbsp; &nbsp;sta $2000</div></div><br />Doesn't writing to $2000 mid-frame cause those glitchy scanlines that are common in SMB1? As far as I recall, the consensus was that we just shouldn't do it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 14, 2017 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">But how do you avoid the lagging of music? If I simply set a counter in every NMI for every intended music call, this only means that a game logic lag will skip a certain amount of sound, but it will still lag.</div><br />Even <em>Pok√©mon</em> lags during blank-screen transitions, with the music skipping ahead to catch up to the tempo once the transition ends. This is better than what earlier Game Boy games like <em>Tetris</em> did, which was just to let music fall behind.<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">For example, let's take an extreme example: Let's say my game logic lags for five seconds in a certain situation.</div><br />If you can profile what function or combination thereof is eating 9 million cycles, call <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">audio_update_if_needed&#40;&#41;</tt> every so often during this task. The idea is that you try to call it at least once every 20,000 cycles (less than a frame), so that even if you mis-estimate and there ends up a 60,000 cycle (2 frame) gap, the player is unlikely to notice.<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Unless I clutter all my code with nothing but music calls, but then I have the problem that music is already updated</div><br />In this case, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">audio_update_if_needed&#40;&#41;</tt> will check the variable, see that nothing needs to be done, and do nothing. In C, it'd look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">extern unsigned char audio_lag_frames;<br /><br />void audio_update_if_needed() {<br />&nbsp; while (audio_lag_frames &gt; 0) {<br />&nbsp; &nbsp; audio_update();<br />&nbsp; &nbsp; --audio_lag_frames;<br />&nbsp; }<br />}<br /></div><br /><br />Or in assembly language:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.import _audio_lag_frames<br />.export _audio_update_if_needed<br /><br />.proc _audio_update_if_needed<br />&nbsp; lda _audio_lag_frames<br />&nbsp; beq no_update_needed<br />&nbsp; loop:<br />&nbsp; &nbsp; jsr _audio_update<br />&nbsp; &nbsp; dec _audio_lag_frames<br />&nbsp; &nbsp; bne loop<br />&nbsp; nope:<br />&nbsp; rts<br />.endproc<br /></div><br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">So, if no interrupt ever switches a bank or writes to any other MMC1 register, can I be sure that an NMI that triggers in the middle of the bank switch function doesn't corrupt the bank switch status?</div><br />Correct.<br /><br /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">What means are there in the MMC1 mapper to protect the battery data? How can I disable battery support and only enable it during writes?</div><br />In theory, there are two ways to disable the WRAM. On MMC1B and later, writing to $E000 (PRG bank) with bit 4 true causes the MMC1 not to raise WRAM +CE2 when WRAM is accessed. And on the SNROM board only, the mapper's CHR A16 output is connected to WRAM /CE1, which means writing to $A000 (CHR bank) with bit 4 true causes the MMC1 to hold /CE1 high. But in practice, if the MMC1 is itself losing power, it may lose the power to drive these signals. I'd need someone with a scope to confirm this for sure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Fri Sep 15, 2017 12:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I chose the following now, which is based on one of the suggestions from this thread:<br /><br />Whenever the bank is switched, I set a flag.<br />Since there's only one bank switch in interrupts, the sound update in NMI, I check the flag before doing the sound update.<br />In the rare case where the NMI triggered in the middle of a bank switch, I skip the sound update and accept a sound lag of one frame (and don't try to catch up).<br />But if the NMI triggers during the game logic, but outside a bank switch, the music is continued normally.<br /><br />This allows me to keep the bank switches simple, without that the whole &quot;if it was interrupted, start the function again&quot; stuff.<br /><br /><br />Another thing:<br />About the question &quot;What happens when the NMI triggers while we're right in the middle of setting a sound effect?&quot;:<br /><br />I don't know whether FamiTone can handle such a situation. But this question is moot anyway. Because we can also have the situation where two sound effects are played simultaneously in the same frame.<br /><br />If the NMI triggers right between those two calls, we have an inconsistent sound status where one sound effect is already sent to the sound library and played, but another one from the same frame isn't.<br /><br />That's why I will buffer all music and sound IDs in an array. And only in the end will I update all of them right after another.<br />And for this case, I will set the same flag as the one that I use for bank switches, so that the sound update doesn't start until all sound effects have been set.<br /><br /><br /><br />I need to know one more thing:<br /><br />Can MMC1 register writes to one register confuse the status of another register?<br />I.e., do I also have to set a &quot;don't switch to the sound bank&quot; flag when I switch the mirroring?<br /><br />Or, in code form: Is the following a problem or does it work?<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SetMmc1Config:<br />&nbsp; &nbsp; STA $8000<br />&nbsp; &nbsp; LSR<br />&nbsp; &nbsp; STA $8000<br />&nbsp; &nbsp; LSR<br />&nbsp; &nbsp; STA $8000<br />&nbsp; &nbsp; STA $E000 ; &lt;-- Would this confuse the $8000 writes?<br />&nbsp; &nbsp; LSR<br />&nbsp; &nbsp; STA $8000<br />&nbsp; &nbsp; LSR<br />&nbsp; &nbsp; STA $8000<br />&nbsp; &nbsp; RTS</div><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">In theory, there are two ways to disable the WRAM.</div><br />Now the question is: Should I do this?<br /><br />Does disabling the WRAM mean that the whole 8 KB of battery-backed RAM are instantly deleted?<br />Because in this case, I'd rather not do this because it would delete all save states.<br /><br />Or does it only mean that <em>access</em> to WRAM is impossible as long as it's disabled, so that powering off the console cannot produce any faulty writes to WRAM?<br />In this case, this might be useful, to enable it only when we write to it (or read from it at the start of the game), and then disable it again to protect it from corruption.<br /><br />Which one is it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Sep 15, 2017 3:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Can MMC1 register writes to one register confuse the status of another register?<br />I.e., do I also have to set a &quot;don't switch to the sound bank&quot; flag when I switch the mirroring?</div><br />Absolutely. There's only one shift register in the MMC1, and only the last write determine which MMC1 register is actually written to. See the wiki for more info about this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Now the question is: Should I do this?</div><br />It's all up to you.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does disabling the WRAM mean that the whole 8 KB of battery-backed RAM are instantly deleted?</div><br />Of course not, it just makes WRAM inaccessible/open bus, but the data is still there intact (and that no matter whether the WRAM is battery backed or not).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or does it only mean that access to WRAM is impossible as long as it's disabled, so that powering off the console cannot produce any faulty writes to WRAM?<br />In this case, this might be useful, to enable it only when we write to it (or read from it at the start of the game), and then disable it again to protect it from corruption.<br /></div><br />Exactly, I think that was the purpose of those disable bits in the 1st place. In practice, I suspect commercial games hardly ever used them, because most games with battery-backed WRAM also use the chip as extra general-purpose SRAM which is not related to saving games, and as such it's used all the time and isn't disabled. It should check some commercial games with FCEUX in order to see how they handle this.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Doesn't writing to $2000 mid-frame cause those glitchy scanlines that are common in SMB1? As far as I recall, the consensus was that we just shouldn't do it.</div><br />I don't think it's a major problem. I don't use MMC1 in my engine but also write to $2000 to disable NMI when initializing a sound effect pointer, so that the sound engine does never try to play a sound effect with a partially updated address (which can have almost catastrophic consequences).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Sep 15, 2017 3:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I don't think it's a major problem.</div><br />Well, I happen to find that glitch pretty annoying. I always noticed it as a kid when playing SMB at other peoples' houses and always wondered what that was, until someone here in the forums discovered the reason. I would never intentionally put glitches in my games if there were other options.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't use MMC1 in my engine but also write to $2000 to disable NMI when initializing a sound effect pointer, so that the sound engine does never try to play a sound effect with a partially updated address (which can have almost catastrophic consequences).</div><br />Like I said before, you could simply put sound effect requests in a queue instead, and only process those requests in the NMI, right before calling the playback code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Fri Sep 15, 2017 12:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Exactly, I think that was the purpose of those disable bits in the 1st place. In practice, I suspect commercial games hardly ever used them, because most games with battery-backed WRAM also use the chip as extra general-purpose SRAM which is not related to saving games, and as such it's used all the time and isn't disabled.</div><br />I don't think I will need it as general RAM since the regular 2 KB are more than enough for me. (In fact, apart from larger arrays, I try to put all variables of my game into zeropage.)<br /><br />So, if I disable and enable the WRAM access depending on the situation, is disabling it really an actual, &quot;physical&quot; protection from accidental random writes?<br /><br />I.e. does disabling the WRAM mean that you don't have to do this whole &quot;hold the Reset button when turning off the system&quot; as long as you don't switch off the console in the middle of saving?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Sep 15, 2017 12:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Provided that the program keeps RAM writing disabled, and provided that the mapper can guarantee that disabling will continue even as the mapper is powering down, the user shouldn't have to hold Reset. But it may take an oscilloscope to prove that the mapper can guarantee that disabling will continue even as the mapper is powering down, as I imagine that in some situations, loss of power can cause the mapper to inadvertently generate enable signals.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Sep 15, 2017 2:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">In the rare case where the NMI triggered in the middle of a bank switch, I skip the sound update and accept a sound lag of one frame (and don't try to catch up).<br />But if the NMI triggers during the game logic, but outside a bank switch, the music is continued normally.</div><br />It may be a rare case overall, but the distribution of stuff like this tends to be clustered.<br /><br />Successive frames often do very similar stuff. The timing could easily be close enough from frame to frame to trigger this &quot;rare&quot; case 100 frames in a row, or continually until you move, etc.<br /><br />The failure tends to look more like &quot;the music hangs in this one room if I'm wearing the blue armour&quot;, a lot less subtle than just hanging for 1 frame at a time on rare occasions.<br /><br /><br />Same deal with tepples &quot;count lag and catch up&quot; suggestion, 1 frame of doubled music update probably doesn't sound that unusual, but doing it continually will. (And if you're not careful to cap it, you can get a runaway increase in workload as the extra updates cause even more lag on the next frame, cascading out of control.)<br /><br /><br />Solutions like that can be useful, but don't think of &quot;rare&quot; cases as being surrounded by a safety net of common cases. They come in bunches!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Sep 16, 2017 1:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">I don't think I will need it as general RAM since the regular 2 KB are more than enough for me. (In fact, apart from larger arrays, I try to put all variables of my game into zeropage.)<br /></div><br />In that case, <strong>using 80's economic logic</strong>, it makes almost no sense to use WRAM and battery, as it would make your game much more expensive than passwords. Heck, many mass-produced games which even used WRAM still used passwords instead of battery (Metroid, Kid Icarus) or nothing at all (SMB3) in order to be cheaper. Today it's entirely different, but I assume you're using 80's economic logic here, like I myself like to do (i.e. use only common mappers).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I would never intentionally put glitches in my games if there were other options.</div><br />Well I never noticed glitches but if they ever become noticeable I'll probably change the approach and avoid writing to $2000 in dis-synchronization with the PPU. For me it has yet to cause any problems. Perhaps this is an NTSC-only and earlier revisions of PPU only thing, like the controller reading DMC glitch ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Same deal with tepples &quot;count lag and catch up&quot; suggestion, 1 frame of doubled music update probably doesn't sound that unusual, but doing it continually will. (And if you're not careful to cap it, you can get a runaway increase in workload as the extra updates cause even more lag on the next frame, cascading out of control.)</div><br />You don't have to catch up in the next NMI, you can catch up after the MMC1 switch is finished and it discovers it was interrupted by NMI.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Sep 16, 2017 3:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Provided that the program keeps RAM writing disabled, and provided that the mapper can guarantee that disabling will continue even as the mapper is powering down, the user shouldn't have to hold Reset.</div><br />Does &quot;The Legend of Zelda&quot; or &quot;Final Fantasy&quot; use that enable/disable feature anywhere?<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">It may be a rare case overall, but the distribution of stuff like this tends to be clustered.</div><br />Well, the first thing that has to happen: The game has to lag <em>at all</em>. And of course, I'll try to avoid this as much as possible.<br /><br />And even then, the ifs and elses that have to be gone through will be different in every frame. (When I enable intensity bits in PPUMASK to measure the time my code needs to run, the colored layer over the screen always jumps up and down.)<br />And bank switch and music update is a small piece of code in a huge ocean of code.<br /><br />The last thing that is usually done in every frame is updating the sprites array ($0200) according to the meta sprites. In this case, we switch to the meta sprite bank once in the beginning. And then we iterate through all in-game characters to read their current meta sprite address.<br />If the game lags, it will probably lag in the middle of sprite updates where there's no further bank switch.<br /><br />So, I would say that consecutive NMI hits during the same bank switch are very, very unlikely.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">In that case, <strong>using 80's economic logic</strong>, it makes almost no sense to use WRAM and battery, as it would make your game much more expensive than passwords.</div><br />Yeah, I know. That's why I intended my game to be UNROM.<br />But my graphics artist absolutely hated the idea of passwords in a story-driven &quot;Zelda&quot;-like top down fantasy action adventure. So, to make her happy, I switched over to MMC1.<br /><br />With the added bonus that I can now make her draw some huge character artworks for the game because with twice the memory, we will probably have enough room for this kind of excessive stuff.<br />And we don't have to be so cheap on in-game dialogs.<br /><br />Oh yes, and since I like to hold code in the fixed bank (so the additional memory is good for game data, but the room for actual code is still the same), I got back 550 bytes by removing the &quot;update the graphics row by row during vertical scrolling&quot; feature since I can switch the mirroring, so vertical scrolling works just as easy as horizontal scrolling.<br /><br />Does &quot;The Legend of Zelda&quot; even need the WRAM excessively? I mean, the game itself with its screen-by-screen logic surely gets along fine with the regular RAM. And as far as savestates are concerned: You need to save all the collected items, all burnt trees, all bombed walls. And what else? That should be pretty much it. I assume each savestate should need less than 100 bytes. So, isn't WRAM and a battery also a total waste here, but they still used it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 16, 2017 3:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wouldn't battery backed CHR-RAM be an option here? You can put a battery in any CHR-RAM board to preserve the contents of the CHR-RAM chip, and &quot;steal&quot; a few tiles for the save data (8 tiles will give you 128 bytes). It's a little weird but really easy and cheap to implement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Sep 16, 2017 4:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is this something that was ever done in a licensed commercial game?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 16, 2017 4:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't think so. Apparently only one unlicensed game did it (RacerMate Challenge II), but it's a thing, and it's supported by the NES 2.0 format. I figured you wouldn't be interested since this wasn't a common practice, but thought I'd mention it anyway.<br /><br />Using CHR space for things other than tiles isn't so rare though. SMB and a bunch of CNROM games have data stored where tiles would normally be, so I guess developers weren't opposed to sacrificing a few tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Sep 16, 2017 4:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: MMC1 questions</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Programming tricks like that are alright for me if it ever becomes necessary. But if the hardware wasn't used commonly back then, I will not create my game in this way.<br /><br />Even though my cartridges will be built from all-new parts, I only do games that could be easily reproduces with donor cartridges of widely available games.<br /><br />UNROM with 128 KB is fine since there are countless games like that.<br /><br />UNROM with 256 KB would be out of the question or at least I would do this only very, very reluctantly. How many copies of &quot;Paperboy 2&quot; or &quot;Best of the Best - Championship Karate&quot; exist out there? 20? 30?<br /><br />UNROM 512 would be totally disqualified since it didn't exist until it was manuafactured for homebrews.<br /><br />MMC1 with 256 KB is already acceptable because of &quot;Final Fantasy&quot; alone, a hugely successful game, but I assume there are more games with this mapper and this ROM size.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>