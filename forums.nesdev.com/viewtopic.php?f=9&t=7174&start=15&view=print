<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Peripheral Address Usage</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Peripheral Address Usage</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7174">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=7174</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Nov 20, 2010 5:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The problem was throughput and CPU time. Using the controller port for sending and receiving data limits you to roughly 115,200 kb/s and saturates the NES CPU. You couldn't transfer more than 192 bytes or so between vblanks.</div>
<br />The controller port can synchronously transfer three bits to the NES every time it's read, about 5.4 Mbit/sec. Let's be generous and give the CPU 40 cycles to read a byte, taking three reads and some other instructions to assemble. That still comes to 358 kbit/sec. With optimized code and assuming that open-bus bits of $4017 read back as clear (except bit 6), a byte can be received in 18 cycles, achieving 795 kbit/sec:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $4017<br />asl a&nbsp; &nbsp; &nbsp; &nbsp;; 10xx00x0<br />ldx $4017<br />eor table,x ; xx000x00<br />eor $4017&nbsp; &nbsp;; 0100x00x<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Nov 20, 2010 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent"><ul><span style="color: yellow"><span style="text-decoration: underline">Pins for EXP port 2</span></span><br /><span style="color: red">VDD<br />VSS<br />/CE<br />R/W<br />D0-7<br />A0-7</span><span style="color: cyan"> (optional)</span></ul></div>
<br />
<br />A parallel port for the NES, that would really be nice to have.  PIC24F and PIC32 both seem to have similar parallel ports, that can be used in "Addressable Parallel Slave Port Mode".  Is PIC24F also 5V tolerant?
<br />
<br />Making an expansion port board, (using a custom cart board) it wouldn't be too hard to include these signals from the NES.  R/W and at least a couple address lines, could be re-routed to the exp port from the cartridge, then brought out to this type of parallel port connector.  I've been reluctant to designate the unused exp pins for anything yet, but something like this is definitely looking to be a good way to go.  Easy to design in, sounds like a pain to build/wire/strain-relief in a small-sized thing, but it could be worth it (thinking beyond a keyboard peripheral, heheh).
<br />
<br />The way I'm saying it though would have the signals all being 5V at the connector, I guess I'm not sure what's in the circuit you have in the NES (5V-3V translation?).  I didn't look at PIC24 much before now, but since PIC32 will take 5V on most of it's I/O (partly why I jumped on it), I didn't anticipate a problem (but yeah, could be for other MCUs).  I also figured I'd use CAN bus for inter-MCU communication, and NES only talks to the main one, but that has it's own advantages/disadvantages in this case.  NES addressing stuff directly should have lower latency, for one.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Sun Nov 21, 2010 2:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">With optimized code and assuming that open-bus bits of $4017 read back as clear (except bit 6), a byte can be received in 18 cycles, achieving 795 kbit/sec:</div><br />You have me there.  When I built the NES232 I didn't know about using pins 6 &amp; 7 to input data on the controller port.  And while I'm sure you can work around issues with DPCM, I don't want to spend the time building workarounds into both the NES and MCU side of things.  On the other hand, if I get close to the end of the project and find that 795 kbit/sec is sufficient, it would be worth going back to using the controller port for external I/O.  It would certainly make the end result more attractive to folks who don't want to crack open their NES and take a soldering iron to it.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">A parallel port for the NES, that would really be nice to have. PIC24F and PIC32 both seem to have similar parallel ports, that can be used in "Addressable Parallel Slave Port Mode". Is PIC24F also 5V tolerant?</div><br />The PIC32 is a better choice; I may end up going with that instead.  The digital only pins on the PIC24FJ64GB002 are 5v tolerant, but that doesn't encompass all pins used by the PMP/PSP port.  Besides, it would be safer to make everything 3.3v coming out of the EXP Port 2 just in case you accidentally hooked something up to a 3.3v only pin.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">The way I'm saying it though would have the signals all being 5V at the connector, I guess I'm not sure what's in the circuit you have in the NES (5V-3V translation?).</div>
<br />The EXP Port 2 board does 3 things:
<br /><ul>1. Performs high byte address decoding so you can have one peripheral use the whole $4700-$47FF range or have up to 256 peripheral addresses by using the lower address byte.<br />2. Provides a transparent buffer to the data bus so that the peripheral can't communicate out of turn.<br />3. Provides 5v-&gt;3.3v level shifting on both data and control lines.</ul>
<br />The board is pretty simple.  It consists of a 3.3v regulator, a 74x245 for a buffer then 74x30 &amp; 74x04 chips for decoding the high address byte.  I found that using HCT chips powered at 3.3v works well.  LCX might be a better choice, but I only have HCT chips on hand at the moment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Nov 21, 2010 11:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">chykn wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">With optimized code and assuming that open-bus bits of $4017 read back as clear (except bit 6), a byte can be received in 18 cycles, achieving 795 kbit/sec:</div><br />And while I'm sure you can work around issues with DPCM [...] if I [...] find that 795 kbit/sec is sufficient [...] </div>
<br />I had forgotten about DPCM. Note that's 795 kbit/sec from MCU <em>to</em> NES. The other direction would only be something like 24 kbit/sec. Here's what comes to mind for sending a byte quickly over OUT0 (strobe):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Sends byte over OUT0, 74 cycles:<br />lda #1<br />stx $4016&nbsp; &nbsp;; let device know we're about to send<br />.repeat 8<br />lsr a<br />rol $4016&nbsp; &nbsp;; pulse clock line, then put next bit on<br />.endrepeat<br />bit $4016&nbsp; &nbsp;; final bit</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Mon Nov 22, 2010 8:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">Here's what comes to mind for sending a byte quickly over OUT0 (strobe): </div>
<br />Thanks again for the input.  If it does come to using the controller port, how would DPCM be addressed?  Could it be as simple as using a variable as a flag to note transmission activity then telling all DPCM-related code to check the flag before taking action?  Just taking a stab in the dark since I've never put sound in any of my code.  Will get there someday!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Nov 22, 2010 10:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nope, DPCM basically causes at least one extra $4016/$4017 read when it occurs at the critical moment. The external device would think your code did two normal reads, unless it ignored two reads very close together. That might be doable, given the external device would probably be doing communication in software anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 23, 2010 9:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The instructions <strong>lda $4017 lsr a</strong> take six CPU cycles (3350 ns), setting a lower bound on the time between legitimate clock pulses. The pulse from a legitimate read and the DMA unit's spurious read are noticeably more tightly spaced than that: usually a third of that (1130 ns). So after a leading edge, you can ignore further leading edges within about 2000-2500 ns. (Yes, this reminds me of what the MMC3's scanline counter does with PA12.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Tue Nov 23, 2010 11:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The external device would think your code did two normal reads, unless it ignored two reads very close together.</div><br />I went back and re-read a post from February that was related to this...<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">DMA double clock bug: If the CPU is executing a read at the exact same time the sample playback unit wants to fetch one more byte of compressed samples, the same address is read again.</div>
<br />If I understand correctly, this could cause double-reads to address $4700 if that were the last one read.  If that's correct, then it doesn't matter if I use the controller port or expansion port.  Since the incoming data is processed in a serial fashion in both cases I would have to check for reads that were too close together in either case.  Does this sound right?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 24, 2010 8:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes. It also happens with CHR ROM readback in $2007. The clock pulses will be at least six CPU cycles apart for legit reads or generally two for spurious reads. It's possible to have legit reads four cycles apart (e.g. <strong>ldx $4700 lda $4700</strong>), but if it's too hard to tell legit reads from spurious reads in your code, you can specify that the program always execute some other instruction between reads from your adapter's port.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Wed Nov 24, 2010 12:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So a solution might be something like this...
<br />
<br />1. NES reads byte from MCU
<br />2. Read triggers MCU interrupt.  MCU starts a timer, loads next output byte to a temp variable.
<br />3. Timer expiration causes a second MCU interrupt; MCU copies temp variable to output.
<br />
<br />If a second read occurs before the timer expires, it gets an empty value.  Instead of resetting the timer, it could increment a counter to track the number of dupe reads.  Wouldn't necessarily need that value, but it would be interesting to see how often it happens.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>