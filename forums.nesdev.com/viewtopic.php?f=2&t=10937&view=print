<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reverse engineering Mega Man</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reverse engineering Mega Man</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10937">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10937</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Sun Jan 26, 2014 7:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been making a Mega Man clone/engine based on <a href="http://tasvideos.org/GameResources/NES/Rockman/Data.html" class="postlink">TASVideos's Rockman Data</a> page (specifically the first game). As the page doesn't cover everything, I've done some reverse engineering myself using FCEUX and its memory inspection tools. Using those, I've discovered possible errors in TASVideos's documentation.<br /><br />The problem is that I'm not sure whether the errors I found are actually errors, because the game behaves weirdly. I think it's possible that I'm getting the wrong idea because of how frame advancing works in emulators.<br /><br />I first thought this when verifying collisions while Mega Man is jumping upwards. When Mega Man bumps his head into a platform, his Y speed to a constant. According to the documentation, it's −0x00.C0, but my testing reveals it's actually −0x00.40. But that's not the problem. The problem is that this value seems to be set one frame before the collision occurs. Looking at the memory values, the next frame actually adds the Y speed from before the constant was set.<br /><br />There are other inconsistencies.<br /><br />If I press the jump button and advance a frame, Mega Man's Y speed is set to 0x04.DF as expected. However, his Y coordinate doesn't change until the next frame. Then another frame later his sprite finally changes to the jumping one.<br /><br />When I let go of the D-pad, Mega Man's X speed isn't set to 0x00.80 in the next frame, but only in the frame after that. This makes his deceleration take one more frame than is expected from the documentation (though strictly speaking what it says isn't wrong here).<br /><br />So, it's like there's a delay, which may be a result of when the emulator decides to pause between frames.<br /><br />It may also be related to how I expect the game to behave. I expect the game to first check for input, then adjust velocity based on that, then update the coordinate data, and finally draw.<br /><br />Can someone enlighten me?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 26, 2014 10:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BenoitRen wrote:</div><div class="quotecontent">I think it's possible that I'm getting the wrong idea because of how frame advancing works in emulators.</div><br />You can perform these tests without the frame advancing (which might have different timing than you expect, specially across emulators). Put a breakpoint in the NMI routine instead. There might also be some input lag... to get around that I'd simulate input by directly modifying the RAM location where he controller bits are normally written to, and then I'd lock the value (FCEUX can do this) so that the real input doesn't overwrite it.<br /><br />Then on every break you can take a look at the engine's state, and possibly change the input for the next frame. I think this is much more reliable than real input and frame advancing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Sun Jan 26, 2014 4:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've managed to isolate the memory addresses that are used to store input. They are 0014 and 0016. 0018 stores what is newly pressed in the current frame. The byte's bits are arranged as: right, left, down, up, Start, Select, B, A.<br /><br />I put a breakpoint at the NMI routine using the debugger, which is D4A8. Next I used the Hex Editor to set the input values for the jump button and freeze the two first ones.<br /><br />While the debugger does stop at the breakpoint each cycle at the click of the Run button, the memory values for the Y coordinate and Y speed don't change.<br /><br />Yet as long as those input addresses are frozen, Mega Man isn't responding, so they are definitely related.<br /><br />What am I doing wrong?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Jan 26, 2014 4:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't games normally do game processing during a given frame, then write them to the PPU during VBL at the beginning of the next frame? Or maybe you're taking this into account.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ccovell</b> [ Sun Jan 26, 2014 5:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BenoitRen wrote:</div><div class="quotecontent">When Mega Man bumps his head into a platform, his Y speed to a constant. According to the documentation, it's −0x00.C0, but my testing reveals it's actually −0x00.40. But that's not the problem. The problem is that this value seems to be set one frame before the collision occurs. Looking at the memory values, the next frame actually adds the Y speed from before the constant was set.<br /><br />If I press the jump button and advance a frame, Mega Man's Y speed is set to 0x04.DF as expected. However, his Y coordinate doesn't change until the next frame. Then another frame later his sprite finally changes to the jumping one.</div><br /><br />I don't know the details, but just my guesses:<br /><br />For the first problem, maybe the documentation was oversimplifying negative numbers?  Since negative hex 40 is stored as hex FFC0...  Perhaps the documentation lopped off the $FF..?<br /><br />Also, for the second, expect a delay.  In gravity-based simulations, acceleration is added to velocity, then velocity added to position.  Sometimes these additions don't all happen on the same frame, since an instantaneous change in position based on a new velocity would mean zero acceleration time (kinda physically impossible).  Perhaps the developers found that delaying the position change by 1 frame made MM's movements smoother and more realistic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jan 26, 2014 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BenoitRen wrote:</div><div class="quotecontent">Yet as long as those input addresses are frozen, Mega Man isn't responding, so they are definitely related.</div><br />I just tried setting up the NMI breakpoint, and after the first break I froze $0014 to $01. After that, I had to push &quot;run&quot; 3 times before the jump sprite showed up on the screen, but Mega Man certainly jumped.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Mon Jan 27, 2014 8:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It looks like the problem was that I was setting both $0014 and $0016 to 01. When I only set $0014, it does work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Mon Jan 27, 2014 10:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here are the results.<br /><br />Vertical motion (jump):<br /><ul><li>The Y speed is set in the next frame. However, the Y coordinate isn't changed yet.</li><li>The Y speed is decreased with the gravity constant. The Y coordinate is decreased by the Y speed of the previous frame.</li><li>Same as above, except that now the jump sprite is set, and it has the Y coordinate of the previous frame.</li><li>etc.</li></ul><br />Horizontal motion:<br /><ul><li>The X speed is set in the next frame. The X coordinate is adjusted with this new X speed immediately.</li><li>Same as above, but now the sprite on the screen is updated with the X coordinate of the previous frame.</li></ul><br />So there seems to be a delay between the in-memory values and the screen. With vertical motion, there's even a delay between Y speed and the Y coordinate.<br /><br />If you ignore these delays, TASVideos's data is correct (except for that constant that is set after vertical collision, of course).<br /><br />This makes vertical collision detection even weirder, though, because this means that it is detecting it two frames in advance!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jan 27, 2014 3:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BenoitRen wrote:</div><div class="quotecontent">So there seems to be a delay between the in-memory values and the screen.</div><br />How exactly are you verifying the existence of this delay?<br /><br />NES games do all their calculations while the previous frame is being rendered to the screen, and once VBlank starts, the new data (sprites, backgrounds, etc.) is sent to the PPU to be rendered during the next frame. Since you have placed a breakpoint at the start of the NMI (i.e. the very start of VBlank), that's before all the new data is sent to the PPU, so you certainly won't be seeing any changes calculated during this frame yet. Only when the next break happens will the frame using the current data have been completely rendered, at which point the data for the next frame will be ready to be written to the PPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Mon Jan 27, 2014 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">How exactly are you verifying the existence of this delay?</div><br />By comparing the change in coordinates to what I see on the screen.<br /><br />I didn't know when the NMI took place; I just followed your advice, which to me implied that the delay I was seeing was because of a timing issue. But if it's right before the frame rendering, that certainly explains what I'm seeing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jan 27, 2014 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BenoitRen wrote:</div><div class="quotecontent">which to me implied that the delay I was seeing was because of a timing issue.</div><br />I just wanted to be sure you knew in which order things happened, so that you wouldn't miscalculate the delay.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But if it's right before the frame rendering, that certainly explains what I'm seeing.</div><br />Yes, the NMI fires after the input has been processed (well, ideally, but sometimes the game logic takes too long and doesn't finish in time for VBlank, but that's another story <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />) but before the new graphical data is sent to the PPU and the frame is displayed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Thu Feb 13, 2014 4:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm as good as done replicating the physics, and almost done with replicating the sprite animation. Thanks for the help with getting that far, everyone. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />There's one last sprite animation I have to implement, which is Mega Man slumping over the top of a ladder before standing on top of it. I'm having trouble figuring out when exactly he transitions into it.<br /><br />Testing was done with two ladders whose top tile has the same Y coordinate. On one ladder, he transitions into it when the Y coordinate is 105.192. On another ladder, the Y coordinate is 106.64. In both cases, the Y coordinate is substracted in steps of 0.192.<br /><br />When doing Y collision detection, the game checks one step in advance. In the previous cases, that'd mean it checked for collision with Y coordinates 105.0 and 105.128. At first glance, this would seem to indicate that collision at Y coordinate 105 is the key, but if that's the case, the transition would have occurred one frame sooner on the first ladder. See, one step back, the Y coordinates would be 106.128 and 107.0. It would then check for collision with 105.192 and 106.64.<br /><br />Any ideas?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BenoitRen</b> [ Thu Feb 20, 2014 3:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering Mega Man</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I figured it out. During climbing, the speed is always 0x00C0, even though the memory value of the Y speed is set to a different number. However, that memory value is used for collision detection, and that's how I figured out that in my example Y coordinate 105 during collision detection is the point where the animation changes.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>