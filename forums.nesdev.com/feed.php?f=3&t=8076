<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8076" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-10-21T17:35:57-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8076</id>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2011-10-21T17:35:57-07:00</updated>
<published>2011-10-21T17:35:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8076&amp;p=85431#p85431</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8076&amp;p=85431#p85431"/>
<title type="html"><![CDATA[Sprite Evaluation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8076&amp;p=85431#p85431"><![CDATA[
I decided to share my sprite evaluation logic C code. Comments are welcome.<br /><br />Notice that "value" means the current PPU scanline cycle/dot/whatever from 0 to 340.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* Evaluate the sprites for the next scanline<br />©1998-2011 Zepper, from RockNES emulator.<br /> */<br />static void ppu_new_sprite_eval&#40;register const unsigned int value, register const int line&#41;<br />&#123;      <br />   //secondary OAM init<br />   if&#40;value &lt; 64&#41;<br />   &#123;<br />      oam_secondary&#91;value&gt;&gt;1&#93; = 0;<br />      oam_buffer = 0xFF;<br />   &#125;<br />   //sprite evaluation -valid period-<br />   else if&#40;value &lt; 256&#41;<br />   &#123;<br />      //write mode<br />      if&#40;value &amp; 1&#41;<br />      &#123;<br />         /* evaluate oam_buffer as Y-coordinate */<br />         if&#40;&#40;0 == oam_write&#41; &amp;&amp; &#40;oam_addr &lt;= 0x100&#41; &amp;&amp; &#40;&#40;unsigned int&#41;&#40;line - 21 - oam_buffer&#41; &lt;= &#40;unsigned int&#41;ppu-&gt;is_8x16&#41;&#41;<br />         &#123;<br />            //collision flag - sprite zero<br />            if&#40;0 == &#40;oam_addr &amp; ~3&#41;&#41;<br />            &#123;<br />               oam_zerohit = 0;<br />            &#125;   <br />            //transfer data   <br />            oam_write = 1;<br />         &#125;<br />         /* weird evaluation &amp; overflow flag */<br />         if&#40;0x20 == oam_ppu_addr&#41;<br />         &#123;<br />            if&#40;~ppu-&gt;status &amp; 0x20&#41;<br />            &#123;<br />               //in-range, set overflow flag<br />               if&#40;oam_write&#41;<br />               &#123;<br />                  ppu-&gt;status |= 0x20;<br />                  oam_9th = 3;  /* fetch next 3 bytes and realign */<br />               &#125;<br />               //not in-range, advance pointer<br />               else if&#40;0 != &#40;oam_addr &amp; 3&#41;&#41;<br />               &#123;<br />                  oam_addr += 4;<br />               &#125;<br />            &#125;<br />            //normal behaviour, realign<br />            else<br />            &#123;<br />               if&#40;0 == oam_9th&#41; &#123;<br />                  oam_addr = &#40;oam_addr + 4&#41; &amp; 0x0FFC;<br />               &#125; else &#123;<br />                  oam_9th--;<br />               &#125;<br />            &#125;<br />         &#125;<br />         /* normal evaluation */<br />         else<br />         &#123;<br />            //transfer data<br />            oam_secondary&#91; oam_ppu_addr &#93; = oam_buffer;<br />            if&#40;oam_write&#41;<br />            &#123;<br />               oam_ppu_addr++;<br />               if&#40; 0 == &#40;oam_ppu_addr &amp; 3&#41; &#41;<br />               &#123;<br />                  //transfer complete<br />                  oam_write = 0;<br />               &#125;<br />            &#125; <br />            else /* skip the remaining bytes, move forward */<br />            &#123;<br />               oam_addr += 3;<br />            &#125;<br />         &#125;<br />      &#125;<br />      //read mode - normal<br />      else<br />      &#123;<br />         /* read 1 byte of sprite data */<br />         oam_buffer = oam_primary&#91;oam_addr&amp;0xFF&#93;;<br />         if&#40;2 == &#40;oam_addr &amp; 3&#41;&#41; &#123;<br />            oam_buffer &amp;= ~0x1C;<br />         &#125;<br />         oam_addr++;<br />      &#125;<br />   &#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Fri Oct 21, 2011 5:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2011-08-30T16:33:35-07:00</updated>
<published>2011-08-30T16:33:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8076&amp;p=83283#p83283</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8076&amp;p=83283#p83283"/>
<title type="html"><![CDATA[Sprite Evaluation Timing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8076&amp;p=83283#p83283"><![CDATA[
Hello all, it's me again! I know, you're not surprised at all.<br /><br />This time I have questions about the timing of sprite evaluation steps, namely what happens when the last 8 sprites are the only sprites in range, and other circumstances.<br /><br />In my calculations, a "failed" sprite evaluation takes 2 ppu cycles (1 cycle to read the y-coord from oam, and 1 cycle to evaluate), whereas "successful" evaluations take 8 ppu cycles (1 cycle to read y, 1 cycle to evaluate/store y, 1 to read name, 1 to store name, etc).<br /><br />Based on those assumptions, I came up with some scenarios, and how long it would take the ppu to handle them. The following numbers are more of a time stamp for when the evaluation would effectively finish, as they have the 64 ppu cycles where evaluation is initialized worked in.<br /><br />No sprites are in range: 192 ppu cycles.<br />All sprites are in range: 576 ppu cycles (would stop after 256, of course).<br />8 sprites are in range: 240 ppu cycles.<br /><br />Is my timing calculation correct? If not, why?<br /><br />Also, side note: Could we get the sprite evaluation section of the wiki cleaned up? Maybe add some pseudo-code? It just seems like one of those things that is difficult to explain with a hierarchical ordered list. Maybe it's just me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Tue Aug 30, 2011 4:33 pm</p><hr />
]]></content>
</entry>
</feed>