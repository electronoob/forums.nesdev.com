<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=911" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-01-07T23:50:41-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=911</id>
<entry>
<author><name><![CDATA[Anonymous]]></name></author>
<updated>2006-01-07T23:50:41-07:00</updated>
<published>2006-01-07T23:50:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=911&amp;p=8039#p8039</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=911&amp;p=8039#p8039"/>
<title type="html"><![CDATA[Blip_Buffer 0.4.0 Sound Synthesis Library]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=911&amp;p=8039#p8039"><![CDATA[
In Blip_Buffer.cpp, change "assert( (i &gt;&gt; 31) == -1);" <br />to something like:<br /><br />assert( (i &gt;&gt; (sizeof(long) * 8 - 1)) == -1);<br /><br />so that it will work on platforms that have 64-bit longs.<br /><br />-Mednafen<p>Statistics: Posted by Guest — Sat Jan 07, 2006 11:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2006-01-06T08:27:50-07:00</updated>
<published>2006-01-06T08:27:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=911&amp;p=8003#p8003</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=911&amp;p=8003#p8003"/>
<title type="html"><![CDATA[Blip_Buffer 0.4.0 Sound Synthesis Library]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=911&amp;p=8003#p8003"><![CDATA[
I've just released a long-overdue update to <a href="http://www.slack.net/~ant/libs/#Blip_Buffer" class="postlink">Blip_Buffer, my band-limited synthesis sound library</a>, which is good for implementing things like the NES APU and expansion sound chips. You configure the clock rate and output sample rate, then generate the waveforms by specifying the timestamps (in NES clocks) where the amplitude changes. It handles the rest, including adjustable treble and bass filtering. It's written in portable, conservative C++ and licensed under the <a href="http://www.gnu.org/licenses/lgpl.html" class="postlink">GNU Lesser General Public License</a> (LGPL). Some C programmers have used it without problem, due to its light use of C++. <a href="http://www.slack.net/~ant/bl-synth/samples.html" class="postlink">Examples of sound quality and programs using it</a> are available.<br /><br /><a href="http://www.slack.net/~ant/libs/Blip_Buffer-0.4.0.zip" class="postlink">Blip_Buffer-0.4.0.zip</a><br /><br /><img src="http://www.slack.net/~ant/libs/blip_buffer.png" alt="Image" /><br /><br />I've done a lot to simplify the interface and make the demos clearer. Now they play sound live and show the waveform on screen, using <a href="http://www.libsdl.org/" class="postlink">SDL</a> (they can still be made to write output to a sound file for examination with a sound editor). This allows you to experiment with the code and hear/see the results immediately, and use the mouse to adjust parameters in real-time.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &quot;Blip_Buffer.h&quot;<br /> <br />// Waveform synthesizer for amplitude range of -10 to 10<br />static Blip_Synth&lt;blip_good_quality,20&gt; synth;<br />static Blip_Buffer buf; // Sample buffer<br /><br />int main&#40;&#41;<br />&#123;<br />    buf.clock_rate&#40; 1789773 &#41;; // 1.79 MHz clock rate<br />    if &#40; buf.set_sample_rate&#40; 48000 &#41; &#41; // 48 kHz sample rate<br />        return 1; // out of memory<br />    <br />    synth.output&#40; &amp;buf &#41;; // output to buffer<br />    synth.volume&#40; 0.50 &#41;; // 50% volume<br />    <br />    // Generate this waveform:<br />    // 10                  ___<br />    //  5      ___        |   |<br />    //  0 ____|   |___    |   |________<br />    // -5             |   |<br />    //-10             |___|<br />    //    0   100 200 300 400 500 600 700  &#40;time in NES clocks&#41;<br />    <br />    synth.update&#40; 100,   5 &#41;;<br />    synth.update&#40; 200,   0 &#41;;<br />    synth.update&#40; 300, -10 &#41;;<br />    synth.update&#40; 400,  10 &#41;;<br />    synth.update&#40; 500,   0 &#41;;<br />    buf.end_frame&#40; 700 &#41;;<br />    <br />    // Read and play however many samples were generated<br />    blip_sample_t temp &#91;1000&#93;;<br />    int count = buf.read_samples&#40; temp, 1000 &#41;;<br />    play_samples&#40; temp, count &#41;;<br />    <br />    return 0;<br />&#125;<br /></div><br /><br />On the implementation side I trimmed the library down to just two files (header and source) and rewrote it to use an internal 32-bit sample buffer and fixed some problems with the filter kernel windowing and phase resolution, resulting in slightly better sound quality. It's based on my <a href="http://www.slack.net/~ant/bl-synth/" class="postlink">efficient synthesis algorithm</a>.<br /><br />Feedback welcome, especially critique.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jan 06, 2006 8:27 am</p><hr />
]]></content>
</entry>
</feed>