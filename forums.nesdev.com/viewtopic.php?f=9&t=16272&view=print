<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reverse engineering funny multi-game cartridge</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reverse engineering funny multi-game cartridge</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=16272">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=16272</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>krzysiobal</b> [ Fri Jul 28, 2017 5:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Reverse engineering funny multi-game cartridge</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I got Rinco famiclone (which looks just like Famicom) to fix it. It has one additional 60 pin cartridge socket underneath with multi-game cartridge inserted. I decided to reverse-engineer it because it looks funny (PAL, so many diodes and some mysterious pads with missing chips &amp; resistors)<br /><a href="http://obrazki.elektroda.pl/1674260900_1501282772.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/1674260900_1501282772_thumb.jpg" alt="Image" /></a><br /><br />The cartridge was probably projectted to be put in two-slot consoles, because it is really narrow (nothing to lock against clips in cartridge shell) and was done on 1.5 mm laminate - requires so much force to put it inside.<br /><br />I dumped the menu (CPU $8000-$FFFF + PPU $0000-$1FFF), which can be done with help of kazzo to almost any multicart cartridge without knowledge how it works - except those which start messing with banks at startup.<br /><br />Cartridge contains 200 000 games, but in fact, only: Mario, Lunar ball, Duck Hunt, Wild gunman, Hogans Alley, Bomber man, Tank, Sky destroyer, Binary land, Ice climber. Programmers divided the menu into 1-5000, 5001-10000, etc for easier navigation. <br /><a href="http://obrazki.elektroda.pl/4233306400_1501283468.png" class="postlink"><img src="http://obrazki.elektroda.pl/4233306400_1501283468_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/4565223800_1501283468.png" class="postlink"><img src="http://obrazki.elektroda.pl/4565223800_1501283468_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/9240226500_1501283469.png" class="postlink"><img src="http://obrazki.elektroda.pl/9240226500_1501283469_thumb.jpg" alt="Image" /></a> <br /><br />First i desoldered chips and rev-ed all tracks<br /><a href="http://obrazki.elektroda.pl/2676737600_1501283524.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/2676737600_1501283524_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/6811442900_1501283526.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/6811442900_1501283526_thumb.jpg" alt="Image" /></a> <br /><br />Those glob-tobs have pins in almost same order like ordinary ROMs:<br /><a href="http://obrazki.elektroda.pl/6389913900_1501283855.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/6389913900_1501283855_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/1506105800_1501283857.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/1506105800_1501283857_thumb.jpg" alt="Image" /></a> <br /><br />PRG-ROM is 256k, CHR-ROM is 128 kB. CHR-ROM has only one chip enable line.<br /><br />Then I rev-ed schematics:<br /><a href="http://obrazki.elektroda.pl/7181911200_1501285358.png" class="postlink"><img src="http://obrazki.elektroda.pl/7181911200_1501285358_thumb.jpg" alt="Image" /></a><br /><br />Some notes:<br />* There is 74273 8 bit latch (adress bits A0-A7 are latched, but A4 &amp; A5 are not used)<br />* ROM is not turned off during writes at $8000-$FFFF (bus conflicts),<br />* There is R-C-D reset circuitry which sets latch's bits to 0 on startup,<br />* Two diodes + resistors were used as poor man's OR gate (ORing PPU-A13 &amp; PPU-!RD to feed the result into CHR-ROM's !CE),<br />* PAL16L8's is configured to serve as 12 input &amp; 6 output combinational logic.<br /><br />Then I dumped the PAL to binary using  my home-made flash reader.<br />Then I wrote simple program to convert the binary file into espresso text description:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.i 12<br />.o 6<br />.ilb PPU-A11 PPU-A10 REG.A7 REG.A6 CPU-A14 CPU-A13 CPU-A12 REG.A2 REG.A1 REG.A0 CPU-!ROMSEL! CPU-R/!W! <br />.ob REG.WR PRG-A14 PRG-A15 PRG-A16 BUF-!OE! CIRAM-A10 <br />000000000000 000010<br />000000000001 000010<br />000000000010 000010<br />000000000011 000010<br />000000000100 010010<br />000000000101 010010<br />000000000110 010010<br />000000000111 010010<br />...<br /></div><br /><br />Then I ran espresso on this file to generate logic formulas for each output:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">REG.WR = (CPU-A14 &amp; not CPU-A13 &amp; CPU-A12 &amp; CPU-!ROMSEL! &amp; not CPU-R/!W!);<br />PRG-A14 = (not REG.A6 &amp; CPU-A14 &amp; not REG.A1) | (not REG.A6 &amp; CPU-A14 &amp; not REG.A2) | (REG.A0);<br />PRG-A15 = (not REG.A6 &amp; REG.A2 &amp; REG.A0) | (not REG.A6 &amp; CPU-A14 &amp; not REG.A2) | (REG.A1);<br />PRG-A16 = (not REG.A6 &amp; CPU-A14 &amp; notREG.A2) | (REG.A2);<br />BUF-!OE! = (CPU-A14 &amp; not CPU-A13 &amp; CPU-A12 &amp; CPU-!ROMSEL! &amp; not CPU-R/!W!) | (not CPU-!ROMSEL!) | (notCPU-A12) | (CPU-A13) | (not CPU-A14);<br />CIRAM-A10 = (PPU-A10 &amp; not REG.A7) | (PPU-A11 &amp; REG.A7);<br /></div><br /><br />Data is latched on rising edge of REG.WR signal, which corresponds to writes at $5000-$5FFF (beginning of cycle) or $D000-$DFFF (end of cycle). In fact, first region is used because it does not produce bus conflicts with ROM.<br /><br />Generally:<br />* PRG-A14 &lt;- A0, PRG-A15 &lt;- A1, PRG-A16 &lt;- A2, PRG-A17 &lt;= A3 (at $8000-$b000),<br />* A6 controls 16 KB / 32 KB banking mode,<br />* at $c000-$ffff there is some magic,<br />* A7 controls mirroring<br /><br /><strong>Mysterious DIL14 chip, resistors and jumpers</strong><br />In those mysterious 14 pads probably 74125 tri state buffer should be placed:<br /><a href="http://obrazki.elektroda.pl/2821776800_1501285500.png" class="postlink"><img src="http://obrazki.elektroda.pl/2821776800_1501285500_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/6852534800_1501285591.gif" class="postlink"><img src="http://obrazki.elektroda.pl/6852534800_1501285591_thumb.jpg" alt="Image" /></a><br /><br />Its four inputs are combination of GND/VCC (according to jumpers), which are placed on D0-D3 bus when BUF_!OE goes low, which corresponds to reading from $5000-$5FFF. Probably that could be used for reading some magic value and displaying different game sets, based on that (manufacturer could produce just one type of PCB with same glop-tops and create pseudo-different cartridges according to jumpers)<br /><br /><br />Kazzo script for dumping whole set would be:<br />for (a = 0x5000; a &lt; 0x5010; ++a) {<br />	cpu_w(a, 0x00);<br />	cpu_r(0x8000, 0xbfff);<br />	ppu_r(0x0000, 0x1fff);<br />}<br />During whole operation, m2 must have 1.7 MHz clock, otherwise register will reset.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9638">pal.bin</a> [4 KiB]
			</span><br />
			<span class="gensmall">Downloaded 66 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9636">only_menu.nes</a> [40.02 KiB]
			</span><br />
			<span class="gensmall">Downloaded 74 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Fri Jul 28, 2017 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering funny multi-game cartridge</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Probably shouldn't attach the <em>full</em> multicart ROM, since those games are technically copyrighted (even if the copyright text has been edited out) - the menu-only ROM is probably fine, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zxbdragon</b> [ Fri Jul 28, 2017 6:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering funny multi-game cartridge</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">krzysiobal wrote:</div><div class="quotecontent">I got Rinco famiclone (which looks just like Famicom) to fix it. It has one additional 60 pin cartridge socket underneath with multi-game cartridge inserted. I decided to reverse-engineer it because it looks funny (PAL, so many diodes and some mysterious pads with missing chips &amp; resistors)<br /><a href="http://obrazki.elektroda.pl/1674260900_1501282772.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/1674260900_1501282772_thumb.jpg" alt="Image" /></a><br /><br />The cartridge was probably projectted to be put in two-slot consoles, because it is really narrow (nothing to lock against clips in cartridge shell) and was done on 1.5 mm laminate - requires so much force to put it inside.<br /><br />I dumped the menu (CPU $8000-$FFFF + PPU $0000-$1FFF), which can be done with help of kazzo to almost any multicart cartridge without knowledge how it works - except those which start messing with banks at startup.<br /><br />Cartridge contains 200 000 games, but in fact, only: Mario, Lunar ball, Duck Hunt, Wild gunman, Hogans Alley, Bomber man, Tank, Sky destroyer, Binary land, Ice climber. Programmers divided the menu into 1-5000, 5001-10000, etc for easier navigation. <br /><a href="http://obrazki.elektroda.pl/4233306400_1501283468.png" class="postlink"><img src="http://obrazki.elektroda.pl/4233306400_1501283468_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/4565223800_1501283468.png" class="postlink"><img src="http://obrazki.elektroda.pl/4565223800_1501283468_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/9240226500_1501283469.png" class="postlink"><img src="http://obrazki.elektroda.pl/9240226500_1501283469_thumb.jpg" alt="Image" /></a> <br /><br />First i desoldered chips and rev-ed all tracks<br /><a href="http://obrazki.elektroda.pl/2676737600_1501283524.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/2676737600_1501283524_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/6811442900_1501283526.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/6811442900_1501283526_thumb.jpg" alt="Image" /></a> <br /><br />Those glob-tobs have pins in almost same order like ordinary ROMs:<br /><a href="http://obrazki.elektroda.pl/6389913900_1501283855.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/6389913900_1501283855_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/1506105800_1501283857.jpg" class="postlink"><img src="http://obrazki.elektroda.pl/1506105800_1501283857_thumb.jpg" alt="Image" /></a> <br /><br />PRG-ROM is 256k, CHR-ROM is 128 kB. CHR-ROM has only one chip enable line.<br /><br />Then I rev-ed schematics:<br /><a href="http://obrazki.elektroda.pl/7181911200_1501285358.png" class="postlink"><img src="http://obrazki.elektroda.pl/7181911200_1501285358_thumb.jpg" alt="Image" /></a><br /><br />Some notes:<br />* There is 74273 8 bit latch (adress bits A0-A7 are latched, but A4 &amp; A5 are not used)<br />* ROM is not turned off during writes at $8000-$FFFF (bus conflicts),<br />* There is R-C-D reset circuitry which sets latch's bits to 0 on startup,<br />* Two diodes + resistors were used as poor man's OR gate (ORing PPU-A13 &amp; PPU-!RD to feed the result into CHR-ROM's !CE),<br />* PAL16L8's is configured to serve as 12 input &amp; 6 output combinational logic.<br /><br />Then I dumped the PAL to binary using  my home-made flash reader.<br />Then I wrote simple program to convert the binary file into espresso text description:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.i 12<br />.o 6<br />.ilb PPU-A11 PPU-A10 REG.A7 REG.A6 CPU-A14 CPU-A13 CPU-A12 REG.A2 REG.A1 REG.A0 CPU-!ROMSEL! CPU-R/!W! <br />.ob REG.WR PRG-A14 PRG-A15 PRG-A16 BUF-!OE! CIRAM-A10 <br />000000000000 000010<br />000000000001 000010<br />000000000010 000010<br />000000000011 000010<br />000000000100 010010<br />000000000101 010010<br />000000000110 010010<br />000000000111 010010<br />...<br /></div><br /><br />Then I ran espresso on this file to generate logic formulas for each output:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">REG.WR = (CPU-A14 &amp; not CPU-A13 &amp; CPU-A12 &amp; CPU-!ROMSEL! &amp; not CPU-R/!W!);<br />PRG-A14 = (not REG.A6 &amp; CPU-A14 &amp; not REG.A1) | (not REG.A6 &amp; CPU-A14 &amp; not REG.A2) | (REG.A0);<br />PRG-A15 = (not REG.A6 &amp; REG.A2 &amp; REG.A0) | (not REG.A6 &amp; CPU-A14 &amp; not REG.A2) | (REG.A1);<br />PRG-A16 = (not REG.A6 &amp; CPU-A14 &amp; notREG.A2) | (REG.A2);<br />BUF-!OE! = (CPU-A14 &amp; not CPU-A13 &amp; CPU-A12 &amp; CPU-!ROMSEL! &amp; not CPU-R/!W!) | (not CPU-!ROMSEL!) | (notCPU-A12) | (CPU-A13) | (not CPU-A14);<br />CIRAM-A10 = (PPU-A10 &amp; not REG.A7) | (PPU-A11 &amp; REG.A7);<br /></div><br /><br />Data is latched on rising edge of REG.WR signal, which corresponds to writes at $5000-$5FFF (beginning of cycle) or $D000-$DFFF (end of cycle). In fact, first region is used because it does not produce bus conflicts with ROM.<br /><br />Generally:<br />* PRG-A14 &lt;- A0, PRG-A15 &lt;- A1, PRG-A16 &lt;- A2, PRG-A17 &lt;= A3 (at $8000-$b000),<br />* A6 controls 16 KB / 32 KB banking mode,<br />* at $c000-$ffff there is some magic,<br />* A7 controls mirroring<br /><br /><strong>Mysterious DIL14 chip, resistors and jumpers</strong><br />In those mysterious 14 pads probably 74125 tri state buffer should be placed:<br /><a href="http://obrazki.elektroda.pl/2821776800_1501285500.png" class="postlink"><img src="http://obrazki.elektroda.pl/2821776800_1501285500_thumb.jpg" alt="Image" /></a> <a href="http://obrazki.elektroda.pl/6852534800_1501285591.gif" class="postlink"><img src="http://obrazki.elektroda.pl/6852534800_1501285591_thumb.jpg" alt="Image" /></a><br /><br />Its four inputs are combination of GND/VCC (according to jumpers), which are placed on D0-D3 bus when BUF_!OE goes low, which corresponds to reading from $5000-$5FFF. Probably that could be used for reading some magic value and displaying different game sets, based on that (manufacturer could produce just one type of PCB with same glop-tops and create pseudo-different cartridges according to jumpers)<br /><br /><br />Kazzo script for dumping whole set would be:<br />for (a = 0x5000; a &lt; 0x5010; ++a) {<br />	cpu_w(a, 0x00);<br />	cpu_r(0x8000, 0xbfff);<br />	ppu_r(0x0000, 0x1fff);<br />}<br />During whole operation, m2 must have 1.7 MHz clock, otherwise register will reset.</div><br /><br /><br />dump bad! I think!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jul 28, 2017 7:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering funny multi-game cartridge</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">krzysiobal wrote:</div><div class="quotecontent">Data is latched on rising edge of REG.WR signal, which corresponds to writes at $5000-$5FFF (beginning of cycle) or $D000-$DFFF (end of cycle). In fact, first region is used because it does not produce bus conflicts with ROM.<br /></div>Due to only relying on /ROMSEL (and not M2), it's actually a little weirder/better. For both addresses, /ROMSEL is high for the first half cycle, and so ROM is also not driving for the first half cycle.<br />The ≈20ns latency due to the 74'139 on the mainboard means that the write ends up being latched on the rising edge of <em>the previous</em> /ROMSEL, at which point all the other signals are stable.<br /><br />When /ROMSEL falls on a write to $D000, the rising edge has already happened; there will be no bus conflicts for the latch to care about. (There'll still be a fight between the ROM and the CPU). When /ROMSEL rises again on the following cycle, the other checked values will have already changed.<br /><br />I used Minilog to see if I can could a clearer explanation of what the banking logic is, but it only sorta helped.<br />PRG-A16 can be simplified: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&#40;/Q6 &amp; CPUA14&#41; | Q2</tt><br />BUF-/OE can be simplified also: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">/R/W | //ROMSEL | /A12 | /A14 | A13</tt>.<br /><br />In conclusion, the only idea I can think of is to make a table:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;reg&amp;$47 bank$8000 bank$C000<br />&nbsp; 00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br />&nbsp; 01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br />&nbsp; 02&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br />&nbsp; 03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br />&nbsp; 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5<br />&nbsp; 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br />&nbsp; 06&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3<br />&nbsp; 07&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br />&nbsp; 40&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0 ; vv- the already-identified 16K mode<br />&nbsp; 41&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1<br />&nbsp; 42&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2<br />&nbsp; 43&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3<br />&nbsp; 44&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4<br />&nbsp; 45&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5<br />&nbsp; 46&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;6<br />&nbsp; 47&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;7<br /></div><br /><br />So, <em>when Q6 is low</em> ... there's room for one 64K UNROM game across 16K banks 0,1,2,7, and two 32K NROM games in banks 4,5, and 6,3. (in each 128K half of the 256K PRG)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>krzysiobal</b> [ Sat Jul 29, 2017 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering funny multi-game cartridge</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The ≈20ns latency due to the 74'139 on the mainboard means that the write ends up being latched on the rising edge of the previous /ROMSEL, at which point all the other signals are stable.<br /></div><br />There is huge 10nF capacitor on latch's clock to ground, so it probably will block such spikes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So, when Q6 is low ... there's room for one 64K UNROM game across 16K banks 0,1,2,7, and two 32K NROM games in banks 4,5, and 6,3. (in each 128K half of the 256K PRG)<br /></div><br />Maybe there is also Contra, because there are entries like `jungale, base1, waterfall, base2, snow field, energy zone` which corrsponds to level names (I forgot to check it, now the cart is no longer in my hands), <br /><br />I think the 'jumpers' are rather intended to be used with some kind of switch, rather than jumpers (otherwise they would not put places for resistors).<br /><br />The menu just before start indeed reads $5000-$5fff (even twice and copares the values, if they are not equal, it ends in infinite loop). Thanks to open bus capacitance, 0x50 is read.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;01:CC80:AD 00 50&nbsp; LDA $5000 = #$EA<br />&nbsp;01:CC83:85 12&nbsp; &nbsp; &nbsp;STA $0012 = #$50<br />&nbsp;01:CC85:EA&nbsp; &nbsp; &nbsp; &nbsp; NOP<br />&nbsp;01:CC86:EA&nbsp; &nbsp; &nbsp; &nbsp; NOP<br />&gt;01:CC87:AD 01 50&nbsp; LDA $5001 = #$EA<br />&nbsp;01:CC8A:C5 12&nbsp; &nbsp; &nbsp;CMP $0012 = #$50<br />&nbsp;01:CC8C:D0 F2&nbsp; &nbsp; &nbsp;BNE $CC80<br />&nbsp;01:CC8E:A5 12&nbsp; &nbsp; &nbsp;LDA $0012 = #$50<br />&nbsp;01:CC90:29 0F&nbsp; &nbsp; &nbsp;AND #$0F<br />&nbsp;01:CC92:C9 01&nbsp; &nbsp; &nbsp;CMP #$01<br />&nbsp;01:CC94:90 0B&nbsp; &nbsp; &nbsp;BCC $CCA1<br />&nbsp;01:CC96:C9 03&nbsp; &nbsp; &nbsp;CMP #$03<br />&nbsp;01:CC98:90 0A&nbsp; &nbsp; &nbsp;BCC $CCA4<br />&nbsp;01:CC9A:C9 06&nbsp; &nbsp; &nbsp;CMP #$06<br />&nbsp;01:CC9C:90 0C&nbsp; &nbsp; &nbsp;BCC $CCAA<br />&nbsp;01:CC9E:4C B0 CC&nbsp; JMP $CCB0<br />&nbsp;01:CCA1:4C 00 80&nbsp; JMP $8000<br />&nbsp;01:CCA4:8D 01 50&nbsp; STA $5001 = #$EA<br />&nbsp;01:CCA7:4C 00 80&nbsp; JMP $8000<br />&nbsp;01:CCAA:8D 02 50&nbsp; STA $5002 = #$EA<br />&nbsp;01:CCAD:4C 00 80&nbsp; JMP $8000<br />&nbsp;01:CCB0:8D 03 50&nbsp; STA $5003 = #$EA<br />&nbsp;01:CCB3:4C 00 80&nbsp; JMP $8000<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Jul 29, 2017 11:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reverse engineering funny multi-game cartridge</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">krzysiobal wrote:</div><div class="quotecontent">There is huge 10nF capacitor on latch's clock to ground, so it probably will block such spikes.<br /></div>Even better.<br /><br />Thinking about it a little more, I realized there could be bus conflicts during the moment of transition. Adding the capacitor helps protect against that.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v bus conflict while /ROMSEL still low and R/W low<br />&nbsp;A0-A15 &lt; ROM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;&lt; $5 or $D xxx &gt;<br />&nbsp; D0-D7 &gt;&lt;HiZ &gt;&lt;&nbsp; &nbsp;ROM&nbsp; ◇&nbsp; CPU&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&gt;<br />&nbsp; &nbsp; R/W ^^^^^^^^^^^^^^^^________________<br />&nbsp; &nbsp; &nbsp;M2 ______^^^^^^^^^^______^^^^^^^^^^<br />/ROMSEL _^^^^^^__________^^^^^^=========<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;&lt; latch would happen here without added capacitor; ROM hasn't gotten off the bus yet<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think the 'jumpers' are rather intended to be used with some kind of switch, rather than jumpers (otherwise they would not put places for resistors).<br /></div>Maybe pre-populated jumpers and resistors, and the person doing the customization just needs a diagonal cutter instead of a soldering iron?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;01:CC80:AD 00 50&nbsp; LDA $5000 = #$EA<br />&#91;...&#93;<br />&nbsp;01:CCA4:8D 01 50&nbsp; STA $5001 = #$EA<br />&nbsp;01:CCAA:8D 02 50&nbsp; STA $5002 = #$EA<br />&nbsp;01:CCB0:8D 03 50&nbsp; STA $5003 = #$EA<br /></div></div> So it ultimately switches between one of three different stubs, all of which have access to the same bank at $C000, depending on the value from the jumper pack. Odd.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>