<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - OAM cycling on hypothetical 15-sprite PPU with X as priority</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">OAM cycling on hypothetical 15-sprite PPU with X as priority</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17211">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17211</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Apr 01, 2018 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent">You would only be allowed one copy of an object at once unless you duplicate code.</div><br />Not necessarily. You could, for example, statically allocate up to 6 OAM indices to each of eight actor slots (16-63) and 1 to each of fifteen bullet slots (1-15), leaving sprite 0 open for split use. I'm pretty sure <em>Balloon Fight</em> does something like this.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; ; Calculate this actor's starting index into OAM<br />&nbsp; lda cur_actor<br />&nbsp; asl a<br />&nbsp; adc cur_actor ; A = cur_actor*3<br />&nbsp; asl a<br />&nbsp; asl a<br />&nbsp; asl a&nbsp; ; A = cur_actor*24<br />&nbsp; adc #64<br />&nbsp; tay<br /><br />&nbsp; ; Alternate method<br />&nbsp; ldx cur_actor<br />&nbsp; ldy actor_to_oam_index,x<br /><br />actor_to_oam_index:<br />&nbsp; .byte 64, 88, 112, 136, 160, 184, 208, 232<br /></div><br /><br />The advantage of a 1:1 mapping between actor slots and OAM indices is you can save cycles by working more directly with shadow OAM in response to things that rarely change:<br /><br /><ul><li>Only having to change the attribute in shadow OAM when facing direction changes</li><li>Only having to change the tile number when the object changes to the next cel</li><li>Only having to change the position when the object moves, especially in non-scrolling games. It'd even be possible to handle camera movement for stationary objects by adding the displacement since last frame to the coordinates of all sprites 1-63. </li></ul><br />I was just curious about at what point this simplication to save CPU time overrode the benefits of cycling, and whether that point varied with a PPU's coverage capability and priority policy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Apr 01, 2018 9:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />TBH I think the CPU cycles question is more of a red herring.<br /><br />People don't implement OAM cycling as an intentional tradeoff between performance and the ability to flicker. The cycling is considered a necessity for its visual functionality. Performance is just collateral damage.<br /><br />People who don't implement OAM cycling aren't doing so to save cycles. They do it because it's simpler to implement. Games you find that do it aren't generally high performance games.<br /><br />Burger Time is an example of a commercial NES game that doesn't do it:<br /><a href="https://www.youtube.com/watch?v=TcPXTwXKkSE" class="postlink">https://www.youtube.com/watch?v=TcPXTwXKkSE</a><br /><br />Why doesn't it do it? Well, there are only 6 enemies allowed at once, and they're all 1 tile wide. This leaves 2 tiles for the chef. The falling buns are sprites but given low priority, allowed to drop out, and rightly so, because they are the least important for gameplay (always below player, quickly return to being a nametable detail after falling). None of this has anything to do with performance, it was written this way because the game's needs were simple, and implementing static OAM is also simple (and has advantageous priority control).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Mon Apr 02, 2018 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think there a few techniques getting lumped under one banner, which is cause multiple parties to get confused and cross point each <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> <br /><br />Having Entity type X = RAM address Y to me is Static Allocation. Its means you only ever have one active at one time and allocation/update is super fast. So you might have clones in the Entity type table to handle having more than one of the same object. Mario Kart Battle for example, 4 players and 3 balloons, fixed alloc it why bother doing anything else <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> <br /><br />Having Spawn Entity X @ Sprite Y to me is Fixed Allocation. This is when you walk though your data structure in the level editor and work out where each entity will have its sprites. For example if I was porting Super Mario Bros to the C64, I would use this method to spawn enemies. As you can only walk left and hence the trigger order and number of entities on screen is mostly fixed and known at all points.Allowing me to handle things that will walk off vs something like a hammer bros that is fixed to an area but needs 2 extra for hammers. So I can just put the sprite number in the level data. Zero sorting, zero hunting for allocation and my level editor tool can check and flag instances where I &quot;sprite out&quot;. Eats some RAM though as the level data is now larger. <br /><br />Having an Entity set to a &quot;slot&quot; at allocation by the code, this is Bucket Allocation. The idea is you divide your sprites into groups, 6 sprites for example. Then when you spawn an entity you request the next free group, or next free run of groups if you need n. This speeds up allocation and hunting, and helps combat fragmentation. As you can when you remove one, copy the last sprite into the empty bucket but potentially wastes space, as if you only need 4 sprites you still alloc 6.So you can get the situation where there are enough free sprites but no buckets.  You might have different buckets or pools, so bullets will have their allocation, small entities, large entities as needed etc <br /><br />There are other special cases like Ring Buffer allocation. For example Squid Jump uses a Ring buffer allocate, as the appearance and disappearance are in a fixed order, so I either add at the head or the tail and them remove at the head or the tail ( if you collect a pickup - I just hide the sprite but keep it in the buffer until it is culled as it goes off screen ) <br /><br />As always there are hybrid methods <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> Bullets being Ring Buffer while main entities are bucket, while special case enemies are Static alloc etc <br /><br />as rainwarrior says, Sprite cycling is a separate problem, done because you need it, or not if you don't. you can alloc your OAM one way as per above but not copy it that way to OAM RAM. So you can add an extra step the shuffle the OAM before DMA eats more clocks, but then having each entity no have to look up where and what order its sprites are in every frame might save you more in the long run. Depends on what your game needs. For example you could store the OAM stripped, so 64 X, 64 Y, 64 Tile, 64 Attribute this way a ent can modify each of them with a single ,x and no + 4 maths to get to the next. Then your code does a LSFR to step through all 64 in a random order as you copy the stripped to OAM format. Or you use a LSFR to change the &quot;bucket&quot; order when you copy etc etc

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Apr 02, 2018 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The way I've been doing it is having a routine setting up what order objects are drawn into OAM, and then drawing the sprites in that order.  I have 8 priority levels, and within each priority level objects alternate between forward and reverse drawing order.<br /><br />If I want to add a psuedo 3D level, I would need to think of a more sophisticated priority system though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Apr 09, 2018 8:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a question.  Is there any correlation between slowdown in games and oam allocation?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Apr 09, 2018 9:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If by allocation you mean selecting which slots to use for which sprites, then I don't think it contributes significantly to slowdowns. Processing the metasprite entries themselves might take a good amount time, as the NES isn't particularly good at bulk data processing. Also, having many sprites on screen usually means that there are many active objects, which will definitely contribute to slowdowns.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Apr 09, 2018 11:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I never knew OAM allocation was even a thing outside of smw hacking.  VRAM allocation makes more sense, because, unlike the OAM, you can't update the whole VRAM in one vblank frame.  If the SNES had VRAM access during the entire frame, I think I would've just DMAed almost everything onscreen every frame, like what I do with the OAM, except for maybe bullets and explosion frames.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Oziphantom</b> [ Mon Apr 09, 2018 11:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You probably allocate VRAM about 4 times in a game. If that. Its pretty static, Screens here, Chars there, sprites there. If you change modes then you need to reallocate it but that is about it. Palettes on the other hand probably get moved around a bit. The Sprite tiles you either keep fixed or you have &quot;slots&quot; that you can copy data into, and then frames are copied over the top of the previous frames. <br />OAM is a constantly changing highly volatile resource that needs constant management to ensure you can alloc resources as you need for a given frame.<br /><br />Although you are thinking SNES, this is the NES portion to which their VRAM is in ROM and hence very statically allocated <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Tue Apr 10, 2018 5:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">The Sprite tiles you either keep fixed or you have &quot;slots&quot; that you can copy data into, and then frames are copied over the top of the previous frames.</div><br />Which can get pretty complicated.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">OAM is constantly changing... <br /></div><br />Which is why I rebuild OAM every frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Apr 10, 2018 7:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: OAM cycling on hypothetical 15-sprite PPU with X as prio</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Oziphantom wrote:</div><div class="quotecontent">Although you are thinking SNES, this is the NES portion to which their VRAM is in ROM and hence very statically allocated <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /></div><br />Try <em>Haunted: Halloween '85</em> once. Run its demo with the PPU viewer open and marvel at how it double-buffers enemy cels.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>