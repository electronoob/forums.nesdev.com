<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - help with collision detection</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">help with collision detection</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7196">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7196</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>picccca</b> [ Thu Nov 25, 2010 2:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>help with collision detection</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok, I'm stuck. I can not for anything get my collision detection to work. I have read so many posts on the subject, so I have a clue as to what must be done, but I just can't get it to work.
<br />
<br />What I have so far is a background and a moving sprite. This is how I made the background.
<br />
<br />I have the background nametable like so:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">background:<br />&nbsp; &nbsp; &nbsp; .db $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0&nbsp; ;;row 1<br />&nbsp; &nbsp; &nbsp; .db $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0&nbsp; ;;<br /><br />&nbsp; &nbsp; &nbsp; .db $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0&nbsp; ;;row 2<br />&nbsp; &nbsp; &nbsp; .db $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0&nbsp; ;;<br /><br />.<br />.<br />.<br /><br />&nbsp; &nbsp; &nbsp; .db $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1&nbsp; ;;row 29<br />&nbsp; &nbsp; &nbsp; .db $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1&nbsp; ;; THE FLOOR<br /><br />&nbsp; &nbsp; &nbsp; .db $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0&nbsp; ;;row 30<br />&nbsp; &nbsp; &nbsp; .db $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0&nbsp; ;<br /></div><br /><br />And then it is copied to PPU RAM $2000 like so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadBackground:<br />&nbsp; &nbsp; &nbsp; LDA $2002<br />&nbsp; &nbsp; &nbsp; LDA #$20<br />&nbsp; &nbsp; &nbsp; STA $2006<br />&nbsp; &nbsp; &nbsp; LDA #$00<br />&nbsp; &nbsp; &nbsp; STA $2006<br /><br />&nbsp; &nbsp; &nbsp; LDA #$00<br />&nbsp; &nbsp; &nbsp; STA pointerLo<br />&nbsp; &nbsp; &nbsp; LDA #HIGH&#40;background&#41;<br />&nbsp; &nbsp; &nbsp; STA pointerHi<br />&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; LDX #$00<br />&nbsp; &nbsp; &nbsp; LDY #$00<br />BGOutsideLoop:<br />BGInsideLoop:<br />&nbsp; &nbsp; &nbsp; LDA &#91;pointerLo&#93;, Y<br />&nbsp; &nbsp; &nbsp; STA $2007<br /><br />&nbsp; &nbsp; &nbsp; INY<br />&nbsp; &nbsp; &nbsp; CPY #$00<br />&nbsp; &nbsp; &nbsp; BNE BGInsideLoop<br />&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; INC pointerHi<br />&nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; INX<br />&nbsp; &nbsp; &nbsp; CPX #$04<br />&nbsp; &nbsp; &nbsp; BNE BGOutsideLoop<br /><br /></div><br /><br />I also have some collision data harcoded to start with:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CollisionData:<br />&nbsp; &nbsp; &nbsp; .db %00000000, %00000000, %00000000, %00000000 ;row1&#40;air&#41;<br />&nbsp; &nbsp; &nbsp; .db %00000000, %00000000, %00000000, %00000000 ;row 2&#40;air&#41;<br />.<br />.<br />.<br />&nbsp; &nbsp; &nbsp; .db %11111111, %11111111, %11111111, %11111111 ;row29&#40;floor&#41;<br />&nbsp; &nbsp; &nbsp; .db %00000000, %00000000, %00000000, %00000000 ; row30&#40;air&#41;<br /></div><br /><br />Zeros are air and ones are solids.<br /><br />Then I have CollisionData copied to RAM like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LoadColData:<br />&nbsp; &nbsp; &nbsp; LDA coltab<br />&nbsp; &nbsp; &nbsp; STA pointerLo<br />&nbsp; &nbsp; &nbsp; LDX #$00<br />LoadColDataLoop:<br />&nbsp; &nbsp; &nbsp; LDA CollisionData, x<br />&nbsp; &nbsp; &nbsp; STA pointerLo, x<br />&nbsp; &nbsp; &nbsp; INX<br />&nbsp; &nbsp; &nbsp; CPX #$78<br />&nbsp; &nbsp; &nbsp; BNE LoadColDataLoop<br /></div><br /><br />The variable coltab is declared like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">coltab&nbsp; .rs $78 ;&nbsp; 120 bytes, 1 bit per background tile &#40;0 air, 1 solid&#41;<br /></div><br /><br /><br />Now for the gravity, I want to look up in the CollisionData table if the tile underneth the sprite is solid or not. I have gotten this far:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; LDX MarioX&nbsp; &nbsp; &nbsp; &nbsp; ; Sprite X-pos.<br />&nbsp; &nbsp; &nbsp; LDY MarioY&nbsp; &nbsp; &nbsp; &nbsp; ; Sprite Y-pos.<br /><br />&nbsp; &nbsp; &nbsp; ;Calculating Y-tile number<br />&nbsp; &nbsp; &nbsp; TYA<br />&nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; LSR A&nbsp; ; divide by 8<br />&nbsp; &nbsp; &nbsp; INC A<br />&nbsp; &nbsp; &nbsp; INC A&nbsp; ; add 2 rows, to get under the sprite<br /><br />&nbsp; &nbsp; &nbsp; ;Calculating X-tile number<br />&nbsp; &nbsp; &nbsp; TXA<br />&nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; LSR A<br />&nbsp; &nbsp; &nbsp; LSR A&nbsp; &nbsp;; divide by 8<br /><br /></div>
<br />
<br />So far I think is correct, but what comes after that. First I had some idea to calculate what adress the tile below the sprite is at, like this:
<br />      $2000 + (32*SpriteY) + 32 + SpriteX
<br />But it seams like I then would need to calculate som 16bit numbers or something.
<br />
<br />So the question is basically what do I do next.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Nov 25, 2010 3:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What you need to do for doing sprite -&gt; BG collision, is to compute a set of points arround the sprite (typically the 4 corners), and have a routine that compute their equivalent position on the background map (typically it is just shifting a value right, dropping the low bits - depending on which meta-tile size you use for collision, and how many bits you use to position your sprite).
<br />
<br />If all points are "false" collision then your sprite is free to move, but if any point becomes "true", you can't have it moving.
<br />
<br />Of course you can improve it at a later stage to support for more stuff (this method of 4 points won't work well for very large sprites, for instance, as some part of solid BG could "slip" between the point), but this should at least get you started.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>picccca</b> [ Thu Nov 25, 2010 3:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">What you need to do for doing sprite -&gt; BG collision, is to compute a set of points arround the sprite (typically the 4 corners), and have a routine that compute their equivalent position on the background map (typically it is just shifting a value right, dropping the low bits - depending on which meta-tile size you use for collision, and how many bits you use to position your sprite).<br /></div><br /><br />I have already managed to calculated the corners of the character simply by adding some pixels:<br /> - Upper right corner X = sprite_X + 16pixels<br /> - Upper right corner Y = sprite_Y<br />and so on.<br /><br />I don't really know what meta-tile size is or which size I use for the collision. Maybe this is the true source of the problem, I don't know.<br /><br />I use two bytes to store the sprites position, one for X-position and one for Y-position.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If all points are "false" collision then your sprite is free to move, but if any point becomes "true", you can't have it moving.<br /></div><br /><br />Ok, I think I get this point. I need to check if the corners overlap the solid tiles of the background.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course you can improve it at a later stage to support for more stuff (this method of 4 points won't work well for very large sprites, for instance, as some part of solid BG could "slip" between the point), but this should at least get you started.<br /></div>
<br />
<br />I implemented gravity, then obviously the main character went trough the floor as collision with the floor isn't implemented. But after this is done I think it is quite easy to test collision with other things also.
<br />
<br />But can you please explain "meta-tile size".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 25, 2010 6:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Notice that all objects in Super Mario Bros. are 16x16 pixels, made of a 2x2 block of 8x8 pixel tiles. These blocks are metatiles. Have a look through the <a href="http://wiki.nesdev.com/w/index.php/Glossary#M" class="postlink">nesdev.com glossary</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Nov 25, 2010 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">picccca wrote:</div><div class="quotecontent">I don't really know what meta-tile size is or which size I use for the collision.</div>
<br />Metatiles are groups of tiles that you use to build the levels. NES games typically use a metatile size of 2x2 tiles, because that's the area covered by each entry in the attribute table, but 4x4 is also very common. This is actually a form of compression, since a whole screen can be defined in just 240 bytes if you are using 2x2 metatiles, while 1024 are needed if you are just using raw name/attribute table data.
<br />
<br />You <strong>don't need</strong> metatiles to implement collision detection though, that's optional. If the large size of raw screens is not a problem for you, there's no need to overcomplicate things. You just have to keep in mind that the blocks that form your level are 8x8 pixels (the size of a NES tile).
<br />
<br />Now, collision detection with the background works like this: You first move the character/object in the direction he's supposed to go, then you check if this movement caused it to enter any blocks it shouldn't have, if so, you eject it back.
<br />
<br />If the character moved right, you need to calculate its top-right and bottom-right points, then translate those to coordinates inside your collision map, and finally scan all the blocks from the top one to the bottom one. If any of those is solid, you eject the character to the left.
<br />
<br />Note that if the character moved right, there is no need to check its left side, because there is no possible way for it to collide in that direction, so don't do any unnecessary calculations. The same thing is true when moving up or down.
<br />
<br />Also, test for collisions in each axis separately. Move horizontally, check for horizontal collisions and eject horizontally; then move vertically, check for vertical collisions and eject vertically. If you don't, your character might end up going through corners and other nasty stuff.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>picccca</b> [ Fri Nov 26, 2010 12:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Metatiles are groups of tiles that you use to build the levels. NES games typically use a metatile size of 2x2 tiles, because that's the area covered by each entry in the attribute table, but 4x4 is also very common. This is actually a form of compression, since a whole screen can be defined in just 240 bytes if you are using 2x2 metatiles, while 1024 are needed if you are just using raw name/attribute table data.<br /></div><br /><br />Let's see if I get this, so if I use 2x2 metatile size. The background data will only consist of 16x15 bytes instead of 32bytes per row and 30 rows. Then the part of the code that copies this background data to the PPU RAM need to add the rest of the tiles.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Now, collision detection with the background works like this: You first move the character/object in the direction he's supposed to go, then you check if this movement caused it to enter any blocks it shouldn't have, if so, you eject it back.<br /></div><br /><br />Is this done before NMI interrupt, I guess it is. I actually have all my code within the NMI ruotine now, I don't think that's the way to do it. Should I do almost everything before VBlank (NMI) starts?<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If the character moved right, you need to calculate its top-right and bottom-right points, then translate those to coordinates inside your collision map, and finally scan all the blocks from the top one to the bottom one. If any of those is solid, you eject the character to the left.<br /></div>
<br />
<br />The problem that I have been having is translating the coordinates of the sprite into the collision map. But if I have 2x2 metatile size I think it's easier. Just to confirm, is the idea to calculate a byte offset and add that offset to the adress of the first byte in the collision map, then check if this byte represent solid tile? if so is it not possible without using 2x2 metatile size, becouse of the byte offset calculated being greater then what a 8bit register can hold? Maybe I just see the easy way of doing this.
<br />
<br />However, I need to clean up my code first, move stuff away from the NMI routine, then I will try to implement the 2x2 metatile size, and then the collision dettection.
<br />
<br />BTW, Thanks for the help so far.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 26, 2010 1:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">picccca wrote:</div><div class="quotecontent">Let's see if I get this, so if I use 2x2 metatile size. The background data will only consist of 16x15 bytes instead of 32bytes per row and 30 rows. Then the part of the code that copies this background data to the PPU RAM need to add the rest of the tiles.</div><br />That's correct. Copying the data to PPU RAM becomes more indirect, because you'll need to load a byte from the map and use that byte as an index to read the tiles from the metatile definitions, which you'll then write to VRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is this done before NMI interrupt, I guess it is. I actually have all my code within the NMI ruotine now, I don't think that's the way to do it. Should I do almost everything before VBlank (NMI) starts?</div><br />Yes, you should do all the game logic beforehand and make sure that only actual PPU updates are performed during VBlank. You can still have everything in the NMI, but do the PPU updates first (to make sure they happen during VBlank), and then process the game logic for the next frame.<br /><br />Having the game logic outside of the NMI and graphical updates in the NMI will result in a more robust program structure though, so if you are up to it, I recommend it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Just to confirm, is the idea to calculate a byte offset and add that offset to the adress of the first byte in the collision map, then check if this byte represent solid tile?</div><br />Yeah, but since you are using bits to represent the solidity of each tile, just checking bytes won't do, you'll have to use masks in order to check the individual bits.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">if so is it not possible without using 2x2 metatile size, becouse of the byte offset calculated being greater then what a 8bit register can hold?</div>
<br />You can access arrays with more than 256 entries if you use pointers, but that's not really necessary in your case because you are using bits for the solidity, so you really only have (32 * 30) / 8 = 120 bytes for the collision data.
<br />
<br />You just have to find the formula to convert the sprite coordinates to collision map coordinates. The sprite coordinates are measured in pixels, while the collision coordinates are measured in 8x8-pixel tiles (unless you decide to use metatiles, but since this is not the case yet I'll stick to the tiles), so you discard the lower 3 bits of the coordinates (just shift the numbers right 3 times). These 3 bits indicate where in the tile your point of interest is, but that info is meaningless because you are not doing pixel collision, just tile collision.
<br />
<br />So now you have 2 5-bit values. The Y value indicates the row (0 to 31), and if you pay attention to your collision data you'll see that there are 4 bytes per row, so you multiply the Y coordinate by 4 (shift it left twice) to locate the start of the row you want. Now X. There are 4 bytes in a row, and each byte has 8 bits. Use the top 2 bits (a value between 0 and 3) of the 5-bit X coordinate to find which byte, and the lower 3 (a value between 0 and 7) to find the bit.
<br />
<br />So, to find the byte you use: <strong>(Y / 8) * 4 + (X / 64)</strong>
<br />
<br />And to find the bit you use: <strong>(X / 8) AND 7</strong>
<br />
<br />I'm sure you know how to read the byte, but maybe I need to elaborate on the bit. you will probably need a table like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BitMasks:<br />&nbsp; &nbsp;.db %10000000<br />&nbsp; &nbsp;.db %01000000<br />&nbsp; &nbsp;.db %00100000<br />&nbsp; &nbsp;.db %00010000<br />&nbsp; &nbsp;.db %00001000<br />&nbsp; &nbsp;.db %00000100<br />&nbsp; &nbsp;.db %00000010<br />&nbsp; &nbsp;.db %00000001</div>
<br />
<br />So, once you have calculated the index of the bit you need, you use that index to load a value from this table. Then you can AND it with the byte read from the collision map, and if the result is 0, the tile is air, otherwise it's solid.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Fri Nov 26, 2010 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />trust everything that tokumaru says, but I'll add my 2 cents.
<br />
<br /><div class="quotetitle">picccca wrote:</div><div class="quotecontent">Let's see if I get this, so if I use 2x2 metatile size. The background data will only consist of 16x15 bytes instead of 32bytes per row and 30 rows. Then the part of the code that copies this background data to the PPU RAM need to add the rest of the tiles.</div><br /><br />Yes.  2x2 metatiles (16x16 pixels) are Mario block size.  4x4 (32x32 pixels) is also common.<br /><br /><br /><div class="quotetitle">picccca wrote:</div><div class="quotecontent">Is this done before NMI interrupt, I guess it is. I actually have all my code within the NMI ruotine now, I don't think that's the way to do it. Should I do almost everything before VBlank (NMI) starts?</div><br /><br />It's good practice to do all game logic outside of NMI and save NMI for graphics updates.  See Disch's <a href="http://wiki.nesdev.com/w/index.php/The_frame_and_NMIs" class="postlink">NMI guide</a> to learn how to set this up.<br /><br /><div class="quotetitle">piccca wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If the character moved right, you need to calculate its top-right and bottom-right points, then translate those to coordinates inside your collision map, and finally scan all the blocks from the top one to the bottom one. If any of those is solid, you eject the character to the left.<br /></div><br /><br />The problem that I have been having is translating the coordinates of the sprite into the collision map. But if I have 2x2 metatile size I think it's easier. Just to confirm, is the idea to calculate a byte offset and add that offset to the adress of the first byte in the collision map, then check if this byte represent solid tile? if so is it not possible without using 2x2 metatile size, becouse of the byte offset calculated being greater then what a 8bit register can hold? Maybe I just see the easy way of doing this.<br /><br />However, I need to clean up my code first, move stuff away from the NMI routine, then I will try to implement the 2x2 metatile size, and then the collision dettection.<br /><br />BTW, Thanks for the help so far.</div>
<br />
<br />I wrote a post about sprite-&gt;bg collision detection on my nesdev blog back when I was dealing with the same problem.  My post is specific to my game (which uses 16x16 metatiles), but you might pick something up from it: <a href="http://www.tummaigames.com/blog/2009/07/29/explorer-10-sprite-collision/" class="postlink">sprite collision</a>
<br />
<br />My approach was to check for a collision first and then not move if there was a collision, rather than move first and eject upon collision.  Tokumaru is more knowledgable than I am in nesdev, so his method is likely better than mine, but give my post a read and see if it helps.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 26, 2010 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">MetalSlime wrote:</div><div class="quotecontent">My approach was to check for a collision first and then not move if there was a collision, rather than move first and eject upon collision.  Tokumaru is more knowledgable than I am in nesdev, so his method is likely better than mine, but give my post a read and see if it helps.</div>
<br />The reason I think the approach I described is better is because it requires less computation. For example, when you move horizontally, most of the time the movement is allowed, and very few times there will be walls to stop you, so it seems like a good idea to assume the movement is allowed.
<br />
<br />Another problem is that when a movement is not allowed, you can't just "not move", you still have to move as close to the solid obstacle as possible. For example, say that the character is moving at a speed of 4 pixels per frame and there is a wall 3 pixels ahead. If you detect that the point 4 pixels ahead is inside a wall and just don't move at all, your character will stop even though it's still 3 pixels away from the wall. So you still must move it those 3 pixels so that it touches the wall.
<br />
<br />Either way should work though, so do whatever you think is easier. I just happen to think that assuming that movements are always possible (and correcting the few cases when they are not) is slightly easier on the CPU, but aside from that I don't think there are many differences between both approaches.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cartlemmy</b> [ Fri Nov 26, 2010 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Another problem is that when a movement is not allowed, you can't just "not move", you still have to move as close to the solid obstacle as possible. For example, say that the character is moving at a speed of 4 pixels per frame and there is a wall 3 pixels ahead. If you detect that the point 4 pixels ahead is inside a wall and just don't move at all, your character will stop even though it's still 3 pixels away from the wall. So you still must move it those 3 pixels so that it touches the wall..</div>
<br />
<br />I think this is a really good point, when you have a finite time step (in this case 1/60th of a second) it is better to "move back in time", than to "look forward in time".
<br />
<br />I've been implementing collision detection over the last week, and I feel your pain. This stuff is hard  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> Especially when you try to do slopes as well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 26, 2010 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cartlemmy wrote:</div><div class="quotecontent">This stuff is hard  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> Especially when you try to do slopes as well.</div>
<br />Yeah, things get much more complex when you throw slopes in. We've had a pretty interesting <a href="http://nesdev.com/bbs/viewtopic.php?t=6319&amp;start=0&amp;postdays=0&amp;postorder=asc&amp;highlight=" class="postlink">conversation about slopes</a> a while back, if anyone is interested.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>picccca</b> [ Sat Nov 27, 2010 1:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I finally got collision detection working now, thanks alot. I see now that I was in fact not far from the solution, but I wouldn't have made it without the help given to me here.
<br />
<br />I will now try to use metatiles 2x2 for the background. Let's see how far I will come on that.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, things get much more complex when you throw slopes in.<br /></div>
<br />
<br />As this is my first program for the NES, I think I will not make the collisions much more complex.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cartlemmy</b> [ Sat Nov 27, 2010 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">picccca wrote:</div><div class="quotecontent"><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, things get much more complex when you throw slopes in.<br /></div><br /><br />As this is my first program for the NES, I think I will not make the collisions much more complex.</div>
<br />
<br />Hehe, sorry I wasn't meaning that you should do slopes. I just said that because that is what I am doing <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>