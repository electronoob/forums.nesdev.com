<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=10622" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-10-27T21:44:51-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=10622</id>
<entry>
<author><name><![CDATA[Imperial]]></name></author>
<updated>2013-10-27T21:44:51-07:00</updated>
<published>2013-10-27T21:44:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119976#p119976</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119976#p119976"/>
<title type="html"><![CDATA[Re: Playtesting and Prototyping (especially with a game boar]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119976#p119976"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Sometimes I prototype things in Python before translating them to assembly language.<br /></div><br />Nice. Btw, I've written a script in Lua where the assembly as a whole is an object. This object has a method for each 6500 instruction. I've gone a little overboard with that in trying to mimic a 6502 processor, with members for the registers and a hash table for previously accessed memory locations... But that's a little flawed and I'll probably have to trim that away. <br /><br />What this assembly object does is keep a record of each line, and it attempts to track the size as well. It also has a 'write' method to iterate through the lines and write to a string, which it returns, and which can be printed to standard output or written to another file. <br /><br />You can pass this assembly object to other functions and let them call its instruction methods, and thus break down assembly code into much more manageable parts. Things that are a little harder to do in assembly could be passed on to Lua to some extent. Essentially, the Lua code builds the assembly code, and of course something similar could be done in Python.<br /><br />And that's how the game is built. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <a href="http://github.com/Heathcode/rabbitfarm" class="postlink">link.</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6159">Imperial</a> — Sun Oct 27, 2013 9:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-10-27T14:42:58-07:00</updated>
<published>2013-10-27T14:42:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119952#p119952</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119952#p119952"/>
<title type="html"><![CDATA[Re: Playtesting and Prototyping (especially with a game boar]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119952#p119952"><![CDATA[
Sometimes I prototype things in Python before translating them to assembly language.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Oct 27, 2013 2:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Imperial]]></name></author>
<updated>2013-10-27T14:04:41-07:00</updated>
<published>2013-10-27T14:04:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119951#p119951</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119951#p119951"/>
<title type="html"><![CDATA[Playtesting and Prototyping (especially with a game board)]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10622&amp;p=119951#p119951"><![CDATA[
So, we are working on a game for NES! And while I'm working on the programming and learning the ins and outs of NES (currently have a build with a plain grey screen, so yeah...) we decided to design and play test the game using a set of dice, some charts and notes, and that Super Mario Bros chess set you can get at various stores for $20 or so. <br /><br />The idea is that while we can't handle the free spacial movement of sprites in the final game, we can determine whole outcomes somewhat randomly with separate dice. An algorithm or logic diagram could be written up to describe the game at any given moment, and code could be written up from that. Even if the program doesn't work ever, we may end up with a playable tabletop game instead. Win! <br /><br />Anyone else do it this way or something similar? I'm just curious. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6159">Imperial</a> — Sun Oct 27, 2013 2:04 pm</p><hr />
]]></content>
</entry>
</feed>