<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=20&amp;t=9399" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-10-13T10:42:40-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=20&amp;t=9399</id>
<entry>
<author><name><![CDATA[Profetylen]]></name></author>
<updated>2012-10-13T10:42:40-07:00</updated>
<published>2012-10-13T10:42:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9399&amp;p=101132#p101132</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9399&amp;p=101132#p101132"/>
<title type="html"><![CDATA[Strange behavior of the Gameboy timer]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9399&amp;p=101132#p101132"><![CDATA[
So, I'm writing a Gameboy emulator and I'm currently trying to implement an accurate timer. I'm running Blargg's intstr_timing test and is getting &quot;failed #255&quot; because the timer fails to initialize. I was checking out what happens with the debugger of bgb (which by the way passes that test) and found out some strange behavior of the timer.<br /><br />When the timer is being confiugred this code runs:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ld a, 00<br />ld (FF00+06), a ; TMA<br />ld a, 05<br />ld (FF00+07), a ; TAC<br />ld a, 00<br />ld (FF00+0F), a ; int flag<br />ld a, EC<br />ld (FF00+05), a ; TIMA<br />push af<br />ld a, 29<br /></div><br /><br />This sets up the timer to count at 0x40000 Hz, so since the gameboy clock counts at 0x400000 Hz this makes the timer count at 0x400000 / 0x40000 = 0x10 Hz, that is every 16 cycles, right?<br /><br />If the above is correct, then I can't understand the behavior you get when you debug this with bgb. This is what happens:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; TIMA is 0 when the program gets here<br />ld a, 00<br />ld (FF00+06), a ; TMA<br />ld a, 05<br />ld (FF00+07), a ; TAC<br />; Here, the timer counts for the first time, since TIMA gets 1 here.<br />; Since the previous instruction (E0) takes 12 cycles and the timer<br />; overflowed, the new remainder of the timer should be either is 0, 4 or 8 cycles.<br />ld a, 00<br />; 3E (which executes in 8 cycles) were executed and TIMA were<br />; increased to 2, so the remainder must have been 8 in the previous<br />; instruction for this to happen and is now therefore 0.<br />ld (FF00+0F), a ; int flag<br />; TIMA didn't increase (as expected) and the remainder should<br />; therefore be 12, since another E0 was executed.<br />ld a, EC<br />; TIMA got 3 and another 3E was executed, so the remainder should<br />; now be 4 cycles.<br />ld (FF00+05), a ; TIMA<br />; TIMA is here overwritten and set to the a register, that is, EC. TIMA<br />; should first have turned 4 and then overwritten by to EC, so here<br />; the remainder should be 0, since another 12-cycle E0 was executed.<br />push af<br />; The previous instruction, F5, takes 16 cycles and TIMA was<br />; increased to ED, so the remainder should still be 0.<br />ld a, 29<br />; 3E was executed again, adding another 8 cycles which shouldn't<br />; increase TIMA since the remainder was just 0 and that only makes<br />; a total of 8 cycles. However, TIMA is now EE, and I wonder<br />; what the explanation for this is.<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5357">Profetylen</a> â€” Sat Oct 13, 2012 10:42 am</p><hr />
]]></content>
</entry>
</feed>