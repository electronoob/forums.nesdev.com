<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Memory mirroring?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Memory mirroring?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7864">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7864</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>djcouchycouch</b> [ Wed Jun 15, 2011 9:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Memory mirroring?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've always wondered: why do the NES CPU and PPU have areas in their memory map that are mirrors of other areas?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Jun 15, 2011 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Because not all address lines are decoded. The NES decides which memory chips to activate based on the addresses that are accessed by the CPU or PPU. For example, since PRG-ROM is supposed to be mapped at $8000-$FFFF, only one address line is required to detect that this range is being accessed: A15 will be low when accessing $0000-$7FFF, and high when acessing $8000-$FFFF.
<br />
<br />Since it takes more hardware to watch more address lines, some of them are ignored if there are no undesired side effects. The NES only has 2KB of RAM, mapped at $000-$7FF. To guarantee that this RAM would be visible <strong>only</strong> at that range, the CPU would have to check if a bunch of address lines were low, which would require extra hardware and would bring no advantage. So it's easier/cheaper to ignore those address lines, causing the same memory to be visible no matter what those lines are, effectively making the same memory visible at different addresses.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Edgyr45</b> [ Fri Jun 24, 2011 1:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because not all address lines are decoded</div>
<br />
<br />What is an address line?
<br />0x0700 is an address
<br />0x0000-0x0700 is a range of addresses
<br />
<br />I'm really trying to understand this here (you can laugh at me all you want <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />)
<br />
<br />I'll take 0x0700 which is in the 0x0000-0x07FF range that get repeated 3 times in RAM. 
<br />
<br />If I want to read 0x0700's mirror, I must read at : 0x0700 + 2kb = 0x0F00 which is also in the range of the 1st mirror memory 0x0800â€“0x0FFF
<br />
<br />I tried to see how those two memory are related and I still don't get it...
<br />
<br />0x0700 = 00000111 00000000b
<br />0x0F00 = 00001111 00000000b
<br />
<br />Perhaps with this post you will identify what is it I don't get...
<br />Thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cpow</b> [ Fri Jun 24, 2011 1:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Edgyr45 wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Because not all address lines are decoded</div><br /><br />What is an address line?<br /><br />0x0700 = 00000111 00000000b<br />0x0F00 = 00001111 00000000b<br /><br />Perhaps with this post you will identify what is it I don't get...<br />Thanks</div>
<br />
<br />An address line is a physical wire that carries a signal.  A signal is a voltage level (say 0volts to 5volts).  In *most* computers the signal is "quantized" into three regions where a "voltage above some value" means a logic 1 and a "voltage below some other value" means a logic 0 (and a voltage between these values is "bad news" but that's not relevant here).  Realistically a computer doesn't *know* it's dealing with 1's and 0's.  But...anyway.
<br />
<br />If you look at the addresses you've converted from hexadecimal to binary notation above, you should quickly see the only difference between them is that leftmost 1 in the 0x0F00 case that is not there in the 0x0700 case.  It is that 0/1 bit of the address that rides on an address line that is not connected to the NES RAM.  The rest of the address lines to the right of that 0/1 bit *are* connected to the NES RAM.  Thus, for both of those addesses you gave above the NES RAM will put data onto the data bus from its "address 0x0700".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jun 24, 2011 2:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well how you guys are over complicating things.
<br />
<br />Simply put, the RAM chip is enabled to respond in the $0000-$1fff range, but is only 2k, so like cpow said two adress lines are simply unconnected to the chip and will not have any effect on it.
<br />The higher adress lines aren't connected to the chip eihter - they are instead connected to some 74 series logic chip that will do the decoding / that is tell the RAM chip to respond when the CPU acess $0000-$1fff, tell the PPU to respond when adressing $2000-$3fff, etc...
<br />
<br />Of course it could have been possible to fully decode the adress and disable the RAM chip for range $800-$1fff, but this would waste hardware for no reason.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Fri Jun 24, 2011 2:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The address lines are the bits that make up the address you are accessing. In order to access the RAM the system checks that certain bits in the address are low (0) to determine you are accessing the memory region between $0000 and $2000. This means you have less bits to check than specifically checking for less than $0800. 
<br />
<br />So what happens is if the address is $1FFF which is
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">01111111111111<br />32109876543210 - guide<br /></div>
<br />
<br />That 0 which would start being set at address $2000 is letting the logic know to enable the RAM chip. Since the address lines above $7FF don't actually connect to the memory it loops around as the lines that are connected still change.
<br />
<br />Not sure how to make it much more clear. 
<br />
<br />In a smaller example say you had a memory that was only 4 bytes. If the address is 00, 01, 10, or 11 they would all access a different byte of memory. When you try to access 100, that first 1 is ignored cause it connects to nothing. So you're accessing the same as 00. 
<br />
<br />Logically you can get the RAM address for NES by doing Address &amp; $7FF. This logical and operation will remove any address bits higher than what actually exists on the NES RAM chip. I hope this helped.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>IbrahimSba3i</b> [ Wed Apr 16, 2014 2:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Memory mirroring?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So 0x2000 which is 0b 0010 0000 0000 0000 is equivalent to 0x0000 which is 0b0000 0000 0000 0000 in binary because the first 3 bits are ignored anyways???

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Apr 16, 2014 6:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Memory mirroring?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No, $2000 isn't the same as $0000 because they result in different chips being enabled. CPU A15-A13 go to the 74LS139 address decoder at U3 in <a href="http://wiki.nesdev.com/w/index.php/File:Neswires.jpg" class="postlink">this schematic</a>, which computes three chip select signals:<br /><ul><li>000: Internal RAM </li><li>001: PPU ports </li><li>100-111: /ROMSEL </li></ul><br />EDIT: corrected

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Wed Apr 16, 2014 6:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Memory mirroring?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">No, $2000 isn't the same as $0000 because they result in different chips being enabled. CPU A15-A13 go to the 74LS139 address decoder at U3 in <a href="http://wiki.nesdev.com/w/index.php/File:Neswires.jpg" class="postlink">this schematic</a>, which computes three chip select signals:<br /><ul><li>000: Internal RAM </li><li>001: PPU ports </li><li>100: /ROMSEL </li></ul></div><br />Nitpick: that third one should be 1<strong>XX</strong>, since 100/101/110/111 are all included (otherwise it'd only be $8000-$9FFF).<br /><br />The way it actually works is as follows:<br />1. The 'secondary' decoder in the 74139 is always enabled (/EN connected to GND) and decodes A15 and M2; for 1/1 (valid access to $8000-$FFFF) it enables /ROMSEL (i.e. PRG /CE), and for 0/1 (valid access to $0000-$7FFF) it enables the 'primary' decoder in the 74139.<br />2. The 'primary' decoder in the 74139 is enabled as above and decodes A14 and A13; for 0/0 ($0000-$1FFF) it enables CPU RAM, and for 0/1 ($2000-$3FFF) it enables the PPU.<br />In theory, pins 6 and 7 on the 74139 could have also been tapped in order to decode $4000-$5FFF and $6000-$7FFF, but the NES itself doesn't map anything to those address spaces (the APU registers at $4000-$401A are internal to the CPU itself and don't count) and there wasn't room for them on the cartridge connector.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>