<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=11463" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-07-28T09:14:42-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=11463</id>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-07-28T09:14:42-07:00</updated>
<published>2014-07-28T09:14:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131662#p131662</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131662#p131662"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131662#p131662"><![CDATA[
If it helps, here's my bounding box collision with the player for the game I'm working on.<br /><br />You load the temp variables x0,y0,x1,y1 with the bounding box to test against the player, and this function returns 0/1 in A (and also Z flag), without modifying any registers/variables except A/flags.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; clobbers A, flags<br />player_overlap:<br />   lda player_x1<br />   cmp x0<br />   bcc @no_overlap<br />   lda player_y1<br />   cmp y0<br />   bcc @no_overlap<br />   lda x1<br />   cmp player_x0<br />   bcc @no_overlap<br />   lda y1<br />   cmp player_y0<br />   bcc @no_overlap<br />@overlap:<br />   lda #1<br />   rts<br />@no_overlap:<br />   lda #0<br />   rts<br /></div><br /><br />The boxes include the row/column at x1/y1, this is intentional so that x1=255 can cover right to the edge of the screen. So, an 8x16 box test might look like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda thing_x<br />   sta x0<br />   clc<br />   adc #7<br />   sta x1<br />   lda thing_y<br />   sta y0<br />   clc<br />   adc #15<br />   sta y1<br />   jsr player_overlap<br />   beq @no_hit</div><br /><br />It is the following conditions, any of which results in no overlap:<br /><ul><li>player_x1 &lt; x0</li><li>player_y1 &lt; y0</li><li>x1 &lt; player_x0</li><li>y1 &lt; player_y0</li></ul><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Mon Jul 28, 2014 9:14 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2014-07-28T07:01:39-07:00</updated>
<published>2014-07-28T07:01:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131657#p131657</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131657#p131657"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131657#p131657"><![CDATA[
<div class="quotetitle">psycopathicteen wrote:</div><div class="quotecontent"><br />I always subtract x2 from x1, compare the result with w2, add w1 and check if the result is positive.  Then I do the same for the y-axis.<br /></div><br /><br /> Care to explain a little further?<br /><br /><br /><br /> Sik, IIRC, had one that I hadn't seen before; for object to object collision detection (he used it on 68k code because the ISA gave it a speed up over traditional compare list). But, I don't remember what it was at the moment :B<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Mon Jul 28, 2014 7:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-07-27T18:56:58-07:00</updated>
<published>2014-07-27T18:56:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131649#p131649</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131649#p131649"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131649#p131649"><![CDATA[
I always subtract x2 from x1, compare the result with w2, add w1 and check if the result is positive.  Then I do the same for the y-axis.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun Jul 27, 2014 6:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[NovaSquirrel]]></name></author>
<updated>2014-07-27T09:33:58-07:00</updated>
<published>2014-07-27T09:33:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131622#p131622</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131622#p131622"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131622#p131622"><![CDATA[
Checking collision with the background is pretty much the same between platformers and overhead view games, just what you actually do in response to a collision to prevent the player from going through would be different. In a platformer when you hit an object from below you would want to stop the player's jump, and from above you might want to adjust the player's Y position to make sure they're standing on whatever they landed on, but an overhead view game in all directions and when moving horizontally in a platformer you would want to adjust the player's position so they're as close as they can get without overlapping with the tile (or simply not move).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3838">NovaSquirrel</a> — Sun Jul 27, 2014 9:33 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AleksMTE]]></name></author>
<updated>2014-07-27T07:29:31-07:00</updated>
<published>2014-07-27T07:29:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131621#p131621</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131621#p131621"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131621#p131621"><![CDATA[
So, every single game did it different? Games with overhead perspective has a different way to do it differently than sidescrollers? if so i think i gave a bad example there, i´m doing a game with overhead perspective.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6623">AleksMTE</a> — Sun Jul 27, 2014 7:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[rainwarrior]]></name></author>
<updated>2014-07-27T07:12:08-07:00</updated>
<published>2014-07-27T07:12:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131620#p131620</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131620#p131620"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131620#p131620"><![CDATA[
I don't know about SMB's background collision, but this might get you on the right track:<br /><br />When it's a regular grid, you no longer need to think about individual bounding boxes. Think of how many tiles are on a screen; you don't want to be testing 100 bounding boxes! If it's a grid of 16x16 pixel blocks, you can find the grid coordinates of an X/Y pixel location by dividing by 16.<br /><br />So, you have a screen that is 16 blocks wide, 15 blocks tall. If you used 1 byte per block, you'd need 240 bytes for the screen. Looking up a collision value would be something like this in C:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">grid_coord = (x &gt;&gt; 4) | (y &amp; 0xF0); // note: (y &amp; 0xF0) == (y &gt;&gt; 4) &lt;&lt; 4<br />return collide&#91;grid_coord&#93;;</div><br />When you move your character, you can test a couple of pixel locations along the edge of the character to check for collision with the world.<br /><br />I'll leave you to figure out how this would translate to assembly. If you want to get more complicated, you could test your player character's bounding box against the grid. You can also store collision data more compactly (you may only need 1 bit per tile, so this screen could be 30 bytes if you have cycles to spare unpacking bits).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5165">rainwarrior</a> — Sun Jul 27, 2014 7:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-27T07:09:11-07:00</updated>
<published>2014-07-27T07:09:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131619#p131619</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131619#p131619"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131619#p131619"><![CDATA[
Sample the background map at the four corners of the object and do bounding box on each sample that returns solid. Then you can <a href="http://pineight.com/mw/index.php?title=Four-corner_collision_detection" class="postlink">calculate wall response</a>.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 27, 2014 7:09 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AleksMTE]]></name></author>
<updated>2014-07-27T06:55:35-07:00</updated>
<published>2014-07-27T06:55:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131617#p131617</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131617#p131617"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131617#p131617"><![CDATA[
So i think i get it, but i will test later, because i need to do Background collision,<br />So, with background objects like the the blocks in Super Mario Bros., how did they made to define which object you can pass through and which one not?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6623">AleksMTE</a> — Sun Jul 27, 2014 6:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[NovaSquirrel]]></name></author>
<updated>2014-07-27T00:56:04-07:00</updated>
<published>2014-07-27T00:56:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131612#p131612</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131612#p131612"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131612#p131612"><![CDATA[
This is my generic collision test routine I used in DABG and Sliding Blaster that return whether or not a collision occured in carry (for ca65, but easily adaptable to other things):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro swapa mema, memb<br />  lda mema<br />  pha<br />  lda memb<br />  sta mema<br />  pla<br />  sta memb<br />.endmacro<br /><br />.proc ChkTouchGeneric<br />  jsr TryCollide<br />  swapa TouchLeftA,   TouchLeftB<br />  swapa TouchTopA,    TouchTopB<br />  swapa TouchWidthA,  TouchWidthB<br />  swapa TouchHeightA, TouchHeightB<br />  jsr TryCollide<br />  clc ; no collision<br />  rts<br />TryCollide:<br />  lda TouchLeftB<br />  clc<br />  adc TouchWidthB<br />  sta TouchRight<br />  lda TouchTopB<br />  clc<br />  adc TouchHeightB<br />  sta TouchBottom<br /><br />  lda TouchLeftA<br />  cmp TouchLeftB<br />  bcc No<br /><br />  lda TouchLeftA<br />  cmp TouchRight<br />  bcs No<br /><br />  lda TouchTopA<br />  cmp TouchTopB<br />  bcc No<br /><br />  lda TouchTopA<br />  cmp TouchBottom<br />  bcs No<br />  pla ; pop the return address from either JSR off the stack<br />  pla<br />  sec ; collision detected<br />No:<br />  rts<br />.endproc<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3838">NovaSquirrel</a> — Sun Jul 27, 2014 12:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2014-07-26T22:16:32-07:00</updated>
<published>2014-07-26T22:16:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131607#p131607</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131607#p131607"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131607#p131607"><![CDATA[
Hopefully this code makes some sense.  They're surely not the best examples..<br /><br />In both examples, $200-$2FF is a copy of sprite memory.  First one is from Munchie Attack, sprite at $204 is the player and sprites at $240 and up are the food objects.  The second one is from Roadkill (not released, a rip-off of the David Crane's game Freeway).  It compares an 8x8 player to individual 8x8 sprites instead of actual objects.  In both of these, the values added and subtracted are pretty specific to the object sizes in the games.  So it might not seem intuitive, at least it didn't to me when I was writing it, it took a little experimentation.<br /><br />In both cases, a successful hit detect means the code makes to the end of the routine.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">hit_detection:<br />        ldx #0<br />@hitloop:<br />        lda $241,x<br />        sta tiletype<br />        bne :+<br />        jmp @itsblank<br />:<br />        lda $243,x<br />        sec<br />        sbc #8<br />        cmp $207<br />        bcc :+<br />        jmp @itsblank<br />:<br />        clc<br />        adc #24<br />        cmp $207<br />        bcs :+<br />        jmp @itsblank<br />:<br /><br />        lda $240,x<br />        sec<br />        sbc #15<br />        cmp $204<br />        bcc :+<br />        jmp @itsblank<br />:<br />        clc<br />        adc #30<br />        cmp $204<br />        bcs :+<br />        jmp @itsblank<br />:<br /><br />        lda #0<br />        sta $241,x<br />        sta $245,x<br />        sta $249,x<br />        sta $24D,x<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;----------------------------------------------------------<br />;                    Detect Hits<br />;----------------------------------------------------------<br />hit_detect:             ; detect vertical hits first<br /><br />        ldy #0<br />        ldx #$0C<br /><br />@check_next_v:<br />        lda $201,x              ; check to see if sprite tile is 0<br />        beq @skip_one           ; if it is, do not check<br /><br />        lda $200,x<br />        sec<br />        sbc #8<br />        sta temp<br /><br />        lda $208                ; load Y value of player<br />        cmp temp<br />        bcc @skip_one<br />        lda $200,x<br />        clc<br />        adc #8<br />        sta temp<br />        lda $208<br />        cmp temp<br />        bcc @hit1<br /><br />@skip_one:<br /><br />        txa<br />        clc<br />        adc #24<br />        tax<br /><br />        cpx #$84<br />        bcc @check_next_v<br /><br />        rts<br /><br /><br />@hit1:                       ; a V hit as occured, check H position<br /><br />@check_next_h:<br />        lda $201,x<br />        beq @skip_2<br /><br />        lda $203,x<br />        sec<br />        sbc #8<br />        sta temp<br /><br />        lda $20B<br />        cmp temp<br />        bcc @skip_2<br />        lda $203,x<br />        clc<br />        adc #8<br />        sta temp<br />        lda $20B<br />        cmp temp<br />        bcc @do_hit1<br /><br /><br />@skip_2:<br />        inx<br />        inx<br />        inx<br />        inx<br />        bne @check_next_v<br /><br />        rts<br /><br />@do_hit1:<br />   lda #196<br />        sta $208<br />        lda #18<br />   sta p1wait<br />        rts<br /><br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sat Jul 26, 2014 10:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-07-26T20:18:31-07:00</updated>
<published>2014-07-26T20:18:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131599#p131599</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131599#p131599"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131599#p131599"><![CDATA[
Every object must have a position and dimensions. With that information you should be able to calculate the four edges (top, bottom, left and right) of an object.<br /><br />Coordinates usually indicate the top left corner of pictures, and in that case you already know the top and left edges (they're the Y and X coordinates, respectively). To calculate bottom and left all you have to do is Y + Height and X + Width, respectively. An object's coordinates don't have to be at its top left corner though, I for example like coordinates to be the middle bottom of my sprites, so I can quickly use them for collisions with the ground, but that's my choice. Just keep in mind that this affects how you calculate the edges of the bounding boxes.<br /><br />Once you have the 4 edges it's just a matter of comparing them to exclude collisions. For example, if the right edge of object A is less than the left edge of object B, they can't possibly be colliding because object B is entirely to the right of object A. If after 4 comparisons you haven't excluded the collision, you can know for sure that the objects are colliding.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Jul 26, 2014 8:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AleksMTE]]></name></author>
<updated>2014-07-26T19:54:48-07:00</updated>
<published>2014-07-26T19:54:48-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131597#p131597</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131597#p131597"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131597#p131597"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />I could dig out a code example, if it would help.<br /></div><br /><br />I think that it would help, because i can't think of a way to do that on assembler (because i am a newbie)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6623">AleksMTE</a> — Sat Jul 26, 2014 7:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2014-07-26T19:22:00-07:00</updated>
<published>2014-07-26T19:22:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131596#p131596</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131596#p131596"/>
<title type="html"><![CDATA[Re: How to do Bounding Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131596#p131596"><![CDATA[
The short way to describe it is using greater-than and less-than checks.  Which is done by a CMP instruction followed by BCC or BCS.  Some assemblers give those instructions alternate names, BLT and BGT respectively, to make it easier to remember.<br /><br />So your 2 objects, you have X,Y coordinates which represent the upper-left pixel.  You'd compare the X coordinates of both objects, continue if obj1 X is greater than obj2 X.  Take obj2 X, and add a number to it, this is the horizontal size of the box in pixels.  If obj1 X is less than the new obj2 X, it's in the X coordinate of the box.  Then follow the same process for the Y coordinate.<br /><br />I could dig out a code example, if it would help.<br /><br />edit: note that example is a little simplified, in that the size of obj1 is just one pixel, and only obj2 has a box.  Making a box for obj1 is a similar process of comparing, adding the box size, comparing again.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sat Jul 26, 2014 7:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[AleksMTE]]></name></author>
<updated>2014-07-26T18:13:41-07:00</updated>
<published>2014-07-26T18:13:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131595#p131595</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131595#p131595"/>
<title type="html"><![CDATA[Re: How to do Bouncing Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131595#p131595"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I think it's &quot;bounding&quot; not &quot;bouncing&quot;. Have you implemented <a href="https://wiki.allegro.cc/index.php?title=Bounding_Box" class="postlink">bounding boxes</a> in another language?<br /></div><br /><br />I didn't have checked it when I wrote it, thanks for pointing it out, i will fix it. <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><br />Anyway, no, i didn't do it before in any language, i am starting to get into video game development.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6623">AleksMTE</a> — Sat Jul 26, 2014 6:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-07-26T17:59:21-07:00</updated>
<published>2014-07-26T17:59:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131594#p131594</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131594#p131594"/>
<title type="html"><![CDATA[Re: How to do Bouncing Boxes on assembly?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11463&amp;p=131594#p131594"><![CDATA[
I think it's &quot;bounding&quot; not &quot;bouncing&quot;. Have you implemented <a href="https://wiki.allegro.cc/index.php?title=Bounding_Box" class="postlink">bounding boxes</a> in another language?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 26, 2014 5:59 pm</p><hr />
]]></content>
</entry>
</feed>