<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=1516" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2006-05-17T23:47:26-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=1516</id>
<entry>
<author><name><![CDATA[Lucky]]></name></author>
<updated>2006-05-17T23:47:26-07:00</updated>
<published>2006-05-17T23:47:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=13043#p13043</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=13043#p13043"/>
<title type="html"><![CDATA[Junky 6502 Assembly Tutorial Outline]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=13043#p13043"><![CDATA[
Thanks for the input Disch, what you said makes a lot of sense too.<br /><br />I think you're absolutely right about the ADC/SBC needing to come later.  And there definitely needs to be some bare-bones fundamentals stuff in there.<br /><br />I'm definitely on the same track with you, but it's going to be difficult to find a balance of programming and fundamental explaining.  So many tutorials suffer from 50 page fundamental primers before any programming happens, and the user is left giving up at page 30 after being overloaded with no reward to back up the concepts they're trying to understand.  It will take a careful balance to keep the reader engaged and practicing while getting over that first hump.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=502">Lucky</a> — Wed May 17, 2006 11:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2006-05-16T00:05:06-07:00</updated>
<published>2006-05-16T00:05:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=12972#p12972</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=12972#p12972"/>
<title type="html"><![CDATA[Junky 6502 Assembly Tutorial Outline]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=12972#p12972"><![CDATA[
One of these days I should check out that 6502 simulator so I can see what it does.<br /><br />Anyway, the reason I posted was to suggest that you fit in a few key programming concepts.  Assuming you're speaking to people with zero existing experience, it's good to talk about bare-bones fundamentals of programming.  "What is a variable" kind of stuff.  Branches should probably be covered earlier....  as they open the door to talking about <em>conditionals</em> and <em>loops</em>.  And loops open the door to talking about <em>arrays</em>.  And eventually you'll want to touch on <em>pointers</em>.<br /><br />Once the concepts on how to apply the stuff is down, most of the instructions' uses will be apparent, and the tutorial won't have to go over every single one of them.  Maybe a few could be touched on though.<br /><br />Also, considering the complexity of ADC/SBC (they're probalby two of the most difficult instructions to completely understand 100%), they should probably be intruduced later.<br /><br />But tomorrow I'll try and check out that 6502 Simulator so I can get more of an understanding.  I do really like the idea of teaching 6502 without getting into any nitty-gritty NES stuff.  That's just too much for a newbie to swallow at once.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue May 16, 2006 12:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Lucky]]></name></author>
<updated>2006-05-15T23:20:41-07:00</updated>
<published>2006-05-15T23:20:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=12971#p12971</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=12971#p12971"/>
<title type="html"><![CDATA[Junky 6502 Assembly Tutorial Outline]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=1516&amp;p=12971#p12971"><![CDATA[
I looked through the instruction set, and tried to come up with an outline for writing a 6502 assembly tutorial.  The notes are kind of slapped together, but I think you can get the idea.<br /><br /><em><br /><br />Introduction - Machine Language, and the 6502 processor.  Brief description of what a register is and does, and what memory is used for.  Nothing remotely in depth.<br />Quiz.<br /><br />Binary and Hexadecimal.  Why and how.  Conversion between decimal, binary, and hex.<br />Exercises<br /><br />Using the 6502 Simulator.  Writing and running a first program with presupplied preprocessor code, using only LDA.  Get user familiar with simulator, step through, watching registers, etc.<br />Exercises<br /><br />Writing and running the second program.  LDA, LDX, LDY.  More talk about registers.<br />Explaining why 8 bits and value ranges.<br />Exercises<br /><br />INX, INY, DEX, DEY.<br />Exercises<br /><br />TAX, TAY, TXA, TYA<br />Exercises<br /><br />ADC, SBC<br />Exercises<br /><br />STA, STX, STY<br />Exercises<br /><br />LDA, LDX, LDY Revisited (Loading from absolute memory, not immediate)<br />Exercises<br /><br />INC, DEC<br />Exercises<br /><br />ASCII and output to the screen<br />Exercises<br /><br />Explanation of code preprocessor stuff (.org $0200, .db, etc.)<br /><br />More output to the screen stuff using predefined memory, Indexed addressing<br />Various functions and exercises revisited with output.<br /><br />Flags register introduction.  Carry flag, CLC, SEC<br />16-32 bit addition exercise<br /><br />JMP<br />Exercise<br /><br />Zero flag, branching.<br />Looping / revisiting inc/dec<br />8 bit Multiplication exercise<br /><br />AND/EOR/ORA, more branching<br />exercises<br /><br />CMP, CPX, CPY, BIT, keep on branching and looping!<br />exercises<br /><br />ASL, LSR, ROL, ROR<br />exercises<br /><br />Introduction to the Stack<br />PSA, PLA<br />exercises<br /><br />Subroutines, JRS, RTS<br />exercises<br /><br />More exercises (don't know yet, but more advanced stuff)<br /><br />Stuff about the stack I don't fully have an application for yet (TSX, TXS, PHP, PLP)<br /><br />Zero Page<br /><br />More flags stuff (decimal mode, interrupts, overflow flag)<br /><br />Branching with overflows and negative flags.<br /><br />NMI and interrupt codes (RTI)<br /><br />Throw in NOP for good measure<br /><br />Final exercise/project<br /><br /></em><br /><br />Towards the very end I get a little sketchy about stuff, but I'm 99.99% I can learn that part before I get to the part of writing about it.  The toughest part will be designing both educational and entertaining exercises.  With some readjustment of my outline, it would be possible to get people to build on previous exercises and make a finite project in the end, which could be very challenging and rewarding.  That will take a lot more outlining as well.  Plus more sections need to be written for advanced techniques.  Which techniques I'm a little at a loss for...<br /><br />What do you guys think?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=502">Lucky</a> — Mon May 15, 2006 11:20 pm</p><hr />
]]></content>
</entry>
</feed>