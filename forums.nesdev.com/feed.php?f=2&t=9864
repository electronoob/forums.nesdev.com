<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9864" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-02-28T11:23:45-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9864</id>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2013-02-28T11:23:45-07:00</updated>
<published>2013-02-28T11:23:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9864&amp;p=108496#p108496</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9864&amp;p=108496#p108496"/>
<title type="html"><![CDATA[New VRAM Buffer transfer routine.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9864&amp;p=108496#p108496"><![CDATA[
I wrote a new VRAM data transfer routine since my old one was using page 1 and I want the stack space for something else. I think this is a good method if you don't mind using up some extra ROM. It is pretty fast, as it has to make a constant six branches per block of data to be copied. Looking for feedback if this is a decent method, or I am missing something that could be improved?<br /><br />Forgive the heavy macro code, but I think it should still be understandable even if you aren't familiar with the macros.<br /><br />Data format: PPUAddressHI, PPUAddressLO, Length (max 32, bits inverted), data, data, .. <br />PPUAddressHI : bit7 set means no more data blocks.<br />PPUAddressHI : bit6 set means column mode.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.proc PPUtransferFast<br /><br />    ; Buffer fixed to VramBuffer1<br />    ; can copy about 140 bytes with OAM DMA<br />    ; can copy about 185 bytes without OAM DMA<br /><br />    locals<br />        dataLength          .byte<br />    endlocals   <br />    <br />    ldy #0                      ; y is index into buffer<br />    <br />    lda VramBuffer1<br />    <br />    repeat<br />        <br />        ldx #CT_NMI                         ; assume horizontal, leave NMI active<br />        ; check for vertical write:<br />        if rol a == bit7 set                ; check bit 6 with bit 7<br />            ldx #(CT_NMI | CT_ADDRINC32)<br />        endif<br />        <br />        stx PPU_CTRL                        ; calling code expected to set PPU_CTRL after if needed.<br />        ror a ; restore a <br />        <br />        sta PPU_ADDRESS                     ; bit6 ignored here.<br />        <br />        iny<br />        lda VramBuffer1, y                  ; PPU address low<br />        sta PPU_ADDRESS<br />        <br />        ; load length byte:<br />        ; bits for length are pre-inverted for more optimal code<br />        iny<br />        lda VramBuffer1,y<br />        tax<br />        <br />        if !a &amp; #32 ; bit 6 (not) set, assume valid value of 32<br />            ; if here, all PPU writes below will be executed<br />            tax ; a is zero, so set length to 0 -&gt; bottom 5 bits will be read as set (logic is inverted below)<br />            iny<br />            mb PPU_DATA := VramBuffer1&#91; y &#93; ; do extra copy for total of 32<br />        endif<br />        <br />        mb local::dataLength := x<br />        <br />        tya ; count index with a<br />        <br />        if lsr local::dataLength == carry clear<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 1 &#93;<br />            mb y := a +c #1<br />        endif<br />        if lsr local::dataLength == carry clear<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 1 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 2 &#93;<br />            mb y := a +c #2<br />        endif<br />        if lsr local::dataLength == carry clear<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 1 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 2 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 3 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 4 &#93;<br />            mb y := a +c #4<br />        endif<br />        if lsr local::dataLength == carry clear<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 1 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 2 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 3 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 4 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 5 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 6 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 7 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 8 &#93;<br />            mb y := a +c #8<br />        endif<br />        if lsr local::dataLength == carry clear<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  1 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  2 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  3 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  4 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  5 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  6 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  7 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  8 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y +  9 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 10 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 11 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 12 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 13 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 14 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 15 &#93;<br />            mb x, PPU_DATA := VramBuffer1&#91; y + 16 &#93;<br />            mb y := a +c #16<br />        endif<br />        <br />        iny<br /><br />    until lda VramBuffer1&#91; y &#93; == N set<br /><br />    ; clear buffer:<br />    <br />    ldy #0<br />    sty M::VramBuffer1Offset<br />    lda #$FF                    ; first byte is negative, if this buffer used now, nothing happens<br />    sta VramBuffer1<br />    <br />    rts<br />.endproc<br /></div><br /><br />I am trying to figure out if you can have a block of 32 copies and jump into the appropriate spot, but then the constant part of the offset will be wrong. You could read the buffer backwards, but then it has to be written backwards. <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /><br />EDIT: Realized that there is no requirment to negate the data count, I was doing that to avoid having to clear the carry for the add in each if-block: I can just add one less than the current constant.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Thu Feb 28, 2013 11:23 am</p><hr />
]]></content>
</entry>
</feed>