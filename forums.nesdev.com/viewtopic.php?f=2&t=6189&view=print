<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Non-fixed bank calling into other non-fixed bank via fixed?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Non-fixed bank calling into other non-fixed bank via fixed?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6189">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6189</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Thu Mar 18, 2010 7:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Non-fixed bank calling into other non-fixed bank via fixed?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is it ever common for a non-fixed PRG bank to make a call or use data from another non-fixed bank using a routine in the fixed bank to retrieve the data or make the call? I was thinking this could be a potential way to further reduce duplication of data across PRG banks.
<br />
<br />At one point, all of my game data was stored in one PRG bank at a time: music, level, sprites, animations, and entity code. Now, I've got sprites, animations and entity code in one bank and level and music data in another bank. However, sometimes duplication is still necessary in order to support multiple game data sets (for lack of a better term) which may have some of the same sprites/animations/entities. So I've been thinking about ways to reduce that duplication. Thoughts/advice?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 18, 2010 8:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Of course a fixed bank can and does act as a <a href="http://en.wikipedia.org/wiki/Trampoline_%28computers%29" class="postlink">trampoline</a> between code in one bank and code in another. But if you have code that interacts with numerous banks of data, it's probably best to put that code in the fixed bank if possible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Thu Mar 18, 2010 8:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's how my code works at present. All bankswitching is done from the fixed bank, and any code that runs within a non-fixed bank only accesses data already in the currently loaded fixed-bank. What I'm thinking about is an extreme case where perhaps you have almost all of your 16k PRG block filled with entity code, and it needs to access meta sprites or animations in another 16K PRG block that also could not fit into the fixed bank. Does this ever happen in practice or is this an extreme idea/case?
<br />
<br />*edit* come to think of it, I actually do have a couple of special situations where this occurs. When an entity tests the map, it calls a routine in the fixed bank which switches out the non-fixed bank, does the map collision test, then restores the previous bank and returns to the entity which called it. I guess my real question is: how far have you seen this technique go in commercial games? Do you ever find functions which can marshall a call between non-fixed banks to any routine or retrieve any data? Or are they always specialized such as the case I described?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 18, 2010 8:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a valid thing to do, but I'd avoid doing it too much because the function call and the bankswitches add a lot of overhead.
<br />
<br />I'm trying to do the following in order to avoid having a switchable bank using another switchable bank: The fixed bank contains the main game engine, because this is usually the one that needs frequent access to the other banks (usually for level data). To give more space to the main engine, code that doesn't need access to multiple banks (such as title screens, menus, PPU update routines, and so on) is put in a switchable bank.
<br />
<br />I don't know if the 16KB of the fixed bank will be enough to hold the main engine when it's complete, but at least I do my best to keep unrelated stuff elsewhere.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Thu Mar 18, 2010 8:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's a good idea, thanks. Do you anticipate being able to fit all of your entity code into the fixed bank along with your engine? Since this is my first NES game, I have no way of knowing how much space my entity code will ultimately occupy. I went with the trampoline scheme described above to account for the possibility that the code could become quite large. I'll have to look into trying what you suggested and move some code out of the fixed bank that doesn't need to be there, and see how much I have left over. I guess the bottom line is, there's no single "correct" way of dealing with these issues, since any given choice represents some kind of trade off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neilbaldwin</b> [ Thu Mar 18, 2010 9:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I recently had to move a lot of my drawing routines into fixed ROM. So much handier now when adding new menus etc. Means I can stick the name tables in whichever bank I like and call the drawing routines with the relevant bank number. Probably common sense stuff but I'm learning all the time.
<br />
<br />I wish you could bank-switch DPCM - it would make my life a lot easier <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 18, 2010 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">That's how my code works at present. All bankswitching is done from the fixed bank, and any code that runs within a non-fixed bank only accesses data already in the currently loaded fixed-bank. What I'm thinking about is an extreme case where perhaps you have almost all of your 16k PRG block filled with entity code</div><br />What is entity code? All Google can find are HTML character entities.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">how far have you seen this technique go in commercial games? Do you ever find functions which can marshall a call between non-fixed banks</div>
<br />Yes. I know of three such call gates in Apple II products alone:
<br /><ul><li>Apple IIe call gate bankswitches in an alternate ROM bank. </li><li>Apple II ProDOS has the so-called "MLI" call gate that switches from the upper ROM (containing BASIC and the Monitor) to the RAM (containing ProDOS). </li><li>The IIGS call gate switches to 65C816 native mode (which allows execution outside the first 64 KiB of memory) and looks up routines in a jump table. If you have a IIGS, try going into the Monitor and listing the code at $00/F89C. </li></ul>
<br />neilbaldwin: You can bankswitch DPCM on some mappers. I can think of at least Crazy Climber, MMC1, MMC3, and MMC5.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Thu Mar 18, 2010 10:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Gradualore wrote:</div><div class="quotecontent">That's how my code works at present. All bankswitching is done from the fixed bank, and any code that runs within a non-fixed bank only accesses data already in the currently loaded fixed-bank. What I'm thinking about is an extreme case where perhaps you have almost all of your 16k PRG block filled with entity code</div><br />What is entity code? All Google can find are HTML character entities.<br /><br /></div>
<br />
<br />I was under the impression entity was a common term used on this forum to describe in-game objects that have a lifespan and some kind of intelligence/update routine. googling "nesdev entities" or "nesdev entity" comes up with several posts by me, and a few others using this term. I think I first adopted it after some discussions with Banshaku a while back. I was originally just going to call them "enemies" since I didn't have any plans for a non enemy entity, but later on I felt the more generic term was better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Mar 18, 2010 10:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've seen 'actor code' used elsewhere.
<br />
<br />Consider this: Make each bank's code a more or less self-contained module with a defined API, as if you were making the module for other people's code to call. This should help you define the entry points used by your trampoline.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Mar 18, 2010 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well there is many way it could be done, but you'd want to go into this order, the first being the best and the last being the worst :
<br />1) Code and data related to it in one 16k bank
<br />2) If 1) cannot be done because you have too much data, place code in the fixed bank and data related to it in multiple 16k banks
<br />3) If 2) cannot be done because the fixed bank is aldready full, have code in a switched bank, and data related to it that exceed the switched bank being acedded trough a "trampoline" routine in the fixed bank (will be very slow !)
<br />4) If it lags by using 3) because it was too slow, have your code repeated in multiple banks (at the same adress) so that it can bankswitch the data related to it quickly without using a trampoline
<br />
<br />Another way to solve the problem is to use 32k banks (your reset, NMI, IRQ and bankswitching routines will HAVE to be done like point 4), so you can have code and related data in a 32k bank, wich is twice as large. However, if you still overflow that limit, you'll have to deal with something similar to point 4) in all cases. However, it is much less likely you'll need that because the banks are bigger.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MetalSlime</b> [ Thu Mar 18, 2010 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Guardian Legend does this a lot.  Their CHR data for example is spread across several banks, and for engines that aren't in the fixed bank (title screen, password screen, ending, etc) they have to do some bankswap voodoo to get their graphics.
<br />
<br />They have it streamlined down into a single subroutine that can handle all cases.  When they want to call a routine from another unfixed bank, they embed the address and bank of the target subroutine as DATA after the call to the fixed bank helper routine, like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; JSR Crossbank_bridge&nbsp; ;this routine performs the switch<br />&nbsp; .byte $03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;target bank<br />&nbsp; .word $8134-1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;address of target subroutine &#40;in RTS form&#41;<br />&nbsp; lda whatever&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;continue code in this bank upon return<br />&nbsp; cmp something<br />&nbsp; beq somewhere<br /></div><br /><br />The switching routine itself builds a bridge back to the original bank using the stack and then reads the target address:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Crossbank_bridge:<br />&nbsp; STA tempA&nbsp; &nbsp; &nbsp;;save A and Y<br />&nbsp; STY tempY<br />&nbsp; <br />&nbsp; PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;pull return address off stack and<br />&nbsp; STA ptr1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;store in a pointer variable for 3-byte data read.<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;we also add 3 bytes and push it back on the stack,<br />&nbsp; ADC #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;building a bridge back to where we started<br />&nbsp; TAY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;we add 3 so we return to the point AFTER the embedded<br />&nbsp; PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;data bytes<br />&nbsp; STA ptr1+1<br />&nbsp; ADC #$00<br />&nbsp; PHA<br />&nbsp; TYA<br />&nbsp; PHA<br /><br />&nbsp; LDA current_bank&nbsp; &nbsp;;push the current bank on the stack too<br />&nbsp; PHA<br />&nbsp; JSR Crossbank_Go&nbsp; &nbsp;;perform the jump.&nbsp; JSR here is important.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;when the crossbank routine returns, it will return<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;here<br />&nbsp; STA tempA <br />&nbsp; STY tempY<br />&nbsp; PLA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;pull the origin bank<br />&nbsp; JMP bankswitch&nbsp; &nbsp; &nbsp; &nbsp;;JMP is important here.&nbsp; when bankswitch returns<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;it will return to the proper place in the original bank<br />Crossbank_Go:<br />&nbsp; LDY #$03<br />&nbsp; LDA &#40;ptr1&#41;,Y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;read target address in other bank&nbsp; &nbsp;<br />&nbsp; PHA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;address will be in the form of address-1 b/c<br />&nbsp; DEY&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;of the RTS trick<br />&nbsp; LDA &#40;ptr1&#41;,Y<br />&nbsp; PHA<br />&nbsp; DEY<br />&nbsp; LDA &#40;ptr1&#41;,Y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;read target bank<br /><br />&nbsp; STA current_bank&nbsp; &nbsp;;bank switch and return to the target bank<br />&nbsp; TAY<br />&nbsp; LDA bank_table,Y&nbsp; &nbsp; ;UNROM bankswitch<br />&nbsp; STA bank_table,Y&nbsp; &nbsp; ;now we are in the target bank<br />&nbsp; LDA tempA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;restore vars <br />&nbsp; LDY tempY <br />&nbsp; RTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;RTS to target routine<br /></div>
<br />
<br />Just an example of how one commercial game handles this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu Mar 18, 2010 5:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">neilbaldwin wrote:</div><div class="quotecontent">I wish you could bank-switch DPCM - it would make my life a lot easier <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />
<br />You can with some specific mapper like the MMC3 and some under ones that I don't remember.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 18, 2010 5:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In games that use CHR-RAM there are usually many pages of tile data, and this is a good example of when it's OK to do these things, because the goal is to use a big amount of data at once, and probably isn't even done during gameplay, when CPU time is a very important resource. If a similar routine was used several times during gameplay to fetch small pieces of data, there would certainly be a significant impact on performance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Mar 18, 2010 6:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent"><div class="quotetitle">neilbaldwin wrote:</div><div class="quotecontent">I wish you could bank-switch DPCM - it would make my life a lot easier <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />You can with some specific mapper like the MMC3 and some under ones that I don't remember.</div>
<br />
<br />UNROM is easy to mod, replace the 74HC32 with a 74HC08 (replacing OR gates with AND gates) and it makes UNROM keep $8000-$BFFF fixed and $C000+ is banked.  That's iNES mapper #180, for Crazy Climber, and it's the type of bank setup I used in that 512kB-sized 'Chipography' NSF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Mar 18, 2010 7:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">UNROM is easy to mod, replace the 74HC32 with a 74HC08 (replacing OR gates with AND gates) and it makes UNROM keep $8000-$BFFF fixed and $C000+ is banked.</div>
<br />The only disadvantage would be having to repeat the interrupt vectors in all banks.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>