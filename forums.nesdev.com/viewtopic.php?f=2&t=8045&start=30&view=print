<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Generic compression on NES - *done*</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Generic compression on NES - *done*</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8045">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8045</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Aug 23, 2011 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are some different kind of compression suitable for different kind of games. In many cases you could use nybbles instead of bytes as units, I suppose.
<br />
<br />In the case of Sokoban (is one example), the player piece is in exactly one position, which does not contain a crate or box. Walls remain there, are never moved, and nothing else is in their place; and the level can be considered surrounded by walls. The number of targets is equal to the number of crates and no crate is in a position where it can never be moved (if there is one, replace it with a wall while compiling if it is already on a target, and display an error message if it is not on a target). (I have used this method; recently, in fact.)
<br />
<br />In the case of stroker.gb, the maximum size of levels is 8x8 (not counting the borders), and each cell inside is one of two states, so I store each row as one byte. Currently I stored the size information as two bytes but it should be one byte, since there is two nybbles is enough space for that. I also compress the tile set to use one bit per pixel, and there are only fifteen tiles (digits 0 to 7 (the level numbers are displayed in octal), the "Lv" symbol, black square, white square, and two copies of the border tile (so that the code to flip the tiles can be simplified)). The program decompresses it and duplicates them using different palettes so that there are three colors (actually, shade of gray) which they can appear in during the game. I also use tile 0x9C as the tile to clear the screen with; if you know GameBoy programming, can you figure out why I have done this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 24, 2011 6:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Random access is a bit of a stretch. You'd need to store (bit-)pointers to all potential access points and make sure they aren't straddled by match/literal runs. </div><br />In most cases you'd have to store those pointers even if you left the data uncompressed.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This is probably fine for dialogues in an RPG but it renders any sort of pointer arithmetic rather tricky, such as to display arbitrary chunks out of large two-dimensional tilemap arrays.</div><br />True. As you said, the problem comes from the fact it's two-dimentional. So you can either do random access in one of the directions (for example use pointers for each row OR each column of the maps, although it-ll end up wasting significant space), or separate the large map into screens, which are compressed separately (the solution I'd do probably).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are some different kind of compression suitable for different kind of games. In many cases you could use nybbles instead of bytes as units, I suppose. </div>
<br />This will work only if one type of nybble is much more frequent than another type, which is less likely to happen than with bytes, but it really all depends on the data you're using.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>viren</b> [ Sat Sep 24, 2011 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been reversing the game Shatterhand for a bit and it uses a very basic system.
<br />There's a table that defines 'tiles' (2x2 8 pixel blocks) and then another table that defines metatiles (2x2 tiles), and each room in the game is composed of 8x8 metatiles.
<br />
<br />There's a byte associated with each tile which determines tile type, i.e solid, water, climbable, pain tile, so on. And the upper two bits are the palette for the tile.
<br />
<br />The game doesn't require extreme variation so it works well. Although I've seen similar stuff described on the forum before I just thought I'd mention how this particular commercial game did it. More knowledge can't hurt.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 24, 2011 12:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's always interesting to know what the various games used. The scheme used by Shatterhand (or Solbrain, which I prefer, because that tokusatsu series was actually broadcast here in Brazil back when I was a kid) seems very standard, and works well for most platformers.
<br />
<br />I'm a little curious to know how NES games handled slopes. Even though the NES has tons of platformers, not many of them have slopes. Of course I'm more interested in how the physics handles the slopes than in how they are stored in the ROM, so this doesn't have much to do with compression! =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Sat Sep 24, 2011 12:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@tokumaru: I guess you've read <a href="http://games.greggman.com/game/programming_m_c__kids/" class="postlink">http://games.greggman.com/game/programming_m_c__kids/</a> already? It contains some info on how they implemented slopes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 24, 2011 12:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />heh, yeah, I think that many things in that game were implemented poorly, including slopes. Don't get me wrong, that M.C. Kids article is an interesting read for anyone interested in NES programming, but IMO the product itself isn't a particularly good example of a well coded game. Some of the solutions mentioned in the article are pretty rushed and far from ideal.
<br />
<br />I just bought a cart of the game a couple of weeks ago though, so I don't think it's a terrible game, just... mediocre I guess, both as a game and as the program behind it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Sep 24, 2011 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I love that game. I mean, how is it badly coded? What pieces? Yeah, they were rushed and most games were and couldn't be finely tuned at all. Bayou Billy anyone? I mean, also...if anyone else did it or was even asked to do a McDonalds game, I'm sure it would have been way worse, I think they hit the game outta the park with what they were given.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Sep 24, 2011 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I just bought a cart of the game a couple of weeks ago though, so I don't think it's a terrible game, just... mediocre I guess, both as a game and as the program behind it.</div>
<br />Which makes it good for subdividing engines into those better than M.C. Kids and those worse than M.C. Kids. If only there were a few more such post-mortems, we could even set up a "Mohs scale" of platformer engine sophistication, analogous to those for <a href="http://en.wikipedia.org/wiki/Mohs_scale_of_mineral_hardness" class="postlink">mineral hardness</a>, <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/MohsScaleOfScienceFictionHardness" class="postlink">science fiction realism</a>, <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/MohsScaleOfRockAndMetalHardness" class="postlink">rock music noisiness</a>, and <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/SortingAlgorithmOfTropes" class="postlink">more</a>, with more points than just "Action 52" and "M.C. Kids".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>viren</b> [ Sat Sep 24, 2011 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A bit off topic but do you have something public and playable yet tokumaru?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 24, 2011 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nope... Real life sucks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sampsonk</b> [ Tue Oct 04, 2011 11:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I played around with a couple different types of compression implementations in NES projects.  One was an adaptation of pucrunch with a 256-byte sliding window, which enabled a number of useful optimizations.  This was useful for a tracker-based music engine I was working on.
<br />
<br />Straight-up RLE also had a number of useful properties.  It provided surprisingly decent compression for typical world maps comprised of 16x16 metatiles.  I split game maps into screens of 16x13 metatiles in size and separately RLE-compressed each one.  The background engine was able to pull individual rows and columns from the compressed screens directly, without needing to decompress the whole thing into a buffer first, by efficiently skipping around within the compressed block.  Not quite fast random access, but it worked well in this scenario.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Aug 18, 2012 8:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is a bump to say I eventually had the time to complete the project.<br /><br />Download link here : <a href="http://dl.dropbox.com/u/23465629/NES_junk/CompressTools.7z" class="postlink">http://dl.dropbox.com/u/23465629/NES_junk/CompressTools.7z</a><br /><br />Unique features :<br />- Can compress data in multiple data blocks.<br />- Uses advanced input scripts (similar to assembly language) to define the data to be compressed<br />- Open source, the encoding algorithms are well commented and explained.<br />- Algorithms uses a plugin-like system, where anyone can program his algorithms and add them to the package<br />- Can output compressed data blocks to assembly language file, C header file, single binary or multiple binaries, easy to include in any project.<br /><br />I made this mostly for my own use but I hope it will be useful for other people too since I took the time to make it clean and well commented.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Aug 18, 2012 10:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Interesting, seems very good. Are the 6502 decompressors available anywhere?<br /><br />Had a slight problem when compressing the readme.txt with the example.txt script&#058;<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">C:\Users\f\Downloads\CompressTools\bin&gt;&quot;C:\Program Files (x86)\Java\jre7\bin\java.exe&quot; compressTools.Main example.txt<br />Data parsed sucessfully !<br />Number of blocks : 1 Longest block : 19599 bytes.<br />Total size : 19599 bytes.<br />Minimum value : 9 Maximum value : 122<br />Amount of values used : 89<br />Largest gap of unused values : 123 to 256 of size 133<br /><br />Total size after RLE encoding : 19540 bytes. Savings : 0%<br /><br />Total size after BitpackRLE encoding : 19036 bytes. Savings : 2%<br /><br />Total size after EscapeRLE encoding : 19412 bytes. Savings : 0%<br /><br />Total size after BytePair encoding : 12275 bytes. Savings : 37%<br /><br />Total size after RecursiveBytePair encoding : 10675 bytes. Savings : 45%<br /><br />Total size after TinyHuff encoding : 15882 bytes. Savings : 18%<br /><br />Total size after TinyHuffFixed encoding : 14277 bytes. Savings : 27%<br /><br />Total size after Huffman encoding : 11728 bytes. Savings : 40%<br /><br />Total size after ROM_LZ77 encoding : 15569 bytes. Savings : 20%<br /><br />Total size after ROM_7bit_LZ77 encoding : 12811 bytes. Savings : 34%<br /><br />Total size after RAM_LZ77 encoding : 11329 bytes. Savings : 42%</div><br />After this the program hung, eating 100% CPU. I waited for a couple of minutes until I killed the process.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Aug 18, 2012 12:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, this is perfectly normal.<br />That's because the last encoding (Static Dictionary) has a complexity of O(n^3) and performs very poorly on large data. It works fine on small datas though, which is why I kept it at all.<br /><br />I really wish I could fix the algorithm to be more efficient, but I have no idea how.<br /><br />The algorithm itself is pretty simple : I look for &quot;string&quot; matches of 16, 15, 14, ... down to 2 that are repeated at least 2 times, and replace the one that saves the most bytes if replaced, and repeat.<br />Unfortunately the amount of time it takes on larger inputs is crazy, because there is so many possible &quot;strings&quot;, in an example of a 1kb block, there is :<br />1024 - 16 = 1008 strings of 16 bytes<br />1009 strings of 15 bytes<br />...<br />1023 strings of 2 bytes<br /><br />(total of ~16'000 strings)<br />and then for all those strings I should count how many times they happen...<br />Readme is 19k so it would take even much more time.<br /><br />Fortunately the others algorithms I implemented doesn't have such problems.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Aug 18, 2012 1:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Generic compression on NES - *done*</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Whenever I need to search a big string for multiple strings, I always turn to Rolling Hash functions.  Would anything like that help here?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>