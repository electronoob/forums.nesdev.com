<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - N64 programming (libdragon)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">N64 programming (libdragon)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15988">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=15988</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Fri Jun 09, 2017 2:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can whine at him to check the repository</div><br />I was saying that he's been pretty quick to respond in my experience, if BMBx64's concern was that he's completely abadoned dragonlib, so no need for nagging   <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />These routines look like they could be useful to others, and I think it's far superior to have a single up-to-date repository on github, rather than a bunch of enhanced code-drops scattered on various forums.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Fri Jun 09, 2017 6:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />lidnariq nice  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> , do you know any values i could use for testing?<br /><br />I regret not buying an Everdrive with USB since i have to do all the tests with SD.<br /><br />--<br />mic_ i may try, if he is still active i have also a bunch of questions for him  <img src="./images/smilies/icon_wink.gif" alt=":wink:" title="Wink" /> <br /><br />Like all the commands to set the RDP, for some reason he did alpha blending with CPU instead of using color combiner on RDP, even by software the 16bit mode have no alpha blending support (just transparency, show pixel/not show), when by performance should be the prefered mode.<br /><br />The games are set to run at 60fps by default, but it comes with frameskip, i would prefer a frameskip set to 0, specially for 2D, or a visible option to change that, i didnt figure yet the right value.<br /><br />At least i found why the program syncs to 25fps when the audio buffer is filled, however i should use another way to play audio.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">(audio.c)<br />#define CALC_BUFFER(x)&nbsp; ( ( ( ( x ) / 25 ) &gt;&gt; 3 ) &lt;&lt; 3 ) </div><br />--<br />Right now im building a small tool, its a texture converter, plus other things.<br /><br /><img src="http://i.imgur.com/D0vB9aC.png" alt="Image" /><br />- Reads a folder and converts all PNG into N64 textures (sprite) in 1 step.<br />- Splits the sprite to fit TMEM in compatible texture sizes, manual setting is also available<br />- 2 modes, sprites and supports tilesets for large images (scroll)<br />- Can generate an array (code) for the tileset (will compare repeated tiles and exclude them)<br />- Have animator viewer and center align support (like the SOTN pic showed on the previous page)<br />- Uses hslices and vslices header for the center align X/Y (since i removed stride from libdragon, so i could use them to carry other data)<br /><br />I may add 4bit or 8bit sprite support or texture compression when i advance a bit more on the lib, i may upload a beta of the tool on the next days.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Fri Jun 09, 2017 9:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Perhaps you could get one of the SD cards with wifi?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jun 09, 2017 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">BMBx64 wrote:</div><div class="quotecontent">lidnariq nice  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> , do you know any values i could use for testing?<br /></div>It's going to be so dependent on the specific hardware, so it's hard to say. On the bright side, if you're only using it to transfer texture data and not code, it doesn't matter if you get garbage out, because the CPU and GPU won't crash.<br /><br />So ... you could just start with the defaults I specified and start decreasing them. I have no idea why it reserves 1 whole microsecond after it's loaded the address before it starts reading. Maybe making a tool to directly play around with the default values I specified and let you set them, and alternate between different textures every other vblank to let you watch for video corruption?<br /><br />Oh, but don't change the &quot;autoincrement_address_bits&quot; register. That's a sharp-edged behavior of the memory you're reading from/writing to. Values that are too low will hurt performance, and values that are too high will just not work at all. The original N64 mask ROMs strictly support no larger value than &quot;7&quot;. The Everdrive 64 might support more, but... unless you want to make software that can only run on the everdrive 64 you shouldn't go higher.<br /><br />The math gets kinda gross for an unaligned transfer, so let's just do the math for a fully-aligned transfer.<br />It looks like the address-loading cycle (the duration that either ALE_H or ALE_L are high) takes a total of 21 FSB cycles. (I could be wrong, but it's my best guess given both my own low-precision logic analyzer trace (80ns sample time) and the 10ns one from crazynation there)<br />So each address load takes (22+time_after_address_latch) FSB cycles.<br />Assuming what I've called &quot;dunno&quot; <em>is</em> actually the amount of time /RD or /WR is high between I/O within the same block...<br />Each word read takes (time_during_read_or_write+1+dunno+1) FSB cycles.<br />Transferring 256 words in a single perfectly aligned block should thus take (22+time_after_address_latch)+256Ã—(time_during_read_or_write+1+dunno+1).<br />With the defaults, that means transferring 256 words, or 512 bytes, should take 5974 FSB cycles, or 95584ns : 5.36MB/sec<br /><br />... There's some time taken in the middle of a multiple-block transfer after the last /RD before it loads the next cycle also. I don't know what controls that at all. It looks like it's usually 500ns? But I don't know if that's fixed or a property of some other register.<br /><br />Do you have access to some high-resolution timer? It might be interesting just to see if the constants I called out (52 FSB cycles to load an address? Extra gaps between every 64 transfers?) actually are a function of the register contents, or are truly fixed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jun 09, 2017 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm guessing the 1000 ns wait for seek might have been to support slower memory technologies with a wide row size. This way, the memory would spend 1000 ns reading an entire row into a 2048-bit buffer and stream 16 bits of that out per read clock.<br /><br />You don't have to accommodate the limits of N64 mask ROMs if you're making your own memory. The only limit is how many bits of counter you can stuff into the memory controller CPLD on the cart. How close are we to a homebrew clone of the N64 key chip?<br /><br />Does the N64 have an MMU? If so, did any games just mmap the cart, paging in data on demand rather than treating it like an 8 to 64 MB file system?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jun 09, 2017 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">How close are we to a homebrew clone of the N64 key chip?<br /></div>Done. There's already one for the ATtiny25 and there's ... uh, a public release of 99% of one for PICs. That author intentionally omitted the seed/boot sector checksums, but included everything else.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does the N64 have an MMU?<br /></div>Yes, but it also has an MMU bypass. Half the memory map is an ordinary TLB; the other half is direct-mapped.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If so, did any games just mmap the cart, paging in data on demand rather than treating it like an 8 to 64 MB file system?<br /></div>The cart interface seems to be particularly bad at ordinary CPU requests. The entire structure is really built around &quot;manually ask the RCP to transfer data between the cart and RDRAM&quot;; there's even a warning in libdragon:<br /><blockquote style="margin-left: 1%; padding-left: 1%; border-left: 3px solid #555577;">
Code should never make raw 32-bit reads or writes in the cartridge domain as it could collide with an in-progress DMA transfer or run into caching issues.
</blockquote><br />(edit) The PIF IPL does do a bunch of raw 32-bit reads and writes, but it also busy-waits to make sure that any DMA is done before it starts that and a bunch of other things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jun 09, 2017 7:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">did any games just mmap the cart, paging in data on demand rather than treating it like an 8 to 64 MB file system?<br /></div>The cart interface seems to be particularly bad at ordinary CPU requests. The entire structure is really built around &quot;manually ask the RCP to transfer data between the cart and RDRAM&quot;</div><br />So is the ATA or SATA interface in a PC. Yet operating systems implement mmap() and the swap file by having the page fault handler start a DMA transfer of a 4096-byte chunk of a file into a page of RAM and then mapping that page of RAM to the page of virtual address space that was accessed. The thread that made the read gets blocked until the DMA completes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Jun 09, 2017 8:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's an entirely different level of abstraction, though. That's &quot;just&quot; having a fault handler, and dispatching the DMA-based data transfers in response to a fault, instead of using CPU-based I/O.<br /><br />(You're talking about the difference between read() and mmap(); I'm talking about the difference between IDE PIO and ATA UDMA)<br /><br />It also assumes enough of a microkernel to support faults and (ideally) preemptable threads, which isn't yet part of libdragon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>marshallh</b> [ Tue Jun 20, 2017 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Great work so far. You can reprogram the PI timing registers at runtime. Commercial games do this when accessing 64DD and cart SRAM/Flashram data. Actually, sram/flash is bursted at a much faster speed than normal cart reads. Yes, you can reprogram cart domain to run faster but it only speeds up DMAs slightly, it doesn't affect execution. Also some backup devices won't support really fast timings. Cart ROM is basically bulk memory like a disk.<br />THere are 4 parameters:<br />1. Latency (from addres latch to first r/w)<br />2. Pulse width (rd/wr active low time)<br />3. Release width (delay after active time)<br />4. Page size (2^y bytes per address latch)<br /><br />This is one of my checks in the MGC 2011 demo to see if it's running on an emulator or not.<br /><br /><br />You should join #n64dev irc on efnet, there is lots of stuff going on. libdragon has a lot of limitations and there's a replacement in the works -so far with threading, message queues, dynamic heap management, much faster context switchign etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Wed Jun 21, 2017 7:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for the late reply.<br /><br /><div class="quotetitle">calima wrote:</div><div class="quotecontent">Perhaps you could get one of the SD cards with wifi?</div><br />I got a Toshiba Flashair last week but sadly didnt went well, so i returned it. <br />--<br /><br />lidnariq thanks for the info, i will start the testings soon.<br />--<br /><br />marshallh that sounds very interesting  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> , i may look into that irc channel.<br />--<br /><br />I have uploaded a small beta of &quot;Sprite64&quot;, it needs some betatesting though, i will explain a bit all the features.<br /><br /><img src="http://i.imgur.com/H76qOLt.png" alt="Image" /><br /><br />Input: png folder (drop all the pngs here, will ignore any other file or subfolder)<br />Output: sprite folder (N64 sprite textures)<br /><br /><strong>INCLUDE CODE</strong><br />If enabled the tool will generate arrays of all the data generated.<br /><br /><strong>INCLUDE PNG</strong><br />Do a PNG replica of the converted textures as well, plus other features.<br /><br /><strong>ZLIB</strong><br />The textures compressed will have .zsprite extension instead of .sprite, it needs zlib on N64, not sure if i can find one already ported.<br /><br /><strong>GROUP / SEPARATED</strong><br />Group: Everything on the same folder, textures will be named in order, starting from 0 on sprites and 1 on tilemaps (0 is empty).<br />Separated: Every png conversion have his own folder (useful when many sprites)<br /><br /><strong>OPTIMIZE</strong><br />The tool will use the right TMEM size based on performance preference, an example:<br /><img src="http://i.imgur.com/UBlUo10.png" alt="Image" /><br /><br />Libdragon limits:<br />- Horizontal size: textures have to be pair, the tool fixes uneven sizes by adding empty space.<br />- Vertical size: textures can be any of these sizes: 4,8,16,32,64,128,256<br />- Maximum size: 256 width or height<br /><br /><strong>OPTIMIZE L/R</strong><br />Based on the optimized textures generated the tool will attemp to find any empty area for the best result.<br /><img src="http://i.imgur.com/sy7yJ1c.png" alt="Image" /><br /><br />Optimize L: Optimize from the left, this can cause alignment problems, but i did a workaround on libdragon.<br />Optimize R: Optimize from the right, no issues found.<br /><br />Improvements:<br />Original texture of 68x69: 18,3KB (32bit)<br />Texture conversion (68x72, 9 steps * 8 height): 19,1KB<br />Optimize R: 14,8KB<br />Optimize L+R: 11,2KB<br />Zlib: 1,60KB<br /><br />* Optimize works diferently on 16bit mode.<br /><br /><strong>RGB</strong><br />Will make transparent the color input for all the png files, it also supports transparent alpha channel.<br /><br /><strong>PNG TO TILEMAP</strong><br />Will convert a png into a tilemap while converts the tiles into N64 textures.<br /><br />If include png is enabled will generate:<br />- A copy of the full map<br />- A copy of all the tiles<br />- A tileset of all the tiles generated<br /><br />If include code is enabled will generate:<br />- Different arrays of the tilemap as .c files (code.c)<br /><br /><strong>CUSTOM</strong><br />Allows a custom valid size, even if its beyond the 4KB TMEM, in case we want to use software render.<br /><br /><strong>CHECK TILE</strong><br />Will check if the tile is repeated by mirroring and generate flags.c if any found.<br /><br />SMB map example<br /><img src="http://i.imgur.com/vQGtR8f.png" alt="Image" /><br /><br />Tileset of 8x8 (but we want bigger textures on N64 for better performance)<br /><img src="http://i.imgur.com/7JLEr02.png" alt="Image" /><br /><br />Tileset of 16x16, less tile match, but better performance.<br /><img src="http://i.imgur.com/glNFjQT.png" alt="Image" /><br /><br />Goldenaxe II example<br /><img src="http://i.imgur.com/7pTKqxj.png" alt="Image" /><br /><br />Tileset of 16x16, deducted mirrored tiles<br /><img src="http://i.imgur.com/7Fp9jJv.png" alt="Image" /><br /><br />- Tiles that are completely transparent will be deducted.<br />- If check tile and include code are disabled, all the tiles from the map will be generated. (since we don't know the array)<br /><br /><strong>PNG TO SPRITE</strong><br />The second step of the tool is animator viewer and CP editor.<br /><img src="http://i.imgur.com/bzAyL3z.gif" alt="Image" /><br /><br />The gif is a bit self explanatory.<br /><br />Tick is the delay of the animation.<br />View provides a ghost reference for faster align.<br />Rect shows all the rectangles and the number of textures generated for that concrete png.<br />BG changes the background, so we can test if a sprite have &quot;hidden transparent pixels&quot; inside.<br /><br />Controls:<br />F1 - Normal window size<br />F2 - Double size<br />Left / Right - Anim left or right<br />Up / Down (mouse wheelup/wheeldown) - Zoom<br />Num keys - Input<br />Mouse for anything else<br /><br />This will generate extra files if include code is enabled:<br />- animcp_save.dat, the session of the program in case we want to edit later.<br />- animcp.cp arrays of all the editable content<br />* CP x and CP y are embedded on sprite format by using hslices/vslices, so you don't need to save or remember them.<br /><br />The downloads are attached, both are in WIP state.<br /><br />Avoid rdp_cp_sprite_scaled since i didnt fix the libdragon yet, use rdp_cp_sprite instead.

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9330">rdp.rar</a> [8.58 KiB]
			</span><br />
			<span class="gensmall">Downloaded 89 times</span>
		

		<br />
	</td>
				</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=9329">Sprite64.rar</a> [1.68 MiB]
			</span><br />
			<span class="gensmall">Downloaded 98 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drew Sebastino</b> [ Fri Jun 23, 2017 8:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm so glad to see a fully featured tilemap on the N64. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> I'm assuming it just loads new data into the texture cache for every tile, but would it be possible to gain any speed by loading a set of 64 8x8 tiles, or 16 16x16 tiles, and filling all the spots that use these first? I have no idea how you'd reasonably do this, (as in not having the CPU search through each tilemap a ton of times) other than by making your tilemap just a giant linked list. What's the main bottleneck in making a tilemap on the N64 anyway?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sun Jun 25, 2017 3:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Espozo wrote:</div><div class="quotecontent">I'm so glad to see a fully featured tilemap on the N64. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /> I'm assuming it just loads new data into the texture cache for every tile, but would it be possible to gain any speed by loading a set of 64 8x8 tiles, or 16 16x16 tiles, and filling all the spots that use these first? I have no idea how you'd reasonably do this, (as in not having the CPU search through each tilemap a ton of times) other than by making your tilemap just a giant linked list. What's the main bottleneck in making a tilemap on the N64 anyway?</div><br /><br />Yeah, for backgrounds i use 1 call of 64x32 textures usually, for main scroll depending on tile coincidence, but i would prefer something like 32x32, i have 2 basic optimizations:<br />- Empty/transparent tiles are not processed (no rectangles are generated, no textures are check)<br />- Last tile texture check (if they are using the same texture)<br /><br />For the Super Mario Bros map could be great replacing the blue background for transparent, then using the rdp in fillcolor mode to fill the tile of concrete color or even the whole screen, i believe is faster a 320x240 fill color call, than 8 or 9 calls per tile, i can do a test of that.<br /><br />Libdragon can load 8 textures max into TMEM, but i think it was a bit buggy, i removed that feature long time ago.<br /><br />If you do many calls the rdp queue bottlenecks the system, on a test was faster to draw a single pixel with the cpu than draw a single pixel with the rdp when you do unique calls.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Fri Jun 30, 2017 4:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So i did some tests with a tile scroll.<br /><br />I've used the same SMB map i been showing (16x16 tiles to fill a 320x240 screen, instead 256x240), 16bit tex, with the following results:<br /><img src="http://i.imgur.com/STj4bvC.jpg" alt="Image" /><br /><br />- 132 fps<br />- 172 fps (last texture check)<br />- 273 fps (remove blue sky texture and replace it by a full screen fillcolor rectangle)<br />- 318 fps (disable flush textures)<br /><br />By looking at the results it seems the very basic texture check does a good performance boost, but this will be very dependant on the map, fillcolor is pretty fast, a better texture strategy could increase the fps.<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!84AU1TwJ!jkMuXQgISfD36pZbtqtqPW0XtSLqqAVjUyxkmXVFk_E" class="postlink">https://mega.nz/#!84AU1TwJ!jkMuXQgISfD36pZbtqtqPW0XtSLqqAVjUyxkmXVFk_E</a><br /><br />For this second map i've used textures of 64x32 or 32x64, 7 scroll layers with relative speed, 16bit tex.<br /><img src="http://i.imgur.com/TYbiQ92.gif" alt="Image" /><br /><br />Performance is not great, about 80fps, but no optimizations were made (disable flush texture 114fps), 39fps if all the layers were 16x16.<br /><br />Maybe on this case some kind of checkerboard optimization could be good, to discard tiles that are fully covered by others, also a better texture strategy.<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!g0BWnTbA!TgkCuPlWfxNHw3onUrUT10B-E9_TfTHikWUdi9I2yhU" class="postlink">https://mega.nz/#!g0BWnTbA!TgkCuPlWfxNHw3onUrUT10B-E9_TfTHikWUdi9I2yhU</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Sun Jul 09, 2017 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Testing some kind of scroll optimizations..<br /><br />This map is a good example, have 6 scroll layers, but mostly covered by the main layer:<br /><img src="http://i.imgur.com/0kDgDiR.gif" alt="Image" /><br /><br />Performance (same spot area):<br />- 90fps (main scroll - 16x16 tiles)<br />- 116fps (64x32 tiles)<br /><br />Each tile checks a binary list to discard covered tiles.. (this could be really slow, im not sure if could be faster generating lists of every layer and then checking them in 1 step or checking each valid tile)<br /><img src="http://i.imgur.com/Btox6eJ.gif" alt="Image" /><br /><br />Performance:<br />- 159fps (main scroll - 32x32 tiles)<br />- 178fps (64x32 tiles)<br /><br />If 64x32 tiles are used this is less efective, but still faster in most of scroll areas (some others are slower), so this fluctuates between 178 and 130 on the worst case.<br /><img src="http://i.imgur.com/TNVz3oF.jpg" alt="Image" /><br /><br />These maps seems to load faster if there are less files to load, even if they weight more in size (16x16 306KB vs 64x32 536KB).<br /><br />Controls <br />- Joystick<br />- Z to disable main layer<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!t4RSQCpT!gEQYQ_SJGDnqKV7h3TvAtZJybtj6mz_zEWrDE8DRDJQ" class="postlink">https://mega.nz/#!t4RSQCpT!gEQYQ_SJGDnqKV7h3TvAtZJybtj6mz_zEWrDE8DRDJQ</a><br /><br />I may post a playable demo of something soon  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMBx64</b> [ Thu Jul 13, 2017 12:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: N64 programming (libdragon)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Added display list for drawing scroll in texture order, uses qsort.<br /><img src="http://i.imgur.com/QoMfu4Z.gif" alt="Image" /><br /><br />Test:<br />- 104fps (16x16 tiles)<br />- 169fps (with texture order)<br /><br />Normal tiles VS mirrored tiles: (to save space)<br /><br />Normal<br />x= 0 - 169fps<br />x= 194 - 161fps<br />x= 974 - 144fps<br />x= 1552 - 171fps<br /><br />Mirrored<br />x= 0 - 164fps<br />x= 194 - 158fps<br />x= 974 - 139fps<br />x= 1552 - 166fps<br /><br /><strong>DOWNLOAD</strong><br /><a href="https://mega.nz/#!R9R2RAQC!vLy-XwgGz6lR2irvO7twmrgMxHaSw4zGinRSJCzG2y0" class="postlink">https://mega.nz/#!R9R2RAQC!vLy-XwgGz6lR2irvO7twmrgMxHaSw4zGinRSJCzG2y0</a>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>