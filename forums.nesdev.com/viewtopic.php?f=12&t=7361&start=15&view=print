<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - sd2snes</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">sd2snes</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=7361">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=7361</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Tue Jan 19, 2010 11:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />My first message here..
<br />
<br />I did build a flash cartridge in 2004 (flash, SRAM and an ispGAL) based on Chnowack work. It is like the tototek board, programmed with a parallel port board.
<br />
<br />I'am looking on the internet  for documentation in order to build my own "yet another SD card cartridge". Ir differs from your board, I will use flash memory again because it is not expensive and I do not need to reload a game at each boot. I plan to use a cpld because his program is static. And like you an atmega to read the sd card (but i will try to use the SD parallel interface wile wiring the port with SPI in case of a problem).
<br />The concept would be: the snes cpu reads NOPS, MOV, and JUMPS instructions coming from the cpld thus loading a "boot" program in SRAM. Once the program is in SRAM, the snes cpu jumps to the boot program and the cpld becomes configured in HiRom address space, giving only a tiny interface to acces the atmega in order to read the SD card.
<br />The snes checks for an input, if say R buton is pressed it starts the FAT16/Menu/programming routines, else it looks for a lorom header in the flash memory and configures the cpld for  lorom/hirom and removes the SD interface. Then the snes cpus clears his sram memory and jumps to the start of the ROM.
<br />I do not know if the snes can execute program from his own sram? Anyone?
<br />Thus no super FX on this, no nothing except maybe a fun DSP-1 simulation. Guess how.
<br />
<br />I have indeed questions concerning your design. The fpga needs a "long" time at start to load his configuration. How do you manage the snes cpu read operations during this time? I assmume that the microcontroler controls the level shifter buffers between your board and the console?
<br />Or maybe the micro controller holds reset signal enabled?
<br />Why do you need to access your rom memory between 2 read operations of the snes cpu?
<br />
<br />Why did you transfer the data from the avr to the fpga using SPI? You could have used a 8bit port, rd/wr signals and an interrupt pin from the atmega. It could have been faster.
<br />If I understand, the super FX has on one side the snes bus and on the other side the ROM "bus" and therefore can cut the access to the snes?
<br />Thus if this is correct your fpga cuts also the bus and you could send NOPS and JUMPS on the snes bus while loading the SRAM on the ROM side.
<br />However I begin to understand and I find it simpler to load the "ROM" using the snes cpu throug a temporary custom atmega buffered interface at say $30 | $3000. Maybe it is slow?
<br />How do you load your boot program?
<br />Now with the built in SPI interface, do you need the avr?
<br />
<br />How much time did you spend on this project? Because It took me a year and half to complete my flash cartridge. And the biggest problem with electronic is when you are stuck with an unexpected problem for month.
<br />In my case it was parallel port glitches and time outs, the other problem is to get 1mm thick boards instead of the standart 1,6mm.
<br />
<br />Nice project (but really big because of the SA, fx chip and co).
<br />
<br /> PS: design fever today....  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Wed Jan 20, 2010 7:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">smkd wrote:</div><div class="quotecontent">what type of money would I be looking to spend to make it actually happen if you have any ideas? Where would I have to order from and what potential difficulties would I run into? Just curious, it'd be great to have something like this for myself even if you won't be handling the production yourself.</div>
<br />
<br />I can only tell you what I paid in Euros, you might get things cheaper in the US. (If you are in the US <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />)
<br />The most expensive part is the PCB when you order just one or two of them. I paid around €120 for my latest prototype PCB (sans parts). Had I ordered 4 it would only have cost me €20 more. Maybe you can organize your own omnibus order (is that the correct term?) when it's ready. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> 
<br />I ordered the PCBs at pcbcart.com.
<br />
<br />Parts amounted to about €95 (SRAM €60, FPGA €15, AVR €5, SD card slot €4, level shifters €3, voltage regulators €3, plus small change).
<br />I ordered the parts at reichelt.de and rsonline.de, but they are German distributors. digikey.com might be a good choice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Wed Jan 20, 2010 8:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Patrick FR wrote:</div><div class="quotecontent">I'am looking on the internet  for documentation in order to build my own "yet another SD card cartridge". <br /></div><br />They spring like mushrooms these days. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I do not know if the snes can execute program from his own sram? Anyone?</div><br />It's DRAM but yes it can.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Thus no super FX on this, no nothing except maybe a fun DSP-1 simulation. Guess how.</div><br />Software emulation using the AVR, triggered by IRQ? <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I structured your questions to make reading the reply easier without using tons of quote boxes:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><ul><li>The fpga needs a "long" time at start to load his configuration. How do you manage the snes cpu read operations during this time?</li><li>I assmume that the microcontroler controls the level shifter buffers between your board and the console?</li><li>Why do you need to access your rom memory between 2 read operations of the snes cpu?</li><li>Why did you transfer the data from the avr to the fpga using SPI?</li><li>If I understand, the super FX has on one side the snes bus and on the other side the ROM "bus" and therefore can cut the access to the snes?<br />Thus if this is correct your fpga cuts also the bus and you could send NOPS and JUMPS on the snes bus while loading the SRAM on the ROM side.</li><li>How do you load your boot program?</li><li>Now with the built in SPI interface, do you need the avr?</li><li>How much time did you spend on this project?</li></ul></div><br /><ul><li>Indeed, by holding the /RESET line on the cartridge slot.</li><li>partly. It can control the direction of the block containing the SNES /RESET pin. Thus, it can reset the console and it can also detect when the user presses the Reset button on the console. SNES Databus /OE and direction, and SNES /IRQ direction are handled by the FPGA.</li><li>To access the SaveRAM area which resides in one of the SRAM chips. I do it to monitor the SaveRAM contents and save to SD card when a change is detected. I need to time multiplex it because I only have one memory bus.</li><li>Because I ran out of I/Os on the FPGA and was too lazy to switch to a larger package. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Also, it makes for a flexible configuration/command interface.</li><li>Not exactly. The SNES CPU has to cut access to the ROM itself (by granting the SuperFX access to it).</li><li>I load it like a normal ROM during the initial reset phase.</li><li>I keep it for flexibility. It configures the FPGA in serial slave mode, loading the bitfile from SD card. It will be preprogrammed with a bootloader so it can flash upgrade itself. So it's really easy to deploy upgrades. It gives me a nice debug console via UART. And there already exist great SD card access code written by the author of sd2iec, and FAT access libraries.</li><li>I started in April 2009. I do it besides my normal job so real productivity mostly occurs when I'm on a leave.</li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Wed Jan 20, 2010 1:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Software emulation using the AVR, triggered by IRQ? Smile </div><br /> Right, and the avr being slower than the DSP1 in terms of clock cycles per multiply I am curious about the result. Some latches are needed in the cpld in order to handle the accesses. The PIC32MX could be better here: many times faster, multiply and divide and a slave parallel port of 4 addressable bytes. But this may be a shameful overkill (72Mhz Mips).<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Indeed, by holding the /RESET line on the cartridge slot. </div><br />Simple and efficient, I feared to use this before checking that it has a pull resistor up but indeed. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  <br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To access the SaveRAM area which resides in one of the SRAM chips. I do it to monitor the SaveRAM contents and save to SD card when a change is detected. I need to time multiplex it because I only have one memory bus. </div><br /><br /> <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> Tremendous, by the way the SD card would not tolerate million writes. Do you use a brown out detector to trigger the write to the SD? A timer?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I keep it for flexibility. It configures the FPGA in serial slave mode, loading the bitfile from SD card.</div>
<br />
<br />I did not know that it was possible with a xilinx to lad the configuraiton trough SPI. Loading from the SD is a very good idea because it simplifies development, allows updates, and avoids the cost of an SPI memory.
<br />
<br />Thank you for all these explanations. Your design is what would be the ultimate snes cartridge because of the fpga.
<br />When thinking the design I feared to use an fpga because of this load step and configuration memory size. You solved the problem in an elegant way.
<br />
<br />But yes it is a lot of work, I do not know if I will develop my SD cartridge yet because of the work required but it is interesting because it allows to learn things fast.
<br />
<br />PS: Chnowak multi console copier that I used to start (it simplified a lot my work): 
<br /><a href="http://chn.bplaced.net/index.php?doc=mcc/mcc.html" class="postlink">http://chn.bplaced.net/index.php?doc=mcc/mcc.html</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Patrick FR</b> [ Wed Jan 20, 2010 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Patrick FR: However I begin to understand and I find it simpler to load the "ROM" using the snes cpu throug a temporary custom atmega buffered interface at say $30 | $3000. Maybe it is slow?</div><br />I was wrong then, I thought of a complex system loading the ROM in parallel of the snes execution.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> <br />With the cpld I will be obliged to use a trick at boot time with the snes cpu to load the boot code because the cpld has not enough pins to address the Rom and Sram. And maybe not enough complexity even if it had enough pins.<br />Maybe it wont fit at all, I must begin with the cpld.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Quote:<br />I do not know if the snes can execute program from his own sram? Anyone?<br /><br />It's DRAM but yes it can. </div>
<br />
<br />Very useful then.
<br />
<br />Today I read from <a href="http://sneshack.blogspot.com/" class="postlink">http://sneshack.blogspot.com/</a> that it would be nice to pause the snes using only jumps to a specified addresse and indeed NOPs are not usefull.
<br />
<br />By the way, many people are "working" on the nearly same thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Fri Jan 22, 2010 2:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, SaveRAM access is not directly passed through to the SD card.
<br />The AVR permanently generates a checksum of the memory area. When a change is detected, the SaveRAM will not be saved to SD card until it has remained unchanged again for about 1 second.
<br />Of course there are some games which use the cartridge RAM as work memory, i.e. update it constantly. In this case there's a fallback that will save every ~30 seconds even when contents keep changing.
<br />And there's a manually triggered save when resetting to the menu by pressing Reset on the SNES for more than 1 second.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Feb 11, 2010 8:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Sorry, kinda zonked out when I got home.<br /><br />kyuusaku is correct, re: Fast/SlowROM times.  "Normal speed" (e.g. "SlowROM") has to be 200ns or faster.  "High speed" (e.g. "FastROM") has to be 120ns or faster.<br /><br />This is defined in the manual, section "Super NES Software Submission Requirements", chapter 1.  Revision C, dated 1992/11/02.</div>
<br />
<br /> I'm a bit confused. Why is it requiring speeds at that rate?? Master clock /6 = 280ns per memory cycle and /8 is 372ns per memory cycle. Why would you need anything faster than that? All the SFX docs I've read stated VDMA doesn't move data from the bus any faster than master clock/8 per byte, so that can't be it. Unless this speed rating is for one of the addon processors or DSPs...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Feb 11, 2010 8:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As I understand it, you need the ROM to respond within about <em>half</em> a memory cycle. /OE goes low on a read, and the data lines need to stabilize before it goes back high.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu Feb 11, 2010 11:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">As I understand it, you need the ROM to respond within about <em>half</em> a memory cycle. /OE goes low on a read, and the data lines need to stabilize before it goes back high.</div>
<br />
<br /> The SNES needs a rom to respond the rom to respond and have the data on the bus at <em>half</em> a memory cycle!? Why? That doesn't make any sense.  I don't know of any other 65x related processor setup that requires that. It also defeats the whole purpose of a slower clock speed (slower memory speed means slower roms, means cheaper roms). I've always used roms slightly faster than the memory bus speed (for 65x), but never twice as fast. The state from off to enabled for /OE is tiny in comparison to the rated chip speed for roms. The propagation delay is really small. There's something that's missing here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Fri Feb 12, 2010 1:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This was made a while ago for a different purpose, but anyway:
<br /><a href="http://img194.imageshack.us/i/snes3chip1.png/" class="postlink"><img src="http://img194.imageshack.us/img194/5263/snes3chip1.th.png" alt="Image" /></a>
<br />/OE ("/SNES_RD") stays high on hw register access (where /PARD should go low).
<br />The large pause is the refresh cycle that occurs in the middle of each raster line.
<br />To the right we see a single SlowROM cycle. (probably WRAM access)
<br />
<br />/OE appears to be derived from the "CPU clock". It is low for about t_cycle-140ns. So in FastROM operation, it is low for ~140ns, in SlowROM operation it is low for ~230ns.
<br />About 20-30ns after it goes high, the new address is put on address bus A (haven't looked at the B bus so far). Nothing else seems to happen on the memory bus during that period. There seems to be no bus sharing within the same cycle.
<br />
<br />EDIT. This should clear things up. In the original 65C816 design, there are only 16 address lines - BA0-BA7 (A16-A23) are multiplexed on the D0-D7 lines.
<br />see <a href="http://www.westerndesigncenter.com/wdc/documentation/w65c816s.pdf" class="postlink">http://www.westerndesigncenter.com/wdc/documentation/w65c816s.pdf</a> p. 13 and p.26.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Fri Feb 12, 2010 2:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh thanks for the capture pic. I see, it's because they multiplexed the upper address lines on the data bus lines. That makes perfect sense. I totally forgot the original '816 was supposed to be pin compatible with the 65x. That's the only way to extend the address lines while still maintaining the original pin count. Although, that's really stupid on Nintendo's part. If anything, that explains why the CPU speed is so slow. Because of requiring double the speed memory. Man, Nintendo really screwed up on that one :/ They definitely should have went with a custom core processor like Hudson did. And I can't believe WDC <em>still</em> uses mechanism. Just another crippling mechanism added to the mistakes of the '816 IMO.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Tue Feb 23, 2010 2:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Small(?) update:
<br />I am going to switch to PSRAM after all <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> 
<br />A 128Mbit chip is only 1/5 the cost of my current 64Mbits of SRAM and we managed to get the small BGA package soldered with an, uhm, super special custom reflow pizza oven!
<br />
<br />There will also be a second bus with 4Mbits of SRAM to facilitate parallel access for custom chips without getting into timing trouble.
<br />
<br />The uC will be upgraded from AVR to an ARM based architecture, which gives much more bang for the buck and should further improve loading speed and provides a hardware USB interface, too.
<br />
<br />I am also looking into adding an audio DAC to the board, maybe to provide compatibility for byuu's 21fx spec, or just to be able to emulate other sound chips, who knows <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />I hope to connect all PA lines, but I still need to recalculate the available I/Os on the new FPGA (will have to upgrade to a 208-pin package anyway for the 2nd memory bus).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>danntor</b> [ Tue Feb 23, 2010 5:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Soldering SMDs actually work using toaster ovens? Can you please describe how you did it (I have seen it discussed on forums before but never explained).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Tue Feb 23, 2010 6:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I usually hand-solder SMDs where the pins stick out. But with BGAs that was not an option <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />It is possible but you need to closely observe the temperature in the oven. Chip manufacturers usually recommend a temperature profile that looks a little bit like a backward ADSR envelope. e.g.: <a href="http://www.actel.com/documents/Solder_Reflow_LeadFree.pdf" class="postlink">http://www.actel.com/documents/Solder_Reflow_LeadFree.pdf</a>
<br />Basically there's a preheating phase to preheat the components and activate the flux, a solder phase where the temperature stays above the melting point of the solder used (but below the allowed peak temperature), and a cooldown phase. For leadfree solder balls used in RoHS parts, the melting point is usually 217°C.
<br />
<br />I simply used the thermometer function of my multimeter and put the sensor in the oven along with an empty board. On the board I placed a small amount of leaded solder (melting point=183°C) and a small amount of leadfree solder (melting point=227°C). Yes, this is a different melting point from the number I gave above because I saved a few Euros and purchased silver free solder which has a 10°C higher melting point.
<br />
<br />I then used Manual PWM™ to slowly ramp up the temperature in the oven and noted down the multimeter readouts where the leaded and lead free solder melted, respectively. The MM actually read some degrees less than what the actual temperatures should have been according to the given solder specs.
<br />
<br />Using this I was able to extrapolate the "MM temperature" that I needed to reach. My goal was to stay between 230° and 240° for at least one minute, so that was about 224°-234° on the MM.
<br />
<br />I then put the board with flux and <a href="http://www.flickr.com/photos/sd2snes/4350226513/" class="postlink">the BGA chip on it</a> (align carefully!) into the oven. Heated it slowly, stayed below ~180° for 2-3 minutes, then ramped up to 230° and tried to stay there for a minute. Afterwards I switched the oven off and let it cool with the oven door shut. Et Voila!
<br />And it even worked. Here's a <a href="http://www.flickr.com/photos/sd2snes/4382189322/" class="postlink">pic of the test board</a> wired to an existing sd2snes prototype. The four fat SRAMs that still reside on the board are disabled and now obsolete. Note the difference in space requirement, i found it pretty cool.
<br />
<br />Note that this is quite a taxing task, because having to turn the oven switch while observing the MM readout and trying not to move the (light, cheap) oven too much is not so easy and definitely not recommended for more than experimenting <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />
<br />I'm going to build an automatic temperature control according to <a href="http://thomaspfeifer.net/backofen_smd_reflow.htm" class="postlink">http://thomaspfeifer.net/backofen_smd_reflow.htm</a> (sorry, it's in German) to have an uC do this hopefully much more accurately.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ikari_01</b> [ Tue Jul 13, 2010 5:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Small update for the record.
<br />
<br />BGA reflow soldering proved feasible. So there will be 128Mbits of 16-bit PSRAM + 4Mbits of 8-bit SRAM on the secondary bus.
<br />A DAC for the SNES's analog line in will be included. (Testing the DAC is the last todo before a prototype PCB is ordered)
<br />The B address bus is fully connected, who knows what it may be good for.
<br />There's a replaceable backup battery for RTC support and SRAM data retention (I'm sure there is some good use for that)
<br />And of course, a SuperCIC key <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> enabling operation on any unmodded SNES/SFC, but also adding the option to switch 50/60Hz via software on SuperCIC modded consoles.
<br />MSU-1 support may or may not be possible depending on the data rate I can get from the SD Card.
<br />Two of the LDOs have been replaced by a dual switching regulator, slightly improving power consumption. This will be more important once the FPGA core becomes more active due to custom chip emulation.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>