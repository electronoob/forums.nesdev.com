<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - new to NES, layering simulation effect question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">new to NES, layering simulation effect question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9317">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9317</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>13</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sat Sep 15, 2012 7:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First post, just trying to clarify a few things as I've only been reading documentation for about a day.<br /><br />First question is, how many name table entries can be reasonably updated in a vblank?  <br /><br />Second is, are name tables always internal to the PPU and accessed via auto incrementing regs or can they be mapped in from the cart?  Is there any other way to access or swap out a name table via mappers, etc?  <br /><br />Third, can non active name tables be written while the current frame is being drawn, or does this still require PPU cycles to handling the I/O from the CPU to the name table via the $200x ports?  eg: thinking along the lines of double buffering the name tables by writing to one, and swapping them on vblank, etc.<br /><br />I love assembly and doing impossible things on primitive hardware, and my primary interest is some awesome parallax/layering effects I've seen in this video:<br /><br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=ltuRuGM271Q">http://www.youtube.com/watch?v=ltuRuGM271Q</a><!-- m --><br /><br />Particularly Bucky O'Hare and Mitsumi ga Tooru where there is the appearance of a genuine layering effect going on and not just hblank subdivision.  Specifically, the effect where a simple tiled background is scrolled behind the foreground in a very convincing way that mimics layering.  Obviously the NES doesn't have layers, and this is a bit more than just simply breaking and subdividing the screen on hblank.<br /><br />What I began to think, is you have 2-4 very simple repeating background tiles, and then you have 8 versions of those tiles each scrolled a single column of pixels such that you can achieve the affect of scrolling with <strong>tile animation</strong> for those tiles that are to appear in the background.  Obviously you are limited to very simple repeating background mosaics as you need 8 tiles in the pattern table for each background tile.<br /><br />At first I was thinking just update the background tiles in the name table once per frame based on the current scroll value, but then I'm under the impression you barely have enough time to update 1 row or column of name table values let alone upload an entirely new 960 byte name table once per frame.  In the two examples I mentioned, it's a significant amount of tiles to update, nearly 50% of the entire name table.  So this is probably not possible with a standard ROM using the PPU's internal name table RAM (#1 and #2?)<br /><br />Then I began to imagine what could be done with mappers.  Instead of CHR-ROM you have CHR-RAM, and actually update the 2-4 tiles themselves in pattern RAM (256-1024 bytes depending on if we mean 8x tiles or 16x metatiles).  CHR-RAM can have enough room for two pattern banks, then you could have infinitely more time to work on a game frame during vdraw by double buffering.  Majority of the tiles would be duplicated in both CHR-RAM banks except the ones being animated.  Doubting this now as it's very inefficient to duplicate two tile sets just to double buffer the animation of a handful of BG tiles.<br /><br />Am I on the right track here?  Or is it simpler?<br /><br />I know there can be up to 4 name tables (#1 #2 built into PPU ram, #3 and #4 mirrored unless provided by cart?), is it possible to update the others that aren't being used during vdraw and then switch?<br /><br />I haven't attempted to peek inside with an emulator yet, was hoping to figure it out on my own.<br /><br />I'm pretty dead set that it HAS to be tile animation to achieve the appearance of scrolling BG tiles since there is obviously no way to achieve layering on the NES.    Question is, by upating pattern tables, name tables or both.  Name tables seems to be the most logical due to the aforementioned inefficiency of having two copies of the same pattern table with just 4 tiles being animated.  I imagine ultimately it can't be done without a mapper implementing muliple per frame switchable pattern and name tables in a CHR-RAM which is also accessible by the CPU.  <br /><br />If 2 or more independent name tables (#3 and #4?) can be mapped from a CHR-RAM which can also be mapped into CPU address space as well, and a cart bank switch and PPU name table pointer change can be achieved within a vblank, then this basically becomes trivial.  I'm leaning on this as the solution employed by the mentioned games.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Sep 15, 2012 8:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just watched that video.<br />Almost all the games seen there used split screen horizontal scrolling, sometimes with the assistance of mapper IRQs.  Mega Man 3 also added some star sprites to enhance the effect.<br /><br />Among games in that video, Bucky O Hare, Battletoads (many stages, including the Ice Cavern level), Sword Master, Mitsume ga Tooru achieved Parallax scrolling by changing the graphics of tiles.  Of those games, only Battletoads used CHR-RAM.  The rest used CHR-ROM bankswitching, and a lot of copies of similar tiles drawn at a different horizontal position.<br /><br />Bee 52 also performs some parallax effects by updating both the tile graphics and nametables.<br /><br />Now to answer questions...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">First question is, how many name table entries can be reasonably updated in a vblank?<br /></div><br />I was updating as many as 224 tiles per frame when I did Chu Chu Rocket, and that involved going 4 scanlines into the frame.  192 tiles is more sane.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Second is, are name tables always internal to the PPU and accessed via auto incrementing regs or can they be mapped in from the cart? Is there any other way to access or swap out a name table via mappers, etc? <br /></div><br />Name tables are normally in the PPU's RAM (not strictly inside the PPU itself, it's a different chip), but the cartridge can select them (mirroring selection), or even bypass the PPU's RAM (four screen mirroring, MMC5).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Third, can non active name tables be written while the current frame is being drawn, or does this still require PPU cycles to handling the I/O from the CPU to the name table via the $200x ports? eg: thinking along the lines of double buffering the name tables by writing to one, and swapping them on vblank, etc.<br /></div><br />Non-active nametables can't be written to if the PPU is rendering something else.  If you try writing the the PPU while it's drawing something, you get crap all over the screen (see <a href="https://www.youtube.com/watch?v=4TROWubW83s" class="postlink">&quot;Mind Control Trilogy&quot;</a> demo *shudders*).  But you can update a non-active nametable over the course of several frames (during vblank time), and not see the stuff getting drawn in.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sat Sep 15, 2012 8:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh forgot about CHR-ROM bank switching.  Whats the smallest amount of CHR-ROM that can be switched?<br /><br />So split CHR-ROM into bank frames and then use one of those frames to switch in the animated tile set for the appropriate amount of BG pixel scroll while the rest remains static.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Sep 15, 2012 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">Second is, are name tables always internal to the PPU and accessed via auto incrementing regs or can they be mapped in from the cart?  Is there any other way to access or swap out a name table via mappers, etc?</div>They can be mapped in from the cartridge. The CIRAM /CE signal is used to select the internal PPU memory or the cartridge memory.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Third, can non active name tables be written while the current frame is being drawn, or does this still require PPU cycles to handling the I/O from the CPU to the name table via the $200x ports?  eg: thinking along the lines of double buffering the name tables by writing to one, and swapping them on vblank, etc.</div>No; the PPU address and data ports cannot be used while rendering. However, if you are double buffering it could work if you have two CHR RAM chips on the cartridge for name tables (or even pattern tables too), and have one of them connected to the PPU and the other connected to the CPU, and have a register to swap them.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What I began to think, is you have 2-4 very simple repeating background tiles, and then you have 8 versions of those tiles each scrolled a single column of pixels such that you can achieve the affect of scrolling with <strong>tile animation</strong> for those tiles that are to appear in the background.  Obviously you are limited to very simple repeating background mosaics as you need 8 tiles in the pattern table for each background tile.</div>Another possibility is to use sprites.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then I began to imagine what could be done with mappers.  Instead of CHR-ROM you have CHR-RAM, and actually update the 2-4 tiles themselves in pattern RAM (256-1024 bytes depending on if we mean 8x tiles or 16x metatiles).  CHR-RAM can have enough room for two pattern banks, then you could have infinitely more time to work on a game frame during vdraw by double buffering.  Majority of the tiles would be duplicated in both CHR-RAM banks except the ones being animated.  Doubting this now as it's very inefficient to duplicate two tile sets just to double buffer the animation of a handful of BG tiles.</div>Yes, this could be one way, although bankswitched CHR ROM is another possibility.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I know there can be up to 4 name tables (#1 #2 built into PPU ram, #3 and #4 mirrored unless provided by cart?), is it possible to update the others that aren't being used during vdraw and then switch?</div>No, I told you that already. You could do what is suggested above.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm pretty dead set that it HAS to be tile animation to achieve the appearance of scrolling BG tiles since there is obviously no way to achieve layering on the NES.    Question is, by upating pattern tables, name tables or both.  Name tables seems to be the most logical due to the aforementioned inefficiency of having two copies of the same pattern table with just 4 tiles being animated.  I imagine ultimately it can't be done without a mapper implementing muliple per frame switchable pattern and name tables in a CHR-RAM which is also accessible by the CPU.<br /><br />If 2 or more independent name tables (#3 and #4?) can be mapped from a CHR-RAM which can also be mapped into CPU address space as well, and a cart bank switch and PPU name table pointer change can be achieved within a vblank, then this basically becomes trivial.  I'm leaning on this as the solution employed by the mentioned games.</div>You would need dual-ported RAM (unless you use the switching I mentioned above), but it could work.<br /><br />The MMC5 mapper has some RAM mapped to CPU address space, which can be used as name tables, but if it is set to use as name tables then it is write-only and can only be written during rendering (you can write $00 there outside of rendering, but not anything else).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh forgot about CHR-ROM bank switching. Whats the smallest amount of CHR-ROM that can be switched?</div>It depends on the mapper.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Sat Sep 15, 2012 8:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">Oh forgot about CHR-ROM bank switching.  Whats the smallest amount of CHR-ROM that can be switched?</div> Of all the mappers that I've looked through when paging through the <a href="http://wiki.nesdev.com" class="postlink">wiki</a>, the finest granularity I've seen has been <a href="http://wiki.nesdev.com/w/index.php/User:Lidnariq/MMC3_Variants" class="postlink">eight 1KiB sections independently banked</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sat Sep 15, 2012 8:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the replies.  <br /><br />CHR-ROM bank switching in one of several pre-animated BG tile sets as a subset of the active pattern table appears to be the simplest and most efficient method so it's probably what I was looking for.  Once per frame: calculate scroll offset for the BG layer, calculate the appropriate tile set modulo, wait on vblank, bank switch it into the active pattern ROM region, done.<br /><br />I completely forgot about the possibility of bank switching CHR-ROM rather than just PRG-ROM<br /><br />This also solves the problem of being limited in BG layer varieties where you are now limited to the 512KB or so in the cart (or rather what the mapper supports).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sat Sep 15, 2012 8:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">Oh forgot about CHR-ROM bank switching.  Whats the smallest amount of CHR-ROM that can be switched?</div> Of all the mappers that I've looked through when paging through the <a href="http://wiki.nesdev.com" class="postlink">wiki</a>, the finest granularity I've seen has been <a href="http://wiki.nesdev.com/w/index.php/User:Lidnariq/MMC3_Variants" class="postlink">eight 1KiB sections independently banked</a>.</div><br /><br />That would be perfect.  <br /><br />1K = 64 tiles in the fake BG layer at a time.<br /><br />8k CHR-ROM in the cart for 64 tiles x 8 versions (each scrolled by 1 pixel)<br /><br />That's quite more variety than I anticipated even.<br /><br />And that's if you literally had 8 versions of each tile and didn't use clever mosaic patterns to allow layering and reuse.<br /><br />Could still employ CHR-RAM in order to take advantage of compression though. 8 x 1k of duplicate column rotated tile sets is begging for compression.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sat Sep 15, 2012 9:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So looks like TLROM/Mapper 4/MMC3 is what is required at minimum.<br /><br />Without downloading and trying them all out, which NES emulator has the best dev support?<br /><br />Something like Visual Boy Advance for GBA would be awesome.  VBA can show all memory locations, trace, and OAM/tile/map/palette memory real time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>MottZilla</b> [ Sat Sep 15, 2012 9:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FCEUX has alot of debugging features. You can view the NameTables, PPU Pattern Tables, all memory, etc. It is fairly accurate but not the most accurate emulator.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Sep 15, 2012 11:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">8k CHR-ROM in the cart for 64 tiles x 8 versions (each scrolled by 1 pixel)</div><br />Most of these games have actually 16 versions, some even have 32 (Metal Storm being one of them, I don't think it's shown in the video you posted). The number of rotations depends on the width of the pattern being rotated, not on the width of a single tile. If you had only 8 rotations, you'd need to modify the name tables in order to perform this trick with patterns wider than 8 pixels.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Could still employ CHR-RAM in order to take advantage of compression though. 8 x 1k of duplicate column rotating tile sets is begging for compression.</div><br />If you had some RAM to spare, you could even just store the original version of the pattern, and rotate it in RAM as necessary. Traditional compression wouldn't be of much use, because it would make the process of copying tiles from ROM to VRAM much slower, severely reducing the number of tiles you can update each frame. Unless you have some RAM available, so you can pre-decompress the graphics there (but then I'd rather just rotate them in RAM like I said before.).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So looks like TLROM/Mapper 4/MMC3 is what is required at minimum.</div><br />You could use simpler mappers if you used CHR-RAM, but if you're going for CHR-ROM, then yeah, the MMC3 is about the minimum required for this kind of effect (and it's the mapper used in most of the games in the video you posted).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Without downloading and trying them all out, which NES emulator has the best dev support?</div><br />FCEUX has a lot of debugging features, but it's not particularly accurate (it seems to emulate some things at a higher level instead of performing each minuscule task that the original hardware does). Nintendulator (which also has some debugging features) and Nestopia (no debugging tools at all) are much more accurate in this aspect. As a general rule, when developing for the NES, don't ever trust a single emulator. Also, unless you are doing something really tricky that relies on very well timed tasks and/or accesses to PPU registers at unconventional times, your program <strong>should</strong> work well on most common emulators (if it doesn't, you are probably messing something up).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sat Sep 15, 2012 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">8k CHR-ROM in the cart for 64 tiles x 8 versions (each scrolled by 1 pixel)</div><br />Most of these games have actually 16 versions, some even have 32 (Metal Storm being one of them, I don't think it's shown in the video you posted). The number of rotations depends on the width of the pattern being rotated, not on the width of a single tile. If you had only 8 rotations, you'd need to modify the name tables in order to perform this trick with patterns wider than 8 pixels.</div><br /><br />Right... need to be able to display any 8 pixel wide portion of the entire pattern within a tile without changing the name table.<br /><br />Holy crap I just watched Metal Storm Level 3-1 where they have THREE layers going.  No surprise that the rest of the tile set is relatively simple; most of the CHR-ROM is probably eaten up by all the various BG tiles in all their scrolling and overlapping permutations.  <br /><br />I see...  It's a 4 x 4 tile repeating pattern, so 32 copies of those, and the vertical scrolling later is just an additional sequential animation baked into each of the 32 scroll sets giving the illusion of 2 scrolling layers in one.... clever.<br /><br />The attribute table restrictions are glaringly obvious in the scrolling backgrounds... the entire contiguous background &quot;layer&quot; is stuck at 4 colors.  Though there is palette manipulation (Battle Toads).<br /><br />It's actually bank switching the 2k region at $0800-$0FFF (bottom half of pattern table 0) with up to 32 copies of the animated sequences.  Though only 1k is used for the animated tiles, the second 1k is just other random tiles packed with that frame.  Simplifies the mapper by going with 2k granularity, but wastes 1K of pattern memory since the animated tile frames aren't packed with anything else relevant (looks like cinematic and title screen graphics).  This limits the foreground to 128 tiles.<br /><br />Additionally that 1k region contains ALL of the animated tiles used for all BGs packed together that are animated together all the time. The entirety of all the parallax layer tiles for the entire game occupies 32k of the 256k CHR-ROM.  Some are 32 x 32 pixel regions animated in one direction, other parts are smaller sections like 8 x 16 rotated up 8 frames, then rotated right 16 frames, then replaced with another pattern for the remaining 8 frames, etc.  So some levels must only bank switch 8 times for the simple 1 tile wide patterns.<br /><br />Very cool.  Learned a lot tonight, thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sun Sep 16, 2012 2:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><div class="quotetitle">exdeath wrote:</div><div class="quotecontent">Second is, are name tables always internal to the PPU and accessed via auto incrementing regs or can they be mapped in from the cart?  Is there any other way to access or swap out a name table via mappers, etc?</div>They can be mapped in from the cartridge. The CIRAM /CE signal is used to select the internal PPU memory or the cartridge memory.</div><br /><br />Does this apply with the entire 16k address space, including the palette?  Or just the name tables.<br /><br />eg: how does the PPU respond to CIRAM /CE = A12 AND A13 (held inactive at $3xxx), would it attempt to fetch palette reads from the cart?<br /><br />Or is CIRAM /CE only valid for $2000-2FFF and ignored otherwise?<br /><br />I read &quot;This signal is used as an input to enable the internal 2k of VRAM&quot; meaning it's only for the 2k internal name table RAM and if you set CIRAM /CE high at all then you have to bring all or nothing 2k minimum 4k max external name table RAM and it's ignored for all other addresses outside of $2000-2FFF.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Sep 16, 2012 5:30 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The palette is stored in separate memory inside the PPU. It cannot be bankswitched. /WR appears not to be asserted externally for this space. /RD is still asserted for $3F00-$3FFF if you try to read back, but the behavior for that is sort of complicated and hard to describe unless you fully understand the normal video memory read back delay.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sun Sep 16, 2012 8:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PPU bus access: (slightly generalized from hardware, but should be accurate.)<br /><br />You have A0-A13, /A13, D0-D7, /WR and /RD. /A13 is usually connected to /CE of the CIRAM to enable it for addresses 2000-3FFF (3F00 and higher is palette). <br />Likewise, A13 is usually used to enable the C-ROM or C-RAM (/CE) on the cart (which is then mapped into 0000-1FFF). <br /><br />Palette and Sprites (OAM) are internal to the PPU chip. OAM is not mapped to a VRAM address.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>exdeath</b> [ Sun Sep 16, 2012 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: new to NES, layering simulation effect question</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Woot!  <br /><br />My first NES program!<br /><br />Code is a little messy, took some trial an error to figure out MMC3 / mapper 4.  <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #%00000001<br />&nbsp; &nbsp;sta $8000</div><br /><br />In this mode, 2k pages are swapped at pattern memory $0800-FFF.  What I learned via trial and error:<br /><br />1) The value written to $8001 to select the CHR-ROM page is the number of a page, not an address.  So 0 = the 1k page at PPU $0000, 1 = 1k page at $0400, 2 = 1k page at $0800 and so on.<br /><br />2) The page must be 2k aligned in the mode I'm using.  Selecting page 0 and 1 select the same 2k page from $0000-$07FF, page 2 and 3 = the same 2k page from $0800-$0FFF, etc.<br /><br />So using nesasm, showing the bank layout:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ineschr 3<br />.inesmap 4<br /><br />.bank 2<br />.org $0000<br />.incbin &quot;bg4k.chr&quot; ;initial background<br />.incbin &quot;spr4k.chr&quot; ; initial sprite<br /><br />.bank 3<br />.org $2000<br />.incbin &quot;anim2k_1.chr&quot;<br />.incbin &quot;anim2k_2.chr&quot;<br />.incbin &quot;anim2k_3.chr&quot;<br />.incbin &quot;anim2k_4.chr&quot;<br /><br />.bank 4<br />.org $4000<br />.incbin &quot;anim2k_5.chr&quot;<br />.incbin &quot;anim2k_6.chr&quot;<br />.incbin &quot;anim2k_7.chr&quot;<br />.incbin &quot;anim2k_8.chr&quot;</div><br /><br />nesasm semantics = 3 x 8k banks of CHR-ROM<br /><br />But my code for the purposes of MMC3 /mapper 4 views it as 24 x 1k pages or 12 x 2k pages.  Page numbers written to $8001 are in the form of 1024k x page_no and must be aligned to the size of the page frame (2k in my case).<br /><br />Is this correct?

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=41&amp;sid=4c25cae292920bd275d8bfb09442c43a">test.zip</a> [918 Bytes]
			</span><br />
			<span class="gensmall">Downloaded 123 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>13</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>