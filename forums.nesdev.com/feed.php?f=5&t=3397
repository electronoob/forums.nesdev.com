<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=3397" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2007-06-08T09:17:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=3397</id>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-06-08T09:17:15-07:00</updated>
<published>2007-06-08T09:17:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24778#p24778</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24778#p24778"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24778#p24778"><![CDATA[
Expanding four input pixels A,B,C,D by a factor of 2.5, where each character represents 1/2 an output pixel:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A A A A A B B B B B C C C C C D D D D D<br />0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9</div><br />It's only output pixels 2 and 7 which are a mix of input pixels, each 1/2 of the two nearest inputs.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jun 08, 2007 9:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[randilyn]]></name></author>
<updated>2007-06-08T08:28:06-07:00</updated>
<published>2007-06-08T08:28:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24777#p24777</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24777#p24777"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24777#p24777"><![CDATA[
Hello valiant Fx3,<br /><br />You can do it very simply in hardware with <a href="http://allegrogl.sourceforge.net/" class="postlink">AllegroGL</a> (which interfaces Allegro to OpenGL).<br /><br />The gist of it is that you convert the bitmap to a texture each frame (which in turn uploads it to VRAM for you), and then simply draw it textured across a quad in orthographic mode with linear interpolation enabled, and finally destroy the texture, or just update it on the next frame with a block pixel transfer.<br /><br />It sounds difficult but it's really really not.  The downside is that it requires your program to be using an OpenGL video mode, which, while pretty standard for the last decade, might be slower than normal 2D graphics acceleration.<br /><br />Another way to do it is with simple software-based bilinear interpolation.  This will require alot of optimizations to get working with Allegro especially if you want things like on-the-fly color conversion, but I've done it before.<br /><br />My version is very inefficient and slow (see <em>blit_interpolated_2x_hq()</em> in <a href="http://fakenes.cvs.sourceforge.net/fakenes/fakenes/src/include/blit/interp.h?view=log" class="postlink">src/include/blit/interp.h in the FakeNES CVS source</a>) but is much higher quality than bilinear due to supposedly being bicubic, despite being listed as bilinear. xP<br /><br />Keep up the good work.  Peace. &lt;3<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=379">randilyn</a> — Fri Jun 08, 2007 8:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2007-06-08T05:25:25-07:00</updated>
<published>2007-06-08T05:25:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24776#p24776</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24776#p24776"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24776#p24776"><![CDATA[
I'm working with a memory bitmap which is blitted when the entire frame is done. So, I'm not looking into hardware aspect, neither into Windows API functions, but Allegro. Plus, it's an exercise. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Fri Jun 08, 2007 5:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-06-08T00:49:55-07:00</updated>
<published>2007-06-08T00:49:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24774#p24774</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24774#p24774"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24774#p24774"><![CDATA[
I see... If you have a specific ratio for wich code can be optimized, great. But most of the time, that's not the case... Like in your idea of having emulators provide user-adjustable stretching of the screen... better just let the hardware do it. Unless you have a very specific reason to do it in software, it seems like a waste of processing time.<br /><br />Now that I think of it... Your example seems a bit too simple, and might look wrong. When expanding 2 pixels into 5, you have something like this (according to your example):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">+-+-+-+-+-+<br />| |0| |1| | &#40;ORIGINAL&#41;<br />+-+-+-+-+-+<br />|0|1|2|3|4| &#40;INTERPOLATED&#41;<br />+-+-+-+-+-+</div><br /><br />Where only interpolated pixel #2 is a mix of both original pixels. But if you look at a larger view of that:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">+-+-+-+-+-+-+-+-+-+-+<br />| |0| |1| | |2| |3| |<br />+-+-+-+-+-+-+-+-+-+-+<br />|0|1|2|3|4|5|6|7|8|9|<br />+-+-+-+-+-+-+-+-+-+-+</div><br />You'll see that the original pixels are not evenly distributed, while with mathematically correct interpolation they should, right? Maybe this will look close enough, but we can only tell by seeing some horizontal scrolling scaled up with that method.<br /><br />I'm pretty sure real interpolation needs to use floating point math... unless something like Bresenham can be used for this, but I haven't given much thought to that.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Jun 08, 2007 12:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2007-06-07T22:18:11-07:00</updated>
<published>2007-06-07T22:18:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24771#p24771</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24771#p24771"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24771#p24771"><![CDATA[
Yes, it is best done in hardware (Dwedit didn't specify how you implement the algorithm, just what is mathematically carried out). OpenGL and DirectX should allow you to specify linear interpolation. It's not so bad if you have to do it in software, since you can probably choose a ratio that can be implemented optimally. For example, scaling from 256 to 640 pixels per row is a ratio of 2.5, which means that each pair of input pixels turns into 5 output pixels. Naming them A and B, the output pixels could be A,A,(A+B)/2,B,B. The mix operation for the center pixel can be done efficiently as <a href="http://www.slack.net/~ant/info/rgb_mixing.html" class="postlink">(A + B - ((A ^ B) &amp; 0x0821)) &gt;&gt; 1</a> (adjust if you aren't working in 5-6-5 RGB format).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Jun 07, 2007 10:18 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2007-06-07T19:37:18-07:00</updated>
<published>2007-06-07T19:37:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24769#p24769</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24769#p24769"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24769#p24769"><![CDATA[
Uh... I'm not an expert on that kind of thing, but shouldn't this interpolation be done on hardware? Not that it can't be done on software, but I thought video cards had support for this...<br /><br />I'm really not sure how to work with DirectX or anything like it, but I thought that if you had a retangular image, you could tell DirectX (or some other API, I don't know) to strech that image, optionally using interpolation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Thu Jun 07, 2007 7:37 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2007-06-07T19:03:49-07:00</updated>
<published>2007-06-07T19:03:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24767#p24767</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24767#p24767"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24767#p24767"><![CDATA[
Bilinear Interpolation:<br />p1 p2<br />p3 p4<br />Given pixels p1 p2 p3 and p4, and percentages Ax and Ay:<br />(APPLY TO R G and B channels separately!)<br />p12 = Ax*p1+(1-Ax)*p2<br />p34 = Ax*p3+(1-Ax)*p4<br />p1234 = Ay*p12+(1-Ay)*p34<br /><br />Yeah, this is inefficient floating point math, but it's the mathematical formula behind it.  Go ahead and optimize it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Thu Jun 07, 2007 7:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2007-06-07T16:43:20-07:00</updated>
<published>2007-06-07T16:43:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24762#p24762</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24762#p24762"/>
<title type="html"><![CDATA[Interpolating pixels [?]]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3397&amp;p=24762#p24762"><![CDATA[
- Instead of repeating the previous pixel, how do I interpolate them? I tried an easy (pixel1 + pixel2) DIV 2, but doesn't work. Any ideas?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Thu Jun 07, 2007 4:43 pm</p><hr />
]]></content>
</entry>
</feed>