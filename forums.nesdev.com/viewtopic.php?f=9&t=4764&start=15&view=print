<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CIC chips</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CIC chips</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4764">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=4764</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bunnyboy</b> [ Fri Feb 06, 2009 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have at least one ROB that can have chips pulled from. 
<br />
<br />Is it enough to just put a normal camera up to the eye piece or does that not get enough focus?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Fri Feb 06, 2009 5:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kevtris wrote:</div><div class="quotecontent">That's correct.  I noticed during my CIC RE that if you left the thing unclocked for long enough, it would crash and required a reset.  The chip is reset when reset is HIGH.  Reset connects to 5V thru a capacitor, so it will be pulled high on reset, then I assume the chip has a pulldown on it, which causes the cap to charge and then it sees a low during operation.</div><br />Thanks for that info.  While frustrating, it is good to know that at least what I'm seeing matches some results from reality.<br /><br /><div class="quotetitle">kevtris wrote:</div><div class="quotecontent">Also another thing, the CIC processor is used on the ROB too... I'm 99.99999% sure of this.  It has an identical pinout with respect to reset, power, and clock.  It also uses both clock pins with a ceramic resonator.  The CIC has the two clock pins but they just drive Xin instead of using a resonator or crystal.    Obviously, code is different.</div><br />If it is used for the ROB, it is a newer version.  Using nintendo's labels for the pins (that LordNightmare linked above), the CK2 pad is not connected to any circuitry on the silicon for the CIC.<br /><br /><br /><div class="quotetitle">bunnyboy wrote:</div><div class="quotecontent">I have at least one ROB that can have chips pulled from. <br /><br />Is it enough to just put a normal camera up to the eye piece or does that not get enough focus?</div>
<br />No need to sacrifice a ROB.
<br />
<br />As for the camera idea, even with the microscope with a camera mount it was always frustrating how much less clear everything was than to the eye.  So it would probably be difficult to focus, but it is definitely worth a try.  I'll borrow a digital camera from a friend and see if I can get any readible pictures.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sun Feb 08, 2009 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Alright, I tried using a digital camera, and while it was obvious I was taking a picture of a circuit, you can't make out the details or layers of the circuit.  I couldn't get it to focus well enough for this to work.  Oh well, it was worth a try.
<br />-----------------------------
<br />
<br />I've learned a lot more, and am pretty sure I understand how are least part of the program counter works.  It does appear to be a LFSR.  I'll explain the circuit logic and see if other people agree with my assessment.
<br />
<br />
<br />The clock line comes in and goes to a type of ring counter.  It breaks every four clock cycles into eight pieces.  These are then used to decide when to enable certain control lines.
<br />
<br />The program counter itself:
<br />First, note that the chip often does not use complementary logic.  And instead of using a pull up resistor like in NMOS, they seem to like to "precharge" the output to Vcc, and then later the logic decides whether to pull the output low or leave it essentially floating with its precharged value.
<br />
<br />Okay, the counter is broken into two large groups.  One for "address lines" 0-2, and the other for "address lines" 3-9.  I'll stick to explaining the 3-9 group as it appears to function basically separately. (And the 0-2 group doesn't have a very good structure to follow.)
<br />
<br />Each address line for 3 through 9, has a "cell" in the program counter.  Each cell contains:
<br />
<br />output:
<br />RA   -&gt; rom address line
<br />Sout -&gt; to stack (not saved unless another control line causes it to be)
<br />Cout -&gt; essentially a carry to the next cell  (note, cell 9 carry output goes through some logic before going to cell 3 ... so this is kind of a shift / ring counter)
<br />
<br />input:
<br />ROM &lt;- input coming from the rom data (may be latched or inverted between here and actual ROM output)
<br />Sin &lt;- from stack
<br />Cin &lt;- from above cell
<br />
<br />internal lines:
<br />/RA (always inverted and output as RA)
<br />D
<br />/Cout (always inverted and output as Cout)
<br />/Sout (always inverted and output as Sout)
<br />
<br />control lines input (shared by all cells, functions described below):
<br />A, B, C (and /B, /C)
<br />L1,L2,L3,L4,L5,L6
<br />
<br />
<br />
<br />Some of the control lines are related as follows:
<br />when C is low, Sin is forced low
<br />L3 = NOT(L6)
<br />L1 = NOR(L2,L4,L5)
<br />and, it appears they changed their mind or something, for while L4 is used as an input in places other than these cells even, it is connected to ground.
<br />L4 = GND
<br />I have not traced far enough to find the ultimate source for all the L lines (it gets messy quick).
<br />
<br />A,B,C have the following values
<br />A = Low for time 0-2, High for time 3-7
<br />B = Low for time 5, High for time 0-4,6-7
<br />C = Low for time 0, High for time 1-7
<br />
<br />
<br />Here is the actual logic:
<br />
<br />D = High if B low and /RA low
<br />D = Low if /B high and /RA high
<br />
<br />/Cout = High if C low and D low
<br />/Cout = Low if /C high and D high
<br />
<br />/Sout = High if A low
<br />/Sout = Low if A*(L6*Cin + L3*Sin)
<br />
<br />/RA = High if A low
<br />/RA = Low if A*(L2*Sin + L4*Cout + L1*Cin + L5*ROM)
<br />
<br />
<br />cell 0 Cin = XNOR(cell 8 Cout, cell 9 Cout)
<br />
<br />And that is it.
<br />
<br />---------------------------------------
<br />
<br />Summarizing my current understanding/overview of this:
<br />A (when low) is used to precharge some outputs.  
<br />B (when low) transfers RA to D (saves it for later essentially).
<br />C (when low) transfers B to Cout.
<br />
<br />How does this go into a known state at the beginning!? (Maybe the first command HAS to be a jump command.  The frist Tengen command was mysteriously a jump to the very next instruction.)
<br />
<br />So looking at the time sequence, we have:
<br />
<br />(Stuff after a ? I am guessing plausible things that could be done.)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />time A B C&nbsp; &nbsp;what happens<br />0&nbsp; &nbsp; L H L&nbsp; &nbsp;precharge /RA and /Sout to High, set Cout = D<br />1&nbsp; &nbsp; L H H&nbsp; &nbsp;precharge /RA and /Sout to High, ?<br />2&nbsp; &nbsp; L H H&nbsp; &nbsp;precharge /RA and /Sout to High, ?<br />3&nbsp; &nbsp; H H H&nbsp; &nbsp;? load RA from Cin, Sin, or ROM<br />4&nbsp; &nbsp; H H H&nbsp; &nbsp;?<br />5&nbsp; &nbsp; H L H&nbsp; &nbsp;set D = RA<br />6&nbsp; &nbsp; H H H&nbsp; &nbsp;? set Sout = Cin or Sin<br />7&nbsp; &nbsp; H H H&nbsp; &nbsp;? save Sout to stack<br /><br /><br />without jumps or loads from stack, the program counter functions as:<br />LFSR such that <br />&nbsp; RA3 -&gt; RA4 -&gt; RA5 -&gt; RA6 -&gt; RA7 -&gt; RA8 -&gt; RA9<br />&nbsp; &nbsp;^&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |<br />&nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +-XNOR-+<br />&nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br />&nbsp; &nbsp;+--------------------------------------+<br /><br /></div>
<br />
<br />LFSR such that 
<br />
<br />RA3 -&gt; RA4 -&gt; RA5 -&gt; RA6 -&gt; RA7 -&gt; RA8 -&gt; RA9

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cybertron</b> [ Sun Feb 08, 2009 10:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh no, dynamic logic. Thats my worst fear :s
<br />
<br />So each n-mos has a well? Thats interesting, normally its the p-mos.
<br />
<br />Does each dynamic gate have an inverter after it?
<br />
<br />How about tracing out the clock circuitry first? That will give you the non-overlapping clock signals it uses.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sun Feb 08, 2009 10:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just made some huge edits to that last post, as I just found some mistakes for the Cin for RA3 which changed a lot.  So I'd suggest rereading it first. (Sorry, I thought I'd be able to change before anyone noticed it.)
<br />
<br />While it is XNOR instead of XOR, the wikipedia article on LFSR ( <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/LFSR">http://en.wikipedia.org/wiki/LFSR</a><!-- m --> ) suggests that we have a maximal length counter from this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>caitsith2</b> [ Sun Feb 08, 2009 11:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maximal length counter is 127.  All values are valid except 1111111.  If Value is 1111111, then the next shift WILL also be 1111111.  Any other value will loop around 127 before ending back at that location again.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>cybertron</b> [ Mon Feb 09, 2009 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here is a quickie program that simulates your LFSR
<br />
<br />You are right, it does have 127 positions and each number only occurs once before it repeats.
<br />
<br />What happens to bit 0-2? I am leaving them 0. Once we get that then when we can decode the ROM into linear order! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />edit: So the stack is 10 bits as well. How wide is the ROM, since it is directly connected. That will let is identify the opcode bits and JMP type instructions
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &lt;stdio.h&gt;<br /><br />int main&#40;&#41;<br />&#123;<br />&nbsp; &nbsp;int i;<br />&nbsp; &nbsp;unsigned int reg, bit;<br />&nbsp; &nbsp;unsigned char counter&#91;1024&#93;;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;memset&#40;counter, 0, sizeof&#40;counter&#41;&#41;;<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;reg = 0; //Initial<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;for&#40;i=0; i&lt;128; i++&#41; &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;bit = &#40;&#40;reg &gt;&gt; 8&#41; ^ &#40;reg &gt;&gt; 9&#41; ^ 1&#41; &amp; 0x01; //8 xnor 9<br />&nbsp; &nbsp;&nbsp; &nbsp;reg = &#40;&#40;reg &lt;&lt; 1&#41; | &#40;bit &lt;&lt; 3&#41;&#41; &amp; 0x3FF; //bits 3-9<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;counter&#91;reg&#93;++; // how many times this number has occured<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;printf&#40;&quot;%4x &#40;%d&#41; \n&quot;, reg, counter&#91;reg&#93;&#41;;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;return 0;<br />&#125;<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Feb 09, 2009 11:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cybertron wrote:</div><div class="quotecontent">edit: So the stack is 10 bits as well. How wide is the ROM, since it is directly connected. That will let is identify the opcode bits and JMP type instructions</div><br />Yes, the stack is 10 bits wide (it is 4x10bit).  The ROM is 512x8bit.<br /><br />Please note that to simplify discussion of the counter, I numbered the rom "addresses" in order of the "counter parts".  However, first of all, these are not really all addresses (bit0 is "rom enable", I'm not sure why rom wouldn't be enabled, or why this is apparrently stored in the stack ... maybe it will become more clear when I figure out bits0-2).  Second, if I were to label the rom addresses according to what makes sense from the ROM layout, I would get a different order (as I described above about the "quadrants" of the ROM).<br /><br />So we need two more things:<br />1) how bits0-2 update<br />2) the specifics of how the ROM is addressed from this<br /><br />It would also be nice to have:<br />3) whether what we read as a 0 or 1 when reading the stain is inverted or not<br />4) the order of the rom bits (which is MSB, which is LSB, etc.)<br /><br />I've basically already done #2 and #3, but would like to double check it once I understand bits0-2.  I've traced enough to realize I probably can't fully understand #1 just by looking at the program counter ... it is not fairly "self-contained" like the other part of the counter was.  And #4 will probably be difficult as I'd need to find the ALU and understand the basics of that ... which may not be necessary.  Once we have the ROM in "execution order", we finally have the rosetta stone to figure out the opcodes from the Tengen code.<br /><br /><div class="quotetitle">cybertron wrote:</div><div class="quotecontent">What happens to bit 0-2?</div>
<br />I'd love to know as well <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />I'll let you know as I figure out more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Mon Feb 09, 2009 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah yes, the good ol' days of CIC RE...
<br />
<br />I so miss those days of disassembly and cracking the international seeds.  I would LOVE to see the original implementation (not to mention see the SNES CIC figured out).  I don't know if I will be able to help as I did before (how long ago was that...?), but if I can, I'll be around.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lord Nightmare</b> [ Thu Feb 12, 2009 1:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><!-- m --><a class="postlink" href="http://www.datasheetcatalog.com/datasheets_pdf/S/M/5/K/SM5K3.shtml">http://www.datasheetcatalog.com/datashe ... M5K3.shtml</a><!-- m -->
<br />that's the sm5k3 datasheet. Be warned that the sm5k3 has (I think) one clock per cycle, while the cic is an older design which (even as shown on the cic patent) takes 4 clocks per cycle (or as you have shown it, probably 4 clocks per full cycle with actions/subclocking on both edges). The rest shows a lot of uncanny resemblances.
<br />
<br />LN

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lord Nightmare</b> [ Thu Feb 12, 2009 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One other cute thing that can be done with an LFSR program counter is what TI did on the tms0980 and tms1980:
<br />its an 7 bit lfsr for *128* (not 127) locations! how? like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* emulator for the program counter increment on the tms0980/tmc0980 mcu;<br />&nbsp;see patent 4064554 figure 19 &#40;on page 13&#41; for an explanation of feedback:<br /><br />&nbsp; nand324 = NAND of PC0 thru pc4, i.e. output is true if &#40;&#40;pc&amp;0x1f&#41; != 0x1f&#41;<br />&nbsp; nand323 = NAND of pc5, pc6 and nand324<br />&nbsp; &nbsp; &nbsp; i.e. output is true, if &#40;&#40;pc&amp;0x1f&#41;==0x1f&#41; || pc5 is 0 || pc 6 is 0<br />&nbsp; or321 = OR of pc5 and pc6, i.e. output is true if &#40;&#40;pc&amp;0x60&#41; != 0&#41;<br />&nbsp; nand322 = NAND of pc0 thru pc5 plus /pc6,<br />&nbsp; &nbsp; &nbsp; i.e. output is true if &#40;pc != 0x3f&#41;<br />&nbsp; nand325 = nand pf nand323, or321 and nand322<br />&nbsp; &nbsp; &nbsp; This one is complex:<br />&nbsp; &nbsp; &nbsp; / or321 means if pc&amp;0x60 is zero, output MUST be true<br />&nbsp; &nbsp; &nbsp; \ nand323 means if &#40;pc&amp;0x60=0x60&#41; &amp;&amp; &#40;pc&amp;0x1f != 0x1f&#41;, output MUST be tru<br />e<br />&nbsp; &nbsp; &nbsp; nand322 means if pc = 0x3f, output MUST be true<br />&nbsp; &nbsp; &nbsp; hence, nand325 is if pc = 0x7f, false. if pc = 0x3f, true. if pc&amp;0x60 is z<br />ero OR pc&amp;0x60 is 0x60, true. otherwise, false.<br /><br />&nbsp; &nbsp; &nbsp; lfsr_shift below implements an indentical function to this in a somewhat more elegant way.<br /><br />&nbsp;*/<br /><br /><br />unsigned int lfsr_shift&#40;unsigned int oldvalue&#41;<br />&#123;<br />&nbsp; int newbit, xor = 0;<br />&nbsp; if &#40;&#40;oldvalue&amp;0x3F&#41; == 0x3F&#41;<br />&nbsp; &nbsp; &#123; xor = 1; &#125;<br />&nbsp; else <br />&nbsp; &nbsp; &#123; xor = 0; &#125;<br />&nbsp; newbit = &#40;&#40;oldvalue^&#40;oldvalue&lt;&lt;1&#41;&#41;&amp;0x40&#41;?xor:1-xor;<br />&nbsp; oldvalue &lt;&lt;= 1;<br />&nbsp; oldvalue += newbit;<br />&nbsp; return oldvalue;<br />&#125;<br /></div>
<br />
<br />In short: instead of going 0x1F 0x3F 0x7E 0x7C, it goes 0x1F 0x3F 0x7F 0x7E 0x7C, by explicitly checking for 0x3F and 0x7F and adjusting the feedback for those two lfsr cases.
<br />
<br />This was important on the tms0980 as it only had 2k of rom total in 16 128 byte 'pages', and skipping 1 byte on each page would lose 16 bytes, which is pretty significant if you need every possible byte for your program.
<br />
<br />LN

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Lord Nightmare</b> [ Tue Feb 17, 2009 12:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for triple post, but some new and interesting info emerged:
<br />#1: from Stiletto:
<br /><!-- m --><a class="postlink" href="http://www.digchip.com/distributors/parts/f4/parts_f4.php">http://www.digchip.com/distributors/par ... rts_f4.php</a><!-- m -->
<br />^ That lists the F411A (SNES NTSC CIC second mask revision) as being made by "Nintendo; Sharp"
<br />
<br />#2: from Mooglyguy:
<br /><!-- m --><a class="postlink" href="http://retroactive.be/mirror/n64/cic_die/6102_entiredie_large.jpg">http://retroactive.be/mirror/n64/cic_di ... _large.jpg</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://retroactive.be/mirror/n64/cic_die/6103A_entiredie_large.jpg">http://retroactive.be/mirror/n64/cic_di ... _large.jpg</a><!-- m -->
<br />More pics at: <!-- m --><a class="postlink" href="http://retroactive.be/mirror/n64/cic_die/">http://retroactive.be/mirror/n64/cic_die/</a><!-- m -->
<br />^ these are pics (stained wrongly and not high enough magnification) of two of the CICs for the n64
<br />
<br />Note that the PIF chip (the chip on the n64 mainboard which among other things 'talks' to the cart cics and has a small code bootstrap in it to start the n64; different versions of this chip for ntsc and pal, PIF-NUS and PIF-PNUS respectively) is possibly YET ANOTHER CIC-based chip; whatever it is it is certainly a SHARP-made chip, as its prototype version is even marked so (with a sharp LRxxxxx number) on the Nintendo Ultra 64 SGI Indy dev board. It has an LR35xxx part number which is Sharp's 'for specific manufacturer only' series of custom parts (the gameboy dmg-cpu is LR35902, for instance)
<br />
<br />LN

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>