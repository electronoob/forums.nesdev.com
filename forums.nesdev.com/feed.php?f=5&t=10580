<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=5&amp;t=10580" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2013-10-26T19:24:12-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=5&amp;t=10580</id>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2013-10-26T19:24:12-07:00</updated>
<published>2013-10-26T19:24:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119903#p119903</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119903#p119903"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119903#p119903"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Thanks, I fixed that much easily. I'd have bet it was something like that.<br /></div><br />You're welcome.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Finally I didn't merge both filtering steps into one but who cares. This is too complicated as the second filtering stages depends on the fractional part of &quot;a&quot; only, which is different for every sample, while the first part depends on the resampling ratio, which of course don't change.<br /></div><br />That's not as hard as you may think. Interpolation works as if you were &quot;walking&quot; on your original sample, with steps smaller than 1. You calculate via convolution with a sinc the values in-between the original samples. When you downsample it's almost the same thing, except you use steps higher than 1 in your original sample, and <em>steps smaller than 1</em> in your sinc function (steps of 1/ratio specifically) . This has the effect of broadening the sinc window, which mean lowering of the cutoff frequency (mind the gain problem here too!).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Sat Oct 26, 2013 7:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-10-26T15:01:25-07:00</updated>
<published>2013-10-26T15:01:25-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119882#p119882</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119882#p119882"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119882#p119882"><![CDATA[
Thanks, I fixed that much easily. I'd have bet it was something like that.<br /><br />Finally I didn't merge both filtering steps into one but who cares. This is too complicated as the second filtering stages depends on the fractional part of &quot;a&quot; only, which is different for every sample, while the first part depends on the resampling ratio, which of course don't change. The second part also is not symetric, so the trick tepples mentioned doesn't apply.<br /><br />The new version of BRRTools including this will be released tomorrow.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sat Oct 26, 2013 3:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2013-10-25T15:03:52-07:00</updated>
<published>2013-10-25T15:03:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119846#p119846</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119846#p119846"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119846#p119846"><![CDATA[
I think I know the 'why' of you 'gain' problem: when you filter your signal (in your <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">if &#40;ratio &gt; 1.0&#41;</tt>) your signal is convoluted with a sinc function of height '1' (that is, sinc(0) == 1, if your sinc function is behaving normally), which is not correct, because as the cutoff frequency gets lower, your filtered signal will get more and more boost. The reason is simple: your sinc should have a height of 1/ratio, so it does not have a gain different of 1 at all cutoff frequencies.<br /><br />Think of it this way: suppose you want to filter a signal with a rectangular window 4 samples long, but you want unity gain. You know intuitively that all of your coefficients should be ¼, so it sums up to 1. You know that the value of this sum is the DC gain of your filter (trivial; it is like <em>directly</em> measuring the DC response of your filter!). The same apply to your sinc filter: it should sum up to 1, when broken up into coefficients. <br /><br />So, unless I overlooked something, changing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">acc += samples[k]*sinc&#40;&#40;j-k&#41;/ratio&#41;;</tt> to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">acc += samples[k]*sinc&#40;&#40;j-k&#41;/ratio&#41; * 1./ratio;</tt> should correct the gain problem.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Fri Oct 25, 2013 3:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-10-25T14:05:35-07:00</updated>
<published>2013-10-25T14:05:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119845#p119845</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119845#p119845"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119845#p119845"><![CDATA[
Now I got the filter working with the following portion of C code :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;...&#93;<br />case 'b':                           // Bandlimited interpolation<br />   // Antialisaing pre-filtering<br />   if(ratio &gt; 1.0)<br />   {<br />      signed short *samples2 = malloc(2 * samples_length);<br />      if(!samples2)<br />      {<br />         printf(&quot;Error : can't allocate 'nuf memory.\n&quot;);<br />         exit(1);<br />      }<br />      // Apply low-pass filter of cutoff 1/ratio<br />      for(int j=0; j&lt;samples_length; ++j)<br />      {<br />         double acc = 0.0;<br />         for(int k=j-8; k&lt;=j+8; ++k)<br />         {<br />            if(k&gt;=0 &amp;&amp; k &lt; samples_length)<br />               acc += samples&#91;k&#93;*sinc((j-k)/ratio);<br />         }<br />         samples2&#91;j&#93; = (short)acc;<br />      }<br />      free(samples);<br />      samples = samples2;<br />   }<br />   // Actual resampling using sinc interpolation<br />   for(int i=0; i&lt;out_length; ++i)<br />   {<br />      double a = i*ratio;<br />      double acc = 0.0;<br />   //   for(int j=0; j&lt;samples_length; ++j)      // No windowing (N^2 complexity :( )<br />      for(int j=(int)a-8; j&lt;=(int)a+8; ++j)   // Cut windowing with 9 coefficients (N complexity :) )<br />         if(j&gt;=0 &amp;&amp; j &lt; samples_length)<br />            acc += samples&#91;j&#93;*sinc(a-j);<br /><br />      out&#91;i&#93; = (short)acc;<br />   }<br />   break;<br />&#91;...&#93;<br /></div><br /><br />Works great, I tested it with the song &quot;Slam shuffle&quot; from FF6 which is famous for having a lot of trebbles, and it seems to cut the aliasing properly enough so it's inaudible.<br /><br />However several problems remains, namely, I have to manually shut down the volume a lot or else I get saturation all arround (the filter is also amplifying the signal apparently) and I'd like to merge both FIR filtering steps into a single step.<br />It will probably not be very hard to do those improvements.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Fri Oct 25, 2013 2:05 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Jarhmander]]></name></author>
<updated>2013-10-16T19:41:14-07:00</updated>
<published>2013-10-16T19:41:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119515#p119515</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119515#p119515"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119515#p119515"><![CDATA[
I don't know if it is appropriate, but you can look at the sinc resampler I coded and gave to FamiTracker: download FamiTracker's sources, and look in Source/resampler. There's only 5 files. I admit it has rather terse comments. The resampler works obviously, and should be fairly fast, as the FIR only calculates the output samples without actually decimating or upsampling (I think it is called a polyphase FIR resampler). The resampler uses a 'sinc' object, which you can make as big as you want, but it'll increase processing time and memory usage. This resampler can use fractional and irrational ratios, but avoid very small or very big ratios (like, abs(log10(ratio)) &gt; 2) as it will use a ridiculously big amount of RAM. To further reduce aliasing at the expense of some bandwidth, you can even lower the corner frequency.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=336">Jarhmander</a> — Wed Oct 16, 2013 7:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-10-15T01:48:37-07:00</updated>
<published>2013-10-15T01:48:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119400#p119400</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119400#p119400"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119400#p119400"><![CDATA[
I think I understand what you mean. I can filter digially the input so that it doesn't contain any harmonics greater than the desired frequency (in our case half of the new sample rate), but this is only valid if the interpolation doesn't create high frequencies again.<br /><br />If you use nearest neighboor (or anything else than sinc), even if the input signal is lowpass filtered, it is represented by a continus time equivalent which has harmonics above what we want.<br /><br />I think I will now be able to code this, thank you very buch Blargg, your explainations were very helpful.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Oct 15, 2013 1:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-10-14T15:49:11-07:00</updated>
<published>2013-10-14T15:49:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119382#p119382</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119382#p119382"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119382#p119382"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />When upsampling<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; Nearest neighboor interpolation -&gt; Final samplerate<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; Linear interpolation -&gt; Final samplerate<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; etc... -&gt; Final samplerate<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; Sinc interpolation -&gt; Final samplerate<br /></div><br />Nearest neighbor is like using a box impulse response (rather than sinc). Each sample point is expanded half a period in either direction, so you get a stair-step version in continuous time. This box impulse response introduces higher harmonics (because a stair-step waveform has really high harmonics), and thus expands the spectrum above the Nyquist limit. So you get aliasing when using this form of interpolation.<br /><br />So any interpolation method that introduces higher harmonics will add aliasing. The lower the magnitude of the harmonics, the less aliasing. Sinc adds none.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Mon Oct 14, 2013 3:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-10-14T14:55:12-07:00</updated>
<published>2013-10-14T14:55:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119378#p119378</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119378#p119378"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119378#p119378"><![CDATA[
You don't actually want to use nearest neighbor interpolation when upsampling.<br />1- It makes any subsequent filtering harder, because you don't get all these 0s that you would otherwise be able to optimize out later<br />2- It's equivalent to &quot;proper&quot; upsampling followed by a boxcar lowpass, which AFAICT is basically the worst kind.<br />3- Better to explicitly keep the images you want when you design your filter than to take the random crap a boxcar gives you.<br /><br />These all (mostly) hold for all other interpolators, too. Obviously #2 varies by interpolator choice. (e.g. linear interpolation is convolution by an isosceles triangle)<br /><br />In any case, the reason you only need one filter in the end is because the upsample-filter-filter-downsample process allows you to combine the two filters, H(jΩ) = G(F(jΩ))<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Oct 14, 2013 2:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-10-14T14:54:11-07:00</updated>
<published>2013-10-14T14:54:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119377#p119377</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119377#p119377"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119377#p119377"><![CDATA[
Cubic interpolation can be interpreted as a windowed sinc. If I sat down with a computer algebra system, I could construct a plausible window function that, when multiplied by sinc, gives the impulse response of Catmull-Rom cubic spline interpolation.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Oct 14, 2013 2:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-10-14T14:23:04-07:00</updated>
<published>2013-10-14T14:23:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119373#p119373</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119373#p119373"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119373#p119373"><![CDATA[
Thanks Blargg, I now understood the concept of &quot;sinc interpolation&quot; and in fact it's surprisingly simple.<br /><br />Now I see that the anti-aliasing filtering has basically nothing to do with the interpolation itself. In fact I could automatically test if resample is smaller than 1 and activate antialiasing prefiltering when this is the case, no matter which interpolation method is choosen.<br /><br />So the signal processing pipeline could look like this :<br />When downsampling<br />Original samplerate -&gt; Nearest neighboor interpolation -&gt; Final samplerate<br />Original samplerate -&gt; Linear interpolation -&gt; Final samplerate<br />Original samplerate -&gt; (etc...) -&gt; Final samplerate<br />Original samplerate -&gt; Sinc interpolation -&gt; Final samplerate<br /><br />When upsampling<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; Nearest neighboor interpolation -&gt; Final samplerate<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; Linear interpolation -&gt; Final samplerate<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; etc... -&gt; Final samplerate<br />Original samplerate -&gt; Antialiasing prefilter -&gt; Prefiltered signal -&gt; Sinc interpolation -&gt; Final samplerate<br /><br />However only the sinc actually produces the &quot;theorically correct&quot; result. Other results while theroically incorrect might as well be useful in practice though (for instance, Cubic interpolation produces much crisper sounds which sounds better)<br /><br />The problem is that two sincs are potentially involved (one for the filtering, one for interpolation). From what you'd say it sounds like it could be optimized but I didn't understand at all yet. I'll just try and see if I can see any optimisation by myself. Since one sinc has a period of the original samplerate, and the other sinc has a period determined by the resampling ratio, it doesn't sound like they would bleed well, though.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Oct 14, 2013 2:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-10-13T17:48:04-07:00</updated>
<published>2013-10-13T17:48:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119337#p119337</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119337#p119337"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119337#p119337"><![CDATA[
<div class="quotetitle">lidnariq wrote:</div><div class="quotecontent"><br />2- All I'm saying is &quot;do it the stupid way first&quot; so that you can get a proof of concept. Then you can optimize it.<br /></div><br />Seconded. Explore with this and keep this around even once you start to optimize. This is an invaluable reference implementation.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So you generate a table of these weights for each fractional position you will be using, then run through and apply them.<br /></div><br />In the Super NES DSP, the Gaussian interpolation stage immediately after BRR decoding does pretty much exactly this. It has 256 sets of four weights, one for each 1/256 fractional position. (Half of those sets are reflected.) See &quot;4-Point Gaussian Interpolation&quot; in <a href="http://nocash.emubase.de/fullsnes.txt" class="postlink">fullsnes</a> for the details.</div><br />However because it varies the resampling ratio, you still get aliasing because to do it properly you must change the filtering when you change the ratio.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Oct 13, 2013 5:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2013-10-13T15:33:55-07:00</updated>
<published>2013-10-13T15:33:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119332#p119332</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119332#p119332"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119332#p119332"><![CDATA[
1- You don't need to load the entire sample at the same time. You only need to keep in memory a length equal to the FIR length.<br />2- All I'm saying is &quot;do it the stupid way first&quot; so that you can get a proof of concept. Then you can optimize it.<br />3- You cannot upsample by a non-integral amount. It either involves another stage of filtering followed by downsampling, or smart-ass math that will produce harmonics blended down in the passband; this isn't avoidable. Here's some spectrograms that illustrate my point:<br />spectrograms2.png<br />The tones on the 60kHz spectrograms are: 9, 12, 15, 33, 36, 39, and 57kHz. All the resultant files were generated from the first row, which was a 48kHz audio file with tones at 9 and 12 kHz.<br />You can see the noise, and you can see the incorrect signal inserted in the pass band at 15 kHz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Oct 13, 2013 3:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2013-10-13T14:58:57-07:00</updated>
<published>2013-10-13T14:58:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119329#p119329</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119329#p119329"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119329#p119329"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So you generate a table of these weights for each fractional position you will be using, then run through and apply them.<br /></div><br />In the Super NES DSP, the Gaussian interpolation stage immediately after BRR decoding does pretty much exactly this. It has 256 sets of four weights, one for each 1/256 fractional position. (Half of those sets are reflected.) See &quot;4-Point Gaussian Interpolation&quot; in <a href="http://nocash.emubase.de/fullsnes.txt" class="postlink">fullsnes</a> for the details.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Oct 13, 2013 2:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-10-13T14:54:38-07:00</updated>
<published>2013-10-13T14:54:38-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119328#p119328</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119328#p119328"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119328#p119328"><![CDATA[
Start with how a sampled signal ideally is converted to analog: each point generates a sinc function centered on it.<br /><br /><img src="http://i.imgur.com/lKKVL6g.png" alt="Image" /><br /><br />In continuous time, several sample points (blue, green, red, cyan, magenta) each contribute their respective sinc function, which adds up to the black waveform:<br /><br /><img src="http://i.imgur.com/0CD0xTb.png" alt="Image" /><br /><br />At each sample point, the amplitude is determined by that sample point alone, since the sinc function has zero crossings at each adjacent sample (see first picture).<br /><br />So we've just converted a sampled signal to a continuous-time analog version. To sample this at a higher rate, just take the samples from this continuous version. To sample at a lower rate, filter the original signal appropriately, then do the above conversion to continuous time and take the new samples.<br /><br />For a practical implementation, you can merge the filtering with the sinc function you use, and turn the sinc inside-out so that for a given position at some fraction between input samples, you multiply the nearby input samples by various weights and add the result for the output sample. So you generate a table of these weights for each fractional position you will be using, then run through and apply them. e.g. if you were halving the sampling rate, you'd only need two sets of weights: one for even samples, another for odd samples. If the output rate falls all over the fraction, you might take equal spacings then interpolate the weights.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Oct 13, 2013 2:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2013-10-13T14:13:47-07:00</updated>
<published>2013-10-13T14:13:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119327#p119327</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119327#p119327"/>
<title type="html"><![CDATA[Re: Digital pitch scaling without aliasing]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=10580&amp;p=119327#p119327"><![CDATA[
The problem of this upsample/downsample approach is that it only works for rational numbers were the nominator and denominator are relatively small. If I were to resample a 1 minute long sample by, say, 10000/10001, you'd quickly understand that it's going to eat a ridiculous amount of RAM.<br />Even if RAM were infinite I still want to do it for arbitrary real numbers.<br /><br />And I'm sorry if my pseudocode is not &quot;clear code&quot;, but anyone is free to post something better (in fact I'd really like someone to post something better ^^)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Oct 13, 2013 2:13 pm</p><hr />
]]></content>
</entry>
</feed>