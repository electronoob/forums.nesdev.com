<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Small C for NES: A Curious Journey</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Small C for NES: A Curious Journey</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10205">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10205</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Tue Jun 25, 2013 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thefox mentioned Small C in another thread where we got onto the topic of higher-level languages. I'm always toying with implementing compilers and thought this would be a great thing to investigate.<br /><br />Although a high-level language is never going to produce code that's as good or better than hand-written assembly in all cases, a high-level language can drastically decrease the cost of development and maintenance (in terms of time). When combined with hand-written assembly for performance critical segments such as the display kernel, this can often produce programs which are &quot;fast enough&quot; for microcomputers.<br /><br />We have already seen some adoption of cc65 within the community, and the &quot;fast enough&quot; principle has proven true in some cases. However, C89 is a big language that offers a lot of complexity that can damage the efficiency of the generated code. <br /><br />So with the assumptions that the above is true, and that such a language would be valuable to some community members, I am starting research on Small C with an eye to port it to the NES platform.<br /><br /><strong>Questions</strong><br />What would be the advantage of implementing Small-C over the existing cc65?<br /><br />I'm sure more questions will abound as we try to answer the first one <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br /><strong>Links</strong><br /><a href="http://en.wikipedia.org/wiki/Small-C" class="postlink">Wikipedia's very uninformative article</a><br /><a href="http://www.orangetide.com/smallc/welcome.htm" class="postlink">Dr. Dobb's Small C Resource CD-ROM</a><br /><a href="http://mdfs.net/System/C/BBC/" class="postlink">Small-C Compiler for the BBC/Master</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Jun 25, 2013 11:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If I remember correctly, CC65 is/was a Small C variant that has grown a little more ANSI compliance since.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Tue Jun 25, 2013 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">cc65 docs wrote:</div><div class="quotecontent">It is based on a C compiler that was originally adapted for the Atari 8bit computers by John R. Dunning. The original C compiler is a Small C descendant but has several extensions, and some of the limits of the original Small C compiler are gone</div><br />Honestly, I don't think a new C/Small C compiler for 6502 could realistically be much better than CC65. In theory - maybe, although the question is how much extra speed we are talking about, is it worth huge effort to develop a compiler to gain, say, 5-10%? The same % could be gained easier, just by rewriting some time critical part of code into assembly code.<br /><br />Another thing is that compiled code speed is most often smaller issue than it's size.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jun 25, 2013 2:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is LLVM flexible enough to target 8-bit MCUs? And is 6502 similar enough to an AVR or PIC?<br /><br /><a href="http://stackoverflow.com/questions/7484466/choosing-cpu-architecture-for-llvm-clang" class="postlink">LCC might be easier to target</a>, though LCC is non-free in the same way as cc65 proper.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Jun 25, 2013 3:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Is LLVM flexible enough to target 8-bit MCUs? And is 6502 similar enough to an AVR or PIC?</div>I was looking this up the other day. The answers are effectively &quot;no&quot;, &quot;heck no&quot;, and &quot;sorta&quot;<br /><br />LLVM used to have a PIC16 (14-bit instruction word) target, but it was removed between 2.8 and 2.9.<br />The thread at <!-- m --><a class="postlink" href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-September/043394.html">http://lists.cs.uiuc.edu/pipermail/llvm ... 43394.html</a><!-- m --> provides the quote &quot;An eight-bit, accumulator based, Harvard ISA is the Trifecta of Doom as far as LLVM is concerned, basically.&quot;<br /><br />PIC16 is a little stricter than 6502 (zero or one indexing registers); PIC18 is a little looser (three indexing registers instead of two, one of which can do all sorts of funny indexing modes). But the pointer registers (FSR0,1,2) are even less first class than X and Y are.<br /><br />AVRs have a (comparatively) large number of general purpose registers, so the ISA basically incomparable.<br /><br />It's plausible one might manage an asm-level translation from PIC asm to 6502 asm, but I suspect the results will be inferior to what cc65 currently generates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Tue Jun 25, 2013 6:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shiru and I appear to be on the same page here <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />I don't think there would be any speed benefit over cc65 for a Small C implementation. Small C still retains concepts that have to be virtualized on the 6502; namely parameter stacks and execution frames.<br /><br />Funny enough, HLLs can be compiled into very dense, but very slow programs. See <a href="http://en.wikipedia.org/wiki/Threaded_code" class="postlink">Threaded Code</a>. Small C does not use threaded code proper, but does use subroutines for complex math and switch statement evaluation and can be made to use jsr stubs to implement comparison. This might result in Small C code being slightly smaller than cc65 code, but the same could be accomplished with a little tinkering in cc65.<br /><br />So for now I don't see any reason to try and implement Small C.<br /><br />Now onto the thought of a &quot;C Subset&quot; that might be defined for the platform. Here's my evaluation of the low-level (target) components of C and how well they fit the NES architecture.<br /><br /><strong>Matches Hardware</strong><br />1-byte signed and unsigned math<br />n-byte unsigned math<br />8-bit signed and unsigned comparison<br />Static array dereference within byte range<br />Pointer dereference within byte range (although pointer storage is expensive)<br />Subroutine pointers<br /><br /><strong>Easily Implemented, but Less Efficient</strong><br />Subroutine pointer tables<br />Full pointers (storage still limited or expensive)<br />n-byte signed math<br />n-byte comparison<br />Parameterized subroutines<br /><br /><strong>Bloated</strong><br />Execution Frames / Automatic Storage<br />Parameter stack<br /><br /><br />Yay, now that's out of the way we can talk about the language features. Keeping in mind what target components each feature uses, we can categorize them similarly.<br /><br /><br /><strong>Matches Hardware</strong><br />Structures<br />Native Arrays<br />Native Arrays of Structures (the compiler would interleave this into byte arrays)<br />Complex expressions (without subroutine calls, using graph reduction to avoid a stack)<br />Conditional flow control (if, else, do, while, for)<br />Imperative flow control (break, continue, return)<br />1-byte math<br /><br /><strong>Easily Implemented, but Less Efficient</strong><br />Pointers<br />Parameterized subroutines<br />Subroutine return values<br />Table-base flow control (switch, case, default)<br />n-byte math<br /><br /><strong>Bloated</strong><br />Variable length parameter lists<br />Recursion<br />Automatic storage<br /><br /><br />So if we take only those features present in the first two categories we end up with a language that is fairly easy to implement and should produce code that is similar in size and run-time speed to hand-written (but not necessarily hand-optimized) assembly. However the language would lack some of the expressiveness of C.<br /><br />So then the question becomes, is this worth pursuing? Is the reduction in compiled code size worth giving up cc65 and developing a new compiler? Is the gain in productivity for the &quot;glue code&quot; worth the development invested in the compiler?<br /><br />All I can say is, &quot;maybe&quot;.<br /><br />Any input to the babbling?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Jun 25, 2013 9:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">Honestly, I don't think a new C/Small C compiler for 6502 could realistically be much better than CC65. In theory - maybe, although the question is how much extra speed we are talking about, is it worth huge effort to develop a compiler to gain, say, 5-10%? The same % could be gained easier, just by rewriting some time critical part of code into assembly code.<br /><br />Another thing is that compiled code speed is most often smaller issue than it's size.</div>THIS.<br /><br />As Shiru has pointed out to us on several occasion size is the real issue, not speed.  Yes, we all look at CC65 compiled code and freak about how much slower it will be, but THAT'S NOT THE PROBLEM!  There's already a great solution to that issue, just optimize the code by hand for the few times it actually matters.  We want the HLL not because we can't write assembly or can't conceptualize bank-witching, but because of the time investment involved with maintaining assembly on a large project.  Any HLL is going to have the issue with size ultimately, and even assembly has the same issue. It's just easier to overcome in assembly since you're already so intimate with the hardware.  The way I think of it: I'd rather spend a day writing in a HLL and an extra day optimizing where needed to create a game that runs at 1/2 frame rate. As opposed to spending 5 days writing the entire thing in assembly with full frame rate.<br /><br />Eventually NROM just isn't big enough and the NES's address bus can only handle so much linearly.  The only 'limitless' linear solution is move to the SNES.  So while more efficient/denser compiled code will allow you to fit more code into each KB, you eventually run out of space even if you have the most heavily optimized compressed assembly.  Don't think that the issue isn't that big enough roms don't exist or are too expensive, because they're dirt cheap and plentiful.  You can't even buy ROMs with current new stock technology that comes smaller than 128KB.  But you've got to bankswitch if you want to have access to dirt cheap bits of today's market.  It's only a dime's worth of hardware away, and a compiler that will allow you to reach those banks easily.  <br /><br />Sometimes I wonder if it's complex compiler thread handling is even that necessary depending on one's knowledge of bank switching and lack of desires to conserve rom/bank space.  If given 8/16KB banks I'm pretty sure I can put all my screen drawing routines in a single bank, sprite updates in another, AI, Sound, game state logic, whatever, they all get their own bank if they come close to needing it.  I think most of us can handle a specialized function call or special designators to handle different banks as long as things were able to be structured properly.  My original thought was to develop each bank on it's own and manually piece it together somehow.  But it's really not that easy or development friendly to do all that manually; even if there isn't any need to save bank space and segregate everything that's related to each separate piece of the game engine.  If done cleanly you'd probably have all of these separate pieces in different source files anyways.  It's not hard to conceptualize only being able to call functions in that file or in the fixed 'file'/bank.  WRAM if available, could be divided/banked in a similar fashion I'm sure for allowing a large number of variables and/or scratch RAM.<br /><br />So as I see it we just need to come up with a reasonable structure/framework that allows things to be compiled easily to get things off the ground.  Any HLL would do, CC65 is already there, may as well take advantage of the groundwork it's already laid.  We need to walk before we can run.  We need to start simple and get a HLL compiled and up and running on something like UxROM.  There's always room for improvement from the compiler and/or hardware.  I'll do the compiler work myself if I have to, I just need to put down the hardware first...<br /><br />One of the best features of C IMO is portability of the game to other devices like Shiru did with Zooming Secretary on the iOS.  Personally I'd take any HLL though, the features that qbradq is presenting would be a great advantage assuming the compiler will let me bankswitch even if the bankswitching isn't abstracted away from me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Jun 25, 2013 11:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />if cc65 is too high level, then I'm not sure what everyone is looking for that can't be done with ca65.<br /><br />Perhaps:<br /><!-- m --><a class="postlink" href="https://www.assembla.com/spaces/ca65hl/wiki">https://www.assembla.com/spaces/ca65hl/wiki</a><!-- m --><br /><br />It's still kind of a WIP, but it is fully functional as can be seen here: <!-- m --><a class="postlink" href="http://www.romhacking.net/documents/635/">http://www.romhacking.net/documents/635/</a><!-- m --><br />For loops could be implemented easily. Parameters, I have working in my own way with another library/macpac.<br /><br />Of course this is very limited compared to something that you could call C, but it can (at least for me) make things much easier and faster, and it is almost always going to generate code that is as good as assembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 26, 2013 7:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is a complex subject. First, we should define why exactly a HLL is necessary and is preferable to assembly. Then we have to figure what is the problem with existing solutions.<br /><br />My opinion is that a HLL, is necessary because it speeds up development time very significantly. It also makes code maintenance easier.<br />C is a nice choice because of the portability. What if you don't want the code you wrote to be specific on NES but target other platforms ? Even something &quot;similar&quot; such as the SNES, you'd have to rewrite all the code to take into account the extra instructions and 16-bit registers. With a HLL, it would be trivial, and the code would be optimized for the available instruction set.<br /><br />This is why C is preferable to anything else, even if I am fully aware that there is quite a few problems with the C language. Yes the syntax is ambiguous, anything that uses function pointers is going to be impossible to read or write without consulting the documentation, the ways pointers are declared and used is confusing and error-prone. Casting is often necessary but is ugly. The usage of ++ or -- statements inside an expression are ambigious. The worst 2 &quot;features&quot; of C is using == for equality test, while using a simple = is also correct but will yield in wrong functionality, and the fact that the names &quot;char&quot;, &quot;short&quot;, &quot;int&quot; means nothing to their respective bitsizes and data range that are safe before an overflow happens.<br /><br /><strong>HOWEVER</strong> despite all these problems, C is simple, easy to use, and has become a sort of universal standard among the past 20 years, especially in embedded development. You can develop in C for any platform in the world. Including the NES, thanks to CC65. So what is the problem ?<br /><br />The problem is that, each time I look at code generated by CC65, it makes me an earth attack. And yes I am serious. Of course, I can understand it can not be as optimal as hand optimized assembly code, BUT I can't refrain to feel that CC65 is terrible when it comes to generating &quot;efficient&quot; code.<br /><br />But why would that be a problem ?<br /><br />The answer is that, in order to get a game running, it is of course not necessary to get the most efficient 6502 code possible for a given program, but it is desirable to get somewhat close. If the generated code is 10x what it &quot;should&quot; be, you'll have to use a huge ROM and a complex mapper for a game that would fit in a NROM cartridge, and the game would run at reduced frame rate for no reason.<br /><br />I made some demo that simply puts some text in a dialogue box. At some point I have a routine that shifts the lines up a row. This very rootine took 3 frames to complete ! When I could do something in assembly that would probably take a few scan-lines.<br /><br />CC65 is inefficient for multiple reasons, including :<br />1) The usage of a software stack for everything (variables, arguments, etc, etc...)<br />2) The usage of a AX pseudo-register. There is already few registers, why waste them this way in order to get even fewer ?<br />3) It never ever uses indexed adressing. Y is reserved for stack and X for the high bits of AX. Any array access will take about 15 instructions instead of 1, using multiple adding and compares before a final indirect adressing.<br /><br />If a compiler for the 6502 should be (re)written, it should fix those 3 points, and probably a few others. Then it'd surpass CC65 very easily. This could also be an unofficial modified version of CC65, because it's open source.<br /><br />I am just brainstorming, but I want to proof a point that is that CC65 is terribly inefficient, and that a HLL is necessary, and that C despite it's problem, is the best candidate for HLL.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Jun 26, 2013 8:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />cc65 maybe 'sucks', although I'd prefer to use terms like 'not very effective', 'not perfect' etc, but it is certainly better than some other C compilers for microcomputers around. Just try tcc816 in a large project to feel the difference. cc65 is already here, it works, it is proven to be good enough to make a NES game with scrolling that runs at full frame rate, even without rewriting parts of the game code into assembly. Sure, things could be better, but making a C compiler is a huge task, especially one that produces better code and is as reliable. Even having a competent and motivated person to handle the task, it may take many years, like 10. So in reality we have a very simple choice: use what we have right now to make things we want to do right now, or dream about better stuff not actually doing anything for indefinite period of time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 26, 2013 8:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I edited my post above to remove all occurrence of &quot;suck&quot;.<br /><br />And yes you pretty much sums it up, but I'm still unsatisfied with the current situation.<br /><br />I don't know if it would take 10 years. First of all there is no need to write a complete compiler, only the backend has to be made. No boring partenthesis matching etc, etc...<br />Then, Denis Ritchie says in his book it can be done in 1-2 months. Of course this is for a full time employee (or multiple employees ?) and probably for a cheap non-optimized compiler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Wed Jun 26, 2013 8:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There are many things CC65 does rather poorly. Nested arrays [][][], for example seem to get exponentially slower with each []. Yes its software stack is cumbersome, etc.<br /><br />I still find it really useful. I spend some amount of time coding around its flaws, profiling, looking at disassembly etc. to figure out how to make it do the same thing in a more efficient way, but the time it saves vs. doing that from scratch in assembly is massive, so it's still worth it.<br /><br />I wish it was a more efficient compiler, but I don't expect a better one to appear any time soon. If you want to try to write one yourself (or even retarget an existing one), I wish you good luck.<br /><br />As for the current state of things CC65 is pretty good vs. the alternatives. It does sometimes require me to work around its implementation, but the productivity gain is still worth it. For less advanced users who don't have the ability to address these issues with it, there's still a lot of good things that can be built with it (there are lots of gameplay types that don't require 60Hz). Slow code is still a lot better than no code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 26, 2013 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">anything that uses function pointers is going to be impossible to read or write without consulting the documentation</div><br />There's a rule of thumb.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// If the function's prototype looks like this:<br />int func(int num_words, const char *const *words);<br /><br />// Then the typedef for a pointer to such a function looks like this:<br />typedef int (*func_type)(int num_words, const char *const *words);</div><br />It isn't any more confusing than the 6502's habit of needing to subtract 1 from each entry of a table of function pointers called with RTS.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The usage of ++ or -- statements inside an expression are ambigious.</div><br />In what way? Don't use more than one ++ or -- on the same variable, and don't use it on global variables in the same expression as a function call.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">The worst 2 &quot;features&quot; of C is using == for equality test, while using a simple = is also correct but will yield in wrong functionality</div><br />It's possible for compilers to detect a mistaken = for equality test when parsing the expression for a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">while</tt> loop's condition. C doesn't require compilers to emit a diagnostic when the top level of this expression is operator =, but many compilers do so. For example, the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">-Wall</tt> flag in GCC enables this.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">the names &quot;char&quot;, &quot;short&quot;, &quot;int&quot; means nothing to their respective bitsizes</div><br />C defines <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">char</tt> as the smallest addressable unit that is at least 8 bits, which in the ISAs used for video games (x86, PowerPC, and ARM) is in fact 8 bits. C99 introduced the defined data ranges of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">int32_t</tt> and friends over a decade ago.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Jun 26, 2013 9:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">anything that uses function pointers is going to be impossible to read or write without consulting the documentation</div><br />There's a rule of thumb.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">// If the function's prototype looks like this:<br />int func(int num_words, const char *const *words);<br /><br />// Then the typedef for a pointer to such a function looks like this:<br />typedef int (*func_type)(int num_words, const char *const *words);</div><br /></div><br />It becomes even easier to handle/read if you use typedef twice:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef int myFunctionType(int num_words, const char *const *words);<br />typedef myFunctionType *myFunctionPointerType;<br /></div><br />Actually, I just prefer typedefing the function itself, and then using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">myFunctionType *</tt> for pointers to it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Jun 26, 2013 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Small C for NES: A Curious Journey</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There are many things CC65 does rather poorly. Nested arrays [][][], for example seem to get exponentially slower with each [].</div><br />Interesting. That's probably what was so slow in my text routine, since it used lots of bidimentional arrays. It's a matter of coding style, I use them all the time personally. (well all the time where this makes sense I mean, obviously, I don't use them just for the sake of using them).<br /><br />Some people prefer to mess with pointers directly, but I really prefer using arrays and multi-dimentional arrays. It can be easily reduced to single dimentional array at compilation time, where strength reduction optimisation can create efficient code.<br /><br />Exemple :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for (i = 0; i &lt; 16; ++i)<br />&nbsp; &nbsp;for (j = 0; j &lt; 16; ++j)<br />&nbsp; &nbsp;&nbsp; &nbsp;array&#91;i&#93;&#91;j&#93; = something;<br /></div><br />becomes, after array dimention reduction<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for (i = 0; i &lt; 16; ++i)<br />&nbsp; &nbsp;for (j = 0; j &lt; 16; ++j)<br />&nbsp; &nbsp;&nbsp; &nbsp;array&#91;i*16 + j&#93; = something;</div><br /><br />which in turn becomes after strength reduction<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for (i = 0; i &lt; 256; i+=16)<br />&nbsp; &nbsp;for (j = 0; j &lt; 16; ++j)<br />&nbsp; &nbsp;&nbsp; &nbsp;array&#91;i + j&#93; = something;</div><br />Which have chances to compile into something <em>somewhat</em> efficient.<br /><br /><br />PS :<br />Also<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I wish it was a more efficient compiler, but I don't expect a better one to appear any time soon. If you want to try to write one yourself (or even retarget an existing one), I wish you good luck.</div><br />Thank you. I've felt over the years that, if a tool that you need is insufficient I'd rather write my own. That's how I came up with CompressTools for instance, at first I was like &quot;I wish something like this existed&quot;, and then I made it exist. It was a big project but it was totally worth it. I'll probably update it more in the future to make it better, but at least the unique concept of assembler/compresser is here.<br /><br />Doing a C compiler is however a bigger task and I don't really feel like I am currently competent enough to do one unfortunately. I'd need someone more experienced to coach me in the process. If I can ever find that someone then an efficient 6502 compiler may become true. Otherwise...<br /><br />I have some other ideas like a multiplatform MML compiler for music. Once all this will be done I will <em>eventually</em> be able to make games  <img src="./images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" />  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />PPS :<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">there are lots of gameplay types that don't require 60Hz</div><br />Yes, but the ROM usage problem remains. Code generated by CC65 will take 10 times the amount of ROM that assembly written code would take. This don't apply to data thanks god, but <em>Portopia</em>, a detective game wich does not require 60Hz gameplay and that is on a NROM cartridge, would probably need a 256kb PRG-ROM if generated with CC65, if you see what I mean.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>