<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Map rendering for side scroller, coding question</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Map rendering for side scroller, coding question</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5213">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=5213</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Wed May 27, 2009 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Of course it's not possible to have clean scrolling in both directions, as we've discussed countless times.</div><br /><br />I bet a few people might roll their eyes as they read this, but I wanted to mention that 4-screen mode shouldn't be ignored.  Especially if using CHR-RAM already, most of the hardware is already there.  But I'd still say it's only worth it if the game (opposed to just to hiding glitches) is helped greatly by having 4 nametables (it's best kept simplified).<br /><br /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">What about fully unrolled code in RAM? I think MC Kids uses that to do scrolling updates. That game also happens to have the 8K WRAM chip, but still...</div><br /><br />I was working on a game a while back that just couldn't work without it.  It wasn't for the scrolling though, it was needed for all the sprite animations.  Rotations and such.  It was basically designed around having the highest maximum VRAM throughput.<br /><br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I guess completely unrolled loops are useless when partially unrolled loops can get to about 95% of their performance and waste ridiculously less ressources. </div>
<br />
<br />You're right about the resources, but LDA #immediate + write is only 6 cycles.  It can copy 256 bytes to VRAM like it's nothing.  Even sprite-DMA is only 3 times faster than this.  It's overkill for scrolling, of course.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 4:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Yet I fail to see exactly how you "trigger" updates</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda CameraX<br />&nbsp; &nbsp;eor OldCameraX<br />&nbsp; &nbsp;and #%00100000</div><br />If the result is not 0, you have to draw a new column. Check the direction of the last movement to tell if the movement was to the left or to the right, and based on that decode the appropriate column from the map and calculate the appropriate destination in VRAM.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">I bet a few people might roll their eyes as they read this, but I wanted to mention that 4-screen mode shouldn't be ignored.</div><br />I think this is a pretty good solution, and I usually mention that the problem mainly exists because of the lack of 4-screen "mirroring", but the sentences come out too long if I say it all the time. But yeah, what I meant was "it's impossible to have glitchless scrolling in both directions without masking tricks or extra name table memory (4-screen)". Since 4-screen is not so common (and modifying a cart to use is not so trivial), I usually favor the masking alternative.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You're right about the resources, but LDA #immediate + write is only 6 cycles.  It can copy 256 bytes to VRAM like it's nothing.</div>
<br />But you also have to consider that buffering the data that format would be pretty time-consuming. You know, using 1 byte out of every 5 should be pretty hard to index efficiently, so you'll spend much of your game logic time shuffling bytes around.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed May 27, 2009 5:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I agree with tokumaru about copying all of the code to RAM. I thought about it when making my extended Vblank engine, but found that it would be too hard to deal with when trying to update the data in each lda #xx statement. Instead of doing that, I actually stuck with doing this:
<br />
<br />lda Array
<br />sta $2007
<br />lda Array+1
<br />sta $2007
<br />lda Array+2
<br />sta $2007
<br />....
<br />
<br />With no indexing to save time. I also never check if I'm crossing a name table boundary because I always update the entire column/row of tiles on the name table. It's just up to me to arrange the data in each array so that it is displayed correctly. Though one might argue this takes more time and adds as much complexity as you'd get just copying code to RAM. I'd have to think about that some more though.
<br />
<br />I usually stick with vertical mirroring. Though there's no clipping option, it's more noticeable with glitches horizontally as our eyes are side by side rather than in our skulls vertically, and since that's the case we notice things like horizontal symmetry more so than vertical symmetry.
<br />
<br />I actually was lazy with my side-scrolling scrolling engine and I don't check for updates. Instead I just tell it to copy the column of tiles that should be displayed at ScreenX + 256 or ScreenX - 1 depending on which direction the screen is scrolled in. It does it every frame. It's okay though as it doesn't take very long for the map decoding. In a bigger game with multi-directional scrolling, I would definitely need to check for updates.
<br />
<br />Oh, and I finally checked out MC Kids. I also find it pretty mediocre, and would much rather like to hear what is done in SMB3, or Batman ROTJ, or other more impressive games. I didn't find anything impressive about that game, and actually found the controls really annoying. I would not look to it for advice on anything (maybe I'd check out what it does for diagonal collision, but I think I already know how to do that).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed May 27, 2009 5:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Instead of doing that, I actually stuck with doing this:<br /><br />lda Array<br />sta $2007<br />lda Array+1<br />sta $2007<br />lda Array+2<br />sta $2007<br />....<br /><br />With no indexing to save time.</div><br />I use similar code, but it uses indexing so that it's possible to select what portion of the buffer to read, and also to copy variable amounts of data by entering at different points of the copying code. About speed, it doesn't matter if you're using indexes if the RAM in question is not zero page. For regular RAM, "LDA $XXXX" and "LDA $XXXX, X" take the same time, 4 cycles.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Oh, and I finally checked out MC Kids. I also find it pretty mediocre</div>
<br />Read the <a href="http://www.greggman.com/mckids/programming_mc_kids.htm" class="postlink">article</a> and you'll see that there is nothing special about it. In the "Game Levels" section they explain how needed the 8KB of RAM were so that they could have modifiable levels, but seeing as how they ended up storing levels uncompressed in that RAM, the levels couldn't be very large anyway, meaning that there wouldn't be a lot to modify (to the point where the modifiable stuff could be represented with objects, IMO). Most of the time they just picked the straightforward solutions, probably because they were easier to implement. The way they handle terrain collisions is pretty bad too, they even left a bug that results from the way they handle characters going up a hill.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Wed May 27, 2009 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Quite a burst of messages in such a short amount of time!  A lot of interesting comments too.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I hope my ideas give you some good ones.</div>
<br />
<br />Of course.  For now I have a basic idea of what you're doing. I still need to re-read the code again to understand it well.
<br />
<br />From some of the comments, it seems sometime people have some "animosity" when people bring their concept/idea.  From my point of view, any concept presented is invaluable information, without regarding how big it is, especially when you're learning a system. It doesn't mean that you have to use that concept/code exactly, but it can help you think in way you may have not done by yourself.
<br />
<br />The first game I want to do is to re-make an old dos game that I started 15 years ago (I want some closure).  It only scroll in one direction so it should be easier to develop for my first game.  The challenge will be to scale down the color/sprite size at first.
<br />
<br />The other ones will requires scrolling in both direction and already started to write down ideas.  By the time I finish the first one is should be easier to implement scrolling in both direction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed May 27, 2009 7:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I use similar code, but it uses indexing so that it's possible to select what portion of the buffer to read, and also to copy variable amounts of data by entering at different points of the copying code. About speed, it doesn't matter if you're using indexes if the RAM in question is not zero page. For regular RAM, "LDA $XXXX" and "LDA $XXXX, X" take the same time, 4 cycles.</div>
<br />
<br />I use indexing similarly for a peice of code which copies CHR data from PRG ROM to CHR RAM:
<br />
<br />lda $8000,x
<br />sta $2007
<br />lda $8001,x
<br />sta $2007
<br />lda $8002,x
<br />sta $2007
<br />...
<br />lda $800E,x
<br />sta $2007
<br />lda $800F,x
<br />sta $2007
<br />
<br />And you just load X with a multiple of $10 to load a tile from $8000-$80FF. I have that peice of code for $8000, $8100, $8200... all the way up to $AF00. It makes tile copying really fast.
<br />
<br />But still, checking for name table boundaries SUCKS. I remember coding a multi-directional scroller as being one of the worst programming experiences of my life (that was primarily because of the attribute table, though). However, I can't say I've had that many programming experiences!
<br />
<br />Leaving in bugs is pretty unacceptable, depending on the seriousness of the bug. But I thought horizontal movement in the game was really annoying more than anything. It made me feel pretty okay about the physics I just programmed for my game <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />. I'll have to read more of the article to fully appreciate the game's mediocrity.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu May 28, 2009 12:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tokumaru, after reviewing the code example, I have a few questions.
<br />
<br />First, the tiles variables. Lets take tile01 as an example. The first number represent which row of the meta-metatile. The second one is the column. Is it correct?
<br />
<br />For the way of decoding, I'm starting to understand it. The only thing is that is seems that tile0 of all metatile are located one after another.  I can see why, since it seems to make it easier to process. In my case, tile0/1/2/3 are sequential. I will have to see how it the issue with this approach.
<br />
<br />Once decoded in memory, I see what you want to do but this part:
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway, after the buffers are ready, you can write them to VRAM with something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;ldx FirsrTile<br />-Update:<br />&nbsp; &nbsp;lda Tile00, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile10, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile20, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile30, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;cpx #$07<br />&nbsp; &nbsp;bne -Update</div><br /><br /><br />Of course you can unroll that, arrange the buffer backwards so that you don't need a "cpx" instruction, whatever you want in order to optimize it. Anyway, "FirstTile" would be set beforehand to 0, 7, 14 or 21, depending on which of the 4 columns you want to update.<br /></div><br /><br />You say that you can change the X so to know which column to access. I don't think it's possible in this current example.  X only represent which meta-metatile you want to access, 7 possibles only. If you want to access the second row, you would have to change tiles00 to tiles01, tiles10, to tiles11 etc. <br /><br />One way I tough that I could do it is by changing a little bit the variables order and using both indexes. Maybe it's not a good approach but trying out algorithm is a good way to improve my knowlege of the 6502 ASM. Here's how I would do.<br /><br />First, I would change the variable order this way:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Column 0<br />Tile00 .dsb 7<br />Tile10 .dsb 7<br />Tile20 .dsb 7<br />Tile30 .dsb 7<br /><br />; Column 1<br />Tile01 .dsb 7<br />Tile11 .dsb 7<br />Tile21 .dsb 7<br />Tile31 .dsb 7<br /><br />; Column 2<br />Tile02 .dsb 7<br />Tile12 .dsb 7<br />Tile22 .dsb 7<br />Tile32 .dsb 7<br /><br />; Column 3<br />Tile03 .dsb 7<br />Tile13 .dsb 7<br />Tile23 .dsb 7<br />Tile33 .dsb 7<br /></div><br /><br />There is 28 bytes per column.  In the X register, I need to put the column I want to access. It can either be 0, 28, 56 , 84. I could put them in a LUT maybe this way:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ColumnIndex:<br />.byte 0, 28, 56, 84<br /><br /></div><br /><br />So the code becomes<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; I want the second column<br /><br />&nbsp; &nbsp;lda ColumnIndex, x&nbsp; &nbsp; &nbsp;;&nbsp; Get the index <br />&nbsp; &nbsp;tax<br /><br />&nbsp; &nbsp;ldy #$0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; My counter for meta-metatile to show<br /><br />-Update:<br />&nbsp; &nbsp;lda Tile00, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile10, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile20, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile30, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;cpy #$07<br />&nbsp; &nbsp;bne -Update</div>
<br />
<br />This way I can access the column based on index.  Is not perfect thought. For example, I don't like that the name used to access the data based on the index is the first column name.  I'm trying to find a cleaner way to do it. I guess the more I will practice, the more I will be able to think in 6502. This is my current problem at the moment. I'm just used to higher level language so the solution doesn't come easily.
<br />
<br />Does the modification I made make sense?  I didn't test it by code so this is all theoretical.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Thu May 28, 2009 7:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Read the <a href="http://www.greggman.com/mckids/programming_mc_kids.htm" class="postlink">article</a> </div>
<br />
<br /> Cool link. Love reading articles like that from past developers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu May 28, 2009 9:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">irst, the tiles variables. Lets take tile01 as an example. The first number represent which row of the meta-metatile. The second one is the column. Is it correct?</div><br />Yeah. And I've named the RAM buffers TileXX but the ROM lables TileX, I know that sucks, but it was just to get the idea across... =)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For the way of decoding, I'm starting to understand it. The only thing is that is seems that tile0 of all metatile are located one after another.  I can see why, since it seems to make it easier to process.</div><br />Yeah, that's what I was calling interleaving. It makes accessing data easier, because you can read a whole block using the same index. i store most of my data like this. I believe this is what tepples calls "structure of arrays", as opposed to "arrays of structures". The 6502 really works best with the former.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You say that you can change the X so to know which column to access. I don't think it's possible in this current example.</div><br />My mistake. It should work as I described, what I got wrong was that "cpx #$07", which will obviously cause problems if you load it with anything besides 0. You used Y to count instead, which fixes the problem.<br /><br />I assumed the tiles would be numbered like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00 01 02 03<br />10 11 12 13<br />20 21 22 23<br />30 31 32 33</div><br /><br />If X is initially 7, the first address read will be Tile00 + 7, which is the same as Tile01. If it was 17, the first address would be Tile00 + 14 which is the same as Tile02. I was just thinking of it as row-based, while you were doing it column-based, but the idea is exactly the same.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For example, I don't like that the name used to access the data based on the index is the first column name.  I'm trying to find a cleaner way to do it.</div><br />Well, it's one of the prices you pay for using optimized code, it usually isn't as readable as the unoptimized version. You could always document it well, saying that the buffer must be ordered that way.<br /><br />If what makes you uncomfortable is accessing an array by using another array's name (something that would most likely be an error in a high level language), you could always define a single 112-byte array and use constants and formulas to index it properly. So instead of:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Column 0<br />Tile00 .dsb 7<br />Tile10 .dsb 7<br />Tile20 .dsb 7<br />Tile30 .dsb 7<br /><br />; Column 1<br />Tile01 .dsb 7<br />Tile11 .dsb 7<br />Tile21 .dsb 7<br />Tile31 .dsb 7<br /><br />; Column 2<br />Tile02 .dsb 7<br />Tile12 .dsb 7<br />Tile22 .dsb 7<br />Tile32 .dsb 7<br /><br />; Column 3<br />Tile03 .dsb 7<br />Tile13 .dsb 7<br />Tile23 .dsb 7<br />Tile33 .dsb 7</div><br />You'd have:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BLOCK = 1<br />ROW = 7<br />COLUMN = 7 * 4<br /><br />TileBuffer .dsb 112</div><br />And to access tile (3, 3) of meta-metatile 2 you'd use address TileBuffer + BLOCK * 2 + ROW * 3 + COLUMN * 3. If you use an index register to index the blocks just leave the "BLOCK *" part out.<br /><br />It solves your problem of going into the arrays using the wrong names, but it's not very pretty. Of course you could pre-calculate the 16 constants used to index each tile, and although that would be very little different than having multiple tables, you'd still have the illusion of using a single table. The assembly output will be the same, so there will be no performance issues. I doubt you could maintain the performance and the simplicity of the code if you decided to organize the data in some other way though.<br /><br />Anyway, there will be some implications in assembly that don't exist in high-level languages that we must learn to deal with. Sometimes we will need variables and arrays to be defined in a certain order because of the way we access them. Sometimes we will have to place code at specific locations because of bankswitching, page-crossing penalties and things like that. Sometimes you will have to sacrifice readability if you're aiming for performance. None of those things are "clean", but it should be OK if you document well whatever may be unclear and you'll hardly have problems in the future.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does the modification I made make sense?  I didn't test it by code so this is all theoretical.</div>
<br />Yeah, you got the idea perfectly. I think we just had columns and rows switched, and that's why our code is different (and also my "cpx" mistake).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Thu May 28, 2009 10:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A little bit after you posted, I finished to make it work.  I can now print my meta-metatile on the screen.  It was a pain at first since I didn't do any assembly for a while (you lose it quite fast).  I had 1 bug which I will explain later. On the bright side, it made me use the debugger a lot and learn many things at the same time.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, that's what I was calling interleaving. It makes accessing data easier, because you can read a whole block using the same index. </div><br /><br />More than easier actually. It reduce the code a lot. Because I was not using any interleaving, it doubled the code with all the extra asl/asl/tax just to find the right position of every metatile.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">i store most of my data like this. I believe this is what tepples calls "structure of arrays", as opposed to "arrays of structures". The 6502 really works best with the former.</div>
<br />
<br />I never thought about that way of storing data before, this is quite new to me.  If you would have to edit the metatile by hand... That would make it (maybe) a little bit harder to update.  With an editor, you don't have to worry about it.  After seeing the benefit of it, tomorrow I will add a quick hack in my editor export code to interleave the data.
<br />
<br />For the writing the column, I'm using column based write. I first set the PPU address then write the tile by 32 increment.  Because of that, I made a little mistake in the code I wrote by hand above.  The code for writing a  column is wrong since it writes 4 columns at the same times. In my case, I buffer 4 columns and write them one a time, when required.  The code should have been instead:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;<br />&nbsp; &nbsp;ldx #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; I want the second column<br /><br />&nbsp; &nbsp;lda ColumnIndex, x&nbsp; &nbsp; &nbsp;;&nbsp; Get the index <br />&nbsp; &nbsp;tax<br /><br />&nbsp; &nbsp;ldy #$0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; My counter for meta-metatile to show<br /><br />-Update:<br />&nbsp; &nbsp;lda Tile00, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile01, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile02, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;lda Tile03, x<br />&nbsp; &nbsp;sta $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;iny<br /><br />&nbsp; &nbsp;cpy #$07<br />&nbsp; &nbsp;bne -Update<br /></div>
<br />
<br />For now I don't mind anymore about the name because like you mentioned, not much you can do with optimized code. I will live with it.  I'm used to work with 1 dimension array for my map data in higher level language but now the way to define those interleaved tiles for the buffer, I'm starting to like it after all.
<br />
<br />Now here it's 2h in the morning and I will have quite a lot of fun to wake up tomorrow for work!...  I'm trying to think if there a way to save my map data to make it easier to access it by column but I'm too sleepy for thinking clearly.  My map data is column based. This mean the first 7 bytes represent the 1 column of meta-metatile, the next 7 ones the next column etc.  I don't know if I can optimize it in or that is already fine that way.  I guess I should think about it tomorrow instead.
<br />
<br />Thanks for the comments, that made me learn a lot of new things!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CartCollector</b> [ Sat Jun 06, 2009 10:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Of course it's not possible to have clean scrolling in both directions, as we've discussed countless times.</div>I bet a few people might roll their eyes as they read this, but I wanted to mention that 4-screen mode shouldn't be ignored. Especially if using CHR-RAM already, most of the hardware is already there. But I'd still say it's only worth it if the game (opposed to just to hiding glitches) is helped greatly by having 4 nametables (it's best kept simplified). </div>
<br />
<br />
<br />OT but:
<br />Actually it is possible to have clean 4-way scrolling with only the NES's built in 2k name table and attribute table RAM. Look at Super C and Jurrasic Park. If you use vertical mirroring and disable PPU rendering or set all CHR-ROM to a bank of blank tiles for at least the first and last 8 scanlines (the latter method is used by Jurassic Park), and you disable the rendering of the first 8 scanlines, then you'll get clean four-way scrolling for both the background and sprites. Now you could argue, especially if the game you're writing is PAL, that effectively reducing the resolution to 248 x 224 is limiting, but it's better than getting crap on the sides of the screen all the time. Another caveat is that these methods are hard to do without an MMC3 or better, but if you're writing a game that uses four-way scrolling, chances are you're already using a mapper that meets that requirement.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jun 06, 2009 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Without an advanced it may be hard to hide the bottom 8 scanlines, but definitely not the top 8 scanlines since those are right after VBlank. As a plus, you can have sprites scrolling smoothly off the screen if you do that (however you'll need to blank 16 lines if you use 8x16 sprites).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jun 06, 2009 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, we know it's possible, it's just not a trivial thing to do. Very few commercial games put actual effort into hiding scrolling glitches. The most notorious ones, IMO, are <em>Jurassic Park</em>, which you mentioned, <em>Alfred Chicken</em> and <em>Felix the Cat</em>. Those last 2 use the very extreme method of making the leftmost 8-pixel column by hardware and masking the rightmost 8-pixel column with lots of 8x16 sprites (!) while using horizontal mirroring.
<br />
<br />Some games that mask scanlines at the bottom of the screen instead should also be mentioned. Most use an IRQ for this, and that's technically uninteresting for homebrewers that aren't using sophisticated mappers. One very interesting game that manages to do this with a sprite 0 hit is <em>Big Nose Freaks Out</em>. I believe other games by Code Masters did as well, such as <em>Micro Machines</em>. Relying on a sprite hit at the bottom of the screen is a pretty risky thing to do. You must be pretty confident about your timing, because if frame calculations do not finish in time, the resulting glitches will look very unpleasant.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sun Jun 07, 2009 12:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, if you have a scanline or cycle based counter, you could wait until scanline 232 (8 pixels from the bottom) and turn off the screen until 8 scanlines outside of the next frame's Vblank to turn the screen back on. I do something similar for my polygonal movie drawing, except it's way more extreme (40 scanlines from the bottom, wrapping around 40 scanlines outside of the next frame's Vblank) and it can be done with sprite 0 hit. It requires very precise timing though.
<br />
<br />The thing about 8x16 sprites actually isn't a bad solution if using horizontal mirroring... That would take 15 sprites though, and I guess that's a lot. However if you have not a lot of sprites on the screen at once, I guess it's a pretty good solution.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jun 07, 2009 4:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Relying on a sprite hit at the bottom of the screen is a pretty risky thing to do. You must be pretty confident about your timing, because if frame calculations do not finish in time, the resulting glitches will look very unpleasant.</div>
<br />The same is true of any game for Super NES or Game Boy Advance that uses mode 7: hiccups while generating the HDMA tables can cause all sorts of yucky glitches.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>