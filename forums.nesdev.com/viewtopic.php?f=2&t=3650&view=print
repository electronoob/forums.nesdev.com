<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Framerate change to reduce/avoid total slowdown</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Framerate change to reduce/avoid total slowdown</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3650">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3650</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Tue Oct 23, 2007 4:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Framerate change to reduce/avoid total slowdown</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What would be a good method to incorporate framerate changes for "too long" frames, say, change the framerate from 60Hz to 30Hz when a frame of gameplay needs two frames?
<br />
<br />Would it be as simple as always running NMIs at 60Hz that update a frame counter, then during the second real frame of a gameplay frame, finish everything then don't do anything else until the next frame - like frameskip?
<br />
<br />Maybe one could run code in NMIs that will never use up a lot of time.  Then have the more potentially intense routines (enemies, projectiles, etc.) be executed in the reset code, which can alter in framerate when there's not enough time.  Would that be not too difficult to do?
<br />
<br />For some reason, I have a feeling that these are stupid questions...are they?  I'm also wondering - do any other games use this method to avoid slowdown and alter framerate instead?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 23, 2007 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Framerate change to reduce/avoid total slowdown</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">strangenesfreak wrote:</div><div class="quotecontent">Maybe one could run code in NMIs that will never use up a lot of time.  Then have the more potentially intense routines (enemies, projectiles, etc.) be executed in the reset code, which can alter in framerate when there's not enough time.  Would that be not too difficult to do?</div>
<br />That's a possibility. Some games run everything in the main thread (which I think you're calling "reset"), only using NMI to signal to the main thread that a vertical blank has occurred.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Oct 23, 2007 5:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Most games will double a displayed frame if processing is taking too long. I'm assuming that after they finish processing, they poll a frame counter until it changes, then trigger a screen update. They have to do this since graphics updates are usually either done for a particular 1/60 second, or not done; they can't be delayed or half-done. Some games just give up and run in 30 FPS all the time, and suffer for it. One that comes to mind (with no excuse for running half rate) is Rambo.
<br />
<br />An interesting approach would be to dynamically adjust movement of some objects on screen, moving them smoothly if enough processor time is available, otherwise every other frame. I'm pretty sure Solomon's Key does this on rooms that have lots of enemies (without making player movement less-smooth). I posted a <a href="http://nesdev.com/bbs/viewtopic.php?t=1292" class="postlink">multi-threading</a> demo a while back, which could be a basis for something like this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Oct 23, 2007 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">They have to do this since graphics updates are usually either done for a particular 1/60 second, or not done; they can't be delayed or half-done.</div><br />Graphics updates can be delayed. For example, some games continuously update tiles in the background, such as gun turrets opening and closing in <em>Contra</em>. These games might delay the tile animation on frames when the transfer buffer is full of scroll information. A game with CHR RAM that continuously updates the sprite page might only update one sprite's cel per frame. Or a game could update backgrounds in even fields and sprites in odd fields; plenty of Game Boy games such as <em>Wario Land: Super Mario Land 3</em> appear to do this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Some games just give up and run in 30 FPS all the time, and suffer for it. One that comes to mind (with no excuse for running half rate) is Rambo.</div>
<br />Movie license games have an excuse: the source material ran at 24 fps.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kevtris</b> [ Wed Oct 24, 2007 3:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">blargg wrote:</div><div class="quotecontent">They have to do this since graphics updates are usually either done for a particular 1/60 second, or not done; they can't be delayed or half-done.</div><br />Graphics updates can be delayed. For example, some games continuously update tiles in the background, such as gun turrets opening and closing in <em>Contra</em>. These games might delay the tile animation on frames when the transfer buffer is full of scroll information. A game with CHR RAM that continuously updates the sprite page might only update one sprite's cel per frame. Or a game could update backgrounds in even fields and sprites in odd fields; plenty of Game Boy games such as <em>Wario Land: Super Mario Land 3</em> appear to do this.<br /><br /></div>
<br />
<br />This works OK on the gameboy since the LCD is relatively slow, but on a CRT this looks terrible when the screen scrolls.  The sprites appear to "float".  For a good example of that, see most games on the Action-52.
<br />
<br />
<br />* * *
<br />
<br />To effect one way of auto-frame skipping would be to put your game code in the NMI, and then turn NMI's off thru the PPU when you enter the NMI, and then turn it back on again before leaving.  This would be "automatic".  If the code didn't finish in time, it will slip a screen until the NMI comes around again.  I think SMB might do this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 24, 2007 5:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kevtris wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Or a game could update backgrounds in even fields and sprites in odd fields; plenty of Game Boy games such as <em>Wario Land: Super Mario Land 3</em> appear to do this.</div><br /><br />This works OK on the gameboy since the LCD is relatively slow, but on a CRT this looks terrible when the screen scrolls.  The sprites appear to "float".  For a good example of that, see most games on the Action-52.</div><br />And to solve that, update the scroll when you update the sprites; just don't update the tiles.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To effect one way of auto-frame skipping would be to put your game code in the NMI, and then turn NMI's off thru the PPU when you enter the NMI, and then turn it back on again before leaving.  This would be "automatic".  If the code didn't finish in time, it will slip a screen until the NMI comes around again.</div><br />Code doing this would have to acknowledge pending NMI by reading PPUSTATUS ($2002) before it RTIs back to the main thread. Otherwise, if it takes between 262 and 282 lines to finish (i.e. within the next vblank), PPU updates definitely won't have time.<br /><br />But just like in Perl, <a href="http://en.wikipedia.org/wiki/There_is_more_than_one_way_to_do_it" class="postlink">TIMTOWDI</a>. If you're running everything in the main thread (as my engines do and as I seem to recall Final Fantasy doing), you can have NMI update a variable called "retraces" and do a loop like this to catch the start of a vblank:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda retraces<br />waitNMI:<br />&nbsp; cmp retraces<br />&nbsp; beq waitNMI<br />&nbsp; ; update PPU now</div><br /><strong>EDIT:</strong> corrected<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I think SMB might do this.</div><br />You're right. After init, SMB1's main thread enters a loop like the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp; jmp loop-</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Oct 24, 2007 9:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Most Konami games (probably all of them in fact) does everthing in the NMI routine. All 3 Final Fantasy games does everything in the Main thread and the NMI does nothing but return. I presonally find both extremes ways very unconfortable to programm (I've tried them both, in the order specified above), and doing a bit of work both in the NMI and the main thread is definitely the good way to do things I guess.
<br />
<br />Multithreading on the NES seems interesting, but in fact any game loop that consist of a bunch of repeated calls could be considered multithreding (as long as the call themselves are unconditional).
<br />
<br />When it comes to avoid slowdown, I'd say make optimised code to avoid it, and make sure your code can handle slowdowns without crashing anyways. You could always skip some enemies updates while not skipping graphics, muisc and players, why not ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Oct 24, 2007 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">When it comes to avoid slowdown, I'd say make optimised code to avoid it, and make sure your code can handle slowdowns without crashing anyways. You could always skip some enemies updates while not skipping graphics, muisc and players, why not ?</div>
<br />Because you have to update the scroll and all 64 sprites during blanking, taking 23 percent of NTSC vblank time, or none at all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Oct 24, 2007 11:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Many games DON'T update the scroll and sprites each frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Oct 24, 2007 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't HAVE to do it, as the sprites will remain the same one frame to another as long as the screen is turned on so that the DRAM won't fade, and the scrolling won't budge if $2006 is not acceded during VBlank. However, if you want smooth animation on screen, you have update at least sprites and scrolling each frame. If the game slows down and you stop to update them, the screen won't mess up but the game will effectively slow down (no surprise).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strangenesfreak</b> [ Wed Oct 24, 2007 2:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was thinking more of this, sorry if the comments are a bit too long:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">nmi:<br /><br />&nbsp; inc nmi_framecounter&nbsp; ;increase frame counter for nmi's routines<br />&nbsp; <br />&nbsp; lda main_done&nbsp; ;check if the main thread is done<br />&nbsp; beq + ;if not set, the main_thread is not done yet<br />&nbsp; <br />&nbsp; lda nmi_framecounter<br />&nbsp; sta main_framecounter ;skip frames for long main-thread &quot;frames&quot; when the main thread is ready for a new frame<br />&nbsp; lda #1<br />&nbsp; sta nmi_occured ;main thread can begin its new frame<br />&nbsp; lda #0<br />&nbsp; sta main_done<br />&nbsp; <br />+ lda #whatever&nbsp; ;sets NMI on, NMIs will always occur<br />&nbsp; sta ppuctrl<br />&nbsp; <br />&nbsp; ;...update PPU, APU, check joypads, do a few gameplay routines, etc.<br />&nbsp; <br />&nbsp; rti<br />&nbsp; <br />main_thread:<br />&nbsp; <br />&nbsp; lda nmi_occured<br />&nbsp; beq main_thread ;check if the main_thread can start a new &quot;code frame&quot;<br />&nbsp; <br />&nbsp; lda #0<br />&nbsp; sta nmi_occured<br /><br />&nbsp; ;...common and potentially numerous enemies and projectiles, etc.<br />&nbsp; <br />&nbsp; lda #1<br />&nbsp; sta main_done ;the main thread will be ready to begin its next frame<br />&nbsp; <br />&nbsp; jmp main_thread</div>
<br />
<br />Multithreading sounds interesting, though.  Maybe the NMI just updates PPU, APU, and joypad status, while the main thread has 2-3 gameplay threads to be swapped with each other.  Framerate could alter between specific threads within the main thread instead of altering the framerate of the whole main thread.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Wed Oct 24, 2007 3:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was thinking more of this...<br /></div>
<br />
<br />i do something similar, except i let my "main" thread run as fast as possible (collision, prep vram writes, etc.), everything else (player movement, enemy ai) is timer driven. these are initialized when needed and the nmi handler decreases them. when they reach 0, "main" will process what needs processing and reload the timer. my nmi handler only writes to vram(when the correct flag is set), updates PPU registers, reads input, and updates oam.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>