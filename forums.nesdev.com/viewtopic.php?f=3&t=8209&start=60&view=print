<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NTSC color palette emulation, with the square wave modulator</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NTSC color palette emulation, with the square wave modulator</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8209">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8209</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>5</strong> of <strong>10</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Oct 20, 2011 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">James wrote:</div><div class="quotecontent">What is the proper method of converting YIQ to sRGB?  Some variation of the RGB conversion matrix in Bisqwit's code?</div>
<br /><!-- m --><a class="postlink" href="http://www.sjbrown.co.uk/2004/05/14/gamma-correct-rendering/">http://www.sjbrown.co.uk/2004/05/14/gam ... rendering/</a><!-- m -->
<br />
<br />
<br />I think this thread is going off the deep end a bit. I thought I was anal but seriously you guys... <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  Modeling this level of "accuracy" is borderline perverse when the only available method is black boxing from one source of values from one individual from one PPU taken with one scope.
<br />
<br />All of this accuracy zeal is about preservation right? Perhaps it would be better to wait to see what the DAC designer was actually striving for and model THAT as an ideal circuit. Wouldn't that be more definitive than the unideal real thing? Don't forget that emulators are themselves ideal components. Otherwise, what's next? Should emulators include a netlist and SPICE to create a RGB palette? PCB trace modeling for interference ("jailbar") simulation in NTSC emulation?
<br />
<br />I actually built a pseudo NES color generator in hardware using a 3-bit linear DAC (not a current-source DAC like the real thing). I rounded KH's values (a lot) and the only non-parasitic filtering was an AC-coupling capacitor... and it looked......... identical, despite the grievous inaccuracy.
<br />
<br />
<br />Also something to perhaps consider with this crazy simulation is that TV have AGC which apparently usually go by the colorburst level. I presume they will adjust the gain so that CB is 40 IRE peak to peak.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 20, 2011 4:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">All of this accuracy zeal is about preservation right? Perhaps it would be better to wait to see what the DAC designer was actually striving for and model THAT as an ideal circuit. Wouldn't that be more definitive than the unideal real thing?</div><br />Not if the goal is to model what things will look like on the unideal real thing so that your graphics won't surprise you on the unideal real thing by looking like jagged, muddled trash. It took several iterations before the block dithering in LJ65 could get close enough to the ideal colors of the seven game pieces. But for this, I found Nestopia 1.40's NTSC emulation to be accurate enough vs. both CRT and LCD TVs.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">PCB trace modeling for interference ("jailbar") simulation in NTSC emulation?</div><br />I wouldn't bother. Most NES consoles are frontloaders, on which jailbars aren't noticeable.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also something to perhaps consider with this crazy simulation is that TV have AGC which apparently usually go by the colorburst level.</div>
<br />I seem to remember that the manual for the NES recommended disabling AGC, AFC, or something.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Oct 20, 2011 9:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Not if the goal is to model what things will look like on the unideal real thing so that your graphics won't surprise you on the unideal real thing by looking like jagged, muddled trash.</div><br />But this thread is about finding the definitive <em>RGB</em> palette, which is not jagged, muddled trash. It should be a perfect* balance between reality and ideal.<br /><br />*subjective<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It took several iterations before the block dithering in LJ65 could get close enough to the ideal colors of the seven game pieces. But for this, I found Nestopia 1.40's NTSC emulation to be accurate enough vs. both CRT and LCD TVs.</div><br />It's my guess that modeling the ideal DAC circuit will be accurate enough and will turn out to be more logical than real life parameters which change from silicon to silicon, temperature to temperature, load to load etc. You can't please everyone by default, but you can start at the "ideal".<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I wouldn't bother. Most NES consoles are frontloaders, on which jailbars aren't noticeable.</div><br />I wouldn't bother either, but for many people that's probably an authentic experience that they may want to relive. Maybe it sounds silly but I won't pretend to know what the people want.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I seem to remember that the manual for the NES recommended disabling AGC, AFC, or something.</div>
<br />I don't believe this is a user-configurable setting on most sets. Perhaps in the service menu? But most sets in use then probably didn't have menus either, I know I played on a TV with 5 or so knobs and which only accepted input via 300 ohm twin lead. All original Famicom owners received a 300 ohm RF switch in box so most were probably playing on similar menuless sets, and of course via RF input which requires the AGC for OTA reception. Seeing how a 300 ohm-era TV's only mode of input was RF, I don't know why it'd have an option to disable the AGC. Even if that were the case and we called AGC-less decoding Nintendo ordained, wouldn't a Virtual Console palette trump all else?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Thu Oct 20, 2011 10:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Then you find the perfect palette, and the user is like "This is too dark, screw this, I'm using the Nesticle palette".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Thu Oct 20, 2011 11:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Let's return to the topic. What do you think that the subcarrier on the fact of the triangular and not square or sine? I has recieved the requested test today and I'll try to record what I had promised.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Thu Oct 20, 2011 11:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Seems to make sense for a slew rate limited square. What the TV's decoder is going to see is the output after the AV circuitry, but not the RF. What's it look like at the AV jack (if it exists on yours)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Thu Oct 20, 2011 11:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have working monitor that supports PAL/SECAM (sorry, no NTSC). I can show signal directly from the regenerating filter of analog decoder (pin 1), which is built on the <a href="http://www.datasheet4u.net/datasheet/T/D/A/TDA3510_ETC.pdf.html" class="postlink">TDA3510</a> (sorry, can't find english one). Or even give you resulting R-Y and B-Y signals (from pins 11 and 10). Then you can make your own YUV to RGB matrix. But I continue to pay attention to the fact that the triangular shape of the subcarrier obtained directly at the output of PPU (pin 21).
<br />I sold my TV with decoder, build on TDA4555, wich support NTSC too. Maybe I can get TDA4555 and build own decoder, must check store in town.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 21, 2011 12:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Presumably, the wave should be smoothed across pixels, not only pixel-internally. Which brings us to the color bleeding artifacts.
<br />
<br />I.e. instead of, <div class="codetitle"><b>Code:</b></div><div class="codecontent">000000000000111111111111222222222222&nbsp; &nbsp;x coordinate<br />aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbb&nbsp; &nbsp;pixel type<br />______¯¯¯¯¯¯____¯¯¯¯¯¯______¯¯¯¯¯¯__&nbsp; &nbsp;signal</div>, you get something like this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">000000000000111111111111222222222222<br />aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbb<br />______/¯¯¯¯¯`-__/¯¯¯¯¯`-____/¯¯¯¯¯`-</div>Where the waveforms for the two successive "b" pixels are different because one is preceded by a signal high and the other is not.<br />This obviously cannot be modelled with a palette file. There seems to be merit to scanline rendering after all.<br />Basically, your pixel converter should produce 12 signal levels per pixel, and the scanline renderer should go across the signal levels, smooth it a bit (such as, every value becomes the weighted average of the last 10), and then convert it into YIQ and sRGB in 12 sample units.<br /><br />EDIT: I tested this. Each pixel has 12 samples as the signal level, as usual. However, the signal levels are faded with formula oldsignal × (1-M) + newsignal × M where M might be e.g. 0.7 for a 70% signal clarity. Before fading, the signal is translated to –0.5 to 0.5 range. After fading, back to 0 to 1 range.<br /><br />Left: 10%, middle: 30%, right: 70%<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm10p.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm30p.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm70p.png" alt="Image" /><br />Left: 100% (no color bleeding), middle: 120%, right: 70% and 150% mixed together in 70%-30% proportion.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm100p.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm120p.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm0715m.png" alt="Image" /><br /><br />I tested a number of different fade coefficients. At &gt; 100 %, it should produce the over-shoot spikes at signal edges. At low quality levels, it seems that the saturation suffers. However, you can indeed observe color artifacts where ever the color changes horizontally.<br />It is important to note that this is not a palette hack. Each pixel is interpreted from the raw transformed scanline signal. A palette can not model this effect.<br /><br />Here's one in which I applied it at subpixel level. Each pixel is offseted by 3 signal samples from the previous one. Signal is the 70-150 mix explained above and below.<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm0715pL.png" alt="Image" /><br />(Ahem, am I just reinventing the same as what Blargg did earlier?)<br /><br />Here is a signal dump of scanline 10 of each image.<br /><a href="http://bisqwit.iki.fi/kala/snap/nesemu1_smdump.png" class="postlink"><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smdump_thu.png" alt="Image" /></a><br /><br />EDIT: Source code here. Apologies about the wonky indentation levels; I removed some code not relevant for documentation, and did not fix the indentation after the fact:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned Xscale = 4, Yscale = 3; // will render at 256*4 by 240*3<br /><br />&nbsp; &nbsp; struct cache<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; float levels&#91;12&#93;;<br />&nbsp; &nbsp; &#125; yiqmap&#91;240&#93;&#91;256&#93; = &#123; &#123;&#123;&#123;&#125;&#125;&#125; &#125;;<br /><br />&nbsp; &nbsp; void PutPixel&#40;unsigned px,unsigned py, unsigned pixel&#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; // The input value is a NES color index &#40;with de-emphasis bits&#41;.<br />&nbsp; &nbsp; &nbsp; &nbsp; auto&amp; r = yiqmap&#91;py&#93;&#91;px&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Decode the color index<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int color = &#40;pixel &amp; 0x0F&#41;, level = color&lt;0xE ? &#40;pixel&gt;&gt;4&#41; &amp; 3 : 1;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Voltage levels, relative to synch voltage<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; static const float black=.518f, white=1.962f, attenuation=.746f,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; levels&#91;8&#93; = &#123;.350f, .518f, .962f,1.550f,&nbsp; // Signal low <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.094f,1.506f,1.962f,1.962f&#125;; // Signal high<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Calculate the luma and chroma by emulating the relevant circuits:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto wave = &#91;&#93;&#40;int p, int color&#41; &#123; return &#40;color+8+p&#41;%12 &lt; 6; &#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;int p=0; p&lt;12; ++p&#41; // 12 clock cycles per pixel.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // NES NTSC modulator &#40;square wave between two voltage levels&#41;:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float spot = levels&#91;level + 4*&#40;color &lt;= 12*wave&#40;p,color&#41;&#41;&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // De-emphasis bits attenuate a part of the signal:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;&#40;&#40;pixel &amp; 0x40&#41; &amp;&amp; wave&#40;p,12&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || &#40;&#40;pixel &amp; 0x80&#41; &amp;&amp; wave&#40;p, 4&#41;&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || &#40;&#40;pixel &amp;0x100&#41; &amp;&amp; wave&#40;p, 8&#41;&#41;&#41; spot *= attenuation;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Normalize:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float v = &#40;spot - black&#41; / &#40;white-black&#41; / 12.f;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; r.c.levels&#91;p&#93; = v;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp; #define c&#40;v&#41; std::cos&#40;3.141592653 * &#40;v&#41; / 6&#41; * 1.5<br />&nbsp; &nbsp; static const float cos&#91;12&#93; =<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123; c&#40;0&#41;,c&#40;1&#41;,c&#40;2&#41;,c&#40;3&#41;,c&#40;4&#41;,c&#40;5&#41;,c&#40;6&#41;,c&#40;7&#41;,c&#40;8&#41;,c&#40;9&#41;,c&#40;10&#41;,c&#40;11&#41; &#125;;<br />&nbsp; &nbsp; static const float sin&#91;12&#93; =<br />&nbsp; &nbsp; &nbsp; &nbsp; &#123; c&#40;9&#41;,c&#40;10&#41;,c&#40;11&#41;,c&#40;0&#41;,c&#40;1&#41;,c&#40;2&#41;,c&#40;3&#41;,c&#40;4&#41;,c&#40;5&#41;,c&#40;6&#41;,c&#40;7&#41;,c&#40;8&#41; &#125;;<br />&nbsp; &nbsp; #undef c<br /><br />&nbsp; &nbsp; void FlushScanline&#40;unsigned py&#41;<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u32* pix = &#40;u32*&#41; s-&gt;pixels; // SDL surface<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float level07=0.f, level15=0.f, cache&#91;256*12&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;unsigned o=0, px=0; px&lt;256; ++px&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;int p=0; p&lt;12; ++p&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; level07 = level07*0.3 + 0.7*&#40;yiqmap&#91;py&#93;&#91;px&#93;.levels&#91;p&#93;-0.5f&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; level15 = level15*-.5 + 1.5*&#40;yiqmap&#91;py&#93;&#91;px&#93;.levels&#91;p&#93;-0.5f&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cache&#91;o++&#93; = 0.5f + &#40;level07*0.7 + level15*0.3&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;unsigned px=0; px&lt;256; ++px&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;int r=0; r&lt; int&#40;Xscale&#41;; ++r&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float yiq&#91;3&#93; = &#123;0.f, 0.f, 0.f&#125;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;int x=px*12 + &#40;&#40;r+1-int&#40;Xscale&#41;&#41;*12/int&#40;Xscale&#41;&#41;,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p=0; p&lt;12; ++p, ++x&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;x&lt;0 || x&gt;=256*12&#41; continue;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float v = cache&#91;x&#93;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Simulate ideal TV NTSC decoder:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yiq&#91;0&#93; += v;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yiq&#91;1&#93; += v * cos&#91;x%12&#93; * 1.5;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yiq&#91;2&#93; += v * sin&#91;x%12&#93; * 1.5;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; float gamma = 1.8f;<br /><br />&nbsp;// Convert YIQ into RGB according to FCC sanctioned matrix.<br />&nbsp;auto gammafix = &#91;=&#93;&#40;float f&#41; &#123; return f &lt; 0.f ? 0.f : std::pow&#40;f, 2.2f / gamma&#41;; &#125;;<br />&nbsp;auto clamp = &#91;&#93;&#40;int v&#41; &#123; return v&lt;0 ? 0 : v&gt;255 ? 255 : v; &#125;;<br />&nbsp;unsigned rgb = 0x10000*clamp&#40;255 * gammafix&#40;yiq&#91;0&#93; +&nbsp; 0.946882f*yiq&#91;1&#93; +&nbsp; 0.623557f*yiq&#91;2&#93;&#41;&#41; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 0x00100*clamp&#40;255 * gammafix&#40;yiq&#91;0&#93; + -0.274788f*yiq&#91;1&#93; + -0.635691f*yiq&#91;2&#93;&#41;&#41; <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 0x00001*clamp&#40;255 * gammafix&#40;yiq&#91;0&#93; + -1.108545f*yiq&#91;1&#93; +&nbsp; 1.709007f*yiq&#91;2&#93;&#41;&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for&#40;int p=0; p&lt; int&#40;Yscale&#41;; ++p&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pix&#91; &#40;py*Yscale+p&#41; * &#40;256*Xscale&#41; + px*Xscale + r&#93; = rgb;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //SDL_UpdateRect&#40;s, 0,py*3, 256*3,3&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&#40;py == 239&#41; SDL_Flip&#40;s&#41;;<br />&nbsp; &nbsp; &#125;</div>
<br />
<br />P.S. With this code, the super black color is actually meaningful! There is a theoretical difference to the next pixel whether the previous pixel was black or super black. A very slight difference, but a difference nonetheless.
<br />Here is a test image. Horizontally, all even pixels are either 0D or 1D; odd pixels are everything from 00..3F. The 0D/1D selection toggles every 4 scanlines. Emphasis bits change every 30 pixels. Firefox's color picker extension reveals that there indeed are differences every 4 pixels, but they are very small.
<br /><a href="http://bisqwit.iki.fi/kala/snap/nesemu1_sm0D1Dbarsmag.png" class="postlink"><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_sm0D1Dbars.png" alt="Image" /></a>
<br />Could someone verify this effect on the NES?
<br />
<br />One more note. The combination of square wave and RC is quantized to 12 samples in this generator. Or more accurately, this assumes that the TV samples the video signal exactly 12 times per pixel. In reality, it samples it close to an infinite number per second. I am not a master of integral mathematics, so I won't even try to model it more accurately than that. Chances are that the differences are still completely neglible... If you care, simply read the same square wave level multiple times (e.g. instead of 12 samples per pixel, you'd get 48 samples per pixel), adjust the blur factors appropriately, and change the /12 divider (e.g. /48 divider). It will of course be slower.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Fri Oct 21, 2011 3:43 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To be clear, I tell you something. We know there 12 phases, wich generate always. There is pixel render, wich select color index (or number) for each pixel. So, obvious pixel color index works as selector of desired phase (or static level for B/W colors) and works like time gate for choosen signal for one pixel time. For example: we have two phases PH1 and PH2, pixel index gate signal (wich 0 is PH1, 1 is static level and 2 is PH2). Then result signal will be something like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-<br />&nbsp; &nbsp; &nbsp; - -&nbsp; &nbsp; &nbsp;- -&nbsp; &nbsp; &nbsp;- - <br />PH1&nbsp; -&nbsp; &nbsp;-&nbsp; &nbsp;-&nbsp; &nbsp;-&nbsp; &nbsp;-&nbsp; &nbsp;-<br />&nbsp; &nbsp; -&nbsp; &nbsp; &nbsp;- -&nbsp; &nbsp; &nbsp;- -&nbsp; &nbsp; &nbsp;-<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-<br /><br />&nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-<br />&nbsp; &nbsp; - -&nbsp; &nbsp; &nbsp;- -&nbsp; &nbsp; &nbsp;- - <br />PH2&nbsp; &nbsp; -&nbsp; &nbsp;-&nbsp; &nbsp;-&nbsp; &nbsp;-&nbsp; &nbsp;-&nbsp; &nbsp;-<br />&nbsp; &nbsp; &nbsp; &nbsp; - -&nbsp; &nbsp; &nbsp;- -&nbsp; &nbsp; &nbsp;- -<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp;-<br /><br /><br />PIX 000000001111111122222222<br /><br /><br />&nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-<br />&nbsp; &nbsp; &nbsp; - -&nbsp; &nbsp;--------- -<br />VID&nbsp; -&nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp;-<br />&nbsp; &nbsp; -&nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- -<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-<br /></div>
<br />Don't forget that luma level of colored pixel(s) will be the average value of the amplitude of the subcarrier. In PAL PPU the total duration of the frame is a multiple of the main frequency. So, subcarrier dots are present, but do not move. On the other end, duration of NTSC frame are not multiple to NTSC masterclock and this make subcarrier dots crawling. Familiar term? :3 Am I clear?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 21, 2011 4:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">HardWareMan wrote:</div><div class="quotecontent">On the other end, duration of NTSC frame are not multiple to NTSC masterclok and this make subcarrier dots crawling. Familiar term?</div>
<br />Oh, I see. So it looks like this? (+4 offset on each successive scanline, +6 offset on consecutive frame, modulo 12, loop length 2 frames)
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines2.gif" alt="Image" />
<br />Or like this? (+4 offset on each successie scanline, +4 offset on consecutive frame, modulo 12, loop length 3 frames)
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3.gif" alt="Image" />
<br />(Both images rendered in 3072x720, resized to 960x720 with imagemagick's -filter box filter.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Fri Oct 21, 2011 4:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><div class="quotetitle">HardWareMan wrote:</div><div class="quotecontent">On the other end, duration of NTSC frame are not multiple to NTSC masterclok and this make subcarrier dots crawling. Familiar term?</div><br />Oh, I see. So it looks like this?</div>
<br />Second picture. But the subcarrier braid is bigger, because the pixel size and the size of a subcarrier period are comparable. Also, the pixels a bit stretched.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 21, 2011 4:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay. Here is a version in which the lines are merged together.
<br />
<br />Left: Rendered at 256x720, rescaled to 256x240 with box filter.
<br />Middle: Rendered at 3072x720, rescaled to 256x240 with box filter.
<br />Right: Rendered at 3072x720, line offset -6 (image moved half pixel to the right), rescaled to 256x240 with box filter.
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3s.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3sb.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3sc.gif" alt="Image" />
<br />The point of this comparison is to see whether there is merit to calculating the YIQ values for each 12 subpixel positions separately if the end result is going to be 256 wide anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>HardWareMan</b> [ Fri Oct 21, 2011 5:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do not forget that the TV smooths out the picture only in the scanline. Vertically, the picture remains clear, each scanline looks are very clear.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Oct 21, 2011 5:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">But this thread is about finding the definitive <em>RGB</em> palette</div><br />Which was ripped from PlayChoice PPUs and the GameCube and GBA versions of acNES long ago.<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">I don't believe this is a user-configurable setting on most sets.</div><br />It was for late 1970s sets. From the <a href="http://www.atarihq.com/tsr/manuals/crtldeck.txt" class="postlink">Control Deck manual</a>:<br /><div class="quotetitle">Nintendo wrote:</div><div class="quotecontent">If your TV has an automatic fine tuning control (AFC), turn it off. (Use the manual fine tune dial to adjust the picture after inserting the game pak as described below.)</div><br />As I said, I might have misremembered the details.<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">and of course via RF input which requires the AGC for OTA reception.</div><br />I thought gain control for OTA was keyed to the vertical sync signal, not the colorburst, made possible by negative modulation. Otherwise, how would AGC have worked in the black-and-white era?<br /><br /><div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent">wouldn't a Virtual Console palette trump all else?</div><br />Agreed, at least for determining ideal flat colors, even if not for games like Blaster Master that depend on artifacts.<br /><br /><div class="quotetitle">HardWareMan wrote:</div><div class="quotecontent">Do not forget that the TV smooths out the picture only in the scanline.</div>
<br />Some TVs are known to smooth chroma vertically.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Fri Oct 21, 2011 5:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">HardWareMan wrote:</div><div class="quotecontent">Do not forget that the TV smooths out the picture only in the scanline. Vertically, the picture remains clear, each scanline looks are very clear.</div>
<br />Do you mean that there are distinctly only 240 scanlines (minus portions rendered outside the visible screen)? Hmm, makes sense.
<br />So the dot crawl happens on each of the 240 scanlines and not three times within each scanline.
<br />It would look like this, then:
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3b.gif" alt="Image" />
<br />Ugh. That's ugly.
<br />
<br />Left: Box-scaled from 3720x240 to 256x240; Middle: Rendered directly to 256x240 with half-pixel offset. Right: Without half-pixel offset.
<br /><img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3bs.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3bs1.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_smblines3bs2.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>5</strong> of <strong>10</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>