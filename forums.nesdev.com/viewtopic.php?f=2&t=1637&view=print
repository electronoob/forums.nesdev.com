<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - reading controller status when strobe bit is set</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">reading controller status when strobe bit is set</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1637">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1637</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Fri Jun 09, 2006 8:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>reading controller status when strobe bit is set</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you read the NES controller ($4016/$4017) when the strobe bit is set ($4016=1), will it always return the status of the 1st button in queue, or will it cause conflict and return open-bus (lsb 0 for $4016, 1 for $4017)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Fri Jun 09, 2006 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What's the strobe bit? When you strobe, that's completed long before the next op.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Fri Jun 09, 2006 9:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What's the strobe bit?</div>lsb of data written to $4016: <!-- m --><a class="postlink" href="http://nesdevwiki.ath.cx/index.php/Standard_Controller">http://nesdevwiki.ath.cx/index.php/Standard_Controller</a><!-- m -->
<br />
<br />To read joypad button status, you'd normally write 1, then 0 to $4016. What I want to know is what happens when you read it after the first write.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Jun 09, 2006 9:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I remember hearing about this a while back -- from what I recall, when the strobe bit is set, reading $4016/7 will return in real-time status of the first button (A button).
<br />
<br />I vaguely remember blargg or someone explaining the details on this some time ago.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Jun 09, 2006 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Disch recalls correctly. When strobe bit is left at 1, reading the joypad status returns the <em>current</em> A button status at the time of the read, <em>not</em> the A button status when you set strobe.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hap</b> [ Fri Jun 09, 2006 10:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks.
<br />
<br />*edit* something even more obscure: what happens if you read button status after turning the NES on, or after reset, without having strobed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Jun 09, 2006 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />o.O news to me.
<br />
<br />Ok, so when $4016.d0 is set, the read position is reset to 0 (status of A), and all reads from $4016 at this point return the status of A, <em>at the time of reading $4016</em>, as if having the strobe bit set means the NES is constantly polling the joypad in realtime, and acts basically like a real-time state buffer? So eg multiple reads can return different values at this point?
<br />
<br />But then, when you write a 1 to $4016.d0, it then stops polling the joypad any more. So now you read $4016 and it returns the status of each button in sequential order, at the time that you write to $4016, not when you read from it? And it's been verified that the NES controller doesn't just keep polling anyway, eg by doing something like holding down B, reading A, releasing B, waiting 5 seconds, and then reading B and seeing if it is set? So that eg the strobe bit only affects the read position?
<br />
<br />So you could theoretically just set the strobe bit to 1 and use the A button as a real-time status button without ever writing to $4016 again? Not that that's useful in any way, but I do want to emulate the behavior anyway. An excellent find, no doubt!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Jun 09, 2006 2:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />$4016 bit 0 output is connected to the load pin of the 4021 8-bit shift register. When load is 1, the data output always reflects the current status of data 0 (the A button). When load transitions from 1 to 0, the shift register latches the data at each input and the output reflects bit 0 of the shift register.
<br />
<br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">Ok, so when $4016.d0 is set, the read position is reset to 0 (status of A), and all reads from $4016 at this point return the status of A, at the time of reading $4016, as if having the strobe bit set means the NES is constantly polling the joypad in realtime, and acts basically like a real-time state buffer? So eg multiple reads can return different values at this point?</div><br /><br />Yes. The joypad would be constantly feeding the current status of A to the data input on the joypad connector, and when you read the CPU just takes the current value.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But then, when you write a 1 to $4016.d0, it then stops polling the joypad any more. So now you read $4016 and it returns the status of each button in sequential order, at the time that you write to $4016, not when you read from it?</div><br /><br />Assuming you mean writing 0 to $4016, yes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And it's been verified that the NES controller doesn't just keep polling anyway, eg by doing something like holding down B, reading A, releasing B, waiting 5 seconds, and then reading B and seeing if it is set? So that eg the strobe bit only affects the read position?</div><br /><br />It's all based on the behavior of the 4021 shift register. When strobe transitions from 1 to 0, it latches. When you clock it, the the register's contents shift right by one bit. Not much else to it. Here's some test code I just ran on my NES, with a NES and SNES controller (using a SNES-to-NES adaptor I made):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; I start holding B before running code<br />lda&nbsp; &nbsp;#0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; strobe = 0<br />sta&nbsp; &nbsp;$4016<br />lda&nbsp; &nbsp;#1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; strobe = 1<br />sta&nbsp; &nbsp;$4016<br />lda&nbsp; &nbsp;#0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; strobe = 0<br />sta&nbsp; &nbsp;$4016<br />lda&nbsp; &nbsp;$4016&nbsp; &nbsp; &nbsp; &nbsp;; read status of A<br />lda&nbsp; &nbsp;#100&nbsp; &nbsp; &nbsp; &nbsp; ; wait one second<br />jsr&nbsp; &nbsp;delay_10msec<br />; I release B button during delay<br />lda&nbsp; &nbsp;$4016&nbsp; &nbsp; &nbsp; &nbsp;; read status of B<br />and&nbsp; &nbsp;#$01<br />jsr&nbsp; &nbsp;print_a&nbsp; &nbsp; &nbsp;; prints 1<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So you could theoretically just set the strobe bit to 1 and use the A button as a real-time status button without ever writing to $4016 again?</div><br /><br />Right. You could make a one-button game that never needed to toggle the strobe line. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />There was another thread a while back where I posted some other explanation and test code too:<br /><br /><!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?p=4606#4606">http://nesdev.com/bbs/viewtopi ... =4606#4606</a><!-- m --><br /><br /><div class="quotetitle">hap wrote:</div><div class="quotecontent">something even more obscure: what happens if you read button status after turning the NES on, or after reset, without having strobed?</div>
<br />
<br />Heh, I like the obscurity of this. I just tried a few times and at power-up and reset and it acts as if you had written 1 then 0 to $4016, i.e. it latches the current button state and is in read mode. Apparently it's the controller itself, because I get the same behavior when I plug it in then immediately try reading data. Same for NES and SNES joypads.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Jun 09, 2006 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Excellent, thanks for the info :)
<br />This behavior shall now be emulated on the SNES as well as the NES.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Assuming you mean writing 0 to $4016, yes.</div><br /><br />Whoops, yes I do.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When load transitions from 1 to 0, the shift register latches the data at each input and the output reflects bit 0 of the shift register.</div><br /><br />And my understanding is that a one appears on the end of the shift register after each shift, correct? Eg :<br /><br />SR = 01000001<br />read<br />SR = 10100000<br />read<br />SR = 11010000<br />etc.<br /><br />Hmm, ok then. So the write to $4016 that forces 1-&gt;0 latches the current buttons into SR, 0-&gt;0 does absolutely nothing, 0-&gt;1 sets the controller into the special "always read A in real-time" mode, and 1-&gt;1 does nothing as well.<br /><br />I'll have to do a good bit of reprogramming to support this, but I think it will clarify the interface a lot more. I was using a counter to move through the joypad polls, but I think I'll make a true 16-bit (12 buttons on SNES) shift register and drop the value into that for now. Eventually I can take that concept further and isolate controllers from the CPU inteface and treat them as actual input hardware and such. Fun stuff.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Heh, I like the obscurity of this.</div>
<br />
<br />Do you now? Heheh. Ok, what if you already have a controller in port 1, and you are halfway through reading it, and then you plug a controller into port 2. Will the controller itself then mess with $4016.d0 in such a way as to "retrigger" the port 1 controller? My guess is no, because the controller is probably manually detecting being plugged in and setting up the joypad for the first time, ignoring $4016.d0.
<br />
<br />Does each controller handle $4016.d0 separately, despite sharing the pin on the SNES? Since plugging in a new controller causes it to be in latched read mode (0), I wonder what happens if there's a controller in the other port and $4016.d0 = 1.
<br />
<br />Or, really better: does setting $4016.d0 result in a constant pin being set that the controller can see indefinitely, or does it only last one write cycle where the controller "sees" it and acts accordingly? The latter makes more sense, due to the controllers starting in read mode (0). But the former is more likely because otherwise how would the controllers detect 0-&gt;1 and 1-&gt;0 writes, unless they are analyzing the CPU output / address pins to look for $4016 writes, and then manually store the last write inside the controller chip itself. Seems too complex in comparison to the former :/
<br />
<br />This is useless so don't waste your time with it unless you're bored out of your mind. I was intentionally trying to be asinine :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri Jun 09, 2006 6:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And my understanding is that a one appears on the end of the shift register after each shift, correct?</div><br /><br />Yeah, the top bit of the shift register is wired up to fill with 1, so if you keep reading bits you'll eventually get an infinite stream of 1s (I've verified this on NES and SNES joypads). For NES, you get the 8 data bits then 1s; for SNES, you get the 12 data bits, four 0 bits (due to it having two 8-bit shift registers), then 1s:<br /><br />NES: dddddddd1.....<br />SNES: dddddddddddd00001.....<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you now? Heheh. Ok, what if you already have a controller in port 1, and you are halfway through reading it, and then you plug a controller into port 2. Will the controller itself then mess with $4016.d0 in such a way as to "retrigger" the port 1 controller? My guess is no, because the controller is probably manually detecting being plugged in and setting up the joypad for the first time, ignoring $4016.d0.</div><br /><br />Heh, I had thought about clarifying this. I haven't tried, but it's most likely that the controllers are independent as you say, since it's the shift register chip in the controller that's the source of the behavior, not the console. The only way one controller could affect the other is if it's somehow overpowering the strobe output from the console momentarily, but that would be highly unusual for an input line (even in the pathological case where the strobe line were connecting before the +5V and the CMOS chip was getting powered by the input protection diodes).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Does each controller handle $4016.d0 separately, despite sharing the pin on the SNES?</div>
<br />
<br />Yeah. The console just has a single latched output line set by the last write to $4016 bit 0. The controller decides how to interpret it (my serial interface interprets it as the value to drive the RS-232 line at, for example). Find a schematic online and it should be clearer. I tried to find some simple datasheets for the 4021 earlier but failed.
<br />
<br />By the way, a moderator should move this thread into the NES development section, since it's not specific to emulators.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>