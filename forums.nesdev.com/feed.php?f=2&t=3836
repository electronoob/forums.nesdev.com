<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3836" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-06-19T16:58:09-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3836</id>
<entry>
<author><name><![CDATA[skrasms]]></name></author>
<updated>2008-06-19T16:58:09-07:00</updated>
<published>2008-06-19T16:58:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=34337#p34337</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=34337#p34337"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=34337#p34337"><![CDATA[
Oops, it looks like my writing process was also writing some garbage data between iterations. It seems to be working now <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3470">skrasms</a> — Thu Jun 19, 2008 4:58 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[skrasms]]></name></author>
<updated>2008-06-18T22:25:00-07:00</updated>
<published>2008-06-18T22:25:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=34320#p34320</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=34320#p34320"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=34320#p34320"><![CDATA[
I had to take a break from this project because of school and graduation, but I'm back on it now  <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />Now that I can write registers, I am able to get sound out from the Triangle, Noise, and DMC channels. I tried this order for using the triangle channel:<br /><br />Write 0x7F to $4008<br />Write 0x11 to $400A<br />Write 0x30 to $400B<br /><br />Any time I write to $400A the triangle channel goes silent. Is that supposed to happen? Writing to $400B brings it back at the updated frequency. <br /><br />In the same way, after I write to $400E the noise channel goes silent. It comes back when I write any arbitrary data to $400F. <br /><br />So this process works:<br /><br />Write 0x1F to 0x400C<br />Write 0x88 to 0x400E<br />Write 0xXX (any value) to 0x400F<br /><br />But this process does not:<br /><br />Write 0x1F to 0x400C<br />Write 0x88 to 0x400E<br /><br />Is that normal behavior?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3470">skrasms</a> — Wed Jun 18, 2008 10:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-02-21T07:39:54-07:00</updated>
<published>2008-02-21T07:39:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31101#p31101</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31101#p31101"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31101#p31101"><![CDATA[
<div class="quotetitle">skrasms wrote:</div><div class="quotecontent"><br />I wanted to make a lookup table that covered all 12 bits, but I cannot really fit more than a couple hundred values into the micro's RAM. Right now my code is based on table lookups and somewhat simple math. It takes the exponent and breaks it into individual digits, then uses lookup tables to get 2 to that digit.<br /></div><br />I noticed that your code extracts the decimal digits. Try extracting hexadecimal digits instead; division by 16 is usually much faster than division by 10 on cheap processors. In addition, double is slower than a <a href="http://www.google.com/search?q=fixed-point+arithmetic" class="postlink">fixed-point data type</a> unless your processor has specific circuitry (called an FPU) for handling doubles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Thu Feb 21, 2008 7:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[skrasms]]></name></author>
<updated>2008-02-20T21:38:27-07:00</updated>
<published>2008-02-20T21:38:27-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31093#p31093</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31093#p31093"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31093#p31093"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">skrasms wrote:</div><div class="quotecontent">So I need to sample an analog voltage and scale the digital result to be base 2 logarithmic before it can set the pitch of an NES channel. I would not know where to begin doing that math in assembly<br /></div><br />Lookup tables. Lots of lookup tables.</div><br /><br />I wanted to make a lookup table that covered all 12 bits, but I cannot really fit more than a couple hundred values into the micro's RAM. Right now my code is based on table lookups and somewhat simple math. It takes the exponent and breaks it into individual digits, then uses lookup tables to get 2 to that digit. <br /><br />For example, 2^3.124 <br />= (2^3)*(2^0.1)*(2^0.02)*(2^0.004)<br />= two1[3] * two01[1] * two001[2] * two0001[4]<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">double two1&#91;&#93; = &#123;1.000000000000000, 2.000000000000000, 4.000000000000000, 8.000000000000000, 16.000000000000000, 32.000000000000000, 64.000000000000000, 128.000000000000000, 256.000000000000000, 512.000000000000000&#125;;<br />double two01&#91;&#93; = &#123;1.000000000000000, 1.071773462536293, 1.148698354997035, 1.231144413344916, 1.319507910772894, 1.414213562373095, 1.515716566510398, 1.624504792712471, 1.741101126592248, 1.866065983073615&#125;;<br />double two001&#91;&#93; = &#123;1.000000000000000, 1.006955550056719, 1.013959479790029, 1.021012125707193, 1.028113826656067, 1.035264923841378, 1.042465760841121, 1.049716683623067, 1.057018040561380, 1.064370182453360&#125;;<br />double two0001&#91;&#93; = &#123;1.000000000000000, 1.000693387462581, 1.001387255711335, 1.002081605079633, 1.002776435901078, 1.003471748509503, 1.004167543238973, 1.004863820423785, 1.005560580398468, 1.006257823497782&#125;;<br />double two00001&#91;&#93; = &#123;1.000000000000000, 1.000069317120377, 1.000138639045616, 1.000207965776052, 1.000277297312018, 1.000346633653845, 1.000415974801869, 1.000485320756421, 1.000554671517834, 1.000624027086444&#125;;<br /><br />double mypow&#40;double val&#41;;<br /><br />double mypow&#40;double val&#41;<br />&#123;<br />  unsigned dig&#91;5&#93;;<br />  double old = val;<br />  if&#40;val&lt;0&#41; val = -val;<br /><br />  dig&#91;0&#93; = &#40;unsigned&#41;val;<br />  dig&#91;1&#93; = &#40;&#40;unsigned&#41;&#40;val*10&#41;&#41;%10;<br />  dig&#91;2&#93; = &#40;&#40;unsigned&#41;&#40;val*100&#41;&#41;%10;<br />  dig&#91;3&#93; = &#40;&#40;unsigned&#41;&#40;val*1000&#41;&#41;%10;<br />  dig&#91;4&#93; = &#40;&#40;unsigned&#41;&#40;val*10000&#41;&#41;%10;<br />  if&#40;old&lt;0&#41; return&#40;1 / two1&#91;dig&#91;0&#93;&#93; / two01&#91;dig&#91;1&#93;&#93; / two001&#91;dig&#91;2&#93;&#93; / two0001&#91;dig&#91;3&#93;&#93; / two00001&#91;dig&#91;4&#93;&#93;&#41;;<br />  else return&#40;two1&#91;dig&#91;0&#93;&#93; * two01&#91;dig&#91;1&#93;&#93; * two001&#91;dig&#91;2&#93;&#93; * two0001&#91;dig&#91;3&#93;&#93; * two00001&#91;dig&#91;4&#93;&#93;&#41;;<br />&#125;<br /></div><br /><br />The debugger shows that extracting digits from the input the way I am doing it takes 25+ usec per digit, though, so that's a bit of a bottleneck.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3470">skrasms</a> — Wed Feb 20, 2008 9:38 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-02-20T19:59:23-07:00</updated>
<published>2008-02-20T19:59:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31086#p31086</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31086#p31086"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31086#p31086"><![CDATA[
<div class="quotetitle">skrasms wrote:</div><div class="quotecontent"><br />The problem is that it's not only a music engine; it's made to interface with CV signals on a modular synthesizer, in addition to reading rotary encoders. For example, synth modules use a standard pitch control format of +1V = +1 octave.<br /></div><br />Or 1/1200 V per cent of pitch.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So I need to sample an analog voltage and scale the digital result to be base 2 logarithmic before it can set the pitch of an NES channel. I would not know where to begin doing that math in assembly<br /></div><br />Lookup tables. Lots of lookup tables.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Feb 20, 2008 7:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[skrasms]]></name></author>
<updated>2008-02-20T19:47:09-07:00</updated>
<published>2008-02-20T19:47:09-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31084#p31084</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31084#p31084"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=31084#p31084"><![CDATA[
<div class="quotetitle">Dwedit wrote:</div><div class="quotecontent"><br />If you're only making a music engine, I'd bet a 6502 C compiler would be fast enough.<br /></div><br /><br />The problem is that it's not only a music engine; it's made to interface with CV signals on a modular synthesizer, in addition to reading rotary encoders. For example, synth modules use a standard pitch control format of +1V = +1 octave. So I need to sample an analog voltage and scale the digital result to be base 2 logarithmic before it can set the pitch of an NES channel. I would not know where to begin doing that math in assembly, but I can write it out quickly in C <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Sorry I have been quiet for a while. I put the NES project on a little break while I worked on an Atari synth module. A lot of the microcontroller code will be the same for both. The Atari synth is almost done except for a single algorithm speed problem.<br /><br />Speaking of which, is there a fast method to calculate 2 to a rational power? The C pow(2, x) compiled on my micro takes almost a full millisecond to execute! I wrote my own function that's accurate to 0.06% using a mix of math and small lookup tables, but it still takes around 200 micro seconds. I hope asking about such is not going too far off topic on this forum.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3470">skrasms</a> — Wed Feb 20, 2008 7:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2008-01-30T06:12:28-07:00</updated>
<published>2008-01-30T06:12:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30482#p30482</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30482#p30482"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30482#p30482"><![CDATA[
If you're only making a music engine, I'd bet a 6502 C compiler would be fast enough.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Wed Jan 30, 2008 6:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-01-30T04:42:05-07:00</updated>
<published>2008-01-30T04:42:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30480#p30480</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30480#p30480"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30480#p30480"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Not to discourage anyone because this is a healthy technical obstacle, but why not just supply the 2A03 with some RAM and upload your native code to that? It would certainly be a hell of a lot easier than feeding the 2A03 on the cycle level.<br /></div><br />How do you get your code into the RAM? How does microcontroller communicate with 2A03? That's several chips: 2A03, RAM, ROM, address decoding, I/O chip, and having to write and debug the 2A03 software.<br /><br />As the <a href="http://nesdev.com/bbs/viewtopic.php?p=30304#30304" class="postlink">author stated</a>, the microcontroller is needed for its multi-channel A/D and ability to program in C. I still think the microcontroller-only approach is the best (and coolest), using no extra chips.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Jan 30, 2008 4:42 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LocalH]]></name></author>
<updated>2008-01-30T02:43:56-07:00</updated>
<published>2008-01-30T02:43:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30477#p30477</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30477#p30477"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30477#p30477"><![CDATA[
Not to discourage anyone because this is a healthy technical obstacle, but why not just supply the 2A03 with some RAM and upload your native code to that? It would certainly be a hell of a lot easier than feeding the 2A03 on the cycle level. Plus, said device would be able to natively handle random NSFs as well as run custom code that would then watch the external interface for commands. Plus, if you wanted to, you could modify a random NSF to also watch for external input to modify the output, to create a sort of pseudo "circuit bent" effect (of course, it wouldn't really be circuit bending unless you designed it into the hardware but it'd nonetheless be interesting, hook into the NSF right before it writes to the audio registers and have it modify the data).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=325">LocalH</a> — Wed Jan 30, 2008 2:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-01-27T21:10:58-07:00</updated>
<published>2008-01-27T21:10:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30425#p30425</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30425#p30425"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30425#p30425"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />But don't these microcontrollers already tend to have a DAC on them, to which one could feed values from 0 to 63?<br /></div><br />Not that have non-linearity that affects the volume of the 2A03's triangle and noise channels. If one didn't care about the 2A03's quirks, one could do all the channels with a microcontroller alone.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Jan 27, 2008 9:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-01-27T19:57:39-07:00</updated>
<published>2008-01-27T19:57:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30424#p30424</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30424#p30424"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30424#p30424"><![CDATA[
But don't these microcontrollers already tend to have a DAC on them, to which one could feed values from 0 to 63?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jan 27, 2008 7:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-01-27T07:24:01-07:00</updated>
<published>2008-01-27T07:24:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30409#p30409</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30409#p30409"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30409#p30409"><![CDATA[
Or, just feed your sample bytes to $4011 (register $11 with the interface). For DMC authenticity, each successive byte should be either +2 or -2 from the previous, within the range 0 to 126.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sun Jan 27, 2008 7:24 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2008-01-27T04:07:17-07:00</updated>
<published>2008-01-27T04:07:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30406#p30406</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30406#p30406"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30406#p30406"><![CDATA[
If you want DMC, you'll need to put a ram chip in there, some way of sending data to the ram chip, then some way to tell the cpu to boot.  Then it's just NES programming from there.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Sun Jan 27, 2008 4:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[skrasms]]></name></author>
<updated>2008-01-26T19:14:22-07:00</updated>
<published>2008-01-26T19:14:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30397#p30397</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30397#p30397"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30397#p30397"><![CDATA[
DPCM can't be used no matter how it's done? Or is that only a problem if I use the microcontroller to tend the 2A03 directly? <br /><br />Since the microcontroller already has other data to be concerned with, and I don't know any assembly, Kevtris' circuit seems perfect. I put it together this week, and it's getting the 2A03 to loop instructions. <br /><br />I haven't made the MCU code to feed the 245's yet. I imagine it's a matter of having the MCU update the address and data values into the 245's on each low-&gt;high transition of the enable to the address 245. Would there be any reason not to add a latch in front of one of the 245's to free up pins on the MCU? That way I would only need 8 output pins + 1 for handling the latch, instead of 16 output pins. <br /><br />My thought process so far is:<br />1) Address 245 enable transition low to high triggers interrupt on MCU<br />2) MCU already has in memory what the next address/data values to write are, and sets 8 pins to the next data byte<br />3) Those 8 pins are connected to latch in front of the data 245, and another pin is used to latch the data<br />4) The same 8 pins are also connected directly to the address 245, and once the data byte is latched they switch to the address byte and hold until the next interrupt<br />5) Repeat<br /><br />Does that sound reasonable in terms of logic and timing?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3470">skrasms</a> — Sat Jan 26, 2008 7:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-01-25T07:50:17-07:00</updated>
<published>2008-01-25T07:50:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30358#p30358</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30358#p30358"/>
<title type="html"><![CDATA[Using a 2A03 by itself + programming]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3836&amp;p=30358#p30358"><![CDATA[
4C, perfect! OK, so here's the wiring:<br /><br />40 MHz micro clock goes to micro, divide-by-2 to get 20 MHz, which goes to 2A03.<br /><br />Micro's 8-bit out port goes to 2A03's data bus.<br />2A03's A0 or A1 line goes to input bit on micro.<br /><br />So total usage on micro is 8 output pins and one input.<br /><br />Algorithm:<br /><br />- Keep $4C on the data bus at all times (might need to have 2A03's reset delayed slightly compared to micro's, easy with an R-C delay).<br /><br />- When you're ready to write to 2A03 sound register, wait until input goes high, then wait a little bit more. The 2A03 will be in a loop of JMP $4C4C, so the low two address bits will be cycling through a 00, 01, 10 sequence, making either suitable.<br /><br />- Send the following sequence: A0 xx 8C yy 40 xx 4C, where xx is the data and yy is the register. The writes should be timed so that each one occurs every 24 micro clocks (assuming it's running at 40 MHz). The last 4C byte should stay on the output bus indefinitely. Note that the byte just before the last is the data value repeated again. This is because the 2A03 will be writing to the sound hardware during that clock, and you'd rather not be competing with it. You might have to put resistors between the micro and the 2A03 data bus, since there will be some mis-synchronization during the next to last byte when it's writing.<br /><br />- Once done, 4C stays on the bus and your micro can go do other things and not worry about the 2A03.<br /><br />You'll have 24 micro clocks between each data byte, which should be plenty.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jan 25, 2008 7:50 am</p><hr />
]]></content>
</entry>
</feed>