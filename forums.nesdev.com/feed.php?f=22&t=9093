<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=22&amp;t=9093" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-07-13T23:33:15-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=22&amp;t=9093</id>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2012-07-13T23:33:15-07:00</updated>
<published>2012-07-13T23:33:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9093&amp;p=96785#p96785</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9093&amp;p=96785#p96785"/>
<title type="html"><![CDATA[VRC7 audio test program]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9093&amp;p=96785#p96785"><![CDATA[
I wrote a program to test the VRC7 audio. For example, you can make up the VRC7 custom instrument and then figure out what it sound like. <br /><br />Instructions: LEFT/RIGHT = cursor, UP/DOWN = adjust, START = send values. If rightmost "A" is set to 1 then START automatically trigger/untrigger note as well.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; VRC7 audio test program.<br />   .inesprg 1<br />   .ineschr 1<br />   .inesmir 1<br />   .inesmap 85 ;VRC7<br /><br />; Macro<br /><br />   .macro write_ppu<br />   lda #\1<br />   sta $2007<br />   .endm<br /><br />   .macro set_ppu<br />   lda #&#40;\1&gt;&gt;8&#41;<br />   sta $2006<br />   lda #&#40;\1&amp;$FF&#41;<br />   sta $2006<br />   .endm<br /><br />   .macro strobe<br />   lda #1<br />   sta $4016<br />   lda #0<br />   sta $4016<br />   .endm<br /><br />; RAM<br />   .zp<br />valmem:<br />   ; Custom instrument setting 0-7, IIIIVVVV, LLLLLLLL, --STOOOH<br />   ; 2 bytes each: hi-nybble lo-nybble<br />   .ds 22<br />autotrig:<br />   ; set if START should trigger/untrigger note<br />   .ds 1<br />pushed:<br />   ; check if button still pushed<br />   .ds 1<br />cursor:<br />   ; cursor position: 0 to 21<br />   .ds 1<br /><br />; CHR<br />   .code<br />   .bank 2<br />   .org $0000<br />   .incbin &quot;vrc7test.chr&quot;<br /><br />; PRG<br />   .code<br />   .bank 0<br />   .org $8000<br /><br />one:<br />   ; data for joypad bit testing<br />   .db 1<br /><br />fill_ppu:<br />   sta $2007<br />   dex<br />   bne fill_ppu<br />   rts<br /><br />write_vrc7:<br />   ; set address<br />   sty $9010<br />   ; wait 6 cycles<br />   jsr wait6<br />   ; load value<br />   lda &lt;valmem,x<br />   inx<br />   asl a<br />   asl a<br />   asl a<br />   asl a<br />   ora &lt;valmem,x<br />   inx<br />   ; set value<br />   sta $9030<br />   ; wait 42 cycles &#40;12 per call + 6 to return = 42&#41;<br />   jsr wait6<br />   jsr wait6<br />   jsr wait6<br />   ; return<br />wait6:<br />   rts<br /><br />Reset:<br />   ; disable IRQ and NMI, set address increment +1<br />   sei<br />   lda #%00000000<br />   sta $2000<br /><br />   ; display off<br />   lda #%00000000<br />   sta $2001<br /><br />   ; initialize RAM<br />   lda #0<br />   sta &lt;cursor<br />   sta &lt;autotrig<br /><br />   ; palette<br />   set_ppu $3F00<br />   write_ppu $1D ; black<br />   write_ppu $20 ; white<br />   write_ppu $2A ; green<br />   write_ppu $21 ; blue<br /><br />   ; initialize name table<br />   set_ppu $2000<br />   lda #$1E<br />   ldx #&#40;32*4+5&#41;<br />   jsr fill_ppu<br />   ; headings - I0..I7<br />   lda #$30<br />   ldx #$20<br />   ldy #8<br />nt1:<br />   sta $2007<br />   stx $2007<br />   inx<br />   dey<br />   bne nt1<br />   ; more headings<br />   write_ppu $50 ;I<br />   write_ppu $53 ;v<br />   write_ppu $52 ;LL<br />   sta $2007     ;LL<br />   write_ppu $54 ;ST<br />   write_ppu $51 ;oH<br />   write_ppu $4A ;A<br />   ; gap<br />   lda #$1E<br />   ldx #9<br />   jsr fill_ppu<br />   ; values<br />   lda #$00<br />   ldx #23<br />   jsr fill_ppu<br />   ; end<br />   lda #$1E<br />   ldx #$FF<br />   jsr fill_ppu<br />   ldx #$FF<br />   jsr fill_ppu<br />   ldx #$FF<br />   jsr fill_ppu<br />   ldx #7<br />   jsr fill_ppu<br /><br />   ; display on, enable NMI<br />   lda #%00001110<br />   sta $2001<br />   lda #%10000000<br />   sta $2000<br /><br />   ; wait...<br />w1:<br />   jmp w1<br /><br />rt:<br />   rti<br /><br />NMI:<br />   strobe<br />   lda $4016<br />   lda $4016<br />   lda $4016<br /><br />   ; delay if buttons held<br />   lda &lt;pushed<br />   beq npu<br />   lda $4016 ;START<br />   bit one<br />   bne rt<br />   lda $4016 ;UP<br />   bit one<br />   bne rt<br />   lda $4016 ;DOWN<br />   bit one<br />   bne rt<br />   lda $4016 ;LEFT<br />   bit one<br />   bne rt<br />   lda $4016 ;RIGHT<br />   bit one<br />   bne rt<br />   dec &lt;pushed<br />npu:<br /><br />   ; check buttons pushed<br />   lda $4016 ;START<br />   bit one<br />   beq ch_up<br />   jmp START<br />ch_up:<br />   lda $4016 ;UP<br />   bit one<br />   beq ch_down<br />   jmp UP<br />ch_down:<br />   lda $4016 ;DOWN<br />   bit one<br />   beq ch_left<br />   jmp DOWN<br />ch_left:<br />   lda $4016 ;LEFT<br />   bit one<br />   beq ch_right<br />   jmp LEFT<br />ch_right:<br />   lda $4016 ;RIGHT<br />   bit one<br />   beq w2<br />   jmp RIGHT<br /><br />w2:<br />   ; reset scroll position<br />   lda #0<br />   sta $2005<br />   sta $2005<br />   ; enable NMI and exit interrupt call<br />   lda #%10000000<br />   sta $2000<br />   rti<br />w3:<br />   inc &lt;pushed<br />   jmp w2<br /><br />START:<br />   ; disable NMI<br />   lda #%00000000<br />   sta $2000<br />   ; check auto-trigger<br />   lda &lt;20<br />   eor &lt;autotrig<br />   sta &lt;20<br />   ; write VRC7 audio registers<br />   ldx #0<br />   ldy #$00<br />   jsr write_vrc7<br />   ldy #$01<br />   jsr write_vrc7<br />   ldy #$02<br />   jsr write_vrc7<br />   ldy #$03<br />   jsr write_vrc7<br />   ldy #$04<br />   jsr write_vrc7<br />   ldy #$05<br />   jsr write_vrc7<br />   ldy #$06<br />   jsr write_vrc7<br />   ldy #$07<br />   jsr write_vrc7<br />   ldy #$30<br />   jsr write_vrc7<br />   ldy #$10<br />   jsr write_vrc7<br />   ldy #$20<br />   jsr write_vrc7<br />   ; done<br />   jmp w3<br /><br />UP:<br />   ldx &lt;cursor<br />   lda #$20<br />   sta $2006<br />   lda #&#40;32*5+5&#41;<br />   clc<br />   adc &lt;cursor<br />   sta $2006<br />   inc &lt;valmem,x<br />   lda #$0F<br />   and &lt;valmem,x<br />   sta &lt;valmem,x<br />   sta $2007<br />   jmp w3<br /><br />DOWN:<br />   ldx &lt;cursor<br />   lda #$20<br />   sta $2006<br />   lda #&#40;32*5+5&#41;<br />   clc<br />   adc &lt;cursor<br />   sta $2006<br />   dec &lt;valmem,x<br />   lda #$0F<br />   and &lt;valmem,x<br />   sta &lt;valmem,x<br />   sta $2007<br />   jmp w3<br /><br />LEFT:<br />   lda &lt;cursor<br />   beq dez<br />   dec &lt;cursor<br />   lda #$20<br />   sta $2006<br />   lda #&#40;32*6+5&#41;<br />   clc<br />   adc &lt;cursor<br />   sta $2006<br />   write_ppu $1F<br />   write_ppu $1E<br />dez:<br />   jmp w3<br /><br />RIGHT:<br />   lda #22<br />   cmp &lt;cursor<br />   beq dez<br />   lda #$20<br />   sta $2006<br />   lda #&#40;32*6+5&#41;<br />   clc<br />   adc &lt;cursor<br />   sta $2006<br />   write_ppu $1E<br />   write_ppu $1F<br />   inc &lt;cursor<br />   jmp w3<br /><br />; Vectors<br />   .bank 1<br />   .org $FFFA<br />   .dw NMI<br />   .dw Reset<br />   .dw 0<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Fri Jul 13, 2012 11:33 pm</p><hr />
]]></content>
</entry>
</feed>