<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - PPU Rendering Techniques</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">PPU Rendering Techniques</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=15411">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=15411</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>been_jamin</b> [ Fri Jan 20, 2017 11:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>PPU Rendering Techniques</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi everyone, I'm writing an nes emulator and just finished the cpu. I was looking at general structures for updating the screen; so far I have seen:<br /><br />1. render 3 pixels every cpu cycle; supposed to be very accurate but also slow<br />2. render a scanline at a time; maintains some accuracy but and speeds up the display<br />3. render the entire frame before the start of a VBlank; very fast but won't handle any games that use ppu trickery<br /><br />And then here was an idea I had: execute ppu instructions on a per-cpu-cycle basis, except instead of actually writing to the display just log what memory value and to what address the command was writing to. Then, render the entire frame right before the VBlank. Would this be any faster than 1 (above) or not?<br /><br />Am I wrong about any of these descriptions, are there any other common methods, and what do you think the best method is?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Jan 21, 2017 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU Rendering Techniques</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />#3 is unworkable since most games will at least split the screen somewhere for a status bar -- meaning this approach will fail miserably for those games.<br /><br />The &quot;logging writes&quot; approach sounds good, until you realize that it doesn't solve the problem of $2002 reads for things like sprite-0 hit... and trying to work those into a &quot;logging writes&quot; system ends up being really hard (I've tried it).<br /><br />----------------------<br />The two ways I've tried with great success are:<br /><br />1)  Effectively your #1.  Run the CPU for one cycle, then run all other subsystems enough to catch up.  Easy, reliable, but slow<br /><br />2)  Use the tried and true 'catch up' system.  Run the CPU until it does something 'interesting' like a register read or write -- then run the appropriate subsystems enough to 'catch up' to the CPU timestamp.  IRQs/NMIs, and other things that cut into CPU behavior (like DMC stole cycles) can be predicted.... so you'd run the CPU up until the next interesting event (either end of frame, or NMI, or whatever).<br /><br />This can be accomplished with a timestamp system, where you scale up all subsystems to a common time base.  On NTSC, you can give your CPU cycles a time base of 3 (every CPU cycle incs the timestamp by 3), and a corresponding PPU time base of 1.  On PAL, you can give CPU=16 and PPU=5 ... giving the appropriate 3.2:1 ratio<br /><br /><br />Example, you run the CPU for a while, then it writes to $2000 after 100 cycles.... putting it at a timestamp of '300'.  Your $2000 handler will then run the PPU up to that timestamp (effectively running it for 300 cycles) to catch up, then the write is performed, then you continue with the CPU.<br /><br /><br />Tricky part is IRQ/NMI prediction.  And the skipped cycle on odd NTSC frames.  But those are all workable with some effort.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>