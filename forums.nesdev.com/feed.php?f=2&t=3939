<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=3939" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-09-17T12:27:06-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=3939</id>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-09-17T12:27:06-07:00</updated>
<published>2008-09-17T12:27:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37221#p37221</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37221#p37221"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37221#p37221"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Who needs C++ for object-oriented programming? You're doing it in assembly!<br /></div><br />Well, there are some similarities... for example, the shared routines used by the objects could be methods of a class the objects belong to. But there are still a lot of object oriented concepts missing, such as encapsulation. I'm trying to group all the routines and variables related to each subsystem isolated from everything else, because this is where I screwed up last time. I was messing with variables when I shouldn't, reusing RAM that wasn't yet free... So I'm trying to recode everything as object oriented as possible to avoid such problems.<br /><br />Like I said, it is helping a lot. But I can't have everything in the game be isolated objects, it's just not practical in assembly. The camera, the level map, and stuff like that (mostly things of which there is only one instance) must remain hardcoded into the main program.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Sep 17, 2008 12:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-09-17T10:01:58-07:00</updated>
<published>2008-09-17T10:01:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37213#p37213</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37213#p37213"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37213#p37213"><![CDATA[
Yeah somewhat. If it can be more efficient or easier to code I have nothing against it altough I love assembly. I personally just use "objects" for enemies and simpler handling of them, not anything to do with multi-taking OS, or object oriented or anything. It's true that complex BG bosses should interact with background as well.<br /><br />I still find that object-oriented programming is SO different to regular assembly programming it is almost impossible to convert from one type to another (I haven't much experence with object-oriented but enough to have a small idea).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Sep 17, 2008 10:01 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-09-17T09:27:32-07:00</updated>
<published>2008-09-17T09:27:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37201#p37201</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37201#p37201"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37201#p37201"><![CDATA[
Who needs C++ for object-oriented programming? You're doing it in assembly!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Sep 17, 2008 9:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-09-16T20:06:51-07:00</updated>
<published>2008-09-16T20:06:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37192#p37192</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37192#p37192"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37192#p37192"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Yeah that would be an advantage for RAM usage, but the RAM I allocate to object have predefined uses (like Position, FrameAnimation, HitPoints, etc...) that only make sense with enemies or projectiles.<br /></div><br />I just give each object a number of bytes, how they are used is up to the objects. Of course, there are a few supporting functions that expect certain things to be on certain locations... like, an acceleration routine must have access to the object's speed, but if an object doesn't move it may use the byte normally used for speed for anything else, as long as it doesn't call the acceleration routine (and it won't, because it doesn't move).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also the routine that draw sprites is NOT in the objects themselves for me, it's in the main code and looks at object's variable to know what to draw. I like this system, but objects that aren't supposed to be visible are forced to use an "empty" sprite, and to have a dummy value for their HP, reward score, etc... But this isn't really an issue.<br /></div><br />I don't have this problem because although the actual sprite drawing is not part of the object code, each object that wants to be displayed calls the routine that draws sprites sending the index of the object slot as a parameter. If they don't call the routine, they don't get drawn, it's pretty simple.<br /><br />I have to give objects the power to use their RAM and call supporting routines at will because there are so many kinds of objects. Some are rendered with sprites, some with background tiles, some with both, and some aren't rendered at all. Some are relative to the level, some relative to the camera (HUD elements). Each one has to know what they are and make use of the appropriate supporting routines.<br /><br />Maybe this is why I don't think it's weird to have the object system active during the whole game, because my objects are already pretty generic, while yours were created very specifically for in-game use.<br /><br />Today I coded a bit and was already able to see the benefits of incorporating some previously hardcoded behaviors as objects. Before I used some really complex code to load the level and draw the first screen, but now I use objects that take care of the heavy work of loading and drawing levels, and I can do it all inside the main loop, without a bunch of weird, repetitive surrounding code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Sep 16, 2008 8:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-09-16T12:14:04-07:00</updated>
<published>2008-09-16T12:14:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37187#p37187</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37187#p37187"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37187#p37187"><![CDATA[
Well, using multithread/object system outside of gameplay really sound weird to me. Then you're somewhat just coding an operating system and programms running into them.<br />Yeah that would be an advantage for RAM usage, but the RAM I allocate to object have predefined uses (like Position, FrameAnimation, HitPoints, etc...) that only make sense with enemies or projectiles. I plan to use some other non-enemies and non-projectiles objects like a door that would only open on some conditions or something like that.<br /><br />Also the routine that draw sprites is NOT in the objects themselves for me, it's in the main code and looks at object's variable to know what to draw. I like this system, but objects that aren't supposed to be visible are forced to use an "empty" sprite, and to have a dummy value for their HP, reward score, etc... But this isn't really an issue.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Tue Sep 16, 2008 12:14 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-09-15T13:17:31-07:00</updated>
<published>2008-09-15T13:17:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37169#p37169</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37169#p37169"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37169#p37169"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />So in summary, this method is good for enemies or other graphical events, but bad for things that should normally be done by the core game engine, right ?<br /></div><br />Initially I planned to use the object system only for game entities such as player, enemies, items and so on. Things like fading were hardcoded to the main loop, if not only to spare the RAM an extra object would use (I can have 32 active objects).<br /><br />But recently I read about Another World, because of all that talk about vector FMVs (revolving around Celius' engine). Well, it seems to use objects for everything, as well as a simple made up scripting language (the only programming the objects are allowed to have). Take a look at the <a href="http://www.anotherworld.fr/anotherworld_uk/another_world.htm" class="postlink">author's page</a> and you'll see (relevant part <a href="http://www.anotherworld.fr/anotherworld_uk/page_realisation.htm" class="postlink">here</a>). That seemed like a pretty simple way to code a game, although I don't think I'd have the guts to try something so extreme.<br /><br />However, that still inspired me to make more use of the object system, having it active at all times (not only during the main game), so that the title screen, title cards and other screens could benefit from it. And it seems like it's a real benefit to give tasks to individual objects instead of hardcoding loops, recycling RAM locations (since each object receives a slice of RAM, they have quite a bit to work with) and so on.<br /><br />So now I plan on having my title card elements as objects, the level loader as an object, and that will make the main code smaller and simpler. Of course there are many things that remain hardcoded. Anyway, I'm still figuring out if this will work as well as I expect. I'll let you know.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So eventually you decided that handling objects with a jump table in fuction of their "state" was better than doing some kind of multithreading ?<br /></div><br />The Mega Drive Sonics use jump tables, and the games work quite well. I'm still not sure about the best method. The multithread way is good for objects whose code flows naturally from one part to the other. If it's not like that, You'll need a lot of JMP instructions followed by addresses that would use as much space as a jump table when added up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />they coded the game with the most complex gameplay at their time, containing enemies which a shielded side, enemies that follow other enemies and act togeter, and often complex interaction with the background<br /></div><br />Doesn't seem terribly complex to me... Following enemies could be done with a shared function that changes the coordinates of an object based on another one's, and each enemy holds the index of the one it follows in order to be able to call this routine. Interaction with the background should also use shared routines, often used by the player (usually the most complex object), but an occasional complex enemy could make use of them too.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Mon Sep 15, 2008 1:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-09-15T09:02:02-07:00</updated>
<published>2008-09-15T09:02:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37161#p37161</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37161#p37161"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37161#p37161"><![CDATA[
So in summary, this method is good for enemies or other graphical events, but bad for things that should normally be done by the core game engine, right ?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I got rid of it at the cost of the ease of code, indeed... Confused<br /></div><br />So eventually you decided that handling objects with a jump table in fuction of their "state" was better than doing some kind of multithreading ?<br /><br />Personally, the more I think about it the more I find the jump table approach horrible. However that's what Konami and Nintendo seems to do, they LOVE using jump tables and do it all the way arround. Their game engines are all done inside the NMI routine (no main thread) and they use jump table to do different things in frame, something I tried earlier in my coding life and found absolutely horrible to do.<br /><br />Probably the programmers at Konami did found a programming approach to make jump tables more efficient/easier to manage, because they coded the game with the most complex gameplay at their time, containing enemies which a shielded side, enemies that follow other enemies and act togeter, and often complex interaction with the background (typically seen in games from the <em>Gradius</em> series).<br />I feel like I missed something about jump tables.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Sep 15, 2008 9:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thoduv]]></name></author>
<updated>2008-09-14T13:39:08-07:00</updated>
<published>2008-09-14T13:39:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37134#p37134</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37134#p37134"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37134#p37134"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Stopping a process isn't hard when it's an enemy, it's just stopping whenever it goes off-screen (automatically) or when the enemy is defeated and has finished exploding.<br />For non-enemy process (script, shading, ?) this would seems harder to know when they start and when they finishes.<br /></div><br />Yeah, when graphical/game engine objects are directly tied to their coroutines, it should be easy.<br />Problems come when coroutines are only generic functions. More problems come when they need to allocate memory, or make changes that will have to be reversed when they end (may they end in unexpected conditions), etc.<br /><br />In my case, handling fadings (for example) with this system was a complete pain, because I needed to know the state of fading before starting another one: so I had to keep a pointer of the fading thread, but that way, I couldn't automatically delete the memory allocated for thread, or I will lose its state information. Moreover, I had to take care it was correctly restoring temporary palettes, to free the stack AFTER it has really finished, etc. Perhaps my design was bad after all... mmm.. perhaps I should give this method another try ?<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Could you please explain how you got rid of it and still get the features/ease of code it allows ?<br /></div><br />I got rid of it at the cost of the ease of code, indeed...  <img src="http://forums.nesdev.com/images/smilies/icon_confused.gif" alt=":?" title="Confused" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3675">thoduv</a> — Sun Sep 14, 2008 1:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-09-14T07:36:47-07:00</updated>
<published>2008-09-14T07:36:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37127#p37127</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37127#p37127"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37127#p37127"><![CDATA[
Thanks for sharing.<br /><br />Yes, you have to allocate an arbitrary number of stack for an object, even if it's not going to allocate half of it. There should be a way to dynamicly change stack size, but this sounds complicated.<br /><br />Stopping a process isn't hard when it's an enemy, it's just stopping whenever it goes off-screen (automatically) or when the enemy is defeated and has finished exploding.<br />For non-enemy process (script, shading, ?) this would seems harder to know when they start and when they finishes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Finally, tired of slowdowns, data aborts, infintes loops, and other funny things, I decided to get rid of this system in many places. I'm still using it only when it makes the code a LOT more simpler.<br /></div><br />Could you please explain how you got rid of it and still get the features/ease of code it allows ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Sep 14, 2008 7:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thoduv]]></name></author>
<updated>2008-09-14T04:39:13-07:00</updated>
<published>2008-09-14T04:39:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37123#p37123</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37123#p37123"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=37123#p37123"><![CDATA[
I just wanted to share my experience with this concept of what I call "virtual threads", but is generally called (in higher level languages) "coroutines".<br />When programming on the GBA, I was bored to use "structs" to store parameters and functions to be called each frame when managing my objects.<br />So, I wrote a simple context switcher in ARM, and allocated a stack for all my objects. I could then create routines, which were yielding to the main "thread" via "wait_frame()". This main thread had to resume these routines at each frame.<br />It worked quite well, and I had re-written a lot of parts of my engine with this design (namely fadings, transitions, objects collisions, script system, a lot of complex animations, etc). But some problems arose:<br /><br /> 1) Memory usage: allocating multiple stacks IS a real memory issue (at least, on GBA, where a lot of data is pushed to memory). Indeed, you have to allocate an arbitrary amount of memory, even if the routine is not going to use half of it. You can also easilly run into stack overflows. This may or may not be a problem on NES, depending on functions calls, and ... on NMI, which could push a lot of things on the stack by itself (PC and status register), then usually A,X and Y in the implementation (so, expect a minimum stack of 6 bytes when NMI is enabled).<br /> 2) Halting these couroutines in a clean way is not that easy. Even worse: knowing WHEN they had been killed/halted or have finished is no easy task, and need a lot of pointer work. Perhaps it can be simplified on NES to work around these problems.<br /> 3) Context switching added a little overhead for object processing.<br /><br />Finally, tired of slowdowns, data aborts, infintes loops, and other funny things,  I decided to get rid of this system in many places. I'm still using it only when it makes the code a LOT more simpler.<br /><br />EDIT: Sorry, I hadn't read the entire thread when I wrote that, so I didn't see the solutions you used to solve some of the problems I reported, and I must say they look very interesting !<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3675">thoduv</a> — Sun Sep 14, 2008 4:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-08-21T13:03:30-07:00</updated>
<published>2008-08-21T13:03:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=36195#p36195</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=36195#p36195"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=36195#p36195"><![CDATA[
As the "no pushed data on stack limitation" was still too limitating for bosses (enormous waste of memory doing the same thing again and again because thread stupping inside a subroutine call were forbidden) I took some measures to improve the multithreading programm :<br />- A individual stack is simuled from each objects, allowing more flexible subroutine calling and data pushing in their object code<br />- The stack is restored from object memory to the real stack before running object's thread, and pulled from the real stack to object memory after the object's frame is done<br />- When an object is created, it's always createed with a stack of 2 bytes containing the object's "reset" entry point adress (minus one)<br />- By default, objects can stop their thread only if 8 bytes or less are pushed on the stack. Howver, during their thread, they have standard 256-byte stack limit, and so can do heavy subroutine call and be interupted ad nauseum.<br /><br />Object thread jump subroutine :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">     lda ObjectActive.w,X<br />     beq ++<br />   tsx<br />   sta ObjectStackPointer<br />   lda ObjectStackLenght.w,X      ;Add stack size &#40;2-8&#41; to pointer<br />   tay<br />   clc<br />   adc ObjectStackIndexTbl.w,X<br />   tax<br />-   lda ObjectStack.w,X<br />   pha            ;Push bytes from object's stack<br />   dex<br />   dey<br />   bpl -<br />   ldx DataCtr<br />++   rts   ;Go to object thread OR return to main code</div><br />When the object thread is done it can either "rts" to do the same frame again, or call the ObjectWait routine shown below :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ObjectPrgmWait            ;An object should either jsr to here<br />   tsx<br />   txa            ;Computes difference between initial stack pointer<br />   eor #$ff         ;And actual stack pointer<br />   clc<br />   adc ObjectStackPointer<br />   ldx DataCtr<br />   sta ObjectStackLenght.w,X   ;Save lenght of Object's stack &#40;minus one&#41;<br />   tay<br />   lda ObjectStackIndexTbl.w,X   ;Get stack index of our object<br />   tax<br />-   pla            ;Pull all bytes from the CPU stack<br />   sta ObjectStack.w,X      ;To the object's virtual stack<br />   inx<br />   dey<br />   bpl -<br />   rts<br />ObjectStackIndexTbl<br />   .db $00, $08, $10, $18<br />   .db $20, $28, $30, $38      ;Allow 8 bytes per stack per task &#40;by default&#41;<br /><br /></div><br /><br />Another alternative would be to assign different stack pointer to each objects. This would decrease execution time as only SP have to be modified, but it would be limitating to a small amount of stack on each thread, and would dissalow the thread to just "rts" in order to do the frame again.<br /><br />Next step would be to put the "ObjectStackIndexTbl" to RAM and modify the values in function of how many stack bytes the thread actually needs, so that a small thread could share it's stack with a big thread if needed. Also, a message buffer from thread to thread could be implemented.<br />However I don't have any idea how to implement those. Any ideas ?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Aug 21, 2008 1:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2008-02-28T10:52:49-07:00</updated>
<published>2008-02-28T10:52:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31304#p31304</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31304#p31304"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31304#p31304"><![CDATA[
I really thing there is almost only advantage in this multithread point of view as opposed to the jump table.<br /><br />1 - This save the space needed from the jump table which is big for complex objects like bosses<br />2 - This saves the bytes and time to do a million of checks to know in which state the object is before actually acting<br />3 - This save the bytes needed to write new states and sometimes new values of counters that goes with them<br />4 - You'll end up with more natural code, easy to write instead of messy headache code<br /><br />The only true adventage of the jump table approach is that if you want an object to always do something regardless of its state, but want only one object to do it, you can just place it before the variable jump. If you do the linear multithreading approach you'll have to call a routine doing it possibly a couple of time just before or after the "yeild" call, which can waste bytes.<br /><br />To handle collision I have not this much problem, each object is free to do anything, so it will just call the "standard" collision code, which check for collision with player and that differently if he's attacking or not, etc...<br />Each object is free to call it's own variant of collision code, which can make it invinsible but still able to hurt the player (not calling it would result in a totally transparent enemy), or to have a shielded side as said above.<br />When an enemy is hurt, it sets a counter which freezes the enemy for a little while (making it's AI code not run at all for a couple of times), which effecively made it look "stunned". Then the enemy periodically check if it's damage is more than a certain ammount, and deletes its own if so.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Thu Feb 28, 2008 10:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-02-28T03:26:11-07:00</updated>
<published>2008-02-28T03:26:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31297#p31297</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31297#p31297"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31297#p31297"><![CDATA[
Right, so you have to explcitly mark states, losing some of the advantage of the threading. Next, how do you transition between states like this? The normal routine handles these transitions directly, for example the change from left to right. If this object gets hit, say it gets knocked back a bit and flashes for a while. Does this mean the main routine is interrupted while this action occurs? It seems that would require two program counter values: one for the main, and one for this external action. Then you need a way to transition back to the main routine.<br /><br />It'd be great if we had a game with fairly sophisticated enemy objects to try rewriting in this style, to see what issues really come up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Feb 28, 2008 3:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2008-02-28T00:39:35-07:00</updated>
<published>2008-02-28T00:39:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31292#p31292</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31292#p31292"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31292#p31292"><![CDATA[
In that case, the only way I can think of to do it is to provide some kind of indication as to what behavior is necessary. I mean, this code still is a state machine, it just uses a different method of determining which state it's in (entry points, instead of a single variable).<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />    lda #20<br />    sta counter<br />    lda #00<br />    sta state<br />left:<br />    jsr yield<br />    dec sprite_x<br />    dec counter<br />    bne left<br />    <br />    lda #20<br />    sta counter<br />    lda #01<br />    sta state<br />right:<br />    jsr yield<br />    inc sprite_x<br />    dec counter<br />    bne right<br />    <br />    jmp loop</div><br />You only have access to what you provide, and even if you're not using a state variable to determine which state to use, you can still use one to indicate which state is active, for the benefit of other code.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Thu Feb 28, 2008 12:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-02-27T23:17:59-07:00</updated>
<published>2008-02-27T23:17:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31291#p31291</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31291#p31291"/>
<title type="html"><![CDATA[VERY easy way to make code for objects]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=3939&amp;p=31291#p31291"><![CDATA[
Yes, this seems to be a problem. An object's response to external events must sometimes depend on its state. If some of the relevant state is encoded into the saved program counter, it won't be easy to decode and act on. If this were solved by having each yield call return any event that occurred during the call, the object would have to check this after each yield call, which would litter code with lots of similar branches. The basic problem seems to be that you really have <em>two</em> axes of execution: the behavior of the object in absence of external events, and the response to external events. The response to the same external event might be different at different points in the first axis. Execution only goes along one axis, so you need a state machine to handle two.<br /><br />As a concrete example, consider an object which is shielded on one side and vulnerable on the other. If it were moving left and right, an attack from the left side would have a different effect depending on its direction. If movement were coded something like<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />    lda #20<br />    sta counter<br />left:<br />    jsr yield<br />    dec sprite_x<br />    dec counter<br />    bne left<br />    <br />    lda #20<br />    sta counter<br />right:<br />    jsr yield<br />    inc sprite_x<br />    dec counter<br />    bne right<br />    <br />    jmp loop</div><br />how would you determine the result of an attack? The encoding of the direction it's facing would be tied up in the program counter value.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Feb 27, 2008 11:17 pm</p><hr />
]]></content>
</entry>
</feed>