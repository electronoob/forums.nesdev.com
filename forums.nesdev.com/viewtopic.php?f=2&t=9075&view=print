<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Level data compression idea. 50-75% compression</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Level data compression idea. 50-75% compression</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9075">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9075</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Arkonviox</b> [ Fri Jul 06, 2012 12:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Level data compression idea. 50-75% compression</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have an idea on how to compress level data on the NES that I believe could achieve 50% or more compression. In Ecco the Dolphin for PC, the game is made up of tiles that like the NES are 8x8 in size, the levels on the other hand are made up of large blocks made up of 8 tiles, if I were to use a screen made up of blocks instead of tiles, than a single nametable could be filled up with level data that is in total 240 bytes, instead of the normal 960 bytes, technically that means I compressed the level by 75% but you got to account that I may have 50-100 blocks each 16 bytes (80-160 bytes total).
<br />
<br />I want to implement this but at the moment I can't see any flaws. 
<br />
<br />I guess my question is, are there better ways of compressing level data, keep in mind I'm implementing a multi-directional scroll.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Jul 06, 2012 1:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Errrr....
<br />There is nothing new here. 99% of NES games in existence uses metatiles...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Arkonviox</b> [ Fri Jul 06, 2012 1:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I figured that would be the case but would/could metatiles achieve 50% compression or more if used in that manner?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jul 06, 2012 1:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The tech that you just described is used everywhere, including most of NES games. Compression ratio depends from size and number of the metatiles, generally it gives good ratios for medium size blocks (typically 4x4 tiles) that reused all the time. If you have many unique blocks, this won't work well.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Arkonviox</b> [ Fri Jul 06, 2012 1:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, interesting! I'm trying to get a multi-directional scroll off the ground, but before I go jumping into making it work, I figured I should come up with a way to shrink the data down as much as possible. I guess what I'm wondering is if it could work better than lz77 on raw data, or is it about the same.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Jul 06, 2012 1:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />"Metatile" is the name for any kind of map structure that consists of multiple physical 8x8 tiles.  The most common size is 16x16 pixels (2x2 physical tiles), mainly because that's also how the attributes work.  Some games (Battletoads) use metatiles consisting of 4x4 physical tiles.
<br />
<br />Whenever I say "tile", I'm usually referring to the 16x16 pixel squares that people also call Metatiles.
<br />
<br />Map compression techniques used in games vary.  Some games use RLE (Run-Length encoding) for the maps (Dragon Quest series, Zelda 2, etc).  Other games place variable-sized 'objects' that expand to multiple tiles and can be positioned freely (Super Mario Bros series, Zelda 2, Metroid, etc.)
<br />Some games use larger structures of tiles, like 2x2 (mega man 3), 4x4, 8x8, 16x14 (single full screens that can be reused as you scroll the map around), 16x16, etc.
<br />Many games just simply use uncompressed tiles placed in ROM.
<br />Some games use something homegrown and original.  Lolo uses a scheme where it does RLE-like runs of whatever tile is above the current tile, effectively making it LZ77 with a fixed offset.
<br />
<br />
<br />Some games don't use metatiles at all.  Like racing games, pinball games, or other kinds of games where there are no tiled obstacles to interact with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Jul 06, 2012 1:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />lz77 is difficult to use for a free directional scroll. It may work for one-way scroll, but you would need a modification that refers to packed data instead of depacked, you can't store all depacked data because NES does not have enough RAM for this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Arkonviox</b> [ Fri Jul 06, 2012 1:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think the reason I didn't hear much about metatiles in NES games is either the folks here had more efficient methods, or didn't use it but may have been talked about once.
<br />
<br />I've talked with the creators of Super Bat Puncher and Nomolos, one uses lz77 while the other uses no compression, I was gonna use no compression myself but than I realized how huge a single screen of level data was, and even though I'll have space for it, I don't want to write myself into a corner later. I'm working on a multi-directional scroll right now and I was thinking before I really start working on it, I should figure out a way to compress this data down. After what I heard here, it seems it will be well worth it, glad to hear it's common! I came to the right place <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />Shiru: Wow that does help to know, it was one of the options I was considering but I can already tell it won't be effective decompressing 4x4 tiles.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Jul 06, 2012 2:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm making a multidirectional scroller like you plan to.
<br />
<br />Disclaimer: I am only using test tiles with slopes right now, so they allow me to reuse things much easier than actual graphics would. (The test tiles look sort of like this: <!-- m --><a class="postlink" href="http://tcrf.net/File:StriderArcTestTileset.png">http://tcrf.net/File:StriderArcTestTileset.png</a><!-- m -->)
<br />
<br />My levels contain a 3 byte header and a list of 256x256 screens which are made of an RLE compressed list of 32x32 metatiles which are made of four 16x16 metatiles which are made of 4 8x8 metatiles and a collision byte.
<br />
<br />I have 5 levels.
<br />
<br />Level 0 is 15x9 (135) screens.
<br />Levels 1-3 are 2x2.
<br />Level 4 is 5x2.
<br />
<br />All of them use the same screenset, 32x32set, and 16x16 set. 
<br />
<br />Currently I'm using 82 unique screens, which take an average of 29 bytes each. Obviously 135+4+4+4+10 &lt; 82, so I am reusing screens but not as excessively as it may appear. For instance, the sky screen which is just filled with blue is used for the entire top row of level 4. I have a similar solid screen that takes up quite a few parts of Level 0. I try not to reuse "gameplay" screens. <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  Because I wanted RLE without using an extra byte for tiles that aren't compressed, I reserved the high bit so there can only be 128 32x32 tiles. A screen with all the same tile (like the sky screen) is two bytes, but this is obviously very rare.
<br />
<br />A level just takes as many bytes as screens it's made out of+3 for the header. Every used 16x16 tile is 5 bytes (one extra because of a reference to collision data), every 32x32 is 4, and screens are variable.
<br />
<br />All the levels with all the sets takes up 2998 bytes. It breaks down like this:
<br />
<br />(Map Editor Output)
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Export Started:<br /><br />Working on bank 0...<br /><br />Found level 0_0...<br />Looking for levels that use the same screenset...<br /><br />Exporting 16 set 0 to bank 0 as set 0...<br />Size was 235, Bank 0 is now 235<br /><br />Exporting 32 set 0 to bank 0 as set 0...<br />Size was 248, Bank 0 is now 483<br /><br />Exporting screen set 0 to bank 0 as set 0...<br />Size was 2343, Bank 0 is now 2826<br /><br />Exporting level 0_0 to bank 0 as level 0...<br />Size was 138, Bank 0 is now 2964<br /><br />Exporting level 0_1 to bank 0 as level 1...<br />Size was 7, Bank 0 is now 2971<br /><br />Exporting level 0_2 to bank 0 as level 2...<br />Size was 7, Bank 0 is now 2978<br /><br />Exporting level 0_3 to bank 0 as level 3...<br />Size was 7, Bank 0 is now 2985<br /><br />Exporting level 0_4 to bank 0 as level 4...<br />Size was 13, Bank 0 is now 2998<br /><br />Looking for levels that use the same 32set...<br /><br />Looking for levels that use the same 16set...<br /><br />Working on bank 1...<br /><br />No level uses bank 1.<br /></div>
<br />
<br />If I also RLE'd the list of screens in the levels, I could probably nickel and dime like... 16 bytes, which isn't worth the extra decoding time. In some ways I'm worried, because actual graphics may raise the average screen size and this is still with no enemies. I also have sets for other things that my collision byte refers to, but that stuff is actually pretty small. (And unnecessary if you're not using slopes.)
<br />
<br />In any case, those are some hard numbers for you. Hope they're useful. I'd post pictures of the maps too, but... my map editor actually can't do that yet and I ain't posting a rom anytime soon.
<br />
<br />Edit: Heh. I actually thought to do the math for (mostly) uncompressed.
<br />
<br />82 unique screens * 1024 (my screens are 256x256 not 256x240) = 83968.
<br />
<br />2343(size of my screens alone)/83968*100 = 2.79% I guess the savings are pretty significant and will only get larger with more unique screens. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />
<br />
<br />edit: Well, there's an error in the math, since the screens obviously rely on the 16x16 sets and 32x32 sets which take up space. So it's more like 3.5%.  <img src="./images/smilies/icon_cry.gif" alt=":cry:" title="Crying or Very sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jul 06, 2012 2:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Arkonviox wrote:</div><div class="quotecontent">I've talked with the creators of Super Bat Puncher and Nomolos, one uses lz77 while the other uses no compression</div>
<br />I'm pretty sure Nomolos uses metatiles though. Super Bat Puncher can afford to use lz77 (on top of metatiles), because it has extra 8KB of WRAM on board where it can decompress the map.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 06, 2012 5:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Super Mario games use object compression, which has some of the advantages of LZ77 while retaining multidirectional access. Each screen is made up of objects, such as a platform of length <em>L</em> whose top left corner is at (<em>x</em>, <em>y</em>), and whenever the scroll reaches a row or column, it's checked against the objects that could overlap it. It's like the difference between Illustrator or Inkscape on the one hand and Photoshop or GIMP on the other. Play with Lunar Magic for a while to get an idea of how objects in SMW work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jul 06, 2012 7:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />240 bytes per screen is still pretty huge for platformers or RPGs, which typically have very large maps and require thousands of unique screens. A common solution is to use larger blocks, so that each screens uses even less space. Of course this increases the space required by the blocks themselves, but you can still subdivide the blocks into smaller blocks to minimize that. Several levels of blocks obviously result in level maps that are more complex to decode, but the compression is worth it.
<br />
<br />Another common way to minimize the space required by level maps is to make them object-based, like in SMB1, so that there's a direct relation between the complexity and the size of each screen (vs. the other way where all screens occupy the same amount of bytes).
<br />
<br />Common compression schemes such as RLE and LZ77/LZSS/LZW typically require a lot of RAM (because you can't start decoding at any point of the stream, so larger blocks of data must be processed at a time), so they are more common in games that have extra RAM on the cart.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Arkonviox</b> [ Fri Jul 06, 2012 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think I like the method you guys have mentioned super mario using, object based, I could see it being very effective as I could easily expand it later if I needed to. 
<br />
<br />Kasumi: That's a pretty awesome scheme you got there, I will probably explore such methods down the road, but it's very interesting to see what you did there.
<br />
<br />thefox: I think you may be right, he mentioned to be he used no compression but I can't see how he didn't employ metatiles, I've put together two nametables worth of data already just to test a simple scroll test and already I think something needs to be done before I proceed with the engine design I was thinking about.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Jul 06, 2012 5:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ultima 6 for MS-DOS used 8x8 tile blocks (Chunks) for its maps, and an overworld map of 128x128 chunks.  Up to 1024 chunks were allowed, so that's 10 bits to select each chunk.  Underworlds were 64x64, and there were four of them.  So we effectively have two 128x128 maps, and 1024 definitions for the chunks themselves.  40960 bytes for "maps", and 65536 bytes for the "chunks".  The maps and chunks themselves were not compressed at all.
<br />This game had a very large world map, and it fit in 104k of storage.
<br />
<br />Of course, Ultima 6 also had additional layers of objects that went on top of the map.
<br />
<br />I'm just trying to say don't rule out maps built out of larger blocks of tiles.  The Sonic the Hedgehog games also used this structure.  Sonic 1 used screen sized (256x256 pixel) sized blocks, and Sonic 3 used 128x128 pixel-sized blocks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Fri Jul 06, 2012 6:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is my idea of a level-data format:
<br />
<br />Overhead bytes:  nnnniiii
<br />i - object id
<br />n - number of objects
<br />
<br />That's one byte for each unique object in the level or screen.  i can also index an object set for that area instead of all objects in the game.
<br />
<br />Position bytes: yyyyxxxx; If 5 or 6 bits are needed, store the extra bits for several objects in a row in the same byte.  That way 8 objects can be stored in 10 bytes using 5-bit position or 4 objects for 6-bit.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>