<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 6502 ASM trick</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">6502 ASM trick</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3682</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>7</strong> of <strong>7</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sat Jan 26, 2013 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Flipping the MSB seems the best way to deal with comparing to a constant (pre flipped). But otherwise I would refer to the link tepples posted a few post back. It has a method using N and V flags that avoids using a temp variable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Mar 22, 2014 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I revive this old thread with some recent thinkings about the use of the identity table by tokumaru (1st post in thread, also <a href="http://wiki.nesdev.com/w/index.php/Synthetic_Instructions#X.2FY_as_Operand" class="postlink">see here</a>).<br /><br />Basically, you can do these operations:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">((X or Y) ± cst) &#91;OP A&#93; → A<br />(X ± cst) → Y<br />(Y ± cst) → X</div><br /><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cst</tt> is an unsigned constant that you want to add/substract to X or Y;<br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">[OP A]</tt> is some optional ALU operation with A; obviously, if OP is <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">cmp</tt>, A isn't affected.<br /><br />The restriction is that the addition/substraction of X/Y with the constant must not overflow/underflow; otherwise the result is undefined. If one want (((X or Y) ± cst) &amp; 0xFF) and never have undefined result, they'll need an identity table twice the size, or it could be done in hardware with a non-inverting tri-state buffer that connects A0-A8 to D0-D8, output would be enabled with reads into a memory area of interest.<br /><br />As you might have guessed, these pseudo-instructions use absolute indexed addressing, and the arithmetics are constant offsets added to the identity table address. Undefined results happen simply when the accesses goes out of the table. Assuming the table is page-aligned, when a constant is <em>added</em> to X or Y, it takes 4 cycles, whereas with the substractive case, it takes 5 cycles because of the page crossing.<br /><br />Some examples of use: (idt is the identity table)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldy idt+4,X&nbsp; &nbsp; &nbsp;; Y = X + 4<br /><br />&nbsp; &nbsp; cmp idt-1,Y&nbsp; &nbsp; &nbsp;; Compare A with Y - 1, Y is != 0<br /><br />&nbsp; &nbsp; adc idx+3,X&nbsp; &nbsp; &nbsp;; ADC A with X+3</div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">HideSprites:&nbsp; &nbsp; ; Make all sprites in OAM invisible (in next sprite DMA)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Could be modified to hide some sprites only<br />&nbsp; &nbsp; lda #$FF<br />&nbsp; &nbsp; ldx #0<br />:&nbsp; &nbsp;ldy idt+4,x<br />&nbsp; &nbsp; sta OAMbuff,x<br />&nbsp; &nbsp; ldx idt+4,y<br />&nbsp; &nbsp; sta OAMbuff,y <br />&nbsp; &nbsp; cpy #$FC<br />&nbsp; &nbsp; bne :-<br />&nbsp; &nbsp; rts</div>It's possible that the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">HideSprite</tt> routine above is the fastest one without using unofficial opcodes and without total unrolling (and without clearing a bit in $2001, you fools!). There's very little unrolling here, just what's necessary so it works.<br /><br />EDIT: fixed (enhanced) code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Mar 22, 2014 2:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">[...]the fastest one without using unofficial opcodes and without total unrolling</div><br />Who said total unrolling was required ?<br />What you're doing is 2 loop iteration in one, in which you gain roughly 50% of the speed you gain in total unrolling.<br />If you make 4 loop iteration in one, you gain 75% of the speed you gain in total unrolling.<br />There's really no point in going anything further than that...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&#91;...&#93; blah blah initialization<br />_loop<br />sta $200,Y<br />sta $240,Y<br />sta $280,Y<br />sta $2c0,Y<br />dey<br />dey<br />dey<br />dey<br />bne _loop<br /></div><br />If this isn't fast enough then some other part of your code has a major problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 22, 2014 3:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Jarhmander's code can start the clear at any X position, not just 0, which allows using it to clear the rest of the sprites after the ones that are already displayed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Mar 22, 2014 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 6502 ASM trick</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I mentioned unrolled loops because obviously it would be faster (and of limited utility). Also, I tried to showcase a useful example, but it turns out that even when getting rid of the last cpy (by putting a 0 byte after the identity table, a bit of a hack) it is as fast as the following with the same number of stores in the loop:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ldx #0<br />&nbsp; &nbsp; clc<br />:&nbsp; &nbsp;lda #$FF<br />&nbsp; &nbsp; sta OAMbuff,x<br />&nbsp; &nbsp; sta OAMbuff+4,x<br />&nbsp; &nbsp; txa<br />&nbsp; &nbsp; acd #8<br />&nbsp; &nbsp; tax<br />&nbsp; &nbsp; bcc :-</div><br />32 iterations, 21 cycles for the loop. Bad example, then. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>7</strong> of <strong>7</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>