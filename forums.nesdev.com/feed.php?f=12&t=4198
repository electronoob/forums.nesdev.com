<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=4198" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-07-04T12:28:05-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=4198</id>
<entry>
<author><name><![CDATA[neviksti]]></name></author>
<updated>2008-07-04T12:28:05-07:00</updated>
<published>2008-07-04T12:28:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34632#p34632</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34632#p34632"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34632#p34632"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />(tangent) Doesn't the PHA modify RAM in the SNES in a way that the game could be affected by?<br /></div><br />Yes it is possible to detect, however I don't know of any instruction that changes the databank except PLB.<br /><br />The only way they could have fixed it would be to map some SRAM into bank 0 and use that for their temporary stack.  The copier already has the capability to do this, so it could indeed be avoided.  But the assumption that there is room on the stack is a reasonable assumption... rarely if ever would a programmer store data literally right below the stack.<br /><br />EDIT: Just remembered, MVN and MVP also affect the databank register.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=716">neviksti</a> — Fri Jul 04, 2008 12:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2008-07-04T11:19:11-07:00</updated>
<published>2008-07-04T11:19:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34630#p34630</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34630#p34630"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34630#p34630"><![CDATA[
<div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><br />One of the first things it does is lda #$06 / pha / plb  in order to make the databank $06 which is the copier's SRAM.  It doesn't want to mess with any of the SNES memory so as not to mess with the running game it interrupted...<br /></div><br />(tangent) Doesn't the PHA modify RAM in the SNES in a way that the game could be affected by?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Fri Jul 04, 2008 11:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kammedo]]></name></author>
<updated>2008-07-04T01:43:13-07:00</updated>
<published>2008-07-04T01:43:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34623#p34623</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34623#p34623"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34623#p34623"><![CDATA[
<div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><br />When SF7 sees the joypads being read, it literally inserts code by replying to the next opcode requests with a BRK command... at this point it is in "bios mode".  So the interrupt vector is taken from the bios code and the interrupt code in the bios is executed.  One of the first things it does is lda #$06 / pha / plb  in order to make the databank $06 which is the copier's SRAM.  It doesn't want to mess with any of the SNES memory so as not to mess with the running game it interrupted... therefore it uses its SRAM for everything -&gt; including where it stores the joypad data it reads in.  It then checks the stored joypad data, but since it isn't actually reading RAM, it doesn't get the joypad data but some data in the ROM.  It so happens this causes it to execute some routine.  To return from the routine it tries to execute RTS, and this pulls an address from the "stack" (actually data in the ROM) and ends up transferring execution to my code in RAM.<br /></div><br /><br />Sure, clear as the sky.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3536">kammedo</a> — Fri Jul 04, 2008 1:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neviksti]]></name></author>
<updated>2008-07-04T01:31:05-07:00</updated>
<published>2008-07-04T01:31:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34621#p34621</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34621#p34621"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34621#p34621"><![CDATA[
<div class="quotetitle">kammedo wrote:</div><div class="quotecontent"><br />Thanks neviksti, I'll try to see if this can get the setup running.<br /></div><br />?? What exactly is wrong with your setup?  I don't see how this would help fix anything.<br /><br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent"><br />EDIT : so I guess the way of working is something like that :<br /><br />a) you trigger a pad crossing<br />b) on the VBlank, the GDSF7 checks the pads and does a PLB from the stack, but being the stack pointed to *your* position, it pops *your* address from it and consequently jumps to your location.<br /><br />Correct?<br /></div><br />I'm not sure what you mean by "a)", and as for "b" vblank is not involved (nmi is not even activated here) and the order you wrote is not quite right.<br /><br />When SF7 sees the joypads being read, it literally inserts code by replying to the next opcode requests with a BRK command... at this point it is in "bios mode".  So the interrupt vector is taken from the bios code and the interrupt code in the bios is executed.  One of the first things it does is lda #$06 / pha / plb  in order to make the databank $06 which is the copier's SRAM.  It doesn't want to mess with any of the SNES memory so as not to mess with the running game it interrupted... therefore it uses its SRAM for everything -&gt; including where it stores the joypad data it reads in.  It then checks the stored joypad data, but since it isn't actually reading RAM, it doesn't get the joypad data but some data in the ROM.  It so happens this causes it to execute some routine.  To return from the routine it tries to execute RTS, and this pulls an address from the "stack" (actually data in the ROM) and ends up transferring execution to my code in RAM.<br /><br />Make sense?<br /><br /><br />EDIT:<br /><div class="quotetitle">kammedo wrote:</div><div class="quotecontent"><br />EDIT 2 : <br /><br />suppose I get the reset vector of FEoEZ (which is easy) and set up a program to switch there - should work, shouldnt it?<br /></div><br />I'm sorry.  I'm not understanding what you are trying to do at all.<br /><br />The exploit is not needed to do any of the SPC7110 dumping.  All the dumps so far were done on the SF3 before I figured out this exploit.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=716">neviksti</a> — Fri Jul 04, 2008 1:31 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kammedo]]></name></author>
<updated>2008-07-04T01:05:45-07:00</updated>
<published>2008-07-04T01:05:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34619#p34619</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34619#p34619"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34619#p34619"><![CDATA[
<div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><br />Sure I guess.<br />Here's a chunk from the SF7 code which explains everything<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">exploit_setup:<br />   ; exploit code will actually be run from WRAM<br />   ; to get a &quot;real time save&quot; routine to initiate, we need to:<br />   ;     1&#93; ..wait..<br />   ;           It appears that there is some kind of timer in the SF7.<br />   ;           It only allows the copier to interrupt the flow of code roughly<br />   ;           once per VBlank.  _Also_, it requires a little time before the<br />   ;           very first &quot;saver routine&quot; interrupt.  This confused me quite<br />   ;           a bit at first because removing code that didn't seem to matter<br />   ;           would cause the exploit to fail.  Just keep it in mind.<br />   ;     2a&#93; write #$01 to $4016<br />   ;           or<br />   ;     2b&#93; read $4219<br /><br />   ;move code to WRAM<br />   ldx #ExploitCode<br />   ldy #$0000<br />-   lda.w $8000,X      ;Address adjusted<br />   sta.w $0000,Y<br />   inx<br />   iny<br />   cpx #ExploitCodeEnd<br />   bne -<br /><br /><br />   ;----- try to goto $00:0001<br />   ldx #$B030   ;Setup the stack to a carefully chosen &quot;invalid&quot; value<br />   txs<br /><br />   lda #$01<br />   sta $4016   ;dummy write to trigger a SF7 &quot;save state feature routine&quot; <br />         ;   the invalid stack makes the bank value wrong &#40;code does a PHA / PLB&#41;<br />         ;   so joypad is read incorrectly &#40;accessing ROM instead of SF7 RAM&#41;<br />         ;   it thinks the user requested something &#40;regardless of actual joypad presses&#41;<br />         ;   it starts into some routines, at the first return it &quot;pulls&quot; the<br />         ;      return address from ROM because of where the stack is pointed<br />         ;   thus, it ends up at our code in WRAM<br />         ;     &#40;if you don't trick the SF7 joypad read, it will return to the wrong place<br />         ;      due to the incorrect stack ... but it will return in cartridge mode&#41;<br /><br />   ;jmp.l $000001 ;--test in emulators<br /></div><br /><br />NOTE: I am really not sure if the execution is redirected to $00:0000 or $00:0001 as the code comments claim.  I always set many instructions at the beginning of $0000 to NOP just in case.<br /></div><br /><br />Oh, good old stack manipulations <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br />Thanks neviksti, I'll try to see if this can get the setup running. We definitely need to talk more about the GDSF7, I would be intrested in exploring more of its internals! I don't know if you remember, but I emailed you about that as well.<br /><br />EDIT : so I guess the way of working is something like that :<br /><br />a) you trigger a pad crossing<br />b) on the VBlank, the GDSF7 checks the pads and does a PLB from the stack, but being the stack pointed to *your* position, it pops *your* address from it and consequently jumps to your location.<br /><br />Correct?<br /><br />EDIT 2 : <br /><br />suppose I get the reset vector of FEoEZ (which is easy) and set up a program to switch there - should work, shouldnt it?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3536">kammedo</a> — Fri Jul 04, 2008 1:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neviksti]]></name></author>
<updated>2008-07-03T23:45:13-07:00</updated>
<published>2008-07-03T23:45:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34617#p34617</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34617#p34617"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34617#p34617"><![CDATA[
Sure I guess.<br />Here's a chunk from the SF7 code which explains everything<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">exploit_setup:<br />   ; exploit code will actually be run from WRAM<br />   ; to get a &quot;real time save&quot; routine to initiate, we need to:<br />   ;     1&#93; ..wait..<br />   ;           It appears that there is some kind of timer in the SF7.<br />   ;           It only allows the copier to interrupt the flow of code roughly<br />   ;           once per VBlank.  _Also_, it requires a little time before the<br />   ;           very first &quot;saver routine&quot; interrupt.  This confused me quite<br />   ;           a bit at first because removing code that didn't seem to matter<br />   ;           would cause the exploit to fail.  Just keep it in mind.<br />   ;     2a&#93; write #$01 to $4016<br />   ;           or<br />   ;     2b&#93; read $4219<br /><br />   ;move code to WRAM<br />   ldx #ExploitCode<br />   ldy #$0000<br />-   lda.w $8000,X      ;Address adjusted<br />   sta.w $0000,Y<br />   inx<br />   iny<br />   cpx #ExploitCodeEnd<br />   bne -<br /><br /><br />   ;----- try to goto $00:0001<br />   ldx #$B030   ;Setup the stack to a carefully chosen &quot;invalid&quot; value<br />   txs<br /><br />   lda #$01<br />   sta $4016   ;dummy write to trigger a SF7 &quot;save state feature routine&quot; <br />         ;   the invalid stack makes the bank value wrong &#40;code does a PHA / PLB&#41;<br />         ;   so joypad is read incorrectly &#40;accessing ROM instead of SF7 RAM&#41;<br />         ;   it thinks the user requested something &#40;regardless of actual joypad presses&#41;<br />         ;   it starts into some routines, at the first return it &quot;pulls&quot; the<br />         ;      return address from ROM because of where the stack is pointed<br />         ;   thus, it ends up at our code in WRAM<br />         ;     &#40;if you don't trick the SF7 joypad read, it will return to the wrong place<br />         ;      due to the incorrect stack ... but it will return in cartridge mode&#41;<br /><br />   ;jmp.l $000001 ;--test in emulators<br /></div><br /><br />NOTE: I am really not sure if the execution is redirected to $00:0000 or $00:0001 as the code comments claim.  I always set many instructions at the beginning of $0000 to NOP just in case.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=716">neviksti</a> — Thu Jul 03, 2008 11:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kammedo]]></name></author>
<updated>2008-07-03T02:53:32-07:00</updated>
<published>2008-07-03T02:53:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34603#p34603</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34603#p34603"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34603#p34603"><![CDATA[
Do you still have the information about the GDSF7 exploit?<br />It would be intresting and helpfull to have it..<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3536">kammedo</a> — Thu Jul 03, 2008 2:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-07-01T14:49:31-07:00</updated>
<published>2008-07-01T14:49:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34586#p34586</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34586#p34586"/>
<title type="html"><![CDATA[Re: Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34586#p34586"><![CDATA[
<div class="quotetitle">neviksti wrote:</div><div class="quotecontent"><br />So how does it know when to switch to bios mode?<br /><br />Well it is amazingly specific.  It looks to see 4 decreasing accesses to $00:0000-1FFF and <em>then</em> the NMI vector.<br /></div><br />I seem to remember some topic on this board about ways to expand interrupt handling on the NES in which someone suggested something similar. Can anyone dig it up?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Jul 01, 2008 2:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[neviksti]]></name></author>
<updated>2008-07-01T01:43:08-07:00</updated>
<published>2008-07-01T01:43:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34569#p34569</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34569#p34569"/>
<title type="html"><![CDATA[Game Doctor SF3 - BIOS Exploit]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4198&amp;p=34569#p34569"><![CDATA[
I finally found out how to trick the SF3 into letting a program running on the copier have access to all the copier memory and registers.  The SF7 "super mode" injected code directly by injecting a brk statement, and then switching the memory mapping to "bios mode" temporarily.  Instead the SF3 inserts code at every NMI.<br /><br />I tried my trick from before of setting the stack to a carefully chosen invalid location and it didn't work.  Also I read the NMI vector and nothing happenned.  So how does it know when to switch to bios mode?<br /><br />Well it is amazingly specific.  It looks to see 4 decreasing accesses to $00:0000-1FFF and <em>then</em> the NMI vector.  Normal code running on the processor can't cause this to happen, only an interrupt.<br /><br />However, a carefully chosen sequence of DMA can do it.  Run this code (obviously best done from RAM) and you'll switch to "BIOS" mode.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">   LDY #$3e90<br />   STY $4300      ; &#40;B&#41; PPU -&gt; &#40;A&#41; CPU, auto decrement, read 1 reg, $213e &#40;ppu status flag&#41;<br />   LDY #$1F00<br />   STY $4302      ; &#40;A&#41; offset<br />   LDY #$0004<br />   STY $4305      ; number of bytes to transfer<br />   LDA #$00<br />   STA $4304      ; bank address = $00<br /><br />   LDY #$3e00<br />   STY $4310      ; &#40;A&#41; CPU -&gt; &#40;B&#41; PPU, auto increment, write 1 reg, $213e &#40;ppu status flag&#41;<br />   LDY #$FFEA<br />   STY $4312      ; &#40;A&#41; offset &#40;native mode NMI vector&#41;<br />   LDY #$0002<br />   STY $4315      ; number of bytes to transfer<br />   LDA #$00<br />   STA $4314      ; bank address = $00<br /><br />   LDA #$03<br />   STA $420B      ;start DMA transfer<br /></div><br /><br />I haven't looked around much yet.  But here's first impressions:<br />bank $00:<br />..$8000-$8FFF appears to be the copier registers for $40 then repeated constantly.<br />..$9000-$FFFF ROM<br />bank $01-03: ROM<br />bank $04: ?? some memory<br />bank $05: ?? same memory as $04 ??<br />bank $06: probably copier SRAM<br />bank $07: probably DRAM<br /><br />Everything else seems unmapped.<br />Some registers probably control mapping in of the external cartridge for dumping reasons.<br /><br />EDIT:  Here's an example of the exploit with a memory viewer, so you can play with the copier registers.  Let me know what you find out.<br /><br /><!-- m --><a class="postlink" href="http://neviksti.com/SNES/SF2exp3">http://neviksti.com/SNES/SF2exp3</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=716">neviksti</a> — Tue Jul 01, 2008 1:43 am</p><hr />
]]></content>
</entry>
</feed>