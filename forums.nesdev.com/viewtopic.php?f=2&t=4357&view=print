<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Joystick read without using temp RAM intermediate.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Joystick read without using temp RAM intermediate.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4357">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4357</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Tue Sep 02, 2008 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Joystick read without using temp RAM intermediate.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thought I'd share my fast joy read routines.  Last night I realized that 
<br />cpx can be used for both reading the joy value and setting the 
<br />carry bit.  The trick is to store the upper 7 bits of the joypad register in
<br />x.
<br />
<br />Only thing, the carry inverts the on/off, so a final eor is used to invert them back.
<br />
<br />Tested and works so far on FCE, Nestopia, JNES..  Not sure abotu real NES yet?
<br />
<br />I unrolled the loop, but could use y for loop count to trade space for speed.
<br />
<br />Crash
<br />
<br />;=====================================
<br />;=== NES JoyPad Registers
<br />;=====================================
<br />JOY_PAD0         = $4016
<br />JOY_PAD1         = $4017
<br />
<br />JOY_A		= %10000000
<br />JOY_B		= %01000000
<br />JOY_SELECT	= %00100000
<br />JOY_START	= %00010000
<br />JOY_UP		= %00001000
<br />JOY_DOWN	= %00000100
<br />JOY_LEFT	= %00000010
<br />JOY_RIGHT	= %00000001
<br />
<br />
<br />;=====================================
<br />; read joypad values and store into a, and 
<br />; stor into ram vale R_JOY0 or R_JOY0 + 1
<br />;=====================================
<br />.macro readJoy whichJoy
<br />	ldx #$01	;strobe joypads 1 &amp; 3
<br />	stx JOY_PAD0 + whichJoy
<br />	dex
<br />	stx JOY_PAD0 + whichJoy
<br />
<br />	lda JOY_PAD0 + whichJoy
<br />	tay 
<br />	and #$fe	;save out other bits as refernce val for compare
<br />	tax		;store compare val in x
<br />	tya
<br />	and #$01	;restore an accum first bit
<br />	
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	cpx JOY_PAD0 + whichJoy
<br />	rol A
<br />	eor #$7f        ;invert 7 other bits
<br />	sta R_JOY0 + whichJoy
<br />.endmacro

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Sep 02, 2008 2:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Joystick read without using temp RAM intermediate.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">CrashTest wrote:</div><div class="quotecontent">Not sure abotu real NES yet?</div>
<br />Well, that has to be verified, because I don't know if you can trust that the other bits (1 to 7) will remain the same for all reads...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Sep 02, 2008 3:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Clever. Are you sure the open bus value won't change on you in mid-read? I tested it and it works on my NES, though it's hard to rule out those other bits changing only rarely. Is controller reading really a significant bottleneck in game performance? Remember that it doesn't need to be done during vblank. This might be useful for the DMC-fortified controller read. I'll have to investigate that next.
<br />
<br />Apparently you need to OR bits 0 and 1 to read some/all Famicom controllers, so I modified it to OR them together (I could only test in an emulator, as I don't have a Famicom). Fortunately, that didn't change the nifty unrolled portion of your original code. I also modified the macro to not rely on any predefined symbols, and not to write its result to memory. Finally, it puts the controller bits in the standard order, with A at the bottom (the Famicom handling made that just as efficient as the other order). And it preserves the Y register.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Quickly reads 8 bits from JOY into A.<br />; Supports NES and Famicom controllers.<br />; Controller must have been strobed already.<br />; Preserved: Y<br />.macro read_raw_joy JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Read first bit and other bits in register<br />&nbsp; &nbsp; &nbsp; &nbsp; lda JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; tax&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; save other bits<br />&nbsp; &nbsp; &nbsp; &nbsp; and #$03&nbsp; &nbsp; &nbsp; &nbsp; ; carry if bits 0 or 1 set<br />&nbsp; &nbsp; &nbsp; &nbsp; cmp #$01<br />&nbsp; &nbsp; &nbsp; &nbsp; txa&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; X = state of other bits<br />&nbsp; &nbsp; &nbsp; &nbsp; and #$FC<br />&nbsp; &nbsp; &nbsp; &nbsp; tax<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; first bit<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Compare first value with new value to put<br />&nbsp; &nbsp; &nbsp; &nbsp; ; inverted state of &#40;bit 0 OR bit 1&#41; into carry<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; cpx JOY<br />&nbsp; &nbsp; &nbsp; &nbsp; ror a<br />&nbsp; &nbsp; &nbsp; &nbsp; eor #$FE&nbsp; &nbsp; &nbsp; &nbsp; ;&nbsp; undo inversion<br />.endmacro<br /><br />; Quickly reads first controller into A.<br />; Preserved: Y<br />read_joy:<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Strobe both controllers<br />&nbsp; &nbsp; &nbsp; &nbsp; lda #$01<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $4016<br />&nbsp; &nbsp; &nbsp; &nbsp; lsr a<br />&nbsp; &nbsp; &nbsp; &nbsp; sta $4016<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Read first controller<br />&nbsp; &nbsp; &nbsp; &nbsp; read_raw_joy $4016<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; ; Could read second controller here:<br />&nbsp; &nbsp; &nbsp; &nbsp; ;read_raw_joy $4017<br />&nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp; &nbsp; &nbsp; &nbsp; rts</div><br />EDIT: how about this, for reading a single controller? It reads the other bits while the strobe line is set, which means the controller's shift register isn't clocked. So no need for special handling of the first bit. Nice!<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Strobe controller<br />ldx #$01<br />stx $4016<br />lda $4016&nbsp; &nbsp;; read other bits; won't clock register<br />dex<br />stx $4016<br />and #$FC&nbsp; &nbsp; ; X = other bits<br />tax<br /><br />cpx $4016<br />ror a<br />... &#40;repeated 8 times&#41;<br />eor #$FF&nbsp; &nbsp; ; uninvert all bits</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Tue Sep 02, 2008 7:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thats pretty useful to be able to preserve y like that, and to get the standard ordering.  Thanks for verifying on a real NES too! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />I think I agree overall joy reading isn't such a bottleneck, even for reading 4 controllers maybe you'd save a few scanlines at most with this approach.
<br />
<br />I just figured I'd get the approach out there and contribute to the scene a little. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Sep 02, 2008 11:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have to admit this is an <em>awesome</em> use of the CPX instruction, but you have to store the result in memory sooner or later anyway, and very often to and the result with the inverted controller read of last frame in order to detect "edges". So I don't see much advantages over doing it the standard way. I can read the controller and preserve both X and Y the standard way.
<br />
<br />Also I'm pretty sure that chances the highest bits of $4016 reads changes are very low. I guess some games (any title anyone ?) relies on them to be $4x (from the last byte of lda $4016 instruction), which is a bad thing, but they do it that way anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 03, 2008 3:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The main point of CrashTest's routine is that it's about 2x faster than the fastest controller read routine we had before, not that it doesn't use a byte of memory during reading; not using a byte simply means it's faster. I've tried it in the DMC-fortified read and it halves the time to around 370 clocks. It's quite an improvement, and could even be a few clocks faster if it assumed a value for the upper 6 bits.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dvdmth</b> [ Wed Sep 03, 2008 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the Famicom, bit 2 of $4016 has the status of controller #2's microphone, which can change in the middle of reading.  Also, anything plugged into the expansion port can screw things up.  On the NES, however, this technique should work just fine.
<br />
<br />I would suggest getting the status of the upper bits before sending the strobe signal:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda $4016<br />and #$FC<br />tax<br />lda #1<br />sta $4016<br />lsr<br />sta $4016<br />cpx $4016<br />; etc.</div>
<br />In theory, reading $4016 while the strobe bit is set will cause the A button status to be returned.  Whether the controller's shift register is clocked or not may depend on the type of controller (standard controllers don't get clocked, but I don't think it can be guaranteed that all NES controllers behave the same way since games aren't supposed to read while strobing).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Wed Sep 03, 2008 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Famicom microphone/expansion port kills it for me; who wants to make a game that doesn't work on the Famicom, when it would otherwise? Also good point about reading the other bits before asserting strobe, since it makes no difference for this purpose.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>CrashTest</b> [ Wed Sep 03, 2008 6:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The Famicom microphone/expansion port kills it for me; who wants to make a game that doesn't work on the Famicom, when it would otherwise? Also good point about reading the other bits before asserting strobe, since it makes no difference for this purpose.</div>
<br />
<br />I think to make it work on Famicom you'd need something like your DMC fortified approach.  Anyway you slice it, the probability of having least least 2/3 or 3/4 reads be equal is probably reliable enough.   Also, it might be worth using one approach for $4016 and a different approach for $4017 depending on the ports reliability/ other uses.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Wed Sep 03, 2008 10:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do we know what the physical dynamics are of the microphone in the Famicom? The critical period of this accelerated routine is 58 cycles (if i did the math right), or 31kHz -- do we have to worry about audio input to the mic at those frequencies?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 04, 2008 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The Famicom microphone/expansion port kills it for me; who wants to make a game that doesn't work on the Famicom</div>
<br />The people who make those PAL-only demos that need all 70 lines of vertical blanking time, for one thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 04, 2008 1:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The Famicom microphone could change the state of a bit at any time, regardless of the frequency of the sound. Having it fail any of the time, even if rare, wouldn't be acceptable for many games. Reading no fewer than three times can compensate for up to two sources of change in the reading, one of which is always the controller itself changing between reads. If you want to handle the DMC as well, you have three sources of possible change, which seems to require at least five reads if each is assumed to change only one reading each.
<br />
<br />This should still be useful for high-performance one-player games, especially those that use DMC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Sep 04, 2008 2:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So if you're going to have a DMC fortified reading routine anyway and still want to be fast enough, one should use that unrolled loop ? That sound quite usefull so that you save the result to RAM only after all 3 of the needed reading.
<br />Anyway I bet it's shorter to read the controller the traditional way one time rather than the super-fast unrolled way 3 or 4 times.
<br />
<br />I'm not sure how the microphone works, but I guess '1' means there is some noise and '0' means no noise, right ? If that's so, it's state probably won't change repeatedly within a few microseconds, so I guess it's safe to assume that it's state won't change more than one time when reading the controller 3/4 times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 04, 2008 3:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">So if you're going to have a DMC fortified reading routine anyway and still want to be fast enough, one should use that unrolled loop?</div><br />One would use CrashTest's fast routine for reading player 1 of a high-performance game, REGARDLESS of DMC, since it's about twice as fast as the normal read routine. If using DMC, one must read the controller up to four times <em>regardless</em> of which routine is used; even a "standard" controller read routine suffers from this.<br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Anyway I bet it's shorter to read the controller the traditional way one time rather than the super-fast unrolled way 3 or 4 times.</div><br />And it's even faster to use CrashTest's routine once rather than the traditional way.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm not sure how the microphone works, but I guess '1' means there is some noise and '0' means no noise, right ? If that's so, it's state probably won't change repeatedly within a few microseconds, so I guess it's safe to assume that it's state won't change more than one time when reading the controller 3/4 times.</div>
<br />Even one change by the microphone requires that the controller be read up to four times (WITHOUT any DMC playing; adding that in could require even more reads). But then if you have four reads, there's more of a window for microphone alteration; ~92*4=368 clocks, which comes out to 0.0002 seconds. A sound at 2432 Hz would cause a change every 0.0002 seconds, and such sounds are common. So that pretty much rules out using this for the second controller on a Famicom with the microphone.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Fri Sep 05, 2008 10:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">The Famicom microphone could change the state of a bit at any time, regardless of the frequency of the sound.</div><br /><br />I think the question I was trying to ask is what's the frequency response of the microphone? 30kHz sounds aren't that common; and the probability of getting a correct read depends on the relative prevalence of a specific frequency and the length of the read. If the microphone's dynamics have a fairly sharp roll-off at 10kHz (fairly standard in audio equipment), the odds of the zero-crossing happening during the read is low. (Enough lower? I don't know. I'd now like to get my hand on a Famicom controller set and play with this)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A sound at 2432 Hz would cause a change every 0.0002 seconds, and such sounds are common. So that pretty much rules out using this for the second controller on a Famicom with the microphone.</div>
<br />
<br />Except that you don't have to rely on the same comparison value for the entire protected read -- just for the duration of each individual pass. So it's not the entire 368 cycles that you need to worry.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>