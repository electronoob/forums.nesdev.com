<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - read ebook on nes ?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">read ebook on nes ?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1179">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=1179</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Mar 06, 2006 11:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I like a lot fixed fonts myself. When a lot of "i" and "l" are on the same word, it does make reading easier.
<br />However, what makes really difficult to read is misplacen line retuns.
<br />Such as :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Hello, how are<br />you ? What did you<br />do last holliday ?</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Mar 06, 2006 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some fan made translation patches combine il, ll, and li into one 8x8 block, which doesn't looks as ugly as other letter combinations in a single 8x8 block.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 06, 2006 11:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If using variable width font why not justify the text? I will look great. I don't think variable width fonts by themselves improve readability much. All books have justified text, so why not he NES book reader? =)
<br />
<br />Seriously, how hard do you think it would be? We'd have to calculate the size of the words to then calculate the empty space in the line. The tricky part would be to distribute the empty space evenly between the words. If the page scrolls a line at a time it wouldn't be hard at all to implement this, it wouldn't even feel slow. Rendering the fonts to CHR-RAM would still be the slowest thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LocalH</b> [ Mon Mar 06, 2006 12:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Justification can look more clunky on a tile-based device such as the NES, as when laying out a book you have much more control over exactly how much spacing you add, whereas with a fixed with charset, you can only space in multiples of 8 pixels.
<br />
<br />Of course, you can always render the text to a character map, but that's a whole different boat. This is what you'd have to do to use variable width fonts anyway, for the most part (although I'm sure there are various shortcuts one could take that wouldn't compromise the final result).
<br />
<br />I find that, for reading text on smaller, tile-based devices, fixed-width and left-justified is my preference. Although depending on how much text you want to be able to have onscreen at once, you might even consider a 1x2 tile charset (8x16 pixels). I wouldn't go 2x2 (8x16 px) as that would severely diminish the amount of text on screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 06, 2006 12:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think 8x16 fonts are very nice. Variable width fonts and justification surelly need rendering to the pattern tables, that's why I said "If using variable width font", or else justification would look pretty bad.
<br />
<br />Well, variable width fonts still have fixed height, so they're still vertically aligned to the background grid. This means the fonts can be placed with horizontal pixel precision just by shifting them left or right and merging the bytes. Not a very complicted procedure.
<br />
<br />If a simple justification algorithm that only affects white spaces was used it wouldn't make things much more complicated. A more complicated one, that also distributes the empty space between the letters of the words would be more complicated, but still doable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Mar 06, 2006 12:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wariable width is definitly hardly reasonable for the NES. Maybe on a demo that only show text, but it would be slow. In an actual game, even in a RPG that show a lot of text, it would be a real sacrifice in tiles. Displaying the whole alphabet with both small letters and caps, with all special characters and all can sacrifice up to 80 tiles.
<br />Doing 3 lines of variables width fonts makes 3x28 = 84 tiles.
<br />So yeah, it is do-able, but only for 3 or 4 lines.
<br />I'd prefer have fixed letters, but with 8x16 tiles, allowing taller letters. That sacrifices MUCH more tiles, unless you're in a text only menu or if you use a MMC5 (quick reference to Just Breed hehe). Most SNES and GBC games uses 8x16 tiles for letters.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 06, 2006 1:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Wariable width is definitly hardly reasonable for the NES. Maybe on a demo that only show text, but it would be slow. In an actual game, even in a RPG that show a lot of text, it would be a real sacrifice in tiles.</div><br />Man, we're talking about a TXT viewer here, of course it's just text. Don't loose the track.<br /><br />If you scroll one line at a time that would be 32 tiles. If we agree that a reasonable ammount of bytes to upload to CHR-RAM in one frame is 256 (ok, maybe not reasonable, but surelly possible in a TXT READER), 16 tiles could be updated. So 2 frames would be needed to upload the tiles, and I believe that 2 full frames are enough to build those tiles through shifting and AND'ing.<br /><br />So you'd get a 30 lines per frame text scroller. I don't think that's slow for a text reader at all. In 1 second you can scroll through a full page, that's enough.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Displaying the whole alphabet with both small letters and caps, with all special characters and all can sacrifice up to 80 tiles.<br />Doing 3 lines of variables width fonts makes 3x28 = 84 tiles.<br />So yeah, it is do-able, but only for 3 or 4 lines.</div><br />Not if you keep the actual fonts stored in PRG-ROM, so you have all the CHR-RAM free for rendering. Plus, we can force a 1-bit mode, as all we need is black and white. Just by forcing the 1-bit mode we double the ammount of avaliable tiles. Split the screen in the middle (switch to the other pattern table) and you have 1024 tiles to draw black and white stuff on. It's more than you need for a full screen.<br /><br />Since the whole screen uses only 960 tiles you even have some free tiles to use with something other than text. 64 if you use them as 1-bit or 32 if you use them as regular 4-color tiles. More than that actually, since we would not be rendering text to the leftmost and to the rightmost columns.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'd prefer have fixed letters, but with 8x16 tiles, allowing taller letters. That sacrifices MUCH more tiles, unless you're in a text only menu or if you use a MMC5 (quick reference to Just Breed hehe). Most SNES and GBC games uses 8x16 tiles for letters.</div>
<br />Many games switch to a CHR bank that contains mostly letters when the text part of the screen is on.
<br />
<br /><strong>EDIT:</strong> I even got the math wrong. If using 1-bit mode 256 bytes would be enough to represent a full 32-tile column. So we could scroll 60 lines in a second! 2 screens in a second, you can't get any faster than that! Of course, provided you can compute the 32 tiles in 1 frame. I think it's possible. Didn't change the post itself 'cause I'm feeling lazy right now. =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Mar 06, 2006 1:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think with a palette like :
<br />$0f, $20, $0f, $20
<br />$0f, $0f, $20, $20
<br />And write attribs like :
<br />$00, $00, $00, $00, $55, $55, $55, $55
<br />$00, $00, $00, $00, $55, $55, $55, $55
<br />You could write 1-bit data for the first half of the screen on the first bitplane, and the 1-bit data for the second half of the screen on the second bitplane. Is that what you said ?
<br />
<br />Anyway... txt is supposed to be always viewed in a fixed fond. This fixes most problems I think.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 06, 2006 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, instead of using 2 bits of a tile to represent 1 pixel, we have each bit represent 1 pixel. The NES only makes that easier, as the format it uses for tiles has one plane separated from the other. Some consoles with 4bpp tiles have the 2 bits of a pixel packed in the same byte, wich makes it difficult to make 1bpp graphics.
<br />
<br />But as you said, all you need in order to use this technique in the NES is to have 2 different palettes, one arranged to display black whenever bit 0 is clear (colors 00 and 10) and white when it is set (colors 01 and 11), and onother one arranged to display black whenever bit 1 is clear (colors 00 and 01) and white when it is set (colors 10 and 11). Then depending on the palette used you have one image represented by the first bits and another one represented by the second bits.
<br />
<br />I'd rather split the screen always horizontally, in 4 areas, like this:
<br />1. pattern table 0, palette 0
<br />2. pattern table 0, palette 1
<br />3. pattern table 1, palette 0
<br />4. pattern table 1, palette 1
<br />
<br />And the last area is shorter, leaving some tiles for use in an interface or something.
<br />
<br />Since the program would be more like a book reader, I think justification is a nice feature. And maybe some simple HTML-like tags could be used to format the text. Stuff such as bold, italic, underlined, and even aligning options like centered, left, right and justified. The hardest thing to implement here would be the "bold" option, in my opinion, as it would most likely require a separate font, or simulation, by drawing the letter twice dislocated by 1 pixel, but that may look ugly. Guess the same happens with italic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 06, 2006 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Wariable width is definitly hardly reasonable for the NES. Maybe on a demo that only show text, but it would be slow. In an actual game, even in a RPG that show a lot of text, it would be a real sacrifice in tiles.</div><br />Man, we're talking about a TXT viewer here, of course it's just text. Don't loose the track.<br /><br />If you scroll one line at a time that would be 32 tiles. If we agree that a reasonable ammount of bytes to upload to CHR-RAM in one frame is 256 (ok, maybe not reasonable, but surelly possible in a TXT READER), 16 tiles could be updated. So 2 frames would be needed to upload the tiles, and I believe that 2 full frames are enough to build those tiles through shifting and AND'ing.</div><br />Problem is that in order to get more than 16 lines, you'd need to use more than one 4 KB bank of CHR RAM (256x128 pixels times 1 bit per pixel / 8 bits per byte = 4096 bytes), and you'd need to synchronize to the raster and bankswitch at specific scanlines. In fact, you'd have to switch twice: once at the end of a VRAM page and again 128 lines down at the end of the next page. Unless you want to sit in a loop and burn 14400 cycles that could otherwise be used for rendering text, you need two events that can be triggered on separate scanlines. As there is only one sprite 0 hit, and the 9 sprites on one scanline bit is complicated to use given bugs in the PPU's sprite evaluation logic, the most obvious way to do this is with MMC3 or some other board with an IRQ, but mappers with an IRQ also tend to use CHR ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><strong>EDIT:</strong> I even got the math wrong. If using 1-bit mode 256 bytes would be enough to represent a full 32-tile column.</div><br />Correct. The VWF engine that I'm working on does just this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So we could scroll 60 lines in a second! 2 screens in a second, you can't get any faster than that! Of course, provided you can compute the 32 tiles in 1 frame. I think it's possible.</div>
<br />Even when sitting in a loop to find the (highly variable) times to bankswitch? Or were you planning on showing only a 16-line-tall window to use only 4 KB of CHR RAM?
<br />
<br />I'd suggest making page-down and page-up the scrolling primitives, allowing the time to bankswitch to become much more predictable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 06, 2006 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I didn't think about the case when you have to switch twice. A static screen would need only 1 switch, but in this case, the reader does scroll.
<br />
<br />I know that the 9 sprites in one scanline flag should not be trusted, but isn't there a specific situation it was verified to work? I know it behaves differently depending on the sprites you use and all, but there must be one specific setup that is verified to work, otherwise we should just stop naming the damn flag and consider it an unused/unknown bit...
<br />
<br />Hey, I'm not working on this. At least not right now, I'm just seeing the possibilities. It's fun. Maybe I will give it a shot some time, but I'm already working on too many projects now.
<br />
<br />You're right. PAGE UP and PAGE DOWN would work ok.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 06, 2006 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I know that the 9 sprites in one scanline flag should not be trusted, but isn't there a specific situation it was verified to work?</div><br />It has to do with the entry following the 8th entry. As I understand it, a 9th sprite in that entry or in a multiple of 4 entries after that. But then it's still a female dog to set up properly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hey, I'm not working on this. At least not right now, I'm just seeing the possibilities. It's fun. Maybe I will give it a shot some time, but I'm already working on too many projects now.</div><br />But I am working on it. In fact, I have been looking into so-called "huffword" text compression for this project, which tokenizes the text and then entropy codes the token stream.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You're right. PAGE UP and PAGE DOWN would work ok.</div>
<br />I need verification of the scrolling requirements from the original poster before we can assume this for sure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 06, 2006 7:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">But I am working on it. In fact, I have been looking into so-called "huffword" text compression for this project, which tokenizes the text and then entropy codes the token stream.</div><br />Cool! I thought about the "tokenizing" part, but not the huffman part. It may end up using a lot of memory, huh? Is the avaliable memory enough?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I need verification of the scrolling requirements from the original poster before we can assume this for sure.</div>
<br />Well, since you'll be needing a lot of memory to hold all the text you might as well pick MMC3 as a mapper and "split" the screen twice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Mar 06, 2006 8:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How about good old fashioned pucrunch?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 06, 2006 10:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">How about good old fashioned pucrunch?</div>
<br />Pucrunch is just an LZ77 coder. (What Pasi Ojala calls "RLE" is just an alternate encoding of LZ77 matches at distance 1.) How well does pucrunch do with random access to a given 1 KB of data within a file? And how much efficiency does it gain vs. the loss in speed from a bit-oriented format?
<br />
<br />Tokenization has the benefit of easy random access.
<br />
<br />As for memory, "canonical" Huffman codes are comparatively cheap to represent, and bit-&gt;token decoding and token-&gt;character decoding can probably be done in separate banks.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>