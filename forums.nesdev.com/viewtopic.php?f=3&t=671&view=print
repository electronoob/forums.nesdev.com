<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - timing (again me...)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">timing (again me...)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=671">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=671</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Wed Oct 19, 2005 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>timing (again me...)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />i really cant get working the method of "catch up" the ppu or cpu i dont remember, what it says that ppu should run x number of cycles until something that changes the ppu (drawing, etc) happens.
<br />
<br />My question is (and i know have been answered to me before and is written in docs) how to make a simple ppu timing routine, i mean without catch up and those things (which are better becouse speed up emulation).
<br />
<br />Tell me please if what i know is correctly:
<br />
<br />- 1 cpu cycles == 3 ppu cycles
<br />So when an instructions that takes 2 cycles the ppu should run for 2 * 3 = 6 cycles. Is that right?
<br />- a scanline takes 341 ppu cycles which equals 341/3 = 113.6~ cpu cycles. So we have 256 / 3 = 85.3 cpu cycles for scanline pixels and we have more or less 28 cycles for hblank. again is that right?
<br />
<br />Now i will write the code how i implement my ppu emu and want someone please tell me which points im failing or someting:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />void EmulatePPU&#40;int CurrentCPUCycle&#41;<br />&#123;<br />static WORD cc_ppu = 0;<br />static WORD sl_number = 0;<br />int i;<br />BYTE BkPixel, BYTE SprPixel;<br /><br />for &#40;i = 0; i &lt; CurrentCPUCycle * 3; i++&#41;<br />&#123;<br />&nbsp; &nbsp;if &#40;cc_ppu == 340&#41;<br />&nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp;//what i do here is increment the scanline number<br />&nbsp; &nbsp; &nbsp; &nbsp;//since ppu cc has reached the end&nbsp; &nbsp;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp;if &#40;scanline == 242&#41;<br />&nbsp; &nbsp; &nbsp; &#123;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; SetVBlankFlag&#40;&#41;<br />&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;if &#40;bNMIEnable&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SetNMIPending&#40;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp;&#125; <br />&nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;if &#40;scanline == 261&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanline = 0;<br />&nbsp; &nbsp; &nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scanline++;<br /><br />&nbsp; //when it is the last scanline pixel i clock V Counters<br />&nbsp; &nbsp; &nbsp; &nbsp; ClockVCounters&#40;&#41;; <br /><br />&nbsp; &nbsp; &nbsp; //reset ppu cc<br />&nbsp; &nbsp; &nbsp; cc_ppu = 0;<br />&nbsp; &#125;<br />&nbsp; else<br />&nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp;if &#40;sl_number == 0&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ReloadFromPPUTemp&#40;&#41;;&nbsp; &nbsp;// -&gt; Counters<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Clear2002Bits&#40;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp;&#125;&nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp;else if &#40;sl_number &gt;= 1 &amp;&amp; sl_number &lt;= 240&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp;&#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //Render 239 scanlines, here i have a GetBKPixel&#40;&#41; func<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//that gets the current scanline and ppu cc pixel<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//I have here too a GetSprPixel which get the current spr pixel<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//and i have a EmulateMultiplexer&#40;&#41; func that takes both pixels<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//and emulate sprite 0 hit too<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if &#40;SprVisible&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SprPixel = GetSprPixel&#40;...&#41;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SprPixel = 0;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if &#40;BkVisible&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BkPixel = GetBKPixel&#40;...&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BkPixel = 0;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;EmulateMultiplexer&#40;BkPixel, SprPixel, ...&#41;;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//and a func that clocks the H counters<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ClockHCounters&#40;&#41;;<br />&nbsp; &nbsp; &nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; cc_ppu++;<br />&nbsp; &nbsp;&#125;<br />&#125;<br /><br />&#125;<br /><br /></div>
<br />
<br />Well its not everything what i do in that EmulatePPU() func, but that gives the idea how im implementing it. Please tell me what is wrong/bad, etc with this method. If someone has a simple method for emulating please let me know.
<br />
<br />Thanks in advance.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Thu Oct 20, 2005 1:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1 CPU cycle = 3 PPU Cycles, unless you are in PAL mode then it is 3.2 PPU Cycles. 85.3 Cpu Cycles per Scanline, 28 CPU Cycles for HBlank. Those figures are about accurate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Thu Oct 20, 2005 6:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yes, on NTSC, 1 CPU cycle = 3 PPU cycles as WedNESday said.
<br />
<br />Every scanline is 341 PPU cycles <strong>except</strong> for scanline -1 (the prerender scanline)... which alternates between 341 and 340 cycles every other frame on NTSC systems (on PAL, it's always 341)
<br />
<br />If you want to be anal... you could say you have less VBlank time than you think -- since the PPU is loading tiles for the next scanline near the end of the scanline... effectively giving you about 320-256=  only 64 PPU cycles of HBlank (during which time the PPU is doing only sprite related things).  Although like I said I'm just being anal... the only game I know of where this really makes a difference is Micro Machines... and even then if you don't follow things this closely the only thing that'll go wrong is half a scanline on the title screen will be the wrong color.
<br />
<br />
<br />The only thing that stood out to me in your code is the following:
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;sl_number == 0&#41;<br />&#123;<br />&nbsp; ReloadFromPPUTemp&#40;&#41;;&nbsp; &nbsp;// -&gt; Counters<br />&nbsp; Clear2002Bits&#40;&#41;;<br />&#125;<br /></div><br /></div><br /><br />This looks like the start of your pre-render scanline.. which I believe is the right time to clear $2002... however this is way too early to reload Loopy_V (this accually occurs near the end of the scanline -- cycle 304 I believe).  If you do this here, some games will act funky... most notably Megaman 2 which will look very ugly when the game scrolls vertically.<br /><br />Also, I don't know if this is related to your problems, but it doesn't appear as though you have a global PPU timestamp.  'cc_ppu' seems to only be the cycle within the scanline.  This is fine..  <em>if</em> CurrentCPUCycle resets itself between calls to this function.<br /><br />For example... If you call this function with a CurrentCPUCycle of 15 -- the PPU will run for 15*3=45 cycles.  After that if you call with a CurrentCPUCycle of 20 -- the PPU will run for 20*3=60 more cycles (not 20-15 * 3 = 15 cycles like you might think?)<br /><br />I don't really know how you have it set up... and this way would work just fine... as long as CurrentCPUCycle is adjusted accordingly between calls to this function.<br /><br /><br /><br />And because I'm bored... here's a chopped up version of my current emu's PPU emulator (some things removed, some comments added)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void CNES::RunPPU&#40;s32 cyc&#41;<br />&#123;<br />&nbsp; &nbsp;//don't need to catch up<br />&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;&nbsp; &nbsp;&nbsp; &nbsp;return;<br /><br />&nbsp; &nbsp;//Idle scanline<br />&nbsp; &nbsp;if&#40;nPPUCycle &lt; &#40;341 * PPU_CYCBASE&#41;&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle = &#40;341 * PPU_CYCBASE&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;//after the idle scanline, VBlank flag is raised, and VBlank<br />&nbsp; &nbsp;if&#40;nPPUCycle == &#40;341 * PPU_CYCBASE&#41;&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;memset&#40;nSpRender,0,256&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;n2002Status |= 0x80;<br />&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle = nEndOfVBlank;<br />&nbsp; &nbsp;&nbsp; &nbsp;nScanline = -1;<br />&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc = 0;<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;//just after VBlank, $2002 gets cleared<br />&nbsp; &nbsp;if&#40;nPPUCycle == nEndOfVBlank&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;n2002Status = 0;<br /><br /><br />&nbsp; &nbsp;//<br />&nbsp; &nbsp;// here, I check to see if full scanlines can be rendered, and if<br />&nbsp; &nbsp;// so, I render as many full scanlines as I can.<br />&nbsp; &nbsp;// but for the sake of this example, that part is removed<br />&nbsp; &nbsp;// assume you can't run any full scanlines:<br />&nbsp; &nbsp;//<br /><br />&nbsp; &nbsp;if&#40;bPPUOn&#41;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RunPPU_On_Fine&#40;cyc&#41;;<br />&nbsp; &nbsp;else&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RunPPU_Off_Fine&#40;cyc&#41;;<br />&#125;<br /><br /><br />void CNES::RunPPU_On_Fine&#40;s32 cyc&#41;<br />&#123;<br />&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;return;<br /><br />&nbsp; &nbsp;u8* namepage;<br />&nbsp; &nbsp;u8* pattern;<br />&nbsp; &nbsp;RESET_NAME_PAGE&#40;&#41;;<br /><br />&nbsp; &nbsp;u8 a, at;<br />&nbsp; &nbsp;u16 c, d, ad;<br /><br />&nbsp; &nbsp;// scanline -1 -- prerender<br />&nbsp; &nbsp;//<br />&nbsp; &nbsp;//&nbsp; **NOTE** prerender scanline stuff removed for sake<br />&nbsp; &nbsp;// of this example... it looks just like the other scanlines only I<br />&nbsp; &nbsp;// don't render pixels... and I reload nPPUAddr &#40;LoopyV&#41; at<br />&nbsp; &nbsp;// cycle 304<br /><br />&nbsp; &nbsp;// rest of scanlines<br />&nbsp; &nbsp;while&#40;nScanline &lt; 240&#41;<br />&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;!nScanCyc&#41;&nbsp; &nbsp;// **NOTE** for MMC5 IRQs<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;MapperScanlineStart&#41;&nbsp; &nbsp;&nbsp; &nbsp;&#40;this-&gt;*MapperScanlineStart&#41;&#40;nScanline&#41;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//cycles 0-255 .. render pixels, load tiles<br />&nbsp; &nbsp;&nbsp; &nbsp;while&#40;nScanCyc &lt; 256&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//render a pixel...<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;a = nBGRender&#91;nXScroll + nScanCyc&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;at = nSpRender&#91;nScanCyc&#93;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nScanCyc &lt; nBGClip&#41;&nbsp; &nbsp;a = 0;&nbsp; /* nBGClip is either 0 &#40;no clipping&#41;, 8 &#40;clipping&#41;, or 256 &#40;BG disabled&#41;&nbsp; */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nScanCyc &lt; nSpClip&#41;&nbsp; &nbsp;at = 0; // ditto for nSpClip<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;a &amp;&amp; &#40;at &amp; 0x40&#41; &amp;&amp; &#40;nScanCyc != 255&#41;&#41;&nbsp; &nbsp;n2002Status |= 0x40;&nbsp; &nbsp;//sprite 0 hit<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;pVidOut&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;at &amp; 0x80&#41;&nbsp; // low sprite priority<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;!a&#41;&nbsp; &nbsp;a = at &amp; 0x1F;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;else if&#40;at&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;a = at &amp; 0x1F;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;OUTPUT_PIXEL&#40;a&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;//load a tile &#40;on 3rd cycle&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;&#40;nScanCyc &amp; 7&#41; == 3&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOAD_BG_TILE&#40;nScanCyc - 3 + 16&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;INC_PPU_X&#40;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nScanCyc == 251&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;INC_PPU_Y&#40;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle += PPU_CYCBASE;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;// cycle 256 does nothing<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nScanCyc == 256&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc++;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle += PPU_CYCBASE;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//cycle 257 -- reset X scroll, load sprite crap<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nScanCyc == 257&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc = 260;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle += &#40;260 - 257&#41; * PPU_CYCBASE;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;RESET_PPU_X&#40;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;PPU_LoadSpriteLine&#40;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;// at 260, rising edge&nbsp; &nbsp;**NOTE** for MMC3 IRQs... see below<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nScanCyc == 260&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;MapperA12Edge&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#40;this-&gt;*MapperA12Edge&#41;&#40;1&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc = 323;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle += &#40;323 - 260&#41; * PPU_CYCBASE;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//323, 331, load first two tiles for next line<br />&nbsp; &nbsp;&nbsp; &nbsp;while&#40;nScanCyc &lt; 339&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#123;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;LOAD_BG_TILE&#40;nScanCyc - 323&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;INC_PPU_X&#40;&#41;;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc += 8;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle += 8 * PPU_CYCBASE;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&nbsp; &nbsp;&#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;//burn the rest of the scanline<br />&nbsp; &nbsp;&nbsp; &nbsp;nScanline++;<br />&nbsp; &nbsp;&nbsp; &nbsp;nScanCyc = 0;<br />&nbsp; &nbsp;&nbsp; &nbsp;nPPUCycle += 2 * PPU_CYCBASE;<br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;pVidOut&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;pVidOut += nVidPitchAdd;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;if&#40;nPPUCycle &gt;= cyc&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;&#125;<br />&#125;<br /></div>
<br />
<br />
<br />LOAD_BG_TILE() fills my 'nBGRender' buffer with pixel data... which is later drawn to the screen.
<br />
<br />PPU_LoadSpriteLine() does the same kinda thing, but for sprites (nSpRender).
<br />
<br />Sprite pixels in nSpRender are 0 if transparent, otherwise they're the palette color to output for this pixel (pattern + attribute bits  + 0x10 =  between 0x11-0x1F).  Additionally, if the sprite pixel is non-transparent and has background priority, bit 7 (0x80) is flipped on.  If the pixels in non-transparent and it belongs to sprite 0, bit 6 (0x40) is flipped on.
<br />
<br />I know how I do MMC3 IRQs isn't terribly accurate.  I tried doing them the proper way but it was just too much work and too much slowdown for too little gain.  This way is "good enough" and runs every game I've tried just fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anes</b> [ Thu Oct 20, 2005 6:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />well... that gave me an idea of a different way of rendering and not my ugly engine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Oct 20, 2005 8:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">I know how I do MMC3 IRQs isn't terribly accurate.  I tried doing them the proper way but it was just too much work and too much slowdown for too little gain.  This way is "good enough" and runs every game I've tried just fine.</div>
<br />Watch out. Some disgruntled pro-hardware anti-emulator-testing militant (or some developer of a "refreshingly accurate" emulator) might make a ROM that looks like a simple game but does some stress testing in the cut scenes.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>