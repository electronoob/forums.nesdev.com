<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Projectiles and collision detection with NESASM</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Projectiles and collision detection with NESASM</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8984">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=8984</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>vicious</b> [ Wed Jun 06, 2012 11:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Projectiles and collision detection with NESASM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are there any good tutorials on such topics? Or even just docs/examples?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Jun 06, 2012 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is unrelated to NESASM or any other particular assembler.
<br />
<br /><a href="http://gendev.spritesmind.net/page-collide.html" class="postlink">Here is a helpful article</a> on the topic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>vicious</b> [ Wed Jun 06, 2012 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Fastest answer ever. Thanks, Shiru. But do you have anything NES-specific?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Wed Jun 06, 2012 11:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The code from pong1/2 in Nerdy nights is about as simple as it gets with the sprite colliding with all sides of the screen.  He doesn't discuss collision detection much in the threads but there are notes in the code.
<br />
<br />Not sure how basic/complex you're looking for.  If you're having trouble with basic pong style collisions your best bet might be to post your specific questions here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Thu Jun 07, 2012 12:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The thing that collision logic is not NES specific in general - it is the same for anything, be it NES, Flash, etc. You only need to implement it in programming language of your choice - 6502 assembler in your case, it will be just a bunch of conditional branches.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 07, 2012 4:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">The thing that collision logic is not NES specific in general - it is the same for anything, be it NES, Flash, etc.</div>
<br />Not necessarily. Different platforms need the geometry represented different ways.
<br />
<br />Some platforms have the hardware or the CPU power to intersect pixel maps. Atari 2600 and Commodore 64 can intersect sprites in hardware, and PCs since the i486 era can quickly calculate which areas of a pixel map overlap. Other platforms, such as modern PCs and modern consoles and modern smartphones, have the CPU power to intersect of arbitrary polygonal areas or polyhedral volumes. NES has neither and must rely on low-computation software approximations.
<br />
<br />My Pong clone approximates the ball as a circle and the paddles as rectangles with semicircles on the end (like the Nintendo racetrack logo, except rotated 90 degrees). That's because axis-aligned rectangles and circles are computationally easy to intersect.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Thu Jun 07, 2012 4:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So i guess it is just impossible to do a simple rect intersect in a PC game, because PC has so much power to waste. OK.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jun 07, 2012 8:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You won't find tutorials on such specific game topics for the NES. Like it's been said, these concepts are not platform-specific, and the same ideas can be implemented in a multitude of systems. Part of becoming a good programmer is reading about these concepts and making your own implementations in your language/system of choice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>slobu</b> [ Thu Jun 07, 2012 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty sad that the NES needs software collision.  For that matter, I think the Genesis only has a collision register that is flagged by any sprite intersecting any other sprite.  Utterly useless.
<br />
<br />On topic I'm usually referred to this article when asking about collisions:
<br /><!-- m --><a class="postlink" href="http://games.greggman.com/game/programming_m_c__kids/">http://games.greggman.com/game/programming_m_c__kids/</a><!-- m -->
<br />
<br />Here's another guy working on collisions:
<br /><!-- m --><a class="postlink" href="http://www.tummaigames.com/blog/page/2/">http://www.tummaigames.com/blog/page/2/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Jun 07, 2012 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hit boxes, learn to love them.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Jun 07, 2012 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only console I'm aware of that performs useful collision detection in hardware is the Atari 2600. It has bits to indicate collisions between any 2 objects out of the 6 it can display (playfield, player 0, player 1, missile 0, missile 1, ball). Collisions with the playfield might require additional software checking depending on the kind of game (e.g. you might need to tell apart a wall from the floor), but I'm sure lots of games get away with just using the collision bits provided by the TIA.
<br />
<br />I'm not sure the same approach would work well on the NES, because of the 64 tiny sprites thing. To indicate collisions between any 2 sprites, we'd need 2016 bits. In addition to that, most objects are composed by several sprites, so in order to check for a collision between two objects you'd need to look at all the collision bits involving all the sprites of the first object and the second object. This wouldn't be practical at all, and I'm pretty sure it would be slower than the simple overlapping rectangles technique that's commonly used.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Jun 07, 2012 10:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Doing it in hardware seems like a waste of transistors for bad programmers who don't know how to do it in software.
<br />
<br />And after they wonder why bad games are released....  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /> 
<br />
<br />Also, it's nice to have a hitbox slightly smaller than the graphical representations of the objects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jun 07, 2012 11:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">So i guess it is just impossible to do a simple rect intersect in a PC game, because PC has so much power to waste. OK.</div><br />I see your sarcasm, but bounding box collision often does not work in games designed to meet prevailing production values for commercial PC games. Players won't stand for what they consider crappy hitboxes, and they'll one-star the game on all the review sites if the instant replay of the moments before a character's death (sometimes called a "killcam") shows a bogus kill.<br /><br />That said, here's the general technique that applies to all platforms: <ol style="list-style-type: decimal"><li>Optional: Reject objects that cannot possibly overlap. In some cases, this can be done by sorting the object list or dividing the playfield into sectors. </li><li>Reject collisions based on bounding boxes, which are very fast to test. </li><li>Optional: Reject collisions based on bounding spheres, which are also fairly fast to test. </li><li>Optional: Reject collisions based on more precise geometry. </li></ol>The difference I speak of between software collision on the PC and software collision on the NES lies in players' expectations of the "more precise geometry" used in step 4.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Also, it's nice to have a hitbox slightly smaller than the graphical representations of the objects.</div>
<br />Which might elicit complaints from players who think they hit an enemy critter but the game thinks they missed because the hitboxes were shrunk. One might prefer large hitboxes when the player is attacking and small hitboxes when the player is being attacked, such as the 1x1 or 2x2 pixel hitboxes of several bullet hell shooters, but that can make player vs. player encounters difficult to tune.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Jun 07, 2012 11:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hit boxes and kill boxes can be separated. And the PC games need to get over them selves it seems.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Thu Jun 07, 2012 6:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />vicious: I'm a terrible teacher, but I still spent a lot of time on <a href="http://nesdev.com/bbs/viewtopic.php?t=8295&amp;postdays=0&amp;postorder=asc&amp;start=0" class="postlink">this topic, so I'll link it.</a> It shows a lot of ways it can go wrong, and why the logic is the way it is with some simple diagrams. If you can deal with words-words-words, my harsh tone, and a few pages of problems that deal with a specific program rather than a general guide, it may be useful.
<br />
<br />As well, you can find a few super fast ways to do it <a href="http://www.atariage.com/forums/topic/71120-6502-killer-hacks/" class="postlink">here.</a>
<br />
<br />There is stuff that's not collision detection there too,(which is totally worth reading too even if you don't understand it all) since it's not the focus of that topic. But you can see a simple 6502 bounding box routine get simplified and optimized in a way you might be able to understand.
<br />
<br />That said, I like specific questions. If you end up getting stuck with collision, I will absolutely try to help in my own bumbling way if you post some code or some specific points of a guide you find that you do not understand. 
<br />
<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I see your sarcasm, but bounding box collision often does not work in games designed to meet prevailing production values for commercial PC games.</div><br />But this doesn't matter at all because this topic is about NES, and because there are still easy to find guides all around the internet about collision logic that would work on NES. It's not as if all the guides written years ago have suddenly disappeared because 3D/crazy processing power is prevalent now. I guess it's true it's not <em>always</em> the same, but a list of exceptions that don't have much to do with the target platform doesn't need to be given to someone who doesn't need it. It's like finding fault in someone saying random number generator instead of psuedo random, because there's no such thing as a random number generator.<br /><br />Bounding box collision is still useful to teach, and people still write guides about it because it is simple to understand. Also, as you've pointed it, it's useful to try before you even start with more advanced collision, since it will still reject VERY impossible collisions before wasting CPU time doing the more extreme checks for each set of objects. I'd would think a guide that doesn't teach this isn't really useful, because it's skipping a pretty much "free" optimization that can get extreme results depending on the number of objects. And PC games with processing power to spare LOVE lots of objects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Players won't stand for what they consider crappy hitboxes, and they'll one-star the game on all the review sites if the instant replay of the moments before a character's death (sometimes called a "killcam") shows a bogus kill.</div>
<br />True, but this topic is about NES. I have never seen such a feature in any classic game I've played. Except Cattrap (Game Boy), but that game has tile by tile movement anyway. Even if there are old games that do this, or if vicious wanted to do this, it's certainly much harder to program than collision. He'd have to already have a great deal of 6502 knowledge before such a feature would reveal "errors" in his collision detection. And by then I'd bet he'd be able to fix it.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>