<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Polygon filling..</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Polygon filling..</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4005">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4005</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>8</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Apr 05, 2008 8:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Pre-Rendered seems like it would take a ton of space. I don't know how much space polygon-fill definitions would take, but my wireframe plan has 6 bytes (Well, probably 12 if I want 16-bit coordinates) per line-def. There are 3 things that define each end-point. The X, Y, and Z coordinates. Pre-defined graphics would take a ton of space compared to this. Even if you didn't calculate the movements, and had pre-defined screens made up of these lines/fills, it would save you a lot of space.
<br />
<br />In my game, I think I'm going to have to extend Vblank by 16 scanlines (8 at the top, and 8 at the bottom), and I'm planning to do this with the MMC3. Its scanline counter is kind of a shindig, but it's better than nothing. Extend Vblank is all you're trying to do, right? Then you should use a scanline counter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 05, 2008 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Pre-Rendered seems like it would take a ton of space. I don't know how much space polygon-fill definitions would take, but my wireframe plan has 6 bytes (Well, probably 12 if I want 16-bit coordinates) per line-def. There are 3 things that define each end-point. The X, Y, and Z coordinates. Pre-defined graphics would take a ton of space compared to this. Even if you didn't calculate the movements, and had pre-defined screens made up of these lines/fills, it would save you a lot of space.</div>Naturally pure coordinate definitions are far smaller for anything but the most complex of objects. But by sharing tiles between frames and using lossy compression (i.e. not requiring the tiles to be a perfect match) you can get decent results. Frankly the name tables are more of a problem than the patterns but even they can be compressed by attempting to only record what's changed between frames, plus all the usual techniques of course. I played around with vector quantization a while back and believe me you can get some surprisingly good results with these kinds of techniques..<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In my game, I think I'm going to have to extend Vblank by 16 scanlines (8 at the top, and 8 at the bottom), and I'm planning to do this with the MMC3. Its scanline counter is kind of a shindig, but it's better than nothing. Extend Vblank is all you're trying to do, right? Then you should use a scanline counter.</div>Shutting off the PPU at the bottom edge is easy enough with the MMC3's raster IRQs. The problem is extending the blanking into the top border since you need precise timing to reactivate the screen, yet the raster IRQs won't work here since the MMC3 uses the PPU's memory accesses to orient itself.
<br />Now the easy way to solve this is to use sprite-0 hit testing to find the start of the screen (and keep a blank area of the name table to display while waiting for the "hit"). Things get a bit trickier if you occasionally want to return early without using up the full vblank period, but if it's only eight lines we're talking about then you might as well a single special case for when you're going to be finished before the end of the real blanking period. The important point is that the code should be designed never run past the blanking area, because trying to abort it with interrupts is very nearly impossible..
<br />
<br />In my case I wanted to try to avoid using MMC3 since carts with both PRG and CHR RAM are so rare, this I have to try to abuse DMC IRQs as a raster interrupt source (something it plainly never was designed for). Also I want to be able to exit vblank arbitrarily since I'm extending it so far.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Apr 05, 2008 10:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Like was mentioned before, FF3j has that combination. I was able to purchase that cart for $8. It was in kind of poor condition, and it didn't have a box/manual, so it was fine.
<br />
<br />Well, I suppose if shutting it off on top is a problem, you can shut it off for 16 scanlines on bottom. It's pretty noticeable, but it's an option.
<br />
<br />It might even be possible to have some pre-defined line segments to mess around with. But I think most of the time, it would be good just to have a fast line-drawing routine.
<br />
<br />This is pretty hard to deal with when you have name tables and pattern tables. If the CHR bank was the size of the name table, it wouldn't be a problem at all. It gives me a headache to think about polygon filling with name tables in mind.
<br />
<br />Working with sprites is probably easier in a lot of cases, since you have pixel-based coordinates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 05, 2008 11:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Like was mentioned before, FF3j has that combination. I was able to purchase that cart for $8. It was in kind of poor condition, and it didn't have a box/manual, so it was fine.</div>It's as much about authenticity, i.e. using hardware setup I might have been allowed to play with if I had to write this thing back in the day, as being able to test things easily. Plus a good bit of general stubbornness at this point, though I must confess that I'm leaning more towards taking the easy way out every day..<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, I suppose if shutting it off on top is a problem, you can shut it off for 16 scanlines on bottom. It's pretty noticeable, but it's an option.</div>16 lines looks awfully skewed though. My current PAL timing is 12 pixels off (6 really but the differences get sort of doubled) and that looks pretty bad.. For a game I'd try to keep within 8 or so extra lines if I could.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">This is pretty hard to deal with when you have name tables and pattern tables. If the CHR bank was the size of the name table, it wouldn't be a problem at all. It gives me a headache to think about polygon filling with name tables in mind.</div>Line drawing to a character screen isn't all that hard, not in theory anyway. Just keep a copy of the nametable in RAM which starts out as all blanks and then whenever you cross a tile boundary when drawing the lines you check if has already been allocated a unique tile (in which case you reuse it) or if you have to place a new one. Polygon filling is a bit trickier of course but not really by much, and the basic principles are the same..
<br />I suppose it *might* even be possible to reuse identical line segments by hashing together the entry and exit coordinates, plus various other bookkeeping and lookup logic per tile. Or even using a bunch of predefined tiles and just handling the parts where lines meet or end dynamically. But the precision necessary for it to actually be able to reuse anything would certainly be depressingly low..
<br />
<br />Then again you could create a monochrome bitmapped 184x176 screen with double buffering by packing two tiles into the separate bitplanes of a single pattern and using palettes tweaked to only show one at a time. Without double buffering (and with a mid-screen raster IRQ to switch character sets) it fill the screen with room to spare. Hardly ideal but it's the route I'd take if I wanted to write a Mario Paint clone for a standard CHR RAM cart..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Apr 05, 2008 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You know, I just thought about something. If you were to just make "CG" for the NES, you wouldn't even have to do 3D calculations, if you defined intersection coordinates for each frame. Since it would be pre-defined anyway, you could just use X and Y coords. However, if you're looking for not pre-defined 3D looking things, you'd need a Z coordinate.
<br />
<br />I'd need to think about line-drawing for a while. But this really makes me want to have some cheesy "CG" movie in my game. But I see what you're saying about keeping a copy of the name table in RAM. It's a pretty simple idea, it's just that it might take forever to actually draw the lines

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 05, 2008 12:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">You know, I just thought about something. If you were to just make "CG" for the NES, you wouldn't even have to do 3D calculations, if you defined intersection coordinates for each frame. Since it would be pre-defined anyway, you could just use X and Y coords. However, if you're looking for not pre-defined 3D looking things, you'd need a Z coordinate.</div>Exactly, anything short of the actual line drawing can easily be precalculated to great effect.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But I see what you're saying about keeping a copy of the name table in RAM. It's a pretty simple idea, it's just that it might take forever to actually draw the lines</div>Believe me the overhead of clearing and sending the entire screen to the PPU easily outweighs having to deal with tiles. It's just a matter of optimizing the hell out of the code ;)
<br />And regardless whether or not my implementation proves to be fast enough Elite certainly manages to pull it off.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Apr 05, 2008 1:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I guess it should be possible to make CG by using big pixels for background/stuff that needs few detail and (2D) sprites for parts that needs details (such like head of characters). That way it can be done in all games with both CHRROM and CHRRAM techniques.
<br />
<br />However, real 3D rendering would rock. I guess it should be possible to render simple 3D for object while the background would still be technically 2D or pseudo 3D.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Apr 05, 2008 5:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried to make a PSet function a while back, and it ended up taking about 100 cycles. That's way too long.
<br />
<br />But I know I can probably optimize it. Trust me, if I can get my line routine working, that's going to be pretty much half the work for pre-calculated CG. The other half is filling the polygons, which seems like a big headache. Was that a big headache, doynax?
<br />
<br />But yeah, that's all that is to doing CG, if you want real-time 3D, you're 2/3 of the way there. The next step would just be making X,Y,Z coords into X and Y coords. I don't know if there's a better way to go about this.
<br />
<br />If you want, I can post my math used (Even though it includes some raw trigonometry) for my Qbasic wireframe simulator up here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 05, 2008 5:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">I tried to make a PSet function a while back, and it ended up taking about 100 cycles. That's way too long.</div>Right, plotting a random pixel takes a huge amount of time. The trick is not to redo all that work per pixel because once you've dealt with that first one then figuring how to plot the next is a great deal easier. Then there are about a million dirty tricks you can do to speed things up, and I'd certainly love to brag about some of my wilder bithacks, but I seriously doubt much of it would be useful for much beyond this particular application.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But I know I can probably optimize it. Trust me, if I can get my line routine working, that's going to be pretty much half the work for pre-calculated CG. The other half is filling the polygons, which seems like a big headache. Was that a big headache, doynax?</div>No, not really (well, I suppose it caused its fair share of problems but that had more to do with unpredictable timing than the logic itself). The trick is to not actually draw polygons as such but rather only draw the all outlines and then fill in the gaps in a single pass. Look up a technique called XOR-filling if you want the details, but suffice to say that it comes down to using EOR rather than LDA when sending the tiles to the PPU. Also we're talking full-on concave n-gons with self intersection here, not just those puny triangles todays GPUs deal with ;)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But yeah, that's all that is to doing CG, if you want real-time 3D, you're 2/3 of the way there. The next step would just be making X,Y,Z coords into X and Y coords. I don't know if there's a better way to go about this.</div>I figure I'm pretty much stuck with a normal 16-bit perspective division. Perhaps there'll be enough free ROM space to set up some huge logarithm or reciprocal tables, but I honestly doubt it'll be a bottleneck.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Apr 05, 2008 6:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">If you were to just make "CG" for the NES, you wouldn't even have to do 3D calculations, if you defined intersection coordinates for each frame. Since it would be pre-defined anyway, you could just use X and Y coords.</div>
<br />Do you know <a href="http://www.mobygames.com/game/out-of-this-world/screenshots" class="postlink">Another World/Out of this World</a> and <a href="http://www.mobygames.com/game/flashback-the-quest-for-identity/screenshots" class="postlink">Flashback</a>? Both have cool animated sequences achieved through a technique that can't be much different than what you described. It's really cool how it's possible to have those long animated sequences, because 2D points need so little storage space.
<br />
<br />Sadly, there aren't NES versions of those games, so I can't say how good it'd perform on our good old system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sat Apr 05, 2008 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Do you know <a href="http://www.mobygames.com/game/out-of-this-world/screenshots" class="postlink">Another World/Out of this World</a> and <a href="http://www.mobygames.com/game/flashback-the-quest-for-identity/screenshots" class="postlink">Flashback</a>? Both have cool animated sequences achieved through a technique that can't be much different than what you described. It's really cool how it's possible to have those long animated sequences, because 2D points need so little storage space.</div>Looking at Another World it's staggering just how much pure atmosphere and, well, storytelling the guy managed to squeeze into a few measly polygons. And that most paradoxical feeling of freedom, in a totally linear game where you spend 95% of the time repeating the same twitch sequence over and over again..
<br />All in all it's easily one of the most fascinating computer games of all time.
<br />
<br />But I fear it would be unfeasible on the NES without a lot of custom hardware. Feel free to prove me wrong though ;)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Apr 05, 2008 6:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I've played those, I think they are really cool. They have pretty good graphics. I think Out of this World has better graphics though.
<br />
<br />I never even thought about doing pre-defined 3D. Not in the sense where you have pre-defined images, but pre-defined X,Y coords based off of X, Y, and Z coords. When I find a way to do this, I'll definitely be having some movies in my games.
<br />
<br />I suppose filling large polygons wouldn't be so hard. I was thinking that it would be cool to find a way (I'll look into this AFTER I look into filling polygons regularly) to fill polygons with a mixed color (Like the checkerboard technique where you alternate between colors every other pixel to create the illusion of another color), but that would probably be a lot of work.
<br />
<br />It might even be easier to do the opposite in many of these cases. Instead of filling the polygons, delete what lies outside the borders. But that would assume that polygons aren't connected, which is preposterous.
<br />
<br />But I'll look up XOR filling. It sounds pretty interesting.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Apr 06, 2008 2:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you're going to make CGs, why deal with polygons at all ? I mean you can use them to create your CG, but once they're done you can "convert" images to NES without using any polygons. Just have parts that needs detail use sprites, like people, even if that means one full sprite per frame, and parts that needs less detail should fit in 256 tiles at once using BG.
<br />
<br />I guess draw a line is really easy you know. Basically if you want a line that pass between two points, I'll call the first point (x1;y1) and the second (x2;y2), then maths tells you that the equation of your line is y=m*x+(y1-m*x1), where m=(y1-y2)/(x1-x2) (derivate of your line). Then if you want the line to be a segment, you should just shrink it so that only (x;y) cords that x1&lt;x&lt;x2 and y1&lt;y&lt;y2. (assuming you reorder your point so that x1 is smaller than x2, etc....)
<br />
<br />Of course if you actually want to make it fast, you'll need a trick or two. I'd suggest first calculate the derivate of your line (y1-y2)/(x1-x2), but if you want to get rid of the division, just calculate y1-y2 and x1-x2 separately. Then start on the first point, increment your Y coordinate by a fractional multiple of (y1-y2) and your X coordinate by a fractional multiple of (x1-x2) and reapeat until you reach the end point.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Sun Apr 06, 2008 3:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Of course if you actually want to make it fast, you'll need a trick or two. I'd suggest first calculate the derivate of your line (y1-y2)/(x1-x2), but if you want to get rid of the division, just calculate y1-y2 and x1-x2 separately. Then start on the first point, increment your Y coordinate by a fractional multiple of (y1-y2) and your X coordinate by a fractional multiple of (x1-x2) and reapeat until you reach the end point.</div>The classic way to avoid the division is to use Bresenham's algorithm, which deals with fractional numbers all the way through rather than to ever divide anything. Bresenham doesn't suffer from any precision problems either, and it tends to look pretty cheesy if the slope is off-by-one so the lines don't actually line up (which can easily happen with 8-bit precision unless you're careful).
<br />Of course the Bresenham innerloop isn't quite as fast as dealing with fractions, since you can just add the fractional value to a running error accumulator and see if it overflowed to determine whether to jump to the next pixel on the minor axis. Besides that you often get the slope as a by-product of something else anyway, like clipping.
<br />
<br />And then there's my method of cheating by precalculating everything..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Apr 06, 2008 3:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey, <a href="http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" class="postlink">Bresenham</a> is THE way to draw lines. I can't think why anyone would use anything else... It's really simple to implement in 6502 ASM too. Actually modifying the pattern tables is the hard part.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>8</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>