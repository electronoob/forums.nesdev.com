<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Bad Apple demo for SNES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Bad Apple demo for SNES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10696">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10696</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>10</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Nov 16, 2013 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think it is a good idea to make a Bad Apple demo for the SNES, to compete with the Genesis demo.<br /><br />If the SNES demo video runs at 30fps fullscreen 2bpp, then it would take 7kB of DMA per frame.  Since we do not need to use the OAM for this demo, we can DMA up to 6kB of data per frame.  In order to fit 7kB of graphical patterns into 6kB, we can take advantage of solid colored tiles that are all black or all white.<br /><br />I could program the dma loading scheme and pack-to-planar conversion, but I don't know how to do the video encoding part.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Nov 16, 2013 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Why not.<br /><br />I don't think a runtime packed-to-planar conversion is needed, though. Pretty much everything could be done in preprocessing.<br /><br />A thing that may work on the SNES is interleaved bitplane updates. Like, one frame (1/60) we update bit 0, other frame bit 1. Will create some kind of motion blur, but may be acceptable. This will cut VRAM bandwidth, and the whole (bitplane of) the frame buffer could be DMAed, without breaking it into sequence of DMAs; tile update could be done in a RAM buffer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Nov 16, 2013 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I <a href="http://wiki.nesdev.com/w/index.php/Bad_Apple" class="postlink">reverse engineered</a> how the 15fps version of Bad Apple for NES encodes video. The screen is divided into a grid of 16x30 blocks of 4x2 texels (2 tiles, 16x8 pixels). There are a handful of frames, mostly before the lyrics begin, that use a special code for &quot;all blocks modified&quot; (I-frame, also called keyframe) or &quot;no blocks modified&quot; (D-frame), but the vast majority of frames in Bad Apple are P-frames. Each P-frame has 4 bytes for which rows of tiles have at least one modified row, then 2 bytes for which blocks are modified, then 1 byte for each modified block.<br /><br />What you're talking about doing is making all frames I-frames and using a bitwise encoding to store which tiles in a frame are black, which are white, and which have a pattern. Then you'd send the nametable and unique patterns for each frame. I could write prototype code in Python and 6502 for that; you could optimize it for native mode.<br /><br />Would it be acceptable to use mosaic mode for 128x112 texels? That'd let you use H-flipped tiles, V-flipped tiles, and VH-flipped tiles to fit the entire display into 3.5 KiB per frame, at the cost of some chunkiness.<br /><br />Or would it be acceptable to use 1bpp, with even tile columns using black, white, black, white, and odd tile columns using black, black, white, white? That'd cut it down to 7 KiB per frame, which fits in 6+1.<br /><br />One thing I'd like to see where it freezes on the apple as Marisa is grabbing it is this:<br /><a href="http://www.engadget.com/2010/04/02/sick-of-all-the-apple-news-were-here-for-you/" class="postlink"><img src="http://www.blogcdn.com/www.engadget.com/media/2010/01/noapple.jpg" alt="Image" /></a><br />Then I wonder if the dropping cup that shatters could be changed into a dropping iPhone that shatters.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Nov 16, 2013 11:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I want it to be the same quality as the Genesis version, and using a smaller resolution would look bad in comparison.<br /><br />A possible compression technique can be to do RLE on 8x1 slivers, with the tiles arranged vertically.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sun Nov 17, 2013 12:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />RLE is certainly not something well suitable for video, even a silhouette one.<br /><br />It needs interframe compression, i.e. storing only difference between frames, with a fixed dictionary of often used elements (solid black and solid white at the least), maybe with loss of details (replacing tiles with similar entries of the dictionary set), maybe with Huffman or LZ on top of all this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Nov 17, 2013 7:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The trolls will still claim superiority because the Genesis ROM runs in 320-pixel mode. One might have to use hires to beat that. Fortunately, FFmpeg has no problem scaling a 480x360 video to 512x224.<br /><br />At this scale, I don't see how interframe compression would help much. Just about every non-solid tile would change each frame.<br /><br />In any case, some sort of compression into an average of about 1280 bytes per frame would be needed to fit the thing into 8 MB. (At which point one of them is likely to haul out the Sega CD with every Touhou fan video known to man encoded in Cinepak.)<br /><br />I took an equally spaced sample (one every 30 frames) and counted how many 8x8 pixel tiles were all black or all white. This is <em>the</em> key metric for figuring out how to fit everything in 12 KiB/frame of video memory bandwidth.<br /><ul><li>512x224: 355099 of 394240 solid (90.07%) </li><li>256x224: 171397 of 197120 solid (86.95%)</li></ul><br />Have you tried disassembling the Genesis version to see how it manages 15:1 compression? I'm pretty sure it'll take more than just solid tile elimination. Perhaps there's some advantage to packed pixels.<br /><br />But when watching a YouTube video of the Genesis version, I did notice a bunch of gray artifacts along certain near-horizontal edges. Perhaps this could be exploited to use one of four formats for each tile: solid black, solid white, 1bpp, or 2bpp.<br /><br />There might also be a win in using RLE for runs of solid tiles. My sample showed that most solid tiles were after another solid tile.<br /><ul><li>512x224: 355099 of 394240 solid (90.07%), 340911 solid after solid (86.47% of total) </li><li>256x224: 171397 of 197120 solid (86.95%), 158682 solid after solid (80.50% of total) </li></ul><br />Another cheat is to use fake widescreen. Encode only 168 pixels tall, keep tile rows outside this range black, then do some subtle horizontal scrolling over the affected area. This makes things look somewhat more cinematic, even if the trolls might call you out on reduced res.<br /><br />I wonder how much of the video can be decomposed into areas where just two horizontal pixel runs differ from the background color. That might allow drawing much of the video with window registers.<br /><br />And about the music: BRR (4.5 bits/sample) at 12 kHz mono for 220 seconds would take 1485000 bytes. I wonder to what extent the BRR data itself could be compressed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Nov 17, 2013 9:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I wonder to what extent the BRR data itself could be compressed.</div><br />Trust me, very poorly.<br />I have tested this. Even very advanced compressions such as BZIP2 will not compress anything when compressing BRR data.<br />The only thing you could possibly do is separate the BRR header data from the other data and compress the header efficiently, but even then you'll never compress more than 1/9 of the whole data which is very poor.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sun Nov 17, 2013 11:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">RLE is certainly not something well suitable for video, even a silhouette one.<br /><br />It needs interframe compression, i.e. storing only difference between frames, with a fixed dictionary of often used elements (solid black and solid white at the least), maybe with loss of details (replacing tiles with similar entries of the dictionary set), maybe with Huffman or LZ on top of all this.</div><br /><br />How do you store the differences between frames?  Use motion vectors on tiles, and overlay a compressed tile over it?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Nov 17, 2013 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />First what you need to do is see how the players for Bad Apple (Genesis) and the intro for Sonic 3D Blast work.<br /><br />I'm not so sure you need motion compensation in the first place. Let's first figure out how to code keyframes efficiently. For example, I figured out how to encode tiles on the left or right edge of a silhouette at one-half bit per pixel. Each byte represents two rows, with nibbles taken from the following table:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.byte $00, $80, $C0, $E0, $F0, $F8, $FC, $FE, $FF, $7F, $3F, $1F, $0F, $07, $03, $01</div><br />This allows efficient coding of edge tiles:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0: . . . . . . . .<br />1: &#91;&#93;. . . . . . .<br />2: &#91;&#93;&#91;&#93;. . . . . .<br />3: &#91;&#93;&#91;&#93;&#91;&#93;. . . . .<br />4: &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;. . . .<br />5: &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;. . .<br />6: &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;. . <br />7: &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;. <br />8: &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;<br />9: . &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;<br />A: . . &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;<br />B: . . . &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;<br />C: . . . . &#91;&#93;&#91;&#93;&#91;&#93;&#91;&#93;<br />D: . . . . . &#91;&#93;&#91;&#93;&#91;&#93;<br />E: . . . . . . &#91;&#93;&#91;&#93;<br />F: . . . . . . . &#91;&#93;<br /></div><br />More detailed edge tiles will likely need another method.<br /><br />Or use &quot;vector quantization&quot;, in which a representative set of a few tens of thousands of tiles are reused to form images.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Mon Nov 18, 2013 4:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, here is a simple algorithm to start with.  Obviously it's not going to be the final algorithm, but it's a starting place.<br /><br />mmrrrrrr<br /><br />m: mode<br />00: solid black tile<br />01: solid white tile<br />10: 1 bpp tile<br />11: 2 bpp tile<br /><br />r: run legnth (1-64)<br /><br />BTW, aren't tiles in hi-res mode always 16 pixels across?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Nov 18, 2013 9:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Motion vectors is kind of overkill. Just check which tiles are changed (with amount threshold optionally) between frames, store them somehow efficiently enough, put the new tiles over previously decoded frame.<br /><br />A dictionary I was talking about could contain not only solid colors, but also some common blocks, or blocks that could replace a number of similar looking blocks (this reduces quality, but saves room). Like, almost solid tile without few corner pixels, etc. Staticstics of common blocks could be collected from source frames before compression.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Stef</b> [ Thu Nov 21, 2013 4:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If it can help, here are the sources of the genesis version :<br /><!-- m --><a class="postlink" href="https://dl.dropboxusercontent.com/u/93332624/dev/megadrive/demo/BadApple_src.7z">https://dl.dropboxusercontent.com/u/933 ... ple_src.7z</a><!-- m --><br /><br />Basically it does frame difference and only store tilemap and modified tiles, it mainly uses dictionaries to encode redundant tile data but there are severals compression schemes. I spent many time in building the video encoder but still it is not very efficient... <br />I used a tool to generate the dictionary tile unpack code, that explain why some part look weird and badly optimized (as some move.l #0x00000000, %d0 sequences).<br /><br />I would really like to see what the SNES could do here but i am pessimist about the decompression part. It eats a lot of time on the 68000 and i don't see how the 65816 can compete here. Maybe by using simpler compression schemes but it would not fit in 8 MB then...<br />Still the MD offers some advantages as linear packed tile data and no bank stuff to deal with.<br />The SNES offer the native 2BPP mode that MD does not have but can be easily simulated using palette trick.<br /><br />Good luck with your project, i really wish to see something coming from that <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Sat Dec 28, 2013 1:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bumping because I was away for almost a month.<br /><br />First of all, let's remember there are multiple Bad Apple demos on the Mega Drive, OK? I don't know how MtChocolate's works, Stef released the source code to his, and then there's <a href="http://gendev.spritesmind.net/forum/viewtopic.php?t=1489" class="postlink">this</a> which in my opinion is the best so far and the method is explained in that thread too (albeit no source code). The only glitches I noticed in the latter seemed to be more encoding bugs than actual limitations.<br /><br />Also not sure how the 65816 competes in decompression, given that's something that usually works with small numbers so it shouldn't be at much of a disadvantage compared with the 68000. Register usage would be the biggest problem, in my opinion, and that depends a lot on the coder's skill.<br /><br />By the way, at this rate we'll find a way to put videos on floppy disks =P

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Dec 28, 2013 5:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been busy celebrating Christmas with family so I had limited time programming.<br /><br />I think I'll use the method you posted since it's the simplest.  I would need somebody to post a ROM with all the video data, because I don't know how to convert a video file.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Stef</b> [ Sun Dec 29, 2013 4:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bad Apple demo for SNES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Bumping because I was away for almost a month.<br /><br />First of all, let's remember there are multiple Bad Apple demos on the Mega Drive, OK? I don't know how MtChocolate's works, Stef released the source code to his, and then there's <a href="http://gendev.spritesmind.net/forum/viewtopic.php?t=1489" class="postlink">this</a> which in my opinion is the best so far and the method is explained in that thread too (albeit no source code). The only glitches I noticed in the latter seemed to be more encoding bugs than actual limitations.<br /><br />Also not sure how the 65816 competes in decompression, given that's something that usually works with small numbers so it shouldn't be at much of a disadvantage compared with the 68000. Register usage would be the biggest problem, in my opinion, and that depends a lot on the coder's skill.<br /><br />By the way, at this rate we'll find a way to put videos on floppy disks =P</div><br /><br />The version you are talking about is very interesting, first because it fits in 4MB (which is a big advantage to test on regular MD flash cart) and also because it is probably a far better candidate to port on SNES. The compression scheme is far lighter than my version (it does not even use the DMA) and can probably be ported to the SNES cpu without much troubles.<br />The drawback of this version is the blocky stuff you call glitches, they are due to the compression as you can't fit the whole video (and sound) in 4MB without loss (especially on such limited hardwares).<br />My 8 MB version is lossless for the video and that is quite an achievement (i believe), i initially had a 4MB lossless version (without sound) but i was not able to unpack it fast enough (between 10 and 30 FPS) so i had to use a simpler codec (i ended with 6.6 MB of video and 1.3 MB of sound).<br />The problem with the 65816 about decompression is not only the number of register but also the &quot;fillrate&quot; capabilities, still i guess a skilled coder could do some nice things with it <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>10</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>