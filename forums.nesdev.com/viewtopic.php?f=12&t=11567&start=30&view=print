<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What kind of 3D calculations were used in SuperFX games?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What kind of 3D calculations were used in SuperFX games?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11567">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=11567</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Wed Aug 27, 2014 1:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ARM9 wrote:</div><div class="quotecontent">8bpp can be used for both mode7 and mode3/4, it depends on how you upload it to vram (port $2118 byte transfers interleaved or word to 2118/2119) and how you build your map.</div><br />You sure?  How would you account for packed-pixel vs. bitplane?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, technically the GSU is wired directly to the cartridge (it could even be wired to access parts not accessible to the 65816), so in the worst case they could just wire the banks to the relevant portions... The only limitation here would be Nintendo's policies =P</div>The gsu sits between the cartridge rom/ram and the scpu so the address bus on the gsu is the limit here, which can only address 2MiB on all but the first version. Shouldn't be too much of a hassle to increase that on something like the sd2snes.</div><br />I'm referring to the memory maps in the manual.  The GSU doesn't see anything above bank 71, but the S-CPU can access a bunch of stuff past that point, including 2 MB of LoROM from 80 to BF and 4 MB of HiROM from C0 to FF.  This 6 MB ROM region is in addition to what the GSU can access, and according to the diagrams in sections 1.3 and 1.4, the CPU can access this ROM irrespective of what the GSU is doing or the status of the access control switch.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Aug 27, 2014 2:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Re: 8bpp available in mode 3, mode 4, and mode 7: this is correct.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Aug 28, 2014 4:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't care what the manual says, the layout is:<br /><br />[SNES cartridge connector] &lt;-&gt; [GSU] &lt;-&gt; [ROM]<br /><br />Only one of them can actually read back valid ROM contents at a time, because you can't have two chips reading the same chip at different locations at the exact same time. It's not physically possible.<br /><br />The SA-1 is the only coprocessor that <em>appears</em> to do it, but in fact it uses another logic block that controls memory accesses. It will actually stall the SA-1 CPU when the host SNES CPU is accessing the same chip at the same time. Which as you can imagine, results in the code taking longer to execute. The GSU does not have this logic, and neither does the Cx4.<br /><br />Now ... if you wire up your own cart, you can easily have:<br /><br />[SNES cartridge connector] &lt;-&gt; [GSU] &lt;-&gt; [ROM1]<br />[SNES cartridge connector] &lt;-&gt; [ROM2]<br /><br />Where obviously the GSU won't be able to access ROM2, but the SNES CPU can continue to use ROM2 while the GSU is using ROM1.<br /><br />Now, what is the max ROM the GSU can address? I'd probably go with what the docs say, depending on each revision. But that's strictly a matter of how many ROM address pins there are on the GSU chip itself.<br /><br />Cheating this with the sd2snes won't do you much good, since unfortunately that chip's not emulated there (yet? may prove too demanding for the FPGA used.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 28, 2014 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I don't care what the manual says, the layout is:<br /><br />[SNES cartridge connector] &lt;-&gt; [GSU] &lt;-&gt; [ROM]<br />[...]<br />Now ... if you wire up your own cart, you can easily have:<br /><br />[SNES cartridge connector] &lt;-&gt; [GSU] &lt;-&gt; [ROM1]<br />[SNES cartridge connector] &lt;-&gt; [ROM2]</div><br />I have avoided seeing the manual. But based on what's been said so far in this topic, it appears the manual mentions the latter configuration, which never ended up used in a commercial game due to cost.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Aug 28, 2014 10:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Re: 8bpp available in mode 3, mode 4, and mode 7: this is correct.</div><br />For the SNES, or for the Super FX?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Aug 28, 2014 10:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><div class="quotetitle">koitsu wrote:</div><div class="quotecontent">Re: 8bpp available in mode 3, mode 4, and mode 7: this is correct.</div><br />For the SNES, or for the Super FX?</div><br />SNES.  I know absolutely *jack squat* about the Super FX or any extension chips.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Aug 28, 2014 11:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, found a reference that isn't the dev manual (not as explicit about the circuit layout, unfortunately):<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=5964&amp;hilit=Additional&amp;start=45#p103957">viewtopic.php?f=12&amp;t=5964&amp;hilit=Additional&amp;start=45#p103957</a><!-- l --><br /><br /><div class="quotetitle">nocash wrote:</div><div class="quotecontent"><strong>GSU Memory Map (at SNES Side)</strong><br />This is more or less as already known. The 8K at xx:6000h-xx:7FFFh is always mirroring to 700000h-701FFFh (no matter if the &quot;xx&quot; bank is 00h..3Fh or 80h..BFh).<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 00-3F:3000-34FF&nbsp; GSU I/O Ports<br />&nbsp; 00-3F:6000-7FFF&nbsp; Mirror of 70:0000-1FFF (ie. FIRST 8K of Game Pak RAM)<br />&nbsp; 00-3F:8000-FFFF&nbsp; Game Pak ROM in LoRom mapping (2Mbyte max)<br />&nbsp; 40-5F:0000-FFFF&nbsp; Game Pak ROM in HiRom mapping (mirror of above 2Mbyte)<br />&nbsp; 70-71:0000-FFFF&nbsp; Game Pak RAM&nbsp; &nbsp; &nbsp; &nbsp;(128Kbyte max, usually 32K or 64K)<br />&nbsp; 78-79:0000-FFFF&nbsp; Additional &quot;Backup&quot; RAM&nbsp; (128Kbyte max, usually none)<br />&nbsp; 80-BF:3000-32FF&nbsp; Mirror of GSU I/O Ports<br />&nbsp; 80-BF:6000-7FFF&nbsp; Mirror of 70:0000-1FFF (ie. FIRST 8K of Game Pak RAM)<br />&nbsp; 80-BF:8000-FFFF&nbsp; Additional &quot;CPU&quot; ROM LoROM (2Mbyte max, usually none)<br />&nbsp; C0-FF:0000-FFFF&nbsp; Additional &quot;CPU&quot; ROM HiROM (4Mbyte max, usually none)<br />&nbsp; Other Addresses&nbsp; Open Bus<br /></div><br />The above &quot;Additional&quot; areas aren't installed on existing boards (=are seen as open bus).</div><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I don't care what the manual says, the layout is:<br /><br />[SNES cartridge connector] &lt;-&gt; [GSU] &lt;-&gt; [ROM]<br />[...]<br />Now ... if you wire up your own cart, you can easily have:<br /><br />[SNES cartridge connector] &lt;-&gt; [GSU] &lt;-&gt; [ROM1]<br />[SNES cartridge connector] &lt;-&gt; [ROM2]</div><br />I have avoided seeing the manual. But based on what's been said so far in this topic, it appears the manual mentions the latter configuration, which never ended up used in a commercial game due to cost.</div><br />As far as I can tell, that's exactly right.  The SNES is supposed to be wired straight into the &quot;additional&quot; ROM and RAM, parallel to the GSU and the memory behind it.  But no games actually did this...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Mon Sep 01, 2014 1:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If it's not too late, I'd just like to reiterate that if anyone on here knows the answers to my questions, I do not want them put to an original Star Fox programmer who is reportedly very busy and might, given the time elapsed, have to look up detailed chip information like anyone else.  For instance, in light of nocash's old post and byuu's newer one, I consider my question #4 answered.<br /><br />Also, it turns out nocash has enough data in his fullsnes document that I don't need to reference the manual for my questions.<br /><br />Revised list:<br /><br />1) What are the absolute hardware bottlenecks on blitting (using PLOT with color #0 not written, or only PLOTting part of a pixel cache, so it has to read the old data from RAM before writing the new data back)?<br />1b) How many cycles does it take to empty the secondary pixel cache under those circumstances?<br />1c) How about transferring the primary cache to the secondary, once the secondary is free?<br /><br />2) Apparently ROM access in high speed mode (21 MHz) is 5 cycles instead of 3. Is the same true of RAM access?  For both reading and writing? And does this impact the answer(s) for (1)?  Did this change at all between chip/board revisions?<br /><br />3) Is the instruction cache on the latest version(s) of the GSU 256 bytes or 512 bytes? I'd like to be sure.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ARM9</b> [ Wed Sep 03, 2014 3:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">2) Apparently ROM access in high speed mode (21 MHz) is 5 cycles instead of 3. Is the same true of RAM access?  For both reading and writing? And does this impact the answer(s) for (1)?  Did this change at all between chip/board revisions?<br /></div><br />Since the RAM access is documented to be similar to ROM in most cases (other than where executing in RAM would impact RAM access) I'd think fullsnes is correct on this point.<br />Storing to ram (sm,st,sbk) uses a buffer so the cpu can continue executing opcodes without having to wait (except when running code in ram). If you execute other code while ram is being written you can perform 1-2 cycle writes (when running in cache). This is all documented in the pdf that I'll assume you have, you should read through the gsu chapter.<br />It's a bit inconsistent and just plain wrong at times, but it's the best we have at this point until somebody finds argonaut documents.<br />&gt;According to cache description (page 132), Cache-Code is 6 times faster than ROM/RAM. However, according to opcode descriptions (page 160 and up), cache is only 3 times faster than ROM/RAM. Whereas, maybe 6 times refers to 21MHz mode, and 3 times to 10MHz mode?<br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">3) Is the instruction cache on the latest version(s) of the GSU 256 bytes or 512 bytes? I'd like to be sure.<br /></div><br />512 bytes, all revisions, it's in the manual, fullsnes and bsnes. And you can test it yourself with $3100-$32FF. Where'd you read that it's 256 bytes?<br /><br />As for question 1, I'm curious about this as well, it's not documented in the manual other than plot having a worst case of 48 cycles. Generally you want to put as much general processing as possible between plot and load/store instructions. Considering the worst case it might be wise to try and put more code after a plot until you access ram.<br />If you want exact timings, consider profiling on hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>93143</b> [ Thu Sep 04, 2014 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What kind of 3D calculations were used in SuperFX games?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">ARM9 wrote:</div><div class="quotecontent"><div class="quotetitle">93143 wrote:</div><div class="quotecontent">2) Apparently ROM access in high speed mode (21 MHz) is 5 cycles instead of 3. Is the same true of RAM access?  For both reading and writing? And does this impact the answer(s) for (1)?  Did this change at all between chip/board revisions?<br /></div><br />Since the RAM access is documented to be similar to ROM in most cases (other than where executing in RAM would impact RAM access) I'd think fullsnes is correct on this point.</div><br />I'd think so too, but it doesn't seem to be too definite on the subject, what with all the question marks and the caveat about poor documentation...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Storing to ram (sm,st,sbk) uses a buffer so the cpu can continue executing opcodes without having to wait (except when running code in ram). If you execute other code while ram is being written you can perform 1-2 cycle writes (when running in cache).</div><br />Yeah, but that doesn't change the fundamental fact that the throughput to RAM is one byte every X cycles, which would bottleneck a sufficiently lean continuous write loop.<br /><br />According to my calculations, the application I have in mind (a port of a bullet hell shooter) is pretty much right on the edge of the chip's capabilities.  The difference between 24 and 40 cycles for a 4bpp cache flush with unset bit-pend flags could be the difference between being able to exactly duplicate the original bullet patterns and having to simplify them.<br /><br />I do <em>not</em> want to have to simplify the patterns, because that probably means rebalancing the game, which I don't trust myself to do.<br /><br />I suppose I could leave the chip in low-speed mode and overclock it, but that's cheating (good luck getting Nintendo to agree to let you do that for a commercial release), and might result in errors with the memory used in the original games...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle">93143 wrote:</div><div class="quotecontent">3) Is the instruction cache on the latest version(s) of the GSU 256 bytes or 512 bytes? I'd like to be sure.<br /></div><br />512 bytes, all revisions, it's in the manual, fullsnes and bsnes. And you can test it yourself with $3100-$32FF. Where'd you read that it's 256 bytes?</div><br />Well, byuu has used the number <a href="http://board.zsnes.com/phpBB3/viewtopic.php?p=196559#p196559" class="postlink">a</a> <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=9446&amp;start=15#p102025" class="postlink">few</a> <a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=5964&amp;p=103496#p103496" class="postlink">times</a>.  I figured there had to be a reason...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you want exact timings, consider profiling on hardware.</div><br />I guess that would be ideal, but I don't really have the resources (or skills) to do that right now.  Ultimately I may well end up running on a real GSU, but I'd rather not have to choose between doing that up front (stalling the whole project until I can get the time and resources together) and potentially getting a nasty surprise after writing a ton of code...<br /><br />I suppose I could just assume higan is close enough and test it there, but byuu has complained about Super FX timing in the past and I don't know if the current GSU code is as accurate as the core system emulation...

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>