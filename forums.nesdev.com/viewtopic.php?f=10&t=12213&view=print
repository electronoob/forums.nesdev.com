<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Sprite movement without continuous user input.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Sprite movement without continuous user input.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12213">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=12213</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lazerbeat</b> [ Mon Jan 05, 2015 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I am making a very very simple sprite movement program based on the Nerdy Night tutorial. and I am a bit stuck. I have 4 little bubble moving around the screen at different speeds when the user pressed up / down / left / right. I have 2 questions<br /><br />1 - how do I make sprite movement continuous without the user constantly holding down a direction. I am guessing at BNE rather than BEQ while reading controllers but I cant work out how to implement it.<br /><br />2 - How do I make the sprites start moving from the moment the rom is started rather than waiting for user input? I was assuming something like <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA $0200&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0200&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position</div><br /><br />Before reading controllers would do the trick but I couldn't work out where to put it!<br /><br />Here is the code I have for movement so far. I attached the .nes as well is anyone wanted to have a look at it.<br /><br />thanks everyone!<br /><br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LatchController:<br />&nbsp; LDA #$01<br />&nbsp; STA $4016<br />&nbsp; LDA #$00<br />&nbsp; STA $4016&nbsp; &nbsp; &nbsp; &nbsp;; tell both the controllers to latch buttons<br /><br /><br />ReadA: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - A<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadADone&nbsp; &nbsp;; branch to ReadADone if button is NOT pressed (0)<br />ReadADone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br />&nbsp; <br /><br />ReadB: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - B<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadBDone&nbsp; &nbsp;; branch to ReadBDone if button is NOT pressed (0)<br />ReadBDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />Readselect: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - select<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadselectDone&nbsp; &nbsp;; branch to Readselect Done if button is NOT pressed (0)<br />ReadselectDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br />Readstart: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - select<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadstartDone&nbsp; &nbsp;; branch to Readstart Done if button is NOT pressed (0)<br />ReadstartDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />Readup: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - up<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadupDone&nbsp; ; branch to Readup Done if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0200&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0200&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $0204&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$02&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0204&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $0208&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$03&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0208&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $020C&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $020C&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadupDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />Readdown: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 + down<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReaddownDone&nbsp; &nbsp;; branch to Readdown Done if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0200&nbsp; &nbsp; &nbsp; &nbsp;; load sprite Y position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0200&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; LDA $0204&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$02&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0204&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $0208&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$03&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0208&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $020C&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $020C&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReaddownDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br /><br />Readleft: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - select<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadleftDone&nbsp; &nbsp;; branch to Readleft Done if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $0207&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$02&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0207&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $020B&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$03&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $020B&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $020F&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $020F&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadleftDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done<br /><br /><br />Readright: <br />&nbsp; LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - select<br />&nbsp; AND #%00000001&nbsp; ; only look at bit 0<br />&nbsp; BEQ ReadrightDone&nbsp; &nbsp;; branch to Readright Done if button is NOT pressed (0)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add instructions here to do something when button IS pressed (1)<br />&nbsp; LDA $0203&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0203&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $0207&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$02&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0207&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $020b&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$03&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $020b&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />&nbsp; LDA $020f&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$04&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $020f&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br />ReadrightDone:&nbsp; &nbsp; &nbsp; &nbsp; ; handling this button is done</div>

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=2383">stars.nes</a> [48.02 KiB]
			</span><br />
			<span class="gensmall">Downloaded 21 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Jan 05, 2015 11:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lazerbeat wrote:</div><div class="quotecontent">1 - how do I make sprite movement continuous without the user constantly holding down a direction. I am guessing at BNE rather than BEQ while reading controllers but I cant work out how to implement it.</div><br />It's a bit more complex than that. The basic idea behind an action game (as opposed to a puzzle game or a turn-based game) is that the game world is constantly updating, regardless of user input. To accomplish this, each object or group of objects has to have their own AI routine, which dictates their behavior. AI routines can take various factors into consideration when deciding what to do to the objects, including input from the controller, in the case of the player object.<br /><br />The program in the tutorial you're following is an oversimplification of what a game actually is, where certain sprites are hardcoded to controller input.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2 - How do I make the sprites start moving from the moment the rom is started rather than waiting for user input?</div><br />By implementing AI. You have to give your objects some rules they can follow. It doesn't have to be anything complex, but if you want your game objects to act on their own you have to make them capable of taking simple decisions, even if it's just &quot;keep moving right no matter what&quot;.<br /><br />To keep things simple for now, you could make a different AI routine (which you can JSR to and RTS from, to keep the code organized) for each object you have on screen, and call all the routines every frame. Inside the routines, just write whatever behavior you expect each object follow. If the object is supposed to move right forever, just add 1 to its X coordinate and you're done. If you want it to bounce up and down the screen, use a &quot;direction&quot; variable to control whether it's going up or down, move it in the current direction (add or subtract 1 from the Y coordinate based on the value &quot;direction&quot; variable) and switch directions whenever the sprite touches the top or the bottom of the screen (Y coordinate equals 0 or 232).<br /><br />You can keep one or more objects reacting to input, but you can take other factors of the game world into consideration if you want. In a platformer for example, characters are supposed to fall when there's no ground below them because of gravity. That is one movement that happens regardless of what buttons are pressed on the controller. The important thing is to think in terms of rules. What rules does each object follow? How does the environment affect its decisions? How do other objects affect its decisions? Once you have that figured out, you have to translate those rules into code. You will surely need to use many variables to define the state of the objects, because then you'll have to keep track of a lot more than just their coordinates, like direction, speed, health... all of that can affect how an object moves and what it does each frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I was assuming something like<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA $0200&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; SBC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A - 1<br />&nbsp; STA $0200&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position</div><br /><br />Before reading controllers would do the trick but I couldn't work out where to put it!</div><br />This is just the actual hardware sprite being moved, and could be the simplest form of AI where the object only does 1 thing (move left) no matter what.<br /><br />As for where to place it, I can see that the tutorial you're using is doing something that's not recommended, which is taking action in the middle of reading the controller. This is bad for a number of reason, the main one being it mixes game logic with hardware interfacing, which in the long run will make your code hell to maintain. Another bad reason is that may actually have actions that depend on more than one button being pressed (such as holding a button to run faster in SMB), and if you only have a big block of code for each button you can't do that.<br /><br />The correct thing to do would be to read all the controller bits and store them in a variable (coincidentally or not, the NES controller has 8 buttons, the same number of bits in a byte), which can be consulted later by any object that needs to know the state of the controller.<br /><br />So, the ideal thing to do would be to modify the controller reading to just save the status of all the buttons but doesn't make any decisions right away. After that, call all the object AI routines (where the sprite movement code should be) one by one. If they do need to peek at the controller status, great, the variable will be sitting there for them to read.<br /><br />I know that this will cause a lot of changes in your code, but I guess that's what happens when you try to turn tutorial code into something closer to a game. If you think this is too much, maybe it would be better to stick with the tutorial for now, and maybe it will come to a point where these changes feel more natural. Just keep in mind that AI is the answer to what you're looking for.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Mon Jan 05, 2015 7:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I can see that the tutorial you're using is doing something that's not recommended, which is taking action in the middle of reading the controller.</div><br />It gets better later in the tutorial. Early on it just teaches to do things manually without looping and stuff which is a great way to teach how it works. But of course there things it never teaches how to do properly.<br /><br /><div class="quotetitle">lazerbeat wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $4016&nbsp; &nbsp; &nbsp; &nbsp;; player 1 - A<br />AND #%00000001&nbsp; ; only look at bit 0</div></div><br />This is another bad code in the Nerdy Nights tutorial. I don't see why Nerdy Nights don't teach you to read both bit 0 and bit 1 in $4016 (and $4017 if two player). We don't need homebrewers that learn to make games that doesn't work with Famicom external controllers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Jan 05, 2015 8:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would imagine that the majority of people who read tutorials in the English language have no easy access to a Famicom with which to test.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mikaelmoizt</b> [ Tue Jan 06, 2015 3:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want <strong>just</strong> the sprites moving like you have done in your program without any form of interactivity, for whatever reason (why?) you could do something like moving parts like<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDA $0200&nbsp; &nbsp; &nbsp; &nbsp;; load sprite Y position<br />&nbsp; CLC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$01&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0200&nbsp; &nbsp; &nbsp; &nbsp;; save sprite Y position<br /><br />&nbsp; LDA $0204&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$02&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0204&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />(...) </div><br /><br />into your nmi and cut everything related to controller reading. Are you by any chance using NESASM3 to assemble with? You have a 32k rom with first 16k block empty.<br /><br />EDIT: This method is not endorsed by me, but it is pretty much how to do what the OP is asking if I am not mistaken.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Jan 06, 2015 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mikaelmoizt wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;<br />&nbsp; LDA $0204&nbsp; &nbsp; &nbsp; &nbsp;; load sprite X position<br />&nbsp; SEC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; make sure the carry flag is clear<br />&nbsp; ADC #$02&nbsp; &nbsp; &nbsp; &nbsp; ; A = A + 1<br />&nbsp; STA $0204&nbsp; &nbsp; &nbsp; &nbsp;; save sprite X position<br /><br />(...) </div><br /></div><br /><br />I think the SEC is supposed to be CLC in this code snippet.<br /><br />I also recommend not going the route of hard coding sprite movement; the only sprite you should directly update is sprite #0 if you're doing any effects with it. Like tokumaru explained, developing an abstract &quot;game world&quot; where you have objects moving within it, and then updating the entire sprite page based on object positions is ideal in most cases.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Tsutarja</b> [ Tue Jan 06, 2015 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">lazerbeat wrote:</div><div class="quotecontent">1 - how do I make sprite movement continuous without the user constantly holding down a direction. I am guessing at BNE rather than BEQ while reading controllers but I cant work out how to implement it.</div><br /><br />I would set a flag when the button is pressed. The object checks if the flag is set. If it is, the object moves as you want. The flag gets cleared when you want the object to stop, not when the button is released.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Tue Jan 06, 2015 7:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I would imagine that the majority of people who read tutorials in the English language have no easy access to a Famicom with which to test.</div><br />It doesn't need to be tested since it's already well known to work (I can confirm it too). It's standard practice for commercial games to read both bits and recommended in the wiki, so there's really no reason to not include it when teaching this.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Tsutarja</b> [ Tue Jan 06, 2015 10:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Sprite movement without continuous user input.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Also, I noticed that you are reading each button individually and doing all the checks related to that button right after it. Better way is to update all buttons once per frame (all buttons at once) and then see if the desired buttons are pressed somewhere else.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Joy1Read:<br />&nbsp;LDA #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Latch controllers<br />&nbsp;STA Joy1<br />&nbsp;LDA #$00<br />&nbsp;STA Joy1<br />&nbsp;LDX #$08<br />Joy1Loop:<br />&nbsp;PHA<br />&nbsp;LDA Joy1<br />&nbsp;AND #$03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; AND off anything unnecessary<br />&nbsp;CMP #$01&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; See if button was pressed (sets carry flag if it was)<br />&nbsp;PLA<br />&nbsp;ROR A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Rotate right (puts carry flag to the leftmost bit whether it was set or not)<br />&nbsp;DEX<br />&nbsp;BNE Joy1Loop<br />&nbsp;RTS<br /></div><br /><br />NOTE: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Joy1</tt> refers to the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$4016</tt> register. You can set one by writing <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Joy1 = $4016</tt> (or <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">PPUMask = $2001</tt> as another example) after the ines header but before the first <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.bank</tt> (to the same area you define your variables in with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.rsset</tt>).<br /><br />NOTE 2: Notice how I'm not storing the controller readings anywhere? That's because I store them outside this subroutine. It allows me to use this same subroutine to read the buttons again and compare the two readings to verify that the inputs were not corrupted by DMC sample (if used).<br /><br />Now, if you held down A and B you would have <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">%00000011</tt>. If you want to see if A button is pressed, you can do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CheckA:<br />&nbsp;LDA joy1_reading<br />&nbsp;AND #%00000001<br />&nbsp;CMP #%00000001<br />&nbsp;BNE ANotHeld<br /><br />; What you want to do if A is held<br /><br />ANotHeld:<br /><br />; Whatever happens in your code after this<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>