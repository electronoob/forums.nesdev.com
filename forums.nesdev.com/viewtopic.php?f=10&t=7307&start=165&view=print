<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Hello World</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Hello World</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7307</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>12</strong> of <strong>18</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Oct 08, 2011 8:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">Isn't RODATA tied to a specific bank then?</div><br />Many mappers have a "fixed bank", or a memory area to put segments that should always remain available, at $C000-$FFFF. On these mappers, no matter which bank is switched in, the last bank in the cartridge will always be present at $C000-$FFFF.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Is accessing them in ROM slower then doing so in RAM?</div><br />ROM and RAM run at the same speed on the NES because the NES has no wait states. In fact, there are other platforms where ROM can be accessed faster than (certain parts of) RAM, such as the Super NES and the Game Boy Advance, because DRAM access introduces a wait state. But in some cases, such as odd pointer manipulation tricks needed to pull data from a table, copying select things to RAM might make them faster to access. And of course, anything compressed may need to be copied to RAM as it is decompressed, though some "random access" compression schemes allow a program to keep only part of the decompressed data in RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Who's Tokumaru?</div><br />Another regular on this BBS, from Brazil.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I've been referring to objects in RODATA as "tables".</div><br />The name implies... a table (like in HTML) though.</div>
<br />That or a <a href="http://en.wikipedia.org/wiki/Table_%28database%29" class="postlink">table in SQL</a>, or a <a href="http://en.wikipedia.org/wiki/Lookup_table" class="postlink">lookup table</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sat Oct 08, 2011 8:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Many mappers have a "fixed bank", or a memory area to put segments that should always remain available, at $C000-$FFFF. On these mappers, no matter which bank is switched in, the last bank in the cartridge will always be present at $C000-$FFFF.</div><br />Okay. Also, do some games that have multiple large amounts of data, like maps, opt to store it in switchable banks instead, swapping them in and out as needed?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">ROM and RAM run at the same speed on the NES. But in fact, there are other platforms where ROM can be accessed faster than RAM, such as the Super NES and the Game Boy Advance.</div><br />That is strange. Is there a reason why? a motive behind such a thing?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But in some cases, such as odd pointer manipulation tricks needed to pull data from a table, copying select things to RAM might make them faster to access. And of course, anything compressed may need to be copied to RAM as it is decompressed, though some "random access" compression schemes allow a program to keep only part of the decompressed data in RAM.</div>
<br />Hmm, okay.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Oct 09, 2011 6:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">do some games that have multiple large amounts of data, like maps, opt to store it in switchable banks instead, swapping them in and out as needed?</div><br />Soytainly. That's what banks are for.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">there are other platforms where ROM can be accessed faster than RAM</div><br />That is strange. Is there a reason why? a motive behind such a thing?</div>
<br />To make the console cheap. Cheap DRAM is slower than certain mask ROM technologies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Oct 16, 2011 9:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">do some games that have multiple large amounts of data, like maps, opt to store it in switchable banks instead, swapping them in and out as needed?</div><br />Soytainly. That's what banks are for.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">there are other platforms where ROM can be accessed faster than RAM</div><br />That is strange. Is there a reason why? a motive behind such a thing?</div><br />To make the console cheap. Cheap DRAM is slower than certain mask ROM technologies.</div>
<br />Ah okay.
<br />
<br />* * *
<br />
<br />So, another question:
<br />1) What's the usual method/s to produce random numbers on the NES?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Oct 16, 2011 9:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I dunno about others, but I just add a bunch of controller dependent and also engine states together. It's only the same if you don't press any buttons, but then you can't start the game so it works pretty well once you get into the game. If there's a better way please let me know. I made a topic back on it before, maybe I should reread it now since I probably will understand the concepts better myself.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sun Oct 16, 2011 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Any simple pseudorandom algorithm will work. Galois one is very simple and work well for simple games:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">rand:<br />&nbsp; &nbsp;lda &lt;RAND_SEED<br />&nbsp; &nbsp;asl a<br />&nbsp; &nbsp;bcc @1<br />&nbsp; &nbsp;eor #$cf<br />@1:<br />&nbsp; &nbsp;sta &lt;RAND_SEED<br />&nbsp; &nbsp;rts</div>
<br />
<br />RAND_SEED is a RAM location that contains non-zero value on start. To randomize, call rand on your title screen or in other similar place all the time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Sun Oct 16, 2011 11:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I dunno about others, but I just add a bunch of controller dependent and also engine states together. It's only the same if you don't press any buttons, but then you can't start the game so it works pretty well once you get into the game. If there's a better way please let me know. I made a topic back on it before, maybe I should reread it now since I probably will understand the concepts better myself.</div><br />But what if it's an RPG? People usually aren't button mashing in one of those. Golden Sun's RNG method comes to mind. (<!-- m --><a class="postlink" href="http://goldensunwiki.net/RNG">http://goldensunwiki.net/RNG</a><!-- m --> ) The downside of course is that a player could study and abuse it.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Any simple pseudorandom algorithm will work. Galois one is very simple and work well for simple games:</div>
<br />Is this what you're talking about?: <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Linear_feedback_shift_register#Galois_LFSRs">http://en.wikipedia.org/wiki/Linear_fee ... lois_LFSRs</a><!-- m -->  I've never heard of it before. When I get some time I'll read up about it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Mon Oct 17, 2011 12:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />For RPG you would need a 16-bit (or even 32-bit) RNG with good uniform distribution (i.e. all the numbers has equal probability). It may be slower than simple RNGs.
<br />
<br />In any case, you need to find a compromise between pseudorandomness and possibility of manipulation. I.e. if you don't involve any randomization based on user's input, you only can have a pseudorandom sequence, which is always the same. Randomization based on user's input opens possibility of manipulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Oct 17, 2011 4:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">1) What's the usual method/s to produce random numbers on the NES?</div>
<br />My latest recommendation is to keep a 2-byte (16-bit) random seed and use <a href="http://www.6502.org/source/integers/crc-more.html" class="postlink">Greg Cook's implementation of CRC16 as your PRNG</a>. This is like the Galois LFSR that Shiru mentioned, except faster because it works a byte at a time instead of a bit at a time. In your NMI handler, count vblanks at all times. When the player presses start at the title screen, mix the count into the CRC:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda vblank_count<br />&nbsp; jsr CRC16_F</div><br />When the player chooses to load a saved game, mix the count in again. After you've mixed in at least two bytes of entropy, you can put zeroes in and get pseudorandom numbers out:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #0<br />&nbsp; jsr CRC16_F</div>
<br />I used to do the same thing with <a href="http://mdfs.net/Info/Comp/Comms/CRC32.htm" class="postlink">bit-at-a-time CRC32 as in ZIP</a>. It's slower, but speed is acceptable if you need a really long period and don't need a lot of random numbers per frame.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Wed Nov 16, 2011 7:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some more questions:
<br />1) What does one use interrupts for? (the BRK and RTI instructions)
<br />2) How does one emulate the remainder/modulo function on the 6502?
<br />3) As a corollary, how does one read a number, and print it off with a decimal base?
<br />4) Related, how does one use the debugger in FCEUX? I mean, I know how to set breakpoints and , but how would I find/detect/mark something like a game's routine to convert numbers to decimal?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 16, 2011 8:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">1) What does one use interrupts for? (the BRK and RTI instructions)</div><br />Interrupts exist to handle events that must be dealt with "right away". Some events are so important that they require immediate attention of the CPU, so they literally interrupt the code that the CPU is running and have it execute the code pointed by the corresponding interrupt vector. Of course that the address of the code that was running before is pushed to the stack, so that an RTI instruction can return from the interrupt and the CPU can resume its previous work.<br /><br />On the NES, interrupts are used to indicate the beginning of the vertical blank (the PPU can optionally fire an NMI when VBlank starts), to create raster effects (several mappers can generate IRQs when specific parts of the display are being rendered), and to indicate that a sample has finished playing (the APU can optionally generate an IRQ in this case).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) How does one emulate the remainder/modulo function on the 6502?</div><br />If it's a division by a power of 2, you can just mask out (using the AND instruction) the highest bits of the number, otherwise you'll have to implement an actual division routine. The "shift and subtract" method is very common, look it up on Google.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) As a corollary, how does one read a number, and print it off with a decimal base?</div><br />You'll have to convert the number from BIN/HEX to decimal. A few years ago we had <a href="http://nesdev.com/bbs/viewtopic.php?t=1222" class="postlink">a lengthy discussion about this</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) Related, how does one use the debugger in FCEUX? I mean, I know how to set breakpoints and , but how would I find/detect/mark something like a game's routine to convert numbers to decimal?</div>
<br />If you want to pinpoint a specific routine you have to do it backwards. In this case, you should first find the position on the screen where a decimal number appears, so that you can set up a breakpoint on writes to that location (click the "Add" button, write the name table address of one of the decimal digits in the first box, check "Write", check "PPU Mem"). Emulation will paue when a write to that location happens, at which point you can take a look at the code. If you are lucky it will be the code that does the conversion, but most likely not.
<br />
<br />Most games wouldn't waste VBlank time with such a conversion, so the code is probably just copying the previously converted number to the name table. But at least you'll know where the number number is stored, so you can set up another breakpoint, this time on writes to the "CPU Mem" where the converted number is. Hopefully this will allow you to locate the conversion routine. If it doesn't, just keep going.
<br />
<br />Keep in mind that some games don't convert numbers at all, they just store the individual decimal digits (1 or 2 per byte), and they specifically check for values over 9 or under 0 in order to perform carry and borrow operations. If the numbers are not used in complex math operations (anything other than adding and subtracting), it's simpler that way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 16, 2011 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">1) What does one use interrupts for? (the BRK and RTI instructions)</div><br />The BRK instruction isn't very useful on the NES, but as tokumaru pointed out, /IRQ is useful for raster effects.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) How does one emulate the remainder/modulo function on the 6502?</div><br />Division must be done in software. There are a few subroutines for this on 6502.org.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) As a corollary, how does one read a number, and print it off with a decimal base?</div><br />16-bit conversion in 700 cycles is <a href="http://wiki.nesdev.com/w/index.php/16-bit_BCD" class="postlink">on the wiki</a>.<br />8-bit conversion in 84 cycles is in src/bcd.s of <a href="http://www.pineight.com/croom/" class="postlink">Concentration Room</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">[In an NES debugger,] how would I find/detect/mark something like a game's routine to convert numbers to decimal?</div>
<br />There are two ways to do this: backward and forward.
<br />
<br />Forward: Use the cheat finder to find the address holding the number being converted to decimal, such as hit points. Then set a read breakpoint on the address; one of the reads will happen shortly before jsr binary_to_decimal.
<br />
<br />Or backward, as tokumaru mentioned: Find where on the nametable the decimal number is stored. Set a write breakpoint there, and see where it's copying from. Set another write breakpoint on the copy source, and you'll probably be inside binary_to_decimal.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FinalZero</b> [ Wed Nov 23, 2011 2:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanksgiving break is pretty much here, so I think that I'll dare to try to make a "hello world" program now (again). I understand bank-switching must better now.
<br />
<br />* * *
<br />
<br />In the mean time, a couple questions:
<br />1) What NES games had well-done cutscenes? (The Ninja Gaiden games come to mind for me, and to lesser extent, Double Dragon II)
<br />2) What games used the microphone thing that the famicom's controller had? (Besides Zelda.) How does one program the game to use it?
<br />3) Is there a way to compactly fit a font that has letters that don't fit on an 8x8 tile? RPG's rely heavily on text, yet their fonts in the NES era were so ugly and hard to read.
<br />4) Does the SNES use bank-switching? How much space can it address?
<br />5) How does scrolling work? What are nametables? In an overhead view common to RPGs, how does one move a character gradually to the next tile?, instead of "jumping" there without a smooth transition. Is there a timer involved?
<br />6) What do conversions to/from NTFS/PAL entail? Is the NOP instruction used to insert/pad cycles? Or must things be completely rewritten somehow?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Nov 23, 2011 5:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">2) What games used the microphone thing that the famicom's controller had? (Besides Zelda.) How does one program the game to use it?</div><br />I do not know of any other games using the microphone, but AFAIK you can read its state one bit at a time through $4016. I'm not sure if this bit just means "there's sound" vs. "there's no sound" or if it's a delta of some sort, but either way the microphone seems to be pretty useless.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">3) Is there a way to compactly fit a font that has letters that don't fit on an 8x8 tile? RPG's rely heavily on text, yet their fonts in the NES era were so ugly and hard to read.</div><br />Games that use mappers with CHR-ROM bankswitching can easily switch to banks with big, complex fonts when rendering text boxes, so they don't need to sacrifice any of the 256 background tiles for text. Another option, when using CHR-RAM, is to dedicate a few tiles to a rectangular area where you can dynamically render your text. This way you can even have letters of different widths (i.e. an "I" doesn't have to occupy an area as wide as an "M"), but it does cost a few background tiles.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) Does the SNES use bank-switching? How much space can it address?</div><br />I don't know much about the SNES, so i'll say what I know about its competitor, the Genesis, which can address up to 4MB, and games larger than that do use bankswitching.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">5) How does scrolling work?</div><br />You write to a few registers ($2000 and $2005, but also $2006 in exceptional cases) to indicate where exactly in the name tables the rendering of the next frame will start. Whatever point you pick will show up at the top left corner of the screen. By modifying that point over time you create the illusion of scrolling. As old parts of the name tables are left behind and new parts are revealed, the areas that are off screen have to be progressively redrawn if you want to scroll over an area larger than the area covered by the 2 (or 4) nametables (levels in most scrolling games are larger than 2 or 4 screens).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What are nametables?</div><br />A name table is just a grid of tiles. It's a 2-dimensional structure that holds indexes of tiles. When rendering the background, the PPU reads those indexes and draws the specified tiles at the specified positions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In an overhead view common to RPGs, how does one move a character gradually to the next tile?, instead of "jumping" there without a smooth transition. Is there a timer involved?</div><br />The NES runs at 60 frames per second, enough for incredibly smooth animation. Games work by computing one frame at a time, so all you have to do is increment the positions of the objects/characters just a little bit each step.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">6) What do conversions to/from NTFS/PAL entail?</div><br />Say that you want an object to cross the screen horizontally in 1 second, no matter if the console is NTSC or PAL. The screen is 256 pixels wide, and there are 60 frames per second in NTSC, so this means that the object has to move 4.26666 pixels per frame. For PAL, that would be 256 / 50 = 5.12 pixels per frame. PAL is slower, so you have to move everything a bit faster to compensate. Basically you have to adjust all displacements and delays in accordance to the frame rate.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Is the NOP instruction used to insert/pad cycles?</div>
<br />Only in timed loops. For example, if you need to wait 8 scanlines for some reason, that's 909 CPU cycles in NTSC, but only 852 in PAL, so the cycles have to be adjusted if you are using this kind of delay. This is mostly for raster effects (split screens, status bars, etc.) though, and has nothing to do with game logic or animations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Nov 23, 2011 5:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">FinalZero wrote:</div><div class="quotecontent">3) Is there a way to compactly fit a font that has letters that don't fit on an 8x8 tile?</div><br />Yes. Blargg and I worked on a VWF (variable-width font) engine for NES several years back. I'm using it in a tech demo whose source I plan to release in a few months if you can answer one question. Who's cuter: Hanson or Alvin and the Chipmunks?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) Does the SNES use bank-switching?</div><br />Not in the same sense as that used by NES mappers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> How much space can it address?</div><br />Just under 12 MiB. But by the time mask ROMs of that size became affordable, the Nintendo 64 was already popular.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">5) How does scrolling work?</div><br />From the programmer's perspective, it's rawther simple:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda x_coordinate<br />&nbsp; sta $2005<br />&nbsp; lda y_coordinate<br />&nbsp; sta $2005<br /></div><br />This changes which part of the map the player can see, in effect moving the camera. Scrolling consists of moving the camera a small amount every frame and writing new data to the parts of the map that were just revealed, as seen in <a href="http://wiki.nesdev.com/w/index.php/File:SMB1_scrolling_seam.gif" class="postlink">this diagram</a>:<br /><img src="http://wiki.nesdev.com/w/images/a/ae/SMB1_scrolling_seam.gif" alt="Image" /><br /><br />From the hardware perspective: Scrolling on the NES consists of changing the starting VRAM address for background rendering, along with changing the tap from a delay line that delays the background tiles by 1 to 8 pixels. When you write the background scroll position to $2005 at the end of your VRAM update code, circuitry inside the PPU translates the lower 3 bits of the X coordinate to the delay amount and the rest of the bits to a VRAM address.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> What are nametables? In an overhead view common to RPGs, how does one move a character gradually to the next tile?, instead of "jumping" there without a smooth transition. Is there a timer involved?</div><br />The timer involved in most sprite animation on the NES is an interrupt that signals the start of vertical blanking. The PPU asserts this about 60.1 times a second on NTSC or 50 times a second on PAL.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">6) What do conversions to/from NTFS/PAL entail?</div>
<br />NTFS is the file system used by Windows for fixed disks. You probably meant NTSC. Conversions involve changing the pitch and speed of the music and the distance that game critters move every vblank. If a game uses heavy raster effects, the CPU timing for those is altered as well. If a game originally for PAL uses all of the PAL system's greater video memory bandwidth (which is about 3 times as much on a PAL system due to the longer vblank period), the programmers have to use raster effects to squeeze all the updates into the shorter vblank period. This is why Asterix fails on an NTSC system and why Battletoads is a pain to get right in emulators.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>12</strong> of <strong>18</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>