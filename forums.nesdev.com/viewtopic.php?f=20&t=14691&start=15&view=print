<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - What instead of indexed addressing modes?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">What instead of indexed addressing modes?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14691">http://forums.nesdev.com/viewtopic.php?f=20&amp;t=14691</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Fri Dec 02, 2016 11:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I'm beginning to understand why some Game Boy games ran at 30 fps or slower</div><br />There were master system games that ventured into that 30fps territory too. Earlier titles. <br /><br /> A lot of z80 programmers tend to boast about the available regs to work with on the z80 compared to accumulate based processors (65x, 6809, etc). But I always found it to be the complete opposite. Data registers are kind of a moot point on the 65x simply because it has a lot of direct memory addressing modes (and fast mode; direct or zero page). A lot more operations actually have to go through the A reg on the z80, from another reg or from indirection (address regs). I always felt like a constraint of constantly juggling things - way more than what might be done with Acc on the 65x. And the having ZP as off processor address registers (address vectors) - feels soo free in comparison. Even the 68k felt a tiny bit cramped in this respect to the 65x (only 7 address regs; SP is the 8th address reg). <br /><br /> Of course, the context of 65x to me is not limited to the NES - so my view of optimization and use of quick LUTs for logic are probably expanded compared to the NES environment.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 18, 2016 9:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://www.ffd2.com/fridge/speccy/score" class="postlink">C64 vs. Speccy wars</a> concluded that a full Z80 (with IX and IY) has 1/3 of the IPC of a 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Jul 27, 2017 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">In <a href="https://forums.nesdev.com/viewtopic.php?p=201036#p201036" class="postlink">this post</a>,  TmEE wrote:</div><div class="quotecontent">Z80 assembly came next as I needed means to play sound without tying up the main CPU. It was much more painful than 68K which pretty much had spoiled me. x86 still felt worse though... Nowdays I also do Master System and SC-3000 / SG-1000 stuff, whole game in Z80 isn't actually all that bad.</div><br />Is that based on IX/IY (SG1K/SMS/GG only) or some other way to step through fields of an actor structure?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Fri Jul 28, 2017 1:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I pretty much only use IX(IXL,IXH) and IY(IYL,IYH) as temporary variables and all else goes by structures aligned to 256 bytes and BC/DE/HL addressing with lot of incrementing the C/E/L rather than direct specifying of elements to access through them. Autoincrement comes for free on 68K and incrementing is faster on Z80 than directly specifying the element to access too, data is always laid out in the order of use to accomodate that approach.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Jul 28, 2017 6:38 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">TmEE wrote:</div><div class="quotecontent">data is always laid out in the order of use</div><br />That's what others were recommending but I'm somehow not fully grokking. Say there are 16 bytes of state for each actor in an action platformer:<br /><br />X position (24 bits; 16.8)<br />X velocity (16 bits; 8.8 signed)<br />Y position (16 bits; 8.8)<br />Y velocity (16 bits; 8.8 signed)<br />Current frame<br />Timing state<br />Facing direction<br />Height of last hitbox to hit this actor relative to the actor's feet; used for collision response<br />Health<br />Actor type ID<br />VRAM location for actor's sprite cels<br /><br />Are there some generic rules of thumb for field layout to ensure &quot;data is always laid out in the order of use&quot;? If not, how can I predict &quot;the order of use&quot; in all cases? Do I need to prototype all the routines used by a sample of the actor types in a high-level language, and then reorder the fields to be either after or one bit different from the previous field before translating the routines to Z80/LR35902?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Fri Jul 28, 2017 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I feel as though I've suggested this before, but the best rule of thumb in general is probably &quot;structs of arrays&quot; rather than &quot;arrays of structs&quot;.<br /><br />Otherwise you do your best, focus on the needs of the most speed-sensitive code, maybe iterate on your design a few times, and if worst comes to worst, you might need to suck it up and manually index - which, as long as you keep your data page-aligned and/or so that it never crosses page boundaries, <em>really isn't too bad</em>: we're talking about, in 6502 terms, no more than a handful of extra cycles. Outside of a vblank handler, it's extremely rare that you really need to worry about that in the average game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>TmEE</b> [ Fri Jul 28, 2017 8:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Jaa, sometimse you just got to suck it up. My process is iterative, with refactors as new ways to improve something present themselves. Prototyping in a higher level language probably gets you somewhere sooner.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 30, 2017 12:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Found this via <a href="https://forums.nesdev.com/viewtopic.php?p=209064#p209064" class="postlink">Why &quot;logic&quot; is bullshit (RANT)</a>:<br /><div class="quotetitle">In <a href="http://www.sega-16.com/forum/showthread.php?29372-Let-s-compare-65x-CPU-architecture-vs-68000-(or-others)&amp;p=705234&amp;viewfull=1#post705234" class="postlink">this post</a>, Stef wrote:</div><div class="quotecontent">Both the 6502 and GB-CPU have a small instruction set, but the advantage is on the 6502 side is with the addressing modes for the instructions and less bottle necks for the processor architecture/design.<br />[...]<br />If you're specifically doing bitmap drawing effects (software blitting) at the given GB screen resolution, then relatively speaking the GB 1mhz CPU is might be faster for the task than NES at its native resolution. But in absolute terms, and a normal game engine, I would say that it's behind.</div><br />I'm continuing to read through Stef's posts in that topic to see if it addresses the problem I'm seeing, that of random access to the properties of a particular element of an array of objects.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu Nov 30, 2017 1:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />(all cycle counts below for the GBZ80 are /4, for easier comparison with the 6502):<br /><br />Assuming the index you want is in A and the array is page-aligned and &lt; 256 bytes,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LD H, ArrayBase &gt;&gt; 8<br />;; multiply A by the size of each object - the 6502 has to do the same, so this can be discarded for comparison<br />ADD FieldOffset<br />LD L, A<br />LD A, &#91;HL&#93;<br /></div><br /><br />That's 7 cycles. <br /><br />Better yet, use arrays of one byte fields, rather than fields of arrays, and you can get rid of the ADD FieldOffset, saving 2 cycles:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LD H, ArrayBase &gt;&gt; 8<br />LD L, A<br />LD A, &#91;HL&#93;<br /></div><br /><br />That's 5 cycles.<br /><br />If the array isn't page-aligned but doesn't wrap past page boundaries, add another two cycles to ADD ArrayBase &amp; $00FF.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LD H, ArrayBase &gt;&gt; 8<br />;; multiply A by the size of each object - the 6502 has to do the same, so this can be discarded for comparison<br />ADD FieldOffset<br />ADD ArrayBase &amp; $00FF<br />LD L, A<br />LD A, &#91;HL&#93;<br /></div><br /><br />That's 9 cycles.<br /><br />If the array isn't page-aligned and might wrap, add two cycles on no-wrap, or four on wrap:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LD H, ArrayBase &gt;&gt; 8<br />;; multiply A by the size of each object - the 6502 has to do the same, so this can be discarded for comparison<br />ADD FieldOffset<br />ADD ArrayBase &amp; $00FF<br />JR NC, .nc<br />INC H<br />.nc:<br />LD L, A<br />LD A, &#91;HL&#93;<br /></div><br /><br />That's 11-13 cycles.<br /><br />So: if you don't take care with your memory layout, you lose performance. But nothing about what you want to do is impossible or even difficult. It's usually somewhat slower than the 6502 but not terribly so, depending on a bunch of platform-specific factors on both sides (is your base address in zero page? your index in one of the index registers? do you cross page boundaries? what kind of math do you need to do to get the final index? etc etc). Usually this doesn't matter too much, unless you're in a tight loop - in which case you write/arrange your memory for speed, and the GBZ80 holds its own just fine against the 6502 in that context.<br /><br />Far and away the biggest problem here is that code for a fully general operation is a bit unwieldly. Wrap it in a macro if you'd like.<br /><br />This is a non-issue.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Thu Nov 30, 2017 1:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This has probably been covered well in the thread already, but I think you can get pretty far without indexed adressing.<br /><br />As I recently revealed, I've been perusing the entire source code for Donkey Kong, and it's actually surprisingly rare that it uses the IX and IY index registers that the Z80 has over the 8080. Instead it uses a lot of INC and DEC on the 16 bit HL register, and adds the DE register to cycle through object tables. It's in no way as elegant as what we are used to with the 6502, but having access to 16 bit additions on registers used for addressing opens up a whole new toolset - I'm assuming that's also possible on the Game Boy's CPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu Nov 30, 2017 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You can, and you can also auto-increment/decrement HL on reads for free.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 30, 2017 1:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It might be easier for readers to appreciate how this is a non-issue if we try a concrete example. A 6502 subroutine to simulate movement of an object of under influence of gravity might look like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GRAVITY = 48&nbsp; ; /256 pixel per frame^2<br />NUM_ACTORS = 16<br /><br />; The following arrays are not aligned to the start of a page,<br />; but none cross a page boundary.<br />.bss<br />.align NUM_ACTORS<br /><br />; Displacement from top of map in 1/256 pixel units<br />; range: 0.000 to 32767.996 pixels<br />actor_ysub: .res NUM_ACTORS<br />actor_y: .res NUM_ACTORS<br />actor_yhi: .res NUM_ACTORS<br /><br />; Signed velocity in 1/256 pixel per frame units<br />; range: -16.000 to 16.000 pixels/frame<br />actor_dysub: .res NUM_ACTORS<br />actor_dy: .res NUM_ACTORS<br /><br />.code<br /><br />move_actor_x_vertically:<br />&nbsp; ; Step 1: Apply acceleration due to gravity<br />&nbsp; clc<br />&nbsp; lda #GRAVITY<br />&nbsp; adc actor_dysub,x<br />&nbsp; sta actor_dysub,x<br />&nbsp; lda #0<br />&nbsp; adc actor_dy,x<br />&nbsp; sta actor_dy,x<br /><br />&nbsp; ; Step 2: Add velocity to displacement<br />&nbsp; clc<br />&nbsp; lda actor_dysub,x<br />&nbsp; adc actor_ysub,x<br />&nbsp; sta actor_ysub,x<br />&nbsp; lda actor_dy,x<br />&nbsp; adc actor_y,x<br />&nbsp; sta actor_y,x<br /><br />&nbsp; ; Sign extend the velocity<br />&nbsp; lda actor_dy,x<br />&nbsp; and #$80<br />&nbsp; beq :+<br />&nbsp; &nbsp; lda #$FF<br />&nbsp; :<br />&nbsp; adc actor_yhi,x<br />&nbsp; sta actor_yhi,x<br />&nbsp; rts<br /></div><br /><br />I'd like to see the idiomatic translation of this to Z80 or LR35902. Perhaps what I'm missing is some sort of insight on how &quot;and adds the DE register to cycle through object tables&quot; plays out in practice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu Nov 30, 2017 3:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Presumably you'd want to do this to each of your actors in a loop? Then I'd probably do it like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">GRAVITY = 48&nbsp; ; /256 pixel per frame^2<br />NUM_ACTORS = 16<br /><br />.bss<br />; Displacement from top of map in 1/256 pixel units<br />; range: 0.000 to 32767.996 pixels<br />.align NUM_ACTORS<br />Actor_Y: .res NUM_ACTORS * 3<br /><br />; Signed velocity in 1/256 pixel per frame units<br />; range: -16.000 to 16.000 pixels/frame<br />.align NUM_ACTORS<br />Actor_DY .res NUM_ACTORS * 2<br /><br />.code<br /><br />ApplyGravityToVelocities:<br />&nbsp; LD HL, Actor_DY<br />&nbsp; LD B, NUM_ACTORS<br />&nbsp; LD C, GRAVITY<br />.loop:<br />&nbsp; LD A, &#91;HL&#93;<br />&nbsp; ADD C<br />&nbsp; LD &#91;HLI&#93;, A<br />&nbsp; JR NC, .nc<br />&nbsp; INC &#91;HL&#93;<br />.nc:<br />&nbsp; INC L ; skip past high-byte<br />&nbsp; DEC B<br />&nbsp; JR NZ, .loop<br />&nbsp; RET<br /><br />ApplyVelocities:<br />&nbsp; LD DE, Actor_Y<br />&nbsp; LD HL, Actor_DY<br />&nbsp; LD B, NUM_ACTORS<br />.loop<br />;; add low byte<br />&nbsp; LD A, &#91;DE&#93; ; get ysub<br />&nbsp; ADD &#91;HL&#93; ; add dysub<br />&nbsp; LD &#91;DE&#93;, A ; set ysub<br />&nbsp; INC E<br />&nbsp; INC L<br />;; add middle byte<br />&nbsp; LD A, &#91;DE&#93; ; get y<br />&nbsp; ADC &#91;HL&#93; ; add dy + carry(ysub + dysub)<br />&nbsp; LD &#91;DE&#93;, A ; set y<br />&nbsp; INC E<br />;; adjust high byte<br />&nbsp; LD A, &#91;HLI&#93; ; get dy(hi), move to next dy(lo)<br />&nbsp; BIT 7, A<br />&nbsp; JR Z, .pos<br />.neg:<br />&nbsp; JR C, .next<br />&nbsp; LD A, &#91;DE&#93;<br />&nbsp; DEC A<br />&nbsp; LD &#91;DE&#93;, A<br />.pos:<br />&nbsp; JR NC, .next<br />&nbsp; LD A, &#91;DE&#93;<br />&nbsp; INC A<br />&nbsp; LD &#91;DE&#93;, A<br />.next<br />&nbsp; INC E<br />&nbsp; DEC B<br />&nbsp; JR NZ, .loop<br />&nbsp; RET<br /></div><br /><br />I think that's right? It's not tested, and I'm not totally sure I understand the signed arithmetic bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Nov 30, 2017 5:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I would want to apply gravity to actors with some types and not to actors with other types. Based on the code you presented, you appear to suggest structuring the actor update loops in a form that conceptually resembles the single-instruction, multiple-data (SIMD) approach used by shaders on modern GPUs:<br /><br /><ol style="list-style-type: decimal"><li>Apply step 1 to all actors. </li><li>Apply step 2 to all actors. </li><li>Apply step 3 to all actors. </li></ol><br />But if the table contains both actors that fall and actors that do not fall, each step needs to include a determination of whether to apply or skip the step for a particular actor:<br /><br /><ol style="list-style-type: decimal"><li>Apply step 1 to those actors whose combination of type and state uses step 1. </li><li>Apply step 2 to those actors whose combination of type and state uses step 2. </li><li>Apply step 3 to those actors whose combination of type and state uses step 3. </li></ol><br />In this sort of SIMD-like structure, I don't see how you'd enable or disable individual steps based on an actor's type and state without using additional register pairs for pointers to lookup tables from type and state to bitfields of which steps shall be performed on objects in that type and state.<br /><br />Please forgive my naivete. It's just that arranging enemy AI using SIMD rather than straight-through code is an entirely new concept to me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Thu Nov 30, 2017 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: What instead of indexed addressing modes?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think you can pretty straightforwardly adapt my code to only apply the operations to one actor - the only real difference would maybe be expanding the Y position to 4 bytes, to index into the array with two quick shifts.<br /><br />I just wrote the code as I would have written it, without having that additional criteria in mind. I tend to work in the &quot;SIMD&quot; style, and it often does help things on the Game Boy because of the auto-incrementing. But in retrospect I should have kept it more similar to your original code - I probably muddled things, especially because this code didn't end up really needing to be very SIMD-ish.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;;; A - contains actor # to apply gravity to<br />ApplyGravityToVelocity:<br />&nbsp; PUSH HL<br />&nbsp; LD H, Actor_DY &gt;&gt; 8<br />&nbsp; RLA ; multiply by two, since each velocity is two bytes<br />&nbsp; ADD Actor_DY &amp; $00FF ; add the array base, since we're not necessarily page aligned<br />&nbsp; LD L, A<br />&nbsp; LD A, &#91;HL&#93;<br />&nbsp; ADD GRAVITY<br />&nbsp; LD &#91;HL&#93;, A<br />&nbsp; POP HL<br />&nbsp; RET</div><br /><br />If it's only gravity that's selective, then you can still do the actual motions using the separate routine I gave, all at once.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.bss<br />.align PAGE<br />Actor_UsesGravity: .res NUM_ACTORS<br /><br />.code<br /><br />UpdateActors:<br />&nbsp; CALL ApplyGravity<br />&nbsp; CALL ApplyVelocities<br />&nbsp; RET ; obviously this tail call could be optimized out<br /><br />ApplyGravity:<br />&nbsp; LD HL, ActorUsesGravity ;; page aligned, so L = 0<br />&nbsp; LD B, NUM_ACTORS<br />.loop:<br />&nbsp; LD A, &#91;HL&#93;<br />&nbsp; AND A<br />&nbsp; JR NZ, .next<br />&nbsp; LD A, L<br />&nbsp; CALL ApplyGravity ; note that I made the above subroutine preserve HL!<br />.next:<br />&nbsp; INC L<br />&nbsp; DEC B<br />&nbsp; JR NZ, .loop<br />&nbsp; RET</div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>