<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>31</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Feb 02, 2012 6:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">When you say <strong>level's index</strong> that could be 1 for level1 and 2 for level2 right?</div><br />Yup. Or 0 for level 1, 1 for level 2, and so on... just make sure that everything lines up correctly.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">MetatileCollision isnt set up for an address of 2 bytes...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div><br />In that example, that variable is a <strong>pointer</strong>. A pointer is a variable that contains the address of something (i.e. it "points" to that thing). Since addresses have 16 bits on the 6502, the variable must be 2 bytes long.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm attempting to use this, for the first time, it's kind of confusing and kind of something to learn from.  Hope it becomes less of the former and more of the latter; it will. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div>
<br />Just keep in mind that pointers are addresses that point to something else, and by manipulating them you can have the same variable point to different places in the ROM. The main advantage of using pointers is that the same code can access different data all across the ROM, you just have to "point" to the data you want to use at any given time. This is how you can make the same code (your game logic) access the data of the first level as well as the data of the second level, and the third, and so on.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Feb 06, 2012 10:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">MetatileCollision isnt set up for an address of 2 bytes...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div><br />In that example, that variable is a <strong>pointer</strong>. A pointer is a variable that contains the address of something (i.e. it "points" to that thing). Since addresses have 16 bits on the 6502, the variable must be 2 bytes long.</div><br /><br />So each pointer variable must be 2 bytes long?  I'm guessing you have already said yes to this, but I'd like confirmation... please. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm attempting to use this, for the first time, it's kind of confusing and kind of something to learn from.  Hope it becomes less of the former and more of the latter; it will. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />Just keep in mind that pointers are addresses that point to something else, and by manipulating them you can have the same variable point to different places in the ROM. The main advantage of using pointers is that the same code can access different data all across the ROM, you just have to "point" to the data you want to use at any given time. This is how you can make the same code (your game logic) access the data of the first level as well as the data of the second level, and the third, and so on.</div>
<br />
<br />If I have a variable called <span style="color: orange">rowPointer</span> that's a size of 2 bytes, then do I have to use the indirect index addressing to read <span style="color: orange">rowPointer</span> as a pointer?  Is indirect index addressing the only way to use pointers in assembly language?
<br />
<br />I remember I could put a dot in front of a pointer's name to use it... maybe... in a language like c++?  I just want to say "Go to <span style="color: orange">rowPointer</span>'s row."  How can I say that in assembly 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Mon Feb 06, 2012 11:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So each pointer variable must be 2 bytes long?  I'm guessing you have already said yes to this, but I'd like confirmation... please. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />It says exactly this in the quote. He said it must be, and he said why.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If I have a variable called <span style="color: orange">rowPointer</span> that's a size of 2 bytes, then do I have to use the indirect index addressing to read <span style="color: orange">rowPointer</span> as a pointer? Is indirect index addressing the only way to use pointers in assembly language?</div><br />Edit: On second thought, It is more or less the only way to read from rowPointer as a pointer. You will want to use indirect indexed for what you're trying now.<br /><br />For question two: This is not the only way to use pointers in 6502. There's also indexed indirect, but people don't generally use that because it is a very indirect way to get data from an address. As well, you can jmp to a pointer which is just called indirect to my knowledge, and you can do creative things with the stack and RTS. But none of that matters for what you're doing right now.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I remember I could put a dot in front of a pointer's name to use it... maybe... in a language like c++?</div><br />6502 assembly isn't "type safe" like C is. What this means is your program/assembler doesn't know or care what you are using your variables for. C will actually fix how operations work on a variable based on what you're using that variable for. For instance, pointer++; could increase the address the pointer is holding by 1, 2 or any other number depending on how large the type of data is that the pointer is supposed to point to. Assembly doesn't care, so it's up to you to keep track.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I just want to say "Go to <span style="color: orange">rowPointer</span>'s row."  How can I say that in assembly 6502.</div> 
<br />
<br />Edit 2: After writing this post, I realize I may have misunderstood your question. Assuming rowPointer and rowPointer+1 already contain the low and high bytes of the address you want to point to, it's as easy as 
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda &#40;rowPointer&#41;,y<br /></div><br />where y contains how many places to add to that address to get the byte you want. <br /><br />The below examples may still be helpful, though.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">row:<br />&nbsp; &nbsp; .db $whatever, $whatever, $whatever; i.e. your data.<br /><br /><br />&nbsp; &nbsp; lda #low&#40;row&#41;;Syntax for how to get the high and low part of an address may vary based on your assembler<br />&nbsp; &nbsp; sta $00;Store in a RAM location. <br />&nbsp; &nbsp; lda #high&#40;row&#41;<br />&nbsp; &nbsp; sta $01;Store in a RAM location.<br /><br />&nbsp; &nbsp; lda &#40;$00&#41;,y;This now gets the same result in A that lda row,y would.<br />&nbsp; &nbsp; $00, and $01 are your pointer variables.&nbsp; &nbsp; <br /><br />;Note that the variable that holds the LOW BYTE of the pointer's address goes in between the paranthesis.<br /><br />;Note: To use this addressing mode, the low byte of the address MUST BE stored in a RAM location that is EXACTLY one byte before the RAM location where the high byte is stored. <br /><br />;$00 = low<br />;$01 = high; is fine.<br /><br />;$01 = low<br />;$02 = high; is fine.<br /><br />;F1 = low<br />;F2 = high; is fine.<br /><br />;$01 = low<br />;$00 = high; is NOT fine.<br /></div><br />Naturally the above code is pretty useless. You could use lda rowPointer,y instead. So here's something useful.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Row0:<br />&nbsp; &nbsp;.db $00, $00;Your data<br />Row1:<br />&nbsp; &nbsp;.db $FF, $FE; $50;Your data<br />Row2:<br />&nbsp; &nbsp;.db $05;You get the point.<br />;etc<br /><br />;Now you keep two separate lists of the high and low byte for this data.<br /><br />RowLow:<br />&nbsp; &nbsp;.db low&#40;Row0&#41;;As said before, syntax for this may vary<br />&nbsp; &nbsp;.db low&#40;Row1&#41;<br />&nbsp; &nbsp;.db low&#40;Row2&#41;;etc<br />RowHigh:<br />&nbsp; &nbsp;.db high&#40;Row0&#41;<br />&nbsp; &nbsp;.db high&#40;Row1&#41;<br />&nbsp; &nbsp;.db high&#40;Row2&#41;<br /><br />&nbsp; &nbsp;ldy rownumber<br /><br />&nbsp; &nbsp;lda RowLow,y<br />&nbsp; &nbsp;sta $00<br />&nbsp; &nbsp;lda RowHigh,y<br />&nbsp; &nbsp;sta $01<br /><br />&nbsp; &nbsp;ldy #$00<br />&nbsp; &nbsp;lda &#40;$00&#41;,y;Depending on what &quot;rownumber&quot; is you will load from a different address.<br /><br />;if rownumber was 0:<br />;You load #$00 which is the first byte of data after the Row0 label.<br />;if rownumber was 1:<br />;You load #$FF which is the first byte of data after the Row1 label.<br />;if rownumber was 2:<br />;You load #$05 which is the first byte of data after the Row2 label.<br /></div>
<br />
<br />That's how you do it. (Provided I didn't make a stupid mistake like saying $2000 instead of $2001.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Feb 17, 2012 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Are there any rules to be aware of when using the stack?  Thought I would push processor status on stack 4 times so that I could use the plp same settings for each of the four times I read a bit from the 4bit metatile part inside my loops.
<br />
<br />By "rules to be aware of" I mean is it possible that other things will use the stack?  At any or at certain times?
<br />
<br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">That's how you do it. (Provided I didn't make a stupid mistake like saying $2000 instead of $2001.)</div>
<br />Ah, it's ok to make a mistake.  That's what we learn from. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 17, 2012 6:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You have to pay attention not to push more bytes than you have allocated for the stack, but that's basically it. Most people just use the whole page ($0100-$01FF) for it, and filling 256 bytes with temporary data isn't easy, so you're probably safe.
<br />
<br />The only events that use the stack non-explicitly are interrupts and jumps to subroutines. When you JSR to a subroutine, the current PC (the program counter, an internal register that points to the instruction being executed) is backed up to the stack, so that you can return to that point of the program with RTS. Interrupts also save the PC, as well as the processor status, so that the CPU can resume its work later (after an RTI), like the interrupt never happened.
<br />
<br />Those things don't get in the way of using the stack normally (PHA, PLA, PHP and PLP), since even if an interrupt happens in the middle of you using the stack, whatever is put there will be removed when the returning from the interrupt, so the stack will be exactly like it was before the interrupt.
<br />
<br />It's also pretty safe to manipulate the middle of the stack using the X register, since only the top of it will be modified in case of interrupts.
<br />
<br />What can cause problems is an interrupt firing when you are directly manipulating the stack pointer (through TSX and TXS)... If S is not pointing to the top of the stack, parts of it might get corrupted. You probably want to avoid this kind of stack manipulation.
<br />
<br />What you want to do (push 4 values for using later) is perfectly safe, you just have to remember to remove everything you put on the stack. I for example have made the mistake of putting some values in the stack, and then some logic decisions made the program not need those values anymore, and I just forgot to take them off the stack. Over time, the forgotten values accumulated and caused a stack overflow and the program crashed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Sun Feb 19, 2012 12:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />tokumaru, thank you so much!!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Your stack explanation here brought back the feeling that you could make a great author! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  I would be excited to buy your NES assembly-guide-book-type-thing.  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />  And it would be nice to share with others. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />Kasumi, I owe you a response... and it is coming, I promise. Hope you are doing well. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Feb 19, 2012 12:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">I would be excited to buy your NES assembly-guide-book-type-thing.</div>
<br />Hell no, I'm a terrible teacher! <img src="./images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Feb 20, 2012 2:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If I have an accumulator value id like to keep... for a little while; would it be dangerous to leave it in the accumulator for about 10-12 cycles?  Is it safe, like the stack is, from interrupts and subroutines?  <span style="color: #888888">This might be a sub-par question.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /> </span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Feb 20, 2012 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What is in the accumulator will stay in the accumulator until power-off unless another instruction changes it. Interrupt handlers are supposed to always save and restore all registers that they use, but any other subroutine might preserve the accumulator, or it might overwrite it. When you make your subroutine, be sure to add a comment stating what registers it overwrites. For example, a controller reading subroutine might have a comment at the top that it "trashes A and X; preserves Y".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Feb 20, 2012 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wow that's really good. <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> Thanks tepples!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Mar 01, 2012 3:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Could my code here be done in an easier way?
<br />
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;&nbsp; &nbsp;asl a ;checks and saves upper left tile<br />&nbsp; &nbsp; bmi +<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; jmp ++n<br />&nbsp; + lda #$01<br />++n sta upleft<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; asl a ;checks and saves upper right tile<br />&nbsp; &nbsp; bmi +<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; jmp ++n<br />&nbsp; + lda #$01<br />++n sta upright<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; asl a ;checks and saves lower left tile<br />&nbsp; &nbsp; bmi +<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; jmp ++n<br />&nbsp; + lda #$01<br />++n sta loleft<br /><br />&nbsp; &nbsp; asl a ;checks and saves lower right tile<br />&nbsp; &nbsp; bmi +<br />&nbsp; &nbsp; lda #$00<br />&nbsp; &nbsp; jmp ++n<br />&nbsp; + lda #$01<br />++n sta loright<br /></div>
<br />
<br />There must be an easier way to transfer a bit to the accumulator... please tell me that.   <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Thu Mar 01, 2012 3:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />rol a:rol a:and #1 ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Mar 01, 2012 4:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />aaaaaaah!! Thank you Shiru! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  ...AND #1!!!!!!!!!!!!!!!!!!!!!!!!!! YEAY!!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Mar 09, 2012 5:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Now it has come to using oddRow and evenRow...  I have to ask this question... someone will have an answer.   The first row of tiles of the screen is not the first scanline, but the first eight scanlines and so this does not concern scanlines.  ...I think.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  Should I start creating the screen with oddRow or evenRow?  Is that top line up there line 0 - even - OR line 1 - odd?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 09, 2012 5:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No matter how many times I read I really can't understand the question... for what purpose would you be using these oddRow and evenRow variables you speak of?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>31</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>