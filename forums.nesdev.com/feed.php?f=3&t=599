<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=599" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-10-06T07:53:06-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=599</id>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-10-06T07:53:06-07:00</updated>
<published>2005-10-06T07:53:06-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5212#p5212</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5212#p5212"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5212#p5212"><![CDATA[
That doc seems to say the exact same thing... just cut down (a lot of other not-as-useful-for-emu-development information removed).  I'd say either reference is fine... nothing in the two should contradict each other... at least not that I saw.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Thu Oct 06, 2005 7:53 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2005-10-06T05:43:10-07:00</updated>
<published>2005-10-06T05:43:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5211#p5211</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5211#p5211"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5211#p5211"><![CDATA[
<div class="quotetitle">hap wrote:</div><div class="quotecontent"><br />A lot. Did you read Brad Taylor's NTSC 2C02 technical reference ? If you didn't yet, now's the time. It explains what the PPU cycles 'do'.<br /></div><br /><br />Should I use that reference or this one <a href="http://www.nesworld.com/dev/ntscpput.txt" class="postlink">http://www.nesworld.com/dev/ntscpput.txt</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Thu Oct 06, 2005 5:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[hap]]></name></author>
<updated>2005-10-06T04:48:07-07:00</updated>
<published>2005-10-06T04:48:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5210#p5210</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5210#p5210"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5210#p5210"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />What do the remaining PPU cycles do then?<br /></div><br /><br />A lot. Did you read Brad Taylor's NTSC 2C02 technical reference ? If you didn't yet, now's the time. It explains what the PPU cycles 'do'.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=115">hap</a> — Thu Oct 06, 2005 4:48 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2005-10-06T03:00:51-07:00</updated>
<published>2005-10-06T03:00:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5209#p5209</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5209#p5209"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5209#p5209"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />A pixel is not rendered on every PPU cycle.  There are 341 PPU cycles per scanline... but only the first 256 of those cycles render pixels.  The other cycles do other things.<br /></div><br /><br />I know about that. 256 Pixels are rendered and the rest of the CPU time is HBlank (about 28.3 cc's). What do the remaining PPU cycles do then?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Thu Oct 06, 2005 3:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Quietust]]></name></author>
<updated>2005-10-05T16:23:32-07:00</updated>
<published>2005-10-05T16:23:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5197#p5197</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5197#p5197"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5197#p5197"><![CDATA[
<div class="quotetitle">Disch wrote:</div><div class="quotecontent"><br />Quietust, afaik, does things one cycle at a time... as in he runs the CPU for one cycle, then the PPU, then the APU, CPU, PPU, APU, etc... which makes it easier to do things with cycle-perfect accuracy.. however it is DREADFULLY slow, which is why Nintendulator demands a much more powerful computer to run than other emus do.  (Feel free to correct me on this Q, that's just my understanding of how Nintendulator works.. I could very well be wrong).<br /></div><br /><br />For the most part, you are correct - the only detail is that while my CPU does emulate individual instruction cycles (and emulates the PPU/APU between each one), it is not capable of stopping in the middle of an instruction. The end result is effectively the same, however.<br /><br />For example, the instruction "STA $4015" would do the following:<br />* Read opcode (LDA absolute) and update PPU+APU<br />* Read operand low byte ($15) and update PPU+APU<br />* Read operand high byte ($40) and update PPU+APU<br />* Write value in accumulator to $4015 and update PPU+APU<br /><br />In my current code, I emulate the PPU+APU <strong>before</strong> the corresponding CPU cycle. The only down side is that this can cause some PPU updates (grayscale, colour emphasis, fine X scroll, palette change) to be up to 3 pixels off, which is negligible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=7">Quietust</a> — Wed Oct 05, 2005 4:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-10-05T15:42:18-07:00</updated>
<published>2005-10-05T15:42:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5192#p5192</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5192#p5192"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5192#p5192"><![CDATA[
A pixel is not rendered on every PPU cycle.  There are 341 PPU cycles per scanline... but only the first 256 of those cycles render pixels.  The other cycles do other things.<br /><br />This method'll work... but as blargg and I have already pointed out, it'll be difficult to get going properly and will be painfully slow (it's basically the same concept as the "catch up" method described in the previously linked thread, only instead of only catching up when needed you're catching up after every instruction).<br /><br />Quietust, afaik, does things one cycle at a time... as in he runs the CPU for one cycle, then the PPU, then the APU, CPU, PPU, APU, etc... which makes it easier to do things with cycle-perfect accuracy.. however it is DREADFULLY slow, which is why Nintendulator demands a much more powerful computer to run than other emus do.  (Feel free to correct me on this Q, that's just my understanding of how Nintendulator works.. I could very well be wrong).<br /><br />Some games may rely on $2006 and $2005 interaction for split screen effects, so understanding and applying the info in Loopy's docs might be important.  The docs are pretty hard to understand at first... but it's not really as complex as it may seem.<br /><br />There's a PPU address (Loopy_V) which the PPU uses to not only handle $2007 read/writes, but also uses for tile fetching when rendering.  There's also a temporary value (Loopy_T) which it uses to refresh Loopy_V with during rendering (like say, to reset the X scroll at the start of a new scanline).<br /><br />Loopy_V and Loopy_T are both 15 bits... and are referred to as 'v' and 't' in loopy's doc.  'd' in loopy's doc refers to the value being written to the register, and 'x' is the fine X-scroll value.<br /><br />so in loopy's doc:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2000 write:<br />        t:0000110000000000=d:00000011<br /></div><br /><br />Means the low 2 bits of the value written to $2000, are written to bits 10 and 11 of Loopy_T (other bits in Loopy_T are unaffected).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">2005 first write:<br />        t:0000000000011111=d:11111000<br />        x=d:00000111<br /></div><br /><br />means the high 5 bits of the written value get written to the low 5 bits of Loopy_T, and the low 3 bits of the written value set the fine X scroll.<br /><br />And so on.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Wed Oct 05, 2005 3:42 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2005-10-05T14:53:39-07:00</updated>
<published>2005-10-05T14:53:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5188#p5188</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5188#p5188"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5188#p5188"><![CDATA[
Ok, I am going to implement my afforementioned method of rendering, i.e. execute a full CPU instruction, followed by rendering 3 pixels etc.<br /><br />Draw (Instruction Time - 1) * 3 Pixels<br />Execute Instruction<br />Draw 3 Pixels (Remaining Cycle)<br /><br />With this method am I guarenteed to have an accurate CPU/PPU/APU relation?<br /><br />I was wondering which methods other people use in their emulators. Quitest, Fx3, blargg, What do yours use?<br /><br />Also what is the importance of Loopy's scroll document? I have totally ignored the information contained inside (as I also find it totally incomprehensible), but I have had not scrolling issues in my emulator.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Wed Oct 05, 2005 2:53 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2005-10-05T14:28:31-07:00</updated>
<published>2005-10-05T14:28:31-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5184#p5184</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5184#p5184"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5184#p5184"><![CDATA[
I still need to run a benchmark test in a PentiumIII 800Mhz, but for my machine (Celeron 2.66GHz), my emu runs at 130~140 FPS on 256x240 windowed mode. On 640x480 stretched, it goes up to 85 FPS. I have no clue if this is a good or bad result, but anyways it uses pixel precision emulation. ^_^;;<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Oct 05, 2005 2:28 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-10-04T18:16:42-07:00</updated>
<published>2005-10-04T18:16:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5166#p5166</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5166#p5166"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5166#p5166"><![CDATA[
Well, I just implemented the scheme I described above and it works well so far. It came out quite simple and I didn't have to duplicate any of the sprite drawing logic (flipping, etc.). I'm going to be improving the sprite hit timing ROM to test with pixels in the four corners, and writing a second test ROM to test many different situations of transparent and non-transparent pixels, other sprites, non-hit under left clip border and right edge, etc. Hopefully I'll post it tomorrow, if I don't run into any problems.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Oct 04, 2005 6:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-10-04T16:45:53-07:00</updated>
<published>2005-10-04T16:45:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5163#p5163</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5163#p5163"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5163#p5163"><![CDATA[
Disch described exactly what I've been thinking of for my emulator (though he's going at it from an already-correct implementation, while I'm trying to improve accuracy). Currently in my $2002 read function I check to see if the current time is after the earliest sprite 0 could occur. (based on its Y position). If so, I just scan however many lines of sprite 0 have been drawn and report a hit when I find one with any non-transparent pixels (i.e. I never look at the background). This works surprising well for many games (even Battletoads, except for the snake pit and tower). This also passes the sprite hit timing test ROM I posted earlier (since they use a sprite that's just a big block of non-transparent pixels).<br /><br />I haven't yet come up with a way to handle sprite 0 hit without interacting with sprite rendering. I don't want to write a separate mini-renderer because it would be so similar to main rendering and might have subtle differences. The idea I'm working on involves saving the pixels under sprite 0, then comparing those to the pixels after it's drawn. Cheap, but simpler to implement and it doesn't affect low-level pixel rendering (which is done in chunks one or more scanlines).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Oct 04, 2005 4:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-10-04T16:08:05-07:00</updated>
<published>2005-10-04T16:08:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5162#p5162</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5162#p5162"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5162#p5162"><![CDATA[
What you're thinking looks a lot like a pixel-accurate renderer.. although catching up after every instruction would be slow.<br /><br />One way to go would be to impiment a pixel-by-pixel PPU as I describe in <a href="http://nesdev.com/bbs/viewtopic.php?t=505" class="postlink">this thread</a>... although that would likely require many significant changes.<br /><br />A good alternative would be to predict the cycle at which sprite 0 hit will occur... and on $2002 reads, see if the CPU is before or after that cycle... if at or after, you would set the sprite0 hit flag without having to do any PPU emulation.<br /><br />You could predict by rendering the sprite 0 into a temporary buffer... then rendering the BG tiles on top of it to see where they'd first collide (up to 6 BG tiles will need to be drawn -- if sprite 0 is 8x16 it can be over at most 6 tiles).. to see where they'd hit and get the timestamp from that.  However you'd need to re-predict every time the circumstances change (CHR swapped, CHR-RAM written to, Sprite/BG enable/disable change, scroll change, etc, etc.. anything that could affect when sprite 0 will happen).<br /><br />Rather than re-predict every time those things change (since they change all the freaking time), you could raise a "NeedRepredict" flag when those things change... and re-predict only on $2002 reads if the NeedRepredict flag is set (of course clearing it after you predict).<br /><br />I was meaning to put something like that in my emu to speed up games which do wait for sprite 0 loops.  You could do something similar to this for the 8-sprite flag, too.<br /><br />Anyway I hope that makes sense.<br /><br /><br />edit --- oop too slow... blargg beat me to it... and he linked to that thread as well XD<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Oct 04, 2005 4:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-10-04T16:00:42-07:00</updated>
<published>2005-10-04T16:00:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5161#p5161</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5161#p5161"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5161#p5161"><![CDATA[
That would work, though it doesn't match the simplicity and speed of the method described in the thread <a href="http://nesdev.com/bbs/viewtopic.php?t=505" class="postlink">"timing... (attn: disch)"</a>.<br /><br />The basic idea is very simple: whenever the CPU is just about to do something that might affect PPU rendering, <em>first</em> run the PPU until that time, then carry out the read/write. The only requirement is that the CPU keep track of how many clocks it's executed and make this available when reading and writing I/O memory locations. With this scheme you don't constantly run the PPU every instruction, so it's quite fast.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">void run_ppu&#40; long ppu_time &#41;<br />&#123;<br />    ...<br />&#125;<br /><br />void write_ppu&#40; long ppu_time, int addr, int data &#41;<br />&#123;<br />    run_ppu&#40; ppu_time &#41;;<br />    switch &#40; addr &amp; 0x2007 &#41;<br />    &#123;<br />        case 0x2000:<br />            ...<br />        <br />        case 0x2005:<br />            ...<br />    &#125;<br />&#125;<br /><br />long cpu_time;<br />long cpu_end; // CPU will run until or just after this time<br /><br />void write_memory&#40; int addr, int data &#41;<br />&#123;<br />    if &#40; &#40;addr &amp; 0xe000&#41; == 0x2000 &#41;<br />        write_ppu&#40; cpu_time * 3, addr, data &#41;;<br />    ...<br />&#125;<br /><br />void stop_cpu&#40;&#41;<br />&#123;<br />    cpu_end = 0; // stop CPU execution after current instruction<br />&#125;<br /><br />void run_cpu&#40;&#41;<br />&#123;<br />    while &#40; cpu_time &lt; cpu_end &#41;<br />    &#123;<br />        int opcode = read_memory&#40; pc++ &#41;;<br />        cpu_time += timing_table &#91;opcode&#93;;<br />        switch &#40; opcode &#41;<br />        &#123;<br />            0x8D: &#123; // STA abs<br />                int addr = read_memory&#40; pc + 1 &#41; * 0x100 +<br />                        read_memory&#40; pc &#41;;<br />                pc += 2;<br />                write_memory&#40; addr, a &#41;;<br />                break;<br />            &#125;<br />            ...<br />        &#125;<br />    &#125;<br />&#125;<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Oct 04, 2005 4:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[WedNESday]]></name></author>
<updated>2005-10-04T14:52:14-07:00</updated>
<published>2005-10-04T14:52:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5160#p5160</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5160#p5160"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5160#p5160"><![CDATA[
Ok, I want to implement some form of accurate timing on my emulator. However, I don't want to rewrite my CPU for cycle for cycle timing. Can I do it this way.<br /><br />Opcode == 0xA9 (LDA Immediate)<br /><br />Do Operation...<br />Clock Cycles = Clock Cycles + 2;<br /><br />DrawPixel( NumberofPixels ) (NumberofPixels == 2 * 3)<br />{<br />...<br />}<br /><br />Obviously, this would increase the accuracy of my emulator. But would it be enough for hit detection?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=191">WedNESday</a> — Tue Oct 04, 2005 2:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2005-10-04T13:56:29-07:00</updated>
<published>2005-10-04T13:56:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5157#p5157</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5157#p5157"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5157#p5157"><![CDATA[
I just polished my sprite 0 hit test ROM and verified each result code by breaking my emulator in that manner. It currently only checks with an accuracy of 4 CPU clocks (12 PPU clocks). It tests time it's cleared each frame, time it's set at upper-left corner, time for each PPU pixel, and time for each PPU scanline. This should find most problems with the timing of it.<br /><br /><a href="http://www.slack.net/~ant/nes-tests/sprite_hit_timing.zip" class="postlink">sprite_hit_timing.zip</a><br /><br />I've improved my test framework so it now displays a bit more text on screen. The result codes are listed at the beginning of the asm source code included.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Tue Oct 04, 2005 1:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Disch]]></name></author>
<updated>2005-10-04T13:25:24-07:00</updated>
<published>2005-10-04T13:25:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5155#p5155</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5155#p5155"/>
<title type="html"><![CDATA[Sprite #0]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=599&amp;p=5155#p5155"><![CDATA[
<div class="quotetitle">WedNESday wrote:</div><div class="quotecontent"><br />Allow 113 CC of CPU time;<br />Draw Background;<br />Go back and Draw Sprites<br /><br />I know that this method is unconventional but it is very simple to emulate. Could this be affecting the hit detection?<br /></div><br /><br />If you're setting the sprite 0 hit flag when you draw the sprites (according to that layout)... then yes.<br /><br />Say, for example, Sprite 0 hit happens on pixel 90 of the scanline.  Normally this will mean that the Sprite 0 hit flag will be raised on PPU cycle 90 of the scanline (90/3 =  CPU cycle 30).  If you're running the CPU for a full scanline <strong>before</strong> looking for sprite 0 hit.. then the flag will be raised after the scanline is complete... on CPU cycle 113 of the scanline... <span style="text-decoration: underline">83</span> CPU cycles later than it should.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=33">Disch</a> — Tue Oct 04, 2005 1:25 pm</p><hr />
]]></content>
</entry>
</feed>