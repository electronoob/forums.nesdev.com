<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Suggetion : Universal console music format</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Suggetion : Universal console music format</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=6&amp;t=1862">http://forums.nesdev.com/viewtopic.php?f=6&amp;t=1862</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 02, 2006 5:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Suggetion : Universal console music format</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm thinking it would be good to have one format for music and SFX used in homebrew video games that could be cross-console compatible, typically just like MML but in improved. The MML format as-it can hold just anything I can think of when it comes to playback a soundtrack on the NES, unfortunately its format isn't very well optimized and is doccumented in japaneese, and the replay code aslo isn't very well optimized as well.
<br />By optimizing the replay code and the format it ustilizes to allow SFX playback, playback of more than one single song, and be less time conssuming, while doccumented in english, and creating a new MML compilator suited to this improved format, but still backward compatible with the old one, MML would definitely become the "ulitmate" format suited for homebrew video games.
<br />But the best would be to allow the user to change a few parameters in the header of his track and be able to compile the music/SFX as well on another target than the NES : The Game Boy, the SPC700, the Playstation or whathever.
<br />The only difference is that the replay code would be totally different and run on a different CPU with different audio hardware, but I'm thinking of a format that can work regardless of the platform.
<br />
<br />The main differences between platforms is just the number of channels and the use or not of audio samples. Then two main category of targets can be made : The ones that use digital sampled audio (SNES, Playstation, Game Boy Advance ...) And the one that doesn't have memory for sampled audio and just use fixed waveforms (NES, Game Boy, Genesis...)
<br />Of course the DPCM channel of the NES is the big exeption, but you can just play low quality WAV within 16 different frequencies, you cannot really play digital samples with parameters like you can with modern SPUs, so I'd keep it apart.
<br />
<br />The advantage of this would be that a homebrew programmer can just have to type its music in always the same format regardless of the platform, and use the features he want to use and avoid the feature he don't want to use. Then he can just "compile" its music for test and play it back on the specified platform. If he want to save memory, he could just delete some command he doesn't use at all.
<br />
<br />I have some such ideas, but I need to know if people arround thinks it as a good idea, or if everyone prefer just write their own specified sound engine with their own format forever, thrus avoiding the use of an "universal one".
<br />
<br />Now the fetures this future format is supposed to have :
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">???? sound format specs :<br /><br />- MML compatible music format<br /><br />- Cross-platfrorm compatible<br /><br />- Can play any notes in the 12-tone scale and up to 8 octaves range<br /><br />- Can play notes of any lenght, from 32th note's triplets to infinite lenght &#40;by using some command to continue the previous note it become possible to obtain a note playing forever or a long note with a crazy lenght&#41;<br /><br />- Can playback music at any tempo between 1 bps and 256 bps, sound effects are fixed to 256 bps<br /><br />- Music's tempo can be changed by the song itself to do ralentendo and accelerando<br /><br />- Main tempo can be scaled by the main programm regardless of the tempo of the song at least for music &#40;maybe SFX ?&#41;<br /><br />- The loop of a song can be altered by a flag set by the main programm.<br /><br />- A flag can be sent to the main programm at some given point in music, SFX &#40;more details later&#41;<br /><br />- Allow macros to definites instruments and playback features in function of the platform target<br /><br />- Allow vibratoes, pitch slides and full volume control via MML macros and using the most of the target platform's features &#40;depend of platform&#41;<br /><br />- Allow to play many song, and the user can define the start pointer to each song so that one song can begin in the middle of another<br /><br />- Allow the song to &quot;call patterns&quot;, so that it becomes easier to have a chunk of melody repeated and this saves memory after compilation<br /><br />- Allow the song to repeate a chuck of patterns inside the whole music loop, OR allow the pattern to repeat some chunk inside it several times<br /><br />- Allow the song to have a loop point, setup individually for each channel<br /><br />- Allow SFX playback under the same format as music, but the SFX would play over the music<br /><br />- Can compile to either a sound file &#40;.nsf, .spc, etc...&#41; or a binary file to be included in an assembly code.<br /><br />- Can allow the main code to dialog with the sound handling programm to : Start a new song, pause a song and save the sate of a paused song while starting a new one &#40;usefull for RPGs during battles&#41;, stop the playback of a song, unpause a paused song while it's old state is restored &#40;usefull AFTER battles for RPGs&#41;, start playing a SFX, stop playing an SFX, start playing a second SFX &#40;the # of SFX that can be played at the same time depend of the target platform&#41;.</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 02, 2006 11:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not all composers are comfortable working in a text-based environment like MML or LilyPond. You'd have to make an editor (like NT2 or ModPlug Tracker), and then you'd have to make playback code for each platform, and then you'd need to hack up an NSF player, a GBS player, an SPC player, a PSF player, etc. to communicate with your editor.
<br />
<br />And it might be hard with one music file to compensate for differences in number of channels between platforms (e.g. NES or Game Boy has 4 channels, but PlayStation has 24 and Nintendo DS has 16).
<br />
<br />In addition, a few platforms have both tone generators and sample playback, such as the Game Boy Advance.
<br />
<br />But overall it's a good idea.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dXtr</b> [ Wed Aug 02, 2006 1:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have been coding on a tracker for SNES on and off now for a couple of month that I planned to also support NES later on.. thought it goes really slow as my experience with tracker coding (and sound coding for that matter) is non-existent and my work takes up 90% of my waken time.. so basicly the only thing I have is a half made XM player <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />
<br />
<br />but one day I hope to finish it.. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 02, 2006 1:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I liked the text based idea; because you don't need anything else than a text editor, but this is still confortable. I prefer a solid text format than a buggy editor with a bland interface that doesn't work 50% of the time (like Nerdtracker 2... No personnal offence to anyone, but it is as it)
<br />Also, I really like the macro based settings how they are set-up in MML, the reason I'd suggest something backward compatible with MML.
<br />
<br />The main problem would be to compile the file to the target, by the use of a replay code for each available platform.
<br />I think I'm able to do the NES and SPC700 replay code, but I don't know anything about all other platforms yet, so I'd need other people to code the music driver for. I also don't know how to write command-line compilators that would take the text data, transfer it in music data and patch it with the sound code in a .nsf, .spc, .psf, .gbs or anything. The user could also choose to output a ".bin" and ".asm" for data and code respectivly if he don't just listen the music, but want to use it in a homebrew programm.
<br />
<br />As for the different channel, the sheme would be the only difference between platforms : In the NES for MML "A" is Square 1, "B" is Square 2, "C" is Triangle and "D" is noise. I was thinking to have the exact same format as MML, but also the same letter could be used for Game Boy channels 1, 2, 3 and 4 respectivly, and, for example, for the SPC700 A-H would represent channels 1-8, and the PlayStation could use letters A-X for 24 channels. It'd be even easier for sample based SPUs since there is no distinction between channels.
<br />For the GBA, anythink could work, but "A"-"D" can be the 8-bit Gameboy audio channels, and the following letters "E"-"..." for PCM sampled GBA audio (I'm not too sure about how this works).
<br />Overall, if you want to port some music to some other platform, you'd just have to change a few parameters like audio samples used, channel assignment and you're done with few work.
<br />
<br />Overall, I cannot do all this on my own. On my own I'm just able to do a standard to advanced replay code on the NES and have a file with music/SFX data written all with ".db", wich isn't very confortable. I'd need some other people to work on such a project, if such a project is launched.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 02, 2006 1:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I liked the text based idea; because you don't need anything else than a text editor, but this is still confortable. I prefer a solid text format than a buggy editor with a bland interface that doesn't work 50% of the time</div><br />I tried the text-based compiler idea for the music in what is now <a href="http://www.pineight.com/gba/#tod" class="postlink">LOCKJAW: The Overdose</a> (TOD). The biggest problem is that I couldn't figure out how to make my music engine support fast forward and rewind, forcing me to listen through the whole song when I made any change.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, I really like the macro based settings how they are set-up in MML, the reason I'd suggest something backward compatible with MML.</div><br />In graphical trackers, macros are generally called "instruments". But will it support orders of patterns so that I don't have to store a repeating drum track multiple times in an NROM-128 PRG?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The main problem would be to compile the file to the target, by the use of a replay code for each available platform.<br />I think I'm able to do the NES and SPC700 replay code, but I don't know anything about all other platforms yet, so I'd need other people to code the music driver for.</div><br />I can do Game Boy Advance and PC, as they would use pretty much the same code for the sampled instruments.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> I also don't know how to write command-line compilators that would take the text data, transfer it in music data</div><br />That's straightforward. Look at what I did in TOD (specifically 8gbmas.c and tri.c).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">As for the different channel, the sheme would be the only difference between platforms : In the NES for MML "A" is Square 1, "B" is Square 2, "C" is Triangle and "D" is noise. I was thinking to have the exact same format as MML, but also the same letter could be used for Game Boy channels 1, 2, 3 and 4 respectivly</div><br />Especially given that Game Boy channel 3 can be programmed with waveform "0123456789ABCDEFFEDCBA9876543210" to closely approximate the NES sound out the GB/GBC/GBA headphone jack. However, the GB/GBC/GBA speaker has a strong high-pass characteristic starting at 800 Hz, which is why Game Boy games generally used waveforms richer in high harmonics.<br /><br />But another problem: Sound hardware differs. NES supports CPU-controlled software envelopes, but if you try this on a Game Boy, you have to reset the note and incur a click every time you write to the envelope segment register.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and, for example, for the SPC700 A-H would represent channels 1-8, and the PlayStation could use letters A-X for 24 channels. It'd be even easier for sample based SPUs since there is no distinction between channels.</div><br />Except for the fact that you don't want sound effects to cut in on the important instruments.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Overall, if you want to port some music to some other platform, you'd just have to change a few parameters like audio samples used, channel assignment and you're done with few work.</div>
<br />Unless you were actually using 8 channels on your GBA, Genesis, or Super NES soundtrack, and you want to make an NES version.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Aug 02, 2006 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I tried the text-based compiler idea for the music in what is now LOCKJAW: The Overdose (TOD). The biggest problem is that I couldn't figure out how to make my music engine support fast forward and rewind, forcing me to listen through the whole song when I made any change. </div><br />That is the case anyway with all game music formats.<br />In a MML based soudtracker, you can just comment the beginning of the song to directly hear where you're having problem, and with the channels you're having problems.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In graphical trackers, macros are generally called "instruments". But will it support orders of patterns so that I don't have to store a repeating drum track multiple times in an NROM-128 PRG? </div><br />Normally yes, since this is very handfull to the user and save a lot of memory. But the exact features should be discussed after the decision of realising the idea has beem taken.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can do Game Boy Advance and PC, as they would use pretty much the same code for the sampled instruments. </div><br />I hadn't PC in mind, but why not after all. BTW you just tell me that GBA sound was totally different from DirectX sound, so this is really confusing.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That's straightforward. Look at what I did in TOD (specifically 8gbmas.c and tri.c). </div><br />I will do that when I got time, but I'm not used with command line exectuables.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But another problem: Sound hardware differs. NES supports CPU-controlled software envelopes, but if you try this on a Game Boy, you have to reset the note and incur a click every time you write to the envelope segment register. </div><br />NES has its similarities with Game Boy, just like SPC700 has its similarities with PSF, but in both cases both are basically different.<br />NES could hold software controlled envloppes and GB hardware controlled envloppes, both would be different macros and be incompatible. This leads the GB to not hold things such as tremoloes that the NES can do. However, the melody would still be cross-platform compatible.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Except for the fact that you don't want sound effects to cut in on the important instruments. </div><br />Yeah, that is still another issue, on almost every plaftorm (exept maybe PSX, due to its very high number of hardware channels). It is up to the composer to separate "important" instrument and unimportant instruments in order to fix this issue, to not end up like Secret of Mana where the music always is being cut off by SFX. On the SNES typically 2-3 channels can hold SFX as well as secondary music channels, and all remaining channels can be for primary music channels. The PSX has enough channels, so 16 can be used as free for music and 8 for sound effects, totally avoiding the cutoff issues.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unless you were actually using 8 channels on your GBA, Genesis, or Super NES soundtrack, and you want to make an NES version.</div><br />That's right, but you can still copy/pase the most important channels and forgot the others.<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Especially given that Game Boy channel 3 can be programmed with waveform "0123456789ABCDEFFEDCBA9876543210" to closely approximate the NES sound out the GB/GBC/GBA headphone jack. However, the GB/GBC/GBA speaker has a strong high-pass characteristic starting at 800 Hz, which is why Game Boy games generally used waveforms richer in high harmonics.<br /></div>
<br />My goal isn't to simulate NES sound on the GB, but to handle both target on the same format. In a GB file you could setup a "channel 3 waveform macro", and if you try to do that on NES you'd get an error. Effectivly on all portable systems bass sound should be distorted waveforms, else you don't hear them at all. The music of Golden Sun sounds totally different if you use an power amplifier and audio adpatater out of the GBA, as opposed as using the small GBA speaker.
<br />
<br />
<br />Anyway, before all, I'd have to notice <span style="font-size: 150%; line-height: normal"><strong>who is interested</strong></span>. If noone is interested, the project is useless since I can live with my sound engines for my own use, this isn't so much a problem for me.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 02, 2006 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The biggest problem is that I couldn't figure out how to make my music engine support fast forward and rewind, forcing me to listen through the whole song when I made any change. </div><br />That is the case anyway with all game music formats.</div><br />Nope. In a tracker or a MIDI editor, I can fast-forward to any part of the order table.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In a MML based soudtracker, you can just comment the beginning of the song to directly hear where you're having problem, and with the channels you're having problems.</div><br />Do you expect casual composers to be able to figure that out?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I can do Game Boy Advance and PC, as they would use pretty much the same code for the sampled instruments. </div><br />I hadn't PC in mind, but why not after all. BTW you just tell me that GBA sound was totally different from DirectX sound, so this is really confusing.</div><br />GBA sound is just a stream of linear PCM samples. Windows DirectSound also allows playback of a stream of linear PCM samples.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I will do that when I got time, but I'm not used with command line exectuables.</div><br />In general, if one uses a text editor to create a file, he uses a command-line program to compile it into another format. This command-line program doesn't have to be launched directly from a command prompt; it can also be launched from within a text editor that includes the feature of launching compilers. Some of these specialized editors are called IDEs.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This leads the GB to not hold things such as tremoloes that the NES can do. However, the melody would still be cross-platform compatible.</div><br />Then why not just put the melody in one file and all the instruments in another? Because in that case, you've reinvented MIDI files.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The PSX has enough channels, so 16 can be used as free for music and 8 for sound effects, totally avoiding the cutoff issues.</div><br />And the PC and GBA can mix a number of PCM channels limited only by CPU time.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unless you were actually using 8 channels on your GBA, Genesis, or Super NES soundtrack, and you want to make an NES version.</div><br />That's right, but you can still copy/pase the most important channels and forgot the others.</div><br />Unless you want to <a href="http://pics.pineight.com/nt2/Butterfly.nsf" class="postlink">use arpeggios to simulate chords</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My goal isn't to simulate NES sound on the GB, but to handle both target on the same format. In a GB file you could setup a "channel 3 waveform macro", and if you try to do that on NES you'd get an error.</div><br />Or just a warning.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway, before all, I'd have to notice <span style="font-size: 150%; line-height: normal"><strong>who is interested</strong></span>. If noone is interested, the project is useless since I can live with my sound engines for my own use, this isn't so much a problem for me.</div>
<br />What does <a href="http://en.wikipedia.org/wiki/Peter_Noone" class="postlink">Noone</a> have to do with this? But as I said, at least I'm interested.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Aug 03, 2006 1:34 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Nope. In a tracker or a MIDI editor, I can fast-forward to any part of the order table. </div><br />Sure, but that is before compilation to a format that is suited for video games.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you expect casual composers to be able to figure that out? </div><br />Yes. That isn't very complicated I think.<br />Also MML support triplets and different beats, I found the trackers very unconfortable when you want to do special tricks such as triplets, another track that ecoes the first with a delay, etc...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">In general, if one uses a text editor to create a file, he uses a command-line program to compile it into another format. This command-line program doesn't have to be launched directly from a command prompt; it can also be launched from within a text editor that includes the feature of launching compilers. Some of these specialized editors are called IDEs. </div><br />Yes, I use Text Pad and I think it support such thigs.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then why not just put the melody in one file and all the instruments in another? Because in that case, you've reinvented MIDI files. </div><br />Not at all, I want a format suited for Video Game programming, not just a format that can replay one single tune. Also, the MIDI files usually follow the General Midi definition wich is kinda limited. Some sound cards (like mine) can support to load different customized sound fonts wich is fun to play with, but mine doesn't work...<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Unless you want to use arpeggios to simulate chords. </div><br />Exactly, this would be not so confortable, but at least in major case the user has the same interface each time.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What does Noone have to do with this? But as I said, at least I'm interested.</div>
<br />Again, my target is only video game programmers, and you seem the only one interested so far.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 03, 2006 7:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Nope. In a tracker or a MIDI editor, I can fast-forward to any part of the order table. </div><br />Sure, but that is before compilation to a format that is suited for video games.</div><br />Games need to fast-forward too. For instance, the <em>Super Mario Bros. 2: Mario Madness</em> module of <em>Super Mario All-Stars</em> needs to fast-forward 3 measures into the <em>Super Mario Bros.</em> music when the player enters sub-space.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do you expect casual composers to be able to figure that out? </div><br />Yes. That isn't very complicated I think.<br />Also MML support triplets and different beats, I found the trackers very unconfortable when you want to do special tricks such as triplets, another track that ecoes the first with a delay, etc...</div><br />I didn't find too much of a difficulty with triplets in ModPlug Tracker creating S3M files. Triplets use the SDx effect, which delays a note by x frames.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, the MIDI files usually follow the General Midi definition wich is kinda limited. Some sound cards (like mine) can support to load different customized sound fonts wich is fun to play with, but mine doesn't work...</div>
<br />Of course sound fonts would work in a custom system. I'm just pointing out similarities.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Thu Aug 03, 2006 7:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Nope. In a tracker or a MIDI editor, I can fast-forward to any part of the order table. </div><br />Sure, but that is before compilation to a format that is suited for video games.</div><br />Games need to fast-forward too. For instance, the <em>Super Mario Bros. 2: Mario Madness</em> module of <em>Super Mario All-Stars</em> needs to fast-forward 3 measures into the <em>Super Mario Bros.</em> music when the player enters sub-space.</div>
<br />
<br />Does it actually play the original tune, or does it use a <strong>copy</strong> of the song with the first few measures removed (and likely a bit removed from the end as well)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Aug 03, 2006 8:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Quietust wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Games need to fast-forward too. For instance, the <em>Super Mario Bros. 2: Mario Madness</em> module of <em>Super Mario All-Stars</em> needs to fast-forward 3 measures into the <em>Super Mario Bros.</em> music when the player enters sub-space.</div><br />Does it actually play the original tune, or does it use a <strong>copy</strong> of the song with the first few measures removed (and likely a bit removed from the end as well)?</div>
<br />In SMB2 for NES: Make a potion a couple blocks to the right of the fifth cherry, grab the cherry, get the Starman, and immediately go in the door to sub-space. When sub-space time runs out, if you timed it correctly, the SMB1 music will continue playing. (<a href="http://www.themushroomkingdom.net/smb2_bugs.shtml" class="postlink">source</a>) It's a much shorter version, obviously a copy. The glitch doesn't work in the Super NES version (or if it does, the timing is way different), but if you grab the SPC, you can hear that a couple of measures are cut off the beginning, but otherwise it's the complete song. I can imagine a lot of other games that need to fast-forward.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Aug 03, 2006 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I didn't find too much of a difficulty with triplets in ModPlug Tracker creating S3M files. Triplets use the SDx effect, which delays a note by x frames. </div>
<br />At least my format would support all notes with nearly all lenghts. I think a format without triplets can be quite limiting.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Thu Aug 03, 2006 8:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So basically, MML with a better data format and replay engine?  I'd be interested in that.
<br />
<br />I do like tracker interface though.  Would be nice if a tracker could output an optimized MML text.
<br />
<br />Only weird thing with MML is syncing the channels together.  You could define alternate start points in the song (pretty much how the looping works), but the person writing the song still has to take some care to syncronize the point for all channels (unlike a tracker, where you just select the pattern and hit the play button).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Aug 04, 2006 1:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So basically, MML with a better data format and replay engine? I'd be interested in that.<br /></div><br />Exactly, and that with a different compiler and replay programm for each platform available.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Only weird thing with MML is syncing the channels together. You could define alternate start points in the song (pretty much how the looping works), but the person writing the song still has to take some care to syncronize the point for all channels (unlike a tracker, where you just select the pattern and hit the play button).</div>
<br />The tracker format is quite limitating, even if it seems more confortable. My goal is to reach a format with the less limits as possible, allowing to take full advantage of the target's output.
<br />Now that some people seems interested, we have to discuss the abilities of the format.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Aug 04, 2006 1:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Now that some people seems interested, we have to discuss the abilities of the format. I'd submit the following :<br />[code]<br />- Can play any notes in the 12-tone scale and up to 8 octaves range</div><br />What reference would we use for "note #0"? We might as well use MIDI note numbers and allow for 10 octaves.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">&#91;code&#93;- Can allow the main code to dialog with the sound handling programm to : Start a new song, pause a song and save the sate of a paused song while starting a new one (usefull for RPGs during battles), stop the playback of a song, unpause a paused song while it's old state is restored (usefull AFTER battles for RPGs)&#91;/code&#93;</div><br />Or in games where events cause jingles that take over the entire music space: <em>Super Mario Bros.</em> low time; <em>Super Mario Bros. 2</em> grab mushroom; <em>Sonic the Hedgehog</em> low O2; <em>Goldeneye</em> multiplayer death.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">&#91;code&#93;start playing a SFX, stop playing an SFX, start playing a second SFX (the # of SFX that can be played at the same time depend of the target platform).&#91;/code&#93;</div>
<br />But can the main code query the song to see what measure and beat it's on, so that your intro is synchronized to the music? Look at <em>Mario Kart 64</em> for an example of what a synced intro looks like, and look at what Snes9x does to the opening of <em>Kirby Super Star</em> to see what lack of this feature does. Heck, look at <em>Dance Dance Revolution</em> and <em>Lumines</em> for examples of using music sync during game play.
<br />
<br />And can the main code scale the music tempo, as seen in <em>Super Mario Bros.</em> 1, 3, and World when time is running out, or as seen in <em>Tetris</em> when the block pile is higher than the next piece window, or as seen in <em>WarioWare</em> after a specific number of microgames have been played?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>