<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=8043" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-08-29T12:55:44-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=8043</id>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-08-29T12:55:44-07:00</updated>
<published>2011-08-29T12:55:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=83246#p83246</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=83246#p83246"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=83246#p83246"><![CDATA[
Just incase anyone's curious, I tested this using "the grape escape" and it worked great.  For a little more testing I tried out commando and the tile screen was perfect, but there were a few garbled tiles/graphic glitches when playing the game.  I did try out over clocking the mcu from 20Mhz in several steps up to 36Mhz with no improvement, it actually got worse with each step till the mcu froze at 40Mhz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Aug 29, 2011 12:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-08-16T23:07:53-07:00</updated>
<published>2011-08-16T23:07:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82867#p82867</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82867#p82867"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82867#p82867"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />Ah, by WRAM I mean the expansion RAM at $6000-$7FFF.  But that makes sense that you could use multiple writes from the NES to give the MCU some relief.  Address decoding to enable WRAM at $6000-$7FFF would need to be handled on every NES memory cycle though.<br /><br />Disabling the UNROM mapper under software control seems strange though, if RAM is mapped in there, then you might use a 'register' at some other address to re-enable it, I guess.<br /></div><br /><br />Yeah I guess I was meshing the idea of SRAM as PRG memory in a devcart with WRAM.  My only real need to disable the mapper with software is to program/flash the cart.  And yes I would re-enable the mapper similar to how I disabled it.  I agree some 74xxx parts would be best for enabling WRAM if one wanted it on a discrete mapper.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Your example sounds like it would work, but like you said I'd also be concerned about it drifting in and out of sync with the NES.  That's part of why the Propeller MCU seemed attractive for this, using instructions like 'waitpeq/waitpne' could have been ideal to synchronize to inputs from the NES.  But I think it's probably worth adding a couple 74xx parts instead of doing chip enables in software.<br /><br />I think there's a lot more that can be done with an MCU in addition to bankswitching, if the NES can read from it then theoretically parts of the game could run inside the MCU.  It's just a matter of writing the software.<br /></div><br />Yeah I was looking at an old post you had about the propeller the other day.  I think Bregalad did some stuff with a PIC that had addressable inputs that acted like a register to an external device.  Something with those capabilities or similar would allow for a lot more if one wanted to add game features.  I was mainly just playing around to see if I could make something simple like this work for flashing a cart and was pleasantly surprised.  Aside from software mapper defeat I think the most use I would get out of this is making an all-in-one discrete mapper dev board without using a ton of 74xxx chips and jumpers/switches.  But realistically a CPLD would be best for most of this stuff.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />In existing games D4-D7 on a UNROM write are normally zero when I've looked, but they don't need to be.  It's just supposed to match whatever is at that address in ROM, because the ROM will be outputting at the same time you write.  Seemed to me like the CPU always locks up if they don't match.  So if you use more data bits, you'll need to expand the table used for this in ROM.<br /></div><br /><br />Yeah I forgot about the bus conflict issue for the higher bits.  Even though they're not made use of.  But... If I'm really only using the mapper defeat to program a devcart maybe I could take advantage of this fact.  Maybe I could watch D7 and require 0x8F to be written to disable the mapper and then cover my tracks by programming it back to the proper value (0x0F) before I swap away from the bank.  I'd have to think this through a little more to make I do it all right.  However, re-enabling the mapper I probably wouldn't want to use a simple write sequence since I'd be writing lots of "random" data.  I think I could just use a sequence of one or two Reads.  That would allow me to "cover my tracks" and avoid trashing bank tables in my case using SRAM.   I think the bus conflict issue would be unavoidable with Flash memory, the values would need to be in the bank table before you were even able to get there.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Tue Aug 16, 2011 11:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-08-16T17:41:28-07:00</updated>
<published>2011-08-16T17:41:28-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82861#p82861</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82861#p82861"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82861#p82861"><![CDATA[
Ah, by WRAM I mean the expansion RAM at $6000-$7FFF.  But that makes sense that you could use multiple writes from the NES to give the MCU some relief.  Address decoding to enable WRAM at $6000-$7FFF would need to be handled on every NES memory cycle though.<br /><br />Disabling the UNROM mapper under software control seems strange though, if RAM is mapped in there, then you might use a 'register' at some other address to re-enable it, I guess.<br /><br />Your example sounds like it would work, but like you said I'd also be concerned about it drifting in and out of sync with the NES.  That's part of why the Propeller MCU seemed attractive for this, using instructions like 'waitpeq/waitpne' could have been ideal to synchronize to inputs from the NES.  But I think it's probably worth adding a couple 74xx parts instead of doing chip enables in software.<br /><br />I think there's a lot more that can be done with an MCU in addition to bankswitching, if the NES can read from it then theoretically parts of the game could run inside the MCU.  It's just a matter of writing the software.<br /><br />In existing games D4-D7 on a UNROM write are normally zero when I've looked, but they don't need to be.  It's just supposed to match whatever is at that address in ROM, because the ROM will be outputting at the same time you write.  Seemed to me like the CPU always locks up if they don't match.  So if you use more data bits, you'll need to expand the table used for this in ROM.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Aug 16, 2011 5:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-08-15T12:46:23-07:00</updated>
<published>2011-08-15T12:46:23-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82807#p82807</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82807#p82807"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82807#p82807"><![CDATA[
What about something as simple as switching to the last bank twice in a row?  Unlikely but possible to switch to the last bank, and do it two times in a row seems even more non sensible at least for UNROM.<br /><br />My other thought was to make use of data lines 7-4 which are rarely even seen by the 161.  What are those bits set to most often times?  I would only need a pin or two to come up with something funky hopefully.<br /><br /><div class="quotetitle">memblers wrote:</div><div class="quotecontent"><br />Sounds interesting, I wonder how many instructions you get per NES memory cycle. For something like WRAM decoding, even after you 'meet the deadline' with the code timing, there is still the memory access time to meet. Maybe using faster SRAM could help.<br /></div><br /><br />The issue is you've need time to recognize a condition (R/W and /CE low in my case) and then time to change the outputs (A14-A16 for me).  /CE is only low for ~0.37 uSec which gave me the requirement of 7 clock cycles for my main loop.  I took the cheap way out and tried C before assembly.  And  got it to work with a loop that was two C statements and 6 resulting cycles.  I later optimized to one statement and 4 cycles I think.  <br /><br />Then I had a full NES clock cycle minus memory access time to switch banks.  Which was cake with those 11 clock cycles to work with.<br /><br />Now in the case of implementing WRAM like you're asking.  I imagined something like 3 NES instructions required.  First bankswitch to WRAM.  Then repeat the same instruction to disable the mapper.  Now the mcu is done, and you can address and write to any of the available locations in RAM.  So instead of trying to do too many things in one cycle just separate it.  Not to mention you'd need to bankswitch and disable the mapper anyways and need two NES cycles to do so.  I haven't tested the disable feature yet to ensure I could do it fast enough, but it doesn't sound too challenging.  Worst case I could require a NOP by the NES between the switch and disable instructions.  The trouble with that though is things become more sensitive to the time mismatch between the NES and mcu.  And things like comparability with clones and memory speed become more questionable I would imagine.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Aug 15, 2011 12:46 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-08-15T07:26:11-07:00</updated>
<published>2011-08-15T07:26:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82801#p82801</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82801#p82801"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82801#p82801"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />one could as well swap code directly from code running in the swappable area<br /></div><br />Which becomes especially important when you try to emulate AOROM, BNROM, GNROM, Color Dreams, or anything else with 32 KB PRG banks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Aug 15, 2011 7:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2011-08-15T07:12:43-07:00</updated>
<published>2011-08-15T07:12:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82800#p82800</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82800#p82800"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82800#p82800"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The only non-sensible operation I can think of with UNROM is to swap in the last bank, because it's already the fixed bank<br /></div><br />Although the common way to do it is to swap banks in the swappable area from code that runs in the fixed area, one could as well swap code directly from code running in the swappable area, then it could become somewhat sensible, the right bank must be swapped after several cycles.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Aug 15, 2011 7:12 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2011-08-15T04:57:43-07:00</updated>
<published>2011-08-15T04:57:43-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82798#p82798</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82798#p82798"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82798#p82798"><![CDATA[
The only non-sensible operation I can think of with UNROM is to swap in the last bank, because it's already the fixed bank.  But there's still nothing to stop someone from swapping that bank in and using it at $8000 if they really wanted to, or just swapping it in for no reason at all.  But involving that in a back and forth sequence seems like the safest bet.<br /><br />Sounds interesting, I wonder how many instructions you get per NES memory cycle.  For something like WRAM decoding, even after you 'meet the deadline' with the code timing, there is still the memory access time to meet.   Maybe using faster SRAM could help.<br /><br />It could be a useful technique for something.  I always had thought of using a small MCU as an IRQ counter, but the cost and having another chip to program hasn't seemed worth it yet.  Plus, with a CPLD you can get 34 I/Os for not much more than $1, it'll be hard to beat that with any MCU.<br /><br />A few years ago I was considering making a mapper based on the Propeller MCU that I posted about here <a href="http://nesdev.com/bbs/viewtopic.php?t=4904" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=4904</a>.  With there being 8 CPUs (80mhz, 4 clocks per instruction), and it having instructions that can pause execution until whatever condition is on the I/O lines, it would be pretty decent at something like that.  But I quit that path to go with CPLD and PIC32, for their particular strengths and value for the cost.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Aug 15, 2011 4:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[infiniteneslives]]></name></author>
<updated>2011-08-15T02:23:01-07:00</updated>
<published>2011-08-15T02:23:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82795#p82795</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82795#p82795"/>
<title type="html"><![CDATA[Emulating UNROM mapper with microcontroller]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8043&amp;p=82795#p82795"><![CDATA[
So I've been trying to figure out a way to make a mapper disable feature so I can program a UNROM devcart with my <a href="http://nesdev.com/bbs/viewtopic.php?t=7912&amp;highlight=" class="postlink">Kazzo</a><br /><br />The obvious "easy" choice is a hardware mapper disable by making use of the EXP0 pin.  But I need to do some work with the hardware and software to get all that to work.  Then I wondered if possible solution would be to emulate the '161 counter with a mcu and have a software disable.  <br /><br />The main concern is timing obviously, ensuring the mcu is fast enough to bankswitch for the NES.  I broke out the oscope and checked my frontloader and FC mobile II both, and found I had about 0.37 uSec worth of time while PRG R/W and PRG /CE were low.  And figured out I should be able to make it work running at 20Mhz on my mcu.<br /><br />So I wrote up some code quick and flashed up a Attiny44 and replaced the 161 on a UNROM cart with it.  I kept the '32 OR gates, expecting I wouldn't be able to be quick enough to emulate it as well.  I didn't have too high of hopes that it would work but I figured it was worth a try.  Turned out it DID work.  With some testing I quickly became critical of every minor glitch expecting it was a product of me emulating the counter.  I made a mental list of about 6 minor glitches and soldered the 161 back in to see if they went away.  To my further amazement all the glitches were still there, as far as I could tell I was emulating it "perfectly" as far as the NES and my FCmobile were concerned.<br /><br />So my plan is to come up with some sort of software mapper defeat so I can write to the SRAM (and potentially Flash memory) I'm using with my discrete mapper dev cart.   Basically I'll recognize a specific pattern of writing bits to the "counter."  I could even use a larger mcu like a ATmega88 and gain access to the whole PRG DATA bus to create a more obscure pattern if needed.  <br /><br />My first question is do you guys have any recommendations as to what pattern I could use?  I was imagining something like switching to 3 banks in a row, potentially not allowing time for reading from those banks.  It would seem this kind of behavior wouldn't be non-sensible in a game.  I haven't tested this out yet but if you guys can recommend something simple I'll do some tests.<br /><br />Once I got this working I started realizing there may be more potential than I realized.  First off with a bigger mcu I'll be able to easily emulate the counter for UxROM, AxROM, CNROM, and BNROM without requiring a TON of jumpers.  I could just use a selector switch or two and add some extra hardware to enable/disable the '32 on the UxROM.<br /><br />But I had another thought and wondered what you guys thought about it.  Something like this could be used to add WRAM or other features to a UxROM style mapper.  I know MMC1 is great for this capability, but if you don't want to use donors this would be simple and around half the cost or less.  Now I realize this wouldn't run in emulators, but that's moot in my opinion.  My greater concern would be compatibility with hardware and games.  On that note I'll have to verify it works with my top loader since its sitting here next to me.<br /><br />Anyways, just some food for thought there.  Not sure if anyone's done this before or not, but figured I would share what I spent the afternoon playing around with.  I seem to remember the question coming up at one point about using a mcu for a mapper and the quick answer was it was too slow.  I thought it might be as well, but turns out it can be done.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4832">infiniteneslives</a> — Mon Aug 15, 2011 2:23 am</p><hr />
]]></content>
</entry>
</feed>