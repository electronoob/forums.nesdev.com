<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8214" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-10-17T08:46:41-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8214</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2011-10-17T08:46:41-07:00</updated>
<published>2011-10-17T08:46:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85161#p85161</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85161#p85161"/>
<title type="html"><![CDATA[PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85161#p85161"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />3. D7 is cleared when read from $2002 and $2002 only. It also triggers the NMI too. If it's 1 and and NMI is disabled on the CPU side, nothing happens. But if it's 1 and you then enable NMI on the CPU side, the CPU will get interrupted at that very time nomatter if it's rendering or not IIRC.<br /></div><br />I just wanted to correct you, it's impossible to disable NMIs from CPU side, you can only disable IRQs by setting the I flag.<br />However, you can disable NMIs on the PPU side by setting $2000.7 to 0, then what you say happens.<br /><br />$2002.7 was really meant to be a NMI acknownledge, reading it as a '1' means the PPU just triggered an NMI. Because of how the 2A03 is wired inside the NES, no other NMI sources are possible so a game can freely ignore the acknownledge part and exectue NMI without any acknownledge, but you can trigger multiple NMIs by toggling $2000.7 off and on again without reading $2002.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Oct 17, 2011 8:46 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2011-10-16T18:15:42-07:00</updated>
<published>2011-10-16T18:15:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85125#p85125</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85125#p85125"/>
<title type="html"><![CDATA[PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85125#p85125"><![CDATA[
I still find that open bus test ROM a little vague in it's errors and descriptions of how PPU open bus works.<br /><br />I can also state that not having it emulated causes exactly 0 games to malfunction. That being said PPU open bus should be low priority for any PPU emulator. It really doesn't matter.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Sun Oct 16, 2011 6:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Elessar]]></name></author>
<updated>2011-10-16T16:36:14-07:00</updated>
<published>2011-10-16T16:36:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85121#p85121</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85121#p85121"/>
<title type="html"><![CDATA[PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85121#p85121"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Yes, you can ignore D4-D0 of PPUSTATUS because games typically use instructions that likewise ignore these bits.<br /></div><br />Good to know.<br /><br /><br /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. How many bits are written to PPUSTATUS as a result of data being written into a PPU register - 4 bits or 5 bits?<br /></div><br />I'm not aware of any test ROM for PPU open bus behavior, and I'm not aware of any game that depends on it. I think it has something to do with how the pin drivers are set up inside the PPU.</div><br />No idea about games depending on stuff, but Blargg has an open bus test that can be downloaded at <!-- m --><a class="postlink" href="http://blargg.parodius.com/nes-tests/">http://blargg.parodius.com/nes-tests/</a><!-- m -->  .</div><br />I'll check it out, thanks!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4899">Elessar</a> — Sun Oct 16, 2011 4:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2011-10-16T16:31:56-07:00</updated>
<published>2011-10-16T16:31:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85120#p85120</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85120#p85120"/>
<title type="html"><![CDATA[Re: PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85120#p85120"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. How many bits are written to PPUSTATUS as a result of data being written into a PPU register - 4 bits or 5 bits?<br /></div><br />I'm not aware of any test ROM for PPU open bus behavior, and I'm not aware of any game that depends on it. I think it has something to do with how the pin drivers are set up inside the PPU.</div><br />No idea about games depending on stuff, but Blargg has an open bus test that can be downloaded at <!-- m --><a class="postlink" href="http://blargg.parodius.com/nes-tests/">http://blargg.parodius.com/nes-tests/</a><!-- m -->  .<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Sun Oct 16, 2011 4:31 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-10-16T16:15:42-07:00</updated>
<published>2011-10-16T16:15:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85119#p85119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85119#p85119"/>
<title type="html"><![CDATA[PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85119#p85119"><![CDATA[
Yes, you can ignore D4-D0 of PPUSTATUS because games typically use instructions that likewise ignore these bits. Typical program fragments:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; In init code, while waiting for the PPU to warm up<br /><br />warmup1:<br />  bit PPUSTATUS<br />  bpl warmup1<br />  ; at this point we should be at the bottom of the first frame<br />warmup2:<br />  bit PPUSTATUS<br />  bpl warmup2<br />  ; after this point, the game will use only NMIs to wait for vblank<br /><br />; 8&lt; cut &gt;8<br /><br />; During game play, while waiting for sprite 0 to change the<br />; scroll position from the status bar to the playfield<br /><br />  ; first wait for sprite 0 flag to be cleared at end of vblank<br />s0wait_0:<br />  bit PPUSTATUS<br />  bvs s0wait_0<br />  ; now wait for it to be set again<br />s0wait_1:<br />  bit PPUSTATUS<br />  bvs s0wait_1<br />  ; at this point, the game is likely to write to PPUCTRL,<br />  ; PPUSCROLL, and/or PPUADDR to change the scroll position<br /></div><br />The BIT instruction is commonly used to load bits 7 and 6 of a value in into flags N and V.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Oct 16, 2011 4:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Elessar]]></name></author>
<updated>2011-10-16T16:08:42-07:00</updated>
<published>2011-10-16T16:08:42-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85118#p85118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85118#p85118"/>
<title type="html"><![CDATA[Re: PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85118#p85118"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Elessar wrote:</div><div class="quotecontent">However, the Nestech document provides this information<br /></div><br />NESTECH.txt is <em>very</em> old.<br /><br />...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2. Is bit 4 actually a VRAM write flag?<br /></div><br />No.</div><br />I suspected that this might be the case, but I wanted to make sure.<br /><br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">1. How many bits are written to PPUSTATUS as a result of data being written into a PPU register - 4 bits or 5 bits?<br /></div><br />I'm not aware of any test ROM for PPU open bus behavior, and I'm not aware of any game that depends on it. I think it has something to do with how the pin drivers are set up inside the PPU.</div><br />Would I be able to safely ignore the lower bits of the PPUSTATUS register then?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4899">Elessar</a> — Sun Oct 16, 2011 4:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-10-16T16:01:00-07:00</updated>
<published>2011-10-16T16:01:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85117#p85117</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85117#p85117"/>
<title type="html"><![CDATA[Re: PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85117#p85117"><![CDATA[
<div class="quotetitle">Elessar wrote:</div><div class="quotecontent"><br />However, the Nestech document provides this information<br /></div><br />NESTECH.txt is <em>very</em> old.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />1. How many bits are written to PPUSTATUS as a result of data being written into a PPU register - 4 bits or 5 bits?<br /></div><br />I'm not aware of any test ROM for PPU open bus behavior, and I'm not aware of any game that depends on it. I think it has something to do with how the pin drivers are set up inside the PPU.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />2. Is bit 4 actually a VRAM write flag?<br /></div><br />No.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />3. Is bit 7 cleared after a read from PPUSTATUS, or a read from any PPU register?<br /></div><br />Bit 7 of PPUSTATUS is set to 0 after reading PPUSTATUS, not after reading any of the other seven ports. The behavior is described in the <a href="http://wiki.nesdev.com/w/index.php/NMI" class="postlink">page on NMI</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />4. Similarly, are PPUSCROLL and PPUADDR cleared after a read from PPUSTATUS, or a read from any PPU register?<br /></div><br />Nothing "clears" PPUSCROLL and PPUADDR, except that parts of <em>t</em> (loaded through PPUSCROLL) are copied to <em>v</em> (PPUADDR) at the start of a frame and at the end of each scanline if rendering is turned on in PPUMASK. What this refers to is an internal 1-bit address latch telling whether to write to the top half or the bottom half of a register.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Oct 16, 2011 4:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-10-16T16:03:34-07:00</updated>
<published>2011-10-16T16:00:39-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85116#p85116</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85116#p85116"/>
<title type="html"><![CDATA[PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85116#p85116"><![CDATA[
Always trust the wiki info over any 3rd party stuff, I've never heard of that other document you were referencing. But anyway...<br /><br />1. You don't write to the register. the "clearing" is of the way the $2006/$2005 registers work. You write multiple values. $2006 goes high byte of data and then low, and a read resets it to write the high byte being written so you KNOW the status of $2006 write is as it could be the low byte for some reason. Same with the $2005 latch, you write X then Y scroll. You read $2002 it to make sure you're writing the first byte of the latch first, not the another for any reason. <br /><br />2. AFAIK, D4 does nothing. there's only those 3 flags. And I also hear that D5 is slightly more complicated, but I know no details about that, wait till others chime in.<br /><br />3. D7 is cleared when read from $2002 and $2002 only. It also triggers the NMI too. If it's 1 and and NMI is disabled on the CPU side, nothing happens. But if it's 1 and you then enable NMI on the CPU side, the CPU will get interrupted at that very time nomatter if it's rendering or not IIRC.<br /><br />4. See how the PPU $2006 works, same thing, making sure you're writing the value you want first pretty much.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Sun Oct 16, 2011 4:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Elessar]]></name></author>
<updated>2011-10-16T15:50:22-07:00</updated>
<published>2011-10-16T15:50:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85115#p85115</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85115#p85115"/>
<title type="html"><![CDATA[PPUSTATUS lower bits]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8214&amp;p=85115#p85115"><![CDATA[
I'm in the middle of my PPU development, and I would like to clear up a few things about the PPUSTATUS register. Most of the sources of information that I have checked so far more or less agree with what is said in the wiki:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">76543210<br />||||||||<br />|||+++++- Least significant bits previously written into a PPU register<br />|||       &#40;due to register not being updated for this address&#41;<br />||+------ Sprite overflow. The PPU can handle only eight sprites on one<br />||        scanline and sets this bit if it starts dropping sprites.<br />||        Normally, this triggers when there are 9 sprites on a scanline,<br />||        but the actual behavior is significantly more complicated.<br />|+------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 'hits'<br />|         a nonzero background pixel.  Used for raster timing.<br />+-------- Vertical blank has started &#40;0: not in VBLANK; 1: in VBLANK&#41;</div><br /><br />However, the Nestech document provides this information:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">+---------+----------------------------------------------------------+<br />|  $2002  | PPU Status Register &#40;R&#41;                                  |<br />|         |                                                          |<br />|         |    D7: VBlank Occurance                                  |<br />|         |          0 = Not occuring                                |<br />|         |          1 = In VBlank                                   |<br />|         |    D6: Sprite #0 Occurance                               |<br />|         |          0 = Sprite #0 not found                         |<br />|         |          1 = PPU has hit Sprite #0                       |<br />|         |    D5: Scanline Sprite Count                             |<br />|         |          0 = Eight &#40;8&#41; sprites or less on current scan-  |<br />|         |              line                                        |<br />|         |          1 = More than 8 sprites on current scanline     |<br />|         |    D4: VRAM Write Flag                                   |<br />|         |          0 = Writes to VRAM are respected                |<br />|         |          1 = Writes to VRAM are ignored                  |<br />|         |                                                          |<br />|         | NOTE: D7 is set to 0 after read occurs.                  |<br />|         | NOTE: After a read occurs, $2005 is reset, hence the     |<br />|         |       next write to $2005 will be Horizontal.            |<br />|         | NOTE: After a read occurs, $2006 is reset, hence the     |<br />|         |       next write to $2006 will be the high byte portion. |<br />+---------+----------------------------------------------------------+</div><br /><br />So here are the things I would like cleared up for me:<br /><br />1. How many bits are written to PPUSTATUS as a result of data being written into a PPU register - 4 bits or 5 bits?<br />2. Is bit 4 actually a VRAM write flag?<br />3. Is bit 7 cleared after a read from PPUSTATUS, or a read from any PPU register?<br />4. Similarly, are PPUSCROLL and PPUADDR cleared after a read from PPUSTATUS, or a read from any PPU register?<br /><br /><br />Like I said, the Nestech document seems to have different information than most of my sources on this register, so I would like to know how accurate this information is. Any help would be appreciated!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4899">Elessar</a> — Sun Oct 16, 2011 3:50 pm</p><hr />
]]></content>
</entry>
</feed>