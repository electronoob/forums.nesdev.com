<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 4 Channel wavetable on the NES</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">4 Channel wavetable on the NES</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4139">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4139</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kevtris</b> [ Thu May 29, 2008 3:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>4 Channel wavetable on the NES</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, b00d's been buggin' me awhile on this.  I wrote it a few days ago as a quick draft.
<br />
<br />It's a possible way to perform 4 channel wavetable synthesis on an NES using its raw DAC channel and some code that runs at Hblank rate or thereabouts.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />init:&nbsp; &nbsp;&nbsp; &nbsp;lda #&lt;trackdata&nbsp; ;point to track data<br />&nbsp; &nbsp;&nbsp; &nbsp;sta track+0<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #&gt;trackdata<br />&nbsp; &nbsp;&nbsp; &nbsp;sta track+1<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #000h<br />&nbsp; &nbsp;&nbsp; &nbsp;sta pointer<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase0<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase1<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase2<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase3<br />&nbsp; &nbsp;&nbsp; &nbsp;lda #0ffh<br />&nbsp; &nbsp;&nbsp; &nbsp;sta timer<br />&nbsp; &nbsp;&nbsp; &nbsp;rts<br /><br /><br />;perform channel update and rendering<br />update:&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;ldx phase0&nbsp; &nbsp;;index our sample table<br />&nbsp; &nbsp;&nbsp; &nbsp;lda table,x&nbsp; &nbsp;;and add 4 channels worth together<br />&nbsp; &nbsp;&nbsp; &nbsp;ldx phase1<br />&nbsp; &nbsp;&nbsp; &nbsp;adc table,x<br />&nbsp; &nbsp;&nbsp; &nbsp;ldx phase2<br />&nbsp; &nbsp;&nbsp; &nbsp;adc table,x<br />&nbsp; &nbsp;&nbsp; &nbsp;ldx phase3<br />&nbsp; &nbsp;&nbsp; &nbsp;adc table,x<br />&nbsp; &nbsp;&nbsp; &nbsp;sta 04011h &nbsp; &nbsp;;store in PCM reg&nbsp; 30 cycles to here<br />&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;;update phase accumulators<br />&nbsp; &nbsp;&nbsp; &nbsp;lda rate0<br />&nbsp; &nbsp;&nbsp; &nbsp;adc phase0<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase0<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;lda rate1<br />&nbsp; &nbsp;&nbsp; &nbsp;adc phase1<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase1<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;lda rate2<br />&nbsp; &nbsp;&nbsp; &nbsp;adc phase2<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase2<br />&nbsp; &nbsp;&nbsp; &nbsp;clc<br />&nbsp; &nbsp;&nbsp; &nbsp;lda rate3<br />&nbsp; &nbsp;&nbsp; &nbsp;adc phase3<br />&nbsp; &nbsp;&nbsp; &nbsp;sta phase3&nbsp; &nbsp; &nbsp; ;74 cycles to here<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;jsr waithblank<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;inc timer<br />&nbsp; &nbsp;&nbsp; &nbsp;bne +&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;update approx 31x a second<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;ldy pointer<br />&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda &#40;track&#41;,y<br />&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; &nbsp;&nbsp; &nbsp;sta rate0<br />&nbsp; &nbsp;&nbsp; &nbsp;lda &#40;track&#41;,y<br />&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; &nbsp;&nbsp; &nbsp;sta rate1<br />&nbsp; &nbsp;&nbsp; &nbsp;lda &#40;track&#41;,y<br />&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; &nbsp;&nbsp; &nbsp;sta rate2<br />&nbsp; &nbsp;&nbsp; &nbsp;lda &#40;track&#41;,y<br />&nbsp; &nbsp;&nbsp; &nbsp;iny<br />&nbsp; &nbsp;&nbsp; &nbsp;sta rate3&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;sty pointer&nbsp; &nbsp;;46 cycles<br />&nbsp; &nbsp;&nbsp; &nbsp;bne +<br />&nbsp; &nbsp;&nbsp; &nbsp;inc track+1<br />&nbsp; &nbsp;&nbsp; &nbsp;;add other fun things here, like changing the lookup table address &#40;self-mod the LDA high byte&#41;<br />&nbsp; &nbsp;&nbsp; &nbsp;;check for track end &#40;look for 0 or something in the note data maybe&#41;<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; + jsr waithblank<br />&nbsp; &nbsp;&nbsp; &nbsp;jmp update<br /><br />waithblank:&nbsp; &nbsp;do hblank wait here<br /><br />trackdata:&nbsp; &nbsp;.db &lt;blah&gt;&nbsp; music data goes here, notes in groups of 4, updated 30x a second.<br /><br />table:&nbsp; &nbsp;&nbsp; &nbsp;.db 256 byte waveform data goes here<br />&nbsp; &nbsp;&nbsp; &nbsp;.db another 256 byte waveform table can go here for a second waveform<br /><br /><br />&nbsp; &nbsp;&nbsp; &nbsp;<br /><br />;zeropage variables:<br /><br />;phase accumulators<br />phase0:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />phase1:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />phase2:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />phase3:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br /><br />;update adders<br />rate0:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />rate1:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />rate2:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />rate3:&nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br /><br />timer: &nbsp; &nbsp;&nbsp; &nbsp;.dsb 1<br />pointer:&nbsp; &nbsp;.dsb 1<br /></div><br /><br /><br />Here's how it works.  First you call init to initalize everything,  next you jump to update, and it will get stuck in an endless loop playing the music.<br /><br />I kinda cheated on it since it's just a rough draft.   The whole hblank waiting thing isn't fleshed out, but you could use an IRQ from a VRCx mapper- that would give an IRQ every 114/113 cycles which is fine.<br /><br />There's plenty of time to perform the calculations and all that.<br /><br />Music is just stored  note/note/note/note  for the 4 channels, and the values get shoved into the adder variables every time "timer" expires.<br /><br />You can get fancy and add volume control and different wavetables and all that with some self modifying code.  The code is so small that you can easily run it out of RAM without using too much up.<br /><br />The "Table"  wavetable holds 1 cycle of your waveform, be it a sawtooth, triangle, square, sine, or other kind (electric guitar?).  Samples should be 5 bits in size, so that when 4 of them are added, the result will not exceed the NES' 7 bit DAC.  This will provide maximum volume without clipping.<br /><br />Well that's about it.  I don't have time to play with the code so I thought I'd throw it out here to see what people think.<br /><br />oh yeah, if your adder value is 00h, this will effectively silence that channel 'cause it will no longer update its wave position.   Using 8 bit adders like this, you should be able to get several octaves of range without too much trouble.  If you wish to get more range, store 2 or more cycles of your waveform in the wavetable.<br /><br />[/code]

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Thu May 29, 2008 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><img src="http://awildes.myweb.uga.edu/bug_happy.gif" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri May 30, 2008 12:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh my if this could run at a decent rate this would be AWESOME !!
<br />Too bad it's needed to freeze anything to use this, unles you use fancy mappers. Maybe if you time every bit of your whole code you could actually run this while running another program, but that would be a big headache. I've already had a big headache writing a code that perform optimised matrix multiply and timed $2000 updates at the same time for my mode7 demo, my god I had an horrible time writing this.
<br />However with $4011 updates are slightly less significant, if you are one or two cycles off it will sound sligtly noisy but that's acceptable as opposed to badly timed PPU registers updates which produces flickering.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bananmos</b> [ Fri May 30, 2008 1:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is quite possible IMO, and the idea has been discussed for a very long time. Last time here:
<br /><a href="http://nesdev.com/bbs/viewtopic.php?t=1090&amp;start=15" class="postlink">http://nesdev.com/bbs/viewtopic.php?t=1090&amp;start=15</a>
<br />
<br />To use every cycle efficiently, I think you need to run the code in zeropage  and write/read from an immediate value contained in the code like this:
<br />
<br />zp_lbl:
<br />lda #xx
<br />clc
<br />adc #yy
<br />sta zp_lbl+1
<br />
<br />Also, I think you will really need a fractional position for the phase to make it sound decent. On the other hand, you might be able to skip the CLC if you add one, as a 1/256 random sample shift should not be very noticable.
<br />
<br />And actually, you could extend the idea of self-modifying code even further to make the code dynamically generated by the player. For melodic instruments, you'll probably want to have volume control, but for drum instruments you'll probably prefer to have samples longer than 256 bytes. By generating the appropriate code, you code use the available cycles for one feature or the other.
<br />
<br />But the real problem is probably integrating this sample loop with a player in a decent way that doesn't glitch. :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 30, 2008 3:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I tried the simple integral step per sample and I couldn't get enough intermediate frequencies, so I added a fraction to the phase and it works well. It seems that the code could just all be cycle-timed, with a JSR make_sample sprinked in the code at appropriate places. make_sample doesn't modify the X and Y registers, so calling code won't be too interrupted by calls to it. Volume can be handled by having multiple wave tables.
<br />
<br /><a href="http://h1.ripway.com/blargg/temp/wavetable.nes.zip" class="postlink">wavetable.nes.zip</a>
<br />
<br />Another approach would be to have NMI restart the code each frame, and have it cycle timed well enough that it always generates the proper number of samples each frame, just the last one's time varies by a few clocks.
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clocks_per_sample = 20+94&nbsp; ; Number of clocks between samples<br /><br />; These are stored in zero-page inside the make_sample code &#40;self-modifying&#41;<br />chfrac0 ; fraction of phase<br />chrate0 ; fraction of rate<br />chstep0 ; whole of rate<br />chwave0 ; pointer to wave, 256-byte aligned in memory, low byte = phase<br />; ... same for channels 1-3<br /><br />loop:<br />&nbsp; &nbsp; ; Delay<br />&nbsp; &nbsp; ldx #200<br />:&nbsp; &nbsp;jsr chloop<br />&nbsp; &nbsp; delay clocks_per_sample-5<br />&nbsp; &nbsp; dex<br />&nbsp; &nbsp; bne :-<br /><br />&nbsp; &nbsp; jsr make_sample<br />&nbsp; &nbsp; ; ... some calculation that takes clocks_per_sample<br />&nbsp; &nbsp; jsr make_sample<br />&nbsp; &nbsp; ; ... more calculation that takes clocks_per_sample<br />&nbsp; &nbsp; jsr make_sample<br />&nbsp; &nbsp; delay clocks_per_sample+1-5<br />&nbsp; &nbsp; jmp loop<br /><br />; in zero-page<br />make_sample:&nbsp; &nbsp; &nbsp; &nbsp; ; 94 clocks &#40;including JSR&#41;<br />&nbsp; &nbsp; lda #0 ; chfrac0&nbsp; &nbsp; 15 clocks<br />&nbsp; &nbsp; adc #0 ; chrate0<br />&nbsp; &nbsp; sta chfrac0<br />&nbsp; &nbsp; lda chwave0<br />&nbsp; &nbsp; adc #0 ; chstep0<br />&nbsp; &nbsp; sta chwave0<br />&nbsp; &nbsp; ; Carry isn't cleared, so there can be slight spill-over<br />&nbsp; &nbsp; ; ... same for channels 1-3<br />&nbsp; &nbsp; clc&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 22 clocks<br />&nbsp; &nbsp; lda $1234 ; chwave0<br />&nbsp; &nbsp; adc $1234 ; chwave1<br />&nbsp; &nbsp; adc $1234 ; chwave2<br />&nbsp; &nbsp; adc $1234 ; chwave3<br />&nbsp; &nbsp; sta $4011<br />&nbsp; &nbsp; rts&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 6 clocks</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 30, 2008 8:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's working well. There's not much limit to how complex sequence data can be, since it can be processed like in any player, just with the inserted calls to make_sample. The NMI technique also works well, allowing time to be broken into samples, and not having to worry about how many samples some part of sequence playback takes (as long as it fits within the budget of around 60 samples per channel per frame).
<br />
<br />For this demo I tried to put lots of sprites on screen, but there isn't enough VBL time to write them, and sprite DMA makes the audio sound bad. There's some issue with how I'm writing sprite data so they sometimes don't show on my NES, so ignore that (not interested in solving that issue, since it's unrelated to sound generation).
<br />
<br /><a href="http://h1.ripway.com/blargg/temp/wavetable6.nes.zip" class="postlink">wavetable6.nes.zip</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Anders_A</b> [ Fri May 30, 2008 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Heh, since my copynes is in pieces at the moment I haven't tried it. But it looks promising from what i see in nintendulator. Cool!
<br />
<br />(the song should be redone though as it sounds very out of tune)
<br />
<br />EDIT: I just realised it might be because of inaccurate timing in nintendulator it sounds out of tune, so ignore that if it sounds good on a real machine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Fri May 30, 2008 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Heh, I only had a 2-part song, so I have it playing two instances of it, one started later. I'll have to see if I can convert some other 4-part song that sounds better.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>ReaperSMS</b> [ Fri May 30, 2008 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As far as simplicity goes, running it out of IRQ on some CPU-timed mapper would be the most transparent. you'd lose two cycles to the interrupt sequence and RTI, and another 6 to saving and restoring A across though. Might not be workable, as your main code would then get 12 cycles out of every 113, but it would let your main code jump occasionally without egregiously horrible cycle counting.
<br />
<br />Whatever your music kernel was though, it would have to run in about 3000 cycles or less to keep running at 60 Hz.
<br />
<br />time-domain multiplexing them would get some of that back, at the expense of sample rate.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri May 30, 2008 3:40 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />DMC IRQs?  Can you use those to drive the timing?
<br />Maybe just play some up-down-up-down sample so it doesn't affect much.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri May 30, 2008 4:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The DPCM IRQ has a maximum rate of about 4.2 kHz. I'm pretty sure we need 10 kHz or more for a decent mixer. Even Big Bird's Hide and Speak runs at roughly 8 kHz.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Sat May 31, 2008 4:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />blargg/kev:
<br />
<br />This is totally sex-awesome.  I'm gonna have to make a musical jizz-fest when I get my hands on some form of GUI or MML-based interface engine to get this working.
<br />
<br />Don't keep me blue-balled for too long, guys. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>visy</b> [ Thu Jan 01, 2009 1:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">It's working well. There's not much limit to how complex sequence data can be, since it can be processed like in any player, just with the inserted calls to make_sample. The NMI technique also works well, allowing time to be broken into samples, and not having to worry about how many samples some part of sequence playback takes (as long as it fits within the budget of around 60 samples per channel per frame).<br /><br />For this demo I tried to put lots of sprites on screen, but there isn't enough VBL time to write them, and sprite DMA makes the audio sound bad. There's some issue with how I'm writing sprite data so they sometimes don't show on my NES, so ignore that (not interested in solving that issue, since it's unrelated to sound generation).<br /><br /><a href="http://h1.ripway.com/blargg/temp/wavetable6.nes.zip" class="postlink">wavetable6.nes.zip</a></div>
<br />
<br />Full sources please <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Tue Jan 13, 2009 10:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ca65 source + ROM: <a href="http://h1.ripway.com/blargg/temp/wavetable6.zip" class="postlink">wavetable6.zip</a>
<br />
<br />assemble with
<br />
<br />ca65 -I common -o rom.o wavetable6.s
<br />ld65 -C nes.cfg rom.o -o rom.nes
<br />
<br />Sorry for the lack of documentation, but others urged me to anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>B00daW</b> [ Wed Jan 14, 2009 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks a lot, blargg.  We'll see what we can do with this. ;D

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>