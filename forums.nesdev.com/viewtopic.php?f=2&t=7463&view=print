<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Divide by three</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Divide by three</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7463">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7463</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Feb 07, 2011 1:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Divide by three</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have the PPMCK code to divide by two, for selecting the octave. This is good, and I also added a #CUSTOM-TUNING command to make music other than 12-TET. But I also want to add the code to divide by three (which code is selected depends on macro), so that Bohlen-Pierce musics can also be written using PPMCK.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sivak</b> [ Mon Feb 07, 2011 3:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You could make a look up table (LUT), though that'd be 256 bytes.  Effectively, you'd calculate everything out by hand and have a table that'd look like this:
<br />
<br />.db 0,0,0,1,1,1,2,2,2 ...
<br />
<br />I have a division by 3 routine for my game, though I just use it to get boss health milestones.  May or may not be suitable for what you're doing...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">DivisionBy3Routine:<br />&nbsp; &nbsp;LDA #0<br />&nbsp; &nbsp;LDX #8<br />&nbsp; &nbsp;ASL &lt;temp + 6<br />.L1: <br />&nbsp; &nbsp;ROL A<br />&nbsp; &nbsp;CMP #3<br />&nbsp; &nbsp;BCC .L2<br />&nbsp; &nbsp;SBC #3<br />.L2:<br />&nbsp; &nbsp;ROL &lt;temp + 6<br />&nbsp; &nbsp;DEX<br />&nbsp; &nbsp;&nbsp; &nbsp;BNE .L1<br />&nbsp; &nbsp;RTS<br /></div>
<br />
<br />The result is stored in a variable called temp + 6.  The remainder is in X.  temp + 6 gets loaded with whatever number you want to divide by before calling this routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Feb 07, 2011 4:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It is a sixteen bit number I need to divide, and some registers are already in use. But I can learn from the examples. (It is being used in PPMCK, like I said I already have divide by two working, because it is just right shift. Do you know what PPMCK is?)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Feb 07, 2011 11:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">some registers are already in use</div><br /><br />Save them when entering the function. Restore them when exiting. Problem solved!<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It is a sixteen bit number I need to divide</div>
<br />
<br />I think the solution should be obvious here. You take his routine and modify it to use 16-bit variables. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  It's not that much work

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Tue Feb 08, 2011 2:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK thanks I can try

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Feb 08, 2011 2:50 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I'll recommend to read this wiki article : <a href="http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer" class="postlink">http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer</a>
<br />
<br />It is possible (and easy) to divide by 3 using only the accumulator, if the result don't exceed 8-bit that is. (the example code is for 4-bit, therefore there is 4 comparaisons, but if you need more bits in the result you need to do more comparaisons). If the result is 16-bit then you'd have to complicate the example code, splitting it into low and high 8-bits.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Fri Feb 11, 2011 1:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Well I'll recommend to read this wiki article : <a href="http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer" class="postlink">http://wiki.nesdev.com/w/index.php/Division_by_a_constant_integer</a><br /><br />It is possible (and easy) to divide by 3 using only the accumulator, if the result don't exceed 8-bit that is. (the example code is for 4-bit, therefore there is 4 comparaisons, but if you need more bits in the result you need to do more comparaisons). If the result is 16-bit then you'd have to complicate the example code, splitting it into low and high 8-bits.</div>
<br />
<br /> Caveat: none of this code is tested.
<br />
<br /> An alternative is to multiply by the reciprocal.
<br /> 
<br /> The reciprocal of 14 is (in binary) .0001001001001...
<br /> Since 14 has non power of 2 factors the reciprocal
<br /> is a repeating decimal which can be useful.
<br />
<br /> You need enough partial products to get your desired
<br /> accuracy, that is, if you want it accurate to the nearest
<br /> integer and the number you're dividing is a single byte
<br /> (max value ~256) your smallest partial product needs to be
<br /> &lt;1/256 so that that partial product is less than 1
<br /> because you want it accurate to the nearest 1
<br /> So in that case (one byte divided by 14 accurate to the
<br /> nearest integer) you need to multiply by .0001001001
<br />
<br /> Defer the division of the partial products so that you
<br /> retain as much accuracy as possible.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;sta temp<br />&nbsp;lsr<br />&nbsp;lsr<br />&nbsp;lsr&nbsp; &nbsp; &nbsp; &nbsp;; A = number x .001 <br /><br />&nbsp;; don't clear the carry to get some rounding<br /><br />&nbsp;adc temp&nbsp; ; C,A now contain 1.001 x number<br /><br />&nbsp;ror&nbsp; &nbsp; &nbsp; &nbsp;; ror not lsr, gotta keep C<br />&nbsp;lsr&nbsp; <br />&nbsp;lsr<br />&nbsp;adc temp&nbsp; ; C,A now contain 1.001001 x number<br />&nbsp;ror<br />&nbsp;lsr<br />&nbsp;lsr<br />&nbsp;lsr&nbsp; &nbsp; &nbsp; &nbsp;; A= .0001001001 x number = number/14<br /></div><br /><br /> Because it'a a repeating decimal you could roll<br /> it up into a loop.<br /> not so useful for a single byte divided by 14<br /> but might be for 16 bits divided by 3<br /> Also since it's a repeating decimal you can<br /> Accumulate a partial product and save some adding.<br /><br /> 1/3 (decimal) = .010101010101... (binary)<br /><br /> And in the case of 1/3 it repeats bytewise so you<br /> can accumulate a byte's worth of partial product<br /> and then shift by bytes.<br /><br /> so you might eg do a loop that accumulates four<br /> of the partial products from the reciprocal and then<br /> add the high byte of that in, shifted one byte,<br /> to get the answer.<br /><br /> you'd generate number x .10101010<br /> then shift that by a byte and add it in to get<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.10101010<br />&nbsp;+ .000000001010101<br /><br />&nbsp;= .101010101010101<br /></div><br /> and if you're only doing 16 bits accuracy, you only need<br /> to add in the high byte (shifted by one byte)<br /><br /> some code (like I said, untested)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; A contains the number to be divided<br /><br />&nbsp;; enter with<br />&nbsp;; A containing the hi byte of the number to be divided by 3<br />&nbsp;; Y containing the lo byte of the number to be divided by 3 <br /><br />&nbsp;; the hi byte of the partial product is kept in A or saved<br />&nbsp;; on the stack when neccessary<br /><br /><br />&nbsp;; save the number in lo_temp, hi_temp<br /><br />&nbsp;sty lo_temp<br />&nbsp;sty lo_product<br />&nbsp;sta hi_temp<br /><br />&nbsp;ldy #$03<br />&nbsp;clc<br /><br />&nbsp;; each pass of the loop divides the partial product by 4<br />&nbsp;; and then adds number in lo_temp, hi_temp to that<br /><br />LOOP<br />&nbsp;ror<br />&nbsp;ror lo_product<br />&nbsp;lsr<br />&nbsp;ror lo_product<br />&nbsp;pha<br />&nbsp;lda lo_product<br />&nbsp;adc lo_temp<br />&nbsp;sta lo_product<br />&nbsp;pla<br />&nbsp;adc hi_temp<br />&nbsp;dey<br />&nbsp;bne LOOP<br /><br />&nbsp;; C,A and lo_product should now contain 1.010101 x number<br /><br />&nbsp;ror&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; get the high bit of the partial product<br />&nbsp;ror lo_product&nbsp; &nbsp; ; from C in to A so that A, lo_product now<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; contain .1010101 x number<br />&nbsp;pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; save the hi byte of the partial product<br />&nbsp;adc lo_product&nbsp; &nbsp; ; and add it back in shifted by one byte<br />&nbsp;sta lo_product<br />&nbsp;pla<br />&nbsp;adc #$00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; propagate the carry from the lo byte<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; A, lo_product now contain<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; .101010101010101 x number <br />&nbsp;lsr<br />&nbsp;ror lo_product<br /></div>
<br />
<br />
<br />edit: fixed the wrong way shifts jeez what a mistake to make!
<br />
<br />edit: too many passes through the loop

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 11, 2011 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />After you multiply by the reciprocal, you'll need to multiply the result by 3 to make sure that the remainder is 0, 1, or 2. Both multiplying by $55/$100 and multiplying by $56/$100 produce results that aren't exactly equal to x/3 in some cases. But luckily, multiplying by 3 to check one's work is easy (x + (x &lt;&lt; 1)), so an exact division would look like this Python code:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">def divide_by_3&#40;dividend&#41;:<br />&nbsp; &nbsp; quotient = dividend * 0x55 // 0x100<br />&nbsp; &nbsp; product = quotient + &#40;quotient &lt;&lt; 1&#41;<br />&nbsp; &nbsp; if dividend - product &gt;= 3:<br />&nbsp; &nbsp; &nbsp; &nbsp; quotient += 1<br />&nbsp; &nbsp; return quotient</div>
<br />I did the same routine of multiply by reciprocal, multiply, and correct when dividing by 10 in a text formatting routine on the Game Boy Advance, which has hardware mul but lacks hardware div.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Fri Feb 11, 2011 2:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">After you multiply by the reciprocal, you'll need to multiply the result by 3 to make sure that the remainder is 0, 1, or 2. Both multiplying by $55/$100 and multiplying by $56/$100 produce</div>
<br />
<br />That was my point about keeping enough accuracy in the partial product.
<br />And maybe I confused things by using the term "partial product"
<br />inconsistently.
<br />
<br />Also I was a bit glib especially considering that the code does rounding
<br />in the midst of the computations.
<br />
<br />To put it in your terms (if I understand you) I was saying you need do
<br />at least $155/$400 but you should be able to do it with single byte math
<br />by defering the divsion as long as possible and keeping as much accuracy
<br />in the partial products as possible (and the rounding should help <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />  )
<br />
<br />
<br />And speaking of the remainder, if you need the remainder, maybe
<br />using division by reciprocal multiplication wont be the best way.
<br />
<br />edit: fixed the fraction after I goofed the conversion really good
<br />       ie $CC/$400 should have been $155/$400  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bogax</b> [ Sat Feb 19, 2011 11:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's some code that seems to work.
<br />You don't get a remainder.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; divide 16 bit number by 3 by multiplying by 1/3<br />&nbsp;; enter with <br />&nbsp;; A containing the hi byte of the number to be divided by 3 <br />&nbsp;; Y containing the lo byte of the number to be divided by 3 <br />&nbsp;; the hi byte of the partial product is kept in A or saved <br />&nbsp;; on the stack when neccessary <br />&nbsp;; the product &#40;N/3 quotient&#41; is returned hi byte in A,<br />&nbsp;; lo byte in Y<br /><br /><br />&nbsp;; save the number in lo_temp, hi_temp <br /><br />&nbsp;sty lo_temp <br />&nbsp;sty lo_product <br />&nbsp;sta hi_temp <br /><br />&nbsp;ldy #$09 <br />&nbsp;clc <br />&nbsp;bcc ENTER<br /><br />&nbsp;; each pass through loop adds the number in<br />&nbsp;; lo_temp, hi_temp to the partial product and<br />&nbsp;; then divides the partial product by 4 <br /><br />LOOP <br />&nbsp;pha <br />&nbsp;lda lo_product <br />&nbsp;adc lo_temp <br />&nbsp;sta lo_product <br />&nbsp;pla <br />&nbsp;adc hi_temp <br />ENTER<br />&nbsp;ror <br />&nbsp;ror lo_product <br />&nbsp;lsr <br />&nbsp;ror lo_product <br />&nbsp;dey <br />&nbsp;bne LOOP <br />&nbsp;ldy lo_product<br />&nbsp;rts<br /></div><br /><br />Here's a couple that do 8 bits one looped, one unrolled.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; enter with number to be divided in A<br />&nbsp;; answer returned in A<br /><br />&nbsp;sta temp<br />&nbsp;ldx #$04<br />&nbsp;lsr<br />&nbsp;lsr<br />LOOP<br />&nbsp;adc temp<br />&nbsp;ror<br />&nbsp;lsr<br />&nbsp;dex<br />&nbsp;bne LOOP<br />&nbsp;rts<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;; enter with number to be divided in A<br />&nbsp;; answer returned in A<br /><br />&nbsp;sta temp<br />&nbsp;lsr<br />&nbsp;lsr<br />&nbsp;adc temp<br />&nbsp;ror<br />&nbsp;lsr<br />&nbsp;adc temp<br />&nbsp;ror<br />&nbsp;lsr<br />&nbsp;adc temp<br />&nbsp;ror<br />&nbsp;lsr<br />&nbsp;adc temp<br />&nbsp;ror<br />&nbsp;lsr<br />&nbsp;rts<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>clueless</b> [ Sun Feb 20, 2011 12:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Awesome.  I don't need this right now, but I might in the future.  May I kindly suggest adding this to the wiki (or ask Tepples to do it)?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>