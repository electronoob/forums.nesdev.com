<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=7868" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-06-20T00:39:32-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=7868</id>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2011-06-20T00:39:32-07:00</updated>
<published>2011-06-20T00:39:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80235#p80235</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80235#p80235"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80235#p80235"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />It makes sense because there is a lot more decoding in this design than on the NES (single '139). After the '139 there is ~250 ns before Phi2 ends. Carts can get away with even slower ROMs since A0-A14 may be decoded way before Phi2 even starts. Maybe there aren't NES carts out there with ROMs that slow, but there are FC carts that are.<br /></div>BootGod's DB only knows of <a href="http://bootgod.dyndns.org:7777/profile.php?id=3284" class="postlink">one</a>.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />80 ns for 4x gate propagation (to make /ROMSEL in the design)<br />20 ns for '154 + 20 ns for '245<br /></div> The latter happens in parallel with the former, irrelevant<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />??? for the ISA bus state decoder<br /></div> 35ns. Except that it's stable a whole cycle before the read happens anyway. Looking at a pdf for the 82c88 it looks like the 8086 also has  a substantial address stable time before nRD. (address valid starting at second half of T1, nRD asserted at start of T2, data valid by end of T3)<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />??? for 8086 hold times<br /></div> 10ns. Which is the same as the 2MHz R6502<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The address bus *is* stable the entirety of Phi2, and most of Phi1. It's not an interpretation. The are carts with at least 250 ns ROMs so it's not far fetched.<br /></div> The <strong>interpretation</strong> is only a question of how long of a setup time the ROM needs. But NES ROMs don't have latches, so they don't have a setup time. Looking at a 300ns (m27128a) rom datasheet it only has a nCE-or-address→data time of 300ns and a nOE→data time of 120ns<br /><br />But all of this is irrelevant, because if it doesn't work because it's too fast, all he has to do is had a little more logic to add wait states.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Mon Jun 20, 2011 12:39 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-06-19T23:26:20-07:00</updated>
<published>2011-06-19T23:26:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80224#p80224</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80224#p80224"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80224#p80224"><![CDATA[
It makes sense because there is a lot more decoding in this design than on the NES (single '139). After the '139 there is ~250 ns before Phi2 ends. Carts can get away with even slower ROMs since A0-A14 may be decoded way before Phi2 even starts. Maybe there aren't NES carts out there with ROMs that slow, but there are FC carts that are.<br /><br />Also the PPU has a lot longer than 186 ns to decode because it uses a transparent latch. It may have up to ((1/5.37 MHz) * 2) - 30 ns == ~340 ns.<br /><br /><br />419 ns could be an issue with<br /><br />250 ns  propagation (boards that /CE with /ROMSEL)<br />80 ns for 4x gate propagation (to make /ROMSEL in the design)<br />20 ns for '154<br />20 ns for '245<br />??? for the ISA bus state decoder<br />??? for 8086 hold times<br /><br />--<br /><br />The address bus *is* stable the entirety of Phi2, and most of Phi1. It's not an interpretation. The are carts with at least 250 ns ROMs so it's not far fetched.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Jun 19, 2011 11:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2011-06-19T19:40:22-07:00</updated>
<published>2011-06-19T19:40:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80197#p80197</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80197#p80197"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80197#p80197"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />If the bus is strobed for two cycles (419 ns) it still might not work since I forgot some things:<br /></div>That doesn't make sense... the NES itself supports no waitstates. From nROMSEL to data valid must be less than 279ns; from PPU nRD to data valid similarly must be less than 186ns.<br /><br />The absolutely most paranoid interpretation of timing would require the cpu address bus to be stable for the entirety of φ1 and φ2 to load prgrom (558ns), and for the ppu address bus to be stable for the entire ALE and nRD cycles (372ns minus the latching time of 74x373). But I can say confidently that I've never seen anything so braindead that it requires a setup time as slow as its access time.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Sun Jun 19, 2011 7:40 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-06-19T17:20:14-07:00</updated>
<published>2011-06-19T17:20:14-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80185#p80185</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80185#p80185"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80185#p80185"><![CDATA[
I know that under normal conditions there wouldn't be any issues due to ample address decoding time, but since the 2 cycle read strobe is being used for NES address decoding via /ROMSEL it counts.<br /><br />The PC doesn't have a built-in programmable wait-state controller does it? I didn't say ISA wasn't possible, just that the design probably wouldn't work. Hell you could make a PCI-E x16 card with wait states :P<br /><br />I'd argue that a ISA card to begin with isn't simple or cheap for most people due to materials and availability, but I think you'd have to agree that adding wait state logic pushes it from being practical for even a retro computer collector to a novelty design when instead you could just use a couple i8255 + address decoder and end up with a more capable device*. Something like this: <!-- m --><a class="postlink" href="http://enes.emunova.net/en/infos/dumper.htm">http://enes.emunova.net/en/infos/dumper.htm</a><!-- m --><br /><br />*with every I/O fully programmable you could reverse engineer carts, handle PPU /A13 and detect mirroring<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Jun 19, 2011 5:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[person]]></name></author>
<updated>2011-06-19T15:55:22-07:00</updated>
<published>2011-06-19T15:55:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80180#p80180</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80180#p80180"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80180#p80180"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />If the bus is strobed for two cycles (419 ns) it's still might not work since I forgot some things: <br /><br />-the bus itself has decoding to make the strobes. They are probably implemented by a 74LS32 (~20 ns)<br /><br />-the '245 and '154 adds 40+ ns to the "setup" requirements<br /></div><br /><br />In the XT, the controll-signals for the bus comes directly out of the Intel 8288 Bus-controller, where the address is latched by a set of 74LS373 latches. The 4-clock bus-cycle is controlled by the CPU itself, causing minimal intermission between the clocks.<br /><br />The latching of the address is done during the first clock. Then the control signals are set and the bus is allowed half a clock of setting time (tristating), then any device has an additional one and a half clock + waitstates to provide data. Data is read by the CPU on the initial falling edge of the final clock. The rest of the final clock is used to reset the control signals for a new bus-cycle.<br /><br />There is absolutely no custom logic between the 8288 bus controller and the bus.<br /><br />All in all, if it still doesn't work in a worst-case scenario, then up to 10 waitstates may be added. That's more than 2uS. You'll have to go back to the 60's or early 70's to find <strong><em>that</em></strong> slow memory.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4904">person</a> — Sun Jun 19, 2011 3:55 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-06-19T15:34:57-07:00</updated>
<published>2011-06-19T15:34:57-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80179#p80179</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80179#p80179"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80179#p80179"><![CDATA[
If the bus is strobed for two cycles (419 ns) it's still might not work since I forgot some things: <br /><br />-the bus itself has decoding to make the strobes. They are probably implemented by a 74LS32 (~20 ns)<br /><br />-the '245 and '154 adds 40+ ns to the "setup" requirements<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Jun 19, 2011 3:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[person]]></name></author>
<updated>2011-06-19T15:11:59-07:00</updated>
<published>2011-06-19T15:11:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80178#p80178</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80178#p80178"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80178#p80178"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />Better underclock it to 3.58 MHz lol<br /></div><br />Remember that those old CPU's don't do 1-cycle-per-operation like todays CPUs. For an IBM XT with an 8088, a full bus-cycle takes 4 clocks, where two are provided for actual memory access. Even some of the BIOS chips supplied by IBM are 400ns!<br /><br />Eventually, you allways have the "IO CH RDY" line which can add waitstates manually.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4904">person</a> — Sun Jun 19, 2011 3:11 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-06-19T15:07:10-07:00</updated>
<published>2011-06-19T15:07:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80177#p80177</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80177#p80177"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80177#p80177"><![CDATA[
Better underclock it to 3.58 MHz lol<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Jun 19, 2011 3:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[person]]></name></author>
<updated>2011-06-19T14:59:33-07:00</updated>
<published>2011-06-19T14:59:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80175#p80175</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80175#p80175"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80175#p80175"><![CDATA[
<div class="quotetitle">kyuusaku wrote:</div><div class="quotecontent"><br />Unless you're on a 4.77 MHz PC/XT I think it WILL be a problem for ROM reads. <br /><br />It looks like ISA holds the read strobe for 1.5 (8-8.33 MHz) clock periods. Best case that's 188ns. Then you have to take into account your decoding which at 4 gates deep is 40-80ns, so subtract that and a few more ns (maybe 10) for ISA hold time.<br /><br />Then realize that carts will have up to 100 ns of decoding on top of 200 ns ROMs.<br /></div><br />Fortunately I do have a 4.77MHz XT available. Actually I have two, plus a clone (as I mentioned, I am a vintage computer enthusiast  <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=":wink:" title="Wink" />  ).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4904">person</a> — Sun Jun 19, 2011 2:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-06-19T15:05:14-07:00</updated>
<published>2011-06-19T14:54:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80174#p80174</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80174#p80174"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80174#p80174"><![CDATA[
It looks like ISA holds the read strobe for 1.5 clock periods. Best case that's 188ns on an 8 MHz bus. Then you have to take into account your decoding which at 4 gates deep is 40-80ns, so subtract that and a few more ns (maybe 10) for ISA hold time. Even if you improved the decoding you still only have ~150 ns best case on an 8 MHz ISA. <br /><br />NES carts will have up to 100 ns of decoding on top of 200 ns ROMs.<br /><br />I'm not sure even <strong>4.77 MHz</strong> will work. To be safe we could call your decoding and worst case cart propagation 400ns. 1 / (400 ns / 1.5) = a maximum clock speed of 3.75 MHz.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sun Jun 19, 2011 2:54 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[person]]></name></author>
<updated>2011-06-19T10:25:12-07:00</updated>
<published>2011-06-19T10:25:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80140#p80140</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80140#p80140"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80140#p80140"><![CDATA[
I know about the various mappers, so that shouldn't be a problem.<br /><br />Also, I don't expect the mapper-chipsets to be extremely timing-sensitive (TTL chips can take anything from single-stepping to about 25MHz). ROM chips can also tackle any bus speed up to their maximum specification, which in most cases includes the ISA bus speed, so that's not a problem either.<br /><br />As of the "forged" Ø2 signal, I see the problem, and I guess it will work if I mask it with the /CS signal then.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A15   A14   /WE   /RD   /CE   |   PRG R /W   Ø2   PRG ROM /CE   CHR /RD <br /> 0     0     0     0     0    |      0       1         1           0      Invalid <br /> 0     0     0     1     0    |      0       1         1           1      Dummy Write &#40;No operation&#41; <br /> 0     0     1     0     0    |      1       1         1           0      Read CHR <br /> 0     0     1     1     0    |      1       0         1           1      No operation <br /> X     1     0     0     0    |      0       1         1           1      Invalid <br /> X     1     0     1     0    |      0       1         1           1      Mapper Write <br /> X     1     0     1     1    |      0       0         1           1      No operation<br /> X     1     1     0     0    |      1       1         1           1      PRG read <br /> X     1     1     1     0    |      1       0         1           1      No operation<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4904">person</a> — Sun Jun 19, 2011 10:25 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[kyuusaku]]></name></author>
<updated>2011-06-18T11:07:47-07:00</updated>
<published>2011-06-18T11:07:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80089#p80089</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80089#p80089"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=80089#p80089"><![CDATA[
<div class="quotetitle">person wrote:</div><div class="quotecontent"><br />The real question still is that if it is OK to "forge" the Ø2 signal by NAND-ing /RD and /WE.<br /></div><br />Not likely since without further decoding Phi2 and PPU /RD every write on the ISA bus will go to the cart as garbage (really not good with bus conflict carts). Also ISA accesses are/can be 4x faster than the CPU or PPU so that's a problem too.<br /><br />I had the same idea as you, but I went with the parallel port. If you want REALLY cheap you only need two '393 counters. The control port can do all the decoding. Since there aren't enough outputs for counter reset the counter state can be determined by hooking A14 back to a status input. This method also gives you access to VRAM A10, VRAM /CE and /IRQ (though VRAM /CE isn't necessarily of use without an inverter for PPU /A13).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=20">kyuusaku</a> — Sat Jun 18, 2011 11:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-06-17T06:00:34-07:00</updated>
<published>2011-06-17T06:00:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79987#p79987</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79987#p79987"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79987#p79987"><![CDATA[
The CHR address space is 8KB. Carts have contained up to 512 KB of CHR-ROM that I know of, with bank switching normally occurring by write cycles to the CPU address space above $401f. However, some games (like Punch Out! and I think a Dragon Quest game or two) bank swap CHR-ROM based on read cycles to the PPU address space.<br /><br />If you like assembly you can also code the Arduino in AVR assembly. You just have to use a different makefile.<br /><br />As for not wanting to learn another assembler, you're going to need to understand at least the basics of the 2A03 used in the NES and have a much better understanding of the various mapper hardware used for this project to work out for you.<br /><br />Here is some recommended reading:<br /><a href="http://en.wikipedia.org/wiki/MOS_Technology_6502" class="postlink">MOS 6502 (Wikipedia)</a><br /><a href="http://wiki.nesdev.com/w/index.php/2A03" class="postlink">2A03 CPU</a><br /><a href="http://wiki.nesdev.com/w/index.php/MMC" class="postlink">Mappers</a><br /><br />Supplemental reading:<br /><a href="http://wiki.nesdev.com/w/index.php/CPU" class="postlink">NES CPU Details</a><br /><a href="http://wiki.nesdev.com/w/index.php/PPU" class="postlink">NES PPU Details</a><br /><br />Reference material:<br /><a href="http://www.obelisk.demon.co.uk/6502/reference.html#BNE" class="postlink">6502 Instruction Set</a><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Fri Jun 17, 2011 6:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[person]]></name></author>
<updated>2011-06-17T04:18:44-07:00</updated>
<published>2011-06-17T04:18:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79984#p79984</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79984#p79984"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79984#p79984"><![CDATA[
I have now reworked the schematics to contain parts that I actually have (except the 72-pin edge connecror and an ISA prototype card, both which can be gotten relatively cheap): <!-- m --><a class="postlink" href="http://oldibmpc.sitesled.com/misc/NESadapter2.GIF">http://oldibmpc.sitesled.com/misc/NESadapter2.GIF</a><!-- m --><br /><br />The entire design will have a total of 4 ICs (one 74LS04, one 74LS08, one 74LS32 and one 74LS154), and can be configured to anywhere in the base 1MB of the targer PC's memory.<br /><br />The real question still is that if it is OK to "forge" the Ø2 signal by NAND-ing /RD and /WE.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4904">person</a> — Fri Jun 17, 2011 4:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[person]]></name></author>
<updated>2011-06-17T02:59:46-07:00</updated>
<published>2011-06-17T02:59:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79980#p79980</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79980#p79980"/>
<title type="html"><![CDATA[Simple/cheap EEPROM-style NES cartridge interface.]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7868&amp;p=79980#p79980"><![CDATA[
Original schematics has been updated. Now it limits the CHR area to the lower 16KB instead of the lower 32KB, and the upper 48KB should work just like it does on a real NES when accessed.<br /><br />I also added a XOR-OR based comparator for the addres decoder if the design is to be put on an ISA card. It would also be possible to use a 4-bit demultiplexer with a 16*2 pin-connector and a jumper, however 4-bit demultiplexers are not as common as theit 3-bit counterparts.<br /><br />I do not have any kind of flashcartridge, and I don't want to sacrifice one of my games, so the bootloader solution is at the moment out of question.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4904">person</a> — Fri Jun 17, 2011 2:59 am</p><hr />
]]></content>
</entry>
</feed>