<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=12&amp;t=12083" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-12-02T17:01:12-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=12&amp;t=12083</id>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2014-12-02T17:01:12-07:00</updated>
<published>2014-12-02T17:01:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137242#p137242</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137242#p137242"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137242#p137242"><![CDATA[
[*facepalm*]<br /><br />That would explain it nicely.  Especially since the <em>only</em> part of the entire interrupt routine that touches B is the direct page reset, which is what I had originally removed to fix the problem.<br /><br />Rewriting the IRQ intro and outro as recommended results in a working code, with or without the extra <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$00</tt> or a string of between one and five <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nop</tt>s.  Looks good.  Feels good.<br /><br />Thanks!<br /><br />...<br /><br />Is there anything important about the order of the stack operations?  I mean, other than having to pull in reverse order to the pushes?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Tue Dec 02, 2014 5:01 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ARM9]]></name></author>
<updated>2014-12-02T04:50:55-07:00</updated>
<published>2014-12-02T04:50:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137217#p137217</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137217#p137217"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137217#p137217"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />what might be going wrong (the bug doesn't affect the IRQ; it results in a subroutine the IRQ is interrupting occasionally getting a calculation wrong), please speak up...<br /></div><br />One thing that comes to mind is that your irq is nuking the high byte of the accumulator. If an irq were to be raised when the accumulator is 8 bit and the hidden high byte contains data, it'll contain garbage once the interrupt returns, since you're only pushing the low byte in the irq prologue. The same goes for x/y too, although that's less common.<br />Here's how I would do it:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">irqHandler:<br /> rep #$30 ; always preserve the full 16 bits of a/x/y registers<br /> pha<br /> phx<br /> phy<br /> phb<br /> phd<br /> ...<br /> rep #$30<br /> pld<br /> plb<br /> ply<br /> plx<br /> pla<br /> rti ; irq preserves the psr on 65816, hence we don't have to php/plp with this approach<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6115">ARM9</a> — Tue Dec 02, 2014 4:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2014-12-01T00:59:04-07:00</updated>
<published>2014-12-01T00:59:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137141#p137141</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137141#p137141"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137141#p137141"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">That line is what forced blank looks like.  You wouldn't have time to rearrange much of OAM during HBlank even if you did turn off rendering during it; a full OAM update takes more than three scanlines of pure DMA.  And Mario Kart might have other things to do between the two screens besides the OAM update.  So it blanks the display for several scanlines to get it all done.<br /></div><br />Doesn't that mean you could actually force blank 1/4 of OAM on one line and there wouldn't be any graphical side effects, Or would the line still be messed up? Or will it still be messed up because it can't &quot;pre fetch&quot; or whatever? It might be worth it to have 4 lines of messed up sprites if it means you could push twice the amount of sprites on screen. (it would probably look better if there were four spread out lines)</div><br />I don't think you're getting this.  Force blank isn't something you do to OAM.  It means <em>turning the screen off</em>.  The fact that you can access OAM while the screen is off is a side effect.  And since OAM is 544 bytes and DMA is only 1324 bits per scanline, you'd need to turn the screen off completely for more than three scanlines to update all of OAM in one shot.  Those scanlines would be black, not because of the OAM refresh but because you turned off the screen.<br /><br />While the screen is off, the PPU isn't keeping track of what it would otherwise be doing.  This means that if you turn the screen on partway through the active display portion of a frame, it takes a while for the PPU to figure out what's going on.  In the case of BG layers, it's a few tiles.  In the case of sprites, it's a whole line.  So the line <em>under</em> the black area would (we think) have no sprites, or glitched sprites.  (Unless you set the screen to zero brightness for the duration of that line, in which case it too would be black.)<br /><br />So in your example, you'd get one black scanline (during which you can do a partial OAM update), probably followed by one line with sprites absent or not working properly, and then the picture would work normally for subsequent scanlines.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">I'm pretty sure BG layers work fine a few tiles after force blank is turned off, so as long as you disable force blank early enough after HBlank starts, the next scanline's BG layers should work normally.  At least, I've done it with a single 8bpp layer in mode 3.  It's only sprites that need extensive preprocessing.<br /></div><br />Do you mind showing me what you wrote?  <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  I'm not completely sure how to set it up.</div><br />I don't really mind, but be aware that there may be a vulnerability in it, so you shouldn't slavishly copy what I've done...  I was using force blank to extend VBlank, and using the IRQ as a substitute for NMI (since you can't change when NMI triggers).  Here's the relevant part of my code:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.ENUM $10<br />disp        db         ; screen brightness; can be given to $2100 to turn the screen on<br />end_vblank  db         ; IRQ toggle flag<br />.ENDE</div><div class="codetitle"><b>Code:</b></div><div class="codecontent">   ldx #$00B0          ; dot number for interrupt<br />   stx $4207           ; set H-timer<br />   ldx #$00DC          ; scanline number for interrupt<br />   stx $4209           ; set V-timer<br />   stz end_vblank      ; initialize IRQ switch</div><div class="codetitle"><b>Code:</b></div><div class="codecontent">   lda #$31            ; enable IRQ and controller autopoll<br />   sta $4200</div><div class="codetitle"><b>Code:</b></div><div class="codecontent">Interrupt:<br />   phb<br />   pha<br />   phx<br />   phy<br />   phd<br />   php<br /><br />   rep #$30            ; all 16-bit<br />   lda #$0000.w        ; reset direct page<br />   tcd<br />   sep #$20            ; mem/A = 8 bit<br />   lda #$00            ; ...but A should already be zero...<br />   pha<br />   plb                 ; reset data bank<br /><br />   lda end_vblank<br />   beq begin_vblank<br />   ldx #$00B0          ; dot number for interrupt<br />   stx $4207           ; set H-timer<br />   ldx #$00DC          ; scanline number for interrupt<br />   stx $4209           ; set V-timer<br />   stz end_vblank      ; toggle IRQ<br />   lda disp            ; turn the screen back on (brightness stored in RAM)<br />   sta $2100<br />   jmp end_interrupt<br /><br />begin_vblank:<br />   lda #$80            ; turn the screen off<br />   sta $2100<br />   ldx #$0090          ; dot number for interrupt<br />   stx $4207           ; set H-timer<br />   ldx #$0004          ; scanline number for interrupt<br />   stx $4209           ; set V-timer<br />   inc end_vblank      ; toggle IRQ<br /><br />   ; VBLANK CODE GOES HERE<br /><br />end_interrupt:<br />   lda $4211           ; clear interrupt flag<br /><br />   plp<br />   pld <br />   ply <br />   plx <br />   pla <br />   plb <br /><br />   rti</div><br /><br /><strong>PLEASE NOTE</strong> that there is a sporadic timing-sensitive bug hiding somewhere in the program I took this from, and removing the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$00</tt> from the direct page and data bank reset code near the top of the IRQ triggers the bug.  (Actually, I can replace the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$00</tt> with two <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">nop</tt>s and it will still work, which is very odd as with the <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$00</tt> there I can delete both <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$0000.w</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">tcd</tt> and it will <em>still</em> work...)  I am not a guru; use my code with caution.<br /><br />Better yet, don't use my code at all.  Look at it, figure out what it does, and then write your own.<br /><br />Oh, and if any of the experts on here can tell what might be going wrong (the bug doesn't affect the IRQ; it results in a subroutine the IRQ is interrupting occasionally getting a calculation wrong), please speak up...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Oh yeah, If we ever did pull off this stunt, how would you set it up?<br /></div><br />I haven't really worked it out yet.  The details probably depend on how well it works, if it does (which is looking increasingly unlikely, unless you're willing to accept graphical artifacts).  But you sound like you might be on the right track.<br /><br />As for me, I can't spend a whole lot of time on this right now, because I have a ton of work to do and I'm behind schedule...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Mon Dec 01, 2014 12:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-30T21:00:53-07:00</updated>
<published>2014-11-30T21:00:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137136#p137136</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137136#p137136"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137136#p137136"><![CDATA[
<div class="quotetitle">Shonumi wrote:</div><div class="quotecontent"><br />H-Blank Interval Free has the consequence of reducing the number of cycles available for rendering sprites on a given scanline.<br /></div><br />Without: 5x overdraw<br />With: 4x overdraw<br />(Assumes no rot/scale sprites)<br /><br />Compare to ~1x overdraw for Super NES, Genesis, and TG16<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Nov 30, 2014 9:00 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shonumi]]></name></author>
<updated>2014-11-30T20:47:17-07:00</updated>
<published>2014-11-30T20:47:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137134#p137134</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137134#p137134"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137134#p137134"><![CDATA[
Actually, to my knowledge, on the GBA OAM and OAM VRAM are read-only during scanline rendering* They can only be written to during HBlank, VBlank, or Forced Blank. For HBlank, there is the additional requirement that you flip a certain bit in one of the GBA's display registers (DISPCNT) to allow the H-Blank Interval Free feature. I believe all DMAs to OAM and OAM VRAM require H-Blank Interval Free too. H-Blank Interval Free has the consequence of reducing the number of cycles available for rendering sprites on a given scanline. The maximum number of sprites under H-Blank Interval Free actually depends on a number of other factors based on what types of sprites are used.<br /><br />*EDIT: Actually, I don't even know if that &quot;read-only&quot; bit is true. Current documentation just mentions an &quot;access&quot; to OAM is only available during blanking periods, not necessarily a &quot;read&quot;.<br /><br />Now, I have not written any test ROMs to verify this behavior on my hardware, but nocash and Nintendo's official docs both imply that OAM and OAM VRAM can only be modified at specific blanks. Palette data and BG VRAM are fair game for reading and writing at any given moment, however, if you can bear with the few extra cycles it takes for memory access. Overall though, it's a lot more flexible than the GB or GBC ever were.<br /><br />For reference:<br /><!-- m --><a class="postlink" href="http://problemkaputt.de/gbatek.htm#lcdiodisplaycontrol">http://problemkaputt.de/gbatek.htm#lcdiodisplaycontrol</a><!-- m --><br /><!-- m --><a class="postlink" href="http://problemkaputt.de/gbatek.htm#lcdobjoverview">http://problemkaputt.de/gbatek.htm#lcdobjoverview</a><!-- m --><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6368">Shonumi</a> — Sun Nov 30, 2014 8:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-30T19:25:54-07:00</updated>
<published>2014-11-30T19:25:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137131#p137131</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137131#p137131"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137131#p137131"><![CDATA[
On the GBA, OAM and VRAM are writable even during draw time, like on the TG16 and Genesis. It's how the GBA port of Super Puzzle Fighter II draws its playfields.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Nov 30, 2014 7:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-11-30T17:35:46-07:00</updated>
<published>2014-11-30T17:35:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137127#p137127</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137127#p137127"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137127#p137127"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />That line is what forced blank looks like.  You wouldn't have time to rearrange much of OAM during HBlank even if you did turn off rendering during it; a full OAM update takes more than three scanlines of pure DMA.  And Mario Kart might have other things to do between the two screens besides the OAM update.  So it blanks the display for several scanlines to get it all done.<br /></div><br />Doesn't that mean you could actually force blank 1/4 of OAM on one line and there wouldn't be any graphical side effects, Or would the line still be messed up? Or will it still be messed up because it can't &quot;pre fetch&quot; or whatever? It might be worth it to have 4 lines of messed up sprites if it means you could push twice the amount of sprites on screen. (it would probably look better if there were four spread out lines)<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />I'm pretty sure BG layers work fine a few tiles after force blank is turned off, so as long as you disable force blank early enough after HBlank starts, the next scanline's BG layers should work normally.  At least, I've done it with a single 8bpp layer in mode 3.  It's only sprites that need extensive preprocessing.&quot;]<br /></div><br />Do you mind showing me what you wrote?  <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  I'm not completely sure how to set it up.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />I would recommend <a href="http://wiki.superfamicom.org/snes/show/HomePage" class="postlink">this</a> and <a href="http://problemkaputt.de/fullsnes.htm" class="postlink">this</a> if you find Nintendo's manual hard to work with.  They're much easier to search in, for one thing...<br /></div><br />Thank You!  <img src="http://forums.nesdev.com/images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  I knew about superfamicom.org, but the other website is also very helpful<br /><br />Oh yeah, If we ever did pull off this stunt, how would you set it up? Say if you wanted 256 sprites, would you create another table in ram that replaces the values of the original sprite table as you go down the screen? And how would you transfer 1 sprite from the top off the screen to the bottom? Would you check to see if the sprites y value is greater than where the line is, store the values of that sprite on the other sprite table, and then turn off the sprite on the first sprite table? Doing this with all 128 sprites seems like it would take a lot of time though...<br /><br />Just wondering, do you know how Bullet GBA does it? (if you even know what I'm talking about)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Nov 30, 2014 5:35 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2014-11-30T16:10:04-07:00</updated>
<published>2014-11-30T16:10:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137119#p137119</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137119#p137119"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137119#p137119"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">I suppose if this was causing trouble, you could re-enable the screen early at zero brightness (write $00 to $2100), and then bump it to full brightness ($0F) at the point where you actually wanted it turned on.<br /></div><br />After playing Super Mario Kart again, I actually noticed that there is a thin black line that runs between the two screens, which might actually be there to hide the messed up graphics.</div><br />That line is what forced blank looks like.  You wouldn't have time to rearrange much of OAM during HBlank even if you did turn off rendering during it; a full OAM update takes more than three scanlines of pure DMA.  And Mario Kart might have other things to do between the two screens besides the OAM update.  So it blanks the display for several scanlines to get it all done.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">Now that I think about it, sprites are scanned and cached during the scanline above the one where they're displayed, and I doubt that happens during forced blank, so this may be what SMK is actually doing....<br /></div><br />??? Are you saying that Super Mario Kart uses forced blank, because I thought that had already been determined.</div><br />No, I'm saying that if force blank (which SMK uses) prevents sprite prefetch from happening, <em>maybe</em> there's an extra scanline or so of rendering at zero brightness (write #$00 to $2100) <em>after</em> the blanked area, to allow the sprites to work properly on the top scanline of player 2's screen.  It's not like you could visually tell the difference between (a) 8 scanlines of forced blank and (b) 7 scanlines of forced blank plus one scanline rendered at zero brightness...<br /><br />In other words, a thin line to hide the messed up (or absent) graphics, at the bottom of the thicker line that's actually forced blank in order to let the game write to OAM.<br /><br />Maybe.  I haven't investigated it, and I don't have enough experience to say whether or not it's necessary.<br /><br />I'm pretty sure BG layers work fine a few tiles after force blank is turned off, so as long as you disable force blank early enough after HBlank starts, the next scanline's BG layers should work normally.  At least, I've done it with a single 8bpp layer in mode 3.  It's only sprites that need extensive preprocessing.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Nintendo's docs are a bit of a disaster...<br /></div><br />I would recommend <a href="http://wiki.superfamicom.org/snes/show/HomePage" class="postlink">this</a> and <a href="http://problemkaputt.de/fullsnes.htm" class="postlink">this</a> if you find Nintendo's manual hard to work with.  They're much easier to search in, for one thing...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sun Nov 30, 2014 4:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[psycopathicteen]]></name></author>
<updated>2014-11-30T15:03:36-07:00</updated>
<published>2014-11-30T15:03:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137114#p137114</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137114#p137114"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137114#p137114"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />If you want to hide a sprite, put it at (384, 224).<br /></div><br /><br />When I place sprites off-screen, I don't change the x-coordinates, only the y-coordinates.  You probably know why.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4383">psycopathicteen</a> — Sun Nov 30, 2014 3:03 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-11-30T09:19:34-07:00</updated>
<published>2014-11-30T09:19:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137101#p137101</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137101#p137101"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137101#p137101"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />it looks like your &quot;turn the screen back on&quot; part actually turns it off.<br /></div><br /><br />Oops, my bad...<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />Second, why are you taking your HDMA table values out of WRAM?  Is the table actually in WRAM?<br /></div><br /><br />I'm actually taking it from bank 0 ($00 is bank 0 right?), it's just that I accidentally forgot to change some of the leftover writing I got from another code.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />Also, the first part of your code is in the NMI routine, right?<br /></div><br /><br />The whole thing is.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />I suppose if this was causing trouble, you could re-enable the screen early at zero brightness (write $00 to $2100), and then bump it to full brightness ($0F) at the point where you actually wanted it turned on.<br /></div><br /><br />After playing Super Mario Kart again, I actually noticed that there is a thin black line that runs between the two screens, which might actually be there to hide the messed up graphics.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />Now that I think about it, sprites are scanned and cached during the scanline above the one where they're displayed, and I doubt that happens during forced blank, so this may be what SMK is actually doing....<br /></div><br /><br />??? Are you saying that Super Mario Kart uses forced blank, because I thought that had already been determined.<br /><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />...maybe I should back off and let an actual expert handle this...<br /></div><br /><br />Some help is better than none! But seriously, where's byu when you need him?  <img src="http://forums.nesdev.com/images/smilies/icon_rolleyes.gif" alt=":roll:" title="Rolling Eyes" /> It would have been extremely helpful if he bothered to figure out Uniracers... Oh, didn't byu actually say that writing to OAM during h-blank will send your values to where the PPU was last working? would it be possible to somehow align it or something to where it goes to the right place based on the rest of your code or something? Or did he say that it is only possible to write to high OAM during h-blank? I'm kind off starting to eliminate using forced blank if it's going to output messed up graphics. (didn't someone say it actually messes up BG tiles?)<br /><br /><div class="quotetitle">Sik wrote:</div><div class="quotecontent"><br /><div class="quotetitle">93143 wrote:</div><div class="quotecontent">...except when the sprite is at $0100 exactly, in which case <em>all</em> of its tiles count towards the tile limit.  Basically, never put a sprite at X=256, especially a big one; no good can come of it.<br /></div><br />So <em>that</em> is why the Nintendo documentation says to never allow a sprite at those coordinates no matter what (though sadly they never explain the reason).</div><br /><br />Nintendo's docs are a bit of a disaster...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sun Nov 30, 2014 9:19 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Sik]]></name></author>
<updated>2014-11-30T06:55:53-07:00</updated>
<published>2014-11-30T06:55:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137098#p137098</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137098#p137098"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137098#p137098"><![CDATA[
<div class="quotetitle">93143 wrote:</div><div class="quotecontent"><br />...except when the sprite is at $0100 exactly, in which case <em>all</em> of its tiles count towards the tile limit.  Basically, never put a sprite at X=256, especially a big one; no good can come of it.<br /></div><br />So <em>that</em> is why the Nintendo documentation says to never allow a sprite at those coordinates no matter what (though sadly they never explain the reason). Huh, I wonder what they had screwed up in the process. I guess it can still help if you need to do sprite clipping though (nowhere near as easy as Sega's own screw-up though where a single sprite would clip every single one after... later they tried to claim that bug was a feature =P).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4526">Sik</a> — Sun Nov 30, 2014 6:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[93143]]></name></author>
<updated>2014-11-29T23:50:37-07:00</updated>
<published>2014-11-29T23:50:37-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137084#p137084</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137084#p137084"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137084#p137084"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />LDA #$80<br />STA $2100 ; Turn the screen back on<br /><br />STZ $420C<br />LDA #$00<br />STA $4310 ; CPU -&gt; PPU, auto increment, write 1 reg, $2100<br />LDA #$00<br />STA $4311<br />LDY #ForceBlankTable<br />STY $4312 ; source offset<br />LDA #$00<br />STA $4314 ; bank address = $7E (work RAM)<br />LDA #$02<br />STA $420C ;start HDMA transfer<br /><br />Later...<br /><br />ForceBlankTable:<br />.DB $60,$80 ; Turns off the screen after line $60<br />.DB 0<br /></div><br />Two things:  first, it looks like your &quot;turn the screen back on&quot; part actually turns it off.  You have to write $0 (or something less than $8) to the high nibble, and something nonzero to the low nibble because that's what controls the screen brightness - if you want full brightness, as is probable, you should write $0F to $2100 to turn the screen on.<br /><br />Second, why are you taking your HDMA table values out of WRAM?  Is the table actually in WRAM?<br /><br />Also, the first part of your code is in the NMI routine, right?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Regarding updating everything while the screen is off, how do you arrange everything? Would you put the part that gets updated in force blank between where you turn the screen off and where you turn the screen on?<br /></div><br />Generally you'd use an IRQ.  HDMA isn't so useful for this in most cases, because it's not synchronized with the main code.  You'd need to be writing raster-aligned cycle-timed code to fit ordinary processing or general-purpose DMA in between two specific scanlines, and that's a very advanced programming technique; I can't help you with such a thing...<br /><br />But with an IRQ, you have a whole separate chunk of code that's guaranteed to run at a certain position on the screen, so you can turn off the display, do whatever needs to be done, and then turn it back on.<br /><br />You can even have the IRQ fire at different times to do different things; the IRQ code itself can change the settings for when it's supposed to fire ($4200 and $4207-420A), and change a variable in RAM or something each time, so it can check that variable at the start and branch to the appropriate task.  This can be useful even in a basic case like the Mario Kart split screen, if you can't guarantee that your IRQ code will take exactly the right amount of time - rather than cycle counting with NOPs or polling the H/V counters, just repurpose the IRQ to turn the screen back on (and then un-hijack it again so it works properly during the next frame, obviously).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, about graphics being messed up after force blanking mid screen, How is Super Mario Kart able to transfer sprite Data using force blank then? I don't see any abnormalities with the graphics.<br /></div><br />That's only for the same scanline.  I assume Mario Kart re-enables rendering soon enough after the end of the last blank scanline that the next scanline works fine.<br /><br />I suppose if this was causing trouble, you could re-enable the screen early at zero brightness (write $00 to $2100), and then bump it to full brightness ($0F) at the point where you actually wanted it turned on.  Now that I think about it, sprites are scanned and cached during the scanline above the one where they're displayed, and I doubt that happens during forced blank, so this may be what SMK is actually doing...<br /><br />...maybe I should back off and let an actual expert handle this...<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Lastly, are pixels from a sprite that are off screen count toward the limit?<br /></div><br />No.  If all parts of a sprite are off screen, it doesn't count towards the 32-sprite limit, and if a tile is off screen it doesn't count towards the 34-tile limit.<br /><br />...except when the sprite is at $0100 exactly, in which case <em>all</em> of its tiles count towards the tile limit.  Basically, never put a sprite at X=256, especially a big one; no good can come of it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6595">93143</a> — Sat Nov 29, 2014 11:50 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-29T23:47:13-07:00</updated>
<published>2014-11-29T23:47:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137083#p137083</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137083#p137083"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137083#p137083"><![CDATA[
<div class="quotetitle">Espozo wrote:</div><div class="quotecontent"><br />I know that the SNES has 272 sprite pixels per scan line<br /></div><br />Which equals 34 8x1 pixel slivers. It takes two dots during hblank to fetch each sliver.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />but what counts as a sprite pixel? Does the whole width of the sprite count toward the sprite pixel per scan line<br /></div><br />Yes. The PPU doesn't know that part of the width is unused until it has spent time fetching all slivers in the width.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Also, do color 0 pixels count toward the sprite pixel per scan line limit in those tiles?<br /></div><br />Yes. The PPU doesn't know that the pixels in a sliver are color 0 until it has spent time fetching the sliver.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Lastly, are pixels from a sprite that is partially off screen count toward the limit?<br /></div><br />Apparently so, as long as -w &lt;= x &lt;= 256. (Yes, that's &lt;= and not the more efficient &lt; because Nintendo was lazy.) If you want to hide a sprite, put it at (384, 224).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Nov 29, 2014 11:47 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Espozo]]></name></author>
<updated>2014-11-29T23:26:26-07:00</updated>
<published>2014-11-29T23:26:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137081#p137081</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137081#p137081"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137081#p137081"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />So you won't get any sprites on the line after the horizontal blanking period in which you forced blanking.<br /></div><br /><br />Will you get sprites on consecutive lines though? Oh, When you were talking about 32 sprites per scan line and everything like that, it reminded me of a question I was eventually going to ask. I know that the SNES has 272 sprite pixels per scan line, but what counts as a sprite pixel? Does the whole width of the sprite count toward the sprite pixel per scan line, or just any tile with information on it? E.g. an 8x8 bullet tile in a 16x16 sprite. Also, do color 0 pixels count toward the sprite pixel per scan line limit in those tiles? Lastly, are pixels from a sprite that is partially off screen count toward the limit?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6683">Espozo</a> — Sat Nov 29, 2014 11:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-29T23:00:33-07:00</updated>
<published>2014-11-29T23:00:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137080#p137080</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137080#p137080"/>
<title type="html"><![CDATA[Re: HDMA Sprite demo not working...]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12083&amp;p=137080#p137080"><![CDATA[
The NES PPU fetches sprite patterns during horizontal blanking. Based on what I know about the Super NES's background fetch pattern, as well as the difference between the 32 sprite and 34 sliver limits, it's overwhelmingly likely that the Super NES PPU does likewise. So you won't get any sprites on the line after the horizontal blanking period in which you forced blanking.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Nov 29, 2014 11:00 pm</p><hr />
]]></content>
</entry>
</feed>