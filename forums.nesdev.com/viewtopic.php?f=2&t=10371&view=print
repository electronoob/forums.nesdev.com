<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Eighth - a Forth for NES dev (formerly Bytecode Interpreter)</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Eighth - a Forth for NES dev (formerly Bytecode Interpreter)</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10371">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10371</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Mon Aug 12, 2013 9:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Eighth - a Forth for NES dev (formerly Bytecode Interpreter)</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So I've been developing a bytecode interpreter for the NES to solve a few problems.  I'm using it to do r&amp;d.  Here's why I did it:<br />  <br />1) 6502 is hard - too hard to try out ideas on or get something running quickly.<br /><br />2) C is not much easier and not space-efficient at all.<br /><br />3) NES has tight storage, so space-maximizing measures are advantageous<br /><br />I'd been a fan of Forth for several years and became a minor expert in it.  I thought it was the perfect solution to primarily the problem of difficulty of coding.  Forth simplifies things a lot, at the cost of speed.  The savings in size are almost a side benefit, but they are substantial.<br /><br />What I settled on is a virtual machine with 8-bit instructions and an 8-bit stack.  It's <s>almost</s> fully functional - <s>still tweaking the instruction set</s>.  I optimized it as best I could - the estimated speed is about <s>600</s> 900 instructions on average per frame.  This is enough for rapid prototyping of ideas ... but also useful where speed is not critical, like decompression.  I estimate that the size savings it provides over plain asm is about 30%.  That ratio, as well as the speed can be improved with peephole optimization (when the compiler combines commonly used pairs of &quot;words&quot; into faster hybrids)<br /><br />A &quot;compiler&quot; coded in SwiftForth (PC) will generate asm6 assembly code.  It should run on the trial version.   <br /><br />I thought I might create a thread to let people know what I'm doing, gauge interest, maybe get help with any issues I run into or just hear ideas and answer questions.  <br /><br />8/15/2013<br />I threw the runtime source up in a Google Code project - <!-- m --><a class="postlink" href="https://code.google.com/p/eighth6502/">https://code.google.com/p/eighth6502/</a><!-- m -->  sorry no docs, compiler, or example yet<br /><br />8/18/2013<br />Updated OP to be a little more general and up-to-date

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Mon Aug 12, 2013 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I had a eureka moment and figured out a way to speed it up by 1.5x using a tiny bit of self-modifying code, while also saving a significant amount of ROM space.  Like hundreds of bytes.  <br /><br />An additional improvement is it can now call arbitrary asm, so asm and bytecode can be freely mixed.  I am looking to add 16-bit math next.<br /><br />The only thing that needs doing now is testing it.  I spent a long time debugging the first version, and I'm not really keen on doing that again, so I'd love it if anyone was interested in maybe helping beta test it.<br /><br />To give an idea of how optimized this is... here is the heart of it, the &quot;inner loop&quot;<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">_vmnext:<br />&nbsp; &nbsp;ldx&nbsp; &nbsp;$0000, y&nbsp; &nbsp; &nbsp; &nbsp; ; 4<br />&nbsp; &nbsp;iny&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; 2<br />&nbsp; &nbsp;stx&nbsp; &nbsp;VMNEXT_JMP&nbsp; &nbsp; &nbsp; ; 3<br />&nbsp; &nbsp;jmp&nbsp; &nbsp;opcode_page&nbsp; &nbsp; &nbsp;; 3<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; +3 for the jmp to this routine = 15<br /></div><br /><br />VMNEXT_JMP is actually the ZP address of the lower byte of the literal within the next instruction, only one page of ROM used for opcode implementations.  one of the virtual registers IPBASE is actually the 2nd and 3rd bytes of the first instruction in this listing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Aug 12, 2013 6:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ever read about Steve Wozniak's Sweet16 interpreter?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Mon Aug 12, 2013 6:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">Ever read about Steve Wozniak's Sweet16 interpreter?</div><br /><br />Neato - no I hadn't heard of that.  It isn't practical to have a full 16-bit VM for realtime code (rather I'm going to just have some extra instructions for doing a couple 16-bit operations) but I will have to look into this later for ideas or code.  Thanks.<br /><br />Btw... I noticed your alias... Dan Weiss right?  We've collabed before.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dullahan</b> [ Wed Aug 14, 2013 9:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for the updates sonder. Is your implementation living somewhere out on the web for perusal? I am interested in checking it out.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Wed Aug 14, 2013 10:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Update:<br /><br />During the past couple days I debugged it and optimized it more.  Comparison tests, if/then, for loops and while/until control structures are supported and functioning perfectly.   A very small set of opcodes and routines for working with 16-bit numbers were added.<br /><br />On the testing side of things I was able to get significantly more game features going on in roughly same number of cycles with tons to spare (currently using around 1/4 of the frame.  About half of that is just the metasprite rendering (about 16 sprites), which is asm, for perspective.   One nice thing is calling arbitrary asm routines is pretty fast so they are not limited to being behemoths to justify their existence.  Surprisingly, because the interpreter is so fast, a lot of the time trying to squeeze out more speed by turning something into asm doesn't actually buy much.  But as the complexity of a bytecode routine grows, the benefit of turning it into asm increases by a lot.  So it is still best suited to stuff that can be slow, or simple high-level logic.<br /><br />Ready for some example code?  Here is an excerpt, just really basic moving a guy around.  Doing it by hand for now, since the interpreter was basically rehauled and requires a major update to the compiler, but it's actually not too bad.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">do_player_movement:<br /><br />&nbsp; &nbsp;mcallasm andcase<br />&nbsp; &nbsp;.db PAD_LEFT<br />mif +then<br />&nbsp; &nbsp;mcallasm xfetch<br />&nbsp; &nbsp;mdouble $FFF0<br />&nbsp; &nbsp;.db &lt;dplus<br />&nbsp; &nbsp;mcallasm xstore<br />&nbsp; &nbsp;.db &lt;drop,&lt;exit<br />+then<br /><br />&nbsp; &nbsp;mcallasm andcase<br />&nbsp; &nbsp;.db PAD_RIGHT<br />mif +then<br />&nbsp; &nbsp;mcallasm xfetch<br />&nbsp; &nbsp;mdouble $0010<br />&nbsp; &nbsp;.db &lt;dplus<br />&nbsp; &nbsp;mcallasm xstore<br />&nbsp; &nbsp;.db &lt;drop,&lt;exit<br />+then<br /><br />&nbsp; &nbsp;mcallasm andcase<br />&nbsp; &nbsp;.db PAD_UP<br />mif +then<br />&nbsp; &nbsp;mcallasm yfetch<br />&nbsp; &nbsp;mdouble $FFF0<br />&nbsp; &nbsp;.db &lt;dplus<br />&nbsp; &nbsp;mcallasm ystore<br />&nbsp; &nbsp;.db &lt;drop,&lt;exit<br />+then<br /><br />&nbsp; &nbsp;mcallasm andcase<br />&nbsp; &nbsp;.db PAD_DOWN<br />mif +then<br />&nbsp; &nbsp;mcallasm yfetch<br />&nbsp; &nbsp;mdouble $0010<br />&nbsp; &nbsp;.db &lt;dplus<br />&nbsp; &nbsp;mcallasm ystore<br />+then<br />&nbsp; &nbsp;.db &lt;drop,&lt;exit<br /><br />doplayer:<br />&nbsp; &nbsp;.db &lt;zero&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; push a zero<br />&nbsp; &nbsp;mcallasm padstate<br />&nbsp; &nbsp;mcall do_player_movement<br />&nbsp; &nbsp;mcallasm screenxy<br />&nbsp; &nbsp;mdouble ms_player_idle_fwd<br />&nbsp; &nbsp;mcallasm metaspr<br />&nbsp; &nbsp;.db &lt;oplus&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; go to next object<br />&nbsp; &nbsp;.db &lt;exit<br /></div><br /><br />Once the compiler is done this would be how the same code will look in Forth-style syntax:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />: do_player_movement&nbsp; ( padstate -- padstate )<br />&nbsp; &nbsp;andcase b: PAD_LEFT if <br />&nbsp; &nbsp; &nbsp; xfetch $FFF0 d+ xstore exit<br />&nbsp; &nbsp;then<br />&nbsp; &nbsp;andcase b: PAD_RIGHT if <br />&nbsp; &nbsp; &nbsp; xfetch $0010 d+ xstore exit<br />&nbsp; &nbsp;then<br />&nbsp; &nbsp;andcase b: PAD_UP if <br />&nbsp; &nbsp; &nbsp; yfetch $FFF0 d+ ystore exit<br />&nbsp; &nbsp;then<br />&nbsp; &nbsp;andcase b: PAD_RIGHT if <br />&nbsp; &nbsp; &nbsp; yfetch $0010 d+ ystore <br />&nbsp; &nbsp;then ;<br /><br />: doplayer<br />&nbsp; &nbsp;0 padstate do_player_movement drop<br />&nbsp; &nbsp;screenxy ms_player_idle_fwd metaspr<br />&nbsp; &nbsp;o+ ;<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Wed Aug 14, 2013 10:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dullahan wrote:</div><div class="quotecontent">Thanks for the updates sonder. Is your implementation living somewhere out on the web for perusal? I am interested in checking it out.</div><br /><br />No not yet.  It just needs to be taken out of the game project folder and cleaned up.  I will do that tomorrow since it's in a good working state and throw it in a SVN repository.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Thu Aug 15, 2013 8:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just made the code available, see OP.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Fri Aug 16, 2013 9:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well the desire for speed and more efficient nesting has led to yet another &quot;rehaul&quot; (though not as big as the last one) and I am thinking of moving to 16-bit &quot;opcodes&quot; (really 16-bit direct threaded code, classic Forth)<br /><br />I discovered a way to do the inner loop for threaded code (basically lists of addresses) that is probably the fastest possible.  It's 20 cycles so a bit slower, but, now there is absolutely no penalty for calling arbitrary asm where as before it was ~30 (on top of the 15 cycles for the inner loop that's 45 cycles just to execute something as simple as fetching an object property).  As a side bonus nesting interpreted routines is a little faster.  But fetching literals is almost twice as slow.  <br /><br />The size savings would be likely less than bytecode but not that bad.  This is because of how often custom routines are called.  Because all calls are now 2 bytes instead of some being 1 and some being 3, it nearly balances out.  I probably don't care about size as much as before because I've moved from NROM to UNROM.<br /><br />I originally envisioned a bytecode interpreter because I wanted to also use it for data compression but it's looking like I might end up doing what would have seemed counter-intuitive before my pursuit of speed started - two interpreters one for reasonably fast Forth scripting and one specifically tailored for size over speed.  The bytecode interpreter may actually become a slower, limited subset of the DTC one, relying on a lot of the same code and variables just a different separate inner loop.  The idea was to set it up so the opcodes are extensible, to for instsance specify data using basically simple inline scripts within the map data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Sat Aug 17, 2013 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />By the way, how is Forth as a programming language?  I've never tried it myself.  Seems like it uses RPN extensively, but how different would it be from Basic or C if it used infix notation?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Sat Aug 17, 2013 7:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">By the way, how is Forth as a programming language?  I've never tried it myself.  Seems like it uses RPN extensively, but how different would it be from Basic or C if it used infix notation?</div><br /><br />It is slower than C (in Eighth's case probably 2x), but faster than Basic.  Its big draw is ease of implementation, but it does also have the benefit of teaching you to be a better coder if you stick with it.  Mostly because of how the requirement to learn to factor well to effectively use it beefs up your abstraction practices.<br /><br />It's like C in that it grants you a powerful gun with which to shoot yourself, but like Basic in that it is doesn't have nearly as much punctuation and required boilerplate.<br /><br />It has no types, which can be seen as a benefit.  The one type is the cell - the width of the data stack.  In my interpreter Eighth, that's just 8 bits.  Any others are derivative and managed by you.  This isn't hard if you just notate things using stack diagrams or use certain name conventions (e.g. &quot;&lt;name&gt;?&quot; returns either 0 or -1).  Address and 16-bit math are accomplished with &quot;doubles&quot;, pairs of values on the stack.  You learn not to think in more than a handful of types which are fluid and morph into each other frequently.<br /><br />It can be implemented in a couple days, like I did.  The runtime portion anyway.  Doing a complete system takes a couple weeks to months.<br /><br />It lets routines return multiple values for no extra work.  You don't have to name them, just push them on the stack.<br /><br />It's eminently extensible.  Want a custom control structures, inline data (like strings), or custom compiler keywords?  Trivial.  Many language features can be added, but you get the advantage of being able to tailor it specifically to your app.  Many things can't be easily added in full (like C-like structs) but you learn to work around, for instance by using its equivalent of namespaces, or prefixes.  Or figuring out some other way to do what you want to do in the end entirely.<br /><br />Being fully concatenative it lends itself to very natural-reading code (admittedly in your hands.)  It frees you to think in broad strokes when reading code, instead of poring through it line-by-line like a computer.  You pay more attention to the structure and logic of the program than the nitty gritty.  Oftentimes rewriting subroutines or entire modules from scratch rather than trying to shoehorn in kludgy tweaks.  Because ideally they should be really short and clean.  This gave it its &quot;write-only&quot; rep but I disagree I think it is very readable, just not always easy to make changes to a complex routine, which would be your fault anyway.  Keeping your subroutines simple (you're supposed to use lots of subroutines) frees you from having to think like a compiler.  (Unfortunately Eighth's subroutines are currently kind of expensive...)<br /><br />Not requiring named parameters makes code really fluid.  Bits and pieces can be easily lifted out and turned into subroutines far easier than any other language I've used (I've heard Lisp is similar though).  That contributes to the fun factor.  Local named variables/params are supported in fancier Forths.<br /><br />So TL;DR, actually, Forth is really, really different than both C and Basic.  In my opinion it's both easier and more powerful if your goal is writing a program fast.  The fundamentals can be learned in a day, but mastering it takes time.  You have to unlearn a lot of assumptions and learn all the tricks.  In the meantime writing simple scripts should be a cinch for just about anyone - in the old days they'd give customers (like scientists and businesspeople) app-specific vocabularies and let them write scripts (which were really just Forth programs!) all the time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Sat Aug 17, 2013 7:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">sonder wrote:</div><div class="quotecontent">Well the desire for speed and more efficient nesting has led to yet another &quot;rehaul&quot; (though not as big as the last one) and I am thinking of moving to 16-bit &quot;opcodes&quot; (really 16-bit direct threaded code, classic Forth)<br /></div><br /><br />Right now I'm not sure if it'll be worth the effort to implement 16-bit DTC (direct threaded code).  Free arbitary asm, 1.5x faster subroutines, <s>and much faster for/next</s>are the advantages.  The big disadvantage is actually that literals are slow.  More than 2x actually.  And they are ubiquitous, so that's no bueno.  It's totally unclear how it balances out right now, if there's enough overall speed gain to justify.  This may be a future upgrade.  Kind of tired of rehauling this thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Sun Aug 18, 2013 10:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">sonder wrote:</div><div class="quotecontent"><div class="quotetitle">sonder wrote:</div><div class="quotecontent">Well the desire for speed and more efficient nesting has led to yet another &quot;rehaul&quot; (though not as big as the last one) and I am thinking of moving to 16-bit &quot;opcodes&quot; (really 16-bit direct threaded code, classic Forth)<br /></div><br /><br />Right now I'm not sure if it'll be worth the effort to implement 16-bit DTC (direct threaded code).  Free arbitary asm, 2x faster subroutines, and much faster for/next are the advantages.  The big disadvantage is actually that literals are slow.  More than 2x actually.  And they are ubiquitous, so that's no bueno.  It's totally unclear how it balances out right now, if there's enough overall speed gain to justify.  This may be a future upgrade.  Kind of tired of rehauling this thing.</div><br /><br />Just did a quick analysis of the test script and literals are far less common than callasm's and call's.  <s>Moving to 16-bit DTC would eliminate 903 cycles &#40;8 scanlines&#41; of overhead. &#40;originally 1759 - 16 scanlines - so around 2x faster&#41;</s>  <br /><br />That was a naive assumption.  I just spent an hour creating a DTC version of the interpreter.  I'll post actual test results soon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Sun Aug 18, 2013 10:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The speed increase, as I thought, wasn't as dramatic as I originally hoped.  Debugging the DTC version was a BITCH due to the instruction pointer being pre-incrementing now.  But the savings in the test program after everything was about 4 scanlines.   I tried to get literals down as much as I could, but I could only get them down to 36 cycles, down from ... like 50.  I forget. (but compare to the old VM's 25... and i considered that slow...)  <br /><br />It's starting to get to the point of frustration - come up with a great idea, bang it out, then reality hits and after all the work that goes into debugging it, it yields only an incremental improvement.  Bleh.  Well, what's done is done and now it's slightly faster.  Besides, I'm sore from parkour class yesterday so I was fine with coding on the couch half the day <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sonder</b> [ Wed Aug 21, 2013 1:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Bytecode Interpreter</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Banged out a brand new compiler supporting DTC and several useful bonus features.  Converted the player's script, and got it working fairly quickly:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"><br />\ these aren't even used here ... just an example of adding asm routines<br /><br />code{ uplus<br />&nbsp; &nbsp;tsx<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;adc $102,x<br />&nbsp; &nbsp;sta $102,x<br />&nbsp; &nbsp;vmnext_pla<br />}<br /><br />code{ twostore<br />&nbsp; &nbsp;tax<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta 0,x<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;sta 1,x<br />&nbsp; &nbsp;vmnext_pla<br />}<br /><br />asm{<br />enum TEMP<br />&nbsp; &nbsp;NX: .db 0<br />&nbsp; &nbsp;NY: .db 0<br />&nbsp; &nbsp;PX: .db 0<br />&nbsp; &nbsp;PY: .db 0<br />ende<br />}<br /><br /><br />\ hardwired obj size = 16x16 for now<br /><br />: solid_obj_move<br />;<br /><br /><br />bindlit PAD_LEFT PAD_LEFT<br />bindlit PAD_RIGHT PAD_RIGHT<br />bindlit PAD_UP PAD_UP<br />bindlit PAD_DOWN PAD_DOWN<br />bindlit OVERWORLD_POS OVERWORLD_POS<br /><br />bind2lit ms_player_idle_right ms_player_idle_right<br /><br />bindword vx! vxstore<br />bindword x! xstore<br />bindword vy! vystore<br />bindword y! ystore<br />bindword vx@ vxfetch<br />bindword x@ xfetch<br />bindword vy@ vyfetch<br />bindword y@ yfetch<br />bindword load_screen<br />bindword screenxy<br />bindword padstate<br />bindword metaspr<br /><br />: do_player_control<br />&nbsp; &nbsp;w: 0 2dup vx! vy!<br />&nbsp; &nbsp;andcase dw: PAD_LEFT if $ffec vx! exit then<br />&nbsp; &nbsp;andcase dw: PAD_RIGHT if $0014 vx! exit then<br />&nbsp; &nbsp;andcase dw: PAD_UP if $ffec vy! exit then<br />&nbsp; &nbsp;andcase dw: PAD_DOWN if $0014 vy! exit then<br />;<br /><br />: load_overworld_screen<br />&nbsp; &nbsp;OVERWORLD_POS @ load_screen<br />;<br /><br />: do_player_world<br />&nbsp; &nbsp;x@ drop $0f &gt; if 1 OVERWORLD_POS +! 0 dup x! load_overworld_screen exit then<br />&nbsp; &nbsp;x@ drop $00 &lt; if -1 OVERWORLD_POS +! $0f00 x! load_overworld_screen exit then<br />&nbsp; &nbsp;y@ drop $0f &gt; if 4 OVERWORLD_POS +! 0 dup y! load_overworld_screen exit then<br />&nbsp; &nbsp;y@ drop $00 &lt; if -4 OVERWORLD_POS +! $0b00 y! load_overworld_screen exit then<br />;<br /><br />: doplayer<br />&nbsp; &nbsp;0 padstate do_player_control drop<br />&nbsp; &nbsp;x@ vx@ d+ x!&nbsp; &nbsp;y@ vy@ d+ y!<br />&nbsp; &nbsp; &nbsp; &nbsp; do_player_world<br />&nbsp; &nbsp;screenxy ms_player_idle_right metaspr<br />&nbsp; &nbsp;o+<br />;<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>