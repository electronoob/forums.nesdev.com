<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Some help with VBL..</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Some help with VBL..</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1892">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=1892</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Aug 13, 2006 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Some help with VBL..</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi all,
<br />
<br />I'm completely stuck in test #8 of Blargg's vbl_timing test rom. I get passed all tests in frame_basics, so my VBL handling must be somewhat accurate.. I get it passed if I specifically check on 0x2002 reads that the PPU is on cycle 11 of the first VBL scanline, but that's like cheating.. it's like a hack. Anyone's had any similar experience or any idea on what's happening?
<br />
<br />By the way, does anyone know if this board's search function is working properly? I get no results, no matter what I search.
<br />
<br />Thx!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Aug 13, 2006 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />er... there's a test 8?  I only have up to 7
<br />
<br />Were these updated?
<br />
<br />*goes to check*
<br />
<br />EDIT
<br />
<br />OOoohhh... I read that wrong... you get error #8 on test ROM #2.
<br />
<br />EDIT again
<br />
<br />You shouldn't be checking for 11 cycles INTO VBlank... you should be checking for one cycle BEFORE VBlank.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sun Aug 13, 2006 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Some help with VBL..</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Muchaserres wrote:</div><div class="quotecontent">By the way, does anyone know if this board's search function is working properly? I get no results, no matter what I search.<br /></div>
<br />
<br />Yeah, it broke somehow.  I'll try to fix it once I get some other things that need to be done out of the way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Aug 13, 2006 1:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, this is what I'm trying to do.. In my PPU core, VBL's 20 scanlines come first, so I do something like this,
<br />
<br />if( CPUCycles == ( FRAMECycles - 5 ) ) EnableSetting = false;
<br />
<br />where FRAMECycles is 262*341*5 (5 less every other frame, you know). PPU cycles are multiplied by 5 and CPU cycles by 15 to get everything synchronized. This works fine if FRAMECycles equals 446770 (12 cycles after VBL is set), but not if it equals what it should, 262*341*5.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Aug 13, 2006 1:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />hrrrrm...
<br />
<br />12 PPU cycles is 4 CPU cycles -- the time of one "LDA $2002" instruction.  Could you be adding 4 cycles to your CPU timestamp <em>before</em> executing the instruction?
<br />
<br />&lt;/random guess&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Aug 13, 2006 3:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll check that. In my CPU core, I do the cycle addition before executing the instructions themselves. I've moved that to be done after the instructions, and I get passed all errors on both tests #1 and #2 (yeah!). Should this really make any difference? Anyway, I'll recheck my sources..
<br />
<br />&lt;/BIG thanks&gt;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 13, 2006 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />But in fact, the actual memory read occurs on the <em>fourth</em> CPU cycle of the instruction. There should be three instruction fetches, at one cycle each, and then one data fetch from PPU register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Aug 13, 2006 3:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Right 
<br />
<br />blargg's tests probably aren't able to pick up on that, since the effect of the read will be delayed.  Which might be why he's passing regardless.
<br />
<br />Muchaserres ...  consider the following, and think about how your emu will handle it:
<br />
<br />an instruction 'LDA $2002" is starting to execute 2 CPU cycles before VBlank. Since the actual $2002 read is occuring on the 4th cycle of that instruction, it's actually happening on the second cycle AFTER VBlank -- so the above read should return the VBlank flag set.
<br />
<br />If you have your CPU as instruction granularity, you'll get a "round to the nearest instruction" effect... which might become very troublesome in timing sensitive tests such as these.
<br />
<br />
<br />One common solution to this is to pass a mini-timestamp along to your read and write routines.  For example, LDA absolute code might go something like:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">op = Read&#40; PC, 0 &#41;;&nbsp; // 0 because it's the first cycle in the instruction<br />PC++;<br />switch&#40;op&#41;<br />&#123;<br />case 0xAD:&nbsp; // LDA $xxxx<br />&nbsp; adr.lo = Read&#40; PC, 1 &#41;;&nbsp; // 1 because it's 2nd cycle<br />&nbsp; PC++;<br />&nbsp; adr.hi = Read&#40; PC, 2 &#41;;&nbsp; // 2, etc<br />&nbsp; PC++;<br />&nbsp; A = Read&#40; adr, 3 &#41;;<br />&nbsp; SET_NZ&#40;&#41;;<br />&nbsp; break;<br />&#125;<br /><br />CPUtimestamp += cycles&#91; op &#93;;<br /></div>
<br />
<br />Then in your Read/Write procedures, you can add the mini-timestamp to the actual timestamp whenever you 'catch up' you other systems or do some other sync operation.  This allows for cycle-level detail rather than instruction-level detail.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Aug 13, 2006 4:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Uhm.. I always have had this in mind, but the impact it may have in terms of execution speed is what has stoped me from doing things this way. Have you done any tests on this? I'll try and see what happens.
<br />
<br />Know of any document with cycle decomposition info for every opcode?
<br />
<br />Anyway, what tepples says is quite right. The opcode used here, if I'm right, is absolute LDA (0xAD), which takes 4 cycles. When the read to 0x2002 actually happens only 3 cycles have been used, so I should only see a 1 cycle delay in my emu, instead of the 4 I see. Could this be caused by an accumulation of events similar to this one?
<br />
<br />Thank ya!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Aug 13, 2006 5:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Muchaserres wrote:</div><div class="quotecontent">Uhm.. I always have had this in mind, but the impact it may have in terms of execution speed is what has stoped me from doing things this way.</div><br /><br />What kind of impact could there be?  You're just passing a single additional function parameter -- that's practically nothing.  999 times out of 1000 the fine-time can even be ignored... like if the read is unimporant (like a read from RAM, ROM or something).<br /><br />I haven't done any side-by-side tests... but I currently do this in my emu and it's no worse off than any of my previous versions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Know of any document with cycle decomposition info for every opcode?</div><br /><br /><a href="http://nesdev.com/6502_cpu.txt" class="postlink">http://nesdev.com/6502_cpu.txt</a><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Anyway, what tepples says is quite right. The opcode used here, if I'm right, is absolute LDA (0xAD), which takes 4 cycles. When the read to 0x2002 actually happens only 3 cycles have been used, so I should only see a 1 cycle delay in my emu, instead of the 4 I see.</div>
<br />
<br />But if blargg's ROM is timing itself by doing a certain read at a certain timestamp.. then his ROM is going to be 4 cycles off what it expected to be because his ROM is syncing up incorrectly.
<br />
<br />Like if he syncs up in order to find the exact cycle the VBlank flag raises or lowers, then times his code from there (I'm unsure how he does it exactly -- but I think it's something like that) -- whenver his program syncs up is gonig to be 4 or so cycles off because your emu is rounding his timing reads to the next instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Fri Aug 18, 2006 4:22 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Know of any document with cycle decomposition info for every opcode?</div><br /><br /><a href="http://nesdev.com/6502_cpu.txt" class="postlink">http://nesdev.com/6502_cpu.txt</a></div><br /><br />Nice doc. I've got some questions:<br /><br />1.- Look at cycle #2 of BRK. It says "read next instruction byte (and throw it away)". Another example would be cycle #5 of absolute addressed read-mod-write instructions, "write the value back to effective address". Should those dummy read/write operations be emulated?<br /><br />2.- Should I add mini-timestamps on ZP addressed opcodes where only RAM accesses take place?<br /><br />3.- Look at cycles #4 and #5 of absolute indexed read instructions. Should I emulate both reads? Actually, I read from the effective address and add an additional cycle if there's any page boundary crossing.<br /><br /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">But if blargg's ROM is timing itself by doing a certain read at a certain timestamp.. then his ROM is going to be 4 cycles off what it expected to be because his ROM is syncing up incorrectly.<br /><br />Like if he syncs up in order to find the exact cycle the VBlank flag raises or lowers, then times his code from there (I'm unsure how he does it exactly -- but I think it's something like that) -- whenver his program syncs up is gonig to be 4 or so cycles off because your emu is rounding his timing reads to the next instruction.</div>
<br />
<br />That makes it clear. Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Fri Aug 18, 2006 5:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1.
<br />
<br />Depends how far you want to go with your emu.  I don't think any games will rely on the dummy reads -- however I think there are one or two which rely on the dummy write (in INC absolute I think?  not quite sure, not even sure if I'm remembering correctly).
<br />
<br />If you don't do the dummy reads/writes, you'll probably be fine.  At least you will with 99.999% of the games around.
<br />
<br />2)
<br />
<br />Again it depends.  I don't -- I don't even call a function for ZP or stack read/writes.
<br />
<br />The only time I can see this making any difference is with mapper 90's IRQ counter -- which has the option of couting on every CPU write... however a grand total of zero games use that option.
<br />
<br />
<br />3)  Same answer as #1

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sat Aug 19, 2006 2:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, so.. after a careful source modification, I still get the same mess.. It only passes the error if I do
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if&#40; &#40; CPUCycles + 0 &#41; == &#40; FRMCycles - 5 &#41; &#41; EnableNMI = false;</div><br /><br />instead of<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if&#40; &#40; CPUCycles + cycles &#41; == &#40; FRMCycles - 5 &#41; &#41; EnableNMI = false;</div>
<br />
<br />In other words, if I add the timestamp the whole thing breaks. Of course, I call PPU-&gt;Run( CPUCycles + cycles ); before doing that check..

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Muchaserres</b> [ Sun Aug 20, 2006 7:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been logging 0x2002 reads while running '2.vbl_timing.nes'. Look at the results. First of all, I do,
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Run&#40; CPUCycles + miniCycles &#41;;</div><br /><br />where 'miniCycles' is the cycle count inside the read opcode in the moment of performing the read, as you Disch suggest. Then, there are two possibilities. The wrong one,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if&#40; &#40; CPUCycles + 0 &#41; == &#40; FRMCycles - 5 &#41; &#41; EnableNMI = false;</div><br /><br />for which I get the following timing (all cycles divided by 5 for a PPU perspective),<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CPUCycles =&nbsp; 89340 - miniCycles =&nbsp; 9 - PPUCycles =&nbsp; 89349/ 89342<br />CPUCycles =&nbsp; 89341 - miniCycles =&nbsp; 9 - PPUCycles =&nbsp; 89350/ 89342 &lt;-- DISABLED HERE!<br />CPUCycles =&nbsp; &nbsp; &nbsp; 0 - miniCycles =&nbsp; 9 - PPUCycles =&nbsp; &nbsp;6820/ 89342</div><br /><br />The 9 'miniCycles' correspond to the 3 cycles taken by an absolute LDA till it actually reads from effective address, in its 4th cycle. The problem is that 'CPUCycles' already equals frame cycles (the rightmost number in PPUCycles) minus one, so adding the mini timestamp breaks the flow.<br /><br />On the other hand, the right option,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if&#40; &#40; CPUCycles + cycles &#41; == &#40; FRMCycles - 5 &#41; &#41; EnableNMI = false;</div><br /><br />outputs this timing,<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CPUCycles =&nbsp; 89331 - miniCycles =&nbsp; 9 - PPUCycles =&nbsp; 89340/ 89342<br />CPUCycles =&nbsp; 89332 - miniCycles =&nbsp; 9 - PPUCycles =&nbsp; 89341/ 89342 &lt;-- DISABLED HERE!<br />CPUCycles =&nbsp; 89333 - miniCycles =&nbsp; 9 - PPUCycles =&nbsp; 89342/ 89342</div>
<br />
<br />Here, if we add 'miniCycles' to 'CPUCycles' we get a correct result, 89332+9=89341/89342.
<br />
<br />The problem here is that I don't pass error #8 in the test with the right option, but with the wrong one. Any ideas? By the way, those logs I paste here correspond to the first time a read happens one PPU cycle before VBL. Would any of you mind checking against you emus which of the logs I show is more likely to be correct?
<br />
<br />Thank you all.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Aug 20, 2006 10:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In my emulator, after $00F8 is set to $08, I get a ton of $2002 reads, then one per frame as it synchronizes exactly to the PPU, then the read at 89341 PPU clocks after VBL that suppresses VBL before $01 is written to $00F8.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #8;&#41; Reading 1 PPU clock before VBL should suppress setting<br />sta &lt;$F8<br />jsr sync_ppu_align1_30<br />jsr delay_26<br />lda $2002<br />and #$80<br />jsr error_if_ne<br />lda $2002<br />and #$80<br />jsr error_if_ne<br /><br />---- = VBL occurred<br />...<br />Read $2002 at 89289<br />Read $2002 at 89310<br />Read $2002 at 89331<br />----<br />Read $2002 at 10<br />----<br />Read $2002 at 89330<br />----<br />Read $2002 at 89331<br />----<br />Read $2002 at 89332<br />----<br />Read $2002 at 89333<br />----<br />Read $2002 at 89334<br />----<br />Read $2002 at 89335<br />----<br />Read $2002 at 89336<br />----<br />Read $2002 at 89337<br />----<br />Read $2002 at 89338<br />----<br />Read $2002 at 89339<br />----<br />Read $2002 at 89340<br />----<br />Read $2002 at 89341<br />----<br />Read $2002 at 89342<br />----<br />----<br />Read $2002 at 89341<br />----<br />Read $2002 at 59<br />Write $01 to $00F8<br /></div>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>