<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=4248" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-08-28T02:17:30-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=4248</id>
<entry>
<author><name><![CDATA[tomaitheous]]></name></author>
<updated>2008-08-28T02:17:30-07:00</updated>
<published>2008-08-28T02:17:30-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=36503#p36503</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=36503#p36503"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=36503#p36503"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />At any rate, I got small graphical corruption when I tried writing freely to the VDC in my Fractal Engine program, so I set up writes to occur during HBlank interrupts<br /></div><br /><br /> Hey Chris. If I'm correct, you're not using a double buffer for the image (not enough room for two 512x240 images). If the CPU is writing to the same location that the VDC is reading from, then you'll get an artifact for that row of 8 pixels. I usually trail the VDC raster by one scanline if I'm not using a double buffer system. <br /><br /> That chart Charles put up is for the speed of the VRAM. Slow modes, which <em>aren't</em> used for the PCE, give less CPU slots. The slowest mode gives no CPU slots during active display. These unused modes were for the VDC paired with slow and really slow VRAM. It also limits the VDC to 2bit tiles/sprites instead of 4bit because of slower ram. The slowest mode also limits the sprite scanline limit to half. I guess that's kind of irrelevant. <br /><br /> But the DOT clock chart for normal (fastest vram setting) mode shows the number of CPU slots open to word writes in a 8 pixel segment of a scanline during active display. If the CPU writes to the VDC data port and the VDC is busy with another access slot, the VDC will assert /RDY until that slot is free. For 5.37mhz mode, each slot in the DOT chart is equivalent 1.33 CPU cycles long. So if you write to the latch $0003 ($0002 LSB has no delay), you'll get a small fraction of a CPU cycle delay on any misaligned writes. Faster pixel clock modes have faster slot times and even smaller fractional delays.<br /><br /> So you still have unlimited read and write access to vram during active display. <br /><br /> Setting up the VDC for larger incremental writes with tiles arranged in a certain pattern will allow you to write an entire scanline of pixels into vram without changing vram position, but for 16 colors you have to do a two pass. Still muuuch faster than writing 8 pixels, then reposition the vram pointer, doing the math, etc. If you use low res mode (256) and setup sprites to fill the entire screen  - using it as a background, you can do some amiga style effects since that would give you 4 independent bit planes (one WORD would write 16 pixels at a time).<br /><br /> <br /> On the original topic of the SMB port, I did a compare of the extracted rom and a headerless NES SMB rom. Looks like a large chunk was change. Probably the tilemap format as the original code looks to be intact - sans a few hacks. The sprites are unchanged though and are padded to 16x16 even though they are still 8x8. A lot of the PPU writes are changed to JSRs. The PCE has ZP in a different address location, so the hack maps the same 8k RAM into both $0000-1fff and $2000-3fff.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3645">tomaitheous</a> — Thu Aug 28, 2008 2:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2008-07-29T18:07:16-07:00</updated>
<published>2008-07-29T18:07:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35386#p35386</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35386#p35386"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35386#p35386"><![CDATA[
Thanks, tepples.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />The PPU can index tiles from the $0000 half of the pattern table or from the $1000 half. A few games write to PPUCTRL to switch between $0000 and $1000 halfway down the screen, such as Qix. This is more than enough for a 24x20 tile playfield.<br /></div><br /><br />I noticed that trick in your e-reader.  Theoretically, with enough attention to timing, could one flip the banks after any sufficiently large number of rows? (enough, at least, to handle the interrupt and move sprite0?)<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />Emulators decide whether to honor CHR writes by looking at the board spec, which makes up the first 16 bytes of an iNES file. The key values for this are the board class (aka "mapper number") and the CHR ROM size. Two board classes (TQROM and some Chinese MMC3-clones) have both CHR RAM and ROM, selected by the CHR bank number. Emulators assign 8 KiB of (writable) CHR RAM after the end of CHR ROM. For everything else, if the CHR ROM size is 0 KiB, emulators assign the appropriate amount of CHR RAM based on the board class: 16 KiB for CPROM and 8 KiB for most everything else.<br /></div><br /><br />I suppose combining multiple memory chips <em>would</em> be nicer with a mapper.  <em>Possible</em> without (EE rant omitted), but ugly.  Are there really carts out there that use CHR writes as NOPs so emulators <em>need</em> to check the mapper, or does every cart with CHR RAM simply happen to have a mapper that has other functionality that the emulator needs to handle and/or fall into the 1 bank ROM / 1 bank RAM class?<br /><br />Edit: Bleh.  Yeah.  Okay.  More than 2 banks === uses a mapper. *headsmack*  But for mapperless carts, it does sound like the emulator gets to assume that any bank not filled with stuff is writeable.<br /><br />One of the things I was most relieved about during the make-a-NES project was that all the mapper stuff was cart-side so we didn't actually need to worry much about it.  Sadly, while my 6502 seemed to step through code just fine on the carts we plugged in, and the PPU team got everything right graphically, we came together at the last minute and realized that their PPU didn't hold the vblank line for 3 PPU cycles and my 6502 couldn't latch a signal held for only 1/3 of a cycle, so inevitably any commercial game we tried locked up in a NMI wait before anything was drawn <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Tue Jul 29, 2008 6:07 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-07-27T13:16:12-07:00</updated>
<published>2008-07-27T13:16:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35349#p35349</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35349#p35349"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35349#p35349"><![CDATA[
<div class="quotetitle">LoneKiltedNinja wrote:</div><div class="quotecontent"><br />My impression from the console's end was that the majority of carts used non-writeable memory for CHR, and from a ROM programmer standpoint, that even writeable CHR memory was of limited value since the PPU could only index 256 tiles per layer- enough for some font characters or basic line drawing, but a bit lacking for large-scale rendering.<br /></div><br />The PPU can index tiles from the $0000 half of the pattern table or from the $1000 half. A few games write to PPUCTRL to switch between $0000 and $1000 halfway down the screen, such as Qix. This is more than enough for a 24x20 tile playfield.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />And that still doesn't contradict the notion that drawing a full-screen fractal by manually rewriting the tiles is a trick on PCE and not really an option on NES.<br /></div><br />You could be right about fractals. But then, a lot of old 8-bit home computers such as the ZX Spectrum had a similar tiled graphics scheme, needing the same tile-based approach to frame buffers.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />...unless you, say, manually track which tiles would be identical and hope that in any given render you don't need more than 256 unique tiles [...] Y'know, that may just work, what with all the detail being on relatively thin edges around the nodes.<br /></div><br />Nice idea. Now you're thinking like the developers of Color A Dinosaur, another NES game using pixel-level edits to CHR RAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Would I be correct to guess that since writeability is determined by the type of chip in the cart, not the console, most emulators will honor writes to CHR as if the cart did use writeable memory?<br /></div><br />Emulators decide whether to honor CHR writes by looking at the board spec, which makes up the first 16 bytes of an iNES file. The key values for this are the board class (aka "mapper number") and the CHR ROM size. Two board classes (TQROM and some Chinese MMC3-clones) have both CHR RAM and ROM, selected by the CHR bank number. Emulators assign 8 KiB of (writable) CHR RAM after the end of CHR ROM. For everything else, if the CHR ROM size is 0 KiB, emulators assign the appropriate amount of CHR RAM based on the board class: 16 KiB for CPROM and 8 KiB for most everything else.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jul 27, 2008 1:16 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2008-07-27T08:56:03-07:00</updated>
<published>2008-07-27T08:56:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35334#p35334</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35334#p35334"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35334#p35334"><![CDATA[
Fine, fine, you win.  I've only built a NES on a protoboard and hooked carts up to it, never actually built a cart.  My impression from the console's end was that the majority of carts used non-writeable memory for CHR, and from a ROM programmer standpoint, that even writeable CHR memory was of limited value since the PPU could only index 256 tiles per layer- enough for some font characters or basic line drawing, but a bit lacking for large-scale rendering.<br />I can believe that the newer the system, the larger and more prevalent writeable memories become, I'm just surprised so many developers would have gone to the effort/expense in the late 80s.<br /><br />And that still doesn't contradict the notion that drawing a full-screen fractal by manually rewriting the tiles is a trick on PCE and not really an option on NES.<br />...unless you, say, manually track which tiles would be identical and hope that in any given render you don't need more than 256 unique tiles... (edit: or, reading up on that e-book thread, 512 tiles provided only 256 were needed for any given set of rows)<br />Y'know, that may just work, what with all the detail being on relatively thin edges around the nodes.  I may need to try it some time.  Would I be correct to guess that since writeability is determined by the type of chip in the cart, not the console, most emulators will honor writes to CHR as if the cart did use writeable memory?<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Sun Jul 27, 2008 8:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-07-26T16:04:05-07:00</updated>
<published>2008-07-26T16:04:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35316#p35316</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35316#p35316"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35316#p35316"><![CDATA[
<div class="quotetitle">LoneKiltedNinja wrote:</div><div class="quotecontent"><br />the NES and PCE use tile-based graphics systems, and have no official 'direct-draw' capacity. Fractals, by definition, are much friendlier to draw when you have individual control over the color of every pixel.  For his Mandelbrot Set demo, ccovel knows some PCE tricks which, whether because I haven't tackled the architecture/terminology the same way he has, or because I'm just being stupid, I'm still wrapping my head around.  They are allowing him to indirectly set the color of every pixel in VRAM in spite of seemingly only having direct control over which 8x8(?) tile from memory is copied to which 8x8 square of VRAM.<br /></div><br />That's because you edit the tiles themselves. Videomation for NES, Elite for NES, Qix for NES and Game Boy, FaceBall 2000 for Game Boy and Super NES, Mario Paint for Super NES, Super Game Boy's border editor, Game Boy Camera, and the cut scenes of Metroid Fusion for GBA do exactly this. I'd imagine that RPGs for the Super Famicom do the same so that they can put kanji into text boxes. So does that proportional font demo that Blargg and I made for <a href="http://nesdev.com/bbs/viewtopic.php?t=1179" class="postlink">that ebook project</a>. In fact, the menu for the GBA and DS versions of <a href="http://www.pineight.com/lj/" class="postlink">Lockjaw</a> works like this, treating the screen as a pixel-mapped surface despite that it's actually made of tiles, so that it can use a proportional font and still fit in the "little bank" of the DS VRAM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I suppose I could use individual writes through the PPU to edit actual tile memory, but to me that goes against the notion of how the "average" cartridge was set up- your CHR banks are in ROM<br /></div><br />So U*ROM, A*ROM, B*ROM, and SNROM aren't "average"? I'll grant that CPROM and TQROM are special cases.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 26, 2008 4:04 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2008-07-26T12:22:10-07:00</updated>
<published>2008-07-26T12:22:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35312#p35312</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35312#p35312"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35312#p35312"><![CDATA[
Apologies for the long post, but you guys are giving me a lot to work with here <img src="http://forums.nesdev.com/images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" /><br /><br />IMO, consoles are designed to play games, which is what makes it more impressive when people write console apps for other things.  Resource wastefulness is agreeably a big issue with old CPUs, but it's still an issue today (Did you know an X86 floating-point division can take up to 20 times as long as an addition?  How many polygons the PS2 can render without chugging?  What a 'page fault' even means?).  <br /><br />The bigger and more interesting challenge for me is making the hardware do things it was never intended to do precisely <em>because</em> it was designed for games, even if those things are cheap enough to be done during games.  For instance, as has been stated (and with apologies to those of you who know this cold), the NES and PCE use tile-based graphics systems, and have no official 'direct-draw' capacity. Fractals, by definition, are much friendlier to draw when you have individual control over the color of every pixel.  For his Mandelbrot Set demo, ccovel knows some PCE tricks which, whether because I haven't tackled the architecture/terminology the same way he has, or because I'm just being stupid, I'm still wrapping my head around.  They are allowing him to indirectly set the color of every pixel in VRAM in spite of seemingly only having direct control over which 8x8(?) tile from memory is copied to which 8x8 square of VRAM.  The best I could manage for my Mandelbrot Set on on NES was to use 4x4-pixel blocks (as large as 1/4 CHR tile) as 'pixels', since conveniently 4 blocks per tile ^ 4 colors per block = 256, the total number of tile indeces in 1 CHR ROM bank.  I 'direct draw' by calculating the color I want for each block, then looking up the tile with those 4 blocks from my bank.  I suppose I could use individual writes through the PPU to edit actual tile memory, but to me that goes against the notion of how the "average" cartridge was set up- your CHR banks are in ROM, and unless you sacrifice a chunk of a bank to use as a writeable scratchpad (at added cost and headache for the hardware engineers), all you can do is copy existing tiles into your nametables.  My earlier comment on how the NES architecture makes getting at your CHR data difficult revolved around precisely this- the CHR address space is not directly accessible by the CPU, only by reads/writes through the PPU, and even then writes to your actual pixel bitmaps are expected to fizzle under most circumstances.<br /><br />Similarly, I acknowledge games like Battletoads, Kirby's Adventure, Final Fantasy III, Somari, and others are awesome games, but knowing what the NES "can" do, I can pick out pretty much exactly how the games are working their magic.  Games like Recca are far more entertaining for me because I can't always tell how the system does what it's doing.  Recca has got to be devoting some seriously anal timing loops to those full-screen raster waving effects, but moreover, I could swear I count more than 64 sprites going at once without much clipping or flicker, even on 'strict' emus like Nestopia.  Heck, the train level in Little Nemo had me mildly stumped for a bit with its apparent multi-layered multi-directional scrolling/parallax.  Even the MegaMan 2 title uses a vertical parallax effect that "shouldn't be possible."  And porting SMB to the PCE?  I can see how a good bit of the game code would be a straight shot, but the whole reason I've been curious about the graphics, sound and I/O is to see how much one would need to bend over backwards or come up with creative solutions to make the PCE do something it may not have been intended to.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Sat Jul 26, 2008 12:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-07-26T11:40:11-07:00</updated>
<published>2008-07-26T11:40:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35309#p35309</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35309#p35309"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35309#p35309"><![CDATA[
<div class="quotetitle">ccovell wrote:</div><div class="quotecontent"><br />True, but they are also capable of running various other kinds of software.  You probably also don't see the point of <a href="http://www.pouet.net/" class="postlink">demos</a>, either.<br /></div><br /><br />Oh no I didn't mean to go that far. Demos are very impressive. It is always neat seeing what a platform can do in other tasks. I've seen alot of demos you've done and always been quite impressed.<br /><br />The thing I mainly didn't like about the guys idea with this fractal engine was this "directdraw" business on PC-Engine really. What's the point if you are just plotting pixels? That's no fun, hardware sprites and BGs are where it's at. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /> For games I mean.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Sat Jul 26, 2008 11:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2008-07-26T10:18:44-07:00</updated>
<published>2008-07-26T10:18:44-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35307#p35307</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35307#p35307"/>
<title type="html"><![CDATA[Demos vs. games]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35307#p35307"><![CDATA[
<div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />I don't see the point. These machines are meant for games.<br /></div><br />Are Nintendo platforms also meant just for games? If so, are these games?<br /><ol style="list-style-type: lower-alpha"><li>Videomation </li><li>Mario Paint </li><li>Workboy </li><li>PictoChat </li><li>Electroplankton </li><li>Animal Crossing: Wild World </li><li>Play-Yan </li><li>MoonShell </li><li>DSOrganize </li></ol> All of these run on a Nintendo platform, but for each one, I can think of at least one objection to calling it a game.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />amazing effects, that couldn't be normally used in games because they require too much CPU time/ROM/RAM/whatever.<br /></div><br />Have you played Recca? It's a shooter that looks like a demo with sprites on top.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Jul 26, 2008 10:18 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2008-07-26T10:15:05-07:00</updated>
<published>2008-07-26T10:15:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35306#p35306</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35306#p35306"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35306#p35306"><![CDATA[
<div class="quotetitle">ccovell wrote:</div><div class="quotecontent"><br />You probably also don't see the point of <a href="http://www.pouet.net/" class="postlink">demos</a>, either.<br /></div><br />To me, the main point of demos is showing uncommon amazing effects, that couldn't be normally used in games because they require too much CPU time/ROM/RAM/whatever.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Jul 26, 2008 10:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2008-07-26T06:27:05-07:00</updated>
<published>2008-07-26T06:27:05-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35304#p35304</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35304#p35304"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35304#p35304"><![CDATA[
<div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />I'm not sure what a fractal engine is,<br /></div><br /><!-- m --><a class="postlink" href="http://www.disgruntleddesigner.com/chrisc/fractalengine.html">http://www.disgruntleddesigner.com/chri ... ngine.html</a><!-- m --><br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />but I don't see the point.These machines are meant for <a href="http://www.disgruntleddesigner.com/chrisc/TMLogic.html" class="postlink">games</a>.<br /></div> <img src="http://forums.nesdev.com/images/smilies/icon_sad.gif" alt=":(" title="Sad" /> <br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />They are perfectly capable of performing rich and enjoyable <a href="http://www.disgruntleddesigner.com/chrisc/solarwars.html" class="postlink">games</a>.<br /></div><br />True, but they are also capable of running various other kinds of software.  You probably also don't see the point of <a href="http://www.pouet.net/" class="postlink">demos</a>, either.<br /><br /><div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />As for CHR-RAM and the NES in general, just look at Battletoads. :p You can do alot with the NES. You just can't be as wasteful as you can with newer platforms. But when you consider how simple most games are, and how much fun simple games can be, the NES can get the job done. And it does quite well if you pair the NES with a beefy memory mapper like the MMC5. Though even with a MMC3, you can accomplish alot in your games.<br /></div><br />This, at least, is true.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Sat Jul 26, 2008 6:27 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-07-25T23:17:45-07:00</updated>
<published>2008-07-25T23:17:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35299#p35299</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35299#p35299"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35299#p35299"><![CDATA[
I'm not sure what a fractal engine is, but I don't see the point. These machines are meant for games. They are perfectly capable of performing rich and enjoyable games. <br /><br />As for CHR-RAM and the NES in general, just look at Battletoads. :p You can do alot with the NES. You just can't be as wasteful as you can with newer platforms. But when you consider how simple most games are, and how much fun simple games can be, the NES can get the job done. And it does quite well if you pair the NES with a beefy memory mapper like the MMC5. Though even with a MMC3, you can accomplish alot in your games.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Fri Jul 25, 2008 11:17 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ccovell]]></name></author>
<updated>2008-07-25T18:45:16-07:00</updated>
<published>2008-07-25T18:45:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35294#p35294</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35294#p35294"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35294#p35294"><![CDATA[
The PCE still has VBlank rules, but the VDC can still be written to during the active display.  I'll quote Charles MacDonald:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />During the active display period of a scanline, the VDC can do one 16-bit<br /> access to VRAM on each cycle of the dot clock. Bits 1-0 of MWR tell the VDC<br /> how to divide this amongst several sources:<br /><br /> 1. CPU (reading or writing a word via register $02)<br /> 2. Background character pattern generator data (one read is for bitplanes<br />    0 and 1, another is for bitplanes 2 and 3, either one or two are needed<br />    per character)<br /> 3. BAT data (character name and palette, one fetch needed per character)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent"> Bit   Dot   Dot cycles within an 8-dot unit<br /> 1 0  Width   0   1   2   3   4   5   6   7<br /> -------------------------------------------<br /> 0 0    1    CPU BAT CPU ??? CPU CG0 CPU CG1<br /> 0 1    2    --BAT-- --CPU-- --CG0-- --CG1--<br /> 1 0    2    --BAT-- --CPU-- --CG0-- --CG0--<br /> 1 1    4    ------BAT------ ----CG0/CG1----</div><br /> CPU - A read or write to register $02<br /> BAT - The palette block and character name from the BAT<br /> ??? - Unknown, possibly an unused 'dummy' access<br /> CG0 - Bitplanes 0, 1 from the character generator<br /> CG1 - Bitplanes 2, 3 from the character generator<br /><br /> The default mode all games use is 0, as far as I can tell, modes 1, 2 are<br /> identical, and mode 3 enables the CG mode bit as described later.<br /></div><br />I never quite understood this exactly.  VRAM can be written to at any time, but the access that the CPU is given is spread between VDC VRAM accesses.  At any rate, I got small graphical corruption when I tried writing freely to the VDC in my Fractal Engine program, so I set up writes to occur during HBlank interrupts.  I guess this slows down the program a little bit, but fractal computation stil takes longer than one scanline, I figured.<br /><br />I might go back to my program someday and see if I can get it to write to VRAM at any time, speeding up writing.<br /><br />On the NES, yes CHR-RAM writing is limited, but it can still be optimized -- look at what carts like Videomation do.  I think for fractals, your 4x4 CHR bank is good enough, because who wants to watch a fractal on the NES render four times slower than it already is?  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=355">ccovell</a> — Fri Jul 25, 2008 6:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2008-07-25T17:12:04-07:00</updated>
<published>2008-07-25T17:12:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35292#p35292</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35292#p35292"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35292#p35292"><![CDATA[
I'm sure the PC-Engine still has VBlank rules. You update the graphical hardware while it's between frames. I would guess the PC-Engine has a large amount of VRAM that the CPU loads tiles into through memory mapped registers similar to the NES. But I know the PC-Engine can remap its 64K of address space so maybe you can map VRAM into CPU space.<br /><br />Honestly I don't see what you mean about the NES. The CPU can modify PPU memory well enough for some amazing games. Sure it's not fast enough to compare to how you do things on modern PCs with a frame buffer and tons of bitmaps. But it works pretty damn well when you consider how limited the hardware was back then. <br /><br />What are you talking about a premade CHR bank with every possible combo of 4 quarter tiles x 4 colors? Hacking NES games to PC-Engine wouldn't require duplicating tiles for each palette. I don't really know that much about PC-Engine, but it's from the same era as the Genesis/MegaDrive and SNES. <br /><br />But anyway, the NES may seem like a pain to work with, but if you take your time and think about what you are doing I really don't think it's as hard as you think it is.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Fri Jul 25, 2008 5:12 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[LoneKiltedNinja]]></name></author>
<updated>2008-07-25T16:56:10-07:00</updated>
<published>2008-07-25T16:56:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35291#p35291</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35291#p35291"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35291#p35291"><![CDATA[
<div class="quotetitle">ccovell wrote:</div><div class="quotecontent"><br />My program sets up such a screen, then fills in the tile characters as it renders the fractal.  It just so happens that each 8x1 horizontal line in a graphic tile takes up 4 bytes, so to get this "direct draw" thing going, I just had to have it change the VRAM addresses accordingly and write the fractal image to VRAM, 8 pixels at a time.  There was no need to read previously-drawn tiles because of the tile bitplane layout.<br /></div><br /><br />So let me see if I'm parsing this correctly- you still compose the background of tiles, but you basically fill in the tiles at runtime via the CPU, as opposed to the NES architecture which (to my knowledge) makes it a pain for the CPU to get directly at the CHR data, and doesn't give you enough distinct tiles to fill more than a fraction of the screen anyway?<br />The best easy hack I could think of for the NES was a premade CHR bank with every possible combination of 4 quarter-tiles x 4 colors...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3570">LoneKiltedNinja</a> — Fri Jul 25, 2008 4:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[mic_]]></name></author>
<updated>2008-07-25T01:08:56-07:00</updated>
<published>2008-07-25T01:08:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35281#p35281</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35281#p35281"/>
<title type="html"><![CDATA[Super Mario Bros. on the PC-Engine?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4248&amp;p=35281#p35281"><![CDATA[
Yeah, the samples are 4-bit on the GB and 5-bit on the PCE, but it's the same concept.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1181">mic_</a> — Fri Jul 25, 2008 1:08 am</p><hr />
]]></content>
</entry>
</feed>