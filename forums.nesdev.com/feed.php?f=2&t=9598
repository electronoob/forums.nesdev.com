<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=9598" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2015-01-03T10:43:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=9598</id>
<entry>
<author><name><![CDATA[43110]]></name></author>
<updated>2015-01-03T10:43:49-07:00</updated>
<published>2015-01-03T10:43:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=138552#p138552</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=138552#p138552"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=138552#p138552"><![CDATA[
So for a dithering experiment I needed a lot of pseudo-random bytes but I felt that a 16 bit state space was too small. I found this thread and figured I could do a similar thing with the 32 bit Galois LFSR I was using at the time.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">rng_step_bit:     ; 26 to 27 cycles (+6 for rts)<br />  lda rand+3<br />  lsr<br />  ror rand+2<br />  ror rand+1<br />  ror rand+0<br />  bcc +<br />    eor #$a3<br />  +:<br />  sta rand+3<br />rts<br /></div><br /><br />And this is a byte version of the above using techniques hinted at by Drag. To use read rand+0 then call rng_step_byte.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">rng_step_byte:    ; 79 cycles (+6 for rts)<br />  lda #$00<br />rng_mix_byte:     ; 77 cycles (+6 for rts)<br />  eor rand+0      ; mix in input byte, and start<br />  sta rand+0      ; XORing this with the low byte<br />  asl             ; starting with x^30 term.<br />  asl<br />  asl<br />  asl<br />  eor rand+0      ; x^26 term<br />  asl<br />  eor rand+0      ; x^25 term<br />  asl<br />  eor rand+3      ; XOR with original low byte.<br />  sta rand+3<br />  lda rand+0      ; Again for the high byte.<br />  lsr             ; Start with x^25 term<br />  eor rand+0      ; x^26 term<br />  lsr<br />  lsr<br />  lsr<br />  lsr<br />  eor rand+0      ; x^30 term<br />  lsr<br />  lsr<br />  eor rand+0      ; x^32 term (or original high byte)<br />  ldy rand+1      ; finaly, rotate the bytes<br />  sty rand+0      ; if Y needs to be preserved<br />  ldy rand+2      ; stash A somewhere, then rotate<br />  sty rand+1      ; the bytes with A.<br />  ldy rand+3<br />  sty rand+2<br />  sta rand+3<br />rts<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6385">43110</a> — Sat Jan 03, 2015 10:43 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2012-12-20T15:13:13-07:00</updated>
<published>2012-12-20T15:13:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104968#p104968</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104968#p104968"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104968#p104968"><![CDATA[
A big advantage of an entirely-software RNG is repeatability, either when debugging or when you want to generate the same sequence again from just a seed (think of SimCity's random land generation and the three?-digit code you could get if you ever wanted that land formation again). It's also testably-reliable, whereas something depending on hardware might generate low-quality numbers in some circumstances.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Thu Dec 20, 2012 3:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[zzo38]]></name></author>
<updated>2012-12-20T14:22:47-07:00</updated>
<published>2012-12-20T14:22:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104964#p104964</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104964#p104964"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104964#p104964"><![CDATA[
I have used ARCFOUR, updated several times per frame, using the microphone for additional entropy, and initializing two of its parameters using the initial contents of RAM.<br /><br />I do not know how well it compare to whatever else is suggested in this forum.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4734">zzo38</a> — Thu Dec 20, 2012 2:22 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[bogax]]></name></author>
<updated>2012-12-14T11:49:24-07:00</updated>
<published>2012-12-14T11:49:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104695#p104695</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104695#p104695"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104695#p104695"><![CDATA[
<div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br /><div class="quotetitle">bogax wrote:</div><div class="quotecontent">Right no true scotsman would use a crappy generator  <img src="http://forums.nesdev.com/images/smilies/icon_razz.gif" alt=":P" title="Razz" /><br /></div><br />I'm not sure how this was a &quot;no true scotsman&quot; argument. If faced with a choice of XORing two 16 bit generators, or one equivalent 32 bit generator (or even a 24 bit generator), I believe you would find with empirical testing that the latter will give better results, and can be done with equivalent performance.</div><br /><br />Well, of course a better generator will be better than a crappy one, especially for sufficiently<br />broad definitions of better.<br />But that was meant as a rhetorical statement rather than an accusation.  So insofar as it<br />was an invitation to elaborate, perhaps it was a bit disingenuous of me not to have<br />elaborated a bit more myself.<br />If it sounded like an accusation, I apologize.<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br /><div class="quotetitle">bogax wrote:</div><div class="quotecontent">What's your idea of the alternative? (ie a better generator that's as simple and fast as an LFSR and an LCG)<br /></div><br />A 32 bit LFSR or LCG will give better 16-bit results than a 16 bit LFSR XORed with a 16 bit LCG.<br /></div><br /><br />I don't think any LFSR  of similar simplicity is going to be better though it may not be any<br />worse (I don't think that's likely but I haven't surveyed all the possibilities do you have<br />a candidate in mind?)<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br /><div class="quotetitle">bogax wrote:</div><div class="quotecontent"><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">it's a poor way to solve the problem of low-quality random numbers.<br /></div><br />Where do you get that idea?</div><br />The idea comes from my experience with random number generators used for a variety of purposes. I've tried this technique before and I call it a poor solution because I think you can get better results from a single generator of similar computational complexity.</div><br /><br />Again, if you've got a recommendation I'd love to hear it<br /><br /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><br />The reason I don't think XORing two generators together is that both signals have a periodicity that is much-much-much shorter than the equivalent single 32 bit generator. Even though they are interfering with each other via XOR, there are situations where both periods will show through this operation.<br /><br />There are also many situations where the difference doesn't matter, and it's not a big deal how you build your PRNG, but I'm talking about the case where all else is more or less equal, and if your goal is to produce a more uniform, less predictable PRNG, I think the XOR approach is a bad idea. There are better ways to improve the output of your PRNG for equivalent computational cost.<br /><br />I'm sorry to be dismissive of the idea, but this is my honest opinion of it.<br /></div><br /><br />If we were using some more objective criterion like which is best for monte carlo type<br />calcultions, I'd definitely agree with all you've said.<br />I think this is more a matter of taste. If it doesn't need to be random but only look random<br />(which might actually be less random)<br />here's some pictures that are meant to be illustrative not necessarily representative.<br />for one thing they only use 8 bits.  They all use the same LCG x'=x*17+103<br />top row are runs of 256 bottom row is 65280 (which is a full run of the 8 bit<br />LFSR-LCG combo)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3594">bogax</a> — Fri Dec 14, 2012 11:49 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Movax12]]></name></author>
<updated>2012-12-12T09:52:26-07:00</updated>
<published>2012-12-12T09:52:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104600#p104600</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104600#p104600"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104600#p104600"><![CDATA[
Even if the RNG is in the NMI, the RN is still going to be accessed at random based on input in most cases. Unless you can cause an event at the same frame everytime, it will seem random if the numbers are distributed well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4680">Movax12</a> — Wed Dec 12, 2012 9:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-12-12T09:03:03-07:00</updated>
<published>2012-12-12T09:03:03-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104595#p104595</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104595#p104595"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104595#p104595"><![CDATA[
Some commercial games update a random seed during wait-for-vblank as well, for which Dwedit had a heck of a time computing the exact result for PocketNES speed hacks. Ultimately the time between the end of the game logic and the next vblank is a complicated function of the entire game state, but it's still a function. Incrementing a seed while waiting for vblank is thus still a PRNG, providing no more entropy than any other way of hashing keypresses. I guess that lends credence to the concept of reading the controller dozens of times during menus with little or no animation going on, such as the title screen, to gather more entropy.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 12, 2012 9:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-12-12T09:18:01-07:00</updated>
<published>2012-12-12T08:41:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104593#p104593</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104593#p104593"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104593#p104593"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />I continuously clock the random number generator while waiting for VBlank.<br /></div><br />I'd just like to say that this is a pretty great idea. I wonder if you get could even get decent results just incrementing a variable by one during the vblank wait loop.  <img src="http://forums.nesdev.com/images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" /> I bet you could!<br />edit: <br />Heh. It's true. You can do pretty well! (Probably not well enough, though)<br /><img src="http://i.imgur.com/eb4Iw.png" alt="Image" /><br />This chart was made by solely incrementing $FF during the Vblank loop. Each pixel was made using the random number from each set of two consecutive frames.<br />Frame 1, frame 2 = point 1's x and y<br />Frame 3, frame 4 = point 2's x and y<br />etc.<br /><br />The very clear diagonal line was caused by me standing completely still. (I didn't have enemies or anything else too variable in the level I used to test, so the processing time was probably pretty stable.)<br /><br />Edit 2: Continuation of the same line:<br /><img src="http://i.imgur.com/VENC5.png" alt="Image" /><br />My game also has a bug which occasionally makes the game wait for a variable vblank sets rather than the vblank itself. (It halts the program so no new tiles are put into the buffer before the previous one have been updated by the NMI routine),  This caused the second diagonal line. <br /><br />Still, pretty interesting!<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Wed Dec 12, 2012 8:41 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2012-12-12T08:16:41-07:00</updated>
<published>2012-12-12T08:16:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104591#p104591</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104591#p104591"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104591#p104591"><![CDATA[
And I guess that's why commonly used error detection protocols use CRC (based on LFSR) rather than a linear congruential hash like the <a href="http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function" class="postlink">DJB hash</a>, right? Part of the drawback of the linear congruential structure is that high-order bits don't cascade back to low-order bits.<br /><br />DJB hash:<br />hash[0] = 5381<br />hash[i + 1] = (33 * hash[i] + data[i]) mod 2^n<br /><br />Why 33? It's a power of two plus or minus one (for quick multiplication) that's close to the number of letters in the Latin alphabet (for good distribution when used to hash strings).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Wed Dec 12, 2012 8:16 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-12-12T07:26:24-07:00</updated>
<published>2012-12-12T07:26:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104586#p104586</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104586#p104586"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104586#p104586"><![CDATA[
The picture that thefox got is the same that I'm getting using MSB.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Wed Dec 12, 2012 7:26 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2012-12-12T07:20:54-07:00</updated>
<published>2012-12-12T07:20:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104585#p104585</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104585#p104585"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104585#p104585"><![CDATA[
<div class="quotetitle">Shiru wrote:</div><div class="quotecontent"><br />I think I know how to explain the results: it simply produces very short repeating sequence, like 256 or something numbers. As my test array is 256x256, it simply can't produce enough variety to fill every possible position.<br /></div><br />I tried plotting this RNG, too, and got this picture:<br /><br />rng-xy.png<br /><br />The numbers were pulled in pairs of two (X and Y), so if you look at this picture carefully, it basically means that for any given value (0..255, in X axis) returned by the RNG there are only 5-6 different (sequential) values that may follow it, in other words it's very predictable.<br /><br />So it's not a good RNG.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Wed Dec 12, 2012 7:20 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2012-12-12T07:06:51-07:00</updated>
<published>2012-12-12T07:06:51-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104581#p104581</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104581#p104581"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104581#p104581"><![CDATA[
I often use quick and dirty random number generators, but to improve randomness I continuously clock the random number generator while waiting for VBlank. Since the time taken to process a frame is pretty random depending on which objects are active and all the actions the engine takes in different frames, that seems to work out well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Wed Dec 12, 2012 7:06 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-12-12T07:11:35-07:00</updated>
<published>2012-12-12T07:04:40-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104580#p104580</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104580#p104580"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104580#p104580"><![CDATA[
I just checked with GNU octave, and the RNG actually has a sequence of 65536 states, which means it is optimal for a 16-bit RNG (it could technically not get any better with 16-bit). It is also, of course, independant of the seed, since the loop goes through all possible states.<br /><br />I execute this script as a proof :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">x = 0;<br />for i=1:65537;  x(i+1) = bitand(x(i)*5 + 0x3611, 0xffff); end;<br />y = bitand(x, 0xff00) / 0x100;<br />% plot(y)<br />find(not(x))   % Print when the RNG rolls back to value '0'<br /><br />% Compute the probability of all 256 possible values<br /><br />for i=1:256; z(i) = length(find(not(y-i-1))); end;<br />plot(z)</div><br />It also shows that all values are almost equiprobable for the 8 MSBs.<br /><br />I don't know how you test the RNG, and how you use a bi-dimentional array for it. Would you share the details ? Thanks.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Dec 12, 2012 7:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-12-12T06:17:54-07:00</updated>
<published>2012-12-12T06:17:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104578#p104578</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104578#p104578"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104578#p104578"><![CDATA[
I tried various values for seed, they all give the same result.<br /><br />I think I know how to explain the results: it simply produces very short repeating sequence, like 256 or something numbers. As my test array is 256x256, it simply can't produce enough variety to fill every possible position.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Wed Dec 12, 2012 6:17 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2012-12-12T05:29:41-07:00</updated>
<published>2012-12-12T05:29:41-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104574#p104574</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104574#p104574"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104574#p104574"><![CDATA[
Have you put the right multiply and add constants ? Because I just tried to plot it in GNU octave, and it actually looks very random to me :<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">x = 1<br />for i=1:1000; x(i+1) = bitand(x(i)*5 + 0x3611, 0xffff); end<br />y = bitand(x, 0xff00) / 0x100<br />plot(y)<br /></div><br /><br />Pehaps there is other values that would work better than 5 and 0x3611, in fact I have no idea what makes these values work particularly well or not well. In any cases, it would not make the thing more complex or slower.<br /><br />PS : Oh I know ! What seed did you use ? I used 1, perhaps if you use another seed (such as 0) the sequence could be not random at all.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Wed Dec 12, 2012 5:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Shiru]]></name></author>
<updated>2012-12-12T02:48:08-07:00</updated>
<published>2012-12-12T02:48:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104569#p104569</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104569#p104569"/>
<title type="html"><![CDATA[Re: CRC routines as PRNGs]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=9598&amp;p=104569#p104569"><![CDATA[
I tried both LSB and MSB, the difference is subtle, MSB just gives more think lines on the picture, but it still does not look like random.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4205">Shiru</a> — Wed Dec 12, 2012 2:48 am</p><hr />
]]></content>
</entry>
</feed>