<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Graphics rendering on Japanese 8-bit PCs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Graphics rendering on Japanese 8-bit PCs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=23&amp;t=9458">http://forums.nesdev.com/viewtopic.php?f=23&amp;t=9458</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>noattack</b> [ Fri Nov 02, 2012 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been looking around for information on various Famicom games that were ported from earlier PC titles, specifically those made by Enix (Door Door, Portopia, etc.). Finding decent technical info (in English) on Japanese PCs is tough, but I have a question that likely applies to several Z80-based processors from that era.<br /><br />In <a href="https://www.youtube.com/watch?v=Qum6D8gSzWc" class="postlink">this YouTube clip</a> (skip to around 2:45) of Portopia on the NEC PC-6001/6601, graphics are drawn in a kind of 'vector-style' -- individual lines and shapes first, then color fills. It's remarkably slow compared to the NES. What is this rendering mode called? And what is the technical explanation for this technique? The <a href="http://ja.wikipedia.org/wiki/PC-8800%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA" class="postlink">Japanese wikipedia article</a> on the PC-8801 appears to have a paragraph explaining the slow drawing mode, but the English translation is too poor to figure out what's going on.<br /><br />Any info is appreciated. I don't know much about early PC capabilities.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Nov 02, 2012 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just call it &quot;line drawing and flood fills&quot;. Some Apple II graphical adventure games did the same thing.<br /><br />As for why it's so slow, I think programs had to wait for blanking time to modify VRAM. At least that's the gist I get from the following translated paragraph:<br /><div class="quotetitle">Google Translate wrote:</div><div class="quotecontent">For hardware specifications, such as the processing of the main CPU will suspend operation DMA cycle drawing of the text display (in the PC-8800 series is classified as old models to later), and graphics operating speed models of the above two Although slow and drawn, there was also &quot;fast mode&quot; is written to ignore the timing display to disable the display of the text screen, in real-time game that requires a response by the show, did not benefit from it.</div><br />Flood fills in Videomation are slow for the same reason.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Nov 02, 2012 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This kind of rendering is not specific to Japanese PCs, it was commonly used in old adventure games because a full screen image could be stored in very little space. Just a few LINE and PAINT commands were enough to draw something meaningful. However, the drawing routines needed to manipulate the display pixel by pixel, something that's fairly slow in systems with tiled displays. First they have to calculate the position of the tile where the pixel is, then read the byte where the pixel is, modify it and write it back.<br /><br />Of course there are techniques to speed things up, but it will still seem slow in these old computers/consoles. Tepples mentioned <a href="http://www.youtube.com/watch?v=nkGA1qDcL1k" class="postlink">Videomation</a> for the NES, but even <a href="http://www.youtube.com/watch?v=BEFsbDGE-4E" class="postlink">Art Alive</a> on the Genesis/MD is pretty slow when drawing things pixel by pixel.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Fri Nov 02, 2012 4:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's not clear from the blurb Tepples posted if this model PC allowed &quot;dirty writes&quot; to VRAM like the Commodore 64 did. On the C64 you could write to VRAM at any time, but doing so during the frame would produce snow on the display (or even incorrect tiles) because the CPU always won the bus conflict over the video unit. Meaning if the video generator was trying to figure out what color a pixel needed to be, but the CPU was accessing the VRAM bus at the same time, it'd see whatever was on the CPU data bus rather than what the ROM / RAM was trying to assert on the bus.<br /><br />This may be the &quot;Fast&quot; and &quot;Slow&quot; modes being referenced.<br /><br />Then again it does say something about disabling the display, which sounds more like forced blanking on the NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>noattack</b> [ Sat Nov 03, 2012 10:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">However, the drawing routines needed to manipulate the display pixel by pixel, something that's fairly slow in systems with tiled displays. </div><br /><br />So are most PCs of this era tile-based? I assumed each pixel was 'independent' since each could be filled with one of eight colors. And if they're tiled, how do they handle object movement without sprites? And I assume scrolling is limited or impossible? Maybe these are dumb questions, but I'm stuck in the NES PPU mentality, so I can't wrap my head around an alternative method of graphics rendering.<br /><br />Videomation looks rad.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sat Nov 03, 2012 11:05 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />They're bit mapped screen. It's just a huge buffer of X bytes, and then 1/2/4/8 bits make up one pixel across the whole screen. Want to move an object? You have to remove the object from the screen, replace the background, and then place the object at another place on the screen. Any more than a few objects and you'll be spanning stuff over multiple frames all the time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sat Nov 03, 2012 11:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some of them were tile-based, i.e. had a text mode with font in RAM. Sprites in these cases were moving by characters. Those that weren't tile-based had non-linear layout anyway, often bitpacked. This makes primitive drawing not very effective.<br /><br />ZX Spectrum video memory layout is one bright example: the screen consist three parts 256x64 pixels that are placed in the memory one by another (2048 bytes/third, 6144 bytes screen without color); each third has 32 bytes of the top scanline of the top characters row, then 32 bytes of the top scanline of the second characters row, after all rows the second scanline goes etc. <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=FdfJhTle8fg#t=24s" class="postlink">This</a> is how it looks if the video memory is filled byte by byte.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Nov 03, 2012 5:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another example of a popular computer without hardware sprites is the Amstrad CPC. A common solution used by games to implement free moving sprites was to use a low resolution screen mode with 16 colors, but instead of making use of all 16 colors they used 2 bits for the background and 2 for the sprites, so it was easy to manipulate them independently. The games looked pretty bad though (look at Ghouls 'n Ghosts, for example).<br /><br />But many other CPC games had sprites and scrolling without giving up on the number of colors, it was just harder to program, and involved a lot of bit masking.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Nov 04, 2012 3:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">On the C64 you could write to VRAM at any time, but doing so during the frame would produce snow on the display (or even incorrect tiles) because the CPU always won the bus conflict over the video unit.</div><br />Sorry but I don't think a bus conflict can happen on the C64. I don't know where you got this, but it's probably wrong. The memory acesses are interleaved between the CPU and the VIC-20. Which is why unfortunately the CPU is slow as hell (only ~1MHz).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>qbradq</b> [ Mon Nov 05, 2012 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Perhaps I misunderstood what the problem was. It's been a LONG time since I developed for C64 <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Mon Nov 05, 2012 11:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The memory acesses are interleaved between the CPU and the VIC-20</div><br />Right. Assuming that you mean the VIC-<em>II</em> <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /><br /><br />It looks something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6510 mem access<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __________________<br />&nbsp;clock&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ________________|<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VIC-II mem access<br /></div><br />Depending on the graphics mode, the VIC-II might need to fetch more data than it's able to do with the above scheme (for extra color data, sprite data, ...). In those situations it can take control of the bus by pulling the address enable control pin low(?), thereby preventing the 6510 from driving the address bus for as long as the VIC-II needs it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LocalH</b> [ Sat Nov 10, 2012 4:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not sure if it was a bus conflict or not, but on the 85xx VIC-II chips (including the VIC-IIe in the C128) a gray dot would appear on-screen when writing to $D020 or $D021 (and I would assume $D022 and $D023 as well, if the CPU is in a region of the screen where those registers are being displayed, such as with multicolor or extended background character modes)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sik</b> [ Mon Nov 12, 2012 9:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Looking at that video in the first post, I wouldn't be surprised if that game is made in BASIC, which is not really optimized for speed performance (I'd expect many additional checks and such, as well as bothering more to make the code smaller rather than faster). So in addition to whatever else was said here you need to factor in that.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Tue Nov 13, 2012 10:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Graphics rendering on Japanese 8-bit PCs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sik wrote:</div><div class="quotecontent">Looking at that video in the first post, I wouldn't be surprised if that game is made in BASIC, which is not really optimized for speed performance (I'd expect many additional checks and such, as well as bothering more to make the code smaller rather than faster). So in addition to whatever else was said here you need to factor in that.</div><br /><br />Agreed, Q(uick)B(asic) does the same thing. so does any early basic ending around until Visual Basic got released!<br /><br />If anything, the Earlier versions of the Basic languages is just a ''proving grounds'' for programmers to start, it tests how much they handle thier knowlage of program creation of any sort, back then it's just not suited for LONG or BIG Applications!<br /><br />People still create VERY short games for Basic, it's a Hobby.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>