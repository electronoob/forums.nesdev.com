<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=4251" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2008-07-24T13:34:07-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=4251</id>
<entry>
<author><name><![CDATA[electro]]></name></author>
<updated>2008-07-24T13:34:07-07:00</updated>
<published>2008-07-24T13:34:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=4251&amp;p=35253#p35253</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=4251&amp;p=35253#p35253"/>
<title type="html"><![CDATA[The code for the DrumAxe cartridge (see hardware).]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=4251&amp;p=35253#p35253"><![CDATA[
I posted some info about a custom controller I made called the DrumAxe in the hardware section of this forum: <!-- m --><a class="postlink" href="http://nesdev.com/bbs/viewtopic.php?t=4244">http://nesdev.com/bbs/viewtopic.php?t=4244</a><!-- m --><br /><br />Most of this code was given to me by people like Blargg, Tepples, Celius, Disch, and Tokumaru.<br /><br />Some people have mentioned possible enhancing/improving, modifying the code so I will post here so that if that happens we might learn from it.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Nes Gamepad demo program 4/28/08<br />;-------------------<br /><br />; INES header setup<br /><br /><br />   .inesprg 1<br />   .ineschr 0   ; zero because we don't have character data<br />   .inesmir 1<br />   .inesmap 0  <br /><br />   .bank 1<br />   .org $FFFA<br />   .dw 0       ; NMI routine<br />   .dw start    ; Reset routine<br />   .dw 0           ; IRQ routine<br /><br />   .bank 0<br />   .org $8000<br /><br />start:<br /><br />key_a      EQU   %00000001 ; A button press <br />key_b      EQU    %00000010 ; B <br />key_select     EQU    %00000100 ; select <br />key_start     EQU    %00001000 ; start <br />key_up     EQU    %00010000 ; up arrow <br />key_down     EQU    %00100000 ; down <br />key_left     EQU    %01000000 ; left arrow <br />key_right     EQU    %10000000 ; right<br /><br /><br />ab_pressed   EQU   %00000011 ; A and B are pressed <br />         <br />button_state    EQU     $00<br />button_state2   EQU   $0F<br /><br /><br />    sei        ; ignore IRQs<br />    cld        ; disable decimal mode<br />    ldx #$40<br />    stx $4017  ; disable APU frame IRQ<br />    ldx #$ff<br />    txs        ; Set up stack<br />    inx        ; now X = 0<br />    stx $2000  ; disable NMI<br />    stx $2001  ; disable rendering<br />    stx $4010  ; disable DMC IRQs<br /><br />vblankwait1:  <br />    bit $2002<br />    bpl vblankwait1<br /><br />    ; We now have about 30,000 cycles to burn before the PPU stabilizes.<br />    ; Use it to clear RAM.  X is still 0...<br />    txa<br />clrmem:      ; this is for the video stuff<br />    sta $000,x<br />    sta $100,x<br />    sta $200,x<br />    sta $300,x<br />    sta $400,x<br />    sta $500,x<br />    sta $600,x<br />    sta $700,x  ; Remove this if you're storing reset-persistent data<br />    inx<br />    bne clrmem<br />   <br />vblankwait2:<br />    bit $2002<br />    bpl vblankwait2<br /><br /><br />; *** CLEAR SOUND REGISTERS ***<br />   <br /><br />   lda #$00      ; clear all the sound registers by setting<br />   ldx #$00      ; everything to 0 in the Clear_Sound loop<br />Clear_Sound:<br />   sta $4000,x      ; store accumulator at $4000 offset by x<br />   inx         ; increment x<br />   cpx #$0F      ; compare x to $0F<br />   bne Clear_Sound      ; branch back to Clear_Sound if x != $0F<br /><br />   lda #$10      ; load accumulator with $10<br />   sta $4010      ; store accumulator in $4010<br />   lda #$00      ; load accumulator with 0<br />   sta $4011      ; clear these 3 registers that are <br />   sta $4012      ; associated with the delta modulation<br />   sta $4013      ; channel of the NES<br /><br /><br /><br />loop: <br />   jsr updatejoy<br /><br />   ;Check the state of the right key <br />   lda button_state <br />   and #key_right <br />   beq right_not_pressed <br />   jsr right_is_pressed <br /><br /><br />right_not_pressed: <br />    <br />   ;Check the state of the left button <br />   lda button_state <br />   and #key_left <br />   beq left_not_pressed <br />   jsr left_is_pressed <br /><br />left_not_pressed:<br /><br />   ;Check the state of the up arrow<br />   lda button_state<br />   and #key_up<br />   beq up_not_pressed<br />   jsr up_is_pressed<br /><br />up_not_pressed:<br /><br />   ;Check the state of the downss arrow<br />   lda button_state<br />   and #key_down<br />   beq down_not_pressed<br />   jsr down_is_pressed<br /><br />down_not_pressed:<br /><br /><br />   ;Check if A and B are pressed<br />   lda button_state<br /><br />   AND #$03  ; mask out A+B bits<br />   CMP #$03  ; see if it equals A+B<br />   BNE ab_not_pressed <br />   <br />   jsr ab_is_pressed<br /><br />ab_not_pressed: <br /><br />   ;Check if A is pressed<br />   lda button_state<br />   AND #key_a  ; mask out bits<br />   BEQ a_not_pressed <br />   jsr a_is_pressed<br /><br />a_not_pressed:<br /><br />   ;Check if b button is pressed<br />   lda button_state<br />   and #key_b<br />   beq b_not_pressed<br />   jsr b_is_pressed<br /><br />b_not_pressed:   <br /><br /><br />   ;Check if select button is pressed<br />   lda button_state<br />   and #key_select<br />   beq select_not_pressed<br />   jsr select_is_pressed<br /><br /><br />select_not_pressed:<br /><br /><br /><br />   ;Check if start button is pressed<br />   lda button_state<br />   and #key_start<br />   beq start_not_pressed<br />   jsr start_is_pressed<br /><br /><br />start_not_pressed:<br /><br /><br /><br />  ;Check State of Right Button of Joypad #2<br />   lda button_state2 <br />   and #key_right <br />   beq right_not_pressed_2 <br />   jsr right_is_pressed_2 <br /><br /><br /><br /><br />right_not_pressed_2:<br /><br /><br />   ;check state of A button of joypad #2<br />   lda button_state2<br />   AND #key_a  ; mask out bits<br />   BEQ a_not_pressed_2 <br />   jsr a_is_pressed_2<br /><br />a_not_pressed_2:   <br /><br /><br /><br /><br />   ;Check state of b button on joypad #2<br />   lda button_state2<br />   and #key_b<br />   beq b_not_pressed_2<br />   jsr b_is_pressed_2<br /><br /><br /><br />b_not_pressed_2:   <br /><br /><br />   <br />   ;Check the state of the left button of joypad #2 <br />   lda button_state2 <br />   and #key_left <br />   beq left_not_pressed_2 <br />   jsr left_is_pressed_2 <br /><br />left_not_pressed_2:<br /><br />   ;Check the state of the up arrow of joypad #2<br />   lda button_state2<br />   and #key_up<br />   beq up_not_pressed_2<br />   jsr up_is_pressed_2<br /><br />up_not_pressed_2:<br /><br />   ;Check the state of the up arrow of joypad #3<br />   lda button_state2<br />   and #key_down<br />   beq down_not_pressed_2<br />   jsr down_is_pressed_2<br /><br />down_not_pressed_2:<br /><br /><br /><br />   ;Check if select button is pressed<br />   lda button_state2<br />   and #key_select<br />   beq select_not_pressed_2<br />   jsr select_is_pressed_2<br /><br /><br />select_not_pressed_2:<br /><br /><br /><br />   jmp loop ;Go back and keep reading the joypad forever <br /><br /><br />updatejoy:<br /><br />    LDA #1         ; strobe joypad 1 <br />    STA $4016 <br />    LDA #0 <br />    STA $4016<br /><br />    LDX #$08             ; set X to 8 &#40;the number of times we want to loop, once fo each button&#41; <br />    <br /><br /><br />joybuttons: <br />    <br />    LDA $4016            ; get button state <br />    LSR A                ; shift it into the C flag <br />    ROR button_state     ; rotate C flag into our button_state variable <br /><br />    <br />    DEX                  ; decrement X &#40;our loop counter&#41; <br />    BNE joybuttons       ; jump back to our loop until X is zero <br />   <br /><br />   ; Begin reading joypad #2 and store bits in button_state2 variable.<br /><br /><br />    LDY #$08<br /><br />joybuttons2:<br /><br />    LDA $4017            ; get button state <br />    LSR A                ; shift it into the C flag <br />    ROR button_state2    ; rotate C flag into our button_state variable <br /><br />    <br />    DEY                  ; decrement X &#40;our loop counter&#41; <br />    BNE joybuttons2      ; jump back to our loop until Y is zero <br /><br /><br />    rts<br />      <br /><br />   <br /> <br />right_is_pressed: ; play sound when right arrow is pressed.<br /><br /><br />        lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />   <br />   lda #%00111101   ; mode, period<br />   sta $400E<br /><br />   lda #%0000000    ; duration<br />   sta $400F<br /><br />   <br /><br />   rts<br />   <br /><br />   <br />left_is_pressed:<br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />      <br />   lda #%00010101   ; mode, period<br />   sta $400E<br /><br />   lda #%10000000   ; duration<br />   sta $400F<br /><br />        rts<br /><br /><br /><br />up_is_pressed:<br /><br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />      <br />   lda #%00111111   ; mode, period  low rumble<br />   sta $400E<br /><br />   lda #%0000000    ; duration<br />   sta $400F<br /><br /><br />   rts<br /><br /><br />down_is_pressed:<br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />         <br />   lda #%00111110   ; mode, period<br />   sta $400E<br /><br />   lda #%11111000   ; duration<br />   sta $400F<br /><br />       <br />   <br />   rts<br /><br /><br /><br />a_is_pressed:<br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />   <br />   lda #%00010111   ; mode, period<br />   sta $400E<br /><br />   lda #%10000000   ; duration<br />   sta $400F<br />   <br />        <br />      <br /><br />   rts<br /><br /><br /><br /><br />b_is_pressed: <br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />      <br />   lda #%01011011   ; mode, period  low rumble<br />   sta $400E<br /><br />   lda #%00000000    ; duration<br />   sta $400F<br /><br />    <br />         <br /><br />        rts<br /><br /><br /><br />select_is_pressed:<br /><br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br /><br />   lda #%10111011   ; mode, period<br />   sta $400E<br /><br />   lda #%10101111    ; duration<br />   sta $400F<br /><br /><br />   rts<br /><br /><br />start_is_pressed:<br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />         <br />   lda #%11000011   ; mode, period<br />   sta $400E<br /><br /><br />   lda #%10101001   ; duration<br />   sta $400F<br /><br /><br />   rts<br /><br /><br />ab_is_pressed:<br /><br /><br />   rts<br /><br /><br /><br /><br />   ;JoyPad #2 subroutines below<br /><br />   <br /><br /><br />right_is_pressed_2:<br /><br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />   lda #%00100011   ; enable medium looping with a 1 at bit 5<br />   sta $400C<br /><br /><br />   rts<br /><br /><br /><br /><br /><br /><br /><br />left_is_pressed_2:<br /><br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />   lda #%00100111   ; enable medium/slow looping with a 1 at bit 5<br />   sta $400C<br /><br /><br /><br />   rts<br /><br /><br />up_is_pressed_2:<br /><br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />   lda #%00100001   ; enable fast looping with a 1 at bit 5<br />   sta $400C<br /><br /><br />   rts<br /><br /><br /><br />down_is_pressed_2:<br /><br /><br /><br />   lda #$0F       ; Enable channels<br />   sta $4015<br />   <br />   lda #%00101111   ; enable slow looping<br />   sta $400C<br /><br /><br />   rts<br /><br /><br /><br /><br />a_is_pressed_2:<br /><br /><br /><br />   rts<br /><br /><br /><br /><br />b_is_pressed_2:<br /><br /><br /><br />   rts<br /><br /><br /><br /><br />start_is_pressed_2:<br /><br /><br /><br />   rts<br /><br /><br /><br />select_is_pressed_2:<br /><br /><br />   jsr start    ; Resets sound to the beginning, clears sound registers:&#40;Stops the volume decay loop&#41;.   <br />   <br />   rts<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3477">electro</a> — Thu Jul 24, 2008 1:34 pm</p><hr />
]]></content>
</entry>
</feed>