<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Need Some Direction</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Need Some Direction</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1791">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=1791</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>random</b> [ Fri Jul 07, 2006 10:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Need Some Direction</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK, so I got this crazy ambition to write my own NES game (I love the NES and have some light programming experience), problem being I don't know where to go. I basically have this so far:
<br />
<br />- Need to learn 6502 ASM
<br />- Need to learn NES hardware, processors, etc.
<br />
<br />I've been to nesdev.com, but I don't have any clue as to where I should start. Its like a bunch of documents with no intro page.
<br />
<br />Someone really needs to make one...
<br />
<br />Can you suggest any documentation I need to consult first (everything seems so abstract right now)?
<br />
<br />Many thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Jul 07, 2006 11:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The big thing (besides learning 6502 like you mentioned), is understanding the PPU.  Try to get an idea of how the name tables and pattern tables work (viewing them in games running in an emulator's debugger can help, tho not many emus display the nametables).  I just find that it's a lot more fun when you can actually put results on the screen.  But stepping through code in a debugger might help (and you definitely will want to do that, when you have any code doing something you don't expect).
<br />
<br />Another thing is to learn how to understand hex and binary numbering.
<br />
<br />The programming section of the old NES Tech FAQ has some pretty decent introductory info.  <a href="http://nesdev.com/NESTechFAQ.htm#programming" class="postlink">http://nesdev.com/NESTechFAQ.htm#programming</a>
<br />
<br />There doesn't seem to be really a whole lot of basic info about how to get started with the NES.  A lot of it overlaps with doing microprocessor-type stuff in general, and with things like the PPU the really detailed docs are about the really obscure aspects of it (that probably almost none of the original NES game developers knew about, or needed to know about).
<br />
<br />I've always thought this doc is good, for reference about the registers, memory map, etc.
<br /><a href="http://nesdev.com/ndox200.zip" class="postlink">http://nesdev.com/ndox200.zip</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jul 08, 2006 12:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Learn a bit about tiles, nametables and attribute tables before learning coding by playing with Nesticle or FCEUltra would definitely be a good thing. I remember I got interested in NESdev by playing a lot with FF3 tiles in Nesticle. Nesticle is a totally outdated and innacurate emulator, but it allow the player to learn how the game deals with tiles, and this makes it a worthy emulator for newbies.
<br />
<br />Memblers : You definitely have to refresh the NESdev main page. I know it is annoying to refresh a website, my page about Chrono Trigger havent be updated since march 2005 and still show a notice for Chrono Trigger's ten years anniversary, even if the game now have almost 11.5 years. Anyway, I think my page is much less visited than yours.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jul 08, 2006 3:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nintendulator, in addition to being several times more accurate than Nesticle, is pretty good for watching pattern tables and nametables nowadays.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sat Jul 08, 2006 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">and this makes it a worthy emulator for newbies.</div>
<br />
<br />You must never have used FCEUXD
<br />
<br />
<br />There is no reason to suggest NESticle for debugging over FCEUXD -- FCEUXD has everything.  The only thing it lacks is a runtime CHR-ROM editor (though it does have a runtime hex editor).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Jul 08, 2006 10:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That was just why I say Nesticle is good to discover the PPU : It allow you to see tiles and edit them. FCEUXD, VirtuaNES and possibly Nintendulator allow pattern table viewing, but the pattern tables are too small to allow someone to really explore the tileset, and you don't get the tile # when clicking on one, and you cannot edit it.
<br />
<br />I think FCEUXD is good to for this purpose, but it doesn't really replace Nesticle.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Jul 08, 2006 10:52 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Disch wrote:</div><div class="quotecontent">(though it does have a runtime hex editor)</div>
<br />It has a runtime assembler... that's awesome!
<br />
<br />FCEUXD has way more stuff than Nesticle. The only thing Nesticle has that FCEUXD doesn't is the CHR editing, but that is pretty useless when it comes to debuging IMO... you can still easily spot a tile without having to draw an "X" over it...
<br />
<br />Anyway, i don't think this is such an inportant feature. beeing able to edit memory is much more usefull for someone to understand how things work.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>random</b> [ Sun Jul 09, 2006 10:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some questions now...
<br />
<br />How big can A be? For instance if I wanted to perform larger (&gt; 8-bits) calculations.
<br />
<br />I'm kind of hazy on how 6502 handles signed and unsigned numbers, explanation would be helpful. I'm getting the impression that it only has signed ones.
<br />
<br />How do you end a branch? The examples I'm reading go something like this:
<br />
<br />lda some_variable
<br />cmp some_other_variable
<br />beq exe_this_code
<br />(continue if false)
<br />
<br />exe_this_code
<br />(execute if true)
<br />
<br />But what if I want multiple branches?
<br />
<br />Seems like I'm asking a lot... Thanks again for answers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Sun Jul 09, 2006 11:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">random wrote:</div><div class="quotecontent">How big can A be?</div><br /><br />8-bits.  That's all.  No more, no less.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">For instance if I wanted to perform larger (&gt; 8-bits) calculations.</div><br /><br />This is what the C flag (carry flag) in the processor status register is for.  for example, if you want to add 2 16-bit numbers together, you'd add the low 8-bits of each together first, and then if the result was &gt;= $100, the C flag will be set, which will allow you to add it into the addition of the high 8-bits of each number.<br /><br />That explaination wasn't bery good.  Remeber that if C is set at the time of ADC, an extra 1 will be added to the sum:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">CLC ; clear carry initially<br /><br />; add low bytes together<br />LDA valueA_low<br />ADC valueB_low<br />STA sum_low&nbsp; &nbsp;; store the sum -- note that if the sum was &gt; $FF, C is set<br /><br />LDA valueA_hi<br />ADC valueB_hi<br />STA sum_hi<br /></div><br /><br />Consider you have the following 2 16-bit numbers that you want to add:<br />$0362<br />$04F3<br /><br />first you clear C (CLC) so the extra 1 won't be in your addition... then you add the low bytes of the numbers together:<br />$62 + $F3 = $55  &lt;-- note that the sum is $55 and not $155 (because it can only be 8-bits).  However because it was greater than $FF, C is now set.<br /><br />So now you add the high bytes together:  $03 + $04 = $08  &lt;---  note that it's $08 because C is set by the previous addition, so the extra 1 got added.<br /><br />therefore... $0362 + $04F3 = $0855.<br /><br /><br />C works in a similar fashion for multi-byte ASL/ROL/LSR/ROR commands.  And works "backwards" for SBC, but the same logic applies.[/quote]<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm kind of hazy on how 6502 handles signed and unsigned numbers, explanation would be helpful. I'm getting the impression that it only has signed ones.</div><br /><br />Well, it doesn't handle them at all really.  In fact, if anything I'd say the numbers are all unsigned.<br /><br />What really makes a number signed or unsigned is how your program treats it.  The processor doesn't care one way or the other.  $FF can be either 255 or -1.... the processor will always treat it the same regardless -- what matters is how your program works with the number.<br /><br />There is a "N" flag in the processor status reg, which will be set if the result of the last operation was negative and cleared if the result was positive.  All "negative" really means here is "the high bit is set".  For this purpose, $00-7F are all "positive" numbers, and $80-FF are all "negative".  However, again, the processor doesn't treat them any differently if they're positive or negative.... it kind of treats them all like they're positive ($80 + $80 will give you 256, not -256)<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How do you end a branch?</div><br /><br />Branches behave just like jumps, only they will only jump under certain conditions.  The condition is the current status of a status flag.  Usually you will work with BNE, BEQ, BCC, and BCS.<br /><br />BNE will jump if and only if the Z status flag is clear<br />BEQ will jump if and only if the Z status flag is set<br />BCC will jump if C is clear<br />BCS will jump is C is set<br /><br /><strong>HOW</strong> these flags gets set is determined by the instruction(s) before the branch.<br /><br />Therefore in your examples:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">lda some_variable<br />cmp some_other_variable<br />beq exe_this_code</div><br /><br /><br />that CMP instruction is comparing two values.  CMP will set Z if the values equal each other, and will clear Z if the values do not equal each other.  If you want to get into details, CMP actually performs a subtraction, and Z is set to the result of that subtraction -- and if the two numbers equal each other, the result is Zero, so Z is set.  If the result is nonzero (the numbers don't equal each other), Z will be clear.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$03&nbsp; &nbsp;; Z=clear<br />CMP #$03&nbsp; ; Z=set &#40;3-3 = 0 -- a result of 0 = Z set&#41;<br />BEQ somewhere&nbsp; ; jump to 'somewhere' only if Z is set &#40;which it was set by last instruction&#41;<br /><br />LDA #$00&nbsp; ; value of $00 = Z set<br />BNE somewhere&nbsp; ; this will not jump anywhere because Z is set by above LDA<br />BEQ somewhere&nbsp; ; this WILL jump because Z is set by previous LDA<br /></div><br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But what if I want multiple branches?<br /></div>
<br />
<br />You can branch as many times as you want, there's no limit.  Remember that all the branches look at is the status flags, so to really understand branches, you have to understand how the status flags are set.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 09, 2006 11:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you want to check for multiple cases you could do a CMP and a branch for each one. Preferably with the most probable cases first, so that the program doesn't get too slow.
<br />
<br />To work with numbers larger than 8 bits, you make use of the carry flag. This code does a 16-bit addition:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;;clear the carry so that you don't add an unwanted &quot;1&quot;<br />&nbsp; &nbsp;lda VarLo&nbsp; &nbsp;;take the low byte of a variable<br />&nbsp; &nbsp;adc #&lt;657&nbsp; &nbsp;;add the low byte of the number &quot;657&quot;<br />&nbsp; &nbsp;sta VarLo&nbsp; &nbsp;;the low byte is ready to be stored back, but if the result was more than 255, the carry will be set<br />&nbsp; &nbsp;lda VarHi&nbsp; &nbsp;;load the high byte of the variable<br />&nbsp; &nbsp;adc #&gt;657&nbsp; &nbsp;;add the high byte of the number &quot;657&quot; and a possible &quot;1&quot; if there was an overflow in the low byte<br />&nbsp; &nbsp;sta VarHi&nbsp; &nbsp;;store the final high byte</div>
<br />
<br />You just have to clear the carry (or set it, if you are subtracting) before adding the first pair of bytes, and then add each of the following pairs at a time, from the least significant one to the most significant one. The carry flag will take care of propagating any carry, and you'll get the correct answer at the end.
<br />
<br />The 6502 can handle signed and unsigned numbers. Although there is no difference between them until you perform some sort of calculation or comparison on them. The hex value $FF can be a decimal 255 or a -1. It's up to how you interpret the number.
<br />
<br />Addition and subtraction of signed and unsigned numbers is the same, there is not a single difference, but depending on whether you consider the numbers signed or unsigned, you have to interpret the result differently. BPL and BMI are used to check for a negative or positive result, of course, if you are using signed numbers. BCC and BCS can be used to find wich of two unsigned numbers is larger.
<br />
<br />When you compare 2 numbers, the rule is: If they are signed, use BPL and BMI, if they are unsigned, use BCC and BCS.
<br />
<br />Also, when working with signed numbers larger than 1 byte, only the last (most significant) byte should be considered signed. You could get a little confused with this. I was when I first started studying ASM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>random</b> [ Sun Jul 09, 2006 1:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So if I understand correctly, signed and unsigned numbers are interpreted by you and determined with the N and C flags, right?
<br />
<br />Pretty much understanding the other stuff. Any source I can get my hands on (probably help a lot in the learning process)?
<br />
<br />Thanks for the explanations.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jul 09, 2006 1:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">If you want to check for multiple cases you could do a CMP and a branch for each one. Preferably with the most probable cases first, so that the program doesn't get too slow.</div>
<br />Or you can divide them in half with BCC/BCS and make what is essentially a binary search tree. Or you can use a jump table like Super Mario Bros., Tetris, and the Apple IIGS ROM do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Jul 09, 2006 4:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Or you can divide them in half with BCC/BCS and make what is essentially a binary search tree. Or you can use a jump table like Super Mario Bros., Tetris, and the Apple IIGS ROM do.</div><br />I like jump tables myself, but the binary search is a nice option too. I never ran into a case where I needed to perform a huge lot of compares anyway. When I said what I did I was thinking about 3 or 4 cases... simple stuff.<br /><br /><div class="quotetitle">random wrote:</div><div class="quotecontent">So if I understand correctly, signed and unsigned numbers are interpreted by you and determined with the N and C flags, right?</div>
<br />Yes, the processor doen't care whether the numbers are signed or unsined, 8-bit, 16-bit, 24-bit or whatever... it just does the operations it's supposed to and sets the flags (N and C) accordingly. If you are gonna store the results or not, if you are gonna use the flags (and how) or not, it's all up to you.
<br />
<br />EDIT: About the source code, <a href="http://www.6502.org/" class="postlink">http://www.6502.org/</a> has plenty of general 6502 examples. The main page of NESDEV has some good NES-specific code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Jul 09, 2006 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I like jump tables myself, but the binary search is a nice option too. I never ran into a case where I needed to perform a huge lot of compares anyway. When I said what I did I was thinking about 3 or 4 cases... simple stuff.</div>
<br />It just called to mind the horror of the CMP linear search that I found in a disassembly of the control-character processing in Higher Text II, a text rendering library for Apple II.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>random</b> [ Sun Jul 09, 2006 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm having trouble understanding how the program counter and relative addressing works in relation with JMP and the various branch functions. Any help, is again appreciated.
<br />
<br />Many thanks.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>