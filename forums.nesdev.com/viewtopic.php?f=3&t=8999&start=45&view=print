<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Multithreaded emu designs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Multithreaded emu designs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8999">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8999</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>4</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamburgler</b> [ Wed Jun 27, 2012 5:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very interesting work! I'm currently toying with preemptive threading on my own code (pthreads/osx/c++/opengl) so this thread has been particularly interesting to me. I would have figured preemptive would win but these results are hard to argue with.
<br />
<br />A few questions:
<br />
<br />1) What OS is this running under? Or more specifically, what preemptive threading model are you using?
<br />
<br />2) How many processor cores were available to the program?
<br />
<br />3) How many threads did you use? Would you expect the results to change as you add more threads for things like the APU?
<br />
<br />4) What optimization level did you use when compiling the code? Have you tried optimizing for size vs speed?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Wed Jun 27, 2012 7:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Do you have numbers for a non-multithreaded version?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Jun 27, 2012 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />&gt; 1) Put register writes in a FIFO queue and have the ppu pull them out and apply them as it runs, rather than having to switch/sync up on every write.
<br />
<br />My prediction: it helps out preemptive a little-to-fair bit, but hurts cooperative (timestamp computation and choosing whether to use FIFO or direct read all the time will be painful.)
<br />
<br />I see that the frame rate is identical between Balloon Fight and SMB despite the thread switching increasing by over 40x. This says to me that at the levels you are getting with NES emulation, that cothreading's overhead is negligible.
<br />
<br />&gt; That's ~11 context switches per frame. Not far from my estimate XD.
<br />
<br />That is really interesting that thread switching is so low on NES. I have to say, I never bothered to count the switch counts at all on anything but SNES. But I will say there, SNES is very very very much worse. I've seen 200,000 - 4,000,000 syncs a second there (you can have three CPUs, two PPUs and a DSP.) Your test data basically confirms that there's no point in a preemptive bsnes. So that's one more reason I really appreciate you putting this together.
<br />
<br />Preemptive can definitely help emulators, but only at much less fine scales. It's a balance between the amount of time spent emulating to amount of time spent switching. NES is so trivial that your cache stalls and sync primitives are much more computationally expensive. PS2+ would obviously be a different story, plus later systems don't need as fine-grained syncing.
<br />
<br />&gt; 2) Detect common $2002 spin loops and run the PPU ahead until $2002 status changes.
<br />
<br />Ooooh, that sounds wild. Snes9X tried that with SA-1 sync loops, and it ended up needing to be disabled in every other game. Very tricky to get something like that 100% right.
<br />
<br />&gt; Do you have numbers for a non-multithreaded version?
<br />
<br />A state machine design would have to be a completely separate emulator, unfortunately.
<br />It would also be quite difficult to do a precise measurement, because the syncing point style would be totally different, but you could get fairly close.
<br />
<br />It's hard to say in this case, given those amazingly low sync counts, I'd be tempted to say it'd be faster than a state machine, at least in Balloon Fight. But generally, for most emulators, cothreading will be slower. You would only use cothreading because it makes the code *substantially* cleaner and and less error prone (not hyperbole; you basically remove the state machine entirely yet gain effectively infinite precision to break out anywhere transparently), as I'm sure anyone who's tried it will attest.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Jun 27, 2012 8:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Hamburgler wrote:</div><div class="quotecontent">1) What OS is this running under? Or more specifically, what preemptive threading model are you using? </div><br /><br />Win7 Home premium.  Emu is written in C++ with Boost for threading.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) How many processor cores were available to the program? </div><br />Intel i3, Dual core, hyperthreaded.  So 4 "cores" (technically 2 cores with 2 threads each). 3.2 Ghz<br /><br />(I realize that ~230 fps in an nes emu is pretty poor performance for this processor, but I am emulating as many of the nitty gritty details as possible).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">How many threads did you use? Would you expect the results to change as you add more threads for things like the APU? </div><br /><br />2.  PPU and CPU.  There is no APU implementation yet.  I didn't want to get too far with development until I had an idea on performance.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4) What optimization level did you use when compiling the code? Have you tried optimizing for size vs speed?</div><br /><br />I didn't really stray from the default "Release" settings in Visual Studio.<br /><br /><br /><br /><div class="quotetitle">James wrote:</div><div class="quotecontent">Do you have numbers for a non-multithreaded version?</div><br /><br />Nope.  As byuu mentioned, that would require an entirely separate emulator.<br /><br /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I see that the frame rate is identical between Balloon Fight and SMB despite the thread switching increasing by over 40x. This says to me that at the levels you are getting with NES emulation, that cothreading's overhead is negligible. </div><br /><br />I interpretted it the same way, which is why I'm pretty sure I'm going to gut out the preemptive support and switch to cooperative exclusively.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">That is really interesting that thread switching is so low on NES.</div><br /><br />I'm not surprised at all.  There's very little communication between CPU and PPU usually.<br /><br />It's not always the case, though.  Games like Rad Racer do a lot of mid-frame scroll changes, so sync ups will be more frequent there.  But I still suspect that $2002 polling is the biggest culprit.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Your test data basically confirms that there's no point in a preemptive bsnes. So that's one more reason I really appreciate you putting this together. </div><br /><br />Yeah after seeing this I wouldn't consider it for a SNES emu either.<br /><br />I'm glad it's appreciated.  Really this is more of an exercise and curiosity rather than a practicality, but I'm glad it has some value apart from that.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ooooh, that sounds wild. Snes9X tried that with SA-1 sync loops, and it ended up needing to be disabled in every other game. Very tricky to get something like that 100% right. </div>
<br />
<br />It's not very complicated at all on the NES.  I'd probably just look for one of the following templates on $2002 reads:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">loop:<br />&nbsp; LDA $2002<br />&nbsp; AND #xx<br />&nbsp; Bxx loop<br /><br />; and...<br /><br />loop:<br />&nbsp; BIT $2002<br />&nbsp; Bxx loop<br /><br />; and possibly...<br /><br />loop:<br />&nbsp; LDA $2002<br />&nbsp; ASL A<br />&nbsp; Bxx loop<br /></div>
<br />
<br />If I don't find those exact templates, I'd just sync up the PPU normally.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Jun 27, 2012 8:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another template with a fail-safe inside can be found in some of my own projects:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">s0wait:<br />&nbsp; BIT $2002<br />&nbsp; BMI skip_rastereffect&nbsp; ; we missed sprite 0 entirely this frame<br />&nbsp; BVC s0wait</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Disch</b> [ Wed Jun 27, 2012 9:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually, now that I've mulled over the details... I've decided I'm not going to bother with those optimization attempts.  I doubt they would push preemptive over where cooperative already is, and they would severely complicate the code.
<br />
<br />So I'm going to call an end to the experiment.  Switch to cooperative exclusively, and continue on the emulator.
<br />
<br />
<br />It was fun and informative though!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>James</b> [ Thu Jun 28, 2012 7:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">You would only use cothreading because it makes the code *substantially* cleaner and and less error prone (not hyperbole; you basically remove the state machine entirely yet gain effectively infinite precision to break out anywhere transparently), as I'm sure anyone who's tried it will attest.</div>
<br />It really is an intuitive method for writing an emulator.  I don't know if yours is the first implementation, but I learned about this method from your posts a few years ago, so you get the credit; nice job!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Thu Jun 28, 2012 6:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh, before I forget ... I actually did have an interesting multithreading idea for an SNES PPU renderer (there, the PPU is an absolute beast.)
<br />
<br />For a scanline renderer, instead of blitting one line at a time ... cache the MMIO registers to a "line" buffer, and do this for the entire frame, under the knowledge that VRAM isn't writable, and OAM isn't supposed to be (only one game does it anyway.) You could pack the state down to ~50 bytes per scanline, plus possibly extra for palette changes (store as patches for each change, start with the CGRAM copy at start of frame.)
<br />
<br />Now when you go to render the entire frame at once, use OpenMP (or better to roll your own lighter weight version; OpenMP has crazy overhead) to split up the scanlines.
<br />
<br />The thing with OpenMP is that it's almost always slower than non-OpenMP, except when things get really intense. Like for instance, it really helps with my HQ2x graphics filter, but it tends to hurt a simple 2X bilinear interpolation scale.
<br />
<br />The idea probably won't work as well on the NES, since that tends to demand a cycle-based renderer for a lot more than just one game.
<br />
<br />But even with one thread, having all that code running in a tight loop with no contextual changes should lead to a nice performance boost by way of caching.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>sktsqrl</b> [ Sat Jun 30, 2012 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Has anyone tried User-Mode Scheduling <!-- m --><a class="postlink" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd627187">http://msdn.microsoft.com/en-us/library ... p/dd627187</a><!-- m --> for an emulator project, or aware of someone else doing it?
<br />It seems to be the way to have the advantages of cooperative threading with multicore backing.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>4</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>