<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - BS-X Satellaview Datapak's</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">BS-X Satellaview Datapak's</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=14493">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=14493</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Tamanegi_taro</b> [ Sun Jul 10, 2016 5:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just dumped vendor info off my packs.<br />All my packs are Type 1 with 8M memory（０ｘ１A) too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LuigiBlood</b> [ Fri Jul 22, 2016 9:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How did I miss this?<br /><br />Also nice catch about the Type 7. That might be cool to detect when the dump is from a ROM instead of Flash, I guess.<br /><br /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">bsnes emulates the type 2 flash chip, I guess because it's the simplest protocol to emulate. But one of the third-party forks (not mine) changed it to emulate the type 1 instead, claiming that the code (in games, not the emulator) for type 2 was obviously buggy/broken and that type 1 worked better with certain games (I think the ~Tsukuru games might have been the ones that didn't seem to like type 2, according to this fork author)</div>I'm the author of that. And Type 1 is much simpler to emulate than Type 2. I don't get why byuu decided to emulate Type 2 instead.<br /><br />Also it should be known that a lot of commands were tested, including undocumented ones by ikari_01: <!-- m --><a class="postlink" href="http://wiki.superfamicom.org/snes/show/Memory+Pack+Commands">http://wiki.superfamicom.org/snes/show/ ... k+Commands</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Fri Jul 22, 2016 10:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I emulated type 2 because that was all the information that was available when I did it. It was just one crappy .txt file filled with ???s everywhere.<br /><br />I haven't touched the BS-X Satellaview code in probably seven years now. If I ever get back to working on it, obviously I'll use type 1 because I don't even think type 2 exist.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Fri Aug 19, 2016 6:07 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Got some BSX hardware donated from skaman: An Itoi Bass No1 cart, a BSX BIOS cart, and a FLASH memory pak.<br />First of, the FLASH chip pinout (as from datasheet, and with the datapak slot connector pins in right column):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LH28F800SUT FLASH CHIP<br />&nbsp; 1 3V/5V&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.34<br />&nbsp; 2 /CE1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.51<br />&nbsp; 3 NC (A21)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.50<br />&nbsp; 4 NC (A20)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.48<br />&nbsp; 5 A19&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.46<br />&nbsp; 6 A18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.44<br />&nbsp; 7 A17&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.42<br />&nbsp; 8 A16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.40<br />&nbsp; 9 VCC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.31,32<br />&nbsp; 10 A15&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.38<br />&nbsp; 11 A14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.29<br />&nbsp; 12 A13&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.35<br />&nbsp; 13 A12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.11<br />&nbsp; 14 /CE0 (GNDed)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.1,2,61,62<br />&nbsp; 15 VPP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.30&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;--<br />&nbsp; 16 /RP (reset/powerdown)&nbsp; &nbsp;cn.47<br />&nbsp; 17 A11&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.41<br />&nbsp; 18 A10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.43<br />&nbsp; 19 A9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.39<br />&nbsp; 20 A8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.37<br />&nbsp; 21 GND&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.1,2,61,62<br />&nbsp; 22 A7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.13<br />&nbsp; 23 A6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.15<br />&nbsp; 24 A5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.17<br />&nbsp; 25 A4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.19<br />&nbsp; 26 A3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.21<br />&nbsp; 27 A2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.23<br />&nbsp; 28 A1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.25<br />&nbsp; ---<br />&nbsp; 29 NC<br />&nbsp; 30 NC<br />&nbsp; 31 /BYTE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;--<br />&nbsp; 32 A0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.27<br />&nbsp; 33 D0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.3<br />&nbsp; 34 D8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;--<br />&nbsp; 35 D1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.5<br />&nbsp; 36 D9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.58<br />&nbsp; 37 VCC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.31,32<br />&nbsp; 38 D2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.7<br />&nbsp; 39 D10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.56<br />&nbsp; 40 D3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.9<br />&nbsp; 41 D11&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.54<br />&nbsp; 42 GND&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.1,2,61,62<br />&nbsp; 43 VCC&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.31,32<br />&nbsp; 44 D4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.4<br />&nbsp; 45 D12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.53<br />&nbsp; 46 D5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.6<br />&nbsp; 47 D13&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.55<br />&nbsp; 48 GND&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.1,2,61,62<br />&nbsp; 49 D6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.8<br />&nbsp; 50 D14&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.57<br />&nbsp; 51 D7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cn.10<br />&nbsp; 52 D15&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.59<br />&nbsp; 53 RDY/BSY (ready/busy)&nbsp; &nbsp; cn.12&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;--<br />&nbsp; 54 /OE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.14<br />&nbsp; 55 /WE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.16<br />&nbsp; 56 /WP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cn.18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;--<br /></div><br />The newly discovered pins are VPP, /BYTE, RDY/BSY, /WP, and D8-D15 (which formerly haven't been known if/where they were mapped on the datapak slot). Accordingly, the update datapak slot pinout is as so (btw. mechanically, the connector resembles a 50pin Compact Flash connector, with same 1.27mm pin pitch, but with 62 pins instead of 50 pins):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BSX Datapak Slot<br />&nbsp; 1 GND<br />&nbsp; 2 GND<br />&nbsp; 3 D0<br />&nbsp; 4 D4 (with cap to gnd)<br />&nbsp; 5 D1 (with cap to gnd)<br />&nbsp; 6 D5<br />&nbsp; 7 D2<br />&nbsp; 8 D6<br />&nbsp; 9 D3<br />&nbsp; 10 D7<br />&nbsp; 11 A12<br />&nbsp; 12 RDY/BSY (NC) (connected in BSX-BIOS cart)<br />&nbsp; 13 A7<br />&nbsp; 14 /RD via 33 ohm R2<br />&nbsp; 15 A6<br />&nbsp; 16 /WR via 33 ohm R3&nbsp; &nbsp; &nbsp; (VCC in SA1)<br />&nbsp; 17 A5<br />&nbsp; 18 /WP (VCCed)<br />&nbsp; 19 A4<br />&nbsp; 20 -&nbsp; &nbsp; &nbsp;(in FLASH cart: via 47kohm R1 to VCC)<br />&nbsp; 21 A3<br />&nbsp; 22 via R4 to VCC (47kOhm) (NC in mempak)<br />&nbsp; 23 A2<br />&nbsp; 24 via R5 to GND (47kOhm) (NC in mempak)<br />&nbsp; 25 A1<br />&nbsp; 26 via R6 to GND (47kOhm) (NC in mempak)<br />&nbsp; 27 A0<br />&nbsp; 28 -&nbsp; &nbsp; &nbsp;(in FLASH cart: via 47kohm R2 to VCC)<br />&nbsp; 29 A14<br />&nbsp; 30 VPP (5V)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(GND in SA1)<br />&nbsp; 31 VCC (5V or 3.3V)<br />&nbsp; 32 VCC (5V or 3.3V)<br />&nbsp; 33 via R7 to VCC (47kOhm) (NC in mempak)<br />&nbsp; 34 3V/5V (GNDed=5V)<br />&nbsp; 35 A13<br />&nbsp; 36 REFRESH&nbsp; &nbsp; to SNES.pin.33<br />&nbsp; 37 A8<br />&nbsp; 38 A15 rom&nbsp; &nbsp; &nbsp;SNES.A16 SNES.pin.41<br />&nbsp; 39 A9<br />&nbsp; 40 A16 rom&nbsp; &nbsp; &nbsp;SNES.A17 SNES.pin.42<br />&nbsp; 41 A11<br />&nbsp; 42 A17 rom&nbsp; &nbsp; &nbsp;SNES.A18 SNES.pin.43<br />&nbsp; 43 A10<br />&nbsp; 44 A18 rom&nbsp; &nbsp; &nbsp;SNES.A19 SNES.pin.44<br />&nbsp; 45 SYSCK&nbsp; &nbsp; &nbsp; &nbsp;SNES.pin57 (and via R1 to SNES.pin.2 EXPAND) (100 ohm)<br />&nbsp; 46 A19 rom&nbsp; &nbsp; &nbsp;SNES.A20 SNES.pin.45<br />&nbsp; 47 /RESET&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (or VCC in some cart/slots)<br />&nbsp; 48 A20 rom&nbsp; &nbsp; &nbsp;SNES.A21 SNES.pin.46<br />&nbsp; 49 -<br />&nbsp; 50 A21 rom&nbsp; &nbsp; &nbsp;SNES.A23 SNES.pin.48 (NOT SNES.A22 !!!)<br />&nbsp; 51 /CS (from MAD-1A.pin1, SA1.pin81, MCC-BSC.pin23)<br />&nbsp; 52 /BYTE (GNDed) (VCC in SA1 carts)<br />&nbsp; 53 D12 (NC)<br />&nbsp; 54 D11 (NC)<br />&nbsp; 55 D13 (NC)<br />&nbsp; 56 D10 (NC)&nbsp; &nbsp; &nbsp;... pins here are D8-D15 (on PCBs with 16bit databus)<br />&nbsp; 57 D14 (NC)<br />&nbsp; 58 D9&nbsp; (NC)<br />&nbsp; 59 D15 (NC)<br />&nbsp; 60 D8&nbsp; (NC)<br />&nbsp; 61 GND<br />&nbsp; 62 GND<br /></div><br />For the Itoi cart (with SA1 chip), writing to FLASH/ROM isn't supported: VPP is GNDed (no programming voltage), and /WR is VCC (no write signal at all, not even for issuing the FLASH chip detect commands). There's also another PCB with SA1 and datapak slot, but I haven't checked (the PCB photos) yet to see if they are wired the same way... there's a small chance that it could support flash writing (but it's also quite possible that the SA1 chip can't output /WR signals for the FLASH/ROM area at all). Apropos, small update to some SA1 pins:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; SA1 pins<br />&nbsp; ...<br />&nbsp; 80 ROM./CS0.A22&nbsp; &nbsp; (pin12=/CS in Itoi, pin1=A22 in Derby)<br />&nbsp; 81 ROM./CS1&nbsp; &nbsp; &nbsp; &nbsp; (datapak in Itoi)<br />&nbsp; 82 GND?<br />&nbsp; 83 VCC<br />&nbsp; 84 GND?<br />&nbsp; 85 GND-or-VCC&nbsp; &nbsp; &nbsp;;GND in Derby, VCC in Itoi (maybe related to 1-2 rom chips)<br />&nbsp; ...<br /></div><br />The Derby cart uses pin80 as A22 (for ROMs with up to 8MByte; although the Derby ROM isn't actually that large) (and doesn't use any /CS and /OE pins; the ROM's /CS and /OE are just GNDed).<br />The Itoi cart uses pin80/pin81 as ROM and FLASH chip selects (and also has ROM /OE GNDed). And pin85 is wired differently, maybe switching between 8MB and 2x4MB ROM mode (although, /CS0 and A22 should be always low for first 4MB, so there's no real difference... unless the timing for outputting /CS0 and A22 is slightly different).<br /><br />---<br /><br />And, the MCC-BSC chip pinout (memory controller in BSX BIOS cart):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MCC-BSC<br />&nbsp; 1&nbsp; D7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;snes.53<br />&nbsp; 2&nbsp; CIC1&nbsp; &nbsp; &nbsp; &nbsp;snes.55<br />&nbsp; 3&nbsp; CIC2&nbsp; &nbsp; &nbsp; &nbsp;snes.25<br />&nbsp; 4&nbsp; CIC3&nbsp; &nbsp; &nbsp; &nbsp;snes.56<br />&nbsp; 5&nbsp; CIC0&nbsp; &nbsp; &nbsp; &nbsp;snes.24<br />&nbsp; 6&nbsp; GND<br />&nbsp; 7&nbsp; /WR&nbsp; &nbsp; &nbsp; &nbsp; snes.54 via R8 (33 ohm)<br />&nbsp; 8&nbsp; /IRQ&nbsp; &nbsp; &nbsp; &nbsp;snes.18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for /FLASH.BSY<br />&nbsp; 9&nbsp; A23&nbsp; &nbsp; &nbsp; &nbsp; snes.48<br />&nbsp; 10 A22&nbsp; &nbsp; &nbsp; &nbsp; snes.47<br />&nbsp; 11 A21&nbsp; &nbsp; &nbsp; &nbsp; snes.46<br />&nbsp; --<br />&nbsp; 12 A20&nbsp; &nbsp; &nbsp; &nbsp; snes.45<br />&nbsp; 13 A19&nbsp; &nbsp; &nbsp; &nbsp; snes.44<br />&nbsp; 14 A18&nbsp; &nbsp; &nbsp; &nbsp; snes.43<br />&nbsp; 15 A17&nbsp; &nbsp; &nbsp; &nbsp; snes.42<br />&nbsp; 16 A16&nbsp; &nbsp; &nbsp; &nbsp; snes.41<br />&nbsp; 17 GND<br />&nbsp; 18 A15&nbsp; &nbsp; &nbsp; &nbsp; snes.40<br />&nbsp; 19 A14&nbsp; &nbsp; &nbsp; &nbsp; snes.39<br />&nbsp; 20 A13&nbsp; &nbsp; &nbsp; &nbsp; snes.38<br />&nbsp; 21 A12&nbsp; &nbsp; &nbsp; &nbsp; snes.37<br />&nbsp; 22 REFRESH&nbsp; &nbsp; snes.33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;why?<br />&nbsp; --<br />&nbsp; 23 /ROM.CS&nbsp; &nbsp; rom.26 (aka rom.22)<br />&nbsp; 24 /PSRAM.CS&nbsp; psram.22<br />&nbsp; 25 /FLASH.WE&nbsp; mempak.16<br />&nbsp; 26 /PSRAM.OE&nbsp; psram.24<br />&nbsp; 27 VCC<br />&nbsp; 28 GND<br />&nbsp; 29 MA15&nbsp; &nbsp; &nbsp; &nbsp;mempak.38<br />&nbsp; 30 MA16&nbsp; &nbsp; &nbsp; &nbsp;mempak.40<br />&nbsp; 31 MA17&nbsp; &nbsp; &nbsp; &nbsp;mempak.42<br />&nbsp; 32 MA18&nbsp; &nbsp; &nbsp; &nbsp;mempak.44<br />&nbsp; 33 MA19&nbsp; &nbsp; &nbsp; &nbsp;mempak.46<br />&nbsp; --<br />&nbsp; 34 MA20&nbsp; &nbsp; &nbsp; &nbsp;mempak.48<br />&nbsp; 35 MA21&nbsp; &nbsp; &nbsp; &nbsp;mempak.50<br />&nbsp; 36 /FLASH.BSY mempak.12&nbsp; with pullup R1<br />&nbsp; 37 /FLASH.WP&nbsp; mempak.18<br />&nbsp; 38 NC ?&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maybe /EXTMEM select?<br />&nbsp; 39 VCC<br />&nbsp; 40 /FLASH.CS&nbsp; mempak.51<br />&nbsp; 41 /SRAM.CS&nbsp; &nbsp;mm1134.7<br />&nbsp; 42 /RESET&nbsp; &nbsp; &nbsp;snes.26<br />&nbsp; 43 SYSCK&nbsp; &nbsp; &nbsp; snes.57<br />&nbsp; 44 /RD&nbsp; &nbsp; &nbsp; &nbsp; snes.23 via R7 (390 ohm)<br /></div><br />The /IRQ and /FLASH.BSY and /FLASH.WP pins are certainly unexpected. And no idea what REFRESH is used for. Pin38 might be chipselect for some (uninstalled) extra memory chip, possibly sharing address lines and /OE /WE with other chips. CIC is basically just an intergrated CIC, but don't know if it could be swtched from NTSC to PAL mode (by changing one of the GNDed pins maybe), and don't know if it's somehow smashing the memory mapping (eg. when a PAL console doesn't output the expected NTSC CIC signal).<br /><br />And the MCC chip's I/O ports... the (current) description in fullsnes.htm doesn't match up with the actual memory mapping, but the <!-- m --><a class="postlink" href="http://wiki.superfamicom.org/snes/show/BS-X+MMIO">http://wiki.superfamicom.org/snes/show/BS-X+MMIO</a><!-- m --> seems to contain mostly correct mapping info for ports 025000h-0C5000h, the document formatting can be a bit confusing (I needed to gaze at it four about 5 hours before getting the impression that I understood what it's all about; however, the actual memory mapping is really a bit confusing hardware-wise... the mapping hardware is very simple, but nethertheless confusing because it comes up with many different bit-combinations... and for understanding that part, the superfamicom.org doc has been really helpful, I am glad that I didn't need to figure out all that stuff myself).<br />So far, I've verified parts of the superfamicom.org info (only checked the upper 32K halves at 8000h-FFFFh yet), and my test result did match up with the info (except one missing detail for PSRAM in HiROM mapping: The upper 32K-halves of the data at 40h-7Fh/C0h-BFh are ALSO mirrored to 00h-3Fh/80h-7Dh).<br /><br />And the other MCC bits are working as so...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 0:005000h FLASH Ready IRQ Flag (0=None, 1=IRQ) (write any value to acknowledge)<br />&nbsp; 0:015000h FLASH Ready IRQ Enable (0=Disable, 1=Enable)<br />&nbsp; 0:025000h..0C5000h see superfamicom.org<br />&nbsp; 0:0D5000h Unknown (could be FLASH /WP pin... but doesn't really work as so)<br />&nbsp; 0:0E5000h Write any value to apply changes to Page0:025000h..0D5000h (ONLY those 12 bits) (read: always 0)<br />&nbsp; 0:0F5000h MCC Register Page (0=Page0, 1=Page1)<br />&nbsp; 1:005000h..0E5000h Unknown (fifteen read/write-able bits)<br />&nbsp; 1:0F5000h MCC Register Page (0=Page0, 1=Page1) (same as 0:0F5000h)<br /></div><br />For Page0:025000h..0D5000h, reading returns to APPLIED value (not the most recently value). For 0:005000h, reading returns the IRQ flag, writing acknowledges it. For 0:0E5000h, reading seems to return always 0, and writing applies the most recently written bits. For 0:015000h, 0/1:0F5000h, and 1:005000h..0E5000h, reading just returns the most recently written value (no applying needed for those bits).<br />Reading page1 is slightly bugged: Upper/lower 8bits are swapped (reading 1:005000h..075000h returns what was written to 1:085000h..0F5000h, and vice-versa). That's making it somewhat impossible to read the MCC Register Page bit (or in fact, reading works fine, but without knowing its value, one cannot know if one needs to read it from 0F5000h or 075000h; and when knowing its value, then it would be pointless to read it at all).<br /><br />For the /FLASH.WP pin, the pin seems to be always LOW=write protected. That protection should affected ONLY flash sectors that are flagged as protected, so writing should still work as long as there aren't any such flagged sectors, anyways, there SHOULD be a way to toggle the MCC's /FLASH.WP output pin...<br />I've tried setting 0:0D5000h, and also tried writing increasing numbers to the Page1 bits, but didn't manage to change /WP yet... at the moment I am running out of ideas... aside from checking if I've wired the scope to the correct pin.<br /><br />The fifteen bits at 1:005000h..0E5000h are also still mysterious, some guesses would be a timeout counter for the FLASH Ready IRQ (not checked yet), or unlocking /WP (didn't seem to work out), or changing the memory mapping (though they didn't affect my mapping test for the memory areas at 8000h-FFFFh, no matter if I set all fifteen bits to all ones, or leave them at their power up default (all zeroes)).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LuigiBlood</b> [ Fri Aug 19, 2016 7:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's a picture that describes the BS-X MMIO, with the register names (it has been rewired a little bit):<br /><!-- m --><a class="postlink" href="http://astamuse.com/ja/drawing/JP/0003/615/588/B9/000012.png">http://astamuse.com/ja/drawing/JP/0003/ ... 000012.png</a><!-- m --><br /><br />From this japanese patent:<br /><!-- m --><a class="postlink" href="http://astamuse.com/ja/granted/JP/No/3615588">http://astamuse.com/ja/granted/JP/No/3615588</a><!-- m --> (On BS-X Project website there's other links to other japanese patents related to Satellaview, and I have made some discoveries concerning the satellite transmission protocol)<br /><br />EDIT: I think 0D:5000 is ENRAMWR. As in: ENable psRAM WRite.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWJ</b> [ Fri Aug 19, 2016 9:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">LuigiBlood wrote:</div><div class="quotecontent">There's a picture that describes the BS-X MMIO, with the register names (it has been rewired a little bit):<br /><!-- m --><a class="postlink" href="http://astamuse.com/ja/drawing/JP/0003/615/588/B9/000012.png">http://astamuse.com/ja/drawing/JP/0003/ ... 000012.png</a><!-- m --><br /><br />From this japanese patent:<br /><!-- m --><a class="postlink" href="http://astamuse.com/ja/granted/JP/No/3615588">http://astamuse.com/ja/granted/JP/No/3615588</a><!-- m --> (On BS-X Project website there's other links to other japanese patents related to Satellaview, and I have made some discoveries concerning the satellite transmission protocol)<br /><br />EDIT: I think 0D:5000 is ENRAMWR. As in: ENable psRAM WRite.</div><br /><br />That patent is interesting. It shows two different Flash memories: &quot;Flash B&quot; in 図６ which is the the removable data packs, and &quot;Flash A&quot; in 図４ which would have been built into the BS-X cartridge itself. Also, it <em>doesn't</em> say anything at all about battery-backed SRAM. The diagrams showing how the memory controller works only show ROM, PSRAM, internal &quot;Flash A&quot; and external &quot;Flash B&quot;.<br /><br />It looks like the design of the cartridge was changed a bit after that patent was granted: the built-in Flash was replaced with battery-backed SRAM, possibly for cost reasons, but the registers for mapping the internal Flash are still there (resulting in the &quot;hole&quot; that's controlled by registers 09-0B--that originally would have been the internal Flash). Register 0D might be write-protect for the missing internal Flash.<br /><br />ETA: got a question for nocash. Are there any pullups on the slot data pins in either the SA-1 cartridge or the BS-X cartridge? If you access the slot when there's no data pack inserted, do you get $FF or floating bus?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LuigiBlood</b> [ Fri Aug 19, 2016 9:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWJ wrote:</div><div class="quotecontent">That patent is interesting. It shows two different Flash memories: &quot;Flash B&quot; in 図６ which is the the removable data packs, and &quot;Flash A&quot; in 図４ which would have been built into the BS-X cartridge itself. Also, it <em>doesn't</em> say anything at all about battery-backed SRAM. The diagrams showing how the memory controller works only show ROM, PSRAM, internal &quot;Flash A&quot; and external &quot;Flash B&quot;.<br /><br />It looks like the design of the cartridge was changed a bit after that patent was granted: the built-in Flash was replaced with battery-backed SRAM, possibly for cost reasons, but the registers for mapping the internal Flash are still there (resulting in the &quot;hole&quot; that's controlled by registers 09-0B--that originally would have been the internal Flash). Register 0D might be write-protect for the missing internal Flash.</div><br />Every single japanese Satellaview patent are like documentations. It's just nuts. That patent even talks how the EXT port would be used for a HDD.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Fri Aug 19, 2016 3:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've been testing the IRQ feature with IRQ vector in PSRAM... and writing PSRAM works fine with &amp; without setting bit13. So, apparently no PSRAM-write-disable feature. There might be a SRAM-write-disable feature... though both PSRAM and SRAM are wired directly to SNES /WR line (however, the MCC could theoretically suppress chip select upon writes).<br /><br />There are no pull-ups on the databus, so any open bus values are just as usually. In case of flash detection: That's done via directly addressing C0xxxxh, so the open bus value should be always C0h in that case (which also means that it won't hang in the detection-busy loop, since C0h has bit7=1=&quot;ready&quot;).<br /><br />Apropos detection, that's throwing an FLASH Ready IRQ after writing the first two bytes (38h,D0h) of the detection sequence. Of course, the IRQ should be also thrown after Write/Erase commands, which would be a bit more useful - the BSX software isn't using the IRQ feature at all though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Aug 22, 2016 1:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tested the mapping for addresses 0000h, 5000h and 6000h, too. Results are same as described on superfamicom.org, except for one thing, PSRAM in LoROM mapping is said to do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ALWAYS:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;70-7D&nbsp; &nbsp;F0-FF&nbsp; &nbsp;* 0000-7FFF! (8 banks, mirrored)</div><br />The part about 8 banks mirrored is wrong (for LoROM mapping), it's mapping the whole 512K PSRAM in 16 banks at F0-FF (and almost the whole PSRAM in 14 banks at 70-7D). Oh, and to clarify &quot;ALWAYS&quot;: That's meant to be unaffected by bit5,bit6 (but the other PSRAM related bits (bit2,3,4) do still affect that memory region).<br /><br />And, I've been doing more tests on MCC Bit15, it does enable access to 8 hidden bits (not 15 hidden bits, as I had originally thought). Writing to normal bits does still work even the hidden-access is enabled. But if hidden-access was (already) enabled before the write, then the written bit is also stored in the hidden bit array (for whatever purpose). And reading does always return the hidden bit state while hidden-access is enabled.<br />More tech details below (this time I've tested that quite well, by doing about 65536 random writes (to 4bit random index with 1bit random data), and then computing the expected result, and then reading the actual state of the sixteen I/O-ports, and comparing that against the expect values, and showing an error message in case of mismatches; and going by that tests, the below pseudo code for reading/writing bits should be 100% reproducing the inner workings of the hardware).<br /><br />So, here is the new updated description for the MCC chip... I've tried to use the some formatting/structure for descriptions of the separate memory regions... but I am afraid that it might still look a bit confusing...<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MCC Satellaview BIOS Cart Memory Controller Chip<br />Basically, the MCC chip contains sixteen 1-bit I/O ports (accessed via<br />&#91;00h-0Fh:5000h&#93;.bit7):<br />&nbsp; 0&nbsp; &nbsp; &nbsp;DATAPAK Ready IRQ Flag&nbsp; &nbsp;(0=None, 1=IRQ) (Write any value: Acknowledge)<br />&nbsp; 1&nbsp; &nbsp; &nbsp;DATAPAK Ready IRQ Enable (0=Disable, 1=Enable)<br />&nbsp; 2&nbsp; &nbsp; &nbsp;Mapping for PSRAM/EXTMEM/DATAPAK (0=LoROM, 1=HiROM)<br />&nbsp; 3&nbsp; &nbsp; &nbsp;PSRAM Enable for Slow Memory area (banks 00h-7Dh)<br />&nbsp; 4&nbsp; &nbsp; &nbsp;PSRAM Enable for Fast Memory area (banks 80h-FFh)<br />&nbsp; 5&nbsp; &nbsp; &nbsp;PSRAM Location Bit0 (offset within bank 00h-7Dh/80h-FFh)<br />&nbsp; 6&nbsp; &nbsp; &nbsp;PSRAM Location Bit1 (offset within bank 00h-7Dh/80h-FFh)<br />&nbsp; 7&nbsp; &nbsp; &nbsp;BIOS Enable for Slow Memory area (at 00h-3Fh:8000h-FFFFh) ;\always<br />&nbsp; 8&nbsp; &nbsp; &nbsp;BIOS Enable for Fast Memory area (at 80h-BFh:8000h-FFFFh) ;/LoROM<br />&nbsp; 9&nbsp; &nbsp; &nbsp;EXTMEM Enable for Slow Memory area (banks 00h-7Dh)<br />&nbsp; 10&nbsp; &nbsp; EXTMEM Enable for Fast Memory area (banks 80h-FFh)<br />&nbsp; 11&nbsp; &nbsp; EXTMEM Location (offset within bank 00h-7Dh/80h-FFh)<br />&nbsp; 12&nbsp; &nbsp; DATAPAK Write Enable (0=Read Only, 1=Allow Read/Write Access)<br />&nbsp; 13&nbsp; &nbsp; Unknown (isn't FLASH /WP pin... maybe EXTMEM Write Enable?)<br />&nbsp; 14&nbsp; &nbsp; Write any value: Apply changes to Bit2-13 (read: always 0)<br />&nbsp; 15&nbsp; &nbsp; Access Hidden Bits (0=Normal, 1=Access Hidden Bits/unknown purpose)<br />That sixteen ports are accessed via 4bit INDEX(0..0Fh) and 1bit DATA (0..1),<br />however, internally, the MCC chip does contain a total of 35 used bits:<br />&nbsp; lastwrite&#91;N&#93;&nbsp; ;14 bits used (bit1-13,15)<br />&nbsp; applied&#91;N&#93;&nbsp; &nbsp; ;12 bits used (bit2-13)<br />&nbsp; hidden&#91;N&#93;&nbsp; &nbsp; &nbsp;;8 bits used&nbsp; (bit0-7)<br />&nbsp; irq_flag&nbsp; &nbsp; &nbsp; ;1 bit used&nbsp; &nbsp;(bit0)<br />Writing &quot;&#91;INDEX:5000h&#93;=DATA*80h&quot; does internally work as so:<br />&nbsp; if lastwrite&#91;0Fh&#93;=1 then hidden&#91;INDEX and 07h&#93;=DATA<br />&nbsp; lastwrite&#91;INDEX&#93;=DATA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;&lt;-- this must be done AFTER the above step!<br />&nbsp; if INDEX=00h then irq_flag=0&nbsp; ;&lt;-- XXX this done also if lastwrite&#91;0Fh&#93;=1?<br />&nbsp; if INDEX=0Eh then applied&#91;02h..0Dh&#93;=lastwrite&#91;02h..0Dh&#93;<br />Reading &quot;DATA=&#91;INDEX:5000h&#93;/80h&quot; does internally work as so:<br />&nbsp; if lastwrite&#91;0Fh&#93;=0 and INDEX=00h&nbsp; &nbsp; &nbsp; then DATA=irq_flag<br />&nbsp; if lastwrite&#91;0Fh&#93;=0 and INDEX=01h&nbsp; &nbsp; &nbsp; then DATA=lastwrite&#91;01h&#93;<br />&nbsp; if lastwrite&#91;0Fh&#93;=0 and INDEX=02h..0Dh then DATA=applied&#91;INDEX&#93;<br />&nbsp; if lastwrite&#91;0Fh&#93;=0 and INDEX=0Eh..0Fh then DATA=0<br />&nbsp; if lastwrite&#91;0Fh&#93;=1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; then DATA=hidden&#91;INDEX and 07h&#93;<br />Reading the whole 16bits after reset returns following intial values:<br />&nbsp; After Reset:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0BECh&nbsp; ;\initial &quot;lastwrite&quot; and &quot;applied&quot; are same<br />&nbsp; After Apply:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0BECh&nbsp; ;/&nbsp; (bit2-3, bit5-9, and bit11 enabled)<br />&nbsp; After Hidden Access: 3F3Fh&nbsp; ;-3Fh on power-up, but NOT reset upon /RESET<br />Note: hidden&#91;7&#93; can be set to 1 only AFTER and WHILE lastwrite&#91;F&#93;=1.<br /><br />Priority for overlapping memory locations<br />&nbsp; Prio Name&nbsp; &nbsp; Size&nbsp; &nbsp;Notes<br />&nbsp; 1&nbsp; &nbsp; BIOS&nbsp; &nbsp; 1024K&nbsp; (highest priority, if enabled)<br />&nbsp; 2&nbsp; &nbsp; PSRAM&nbsp; &nbsp;512K<br />&nbsp; 3&nbsp; &nbsp; EXTMEM&nbsp; -&nbsp; &nbsp; &nbsp; (always open bus; no such memory chip installed)<br />&nbsp; 4&nbsp; &nbsp; DATAPAK 1024K&nbsp; (open bus if no datapak connected) (always enabled)<br />&nbsp; -&nbsp; &nbsp; SRAM&nbsp; &nbsp; 32K&nbsp; &nbsp; (always mapped, can't overlap with other areas)<br />Note: DATAPAK is on an external cartridge, size is usually 1MByte FLASH.<br /><br />SRAM and I/O Port Mapping (always mapped, can't overlap with other areas)<br />&nbsp; 00h-0Fh:5000h, Bit7&nbsp; &nbsp;;-MMC Bits 0-15 (or 16-31 when selecting 2nd page)<br />&nbsp; 00h-0Fh:5000h, Bit0-6 ;-open bus (MCC chip connects only to D7)<br />&nbsp; 00h-0Fh:5001h-5FFFh&nbsp; &nbsp;;-Mirrors of above MMC Bits<br />&nbsp; 10h-17h:5000h-5FFFh&nbsp; &nbsp;;-SRAM (battery backed) (mapped in eight 4K banks)<br />&nbsp; 18h-3Fh:5000h-5FFFh&nbsp; &nbsp;;\<br />&nbsp; 80h-BFh:5000h-5FFFh&nbsp; &nbsp;; open bus<br />&nbsp; 00h-1Fh:6000h-6FFFh&nbsp; &nbsp;;<br />&nbsp; 80h-9Fh:6000h-6FFFh&nbsp; &nbsp;;/<br />&nbsp; 20h-3Fh:6000h-6FFFh&nbsp; &nbsp;;\open bus in LoROM mode, or PSRAM in HiROM mode<br />&nbsp; A0h-BFh:6000h-6FFFh&nbsp; &nbsp;;/<br /><br />BIOS Mapping (Priority 1, highest) (MCC Bits 7,8)<br />&nbsp; Bit7=1 (Slow Area)&nbsp; &nbsp; &nbsp;Bit8=1 (Fast Area)<br />&nbsp; 00h-3Fh:8000h-FFFFh&nbsp; &nbsp; 80h-BFh:8000h-FFFFh<br />BIOS ROM is always mapped as LoROM (the ROM address lines are hardwired to SNES<br />bus, so the MCC chip can't change them).<br /><br />PSRAM Mapping (Priority 2) (MCC Bits 2,3,4,5,6)<br />For Bit2=0 (LoROM):<br />&nbsp; Bit6-5&nbsp; Bit3=1 (Slow Area)&nbsp; &nbsp; Bit4=1 (Fast Area)<br />&nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;00h-0Fh:8000h-FFFFh&nbsp; &nbsp;80h-8Fh:8000h-FFFFh&nbsp; ;\in upper 32K only<br />&nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;20h-2Fh:8000h-FFFFh&nbsp; &nbsp;A0h-AFh:8000h-FFFFh&nbsp; ;/<br />&nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp;40h-4Fh:0000h-FFFFh&nbsp; &nbsp;C0h-CFh:0000h-FFFFh&nbsp; ;\same in upper/lower 32K<br />&nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp;60h-6Fh:0000h-FFFFh&nbsp; &nbsp;E0h-EFh:0000h-FFFFh&nbsp; ;/<br />&nbsp; -&nbsp; &nbsp; &nbsp; &nbsp;70h-7Dh:0000h-7FFFh&nbsp; &nbsp;F0h-FFh:0000h-7FFFh&nbsp; ;-in lower 32K only<br />For Bit2=1 (HiROM):<br />&nbsp; Bit6-5&nbsp; Bit3=1 (Slow Area)&nbsp; &nbsp; Bit4=1 (Fast Area)<br />&nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;00h-07h:0000h-FFFFh&nbsp; &nbsp;80h-87h:0000h-FFFFh&nbsp; ;\<br />&nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;10h-17h:0000h-FFFFh&nbsp; &nbsp;90h-97h:0000h-FFFFh&nbsp; ; only upper 32K half<br />&nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp;20h-27h:0000h-FFFFh&nbsp; &nbsp;A0h-A7h:0000h-FFFFh&nbsp; ; of full 64K banks<br />&nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp;30h-37h:0000h-FFFFh&nbsp; &nbsp;B0h-B7h:0000h-FFFFh&nbsp; ;/<br />&nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;40h-47h:0000h-FFFFh&nbsp; &nbsp;C0h-C7h:0000h-FFFFh&nbsp; ;\<br />&nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp;50h-57h:0000h-FFFFh&nbsp; &nbsp;D0h-D7h:0000h-FFFFh&nbsp; ; full 64K banks<br />&nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp;60h-67h:0000h-FFFFh&nbsp; &nbsp;E0h-E7h:0000h-FFFFh&nbsp; ;<br />&nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp;70h-77h:0000h-FFFFh&nbsp; &nbsp;F0h-F7h:0000h-FFFFh&nbsp; ;/<br />&nbsp; -&nbsp; &nbsp; &nbsp; &nbsp;20h-3Fh:6000h-7FFFh&nbsp; &nbsp;A0h-BFh:6000h-7FFFh&nbsp; ;-8K snippets<br />The 8K snippets in bank 20h-27h/A0h-A7h are taken from PSRAM offset 006000h,<br />016000h, .., 076000h. The same snippets are also mirrored in bank<br />28h-3Fh/A8h-BFh.<br />The four special regions (at 0000h-7FFFh and 6000h-7FFFh) are affected only by<br />MCC Bits 2,3,4 (not affected by MCC Bits 5,6).<br /><br />EXTMEM Mapping (Priority 3) (MCC Bits 2,9,10,11)<br />For Bit2=0 (LoROM):<br />&nbsp; Bit11&nbsp; &nbsp; Bit9=1 (Slow Area)&nbsp; &nbsp;Bit10=1 (Fast Area)<br />&nbsp; Bit11=0&nbsp; 00h-1Fh:8000h-FFFFh&nbsp; 80h-9Fh:8000h-FFFFh&nbsp; ;-in upper 32K only<br />&nbsp; Bit11=1&nbsp; 40h-5Fh:0000h-FFFFh&nbsp; C0h-DFh:0000h-FFFFh&nbsp; ;-same in upper/lower 32K<br />For Bit2=1 (HiROM):<br />&nbsp; Bit11&nbsp; &nbsp; Bit9=1 (Slow Area)&nbsp; &nbsp;Bit10=1 (Fast Area)<br />&nbsp; Bit11=0&nbsp; 00h-0Fh:8000h-FFFFh&nbsp; 80h-8Fh:8000h-FFFFh&nbsp; ;\only upper 32K half<br />&nbsp; Bit11=1&nbsp; 20h-2Fh:8000h-FFFFh&nbsp; A0h-AFh:8000h-FFFFh&nbsp; ;/<br />&nbsp; Bit11=0&nbsp; 40h-4Fh:0000h-FFFFh&nbsp; C0h-CFh:0000h-FFFFh&nbsp; ;\full 64K banks<br />&nbsp; Bit11=1&nbsp; 60h-6Fh:0000h-FFFFh&nbsp; E0h-EFh:0000h-FFFFh&nbsp; ;/<br />EXTMEM would be some extra memory chip which isn't installed in existing carts.<br />In result, the corresponding memory area will just become open bus when trying<br />to enable EXTMEM.<br /><br />DATAPAK Mapping (Priority 4, lowest) (MCC Bit 2) (and Bit 12: Write Enable)<br />For Bit2=0 (LoROM):<br />&nbsp; Always (Slow Area)&nbsp; &nbsp;Always (Fast Area)<br />&nbsp; 00h-3Fh:8000h-FFFFh&nbsp; 80h-BFh:8000h-FFFFh&nbsp; ;-in upper 32K only&nbsp; &nbsp; &nbsp; &nbsp;;1st 2MB?<br />&nbsp; 40h-7Dh:0000h-FFFFh&nbsp; C0h-FFh:0000h-FFFFh&nbsp; ;-same in upper/lower 32K ;2nd 2MB?<br />For Bit2=1 (HiROM):<br />&nbsp; Always (Slow Area)&nbsp; &nbsp;Always (Fast Area)<br />&nbsp; 00h-3Fh:8000h-FFFFh&nbsp; 80h-BFh:8000h-FFFFh&nbsp; ;-only upper 32K half of 64K banks<br />&nbsp; 40h-7Dh:0000h-FFFFh&nbsp; C0h-FFh:0000h-FFFFh&nbsp; ;-full 64K banks&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;full 4MB<br />DATAPAK is always enabled and mapped to the entire ROM area (unless it's<br />overlapped by higher-priority memory blocks).</div><br /><br />For the chip pinouts... I still haven't found a way to get FLASH./WP switched HIGH, maybe it doesn't work at all?<br />Pin38 does seem to be EXTMEM./CE (during the memory mapping test, the pin gets low when EXTMEM is enabled, eg. when writing values in range of 0200h..7FFh to the 16bit MCC register). Still haven't tested if/where /OE and /WE exist for the EXTMEM area.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LuigiBlood</b> [ Thu Aug 25, 2016 8:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just for the sake of listing them, here are disassembled updated BS-X BIOS functions (some are related to Memory Packs), found in SRAM dumps:<br />(I suggest getting bsx18.srm from the BS-X SRAMS Dumps 6-26-01 from Matthew Callis)<br /><br />boot_hook: <!-- m --><a class="postlink" href="http://pastebin.com/gGHkN4nN">http://pastebin.com/gGHkN4nN</a><!-- m --><br />nmi_hook: <!-- m --><a class="postlink" href="http://pastebin.com/Ee06uQ2q">http://pastebin.com/Ee06uQ2q</a><!-- m --><br />file_start_hook: <!-- m --><a class="postlink" href="http://pastebin.com/5Tq48Xph">http://pastebin.com/5Tq48Xph</a><!-- m --><br /><br />send_16bit_to_port_2199: <!-- m --><a class="postlink" href="http://pastebin.com/cUptjLYy">http://pastebin.com/cUptjLYy</a><!-- m --><br />forward_queue_to_channel_map: <!-- m --><a class="postlink" href="http://pastebin.com/uzszyTL8">http://pastebin.com/uzszyTL8</a><!-- m --><br />execute_game_code: <!-- m --><a class="postlink" href="http://pastebin.com/f30xytDS">http://pastebin.com/f30xytDS</a><!-- m --><br />flash_get_and_interprete_id: <!-- m --><a class="postlink" href="http://pastebin.com/cha8i0zn">http://pastebin.com/cha8i0zn</a><!-- m --><br />flash_get_id: <!-- m --><a class="postlink" href="http://pastebin.com/0htkP2ku">http://pastebin.com/0htkP2ku</a><!-- m --><br />detect_receiver_and_do_downloads: <!-- m --><a class="postlink" href="http://pastebin.com/86LQZzBM">http://pastebin.com/86LQZzBM</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Fri Sep 02, 2016 6:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks for posting that! I didn't knew about those SRAM dumps &amp; patches yet. But, now I've found them, here:<br /><!-- m --><a class="postlink" href="http://superfamicom.org/blog/2011/06/big-update-bs-x-sram-dumps/">http://superfamicom.org/blog/2011/06/bi ... ram-dumps/</a><!-- m --> - 22 dumps (bsx1..22.srm)<br /><!-- m --><a class="postlink" href="http://superfamicom.org/blog/2011/08/more-bs-x-sram-dumping/">http://superfamicom.org/blog/2011/08/mo ... m-dumping/</a><!-- m --> - 2 dumps (bsx-a..b.srm)<br />So there are 24 dumps in total, bsx13.srm and bsx-a.srm are corrupt dumps (the first one seems to have bit2 of all bytes set to zero, and the other is almost completely zerofilled). That leaves 22 dumps that are (more or less) intact. I've written a small program that compares the SRAM vectors at SRAM offset 0974h..0FFFh against their normal default values, it's also checking the backup copy at 3974h..3FFFh, and the checksums for that areas. The results are:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;addr&nbsp; &nbsp; &nbsp;&#91;0xxxh&#93;&nbsp; &#91;3xxxh&#93;<br />bsx1.srm<br />&nbsp;BAD CHECKSUM AT 0000<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;000009B0 1150175C 1150175C<br />&nbsp;00000AA8 8090D85C 80BDD85C<br />&nbsp;00000B6C 1150205C 1150205C<br />bsx2.srm<br />&nbsp;BAD CHECKSUM AT 0000<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;00000984 1152765C 1152765C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000AA8 8090D85C 80BDD85C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx3.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;00000984 1152765C 1152765C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx4.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx5.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx6.srm<br />&nbsp;BAD CHECKSUM AT 0000<br />&nbsp;BAD CHECKSUM AT 3000<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000AA8 80D0D85C 8090D85C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx7.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;000009B0 1150175C 1150175C<br />&nbsp;00000B6C 1150205C 1150205C<br />bsx8.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;00000984 1152765C 1152765C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx9.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx10.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx11.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx12.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx14.srm<br />&nbsp;BAD CHECKSUM AT 0000<br />&nbsp;00000AA8 8090D85C 80BDD85C<br />bsx15.srm<br />&nbsp;BAD CHECKSUM AT 0000<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;000009B0 1150175C 1150175C<br />&nbsp;00000AA8 8090D85C 80BDD85C<br />&nbsp;00000B6C 1150205C 1150205C<br />bsx16.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx17.srm<br />bsx18.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;00000984 1152765C 1152765C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx19.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;00000984 1152765C 1152765C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx20.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;000009B0 1150175C 1150175C<br />&nbsp;00000B6C 1150205C 1150205C<br />bsx21.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;00000984 1152765C 1152765C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx22.srm<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />bsx-b.srm<br />&nbsp;BAD CHECKSUM AT 0000<br />&nbsp;00000974 1150005C 1150005C<br />&nbsp;00000978 11506A5C 11506A5C<br />&nbsp;000009B0 11503C5C 11503C5C<br />&nbsp;00000A24 1150AA5C 1150AA5C<br />&nbsp;00000A80 1150755C 1150755C<br />&nbsp;00000AA8 8090D85C 80BDD85C<br />&nbsp;00000B0C 1152635C 1152635C<br />&nbsp;00000B10 1150855C 1150855C<br />&nbsp;00000B6C 1150455C 1150455C<br />no$sns.srm - without fast boot patch<br />no$sns2.srm - with my own fast boot patch installed<br />&nbsp;00000974 105C965C 105C965C<br />&nbsp;00000C94 47A90014 47A90014<br />&nbsp;00000C98 06658D53 06658D53<br />&nbsp;00000C9C 0000006B 0000006B<br /></div><br />So, there seem to be five cases (not counting my own fast boot patch):<br />- 0 patches<br />- 3 patches<br />- 7 patches (same as above, plus 4 new patches, and with more code in the boot_hook patch)<br />- 8 patches (same as above, plus one extra patch appended at end of the patch area)<br />- 9 patches (same as above, plus another extra patch appended at end of the patch area)<br /><br />And, a lot of the dumps have a byte at offset 0AAAh corrupted (ie. destroyed the &quot;flash_erase_entire_type1&quot; vector at 105AA8h), and alongsides they have a bad checksum for the area at 0000h. In the bsx6.srm dump, the same issue has also crept into the backup area at 3000h, so the bios would erase all user data on next boot.<br />There could be a couple of reasons for that corrupted byte: A bug in the BIOS, or a bug in a fairly popular game, or some hardware glitch in the MCC memory mapper chip, or - unrelated to BSX hardware/software - it could have also happened at time when dumping the SRAMs. The AAAh does look a bit like the flash command address at C02AAAh, but I don't know if or how that could affect the SRAM byte which is mapped at 105AAAh.<br /><br />Anyways, did anybody ever get the same wrong byte in emulators? Ie. for no$sns, use a hex editor to check byte at offset 0AAAh in the BSX-BIOS.SAV file in the BATTERY folder... if the byte has another value then BDh, then the byte was destroyed there too (and if you remember which BSX game you've played most recently, then you've probably found the source of that bug).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LuigiBlood</b> [ Tue Sep 20, 2016 8:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't know where to put it, but I've been looking at satellite broadcasting norms from back then.<br />For the audio capabilities of the Satellaview, I came to this conclusion: It's either 32000 Hz or 48000 Hz. Not in between.<br />I suspect Satellaview uses MUSE as the broadcasting protocol as it was the norm in Japan for HDTV broadcasting quite early on (they had 1080i as far back as 1994!), and in fact, most of the standard can be found in the data expected for BS-X.<br /><br />- Data Transmission Protocol: <!-- m --><a class="postlink" href="https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.1126-0-199407-W!!PDF-E.pdf">https://www.itu.int/dms_pubrec/itu-r/re ... !PDF-E.pdf</a><!-- m --><br />- MUSE protocol document: <!-- m --><a class="postlink" href="https://www.itu.int/dms_pubrec/itu-r/rec/bo/R-REC-BO.786-0-199203-W!!PDF-E.pdf">https://www.itu.int/dms_pubrec/itu-r/re ... !PDF-E.pdf</a><!-- m --><br /><br />The so called Hardware Channel is actually called the Logical Channel (LCI), and also contains the expected Data Structure (DS), basically, let me take 0x0124 as an exemple used to access the Channel Map:<br />- 0x0124 into bits:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">00000001 00100100<br />00LLLLLL DDDCCCCC<br /><br />L = Logical Channel 2 (LCI2)<br />D = Data Structure<br />C = Logical Channel 1 (LCI1)<br /></div><br />So 0x0124 is:<br />LCI1 = 04<br />LCI2 = 01<br />DS = 1<br /><br />What is Data Structure 1? The 5-byte header found in every transmission.<br />The so called Transmission ID, which is Data Group Identifier 1 (DGI1), also contains in the lower 4 bit the Data Group Repetition (DGR), which indicates the number of repetitions.<br />I could go on and on, but it's the exact same thing. The five other bytes in other packets is actually exclusive to the Satellaview. The Satellaview hardware is quite capable, actually.<br /><br />And you know what, most of the Channel Map is actually like the norm, in fact, the actual name of it is Transmission Control Data (TCD).<br />The so called Software Channels are actually a mix of Service Broadcaster (PV) for the 2 first bytes, and Programme Number (PR) for the two others.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Tue Sep 20, 2016 4:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Good finding! A bit nasty to see those docs <em>after</em> reverse-engineering the protocol, and all the abbreviations are making them harder to read than neccessary, but anyways, nice to know that those docs exist!<br /><br />So, the Data Transmission Protocol doc covers the overall Channel/Packet format, and the Channel Map? I haven't spotted things like Files/Folders or Time Channels in there, so those are probably Nintendo-specific (unless I missed them, or unless they are described in some other document).<br /><br />And the MUSE doc, that's looking like <em>Video</em> transmission, is there some relation to BS-X at all? I guess the satellite might have actually transferred both Video <em>and</em> other/custom data (which could be used for BS-X data/audio), though I didn't spot any notes about how/where to include custom data with the MUSE stuff. But you've probably studied the doc more carefully than me (I only had a short look at it yet).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LuigiBlood</b> [ Wed Sep 21, 2016 6:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just found out that the digital sub-carrier NTSC system is also from Japan. Explains why MUSE and that one are similar.<br />The reason why I was linking to video transmission: It's mostly because the Satellaview patent mentions it and uses the sound/data transmission part as an exemple.<br />I even suspect that radios actually used it even if it doesn't transmit any video (maybe a still image?), after all, the Satellaview came with an AV selector, just so you could use the BS tuner to watch TV without plugging everything again.<br /><br />Also, I found another PDF about the audio transmission:<br /><!-- m --><a class="postlink" href="https://www.itu.int/dms_pubrec/itu-r/rec/bo/R-REC-BO.712-1-199203-I!!PDF-E.pdf">https://www.itu.int/dms_pubrec/itu-r/re ... !PDF-E.pdf</a><!-- m --><br /><br />Look at MDS system. It's the same format as the digital sub-carrier NTSC system but this time, finally some more details, especially about the control codes!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Wed Sep 21, 2016 8:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: BS-X Satellaview Datapak's</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Apropos Sound: Did anybody ever verify if the BS-X receiver unit does really connect to the external audio inputs on the SNES expansion port? It <em>probably</em> does so, but there's still at a small chance that the &quot;soundlink&quot; feature was implemented by streaming data to the APU instead of using the external audio inputs.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>