<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>50</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Sep 28, 2012 3:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Wat is the level map?  What info does it hold other than the metatile index?  I don't think I have a level map.</div><br />If you have a level, you should have a level map. Storing straight name/attribute table is not efficient at all, even if you compress each screen, because you don't take advantage of all the redundancy of blocks that repeat.<br /><br />A level map is usually a 2D grid of metatiles, where each byte is a metatile index. The level map can be used both for rendering (read a row/column of metatiles from the map, use their indexes to load the tiles that make up the metatiles and write them to VRAM) and for collision (get the metatile index and use it to get the metatile's collision information).<br /><br />Here's a straightforward representation of a level that uses 32x32-pixel (4x4 tiles) metatiles:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;16 tiles for each of the 4 metatiles<br />;metatile:&nbsp; $00&nbsp; $01&nbsp; $02&nbsp; $03<br /><br />MatatileTile00:<br />&nbsp; &nbsp;.db $00, $04, $08, $0c<br />MatatileTile01:<br />&nbsp; &nbsp;.db $00, $04, $09, $0c<br />MatatileTile02:<br />&nbsp; &nbsp;.db $00, $04, $0a, $0c<br />MatatileTile03:<br />&nbsp; &nbsp;.db $00, $04, $0a, $0c<br />MatatileTile10:<br />&nbsp; &nbsp;.db $00, $05, $0b, $0d<br />MatatileTile11:<br />&nbsp; &nbsp;.db $00, $05, $0a, $0c<br />MatatileTile12:<br />&nbsp; &nbsp;.db $00, $05, $0a, $0c<br />MatatileTile13:<br />&nbsp; &nbsp;.db $00, $05, $0b, $0d<br />MatatileTile20:<br />&nbsp; &nbsp;.db $00, $06, $06, $0e<br />MatatileTile21:<br />&nbsp; &nbsp;.db $00, $06, $06, $0c<br />MatatileTile22:<br />&nbsp; &nbsp;.db $00, $06, $06, $0c<br />MatatileTile23:<br />&nbsp; &nbsp;.db $00, $06, $06, $0e<br />MatatileTile30:<br />&nbsp; &nbsp;.db $00, $07, $07, $0f<br />MatatileTile31:<br />&nbsp; &nbsp;.db $00, $07, $07, $0f<br />MatatileTile32:<br />&nbsp; &nbsp;.db $00, $07, $07, $0f<br />MatatileTile33:<br />&nbsp; &nbsp;.db $00, $07, $07, $0f<br /><br />MatatileAttributes: ;4 palette indexes for each metatile<br />&nbsp; &nbsp;.db %00000000 ;palettes for metatile $00<br />&nbsp; &nbsp;.db %01010101 ;palettes for metatile $01<br />&nbsp; &nbsp;.db %01010000 ;palettes for metatile $02<br />&nbsp; &nbsp;.db %11000011 ;palettes for metatile $03<br /><br />MetatileCollision: ;%00 = air, %01 = solid, %10 = water, %11 = hazard<br />&nbsp; &nbsp;.db %00000000 ;metatile $00 is all air<br />&nbsp; &nbsp;.db %01010101 ;metatile $01 is all solid<br />&nbsp; &nbsp;.db %01010000 ;only the top of metatile $02 is solid<br />&nbsp; &nbsp;.db %11110101 ;the top of metatile $03 hursts the player, the bottom is solid<br /><br />LevelMap01: ;this small level is 16x8 metatiles (512x256 pixels) large<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $02<br />&nbsp; &nbsp;.db $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $01, $01, $01, $01, $00, $00, $00, $00, $00, $01, $01, $01, $03, $03, $01, $01<br />&nbsp; &nbsp;.db $01, $01, $01, $01, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01</div><br />See how everything connects? Whenever you want to check what is present at a certain map location, you convert the coordinates into an index which you can use to read a metatile index from the level map. Once you know the metatile's index, you can use it to get any information you want about it. If you are rendering the background, read from the MatatileTileXX tables and and write the tile indexes to the name tables, and the attributes to the attribute tables. If you're testing for collisions, read from the MetatileCollision table to know how the objects should react to the metatile.<br /><br />Se how one thing points to another, that points to another and so on? This is how you manage to reuse your level data effectively compressing it to much less than it would be if you had raw name/attribute table data. The data above is just 200 bytes. If I were to represent that in uncompressed form, this 2-screen wide level would have been 2048 bytes large.<br /><br />Anyway, this is not a lesson about compression (although the maps are indeed compressed), this is to show you one of the possible ways in which a level can be represented, and how you can access everything on it. Does this make sense to you?</div>Yes, tokumaru, that makes sense to me. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Thank you! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  ...I need to redo my attribute table code...  cause it would save so much space if keep accessing the pallet values through my sister's metatile definitions.  That will be challenging to accomplish... but space will be saved. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  It'll be a learning experience! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Fri Sep 28, 2012 3:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In your metatile stream, you can use the top 2 bits of the unused metatile data for the attribute info. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Sep 28, 2012 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Mine was just a straightforward example of how a bare bones metatile system works. Details such as metatile dimensions, types of collision, palette selection, bit ordering, etc. should be defined by the programmer according to the needs of their game.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Sep 28, 2012 3:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry for editing my post up there 3 times!   <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> It's how it should be?  With all of tokumaru's post copied from the bottom of the previous page?  It could be bad for slow internet connections... but it kind of helps someone from having too much trouble going to the bottom of the previous page... in my opinion.  <img src="./images/smilies/icon_redface.gif" alt=":oops:" title="Embarassed" />  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   Thanks 3gengames. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   And thanks, tokumaru, that helps me too. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Wed Oct 03, 2012 2:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok... so we represent a screen with 240 bytes if we have 16x16 metatiles... cause it takes less space! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  But to move a player around in a screen it would require 240 x 4 = 960 bytes?  Right?  So there needs to be a routine that would create the screen in 960 bytes of memory.  Then collision detection would be possible for me, I guess. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  I cant overcome the want of 960 bytes per screen.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Wed Oct 03, 2012 2:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You don't need to unpack metatile data of the whole screen to do collision, you can just 'unpack' certain tile in a given position when you need to check it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Oct 03, 2012 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">But to move a player around in a screen it would require 240 x 4 = 960 bytes?</div><br />That depends on how large you want your maps to be... Ideally, you will not store the whole map in RAM unless you're using extra WRAM, because the measly 2KB the NES has isn't enough for large levels, specially considering that this memory has to be used for many other things besides levels. If you are mot applying any other kind of compression on top of the metatiles, the obvious choice would be to just leave the maps in ROM. If you do decide to keep the maps in RAM, you'll need at least 3 screens worth of data that you can reload as the screen scrolls.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Then collision detection would be possible for me, I guess. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div><br />As long as you can read data from the map, which you need to do for rendering the tiles to the name tables, for example, you can just as easily check for the solidity of the metatiles.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I cant overcome the want of 960 bytes per screen.</div><br />Again, they don't need to be in RAM. You can access level maps from ROM just fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Oct 04, 2012 10:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">You don't need to unpack metatile data of the whole screen to do collision, you can just 'unpack' certain tile in a given position when you need to check it.</div>I'm so glad I asked that question!  THANK YOU <strong>SHIRU</strong>! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  That's a great name for my method 'unpack'!  It is going to replace my collisionU method! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Then collision detection would be possible for me, I guess. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /></div><br />As long as you can read data from the map, which you need to do for rendering the tiles to the name tables, for example, you can just as easily check for the solidity of the metatiles.</div><br /><span style="color: #FF8000">I<s>E</s></span>ncredible!! Yes you've told me this before, but NOW I UNDERSTAND!!!!!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /><br /><br />I'm so excited... right now about trying collision without having to create a table/map correctly first!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  It's so much good news and happiness for me,  Thank you so much Shiru and <strong>tokumaru</strong>!!!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /><br /><br />---<br />3gengames, I understand now why you didn't understand my need for a method  that would allow either an increment by 2 or an increment by 32.  I don't need it anymore!!  <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />    <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I don't have to create a perfect table copy first because I already have access to the info. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><span style="color: #FF8000">edit</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Oct 05, 2012 10:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle">Shiru wrote:</div><div class="quotecontent">You don't need to unpack metatile data of the whole screen to do collision, you can just 'unpack' certain tile in a given position when you need to check it.</div>I'm so glad I asked that question!  THANK YOU <strong>SHIRU</strong>! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  That's a great name for my method 'unpack'!  It is going to replace my collisionU method! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br /><br />I'm working on GRAVITY now....  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />   Our girl character falls down to the bottom of the screen.  And keeps falling... through four screens... and then stops above the <span style="color: #FF4000">two metatile rows of</span> solid ground.  Why does she fall four screens before stopping?<br /><br /><span style="color: #FF4000">Ok, she stays on the same screen... she falls from top to the bottom like I want it to, but she keeps falling through the top of  the screen and goes down toward the bottom.  Sorry, it's lunch time right now and so I hope to return to an answer... if not I'll figure it out myself, i think.</span><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">0C3AF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;unpack:<br />0C3AF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C3AF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;128&nbsp; 64&nbsp; 32&nbsp; 16&nbsp; &nbsp;8&nbsp; &nbsp;4&nbsp; &nbsp;2&nbsp; &nbsp;1&nbsp; &nbsp;<br />0C3AF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;$80 $40 $20 $10 $08 $04 $02 $01<br />0C3AF A9 26&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lda #&lt;MetatileRhombus<br />0C3B1 85 0C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta rhombusCollision_low<br />0C3B3 A9 C8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda #&gt;MetatileRhombus<br />0C3B5 85 0D&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta rhombusCollision_high<br />0C3B7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3B7 A9 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda #&lt;MetatileCollision<br />0C3B9 85 1A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta UCollision_low<br />0C3BB A9 C9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda #&gt;MetatileCollision<br />0C3BD 85 1B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta UCollision_high<br />0C3BF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3BF A5 04&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda oX ;getting ready to divide my X coordinate by 8<br />0C3C1 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a<br />0C3C2 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a<br />0C3C3 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a<br />0C3C4 AA&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tax<br />0C3C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;sta tC+0<br />0C3C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3C5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3C5 A5 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda oY<br />0C3C7 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;divide my Y coordinate by (2 * 2 * 2) = 8<br />0C3C8 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;&lt;----------------------------*<br />0C3C9 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lsr a ;&lt;--------------------------------*<br />0C3CA A8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tay<br />0C3CB 85 32&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta tC+1<br />0C3CD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3CD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;x*16=row<br />0C3CD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;row+y=LINEAR_POSITION<br />0C3CD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3CD 8A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;txa<br />0C3CE 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl a ;multiply x by (2 * 2 * 2 * 2) = 16<br />0C3CF 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl a ;&lt;----------------*<br />0C3D0 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl a ;&lt;--------------------*<br />0C3D1 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;asl a ;&lt;------------------------*<br />0C3D2 85 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta linearly<br />0C3D4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3D4 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;clc<br />0C3D5 98&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tya<br />0C3D6 65 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;adc linearly&nbsp; &nbsp;<br />0C3D8 85 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;sta linearly<br />0C3DA A8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tay<br />0C3DB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3DB&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;;GRAVITY<br />0C3DB C6 31&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;dec tC<br />0C3DD 10 02&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;bpl +skip<br />0C3DF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3DF B1 0C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;lda (rhombusCollision_low), y<br />0C3E1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+skip<br />0C3E1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;if the metatile is not solid<br />0C3E1 0A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; asl a&nbsp; &nbsp; ;&lt;pushes bit #7 into carry.<br />0C3E2 90 09&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; bcc +skip<br />0C3E4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C3E4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;then fall to the metatile below...<br />0C3E4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />0C3E4 B1 1A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; lda (UCollision_low), y<br />0C3E6 A5 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; lda oY<br />0C3E8 18&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; clc <br />0C3E9 69 08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; adc #8<br />0C3EB 85 05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; sta oY<br />0C3ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+skip&nbsp; <br />0C3ED&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3ED E6 31&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;inc tC<br />0C3EF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />0C3EF 60&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rts ;end of unpack and end of daprg-collisionU</div><br /><br /><span style="color: #FF4000">edit</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 05, 2012 11:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There must be something wrong with the way you're reading the map... I can't make sense of the formula you're using to read metatiles... is it (x / 8) * 16 + (y / 8)? I have no idea what you're trying to do with that.<br /><br />The exact formula obviously depends on how your maps are stored, but the typical way to convert pixel coordinates into map offsets is more like (y / MetatilesWidth) * NumberOfMetatilesPerRow +  (x / MetatileHeight). So if your metatiles are 16x16 pixels the formula is (y / 16) * 16 + (x /16). If your metatiles are 32x32 pixels, it's (y / 32) * 8 + (x / 32). Once you have that offset, you can read a the index of the metatile at that location of the map and check it's collision information.<br /><br />EDIT: Damn 8) smiley!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Oct 05, 2012 1:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">There must be something wrong with the way you're reading the map... I can't make sense of the formula you're using to read metatiles... is it (x / <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" /> * 16 + (y / <img src="./images/smilies/icon_cool.gif" alt="8)" title="Cool" />? I have no idea what you're trying to do with that.</div>YEAY THANK YOU SO MUCH TOKUMARU! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  Ok... ... <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> My idea was pulled out of <a href="http://forums.nesdev.com/viewtopic.php?p=4436#p4436" class="postlink">this post</a>: <br /><div class="quotetitle">Bregalad<span style="color: #BFFF40">, in a link from <a href="http://forums.nesdev.com/viewtopic.php?p=83391#p83391" class="postlink">tokumaru's post on page 19</a>,</span> wrote:</div><div class="quotecontent">You have a table arranged like this (I put random characters in it) : <br />A X U W O L T <br />S Z W K Y M Q <br />S U E U W P E <br />Q S G E I S L <br /><br />Now you want to got the P that is in the third row and the sixth column. <br />You have two indexes, one is 2 (the count starts from zero, so the third row is number 2), and 5 (also start from zero).<br /> The problem is that all the table is stored lineary in your ROM, so there it would be :<br /> A X U W O L T S Z W K Y M Q S U E U W P E Q S G E I S L <br /><br />The formula to know witch letter is the one you're looking for is : <br /><span style="color: #FFFF00">There is 7 rows so, multiply the row index by 7.</span> Scince the last letter of row 0 is at column 6, the first letter of the second row will be just after it, so effectively it's number 7.<br /> Then, just add the column index to get the final index number. <br />In that case, 2*7=14; 14+5=19 <br />Looking in the list above, the 20th letter is effectively P. It's number 19, but it's the 20th because the index starts from zero.</div>  I guess the part that was kind of confusing to me was when Bregalad said, &quot;<span style="color: #FFFF00">There is 7 rows so, multiply the row index by 7.</span>&quot;  There aren't 7 rows!!! More like 3 rows I think. 4 rows numbered 0 through 3.  So that was difficult for me. <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">The exact formula obviously depends on how your maps are stored, but the typical way to convert pixel coordinates into map offsets is more like (y / MetatilesWidth) * NumberOfMetatilesPerRow +  (x / MetatileHeight). So if your metatiles are 16x16 pixels the formula is (y / 16) * 16 + (x /16). If your metatiles are 32x32 pixels, it's (y / 32) * 8 + (x / 32). Once you have that offset, you can read a the index of the metatile at that location of the map and check it's collision information.</div>  Yes, ok I'm going to try this out, tokumaru, right now...  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Oct 05, 2012 1:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">The exact formula obviously depends on how your maps are stored, but the typical way to convert pixel coordinates into map offsets is more like (y / MetatilesWidth) * NumberOfMetatilesPerRow +  (x / MetatileHeight). So if your metatiles are 16x16 pixels the formula is <span style="color: #FFFF00">(y / 16) * 16</span> + (x /16). </div><br />Isn't that equal to <span style="color: #FFFF00">y</span> + (x/16) ?  That seems crazy to me.  <img src="./images/smilies/icon_eek.gif" alt=":shock:" title="Shocked" /> <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" /><br /><br /><span style="color: #FF0040">edit: that's quite a lot to think about... I have to go mow now.  So I'll have to come back to this...  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> </span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 05, 2012 2:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Bregalad's formula is correct, for when there are 7 items per row. The formula for reading data from a 2D array which is stored in memory linearly is always <strong>Y * ElementsPerRow + X</strong>, that doesn't change. But you also have to take into consideration that the base unit is the type of element you are accessing, in this case, metatiles. If you have pixel coordinates, you have to first convert them to metatile coordinates, hence the need to divide both X and Y by the dimensions of your metatiles before applying that formula.<br /><br />Another thing that will affect how you apply the formula is how your levels are stored in RAM/ROM. If you store it screen by screen, then ElementsPerRow will always be the same, because the number of metatiles per screen doesn't change. If you don't divide your level in screens, then ElementsPerRow will be the length of the entire level, and it will vary from level to level. IMO, things are easier if you divide the levels into screens, because the metatile offsets will always fit in 8 bits, and the multiplications/divisions can be easily done with shifts.<br /><br />Here comes another (untested) example of data arrangement (and how to access it):<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LevelMap:<br /><br />&nbsp; &nbsp;;first screen:<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;;(another 12 rows here)<br />&nbsp; &nbsp;.db $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10<br /><br />&nbsp; &nbsp;;second screen:<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $00, $00, $00, $00, $00, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;;(another 12 rows here)<br />&nbsp; &nbsp;.db $10, $10, $20, $20, $20, $20, $20, $20, $20, $21, $22, $23, $00, $00, $00, $00<br /><br />&nbsp; &nbsp;;third screen:<br />&nbsp; &nbsp;.db $22, $00, $22, $00, $22, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.db $22, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;;(another 12 rows here)<br />&nbsp; &nbsp;.db $20, $20, $20, $20, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10<br /><br />&nbsp; &nbsp;;(keep going for as many screens as you want)<br /><br />;Reads the index of the metatile at position (PointX, PointY) in the level map<br />ReadMetatile:<br /><br />&nbsp; &nbsp;;get the index of the screen<br />&nbsp; &nbsp;ldy PointX+1<br /><br />&nbsp; &nbsp;;multiply it by 240 (using a look-up table) and add it to the base<br />&nbsp; &nbsp;;address of the level to create a pointer to the screen we need<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;lda ScreenOffsetLo, y<br />&nbsp; &nbsp;adc LevelMap+0<br />&nbsp; &nbsp;sta ScreenPointer+0<br />&nbsp; &nbsp;lda ScreenOffsetHi, y<br />&nbsp; &nbsp;adc LevelMap+1<br />&nbsp; &nbsp;sta ScreenPointer+1<br /><br />&nbsp; &nbsp;;calculate the index of the metatile: (Y / 16) * 16 + (X / 16)<br />&nbsp; &nbsp;lda PointX+0<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;lsr<br />&nbsp; &nbsp;sta Temp<br />&nbsp; &nbsp;lda PointY+0<br />&nbsp; &nbsp;and #%11110000<br />&nbsp; &nbsp;ora Temp<br />&nbsp; &nbsp;tay<br /><br />&nbsp; &nbsp;;read the metatile<br />&nbsp; &nbsp;lda (ScreenPointer), y<br /><br />&nbsp; &nbsp;;return<br />&nbsp; &nbsp;rts</div><br />Now you can do whatever you want with that information. Want to know if that metatile is solid? Do something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda MetatileCollision, x<br />&nbsp; &nbsp;and #BITTHATINDICATESWHETHERAMETATILEISSOLID<br />&nbsp; &nbsp;beq +NotSolid</div><br />Want to know what is the top left tile of that metatile?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;tax<br />&nbsp; &nbsp;lda MetatileTopLeft, x</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Oct 05, 2012 2:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><span style="color: #FFFF00">(y / 16) * 16</span> + (x /16).</div><br />Isn't that equal to <span style="color: #FFFF00">y</span> + (x/16) ?  That seems crazy to me.</div><br />Not really, because the lower 4 bits are cleared in the process of shifting right and back left. So as a shortcut you can just do <strong>AND #%11110000</strong> instead of <strong>LSR LSR LSR LSR ASL ASL ASL ASL</strong>. It works the same. Stop thinking about math as you learned in school for a minute and try to see it as the 6502 sees it (which is much simpler than what you learned in school, IMO).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Oct 05, 2012 10:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: 8x16 sprite is really a 16x32 pixel image?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><span style="color: #FFFF00">(y / 16) * 16</span> + (x /16).</div><br />Isn't that equal to <span style="color: #FFFF00">y</span> + (x/16) ?  That seems crazy to me.</div><br /><span style="color: #FF4080">Not really, because the lower 4 bits are cleared in the process of shifting right and back left.</span> So as a shortcut you can just do <strong>AND #%11110000</strong> instead of <strong>LSR LSR LSR LSR ASL ASL ASL ASL</strong>. It works the same. Stop thinking about math as you learned in school for a minute and try to see it as the 6502 sees it (which is much simpler than what you learned in school, IMO).</div><br /><br /><span style="color: #FF4080"><strong>WOW!!!!!</strong>  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />  <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" />  <img src="./images/smilies/icon_idea.gif" alt=":idea:" title="Idea" />  <img src="./images/smilies/icon_idea.gif" alt=":idea:" title="Idea" />  <img src="./images/smilies/icon_idea.gif" alt=":idea:" title="Idea" />  <img src="./images/smilies/icon_idea.gif" alt=":idea:" title="Idea" />  <img src="./images/smilies/icon_idea.gif" alt=":idea:" title="Idea" />  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> </span><br /><span style="color: #40FF40">A<s>G</s></span>ah... I've read through these posts so many times...  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> it's bed time... will finish this post tomorrow...<span style="color: #40FF40">.<br />G<s>g</s></span>oodnight yall.  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><span style="color: #40FF40">edited once more: aaaah... tokumaru, thank you very very much!  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> </span><br /><br /><span style="color: #FF80BF">edits #2: Good morning! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  Goodness... i was really sleepy... sorry.  </span><span style="color: #FF40FF"><strong>THANK YOU SO VERY VERY VERY MUCH TOKUMARU!!</strong></span>  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>50</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>