<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=10&amp;t=12090" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-11-30T16:10:04-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=10&amp;t=12090</id>
<entry>
<author><name><![CDATA[JoeGtake2]]></name></author>
<updated>2014-11-30T16:10:04-07:00</updated>
<published>2014-11-30T16:10:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137118#p137118</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137118#p137118"/>
<title type="html"><![CDATA[Re: Detecting 'point of collision']]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137118#p137118"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />I had written a lot about how to get left, right, up or down, but it boils down to exactly what you're thinking. absolute value of object X midpoint - enemy X midpoint. absolute value of object Y midpoint - enemy Y midpoint. If X distance was greater than Y, collision is horizontal, else collision is vertical.<br /></div><br /><br />Yes, that is exactly what I am currently doing...having the abs function makes this MUCH easier and faster!  Now I was comparing the two values and then branching depending on which was the larger of the two for both x and y...it was just bloated that way (it worked fine, but I knew there had to be a quicker method!)<br /><br />Thanks so much.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6590">JoeGtake2</a> — Sun Nov 30, 2014 4:10 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2014-11-30T15:44:21-07:00</updated>
<published>2014-11-30T15:44:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137117#p137117</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137117#p137117"/>
<title type="html"><![CDATA[Re: Detecting 'point of collision']]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137117#p137117"><![CDATA[
First off, here's absolute value 8 bit:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">  lda value<br />  bpl done;If positive, we already have the absolute value<br />  eor #$FF<br />  clc<br />  adc #$01<br />done:<br /></div><br />Imagine value is #$FF. #$FF is -1. EOR #$FF yields #$00. Add #$01, result is #$01. Works for all 8 bit values. Same theory works for 16bit. (EOR #$FFFF, add #$0001)<br /><br />It sounds like your plan is sound once you have that. The only thing you really want is the fastest collision check. <a href="http://atariage.com/forums/topic/71120-6502-killer-hacks/page-3#entry1054049" class="postlink">It's here.</a> Note you need to do it once for X (where SIZE2/SIZE1 = object width), and (only if the X collision checks out) once for Y (where SIZE2/SIZE1 = object height). Don't need to do Y (or anything else), if the X check doesn't set the carry. Depending on your game, you may have to do some math to get SIZE2-1 and SIZE1+SIZE2-1. My object width's/heights are already stored with one subtracted. (So #$0F means the object is 16 pixels wide.) <br /><br />So I can just do sbc OBJwidth,y for SIZE2-1. For SIZE1+SIZE2-1, I do this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sec;To add one extra. We're adding (SIZE1-1)+(SIZE2-1) which rearranged looks like (SIZE1+SIZE2)-2. But we want (SIZE1+SIZE2)-1, so the extra one added by the carry gets us there.<br />lda OBJwidth,y<br />adc OBJwidth,x<br />sta temp</div><br />A fun bonus to the above, unless you have HUGE objects (the sum of their widths is &gt; 255) this addition will clear the carry. And the routine needs the carry clear at the start, so you can get right into it without changing the carry again.<br /><br />Once you've determined the collision is actually happening, I wouldn't worry too much about doing complicated things. Actual collisions are rare, it's the checks that aren't. The check is fast enough, and collisions are probably so rare they won't be the bottle neck.<br /><br />I had written a lot about how to get left, right, up or down, but it boils down to exactly what you're thinking. absolute value of object X midpoint - enemy X midpoint. absolute value of object Y midpoint - enemy Y midpoint. If X distance was greater than Y, collision is horizontal, else collision is vertical. <br /><br />And you can use the state of the carry from the corresponding &quot;distance&quot; subtract (store it when you do them), to figure out left/right, or up/down once you're narrowed it between horizontal or vertical.<br /><br />It's two adds (if you're getting the mid points), two subtracts (fast), two absolute values (fast), and a compare between them (faster). After that, you already know which direction to go because it's based on the state of the carry from one of the subtracts you already did. Not really something to worry about as far as being CPU intensive.<br /><br />I've only done something similar to this, and not exactly this. So yell at me if it doesn't work and I'll see what I can do.<br /><br />Edit: Worth noting, I'm not actually not sure how the super fast collision routine behaves with object on opposite sides of the screen. For instance, player's X is 0 and enemy is partially off the screen to the right. I kind of imagine they'd collide, but I don't actually know. I don't know because I extended the routine to 16 bits, and objects that far away wouldn't be alive at the same time for me.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Sun Nov 30, 2014 3:44 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[JoeGtake2]]></name></author>
<updated>2014-11-30T10:56:53-07:00</updated>
<published>2014-11-30T10:56:53-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137104#p137104</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137104#p137104"/>
<title type="html"><![CDATA[Detecting 'point of collision']]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=12090&amp;p=137104#p137104"><![CDATA[
This might be more of a programming question than NES specific, however I can conceive of plenty of ways to do this with higher level functions or if cycles weren't a concern...so I guess I'm looking for a suggested method for something much more efficient - <br /><br />I'm looking to essentially detect whether a collision with an object happened top,right,bottom or left.  Figuring &quot;left or right&quot; or &quot;top or bottom&quot; is incredibly simple - just a quick compare of the x or y values respectively.  But out of the four directions is, of course, uglier.<br /><br />Currently, I've got something very bloated and ugly - gauging the difference between the two objects' x values vs the difference between the y values and using the greater of the two as a determining factor as to whether I should check vertical or horizontal, and using the compare as above.  However, without being able to get an absolute value (is there a way to get an absolute value?), this involves the extra step of seeing which object has the larger coordinate value and then make two cases for one or the other...just to determine which value to subtract from which for that coordinate, doing the same for the other coordinate, before doing the compare between x and y coordinates to determine if I should check vert or horizontal...to then do a compare like above.<br /><br />Not sure if that made any sense at all to anyone, and I'm thinking there might be a much simpler process.  I'm sort of staring at it too closely at this point, wondering if anyone had any thoughts.<br /><br />Thanks!<br /><br />Joe<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6590">JoeGtake2</a> — Sun Nov 30, 2014 10:56 am</p><hr />
]]></content>
</entry>
</feed>