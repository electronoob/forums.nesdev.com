<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Accessing RAM</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Accessing RAM</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7212">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7212</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Tue Nov 30, 2010 5:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Accessing RAM</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have learned a majority of my 6502 programming from Nerdy Nights which uses the NESASM3 compiler. NESASM3 uses .rsset to start the RAM location and .rs to set aside locations:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; .rsset $0000<br />Var .rs 1 ; Reserve one byte &#40;$0000&#41;</div>
<br />
<br />This is NESASM's way of working with RAM via a macro. What is the 6502 way to do this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Nov 30, 2010 5:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This question has no meaning.  The 6502 has no concept of labels, just the instructions and addresses themselves.  It's completely dependent on the assembler you are using.  Which assembler?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Tue Nov 30, 2010 5:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Perhaps I didn't word my question correctly? What I am trying to say is, that is how NESASM3 allows a person to code access to the RAM via the use of a built-in macro.
<br />
<br />Using pure 6502 assembly, how would one write the code to access addresses in the RAM?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 30, 2010 6:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To store the number five at address $80:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; lda #5<br />&nbsp; sta $80</div><br />To do the same thing with a label:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lives = $80<br />STARTING_LIVES = 5<br />; ...<br />&nbsp; lda #STARTING_LIVES<br />&nbsp; sta lives</div><br />And to do the same thing with reserving storage under ca65 (NESASM appears similar in this respect):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">STARTING_LIVES = 5<br />.segment &quot;ZEROPAGE&quot;<br />lives: .res 1<br /><br />.segment &quot;CODE&quot;<br />; ...<br />&nbsp; lda #STARTING_LIVES<br />&nbsp; sta lives</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Nov 30, 2010 6:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To access the RAM, you have instructions like LDA $20 or LDX $0654.  They have the address right inside the instruction.
<br />
<br />I have no idea what you mean when you say "Pure 6502 assembly".  There are assemblers which let you use labels and equates, and there's the binary machine code itself which has no idea what a label is, just memory addresses.
<br />
<br />Some assemblers like you to use stuff like MyLabel .equ $20, then LDA MyLabel.  Other assemblers use the = directive to declare labels.  ASM6 lets you define a bunch of labels in RAM by using the ENUM directive.
<br />
<br />This is all specific to which assembler tool you are using to assemble your code.  Just saying 6502 doesn't indicate any particular assembler.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Tue Nov 30, 2010 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Tepples has what I was seeking. So correct me if I'm wrong here, as far as writing to the RAM goes, you can write anywhere between $0000-$0800 which would be the NES' 2K worth of RAM? If I have WRAM in my game, then I could also use $6000-$8000? Am I in the ballpark here? Anything missing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 30, 2010 6:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Dwedit wrote:</div><div class="quotecontent">I have no idea what you mean when you say "Pure 6502 assembly".  There are assemblers which let you use labels and equates, and there's the binary machine code itself which has no idea what a label is, just memory addresses.</div><br />I'm guessing it has something to do with bare-bones dialects of assembly language used by interactive assemblers such as <a href="http://en.wikipedia.org/wiki/DEBUG.EXE" class="postlink">another platform's debug.exe</a> and the <a href="http://en.wikipedia.org/wiki/Integer_BASIC#The_Mini-Assembler_and_other_auxiliary_firmware" class="postlink">Apple II mini-assembler</a>, or the sort of assembly language you get from the disassembler built into Nintendulator or FCEUX. These dialects tend to lack labels.<br /><br />As I interpret the question, it's "what do these labels <em>do</em>?"<br /><br />EDIT: I was right. I'll edit in an answer to the new question:<br /><br /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">as far as writing to the RAM goes, you can write anywhere between $0000-$0800 which would be the NES' 2K worth of RAM? If I have WRAM in my game, then I could also use $6000-$8000? Am I in the ballpark here? Anything missing?</div>
<br />Addresses $0200-$07FF are free, and $6000-$7FFF are also free if you have PRG RAM on your cartridge board. Addresses $0000-$01FF have special meanings, but you can put variables in unused parts of those. Shall I explain how my games use memory?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Nov 30, 2010 6:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Like it's been said, the CPU itself has no idea what a label is. It just sees addresses and numbers, nothing more. Assemblers were invented to make our lives easier, because they allow us to use names and expressions, which are easier to understand and keep track of than raw numbers, and when you assemble the source file(s) they generate all those addresses and numbers for you.
<br />
<br />If you want to code in "pure 6502" you are gonna need an hex editor, and you are gonna have to input all the operations using their codes instead of their names (i.e. $20 instead of RTS - and the code changes depending on the addressing mode: there are 8 different codes for LDA, for example) and all values and addresses as plain numbers. It will take you forever to build the simplest of the programs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Tue Nov 30, 2010 6:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What I mean with 'pure 6502' was just the bare mnemonics/operands i.e.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $0200</div><br /><br />As opposed to <br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA Some_Label</div><br /><br />I didn't mean writing the actual opcodes and values. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Addresses $0000-$01FF have special meanings, but you can put variables in unused parts of those.</div><br /><br />How exactly would one know where the unused slots are? The information that I have on the '.rsset' directive with NESASM3 allows you to start the addressing at $0000 and work your way up from there so wouldn't that have the potential to screw with the 'special meanings'<br /><br />So for my sprites in-game, I have something like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDX #$00<br />LoadSprite:<br />&nbsp; &nbsp;LDA Sprite, x<br />&nbsp; &nbsp;STA $0200, x<br />&nbsp; &nbsp;INX<br />&nbsp; &nbsp;CPX #$18<br />&nbsp; &nbsp;BNE LoadSprite</div><br /><br />To load the sprites into the RAM so it occupies $0200-$0217, now in NMI I have to put:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2003<br />&nbsp; &nbsp;LDA #$02<br />&nbsp; &nbsp;STA $4014</div>
<br />
<br />I actually have two question regarding this:
<br />
<br />1) How does the PPU know when to stop reading?
<br />2) Why do I write the second byte of the address to $4014 instead of $2003?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 30, 2010 6:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">How exactly would one know where the unused slots are? The information that I have on the '.rsset' directive with NESASM3 allows you to start the addressing at $0000 and work your way up from there so wouldn't that have the potential to screw with the 'special meanings'</div><br />Instructions using indirection need to use addresses in $0000-$00FF, the 256-byte "zero page". Stack instructions (PHA, PLA, JSR, RTS, etc.) need to use addresses in $0100-$01FF, the 256-byte "stack page". Those are the only two areas with special meanings to the CPU, but rough conventions about the use of some other areas arose during the NES's commercial era. I just wrote a wiki article showing <a href="http://wiki.nesdev.com/w/index.php/Sample_RAM_map" class="postlink">suggested uses for parts of RAM</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">To load the sprites into the RAM so it occupies $0200-$0217, now in NMI I have to put:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2003<br />&nbsp; &nbsp;LDA #$02<br />&nbsp; &nbsp;STA $4014</div><br /><br />I actually have two question regarding this:<br /><br />1) How does the PPU know when to stop reading?</div><br />The CPU's DMA unit always copies exactly 256 bytes from this page to the OAM data port on the PPU ($2004). Unused memory in this page should be cleared to values between $EF and $FF, so that unused sprites are hidden below the bottom of the visible area of the screen.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">2) Why do I write the second byte of the address to $4014 instead of $2003?</div>
<br />You're writing the <em>destination</em> address, which is inside OAM, to PPU port $2003. (This address should always be set to zero unless you really know what you're doing.) You're writing the upper 8 bits of the <em>source</em> address, which is inside ordinary RAM, to $4014. The copy always starts at the first byte ($xx00) of this page.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Tue Nov 30, 2010 6:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Once again, thank you for the help. I am sorry I wasn't all that clear about what I was seeking Dwedit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Nov 30, 2010 8:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">67726e wrote:</div><div class="quotecontent">What I mean with 'pure 6502' was just the bare mnemonics/operands i.e.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA $0200</div></div>
<br />Keep in mind that if you plan on coding like this, it will be hell to move stuff around when you need to, and trust me, that will happen eventually. Say that you decide to use 64 bytes to keep track of a number of items available in a level, but later you decide that you want to have 128 items per level instead of just 64. What happens if you have used the space that comes after those 64 bytes for something else? You'll have to go through all of the code looking for the parts where you used those addresses and change them to something else. If you had named the variables, it would just be a matter of changing their declarations, and the whole program would use the variables in their new place.
<br />
<br />Another advantage to naming your variables is that code gets easier to read. If you decide to store the number of lives at address $043F, a few days later you will already have forgotten that, and will probably be lost when looking at a "DEC $043F" instruction if you didn't write a comment indicating that this code is taking a life away. But if instead you wrote "DEC NumberOfLives", the code would be self-explanatory.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>67726e</b> [ Tue Nov 30, 2010 8:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Don't get me wrong. I use labels/variables for my code. Self-commenting code is the best kind after all but I was asking more for the sake of learning and understanding how things work rather than how I wish to code.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Nov 30, 2010 9:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, I see. All you need to know right now is that deep down, the CPU can only deal with bits &amp; bytes. Every command has a code, operands are either immediate values or addresses, and each operation takes a set amount of time to complete. All the shit offered by assemblers (labels, macros, and all kinds of directives) are there just to make our life easier, so that we don't have to keep track of addresses, offsets, or anything like that.
<br />
<br />With time, as your programs get more complex and you start to debug them in emulators such as FCEUX you'll get a better understanding of the stack, zero page and so on, because you'll be able to observe how they work, step by step. Don't overestimate the 6502 though, it's a very straightforward CPU that follows a very specific set of rules.
<br />
<br />Sometimes, descriptions like "<strong>B</strong>ranch if <strong>EQ</strong>ual" might not make much sense, because sometimes you are not even comparing anything, so how could the CPU even consider something equal to or different from something else? But when you look at the underlying steps of the operation you discover that what it actually does is branch when the Z(ero) flag is set, so any operation that resulted in zero (even if it was just loading the value $00 into some register) will cause that branch to be taken, even if it's not a comparison. Lots of other mnemonics can be misleading (RTS for example: it doesn't necessarily returns, it just jumps to whatever address was put at the top of the stack, be it the place where the routine was called or not), but when you look at what they actually do, step by step, you will be able to make better use of them.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>