<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - PPU display background pattern</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">PPU display background pattern</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10489">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=10489</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>StephenM</b> [ Thu Sep 12, 2013 9:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><span style="text-decoration: underline">Goal</span>: I would like to set the NES background as a single repeating pattern.<br /><br />Something like this:<br /><img src="http://stephenmeier.net/files/nes/pattern.png" alt="Image" /><br /><br /><span style="text-decoration: underline">Problem</span>: I can't get my pattern to display. I have the pattern I want loaded into the pattern table, I have written the colors I want to the background palette, all name tables are pointing to tile zero, all my attribute tables are zero; yet nothing is being displayed.<br /><br /><span style="text-decoration: underline">Logical program flow</span> (what I think my program is doing):<br /><ul><li>disable interrupts / set stack pointer</li><li>set PPU control #1 bits to %00001000 so that:<br /><ul><li>D0-D1: name table address set to $2000</li><li>D2: PPU increment is 1</li><li>D3: sprite pattern address is $1000</li><li>D4: background pattern address is $0000</li><li>D5: sprite size is 8x8</li><li>D6: ?</li><li>D7: disable NMI on Vblank</li></ul></li><li>set PPU control #2 bits to %00011110 so that:<br /><ul><li>D0: color display</li><li>D1: no background clipping</li><li>D2: no sprite clipping</li><li>D3: background is visible</li><li>D4: sprites are visible (no sprites in this example)</li><li>D5-D7: color intensity is set to none</li></ul></li><li>clear Vblank flag</li><li>first wait for Vblank</li><li>second wait for Vblank</li><li>enable NMI on Vblank</li><li><span style="text-decoration: underline">Branch</span>:<br /><ul><li>Main loop constantly sets $00 to whatever is in the Xreg</li><li>on NMI interrupt<br /><ul><li>write two bytes to the background palette (first is transparency, second is the color I want the pattern to be)</li><li>write one byte of $00 to name table #0 and attribute table #0 (really does nothing)</li></ul></li></ul></li></ul><br />I have set up my CHR-ROM to point to the second color I loaded into the background palette. Here is my pattern table and palette according to FCEUX:<br /><img src="http://stephenmeier.net/files/nes/palette.png" alt="Image" /><br /><br />Here is my name tables according to FCEUX:<br /><img src="http://stephenmeier.net/files/nes/nametable.png" alt="Image" /><br /><br />Yet my emulator is only displaying:<br /><img src="http://stephenmeier.net/files/nes/display.png" alt="Image" /><br /><br /><span style="text-decoration: underline">Secondary/tangent questions</span>:<br /><ul><li>Why is so much of the NES memory mirrored? From a newb point of view this seems wasteful.</li><li>From (<a href="http://wiki.nesdev.com/w/index.php/Init_code" class="postlink">http://wiki.nesdev.com/w/index.php/Init_code</a>); disabling IRQs (opcode SEI) is good if one might later desire to manually call the RESET routine. This makes sense to me but I have noticed that the order in which NMI and IRQs are enabled (I'm referencing my &quot;INIT:&quot; label in &quot;test.s&quot; below) determines whether or not PPU memory is written to (i.e. calling &quot;CLI&quot; before setting the 7th bit of PPU control #1 to 1 causes pattern table, name table, and attribute table to be empty; it might actually be causing the whole NES to crash, I'm not sure.)<br /><ul><li>Here I'm thinking it might be best to not manually disable IRQs (call SEI) and let the system do it naturally on interrupt for the benefit of simplicity.</li></ul></li></ul><br />&quot;test.s&quot;<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; TESTING<br />; cl65 -t none -C nes.cfg -o test.nes test.s<br /><br />; Program ROM<br />.segment &quot;PRG&quot;<br /><br />RESET:<br />&nbsp; &nbsp;; set up a few things and wait for PPU<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;SEI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; in case of manual reset call<br />&nbsp; &nbsp;CLD&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; generic 6502 debugger friendly<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX #$FF&nbsp; &nbsp; &nbsp; &nbsp;; setting value for stack pointer<br />&nbsp; &nbsp;TXS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; setting stack pointer<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX #%00001000 ; PPU control bits<br />&nbsp; &nbsp;STX $2000&nbsp; &nbsp; &nbsp; ; set PPU control register #1<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX #%00011110 ; PPU control bits<br />&nbsp; &nbsp;STX $2000&nbsp; &nbsp; &nbsp; ; set PPU control register #2<br /><br />&nbsp; &nbsp;BIT $2002&nbsp; &nbsp; &nbsp; ; clears the Vblank flag on read (BIT sets the Neg flag to bit 7)<br />&nbsp; &nbsp;<br />VBLANKWAIT1:<br />&nbsp; &nbsp;; wait for PPU to stabilize<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;BIT $2002&nbsp; &nbsp; &nbsp; &nbsp;; sets CPU Neg flag to Vblank flag<br />&nbsp; &nbsp;BPL VBLANKWAIT1 ; if the Neg flag isn't set branch to VBLANKWAIT<br />&nbsp; &nbsp;<br />VBLANKWAIT2:<br />&nbsp; &nbsp;; wait a second time<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;BIT $2002&nbsp; &nbsp; &nbsp; &nbsp;; sets CPU Neg flag to Vblank flag<br />&nbsp; &nbsp;BPL VBLANKWAIT2 ; if the Neg flag isn't set branch to VBLANKWAIT<br />&nbsp; &nbsp;<br />INIT:<br />&nbsp; &nbsp;; enable interrupts<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX #%10001000 ; PPU control bits<br />&nbsp; &nbsp;STX $2000&nbsp; &nbsp; &nbsp; ; set PPU control register #1<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;CLI<br />&nbsp; &nbsp;<br />LOOP:<br />&nbsp; &nbsp;; main loop<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;STX $00<br />&nbsp; &nbsp;JMP LOOP<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;RTI<br /><br />NMI:<br />&nbsp; &nbsp;; Non-maskable interrupt<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$3F&nbsp; &nbsp; &nbsp; &nbsp;; set address pointer in VRAM to $3F00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$17&nbsp; &nbsp; &nbsp; &nbsp;; write a little to background palette<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;LDA #$03<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$20&nbsp; &nbsp; &nbsp; &nbsp;; set address pointer in VRAM to $2000<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$00<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #%00000000 ; write a little to name table #0<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #$23&nbsp; &nbsp; &nbsp; &nbsp;; set address pointer in VRAM to $23C0<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;LDA #$C0<br />&nbsp; &nbsp;STA $2006<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;LDA #%00000000 ; write a little to attibute table #0<br />&nbsp; &nbsp;STA $2007<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;RTI<br /><br />IRQ:<br />&nbsp; &nbsp;; Interrupt request<br /><br />&nbsp; &nbsp;RTI<br /><br />; iNES header<br />.segment &quot;HDR&quot;<br />&nbsp; &nbsp;.byte &quot;NES&quot; ; signature<br />&nbsp; &nbsp;.byte $1A&nbsp; &nbsp;; signature<br />&nbsp; &nbsp;.byte $02&nbsp; &nbsp;; # of 16kb PRG-ROM banks<br />&nbsp; &nbsp;.byte $01&nbsp; &nbsp;; # of 8kb CHR-ROM banks<br />&nbsp; &nbsp;.byte $00&nbsp; &nbsp;; ROM control byte one<br />&nbsp; &nbsp;.byte $00&nbsp; &nbsp;; ROM control byte two<br />&nbsp; &nbsp;.byte $00&nbsp; &nbsp;; # of 8kb RAM banks<br />&nbsp; &nbsp;.byte $00&nbsp; &nbsp;; reserved<br /><br />; Vectors<br />.segment &quot;VEC&quot;<br />&nbsp; &nbsp;.addr NMI<br />&nbsp; &nbsp;.addr RESET<br />&nbsp; &nbsp;.addr IRQ<br /><br />; Pattern tables<br />.segment &quot;CHR&quot;<br />&nbsp; &nbsp;; one tile<br /><br />&nbsp; &nbsp;; least significant bit one<br />&nbsp; &nbsp;.byte %00011000<br />&nbsp; &nbsp;.byte %00100100<br />&nbsp; &nbsp;.byte %01011010<br />&nbsp; &nbsp;.byte %01000010<br />&nbsp; &nbsp;.byte %01000010<br />&nbsp; &nbsp;.byte %01011010<br />&nbsp; &nbsp;.byte %00100100<br />&nbsp; &nbsp;.byte %00011000<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;; least significant bit two<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br />&nbsp; &nbsp;.byte %00000000<br /><br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Sep 12, 2013 11:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see no $2005 writes or clearing of $2006, which from what I can see looks to be the root cause (based on lines shown in the 3rd screenshot, which indicate where the X/Y scroll are at).<br /><br /><!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/PPU_scrolling">http://wiki.nesdev.com/w/index.php/PPU_scrolling</a><!-- m --><br /><!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/The_skinny_on_NES_scrolling">http://wiki.nesdev.com/w/index.php/The_ ... _scrolling</a><!-- m --><br /><br />I can give out about 5 or 6 URLs of threads here on the forum discussing all of this too, and they're just as convoluted.  Just search for any posts from me with $2005 or PPUSCROL mentioned, but I guess the most applicable post would be this one from tokumaru:<br /><br /><!-- l --><a class="postlink-local" href="http://forums.nesdev.com/viewtopic.php?p=108239#p108239">viewtopic.php?p=108239#p108239</a><!-- l -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doppelganger</b> [ Thu Sep 12, 2013 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I see two problems with your code.<br /><br />First, there is something you need to know about the address register at $2006: it is also used by the PPU during rendering.  It needs to be initialized during vertical blank after using it to update PPU RAM (tables, palette).  There are two other registers that affect the internal address latch: $2000 and $2005.  Ideally, you should do the following after updating whatever needs to be updated in PPU:<br /><br />A. Set the scroll in $2005 to whatever horizontal and vertical scroll values you need, and<br />B. Set $2000 using the name table you need for bits 1 and 0 (making sure to appropriately set the NMI enable and sprite/background bits).<br /><br />Second, you did not disable the 2a03 APU's frame counter by writing a 1 to bit 6 of $4017.  This means that it will continue to send IRQs to the CPU until:<br /><br />A. the frame interrupt is acknowledged by reading $4015, or<br />B. the frame interrupt is inhibited by writing a 1 to bit 6 of $4017.<br /><br />The fastest way to deal with this, of course, is to simply do an SEI and be done with it, if you're not using any IRQs at all, which is the approach I would go with in this case.  <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Secondary/tangent questions:<br /><br />    Why is so much of the NES memory mirrored? From a newb point of view this seems wasteful.<br />    From (<!-- m --><a class="postlink" href="http://wiki.nesdev.com/w/index.php/Init_code">http://wiki.nesdev.com/w/index.php/Init_code</a><!-- m -->); disabling IRQs (opcode SEI) is good if one might later desire to manually call the RESET routine. This makes sense to me but I have noticed that the order in which NMI and IRQs are enabled (I'm referencing my &quot;INIT:&quot; label in &quot;test.s&quot; below) determines whether or not PPU memory is written to (i.e. calling &quot;CLI&quot; before setting the 7th bit of PPU control #1 to 1 causes pattern table, name table, and attribute table to be empty; it might actually be causing the whole NES to crash, I'm not sure.)<br />        Here I'm thinking it might be best to not manually disable IRQs (call SEI) and let the system do it naturally on interrupt for the benefit of simplicity.</div><br /><br />NES memory is mirrored because Nintendo wanted to keep manufacturing costs low, I think.<br /><br />IRQs need to be acknowledged by the programmer (the method of this depends on what hardware causes the IRQ), or they will execute continuously.  This, I think, was meant to allow for multiple IRQs occurring, so that each hardware that requested the interrupt could be serviced in turn.  IRQs are not supposed to interfere with NMIs ideally.  The only reason why it would happen on the NES is because the IRQs are firing off continuously before the PPU hardware is given a chance to be allowed to fire off NMIs.<br /><br />Interrupts only disable IRQs until the RTI instruction is executed.  The RTI instruction returns the I flag to whatever it was set to before.  Therefore, you still need to disable IRQs outside of interrupt code if you don't want them to happen.<br /><br />I hope this hasn't been too confusing, I will attempt to clarify if need be.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Thu Sep 12, 2013 1:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">StephenM wrote:</div><div class="quotecontent">Why is so much of the NES memory mirrored? From a newb point of view this seems wasteful.</div><br />Quite the opposite! Mirroring memory requires less logic/hardware than NOT mirroring it. If you have only 2KB of memory to fill a space of 8KB, it's AUTOMATICALLY mirrored to fill the whole space. Since there are no negative side effects from the mirroring in most cases, it's cheaper/simpler to just leave the mirrors alone.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 12, 2013 3:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think he meant wasteful of the address space. Like you say, though, it's a tradeoff: waste logical address space, or use more hardware. Given the lack of need for logical address space, they choose to use less hardware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Sep 12, 2013 3:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Off-topic:<br /><br />I've never understood, on the NES/6502, what purpose mirrored CPU addressing ranges served.  I'm specifically referring to <a href="http://wiki.nesdev.com/w/index.php/CPU_memory_map" class="postlink">$0800 to $1FFF and $2008 to $3FFF</a>.<br /><br />I fully understand what it provides in the case of the SNES/65816, where for example portions of bank $00 are mirrored throughout other banks -- the purpose there should be obvious.<br /><br />Likewise, on the Apple IIGS (again 65816), there were some &quot;shadowed&quot; (mirrored) registers and memory ranges which I was told time and time again by older/senior programmers <strong>should</strong> be used because, somehow at some particular level (hardware-wise), &quot;they were faster than using the non-shadowed versions&quot;.  I still don't understand how this can be the case, since it's  going to cost the same number of CPU cycles no matter what the address is; I can see the benefit if there's a separate bus that runs at a higher clock speed that the mirrored/shadowed areas ties into, and that, say, a DMA chip could utilise (for memory copying/transfer), but the IIGS had no such thing.  The only thing that made sense (in this regard) was the &quot;mirroring&quot; of banks $00 and $01 to banks $E0 and $E1 on the IIGS, where banks $00/01 ran at a slower clock speed (to be compatible with the earlier Apple II models) while banks $E0/E1 ran at a higher clock speed (<a href="http://archive.org/stream/Apple_IIgs_ProDOS_16_Reference_HiRes/Apple_IIgs_ProDOS_16_Reference_HiRes_djvu.txt" class="postlink">reference</a>; search for the phrases &quot;shadowing is the term&quot; and &quot;$E0 and $E1 execute at standard clock speed&quot;).  I believe what I'm remembering are people telling me to access certain registers via $E0C0xx rather than $00C0xx to benefit from the higher clock speed; but how this matters I still don't understand (for example both <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta $e0c034</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">sta $00c034</tt> would take 5 cycles (assuming 8-bit accum)).<br /><br />Anyway, in the case of the NES/6502, I just don't see anything advantageous from the aforementioned mirroring.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 12, 2013 3:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />2A03 has limited pins. PPU/SRAM/etc. decoding is done externally with a '139. This generates select signals for the cartridge, internal SRAM, and PPU. It would have taken 3 more pins on the 2A03. I'm guessing that this would have pushed it into a package size that cost noticeably more at the time (economics of size aren't just the small amount of extra plastic/pins, but the quantity produced, molds, etc.) 2A03 and 2C02 also both have 40 pins, so they probably get some economy by using the same count.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 12, 2013 3:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />koitsu: Why would there need to be a software advantage to justify the mirrors on the NES? If it simplifies the hardware to leave it mirrored, isn't that purpose enough?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Sep 12, 2013 3:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well the 2A03 has 16 pins for A0-A15 (hence making up the full 16-bit address bus), and I understand that a 74LS139 is used to handle designation of &quot;what speaks to what&quot; (CPU vs. PPU vs. SRAM vs. external), but I still don't see how that justifies the $0800-1FFF and $2008-3FFF mirroring within CPU addressing space.  Why is that needed?  Why couldn't it just be left floating/open bus for the CPU?  Or is there some kind of &quot;commonality&quot; (not sure what other word to use here) between the addressing spaces (as far as the 74LS139 goes) within the PPU vs. CPU vs. SRAM vs. external that justifies this need?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Thu Sep 12, 2013 4:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">koitsu: Why would there need to be a software advantage to justify the mirrors on the NES? If it simplifies the hardware to leave it mirrored, isn't that purpose enough?</div><br />How does it simplify the hardware design?  That hasn't been explained.  A reference to a 74LS139 decoder being used does not explain <strong>why</strong> said CPU addressing ranges needed to be mirrored (respectfully blargg, not arguing or being combative).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Thu Sep 12, 2013 4:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Leaving certain address ranges as open bus would have required more hardware to generate the select signals for those ranges.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Sep 12, 2013 4:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The '139 has two one-of-four decoders. Each has an active-low enable, two inputs, and four active-low outputs.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">A&nbsp; &nbsp;B&nbsp; /EN /Y0 /Y1 /Y2 /Y3<br />---------------------------<br />X&nbsp; &nbsp;X&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;H<br />L&nbsp; &nbsp;L&nbsp; &nbsp;L&nbsp; &nbsp;L&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;H<br />L&nbsp; &nbsp;H&nbsp; &nbsp;L&nbsp; &nbsp;H&nbsp; &nbsp;L&nbsp; &nbsp;H&nbsp; &nbsp;H<br />H&nbsp; &nbsp;L&nbsp; &nbsp;L&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;L&nbsp; &nbsp;H<br />H&nbsp; &nbsp;H&nbsp; &nbsp;L&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;H&nbsp; &nbsp;L</div><br />The NES feeds the first one A from PHI2 and B from A15, with /EN low so it's always enabled. This generates /Y1 on access to 0-$7FFF, and /Y3 on access to $8000-$FFFF. The latter goes directly to the cartridge. /Y0 and /Y2 aren't useful as they indicate the other half of a cycle.<br /><br />/Y1 is tied to the second decoder's enable, so it's enabled on access to the low half of the address space. A goes to A13 and B to A14. This divides the low half into four segments, 0-$1FFF, $2000-$3FFF, $4000-$5FFF, and $6000-$7FFF. It uses /Y0 for SRAM and /Y1 for the PPU. To &quot;fully decode&quot; SRAM, it'd need to look at A12 and A11, only enabling then they're low. To fully decode the PPU, it'd need to additionally look at A3-A12 (10 additional address lines), only selecting the PPU when they are all low. This adds hardware <em>and</em> latency due to gate propagation delays.<br /><br />Incomplete decoding is elegant in the context of doing enough to work and not wasting extra hardware on things that don't matter.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Thu Sep 12, 2013 4:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, for example, mirroring a particular range 4 times means that there are 2 bits in the address decoding for it that don't have to do anything. The mirroring is simply a side effect of ignoring those bits.<br /><br />Mirroring is a just a side effect of not using more address lines than are strictly needed. It's not a situation you would normally go out of your way to create, because mirrors aren't normally useful. (The Apple II thing you described is fairly unusual, I think.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>StephenM</b> [ Thu Sep 12, 2013 5:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I see no $2005 writes or clearing of $2006, which from what I can see looks to be the root cause<br /></div><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">A. Set the scroll in $2005 to whatever horizontal and vertical scroll values you need, and<br />B. Set $2000 using the name table you need for bits 1 and 0 (making sure to appropriately set the NMI enable and sprite/background bits).<br /></div><br />Thanks! Seems like scrolling can get quite complicated! I will eventually have to master scrolling in both horizontal and vertical directions.<br /><br />I've added the following ASM, it seems to put my X, Y at (0, 0) and clear $2006 which is what I'm going for.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$00&nbsp; &nbsp; &nbsp; &nbsp;; x position<br />STA $2005<br />LDA #$00&nbsp; &nbsp; &nbsp; &nbsp;; y position<br />STA $2005<br />&nbsp; &nbsp;<br />LDA #$00&nbsp; &nbsp; &nbsp; &nbsp;; clear $2006<br />STA $2006<br />LDA #$00<br />STA $2006<br /></div><br />(no reason why I'm setting the accumulator multiple times. I wouldn't do this in a real project)<br /><br />It seems that the bigger problem was that PPU control byte #2 was being written to $2000 instead of $2001, that explains why nothing was being displayed. I must have copied and pasted the first PPU control line, changed the bits, but forgot to change the address it was being written to.<br /><br />Success!<br /><img src="http://stephenmeier.net/files/nes/screen.png" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Thu Sep 12, 2013 5:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: PPU display background pattern</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">StephenM wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">LDA #$00&nbsp; &nbsp; &nbsp; &nbsp;; x position<br />STA $2005<br />LDA #$00&nbsp; &nbsp; &nbsp; &nbsp;; y position<br />STA $2005<br />&nbsp; &nbsp;<br />LDA #$00&nbsp; &nbsp; &nbsp; &nbsp;; clear $2006<br />STA $2006<br />LDA #$00<br />STA $2006<br /></div><br /></div><br /><br />Wrong, you have to not care about $2006, and write to $2005 two times, and then to $2000 to set the scroll. Only use $2006 to set scroll during rendering.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>