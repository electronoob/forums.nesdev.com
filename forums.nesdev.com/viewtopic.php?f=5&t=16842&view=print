<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Can you write windows app in regular C++?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Can you write windows app in regular C++?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16842">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=16842</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Mon Dec 18, 2017 4:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't want to use visual C++. I read an entire tutorial on C++ only for visual &quot;C++&quot; in making a Win32 app in Visual Studio to barely be the same language at all. Practically none of the instructions in the WinAPI template are even native C++. Can I do it in perhaps regular C++? I don't want to worry about learning all of these scarcely documented instructions and just use C++. I doubt I got any of the terminology right, and who could blame me? it's so unnecessarily complicated and details are scarce, and when you do find them, they aren't much help for a noob.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Dec 18, 2017 5:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Every platform will have different means of input and output, with different functions, classes, or templates that access it. The standard I/O in <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;cstdio&gt;</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;iostream&gt;</tt> is one platform. GTK+ is another, as is Win32. It's like 6502 assembly: the ports that you write to display a sprite on a Commodore 64 differ from those on an NES, despite both using a 6502 core.<br /><br />And if you think Win32 is &quot;scarcely documented&quot;, have you looked at MSDN? But if you use <a href="https://www.gtkmm.org/en/" class="postlink">gtkmm</a> (which is <a href="https://www.gtkmm.org/en/documentation.shtml" class="postlink">also documented</a>), you can target both Windows and GNU/Linux.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Mon Dec 18, 2017 5:55 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">And if you think Win32 is &quot;scarcely documented&quot;, have you looked at MSDN? But if you use  (which is ), you can target both Windows and GNU/Linux</div><br />MSDN just assumes you already know what all these things that aren't in native C++ already do, and when looking up what they do just make things more sophisticated. It's not that I lack understanding of C++, I've read entire tutorials, so I understand it pretty well. It just adds so much stuff that it makes it like an entire new language rather then C++. Why can't it be more like Arduino? Arduino is super simple to program, I've gotten an understanding of it in less then a week, same with just C++, why does it have to be so sophisticated?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hangin10</b> [ Mon Dec 18, 2017 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Visual C++ for Windows Store/UWP apps is currently stuck using their proprietary C++/CX language that auto generates opaque regular C++ behind the scenes. They do plan to convert over to a new C++/Winrt &quot;projection&quot; that allows for native C++20 (so much co_await!). There's a github page here with project templates and examples: <!-- m --><a class="postlink" href="https://github.com/Microsoft/cppwinrt/">https://github.com/Microsoft/cppwinrt/</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Dec 18, 2017 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is no distinction between &quot;regular&quot; C++ and &quot;visual&quot; C++.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Mon Dec 18, 2017 7:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The &quot;Visual&quot; in &quot;Visual C++&quot; refers only to the development environment, just like there's also &quot;Borland C++&quot; and other similar ones.<br /><br />Strictly speaking, you don't even need C++ to write a Windows application - plain C will work just fine for the basic APIs necessary to write an NES emulator, even including DirectX for input/output.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Mon Dec 18, 2017 8:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />QT is another platform for making Windows apps in C++.  Although there are QT hooks for other languages including Python.<br /><!-- m --><a class="postlink" href="http://doc.qt.io/qt-5/windows-support.html">http://doc.qt.io/qt-5/windows-support.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Mon Dec 18, 2017 9:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">MSDN just assumes you already know what all these things that aren't in native C++ already do, and when looking up what they do just make things more sophisticated.</div><br />Can you provide a specific example of something that's not &quot;native C++&quot; that's being used for Win32 programming and that's confusing you?<br /><br /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">It's not that I lack understanding of C++, I've read entire tutorials, so I understand it pretty well...I've gotten an understanding of it in less then a week, same with just C++</div><br />Professional programmers familiar with similar languages can spend months studying C++ without getting a pretty good understanding of it - it's one of the most obnoxiously complicated languages in widespread use. Saying that your understanding of it comes from having &quot;read entire tutorials&quot; in &quot;less than a week&quot; doesn't exactly fill me with a lot of confidence. Sorry if this comes off as harsh, but I think you're trying to run when you don't even realize the difference between crawling and walking.<br /><br /><div class="quotetitle">DementedPurple wrote:</div><div class="quotecontent">why does it have to be so sophisticated?</div><br />Because Win32 is a full-featured low-level GUI programming interface that's accrued over 30 years of backwards compatibility cruft, originally designed for a single-user cooperatively multitasked graphical shell with no memory protection that needed to be performant on ultra-slow 16-bit 8088 CPUs with low-colour unaccelerated CGA graphics. That Microsoft has managed to adapt it to a secure (yes) and modern, 64-bit multi-user preemptively multitasked OS as gracefully as they have is astonishing and quite honestly a feat without any real comparison anywhere in computing history, as far as I can recall. It's not surprising that it's a little inelegant.<br /><br />Anyway. Yes, you can write a Win32 application in normal C or C++; <a href="http://www.winprog.org/tutorial/simple_window.html" class="postlink">here's an example</a>. That site's great, by the way - if you're really invested in learning Win32 programming, try to grok just about everything on it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Mon Dec 18, 2017 9:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">Because Win32 is a full-featured low-level GUI programming interface that's accrued over 30 years of backwards compatibility cruft</div><br />I think you can still run Windows 1.0 programs on Windows 10 32-bit edition.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Tue Dec 19, 2017 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'll show you what happens when when you create a Win32 project in Visual Studio 2015<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define MAX_LOADSTRING 100<br /><br />// Global Variables:<br />HINSTANCE hInst;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // current instance<br />WCHAR szTitle&#91;MAX_LOADSTRING&#93;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // The title bar text<br />WCHAR szWindowClass&#91;MAX_LOADSTRING&#93;;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // the main window class name<br /><br />// Forward declarations of functions included in this code module:<br />ATOM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MyRegisterClass(HINSTANCE hInstance);<br />BOOL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InitInstance(HINSTANCE, int);<br />LRESULT CALLBACK&nbsp; &nbsp; WndProc(HWND, UINT, WPARAM, LPARAM);<br />INT_PTR CALLBACK&nbsp; &nbsp; About(HWND, UINT, WPARAM, LPARAM);<br /><br />int APIENTRY wWinMain(_In_ HINSTANCE hInstance,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_In_opt_ HINSTANCE hPrevInstance,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_In_ LPWSTR&nbsp; &nbsp; lpCmdLine,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_In_ int&nbsp; &nbsp; &nbsp; &nbsp;nCmdShow)<br />{<br />&nbsp; &nbsp; UNREFERENCED_PARAMETER(hPrevInstance);<br />&nbsp; &nbsp; UNREFERENCED_PARAMETER(lpCmdLine);<br /><br />&nbsp; &nbsp; // TODO: Place code here.<br /><br />&nbsp; &nbsp; // Initialize global strings<br />&nbsp; &nbsp; LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);<br />&nbsp; &nbsp; LoadStringW(hInstance, IDC_WIN32PROJECT3, szWindowClass, MAX_LOADSTRING);<br />&nbsp; &nbsp; MyRegisterClass(hInstance);<br /><br />&nbsp; &nbsp; // Perform application initialization:<br />&nbsp; &nbsp; if (!InitInstance (hInstance, nCmdShow))<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; return FALSE;<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WIN32PROJECT3));<br /><br />&nbsp; &nbsp; MSG msg;<br /><br />&nbsp; &nbsp; // Main message loop:<br />&nbsp; &nbsp; while (GetMessage(&amp;msg, nullptr, 0, 0))<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; if (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TranslateMessage(&amp;msg);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DispatchMessage(&amp;msg);<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; }<br /><br />&nbsp; &nbsp; return (int) msg.wParam;<br />}<br /><br /><br /><br />//<br />//&nbsp; FUNCTION: MyRegisterClass()<br />//<br />//&nbsp; PURPOSE: Registers the window class.<br />//<br />ATOM MyRegisterClass(HINSTANCE hInstance)<br />{<br />&nbsp; &nbsp; WNDCLASSEXW wcex;<br /><br />&nbsp; &nbsp; wcex.cbSize = sizeof(WNDCLASSEX);<br /><br />&nbsp; &nbsp; wcex.style&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = CS_HREDRAW | CS_VREDRAW;<br />&nbsp; &nbsp; wcex.lpfnWndProc&nbsp; &nbsp; = WndProc;<br />&nbsp; &nbsp; wcex.cbClsExtra&nbsp; &nbsp; &nbsp;= 0;<br />&nbsp; &nbsp; wcex.cbWndExtra&nbsp; &nbsp; &nbsp;= 0;<br />&nbsp; &nbsp; wcex.hInstance&nbsp; &nbsp; &nbsp; = hInstance;<br />&nbsp; &nbsp; wcex.hIcon&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WIN32PROJECT3));<br />&nbsp; &nbsp; wcex.hCursor&nbsp; &nbsp; &nbsp; &nbsp; = LoadCursor(nullptr, IDC_ARROW);<br />&nbsp; &nbsp; wcex.hbrBackground&nbsp; = (HBRUSH)(COLOR_WINDOW+1);<br />&nbsp; &nbsp; wcex.lpszMenuName&nbsp; &nbsp;= MAKEINTRESOURCEW(IDC_WIN32PROJECT3);<br />&nbsp; &nbsp; wcex.lpszClassName&nbsp; = szWindowClass;<br />&nbsp; &nbsp; wcex.hIconSm&nbsp; &nbsp; &nbsp; &nbsp; = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));<br /><br />&nbsp; &nbsp; return RegisterClassExW(&amp;wcex);<br />}<br /><br />//<br />//&nbsp; &nbsp;FUNCTION: InitInstance(HINSTANCE, int)<br />//<br />//&nbsp; &nbsp;PURPOSE: Saves instance handle and creates main window<br />//<br />//&nbsp; &nbsp;COMMENTS:<br />//<br />//&nbsp; &nbsp; &nbsp; &nbsp; In this function, we save the instance handle in a global variable and<br />//&nbsp; &nbsp; &nbsp; &nbsp; create and display the main program window.<br />//<br />BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)<br />{<br />&nbsp; &nbsp;hInst = hInstance; // Store instance handle in our global variable<br /><br />&nbsp; &nbsp;HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,<br />&nbsp; &nbsp; &nbsp; CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);<br /><br />&nbsp; &nbsp;if (!hWnd)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp; &nbsp; return FALSE;<br />&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;ShowWindow(hWnd, nCmdShow);<br />&nbsp; &nbsp;UpdateWindow(hWnd);<br /><br />&nbsp; &nbsp;return TRUE;<br />}<br /><br />//<br />//&nbsp; FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)<br />//<br />//&nbsp; PURPOSE:&nbsp; Processes messages for the main window.<br />//<br />//&nbsp; WM_COMMAND&nbsp; - process the application menu<br />//&nbsp; WM_PAINT&nbsp; &nbsp; - Paint the main window<br />//&nbsp; WM_DESTROY&nbsp; - post a quit message and return<br />//<br />//<br />LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)<br />{<br />&nbsp; &nbsp; switch (message)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; case WM_COMMAND:<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int wmId = LOWORD(wParam);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Parse the menu selections:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; switch (wmId)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case IDM_ABOUT&#058;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case IDM_EXIT:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DestroyWindow(hWnd);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return DefWindowProc(hWnd, message, wParam, lParam);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; case WM_PAINT:<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PAINTSTRUCT ps;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HDC hdc = BeginPaint(hWnd, &amp;ps);<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // TODO: Add any drawing code that uses hdc here...<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EndPaint(hWnd, &amp;ps);<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; case WM_DESTROY:<br />&nbsp; &nbsp; &nbsp; &nbsp; PostQuitMessage(0);<br />&nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; default:<br />&nbsp; &nbsp; &nbsp; &nbsp; return DefWindowProc(hWnd, message, wParam, lParam);<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; return 0;<br />}<br /><br />// Message handler for about box.<br />INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)<br />{<br />&nbsp; &nbsp; UNREFERENCED_PARAMETER(lParam);<br />&nbsp; &nbsp; switch (message)<br />&nbsp; &nbsp; {<br />&nbsp; &nbsp; case WM_INITDIALOG:<br />&nbsp; &nbsp; &nbsp; &nbsp; return (INT_PTR)TRUE;<br /><br />&nbsp; &nbsp; case WM_COMMAND:<br />&nbsp; &nbsp; &nbsp; &nbsp; if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)<br />&nbsp; &nbsp; &nbsp; &nbsp; {<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EndDialog(hDlg, LOWORD(wParam));<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (INT_PTR)TRUE;<br />&nbsp; &nbsp; &nbsp; &nbsp; }<br />&nbsp; &nbsp; &nbsp; &nbsp; break;<br />&nbsp; &nbsp; }<br />&nbsp; &nbsp; return (INT_PTR)FALSE;<br />}<br /></div><br />I mean you've got DefWindowProc, hInstance, wcex, and all sorts of sophisticated stuff that I don't understand. And when you look those things up, you just get a more complicated answer

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>adam_smasher</b> [ Tue Dec 19, 2017 11:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, but those things *are* native C++, they're just functions and types that come from the Win32 API. <br /><br /><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx" class="postlink">This</a> page here explains that there's literally a line in WinDef.h that reads<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef HANDLE HINSTANCE;</div><br />and that there's a line in WinNT.h that reads<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef PVOID HANDLE;</div><br />and finally, another line in WinNT.h that reads<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef void *PVOID;</div><br />So there you go - an HINSTANCE is just a void pointer. The reason why MS goes through the pains of defining all these constants is partially to make it more obvious just from the types what that pointer is supposed to represent, so that you're less likely to pass the wrong data to the wrong functions; and partially so that they can change the underlying implementation without forcing end users to change tons of their code - this is part of that whole astonishing backwards compatibility thing. They even allude to this on that page when they write:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">HMODULE and HINSTANCE are the same today, but represented different things in 16-bit Windows.</div><br /><br />DefWindowProc is short for &quot;Default Window Procedure&quot;. Again, it's just a normal C function that Microsoft includes in their Win32 libraries. In Windows, every type of window (&quot;Window Class&quot;, or &quot;WndClass&quot;) has an associated function called a &quot;Window Procedure&quot; or &quot;WndProc&quot; that gets called with messages to respond to events, like when the user clicks on the window or whatever. Often you don't care about those events, but you can't just ignore them or Windows starts to worry that your program has crashed or is acting up; you need to acknowledge them. So the idea is that in your WndProc you pass any messages that you don't care about along to DefWindowProc to let the Win32 library handle the default processing. This is explained on <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633572(v=vs.85).aspx" class="postlink">MSDN</a>:<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.</div><br /><br />Anyway, there's no magic here. It's totally normal for C++ libraries to provide new types and functions, often hiding the details of how they're implemented. That's what <a href="https://en.wikipedia.org/wiki/Abstraction_(software_engineering)" class="postlink">abstraction</a> is all about. There's no fundamental difference between, say, DefWindowProc() and printf() (except that one only exists on Windows of course). And as long as you have the right headers and libraries set up, you can totally compile this code using GCC or Clang instead of Visual Studio - it's all native C++.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Tue Dec 19, 2017 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />HINSTANCE also happens to be the address of your program code.  So if you were to look around in memory there, you'd see x86 instruction bytes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Dec 19, 2017 12:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">adam_smasher wrote:</div><div class="quotecontent">And as long as you have the right headers and libraries set up, you can totally compile this code using GCC or Clang instead of Visual Studio - it's all native C++.</div><br />Case in point: MinGW is a version of GCC designed to target the Windows API.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Dec 19, 2017 1:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To make it short: No, you cannot write a windows application with just regular standard C++. There isn't a GUI equivalent to &quot;iostream&quot; and all those other standard headers.<br />You cannot call a function <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">std::createdlg&#40;&#41;</tt> like you can call <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">std::cout &lt;&lt; &quot;Hello&quot;</tt>.<br /><br />Standard ISO C++ doesn't define any functions for windows and dialog boxes etc. since they are not platform-independent.<br /><br />That's why you need to use the WinAPI or a wrapper library.<br /><br />The reason why a WinAPI application in Visual C++ looks so complicated is because it already includes everything that you need to create a window.<br /><br />After all, you could also simply just do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#include &lt;windows.h&gt;<br /><br />int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int)<br />{<br />&nbsp; &nbsp; MessageBox(NULL, &quot;Hello&quot;, &quot;Message&quot;, MB_OK);<br />}</div><br />But this wouldn't help anybody.<br />So, the Visual C++ template creates everything for you that you need for a standard window: Creating the window, a message loop, an event function etc.<br /><br />But this has nothing to do with &quot;regular C++&quot; vs. &quot;Visual C++&quot;.<br />Apart from the fact that a Windows program has WinMain instead of main, this is all pretty much standard C++: It uses types and a bunch of functions. The types are not part of the language, but can be found in the header file, just like you yourself could define types in header files, like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">typedef int MyCoolNumber;</tt>.<br /><br />That template is like with NES programming in Assembly:<br />An IDE that creates an NES template for you would maybe fill the code files with a reset interrupt, an NMI interrupt, system initialization and a controller reading function.<br /><br />And you might ask yourself: Why does regular Assembly work with LDA and STA while &quot;NES Assembly&quot; uses such complicated things like vectors and stuff?<br /><br />Because &quot;NES Assembly&quot; isn't a language. You're simply looking at a bare-bones compilable Assembly program that properly initializes itself for use on the NES.<br /><br />It's the same with that WinAPI program: This is simply a bare-bones program to create a window. The code is still standard C++, only that it uses a bunch of functions, structs and typedefs to actually get a window on the screen.<br /><br />But those things are no more sophisticated than if you wrote an Assembly macro:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro ADD_3 variable<br />&nbsp; &nbsp; INC variable<br />&nbsp; &nbsp; INC variable<br />&nbsp; &nbsp; INC variable<br />.endmacro</div><br />And someone who saw this macro used in your code (<tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">ADD_3 Status</tt>) would ask: &quot;What kind of sophisticated stuff is this? I thought all commands in Assembly consist only of three letters.&quot;<br /><br />If you want to understand what your code template does, you can check this tutorial:<br /><!-- m --><a class="postlink" href="http://www.winprog.org/tutorial">http://www.winprog.org/tutorial</a><!-- m --><br /><br />If WinAPI is too complicated for you and you want to be able to create windows right away as you would do in C#, you can look for GUI libraries: MFC was Microsoft's own wrapper library. Borland C++ used its own as well. And then there are compiler-independent libraries like Qt etc.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DementedPurple</b> [ Wed Dec 20, 2017 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Can you write windows app in regular C++?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unrelated question while we're talking about C++, I would like to know what classes and objects are, I understand that they're kind of like folders as in the class is the folder and the objects are the files in a folder, but I have a hard time seeing any use for them. Could you perhaps give an example of what they are used for?

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>