<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - BRK flag alterations</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">BRK flag alterations</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=816">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=816</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Josh G.</b> [ Sat Dec 10, 2005 12:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>BRK flag alterations</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does the BRK command set the I flag, as an actual IRQ would?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Sat Dec 10, 2005 12:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All interrupts set the 'I' flag - even NMI and RESET.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Sat Dec 10, 2005 12:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What's your source on the RESET interrupt setting the flag?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Quietust</b> [ Sat Dec 10, 2005 12:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">WedNESday wrote:</div><div class="quotecontent">What's your source on the RESET interrupt setting the flag?</div>
<br />
<br />Tests performed on the real hardware, though I forget who did them (it was somebody in here, though).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>baisoku</b> [ Sat Dec 10, 2005 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Quietust wrote:</div><div class="quotecontent">Tests performed on the real hardware, though I forget who did them (it was somebody in here, though).</div>
<br />
<br />I witnessed the same behaviour on the real hardware with respect to I flag being set on RESET. My devcart is currently toast, so i can't test one other piece of unverified info; that RESET takes 6-7 cycles. Plus i haven't thought of a way to test that yet. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Dec 10, 2005 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Someone who has a working devcart should try this out. On reset: <ol style="list-style-type: decimal"><li>Disable the APU frame IRQ. </li><li>PHP PLA and if the I flag is set, play a tone. </li><li>CLI and loop forever. </li></ol> If the reset button produces a tone every time, then reset turns on the I flag.
<br />
<br />Reset takes longer than 7 cycles because it takes a long time for the player to press and release the reset button. Or are you talking about something more subtle?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>teaguecl</b> [ Sat Dec 10, 2005 2:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Reset takes longer than 7 cycles because it takes a long time for the player to press and release the reset button. Or are you talking about something more subtle?</div>
<br />
<br />I think they mean it takes 7 cycles, starting from when the RESET signal is de-asserted.  When a user holds the reset button, the RESET signal is asserted, and the cpu can be considered "in reset", a condition that will persist until the RESET signal become de-asserted.  Though I don't know how to test that reset lasts 7 cycles without manually clocking your CPU.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Dec 10, 2005 3:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I ran a test like tepples suggested. My devcart has the vectors in battery-backed RAM, so running code at reset requires temporarily patching the vector. The test code first clears the I flag, then patches the reset vector and waits. On reset, it prints the status of the I flag.
<br />
<br />To verify that the test itself is doing what is expected, before waiting for reset it also sets/clears the D flag and later prints this along with the I flag. The D flag's value is preserved, showing that the setup and test code is working properly.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">main:<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$40&nbsp; &nbsp; &nbsp; &nbsp; ; disable frame irq<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$4017<br />&nbsp; &nbsp; &nbsp; nop<br />&nbsp; &nbsp; &nbsp; cli&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear I flag<br />&nbsp; &nbsp; &nbsp; cld&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; clear/set D flag<br />&nbsp; &nbsp; &nbsp; ;sed<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;patch_reset_then_wait<br />&nbsp; &nbsp; &nbsp; <br />reset:<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$40&nbsp; &nbsp; &nbsp; &nbsp; ; disable frame irq<br />&nbsp; &nbsp; &nbsp; sta&nbsp; &nbsp;$4017<br />&nbsp; &nbsp; &nbsp; ;cli&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; uncomment to be sure test is correct<br />&nbsp; &nbsp; &nbsp; php&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; print I and D flags<br />&nbsp; &nbsp; &nbsp; pla<br />&nbsp; &nbsp; &nbsp; and&nbsp; &nbsp;#$0c<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_a&nbsp; &nbsp; &nbsp;; always prints $04<br />&nbsp; &nbsp; &nbsp; jmp&nbsp; &nbsp;forever<br />&nbsp; &nbsp; &nbsp; <br />irq:&nbsp; lda&nbsp; &nbsp;#$ff&nbsp; &nbsp; &nbsp; &nbsp; ; prints $FF $FF if irq unexpectedly occurs<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_a<br />&nbsp; &nbsp; &nbsp; lda&nbsp; &nbsp;#$ff<br />&nbsp; &nbsp; &nbsp; jsr&nbsp; &nbsp;print_a<br />&nbsp; &nbsp; &nbsp; jmp&nbsp; &nbsp;forever<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Sat Dec 10, 2005 3:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing I remember hearing was that on reset, the APU frame counter begins running 9 to 12 cycles before program execution starts.  Since the APU is part of the CPU, I would suspect that it would start in sync with the CPU starting.
<br />
<br />I cannot think of a software solution that could be used to measure RESET length, unless the lockout chip's exact timing is known (which I doubt).  A hardware solution could be done by manually controlling RESET and, upon releasing it, watching M2 and seeing how many times it is clocked before $FFFC and $FFFD are read.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kevtris</b> [ Sat Dec 10, 2005 8:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">teaguecl wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Reset takes longer than 7 cycles because it takes a long time for the player to press and release the reset button. Or are you talking about something more subtle?</div><br /><br />I think they mean it takes 7 cycles, starting from when the RESET signal is de-asserted.  When a user holds the reset button, the RESET signal is asserted, and the cpu can be considered "in reset", a condition that will persist until the RESET signal become de-asserted.  Though I don't know how to test that reset lasts 7 cycles without manually clocking your CPU.</div>
<br />
<br />All interrupts function pretty much the same on the 6502...  reset, NMI, IRQ, and BRK are all interrupts.  Judging from the 6502 chip schematic, the opcode 00h is forced into the opcode latch for ANY interrupt.  Think of reset as a high priority level sensitive NMI.  One small quirk of reset is that it still tries to push the return address onto the stack, but R/W is forced high, preventing the write.  The SP still decrements and all that just like it does on any other interrupt.
<br />
<br />The reset thus should take as many cycles as any other "real" interrupt.  The only difference between NMI, reset, and IRQ is the enabling circuitry and edge detection (on NMI only) and the I flag of course... all of which are done before the interrupt signals are fed to a priority encoder which selects the desired vector.  fffeh is the "default" vector, which is why IRQ and BRK share the vector.  The B flag is not a flag at all, but a signal from the opcode fetch circuitry.  
<br />
<br />So, getting back to the APU thinger, the seemingly random number of cycles that it delays for the APU is most likely caused by when the reset signal is de-asserted during the interrupt sequence... theoretically you could get a lag of up to 6-7 cycles.  The APU's counters are probably just connected to /RST like everything else so when reset is deasserted there, it happens "instantly" with respect to the 6502 core.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Guest</b> [ Sun Dec 11, 2005 7:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So if I understand that right, when RESET is asserted, the CPU handles the interrupt repeatedly, over and over, without executing any other instructions, until the RESET line is released, at which point it finishes the current interrupt sequence, executes one more interrupt sequence (since RESET was low for part of the previous sequence), then finally starts executing instructions.  This would result in a delay of anywhere from 8 to 14 clock cycles (11 on average).
<br />
<br />There are still a couple of things that don't make sense to me:
<br />
<br />1. It was measured that if the system was reset, the stack pointer was decremented by 3, and that on powerup it was initialized to $FD (with other registers initialized to $00 ).  If RESET were processed multiple times, would that not cause SP to change repeatedly, ending at an unpredictable state?
<br />
<br />2. Interrupts can only be serviced after an instruction completes (i.e. IRQs and NMIs won't occur at all if a bad opcode (HLT) is executed).  Why, then, can RESET be serviced when the CPU is locked up?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Dec 11, 2005 7:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Testing #1 would be easy: On reset, skip 'ldx #$ff; txs'; instead, play a tone with $4002=SP and $4003=1.
<br />
<br />I think RESET can be serviced after 'stp' because unlike 'brk', IRQ, and NMI, RESET loads all the control unit state registers with their initial values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Dec 11, 2005 11:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have tested reset behavior and reported the result that the stack pointer is decremented by 3, but that the stack is not modified. Maybe the CPU clock is disabled as long as reset is asserted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>WedNESday</b> [ Mon Dec 12, 2005 12:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Does anyone know of any games that actually use the BRK opcode? I can't imagine so, as the vector is the same as the sound's, unless you wanted to prematurely process sound code...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Mon Dec 12, 2005 1:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />BRK could be useful as a space-saver; using the second byte as a selector allows calling one of 256 subroutines using two bytes, or one subroutine using only one byte.
<br />
<br />BRK uses the same vector as IRQ, and the IRQ vector itself is used for more than just the APU interrupts. The scanline interrupts of various mappers (MMC3 for one) also use this vector. Most sound code runs on NMI anyway, so the IRQ vector handler doesn't usually have to decode the source.
<br />
<br />The way an IRQ handler determines whether the cause was an IRQ of BRK is by examining bit 4 of the byte at the top of the stack (which also contains the saved status flags in other bits). If set, BRK caused invocation, otherwise IRQ. Be sure to ignore all the wrong documentation that claims the existence of a B status flag; there is no such thing, only the confusion created around its non-existence.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>