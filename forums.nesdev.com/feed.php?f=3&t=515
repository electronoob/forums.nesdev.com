<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=515" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2005-08-23T12:12:49-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=515</id>
<entry>
<author><name><![CDATA[Anes]]></name></author>
<updated>2005-08-23T12:12:49-07:00</updated>
<published>2005-08-23T12:12:49-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=515&amp;p=3998#p3998</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=515&amp;p=3998#p3998"/>
<title type="html"><![CDATA[cpu (source and target) performance]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=515&amp;p=3998#p3998"><![CDATA[
I just want to know what is better for cpu emulation:<br /><br />- Has a big "switch" with all opcodes inside it (method i used before); (if the compiler compiles to a jump table of course)<br />- Has a function per opcode, and call it with a pointer from a table, i mean an array of function pointers. Im implementing some type of "cache" too...<br />takes the same or regarding the NES the half of memory of cpu ((0x8000) * 4 bytes) size, and when an emulated opcode (function) has been executed is "recorded" in the array related to PC, so when this PC Value is read again jumps directly without the compiler to seek in the table it searched before. (method im actually using)<br />- Write the cpu core in asm to create global scope labels (wich i dont know if this can be done in VC++ c compiler), and implement that "cache". (i wrote one about one yaer ago but was just "c code translated to asm)". And emu the opcodes with the similar machine opcodes (of course this affects portability).(third method)<br /><br />anyway, i have heard that a pointer to function table (second method, the one that im using) can compromise CPU target Cache mem, that why im thinking in changing the emu cpu core.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=72">Anes</a> â€” Tue Aug 23, 2005 12:12 pm</p><hr />
]]></content>
</entry>
</feed>