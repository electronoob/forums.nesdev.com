<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - controller problems</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">controller problems</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8282">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=8282</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Sun Nov 06, 2011 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>controller problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I picked up programming again  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> 
<br />Read the nerdy nights and also read 8bit beast of power.
<br />
<br />And im stuck at lesson 7. starting pong.
<br />I read lesson 7 multiple times,read the comments(posts) read stuff here(about controls)BUT MY GOD THOSE DAMN PADDLE 's WONT MOVE <img src="./images/smilies/icon_evil.gif" alt=":evil:" title="Evil or Very Mad" /> 
<br />
<br />Im stuck for a week now and  i punched my computer today ..so i need help.
<br />
<br />This is my code SORRY BIG POST
<br />
<br />  .inesprg 1   ; 1x 16KB PRG code
<br />  .ineschr 1   ; 1x  8KB CHR data
<br />  .inesmap 0   ; mapper 0 = NROM, no bank swapping
<br />  .inesmir 1   ; background mirroring
<br />  
<br />
<br />;;;;;;;;;;;;;;;
<br />
<br />;; DECLARE SOME VARIABLES HERE
<br />  .rsset $0000  ;;start variables at ram location 0
<br />  
<br />gamestate  .rs 1  ; .rs 1 means reserve one byte of space
<br />ballx      .rs 1  ; ball horizontal position
<br />bally      .rs 1  ; ball vertical position
<br />ballup     .rs 1  ; 1 = ball moving up
<br />balldown   .rs 1  ; 1 = ball moving down
<br />ballleft   .rs 1  ; 1 = ball moving left
<br />ballright  .rs 1  ; 1 = ball moving right
<br />ballspeedx .rs 1  ; ball horizontal speed per frame
<br />ballspeedy .rs 1  ; ball vertical speed per frame
<br />paddle1ytop   .rs 1  ; player 1 paddle top vertical position
<br />paddle2ybot   .rs 1  ; player 2 paddle bottom vertical position
<br />buttons1   .rs 1  ; player 1 gamepad buttons, one bit per button
<br />buttons2   .rs 1  ; player 2 gamepad buttons, one bit per button
<br />score1     .rs 1  ; player 1 score, 0-15
<br />score2     .rs 1  ; player 2 score, 0-15
<br />
<br />
<br />;; DECLARE SOME CONSTANTS HERE
<br />STATETITLE     = $00  ; displaying title screen
<br />STATEPLAYING   = $01  ; move paddles/ball, check for collisions
<br />STATEGAMEOVER  = $02  ; displaying game over screen
<br />  
<br />RIGHTWALL      = $F4  ; when ball reaches one of these, do something
<br />TOPWALL        = $08
<br />BOTTOMWALL     = $E0
<br />LEFTWALL       = $04
<br />  
<br />PADDLE1X       = $08  ; horizontal position for paddles, doesnt move
<br />PADDLE2X       = $F0
<br />
<br />;;;;;;;;;;;;;;;;;;
<br />
<br />
<br />
<br />
<br />  .bank 0
<br />  .org $C000 
<br />RESET:
<br />  SEI          ; disable IRQs
<br />  CLD          ; disable decimal mode
<br />  LDX #$40
<br />  STX $4017    ; disable APU frame IRQ
<br />  LDX #$FF
<br />  TXS          ; Set up stack
<br />  INX          ; now X = 0
<br />  STX $2000    ; disable NMI
<br />  STX $2001    ; disable rendering
<br />  STX $4010    ; disable DMC IRQs
<br />
<br />vblankwait1:       ; First wait for vblank to make sure PPU is ready
<br />  BIT $2002
<br />  BPL vblankwait1
<br />
<br />clrmem:
<br />  LDA #$00
<br />  STA $0000, x
<br />  STA $0100, x
<br />  STA $0300, x
<br />  STA $0400, x
<br />  STA $0500, x
<br />  STA $0600, x
<br />  STA $0700, x
<br />  LDA #$FE
<br />  STA $0200, x
<br />  INX
<br />  BNE clrmem
<br />   
<br />vblankwait2:      ; Second wait for vblank, PPU is ready after this
<br />  BIT $2002
<br />  BPL vblankwait2
<br />
<br />
<br />LoadPalettes:
<br />  LDA $2002             ; read PPU status to reset the high/low latch
<br />  LDA #$3F
<br />  STA $2006             ; write the high byte of $3F00 address
<br />  LDA #$00
<br />  STA $2006             ; write the low byte of $3F00 address
<br />  LDX #$00              ; start out at 0
<br />LoadPalettesLoop:
<br />  LDA palette, x        ; load data from address (palette + the value in x)
<br />                          ; 1st time through loop it will load palette+0
<br />                          ; 2nd time through loop it will load palette+1
<br />                          ; 3rd time through loop it will load palette+2
<br />                          ; etc
<br />  STA $2007             ; write to PPU
<br />  INX                   ; X = X + 1
<br />  CPX #$20              ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
<br />  BNE LoadPalettesLoop  ; Branch to LoadPalettesLoop if compare was Not Equal to zero
<br />                        ; if compare was equal to 32, keep going down
<br />
<br />  LDA $2002             ; read PPU status to reset the high/low latch
<br />  LDA #$20
<br />  STA $2006             ; write the high byte of $2000 address
<br />  LDA #$00
<br />  STA $2006             ; write the low byte of $2000 address
<br />  LDX #$00              ; start out at 0
<br />LoadBackground1:
<br />  LDA background1, x     ; load data from address (background + the value in x)
<br />  STA $2007             ; write to PPU
<br />  INX                   ; X = X + 1
<br />  CPX #$00              ; Compare X to hex $80, decimal 128 - copying 128 bytes
<br />  BNE LoadBackground1  ; Branch to LoadBackgroundLoop if compare was Not Equal to zero
<br />                        ; if compare was equal to 128, keep going down
<br />              
<br />LoadBackground2:
<br />  LDA background1, x     ; load data from address (background + the value in x)
<br />  STA $2007             ; write to PPU
<br />  INX                   ; X = X + 1
<br />  CPX #$00              ; Compare X to hex $80, decimal 128 - copying 128 bytes
<br />  BNE LoadBackground2  ; Branch to LoadBackgroundLoop if compare was Not Equal to zero
<br />                        ; if compare was equal to 128, keep going down
<br />                
<br />LoadBackground3:
<br />  LDA background1, x     ; load data from address (background + the value in x)
<br />  STA $2007             ; write to PPU
<br />  INX                   ; X = X + 1
<br />  CPX #$00              ; Compare X to hex $80, decimal 128 - copying 128 bytes
<br />  BNE LoadBackground3  ; Branch to LoadBackgroundLoop if compare was Not Equal to zero
<br />                        ; if compare was equal to 128, keep going down
<br />                
<br />LoadBackground4:
<br />  LDA background1, x     ; load data from address (background + the value in x)
<br />  STA $2007             ; write to PPU
<br />  INX                   ; X = X + 1
<br />  CPX #$00              ; Compare X to hex $80, decimal 128 - copying 128 bytes
<br />  BNE LoadBackground4  ; Branch to LoadBackgroundLoop if compare was Not Equal to zero
<br />                        ; if compare was equal to 128, keep going down
<br />
<br />LoadAttribute:
<br />  LDA $2002             ; read PPU status to reset the high/low latch
<br />  LDA #$23
<br />  STA $2006             ; write the high byte of $23C0 address
<br />  LDA #$C0
<br />  STA $2006             ; write the low byte of $23C0 address
<br />  LDX #$00              ; start out at 0
<br />LoadAttributeLoop:
<br />  LDA attribute, x      ; load data from address (attribute + the value in x)
<br />  STA $2007             ; write to PPU
<br />  INX                   ; X = X + 1
<br />  CPX #$10              ; Compare X to hex $08, decimal 8 - copying 8 bytes
<br />  BNE LoadAttributeLoop  ; Branch to LoadAttributeLoop if compare was Not Equal to zero
<br />                        ; if compare was equal to 128, keep going down
<br />
<br />
<br />  
<br />
<br />
<br />;;;Set some initial ball stats
<br />  LDA #$01
<br />  STA balldown
<br />  STA ballright
<br />  LDA #$00
<br />  STA ballup
<br />  STA ballleft
<br />  
<br />  LDA #$50
<br />  STA bally
<br />  
<br />  LDA #$80
<br />  STA ballx
<br />  
<br />  LDA #$02
<br />  STA ballspeedx
<br />  STA ballspeedy
<br />
<br />
<br />;;:Set starting game state
<br />  LDA #STATEPLAYING
<br />  STA gamestate
<br />
<br />
<br />              
<br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
<br />  STA $2000
<br />
<br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side
<br />  STA $2001
<br />
<br />Forever:
<br />  JMP Forever     ;jump back to Forever, infinite loop, waiting for NMI
<br />  
<br /> 
<br />
<br />NMI:
<br />  LDA #$00
<br />  STA $2003       ; set the low byte (00) of the RAM address
<br />  LDA #$02
<br />  STA $4014       ; set the high byte (02) of the RAM address, start the transfer
<br />
<br />  JSR DrawScore
<br />  
<br />
<br />  ;;This is the PPU clean up section, so rendering the next frame starts properly.
<br />  LDA #%10010000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
<br />  STA $2000
<br />  LDA #%00011110   ; enable sprites, enable background, no clipping on left side
<br />  STA $2001
<br />  LDA #$00        ;;tell the ppu there is no background scrolling
<br />  STA $2005
<br />  STA $2005
<br />    
<br />  ;;;all graphics updates done by here, run game engine
<br />
<br />
<br />  JSR ReadController1  ;;get the current button data for player 1
<br />  JSR ReadController2  ;;get the current button data for player 2
<br />
<br />
<br />
<br />
<br />  
<br />GameEngine:  
<br />  LDA gamestate
<br />  CMP #STATETITLE
<br />  BEQ EngineTitle    ;;game is displaying title screen
<br />    
<br />  LDA gamestate
<br />  CMP #STATEGAMEOVER
<br />  BEQ EngineGameOver  ;;game is displaying ending screen
<br />  
<br />  LDA gamestate
<br />  CMP #STATEPLAYING
<br />  BEQ EnginePlaying   ;;game is playing
<br />GameEngineDone:  
<br />  
<br />  JSR UpdateSprites  ;;set ball/paddle sprites from positions
<br />
<br />  RTI             ; return from interrupt
<br /> 
<br /> 
<br /> 
<br /> 
<br />;;;;;;;;
<br /> 
<br />EngineTitle:
<br />  ;;if start button pressed
<br />  ;;  turn screen off
<br />  ;;  load game screen
<br />  ;;  set starting paddle/ball position
<br />  ;;  go to Playing State
<br />  ;;  turn screen on
<br />  JMP GameEngineDone
<br />
<br />;;;;;;;;; 
<br /> 
<br />EngineGameOver:
<br />  ;;if start button pressed
<br />  ;;  turn screen off
<br />  ;;  load title screen
<br />  ;;  go to Title State
<br />  ;;  turn screen on 
<br />  JMP GameEngineDone
<br /> 
<br />;;;;;;;;;;;
<br /> 
<br />EnginePlaying:
<br />
<br />MoveBallRight:
<br />  LDA ballright
<br />  BEQ MoveBallRightDone   ;;if ballright=0, skip this section
<br />
<br />  LDA ballx
<br />  CLC
<br />  ADC ballspeedx        ;;ballx position = ballx + ballspeedx
<br />  STA ballx
<br />
<br />  LDA ballx
<br />  CMP #RIGHTWALL
<br />  BCC MoveBallRightDone      ;;if ball x &lt; right wall, still on screen, skip next section
<br />  LDA #$00
<br />  STA ballright
<br />  LDA #$01
<br />  STA ballleft         ;;bounce, ball now moving left
<br />  ;;in real game, give point to player 1, reset ball
<br />MoveBallRightDone:
<br />
<br />
<br />MoveBallLeft:
<br />  LDA ballleft
<br />  BEQ MoveBallLeftDone   ;;if ballleft=0, skip this section
<br />
<br />  LDA ballx
<br />  SEC
<br />  SBC ballspeedx        ;;ballx position = ballx - ballspeedx
<br />  STA ballx
<br />
<br />  LDA ballx
<br />  CMP #LEFTWALL
<br />  BCS MoveBallLeftDone      ;;if ball x &gt; left wall, still on screen, skip next section
<br />  LDA #$01
<br />  STA ballright
<br />  LDA #$00
<br />  STA ballleft         ;;bounce, ball now moving right
<br />  ;;in real game, give point to player 2, reset ball
<br />MoveBallLeftDone:
<br />
<br />
<br />MoveBallUp:
<br />  LDA ballup
<br />  BEQ MoveBallUpDone   ;;if ballup=0, skip this section
<br />
<br />  LDA bally
<br />  SEC
<br />  SBC ballspeedy        ;;bally position = bally - ballspeedy
<br />  STA bally
<br />
<br />  LDA bally
<br />  CMP #TOPWALL
<br />  BCS MoveBallUpDone      ;;if ball y &gt; top wall, still on screen, skip next section
<br />  LDA #$01
<br />  STA balldown
<br />  LDA #$00
<br />  STA ballup         ;;bounce, ball now moving down
<br />MoveBallUpDone:
<br />
<br />
<br />MoveBallDown:
<br />  LDA balldown
<br />  BEQ MoveBallDownDone   ;;if ballup=0, skip this section
<br />
<br />  LDA bally
<br />  CLC
<br />  ADC ballspeedy        ;;bally position = bally + ballspeedy
<br />  STA bally
<br />
<br />  LDA bally
<br />  CMP #BOTTOMWALL
<br />  BCC MoveBallDownDone      ;;if ball y &lt; bottom wall, still on screen, skip next section
<br />  LDA #$00
<br />  STA balldown
<br />  LDA #$01
<br />  STA ballup         ;;bounce, ball now moving down
<br />MoveBallDownDone:
<br />
<br />
<br />
<br />  
<br />MovePaddle1ytop:
<br />  LDA buttons1
<br />  AND #%00000001
<br />  BEQ .skip
<br />
<br />  LDA $0204
<br />  SEC 
<br />  SBC #$01
<br />  STA $0204
<br />  .skip:
<br />
<br />
<br />
<br />
<br />  
<br />  
<br />  
<br />
<br />
<br />
<br />MovePaddleDown:
<br />  ;;if down button pressed
<br />  ;;  if paddle bottom &lt; bottom wall
<br />  ;;    move paddle top and bottom down
<br />MovePaddleDownDone:
<br />  
<br />CheckPaddleCollision:
<br />  ;;if ball x &lt; paddle1x
<br />  ;;  if ball y &gt; paddle y top
<br />  ;;    if ball y &lt; paddle y bottom
<br />  ;;      bounce, ball now moving left
<br />CheckPaddleCollisionDone:
<br />
<br />  JMP GameEngineDone
<br /> 
<br /> 
<br /> 
<br /> 
<br />UpdateSprites:
<br />  LDA bally  ;;update all ball sprite info
<br />  STA $0200
<br />  
<br />  LDA #$00
<br />  STA $0201
<br />  
<br />  LDA #$00
<br />  STA $0202
<br />  
<br />  LDA ballx
<br />  STA $0203
<br />  
<br />  LDA #$70  ;;update paddle sprites
<br />  STA $0204
<br />  
<br />  LDA #$37
<br />  STA $0205
<br />
<br />  LDA #$00
<br />  STA $0206
<br />
<br />  LDA #$08
<br />  STA $0207
<br />
<br />  LDA #$78  ;;update paddle sprites
<br />  STA $0208
<br />  
<br />  LDA #$47
<br />  STA $0209
<br />
<br />  LDA #$00
<br />  STA $020A
<br />
<br />  LDA #$08
<br />  STA $020B
<br />
<br />  LDA #$80  ;;update paddle sprites3
<br />  STA $020C
<br />  
<br />  LDA #$57
<br />  STA $020D
<br />
<br />  LDA #$00
<br />  STA $020E
<br />
<br />  LDA #$08
<br />  STA $020F
<br />
<br />  LDA #$88  ;;update paddle sprites
<br />  STA $0210
<br />  
<br />  LDA #$67
<br />  STA $0211
<br />
<br />  LDA #$00
<br />  STA $0212
<br />
<br />  LDA #$08
<br />  STA $0213
<br />
<br />  LDA #$70  ;;update paddle sprites
<br />  STA $0214
<br />  
<br />  LDA #$37
<br />  STA $0215
<br />
<br />  LDA #$00
<br />  STA $0216
<br />
<br />  LDA #$0F0
<br />  STA $0217
<br />
<br />  LDA #$78  ;;update paddle sprites
<br />  STA $0218
<br />  
<br />  LDA #$47
<br />  STA $0219
<br />
<br />  LDA #$00
<br />  STA $021A
<br />
<br />  LDA #$F0
<br />  STA $021B
<br />
<br />  LDA #$80  ;;update paddle sprites3
<br />  STA $021C
<br />  
<br />  LDA #$57
<br />  STA $021D
<br />
<br />  LDA #$00
<br />  STA $021E
<br />
<br />  LDA #$F0
<br />  STA $021F
<br />
<br />  LDA #$88  ;;update paddle sprites
<br />  STA $0220
<br />  
<br />  LDA #$67
<br />  STA $0221
<br />
<br />  LDA #$00
<br />  STA $0222
<br />
<br />  LDA #$F0
<br />  STA $0223
<br />
<br />
<br />
<br />  RTS
<br /> 
<br /> 
<br />DrawScore:
<br />  ;;draw score on screen using background tiles
<br />  ;;or using many sprites
<br />  RTS
<br /> 
<br /> 
<br /> 
<br />ReadController1:
<br />  LDA #$01
<br />  STA $4016
<br />  LDA #$00
<br />  STA $4016
<br />  LDX #$08
<br />ReadController1Loop:
<br />  LDA $4016
<br />  LSR A            ; bit0 -&gt; Carry
<br />  ROL buttons1     ; bit0 &lt;- Carry
<br />  DEX
<br />  BNE ReadController1Loop
<br />  RTS
<br />  
<br />ReadController2:
<br />  LDA #$01
<br />  STA $4016
<br />  LDA #$00
<br />  STA $4016
<br />  LDX #$08
<br />ReadController2Loop:
<br />  LDA $4017
<br />  LSR A            ; bit0 -&gt; Carry
<br />  ROL buttons2     ; bit0 &lt;- Carry
<br />  DEX
<br />  BNE ReadController2Loop
<br />  RTS  
<br />  
<br />  
<br />    
<br />        
<br />;;;;;;;;;;;;;;  
<br />  
<br />  
<br />  
<br />  .bank 1
<br />  .org $E000
<br />palette:
<br />  .db $22,$29,$1A,$0F,  $22,$36,$17,$0F,  $22,$30,$21,$0F,  $22,$27,$17,$0F   ;;background palette
<br />  .db $22,$1C,$15,$14,  $22,$02,$38,$3C,  $22,$1C,$15,$14,  $22,$02,$38,$3C   ;;sprite palette
<br />
<br />sprites:
<br />     ;vert tile attr horiz
<br />  .db $80, $00, $00, $80   ;sprite 0
<br />
<br />  .db $70, $37, $00, $08   ;sprite 1
<br />  .db $78, $47, $00, $08   ;sprite 2
<br />  .db $80, $57, $00, $08   ;sprite 3
<br />  .db $88, $67, $00, $08   ;sprite 4
<br />
<br />  .db $70, $37, $00, $F0   ;sprite 1
<br />  .db $78, $47, $00, $F0   ;sprite 2
<br />  .db $80, $57, $00, $F0   ;sprite 3
<br />  .db $88, $67, $00, $F0   ;sprite 4
<br />
<br />
<br />
<br />background1:
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   
<br />    .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />background2:
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   
<br />    .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />background3:
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   
<br />    .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />background4:
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
<br />   .db $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
<br />   
<br />    .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />   .db $24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24,$24
<br />
<br />attribute:
<br />  .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, %00110000
<br />  .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, %00110000
<br />
<br />  .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
<br />  .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
<br />
<br />  .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, %00110000
<br />  .db %00000000, %00010000, %01010000, %00010000, %00000000, %00000000, %00000000, %00110000
<br />
<br />  .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
<br />  .db %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
<br />
<br />
<br />
<br />  .org $FFFA     ;first of the three vectors starts here
<br />  .dw NMI        ;when an NMI happens (once per frame if enabled) the 
<br />                   ;processor will jump to the label NMI:
<br />  .dw RESET      ;when the processor first turns on or is reset, it will jump
<br />                   ;to the label RESET:
<br />  .dw 0          ;external interrupt IRQ is not used in this tutorial
<br />  
<br />  
<br />;;;;;;;;;;;;;;  
<br />  
<br />  
<br />  .bank 2
<br />  .org $0000
<br />  .incbin "mario.chr"   ;includes 8KB graphics file from SMB1
<br />
<br />
<br />?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
<br />
<br />
<br />SO i know my code is not complete im moving only 1 sprite of my paddle.
<br />I have not added down yet etc. but not even1 sprite moved.
<br />
<br />I got so confused with people using skip and others did  not and i changed my code so many times this week that i feel that my code is getting worse and worse and im really lost.
<br />
<br />So ...please can somebody get me back on track.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Sun Nov 06, 2011 7:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To increase chances of getting help, it would be better to quote only the part of code where the problem is supposedly located, or ask more certain questions like 'I don't understand this, how to do..?'. If you want to put whole source in addition, put it as link to a file, so it could be downloaded and compiled. That much code with screwed formatting isn't motivating at all to figuring out what is wrong.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Sun Nov 06, 2011 8:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Learn how to use .include and do that to most of the code that is not the main engine that you jump to and subroutines and such.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Nov 06, 2011 9:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are updating the sprite coordinates according to the controller input, but when your game logic is done you call <strong>UpdateSprites</strong>, which overwrites all the sprite data with info from the ROM. That‘s why nothing moves.
<br />
<br />I suggest you keep track of the posotions of the objects in actual variables, instead of manipulating $200-$2FF directly. Then modify the UpdateSprites routine to use those variables to calculate the coordinates of the sprites instead of using hardcoded values.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>log in</b> [ Sun Nov 06, 2011 2:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">You are updating the sprite coordinates according to the controller input, but when your game logic is done you call <strong>UpdateSprites</strong>, which overwrites all the sprite data with info from the ROM. That‘s why nothing moves.<br /><br />I suggest you keep track of the posotions of the objects in actual variables, instead of manipulating $200-$2FF directly. Then modify the UpdateSprites routine to use those variables to calculate the coordinates of the sprites instead of using hardcoded values.</div>
<br />
<br />Thank you .
<br />I added the paddle variable after the ball stats.
<br />Changed the $ into a variable at the updatesprites.
<br />Changed the  instructions with sta instead of skip and some other things
<br />AND it worked the paddle MOVES.
<br />
<br />This was the push i needed.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>