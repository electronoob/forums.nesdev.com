<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - 8x16 and whatever else unreg wants to know</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">8x16 and whatever else unreg wants to know</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=7451</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>32</strong> of <strong>83</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Mar 09, 2012 7:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">... for what purpose would you be using these oddRow and evenRow variables you speak of?</div>
<br />
<br />In my code idea there are two rows each 32 bytes.  Then there is the screenArray; 240 bytes.  I'm trying to fill both rows with values for collision... then add them both to screenArray... then clear oddRow and evenRow and fill them both again with new values for collision... then add them both to screenArray...etc.
<br />
<br />edit: ok, I found the first mention of my plan on <a href="http://nesdev.com/bbs/viewtopic.php?p=87562#87562" class="postlink">page 29</a>.  That was in December but I'm still learning and building; getting better. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Mar 09, 2012 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm still confused.
<br />
<br />oddRow and evenRow have to be RAM, otherwise you wouldn't be mentioning putting new values in them.
<br />
<br />This being true, why do you want to put anything in them only to move them someplace else? Just put the values you will load (inevitably from ROM) directly into ScreenArray. Is there any reason for that first step of putting the values into oddRow and evenRow? What do you plan to do with ScreenArray? You're putting things here to do what with them? Load a value from them to check collision, or store them to the PPU? I've only got part of your plan. 
<br />
<br />The response I made to the post you linked made the assumption that the row labels were data in ROM. Your plan seems to be different, so help me understand all the steps. 
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Should I start creating the screen with oddRow or evenRow? Is that top line up there line 0 - even - OR line 1 - odd?</div>
<br />I don't know. Isn't it your data format? You define what's stored, where it's stored, how it's stored, what it's called and what it does.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Mar 10, 2012 7:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm as confused as Kasumi is...
<br />
<br />The way you are asking makes it seem like there's only 1 way to do things, and that this way always uses these variables you mentioned. But actually, collision detection can be done in a thousand different ways, and we have given you some ideas to help shape the solution you'll be using in your game.
<br />
<br />But since it's your game, everything is ultimately your choice and your design. Particularly, I don't remember everything we talked here, and I don't know exactly what solution you used, so if you want very specific help with your implementation you'll need to give us more details about how you're doing things.
<br />
<br />All this data moving seems unnecessary to me as well, there must be a way to decode the maps from ROM into ScreenArray directly. For us to discuss that, you have to tell us how the maps and collision info are stored in the ROM, and what you want ScreenArray to contain.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Mon Mar 12, 2012 2:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">why do you want to put anything in them only to move them someplace else? Just put the values you will load (inevitably from ROM) directly into ScreenArray. Is there any reason for that first step of putting the values into oddRow and evenRow?</div> <br />I thought loading two rows of stuff would be hard, but still possible for me to do. And I thought that once I completed that it would be easy to make a loop to run it again.   Now, I see your point! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />  It would be much faster if I wrote to ScreenArray directly.<br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">What do you plan to do with ScreenArray? You're putting things here to do what with them? Load a value from them to check collision, or store them to the PPU? I've only got part of your plan.</div><br />I plan to use ScreenArray to check collision and to set the PPU.  I'm going to try writing the values directly into ScreenArray. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">The way you are asking makes it seem like there's only 1 way to do things, and that this way always uses these variables you mentioned. But actually, collision detection can be done in a thousand different ways, and we have given you some ideas to help shape the solution you'll be using in your game. </div>
<br />Yes, ok, then I need to create my way... just one of the thousand.  
<br />
<br />Thanks Kasumi and tokumaru! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Mar 16, 2012 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have a question.  There are four variables that recieve a 0-or-1 value at about the same time. Then I want to reassign each variable  a  second-more-important value depending on their first 0-or-1 value.  It seems to me to be good to reuse the same variables for these values because it is all going to be changed a whole lot throughout the game; reusing the same four variables for these 8 values seems like maybe a good idea to me.   But, then I dont know...  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />   ...I think it is bad that the four variables recieve their 0-or-1 value at about the same time because that initial valuing that happens at about the same time... making it rough to use a loop to cycle through each of the four values.  And I thought I could just unroll the loop and copy the middle code three more times but I dont know.  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />  Maybe that's what I should do?  Get the code to work... and then improve it.  Do yall have any helpful ideas for me about this?
<br />
<br />edit:  In asm6 I know you can have multiple + labels... it just goes to the first + it finds.  Can I also have multiple labels like +xyz  and +xyz?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 16, 2012 1:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Both asm6 and ca65 support <a href="http://www.cc65.org/doc/ca65-6.html#ss6.4" class="postlink">cheap local labels</a> that are visible only between two ordinary labels. Names of such labels start with an @ sign. For example, you could do something like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">do_something:<br />&nbsp; blah<br />&nbsp; blah<br />@loop:<br />&nbsp; blah<br />&nbsp; blah<br />&nbsp; bne @loop<br />&nbsp; rts<br /><br />do_something_else:<br />&nbsp; blah<br />&nbsp; blah<br />@loop:<br />&nbsp; blah<br />&nbsp; blah<br />&nbsp; bpl @loop<br />&nbsp; rts</div>
<br />(The ca65 manual uses the term "cheap" to denote @labels because ca65 also has <a href="http://www.cc65.org/doc/ca65-7.html#ss7.4" class="postlink">.proc</a>, a more structured way to make labels visible only within a given scope.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Yggi</b> [ Fri Mar 16, 2012 2:18 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In asm6 you can have many different + and - labels like this:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; LDX #$10<br />--<br />&nbsp; LDY #$10<br />-<br />&nbsp; DEY<br />&nbsp; BNE -<br />&nbsp; DEX<br />&nbsp; BNE --</div><br /><br />The - and -- are treated just like normal labels but can be reused. You can also have multiple + labels. But using many of these labels can quickly make your program messy...<br />But they're still much better than the ugly anonymous labels in ca65 which makes your code really hard to understand...<br /><br />You can also use temporary labels like tepples' already said. But unfortunately you can't use these temporary labels together with +/- so this code is not compileable:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; code<br />&nbsp; @bla<br />&nbsp; &nbsp; code<br />&nbsp; &nbsp; -<br />&nbsp; &nbsp; &nbsp; more code<br />&nbsp; &nbsp; &nbsp; BNE -<br />&nbsp; &nbsp; even more code<br />&nbsp; &nbsp; BEQ @bla</div>
<br />
<br />The +/- labels destroys the scope of the @bla label, so you'll get an error that @bla is an unknown label.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 16, 2012 2:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Can I also have multiple labels like +xyz  and +xyz?</div>
<br />Yes. Anything starting with "+" or "-" can be reused. When you refer to those labels, the nearest one will be used.
<br />
<br />Sorry if I don't have anything to say about the other question, but I found it very confusing. Wouldn't you rather present us the problem in a more abstract way instead of asking details about a possible solution that exists only in your head? I mean, you seem to have some idea of how to go about your problem because you gave some thought to it, but since we don't know how or why you came to that conclusion it's hard for us to visualize the problem.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Fri Mar 16, 2012 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">unregistered wrote:</div><div class="quotecontent"> There are four variables that recieve a 0-or-1 value at about the same time. Then I want to reassign each variable  a  second-more-important value depending on their first 0-or-1 value.  It seems to me to be good to reuse the same variables for these values because it is all going to be changed a whole lot throughout the game; reusing the same four variables for these 8 values seems like maybe a good idea to me.</div><br />I think this is too abstract. I want you to give what the goal of the code is, and then I can think of method to do it. You can also give a goal + a method, and then it's easier for me to tell you, "Yeah, that's great. That will work for that." or "I'd do this instead, but that will work." or whatever. But method without goal means I have to say almost anything will work, or I have to guess at what the goal is. Should you use one byte of RAM for related values? Sure, why not?<br /><br />In any case, here's a couple of things I'll say based on what I think you're asking about.<br /><br />You've got a set of four variables. They've got a format like:<br /><br />%0000XYYY<br />Where YYY is only set to some other value if X is true (or only set if it's false. Doesn't really matter.) Y could be a value of 0 or 1 (in which case it would only take 1 bit.) or Y could be 0-8 (with 3 bits as in the example. I assumed it took more because you didn't say that Y was specifically 1 or 0 like you did with what I'm calling X.)<br /><br />If both X and Y can really only be 0 or 1, you could actually use just one byte for all four of your variables.<br /><br />%XXYYZZAA<br />Where XX = the first and second bit of the first variable,<br />YY = the first and second bit of the second variable,<br />etc. This setup may make your code a small bit slower. Does it matter for what your goal is? Will these values be referenced a lot of times in a frame? Optimizing for RAM, or optimizing for speed? What's most important?<br /><br />The (possibly only slightly) faster way to do something like this<br /><br />%XYYYYYYY This way you keep the 4 variable setup you have now, and can quickly check your first value (X) to see if you need to set your second value (Y). It also allows you to use up to 7 bits for Y, but you can only use one of them. It doesn't matter.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda variable1<br />&nbsp; bpl nosetmoreimportant;If bit &#40;X&#41; is not set, don't reassign second<br />&nbsp; ;whatever code sets the more important variable<br /><br />nosetmoreimportant:<br /></div><br /><br />You could even just use more bytes if say... the second more important variable needed to use 8 bits. It'd make no difference, unless you're short on RAM. It all depends on what your goal is. If, for instance, these variables don't need to be persistent across frames, it matters almost zero how much RAM you use. You could use like 16 bytes of RAM. It wouldn't matter because once the routine is finished, they're free again. You say they'll be changed a lot, but I don't know if that means they'll need to be persistent.<br /><br />I'd like a goal to give better advice.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Get the code to work... and then improve it. Do yall have any helpful ideas for me about this? <br /></div><br />Or tell us what the code is supposed to be doing, so we can really say if the method you're suggesting is a good one.<br /><br />For the record, here's what some of one of my byte format documents looks like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$060B = XXXYYYZZ<br />&nbsp; &nbsp;&nbsp; &nbsp;XXX = Subpixel X<br />&nbsp; &nbsp;&nbsp; &nbsp;YYY = Subpixel Y<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;ZZ = Controller to read from.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ZZ = 0: Controller 1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ZZ = 1: Controller 2<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ZZ = 2: Controller 3<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ZZ = 3: Controller 4<br /><br />$060D = X Velocity unscaled<br /><br />$060E = Direction<br />&nbsp; &nbsp;&nbsp; &nbsp;X0000YYY<br />&nbsp; &nbsp;&nbsp; &nbsp;X = Vertical Orientation<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;X = 0: is not vertically flipped<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;X = 1: is vertically flipped<br />&nbsp; &nbsp;&nbsp; &nbsp;YYY = Direction<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;YYY = 0: is facing up<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;YYY = 1: is facing up-right<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;YYY = 2: is right etc.<br />;This may seem a tad confusing. If X is 1 and Y is 2, he'll face right, but be upside down &#40;feet in the air&#41;. if X is 0 and Y is 2, he'll face right and have his feet on the ground. To make him roll, X will stay the same value, and Y will increase &#40;or decrease&#41; by one, until it wraps. He can roll such that his feet will touch the ground while he's facing right, or such that his feet will touch the ground while facing left.<br /></div>
<br />That's at least how I document my formats, it may not be the standard way, though. A 0 means the bit is free for whatever else I can pack into the byte. No further documentation means the entire byte is used for the one value. This format may help you keep track of things, or possibly communicate your ideas, or it may not help at all!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> But here it is.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Mar 16, 2012 10:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Both asm6 and ca65 support cheap local labels that are visible only between two ordinary labels. Names of such labels start with an @ sign.</div>tepples, thank you for reminding me about the local labels starting with @.  I was thinking that labels with + or - at the front were local labels.  Ha hahaha <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> &lt;-- look I'm silly.   <br /><br /><div class="quotetitle">Yggi wrote:</div><div class="quotecontent">The +/- labels destroys the scope of the @bla label, so you'll get an error that @bla is an unknown label.</div>Thank you Yggi for your help and especially your note that +/- destroys scope of local labels!  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">unregistered wrote:</div><div class="quotecontent">Can I also have multiple labels like +xyz  and +xyz?</div><br />Yes. Anything starting with "+" or "-" can be reused. When you refer to those labels, the nearest one will be used.</div> I was hoping for this reply.  I am excited!  <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" /> <br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Sorry if I don't have anything to say about the other question, but I found it very confusing. Wouldn't you rather present us the problem in a more abstract way instead of asking details about a possible solution that exists only in your head? I mean, you seem to have some idea of how to go about your problem because you gave some thought to it, but since we don't know how or why you came to that conclusion it's hard for us to visualize the problem.</div>Yes. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /> I'm sorry for asking something that is hard for yall to visualize.  My sister suggested I make more notes to myself and after that when I have a real question ask that.  That was a good suggestion! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I think this is too abstract. I want you to give what the goal of the code is, and then I can think of method to do it. You can also give a goal + a method, and then it's easier for me to tell you, "Yeah, that's great. That will work for that." or "I'd do this instead, but that will work." or whatever. But method without goal means I have to say almost anything will work, or I have to guess at what the goal is. Should you use one byte of RAM for related values? Sure, why not? <br /><br />In any case, here's a couple of things I'll say based on what I think you're asking about. <br /><br />You've got a set of four variables. They've got a format like:<br /></div><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If both X and Y can really only be 0 or 1, you could actually use just one byte for all four of your variables. </div><br />All of this is important to me; Kasumi, thank you so much for this excellent help! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  My mind is growing.  Good things like this: <div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">This setup may make your code a small bit slower. Does it matter for what your goal is? Will these values be referenced a lot of times in a frame? Optimizing for RAM, or optimizing for speed? What's most important?</div>
<br />
<br />My goal is to see this collision detection work well. (Optimizing for speed. right now... I think) And to find out why there are so many <strong>Can't determine address.</strong> error lines when I try to assemble my nes file.   But, that is for only me to worry about right now. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />I will come back and reread especially Kasumi's post many many times.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Kasumi</b> [ Sat Mar 17, 2012 12:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My goal is to see this collision detection work well.</div>
<br />I don't quite see the relation to collision detection.
<br />
<br />But sure, I can sure talk about it. It's actually really easy and fast as long as you don't handle slopes, and don't have things like tiles you can jump up through or tiles you can drop down through.
<br />
<br />You only really need to check 6 points to be TOTALLY safe, or 4 if the shape of your character never changes and he is smaller than the size of the collision tile for both X and Y. If he's say... 24 pixels tall with 16x16 collision tiles you have to check one more point. You also need to check more if your character moves more pixels in a frame than the size of your tile. For instance, he's capable of moving 9 pixels in a frame, but your collision tiles are only 8 wide.
<br />
<br />Obviously, you first gotta find out whether or not the tile you're working with is collision enabled. I can't especially help with that unless you make a post about your current tile format. Post about that, and I can write a book for you about that.
<br />
<br />I personally keep 4 screens of 32x32 metatiles in a page of RAM, which are updated when the game scrolls to a new screen. This means all my screen decompression happens once and only on a frame when the character passes a screen boundary. 
<br />
<br />The collision detection and parts of my code that tell the PPU what to draw always pull from this RAM, where it is much easier to figure out the math for me than pulling directly from the data in ROM.
<br />
<br />I load the 32x32 tile from RAM, I find out the 16x16 tile I want in it. Then I know if I should eject or not. 
<br />
<br />It works exactly like this:
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Ignore the &lt;'s, it's a nesasm thing.<br />&nbsp; &nbsp;lda &lt;xhigh;Zero Page RAM I put any high X position into<br />&nbsp; &nbsp;ror a;puts the lowest bit of the high x pos into the carry<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;yhigh;Zero Page RAM I put any high y position into<br />&nbsp; &nbsp;ror a;puts the lowest bit of the high y pos into the carry<br />&nbsp; &nbsp;;and puts the x bit into the high bit of the accumulator<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ror a;Now the low x and y bits are in the high bits accumulator<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;and #%11000000;Removes the other junk in the accumulator<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;sta &lt;reservedE;Temp RAM. The highest bits of it now contain<br />&nbsp; &nbsp;;which screen I'll read from RAM. Each screen is 64 bytes long, because it contains 8x8 32x32 metatiles. <br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;xlow<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a;divide by 32, since I'm trying to get a 32x32 metatile. <br />&nbsp; &nbsp;;The other bits of precision don't matter.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;ora &lt;reservedE;This combines my &quot;which screen&quot; bits with the X offset in RAM.<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;sta &lt;reservedE<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;lda &lt;ylow<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;lsr a<br />&nbsp; &nbsp;and #%00111000;This takes away all unnecessary bits from<br />&nbsp; &nbsp;;my y position<br />&nbsp; &nbsp;ora &lt;reservedE;I know have the offset in RAM that I need to load my 32x32 tile from.<br /><br />&nbsp; &nbsp;tay;Y contains the address of the 32 x 32 metatile to look up<br /><br />&nbsp; &nbsp;lda $0500,y;loads 32 x 32<br />&nbsp; &nbsp;tay;Y contains the 32 x 32 tile number<br /></div><br />The tricky part is actually getting the 32x32 tiles into RAM in the first place, but you may not even need to do that depending on how your data is stored.<br /><br />I then use a series small series of branches to determine which part of the 32x32 tile I'm in. Topleft, Topright, bottomleft, or bottomright. Once I know that, I load the tile and use its format to determine whether it's a collision or not.<br /><br />Here's how I eject when I know the current tile is collision enabled<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Ejecting up/left<br />lda lowbyte<br />and #%00001111<br />clc<br />adc #$01<br />sta offset<br /><br />rts<br /></div><br />You want to eject left while traveling right. So imagine the right point of your character has just entered the first pixel of a tile. It's anded position would be 0. In this case, you obviously want to eject one. If you're going super fast, you'll end up further in the tile, so the and will be higher and you'll always eject one more than that. Easy. jsr to the routine, subtract offset from your character's position. (It should be set to 0 if the collision routine detects the current tile is not a collision tile.) You can even use the offset variable the routine returns to find out whether or not there WAS a collision if you want to do that to stop a walking animation or something.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Ejecting down/right<br />lda lowbyte<br />and #%00001111<br />eor #%00001111<br />clc<br />adc #$01<br />sta offset<br /><br />rts<br /></div>
<br />This one is mostly the same, except it has an eor. Say you're traveling left and hit the first pixel of a tile. That's actually pixel $0F, but you only want to eject one! The eor makes $0F equal to one, then it works the same as before! As before, just write a 0 to offset if you've discovered the current tile is not solid. Jsr to routine,  then add offset to player's position.
<br />
<br />This works for any size tile that's a power of two. Just change the ands and eor to the number of bits your tile takes up.
<br />
<br />If you're traveling left, move the player using the current speed value. You may be in a wall. You check the top and bottom left points of your character, and eject right. (add offset) If you're traveling right, check the top and bottom right points of your character and eject left. (subtract offset) you'll never be in the wall for a frame like Mario, and this will certainly be fast enough for how few tiles you'll need to check.
<br />
<br />For ejecting up while falling you check the bottom left and right points and subtract offset from the player's position.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Apr 06, 2012 12:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Pardon me Kasumi, but this is just crazy... doesn't  make any sense.
<br />
<br />0 to 31  ok, this is 32 values
<br />32 to 63  now this is 31 values
<br />64 to 95  ... 31 values
<br />96 to 127 ... 31 values
<br />
<br />How am I susposed to skip 32 values when every row beyond the first has only 31 values?  <img src="./images/smilies/icon_confused.gif" alt=":?" title="Confused" />   It doesn't work yet. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />  What am I missing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Shiru</b> [ Fri Apr 06, 2012 12:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />32 to 63 is 32 values, like 4 to 7 is 4 values: 4,5,6,7.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Apr 06, 2012 1:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ooooooh! Yes, thanks Shiru!! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Fri Apr 13, 2012 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Kasumi wrote:</div><div class="quotecontent">I personally keep 4 screens of 32x32 metatiles in a page of RAM, which are updated when the game scrolls to a new screen. This means all my screen decompression happens once and only on a frame when the character passes a screen boundary. </div>
<br />Sounds like a great plan! <img src="./images/smilies/icon_biggrin.gif" alt=":D" title="Very Happy" />  How many screens of 16x16 metatiles could fit in a page of RAM?   We're ending 2 hours early today... and that's now... so I'll think more about this on Monday.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>32</strong> of <strong>83</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>