<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - SNES Hi/Fast ROM Header Problems</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">SNES Hi/Fast ROM Header Problems</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10349">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=10349</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LycanLambda</b> [ Tue Aug 06, 2013 8:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello everyone, I decided to start things ahead with taking advantage of the speed boost and extra space provided with Hi/FastROM. Instead of starting with LoRom. I've cobbled together my 'standard' header I'd use for all my practice programs and full projects, however I'm having a hard time with it working.<br /><br />So far in higan/bsnes it gives me garbled nonsense instead of the greenscreen that I desired:<br />[img]oi42.tinypic.com/of3nd2.jpg[/img]<br /><br />And ZSNES works fine, however I receive a &quot;Bad ROM / Checksum Error&quot;:<br /><img src="http://oi40.tinypic.com/auw7mh.jpg" alt="Image" /><br /><br />Any idea whats wrong with my header (link: <a href="http://s000.tinyupload.com/index.php?file_id=40016982724610377147" class="postlink">http://s000.tinyupload.com/index.php?file_id=40016982724610377147</a>)<br />(Code here: <a href="http://s000.tinyupload.com/index.php?file_id=90745625729752123747" class="postlink">http://s000.tinyupload.com/index.php?file_id=90745625729752123747</a>)<br /><br />Or have a solid fast/hirom header they'd like to share? I'm reasonably knowledgeable with the SNES's memory map and its mirrors, however WLA DX has me a bit confused.<br /><br />Thanks

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Aug 06, 2013 8:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Checksum error is normal in a freshly linked ROM. You'll probably have to correct the checksum using a separate tool. If you've been using a separate tool, and your ROM is using HiROM, you'll have to configure it to work with a header stored at a raw offset of $FFxx, not $7Fxx. But in practice, the only thing that really cares about the header checksum in a Super NES ROM is Nintendo's cart manufacturing, to make sure that the ROM reached Nintendo's office intact, and that hasn't been in operation for over a decade.<br /><br />And I don't see how whether the ROM is mapped as HiROM (21) or LoROM (20) is in any way connected to whether something uses slow or fast ROM. I was under the impression that $808000-$80FFFF, $818000-$81FFFF, ..., $BF8000-$BFFFFF could still be set to fast.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Tue Aug 06, 2013 10:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Please upload your SNES_init.asm file. I need to see it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Tue Aug 06, 2013 10:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />without seeing your init routine, and i need to say I am not well versed in FAST ROM. So please someone verify what I say here: <br /><br />1) you need to write 0 to $420D<br />2) At the beginning of all your vectors, you need to jump long to next instruction, ensuring that your jump changes the bank byte to the upper mirror. This can easily be done in WLA DX by setting the .BASE directive to your upper base bank desired for long jump instructions to follow. Then you want to push the program bank register and pull it into the data bank register. Now your program and data banks will be reflect fast ROM region.<br /><br />So, the reason why I wanted to see your init file, was to see if you bothered doing either of these things.<br /><br /><!-- m --><a class="postlink" href="http://wiki.superfamicom.org/snes/show/Programming+with+FastROM">http://wiki.superfamicom.org/snes/show/ ... th+FastROM</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Tue Aug 06, 2013 10:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In your main code file. You do not stz $2121 before writing to $2122. Unless you positively know your init routine has done this priorly, you must write the color index first into $2121. Maybe this will help you?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Tue Aug 06, 2013 10:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />What Tepples said is correct; root cause of your issue is unrelated to the &quot;failed checksum&quot; message, and fixing that is up to a utility that runs either post-assembly or has to be handled properly by the assembler itself.<br /><br />I'm of the same opinion as bazz at this point, but will expand:<br /><br />1. $2121 not being set immediately prior to tinkering with $2122 is probably not wise.<br /><br />2. You're not doing <strong>anything</strong> with $2115 (VRAM access mode/model), $2116/2117 (VRAM address) nor $2118/2119 (VRAM data) -- meaning, you aren't writing anything to VRAM.  You're making a blind (and very bad!) assumption that the content of VRAM is is pre-zeroed/empty.  This would vary from emulator to emulator.  If higan/bsnes sticks &quot;random crap&quot; there on power-on, then good, because there's no guarantee what VRAM contains on power-on or reset on the actual console!  It's your responsibility to zero this out (commonly done via DMA) as you see fit.<br /><br />3. Likewise/related to 2, you're not doing anything with $2105 (selecting BG mode/size), $2107 through $210a (BG-SC size/base address), nor $210b/210c (name base address for CHR data).  You've probably got $2105 as $00 (mode 0, tile size of 8x8), and $2107 (BG1) is probably pointing to $0000 in VRAM, and $210b (BG1 and BG2) is probably also pointing to $0000 in VRAM, which is probably not what you want (CHR data at the same location as the layout data?  Heh ;-) Well I guess for a &quot;blank/zero everything&quot; you might!).<br /><br />See SNES developers manual Chapter 3 (page 2-3-2 onward) for what you should be doing before turning on the screen in this case.<br /><br />4. You probably aren't initialising the 65816 correctly but since you aren't providing full source code I can't tell.  The <strong>very first thing</strong> you should be doing (meaning this is the code that should get pointed to by the RESET vector) is this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.org $xx8000&nbsp; &nbsp;; Or however this is done with WLA DX -- see below for why I say $xx, but $xx8000 is important!<br />RESET:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Point RESET vector here<br />&nbsp; &nbsp;sei<br />&nbsp; &nbsp;clc<br />&nbsp; &nbsp;xce<br />&nbsp; &nbsp;jml RESETNEXT<br />RESETNEXT:<br />&nbsp; &nbsp;jsl SNES_Init<br /></div><br />My guess is that (2) and (3) are the cause of your problem.<br /><br />(4) is also immensely important.  There are multiple things going on there, so I'll itemise them:<br /><br />4a) You need to make sure the assembler is operating with the knowledge that it's in either bank $c0 (normal speed mode 21 (hirom) -- probably what you want), or $80 (fast speed mode 21 but be aware of the memory layout) -- see SNES developers manual page 2-21-4 for the memory layout and see the notes at the bottom of that page -- and this also relates to (4d) below,<br /><br />4b) Disabling interrupts ASAP is important, you don't want a spurious NMI or hardware IRQ happening at this point.  This is just common practise as well, even on the 6502/65c02,<br /><br />4c) You absolutely need to clear emulation mode on startup.  The 65816 starts up in 65c02 emulation mode (e.g. e=1),<br /><br />4d) The <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jml {next line}</tt> looks pointless but isn't.  This is a &quot;65816 quirk&quot; per se; what's being ensured here is that the K register (sometimes called &quot;PBR&quot; -- &quot;Program Bank Register&quot;) gets set to where your code should actually be running out of and not bank $00.  All the 65816 vectors are bankless, i.e. 16-bit values, and bank $00 is assumed.  But also remember that this same quirk/issue needs to apply to other vectors (ex. NMI).<br /><br />Reworded: K is $00 on power-on, so your startup code is actually going to be executed in bank $00.  If you look at a memory map for mode 21, look at what's in bank $00 -- specifically how $8000 to $ffff are mirrored from bank $c08000 to $c0ffff.  Same goes for $808000 to $80ffff.  This is one of the reasons why that mirroring is important, and likewise, why that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jml</tt> is important -- to get out of bank $00 and into $c0 or $80 (depends on what you want).  But you also need to keep the routines within the $xx8000 to $xxffff range (well $ffe3 I guess), meaning don't go doing something like <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.org $800000</tt> for your RESET vector to be at $0000 (look at what's in bank $00 at $0000 ;-) ).<br /><br />See SNES developers manual pages 2-24-3 and 2-24-4 for details on (4b) through (4d); they're discussed fully there.  Otherwise please read (do not skim) the <a href="http://www.westerndesigncenter.com/wdc/datasheets/Programmanual.pdf" class="postlink">Western Design Center's 65816 Programmer's Manual</a>, page 55 (&quot;Interrupts&quot;).<br /><br />You may also want or need to do a <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">phk/plb</tt> once you've switched over to a different bank; this sets the B register to whatever K is at the time.  Again you need to know what you're doing, have familiarity with your assembler, and understand the memory map fully to know what's &quot;safe&quot;.  Example: you don't want to be in bank $00 and do something like a jmp $2100, you'd want to be in bank $c0 (not $00 or $80).  ;-)<br /><br />Also, your SNES init routine should be this (if it isn't already) -- this is intended to be used via <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsl SNES_Init</tt> (not <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr</tt>, but you can change over to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr/rts</tt> if you want), and not as a macro.  When I say &quot;SNES init routine&quot; I'm referring to the memory mapped registers themselves, not part of the stuff discussed above in (4).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">SNES_Init:<br />&nbsp; &nbsp;sep #$20<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta $2100<br />&nbsp; &nbsp;stz $2101<br />&nbsp; &nbsp;stz $2102<br />&nbsp; &nbsp;stz $2103<br />&nbsp; &nbsp;stz $2104<br />&nbsp; &nbsp;stz $2105<br />&nbsp; &nbsp;stz $2106<br />&nbsp; &nbsp;stz $2107<br />&nbsp; &nbsp;stz $2108<br />&nbsp; &nbsp;stz $2109<br />&nbsp; &nbsp;stz $210a<br />&nbsp; &nbsp;stz $210b<br />&nbsp; &nbsp;stz $210c<br />&nbsp; &nbsp;stz $210d<br />&nbsp; &nbsp;stz $210d<br />&nbsp; &nbsp;stz $210e<br />&nbsp; &nbsp;stz $210e<br />&nbsp; &nbsp;stz $210f<br />&nbsp; &nbsp;stz $210f<br />&nbsp; &nbsp;stz $2110<br />&nbsp; &nbsp;stz $2110<br />&nbsp; &nbsp;stz $2111<br />&nbsp; &nbsp;stz $2111<br />&nbsp; &nbsp;stz $2112<br />&nbsp; &nbsp;stz $2112<br />&nbsp; &nbsp;stz $2113<br />&nbsp; &nbsp;stz $2113<br />&nbsp; &nbsp;stz $2114<br />&nbsp; &nbsp;stz $2114<br />&nbsp; &nbsp;lda #$80<br />&nbsp; &nbsp;sta $2115<br />&nbsp; &nbsp;stz $2116<br />&nbsp; &nbsp;stz $2117<br />&nbsp; &nbsp;stz $211a<br />&nbsp; &nbsp;stz $211b<br />&nbsp; &nbsp;lda #$01<br />&nbsp; &nbsp;sta $211b<br />&nbsp; &nbsp;stz $211c<br />&nbsp; &nbsp;stz $211c<br />&nbsp; &nbsp;stz $211d<br />&nbsp; &nbsp;stz $211d<br />&nbsp; &nbsp;stz $211e<br />&nbsp; &nbsp;lda #$01<br />&nbsp; &nbsp;sta $211e<br />&nbsp; &nbsp;stz $211f<br />&nbsp; &nbsp;stz $211f<br />&nbsp; &nbsp;stz $2120<br />&nbsp; &nbsp;stz $2120<br />&nbsp; &nbsp;stz $2121<br />&nbsp; &nbsp;stz $2123<br />&nbsp; &nbsp;stz $2124<br />&nbsp; &nbsp;stz $2125<br />&nbsp; &nbsp;stz $2126<br />&nbsp; &nbsp;stz $2127<br />&nbsp; &nbsp;stz $2128<br />&nbsp; &nbsp;stz $2129<br />&nbsp; &nbsp;stz $212a<br />&nbsp; &nbsp;stz $212b<br />&nbsp; &nbsp;stz $212c<br />&nbsp; &nbsp;stz $212d<br />&nbsp; &nbsp;stz $212e<br />&nbsp; &nbsp;stz $212f<br />&nbsp; &nbsp;stz $4200<br />&nbsp; &nbsp;lda #$ff<br />&nbsp; &nbsp;sta $4201<br />&nbsp; &nbsp;stz $4202<br />&nbsp; &nbsp;stz $4203<br />&nbsp; &nbsp;stz $4204<br />&nbsp; &nbsp;stz $4205<br />&nbsp; &nbsp;stz $4206<br />&nbsp; &nbsp;stz $4207<br />&nbsp; &nbsp;stz $4208<br />&nbsp; &nbsp;stz $4209<br />&nbsp; &nbsp;stz $420a<br />&nbsp; &nbsp;stz $420b<br />&nbsp; &nbsp;stz $420c<br />&nbsp; &nbsp;stz $420d<br />&nbsp; &nbsp;rtl<br /></div><br />This is covered in the official SNES developers manual, section 2-26-1.  And yes, there is some redundant code in there (such as the unnecessary second <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$80</tt> and the secondary <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">lda #$01</tt>), but that's irrelevant to your issue as well.  Stay focused.  :D<br /><br />It would really help if you would provide the full source to everything and not just hobbled together bits.  This is incredibly important when starting out.<br /><br />P.S. -- Where should I send a bill for my time?  ;-)  Just kidding...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Aug 07, 2013 6:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there a reason that the recommended init code uses 8-bit stz and not the shorter 16-bit stz?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Aug 07, 2013 6:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Probably because we're talking about on the order of 100 bytes of ROM space. So why bother?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>3gengames</b> [ Wed Aug 07, 2013 7:10 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">mic_ wrote:</div><div class="quotecontent">Probably because we're talking about on the order of 100 bytes of ROM space. So why bother?</div><br /><br />Yeah, SNES is a modern system, we have to get used to modern programming practices. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>mic_</b> [ Wed Aug 07, 2013 8:01 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Even the earliest SNES games were 4 Mbit. So you'd be looking at savings of about 0.02% of the total ROM space even for the smallest carts. Unless you really need that extra 0.02% I see no point in optimizing the init routine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>koitsu</b> [ Wed Aug 07, 2013 12:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Is there a reason that the recommended init code uses 8-bit stz and not the shorter 16-bit stz?</div><br />Remember at the bottom of my post where I said &quot;Stay focused. :D&quot; ?  ;-)  It's remarkable how completely off-track threads on this forum get.  What mic_ said above applies.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>LycanLambda</b> [ Sat Aug 10, 2013 9:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm back, I've been trying to piece together how to organize the code specifically in the INC file. I do believe I've setup the banks right when it came to the initial memory map, however I'm still confused on the usage of the .BASE directive. I realize that for mode 21 hi/fastrom you can start from either $80:8000 for the PROM or from $C0:0000 however upon setting that in my INC file, I continue to receive black screens and bad rom from my emulators.<br /><br />If all else fails, I'd assume moving all Program memory to start from $C0:0000 and above considering its a contiguous block of memory. <br /><br />I've also cleared all the registers (I think I forgot to set $420D for the speed, but that's a lesser problem atm)<br /><br />I'm also curious if I should use .ORG $C00000 at the beginning of my Reset vector and for any subroutines I might add in the future. Especially if those subroutines are in different banks.<br /><br />I apologize for my ignorance on the subject, its rather new to me in practice. I come from a background in microcontroller programming where I saw my memory maps as single continuous (1 Dimensional) systems, 2-D memory maps like this and (Oh God, Pages on Windows) are still another ball game for me entirely.<br /><br /><br />All in all rip it apart and tell me whats wrong, thanks a ton for your patience and help!  <img src="./images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" />

		
			<br clear="all" /><br />

			<table class="tablebg" width="100%" cellspacing="1">
			<tr>
				<td><b class="genmed">Attachments: </b></td>
			</tr>
			
				<tr>
					<td>
			<span class="genmed">
				<img src="./styles/subsilver2/imageset/icon_topic_attach.gif" width="14" height="18" alt="" title="" /> 
				<a href="./download/file.php?id=771">Lesson2_WIP_HIROM.zip</a> [3.27 KiB]
			</span><br />
			<span class="gensmall">Downloaded 32 times</span>
		

		<br />
	</td>
				</tr>
			
			</table>
		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Ramsis</b> [ Sat Aug 10, 2013 10:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />WLA DX has a feature that calculates your ROM checksum automagically. <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" /> Let me rephrase your header file to take advantage of it. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />(Note that I disabled the .BASE directive as I don't think it's actually needed. Also, I made some other corrections, like the HEADER_OFF define. BTW, all your .ORG directives in the cart header and interrupt vector sections were still lorom-based, and thus wrong. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Oh, and RTI already implies PLP, so that's not needed in your VBlank routine either ...)<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;Standard HiRom Header<br />;2013 Nick Winston<br />;Standardized header for all programs thus allowing faster ROM access and full size access (Edit/Revision A)<br />;<br />;Edited from Neviksti &amp; Bazz's LoROM Header on SNES Dev<br /><br />;First setup standard memory map, slot allocation, &amp; sys architecture<br />.MEMORYMAP<br />&nbsp; &nbsp; SLOTSIZE $10000&nbsp; &nbsp; &nbsp;;Slot size of $10000 bytes<br />&nbsp; &nbsp; DEFAULTSLOT 0&nbsp; &nbsp; &nbsp; &nbsp;;Default Slot for Reset, NMI and other interrupt vectors<br />&nbsp; &nbsp; SLOT 0 $0000&nbsp; &nbsp; &nbsp; &nbsp; ;Define Slot 0's starting address at $0000<br />.ENDME<br /><br />.ROMBANKSIZE $10000&nbsp; &nbsp; &nbsp;;Every ROM Bank is 64KB<br />.ROMBANKS 16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Allocate 16 rom banks, resulting in an 8Mb cart<br /><br />;.BASE $C0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Set PBR &amp; DBR to $C0 to identify the upper mirror of the rom<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;That way the full ROM image can be accessed.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;This is crucial when it comes to addressing registers, etc<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;When doing long jumps to labels, this is crucial to specify the bank to<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;jump to. Thus jumping to labels will assure that the jump is made to the program rom<br /><br />.DEFINE HEADER_OFF $0000 ; Offset Header for cartridge<br /><br /><br /><br /><br />.EMPTYFILL $FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;Obligatory fill of the rest of the bank/slot<br /><br />.SNESHEADER&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; this also calculates ROM checksum &amp; complement<br />&nbsp; &nbsp;ID&nbsp; &nbsp;&nbsp; &nbsp;&quot;SNES&quot;<br />&nbsp; &nbsp;NAME&nbsp; &nbsp;&nbsp; &nbsp;&quot;Lesson 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;<br />&nbsp; &nbsp;HIROM<br />&nbsp; &nbsp;FASTROM<br />&nbsp; &nbsp;CARTRIDGETYPE&nbsp; &nbsp;$00<br />&nbsp; &nbsp;ROMSIZE&nbsp; &nbsp;&nbsp; &nbsp;$0A<br />&nbsp; &nbsp;SRAMSIZE&nbsp; &nbsp;$00<br />&nbsp; &nbsp;COUNTRY&nbsp; &nbsp;&nbsp; &nbsp;$01<br />&nbsp; &nbsp;LICENSEECODE&nbsp; &nbsp;$00<br />&nbsp; &nbsp;VERSION&nbsp; &nbsp;&nbsp; &nbsp;$00<br />.ENDSNES<br /><br /><br />.BANK 0 SLOT 0<br />.ORG $FFB0 + HEADER_OFF<br /><br />&nbsp; &nbsp;.DB&nbsp; &nbsp;&nbsp; &nbsp;&quot;00&quot;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; new licensee code ($00 = unlicensed, not relevant unless you change the old code above to $33)<br /><br /><br /><br />.SNESNATIVEVECTOR<br />&nbsp; &nbsp;COP&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />&nbsp; &nbsp;BRK&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />&nbsp; &nbsp;ABORT&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />&nbsp; &nbsp;NMI&nbsp; &nbsp;&nbsp; &nbsp;VBlank<br />&nbsp; &nbsp;UNUSED&nbsp; &nbsp;&nbsp; &nbsp;$0000<br />&nbsp; &nbsp;IRQ&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />.ENDNATIVEVECTOR<br /><br /><br /><br />.SNESEMUVECTOR<br />&nbsp; &nbsp;COP&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />&nbsp; &nbsp;UNUSED&nbsp; &nbsp;&nbsp; &nbsp;$0000<br />&nbsp; &nbsp;ABORT&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />&nbsp; &nbsp;NMI&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />&nbsp; &nbsp;RESET&nbsp; &nbsp;&nbsp; &nbsp;Boot<br />&nbsp; &nbsp;IRQBRK&nbsp; &nbsp;&nbsp; &nbsp;EmptyHandler<br />.ENDEMUVECTOR<br /><br /><br /><br />.BANK 0 SLOT 0&nbsp; &nbsp; &nbsp; ; Defines the ROM bank and the slot it is inserted in memory.<br />.ORG HEADER_OFF<br />.SECTION &quot;EmptyVectors&quot; SEMIFREE<br /><br />EmptyHandler:<br />&nbsp; &nbsp; rti<br />&nbsp; &nbsp; <br />VBlank:<br />&nbsp; &nbsp; jml FastVBlank<br />FastVBlank:<br />&nbsp; &nbsp; rep #30&nbsp; &nbsp; &nbsp;;<br />&nbsp; &nbsp; pha&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;Push Accumulator onto stack, you should also push X and Y (16 bit), and pull them back just before RTI, in case you plan to use them during (a more complex) VBlank later on!<br />;&nbsp; &nbsp; php&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; not needed<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; sep #$20<br />&nbsp; &nbsp;lda $4210&nbsp; &nbsp;&nbsp; &nbsp;;clear NMI Flag<br /><br />;&nbsp; &nbsp;plp&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; not needed either (unless this is how you make sure to pull back 16 bit registers, of course)<br />&nbsp; &nbsp; rep #$30&nbsp; &nbsp; &nbsp;; make A/X/Y 16 bits (not needed if you keep your PHP/PLP combo above, which I'd not recommend)<br />&nbsp; &nbsp;pla<br />&nbsp; &nbsp;rti<br />&nbsp; &nbsp; <br /><br />&nbsp; &nbsp; <br />.ENDS</div><br />EDIT: One more thing: Your SNES_Init routine ends with RTI, but it actually has to end with RTL since it's called with a JSL. <img src="./images/smilies/icon_exclaim.gif" alt=":!:" title="Exclamation" /> <br /><br />Let me know if it works (I might have missed more errors, or even created new ones ...)! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Sat Aug 10, 2013 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's a fun little challenge, I'll let the other guys help you out

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bazz</b> [ Sat Aug 10, 2013 1:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: SNES Hi/Fast ROM Header Problems</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I seem to have gotten to work. This is running in bsnes, debugger shows code fetch from Fastrom Banks.<br /><br /><img src="http://www.cs.umb.edu/~bazz/fastrom_hirom.png" alt="Image" /><br /><br />All I did was 2 simple changes. in your Lesson2.asm, I just set .org to $008000. the JML makes the bank change not the .org (afaik) I'm confident.<br />Then I added this: <br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Boot:<br />&nbsp; &nbsp; sei ;Disable interrupts<br />&nbsp; &nbsp; clc<br />&nbsp; &nbsp; xce&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; Note. Very important to go native / sei before JML. Crash otherwise (tried it)<br />&nbsp; &nbsp; rep #$10<br />&nbsp; &nbsp; sep #$20<br />&nbsp; &nbsp; lda #$8f<br />&nbsp; &nbsp; sta $2100&nbsp; &nbsp;&nbsp; &nbsp;; fblank this right at Reset<br />&nbsp; &nbsp; jml Start&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />Start:<br />&nbsp; &nbsp;phk<br />&nbsp; &nbsp;plb<br />;...</div><br /><br />JSL SNES_init. not JML.. like the guy above me said.<br /><br /><br />NOW THE IMPORTANT PART: if you want access to the hardware registers $2000-$4000, then you need to push bank $80 onto the bank register not $c0. because $c0 is ROM only. but banks $80 and up act like $00 and up where they still have access to the hardware registers <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>