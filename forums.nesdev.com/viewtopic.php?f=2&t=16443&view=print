<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - How to start developing games for NES?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">How to start developing games for NES?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16443">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16443</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>monobogdan</b> [ Sun Sep 03, 2017 10:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just read about NES architecture and it's... not unusually for me.<br />So, i want start developing games for NES, but don't know starting point.<br />I have C, C++ skills, have some experience in x86 asm.<br />So, from what i should start learning coding for NES?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Sep 03, 2017 1:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I myself started with the Nerdy Nights tutorial for general knowledge and low level stuff.<br /><!-- m --><a class="postlink" href="http://nintendoage.com/forum/messageview.cfm?catid=22&amp;threadid=7155">http://nintendoage.com/forum/messagevie ... eadid=7155</a><!-- m --><br /><br />Be careful: Some information is wrong or poorly explained. You basically never get your program to work if you just follow the instructions. You also always have to download the source code file to notice that it contains a good bunch of stuff that wasn't explained in the actual tutorial at all.<br /><br />When I was able to do that stuff, I switched to cc65 and converted my program to that assembler.<br />Then I programmed most of the game logic using C, only using Assembler for hardware-specific stuff, general purpose functions and time-critical things.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Sun Sep 03, 2017 4:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nerdy Nights is where I started too. With all it's flaws, it's still the best NES development tutorial out there for beginners.<br />It should teach you everything you need to know to make your first NES program and some basics. Then you can learn the rest from this forum and the Nesdev wiki.<br /><br />I prefer programming in assembly. I eventually switched assembler from NESASM to the more popular ASM6.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Sep 03, 2017 5:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I find it easier to code for the NES in assembly because you have full control of everything that goes on, while using C means relying on some hidden library code you won't understand unless you know assembly anyway, and you often have to tailor your C code in not necessarily intuitive ways in order to produce ASM code that's not slow or buggy, so you end up not only having to learn how ASM works, but you also have to study a whole lot about the C-&gt;ASM process and the pre-made libraries if you expect to make anything beyond trivial.<br /><br />But I guess there are beginner guides for both C and ASM, so maybe you should try both out and see what works best for you.<br /><br /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">I eventually switched assembler from NESASM to the more popular ASM6.</div><br />I don't think that ASM6 is more popular than NESASM... It certainly is less restrictive than NESASM, so it gets recommended a lot as an alternative when people run into the pitfalls of NESASM, since both are equally easy to use. There's one really important thing that ASM6 lacks though, which's the ability to get bank numbers from labels (NESASM does it with severe limitations, ca65 does it better). I guess it shouldn't be hard to add a &quot;bank&quot; directive that would cause labels to inherit whatever value was last set, and a function to read that value back, but I can't follow ASM6's source for shit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sun Sep 03, 2017 5:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">and you often have to tailor your C code in not necessarily intuitive ways in order to produce ASM code that's not slow or buggy, so you end up not only having to learn how ASM works, but you also have to study a whole lot about the C-&gt;ASM process and the pre-made libraries if you expect to make anything beyond trivial.</div><br />That's nonsense. Yes, there are a few things to keep in mind, like using global variables instead of locals or parameters or creating an array of a struct as a struct with arrays. But it's not like your C code would look totally outlandish in the end.<br />I programmed a whole jump'n'run and my code still looks pretty clean and C-like.<br /><br />Writing C can still be a ton easier than writing Assembly directly.<br /><br />If you can program Assembly well enough, that's of course always better.<br /><br />But someone who can write fluently in C, but only very slowly in Assembly:<br />Don't tell those people that the adjustments that you have to make in the C code to make it efficient enough for NES programming are such a huge disadvantage and such a code uglyfier that they're better off writing Assembly directly. Because that's simply not true.<br />Don't tell people that they can only either program clean Assembly code or butt-ugly, unintuitive, unreadable C code that's so shitty and energy-taking that they have less trouble using Assembly right away. Because this is clearly nonsense.<br /><br />For someone who is good in C, but slow in Assembly, C is still a huge help for NES programming. And no, not only for &quot;Pong&quot; or &quot;Space Invaders&quot;. It has been proven several times that you can make a real game for the NES by using mostly C:<br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=Eee0yurkIW4">http://www.youtube.com/watch?v=Eee0yurkIW4</a><!-- m --><br /><br />Even if you need to use Assembly for the really time-critical stuff or for understanding what's going on under the hood: There's still a difference whether you force yourself to write an UpdateSprite or ProcessNmi function in Assembly or if you have to code the whole game logic and simply <em>eveything</em> in Assembly.<br /><br />In the following, I will present you my movement function for the most basic opponent of my game. Please tell me:<br />Is the function so ugly and un-C-like and tailored in unintuitive ways that you would usually never use in C, so that I would have been better off writing it in Assembly directly? Or is this pretty much regular C for the most part, so that somebody who knows C but can program in Assembly only very slowly really has an advantage in using C?<br /><br />Let's see if my function will convince a C coder to switch to Assembly because he considers the code to be such an abomination that he sees no use in programming C on the NES and prefers to become a master in Assembly programming instead because he considers this the easier way.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">/* The most basic opponent who<br />&nbsp; &nbsp;just walks left and right. */<br />void __fastcall__ MoveGoon(void)<br />{<br />&nbsp; &nbsp;/* If the Goon is stunned, */<br />&nbsp; &nbsp;if (Npcs.IsStunned&#91;IndexChr&#93;)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;/* we decrement the stunned counter.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;The Goon cannot escape from the stun.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;The counter is just there to make<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;the vibrating movement in &quot;Level.c&quot;. */<br />&nbsp; &nbsp;&nbsp; &nbsp;--Chrs.StunnedCounter&#91;IndexChr&#93;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;/* If he's stunned,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;nothing else is done. */<br />&nbsp; &nbsp;&nbsp; &nbsp;return;<br />&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;/* Often used array variables are put<br />&nbsp; &nbsp;&nbsp; &nbsp;into temporary variables because<br />&nbsp; &nbsp;&nbsp; &nbsp;accessing them is smaller and faster. */<br />&nbsp; &nbsp;MoveGoonX = Chrs.X&#91;IndexChr&#93;;<br />&nbsp; &nbsp;MoveGoonFramesForNextWalkingAnimation =<br />&nbsp; &nbsp;&nbsp; &nbsp;Npcs.GoonFramesForNextWalkingAnimation&#91;IndexChr&#93;;<br /><br />&nbsp; &nbsp;/* If it is declared that<br />&nbsp; &nbsp;&nbsp; &nbsp;the Goon leaves the screen,<br />&nbsp; &nbsp;&nbsp; &nbsp;then nothing can stop him. */<br />&nbsp; &nbsp;if (Npcs.GoonMovesOutOfScreen&#91;IndexChr&#93;)<br />&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonX -= GoonMovementPixelsLeft;<br />&nbsp; &nbsp;/* Movement to the right and<br />&nbsp; &nbsp;&nbsp; &nbsp;to the left are done differently.<br />&nbsp; &nbsp;&nbsp; &nbsp;We first check for right. */<br />&nbsp; &nbsp;else if (Chrs.Direction&#91;IndexChr&#93; == DirectionRight)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;/* We calculate the new position<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;of the right border side.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;We use CharacterFullBorderRight<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;because the Goon's drawn size is<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;bigger than his bounding boxes. */<br />&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonNewPositionRight =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; MoveGoonX<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;+ (CharacterFullBorderRight + GoonMovementPixelsRight);<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;/* If the new position is outside the screen or over a gap, */<br />&nbsp; &nbsp;&nbsp; &nbsp;if (MoveGoonNewPositionRight &gt; 255<br />&nbsp; &nbsp;&nbsp; &nbsp; || GetOnScreenLevelDataValue(MoveGoonNewPositionRight) == 0)<br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* then we change the direction. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Chrs.Direction&#91;IndexChr&#93; = DirectionLeft;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* We reset the frames for the next<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;walking animation since left and<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;right have different values. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonFramesForNextWalkingAnimation =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;GoonFramesPerWalkingAnimationLeft;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* And we immediately let the Goon<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;walk the new distance. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonX -= GoonMovementPixelsLeft;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;/* If the Goon doesn't reach<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;a border, we just let him<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;continue walking. */<br />&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonX += GoonMovementPixelsRight;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp;/* Movement to the left. */<br />&nbsp; &nbsp;else<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;/* We check the new left border position. */<br />&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonNewPositionLeft =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; MoveGoonX<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;+ (CharacterFullBorderLeft - GoonMovementPixelsLeft);<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;/* And we check for a position a bit<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;to the right of the Goon.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;This way we check whether the room<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;where movement is possible for<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;him has become very small.<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;That room is exactly 2/3<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;of CharacterWidth. */<br />&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonNewPositionRight =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; MoveGoonX<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;+ (CharacterFullBorderLeft + 3 * CharacterWidth / 2);<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;/* If that certain right position is not a gap<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and the Goon's new left position would be<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;either outside the screen or be a gap, */<br />&nbsp; &nbsp;&nbsp; &nbsp;if (GetOnScreenLevelDataValue(MoveGoonNewPositionRight) != 0<br />&nbsp; &nbsp;&nbsp; &nbsp; &amp;&amp; (MoveGoonNewPositionLeft &lt; 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; || GetOnScreenLevelDataValue(MoveGoonNewPositionLeft) == 0))<br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* then we switch the Goon's direction. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Chrs.Direction&#91;IndexChr&#93; = DirectionRight;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* Just like in the code above,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;the walking animation frames<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;are reset. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonFramesForNextWalkingAnimation =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;GoonFramesPerWalkingAnimationRight;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* And the Goon is moved. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonX += GoonMovementPixelsRight;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;&nbsp; &nbsp;else<br />&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* If the Goon's new left position<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;would be outside the screen<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and that specific right position<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;is a gap, i.e. if the room<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;where the Goon can move<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;has become very small, */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;if (MoveGoonNewPositionLeft &lt; 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &amp;&amp; GetOnScreenLevelDataValue(MoveGoonNewPositionRight) == 0)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* then leaving the screen is a given. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Npcs.GoonMovesOutOfScreen&#91;IndexChr&#93; = true;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;/* The movement is done. */<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonX -= GoonMovementPixelsLeft;<br />&nbsp; &nbsp;&nbsp; &nbsp;}<br />&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;/* The movement animation is done.<br />&nbsp; &nbsp;&nbsp; &nbsp;If the frame counter is at zero, */<br />&nbsp; &nbsp;if (--MoveGoonFramesForNextWalkingAnimation == 0)<br />&nbsp; &nbsp;{<br />&nbsp; &nbsp;&nbsp; &nbsp;/* we get the next animation<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;phase from the array<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;and apply it to the meta sprite. */<br />&nbsp; &nbsp;&nbsp; &nbsp;Chrs.MetaSprite&#91;IndexChr&#93; =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;GoonWalkingMetaSprites<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#91;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Npcs.GoonWalkingIndex&#91;IndexChr&#93; =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;(Npcs.GoonWalkingIndex&#91;IndexChr&#93; + 1) &amp; BitMask(GoonWalkingMetaSprites)<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&#93;;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp;/* And we reset the counter,<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;depending on the direction. */<br />&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonFramesForNextWalkingAnimation =<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;Chrs.Direction&#91;IndexChr&#93; == DirectionRight<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;? GoonFramesPerWalkingAnimationRight<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;: GoonFramesPerWalkingAnimationLeft;<br />&nbsp; &nbsp;}<br /><br />&nbsp; &nbsp;/* The temporary variables<br />&nbsp; &nbsp;&nbsp; &nbsp;are put back into their<br />&nbsp; &nbsp;&nbsp; &nbsp;original arrays. */<br />&nbsp; &nbsp;Chrs.X&#91;IndexChr&#93; = MoveGoonX;<br />&nbsp; &nbsp;Npcs.GoonFramesForNextWalkingAnimation&#91;IndexChr&#93; =<br />&nbsp; &nbsp;&nbsp; &nbsp;MoveGoonFramesForNextWalkingAnimation;<br />}</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Sun Sep 03, 2017 6:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think first thing is to understand what a valid NES ROM looks like. Early games (super mario bros) look like this...<br /><br />16 byte header (look up iNES)<br />32768 bytes of program code (0x8000)<br />8192 bytes of graphics (0x2000)<br /><br />the program code will load into the CPU at address 0x8000 and run through 0xffff. The last 6 bytes are pointers to system interrupts, and RESET (the start of the program). (look up vectors)<br /><br />the RAM runs from 0 to 0x7ff. 0x100 to 0x1ff is the hardware stack.<br /><br />Use a tile editor program (like YY-CHR or Tile Editor Pro) to make the graphics.<br /><br />Use an assembler (nesasm, asm6, or ca65) to assemble the ASM code and make a .nes file. You would write the code in something like notepad or notepad++.<br /><br />The most basic lesson would be constructing a valid .nes file, where an emulator loads it correctly, and it actually runs code. Get an emulator with a good set of debugging tools. I use FCEUX (and apologize to all the people making new emulators). The important tools are a hex editor, where you can see all the RAM values...PPU viewer, where you can see the graphics...and debugger, where you can freeze the execution of the program and step through the code.<br /><br />There are like 1000 tiny but important things you need to learn to get anything to work right...for example, you can't (shouldn't) transfer data to the PPU while rendering is on (register 0x2001, sprite enable (s), background enable (b)).<br /><br />Then you can learn what the NMI interupt is, what the V-blank is, where the palette is, how to write to the screen, how to put sprites on the screen, how to set up a stable loop, how music works, etc.<br /><br />You write to the screen (registers 0x2006 and 2007) by sending data to PPU addresses 0x2000 - 0x23ff (nametable #0).<br /><br />You have to set the scroll (registers 0x2005) (and write to 0x2000, to make sure correct nametable is selected), after writing to 2006/2007. Then turn rendering on.<br /><br />Good luck. Ask any questions here.<br /><br />(edits made)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sour</b> [ Sun Sep 03, 2017 7:52 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I use FCEUX (and apologize to all the people making new emulators)</div>I am greatly offended by the fact you're using what you're familiar with!<br />Jokes aside, if there is any reason you prefer FCEUX as your debugger (other than it being what you're familiar with), I'm always looking for feedback :)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Mon Sep 04, 2017 1:18 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you can code fluently in C, take that route first. Check neslib, it's user friendly and will help getting your first stuff going quickly. Then you can start getting more hardcore. You'll eventually end up learing assembly, modifying neslib or getting rid of it, and replacing portions in your game with assembly equivalents.<br /><br />Anyway, my only suggestion is that you have fun.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Mon Sep 04, 2017 2:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You use C only to improve development speed for the cost of performance, not because you don't want to bother learning assembly neither as a stepping stone to learning assembly. You need to learn assembly anyway, so I suggest starting with Nerdy Nights and learn the basics of assembly and the NES hardware. Then you can choose if you want to go the C route like DRW did, or the pure assembly route like I did.<br /><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I don't think that ASM6 is more popular than NESASM... It certainly is less restrictive than NESASM, so it gets recommended a lot as an alternative when people run into the pitfalls of NESASM, since both are equally easy to use.</div>My impressions is that ASM6 and CA65 are the two most popular assemblers on this forum, but maybe that's only among the regulars.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Mon Sep 04, 2017 3:06 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Pokun wrote:</div><div class="quotecontent">You use C only to improve development speed for the cost of performance, not because you don't want to bother learning assembly neither as a stepping stone to learning assembly. You need to learn assembly anyway, so I suggest starting with Nerdy Nights and learn the basics of assembly and the NES hardware.</div><br />That's right. You should always start with Assembly first, so that you know what the NES does. And so that you are capable of writing single Assembly functions here and there, even if the majority of your code is still in C.<br />Once you're able to render a background and move a sprite in Assembly, you can start adding C to your code.<br /><br />C is merely a help to make it easier for you, not to avoid the low level stuff completely. But it's still a <em>huge</em> help because it frees you from the burden of having to painstakingly write every single function (like game physics etc.) in low level processor code.<br /><br />For example in my case, I'm totally capable of reading and writing Assembly code.<br />My problem is just that it takes much, <em>much</em> longer for me to write a function in Assembly and I have to concentrate much more if I try to read such a function and play out in my head what it does.<br />So, my sprite rendering function (the function that puts the hardware sprites on screen) is still written in Assembly to make it as tight as possible. But a game-specific, character-specific movement function (how a character reacts when he moves agains a wall etc.), that's done in C.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FrankenGraphics</b> [ Mon Sep 04, 2017 3:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />A perspective from someone who's never taken a single cs class: Assembly language in itself isn't hard to learn (besides a few 6502 specific quirks). The NES hardware - especially the PPU and the APU -, on the other hand, is. And one'd need to learn that part regardless of writing C or ASM. <br /><br />One thing i do find difficult with assembly is reading code and immediately understanding what it does. A function in a higher language can often be self-explanatory because it does what it says in a few lines. Assembly language can take quite a bunch of lines to disclose what it really does besides pushing bits and nibbles and bytes here and there. This makes commenting even more important, imo.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>hackfresh</b> [ Mon Sep 04, 2017 12:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Macros, descriptive function names, and good comments make things insanely more readable<br /><br /><br /><img src="https://pbs.twimg.com/media/DHskYwmV0AQyQQI.jpg" alt="Image" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Mon Sep 04, 2017 3:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I cheated 'cause I'm a computer engineer and know how computers work and had to learn assembly for several architectures during my studies.  That surely helps. Not 6502 (or Z80) though. Anyways, 6502 assembly is probably the most human friendly, human readable, and human writeable of them all (save for maybe 68K). I just think that starting by writing a game in assembly is too harsh for a newcomer, at least it was for me. I enjoy making games and getting results. If I had taken the hard path I wouldn't have finished any.<br /><br />My first NES game was Sir Ababol. Learning the NES specifics was hard enough for me, so I didn't want to add more difficulty to the mix, that's why I chose to code it in C + neslib. The game was short, easy and inefficient, but at least I managed to finish it. <br /><br />Now I've reached a point where I can read and write 6502 assembly. I can modify and expand the core library I still use (neslib) or rewrite parts of my games in assembly. In the meantime, I've produced a number of games which have kept me happy.<br /><br />Besides, I *really* enjoy the act of trying and produce the most efficient C code, learning how to make the compiler behave, and stuff like that. I guess everybody's motivation is different <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Pokun</b> [ Mon Sep 04, 2017 5:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah programming the NES is harsh, you have to be prepared that there is a lot you need to learn. Both 6502 and the NES hardware (although there is no need to focus on the parts not currently needed). But he said he has experience in C/C++ and x86 assembly (which is more than I had when I started with NES), so I think he should be totally fine if he spends some time on it.<br /><br />You don't have to make a game right away though. I played around a lot with the hardware making various more or less useless apps. But when making a game it isn't that different from doing it in for example C. The game programming logic is the same. Game programming was also something I had to learn though (and is still learning) as I had no experience with programming graphical games before I started with NES programming.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Sep 05, 2017 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: How to start developing games for NES?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sour wrote:</div><div class="quotecontent"><div class="quotetitle">dougeff wrote:</div><div class="quotecontent">I use FCEUX (and apologize to all the people making new emulators)</div>I am greatly offended by the fact you're using what you're familiar with!<br />Jokes aside, if there is any reason you prefer FCEUX as your debugger (other than it being what you're familiar with), I'm always looking for feedback <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /></div><br />FCEUX is familiar.<br /><br />When I started seriously[1] developing for NES in the fourth quarter of 2008, the big choices were FCEUX and Nintendulator. I had to pick, and Nintendulator had two drawbacks.<br /><br />First, FCEUX came in two editions, both of which worked for me. The non-debugging was natively ported to GNU/Linux using SDL. And the debugging version worked in Wine, an environment for running Windows programs on x86 operating systems not made by Microsoft. Nintendulator at the time had serious problems with the input configuration dialog on non-Microsoft operating systems (<a href="https://forums.nesdev.com/viewtopic.php?p=172275#p172275" class="postlink">allegedly fixed a year ago</a>). In any case, FCEUX developers felt responsive to my reports of bugs that appear only in Wine, as opposed to developers of some other popular in the NES scene.[2] Often, it revealed reliance on undefined or unspecified behavior of a Win32 API call.<br /><br />Second, FCEUX runs fine even on old or mobile-spec hardware. For seven and a half years, I used a Linux netbook as my primary PC for NESdev, and things like Nintendulator and bsnes-plus couldn't hold anywhere near 60 fps. I'm no longer using that laptop since its third rechargeable battery stopped holding a charge, and I don't want to try buying a fourth battery for an over seven-year-old PC.<br /><br />I'll have to try Mesen sometime.<br /><br /><br /><span style="font-size: 85%; line-height: normal">[1]I started back in the late 1990s, when NESticle, loopyNES, and NESten were hot $#!+. Only once I bought a PowerPak did I become truly serious about the NES.<br /><br />[2] HertzDevil of 0CC-FamiTracker has passed the buck for Wine compatibility to the Wine developers, who have accepted the issue as <a href="https://bugs.winehq.org/show_bug.cgi?id=40416" class="postlink">Bug 40416</a>. But Wine is distributed in a manner that it can take up to three years for improvements to trickle down to users.</span>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>