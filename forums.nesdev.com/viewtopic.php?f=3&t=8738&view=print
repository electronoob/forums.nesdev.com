<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CPU-test: cpu_dummy_writes [DONE]</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CPU-test: cpu_dummy_writes [DONE]</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8738">http://forums.nesdev.com/viewtopic.php?f=3&amp;t=8738</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Tue Mar 20, 2012 8:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CPU-test: cpu_dummy_writes [DONE]</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is a <a href="http://nesdev.com/bbs/viewtopic.php?p=31629" class="postlink">test called cpu_dummy_reads written by Blargg</a>.
<br />
<br />I created a logical counterpart called cpu_dummy_writes.
<br />
<br />As I understand it, read-modify-write instructions, such as INC, issue two writes: Once for the unmodified value, and then for the modified value.
<br />
<br />I tried my hand at making one (sans timings), and it is here, with source code: <!-- m --><a class="postlink" href="http://bisqwit.iki.fi/src/nes_tests/cpu_dummy_writes.zip">http://bisqwit.iki.fi/src/nes_tests/cpu ... writes.zip</a><!-- m -->
<br />
<br />It includes two versions. One depends on OAM reading being reliable, and the other depends on proper implementation of the PPU's open bus.
<br />
<br />Test results for OAM version:
<br />
<br />-- FCEUX, oldppu: OAM reading not supported (867 errors); fails test #3 (fail #2 given)
<br />-- FCEUX, newppu: All opcodes pass, but 5 errors in OAM read test (fail #6)
<br />-- BNES (BSNES 087): All official instructions pass, but emulator errors out at the first unofficial instruction (technically fail #9, but error message never gets displayed)
<br />-- Nesemu1 (my emulator): All tests pass
<br />-- Nintendulator 0.970: All opcodes pass, but 3 errors in OAM read test (fail #6)
<br />-- Nestopia 1.40: All tests pass
<br />-- NES: Random failures, more often than not. This suggests that OAM reading is reliable only on emulators. Though this test can help catch buggy CPU emulators, it does not suggest overall accuracy as it is now.
<br />
<br />Test results for the PPU memory version:
<br />
<br />-- FCEUX, oldppu: All tests pass
<br />-- FCEUX, newppu: 150 open bus errors, opcodes worked fine (fail #10)
<br />-- BNES (BSNES 087): 750 open bus errors, crash at unofficial instructions (technically fail #9, but error message never gets displayed), all official instructions report failure (but this is because open bus is not implemented properly).
<br />-- Nesemu1 (my emulator): All tests pass
<br />-- Nintendulator 0.970: All tests pass (nags about unofficial instructions)
<br />-- Nestopia 1.40: 15 open bus errors, opcodes worked fine (fail #10)
<br />-- NES: All tests pass

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Mar 20, 2012 9:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />*ahem* RockNES 5.07 gives error #10, "INC abs should do double-write".
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define INC&#40;v&#41; \<br />&nbsp; &nbsp;z_readvalue&#40;&#41;; \<br />&nbsp; &nbsp;v += 1; \<br />&nbsp; &nbsp;SET_SZ_FLAGS&#40;v&#41;<br /><br />CPUOP&#40;INC1&#41;<br />&nbsp; value = readvalue&#40;offset&#41;;<br />&nbsp; INC&#40;value&#41;;<br />&nbsp; writevalue&#40;offset, value&#41;;<br />OPEND</div><br /><br />Also... the <a href="http://nesdev.com/6502_cpu.txt" class="postlink">timing diagram source</a>.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Read-Modify-Write instructions &#40;ASL, LSR, ROL, ROR, INC, DEC,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SLO, SRE, RLA, RRA, ISB, DCP&#41;<br /><br />&nbsp; &nbsp; &nbsp; &nbsp; #&nbsp; address R/W description<br />&nbsp; &nbsp; &nbsp; &nbsp;--- ------- --- ------------------------------------------<br />&nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch opcode, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch low byte of address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; PC&nbsp; &nbsp; &nbsp;R&nbsp; fetch high byte of address, increment PC<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; address&nbsp; R&nbsp; read from effective address<br />&nbsp; &nbsp; &nbsp; &nbsp; 5&nbsp; address&nbsp; W&nbsp; write the value back to effective address,<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and do the operation on it<br />&nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; address&nbsp; W&nbsp; write the new value to effective address</div>
<br />
<br />Looks like the document is OK. I can't believe I bypassed it! <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>FHorse</b> [ Tue Mar 20, 2012 9:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All test passed with puNES <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Mar 20, 2012 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Might one be able to exploit open bus to get the right value into INC $2005?
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp;ldx #$1F<br />&nbsp; inc $1FF5,x<br />&nbsp; ; read #$FE = INC a,x<br />&nbsp; ; read #$F5<br />&nbsp; ; read #$1F<br />&nbsp; ; read $1F05 = $0705<br />&nbsp; ; read $2005 &#40;open bus; hopefully returns value left there by reading $1F05&#41;<br />&nbsp; ; write back old value to $2005<br />&nbsp; ; write back new value to $2005<br /></div>
<br />$2006 (VRAM address) and $2007 (VRAM data) also have semantics for multiple reads and writes, and they may ignore writes too.
<br />
<br />I'd make this, but my PowerPak's open bus behavior can't be trusted.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Tue Mar 20, 2012 11:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU-test request: cpu_dummy_writes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent">-- NES, PowerPak: According to Kiddcade at #nesdev, the OAM write/read tests fail randomly; and when they succeed, the instruction tests fail randomly. However, as of this writing, he has not tried the newest version.</div>
<br />This is expected, see <a href="http://nesdev.com/bbs/viewtopic.php?t=6424" class="postlink">this thread</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Tue Mar 20, 2012 4:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, I did the necessary changes, but there's a problem. The APU test ROM (<em>4017_timing.nes</em>) <strong>fails</strong> regarding "delay after effective $4017 write: 0". Here's my new code anyways...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define INC&#40;v&#41; \<br />&nbsp; &nbsp;v += 1; \<br />&nbsp; &nbsp;SET_SZ_FLAGS&#40;v&#41;<br /><br />CPUOP&#40;INC1&#41;<br />&nbsp; value = readvalue&#40;offset&#41;;<br />&nbsp; writevalue&#40;offset, value&#41;;<br />&nbsp; INC&#40;value&#41;;<br />&nbsp; writevalue&#40;offset, value&#41;;<br />OPEND</div>
<br />
<br /><strong>EDIT:</strong> I had to modify ASL, ROL, LSR and ROR w/ implicit addressing mode to take 2 cycles again. Everything's fine.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Wed Mar 21, 2012 6:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU-test request: cpu_dummy_writes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bisqwit wrote:</div><div class="quotecontent">-- BNES (BSNES 087): All official instructions pass, but emulator errors out at the first unofficial instruction (technically fail #50, but error message never gets displayed)</div>
<br />
<br />The documentation on unofficial opcodes is piss-poor, and wildly inconsistent. Every unofficial opcode also has 5+ mnemonics, which doesn't help matters any.
<br />
<br />I'd appreciate if there were a document that explains 100% of all behaviors (especially the ones that have "undefined behavior", which is coded speak for "I don't understand the actual interactions with past CPU actions/states"), and gives exactly one community-preferred name for each mnemonic.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Wed Mar 21, 2012 7:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: unofficial opcodes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />SLO (ASL+ORA), RLA (ROL+AND), SRE (LSR+EOR), RRA (ROR+ADC), DCP (DEC+CMP), ISB (INC+SBC).
<br />
<br />These six are very consistent and regular. They are (nearly) perfect synthesis of their component opcodes.
<br />I am currently rewriting my CPU core, and from the rewritten core the combined synthesis of these opcodes becomes also rather obvious.
<br />--------
<br />Take opcode $17 (SLO zx) for example. It is a perfect synthesis of $16 (ASL zx) and 15 (ORA zx).
<br />ASL zx:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; //&nbsp; &nbsp; address&nbsp; &nbsp; write&nbsp; &nbsp; &nbsp; &nbsp; recipient&nbsp; &nbsp; &nbsp; code<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.raw=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 'ADDR.lo+=X'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 't&amp;=data; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data',&nbsp; &nbsp; &nbsp; &nbsp; 'sb=0; reg.P_C = t&amp;0x80; t&lt;&lt;=1$ t|=sb; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;, // Write new value<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw; reg.P_N=t&amp;0x80; reg.P_Z=!u8&#40;t&#41;'&#41;,</div><br />ORA zx:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.raw=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 'ADDR.lo+=X'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 't&amp;=data; t2&amp;=A'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw; t|=t2; A=t; reg.P_N=t&amp;0x80; reg.P_Z=!u8&#40;t&#41;'&#41;,</div><br />SLO zx:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.raw=data'&#41;,&nbsp; &nbsp; &nbsp;IDENTICAL<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 'ADDR.lo+=X'&#41;,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IDENTICAL<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 't&amp;=data; t2&amp;=A; data=t'&#41;,&nbsp; &nbsp; &nbsp; INCLUDES EVERYTHING FROM BOTH COMPONENTS<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data',&nbsp; &nbsp; &nbsp; &nbsp; 'sb=0; reg.P_C = t&amp;0x80; t&lt;&lt;=1$ t|=sb; data=t'&#41;, THIS COMES FROM ASL<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;, // Write new value&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; THIS FROM ASL<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw; t|=t2; A=t; reg.P_N=t&amp;0x80; reg.P_Z=!u8&#40;t&#41;'&#41;, INCLUDES EVERYTHING FROM BOTH COMPONENTS</div><br />--------<br />Similarly, opcode 8D, STA abs:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.lo=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.hi=data; t&amp;=A; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div><br />Opcode 8E, STX abs:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.lo=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.hi=data; t&amp;=X; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div><br />Opcode 8F, SAX abs:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.lo=data'&#41;,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IDENTICAL<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.hi=data; t&amp;=A; t&amp;=X; data=t'&#41;, EVERYTHING FROM BOTH<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IDENTICAL<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IDENTICAL</div><br />--------<br />For a more complicated (and at first glance, irregular) example, consider the differences between these two official opcodes:<br />Opcode 95, STA zx (official):<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.raw=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 'ADDR.lo+=X; t&amp;=A; data=t'&#41;, // dummy read while the CPU is preparing data<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div><br />Opcode 96, STX zy (official):<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.raw=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 'ADDR.lo+=Y; t&amp;=X; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div><br />However, with absolute indexing, there is an extra cycle dedicated for fixing up the 16-bit address, and this conflicts with the indexing logic (the high-part of the address is loaded at the same time (I guess, in the same bus) as the target register, which is an index register), making 9E (STX absy) broken and therefore not part of the official set of instructions.<br /><br />Opcode 9D, STA absx (official):<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.lo=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.hi=data; ADDR.lo+=X; overflow=ADDR.lo&lt;X'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 'ADDR.hi += overflow; t&amp;=A; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div><br />Opcode 9E, STX absy (unofficial, alternative names: SHX/SXA/XAS)<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.lo=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.hi=data; ADDR.lo+=Y; overflow=ADDR.lo&lt;Y'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 't&amp;=&#40;ADDR.hi + overflow&#41;; t&amp;=X; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div><br />Then the perfect synthesis opcode of these two becomes:<br />Opcode 9F, SAX absx (unofficial, alternative names: SHA/AHA/AHX)<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.lo=data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; '++PC.raw; ADDR.hi=data; ADDR.lo+=X; overflow=ADDR.lo&lt;X'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',false,&nbsp; &nbsp; &nbsp; 'data',&nbsp; &nbsp; &nbsp; &nbsp; 't&amp;=&#40;ADDR.hi+overflow&#41;; t&amp;=A; t&amp;=X; data=t'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'ADDR.raw',true,&nbsp; &nbsp; &nbsp; &nbsp;'data'&#41;,<br />&nbsp; &nbsp; &nbsp; Array&#40;'PC.raw',false,&nbsp; &nbsp; &nbsp; &nbsp; 'OPCODE',&nbsp; &nbsp; &nbsp; '++PC.raw'&#41;,</div>
<br />--------
<br />At this cycle-level opcode analysis, the even the erradic behavior of the unofficial opcodes starts looking surprisingly regular.
<br />True, there are some that are unpredictable, such as 8B (ANE #imm), which is a synthesis of 89 STA #imm + 82 STX #imm, both functionally NOPs, but combined does weird things.
<br />--------
<br />To answer your concern, what matters is not what people call these opcodes. What matters is what they do.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 21, 2012 7:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CPU-test request: cpu_dummy_writes</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">byuu wrote:</div><div class="quotecontent">I'd appreciate if there were a document that explains 100% of all behaviors (especially the ones that have "undefined behavior", which is coded speak for "I don't understand the actual interactions with past CPU actions/states")</div><br />The behaviors behind instructions involving $11 or $EE is actually analog, as <a href="http://visual6502.org/wiki/index.php?title=6502_Opcode_8B_%28XAA,_ANE%29" class="postlink">a page on visual6502 explains</a>. The CPU is trying to read and write the special bus at the same time, where some of it is direct and the other goes through ADC's decimal mode circuitry. The timing on this differs from one lot of 6502s to another and possibly even by temperature and RFI. It also involves the RDY input, meaning the behavior might change around a DMC DMA request (which pulls RDY low for a few cycles).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">and gives exactly one community-preferred name for each mnemonic.</div>
<br />For the stable opcodes, I'd pick whatever mnemonic <a href="http://www.cc65.org/doc/ca65-4.html#ss4.3" class="postlink">ca65's 6502X mode</a> uses. <a href="http://wiki.nesdev.com/w/index.php/Programming_with_unofficial_opcodes" class="postlink">My article about practical uses of unofficial opcodes</a> had mostly followed ca65's mnemonics, and today I changed SBX to AXS to conform fully.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Thu Mar 22, 2012 7:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is there something else for CPU emulation that could be tested? Such test was important here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>crudelios</b> [ Thu Mar 22, 2012 9:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice to see someone other than blargg creating some tests!
<br />
<br />My emu (jaNES) passed both official and unnofficial tests <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Mar 24, 2012 4:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I created another version of this test, now using PPU memory for the double write testing. It also verifies whether the emulator emulates PPU's open bus features properly. I also updated the OAM version to do more exhaustive testing on the OAM.
<br />
<br />I have updated the first post of the thread with test results.
<br />
<br />The test(s) can be downloaded here: <!-- m --><a class="postlink" href="http://bisqwit.iki.fi/kala/cpu_dummy_writes.zip">http://bisqwit.iki.fi/kala/cpu_dummy_writes.zip</a><!-- m -->
<br />
<br />I would appreciate it if someone could run this test on the real NES a few times and report carefully the results, preferably before people start using this test and before it becomes difficult to release updates to it.
<br />
<br />Screenshots from Nestopia (1.40), BSNES (v087), Nintendulator (0.970), FCEUX (2.1.4a), RockNES (5.07), puNES (0.56), nesemu1, iNES 3.6, Famtasia, Nesticle ;-)
<br /><img src="http://bisqwit.iki.fi/kala/snap/nestopia_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/bsnes_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/undulator_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/fceux_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/rocknes_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/punes_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesemu1_dummywrite_ppumem.gif" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/ines_dummywrite_ppumem.png" alt="Image" />  <img src="http://bisqwit.iki.fi/kala/snap/famtasia_dummywrite_ppumem.png" alt="Image" /> <img src="http://bisqwit.iki.fi/kala/snap/nesticle_dummywrite_ppumem.png" alt="Image" />
<br />
<br />Video capture from my emulator:
<br /><!-- m --><a class="postlink" href="http://bisqwit.iki.fi/kala/snap/nesemu1_dummywrite_oam.avi">http://bisqwit.iki.fi/kala/snap/nesemu1 ... te_oam.avi</a><!-- m --> , <!-- m --><a class="postlink" href="http://bisqwit.iki.fi/kala/snap/nesemu1_dummywrite_ppumem.avi">http://bisqwit.iki.fi/kala/snap/nesemu1 ... ppumem.avi</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Zepper</b> [ Sat Mar 24, 2012 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It's time for implementing such unofficial opcodes. In fact, they are/were used to identify bad dumps and/or bugs in the emulation.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Mar 24, 2012 7:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I ran the OAM test with my PowerPak in NovaYoshi's NES. Most of the time I got this:
<br />"n FAILED READS; SPRDATA does not appear to be reliable RAM at all"
<br />The most common values of n were 126 and 895, depending on PPU-CPU alignment at reset, but 6, 134, and 902 were seen more than once.
<br />
<br />Occasionally I got this:
<br />"INC abs should do double-write"
<br />
<br />So I long-reset and did the PPU tests. Each line of open bus behavior was "0- 0- 00 0- 0- 0- 0- 00". Then it got glitchy as heck for a couple seconds. And then randomly depending on PPU-CPU alignment at reset, it would either pass or display a blank box below the "1B3B5B7BDBFB". Once I got it to say "Pas    " with four spaces after "Pas". On the most part the result of a passed run looked like Nintendulator, except for orange horizontal lines running through most blank areas, and random characters scattered about the screen.
<br />
<br />I don't have my video recording equipment with me at the moment. In a couple days, should I make videos covering about a dozen resets of each test?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bisqwit</b> [ Sat Mar 24, 2012 7:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I don't have my video recording equipment with me at the moment. In a couple days, should I make videos covering about a dozen resets of each test?</div>
<br />Thank you, but no, I think that description was verbose enough. Weird!
<br />The jumpy image was to be expected, it does that on emulators too. (Though on emulators, it jumps during the open bus testing, not during the opcode testing.)
<br />I tried to minimize the times the screen is blanked, just in case an emulator crashes in the middle of the test and leaves nothing to be seen on the screen, but I may have cut it too close at times. I did include a vblank wait at relevant times, or so I think. I'll see if I can fix it more.
<br />I'm not sure what to make of the "blank box". There was a blank box on the next screen in some earlier version, but the scrolling position is set with a vblank wait before the pass texts are output.
<br />
<br />I will leave the OAM test like that though; I don't think I can improve it in any way except by adding more opcodes into the test or by making the opcode tests not depend on earlier tests, as is in the PPU memory version.
<br />
<br />Good to know that the assumptions I made in making the open bus test were right.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>