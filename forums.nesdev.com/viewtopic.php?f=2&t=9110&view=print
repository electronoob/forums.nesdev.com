<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CA65: zp -&gt; abs when using nested .procs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CA65: zp -&gt; abs when using nested .procs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9110">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=9110</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Fri Jul 20, 2012 3:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the CA65 wiki, there's an article on <a href="http://wiki.cc65.org/doku.php?id=cc65:symbols_in_local_scopes" class="postlink">using symbols in local scopes</a>. In some cases, using local scope makes the assembler assume absolute mode when you really wanted zp. If you assemble the following nonsense program (no flags required just ca65 the_below_code.asm), you'll get a range error because the sta b0 instructions all assemble to absolute mode:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.proc test<br />&nbsp; <br />&nbsp; lda b0<br />&nbsp; <br />.proc nested_proc<br /><br />&nbsp; beq label<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; sta b0<br />&nbsp; .repeat 86<br />&nbsp; nop<br />&nbsp; .endrepeat<br />&nbsp; <br />label:<br /><br />&nbsp; rts<br /><br />.endproc<br />&nbsp; &nbsp; <br />.endproc<br /></div><br /><br />To correct this, it appears you can do a couple of things. One, suggested by the wiki, is to add the global scope specifier in front of the use of your symbol:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp b0<br /><br />.proc test<br />&nbsp; <br />&nbsp; lda ::b0<br /><br />....<br /></div><br /><br />What I find odd is, I only have to do this once (such as the first time the symbol is used). Another way to correct the issue is to remove that nested .proc and just use a normal label.<br /><br />What's further odd is, I remember using nested .procs for scope in the Nomolos codebase. Yet, I haven't yet found a place where CA65 is assembling to absolute mode where I'm expecting zeropage instructions.<br /><br />Anyone understand this quirk of CA65 scope better than I do?  Posting this will probably just make nesasm and asm6 adherants happy that they never made the switch  <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Fri Jul 20, 2012 4:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sounds like a bug to me.  I'm surprised that it would have those kind of problems.
<br />
<br />ASM6 is aggressive about using zeropage mode whenever possible.  It also uses a 3-pass system just in case it can't decide whether or not to use zeropage mode at the appropriate times.  Deciding whether or not to use zeropage mode instructions is usually obvious, but sometimes it isn't.  Especially once you support external symbols.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Jul 21, 2012 2:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The reason this happens is that CA65 doesn't know whether "b0" is referring to the global symbol, or a symbol of the same name in the current scope which could be defined later. This has been discussed several times in the CC65 mailing list: <!-- m --><a class="postlink" href="http://www.cc65.org/mailarchive/2011-07/9539.html">http://www.cc65.org/mailarchive/2011-07/9539.html</a><!-- m -->
<br />
<br />I agree it's kind of unfortunate that it behaves like this, especially because most of the time it will not give a warning when it ends up using absolute addressing for zeropage variables. This is actually the reason that I added warning messages to NintendulatorDX whenever a game uses absolute addressing when zeropage could be used.
<br />
<br />A case could be made that it would make more sense for CA65 to just use the global symbol, and if a symbol with the same name is defined later in the scope, just error out, because the case that CA65 is trying to protect against (having a global and local symbol with the same name) is so uncommon.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This old thread is making me wish asm6 and ca65 would have a baby together. It'd be the best assembler ever.<br /><br />It looks like there are some funny edge cases ca65 has from being a one pass assembler, that a multi pass assembler can (apparently) easily resolve. Amusing that the author states they made ca65 a one pass assembler because it would be &quot;more fun.&quot; Haha. Yeah maybe, but also more annoying to use perhaps <img src="./images/smilies/icon_lol.gif" alt=":lol:" title="Laughing" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 06, 2017 1:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Just to clarify, because this thread looks slightly scarier until I checked this for myself, but the problem is restricted to <em>nested</em> scopes. A top level .proc or .scope does not suffer from this problem, so far as I can tell.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Aug 06, 2017 1:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />When I first got started with ca65 I was very excited and made heavy use of scopes in attempts to encapsulate stuff and make my code more organized. I soon ran into all kinds of annoying little issues that made me revert to using only one level of scoping.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 1:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">When I first got started with ca65 I was very excited and made heavy use of scopes in attempts to encapsulate stuff and make my code more organized. I soon ran into all kinds of annoying little issues that made me revert to using only one level of scoping.</div><br /><br />Yeah I think I'm headed that direction. I'm currently using .scope ... .endscope rather liberally just for local labels, but I think that's probably been overkill when I can just use cheap locals or :.<br /><br />To be honest though I think I'm mainly suffering from OCD today, wishing I could have *absolute* (heh) control over whether the assembler is emitting zp or absolute in all cases. With the workarounds I've come up with for the few instances where this is happening, I'm seeing very little performance gain. And not that huge of a savings in code size either.<br /><br />Despite its flaws, I can't imagine working without ca65's benefits, still, particularly the clunky but very useful macro system.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Aug 06, 2017 2:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Just to clarify, because this thread looks slightly scarier until I checked this for myself, but the problem is restricted to <em>nested</em> scopes. A top level .proc or .scope does not suffer from this problem, so far as I can tell.</div><br />Hmm, might be that I'm too out of touch with ca65 (haven't coded much 6502 in a long time), but that seems really strange.<br /><br />I tried a few things:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp foo<br />.proc bar<br />&nbsp; &nbsp; lda foo ; 2 bytes<br />.endproc<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp foo<br />.proc bar<br />&nbsp; &nbsp; lda foo ; 2 bytes<br />&nbsp; &nbsp; .proc baz<br />&nbsp; &nbsp; &nbsp; &nbsp; lda foo ; 3 bytes<br />&nbsp; &nbsp; .endproc<br />.endproc<br /></div><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.globalzp foo<br />.proc bar<br />&nbsp; &nbsp; .proc baz<br />&nbsp; &nbsp; &nbsp; &nbsp; lda foo ; 2 bytes<br />&nbsp; &nbsp; .endproc<br />.endproc<br /></div><br />I can <em>kind of</em> understand the logic for why it sometimes pessimistically produces absolute addressing (due to the reasoning in my previous post in this thread), but why would the same logic not affect top-level scopes?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 06, 2017 2:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">To be honest though I think I'm mainly suffering from OCD today, wishing I could have *absolute* (heh) control over whether the assembler is emitting zp or absolute in all cases.</div><br />You can:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda z:var ; generates ZP instruction, generates an error if var is &gt;= $100<br />&nbsp; &nbsp;lda a:var ; generates ABS instruction</div><br /><br />And a really weird kicker to this: if you use <strong>z:</strong> in a nested scope it <em>will</em> manage to generate the ZP instruction.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 2:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">To be honest though I think I'm mainly suffering from OCD today, wishing I could have *absolute* (heh) control over whether the assembler is emitting zp or absolute in all cases.</div><br />You can:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda z:var ; generates ZP instruction, generates an error if var is &gt;= $100<br />&nbsp; &nbsp;lda a:var ; generates ABS instruction</div><br /><br />And a really weird kicker to this: if you use <strong>z:</strong> in a nested scope it <em>will</em> manage to generate the ZP instruction.</div><br /><br />I was experimenting with the a: and z: prefixes today, in combination with the .addrsize function. However I get &quot;address size unknown&quot; warnings. And, with my macro system I might be passing in zp vars or ram vars, it's not guaranteed to be zp.<br /><br />One thing I'm considering is simply prefixing or suffixing ALL zp symbols throughout my entire game with z_ and detecting this with the string macro technique in <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16314" class="postlink">this thread</a>, to determine whether to use z: or a:. That just feels like overkill though to be honest. I think I can live with imperfect assembly given how little performance or code size improvement I seem to be getting with workarounds in place anyhow. The productivity benefits from the macro system I've come up with have been utterly huge (for me, no idea if they seem like a hacky mess to others lol).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 06, 2017 2:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ah, I think the &quot;rule&quot; it's applying is that it will only search for existing symbols one level higher.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;var0 = $33<br />&nbsp; &nbsp;.proc first<br />&nbsp; &nbsp;&nbsp; &nbsp;lda var0 ; assumes ZP<br />&nbsp; &nbsp;&nbsp; &nbsp;var1 = $55<br />&nbsp; &nbsp;&nbsp; &nbsp;.proc second<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda var0 ; assumes ABS<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda var1 ; assumes ZP<br />&nbsp; &nbsp;&nbsp; &nbsp;.endproc<br />&nbsp; &nbsp;.endproc</div><br /><br />So, that at least makes it a consistent behaviour, but still unintuitive. Trying to think what I'd want... a recursive search instead of a one-level search would seem OK to me, I don't see how that's logistically much different (i.e. still &quot;importing&quot; stuff from higher scopes). It already gives a range error if you redefine a symbol locally with a larger size, so that's not really a problem either.<br /><br />Can anyone think of any new problems a recursive search would cause over the existing one-level search?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sun Aug 06, 2017 3:01 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">One thing I'm considering is simply prefixing or suffixing ALL zp symbols throughout my entire game with z_ and detecting this with the string macro technique in <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16314" class="postlink">this thread</a>, to determine whether to use z: or a:.</div><br />I don't really understand how typing z_ every time you use a variable is going to be more convenient than typing z: every time you use it? (Especially if you're going to encumber it with complicated macros...)<br /><br /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">That just feels like overkill though to be honest. I think I can live with imperfect assembly given how little performance or code size improvement I seem to be getting with workarounds in place anyhow.</div><br />Well, I'd tend to think of the uses without z: or a: prefix as an &quot;assembler's choice&quot; option, i.e. I don't really <em>care</em>, and might want to move variables around later anyway. That's generally my default position, because <em>most</em> ZP use isn't mission critical.<br /><br />In general, though, I end up looking directly at the generated code often enough when debugging, so I'm usually checking up on the assembler <em>enough</em> to know where it's succeeding or failing at stuff like this. That's enough to inform me of various do's and don't for keeping the output like I expect it to be.<br /><br />...and when I'm looking at some really performance critical code, I look at the output closely. Focused attention where it's needed.<br /><br /><br />I never knew about this nested scopes problem because I've only ever used .scope or .proc but never wanted to put a .proc inside a .scope. TBH I think the benefits of .proc are somewhat marginal anyway, and .scope I mostly used when I was dealing with .include of lots of files into one big assemble, but normally these days I encapsulate things by assembling indvidual files instead.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 3:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent"><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">One thing I'm considering is simply prefixing or suffixing ALL zp symbols throughout my entire game with z_ and detecting this with the string macro technique in <a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16314" class="postlink">this thread</a>, to determine whether to use z: or a:.</div><br />I don't really understand how typing z_ every time you use a variable is going to be more convenient than typing z: every time you use it? (Especially if you're going to encumber it with complicated macros...)<br />[</div><br /><br />I attempted to pass in z: to my macros but this resulted in errors...not sure why yet. If I can resolve those then my proposed hack with z_ would be unnecessary.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sun Aug 06, 2017 3:23 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">rainwarrior wrote:</div><div class="quotecontent">Ah, I think the &quot;rule&quot; it's applying is that it will only search for existing symbols one level higher.</div><br />I tried to debug this a little bit, and I think that may not be the case.<br /><br />It seems like the reference to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">var0</tt> in the scope <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">first</tt> creates a symbol with flag <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SF_REFERENCED</tt> (in that scope), however that symbol doesn't have an address size associated to it. So it finds the symbol (reference), but later notices it doesn't have an address size and so uses the default (abs).<br /><br />As a quick hack I tried to make it ignore SF_REFERENCED symbols (in addition to SF_UNUSED that's there already), and it seems to do the &quot;right thing&quot;, but I'm not familiar enough with the code to know whether this change might have some adverse effects.<br /><br />The relevant code:<br /><!-- m --><a class="postlink" href="https://github.com/cc65/cc65/blob/master/src/ca65/studyexpr.c#L580">https://github.com/cc65/cc65/blob/maste ... xpr.c#L580</a><!-- m --> This calls SymFindAny<br /><!-- m --><a class="postlink" href="https://github.com/cc65/cc65/blob/master/src/ca65/symtab.c#L428">https://github.com/cc65/cc65/blob/maste ... tab.c#L428</a><!-- m --> SymFindAny does search recursively.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sun Aug 06, 2017 3:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CA65: zp -&gt; abs when using nested .procs</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">GradualGames wrote:</div><div class="quotecontent">I was experimenting with the a: and z: prefixes today, in combination with the .addrsize function. However I get &quot;address size unknown&quot; warnings. And, with my macro system I might be passing in zp vars or ram vars, it's not guaranteed to be zp.</div><br />In your macros, try <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.assert arg &lt; $0100, error, &quot;address must be direct page&quot;</tt> to ensure that the address is suitable and then use <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">&lt;arg</tt> to short-circuit range checking.<br /><br /><br />EDIT: Removed a misguided reply to rainwarrior based on reading his comment too fast

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>