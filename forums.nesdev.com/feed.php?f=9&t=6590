<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=9&amp;t=6590" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2010-08-16T02:07:16-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=9&amp;t=6590</id>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-08-16T02:07:16-07:00</updated>
<published>2010-08-16T02:07:16-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66085#p66085</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66085#p66085"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66085#p66085"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If so, then you're probably brand new to cryptography.<br /></div><br />I am indeed.<br />What I figured is that if I just scramble and XOR the bits like I suggested, if only one bit is changed in the memory, only one bit will change in the password, and this can be easily "attacked". For this reason your complex method sounds better.<br /><br />Anyway, all it takes is to do any reversible opperation on the bits. This include :<br />- Changing bits order (shifting left and right with the bits that goes to the left fall on the right and vice-versa goes into this cathegory). Reverse operation : Change the bits so they are like they were before (or shift in the opposite direction)<br />- Add a constant to the word or a part of it (reverse opperation : add the constant's two's complement, relying on overflow/underflow of course)<br />- XOR with a constant (reverse operation of itself)<br /><br />Maybe (likely) there are other reversible opperations I missed but in any cases after a decently long chain of the opperations I listed, it should be enough crypted so that it takes some effort to reverse enginner (and after all this is very fun stuff ! Letting no chance to the reverse engineer is not fair).<br /><br />To have a selectable "ultimate password" that have a meaning in an human language such as english you should add a final XOR at the end of the chain of operations so that it gets you the desired password. Or do it the lazy way and hard-code it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Mon Aug 16, 2010 2:07 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[TmEE]]></name></author>
<updated>2010-08-16T02:05:35-07:00</updated>
<published>2010-08-16T02:05:35-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66084#p66084</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66084#p66084"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66084#p66084"><![CDATA[
Regarding saves, one could use a 5V flash chip and just divide it into small blocks and successively fill them, once all are filled you erase the chip and start over. You'd be using the last saved block every time when loading... this helps with extending the life of the flash, plus you got backup saves ^^<br />You can program individual bytes on a typical NOR flash, but erase is in blocks or whole chip at once. You can program ones to zero but not the other way.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3483">TmEE</a> — Mon Aug 16, 2010 2:05 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-08-15T13:51:46-07:00</updated>
<published>2010-08-15T13:51:46-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66062#p66062</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66062#p66062"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66062#p66062"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br />Sorry to double-post, but I just don't understand a single bit of the wikipedia page you linked.<br /></div><br />Did you understand not one bit of any of the three Wikipedia pages? If so, then you're probably brand new to cryptography. Does the <a href="http://en.wikipedia.org/wiki/Block_cipher" class="postlink">Block cipher</a> article help any? Yes, the French version of this article still appears to be what English Wikipedia calls a "stub", as is the article about TEA itself, but Or does <a href="http://fr.wikipedia.org/wiki/XTEA" class="postlink">this French article about a TEA variant</a> and <a href="http://en.wikipedia.org/wiki/XTEA" class="postlink">its English counterpart</a> appear more complete.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Aug 15, 2010 1:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-08-15T10:02:13-07:00</updated>
<published>2010-08-15T10:02:13-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66047#p66047</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66047#p66047"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66047#p66047"><![CDATA[
Sorry to double-post, but I just don't understand a single bit of the wikipedia page you linked. The french version is completely lacking so it's not of any help either.<br /><br />Also I managed to enter a valid password by luck. It's : 11289LNK<br />I had to do this for some time before it happened, but it happened.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Aug 15, 2010 10:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-08-15T06:52:11-07:00</updated>
<published>2010-08-15T06:52:11-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66038#p66038</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66038#p66038"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66038#p66038"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />There are 32 bits; 8 of them are for validation.<br /></div><br />I guess you mean 32 bit + 8 for validation (what I said before was wrong too anyway). So there is 32 actual bits, or 4 bytes. My formula gives : 8/5 * (4 + 1) = 8 chars.<br /><br />In theory you could make any very complex RPG use passwords, but all it comes to the length of it. For example an RPG which would require 2kb to save would make a 3'277 letter password, even worse than those Golden Sun passwords.<br /><br />Thank you for the link. Well it looks like your system works very well I tried to input random stuff and I never hapened to find any valid password. If I understand well, 1/256 of possible passwords are valid (those who gives that 0x2A byte at the end after being decoded). I guess that's a good balance between increasing the password length and increasing the chances of a user making up a valid password by luck.<br />You'd also want to make sure no valid password is made of only one character repeated or something close to it (remember that Kid Icarus password : uuuuuuuuu8 ??).<br />It looks like none of single-letter password is valid in your demo, but I wonder if a single letter + a different letter exists (there is far too many possibilities for me to try all of them - so even if one exists it's not an issue).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Yes, it finishes in one frame.<br /></div><br />Not that this really matters (as long as your sound engine is in a separate NMI thread), it's not like any game were generating passwords every frame. However, if the encryption algorithm is so complex it needs extra RAM, you might as well attach a battery to it / set the battery bit in iNES header.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Aug 15, 2010 6:52 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-08-15T05:59:21-07:00</updated>
<published>2010-08-15T05:59:21-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66035#p66035</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66035#p66035"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66035#p66035"><![CDATA[
<div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">I just finished a <a href="http://pineight.com/nes/#password_save" class="postlink">demo of password generation, entry, and validation</a>.<br />Your method looks similar to what I'd have done if I were to code a password system.<br /></div><br />May I ask how you encrypt the bits ? It's not clear in the doccumentation.</div><br />Before I implemented it in assembly language, I prototyped it in C so that I could make sure my logic was correct. This is tools/pw.c.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It says it's inspired by TEA, but where can I find info about that ?<br /></div><br /><!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm">http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm</a><!-- m --><br /><br />Like TEA, this cipher derives its <a href="http://en.wikipedia.org/wiki/Confusion_and_diffusion" class="postlink">diffusion</a> from shifting two other bytes left and right and derives its nonlinearity from mixing xor and add operations.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />If I were to do that I'll scrable the bits in a random order and EOR them with some constant to make it impossible to "guess" their order originally. Is it what you're doing ?<br /></div><br />Sort of. Most modern ciphers use a <a href="http://en.wikipedia.org/wiki/Feistel_network" class="postlink">Feistel network</a> so that every bit can affect every other bit in hard-to-predict ways. Yes, it finishes in one frame.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So I guess the minimal lenght of a password of a 32 caracter set is (8/5)*(#of bytes + 1)<br />Your case is for a # of bytes of 7 (since there is one validation byte).<br /></div><br />There are 32 bits; 8 of them are for validation. Using more than one character defeats "I'll try a random cuss word with every single possible character after it". It has only 1/8 chance of working.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Aug 15, 2010 5:59 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bregalad]]></name></author>
<updated>2010-08-15T03:02:45-07:00</updated>
<published>2010-08-15T03:02:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66027#p66027</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66027#p66027"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66027#p66027"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />I just finished a <a href="http://pineight.com/nes/#password_save" class="postlink">demo of password generation, entry, and validation</a>.<br />Your method looks similar to what I'd have done if I were to code a password system.<br /></div><br />May I ask how you encrypt the bits ? It's not clear in the doccumentation. It says it's inspired by TEA, but where can I find info about that ?<br /><br />If I were to do that I'll scrable the bits in a random order and EOR them with some constant to make it impossible to "guess" their order originally. Is it what you're doing ?<br /><br />So I guess the minimal lenght of a password of a 32 caracter set is (8/5)*(#of bytes + 1)<br />Your case is for a # of bytes of 7 (since there is one validation byte).<br /><br />Also I wonder if it's possible to make the validation byte so that the "best" possible password has a meaning in english (or whatever language), but without "hard-coding" it. I've heard DQ1 and/or 2 does something like that in japanese, but because they're in japanese it's hard to verify.<br /><br />Finally, I think another system should be good, and that doesn't require the character set to be exactly 32 chars : You make a big number from your game variables (bit-scrambled of course) and "convert" this number into base 26 (for example, assuming you use the 26 latin letters).<br />To decode the password, convert it back to base 2 and de-scramble the bits, with of course some validation bits that should remain constant.<br />The base conversion itself acts like encription, so I guess it should be hard to "guess" passwords.<br />It's however more complicated to compute the # of symbols per bits.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=38">Bregalad</a> — Sun Aug 15, 2010 3:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-08-14T21:08:04-07:00</updated>
<published>2010-08-14T21:08:04-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66020#p66020</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66020#p66020"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=66020#p66020"><![CDATA[
Triple post c-c-combo!<br /><br />It all fits in the CPLD, using 36 macrocells and 34 I/Os.  I'll see about making a PowerPak version of it (I'm still waiting on the Xilinx ise 9.1 download which is 2.5GB).<br /><br />So that fills up the chip.  Reset is in there, it resets the PRG banking latches only, but I guess with the added diode/cap/resistor circuit it would reset the banking even if the reset button is hit.  Some pirate multi-carts use the same circuit.  I think it might not be needed for power-on, because in the design software you apparently can specify a start-up state for all of the registers.  So hopefully this pin and extra circuit isn't even needed.<br /><br />The "superbank" bit is in there, so it can address 512kB.  That's perfect for 32-pin memories.<br /><br />I2C support is in, both the address and data line are bidirectional, latched I/Os for the NES to control.<br /><br />I looked around at flash memories available, and the SST39SF family seems to be nice and very cheap.  It is byte-programmable and uses 4kB-sized erase sectors, so I think this makes the I2C / EPROM combination a lot less appealing.  It claims 10k erase cycles minimum, but that could be extended further with some wear-leveling.<br /><br />If I took I2C out of the design, that would free up a couple pins.  Perhaps I could even make the PRG bankswitching 5-bits for both slots instead of 4 (so the superbank bit would no longer be needed).<br /><br /><br />edit - For the SST chip I noticed the flash write endurance is 100k in another datasheet.  I think maybe the 512kB sized one is 10k.  The price difference between the sizes is negligible.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Sat Aug 14, 2010 9:08 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-08-10T15:13:22-07:00</updated>
<published>2010-08-10T15:13:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65815#p65815</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65815#p65815"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65815#p65815"><![CDATA[
Double posting, but the story continues..<br /><br />CPLD start-up should be safe, due to the NES CPU reset having a delay.  But since reset is done by the lockout chip and by charging a capacitor, how different is a toploader and famicom?  I don't know.  But definitely they should have delays built in, as I realize now it would be stupid anyways if the CPU started as soon as possible (possibly before the memory is ready, etc).<br /><br />I've got the reset detector figured out, it's as simple as using a capacitor charged by the M2 clock to release it from reset mode.  Though I'm getting kind of stingy with the I/Os at this point (I think the reset could share an I/O with part of the i2c if it has to, as I don't think one wouldn't ever need both at the same time).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Tue Aug 10, 2010 3:13 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-08-09T18:59:32-07:00</updated>
<published>2010-08-09T18:59:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65772#p65772</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65772#p65772"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65772#p65772"><![CDATA[
Actually I'm still kinda concerned about the power-on state of the CPLD.  It has to copy the config out of EEPROM into SRAM, but it gets an early start by doing this while the VCC voltage is still rising.  But I also have to regulate 3V to give the CPLD, which will add some kind of delay (not sure what).<br /><br />So I'm thinking either:<br />a) it will be fine and start up in a good state<br />b) I could tri-state the latch outputs and add pull-up resistors<br />c) something else?<br /><br />I'm really not sure what will happen at startup, if the NES can possibly come alive first, or what.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Aug 09, 2010 6:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-08-09T18:41:12-07:00</updated>
<published>2010-08-09T18:41:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65770#p65770</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65770#p65770"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65770#p65770"><![CDATA[
Thanks for starting on this, Memblers.<br /><br /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />I'm also wondering if it's worth using the on-board RAM for nametables.<br /></div><br />MMC1 style mirroring needs 2 bits of state, which means about 2 macrocells. A 4-screen mode fixed to the last 4 KiB of CHR RAM would take one more bit. Independent switching might exceed 36 macrocells.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />It definitely needs a bit more size with the PRG-ROM bankswitching, so the 'super-bank' idea sounds effective.<br /></div><br />But we'd still have to add some sort of reset detector to make it always start in one or the other super-bank, so that we don't power on or reset into a freshly erased sector of a 29F040 chip. Is this there, or are you relying on a 16-byte reset stub in all banks?<br /><br />Further steps: <ol style="list-style-type: decimal"><li>Test it </li><li>Make I2C </li><li>Make a demo of saving on both I2C and flash save types </li><li>Port it to PowerPak's FPGA </li><li>Get it working in at least one PC-based emulator </li></ol><br />If you get this working, I'm willing to give you some repro business by developing a game for it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Mon Aug 09, 2010 6:41 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-08-09T18:24:24-07:00</updated>
<published>2010-08-09T18:24:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65768#p65768</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65768#p65768"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65768#p65768"><![CDATA[
The description helped me get started on it, thanks.<br /><br />So far it has pretty much been simple to implement.  This is my first practical verilog project, so most of the effort was learning the language (conclusion - extremely C-like in syntax, not bad at all).<br /><br />So far it's using 30 macrocells (out of 36 in this smallest CPLD).  It's not tested at all, but it does compile and synthesize.<br /><br />What I've come up with so far is:<br />-PRG $8000 and $C000 are banked independently (so it supersedes any 16kb and 32kB modes).  256kB max though.<br />-CHR-RAM Is banked, 2 banks again, at $0800-$0FFF and $1800-$1FFF, the rest is fixed.<br />-registers at $5000-$5007<br />-WRAM is banked<br /><br />Also PRG /CE (to the ROM) isn't needed, but PRG /RD is.  Since the NES provides no active-low read signal, which is no problem for SRAM, but I don't know if I trust using /CE as /RD with any random type of flashrom.  Might be OK on specific ones.  I suppose that could be a minor problem for the MMC1 flash cart idea in the other thread.  On Squeedo I just invert the PRG R/W line using a NAND gate, making it low on read to get this signal.<br /><br />i2c remains to be added.  Should be easy.<br /><br />I'm also wondering if it's worth using the on-board RAM for nametables.  Allowing nametable banking, and 4-screen mode.  I'll look into that last (and hopefully have enough I/Os to make it optional, probably not though).<br /><br />It definitely needs a bit more size with the PRG-ROM bankswitching, so the 'super-bank' idea sounds effective.  I think I could also double the size with no more I/Os by doing a trick where $8000 could only use even banks, and $C000 can only use odd banks.  It makes sense to me, it doubles the maximum size but also forces you to use both banks evenly (so it might take a bit of duplicate code).<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Mon Aug 09, 2010 6:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2010-08-06T18:15:12-07:00</updated>
<published>2010-08-06T18:15:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65606#p65606</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65606#p65606"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65606#p65606"><![CDATA[
A lot of these I2C parts are rated for 1.0 MHz. The NES is up to 1.8, but it'd probably actually operate it at 1/6 of that (ROL/STA loop). The CPLD could handle clocking the interface, but then someone who knows Verilog and soldering would need to handle that.<br /><br />I understand CPLDs are sized by how many bits of state they store and how many I/O pins they have. How much effort would it take to write a CPLD mapper in Verilog that does this:<br /><ul><li>PRG switching equivalent to MMC1 SUROM (4 bits for PRG page number, 1 bit for 256 KiB super-bank number, 2 bits for PRG bank mode) </li><li>One switchable CHR bank at $1C00, out of 32, so that 1 KB of a 62256 CHR RAM page can be bankswitched (5 bits) </li><li>Mirroring like MMC1 (2 bits) </li><li>A latch used for I2C communication (3 bits) </li><li>Reset detection (? bits) </li><li>All registers in $5000-$500F space so as not to overlap if used in write-back-to-29F040 mode </li></ul>And about 34 I/O pins:<br /><ul><li>NES side: PRG A14-A12, A3-A0, D3-D0, /CE, R/W, M2; CHR A13-A10; CIRAM A10 (21 pins) </li><li>Internal side: PRG ROM A18-A14, /CE; WRAM /CE; CHR RAM A14-A11 out (A10 shared with CIRAM); I2C SDA, SCL (13 pins) </li></ul><br />For 7 more pins and 2 more bits, you could add an IRQ on tile $FF access, but let's not get ahead of ourselves because the goal of this topic is to explore a new mapper allowing easy ports from SNROM and SUROM (MMC1 + PRG RAM + CHR RAM) but supporting flash-writeback and I2C save types.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Fri Aug 06, 2010 6:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Memblers]]></name></author>
<updated>2010-08-06T15:36:10-07:00</updated>
<published>2010-08-06T15:36:10-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65596#p65596</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65596#p65596"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65596#p65596"><![CDATA[
I think those prices were for 100 quantity, I could have mixed them up.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />A SPI interface should only require one latch -- or could be attached to the joypad port. (Whether that's desirable is another question.)<br /></div><br /><br />I haven't looked at the speeds yet, but the latched clock and data might be needed if the NES is faster than the chip is rated for.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=10">Memblers</a> — Fri Aug 06, 2010 3:36 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[lidnariq]]></name></author>
<updated>2010-08-06T14:44:17-07:00</updated>
<published>2010-08-06T14:44:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65590#p65590</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65590#p65590"/>
<title type="html"><![CDATA[Alternatives to battery save]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=6590&amp;p=65590#p65590"><![CDATA[
<div class="quotetitle">Memblers wrote:</div><div class="quotecontent"><br />$0.20 256 bytes<br />$0.40 8kB<br />$3.14 128kB (largest available)<br /></div><br /><br />What quantities are you talking about, here? Microchip themselves gives quotes of 17c/29c/$2.40 for the those parts in quantities of 1k.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />how to interface an I2C EEPROM to NES (not too bad, but the cart requires 2 latched bits in, and 1 latched bit out to the NES.<br /></div><br /><br />A SPI interface should only require one latch -- or could be attached to the joypad port. (Whether that's desirable is another question.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3512">lidnariq</a> — Fri Aug 06, 2010 2:44 pm</p><hr />
]]></content>
</entry>
</feed>