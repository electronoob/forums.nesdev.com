<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MMC1 simulated in Logisim</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MMC1 simulated in Logisim</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8277">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8277</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 08, 2011 11:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">You know your five points sounds complex for a non-english speaker for me. Why can't you keep things simple ?</div><br />I was trying to write them in a way that one can easily translate into an HDL, and I used "must" to mean "MUST" as defined in <a href="http://www.ietf.org/rfc/rfc2119.txt" class="postlink">RFC 2119</a>.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't think it matters at all if, when you do a reset write with D7 set, if the shift register is affected or not.</div><br />At the very least, after such a reset write, the shift register after a reset must be ready to take a first write, not a second, third, fourth, or fifth write.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Affecting it in any way should have absolutely no effect, as all the bits will be shifted out before being used</div><br />Doing it the way I said allows the shift register and the 0-&gt;5 counter to be implicit. This saves two bits of internal register vs. a separate 4-bit shift register and 0-&gt;5 counter. If you want, I can draw you a picture of how this method works.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">However, what DOES matter is that none of the 4 MMC1 regs are updated on a "reset" write</div>
<br />Not even the PRG bank mode bits of $8000? I'm under the impression that resetting the MMC1 forces the last bank into $C000-$FFFF. But you're right that a reset never copies five bits from the shift register into one of the four registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Nov 08, 2011 11:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh I got it, you sugessted yet another method of simulating the register that would remove the conter completely at the price of a 5-bit registers for holding one "enable" bit (as in a Johnson counter) and 4 data bits, while the 5th bit would come directly from D0.
<br />This might actually be pretty simple to implement in hardware even using discrete chips, you'd just probably need a 8-bit SR and use only 5 of it's bits, as only the 7496 seems to be a 5-bit SR and it haven't been re-released in HC form so this chip is old, rare, expensive, and energy-eating.
<br />
<br />But again I'm afraid the problem of a "natural reset" after a 5th write vs a "forced reset" after a write with D7 set would be a bit tricky to implement
<br />
<br />Reseting R0 to some value is as simple as trigerring its "Parallel load" mode when you detect a write with D7 set with a constant, I'll definitely add this to the next version of my logisim circuit.
<br />This should also happen on power on by the way, at least for MMC1A and higher I think.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 08, 2011 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">5-bit registers for holding one "enable" bit (as in a Johnson counter)</div><br />"Johnson counter": That's the word I was looking for. It's closer to an Overbeck counter according to Wikipedia, but now I know what to call the carry-as-counter technique I use in my controller reading code and my 16-bit binary to decimal conversion code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">But again I'm afraid the problem of a "natural reset" after a 5th write vs a "forced reset" after a write with D7 set would be a bit tricky to implement</div><br />Parallel load 10000 enabled by (CPU D7 OR shift register D0) perhaps?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This should also happen on power on by the way, at least for MMC1A and higher I think.</div>
<br />But how does the mapper detect power on?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>socram8888</b> [ Tue Nov 08, 2011 12:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Maybe a power-on delay? With it the mapper can then detect if it has been powered up or it has been reseted by comparing the power-on delay.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Tue Nov 08, 2011 6:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ack! too much to read!
<br />
<br />In my example after a reset it does take *5* clocks.
<br />
<br />reset clock -&gt; counter is 0
<br />clock #1 -&gt; counter is 1
<br />clock #2 -&gt; counter is 2
<br />clock #3 -&gt; counter is 3
<br />clock #4 -&gt; counter is 4 (now data register is selected by the counter's bit 3)
<br />clock #5 -&gt; data register is loaded and counter is reset simultaneously

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Wed Nov 09, 2011 2:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Kyusaku, thanks for the precision, apparently the trick is to use a synchronous reset instead of asynchronous.
<br />I uploaded my circuit to reflect those changes : <a href="http://dl.dropbox.com/u/23465629/logisim/MMC1_logism.circ" class="postlink">http://dl.dropbox.com/u/23465629/logisim/MMC1_logism.circ</a>
<br />
<br />For some reason I had the stability problem where the MMC1 regs loaded the data after the shift register being shifted, so I had to block the shifts during the 5th write.
<br />
<br />What makes you so sure your circuit (using 74 series chips) will be stable on this aspect ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Nov 10, 2011 2:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not sure it will work well, there is a race condition between the decoder disable speed and the shift register propagation + data register setup time. The decoder should win this condition because disable is fast, but it's possible it won't. The point is that this logic is correct, and design can definitely be made stable by making all registers synchronous to /ROMSEL. To do this the data registers need to be "enable" type maser-slave flip-flops with a MUX selecting D or Q. Perhaps Nintendo took this route, but it uses a lot of gates / bit.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Nov 10, 2011 10:39 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The point is that this logic is correct, and design can definitely be made stable by making all registers synchronous to /ROMSEL. To do this the data registers need to be "enable" type maser-slave flip-flops with a MUX selecting D or Q. Perhaps Nintendo took this route, but it uses a lot of gates / bit.</div>
<br />I'm not sure what your are talking about, but what about just blocking the shift register from shifting when the registers are about to load, like I do in my logisim circuit ? I think it should be as siple as OR-ing either /ROMSEL or R/W with Q4 before clocking / loading the shift register. The only con is that it requires an additional OR gate, but stability is guaranteed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Thu Nov 10, 2011 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK I tried the program and looked at the design.
<br />
<br />You're right, you can gate the shift register with Q2, but if everything is synchronous to /ROMSEL it shouldn't be necessary, that's all I meant. And since you're using flip-flops with enable inputs already there's no reason for this section of the design to not be synchronous.
<br />
<br />Right now both "good" high-gate components like DFFE are being used along side "bad" low-gate practices of clock gating, so it's like a confusing mix of paradigms. Clock gating doesn't matter much here because the timing isn't very strict on a 6502 since it doesn't drive the bus during Phi1, but in some other system the data registered will be invalid.
<br />
<br />Something I noticed though is that you're asynchronously clocking the data registers using the counter's Q2. This won't work because they will be loaded on the 4th clock, not the 5th. In my diagram the decoder is enabled by Q4, /ROMSEL and R//W so the registers will be asynchronously strobed during Phi2 of the 5th clock. As soon as /ROMSEL is deasserted (Phi1) the registers are loaded so there is minimal delay. This is the standard practice when asychronously clocking registers, but as you noticed it could have problems without precautions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Fri Nov 11, 2011 5:31 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />OK so I guess to fix this, I have to add some logic that clocks the registers only when Q2 is high AND Romsel and R/W are low, so that I'll be able to get rid of the enable on the shift register
<br />I'll do that as soon as I'll be back home.
<br />
<br />EDIT : I've fixed things to do it like Kyusaku's circuit, using enable pin on the adress decoder, and apparently it works well. Also I made it now that Reg0 is OR-ed with 0xC when a shift register reset is executed. (it was quite an annoying thing to do in fact). I'll now be working on a MMC2.
<br />
<br />EDIT 2 :
<br />Now here is the <a href="http://dl.dropbox.com/u/23465629/logisim/MMC2_logisim.circ" class="postlink">MMC2</a> and <a href="http://dl.dropbox.com/u/23465629/logisim/MMC4_logisim.circ" class="postlink">MMC4</a>.
<br />(The only difference being them both are SRAM support and PRG banking.)
<br />You are supposed to write the registers by setting R/W to zero and toggling !ROMSEL as usual, but this time the registers are directly loaded in parallel. The CPU adress will determine which register is written to.
<br />
<br />On the bottom reside the infamous CHR Latches. On this mapper, only two of the 4 CHR registers are used at a time, CA12 decides it as usual but there is also one latch for each pattern table (left / right) deciding which CHR register (A or B) is used.
<br />
<br />You set a latch by making the PPU adress bus to $xFD or $xFE, and toggling CHR !RD. Two (negative) read pulses are necesarly, to simulate the PPU fetching two pattern table bitplanes. This is why there is two latches in series, so that the actual switching only occurs on the next read after the first switch.
<br />
<br />The only thing I find weird is that CA0-CA3 and M2 are physically connected to the MMC2 but I didn't find any use for those signals.
<br />
<br />EDIT 3 : I suddently remembered posts about inner MMC2 shemetics being discussed here loooong ago. I'll compare my shematics with Nintendo's and look for any differences.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Nov 15, 2011 3:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here comes the <a href="http://dl.dropbox.com/u/23465629/logisim/MMC3_logisim.circ" class="postlink">MMC3</a>.
<br />
<br />I haven't hard stressed the simulation yet, there might be a few bugs, especially arround the scanline counter, but it gets the job done for now.
<br />
<br />You're supposed to write the the registers as usual by toggling /ROMSEL, but this time there is a lot of different latches for PRG and CHR banks, this is a bit spagetthi and I'm sorry about that.
<br />
<br />(I purposely ignored the circuit which ignores quick A12 edges during sprites fretches to keep things simple).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Tue Nov 15, 2011 6:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice work!
<br />
<br />I'm looking forward to using this as a reference to write these up in Verilog and test everything on the actual hardware.  I've got a CPLD large enough for MMC1 right now and will have something big enough for the MMC3 once I get the NESDEV1 prototype together early next year.  
<br />
<br />The real issue for me is time, I have high hopes of emulating the MMC1 during break next month but we'll see.
<br />
<br />EDIT: now all that's left is the MMC5... <img src="./images/smilies/icon_wink.gif" alt=";)" title="Wink" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Feb 27, 2012 1:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well I've been playing around with this lately.  Thanks again for your designs Bregalad.  I've got what I think is a pretty solid design right now.  It's a bit different than yours in regard to the front end.  Instead of gating and generating clock signals (which only results in troubles in my experience) I'm clocking everything with M2 and generating enables signals for all the registers with a state machine.  I know it's more logic and everything but it's the only clean way to do it in my mind.  And what makes you guys think that Nintendo was trying to reduce the number of gates and logic?  I doubt it would have reduced die size by much which is all the really would have cared about.
<br />
<br />Checking for consecutive writes is also easy to do when your state machine is driven by the CPU's clock.  Drawing most of the waveforms out and everything I'm curious if anyone has found a reason Nintendo's design ignores the second write.  There are only two possibilities as I see it either A) There was a minimization the made that had this side effect which they didn't care about.  Or B) they intentionally put it in there as a means of security or anti pirating.  Hoping that pirate designs wouldn't be able to easily realize the logic was there and then ROMs  could use it to help minimize pirating of their games.  To some degree that is the only thing that really makes sense to me.  Why else would the few games that double write do it?  They had to know the hardware would respond like it does.  Chances are Nintendo would have told them that it would ignore the second write unless they found out accidentally.  Unless they were somehow oblivious to the consecutive writes which doesn't make much sense, you'd think they would know the 6502 pretty well if they were developing on it.
<br />
<br />I don't see the minimization that supports A) after drawing out all the signals.  The only thing I can see is that PRG R/W never goes high between the two writes (I think, hard to tell on my analog oscope) In order to sense that or check CPU clock cycles it seems to me that they would have had to add to check for the double write.  Which makes me think Nintendo put it in there on purpose supporting B).  Not really surprising when you consider all the effort they put into the CIC.  What do you guys think? 
<br />
<br />Anyways I've got it coded up in verilog but I need to write up a testbench to debug and validate my design so I can test it out on the NESDEV1.  I'll post progress as I make it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Feb 27, 2012 10:19 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm pretty sure it's A).
<br />
<br />I mean, I don't see how ignoring the second consecutive write would prevent anyone to pirate MMC1 games.
<br />
<br />Using the inc $xxxx instruction on a ROM adress that contains a value &gt;$80 seems to be the standard way to reset the MMC1, almost all games I've checked do it this way.
<br />
<br />I think the face some games that do the tricky double writes just did a inc instruction on a place that contained a $ff value was pure randomness, and that since it worked they kept it this way and didn't even realize a $00 was written to the MMC1 but ignored.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Feb 27, 2012 1:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">I'm pretty sure it's A).<br /></div>
<br />
<br />But how did they implement the logic to ignore the second write?  For A) to be true there would presumably have to be less or the same amount of logic to have it ignore the second write.  But from what I see, I'm unable to find a solution that will ignore the second write without adding more logic.  And if they added more logic to ignore the second write then they would have had to of done it on purpose.  Nintendo had to of at least known about it if INC with an initial value of $FF is used so commonly to reset the MMC1.  They would have to have known that the first write would reset it and the second would be ignored.
<br />
<br />I'm sure there is a possible logic solution that could support A) I just don't see it, so it leaves me to doubt that it wasn't intentional to ignore the second write.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>