<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - CC65, array of structures supposedly bad?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">CC65, array of structures supposedly bad?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17465">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=17465</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Fri Jun 22, 2018 8:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I remember reading somewhere that using an array of structures is not a good idea but don't remember why it was such a case.  Is it really that bad?<br /><br />For example, let say that I want to keep in a structure all the information about a specific animation. I could be something like this (code may contain mistakes since it is written in the post without testing):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">typedef struct {<br />&nbsp; &nbsp;const unsigned char someAttribute1;&nbsp; &nbsp; &nbsp;// example of extra data<br />&nbsp; &nbsp;const unsgined char someAttribute2; <br />&nbsp; &nbsp;const unsigned char frameCount&#91;&#93;;&nbsp; &nbsp; &nbsp; &nbsp; // list for how long are each frame, 0 is end of list <br />&nbsp; &nbsp;const unsigned char* const frameList&#91;&#93;; // list of frames<br />} animInfo_t; <br /><br />...<br /><br />animInfo_t heroAnimList&#91;&#93; = { .. some list here ... };<br /></div><br />This way I could retrieve a pointer to this group of information like this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if ( state == STANDING) {<br />&nbsp; &nbsp; hero.anim = &amp;heroAnimList&#91;STANDING&#93;;<br />... // will continue next &quot;code&quot; tag<br /></div><br />Then once the state change, I would retrieve from that struct the pointers for the animList, value from frameCount at proper index and save them to avoid accessing that structure many time:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp;// retrieve first frame<br />&nbsp; &nbsp; &nbsp;hero.frame.maxCount = hero.anim-&gt;frameCount&#91;0&#93;;<br />&nbsp; &nbsp; &nbsp;hero.frame.current = hero.anim-&gt;frameList&#91;0&#93;;<br />}<br /></div><br />So I do not access the array of structure on every frame change but just when the state change. And I keep a reference to the current frame to avoid accessing the other list in anim on every frame to reduce access to arrays of arrays.<br /><br />I'm aware that right now that structure is maybe complicated. Since I'm experimenting on how I can write code (and enjoying it) the final result may be quite different based on the hurdle I will encounter when using it. Still, any new nes code I write is time I was able to spent on it and learn it so I'm more than happy with that. This is how I was able to make my makeFile that automatically takes any files in any folder in your target without the need to define them one by one and automatically set the include path on all the files so you don't need to write the relative path on every include, which is quite useful. I learned a lot from it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Fri Jun 22, 2018 8:28 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The parallel alternative to an array of structures is the &quot;structure of arrays&quot; paradigm.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">struct<br />{<br />&nbsp; &nbsp;char a&#91;50&#93;;<br />&nbsp; &nbsp;char b&#91;50&#93;;<br />} object_t;<br /><br />object_t objects;<br /><br />// accessing:<br />return objects.a&#91;5&#93;;</div><br />Accessing syntax is almost the same, you've just moved the braces a little bit.<br /><br />Why is array of structures bad? To resolve an index to an actual pointer, you need to multiply that index by the size of the structure. On x86 this isn't that bad, there's a lot of instruction modifiers that do this very easily, but on 6502 not so much. (There are a lot of modern cases where this applies too, e.g. cache coherence.)<br /><br />In cc65... well, arrays in general do not perform that well. Part of the problem is that it doesn't usually try to use 8-bit indices, which is usually the ideal way to access arrays on 6502. Array of structures just adds one more step in the chain of inefficiencies here.<br /><br />Ideally you would want to break up arrays of 16 bit integers into two stripes of 8 bit arrays, too, but this becomes really inconvenient to implement in C. Macros might help a little with this, but you'd have to do a bit of work to figure out how to make it play nicely with the compiler.<br /><br />Of course, an array of structures often has convenience. Mostly because it's the more prevalent paradigm elsewhere, and maybe feels more &quot;natural&quot; especially with object oriented thinking, or in cases where you do serial access of the data. (Your thought about creating a temporary pointer to the currently indexed structure could help a lot, you'd only do the indexing once.) If you don't have a performance issue with the data, you might not need to optimize your structures anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Jun 23, 2018 3:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As a little simplification, think about this:<br /><br />If you have an array of a struct and you do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">structVar&#91;i&#93;.Data = 5;</div><br />then the compiler needs to do this:<br /><br />1. Get the address of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">structVar</tt>.<br /><br />2. Multiply <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">i * sizeof&#40;MyStruct&#41;</tt>.<br />(Unless the size of the struct is exactly 2, 4, 8, 16, 32 etc., a multiplication is expensive.)<br /><br />3. Add this value to the address.<br /><br />4. Add <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Offset_Data</tt> to this new address value.<br /><br /><br />But if you have a struct with a bunch of arrays and you do this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">structVar.Data&#91;i&#93; = 5;</div><br />then the compiler just needs to do this:<br /><br />1. Get the address of <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">structVar + Offset_Data</tt>.<br />(The offset is known at compile time, so the sum of the addition is calculated at compile time as well, so this is just one value here and takes exactly as much CPU time and ROM space as point 1 from above and is not like point 4.)<br /><br />2. Add <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">i</tt> to this address.<br />(Actually, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">i * sizeof&#40;Data&#41;</tt>, but if <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">Data</tt> is a normal variable like int, long or double, it will be multiplied by 2, 4 or 8 which is just a shift left of 1, 2 or 3 which is cheap and not like a full blown multiplication).<br /><br /><br />As you see, the second version is much shorter and has no expensive multiplication in it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sat Jun 23, 2018 9:55 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@rainwarrior<br /><br />Regarding performance, I think it will depends how many times an animation state would change. If the animation change rarely then the array of structure is just a list which is more structured and as long that you don't do any indexing directly on it (keep a reference in another pointer) then it should reduce the performance hit.<br /><br />If it is too heavy then I will just keep the original idea, which is an array per attribute (animation list, frame count, custom attribute) and based on the state retrieve all values at that index.  This is what I had in mind first but I want to test how far I can structure it.<br /><br />@DRW<br /><br />This is the part that I was concerned about. If you do indexing directly on complex structure that are not of size of a power of 2, it would be an issue and it's not sure the compiler would be able to optimize on that case automatically.<br /><br />I will keep you idea in mind for structuring data (a struct with arrays inside) and now my memory was refreshed on what could be common problem about struct of array.<br /><br />Like mentioned above, I would like to keep a complex structure in a list and when needed, save a pointer about it to avoid indexing on each access. I guess I will need to judge how much convenience vs performance I'm ready to trade based on the needs of each project.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Jun 23, 2018 11:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">as long that you don't do any indexing directly on it (keep a reference in another pointer) then it should reduce the performance hit</div><br />Yes, like you suggested in your OP, if you make a pointer to the indexed structure once when you start using it and then just use that pointer it will mitigate most of the problem.<br /><br />The structure of arrays really shines in assembly, moreso than in C. When you can guarantee the index is only 8-bit, and write code that uses absolute indexed addressing instead of indirection through a pointer, this is the optimal case. It's not very easy to get CC65's C to do this, though, often its array access will end up being through a pointer anyway. (In many cases the compiler will assume indices are 16-bit, unfortunately. Explicitly converting your index to an unsigned char can help.)<br /><br /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">This is the part that I was concerned about. If you do indexing directly on complex structure that are not of size of a power of 2, it would be an issue and it's not sure the compiler would be able to optimize on that case automatically.</div><br />Power of 2 are better, but even if it is a power of 2 it creates a lot of extra work. Like a struct of size 32 will incur 5 16-bit shifts before it can add the index to the pointer. With structure of arrays the index just adds directly.<br /><br /><br />Edit: BTW C compilers are allowed to pad structures, and padding to a power of 2 is a common optimization they are allowed to do. Not sure if CC65 does this, but probably not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Jun 23, 2018 11:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">Like mentioned above, I would like to keep a complex structure in a list and when needed, save a pointer about it to avoid indexing on each access.</div><br />This wouldn't really help you that much because the pointer access itself already has a bunch of overhead every time you use it:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">pMyStruct = &amp;ListOfStructs&#91;i&#93;;<br />...<br />pMyStruct-&gt;Value = Something;<br />...<br />pMyStruct-&gt;OtherValue = SomethingElse;</div><br />Don't think just because you use a pointer, this is now as performant as if you accessed a single struct object directly. Pointers have their own overhead:<br /><br />- Read the value (which is an address) that is stored in the pointer.<br />- Put the offset for &quot;Value&quot; to the Y register.<br />- Use indirect access to (value of pointer) + Y.<br /><br />- Read the value (which is an address) that is stored in the pointer.<br />- Put the offset for &quot;OtherValue&quot; to the Y register.<br />- Use indirect access to (value of pointer) + Y.<br /><br />If I'm not mistaken, this happens for every single access of every variable from that struct. Pointer access basically means dynamically calculating an address every single time you need it.<br /><br />In comparison to a struct of arrays:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MyStruct.Values&#91;i&#93; = Something;<br />...<br />MyStruct.OtherValues&#91;i&#93; = SomethingElse;</div><br />- Put the offset for &quot;Values&quot; to the Y register.<br />- Use direct access to (Address of &quot;Values&quot;) + Y.<br /><br />- Put the offset for &quot;OtherValues&quot; to the Y register.<br />- Use direct access to (Address of OtherValues) + Y.<br /><br />If you cannot access data statically (like in: Player character always has index 0, opponent A always has index 1 etc.), your best bet is to use an array that is as big as the largest amount that the array can have. And then simply access this array directly, with an index.<br />(Whether you put a bunch of arrays into a struct or whether you declare them separately is just coding style.)<br />Every kind of access through a pointer is really the worst version.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Sat Jun 23, 2018 2:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Slightly off topic and ugly, but whenever I need to use a lot of arrays a lot (for example, when handling enemies) I usually begin each loop by copying the current element of each array to a set of equivalent variables in ZP using inline assembly, do all my fiddling using the temporal variables, and end up updating the arrays with the new data using inline assembly too. The gain in space and speed is huge, specially if you are doing lots of stuff with the arrays. It saves literally hundreds of bytes in most cases, as most of my arrays are of 8 bit data indexed by 8 bit indexes.<br /><br />For example, check enems_load and enems_move here <!-- m --><a class="postlink" href="https://github.com/mojontwins/MK1_NES/blob/master/src/dev/engine/enengine.h">https://github.com/mojontwins/MK1_NES/b ... enengine.h</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Sat Jun 23, 2018 2:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's what I'm doing in the moment as well, for variables that are often used, like x and y position etc.<br />But you shouldn't do this for <em>everything</em>. If you only read and write the array entry once or twice per frame, it might not pay off.<br />But in general, yes: Cache your character's variables to temporary global zeropage variables and write them back later. This saves ROM space and CPU time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Sat Jun 23, 2018 3:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do a lot of trial and error and try to find the situations when this is an advantage, of course. It's not an &quot;always do&quot; trick from the hat.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Jun 23, 2018 4:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I imagine that on an ISA that does all indexed addressing in software, such as 8080 or LR35902, copying a struct in and out of RAM is even more likely to pay off than on 6502.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sat Jun 23, 2018 8:47 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@rainwarrior<br /><br />My guess too is that cc65 doesn't support the padding. For now with all the comments in this thread I may try to avoid pushing for array of structs because of the overhead.  <br /><br />@DRW<br /><br />If the C compiler does have to prepare the address on every access then yes it would be an issue. I remember reading something on the cc65 site that based on the order you write your code, it may minimize those kind of issues but I'm not sure if it applied for struct though.<br /><br />I think when in doubt, when like I was not sure for my struct that ended in DATA, the best thing is to look at the resulting .s file and see what is exactly done.<br /><br />@na_th_an<br /><br />I remember in my previous samples that I did put some specific variable in ZP to reduce the impact, especially when retrieving meta-meta tiles for the background but this was when I was doing it purely in assembler.  For C, I will need to check how it works. I guess intensive data processing like for the map data should stay in assembler anyway since there it is just data processing, not real logic like for the entities.<br /><br />@tepples<br /><br />Interesting comment but I think we don't need to worry about those CPU when doing nes programming <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Sat Jun 23, 2018 8:59 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">My guess too is that cc65 doesn't support the padding. For now with all the comments in this thread I may try to avoid pushing for array of structs because of the overhead.</div><br />Well, most compilers have a <strong>#pragma pack</strong> to use when you don't want the compiler to rearrange your structs.<br /><br />I don't think CC65 makes any attempt to pad structs (when memory is more scarce than cycles and there's no alignment issues, there's not much reason to), but you can easily add padding variables of your own to meet a power of 2 if you think it's worth trading the space for. (Or maybe you can even use the padded space for a different array.)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sat Jun 23, 2018 9:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I did a quick check in the doc and cc65 doesn't seems to have such pragma so you would have to do it manually.  I will keep that in mind. Thanks!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Sun Jun 24, 2018 1:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Banshaku wrote:</div><div class="quotecontent">I remember in my previous samples that I did put some specific variable in ZP to reduce the impact, especially when retrieving meta-meta tiles for the background but this was when I was doing it purely in assembler.  For C, I will need to check how it works. I guess intensive data processing like for the map data should stay in assembler anyway since there it is just data processing, not real logic like for the entities.</div><br /><br />You are right. Now that I'm getting more fluent of assembly, I think it's time to move all my background data processing to assembly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Banshaku</b> [ Sun Jun 24, 2018 6:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: CC65, array of structures supposedly bad?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unless you have performance issues I think there is no rush to do so. Your games are already awesome the way they are <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> <br /><br />The more you move data processing on the asm side, the mode you will want to avoid parameter to the function, the more you will have to program with some compromise and it will look less like C. Still, I guess it is something that must be done on a project per project basic.  I'm still trying to visualize how I would you some of the code I wrote 8 years ago without passing parameter from the C side and how much it would be worth it. I guess you need some specific extern from the ZP that will alows to set state that these functions will react to.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>