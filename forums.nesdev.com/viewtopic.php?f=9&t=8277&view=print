<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - MMC1 simulated in Logisim</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">MMC1 simulated in Logisim</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8277">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=8277</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Nov 05, 2011 3:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>MMC1 simulated in Logisim</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just finished a small project which uses the free / open source digital logic simulator <a href="http://ozark.hendrix.edu/~burch/logisim/" class="postlink">Logisim</a> to simulate the MMC1 chip.
<br />The logisim file is uploaded <a href="http://dl.dropbox.com/u/23465629/logisim/MMC1_logism.circ" class="postlink">here</a>.
<br />
<br />For starters, you are supposed shift bits in the 4 registers by toggling the ROMSEL input (when R/W is low, to simulate the 6502 CPU was writing to $8000-$ffff), and then you can try to see how the outputs reacts to different combinations (different adress ranges, etc...)
<br />
<br />It's probably not 100% perfect, but it should do most things like the real chip.
<br />The only part of the chip which is lacking is something that sets all latches when the chip is powered up.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>chykn</b> [ Sun Nov 06, 2011 5:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty slick, thanks for posting.  I'd never heard of Logisim before.  How long did it take to put together the MMC1 layout?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infiniteneslives</b> [ Mon Nov 07, 2011 12:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Nice work!
<br />
<br />I've been meaning to do something like this, I'm surprised no one has yet.  Or at least it hasn't been made available.  Some images of the logic would seem to be a great add to the wiki.
<br />
<br />I'll definitely use this as a starting point for when I'm replicating the MMC1 on a CPLD for the NESDEV1 cart.  I'll be sure to share the results of actual testing on the NES.  If I get around to it I would want to do the same for MMC3.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Nov 07, 2011 6:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The only thing about this circuit is that it doesn't simulate the "ignore 2 consecutive writes" beahavior of the MMC1.
<br />
<br />I belive this is some issue that, on the 5th write, the last bit is shifted in the shift register and the shift register is copied to one of the 4 MMC1 regs simultaneously. It works fine in logisim but in reality it's a race  between the MMC1 regs and the shift register to who updates first. If the shift register updates first then it's all fine but if you're unlucky and the shift register hasn't finished to update when the MMC1 reg is clocked, then it would load a wrong value.
<br />
<br />To fix this I belive there is some logic that adds a 1-clock delay before the MMC1 registers actually gets updated, and that an additional shift register write in this state would not have any effect.
<br />This requires some additional latch that would be 1 whenever the MMC1 regs should be clocked on next M2 clock (instead of simply being clocked when the counter equals '5'), and blocks writes when in '1' state, but also PRG A13 and A14 should be latched for the same reason.
<br />
<br />Or alternatively, all 4 MMC1 regs should have this delay latch, and shift register writes should be blocked if ANY of those 4 latches is set to '1'.
<br />
<br />I'll see if I can implement this in logisim.
<br />
<br />Also this is pure specualtion, and how the chip is actually implemented might be completely otherwise.
<br />Finally I'd say it's sad I can't test this on hardware but oh well. It sucks that the powepak is such a privately and closed source device. <span style="font-size: 59%; line-height: normal">It could almost be a iPowerPak</span>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Nov 07, 2011 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">It sucks that the powepak is such a privately and closed source device. <span style="font-size: 59%; line-height: normal">It could almost be a iPowerPak</span></div>
<br />I guess the "almost" is that if it were really an iPowerPak, the firmware would act like the Atari 7800 firmware: .nes files would have to be either A. signed by bunnyboy or B. signed with a certificate that costs $99 per year to buy from bunnyboy.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Nov 07, 2011 8:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Actually that's not how it works, I thought so too and I couldn't get a working MMC1 for the life of me. Loopy posted his shift reg logic though and he was clever enough to realize that each register's MSB comes directly from D0 (so it's a 4-bit SR).
<br />
<br /><a href="http://img507.imageshack.us/img507/3059/mmc1fixed2.png" class="postlink"><img src="http://img507.imageshack.us/img507/3059/mmc1fixed2.th.png" alt="Image" /></a>
<br />
<br />If you're doing things at the gate level there is some room for improvement and simplification. Probably the real thing uses clock gating and latches.
<br />
<br />
<br />Also the PowerPak isn't entirely closed source since Bunnyboy released an example mapper ages ago. If you tried it wouldn't be hard to make a full schematic of it to understand the boot logic. At that point the only thing missing would be an open firmware.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Nov 07, 2011 12:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well it seems this is pretty correct exept one thing.
<br />The 4-bit shift register on the bottom apparently shifts on all writes, even during the 5th write - so the problem I mentioned in my second post still happens.
<br />
<br />I think there should be a way to block the 4 bits in the shift registers and copy it's content in the actual register on the 5th write without it shifting at the same time. This is only a matter of an additional logic gate though.
<br />
<br />EDIT : I've updated the logisim file so that now it uses only 4 bit shift register, and blocks the shifting every 5th write when the data should be transfered to a true register.
<br />
<br />Also something looks wrong to me in Kyuusaku's circuit : When you wrtie something with D7 set, the counter will reset to 0, which is the same as what happens after a 5th write. In other words the first write is done at the same time as D7 is set, while on a real MMC1 the first write is the next one after a write with D7 set. I had to be very careful with this in my circuit : I load '1' in the counter after the 5th write, and reset the counter to '0' only if a write with D7 set is done.
<br />I couldn't set it to '5' because if this was done data would have been copied to a register which is not what we want !
<br />Therefore the additional '0' state is required, and is accessible only by writing something with D7 set.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Nov 07, 2011 2:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the 5th write the shift register shifts, but the 8/A/C/E data register is updated more or less at the same moment so the final shift won't corrupt the register. Using flip flops with enable instead of clock gating with a decoder will ensure that the data register is updated safely, but the timing isn't that critical and I really doubt a chip designer back then would use so many gates.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Mon Nov 07, 2011 3:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the other side I think it's really unreliable to load a bit in a latch at the same time this bit is potentially changing. This is the kind of stuff which can work very well one day and not work at all another day if you changed a chip or something like that.
<br />In a IC like the MMC1 maybe there is a way to control the circuit more precisely and make sure it behaves as supposed, by placing the transistors carefully on the die, but I'm not even that sure.
<br />
<br />Blocking the shifting on the 5th write is necessarily, but it only takes a single gate to add this functionality so I guess it's not "terribly more logic".

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Nov 07, 2011 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If the data registers are clocked solely by /ROMSEL (fully synchronous) there are no stability issues, all sequential logic is like this including the shift register. Everything relies on the propagation of the asynchronous circuit and master latch to be longer than the clock inverter to switch from the master to slave latch in a D-FF. This stability is compromised in my example since in addition to the clock inverter inside the register, the decoder's propagation has to be taken into account, but it should still be safe. It always uses less logic to gate the clock or use delays, but I think in practice that's even less predictable.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Nov 08, 2011 3:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You are right, shift registers are entirely based on this "instable" behavior so it seems it will work if both latches are clocked simultaneously.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This stability is compromised in my example since in addition to the clock inverter inside the register, the decoder's propagation has to be taken into account, but it should still be safe. </div>
<br />What make you think it should still be safe ? There is no evidence for this.
<br />
<br />Also what about the reset mode (D7=1) bug I mentioned in my older post ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 08, 2011 5:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Unless a particular game is using the reset mode bug, does the reset mode bug really matter enough to be worth emulating? What does exploiting the bug save you in a homebrew game, one byte?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Nov 08, 2011 7:33 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />No, no that's not what I was talking about.
<br />I was saying Kyusaku's circuit would bug when you use Reset, as the reset write will act as the "first" shift register write, and the next write will be considered the second, when it is supposed to be the first. Either it's me who misunderstood a part of the circuit, or this bug actually exists, and this would break *all* MMC1 games, homebrew or not.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Nov 08, 2011 7:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />As I understand it, the MMC1 front end works as follows:
<br /><ol style="list-style-type: lower-alpha"><li>A reset (CPU D7 = 1) MUST copy 1 into the PRG bank mode bits of the $8000 latch, changing it to fixed-$C000 mode. </li><li>A first through fourth write that is not a reset (CPU D7 = 0 and shift register D0 = 0) MUST shift CPU D0 right into a 5-bit shift register. </li><li>A fifth write that is not a reset (CPU D7 = 0 and shift register D0 = 1) MUST copy D4-D1 from the shift register to D3-D0 of the latch selected by A14-A13 and MUST copy CPU D0 to D4 of that same latch. </li><li>A reset or a fifth write (CPU D7 = 1 or shift register D0 = 1) MUST reset the shift register to a value of 10000 afterward. </li><li>Behavior of writes in consecutive CPU cycles (INC, DEC, ASL, LSR, ROL, ROR) is probably officially unspecified, but in Nintendo's chip, the second write appears to be ignored, and a handful of games rely on this. </li></ol>
<br />It appears you were talking about the fact that a reset doesn't shift the shift register afterward. I was talking about e, appearing to ignore consecutive writes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Tue Nov 08, 2011 10:46 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You know your five points sounds complex for a non-english speaker for me. Why can't you keep things simple ?
<br />
<br />(I haven't emulated reseting affecting reg0, nor did I emulate the behavior where 2 consecutive writes are blocked, nor does kyusaku's circuit, this is too complex for now)
<br />
<br />I don't think it matters at all if, when you do a reset write with D7 set, if the shift register is affected or not.
<br />Affecting it in any way should have absolutely no effect, as all the bits will be shifted out before being used, so I guess what requires less logic is to just shift D0 in as a normal write, even if this bit will end up unused. (what both my logisim circuit and kyusaku's circuit does)
<br />
<br />However, what DOES matter is that none of the 4 MMC1 regs are updated on a "reset" write, and that they gets updated 5 writes AFTER the reset write, NOT including the reset write itself. Then, they should be updated 5 writes after that, etc...
<br />
<br />In my logisim circuit I do this with a 0-&gt;5 counter, and the registers gets updated when the counter reaches 5. The only way to acess state '0' is by reseting the shift register, after the 5th write it returns to '1'.
<br />
<br />In kyusaku's circuit, he do this with a 0-&gt;4 counter, and both reseting the shift register or doing a final write will reset the counter to '0'.
<br />
<br />The problem is that I think this will not work, because after a reset, the regs will be updated after 4 writes instead of 5, which would lead to disastrous results.
<br />
<br />I hope I made it clear now what is the "bug" I was talking about... And I am sorry if I misunderstood something about his circuit.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>