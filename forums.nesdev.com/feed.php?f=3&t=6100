<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="https://forums.nesdev.com/feed.php?f=3&amp;t=6100" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="https://forums.nesdev.com/index.php" />
<updated>2013-12-24T15:39:36-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>https://forums.nesdev.com/feed.php?f=3&amp;t=6100</id>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2013-12-24T15:39:36-07:00</updated>
<published>2013-12-24T15:39:36-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=122882#p122882</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=122882#p122882"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=122882#p122882"><![CDATA[
I'm getting error in line 05 = 528, which should be 526. All the others are correct. Any help, please?<br /><br />EDIT: found the problem, I was setting the number of DMC stealing cycles _after_ a STA $4014 write, which should be _before_ it.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Tue Dec 24, 2013 3:39 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-11T06:02:18-07:00</updated>
<published>2013-09-11T06:02:18-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117907#p117907</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117907#p117907"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117907#p117907"><![CDATA[
In case it's helpful to future people pulling their hair out over this one:<br /><br />To pass, it's important that the first $4014 write lands on an even cycle (and so only adds a single dummy cycle). Since the test synchronizes to the DMC, getting this right depends on the DMC clocks happening on even cycles too, which in turn depends on the power-on value of the DMC timer (the one counting down and getting reloaded with the period when it reaches 0). On the real thing, I think the power-on value is 428 (or the equivalent at least - it uses a linear feedback shift register), though only the even/oddness should matter for this test.<br /><br />If you get 528,527,528,527,... instead of 527,528,527,528,..., that's likely the problem.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Wed Sep 11, 2013 6:02 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-07T00:36:22-07:00</updated>
<published>2013-09-07T00:36:22-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117663#p117663</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117663#p117663"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117663#p117663"><![CDATA[
Started digging into the circuitry a bit, and it looks like the 2A03 handles <strong>rdy</strong> for OAM DMA and PCM reads in a pretty clever way. Rather than just pulling <strong>rdy</strong> low for a fixed safe &quot;minimum&quot; time, it first pulls it low and then waits for a CPU read. Once it sees a read, it knows <strong>rdy</strong> must have kicked in, and moves on to doing the transfer.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Sat Sep 07, 2013 12:36 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-04T16:59:02-07:00</updated>
<published>2013-09-04T16:59:02-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117577#p117577</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117577#p117577"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117577#p117577"><![CDATA[
A test for that would be nice if you ever update the apu_test tests. I pass all of them without implementing it.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Wed Sep 04, 2013 4:59 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-09-04T16:49:09-07:00</updated>
<published>2013-09-04T16:49:09-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117576#p117576</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117576#p117576"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117576#p117576"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />So the bits remaining count is updated each DMC clock regardless of whether a sample is playing or not, and the DPCM can only transition from silent to playing at the boundary after a &quot;silent sample byte&quot;?<br /></div><br />Right.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Sep 04, 2013 4:49 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-04T16:24:09-07:00</updated>
<published>2013-09-04T16:24:09-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117574#p117574</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117574#p117574"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117574#p117574"><![CDATA[
Ahh, that explains it. Hadn't realized silence on the DPCM channel worked like that. <img src="https://forums.nesdev.com/images/smilies/icon_mrgreen.gif" alt=":mrgreen:" title="Mr. Green" /><br /><br />So the bits remaining count is updated each DMC clock regardless of whether a sample is playing or not, and the DPCM can only transition from silent to playing at the boundary after a &quot;silent sample byte&quot;?<br /><br />Thanks! <img src="https://forums.nesdev.com/images/smilies/Mfr_icon_homebrew.png" alt=":beer:" title="Beer" /><p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Wed Sep 04, 2013 4:24 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-09-04T15:52:54-07:00</updated>
<published>2013-09-04T15:52:54-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117571#p117571</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117571#p117571"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117571#p117571"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />end_dmc_timer starts a new sample, and that should set the number of remaining bits to 8, meaning it'll have to go through 8 DMC clocks before loading the final sample byte and clearing SNDCHN bit 4.<br /></div><br />I think we've found the problem <img src="https://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br /><div class="quotetitle">APU DMC wrote:</div><div class="quotecontent"><br />When an output cycle ends, a new cycle is started as follows:<br />* The bits-remaining counter is loaded with 8.<br />* If the sample buffer is empty, then the silence flag is set; otherwise, the silence flag is cleared and the sample buffer is emptied into the shift register. <br /><br />When the timer outputs a clock, the following actions occur in order:<br />[...]<br />* The bits-remaining counter is decremented. If it becomes zero, a new cycle is started. <br /><br /><em>Nothing can interrupt a cycle; every cycle runs to completion before a new cycle is started.</em><br /></div><br />If there's no sample byte loaded in time, it'll output <em>eight</em> silence bits, even if you get a sample byte loaded just after the first silence bit begins.<br /><br />Just to further verify, when I change end_dmc_timer to load Y and X with zero before the loops and uncomment the jsr print_y/jsr print_x lines, and run this,<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">jsr time_code_begin<br />jsr time_code_end</div><br />I get 45 02. So for zero user cycles, $45 needs to be subtracted from Y at that point, and $02 from X. So it's equivalent to just load Y with -$45 and X with -$02 before the loops.<br /><br />(And can I get an amen! I've finally begun porting my console development programming setup to my Linux box, and was able to do this testing just now without having to power up my old Mac. Very convenient now.)<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Sep 04, 2013 3:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-04T15:48:35-07:00</updated>
<published>2013-09-04T15:48:35-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117570#p117570</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117570#p117570"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117570#p117570"><![CDATA[
But wouldn't the coarse loop in <strong>end_dmc_timer</strong> <em>always</em> iterate between (428*7)/16 = 187.25 and (428*8)/16 = 214 times, regardless of timing? <strong>end_dmc_timer</strong> starts a new sample, and that should set the number of remaining bits to 8, meaning it'll have to go through 8 DMC clocks before loading the final sample byte and clearing SNDCHN bit 4.<br /><br />Iterating between 187 and 214 times makes y way out of range compared to the expected value, so I must be missing something.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Wed Sep 04, 2013 3:48 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-09-04T00:30:29-07:00</updated>
<published>2013-09-04T00:30:29-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117548#p117548</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117548#p117548"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117548#p117548"><![CDATA[
OK, I've given in and done a careful timing analysis so we can see exactly how this works (and thankfully it all squares away):<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">begin_dmc_timer:<br />    php<br />    jsr sync_dmc<br />    <br />sync_dmc:<br />        ...<br />        bit SNDCHN      ;   reads just as bit 4 is cleared<br />                        ;   new bit cycle begins at current high rate<br />        bne @sync       ; 3<br />                        ; -1<br />        pla             ; 4<br />        rts             ; 6<br /><br />    pha                 ; 3<br />    lda #$00            ; 2<br />    sta $4010           ; 4 switch to lowest rate for remaining 7 bits<br />    pla                 ; 4<br />    <br />    nop                 ; 2<br />    plp                 ; 4<br />    rts                 ; 6<br /><br />    ... code<br />    <br />    jsr end_dmc_timer   ; 6<br />    <br />end_dmc_timer:<br />    lda #$1F            ; 2<br />    sta SNDCHN          ; 4 starts immediately, thus causes DMA read now<br />                        ; 4 DMC DMA read<br />    nop                 ; 2<br />    sta SNDCHN          ; 4<br />    <br />    ldy #-$45           ; 2<br />@coarse:<br />    ; 16 cycles/iter<br />    nop                 ; 2<br />    lda #$10            ; 2<br />    bne :+              ; 3<br />:   dey                 ; 2<br />    bit SNDCHN          ; 4 reads 74+timed code cycles after earlier BIT SNDCHN<br />    bne @coarse         ; 3</div><br />The DMC timer's rate doesn't change until the next bit, so the first bit is 54 cycles, and the remaining 7 bits are 428 cycles. So SNDCHN bit 4 will be cleared 54+428*7=3050 cycles later. Thus if the loop finds it clear the first time through, it's been at minimum 3050 cycles since the earlier BIT SNDCHN, or 2976 cycles of user code between calls. 2976/16 = 186, so Y should be 186 if the coarse loop never iterates. -$45 is 187, and the DEY always executes at least once, so this gives the correct Y.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">                        ; -1<br />    ldx #-$2            ; 2<br />@sync:<br />    lda #$1F            ; 2<br />    sta SNDCHN          ; 4<br />                        ; 4 DMC DMA<br />    <br />    lda #179            ; 3402 delay<br />:   nop<br />    nop<br />    nop<br />    nop<br />    nop<br />    nop<br />    sec<br />    sbc #1<br />    bne :-<br />    <br />    inx                 ; 2<br />    lda #$10            ; 2<br />    bit SNDCHN          ; 4 reads 3424 cycles after BIT SNDCHN in coarse loop<br />                        ;   then every 3423 cycles<br />    beq @sync           ; 3</div><br />The fine sync loop reads at the same relative time to the DMC sample ending as the coarse loop, thus it always reads after the sample ended on the first iteration and loops back at least once. If the user code took 2976 cycles, it will find the sample not ended on the second iteration and exit the loop, leaving X at 0 as desired.<br /><br />If the user code took one cycle more, the two loops would have read one cycle later, and the fine sync loop would have run one time more, leaving X one greater at 1.<br /><br />I think I used negative initial values for X and Y because I tuned this empirically; I started out with 0 for X and Y, timed some zero-cycle user code, then took the resulting value, broke it into the high 8 bits and low 4 bits, negated these, and put them in Y and X, so that I'd get 0. I never did the above careful timing analysis, because in my experience it's time-consuming and can easily overlook something critical, while empirical testing and tuning is efficient and reliable since it involves writing edge-case tests to be find the stable range. It was fun to verify this by careful analysis though, so thanks for the opportunity.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Wed Sep 04, 2013 12:30 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-03T21:06:17-07:00</updated>
<published>2013-09-03T21:06:17-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117546#p117546</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117546#p117546"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117546#p117546"><![CDATA[
There is something I don't get in <strong>end_dmc_timer</strong>, which might also be a clue to what's wrong with my code/understanding. The coarse sync part looks as follows:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Returns in XA number of cycles elapsed since call to<br />; time_code_begin, MOD dmc_timer_modulo. Unreliable if<br />; result is dmc_timer_max or greater.<br />.align 64<br />end_dmc_timer:<br />   ; The arbitrary starting X and Y values for the<br />   ; loops merely set an adjustment added to the<br />   ; final count.<br />   <br />   ; Restart sample, which will immediately<br />   ; finish since nothing's playing, then<br />   ; start again which will ensure the flag<br />   ; stays set until the second one begins.<br />   ; This means that bit 4 of SNDCHN will be set<br />   ; a fixed amount of time after begin_dmc_timer<br />   ; completed.<br />   lda #$1F<br />   sta SNDCHN<br />   nop<br />   sta SNDCHN<br />   <br />   ; Coarse sync<br />   ; Get within a few cycles of when DMC sample finishes.<br />   ; Keep a count since each iter is 16 cycles.<br />   ldy #-$45<br />@coarse:<br />   ; 16 cycles/iter<br />   nop<br />   lda #$10<br />   bne :+<br />:       dey<br />   bit SNDCHN<br />   bne @coarse<br />   ...</div><br /><br /><strong>ldy #-$45</strong> is the same as <strong>ldy #187</strong>, and y will be decremented every 16 cycles until one sample byte has played.<br /><br />Since the period is set to 428, it should take roughly between 428*7 and 428*8 cycles to play one sample byte, depending on the current alignment with the DMC timer. However, (428*7)/16 = 187.25 and (428*8)/16 = 214, meaning y will either end up very small or underflow. For y &lt;&lt; 4 | x to have the expected value of ~528 y would have to be about 32 though, which seems impossible.<br /><br />Any ideas? Is this some off-by-one error? <img src="https://forums.nesdev.com/images/smilies/icon_neutral.gif" alt=":|" title="Neutral" /><p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Tue Sep 03, 2013 9:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-09-02T14:19:36-07:00</updated>
<published>2013-09-02T14:19:36-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117459#p117459</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117459#p117459"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117459#p117459"><![CDATA[
<div class="quotetitle">blargg wrote:</div><div class="quotecontent"><br />I added more comments in sync_dmc.s and dmc_timer.s: <a href="http://blargg.8bitalley.com/nes-tests/sprdma_and_dmc_dma2.zip" class="postlink">sprdma_and_dmc_dma2.zip</a><br /></div><br /><br />Thanks.<br /><br />Was occupied for a while, but I'll start looking into it now.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Mon Sep 02, 2013 2:19 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-08-31T15:45:54-07:00</updated>
<published>2013-08-31T15:45:54-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117347#p117347</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117347#p117347"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117347#p117347"><![CDATA[
I added more comments in sync_dmc.s and dmc_timer.s: <a href="http://blargg.8bitalley.com/nes-tests/sprdma_and_dmc_dma2.zip" class="postlink">sprdma_and_dmc_dma2.zip</a><p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Aug 31, 2013 3:45 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-08-31T12:02:49-07:00</updated>
<published>2013-08-31T12:02:49-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117327#p117327</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117327#p117327"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117327#p117327"><![CDATA[
Yup, got that much. Trying to understand how the test code itself works and what assumptions it makes though since the output is so off despite passing all the APU tests.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Sat Aug 31, 2013 12:02 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[blargg]]></name></author>
<updated>2013-08-31T11:55:46-07:00</updated>
<published>2013-08-31T11:55:46-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117326#p117326</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117326#p117326"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117326#p117326"><![CDATA[
I believe this repeatedly does sprite DMA and has a DMC DMA read occur at various relative times, then shows how long the sprite DMA took, in cycles.<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=17">blargg</a> — Sat Aug 31, 2013 11:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ulfalizer]]></name></author>
<updated>2013-08-31T10:40:05-07:00</updated>
<published>2013-08-31T10:40:05-07:00</published>
<id>https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117325#p117325</id>
<link href="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117325#p117325"/>
<title type="html"><![CDATA[Re: DMA operation in APU]]></title>

<content type="html" xml:base="https://forums.nesdev.com/viewtopic.php?t=6100&amp;p=117325#p117325"><![CDATA[
Still a bit confused as to what this test is doing and expects to happen at different points.<br /><br />For example, the <strong>test_</strong> routine which gets called 10 times to test different sample loading locations starts like<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">test_:<br />   jsr print_a<br />   pha<br />   eor #$FF<br />   pha<br />   <br />   setb $4012,&lt;((dmc_sample-$C000)/$40)<br />   <br />   jsr pre_test<br />   <br />   jsr time_code_begin<br />   <br />   ; Start DMC<br />   setb $4015,$10 ; fill sample buffer<br />   setb $4015,dma*$10<br />   ...</div><br /><br /><strong>time_code_begin</strong> is just an alias for <strong>begin_dmc_timer</strong>, and <strong>dma</strong> is 1, meaning #$10 gets written to $4015 twice.<br /><br />Does this code expect the first write to $4015 to immediately start a new sample? When I get there the last byte of the sample used for synchronization in <strong>begin_dmc_timer</strong> is still playing, meaning the first write to $4015 queues up another sample and the second write to $4015 has no effect at all.<br /><br />Similary, there's a call to <strong>time_code_end</strong> (alias for <strong>end_dmc_timer</strong>) at the end of <strong>test_</strong>. <strong>end_dmc_timer</strong> starts with<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.align 64<br />end_dmc_timer:<br />   ; Restart<br />   lda #$1F<br />   sta SNDCHN<br />   nop<br />   sta SNDCHN<br />   <br />   ; Rough sync<br />   ldy #-$45<br />@coarse:<br />   nop<br />   lda #$10<br />   bne :+<br />:   dey<br />   bit SNDCHN<br />   bne @coarse<br />   <br />   ; DO NOT write to memory. It affects timing.<br />   <br />   ; Fine sync<br />   ldx #-$2<br />@sync:<br />   ....</div><br /><br />When this routine gets called the sample has already finished playing with some margin. Is this expected? What's the significance of -$45 as a constant?<p>Statistics: Posted by <a href="https://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5911">ulfalizer</a> — Sat Aug 31, 2013 10:40 am</p><hr />
]]></content>
</entry>
</feed>