<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - YCPU: an imaginary 16-bit processor.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">YCPU: an imaginary 16-bit processor.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072">http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Mar 07, 2014 5:24 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Joe wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">nor what registers a subroutine can expect to preserve</div>That kind of information belongs in the specification for the ABI</div><br />True. Perhaps I should have said &quot;You'll need to define what JSR, RTS, SWI, and RTI do in order to give ABI designers something to work with.&quot;

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Mar 08, 2014 9:45 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When thinking about the stack, I realized that in order to have the stack grow downwards, I would have to implement two more addressing modes - the opposites of the Post-increment and Pre-decrement indirects. Do I have this correct?</div><br />Not really. There is 4 kinds of stacks, really. Using ARM's notation :<br />- Full decreasing<br />- Empty decreasing<br />- Full increasing<br />- Empty increasing<br /><br />The full / empty thing determines whenever the stack pointer points at the address where the next element <strong>will </strong>be pushed (empty), or at the address where the next element <strong>has </strong>been pushed (full).<br /><br />The increasing / decreasing things determine in which direction the stack grows in memory.<br /><br />There is no major difference between any one of those for the user, and there is no technical reason to use one instead of the other, exept the limitation of the addressing modes. For instance the 6502 and it's family are hardwired to empty decreasing, while the ARM in Thumb mode uses full decreasing (please correct me if I'm wrong).<br /><br />So I really think you should use the stack the make the most sense for your addressing modes, and there's no need to add more mode just to make support for a different kind of stack.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Mar 08, 2014 12:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In addition...<br /><ul><li>if the offset (in your indirect offset and indirect indexed) can only be positive, a downward growing stack is much more useful than an upward growing stack, because you can then access a stacked element with that offset;</li><li>The decision between full or empty descending is a bit of a personal choice, however a full descending stack give a useful meaning to <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">LOD R0, [SP, 0]</tt>; it accesses the first stacked element (contrast with a empty descending one, it's an invalid access, or otherwise unmeaningful). The only cost, as you mentioned, is that you initialize <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SP</tt> to an &quot;invalid&quot; location, ex. if your stack uses words <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$1FF</tt> downward then you initialize SP with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">$200</tt></li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sat Mar 08, 2014 3:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've updated the specification based on your suggestions, and placed it on the <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072&amp;p=126375#p126375" class="postlink">first post of this thread</a>.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">ZCPU might be confused with IBM or Infocom ISAs.</div><br />Thanks for pointing that out. I've decremented the first letter of the spec; it's now YCPU<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">You'll need to define what JSR, RTS, SWI, and RTI do in order to give ABI designers something to work with.&quot;</div><br />JSR/RTS save and restore only the PC. There is no guarantee that registers will remain unchanged; thus, saving and restoring them must be done manually.<br /><br />SWI and RTI save and restore only the PC and FL. Save/restore of registers is handled in some cases by the calling thread, and in other cases by the interrupt routine. For interrupts which are called by a thread (an example would be a system call), the programmer should be aware of the operation of the interrupt and thus know which registers they want to save before calling the interrupt. For interrupts which occur without a thread calling them (hardware interrupts, for example), the interrupt routine must save and restore any registers that it modifies.<br /><br />Question about system calls - how should I expose the hardware to the CPU? Should I allow any program to query hardware and send messages to hardware, or should that function be restricted to the Supervisor thread only, which can expose hardware functionality via a SWI?<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Signed and unsigned multiplication are the same operation for 16x16=16. They differ only for 16x16=32.</div><br />I'm sorry, I should have clarified: MUL/MLI are always 16x16=32b, with the high 16b of the result stored in R0. If you specify R0 as the source/dest register, the following will result:<br />1. Operation completes.<br />2. High 16b are written to R0.<br />3. Low 16b are written to Rx - in this case, R0. R0 contains the low 16b, and the high 16b are wiped out.<br /><br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">What are 5 % -3, -5 % 3, and -5 % -3 in this ISA?</div><br />I've decided that the result has the same sign as the dividend (as with C++2011, C#, and Java).<br /><br />Finally, thanks to everyone that posted descriptions on the different ways which a stack can work. I've decided I'm going to go with a full decreasing stack. I'm thinking about adding bounds checking functionality to the processor via additional special registers: for example, a pair of stack bounds registers could help the processor determine if the stack has over- or under-flowed. Is there a better way to handle this functionality?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Mar 08, 2014 3:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Can't you use POP PC in place of RTS (and POP PC,FL in place of RTI)? You seem to have defined these instructions, and then why do you need the RTS and RTI instructions?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>psycopathicteen</b> [ Sat Mar 08, 2014 3:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There's one thing that would've made a true 16-bit difficult to use in a system, and that's being limited to 128 kilobytes of memory.  Maybe you can give every register it's own bank register, and have an instruction that swaps the data between the main register and its bank register.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sat Mar 08, 2014 5:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I do intend to keep the flat address space of 64 kilo words. When I know enough to implent it, I'll also implement a mmu spec that allows for bank switching 4kb segments, and also knows enough about thread context to make sure that non-privileged threads can't access memory they don't own.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Sun Mar 09, 2014 10:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Addressing modes for a fake cpu - what would you include</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've updated the specification again, and updated the <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072&amp;p=126375#p126375" class="postlink">first post of this thread</a>.<br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">Can't you use POP PC in place of RTS (and POP PC,FL in place of RTI)? You seem to have defined these instructions, and then why do you need the RTS and RTI instructions?</div>Your comment made me realize that I had neglected some interrupt functionality - I've now given the processor a 'supervisor/interrupt' mode where the processor has 100% access to all features, in contrast to a 'user' mode, which has a different stack pointer and cannot directly access all memory, etc. However, your comment still holds true for RTS.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">==========================&#91; Interrupt Instructions &#93;============================<br /><br />&nbsp; RTI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Return from Interrupt<br />&nbsp; Returns from an interrupt.<br />&nbsp; Processor is currently in Supervisor mode.<br />&nbsp; &nbsp; 1.&nbsp; N bit in Flags register is cleared.<br />&nbsp; &nbsp; 2.&nbsp; FL is popped from the Supervisor Stack.<br />&nbsp; &nbsp; 3A. If Supervisor Mode Bit is set, we are still in Supervisor mode:<br />&nbsp; &nbsp; &nbsp; &nbsp; M is popped from the stack &#91;using SSP&#93;. PC is set to M.<br />&nbsp; &nbsp; 3B. If Supervisor Mode Bit is not set, we exit Supervisor mode:<br />&nbsp; &nbsp; &nbsp; &nbsp; M is popped from the stack &#91;using USP&#93;. PC is set to M.<br />&nbsp; &nbsp; 4. Execution continues.<br />&nbsp; <br />&nbsp; <br />&nbsp; SWI&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Call Software&nbsp; Interrupt<br />&nbsp; Calls interrupt with index = R0.<br />&nbsp; &nbsp; 1. PC is pushed to the current active stack.<br />&nbsp; &nbsp; 2. FL is pushed to Supervisor Stack.<br />&nbsp; &nbsp; 3. Supervisor Bit in FL is set.<br />&nbsp; &nbsp; 4. N bit in Flags register is set.<br />&nbsp; &nbsp; 5. PC is set to Mem&#91;IA + (R0 &amp; $00FF)&#93;.<br />&nbsp; &nbsp; 6. Execution continues.</div><br />I'm unsure that this is the best way to exit User mode --- and I'm not sure how I can enter user mode. My current idea is to have an opcode that jumps to a subroutine and turns off Supervisor mode at the same time. Thoughts?<br /><br />I've also been thinking about an implementation of a memory paging scheme. This is what I'm currently thinking: the address space is divided into 4kb pages. Each active page can contain any page from the 64kw of memory, a blank page (all 0x0000), or a page from a ROM chip. Each page also has bits specifying if the page can be Executed, if the page can be written, and if the page is supervisor only. There will some ability to page out and page in - perhaps to some slower storage device - but this will come at a performance penalty.<br /><br />Aside from my remaining Supervisor mode and MMU questions, are there any other obvious features that my processor is missing?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sun Mar 09, 2014 10:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><ul><li>The new &quot;Interrupt In Process&quot; flag is still labeled as &quot;N&quot; which the negative flag also is. It should be labeled with a different letter.</li><li>It says that RTS is a synonym for &quot;POP PC&quot;, although it still has its own opcode number. It could be simplified by making it not have its own opcode number and instead just be assembler macro for &quot;POP PC&quot;.</li><li>It seems to me like SWI using the high eight bits of the opcode as the interrupt number, would be better than using R0 for this purpose.</li><li>It says RTI clears the interrupt in process flag before popping the flag. This doesn't seem to make much sense; it will be overridden anyways. It seems to me that &quot;POP FL,PC&quot; would do the same thing if it is currently in supervisor mode (and that in user mode, it would just remain in user mode since supervisor-only flags are ignored).</li><li>You could use the high three bits of the TSR and TSW opcodes to select which register to apply to, rather than always R0.</li><li>If you divide by zero, what will be written into the result register?</li><li>LOD and STO are not mentioned in ALU section.</li><li>A signed divide of -32768 by -1 would not have a representable result; perhaps it should set the carry flag in this case (and leave alone the register value)?</li><li>Flag affected by shifting is not mentioned either. (Does it affect carry like in 6502?)</li><li>Is this rotation through a register or through the carry flag? (You could have both; an unused SHF sub-opcode exists which could be defined for this purpose.)</li><li>When you test a bit, what flags are affected to show you the result? (Maybe it should store the result in the carry flag?)</li></ul><br /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I'm not sure how I can enter user mode...</div>You could have an opcode that jumps and enters user mode, but another way would be to push stuff into the stack using other instructions and then use RTI (or POP FL,PC) to enter user mode.<br /><br /><div class="quotetitle">pops wrote:</div><div class="quotecontent">Each page also has bits specifying if the page can be Executed, if the page can be written, and if the page is supervisor only.</div>I do not think an execution bit is really necessary; x86 has it, but I do not think it is useful there either. It seems to be used only to compensate for badly written programs, and that is not a good excuse.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Joe</b> [ Mon Mar 10, 2014 12:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I've also been thinking about an implementation of a memory paging scheme. This is what I'm currently thinking: the address space is divided into 4kb pages. Each active page can contain any page from the 64kw of memory, a blank page (all 0x0000), or a page from a ROM chip. Each page also has bits specifying if the page can be Executed, if the page can be written, and if the page is supervisor only. There will some ability to page out and page in - perhaps to some slower storage device - but this will come at a performance penalty.</div>Why are you limiting the MMU to only 64kW of memory? You could have the MMU map those 4kB pages from a larger address space (perhaps 1MW/2MB, 20 bits), which would remove the need for separate ROM/RAM spaces, and give the system designer more flexibility in how the address space may be allocated for ROM, RAM, and memory-mapped peripherals.<br /><br />How do you intend to implement virtual memory? For that to work, you need some way to signal the supervisor when the user tries to access a page that must be loaded from the slower storage device. You might want to define interrupt handling first; once you have your interrupts defined, you can reserve one of them for the MMU &quot;page fault&quot; exception. (You could even use separate interrupts for &quot;page is valid but must be loaded from slow storage&quot; and &quot;page is not valid&quot;, but that's not really necessary.)<br /><br />I should probably add the disclaimer that I'm approaching this from the viewpoint of an operating system developer, since that's the primary (if not single) use for separate user and supervisor modes.<br /><br /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent"><ul><li>If you divide by zero, what will be written into the result register?</li></ul></div><br />If you divide by zero, will that trigger the &quot;divide by zero&quot; interrupt handler?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 10, 2014 6:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">zzo38 wrote:</div><div class="quotecontent">[Data execution prevention] seems to be used only to compensate for badly written programs, and that is not a good excuse.</div><br />I disagree with your claim that it &quot;is not a good excuse&quot;. Most programmers lack the resources to <a href="https://en.wikipedia.org/wiki/Formal_verification" class="postlink">formally prove</a> that a sufficiently large program is not &quot;badly written&quot;. <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=9120&amp;p=97120" class="postlink">Even I make mistakes</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Mon Mar 10, 2014 9:22 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I second, for it is also an essential part for making a system &quot;secure&quot;. Nothing is perfect, but if you can help prevent buffer overflows to inject malicious code in memory and running it, that's a huge plus. Also, while it could incur some severe overhead, I see some uses of this feature outside of security considerations, ex. trap on execution of a page, to reload it/swap with actual instructions for the YCPU. It could be used to cheaply emulate another system while having to &quot;translate&quot; into native machine code only pages that are actually executed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>pops</b> [ Mon Mar 10, 2014 1:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I've updated the specification again on the <a href="http://forums.nesdev.com/viewtopic.php?f=5&amp;t=11072&amp;p=126375#p126375" class="postlink">first post of this thread</a>.<br /><br />zzo38, Thanks for all your notes. I've implemented the following per your suggestion:<br />* The &quot;Interrupt In Process&quot; bit is now labeled Q.<br />* RTS is now an assembler macro for &quot;POP PC&quot;.<br />* I've clarified how RTI clears the &quot;Interrupt In Process&quot; bit - it is now in the new 'Processor Status' register.<br />* The high three bits of TSR/TSW now select which register is read from/written to.<br />* CPU's response to divide by zero, as well as divide -32768 by -1, is specified. Result register in this case remains unchanged.<br />* LOD and STO are now specified in the ALU section.<br />* There is now an opcode that jumps and enters user mode: JMU.<br /><br />I have a question about SWI suggestion:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It seems to me like SWI using the high eight bits of the opcode as the interrupt number, would be better than using R0 for this purpose.</div>I thought that there might be cases where a program would need to determine which interrupt to call at run-time. Is this not the case, even in modern operating systems? (Not that this is what I'm targeting, mind you).<br /><br />I'd like someone to look over to see if my flag specifications for bit shifting and testing make sense:<br />* Flag status after a shift operation is now specified.<br />* I've specified that bit testing should use the zero and carry flags.<br /><br />Joe, I've added a preliminary memory paging specification. Under this spec, the processor has 16 pages of on-chip memory, but the MMU can page in memory from a device on the bus - which could be an additional memory chip with 256mw of memory (2^16 4kw pages). However, the processor itself - and the active process running on it - are limited to a flat $10000 address space. A kernel that is aware of additional memory or slow storage could provide interrupts to a process that would switch out pages on demand.<br /><br />I don't know what would be the best way to determine if a process is accessing a page that doesn't belong to it, since all user mode processes will be sharing the same address space (imagine a switch from one user mode process to another: all the user mode pages loaded for the first user mode are still available to the second process). Do I need to add some other functionality to address this issue - or would it be enough to expect the kernel to save and restore the MMU status on process switch?<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">=========================&#91; 1.F. Memory Management &#93;=============================<br />(From 0.1e)<br />The processor has an integrated memory manager, which can switch 4kw 'pages'<br />into the address space. Each of the 16 x 4kw pages in address space are<br />described by 2 words:<br /><br />WORD 0 (flags)<br />FEDC BA98 7654 3210<br />SWEM TT.. hhhh hhhh<br />&nbsp; &nbsp; S - Supervisor only. User mode accesses to this page cause a page fault.<br />&nbsp; &nbsp; W - Write protect, 1 = writing to this page cause a page fault.<br />&nbsp; &nbsp; E - Execute protect, 1= executing on this page cause a page fault.<br />&nbsp; &nbsp; M - Page has been modified since load.<br />&nbsp; &nbsp; T - Page type:<br />&nbsp; &nbsp; &nbsp; &nbsp; 00: Use processor memory page with index = (word 1 &amp; 0x000F)<br />&nbsp; &nbsp; &nbsp; &nbsp; 01: Use blank page, reads/executes are 0x0000, writes fail silently.<br />&nbsp; &nbsp; &nbsp; &nbsp; 10: Use hardware page, device = h, page index = (word 1)<br />&nbsp; &nbsp; &nbsp; &nbsp; 11: Use processor ROM, page index = (word 1)<br /><br />WORD 1 (index)<br />FEDC BA98 7654 3210<br />iiii iiii iiii iiii<br />&nbsp; &nbsp; i - Index of device page mapped to this address page.</div><br /><br />Again - as before - I really appreciate all the suggestions.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 10, 2014 2:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">pops wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It seems to me like SWI using the high eight bits of the opcode as the interrupt number, would be better than using R0 for this purpose.</div>I thought that there might be cases where a program would need to determine which interrupt to call at run-time.</div><br />The Game Boy Advance BIOS determines which syscall number was called by peeking at the return address.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't know what would be the best way to determine if a process is accessing a page that doesn't belong to it, since all user mode processes will be sharing the same address space</div><br />Writing to memory management registers might need to be a privileged operation so that the kernel can virtualize the address space, translating between page numbers that the application sees and physical page numbers that the hardware sees.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Do I need to add some other functionality to address this issue - or would it be enough to expect the kernel to save and restore the MMU status on process switch?</div><br />It's the kernel's job to configure the MMU for each process. I'd also recommend having a seventeenth page that replaces one of the pages in supervisor mode, so that the user process can see the full 64 Kwords.<br /><br />And what's this &quot;processor memory page&quot; and &quot;hardware page&quot;? Is it that there's a fast 64 Kword memory in the CPU package and a slower, larger memory accessed through 36-bit &quot;hardware page&quot; (8 bits h, 16 bits i, 12 bits address)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Mon Mar 10, 2014 2:49 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: YCPU: an imaginary 16-bit processor.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I looked and I believe it is much better now.<br /><br /><div class="quotetitle">pops wrote:</div><div class="quotecontent">I have a question about SWI suggestion:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It seems to me like SWI using the high eight bits of the opcode as the interrupt number, would be better than using R0 for this purpose.</div>I thought that there might be cases where a program would need to determine which interrupt to call at run-time. Is this not the case, even in modern operating systems? (Not that this is what I'm targeting, mind you).</div>If it is needed, you can still do such thing as make a interrupt handler that will read it and call another one (I think DOS does something similar?), or else using self modifying codes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'd like someone to look over to see if my flag specifications for bit shifting and testing make sense:<br />* Flag status after a shift operation is now specified.<br />* I've specified that bit testing should use the zero and carry flags.</div>I notice you can tell it to shift out zero bits. What happens in these cases?<ul><li>Does LSR still always clear the negative flag if no bits are shifted out?</li><li>If ROL is used shifting nothing, will the carry flag copy the low bit (low four bits of the result of (16-0) is 0)?</li><li>If ROR is used shifting nothing, will the carry flag copy the high bit (low four bits of the result of (0-1) is 15)?</li></ul>

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>