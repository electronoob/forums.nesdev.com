<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - NESDEV &quot;Best Practices&quot;</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">NESDEV &quot;Best Practices&quot;</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4967">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=4967</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Wed Mar 18, 2009 6:13 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>NESDEV &quot;Best Practices&quot;</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />So in <a href="http://nesdev.com/bbs/viewtopic.php?t=4960" class="postlink">this thread</a>  I asked if it was better to use symbolic constants vs plain register addresses.. it started some interesting discussion and got me thinking about other nesdev "best practices" and other little tips or tricks one might not think up on their own
<br />
<br />so I invite you nes gurus.. what are some good practices to follow when developing for the NES/6502?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 18, 2009 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Some one-liner guidelines I can think of at the moment, which I'd want to copy to whatever wiki we decide on:
<br /><ul><li>Clear RAM before you read it. </li><li>Don't spin on PPUSTATUS D7 except in the init code. You can spin on D6 if you're using sprite 0 for raster split timing. </li><li>Test on both Nintendulator and Nestopia if you can't afford a PowerPak. </li><li>Write to PPUCTRL and PPUSCROLL as the last thing you do during blanking, certainly after all accesses to PPUADDR/PPUDATA. </li><li>Update the palette during actual vertical blanking; forced blanking isn't enough. </li><li>If you use sampled sound: Read the controllers twice, and use the previous frame's value if they don't match. </li><li>Ideally, isolate code that interacts with the hardware from code that implements game rules. </li><li>If you do big copies to VRAM without full-screen forced blanking: Assemble the copies in a buffer in RAM first, and then copy them with a partially unrolled loop. You can usually copy up to 160 bytes this way plus OAM, and in fact, this can improve isolation. </li><li>If you plan to distribute your work on a cartridge, use the simplest mapper that will do the job. </li><li>NES pixels are not square. They're  8/7 times as wide as they are tall on NTSC and 11/8 times on PAL. Draw your graphics accordingly. When drawing graphics in a traditional paint program, you may want to set the resolution to 31.5x36 dpi for NTSC or 26.2x36 dpi for PAL. (In GIMP, turn off View &gt; Dot for Dot and then set the resolution in Image &gt; Print Size.) </li><li>Play PSG channels 1, 2, and 3 one semitone higher on PAL to compensate for the slower CPU. </li></ul>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>loopy</b> [ Wed Mar 18, 2009 6:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Make no assumptions about the state of mapper registers on powerup.
<br />
<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Update the palette during actual vertical blanking; forced blanking isn't enough.</div>
<br />Care to explain this one?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Mar 18, 2009 7:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Clear RAM before you read it.</div><br />If you mean clearing all the RAM at the start of the program, I disagree. IMO, what people need to do is initialize every variable individually before using it. Clearing everything discourages this healthy habit. Plus, if you reuse some parts of RAM for different purposes in different parts of the program (long after RAM has been cleared), initializing each variable is safer (it's always safer, actually).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Write to PPUCTRL and PPUSCROLL as the last thing you do during blanking, certainly after all accesses to PPUADDR/PPUDATA.</div><br />And don't use PPUADDR for scrolling purposes unless outside of vertical blank (often done for parallax effects or/and forced blanking at the top of the screen).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Update the palette during actual vertical blanking; forced blanking isn't enough.</div><br />Yes, because in forced blanking the colors pointed by PPUADDR get displayed, and it looks like junk.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you use sampled sound: Read the controllers twice, and use the previous frame's value if they don't match.</div>
<br />There are other valid fixes to this problem besides giving up on the controller in case of a corrupt read.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Wed Mar 18, 2009 8:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Clear RAM before you read it.</div><br />If you mean clearing all the RAM at the start of the program, I disagree. IMO, what people need to do is initialize every variable individually before using it. Clearing everything discourages this healthy habit.</div><br />The C language specification requires clearing uninitialized static variables to 0 (if numeric) or NULL (if pointer). So you <em>have</em> to do this on your BSS if you use CC65 or <a href="http://www.kdef.com/geek/vic/quetz.html" class="postlink">Quetz</a>, and it's consistent to do it even in pure-assembly projects. Another advantage of memset((char *)0x0000, 0, 2048) is that it minimizes newbies' frustration when moving programs from emulators to the NES. A program has nothing better to do between the vblank waits in the init code anyway.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> Plus, if you reuse some parts of RAM for different purposes in different parts of the program (long after RAM has been cleared)</div><br />That is, overlays.<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">initializing each variable is safer (it's always safer, actually).</div><br />True, objects need their constructors (in the C++ sense). For example, a playfield gets constructed when the player starts a new game.<br /><br />Another issue is VRAM. You don't know the contents of the nametables (or, if you're using CHR RAM, even the pattern tables) at power-on. If you're just printing to the screen, and not copying or decompressing entire nametables, you need to clear the parts you're not printing to.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">If you use sampled sound: Read the controllers twice, and use the previous frame's value if they don't match.</div><br />There are other valid fixes to this problem besides giving up on the controller in case of a corrupt read.</div>
<br />Some Nintendo products have a controller reading subroutine that keeps going until two consecutive reads return the same, but it doesn't run in constant time. But I don't see the advantage of making absolutely sure we don't delay the occasional button press by one frame if it means losing the upper bound on readPads() execution time.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Mar 18, 2009 9:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />All RAM should be <em>initialized</em> before using. Sometimes this means zeroing it out, sometimes it doesn't. For debugging purposes, I clear RAM before using it so I can see which variables are being used and which ones aren't. If a value that should be $00 isn't $00, I know it's being used. But otherwise, a good programmer would ultimately conclude this is a waste of time and space, since they shouldn't "assume" a value is $00.
<br />
<br />For PAL music, don't be lazy and use the same pre-calculated values as NTSC. I've created tables found <a href="http://nesdev.com/bbs/viewtopic.php?t=3728" class="postlink">here</a> that will show you the 11-bit tone values for square and triangle for PAL and NTSC.
<br />
<br />Good organization skills are essential in creating a big project. Eventually, when trying to add stuff on if you're not organized, you'll find yourself in a hopeless mess and maybe scrap the project. Try as much as you can to encapsulate (I think this is the right term) certain things so that everything isn't so global/public. So make sure you're aware of what variables are open and can/should be used by most areas of the program, and which ones are private and never to be touched.
<br />
<br />Make everything as easy to modify as possible. For example, don't write "STA $88" all over the place, define a name for the variable so that you can assign it a different value later if you need to, and you'll only have to modify 1 thing. So variable naming isn't just important so that each value has a name assigned so you can easily remember what it's for; it's important for ease of modification.
<br />
<br />Again, good organization skills are important. You want everything to be as easy as possible to drag-and-drop. Like I make a music engine for multiple games, for example. I want to make this as easy as possible to stick into a game. Sometimes this isn't so easy, and I have trouble doing this myself.
<br />
<br />And what tepples mentioned about separating register writes and game logic is completely true. I refer to these two parts as the "Window" and the "Game World". The "Game World" contains all the AI logic, etc. and everything happens in this world. The "Window" is what lets us see it/hear it. There should be a number of buffers that the Game World writes to which the Window code will read and write to registers. You should never directly tie logic to what's written to the registers; that makes sloppy programming. Even this example is sloppy:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;OAM page is $300<br />&nbsp; &nbsp; inc $300<br /></div>
<br />
<br />To move a sprite 1 pixel to the left. That's too hard-coded. You want to have the concept of an object in the game world that the "Window" puts on the screen somehow. The OAM page should never be tied directly to game logic. This is a hard concept to explain sometimes; sorry if it makes no sense.
<br />
<br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yes, because in forced blanking the colors pointed by PPUADDR get displayed, and it looks like junk.</div>
<br />
<br />Sorry to be a little off topic, but is that all that happens? I thought it was physically impossible to write to the palette during unnatural Vblank...
<br />
<br />EDIT: Also, for naming variables, I use kind of a class system (I'm newish to higher level languages, so forgive me if my terminology is wrong). For example, if a variable belongs to my sound engine, I'll name it something like:
<br />
<br />Sound.Square1.Note
<br />
<br />So it's really apparent what that represents. Also when making sub-engines (like a music engine, or a scrolling engine, etc.) I make sure to include like a "read me" that says exactly how to include it in a project. I will usually write how to use it, too, because usually I'll forget little things after coming back to it a month or so later. This "read me" will tell me exactly what the sub-engine needs in terms of ROM/RAM consumption, and what variables I may need to redefine and what I can redefine them as. For example, I tell myself I need:
<br />
<br />$C0 consecutive bytes of non-zero page RAM
<br />$40 consecutive bytes of non-zero page RAM
<br />$19 individual bytes of zero page RAM
<br />
<br />or something similar. It's important to state whether you need consecutive bytes or individual bytes if you choose to do something like this.
<br />
<br />I guess I also failed to mention that it's good to design things separately and combine them later. Doing this ensures that every individual part works by itself. Though make sure it can work as part of something and not just as a stand-alone program.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Wed Mar 18, 2009 10:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />keep em coming folks <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />btw, do yall think it's better to use the internal stack, simulate a stack in ram, or use temporary variables when simulating function calls?  seems like they all have pros and cons

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Mar 18, 2009 10:14 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Using the hardware stack would probably be the most accurate way to go, however, in terms of performance I don't know if this is the best choice. Using the stack is slow, and dangerous if you make a mistake with pulling/pushing combined with JSR/RTS. Using temporary variables is good if you can get away with it. I use a lot of temporary variables, and make sure they're in zero page for maximum speed. Using them in combination with the stack can prove to be effective. For example, if you're using TempVar1 and you go to a function that uses TempVar1 too, do:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda TempVar1<br />pha<br />jsr Function<br />pla<br />sta TempVar1<br /></div>
<br />
<br />It's preferable that you minimize having to do this, though.
<br />
<br />As for a software stack, I've never tried making one. I imagine it would be slow; possibly slower than the hardware stack. There would be all sorts of indexing and indirect indexing, which would require all sorts of incrementing and decrementing of X/Y...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Thu Mar 19, 2009 2:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />a RAM stack isn't that obnoxious i don't think...
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ifndef stackPtr<br />&nbsp; &nbsp;stackPtr = $0500<br />endif<br /><br />macro pushStack <br />&nbsp; &nbsp;ldx stackPtr<br />&nbsp; &nbsp;inx<br />&nbsp; &nbsp;sta stackPtr, x&nbsp; &nbsp;<br />&nbsp; &nbsp;stx stackPtr<br />endm<br /><br />macro pullStack<br />&nbsp; &nbsp;ldx stackPtr<br />&nbsp; &nbsp;lda stackPtr, x<br />&nbsp; &nbsp;dex&nbsp; &nbsp;<br />&nbsp; &nbsp;stx stackPtr<br />endm<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jeroen</b> [ Thu Mar 19, 2009 4:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dont forget the ppu ram needs clearing to. (found this out the hard way by someone testing pong on a famiclone and getting garbage on the screen)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Mar 19, 2009 11:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One byte shorter each, same timing
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">macro pushStack<br />&nbsp; &nbsp;inc stackPtr<br />   ldx stackPtr<br />   sta stackPtr,x<br />endm<br />macro pullStack<br />   ldx stackPtr<br />   lda stackPtr,x<br />&nbsp; &nbsp;dec stackPtr<br />endm</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Thu Mar 19, 2009 12:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I got the idea from a thread somwhere around here, but using zero page variables like registers.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;<br />; RAM<br />;<br />reg_t:&nbsp; &nbsp;.rs $10<br />reg_s:&nbsp; &nbsp;.rs $4<br /><br /><br />;<br />; ROM<br />;<br />Main:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;lda #1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta reg_s + 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; lda #20<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; jsr SomeFunc<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; lda #21<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; jsr SomeOtherFunc<br />_loop_main:&nbsp; &nbsp;jmp _loop_main<br /><br /><br /><br />SomeFunc:&nbsp; &nbsp;&nbsp; sta reg_t + 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; ...do something...<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; rts<br /><br /><br />SomeOtherFunc:<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta reg_t + 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; lda reg_s + 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; pha<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; ; ...do something else...<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; pla<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; sta reg_s + 0<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; rts<br /></div>
<br />
<br />I sorta modelled it after MIPS, but instead I have 16 temp registers and 4 save registers. I first use the temp registers to avoid the overhead of preserving the save registers, unless I need the value across a function call.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Thu Mar 19, 2009 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />cc65 uses a scheme like this, where variables marked "register" are placed in a small zero-page area, whose previous contents is saved and restored on the normal stack. Using a growing stack is like the original <a href="http://en.wikipedia.org/wiki/Register_window" class="postlink">register window</a> of the RISC idea, the advantage being that you just adjust the window rather than copy registers.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>frantik</b> [ Thu Mar 19, 2009 3:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">One byte shorter each, same timing</div>
<br />
<br />cheers <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />
<br />
<br />here's a multiplication routine.. seems pretty efficient.  you could also change it to accept a 3rd parameter, a pointer to where you want the result to end up.  then you only need one temporary variable
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; Multiply two bytes in memory using Russian peasant algorithm<br />; by frantik<br /><br /><br />; Accepts: value1ptr and value2ptr, pointers to bytes in memory<br />;&nbsp; &nbsp;value2ptr should point to the lesser of the two values <br />;&nbsp; &nbsp;for increased efficiency<br />; Uses: $00, $01, $02 for temporary variables<br />; Returns: 16 bit value in $00 and $01<br /><br />.macro multiply value1ptr, value2ptr<br /><br />ret&nbsp; = $00&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; return value<br />temp = $02&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; temp storage<br /><br />&nbsp; &nbsp;lda #$00&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; clear temporary variables<br />&nbsp; &nbsp;sta ret<br />&nbsp; &nbsp;sta ret+1<br />&nbsp; &nbsp;sta temp<br />&nbsp; &nbsp;jmp start:<br /><br />-loop:<br />&nbsp; &nbsp;asl value1ptr&nbsp; &nbsp;; double first value<br />&nbsp; &nbsp;rol temp&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; using 16bit precision<br />&nbsp; &nbsp;lsr value2ptr&nbsp; &nbsp;; halve second value<br />start:<br />&nbsp; &nbsp;lda value2ptr&nbsp; &nbsp;;<br />&nbsp; &nbsp;and #01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; is new 2nd value an odd number?<br />&nbsp; &nbsp;beq -loop:&nbsp; &nbsp;&nbsp; &nbsp;; <br />&nbsp; &nbsp;clc&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; ; if so, add new 1st value to running total<br />&nbsp; &nbsp;lda ret&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;adc value1ptr&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ret&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda ret+1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;adc temp&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;sta ret+1&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;lda value2ptr&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;cmp #01&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;; is 2nd value 1?&nbsp; if so, we're done<br />&nbsp; &nbsp;bne -loop:&nbsp; &nbsp;&nbsp; &nbsp;; otherwise, loop<br />.endm&nbsp; &nbsp;</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>unregistered</b> [ Thu Apr 23, 2009 11:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you for making this thread : )
<br /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Test on both Nintendulator and Nestopia if you can't afford a PowerPak. </div>
<br />You answered my question.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>