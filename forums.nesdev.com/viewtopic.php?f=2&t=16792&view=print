<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reading from PPU for background collision</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reading from PPU for background collision</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16792">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16792</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-Basti-</b> [ Tue Dec 05, 2017 1:04 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi,<br />I need some help with reading from PPU. I am following the Nesdoug tutorial series and want to code a collision check between<br />a sprite and a background tile. Thus Doug mentions that reading from PPU while doing background collision is quite ugly, I would<br />like to give it a shot. Here is my code <br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">#define VOID_TILE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;0x00<br />#define OBSTICLE_TILE&nbsp; &nbsp;&nbsp; &nbsp;0x01<br />#define NAMETABLE&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;0x2000<br /><br />#define BG_ADR(x,y)&nbsp; &nbsp;&nbsp; &nbsp;((y&lt;&lt;2)|(x&gt;&gt;3))<br />#define MSB(x)&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;(((x)&gt;&gt;8))<br />#define LSB(x)&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;(((x)&amp;0xff))<br /><br />...<br /><br />void render_routine(void){<br />&nbsp; &nbsp;wait_until_nmi();<br />&nbsp; &nbsp;PPU_ADDRESS = MSB(NAMETABLE + BG_ADR(projectile_x, projectile_y));<br />&nbsp; &nbsp;PPU_ADDRESS = LSB(NAMETABLE + BG_ADR(projectile_x, projectile_y));<br /><br />&nbsp; &nbsp;if(PPU_DATA == OBSTICLE_TILE){<br />&nbsp; &nbsp;&nbsp; &nbsp;PPU_DATA = VOID_TILE;<br />&nbsp; &nbsp;}<br />&nbsp; &nbsp; &nbsp; &nbsp; reset_scrolling();<br />}<br /><br />...</div><br /><br />This code correctly detects, that the projectile hits a OBSTICLE_TILE, but renders the VOID_TILE to a complete different<br />place on the screen (but on the same line). Can somebody help? Also it would be interesing, if it is common style to avoid<br />PPU reading while doing background collision cheks and therefore maintain internal collision maps, like in Nesdoug's tutorial series.<br /><br />Regards <br />Sebastian

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lidnariq</b> [ Tue Dec 05, 2017 1:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />1) PPU_DATA has a one-byte delay for reads. So you have to set the address, read, and then the <em>next</em> read has the value you cared about.<br />2) PPU_ADDR will automatically increment after every read or write. So you'd have to re-set the address between when you read from memory and when you wrote to it.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Dec 05, 2017 2:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The problem is not that it's &quot;ugly&quot;, it's just not practical. You can only access VRAM during vblank, which lasts about 8% of the time of a frame, so it simply doesn't make sense to cram VRAM updates and collision logic inside such a small slice of time, while a lot of the remaining 92% of the time goes to waste. This may work for really simple games where not much happens each frame, but as you add more objects and more action, this model quickly becomes unfeasible.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Tue Dec 05, 2017 2:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />One thing you can do that is still ugly, but at least feasible, if you're set on doing it this way, is use cartridge PRG-RAM and buffer writes to the nametable in a section of RAM that you're expecting to be identical to your nametable data, and read from that instead of using the PPU registers. It will eat up a massive 960 bytes (per nametable) that could have been used better, but the effect will be similar to what you're looking for.<br /><br />I actually did exactly this for my recent Donkey Kong port, as I wanted the game to behave exactly like the arcade game down to minor details in the techniques used. The original game reads directly from video ram, but the NES can't do that, so I write to the buffer area in PRG-RAM instead, and copy it over whenever I need it, either managed blocks during vblank, or while turning off rendering.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Tue Dec 05, 2017 3:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sumez wrote:</div><div class="quotecontent">One thing you can do that is still ugly, but at least feasible, if you're set on doing it this way, is use cartridge PRG-RAM and buffer writes to the nametable in a section of RAM that you're expecting to be identical to your nametable data, and read from that instead of using the PPU registers. It will eat up a massive 960 bytes (per nametable) that could have been used better, but the effect will be similar to what you're looking for.</div><br /><br />I think the main thing that is impractical is not even the RAM that is consumed, but trying to maintain that area of PRG-RAM so that it is identical to the PPU data. If you update your code that writes to $2007 so that it also writes to RAM, your updates to RAM won't benefit from the PPU auto-increment. You'll need to manually increment your index or address variable every time you write a value to $2007.<br /><br />This is assuming that you are wanting to have access to any tile displayed on the screen at all times, including the HUD and other objects. If you're not including things like the HUD in your RAM copy, and you're dumping just the tiles that make up the background of your level, I would argue that that's not really creating a mirror of what is displayed, it's just decompressing your level into RAM, which is a common practice.<br /><br />EDIT:<br /><div class="quotetitle">Sumez wrote:</div><div class="quotecontent">I actually did exactly this for my recent Donkey Kong port, as I wanted the game to behave exactly like the arcade game down to minor details in the techniques used. The original game reads directly from video ram, but the NES can't do that, so I write to the buffer area in PRG-RAM instead, and copy it over whenever I need it, either managed blocks during vblank, or while turning off rendering.</div><br /><br />One thing I hadn't considered when writing my post originally was that you could use the RAM copy of the screen to actually perform writes to $2007. In that case, I could actually see this being useful.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Tue Dec 05, 2017 3:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty much exactly how I used it in my example... though it wouldn't have been necessary at all if the game didn't have logic that tries reading from the nametable data several times during a frame.<br />I definitely wouldn't have done it like that if I had to design the game from the ground up. <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I like to keep my collision data fast to decompress on the fly. Different methods for different games, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Tue Dec 05, 2017 5:27 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">-Basti- wrote:</div><div class="quotecontent">Also it would be interesing, if it is common style to avoid<br />PPU reading while doing background collision cheks and therefore maintain internal collision maps, like in Nesdoug's tutorial series.</div><br />A general hint: You should usually separate your game logic from the graphical operations.<br /><br />For example, when you have a character moving on screen, you should declare an x and y variable and not use the coordinate values from the actual hardware sprites for calculations.<br /><br />Likewise, if your opponent is a background image, you should use general variables for collision checks instead of acually reading the PPU values and checking whether the empty background tile is set.<br /><br />Not only does this free you from the restriction of only being able to read the PPU during vblank.<br />You can also access the variables much faster since you don't always have to set a register first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>-Basti-</b> [ Wed Dec 06, 2017 5:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thank you all for your help. I think I will revise my thoughts and go back to collision maps. One more thing: how do scrolling games handle this? Do they switch between various collision maps according to the position of the player?<br /><br />Regards<br />Sebastian

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sumez</b> [ Wed Dec 06, 2017 5:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />The best practice I'd guess is having an algorithm that transforms an entity X/Y coordinate into a specific tile in your data, especially if you want to reuse the concept between both the player and enemies/other AI controlled stuff. The issue with scrolling games is of course that you'll be working with 16 bit coordinates on at least one axis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Dec 06, 2017 7:44 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">-Basti- wrote:</div><div class="quotecontent">Do they switch between various collision maps according to the position of the player?</div><br />That wouldn't work well when characters/objects cross the boundary between two screens, because they'd need simultaneous access to two separate collision maps.<br /><br />Games that scroll usually work with a &quot;cache&quot; of the level map, at least 2 screens wide, so that the game has a little bit of space to work with past the edges of the screen (i.e. objects won't run into invalid collision data as they exit the screen). This cache, much like the name tables, is updated with new data as the camera moves, so the player is always surrounded by valid collision data.<br /><br />Other games just have access to the complete level map at all times (i.e. the map is stored in a random-access-friendly format in ROM or decompressed in full to RAM), so that every piece of the level is accessible at any time.<br /><br />Either way, scrolling games benefit greatly from using coordinates larger than 8 bits, since the space in which characters/objects live is larger than a single screen. These coordinates then have to be converted from level space to screen space for display purposes, via the following formula: <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">SpriteX = ObjectX - CameraX</tt>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Dwedit</b> [ Wed Dec 06, 2017 7:49 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />It just so happens that Dragon Quest 1 read all the tilemaps out of CHR-ROM.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Dec 06, 2017 10:23 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Another disadvantage to using hardware tiles for collision detection is that if you do, you really can't repurpose a hardware tile. For example, you can't use the same tile to draw a real wall and a fake wall, even though the graphics are identical. Metatiles have more flexibility this way, and multiple metatile definitions typically takes up less space than multiple hardware tiles (you also have more room to define metatiles in PRG-ROM than you do hardware tiles in CHR-ROM).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>DRW</b> [ Wed Dec 06, 2017 4:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">-Basti- wrote:</div><div class="quotecontent">One more thing: how do scrolling games handle this? Do they switch between various collision maps according to the position of the player?</div><br />I guess this is done differently for different games.<br /><br />My own game, &quot;City Trouble&quot;, had an array with 34 values: The platform height for each of the 32 visible tiles + the tile left from the screen + the tile right from the screen. (If the scrolling doesn't align to 8 pixels, the part right from the screen is even visible.)<br /><br />Whenever the scrolling aligned to 8 pixels, I shifted the values in the array to the left and loaded the rightmost position with the new value from the general level data.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>dougeff</b> [ Wed Dec 06, 2017 5:00 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Your game (DRW) has auto-scrolling. So, load if scroll multiple of 8 makes sense here. Any game where scroll can shift 2 pixels in 1 frame might miss a load.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>na_th_an</b> [ Thu Dec 07, 2017 1:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Reading from PPU for background collision</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">DRW wrote:</div><div class="quotecontent">Whenever the scrolling aligned to 8 pixels, I shifted the values in the array to the left and loaded the rightmost position with the new value from the general level data.</div><br /><br />As a hint for future games, you can avoid having to shift the entire array if you use a circular array with a moving, &quot;virtual&quot; first index. To &quot;shift&quot; the whole array left or right you just move the origin. Of course, this puts some overhead in the functions which read from the array (you have to perform a substraction and a modulus - and if you are using powers of two / check + substraction if you are not), so it's a matter of measuring if the time gained from not having to shift an array is more than the extra time spent in the accesses.<br /><br />In my situation, for example, it's quite useful. I keep a 16x16 metatile area as a collision map, and &quot;scrolling it&quot; would be overkill, so the circular array idea is most suitable.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>