<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Reverse engineering help - Reward$$</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Reverse engineering help - Reward$$</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=9&amp;t=3714">http://forums.nesdev.com/viewtopic.php?f=9&amp;t=3714</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>6</strong> of <strong>6</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Thu Dec 13, 2007 9:51 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, you can look, but I don't have much data to give you for this. </div><br /><br />Yeah; probably it's nonsense to try something with so few examples.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I don't know, but the fact that one subID has a universal key, and that we now know the device it communicates with stores it in a small EEPROM with other settings leads me to believe the keys are chosen and not calculated from the number they give the ID's. </div><br /><br />That was what i was wondering; most times, if you calculate the subkeys from the ID, you can do it on the fly (usually the subkeys are only linear combinations of the key). The only gaining in storing the subkeys in that case would be speed up the process, but i doubt it be worthwhile.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are there any common failures of block ciphers used in "feedback mode" to generate random numbers? Out of curiousity I might check the sequence of random numbers for these flaws if you know of any.</div>
<br />
<br />To start with, i wouldn't discard that it be working not in feedback mode, but simply looping the seed. Indeed, that is sufficient for a "cryptografically secure random number generator"; if you have an encryption scheme good enough (F), you can simply ouput F(seed), F(seed+1), F(seed+2) and you have a good pseudo-random function. Indeed, i tend to think this would be a better idea than operate in feedback mode.
<br />
<br />Whatever the case, here are my first thought on this, based on each case:
<br />1) Feedback mode. We should simulate this i'm going to say (now it's easy as we have code to do it), but i think probably the birthday paradox could help you. I'm guessing that if you operate in feedback mode, you are going to obtain cycles no longer than 2^16 in averate. So, if you check let's say 2^17 consecutive such numbers for some devices with different IDs... if you don't see cycles i would discard a feedback mode there. I insist you should simulate this by software first.
<br />2) Continuous mode. If, let's say, you take 2^16+1 consecutive ones, and they are the outputs of correlative inputs, you can detect it by using the following idea: If that is the case, calculating the "changes in output vs. changes in input bit #0" is going to give you noticeable different behaviours if you use 2^16 vales starting from the first one, or starting from the second one. The point is that in one case the inputs whose outputs you are XORing have Hamming distance 1, while in the other that will be at least 2; in this latter case you will see results nearer to the expected behaviour for purely random data. Of course, you can do that for inputs bits distinct from #0 mutatis mutandis.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Thu Dec 13, 2007 9:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">You should write up a paper about this and submit it to a security analyst journal. What you have done here is quite amazing... determined the algorithm itself with roughly Sqrt(N) "plaintexts" (where N is the total number of possible input-&gt;output pairs). </div>
<br />
<br />In my opinion, while a black-box attack is harder than a typical academical attack by obvious reasons, a 4-rounds SP network that use the same s-box all the time and with a 32 bits key is not such a terrible adversary so as to send a paper to a security journal. I suppose it could be an enjoyable read for some people, however. I will think on it.
<br />
<br />If you have liked this, maybe you could find interesting to read the way Nicola Salmoria and me defeated the CPS-2 encryption months ago. You have info in our respective blogs.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Thu Dec 13, 2007 1:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have tested myself the idea for the feedback mode. It's clearly a bluff; i don't see cycles arising.
<br />
<br />Thinking on it, it doesn't seem unseasonable that this have big cycles, but i don't know any theoretical result linking the quality of the s-boxes and permutations and the length of such cycles.
<br />
<br />EDITED: I have a better idea: i'm supposing that you would try to detect the same block cipher with an unknown key where the outputs in a step are the inputs for the next and, maybe, the output of the cipher is then xored with another "slowly changing" thing (let's say a counter) to produce the pseudo-random number (if the output of the cipher is outputted unchanged, you could simply brute-force it with 4 consecutive values). In such case, you could simply try to use a linear approximation for the cipher. Basically, it allow you to distinguish a collection of pairs (input, output) generated by the cipher from purely random data. In your case, as we expect that 2 consecutive numbers from the PRNG are a pair input-output xored with 2 similar numbers, that idea could work too.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Sun Dec 16, 2007 2:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />YES! I figured it out.
<br />After much staring and scratching my head I have finally figured out how to read:
<br />- what sboxes the calculations use
<br />- what the final answer it got was
<br />
<br /><em>just by looking at the current</em>!!
<br />
<br />This also let's me fix something that is arbitrary when just viewing it as a blackbox.  To match the code, the permutation table and sboxes need bit0, and bit2 swapped from how they are currently defined.
<br />
<br />
<br />I found out some other interesting facts along the way about my collection of devices.  I tried to start by measuring the current of the device while calculating the response for the simpler key=00000000... and I couldn't see the large effects I was seeing before (the original device I made those current measurements on no longer exists and it was the one sacrificed to see the silicon patterns on the IC).  I spent all kinds of time fiddling with probes and settings, thinking that the signal was small and just drowned by some kind of noise.
<br />
<br />I finally tried some other devices and found out that I have at least two differrent versions of them.  For one set I can see the patterns in the current quite easy and in the others I can't really see anything with my setup.
<br />
<br />
<br />
<br />The original current measurement has all kinds of "extra" jumps in there that I still have not figured out.  It clearly does not match the somewhat simpler code in the devices I have now.  Maybe that was yet an older version?
<br />
<br />Using this knowledge, I have been able to unlock more hidden features meant only for the manufacturer.  This is so much fun.  I never would have been able to figure these things out without your help.  Thank you, thank you.
<br />
<br />
<br />EDIT: I haven't had time to try your suggestions about the PRNG yet.  However I took some time to look at the current measurements for the entire time the device is running, and a vast majority of it the device is just "frozen" or something (the CPU appears halted).  The block-cipher calculation takes about 10 ms, and there is no other 10ms chunk of time where the CPU isn't "halted" or busy communicating.  So I don't see any place where another block cipher could have been calculated.  So maybe they are using something else that is quicker.  I'll have to think about this some more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Sun Dec 16, 2007 7:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">just by looking at the current!! </div><br /><br />Just out of curiosity, could you give more info on this? How did you know which were the good s-boxes, by example?<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Maybe that was yet an older version? </div> <br />I'm guessing they simplified the algorithm. It really makes no sense to have much conditional code here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Using this knowledge, I have been able to unlock more hidden features meant only for the manufacturer. This is so much fun. I never would have been able to figure these things out without your help.</div><br /><br />Yes, indeed it sounds fun. I'm glad to have been of help here.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So maybe they are using something else that is quicker</div>
<br />
<br />A LFSR?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Dec 17, 2007 12:37 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Just out of curiosity, could you give more info on this? How did you know which were the good s-boxes, by example?</div><br />I got other requests to explain this as well, so I guess I'll just tell the whole story.<br /><br />The overview, is this:<br />I have a 100ohm resistor between the ground pin of the device and the actual ground.  The short story is that I then measure the voltage across the resistor as the device does its calculations.  Look for patterns in this signal, and they should correspond to the instructions executed.<br /><br />The details for those who are curious (or hoping to reproduce this for other systems):<br />In reality, there are several problems, most notably the sharp spikes due to clock transitions.  If I change the scope resolution to capture a longer time period, the spikes start swamping the signal.  It is important to note that in a true CMOS system, the only real "information" will actually be <em>in</em> those spikes as that is when the only transitions and hence charge transfer should occur.  However, systems like ROM or FLASH and some bus implementations, require pull up sources on them.  These are basically just transistors that are set up to always be on and can source some current at a low rate (all ROM implementations I've seen require this).  Other peripherals can draw current as well.  I'm not looking for very detailed information, so all I need is to hope that something (a bus, rom access, a peripheral) is not always on... giving a clear signal in the current as it is switched on/off.<br /><br />Since it is hard to say with certainty <em>what</em> is being switched on/off, without more information all we can say is that a pattern exists, and the pattern is conditional on X/Y/Z. With luck we can learn about the code being executed this way, but does not necessarily mean we can label the actual opcodes being executed (not without more information at least).<br /><br />In this case, there seem to be two main current levels while code is executing, I don't know what is being switched off, maybe a bus or something.  Let's call this CPU_low and CPU_high.  These are added on top of several other levels depending on what is enabled in the system,  I've seen the processor halt which is the lowest level (and clock spikes go way down in intensity), the chip during normal operation which is only slightly higher, and a large jump to higher current when EEPROM is being written (probably the charge pump turning on temporarily).<br /><br />So at this point, the main information that can be collected is:<br />- is the EEPROM being written?<br />- is the CPU halted?<br />- and if the CPU is running: are we at CPU_low or CPU_high levels?<br /><br />I've already posted pictures previously of an example of this.  But here it is again: <br />this is an example of an EEPROM write ending.<br /><img src="http://neviksti.com/blackbox/EEPROM_end_small.gif" alt="Image" /><br />Notice the repeated pattern while the charge pump was on.  That pattern is repeated constantly while the current is high.  This is probably the code polling a register to see if the write is completed.<br /><br /><br />The calculation of a challenge response takes about 10ms.  This poses a problem for several reasons:<br />1) I need to resolve the clock spikes or the signal will get swamped, so I can't increase the time scale to see the whole signal in one hit.<br />2) Collecting the signal in multiple scans requires the signal to be <em>exactly</em> the same everytime.  This poses problems as the triggerring needs to be exact to the clock cycle of the code of the <em>device's</em> system.  Good choices of how to trigger are very important (all the more reason to get/borrow a scope with a B trigger system... invaluable).<br />3) Also with the previous comment is: you need to make sure the calculation is the same each time.  If it wasn't for a flaw I discovered in the system, this probably would not have been possible.<br /><br /><br />Alright, with that in mind, I collect many current measurements and stitch them together to give me a full set of data for the current of the device during its entire calculation of the challenge.<br /><br />I then do some processing on the data to identify CPU_high vs CPU_low current.  If you want to play with the data yourself, here is the post processed data for the device calculating the response to a question I don't have the capability to get the answer to (unlike all the challenge-&gt;response data I gave for the blackbox analysis).<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/dat3.csv">http://neviksti.com/blackbox/dat3.csv</a><!-- m --><br />The challenge calculation is somewhere in there, but its starting or ending point can't be determined until one figures out the code structure.<br /><br /><br />To be honest, once Andreas figured out the algorithm, and I finally gave up on trying to understand the old current measurement which was most likely from a previous version (it appears to have used much, much more complicated code), it wasn't too bad.  The "new code" is much easier to understand.<br /><br />After playing with the patterns for a bit, here is what I found:<br />roundstart = {1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, <br />   1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, <br />   1, -1, -1};<br />roundend = {1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, <br />   1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, <br />   1, 1, 1, 1, 1, 1, 1};<br />bit0 = {1, 1, -1, 1, 1};<br />bit1 = {1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, <br />   1, -1, -1, 1, 1, -1, -1, -1};<br />nibstart_sbox0 = {1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, <br />   1, -1, -1};<br />nibstart_sbox1 = {1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, <br />   1, -1, -1};<br />bytestart = {1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, <br />   1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, <br />   1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1};<br />byteend = {1, 1, -1, -1, -1, 1, 1 , -1, -1, -1, 1, 1, -1, -1, -1, 1, <br />   1, -1, 1, 1, 1, 1, 1, 1, 1, 1};<br /><br /><br />The code is basically:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">repeat 4x<br />&#123;<br />&nbsp; &nbsp; roundstart<br />&nbsp; &nbsp; repeat 4x<br />&nbsp; &nbsp; &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; bytestart<br />&nbsp; &nbsp; &nbsp; &nbsp; nibstart &#40; sbox0 or sbox 1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; nibstart &#40; sbox0 or sbox 1&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit0 or bit1<br />&nbsp; &nbsp; &nbsp; &nbsp; byteend<br />&nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; roundend<br />&#125;</div><br />All bits,nibbles,bytes are processed least significant first.<br />To match the order, as mentioned above, bit0,bit2 need to be swapped in the initial solution for the sboxes and permutation and sbox0/sbox1 are swapped.<br /><br />Oh, and one more note, the last cycle of a loop will be different, probably we're seeing the conditional jump not being taken.  So keep that in mind if playing with that data and trying to match up the patterns.<br /><br /><br />The reason we can distinguish the sboxes or the bits is that there is a conditional jump on every single one of these.  This made it difficult for me to initially realize there were any loops, but easy to get data from once I knew what I was looking for.<br /><br />Here's my analysis of that dataset:<br />(the bits list is the bits in the order they were processed)<br /><br />Round 0<br />sbox output: $b60e69ba<br />bits={0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1}    <br />key=$75<br /><br />Round 1<br />sbox output: $579720a8<br />bits={0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,0}    <br />key=$8c<br /><br />Round 2<br />sbox output: $daed8f6d<br />bits={1,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1}    <br />key=$e3<br /><br />Round 3<br />sbox output: $a38689c8<br />bits={0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1}    <br />key=$b9<br /><br /><br />I took the last round sbox output, permuted it, and gave it to the device.  Yep, correct answer <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />Unfortunately, I clearly do not know what this feature does.  It does change the ID code, but not in a controlled way.  And the device seems to be in a weird mode afterward, such that nothing works quite right... and some new "commands" seem to be accessible (but don't seem to do anything).  Basically, it kills the device as I can't figure out what to do or how to reverse it, once I get into this mode.<br /><br />I've already "killed" two devices, and have no idea what I'm doing still. <img src="./images/smilies/icon_sad.gif" alt=":(" title="Sad" /><br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">A LFSR?</div>
<br />I should be able to see that in the code if it is.  Right now I've destroyed the only devices that were of the version that had easy current measuring capabilities.  I'll probably order more in a bit, I'm too curious at this point to stop now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Mon Dec 17, 2007 10:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay I got a new device and looked at the current right before it sends the challenge (here's the "post-processed" current measurement if you'd like to take a look yourself: <!-- m --><a class="postlink" href="http://neviksti.com/blackbox/rand_dat3.csv">http://neviksti.com/blackbox/rand_dat3.csv</a><!-- m --> )
<br />
<br />I see a structure like this:
<br />A, B',B,B,B, C'
<br />A, B',B,B,B, C
<br />A, B',B,B,B, C
<br />A, B',B,B,B, C
<br />D
<br />E,E,E,E
<br />
<br />Where A,B,C,D,E are patterns I see in the current and B' and C'  almost match B and C (just a few cycles off at the end).
<br />
<br />I only made one detailed measurement, but I made many measurements looking at where the challenge is sent and it never budges a cycle from a trigger point before where that calculation is done (I checked this over about 15 runs).  So this code appears to be strangely absent of conditional jumps compared to the block cipher code, which is a good hint at the algorithm.  Since it seems to have 16 operations instead of 32, my intial guess would be a crc type algorithm with a byte lookup table.  Does this seem reasonable?
<br />
<br />
<br />
<br />I also collected the first 2^16 "random numbers" the device gave me.  Unfortunately this was collected from a device before I "killed" it as mentioned above. So I can't go back and get more.
<br />
<br />By powering down at just the right moment when it is trying to save its state, I can trick it to start over.  Besides that, I can not control what state the random number generator is in.  (Also, because of the power down trick, the EEPROM probably reads $FFFFFFFF when the code goes to retrieve its state for what I label as the first random number in the list.)
<br /><!-- m --><a class="postlink" href="http://neviksti.com/blackbox/PRNG_order.csv">http://neviksti.com/blackbox/PRNG_order.csv</a><!-- m -->
<br />
<br />EDIT: Oops, posted wrong file.  Links should be fixed now.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Dec 18, 2007 1:15 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"> <br />A, B',B,B,B, C'<br />A, B',B,B,B, C<br />A, B',B,B,B, C<br />A, B',B,B,B, C<br />D<br />E,E,E,E <br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So this code appears to be strangely absent of conditional jumps compared to the block cipher code, which is a good hint at the algorithm</div>
<br />
<br />
<br />What if this is just the block cipher with a hard-coded key (so no conditional jump is present as it's directly looking-up the sboxes) with a XOR mask at the end (the 'E' patterns)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Dec 18, 2007 1:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I have done the test i said above to check if this could be the block cipher working in counter mode. Clearly that is NOT the case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Dec 18, 2007 2:25 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">What if this is just the block cipher with a hard-coded key (so no conditional jump is present as it's directly looking-up the sboxes) with a XOR mask at the end (the 'E' patterns)?</div>
<br />The block cipher took about 10ms of processing, this instead only takes about 1ms.  So I don't think it is a block cipher.
<br />
<br />What took the longest in the block cipher was the permutation (those "bit0 or bit1" sections) after the sbox.  I don't see anything like that here.  Also those code sections are so short, there's only room for a few instructions at most.
<br />
<br />It isn't too hard to write a LFSR without conditional jumps, but I don't understand why I don't see a x32 loop in this case.  
<br />
<br />It can't be a linear congruential generator otherwise the LSB would oscillate between even/odd (or not change at all)... unless they only took the upper bits of several runs I guess.
<br />
<br />As for the E chunks, it may just be setting up the data to be sent out with the communication routine.  I am not sure how pertinent those blocks are.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Tue Dec 18, 2007 3:05 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The block cipher took about 10ms of processing, this instead only takes about 1ms. So I don't think it is a block cipher. </div><br /><br />OK. That seems a definitive reason.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It can't be a linear congruential generator otherwise the LSB would oscillate between even/odd (or not change at all)... unless they only took the upper bits of several runs I guess. </div><br /><br />Wrong assumption. Only LCG modulus a power of 2 will show that cycles in the low bits; if you use numbers of the form 2^m-p with p small or other arbitrary modulus, you won't observe so clear cycles in the low bits.<br /><br />EDITED:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It isn't too hard to write a LFSR without conditional jumps, but I don't understand why I don't see a x32 loop in this case.</div>
<br />
<br />As long as you don't use any of the last N bits to enter the internal state to calculate the next output bit, you can, when implementing it in software, calculate N outputs bits at once using look-up tables or whatever.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Tue Dec 18, 2007 4:33 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent">Wrong assumption. Only LCG modulus a power of 2 will show that cycles in the low bits; if you use numbers of the form 2^m-p with p small or other arbitrary modulus, you won't observe so clear cycles in the low bits.</div><br />Thank you, I hadn't considered that.  An actual divide instruction is rare in small MCU's, so that usually isn't a reasonable option.  So while possible, I think it is okay to, at the very least, consider this possibility unlikely.<br /><br /><div class="quotetitle">Andreas Naive wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">It isn't too hard to write a LFSR without conditional jumps, but I don't understand why I don't see a x32 loop in this case.</div><br /><br />As long as you don't use any of the last N bits to enter the internal state to calculate the next output bit, you can, when implementing it in software, calculate N outputs bits at once using look-up tables or whatever.</div>
<br />Ah yes, that is an interesting idea.  But then the output pattern wouldn't be of maximal length, right?
<br />
<br />Are there any other quick and easy PRNG's that we're forgetting?
<br />
<br />
<br />EDIT: I just realized I made a big mistake.  The current measurements were taken from a device where I can measure the current easily, while that sequence of random numbers was taken from a device I can't.  So these sets of information were taken from two different device versions and may not match up at all. (While the challenge-&gt;response must stay the same between versions, there is no reason the random challenge generator needs to.)
<br />
<br />I'll collect the random sequence from the new chip.
<br />
<br />
<br />EDIT2: This is lacking in details, but would this technique be useful?
<br /><!-- m --><a class="postlink" href="http://mathworld.wolfram.com/Berlekamp-MasseyAlgorithm.html">http://mathworld.wolfram.com/Berlekamp- ... rithm.html</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Wed Dec 19, 2007 12:59 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">An actual divide instruction is rare in small MCU's, so that usually isn't a reasonable option.</div><br /><br />Probably, but if i remember correctly, there were implementations of LCGs with modulus of the form 2^m-p with p small that used this special form of the modulus to do the calculation without using divisions.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">EDIT2: This is lacking in details, but would this technique be useful?<br /><!-- m --><a class="postlink" href="http://mathworld.wolfram.com/Berlekamp-MasseyAlgorithm.html">http://mathworld.wolfram.com/Berlekamp- ... rithm.html</a><!-- m --></div>
<br />
<br />Yes, of course. Just before going to bed i remembered Charles MacDonald posted a link to a little program to do that recently. Read it here:
<br />
<br /><a href="http://cgfm2.emuviews.com/blog/comments.php?y=07&amp;m=11&amp;entry=entry071125-111612" class="postlink">http://cgfm2.emuviews.com/blog/comments.php?y=07&amp;m=11&amp;entry=entry071125-111612</a>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>neviksti</b> [ Wed Dec 19, 2007 4:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Oh my gosh!
<br />I think I figured it out. And I never would have guessed that understanding the PRNG would present <em>another large security flaw</em> in the system.
<br />
<br />This is all for the version of the devices that I can see the current well.  I haven't looked at the other version yet.
<br />
<br />First, using the EEPROM trick to reset to a "known" starting point, I noticed the first random number in the sequence didn't depend on the "ID number" I was using.  But all numbers after that <em>did</em>.
<br />
<br />I then began wondering if they saved the last challenge answer calculated, and then just did some smaller calculation on that to yield the next "random challenge".  To check this, I sent it a challenge which the answer would be FFFFFFFF, and then checked the next "random challenge".  It was the same as what was given from my EEPROM trick!  And again that was the challenge given no matter what ID I used next when it gave the "random challenge".
<br />
<br />So giving it values for the challenges which would give some nice simple answers, and then checking the next "random" number I see:
<br />FFFFFFFF -&gt; 08CB8600
<br />00000000 -&gt; F73479FF
<br />00000001 -&gt; F73479FE
<br />00010000 -&gt; F73579FF
<br />
<br /><em><span style="text-decoration: underline">All they are doing is XOR'ing a constant value to the last challenge answer!!</span></em>
<br />
<br />This is a huge security flaw.  Now I don't need to go through all the trouble of reading the current to figure out answers to challenges I don't know.  I can just look at the next challenge it would give me, XOR it, and I knew the answer to the previous challenge.  Reset using the EEPROM trick, and wala! I have acess to more memory locations.
<br />
<br />
<br />I was just looking into the PRNG out of curiousity, I never in my wildest dreams guessed I would find something useful from it.  This is ridiculous.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Andreas Naive</b> [ Wed Dec 19, 2007 4:45 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Ah yes, that is an interesting idea. But then the output pattern wouldn't be of maximal length, right? </div>
<br />
<br />Forget it; after thinking again on it, i have realized my claim was clearly an understatement. By using look-up tables, you can make an implementation that calculate N bits of whatever LFSR, maximal or not. More still, i think the structure you have seen in the current measures is exactly what i would do to implement this in a 8 bits circuit using look-up tables.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">for every byte of the output &#40;4&#41;<br />&nbsp; &nbsp; initialize the 8-bits accumulator<br />&nbsp; &nbsp; for every byte of the internal state&nbsp; &#40;4&#41;<br />&nbsp; &nbsp; &nbsp; &nbsp; XOR the accumulator with the corresponding look-up table<br />&nbsp; &nbsp; output the 8-bits accumulator and feed it to the internal state</div>
<br />
<br />EDITED:
<br />Excuse me. Bad phrasing above; i wanted to say you can implement BOTH maximal and non-maximal LFSRs, nor WHATEVER LFSRs. <img src="./images/smilies/icon_razz.gif" alt=":P" title="Razz" /> Concretely, what is needed is that the minimal order monomial besides x^0 in the generating polynomial has at least order N+1.
<br />
<br />EDITED (2):
<br />OK. i have now read your previous post. Ridiculous indeed. xD

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>6</strong> of <strong>6</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>