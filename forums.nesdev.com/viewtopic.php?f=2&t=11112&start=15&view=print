<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - ca65 goodies</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">ca65 goodies</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11112">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=11112</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Fri Apr 04, 2014 11:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In the spirit of the last post, here's some &quot;goodies&quot; of mine. They are pseudo-ops that just reduce the number of lines of code, however one should always be cautious because they can possibly emit alot of instructions, so they can create a false impression of program compactness. Also, one may call it heresy that those pseudo-ops are more than 3 characters, and that it may look like another cpu instruction set: no, my goal isn't to implement another processor in a 6502, it is just to save a bit of typing while having some fun with ca65's macro system.<br /><br /><strong>push/pop:</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro push a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15<br />&nbsp; &nbsp; .ifnblank a0<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({a0},p) .or .xmatch({a0},P)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; php<br />&nbsp; &nbsp; &nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if .match({a0},x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; txa<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .elseif .match({a0},y)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tya<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .elseif .match(.left(1,{a0}),=)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #&gt;(.right(.tcount({a0})-1,{a0}))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda #&lt;(.right(.tcount({a0})-1,{a0}))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .elseif !(.match({a0},a))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lda a0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pha<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; push a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15<br />&nbsp; &nbsp; .endif<br />.endmacro<br /><br />.macro pop a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15<br />&nbsp; &nbsp; .ifnblank a0<br />&nbsp; &nbsp; &nbsp; &nbsp; pop a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({a0},p) .or .xmatch({a0},P)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; plp<br />&nbsp; &nbsp; &nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pla<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if .match({a0},x)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tax<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .elseif .match({a0},y)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tay<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .elseif !(.match({a0},a))<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sta a0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />.endmacro</div><br />The idea here is that you specify what you want to push/pull to/from the stack; A, X, Y and P can be specified along with memory locations. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">push</tt> pushes all the args in the order specified and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">pop</tt> pops them in reverse order, so the following:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; push A,X,Y,somevar<br />&nbsp; &nbsp; pop&nbsp; A,X,Y,somevar<br /></div><br />...will save and restore correctly the specified registers and the memory location. Of course, A should be first (or second, if P is first) in the list if one want to save A, or else A won't be correctly saved/restored without a warning.<br /><br />Also, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">push</tt> accepts regular immediate (8-bit) arguments but also 'absolute' arguments with <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">=</tt>: one can push absolute addresses, and those addresses are pushed in the same order that <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">jsr</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">brk</tt> does. So the following is a slow and convoluted way to jump at <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">somelabel</tt>:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ; using rts<br />&nbsp; &nbsp; push =somelabel-1<br />&nbsp; &nbsp; rts<br /><br />&nbsp; &nbsp; ; using rti<br />&nbsp; &nbsp; push =somelabel, P<br />&nbsp; &nbsp; rti</div><br /><br /><strong>mov/movw:</strong><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro mov dest, src<br />&nbsp; &nbsp; lda src<br />&nbsp; &nbsp; sta dest<br />.endmacro<br /><br />.macro movw dest, src<br />&nbsp; &nbsp; .local sepd, seps<br />&nbsp; &nbsp; sepd .set 0<br />&nbsp; &nbsp; seps .set 0<br /><br />&nbsp; &nbsp; .if .match({.right(2,{dest})},{,x}) .or .match({.right(2,{dest})},{,y})<br />&nbsp; &nbsp; &nbsp; &nbsp; sepd .set 2<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .if .match({.right(2,{src})},{,x}) .or .match({.right(2,{src})},{,y})<br />&nbsp; &nbsp; &nbsp; &nbsp; seps .set 2<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; .if .match(.left(1, {src}),#)<br />&nbsp; &nbsp; &nbsp; &nbsp; mov {.left(.tcount({dest})-sepd,dest)+0 .right(sepd,dest)}, #&lt;(.right(.tcount({src})-1,{src}))<br />&nbsp; &nbsp; &nbsp; &nbsp; mov {.left(.tcount({dest})-sepd,dest)+1 .right(sepd,dest)}, #&gt;(.right(.tcount({src})-1,{src}))<br />&nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; mov {.left(.tcount({dest})-sepd,dest)+0 .right(sepd,dest)}, {.left(.tcount({src})-seps,src)+0 .right(seps,src)}<br />&nbsp; &nbsp; &nbsp; &nbsp; mov {.left(.tcount({dest})-sepd,dest)+1 .right(sepd,dest)}, {.left(.tcount({src})-seps,src)+1 .right(seps,src)}<br />&nbsp; &nbsp; .endif<br />.endmacro</div><br /><tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">mov</tt> is trivial so won't explain, but is included here nevertheless because <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">movw</tt> uses it. The latter moves a word (which can be immediate) into some address; it assumes words are stored into consecutive byte addresses. <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">dest</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">src</tt> can even use absolute or zeropage indexed addressing mode if you use curly braces:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; movw {$4000,X}, {APU_virtualregs,X}<br /></div><br />Limitations: it can only use A for transfers, it does not fit well with the use of the struct-of-array &quot;idiom&quot;<s>, and if you try to use indexed indirect addressing, it will silently break because it will be converted into absolute indexed</s> (oh nevermind, it gives errors fortunately, but one should be cautious when using parens, it should not begin with an open parens, that how ca65 tells if it's absolute or indirect addressing).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Sat Apr 12, 2014 12:08 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Was working on the aforementioned stuff and came up with an idea to help with .define style macros.<br />These can be very helpful in some cases: they can be used anywhere, as compared to regular macros which are required to be at the beginning of a line. As well, they are the only &quot;variable&quot; in ca65 that can be assigned a string. They are constants, but they can be undefined and redefined, so they can be treated as variables. The problem is that they can get really tricky, for example:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.define FOO BAR<br /><br />.ifdef FOO<br />&nbsp; &nbsp; .out &quot;YES&quot;<br />.else<br />&nbsp; &nbsp; .out &quot;NO&quot;<br />.endif<br /></div><br /><br />This will output NO, since the .define macros always resolve to their value, which is BAR, and BAR is not defined. They only way they don't resolve to their value is when using <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.undefine</tt><br /><br />To make things simpler I use this:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.define inlineIsDefined(i)&nbsp; ( .defined(::.ident(.sprintf(&quot;_ISDEFINED_%s&quot;, i) )) .and ::.ident(.sprintf(&quot;_ISDEFINED_%s&quot;, i) ) )<br /><br />.macro define i, v<br />&nbsp; &nbsp; ; if defined and if defined as 1<br />&nbsp; &nbsp; .if inlineIsDefined i<br />&nbsp; &nbsp; &nbsp; &nbsp; .undefine .ident(i)<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; .define .ident(i) v<br />&nbsp; &nbsp; ::.ident(.sprintf(&quot;_ISDEFINED_%s&quot;, i)) .set 1<br />&nbsp; &nbsp; <br />.endmacro<br /><br />.macro undefine i<br />&nbsp; &nbsp; .if inlineIsDefined i<br />&nbsp; &nbsp; &nbsp; &nbsp; .undefine .ident(i)<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ::.ident(.sprintf(&quot;_ISDEFINED_%s&quot;, i)) .set 0<br />.endmacro<br /></div><br /><br />With these macros you can:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">define &quot;FOO&quot;, BAR<br /><br />; output is YES<br />.if inlineIsDefined &quot;FOO&quot;<br />&nbsp; &nbsp; .out &quot;YES&quot;<br />.else<br />&nbsp; &nbsp; .out &quot;NO&quot;<br />.endif<br /><br />; redefine:<br />define &quot;FOO&quot;, &quot;This is a string&quot;<br /></div><br /><br />This also has the advantage that you can use define or undefine at anytime, whereaas with the original .define and .undefine, ca65 would output an error if the identifier was not defined/undefined properly first.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Tue Apr 15, 2014 10:37 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How to evaluate unknown amount of parameters:<br /><br />You could probably do this with just a repeat as well, but I find recursion the easiest way. The simplest way is to just list a bunch of parameters and hope you have enough and recurse on them, but more flexible is something like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro myMacro param<br /><br />&nbsp; &nbsp; ; quickly find next comma:<br />&nbsp; &nbsp; .local COMMA_POSITION<br />&nbsp; &nbsp; COMMA_POSITION .set 0<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; .repeat .tcount({param}), I<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .not COMMA_POSITION<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch( {.mid(I, 1, {param}) } ,&nbsp; {,}&nbsp; &nbsp;)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMMA_POSITION .set I<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endrepeat<br /><br />&nbsp; &nbsp; .if COMMA_POSITION<br />&nbsp; &nbsp; &nbsp; &nbsp; .define PARAM&nbsp; .mid(0, COMMA_POSITION, {param})<br />&nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; .define PARAM param<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; <br />&nbsp; &nbsp; ; -----&nbsp; &nbsp; <br />&nbsp; &nbsp; ; Do some stuff with PARAM<br />&nbsp; &nbsp; ; -----<br />&nbsp; &nbsp;<br />&nbsp; &nbsp; .undefine PARAM<br />&nbsp; &nbsp; ; do again with next param if there was a comma:<br />&nbsp; &nbsp; .if COMMA_POSITION<br />&nbsp; &nbsp; &nbsp; &nbsp; myMacro { .mid ( COMMA_POSITION + 1 , .tcount({param}) - COMMA_POSITION - 1, {param} ) }<br />&nbsp; &nbsp; .endif<br /><br />.endmacro<br /></div><br /><br />Then one would call the macro with as many parameters as they want, but the parameters must be in in curly braces &quot;{}&quot;.<br />This isn't a big deal but it allows for some flexibility where you may want other parameters passed that are not a part of the variable amount of parameters:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">call myFunctionName, {x: #34, y: foo, a: bar, p1: baz}, banked<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Jun 13, 2014 8:47 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a fairly convenient way to create custom character mappings based on a tileset. &quot;#&quot; is used to notate unused characters.<br /><br />EDIT: Note that line continuation has to be enabled with &quot;.linecont +&quot; for this to work as is.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.define CHARSET .concat( &quot;################&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;################&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot; ###############&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;################&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;#ABCDEFGHIJKLMNO&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;PQRSTUVWXYZ#####&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;0123456789######&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;#()###########-=&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;#abcdefghijklmno&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;pqrstuvwxyz#####&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;################&quot;, \<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;##,.##`'##,.:;!?&quot; )<br /><br />.repeat .strlen( CHARSET ), i<br />&nbsp; &nbsp; .if .strat( CHARSET, i ) &lt;&gt; '#'<br />&nbsp; &nbsp; &nbsp; &nbsp; .charmap .strat( CHARSET, i ), i<br />&nbsp; &nbsp; .endif<br />.endrepeat<br /><br />.undefine CHARSET<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Movax12</b> [ Fri Jun 13, 2014 11:41 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty nice. Just note to be careful that redefining the charset doesn't cause things like &quot;NES&quot; in the iNES header to be changed.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Fri Jun 13, 2014 12:07 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yep, that was the first pitfall I encountered when using the cc65 suite. cl65 uses the c64 charmap by default (because the default target is c64), and that &quot;corrupted&quot; the iNES header.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Sat Jun 14, 2014 12:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />On the same note, here are a couple of macros I've used to save/restore the charmap before modifying it. They save the original character map, and then set a &quot;direct&quot; mapping 1..255 =&gt; 1..255. Note that in this implementation __saveCharMap opens a new scope, so it may not be usable under all circumstances (but was fine for what I was doing).<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro __saveCharMap<br />&nbsp; &nbsp; ; In scope so that CHARMAP_xxxs are local.<br />&nbsp; &nbsp; .scope<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Find out character mappings.<br />&nbsp; &nbsp; &nbsp; &nbsp; .repeat 255, i<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Change mapping only if it's not already direct to avoid flooding<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; the debug information with unnecessary symbols.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if i + 1 &lt;&gt; .strat( .sprintf( &quot;%c&quot;, i + 1 ), 0 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Save the current mapping.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ident( .sprintf (&quot;__CHARMAP_%d&quot;, i + 1 ) ) .set .strat( .sprintf( &quot;%c&quot;, i + 1 ), 0 )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Set mapping to direct (1..255 -&gt; 1..255).<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .charmap i + 1, i + 1<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; .endrepeat<br />.endmacro<br /><br />.macro __restoreCharMap<br />&nbsp; &nbsp; &nbsp; &nbsp; ; Now restore the original mapping.<br />&nbsp; &nbsp; &nbsp; &nbsp; .repeat 255, i<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; Restore only those char mappings which were modified.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ifdef .ident( .sprintf (&quot;__CHARMAP_%d&quot;, i + 1 ) )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .charmap i + 1, .ident( .sprintf (&quot;__CHARMAP_%d&quot;, i + 1 ) )<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; .endrepeat<br />&nbsp; &nbsp; .endscope<br />.endmacro<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>zzo38</b> [ Sat Jun 14, 2014 9:48 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Is it possible in ca65 to tell some string literals to use ASCII and some to use custom character sets? My own assembler has this feature, and if you need it in ca65 too then perhaps you should add such a thing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Jarhmander</b> [ Sat Jun 14, 2014 10:04 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />ca65 can change the charmap &quot;dynamically&quot;, so yes it is possible (or thefox' last macro wouldn't work/would have no practical use). It would even be possible to do it less verbosely using macros—which would look much like the last macro.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Fri Apr 15, 2016 6:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Wrote a little macro to parse fixed point numbers (to be used as constants in code) from strings. It has some limitations, main one being that only a limited number of digits can be used (otherwise overflows in the 32-bit arithmetic). Improvements are welcome.<br /><br />Example of usage:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">parseFixedPoint myNumber1, &quot;-5.4321&quot;, 8<br />; myNumber1 = -1391 (-1391/256 = -5.43359375)<br /><br />parseFixedPoint myNumber2, &quot;18.95&quot;, 8<br />; myNumber2 = 4851 (4851/256 = 18.94921875)<br /></div><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro parseFixedPoint targetSymbol, number, fractBits<br />&nbsp; &nbsp; .local numberInt<br />&nbsp; &nbsp; numberInt .set 0<br />&nbsp; &nbsp; .local foundDecimalPoint<br />&nbsp; &nbsp; foundDecimalPoint .set 0<br />&nbsp; &nbsp; .local fractMultiplier<br />&nbsp; &nbsp; fractMultiplier .set 1<br />&nbsp; &nbsp; .local sign<br />&nbsp; &nbsp; sign .set 1<br />&nbsp; &nbsp; .repeat .strlen( number ), i<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .strat( number, i ) = '.'<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if foundDecimalPoint<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .error &quot;multiple decimal points found&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foundDecimalPoint .set 1<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .strat( number, i ) = '-' .or .strat( number, i ) = '+'<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if i &lt;&gt; 0<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .error &quot;sign can only appear in the beginning&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sign .set -1*( .strat( number, i ) = '-' )<br />&nbsp; &nbsp; &nbsp; &nbsp; .else<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; Check for overflow in case of too many digits.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if numberInt &gt;= ( ( 1 &lt;&lt; 31 ) - 1 ) / 10<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .error &quot;can't fit digits in an integer, use less digits&quot;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; numberInt .set 10*numberInt + .strat( number, i ) - '0'<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .if foundDecimalPoint<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fractMultiplier .set 10*fractMultiplier<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endrepeat<br />&nbsp; &nbsp; ; \todo Warn if result not exact?<br />&nbsp; &nbsp; ; \todo Other rounding options?<br />&nbsp; &nbsp; ; \todo Is there a better way to check for overflow?<br />&nbsp; &nbsp; .if numberInt * ( 1 &lt;&lt; fractBits ) / ( 1 &lt;&lt; fractBits ) &lt;&gt; numberInt<br />&nbsp; &nbsp; &nbsp; &nbsp; .error &quot;overflow in multiplication, use less digits&quot;<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; ; \todo Break down the calculations so that more digits can be handled<br />&nbsp; &nbsp; ;&nbsp; &nbsp; &nbsp; &nbsp;without overflow.<br />&nbsp; &nbsp; targetSymbol = ( numberInt * ( 1 &lt;&lt; fractBits ) + fractMultiplier/2 ) / fractMultiplier * sign<br />.endmacro<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Jan 06, 2017 12:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Here's a simple one I came up with a while ago to deal with the problem of referencing structures of arrays generated by external tools:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro StartStructureOfArrays _Label0, _Label1, _Label2, _Label3, _Label4, _Label5, _Label6, _Label7, _Label8, _Label9, _Label10, _Label11, _Label12, _Label13, _Label14, _Label15<br />&nbsp; &nbsp;CreateLabelsForArraysInStructure *, (:+ - *) / .paramcount, _Label0, _Label1, _Label2, _Label3, _Label4, _Label5, _Label6, _Label7, _Label8, _Label9, _Label10, _Label11, _Label12, _Label13, _Label14, _Label15<br />.endmacro<br /><br />.macro CreateLabelsForArraysInStructure _Address, _ArrayLength, _Label0, _Label1, _Label2, _Label3, _Label4, _Label5, _Label6, _Label7, _Label8, _Label9, _Label10, _Label11, _Label12, _Label13, _Label14, _Label15<br />&nbsp; &nbsp;.ifnblank _Label0<br />&nbsp; &nbsp;&nbsp; &nbsp;_Label0 := _Address<br />&nbsp; &nbsp;&nbsp; &nbsp;CreateLabelsForArraysInStructure _Address + _ArrayLength, _ArrayLength, _Label1, _Label2, _Label3, _Label4, _Label5, _Label6, _Label7, _Label8, _Label9, _Label10, _Label11, _Label12, _Label13, _Label14, _Label15<br />&nbsp; &nbsp;.endif<br />.endmacro<br /><br />.macro EndStructureOfArrays<br />&nbsp; &nbsp;:<br />.endmacro</div><br />Example:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">StartStructureOfArrays Tile0, Tile1, Tile2, Tile3, Palette, Type<br />&nbsp; &nbsp;.incbin &quot;metatiles.bin&quot;<br />EndStructureOfArrays</div><br />It just measures the size of the included file and divides it by the number of labels (which is the number of arrays) to find the length of the arrays and distribute the labels accordingly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue Oct 17, 2017 10:20 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Today I found myself needing to trim strings from the left or from the right, so I came up with these:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.macro ExtractLeft _Source, _Target, _Length<br />&nbsp; &nbsp;.define _Target .sprintf(.sprintf(&quot;%%.%ds&quot;, _Length * (_Length &gt; 0)), _Source)<br />.endmacro<br /><br />.macro ExtractRight _Source, _Target, _Length, _String, _Position<br />&nbsp; &nbsp;.ifblank _String _Position<br />&nbsp; &nbsp;&nbsp; &nbsp;ExtractRight _Source, _Target, _Length, &quot;&quot;, .strlen(_Source) - 1<br />&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;.if .strlen(_String) &lt; _Length .and _Position &gt; -1<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;ExtractRight _Source, _Target, _Length, {.sprintf(&quot;%c%s&quot;, .strat(_Source, _Position), _String)}, _Position - 1<br />&nbsp; &nbsp;&nbsp; &nbsp;.else<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;.define _Target _String<br />&nbsp; &nbsp;&nbsp; &nbsp;.endif<br />&nbsp; &nbsp;.endif<br />.endmacro</div><br />Usage:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">ExtractLeft &quot;SomeString&quot;, Output, 4<br />.out Output<br />.undefine Output<br /><br />ExtractRight &quot;SomeString&quot;, Output, 6<br />.out Output<br />.undefine Output</div><br />Getting characters from the left is easy, .sprintf alone can do it, but getting them from the right was much trickier. The function calls itself recursively to build the final string character by character. Does anyone know of a better way to do this?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>calima</b> [ Wed Oct 18, 2017 2:35 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Not sure if it'd work in ca65, but in C sprintf you'd do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sprintf(foo, &quot;%.6s&quot;, &quot;SomeString&quot; + 4);<br /></div><br /><br />Dynamic length, etc left as an exercise to the viewer.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Oct 18, 2017 5:17 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">calima wrote:</div><div class="quotecontent">Not sure if it'd work in ca65, but in C sprintf you'd do<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sprintf(foo, &quot;%.6s&quot;, &quot;SomeString&quot; + 4);<br /></div></div><br />Doesn't work in ca65, strings are not pointers there.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>thefox</b> [ Wed Oct 18, 2017 7:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: ca65 goodies</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Strings are bit of second class citizens in ca65, so it's not uncommon to end up with hacks like that. Maybe new builtin functions (e.g., <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.strleft</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.strright</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.strmid</tt>) should be added to complement <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.left</tt>, <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.right</tt> and <tt style="margin-left: 2px; margin-right: 2px; padding:3px; background-color: #3355aa; color: white;">.mid</tt>. The macro you gave might expand to quite inefficient code (not exactly sure when ca65 evaluates certain parts of it).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>