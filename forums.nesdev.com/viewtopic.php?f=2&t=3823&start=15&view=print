<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Rendering enabled after the end of VBlank x Sprites</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Rendering enabled after the end of VBlank x Sprites</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3823">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=3823</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>BMF54123</b> [ Fri Feb 08, 2008 3:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />FCEU hides them by *default*. I'm pretty sure he enabled them for that shot.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 08, 2008 6:32 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">It looks like there is room for a whole block on the "blank" top side, and a block is 16 pixel. Since you say FCEU hides the to 8 pixels, that means that you have 24 pixels blanked, not 16, what am I missing ?</div>
<br />For one thing, the number of hidden scanlines is a user option.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 08, 2008 6:44 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, while testing I like to see the whole image. I just enable cropping when playing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Wed Feb 13, 2008 11:35 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi guys. Sorry to get back to this, but after some more testing on my NES I got to verify that I have not achieved the perfect 16-pixel top border that I expect.
<br />
<br />In the last blank scanline (that is scanline 15), it's possible to see what looks like 8 pixels of junk. It must have to do with sprites, because the background is not yet enabled then.
<br />
<br />I'd like to ask you guys that know a lot about PPU timing to help me out with this. So please think with me for a bit: When VBlank starts, there are 20 scanlines of it. Then comes the pre-render scanline, and then rendering starts. Since I want to eat 16 scanlines of the rendering time, that's 37 scanlines for all my PPU updating madness.
<br />
<br />But since I have to enable sprite rendering 1 scanline earlier, so that they do show up on scanline 16, I have in fact 36 scanlines before I have to enable them. 36 scanlines translate to 4092 CPU cycles.
<br />
<br />However, if I do use that many cycles (including the time it takes to write the value that enables rendering to $2001), I end up enabling sprites too late. I know it takes 7 cycles for the NMI to be called, and that it will wait for the current instruction to finish before that, but even if my code takes 4082 it's still too much. I'm getting what seems the correct results with 4076 cycles, but that seems wrong... am I missing something?
<br />
<br />Note that I'm using the grayscale bit to know when exactly I'm enabling the sprites, since Nintendulator seems to give a damn about where exactly I enable them, because even when changing the timing a lot they never seem to change. In fact, I was afraid that some sprites would be displayed while others would not bocause of the order in which they are evaluated, so I made the program put the test sprite in different locations of the OAM every frame, so that I could see if some of them were dropped, but that never happened.
<br />
<br />Also, what would be the best time inside a scanline to enable sprites? Since I want them to be visible on scanline 16, would it be OK to enable them at the very end of scanline 14? Or could that be the reason I'm getting junk at the start of scanline 15? Maybe it has something to do with the way the sprites are evaluated...
<br />
<br />Anyway, any help is appreciated. I would hate having to guess the correct amount of cycles based on trial and error (specially if the results don't match what I think would be right).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Feb 14, 2008 1:42 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I would hate having to guess the correct amount of cycles based on trial and error (specially if the results don't match what I think would be right).</div>
<br />Personally I always do trial and error when I do timed code/midframe changes. I don't know when exactly you should enable your sprites for them to be evaluated correctly, I'm pretty sure Quietust knew all this thing by heart but he's gone now...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 15, 2008 8:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Know what? Fuck the MMC1. I'm spending so much time worrying about this timing shit that I never get to work on the actual game, for which I already have a lot of code but can't test until the basics have been finished.
<br />
<br />Enabling rendering late is a pain in the ass. Disabling it earlier is not that much better, because of crappy scanline counters (MMC3) and glitchy-looking, unreliable sprite 0 hits.
<br />
<br />I'm looking into using CHR-ROM, but I really really need to work with 8 1KB banks, and the (crappy) MMC3 won't allow this. But even if I get rid of the task of writing the tiles to CHR-RAM, not blanking part of the rendered frame will expose vertical scrolling glitches. Unless I use 4-screen mirroring, but not many carts have that.
<br />
<br />Fuck that. I'll pick whatever mapper suits the game better, even if it's not that common or easy to reproduce. The FME-7 seems just perfect for this. Will think a bit more.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Fri Feb 15, 2008 9:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I don't see any reason to not go with the FME7, yeah it's not a common NES mapper but there's the PowerPak now.. Also the M2 counter just works unlike the scanline counters and it's more versatile. It's not even too hard to use it for scanline counting, I think the best way is to make a scanline lookup table with M2 values. Unless you're trying to interrupt on every scanline it shouldn't be too difficult to time correctly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Fri Feb 15, 2008 10:26 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In addition, a CPU cycle counter would allow your code to turn off the screen early and take advantage of the post-render scanline.
<br />
<br />If you make a <a href="http://en.wikipedia.org/wiki/Fangame" class="postlink">fan game</a> that uses the original game's copyrighted characters, you probably won't be able to sell it. But the good news is that you don't need to worry about selling it. So you can go ahead and put in FME-7 or a similarly powerful mapper, as most players will experience it through an emulator anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Feb 15, 2008 11:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Yeah, I agree with you both. I was kinda thinking along those lines. I just wanna get the basic "kernel" (as the Atari 2600 programmers say) out of the way so that I can concentrate on the real stuff (object programming, animation and so on).
<br />
<br />If I do use the FME-7, I might want to get myself one of those Batman carts, otherwise I'd feel bad about trying it on the NES with just the PowerPak. Does the PP even support this mapper? I *think* it does, because I kinda remember playing the Batman game with it.
<br />
<br />I'm still considering the MMC3 though (only bankswitching, no scanline counting), I'll probably have decided by tomorrow.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Feb 16, 2008 2:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Well, do as you wish, but I really don't see why the beef with the MMC1. Also you shouldn't get even if there is 3 glitchy pixels on the screen or something, because this happens often on the NES. It's possible to have sprite-zero hit without any glitches, but this sometimes makes restrictions in the level.
<br />
<br />
<br />By the way, to answer your previous question, Battletoads seems to enable sprites one scanline before BG, and do both $2001 writes during HBlank if that helps you. I haven't heary anything about sprites glitch because of this, but I don't own the real thing. Seeing how many Battletoads fans are arround, if there were a glitch it'd probably be known by now.
<br />
<br />If you don't blank any scanline, and only use NTSC systems where top and bottom lines are hidden, it's possible to do multidirectionnal scrolling (without a status bar) without any glitches at all.
<br />
<br />You definitely couldn't be a programmer at Rare, where they did awesome things with the worst mapper to code for, mapper 7. MMC1 is way more powerfull than this mapper, and MMC3 is even more powerfull in some respects (altrough it lacks the flexibility of MMC1 when it comes to bankswitching and mirroring). Personally I like the spirit of doing the most thing possible on a basic mapper. You'll see, when my mapper 3 game will be released (if this ever happens) everyone won't belive it, you'll all be saying "hey that's impossible it looke like MMC3 !". No I'm just kidding here.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Feb 16, 2008 6:09 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">Yeah, I agree with you both. I was kinda thinking along those lines. I just wanna get the basic "kernel" (as the Atari 2600 programmers say) out of the way so that I can concentrate on the real stuff (object programming, animation and so on).</div><br />Or you can prototype some of the game logic on a PC using <a href="http://alleg.sf.net/" class="postlink">a PC-native graphics library</a>, and then port it to the NES once you feel you have the kernel working. I've used that technique for each of my major GBA productions. (Granted, it's easier on the GBA because the GBA has a reasonable C compiler.)<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I'm still considering the MMC3 though (only bankswitching, no scanline counting), I'll probably have decided by tomorrow.</div>
<br />Are you going to do it SMB2/SMB3 style (2 KiB BG banks, 1 KiB sprite banks) or Kirby style (1 KiB BG banks, 2 KiB sprite banks)?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Feb 16, 2008 8:14 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or you can prototype some of the game logic on a PC using a PC-native graphics library, and then port it to the NES once you feel you have the kernel working. I've used that technique for each of my major GBA productions.</div>
<br />Interesting technique, but isn't writing + conveting more work than just writing ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Sat Feb 16, 2008 10:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent"><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Or you can prototype some of the game logic on a PC using a PC-native graphics library, and then port it to the NES</div><br />Interesting technique, but isn't writing + conveting more work than just writing ?</div>
<br />Not if the productivity gains from writing in a more forgiving environment first outweigh the costs of porting. There's a reason that <a href="http://en.wikipedia.org/wiki/Klax_%28video_game%29" class="postlink">Midway's Klax</a> was prototyped in Amiga Basic and then ported to NES.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Feb 16, 2008 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To elaborate on tepples' point, when coding on the PC, you have essentially infinite memory and processing power for implementing NES-class games. You have high-level languages, good debuggers, ability to profile design in many ways, easy setup of graphics, etc. This allows easy experimentation with alternate designs and design changes. Once the design is finalized, then you can pay the cost of carefully coding that in 6502 asm for the NES. You can be more confident that the design won't change drastically, allowing more work on optimization.
<br />
<br />It would be neat to prototype the design on a PC using a NES emulator for the graphics, having your high-level code do PPU and MMC3 writes. The timing constraints wouldn't be there, but everything else would. You could try different ideas for when to write things, even things impossible on the NES (which, like imaginary numbers, might be part of the mental path to a real solution that works on the NES).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Feb 16, 2008 1:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Are you going to do it SMB2/SMB3 style (2 KiB BG banks, 1 KiB sprite banks) or Kirby style (1 KiB BG banks, 2 KiB sprite banks)?</div>
<br />At first I considered going SMB style. But then I figured it would work better the other way around, like Kirby.
<br />
<br />The main reason for that is that I will be animating the background through bankswitching. Monitors and rings (constant objects) have a common animation rate and number of frames, and as long as there are 3 other background "slots", other (level-specific) things could be animated differently.
<br />
<br />Sprites usually don't need that sort of cycled animation (the few ones that do could be placed in the background area because I'm using 8x16 sprites), instead they need to use a specific CHR bank depending on what they are doing. That is specially true for the main character.
<br />
<br />The bad thing is that I sure couldn't set aside a full 128-tile chunk just for the main character, leaving only 128 for the HUD, enemies, explosions, and so on. So this is where a lot of redundance is necessary. Since I have a sort of 16-tile limit for each main character frame, I could fit 4 of it's frames in 1KB of CHR-ROM, while the other half of the bank (the other 1KB) would hold all the HUD stuff (which can vary depending on the selected character: the life icon, for example), explosions, a few items... Thismeans that this 1KB would have to be repeated for every 4 frames of the main character.
<br />
<br />So if I have 96 frames for the main character (though I don't think it'll be that many), that 1KB of constant sprites would have to be repeated 24 times. Quite a waste, but it's the best I could think of. The other half of the sprite side would hold level-specific sprites, and since Sonic enemies are not that complex, I doubt I'd have to animate that part at all.
<br />
<br />There is also the issue of the ending sign, bosses, animal containers, things that should only be loaded by the end of the levels. The bosses could very well have their graphics loaded in place of the level enemies, and since bosses are level-specific, they may even keep some of the tiles used along the level if they need too.
<br />
<br />The animal container is drawn with background tiles, so at least one of the 1KB slots should be replaceable. Bosses may also need background tiles, so this is even more necessary. And there will be this replaceable 1KB, the ending sign could use this as well.
<br />
<br />So, in the end, it goes something like this:
<br />
<br />SPRITE SLOTS:
<br />0: Main character, HUD, explosions, etc;
<br />1: Level-specific, replaced by boss;
<br />
<br />BACKGROUND SLOTS:
<br />0: Constant objects (monitor, lamp post, ring, etc);
<br />1: Level-specific;
<br />2: Level-specific;
<br />3: Level-specific, replaced at the end (by bosses, end sign or animal container);
<br />
<br />Does anyone have a better idea? With full 1KB bankswitching (FME-7, for example) it would be posible to make the sprite side a bit more versatile, but I don't think this is such an issue right now. With 256KB of CHR-ROM, that redundance problem isn't really a problem (even with 96 frames of animation for both characters, there'd still be 160KB for everything else).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>4</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>