<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - zp scope and parameter management with ca65 macros.</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">zp scope and parameter management with ca65 macros.</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16310">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=16310</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>GradualGames</b> [ Sun Aug 06, 2017 7:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>zp scope and parameter management with ca65 macros.</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I thought I'd share some more macro stuff I've been doing. I continue to use some of zp for parameters and scratch space. I came up with some macros which basically assign equates to a series of byte or word locations in zp so I can have &quot;local variables&quot; inside of routines. I have a corresponding macro which copies parameters into zp.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;This macro can be used to automatically enumerate local equates within a routine<br />;to line up with bytes or words in zp. ZP prefix should be &quot;w&quot; or b&quot; so that the<br />;symbols passed in can be associated with b0, b1, b2 etc. or w0, w1, w2, etc.<br />;Any time inner routines also use this macro, care should be taken to leave space<br />;for the inner routine's zp scope by leaving the first n parameters blank.<br />.macro zp_equates zp_prefix,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate0,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate1,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate2,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate3,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate4,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate5,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate6,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate7,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate8,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate9,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate10,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate11,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate12,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate13,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate14,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate15,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate16,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate17,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate18,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equate19<br /><br />&nbsp; &nbsp; .ifnblank equate0<br />&nbsp; &nbsp; &nbsp; &nbsp; equate0 = .ident(.concat(.string(zp_prefix), &quot;0&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate1<br />&nbsp; &nbsp; &nbsp; &nbsp; equate1 = .ident(.concat(.string(zp_prefix), &quot;1&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate2<br />&nbsp; &nbsp; &nbsp; &nbsp; equate2 = .ident(.concat(.string(zp_prefix), &quot;2&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate3<br />&nbsp; &nbsp; &nbsp; &nbsp; equate3 = .ident(.concat(.string(zp_prefix), &quot;3&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate4<br />&nbsp; &nbsp; &nbsp; &nbsp; equate4 = .ident(.concat(.string(zp_prefix), &quot;4&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate5<br />&nbsp; &nbsp; &nbsp; &nbsp; equate5 = .ident(.concat(.string(zp_prefix), &quot;5&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate6<br />&nbsp; &nbsp; &nbsp; &nbsp; equate6 = .ident(.concat(.string(zp_prefix), &quot;6&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate7<br />&nbsp; &nbsp; &nbsp; &nbsp; equate7 = .ident(.concat(.string(zp_prefix), &quot;7&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate8<br />&nbsp; &nbsp; &nbsp; &nbsp; equate8 = .ident(.concat(.string(zp_prefix), &quot;8&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate9<br />&nbsp; &nbsp; &nbsp; &nbsp; equate9 = .ident(.concat(.string(zp_prefix), &quot;9&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate10<br />&nbsp; &nbsp; &nbsp; &nbsp; equate10 = .ident(.concat(.string(zp_prefix), &quot;10&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate11<br />&nbsp; &nbsp; &nbsp; &nbsp; equate11 = .ident(.concat(.string(zp_prefix), &quot;11&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate12<br />&nbsp; &nbsp; &nbsp; &nbsp; equate12 = .ident(.concat(.string(zp_prefix), &quot;12&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate13<br />&nbsp; &nbsp; &nbsp; &nbsp; equate13 = .ident(.concat(.string(zp_prefix), &quot;13&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate14<br />&nbsp; &nbsp; &nbsp; &nbsp; equate14 = .ident(.concat(.string(zp_prefix), &quot;14&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate15<br />&nbsp; &nbsp; &nbsp; &nbsp; equate15 = .ident(.concat(.string(zp_prefix), &quot;15&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate16<br />&nbsp; &nbsp; &nbsp; &nbsp; equate16 = .ident(.concat(.string(zp_prefix), &quot;16&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate17<br />&nbsp; &nbsp; &nbsp; &nbsp; equate17 = .ident(.concat(.string(zp_prefix), &quot;17&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate18<br />&nbsp; &nbsp; &nbsp; &nbsp; equate18 = .ident(.concat(.string(zp_prefix), &quot;18&quot;))<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank equate19<br />&nbsp; &nbsp; &nbsp; &nbsp; equate19 = .ident(.concat(.string(zp_prefix), &quot;19&quot;))<br />&nbsp; &nbsp; .endif<br /><br />.endmacro<br /><br />;This macro can be used to copy byte or word zp parameters from elsewhere in zp<br />;to the bottom of the b0, b1, b2 or w0, w1, w2 etc. zp workspace area. The move8<br />;and move16 macros are invoked which in turn invoke ins_lo and ins_hi, which examine<br />;the names of the symbols and allow contiguous zp variables to be used as well as<br />;structures-of-arrays whose symbols begin with &quot;entity_&quot; and end with &quot;_lo&quot; or &quot;_hi.&quot;<br />.macro zp_params zp_prefix,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident0,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident1,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident2,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident3,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident4,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident5,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident6,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident7,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident8,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident9,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident10,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident11,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident12,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident13,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident14,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident15,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident16,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident17,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident18,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ident19<br /><br />&nbsp; &nbsp; .ifnblank ident0<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident0, .ident(.concat(.string(zp_prefix), &quot;0&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident0, .ident(.concat(.string(zp_prefix), &quot;0&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident1<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident1, .ident(.concat(.string(zp_prefix), &quot;1&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident1, .ident(.concat(.string(zp_prefix), &quot;1&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident2<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident2, .ident(.concat(.string(zp_prefix), &quot;2&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident2, .ident(.concat(.string(zp_prefix), &quot;2&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident3<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident3, .ident(.concat(.string(zp_prefix), &quot;3&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident3, .ident(.concat(.string(zp_prefix), &quot;3&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident4<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident4, .ident(.concat(.string(zp_prefix), &quot;4&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident4, .ident(.concat(.string(zp_prefix), &quot;4&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident5<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident5, .ident(.concat(.string(zp_prefix), &quot;5&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident5, .ident(.concat(.string(zp_prefix), &quot;5&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident6<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident6, .ident(.concat(.string(zp_prefix), &quot;6&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident6, .ident(.concat(.string(zp_prefix), &quot;6&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident7<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident7, .ident(.concat(.string(zp_prefix), &quot;7&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident7, .ident(.concat(.string(zp_prefix), &quot;7&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident8<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident8, .ident(.concat(.string(zp_prefix), &quot;8&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident8, .ident(.concat(.string(zp_prefix), &quot;8&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident9<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident9, .ident(.concat(.string(zp_prefix), &quot;9&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident9, .ident(.concat(.string(zp_prefix), &quot;9&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident10<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident10, .ident(.concat(.string(zp_prefix), &quot;10&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident10, .ident(.concat(.string(zp_prefix), &quot;10&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident11<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident11, .ident(.concat(.string(zp_prefix), &quot;11&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident11, .ident(.concat(.string(zp_prefix), &quot;11&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident12<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident12, .ident(.concat(.string(zp_prefix), &quot;12&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident12, .ident(.concat(.string(zp_prefix), &quot;12&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident13<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident13, .ident(.concat(.string(zp_prefix), &quot;13&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident13, .ident(.concat(.string(zp_prefix), &quot;13&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident14<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident14, .ident(.concat(.string(zp_prefix), &quot;14&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident14, .ident(.concat(.string(zp_prefix), &quot;14&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident15<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident15, .ident(.concat(.string(zp_prefix), &quot;15&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident15, .ident(.concat(.string(zp_prefix), &quot;15&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident16<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident16, .ident(.concat(.string(zp_prefix), &quot;16&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident16, .ident(.concat(.string(zp_prefix), &quot;16&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident17<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident17, .ident(.concat(.string(zp_prefix), &quot;17&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident17, .ident(.concat(.string(zp_prefix), &quot;17&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident18<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident18, .ident(.concat(.string(zp_prefix), &quot;18&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident18, .ident(.concat(.string(zp_prefix), &quot;18&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .ifnblank ident19<br />&nbsp; &nbsp; &nbsp; &nbsp; .if .xmatch({zp_prefix}, b)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move8 ident19, .ident(.concat(.string(zp_prefix), &quot;19&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .elseif .xmatch({zp_prefix}, w)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; move16 ident19, .ident(.concat(.string(zp_prefix), &quot;19&quot;))<br />&nbsp; &nbsp; &nbsp; &nbsp; .endif<br />&nbsp; &nbsp; .endif<br /><br />.endmacro<br /></div><br /><br />When routines call routines, to avoid stepping one each other's local scope, you just leave parameters blank, like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zp_params b, , , #2, #MAP_FLAG_EJECT_RIGHT<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zp_params w, , , , , , , , ,\&nbsp; &nbsp;; &lt;&lt;&lt;the empty spaces correspond to the scope of a routine called by the routine we're about to call<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #LEFT_POINT0_X, #LEFT_POINT0_Y,\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #LEFT_POINT1_X, #LEFT_POINT1_Y<br /></div><br /><br />Every so often I forget to do that, but it's a lot easier to maintain than manually assigning equates or zp locations within routines and stepping on each other. You just follow the pattern of using later and later spaces in zp for higher-level routines, and all you have to do is count how many bytes or words are reserved in the inner calls.<br /><br />I'd rather do this than work on a stack based system, because it results in code I would have manually written anyway---directly accessing zp, no index registers needed.<br /><br />I think I've heard of others using structs for similar purposes, but I'm not sure how you'd explicitly show that a given routine reserves space for the local variables of routines that it calls, the way this system does.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>