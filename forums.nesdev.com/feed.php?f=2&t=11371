<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=11371" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2014-11-05T07:55:56-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=11371</id>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-11-05T07:55:56-07:00</updated>
<published>2014-11-05T07:55:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136078#p136078</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136078#p136078"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136078#p136078"><![CDATA[
And with log, log10, exp. Surprisingly, they are much simplier than fmul and fdiv, just a bunch of jsr and loops. And, at the beginning of log, program gets exponent alone and converts it to float. And at end of exp he makes something opposite.<br /><br />I'm not sure if it even works correctly. I proceeded one large enough number through log and exp back and forth, it's not supposed to change, is it? e^ln(x) = x, right? Probably a typo somewhere.<br /><br />Still don't know what is actually goes on in there, a bunch of random fadd and fmul and fdiv and fmul, it doen't make sense for me.<br /><br />Edit: I feel like this is time then I should start reading Knuth.<br /><br />Edit2:<br />So, according to this code, if<br />x1=2^exp+1.mnt<br />then<br />T=(mnt-SQRT(2))/(mnt+SQRT(2))<br />ln(x1)=( (-2.6398577/(T*T-1.6567626)+1.2920074)*T +0.5 +exp )*LN(2)<br />Does it make any sense for you? For me it surely doesn't.<br />And why they preferred to use FSUB with C, instead of placing negative of C in code and using FADD? They only use C once anyway.<br /><br />Edit3:<br /><!-- m --><a class="postlink" href="http://maxwellsci.com/print/rjaset/v6-119-122.pdf">http://maxwellsci.com/print/rjaset/v6-119-122.pdf</a><!-- m --><br />&gt;The logarithm is widely implemented with: Table lookup method, Taylor series expansion method and linear approximation method.<br />This surely isn't the CORDIC, since it doesn't restrict itself only to add and shift. And isn't the table lookup method or the taylor series expansion method, since it doesn't use tables.<br /><br />Edit4:<br /><!-- m --><a class="postlink" href="http://math.stackexchange.com/questions/1010405/please-recognise-this-natural-log-calculation-algorithm">http://math.stackexchange.com/questions ... -algorithm</a><!-- m --><br />I love them.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Wed Nov 05, 2014 7:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-11-04T09:04:59-07:00</updated>
<published>2014-11-04T09:04:59-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136023#p136023</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136023#p136023"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136023#p136023"><![CDATA[
Not sure if any assemblers support this format, but Applesoft BASIC uses a 5-byte floating point format.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Tue Nov 04, 2014 9:04 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-11-04T08:45:24-07:00</updated>
<published>2014-11-04T08:45:24-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136022#p136022</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136022#p136022"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136022#p136022"><![CDATA[
I just realised, those numbers are in format that is probably used only by this code. Still curious if whatever those guys at Apple used does actually support this keyword.<br /><br />Ok, put it in as .db chain.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Tue Nov 04, 2014 8:45 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[thefox]]></name></author>
<updated>2014-11-04T07:21:56-07:00</updated>
<published>2014-11-04T07:21:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136020#p136020</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136020#p136020"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136020#p136020"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />To use undocumented instructions you usually have to use .db and .dw statements. Look up the opcode for the instruction (considering the addressing mode) in a document like <a href="http://www.ffd2.com/fridge/docs/6502-NMOS.extra.opcodes" class="postlink">this</a>, and use .db followed by that value. Then comes the address or immediate value, which can be 8 or 16 bits long, so use .db or .dw accordingly.<br /></div><br />Those aren't undocumented instructions, they are floating point values. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /> I'm not aware of any assembler that supports them. Maybe a macro hackery based on a string could be possible on some assemblers.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=80">thefox</a> — Tue Nov 04, 2014 7:21 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-11-04T06:56:52-07:00</updated>
<published>2014-11-04T06:56:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136017#p136017</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136017#p136017"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136017#p136017"><![CDATA[
To use undocumented instructions you usually have to use .db and .dw statements. Look up the opcode for the instruction (considering the addressing mode) in a document like <a href="http://www.ffd2.com/fridge/docs/6502-NMOS.extra.opcodes" class="postlink">this</a>, and use .db followed by that value. Then comes the address or immediate value, which can be 8 or 16 bits long, so use .db or .dw accordingly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Tue Nov 04, 2014 6:56 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-11-04T03:57:17-07:00</updated>
<published>2014-11-04T03:57:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136013#p136013</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136013#p136013"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=136013#p136013"><![CDATA[
Anyone knows how to make these work in 6502 simulator? It doesn't support &quot;DCM&quot; instruction, it seems.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">1DCD  7E 6F     LN10   DCM 0.4342945<br />      2D ED<br />1DD1  80 5A     R22    DCM 1.4142136   SQRT(2)<br />      02 7A<br />1DD5  7F 58     LE2    DCM 0.69314718  LOG BASE E OF 2<br />      B9 0C<br />1DD9  80 52     A1     DCM 1.2920074<br />      80 40<br />1DDD  81 AB     MB     DCM -2.6398577<br />      86 49<br />1DE1  80 6A     C      DCM 1.6567626<br />      08 66<br />1DE5  7F 40     MHLF   DCM 0.5<br />      00 00</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Tue Nov 04, 2014 3:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-11-03T11:50:36-07:00</updated>
<published>2014-11-03T11:50:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=135958#p135958</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=135958#p135958"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=135958#p135958"><![CDATA[
Now with fsub, fmul, fdiv and fix.<br /><br />I think these kind of things are better to read this way, from short to complex. So, I will post them slowly growing up, step by step.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Mon Nov 03, 2014 11:50 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-10-15T04:28:01-07:00</updated>
<published>2014-10-15T04:28:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=135087#p135087</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=135087#p135087"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=135087#p135087"><![CDATA[
And new version, this time with add. Wait a few years, and I will get to the interesting stuff.<br /><br />God, retyping stuff is so hard.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Wed Oct 15, 2014 4:28 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-07-05T06:03:50-07:00</updated>
<published>2014-07-05T06:03:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130669#p130669</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130669#p130669"/>
<title type="html"><![CDATA[Re: [talking with myself] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130669#p130669"><![CDATA[
First - you guys are awesome.<br /><br />Second - I'm playing with function &quot;float&quot; now. And trying to comment. Look if you have nothing better to do.<br /><br />Emulator's editor and this forum's formatter have different tab lengths, so it's not pretty...<br /><br />The first part is commented out, because with it, execution starts from adress $0.<br /><br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">;   .org $0<br />;   .db 0,0,0   ;not used?<br />;sign:   .db $ea<br />;x2:   .db $ea      ;exponent 2<br />;m2:   .db 0,0,0   ;mantissa 2<br />;x1:   .db $ea<br />;m1:   .db 0,0,0<br />;e:   .db 0,0,0,0   ;scratch<br />;z:   .db 0,0,0,0<br />;t:   .db 0,0,0,0<br />;sexp:   .DB 0,0,0,0<br />;int:   .db 0<br /><br /><br />sign = $3<br />x2 = $4<br />m2 = $5<br />x1 = $8<br />m1 = $9<br />e = $c<br />z = $10<br />t = $14<br />sexp = $18<br />int = $1c               <br /><br />   .org $600<br /><br />io_putc   = $e001<br />io_posx   = $e005<br />io_posy   = $e006<br /><br />   ;LDA #9<br />   ;STA io_posx<br />   ;LDA #2<br />   ;STA io_posy<br /><br />   ; print 'aaa'<br />   ;LDA #'a'<br />   ;STA io_putc<br />   ;STA io_putc<br />   ;STA io_putc<br /><br />   ; SET 16 BIT INTEGER<br />   LDA #$0<br />   STA m1      ;HIGH<br />   LDA #$03<br />   STA m1+1   ;low<br />   <br />   ; CONVERT 16 BIT INTEGER TO 32 BIT FLOAT<br />   JSR float<br />   <br /><br />   BRK<br />   <br />   ;;;;;;;;;;;;;;;;;;;;FLOAT;;;;;;;;;;;;;;;;;;<br />   ;CONVERT 16 BIT INTEGER IN M1(HIGH) AND M1+1(LOW) TO F.P.<br />        ;RESULT IN EXP/MANT1.  EXP/MANT2 UNEFFECTED<br />        <br />        ;So... how it works.<br />        ;It sets exponent to $e (maximal possible for 16bit input)<br />        ;and &#91;dec exponent,<br />        ;     shiftleft 3byte mantissa bit by bit&#93;<br />        ;untill done.<br />        <br />        ;examples of output:<br />        ; 00 01 -&gt; 80 40 00 00<br />        ; 00 02 -&gt; 81 40 00 00<br />        ; 00 03 -&gt; 81 60 00 00<br />        ; 00 41 -&gt; 86 41 00 00<br />        ; 41 00 -&gt; 8e 41 00 00<br />        ; 00 81 -&gt; 87 40 80 00<br />        ; 40 00 -&gt; 8e 40 00 00<br />        <br />        ; NEGATIVE VALUES!<br />        ; 80 00 -&gt; 8e 80 00 00 ;finally mant. starts from 8<br />        ; ff ff -&gt; 7f 80 00 00 ;negative?<br />        ; 8f ff -&gt; 8e 8f ff 00 ;didn't quite get this<br />        ;            ;&quot;complement&quot; mantissa<br />        ; 00 00 -&gt; 00 00 00 00 ;and it loops a lot <br />                    ;(until exp decs to 0)<br />        <br />float:   LDA #$8e   ;init $08 and $0b ($09 and $0a should've been<br />            ;set by you already)<br />   STA x1      ;set exponent to 14dec ($0e in hex)<br />   LDA #0      ;clear most right byte<br />   STA m1+2   ;/init<br />   BEQ norm   ;normalize result<br />   ; Jump is always taken. Zero flag is set by LDA #0.<br />   ; They used BEQ insead of JMP because it supports relative<br />   ; addressing mode, and so takes one byte less.<br />norm1:   DEC x1      ;decrease exponent by one<br />         ; SHIFT!<br />   ASL m1+2   ;     carry &lt;- &#91;$0b&#93; &lt;- 0<br />            ;WAIT, isn't &#91;$0b&#93; always zero?<br />            ;*proud* *proud*<br />   ROL m1+1   ;     carry &lt;- &#91;$0a&#93; &lt;- carry<br />   ROL m1      ; who cares &lt;- &#91;$09&#93; &lt;- carry<br />norm:   LDA m1      ; huh...<br />   ASL      ; ...continue until...<br />   EOR m1      ; ...left two bits of mantissa are...<br />   BMI rts1   ; ...either 10 or 01.<br />         ; 10 is for negative floats<br />   LDA x1      <br />   BNE norm1   ; or until we got all zeroes<br />rts1:   RTS      ;return! Finally!<br /></div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Sat Jul 05, 2014 6:03 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2014-07-01T16:20:08-07:00</updated>
<published>2014-07-01T16:20:08-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130504#p130504</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130504#p130504"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130504#p130504"><![CDATA[
<div class="quotetitle">michikaze wrote:</div><div class="quotecontent"><br />......Please let me to stare at this for a few more days, I'll get this for sure......<br />Don't get that those numbers in the array are.<br /></div>Perhaps an example might serve to illustrate the scheme.<br /><br />The factorization here is analogous to the positional number system. Imagine that you wanted to encode any number <em>1≤x&lt;2</em> by hand as a binary fraction. You might start with 1, then successively add further smaller terms. If the result is still larger after adding a term then include it (a one bit), otherwise omit it and move on (a zero bit).<br /><br />Let's pick <em>x=1.4142</em>:<div class="codetitle"><b>Code:</b></div><div class="codecontent">1+2^-1                          = %1.1      = 1.5 &gt; x, so omit the 2^-1 term<br />1     +2^-2                     = %1.01     = 1.25 &lt; x, so include the 2^-2 term<br />1     +2^-2+2^-3                = %1.011    = 1.375 &lt; x, so include the 2^-3 term<br />1     +2^-2+2^-3+2^-4           = %1.0111   = 1.4375 &gt; x, so omit the 2^-4 term<br />1     +2^-2+2^-3     +2^-5      = %1.01101  = 1.40625 &lt; x, so include the 2^-5 term<br />1     +2^-2+2^-3     +2^-5+2^-6 = %1.011011 = 1.421875 &gt; x, so omit the 2^-6 term</div>This is a variant of binary search. At each step the approximation grows more precise, rapidly converging on the true value one bit at a time.<br /><br />Instead of using a sum of <em>2^-i</em> terms Feynman's algorithm uses a product of <em>1+2^-i</em> factors to encode the number:<div class="codetitle"><b>Code:</b></div><div class="codecontent">1·(1+2^-1)                                               = 1.5 &gt; x, so omit the 1+2^-1 factor<br />1         ·(1+2^-2)                                      = 1.25 &lt; x, so include the 1+2^-2 factor<br />1         ·(1+2^-2)·(1+2^-3)                             = 1.40625 &lt; x, so include the 1+2^-3 factor<br />1         ·(1+2^-2)·(1+2^-3)·(1+2^-4)                    = 1.494140625 &gt; x, so omit the 1+2^-4 factor<br />1         ·(1+2^-2)·(1+2^-3)         ·(1+2^-5)           = 1.4501953125 &gt; x, so omit the 1+2^-5 factor<br />1         ·(1+2^-2)·(1+2^-3)                  ·(1+2^-6)  = 1.42822265625 &gt; x, so omit the 1+2^-6 factor</div>In this case it is less apparent that any <em>x</em> in the range is reachable. The base 2 used here is in fact sub-optimal but is close enough to the ideal one (~2.2656) while being easily evaluated through shifts and adds. In general smaller bases are finer grained, meaning that the results converge more slowly, whereas larger bases have unreachable gaps in the output.<br /><br />The point of all this is to make use of the logarithmic identity which lowers multiplication into addition, e.g. <em>log(p*q) = log p + log q</em>. Therefore if we can factorize <em>x</em> into a series of <em>1+2^-1</em> factors then <em>log x</em> is simply the sum of the logarithms of the included factors.<br />In our example <em>y = 1·(1+2^-2)·(1+2^-3) ≈ x</em>, therefore <em>log x ≈ log y = log(1·(1+2^-2)·(1+2^-3)) = log 1 + log(1+2^-2) + log(1+2^-3)</em>.<br /><br />This is in fact what the table in the code above is all about. A table of pre-calculated 1+2^-i logarithms. Binary logarithms in fixed-point to be precise, e.g. <em>log2(1+2^-1) · 2^15 ≈ 19168</em>.<br /><br /><div class="quotetitle">michikaze wrote:</div><div class="quotecontent"><br />Hey, google showed something funny:<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The Feynman Algorithm:<br />    Write down the problem.<br />    Think real hard.<br />    Write down the solution.<br /></div></div>Good advice. He was active in a different field so I suppose I should have called it Feynman's logarithm algorithm to help your Google efforts but <em>logarithm algorithm</em> sounds somehow redundant to me, even though I know the etymologies are quite distinct.<br /><br />I apologize for these half-on-topic ramblings but I'm a sucker for elegant algorithms and this one certainly qualifies. Despite its original application.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Tue Jul 01, 2014 4:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-07-01T08:40:19-07:00</updated>
<published>2014-07-01T08:40:19-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130494#p130494</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130494#p130494"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130494#p130494"><![CDATA[
<div class="quotetitle">doynax wrote:</div><div class="quotecontent"><br />Feynman's algorithm<br /></div><br />......Please let me to stare at this for a few more days, I'll get this for sure......<br />Don't get that those numbers in the array are.<br /><br />Hey, google showed something funny:<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The Feynman Algorithm:<br /><br />    Write down the problem.<br />    Think real hard.<br />    Write down the solution.<br /><br />The Feynman algorithm was facetiously suggested by Murray Gell-Mann, a colleague of Feynman, in a New York Times interview.<br /></div><br /><br />Now retyping the code to get it running in the emulator, please watch warmly.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Tue Jul 01, 2014 8:40 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[doynax]]></name></author>
<updated>2014-06-30T09:55:52-07:00</updated>
<published>2014-06-30T09:55:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130455#p130455</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130455#p130455"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130455#p130455"><![CDATA[
Looks more like a couple of iterations of some other numerical method to me, though I must confess to being to lazy (and/or stupid) to decipher it. In any event Feynman's algorithm is probably faster and certainly easier to understand than CORDIC, though it boils down to a suspiciously similar shift-and-add sequence.<br /><br />Let's say you want to compute the base-2 logarithm of <em>1≤x&lt;2</em>. This is easily generalized to any binary floating-point number by computing the logarithm of the normalized mantissa and adding the exponent (plus one) to the result. The trick, then, is to factorize <em>x</em> into a series of <em>1+2^-i</em> factors. That is we start with <em>y=1</em> and from <em>i=0</em> on down successively multiply by <em>1+2^-i</em>, keeping the new factor if the result does not exceed <em>x</em>. Note that these multiplications may be implemented through shift-and-add, e.g. <em>y'=y&gt;&gt;i</em>.<br /><br />The logarithm <em>y</em> is then simply the sum of the logarithms of all individual <em>1+2^-i</em> factors which may be pre-calculated and stored in a table.<br /><br />Here's a quick-and-dirty C implementation in 1.15-bit fixed-point:<div class="codetitle"><b>Code:</b></div><div class="codecontent">unsigned int feynlog(unsigned int x) {<br />   static const unsigned int tab&#91;&#93; = {<br />      /* i=1  */ 19168, /* i=2  */ 10549,<br />      /* i=3  */ 5568,  /* i=4  */ 2866,<br />      /* i=5  */ 1455,  /* i=6  */ 733,<br />      /* i=7  */ 378,   /* i=8  */ 184,<br />      /* i=9  */ 92,    /* i=10 */ 46,<br />      /* i=11 */ 23,    /* i=12 */ 12,<br />      /* i=13 */ 6,     /* i=14 */ 3,<br />      /* i=15 */ 1,     /* i=16 */ 1<br />   };<br />   unsigned int y = 32768;<br />   unsigned int z = 0;<br />   for(unsigned int i = 1; i &lt; 16; ++i) {<br />      unsigned int t = y + (y &gt;&gt; i);<br />      if(t &lt;= x) {<br />         y = t;<br />         z += tab&#91;i - 1&#93;;<br />      }<br />   }<br />   return z;<br />}</div><br />As for uses the most frequent on the 6502 is probably to speed up multiplication and division, much as a human would use a slide-rule, though typically you'd store pre-calculated logarithm and exponent tables rather than computing them at start-up.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=56">doynax</a> — Mon Jun 30, 2014 9:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2014-06-29T05:54:20-07:00</updated>
<published>2014-06-29T05:54:20-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130384#p130384</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130384#p130384"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130384#p130384"><![CDATA[
<a href="https://en.wikibooks.org/wiki/Digital_Circuits/CORDIC" class="postlink">&quot;CORDIC&quot; in the Digital Circuits textbook on Wikibooks</a> explains how it's generalized to exp and log.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sun Jun 29, 2014 5:54 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[michikaze]]></name></author>
<updated>2014-06-29T01:00:45-07:00</updated>
<published>2014-06-29T01:00:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130377#p130377</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130377#p130377"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130377#p130377"><![CDATA[
<div class="quotetitle">tepples wrote:</div><div class="quotecontent"><br />CORDIC<br /></div><br />Nice, thank you!<br />From wikipedia page I got only how to calculate sine and cosine. But it also methoned that it can be used for exponential functions and logarithms. Huh...<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br />6502 Simulator<br /></div><br />Nice, thank you! Going to try soon.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=6581">michikaze</a> — Sun Jun 29, 2014 1:00 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2014-06-28T10:58:07-07:00</updated>
<published>2014-06-28T10:58:07-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130364#p130364</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130364#p130364"/>
<title type="html"><![CDATA[Re: [lazy] Can't get this floating point code]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=11371&amp;p=130364#p130364"><![CDATA[
<div class="quotetitle">michikaze wrote:</div><div class="quotecontent"><br />I want to look at this code in fceux's debugger.<br /></div><br />That would require you to build a valid NES ROM around the code. May I suggest this <a href="http://www.exifpro.com/utils.html" class="postlink">6502 Simulator</a> instead? It has some nice debugging features and you can easily get code running with jus an ORG statement indicating where the code should be located in memory.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Sat Jun 28, 2014 10:58 am</p><hr />
]]></content>
</entry>
</feed>