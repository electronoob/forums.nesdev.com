<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - binary to decimal</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">binary to decimal</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=208">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=208</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Sat Aug 27, 2005 3:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Well, no need to make a post to say you weren't logged in, I saw it. This personally never happened to me yet, and I ask myself why this happen so often to everyone else.<br /></div>
<br />
<br />That happens to me all the time.  I'll be on the main index and be logged in, and can see which forums have new posts.  Then I click on a forum, and suddenly I'm a 'guest'.  So I log in again, and it acts like I've already read all the new posts (very annoying, because I often find myself missing some posts that way, usually only noticing it once there's another reply).  It's odd though, because it never happens to me on any other forum using phpBB.
<br />
<br />/end OT rant
<br />
<br />This binary to decimal code sounds pretty nice.  I know I'd prefer a technique that always takes the same amount of cycles, I think it's best to optimize for the worst-case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Aug 27, 2005 5:16 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Memblers wrote:</div><div class="quotecontent">That happens to me all the time.  I'll be on the main index and be logged in, and can see which forums have new posts.  Then I click on a forum, and suddenly I'm a 'guest'.</div><br />Well, I think there is a checkbox when you log in that should be thicked if you want to "automatically" log-in. Of course, you can't do this at work or something, but you can on your home computer. Else, bugs and stuff should be reported to the phpBB team.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">So I log in again, and it acts like I've already read all the new posts (very annoying, because I often find myself missing some posts that way, usually only noticing it once there's another reply).  It's odd though, because it never happens to me on any other forum using phpBB.</div><br /><strong>This</strong> happens to me very often. I'm just logged in, see a new post, go to it, then read it and possibly aswer to it, but when I come back, sometimes all others new post aren't marked as new anymore, sometimes not. It's really crap, effectively.<br />Another crap thing is that sometimes it shows a new post, but actually the new post is just mine.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">This binary to decimal code sounds pretty nice.  I know I'd prefer a technique that always takes the same amount of cycles, I think it's best to optimize for the worst-case.</div>
<br />Well, I think it's better to be short sometimes and medium sometimes than long anyway.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sat Aug 27, 2005 10:56 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Worst-case performance is what matters most, because it's what determines whether you have slow-down in a game (unless you can guarantee that worst-case performance of one routine always occurs during the best-case performance of another). For real-time applications, you don't mind reducing best-case performance if it increases worst-case.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 27, 2005 1:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If anyone is curious, this is the 8-bit routine, unrolled and optimized as far as I could so far. There are no conditional branches, so execution time is constant - around 150 cycles (I say around because there is the set-up, returning and all and I'm never really sure if we should count these in when measuring cycles). I have not bothered to make it as a subroutine yet, I'm just doing things directly for now, for testing purposes.
<br />
<br />This runs faster than the worst case of Bregalad's routine (only a little bit faster), but still much slower than it's best case.
<br />
<br />If anyone wants to try, here it is (it is quite longer when unrolled!):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">BNUM = $00 ;8-bit binary number.<br />DNUM = $01 ;3-digit decimal number.<br /><br />&nbsp; &nbsp;.ORG $8000<br /><br />&nbsp; &nbsp;LDA #199&nbsp; &nbsp;;Test value.<br />&nbsp; &nbsp;STA BNUM<br /><br />BIN2DEC<br />&nbsp; &nbsp;LDA #$00&nbsp; &nbsp;;1's start at 0, using the accumulator until the end.<br />&nbsp; &nbsp;STA DNUM+1&nbsp; &nbsp;;Clear 10's. Will use memory.<br />&nbsp; &nbsp;STA DNUM+2&nbsp; &nbsp;;Clear 100's. Will use memory.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 1st bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 2nd bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 3rd bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br /><br />&nbsp; &nbsp;TAX&nbsp; &nbsp;&nbsp; &nbsp;;This is the 1st time 1's may have gone over<br />&nbsp; &nbsp;LDA TABLE, X&nbsp; &nbsp;;the limit. Get the correct value from TABLE.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 4th bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br />&nbsp; &nbsp;ROL DNUM+1&nbsp; &nbsp;;Propagate to the 10's digit.<br /><br />&nbsp; &nbsp;TAX&nbsp; &nbsp;&nbsp; &nbsp;;1's may have gone over the limit.<br />&nbsp; &nbsp;LDA TABLE, X&nbsp; &nbsp;;Get corrected value from TABLE.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 5th bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br />&nbsp; &nbsp;ROL DNUM+1&nbsp; &nbsp;;Propagate to the 10's digit.<br /><br />&nbsp; &nbsp;TAX&nbsp; &nbsp;&nbsp; &nbsp;;1's may have gone over the limit.<br />&nbsp; &nbsp;LDA TABLE, X&nbsp; &nbsp;;Get corrected value from TABLE.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 6th bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br />&nbsp; &nbsp;ROL DNUM+1&nbsp; &nbsp;;Propagate to the 10's digit.<br /><br />&nbsp; &nbsp;TAX&nbsp; &nbsp;&nbsp; &nbsp;;1's may have gone over the limit.<br />&nbsp; &nbsp;LDA TABLE, X&nbsp; &nbsp;;Get corrected value from TABLE.<br /><br />&nbsp; &nbsp;LDX DNUM+1&nbsp; &nbsp;;This is the 1st time 10's may have gone over<br />&nbsp; &nbsp;LDY TABLE, X&nbsp; &nbsp;;the limit. Get corrected value from TABLE.<br />&nbsp; &nbsp;STY DNUM+1&nbsp; &nbsp;;Overwrite.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 7th bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br />&nbsp; &nbsp;ROL DNUM+1&nbsp; &nbsp;;Propagate to the 10's digit.<br />&nbsp; &nbsp;ROL DNUM+2&nbsp; &nbsp;;Propagate to the 100's digit.<br /><br />&nbsp; &nbsp;TAX&nbsp; &nbsp;&nbsp; &nbsp;;1's may have gone over the limit.<br />&nbsp; &nbsp;LDA TABLE, X&nbsp; &nbsp;;Get corrected value from TABLE.<br /><br />&nbsp; &nbsp;LDX DNUM+1&nbsp; &nbsp;;10's may have gone over the limit.<br />&nbsp; &nbsp;LDY TABLE, X&nbsp; &nbsp;;Get corrected value from TABLE.<br />&nbsp; &nbsp;STY DNUM+1&nbsp; &nbsp;;Overwrite.<br /><br />&nbsp; &nbsp;ASL BNUM&nbsp; &nbsp;;Shift 8th bit from binary number<br />&nbsp; &nbsp;ROL&nbsp; &nbsp;&nbsp; &nbsp;;into the 1's digit.<br />&nbsp; &nbsp;ROL DNUM+1&nbsp; &nbsp;;Propagate any carry to the 10's digit.<br />&nbsp; &nbsp;ROL DNUM+2&nbsp; &nbsp;;Propagate any carry to the 100's digit.<br /><br />&nbsp; &nbsp;STA DNUM+0&nbsp; &nbsp;;Store the 1's digit.<br /><br />&nbsp; &nbsp;BRK<br /><br />&nbsp; &nbsp;.ORG $C000<br />TABLE<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $80, $81, $82, $83, $84<br /></div>
<br />I'm extending it to 16 bits right now, and then things might get interesting. I'll try to optimize it further, looking for unncessary operations or faster ways to do the necessary ones... putting the lookup table on zero-page may speed up things a bit, but I don't think anyone will want to waste 10 bytes of zero-page, me included.
<br />
<br />When a 16-bit version is ready, I'll try it against Bregalad's method, also extended to 16 bits.
<br />
<br />There is one thing I really like about Bregalad's method, though: you could jump to the middle of the routine if you were interested in converting smaller numbers. Both methods are nice, but I'm trying hard to make this one perform faster.
<br />
<br />-tokumaru-

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 27, 2005 2:02 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Well, I think it's not that complicated. Before shifting, you have to check if the shift will override 10, and if so, you have to add 123 to the number so the Most Significan Bit will overwrite into the next one. I'm just unsure that will work for larger-than 8-bit number so easily.</div>
<br />
<br />No, it is not complicated at all - the way the routine works I mean. But one's got to be pretty smart to first come up with an idea like this. I alway read about these revolutionary ways to do stuff but can never seem to come up with one of those! =)
<br />
<br />I understood HOW it worked as soon as I read about it, what I didn't understand at first was WHY it worked! Once that was also understood, I could come up with new ways to use the idea, instead of blindly using something someone else discovered and not even know what I was doing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sat Aug 27, 2005 2:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">blargg wrote:</div><div class="quotecontent">I love this kind of thing. Optimizing an algorithm in assembly is the most fun since it involves programming at the lowest level while thinking in terms of very pure math concepts. The <a href="http://6502.org/forum/" class="postlink">discussion forum</a> on <a href="http://6502.org/" class="postlink">6502.org</a> sometimes has some interesting threads along these lines, for example the recent <a href="http://6502.org/forum/viewtopic.php?t=558" class="postlink">"Fast CRC without tables" thread</a>.</div>
<br />Yeah, I find it very interesting too! However my math skills aren't that great, and sometimes I miss many chances for optimizations.
<br />
<br />I visit the 6502.org forum from time to time, and they do have some very interesting stuff in there. However, with this subject I wasn't very lucky. They have good ways to perform BIN to DEC conversions, ways that deserve more studying, but most use the BCD mode of the 6502, wich the NES lacks. I don't think people there care much about "modified" 6502's. =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Aug 27, 2005 11:41 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">This runs faster than the worst case of Bregalad's routine (only a little bit faster), but still much slower than it's best case.</div><br />Mine also is much shorter and waste probably about 3 times less ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">When a 16-bit version is ready, I'll try it against Bregalad's method, also extended to 16 bits.</div><br />Hey, the get number from the table thing is cool !<br />Scince you usually don't want to converse dozens of large number in a single frame, this probably won't cause any slowdown in gamaplay when just converting the score once when the player kills a monster. If you want to keep the score refresh every frame, this will surely be negligable scince you only have one number to convert. The only case I can see where it would be significant, if you're making a RPG and if you want to keep the HP, Max HP, MP, Max MP of all characters and *all* this refreshed every frame, this may be significant (if there is 4 party member, this makes 16 16-bit numbers). Anyway, this would eat a lot of VRAM update during VBlank, so I think it's better to upload the value only when you're sure the player lost/recovered some HP or use/recovered some MP.<br /><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">There is one thing I really like about Bregalad's method, though: you could jump to the middle of the routine if you were interested in converting smaller numbers. Both methods are nice, but I'm trying hard to make this one perform faster.</div>
<br />Yeah, this is cool, but keep in mind this is not my method, it's also here everywhere else.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Sun Aug 28, 2005 7:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Mine also is much shorter and waste probably about 3 times less ROM.</div><br />Oh, yeah. This thing can get pretty large when unrolled.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Hey, the get number from the table thing is cool !</div><br />It saves you the CMP's and make constant timing possible. And is faster than actual addition. However, the traditional method WILL SKIP some aditions, killing constant timing, but speeding up things sometimes.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Scince you usually don't want to converse dozens of large number in a single frame, this probably won't cause any slowdown in gamaplay when just converting the score once when the player kills a monster. If you want to keep the score refresh every frame, this will surely be negligable scince you only have one number to convert. The only case I can see where it would be significant, if you're making a RPG and if you want to keep the HP, Max HP, MP, Max MP of all characters and *all* this refreshed every frame, this may be significant (if there is 4 party member, this makes 16 16-bit numbers). Anyway, this would eat a lot of VRAM update during VBlank, so I think it's better to upload the value only when you're sure the player lost/recovered some HP or use/recovered some MP.</div><br />You're probably right. I gess the best way is to update only when the numbers change, so the impact on overall speed is much smaller.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Yeah, this is cool, but keep in mind this is not my method, it's also here everywhere else.</div>
<br />I know, as much as the other one isn't mine either! =) I just call it that because you presented some code for it and all, and seemed to like it and used since this thread first started. So, by "Bregalad's method" I actally mean "the method Bregalad uses". =)

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>blargg</b> [ Sun Aug 28, 2005 10:20 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Yeah, this is cool, but keep in mind this is not my method, it's also here everywhere else.</div><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I know, as much as the other one isn't mine either! =) I just call it that because you presented some code for it and all, and seemed to like it and used since this thread first started. So, by "Bregalad's method" I actally mean "the method Bregalad uses". =)</div>
<br />
<br />I'm always careful about how I refer to things people present here, in order to avoid encouraging identification with the topics, since that leads to defensiveness. Often when people start referring to so-and-so's idea, they act as if so-and-so is stuck with that idea alone and won't try anything different (apologies to anyone named so-and-so).
<br />
<br />I'd call it "the method Bregalad described earlier" or come up with a short descriptive phrase for the method itself (perhaps "repeated subtract-and-compare").

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sun Aug 28, 2005 12:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />That's pretty much it, I'm not against the shift method, but I think the substation/comparison is much more flexible and easily implementable in a game that should convert both huge and small numbers. I'm still waiting the results for 16-bit and 24-bit version of the shift method, it may be faster and may not. And I really think unrolling the loop and stuff is worthless because you'll definitely not convert a lot of number. Optimal and constant timing is much more needed for monster AI or sprite engine implementation, or scrooling engine, and eventually the sound engine (that is typically much more slower when all chanells plays a new note, than if all of them are just disabled and ignored, heh).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue Jan 31, 2006 10:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just posted a <a href="http://nesdev.com/wiki/?page=16-bit+BCD" class="postlink">16-bit binary to decimal converter</a> on the wiki. It should take about 700 cycles. Now you can easily display your character's gold.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lord_Chile</b> [ Fri Apr 21, 2006 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>my algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />2 algorithms for 6502 simulator
<br />
<br />just i want sharing my algorithm, sacrifices 200 bytes for faster..
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; bin 8 bits to 2 digits bcd, worst case around 22 cycles<br />; best case around 22 cycles. <br />; the price are 200 bytes of rom.<br />; input: load a with hex to convert<br /><br />&nbsp; &nbsp;.ORG $0003&nbsp; &nbsp;; Store machine code starting here&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />hundreds_bcd&nbsp; = $03&nbsp; &nbsp;; memory addresses&nbsp; &nbsp;&nbsp; &nbsp;<br />tens_bcd&nbsp; &nbsp; &nbsp; = $04<br />units_bcd&nbsp; &nbsp; &nbsp;= $05&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />start:<br />&nbsp; &nbsp;LDA #99<br />&nbsp; &nbsp;JSR bin8to_bcd<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;BRK<br />&nbsp; &nbsp;<br />bin8to_bcd:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />.work_tens_units<br />&nbsp; &nbsp;TAY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX table_tens,y&nbsp; &nbsp;<br />&nbsp; &nbsp;STX tens_bcd&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX table_units,y&nbsp; &nbsp;<br />&nbsp; &nbsp;STX units_bcd&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;RTS<br /><br />&nbsp; &nbsp;.ORG $8000&nbsp; &nbsp;<br />table_tens:<br />&nbsp; &nbsp;.DB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01<br />&nbsp; &nbsp;.DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02<br />&nbsp; &nbsp;.DB $03, $03, $03, $03, $03, $03, $03, $03, $03, $03<br />&nbsp; &nbsp;.DB $04, $04, $04, $04, $04, $04, $04, $04, $04, $04<br />&nbsp; &nbsp;.DB $05, $05, $05, $05, $05, $05, $05, $05, $05, $05<br />&nbsp; &nbsp;.DB $06, $06, $06, $06, $06, $06, $06, $06, $06, $06<br />&nbsp; &nbsp;.DB $07, $07, $07, $07, $07, $07, $07, $07, $07, $07<br />&nbsp; &nbsp;.DB $08, $08, $08, $08, $08, $08, $08, $08, $08, $08<br />&nbsp; &nbsp;.DB $09, $09, $09, $09, $09, $09, $09, $09, $09, $09&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />table_units:<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lord_Chile</b> [ Fri Apr 21, 2006 5:32 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>my another algorithm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; bin 8 bits to 3 digits bcd, worst case around 43 cycles<br />; best case around 37 cycles. <br />; the price are 200 bytes of rom.<br />; input: load a with hex to convert<br /><br />&nbsp; &nbsp;.ORG $0003&nbsp; &nbsp;; Store machine code starting here&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />hundreds_bcd&nbsp; = $03&nbsp; &nbsp;; memory addresses&nbsp; &nbsp;&nbsp; &nbsp;<br />tens_bcd&nbsp; &nbsp; &nbsp; = $04<br />units_bcd&nbsp; &nbsp; &nbsp;= $05&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />start:<br />&nbsp; &nbsp;LDA #199<br />&nbsp; &nbsp;JSR bin8to_bcd<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;BRK<br />&nbsp; &nbsp;<br />bin8to_bcd:&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX #$00&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;STX hundreds_bcd <br />&nbsp; &nbsp;<br />&nbsp; &nbsp;CMP #200 <br />&nbsp; &nbsp;BCC .nextHundCheck<br />&nbsp; &nbsp;SBC #200<br />&nbsp; &nbsp;LDX #$02<br />&nbsp; &nbsp;STX hundreds_bcd<br />&nbsp; &nbsp;<br />&nbsp; &nbsp;BCS .work_tens_units<br />&nbsp; &nbsp;<br />.nextHundCheck&nbsp; &nbsp;<br />&nbsp; &nbsp;CMP #100 <br />&nbsp; &nbsp;BCC .work_tens_units ; number is 0 hundreds<br />&nbsp; &nbsp; <br />&nbsp; &nbsp;SBC #100<br />&nbsp; &nbsp;LDX #$01<br />&nbsp; &nbsp;STX hundreds_bcd&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />.work_tens_units<br />&nbsp; &nbsp;TAY&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX table_tens,y&nbsp; &nbsp;<br />&nbsp; &nbsp;STX tens_bcd&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;LDX table_units,y<br />&nbsp; &nbsp;STX units_bcd&nbsp; &nbsp;<br />&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;<br />&nbsp; &nbsp;RTS<br /><br />&nbsp; &nbsp;.ORG $8000&nbsp; &nbsp;<br />table_tens:<br />&nbsp; &nbsp;.DB $00, $00, $00, $00, $00, $00, $00, $00, $00, $00<br />&nbsp; &nbsp;.DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01<br />&nbsp; &nbsp;.DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02<br />&nbsp; &nbsp;.DB $03, $03, $03, $03, $03, $03, $03, $03, $03, $03<br />&nbsp; &nbsp;.DB $04, $04, $04, $04, $04, $04, $04, $04, $04, $04<br />&nbsp; &nbsp;.DB $05, $05, $05, $05, $05, $05, $05, $05, $05, $05<br />&nbsp; &nbsp;.DB $06, $06, $06, $06, $06, $06, $06, $06, $06, $06<br />&nbsp; &nbsp;.DB $07, $07, $07, $07, $07, $07, $07, $07, $07, $07<br />&nbsp; &nbsp;.DB $08, $08, $08, $08, $08, $08, $08, $08, $08, $08<br />&nbsp; &nbsp;.DB $09, $09, $09, $09, $09, $09, $09, $09, $09, $09&nbsp; &nbsp;<br />&nbsp; &nbsp;<br />table_units:<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br />&nbsp; &nbsp;.DB $00, $01, $02, $03, $04, $05, $06, $07, $08, $09<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Apr 21, 2006 10:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hi, lord_Chile! I'm glad to see that you are practicing and all... very good!
<br />
<br />Just want to say one thing you are doing wrong here. Your code starts at $0003, but so do your variables! If you look in the memory window, the beginning of the code is overwritten by the result of the routine... The simulator allows this, because the code is overwritten after it has already run, but in a real life situation that would be impossible, because you can't define code in RAM (unless you have a routine to copy code from ROM to RAM, wich isn't the case, you're using .org) and you can't have variables in ROM. So what you did there is a little paradox...!
<br />
<br />Just make sure you separate code from the variables. In your program the variables could easily use $00, $01 and $02, and then program begins at $03, as it already does.
<br />
<br />When writing NES stuff you'll probably use .org $8000 or .org $c000 for code.
<br />
<br />Again, I'm really glad you are figuring this stuff out!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>lord_Chile</b> [ Wed Apr 26, 2006 2:46 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>mmmmm</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />yes, i understand.. it's for 6502 simulator. i did implement it for nesasm, and all ok. just i keep my tables and code in rom, then i use ram for variables. see you. thanks to you for teaching me any important things

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>