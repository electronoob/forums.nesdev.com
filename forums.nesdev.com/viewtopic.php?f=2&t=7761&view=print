<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - snarfblASM-Anybody willing to test?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">snarfblASM-Anybody willing to test?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7761">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=7761</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>snarfblam</b> [ Tue May 17, 2011 5:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>snarfblASM-Anybody willing to test?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hello NesDev.
<br />
<br />I've written a 6502 assembler, <a href="http://snarfblam.com/files/snarfblasm0_1.zip" class="postlink">snarfblASM</a>, as part of a larger project. Not that the world really needs another 6502 assembler, but I wanted an assembler that could be integrated into my project, and I couldn't find one written in C#, so I wrote my own. I figured I would release a stand-alone version as well.
<br />
<br />I was hoping that I could get some help testing. The help I've gotten so far has proven invaluable.
<br />
<br />Notes (More detailed documentation is available at <!-- m --><a class="postlink" href="http://snarfblam.com/words/?p=210">http://snarfblam.com/words/?p=210</a><!-- m -->):
<br /><ul><li><strong><em>Requires .Net Framework 2.0</em></strong></li><li>The assembler is aimed to be most similar to ASM6, but is stricter on syntax (labels require colons, directives require dots).</li><li>There is no macro support.</li><li> For users of ASM6 this means you can't declare constants with the EQU syntax (but "name = value" works fine).</li><li>ASM6-style + and - labels are supported, as well as * labels, which work a bit differently.</li><li>Where as ASM6 would use zero-page addressing for something like (LDA $0000) snarfblASM only uses zero-page addressing when an 8-bit value is specified (LDA $00). This can cause differences between ASM6 and snarfblASM output.</li></ul>
<br />
<br />Whether you do something simple, like run a couple of ASM files you have sitting around, or throw everything in your bag of tricks at it to try to break it, it would be hugely appreciated.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue May 17, 2011 5:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: snarfblASM 6502 Assembler - Anyone want to test?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">snarfblam wrote:</div><div class="quotecontent">Where as ASM6 would use zero-page addressing for something like (LDA $0000) snarfblASM only uses zero-page addressing when an 8-bit value is specified (LDA $00). This can cause differences between ASM6 and snarfblASM output.</div>
<br />Then what kind of addressing does it use if you define a label using an equate?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Tue May 17, 2011 5:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: snarfblASM 6502 Assembler - Anyone want to test?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Then what kind of addressing does it use if you define a label using an equate?</div>
<br />Some might say it depends on the value you used in the equate (variable EQU $0000 vs variable EQU $00), but I for example never define my variables like that. I use "reserve" commands to declare my variables, so that it's easier to move them around in case I want to. In that case the variables aren't assigned explicit addresses, they are relative to the last value of the PC.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>snarfblam</b> [ Tue May 17, 2011 6:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />snarfblASM makes a distinction between 8- and 16-bit values, similar to the way that C would distinguish between "short int" and "char" values.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">zpAddress1 = $02<br />absoluteAddress1 = $0002<br /><br />.enum 0<br />&nbsp; &nbsp; zpAddress2: .dsb<br />.ende<br /><br />.org $8000<br />absoluteAddress2:<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Tue May 17, 2011 6:21 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="codetitle"><b>Code:</b></div><div class="codecontent">; does this wrap or is it in stack?<br />zpAddress0 = $C0<br />zpAddress64 = zpAddress0 + 64<br /><br />; and what happens with base 10 addresses?<br />zpAddress = 255</div>
<br />
<br />See also <a href="http://nesdev.com/bbs/viewtopic.php?p=73822#73822" class="postlink">the last time we discussed typed pointers</a>, along with <a href="http://nesdev.com/bbs/viewtopic.php?p=73876#73876" class="postlink">some syntax suggestions that resulted</a>.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>snarfblam</b> [ Tue May 17, 2011 8:17 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="codetitle"><b>Code:</b></div><div class="codecontent">; does this wrap or is it in stack?<br />zpAddress0 = $C0<br />zpAddress64 = zpAddress0 + 64<br /><br />; and what happens with base 10 addresses?<br />zpAddress = 255</div><br /></div><br /><br /><div class="quotetitle">TFM wrote:</div><div class="quotecontent">snarfblASM works with two kinds of values: 8-bit values (byte) and 16-bit values (referred to as “word”, though, technically, the word size for 6502 is 8-bit). The byte versus word distinction can be important in certain circumstances. Adding two 8-bit values produces an 8-bit value, and truncation may occur</div>
<br />
<br />As far as decimal literals, right now values less than 256 are treated as 8-bit, though I would encourage you to think of the behavior as undefined. I've got a unary "widen" operator, &lt;&gt; (which compliments the low-byte &lt; and high-byte &gt; operators). So you could write a 16-bit decimal number as "&lt;&gt;105" and an 8-bit decimal number as "&lt;105". 
<br />
<br />If you perform math on 8-bit numbers, the result will be truncated. $C0 + 64 = 0. Interestingly, this mirrors the behavior of zero-page addressing. If this bothers you, there is an option to enable overflow checking, which will throw an error when truncation would occur. I can see where you might have a problem with 200 + 200 = 144. It might be best to enable overflow checking by default, or provide an option for asm6-like behavior.
<br />
<br />I could have gone with special mnemonics or operations to force addressing (lda.zp or lda&lt;), but I found the sort of "typing" system I have more attractive. Again, I sought something resembling C-style integer typing. To me this best reflects intentions; if you write $0000 you are probably thinking in terms of absolute addressing, and if you write $00 you are probably thinking it terms of zero-page. But this approach still leaves the option of using an operator to specify an addressing mode (lda &lt;label or lda &lt;&gt;label).

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>