<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Thoughts on doing a platformer...</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Thoughts on doing a platformer...</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4437">http://forums.nesdev.com/viewtopic.php?f=2&amp;t=4437</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tomaitheous</b> [ Wed Oct 08, 2008 3:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well I've never see a programm to split arrays into multiple arrays. I agree it could be good to split arrays if it really increase performance. A 3-byte saving or a 3 clcok cycles per frame saving is probably not worth the trouble, tough.</div>
<br />
<br /> You'd just write a small console app yourself to do it. Not a big deal.
<br />
<br /> I wouldn't consider that difficult to read or understand. Interleaving arrays should be the norm. I wouldn't consider it in the "optimizing" phase of coding writing, but more from the start. It's just a natural order and access of data on an 65x.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Oct 08, 2008 4:08 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm for interleaving data, and I don't see why you wouldn't unless you were using 128 pointers and not 256. Let's see here... Here is some sample code of loading a pointer in an un-interleaved array to a Temp Address.
<br />
<br />lda PositionInArray
<br />asl a
<br />sta TempAddL
<br />lda #$00
<br />adc #&gt;PointerList      ;If the position in array is more than 128, the carry will be set, thus adding 1.
<br />sta TempAddH
<br />clc
<br />lda TempAddL
<br />adc #&lt;PointerList
<br />sta TempAddL
<br />ldy #0
<br />lda (TempAddL),y
<br />sta TempAdd2L
<br />iny
<br />lda (TempAddL),y
<br />sta TempAdd2H
<br />
<br />That's one way you could get a pointer out of the array. Though you could modify it if you force the array to start at a specific location and save time. But to me, that's a big shindig. Why do that when you can do this:
<br />
<br />ldx PositionInArray
<br />lda PointerListL.w,x
<br />sta TempAddL
<br />lda PointerListH.w,x
<br />sta TempAddH
<br />
<br />That's so much less dinking around! There aren't any INXs or shifting/adding at all. It's simply load and store. I see no reason good enough to do it the other way.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Wed Oct 08, 2008 4:54 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />To be fair though this particular example can be optimized a bit even with non-interleaved arrays.
<br />
<br />With branches (25 cycles):<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda index<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;bcs +<br /><br />&nbsp; &nbsp;lda list+$000,y<br />&nbsp; &nbsp;ldx list+$001,y<br />&nbsp; &nbsp;bcc ++<br /><br />+&nbsp; lda list+$100,y<br />&nbsp; &nbsp;ldx list+$101,y<br /><br />++ sta data_ptr+0<br />&nbsp; &nbsp;stx data_ptr+1</div><br /><br />Or a preinitialized list pointer (32 cycles):<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;lda #&lt;list<br />&nbsp; &nbsp;sta list_ptr+0<br />&nbsp; &nbsp;.<br />&nbsp; &nbsp;.<br />&nbsp; &nbsp;.<br />&nbsp; &nbsp;lda index<br />&nbsp; &nbsp;asl<br />&nbsp; &nbsp;tay<br />&nbsp; &nbsp;lda #&gt;list<br />&nbsp; &nbsp;adc #0<br />&nbsp; &nbsp;sta list_ptr+1<br /><br />&nbsp; &nbsp;lda &#40;list_ptr&#41;,y<br />&nbsp; &nbsp;sta data_ptr+0<br />&nbsp; &nbsp;iny<br />&nbsp; &nbsp;lda &#40;list_ptr&#41;,y<br />&nbsp; &nbsp;sta data_ptr+1</div>
<br />Then again you often have to deal with more complicated lookups than that. Not to mention that code size/complexity and register pressure/restrictions are significant drawbacks of manual pointer arithmetic. Besides, I'll go for the optimization over simplicity pretty much every time on the 6502 ;)
<br />
<br />My tip is to abuse your macro processor and write yourself a simple interleaving tool to take care of this for you. Then at least you won't have to go through the error-prone process of spreading out and maintaining interleaved tables. Come to think of it I wouldn't mind a bit of direct assembler support for this kind of thing. I believe I could modify ACME's incbin directive to take an interleave factor easily enough.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Wed Oct 08, 2008 7:09 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />True, there are several optimizations that you could do like the one shown. But you know, this:
<br />
<br />ldx Index     ;4
<br />lda PointerListL,x     ;9
<br />sta TempAddL     ;12
<br />lda PointerListH,x     ;17
<br />sta TempAddH     ;20
<br />
<br />
<br />Takes a lot less time. Yes, yes, I'm sure you know. Oh, and you could snap it to start on a page boundary, and use ZP indexes, so it would take:
<br />
<br />ldx Index     ;3
<br />lda PointerListL,x     ;7
<br />sta TempAddL     ;10
<br />lda PointerListH,x     ;14
<br />sta TempAddH     ;17
<br />
<br />3 cycles less. Though it's really not that much different, it's 30 cycles if you do this 10 times. And 20 even if you can't use a ZP index. Though it would in probably a lot of occasions be less cycles if you didn't snap the arrays to page boundaries, it's safe to assume it's going to take 5 cycles for the LDA PointerListL, x rather than 4.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Thu Oct 09, 2008 8:58 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">My advice is to go for 8-bit precision if at all possible. Not having to bother with 16-bit coordinates everywhere makes so many things so much easier that it's not even funny. A fractional fixed-point byte beneath the screen coordinates occasionally comes in handy as well, but there's no need to burden all objects and algorithms with it when only some of them care. Besides, you can often fake sub-pixel movements in other ways. Personally I like to keep a set of "frame counter mod n" variables handy for such things.<br /></div><br />No, no, no. This is crap, I experienced it. 16-bit is flexible and is the way to go regardless if you scroll or not. Unless you want to rewrite everything when you do a game that scrolls or port your game to another system with higher resolution, it's way better to use 16-bit cords.<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">That's so much less dinking around! There aren't any INXs or shifting/adding at all. It's simply load and store. I see no reason good enough to do it the other way.</div>
<br />Well, it's true that in that particular case, the second version is much more optimized takes less bytes and less time. Yet, most of my game engine's code looks rather like your first example. I bet I could optimize a lot of things I haven't yet, I'd have to look for it.
<br />Probably just because it's easier to have a line of 4 bytes for each metatiles than to have 4 arrays with one entry per metatiles. And the array is less than 256 bytes so no [Â¨],Y needed so it woud just save 2 ASL instructions to split the array. I could do that after I wrote all the metatiles of the game if I feel like it but meh... (but there is other things that metatiles like that too).
<br />
<br />However, I've been optimizing stuff for about 2 years and make very slow progress to the project (because when I lack ideas I improve what alredy exists). If I do it forever my game will never be released, and I don't want that to happen. Yet it's true that maybe I should split some arrays, after all this isn't that long doing it by hand or with a small programm (but writing it would probably take longer than doing everything by hand unless I have really big arrays).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Thu Oct 09, 2008 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">No, no, no. This is crap, I experienced it. 16-bit is flexible and is the way to go regardless if you scroll or not. Unless you want to rewrite everything when you do a game that scrolls or port your game to another system with higher resolution, it's way better to use 16-bit cords.</div>I won't deny that switching from eight to sixteen bit precision throughout the game halfway through the project would be nasty. But then adding scrolling to a game fundamentally changes large parts of the code, beyond just the coordinate system. And believe me, the hardware differences between the NES and a C64 are large enough to make direct ports of anything but the simplest of games virtually worthless.<br />Don't waste too much time trying to accommodate features you might potentially need in the future, or limit the code in order to be compatible with other hardware you might wish to port to. That kind of programming is simply too restrictive for 6502 games wanting to make good use the hardware, not to mention time consuming.<br />The best advice I can give is to design your game ahead of time, and try to stick to it. Study other games to see how the handle things, figure out what the tricky hardware bits are and write prototypes, sketch out little dummy routines for doing common tasks with the system you're envisioning before deciding anything, and last but not least don't go overboard with the fancy features (not that I've ever managed to follow that last bit of advice myself.)<br /><br />By the way my current C64 shooter project uses 8-bit x coordinates for the most part despite the 320-pixel wide screen. This is handled by using the trick I mentioned earlier of shifting up the coordinates by one bit.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Probably just because it's easier to have a line of 4 bytes for each metatiles than to have 4 arrays with one entry per metatiles. And the array is less than 256 bytes so no [Â¨],Y needed so it woud just save 2 ASL instructions to split the array.</div>Right. The problems come when you need to store additional attributes (say, collision or palette data) for the meta-tiles or when you need more than 64 of them. Anyway, I don't know what you're doing with the unused bit-pairs (palette attributes perhaps?) but you might get away with storing the tiles premultiplied instead.<br /><br /><div class="quotetitle">Bregalad wrote:</div><div class="quotecontent">Yet it's true that maybe I should split some arrays, after all this isn't that long doing it by hand or with a small programm (but writing it would probably take longer than doing everything by hand unless I have really big arrays).</div>Feel free to use <a href="http://doynax.googlepages.com/interleave.zip" class="postlink">my tool</a> if that would help. Properly integrated into your makefile/build script it shouldn't be too intrusive.
<br />
<br />Occasionally it might be inconvenient or just plain impossible to shuffle external files around, usually when referencing labels defined inside of the ROM itself, but I've found that with a bit of macro abuse you can at least avoid any repetition and keep the structures together. I don't know what your assembler of choice is but in ACME you might try something like this:<div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;&nbsp; &nbsp; !macro list .field &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp; +def label0,73,%00,.field<br />&nbsp; &nbsp;&nbsp; &nbsp; +def label1,14,%01,.field<br />&nbsp; &nbsp; &nbsp; &nbsp; +def label2,91,%10,.field<br />&nbsp; &nbsp;&nbsp; &nbsp; +def label3,22,%11,.field<br />&nbsp; &nbsp;&nbsp; &nbsp; &#125;<br /><br />&nbsp; &nbsp;&nbsp; &nbsp; !macro def .ptr,.color,.attrib,.field &#123;<br />&nbsp; &nbsp;&nbsp; &nbsp; !if .field = 0 &#123; !byte &lt;.ptr &#125;<br />&nbsp; &nbsp;&nbsp; &nbsp; !if .field = 1 &#123; !byte &gt;.ptr &#125;<br />&nbsp; &nbsp;&nbsp; &nbsp; !if .field = 2 &#123; !byte .color &#125;<br />&nbsp; &nbsp;&nbsp; &nbsp; !if .field = 3 &#123; !byte .attrib &#125;<br />&nbsp; &nbsp;&nbsp; &nbsp; &#125;<br /><br />ptr_lo +list 0<br />ptr_hi +list 1<br />color&nbsp; +list 2<br />attrib +list 3</div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Oct 09, 2008 12:19 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Put this code in a new ASM file in a totally different folder:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$60<br />sta SaveAddH<br />lda #$00<br />sta SaveAddL<br />lda #&lt;List<br />sta TempAddL<br />lda #&gt;List<br />sta TempAddH<br />lda #HoweverManyArrays<br />sta NumberOfArrays<br />sta NumberOfArrays2&nbsp; &nbsp; &nbsp;;One will be decremented, and one will stay the same.<br /><br />lda #SizeOfIndividualArrays<br />sta NumberOfBytesPerArray<br />sta NumberOfBytesPerArray2<br />jsr Interleave<br />....<br /><br />Interleave:<br />&nbsp;ldy #0<br />&nbsp;sty ZTempVar1<br />-<br />&nbsp;lda &#40;TempAddL&#41;,y<br />&nbsp;sta &#40;SaveAddL&#41;,y<br />&nbsp;clc<br />&nbsp;lda TempAddL<br />&nbsp;adc NumberOfArrays<br />&nbsp;sta TempAddL<br />&nbsp;lda TempAddH<br />&nbsp;adc #0<br />&nbsp;sta TempAddH<br />&nbsp;clc<br />&nbsp;lda SaveAddL<br />&nbsp;adc #1<br />&nbsp;sta SaveAddL<br />&nbsp;lda SaveAddH<br />&nbsp;adc #0<br />&nbsp;sta SaveAddH<br />&nbsp;dec NumberOfBytesPerArray<br />&nbsp;bne -<br /><br />&nbsp;inc ZTempVar1<br />&nbsp;lda #&gt;List<br />&nbsp;sta TempAddH<br />&nbsp;lda #&lt;List<br />&nbsp;clc<br />&nbsp;adc ZTempVar1<br />&nbsp;sta TempAddL<br />&nbsp;lda NumberOfBytesPerArray2<br />&nbsp;sta NumberOfBytesPerArray<br />&nbsp;dec NumberOfArrays2<br />&nbsp;bne -<br />&nbsp;rts<br /></div><br /><br />This will interleave the data for you and put in in SRAM starting at $6000. Though you have to copy/paste the un interleaved array into a new document and put the "List" lable above it, and you have to change "HoweverManyArrays" and "SizeOfArrays" to whatever you want.<br /><br />I haven't tested it yet. I think it should work though. Oh, and you have to make definitions for these:<br /><br />SaveAddH<br />SaveAddL<br />TempAddL<br />TempAddH<br />NumberOfArrays<br />NumberOfArrays2<br />NumberOfBytesPerArray<br />NumberOfBytesPerArray2<br />ZTempVar1<br /><br />Probably ZP variables. Since it's a different program that does nothing but interleave data, size/time taken/wasting ZP doesn't matter.<br /><br />EDIT: Okay, I tested it, and it works. You can use my tool too, if you'd like:<br /><br /><!-- m --><a class="postlink" href="http://www.freewebs.com/the_bott/Interleaver.rar">http://www.freewebs.com/the_bott/Interleaver.rar</a><!-- m --><br /><br />Go into "ByteDefs.asm", and change:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp;.DEFINE SizeOfIndividualArrays 8<br />&nbsp; &nbsp;.DEFINE NumberOfIndividualArrays 3<br /></div>
<br />
<br />To whatever you want. As you can see, it's currently set up to make 3 8-byte arrays, where each byte in each array is every 3rd byte in the uninterleaved one. And in "List.asm", like it says, insert your data there. Then all you have to do is click "game.bat" and it'll make it for you. Run the game, and X out of it after the "Hello World" comes on screen, and your data will be saved to SRAM!

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sivak</b> [ Thu Oct 09, 2008 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey folks.  I've played around with it and have managed to get somewhere.
<br />
<br />I basically have it, right now, loading in a room data and grabbing various material from it, such as what to load in CHR RAM, what palette to use, etc.
<br />
<br />Here are two screens for now:
<br />
<br /><!-- m --><a class="postlink" href="http://img253.imageshack.us/img253/4981/12kn7.png">http://img253.imageshack.us/img253/4981/12kn7.png</a><!-- m -->
<br /><!-- m --><a class="postlink" href="http://img523.imageshack.us/img523/2018/13ug5.png">http://img523.imageshack.us/img523/2018/13ug5.png</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Thu Oct 09, 2008 6:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Sivak wrote:</div><div class="quotecontent">Hey folks.  I've played around with it and have managed to get somewhere.<br /><br />I basically have it, right now, loading in a room data and grabbing various material from it, such as what to load in CHR RAM, what palette to use, etc.</div>Hey, that's actually pretty neat for a few days work! Any idea what you want to tackle next?<br /><br /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Okay, I tested it, and it works. You can use my tool too, if you'd like: <a href="http://www.freewebs.com/the_bott/Interleaver.rar" class="postlink">http://www.freewebs.com/the_bott/Interleaver.rar</a></div>Whoa.. I can see the value of native drawing and composing tools, I can even sympathize with all those C64 coders refusing to work with cross-assemblers, but running basic data-processing tools on a bloody NES is just hardcore.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Sivak</b> [ Thu Oct 09, 2008 6:39 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Hey, that's actually pretty neat for a few days work! Any idea what you want to tackle next?</div>
<br />
<br />Right now I want to tackle why the music engine that works fine in my other game is suddenly being randomly erroneous...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Thu Oct 09, 2008 9:12 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />About the bug, it could probably just be a little typo somewhere, so once you find it, it'll eliminate all your problems. Nice progress though! I'm currently working on object code in my game.
<br />
<br /><div class="quotetitle">doynax wrote:</div><div class="quotecontent">Whoa.. I can see the value of native drawing and composing tools, I can even sympathize with all those C64 coders refusing to work with cross-assemblers, but running basic data-processing tools on a bloody NES is just hardcore.</div>
<br />
<br />Well, I don't have a very large background in programming. I've programmed for the NES for 3 years now, and a little QBasic. I don't quite understand how to interact with files in modern day programming languages, though I plan to educate myself a lot more and learn about that kind of stuff. So I use what I know to make programs like this, and it's easy for small things like data interleavers. Though I'll have to learn more in order to make things like a level editor and all that stuff, and also I'll be able to design a better interface once I have that kind of knowledge.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doynax</b> [ Fri Oct 10, 2008 4:26 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">Celius wrote:</div><div class="quotecontent">Well, I don't have a very large background in programming. I've programmed for the NES for 3 years now, and a little QBasic. I don't quite understand how to interact with files in modern day programming languages, though I plan to educate myself a lot more and learn about that kind of stuff. </div>Sounds a lot like my own background actually, except in my case I started tinkering with assembly language when QBasic just wasn't fast enough to handle action games on my 386.
<br />Anyway, I strongly recommend that you get better acquainted with a high-level language even if you only intend to write NES games (and there's certainly nothing wrong with BASIC if that's what you're already familiar with.) I have a tendency to write dozens of useful little tools for any project I work on. That includes everything from sine-table generators, to graphics converters, to packers.
<br />Perhaps their most important use however, and what I made extensive use of when writing my 3D thing, is to easily prototype complicated systems and algorithms without having to get bogged-down with the intricacies of 6502 assembly and the NES hardware. Furthermore a reference implementation is invaluable when debugging any number of problems.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>strat</b> [ Sat Oct 11, 2008 2:31 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">16-bit is flexible and is the way to go regardless if you scroll or not. </div>
<br />
<br />I'm working on a GBA platformer (that scrolls in 8 directions) and was rolling over porting it to NES in a stripped-down form.  Instead of doing 16-bit arithmetics every time you deal with object coordinates, how about 8-bit coordinates and an accompanying page variable?
<br />
<br />Init the objects page location and coordinates on that page
<br />When coordinate byte wraps around, inc or dec page location.  When you need absolute coordinates, use (256*page-1)+coordinates
<br />
<br />This mainly applies to objects.  I'd still use 16-bit vars for scrolling.
<br />
<br />Is this worth trying?  I'm not very experienced in NES coding outside a demo that doesn't scroll and displays 'RED BLUE YELLOW' in those colors.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Celius</b> [ Sat Oct 11, 2008 6:56 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />This is not a bad idea, in some cases. This might save you a good amount of time if you're dealing with lots of objects.
<br />
<br />However, for precision bits, I don't think this is a good idea. Most objects are going to move to a new pixel almost every frame. Moving to a new 256x256 chunk happens a lot less often though. So you'd probably want to use your method for something like that instead of using it for things like precision bits.
<br />
<br />One way you could do it is:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">clc<br />lda XCoordL<br />adc #5<br />sta XCoordL<br />bcc +<br />inc XCoordH<br />+<br /></div>
<br />
<br />If you're dealing with absolute addresses, that optimization would save you 7 cycles if you weren't increasing the high byte. For ZP, it would save you 5, but that's still good. It would take one cycle less if it wraps around for ZP variables than a 16-bit addition would. It would take two less for an absolute 16-bit addition. Very good in some cases.
<br />
<br />But this assuming that you're doing 16-bit 8-bit addition, meaning you're adding an 8-bit number to a 16-bit number.
<br />
<br />Also, you might have some problems if you're dealing with signed numbers. Lots of people prefer to add a negative number instead of subtracting a positive one. I like doing this myself. This example I don't think would work for that though.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>2</strong> of <strong>2</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>