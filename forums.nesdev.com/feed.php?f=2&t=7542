<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=2&amp;t=7542" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2011-03-05T06:29:01-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=2&amp;t=7542</id>
<entry>
<author><name><![CDATA[tepples]]></name></author>
<updated>2011-03-05T06:29:01-07:00</updated>
<published>2011-03-05T06:29:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75149#p75149</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75149#p75149"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75149#p75149"><![CDATA[
I imagine that even an RPG could use password save if it's railroaded enough that you could squeeze its persistent state between chapters down to 64 bits or fewer. For example, an 8-character password could record 32 bits of data and 8 bits of checksum, with the data split up as I described in <a href="http://nesdev.com/bbs/viewtopic.php?p=64093#64093" class="postlink">this post</a>. But you do need PRG RAM, serial EEPROM, or PRG flash if you want to save anything involving a large array, such as the overworld map in games like SimCity or Animal Crossing, or music that the player has written, or drawings in something like Drawn to Life or Mario Paint. I was working on something that was going to include small drawings by players like Drawn to Life, but I balked when I heard the high price of bunnyboy's SNROM equivalent.<br /><br />Nintendo never made a board with UxROM/AxROM and battery save because it had already developed the replacement (MMC1 ASIC). But we currently have access only to 7400s and CPLDs, which AFAIK are more expensive than ASICs at the low volume of the modern NES era. So such a board would have the following parts list: PRG ROM, CIC, two 62256 SRAMs, <a href="http://wiki.nesdev.com/w/index.php/PRG_RAM_circuit" class="postlink">74HC20</a> for decoding, 74HC377 (like a 161 but also controlling the upper address lines of the RAMs), 74HC32 (can be omitted if you prefer mapper 7 instead of 2), battery, and various caps and diodes.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=9">tepples</a> — Sat Mar 05, 2011 6:29 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ManicGenius]]></name></author>
<updated>2011-03-05T02:11:15-07:00</updated>
<published>2011-03-05T02:11:15-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75144#p75144</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75144#p75144"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75144#p75144"><![CDATA[
Not just RAM though. Having that extra RAM requires a new mapper as well and that costs a couple extra bucks.  Tack on cartridge shell, PCB, dust cover, label, manual, etc. it all adds up.  So shaving off even just that $7 from the mapper and the RAM is intense at quantity. My game is just a simple platformer and I'm compressing the hell out of everything just so I can get the cheaper PRG chip.  TBH, that's part of the reason I'm doing this in the first place. It's a challenge to work within constraints, and thus far more fun than cranking out an iPhone crapp for $0.99.<br /><br />It's all scope though, and like you said, if I was doing an RPG the extra RAM would come in handy and would actually probably be a necessity to make any sort of interesting game.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4461">ManicGenius</a> — Sat Mar 05, 2011 2:11 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-03-04T21:06:56-07:00</updated>
<published>2011-03-04T21:06:56-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75139#p75139</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75139#p75139"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75139#p75139"><![CDATA[
Ahhh...that is true. But just adding WRAM wouldn't be too much. Maybe $4 per chip or so. But I guess if you don't need it. If you used PRG-RAM and made an RPG, the extra cost might be justified. <img src="http://forums.nesdev.com/images/smilies/icon_wink.gif" alt=";)" title="Wink" /><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Fri Mar 04, 2011 9:06 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ManicGenius]]></name></author>
<updated>2011-03-04T20:51:55-07:00</updated>
<published>2011-03-04T20:51:55-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75138#p75138</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75138#p75138"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75138#p75138"><![CDATA[
<div class="quotetitle">3gengames wrote:</div><div class="quotecontent"><br />But then you'd not have to run your insturctions through the PPU to read the background and is worth it IMO.<br /></div><br /><br />As far as I know you don't really have to do that.  Theres already a horizontal counter to figure out how far my dude is across my map, and the way I'm storing/compressing things makes it pretty easy to pick out what tile he's on straight out of ROM.  WRAM isn't an option since I'm intending to get RetroUSB to produce this thing and to be honest... having any sort of extra features outside of CNROM/UNROM would jack the price up fairly bad.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4461">ManicGenius</a> — Fri Mar 04, 2011 8:51 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Drag]]></name></author>
<updated>2011-03-04T19:56:33-07:00</updated>
<published>2011-03-04T19:56:33-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75136#p75136</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75136#p75136"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75136#p75136"><![CDATA[
<div class="quotetitle">tokumaru wrote:</div><div class="quotecontent"><br /><div class="quotetitle">qbradq wrote:</div><div class="quotecontent">(in a big if / else block)<br /></div><br />Jump tables plzkthx.<br /><br />Seriously, don't EVER use big if / else blocks in 6502 assembly, specially for something that will be done several times per frame (like block type checks). In high level languages I think it's OK to do it, because as far as I know they get optimized to (tuh duh!) jump tables when compiled.</div><br />In high level languages, you'd use switch/case (a.k.a. "select case"), rather than a huge chain of if/else, and I think switch/case optimizes into a jump table.<br /><br />But yes, jump tables are your BFFLs. In your example, you've defined each range to have at least $10 values to it, so I'd use the upper 4 bits of the tile byte as an index to a table of pointers, which point to the appropriate routines to handle collisions with those tiles. Since you're using 4 bits, you'd have 16 pointers, one for each set of 16 tiles.<br /><br />To optimize it more, you could use the upper 3 bits instead for a smaller pointer table (8 pointers, 1 for each set of 32 tiles), if you don't mind performing another check in the liquid handler to determine whether it's surface or body.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=21">Drag</a> — Fri Mar 04, 2011 7:56 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[tokumaru]]></name></author>
<updated>2011-03-04T19:33:36-07:00</updated>
<published>2011-03-04T19:33:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75134#p75134</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75134#p75134"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75134#p75134"><![CDATA[
<div class="quotetitle">qbradq wrote:</div><div class="quotecontent"><br />(in a big if / else block)<br /></div><br />Jump tables plzkthx.<br /><br />Seriously, don't EVER use big if / else blocks in 6502 assembly, specially for something that will be done several times per frame (like block type checks). In high level languages I think it's OK to do it, because as far as I know they get optimized to (tuh duh!) jump tables when compiled.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=95">tokumaru</a> — Fri Mar 04, 2011 7:33 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[qbradq]]></name></author>
<updated>2011-03-04T15:57:01-07:00</updated>
<published>2011-03-04T15:57:01-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75123#p75123</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75123#p75123"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75123#p75123"><![CDATA[
Many older games (like the Ultima series) establish tile ranges, and every tile within a particular range has a different function. An example range map might look like this:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">$00 - $3f Collide, flat<br />$40 - $5f Collide, Slope Down Left<br />$60 - $7f Collide, Slope Down Right<br />$80 - $8f Liquid surface<br />$90 - $9f Liquid body<br />$a0 - $bf Hurts when Touched<br />$c0 - $df Instant Death<br />$e0 - $ff Background, do not collide<br /></div><br /><br />Then in your collision code you would detect when your objects enter the area of the tile, the use the tile's number (in a big if / else block) to figure out what to do.<br /><br />A better approach might be to have a table in ROM that lists those attributes, then index that table with the tile number. It's a little bit slower but more flexable.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3706">qbradq</a> — Fri Mar 04, 2011 3:57 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[3gengames]]></name></author>
<updated>2011-03-04T16:06:04-07:00</updated>
<published>2011-03-04T15:34:12-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75120#p75120</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75120#p75120"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75120#p75120"><![CDATA[
Maybe have multiple tables of the background separate inside WRAM if you have it. You could have 4-bit per tile, then have XXYY where XX=Sloped/Not &amp;&amp; how much. Then YY=Normal,Hard,Water,Death. Just my idea on how I'd do that. Takes RAM, But then you'd not have to run your insturctions through the PPU to read the background and is worth it IMO.<br /><br /><br />ETA:<br /><br />If you don't put your tiles in ROM like Battle Kid (Only game I know that puts them in a specific way), then having those ranges would be easier because you could then use the top 6 bits to determine what type.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4311">3gengames</a> — Fri Mar 04, 2011 3:34 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[ManicGenius]]></name></author>
<updated>2011-03-04T15:21:54-07:00</updated>
<published>2011-03-04T15:21:54-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75117#p75117</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75117#p75117"/>
<title type="html"><![CDATA[Map collision]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=7542&amp;p=75117#p75117"><![CDATA[
So I'm at the point with my game where I'm twiddlin' with the Ogmo Editor (customizable, check it out), and I'm thinking about how best to represent background tiles the player can collide with.  I'm coming from a more modern programming background where I'm used to essentially having a separate "meta-map" storing the collision data for a map.<br /><br />However, this doesn't seem as feasible on a limited system like the NES.  Having 2 nametables worth of meta-collision data with my scheme would take roughly 60 bytes just to handle standard collision, but I'm prepping something to have flat, slope up, slope down, insta-death and water physics.<br /><br />I'm kinda at the point where I'm thinking I'll just store a list of tiles instead referencing what properties they essentially have.<br /><br />e.g.<br />#$01  = flat collision<br /><br />I'm leaning that way so I use less RAM.  Just wanna see what all you have done and any suggestions for doing something like this efficiently.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4461">ManicGenius</a> — Fri Mar 04, 2011 3:21 pm</p><hr />
]]></content>
</entry>
</feed>