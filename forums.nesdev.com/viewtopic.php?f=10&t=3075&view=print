<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - Assembler &amp; multiple ROM banks</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">Assembler &amp; multiple ROM banks</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3075">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=3075</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 16, 2007 6:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Assembler &amp; multiple ROM banks</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />How do people usually handle coding programs larger than 32KB? I mean, how would you would you handle the source files and assemble them?
<br />
<br />I really do not know much about assemblers, but I want to code my game right (clean source code). I'm trying to figure some assemblers out, but I can't seem to find out how to have blocks of code that share the same memory area (different banks that will be mapped to the same memory area) and still have them all see the labels and variables from the hardwired bank and vice-versa.
<br />
<br />Can anyone help me out with this? What would be the best assembler to work with multiple ROM banks? Thanks for the help.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWal</b> [ Fri Mar 16, 2007 8:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assembler &amp; multiple ROM banks</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I can't seem to find out how to have blocks of code that share the same memory area...</div><br /><br />To be able to switch banks of code, you will need to grasp what the cartridge you will be coding for is capable of and what limits your compiler has.<br /><br />Taking in my example(...alone as it seems), using Telemark Assembler (TASM) will automatically organize my code into Kilobyte chunks depending on how I organize my data. e.g.:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.org&nbsp; &nbsp;$C000<br />Start:<br />&nbsp; &nbsp; SEI<br />&nbsp; &nbsp; CLD<br />&nbsp; &nbsp; LDA #$00<br />&nbsp; &nbsp; LDX #$FF<br />&nbsp; &nbsp; TXS<br />&nbsp; &nbsp; INX<br />&nbsp; &nbsp; TAY<br /><br />&nbsp; &nbsp; ...<br /><br />&nbsp; &nbsp; .org $FFFA<br />Vectors:<br />&nbsp; &nbsp; .dw&nbsp; &nbsp; &nbsp;ReturnIt<br />&nbsp; &nbsp; .dw&nbsp; &nbsp; &nbsp;Start<br />&nbsp; &nbsp; .dw&nbsp; &nbsp; &nbsp;ReturnIt<br />.end</div><br /><br />When compiled that will automagically produce the correct size program rom for an NROM-128 board. (The 128 is kilobits)<br /><br />Now, if I were to:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; ...<br />&nbsp; &nbsp; .org $9FF8<br />Vectors:<br />&nbsp; &nbsp; .dw&nbsp; &nbsp; &nbsp;ReturnIt<br />&nbsp; &nbsp; .dw&nbsp; &nbsp; &nbsp;Start<br />&nbsp; &nbsp; .dw&nbsp; &nbsp; &nbsp;ReturnIt<br />.end</div><br /><br />This would only produce a Kilobyte of code. I could then use a dos command "copy /b 1.bin+2.bin+3.bin+4.bin prgrom.bin" to build a complete program rom. Now of course there are tools to build these for you, but somtimes it better to see what's happening (a piece of code may have not compiled becuase of an error, for example).<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">...still have them all see the labels and variables from the hardwired bank and vice-versa.</div><br />Most, if not, all compilers include an "include" function that allows the compiler to jump to another file and insert it into the currently compiling program. One feature of this caveat is that you can also define variables, macros, and constants from another file using this technique.<br /><br />So, if you had a set of variables in RAM space, and you had them defined in your main.asm, but also needed them just about everywhre else, you can simply copy them to another file, and then include that file where you'd need it. This saves programmers lots of time and is very effective when working with well-managed code. e.g.:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">OK. Let's say I have these variables in my main.asm file, but need them in my world.asm file as well:<br />;Variables<br /><br />Pad1Stat&nbsp; &nbsp;=&nbsp; &nbsp;$00<br />Pad2Stat&nbsp; &nbsp;=&nbsp; &nbsp;$01<br />Pad3Stat&nbsp; &nbsp;=&nbsp; &nbsp;$02<br />Pad4Stat&nbsp; &nbsp;=&nbsp; &nbsp;$03<br />Pad1Delta1&nbsp; &nbsp;=&nbsp; &nbsp;$04<br />Pad1Delta2&nbsp; &nbsp;=&nbsp; &nbsp;$05<br />Pad2Delta1&nbsp; &nbsp;=&nbsp; &nbsp;$06<br />Pad2Delta2&nbsp; &nbsp;=&nbsp; &nbsp;$07<br />BinaryRoll&nbsp; &nbsp;=&nbsp; &nbsp;$10<br /><br />I could simply create a new file &#40;In this case, i'll call it MAIN.h, since .h is generally used for include files among compilers, but anything will work with most compilers&#41;and in it I'll place that code. Now in my main.asm I'd need to replace all that with a new line &#40;example using TASM, may vary depending on compiler used&#41;:<br /><br />#INCLUDE&nbsp; &nbsp;&nbsp; &nbsp;&quot;MAIN.H&quot;<br /><br />Now my main.asm file will compile that main.h file &#40;in it's entirety&#41; before continuing back to it's own file. I'd also add that line in my world.asm file as well, so that i'll compile and recognise those variables as well.</div><br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">What would be the best assembler to work with multiple ROM banks? Thanks for the help.</div>
<br />All compilers are capable of multiple banks (some to an extent). Just go with whatever you feel comfortable using.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>doppelganger</b> [ Fri Mar 16, 2007 8:50 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Shouldn't those vectors start at $9ffa or $fffa instead of $9ff8 or $fff8?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 16, 2007 8:57 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: Assembler &amp; multiple ROM banks</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWal wrote:</div><div class="quotecontent">When compiled that will automagically produce the correct size program rom for an NROM-128 board. (The 128 is kilobits)</div><br />Yes, I'm used to working like this.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I could then use a dos command "copy /b 1.bin+2.bin+3.bin+4.bin prgrom.bin" to build a complete program rom.</div><br />That's precisely what I'm trying to avoid. Sure, I could assemble each piece individually, but then each piece of code would not be able to see variables and labels defined in the main PRG bank. Nor would it be able to see labels and variables of the other ones.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">you can simply copy them to another file, and then include that file where you'd need it.</div><br />Sure, I have the intention to do this for global variables, but that still doesn't help with the labels.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">All compilers are capable of multiple banks (some to an extent). Just go with whatever you feel comfortable using.</div>
<br />I'm trying to go with ca65...
<br />
<br />My problem is that I have a hardwired bank, that can call subroutines in the lower, switchable bank. To call routines in different banks, I need the labels from different banbks to be avaliable to the hardwired bank.
<br />
<br />I also want all switchable banks to be able to see the labels in the hardwired bank. This seems easier, 'cause I guess I could just include the code for the hardwired bank at the end when assembling all other banks but have the assembler output only the lower part.
<br />
<br />I can't seem to figure out a way for the hardwired bank to see the labels of all others, though.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>AWal</b> [ Fri Mar 16, 2007 9:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">doppelganger wrote:</div><div class="quotecontent">Shouldn't those vectors start at $9ffa or $fffa instead of $9ff8 or $fff8?</div><br /> <br />Yes, they should, thanks for noticing...I add a bit of text before my vector arrangement, so it's always like $xxxx-x for text.<br /><br /><div class="quotetitle">tokumaru wrote:</div><div class="quotecontent">I need the labels from different banbks to be avaliable to the hardwired bank.</div>
<br />
<br />For the labels, there is another function known as a symbol table. e.g.:
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">With TASM, in a case that'd make it easy to import existing labels form other code, I'd use the EXPORT directive<br /><br />.org&nbsp; &nbsp; $C000<br />Start:<br />&nbsp; &nbsp; SEI<br />&nbsp; &nbsp; CLD<br /><br />.org&nbsp; &nbsp; $E000<br />RetIt:<br />&nbsp; &nbsp;RET<br /><br />.org&nbsp; &nbsp; $FFFA<br />;Vectors<br />.dw&nbsp; &nbsp; RetIt<br />.dw&nbsp; &nbsp; Reset<br />.dw&nbsp; &nbsp; RetIt<br /><br />EXPORT Start, RetIt<br />.end<br /><br />This would write an aditional file &#40;with an .exp extension...I think...&#41;, that I'd include elsewhere, and I could use those labels freely as I'd need.</div>
<br />
<br />With TASM, there is both a symbol table and an export symbol table. The major difference between these two files is that the export table includes .equ or = directives so that it can be directly compiled. The symbol table is mainly designed for debugging, and can help out definining what rountines go where, especially when you have a lot of them.
<br />
<br />I hope this is helping...and at this point I'm only assuming UNROM since you suggested hardwired bank + changing the lower one.
<br />
<br />I seem to remember one of the megamans using a technique where all the code resided in the fixed bank, and it only used data from the others.
<br />
<br />
<br />
<br />Also, one thing I forgot to mention is bus contention issues. Some game cartridges did not disable the program rom chip when writing data, so the cartridge may overpower the output. Check a pcb of the cartridge type you are programming for to see if there is an or gate (74x32). Usually that will conclude that it's okay to write whereever, otherwise you'll need to reserve a 256-Byte bank of numbers, in hexidecimal order, then write your commands as e.g.: STA WriteBank, X .

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 16, 2007 9:58 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">AWal wrote:</div><div class="quotecontent">I'm only assuming UNROM</div><br />UOROM actually. It's the same thing, but with 256KB of ROM.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I seem to remember one of the megamans using a technique where all the code resided in the fixed bank, and it only used data from the others.</div><br />That'd be great, but 16KB would not be enough for all my code.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Also, one thing I forgot to mention is bus contention issues.</div>
<br />Yeah, I'm aware of all the hardware issues. My problem really is all about being able to see the labels and variables across the different banks. I'll try this IMPORT/EXPORT thing...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 16, 2007 10:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I just realized I am really stupid and don't know how to work with assemblers at all.
<br />
<br />So far, I've done all my NES development with the 6502 simulator, which would let me save the binary data assembled from my code directly to a file. As simple as that, I had my .nes file ready.
<br />
<br />Now I'm trying to learn to use some actual assemblers, and can't even seem to go past the linking process. In fact, I don't think I understand this process at all.
<br />
<br />So, I get this object file. What do I do with it? Link? How? What the hell does "linking" do?
<br />
<br />So yeah, I can't seem to be able to use any assemblers, I'm that stupid. I'd appreciate any help here now. Thanks.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Memblers</b> [ Fri Mar 16, 2007 11:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I think the object file has the code, but no addresses.  Linking it fills out all the memory locations and stuff depending on the configuration.  Something like that.
<br />
<br />I had to really fight with LD65 to get it to pad the files.  Here's my linker config for Garage Cart (using 32kB banks and really hacked together):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">MEMORY &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ZP: start = $00, size = $100, type = rw;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RAM: start = $200, size = $600, type = rw;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WRAM: start = $6000, size = $2000, type = rw;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG1A: start = $8000, size = $3F80, type = ro, file = &quot;prg1a.prg&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG1B: start = $C000, size = $4000, type = ro, file = &quot;prg1b.prg&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG2A: start = $8000, size = $3F80, type = ro, file = &quot;prg2a.prg&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PRG2B: start = $C000, size = $4000, type = ro, file = &quot;prg2b.prg&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BOOTROM: start = $BF6E, size = $092, type = ro, fill = $00, file = &quot;boot.prg&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NSFHEAD: start = $7F80, size = $0080, type = ro, file = &quot;nsfhead&quot;;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br />&nbsp; &nbsp; &nbsp; &nbsp; SEGMENTS &#123;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NSFHEADER: load = NSFHEAD, type = ro, start = $7F80;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CODE: load = PRG1A, type = ro, start = $8000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BOOTCODE: load = BOOTROM, type = ro, start = $BF6E;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SAMPLES: load = PRG1B, type = ro, start = $C000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CODE2: load = PRG2A, type = ro, start = $8000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SAMPLES2: load = PRG2B, type = ro, start = $C000;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DATA: load = RAM, type = bss;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WRAM: load = WRAM, type = rw;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ZEROPAGE: load = ZP, type = zp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BSS: load = RAM, type = bss, define = yes;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS: load = PRG1B, type = ro, start = $FFFA;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; VECTORS2: load = PRG2B, type = ro, start = $FFFA;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CRAP0: load = PRG1A, type = ro, start = $BF6D;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CRAP1: load = PRG2A, type = ro, start = $BF6D;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CRAP2: load = BOOTROM, type = ro, start = $BFFF;<br />&nbsp; &nbsp; &nbsp; &nbsp; &#125;<br /></div>
<br />
<br />It was just using different segments in one big source file (well, with other source files .included too).  Also, on the memory config if you set the filename to be same for all of them, it'll just put it all together for you.  But I had trouble getting it to pad at the end of the bank, so I had to set my bootcode origin manually (usually the vectors handles that).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Fri Mar 16, 2007 11:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thanks Memblers, but I'm still very confused... I can't see where I'd write stuff like that, how and why.
<br />
<br />I guess I'll be writing my own assembler then... (a simple one, with just what I really need!)
<br />
<br />Seriously, how lame it is that I am able to think in 6502 ASM all day long but am not able to assemble the simplest program?
<br />
<br />I just don't get why you need to do something so complicated...! Start putting values by hand? What sense does it make?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Bregalad</b> [ Sat Mar 17, 2007 1:21 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />There is basically 2 ways of doing it :
<br />- Have your assembler decide wich piece of code does in which bank, and place assembler if directive and all that stuff to do proper bankswitching. Typically you'd check if your routine is in the same bank than the previous one, and if not do the bankswitching. I recommand this method if you want to go with full 32kb pages, because if doesn't really matter in which order the banks are, and you just want to follow your code exactly no matter in wich bank it is. Your assembler must support multiple NMI/IRQ/Reset vectors pointing to the same adress in multiple banks however (I think WLA-DX does). Also, WLA-DX assemble stuff in sections, so that you're sure the code in a given section will always get in the same bank.
<br />
<br />- Have yourself manage which data is in wich bank and just tell the assembler to do so. Then you decide "My graphics are in banks 0 and 1, my sound code is in bank 2, my game engine is in bank 3, ennemy data is in bank 4, map data is in bank 5, and my main code is in bank 7 wich is hardwired and will always be present at $c000-$ffff, including interrupts, reset, PPU writes, etc...".
<br />Then you just code your stuff and tell the assembler to do so. I recommand this for 16k/16k hardwired pages. The main advantage is that it is easier to manage, but however, you never know if suddently you need more banks for something you havent planned, or if you just waste bank with little data in them. A disavantage of this is that you are very succeptible to find your hardwired bank overflowing, and be embarassed because this will force you to move stuff in bankswitced areas, and you'll be screwed (32k banks doesn't have this problem).
<br />
<br />- Of course, you can  mix both methods, and just have two sections in your code : The hardwired one and the bankswitched one. And then you would bankwitch stuff at $8000-$bfff by testing the bank index of your labals in bankswitched sections your assembler gives to you (assuming it does, however).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>commodorejohn</b> [ Mon Mar 19, 2007 2:15 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hah, I'm working on-and-off on a project that comes out to 520KB - it's a port of another game, and it breaks down to 8KB of code and game data, 8KB of VROM, and 504KB of speech samples =) (8-bit speech samples directly outputted, that is, not DMC samples. And I have to pause whatever else I'm doing when playing a speech sample, but thankfully that's about how it worked in the original game anyway.)
<br />
<br />Anyway, I'm using NESASM for it. I know a lot of people here dislike it, and they have valid reasons for doing so, but its banking support is quite nice, thanks to the fact that it was originally designed for the TG16, which has bankswapping functionality built right in. The ROM is divided into 8KB pages (as in the TG16 hardware mapper,) which is the smallest page size for NES mappers anyway. Page boundaries can be specified manually in the code, or handled automatically by the assembler. Very nice.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 19, 2007 3:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">commodorejohn wrote:</div><div class="quotecontent">Hah, I'm working on-and-off on a project that comes out to 520KB - it's a port of another game, and it breaks down to 8KB of code and game data, 8KB of VROM, and 504KB of speech samples =) (8-bit speech samples directly outputted, that is, not DMC samples. And I have to pause whatever else I'm doing when playing a speech sample, but thankfully that's about how it worked in the original game anyway.)</div>
<br />Is there a reason that you're using 8-bit (really 7-bit) speech samples instead of, say, 4-bit speech samples? Have you considered some form of data compression like <em>Big Bird's Hide and Speak</em> uses?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>never-obsolete</b> [ Mon Mar 19, 2007 4:16 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">commodorejohn wrote:</div><div class="quotecontent">Anyway, I'm using NESASM for it. I know a lot of people here dislike it, and they have valid reasons for doing so, but its banking support is quite nice, thanks to the fact that it was originally designed for the TG16, which has bankswapping functionality built right in. The ROM is divided into 8KB pages (as in the TG16 hardware mapper,) which is the smallest page size for NES mappers anyway. Page boundaries can be specified manually in the code, or handled automatically by the assembler. Very nice.</div>
<br />
<br />i couldn't figure out the banking system nesasm used until after i wrote an assmelber. i feel kinda dumb now...
<br />
<br />my assembler uses 16K banks with ".low" and ".high" directives for splitting a bank into 2 seperate 8K banks. it seems to work quite nicely.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>commodorejohn</b> [ Mon Mar 19, 2007 5:34 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent"><div class="quotetitle">commodorejohn wrote:</div><div class="quotecontent">Hah, I'm working on-and-off on a project that comes out to 520KB - it's a port of another game, and it breaks down to 8KB of code and game data, 8KB of VROM, and 504KB of speech samples =) (8-bit speech samples directly outputted, that is, not DMC samples. And I have to pause whatever else I'm doing when playing a speech sample, but thankfully that's about how it worked in the original game anyway.)</div><br />Is there a reason that you're using 8-bit (really 7-bit) speech samples instead of, say, 4-bit speech samples? Have you considered some form of data compression like <em>Big Bird's Hide and Speak</em> uses?</div>
<br />Because everything fits nicely into the cartridge with a little room to spare, and the game itself is quite small. (The numbers I gave were approximate - it's actually 489KB of sample data and ~8KB of code and game data.) Besides, with the recording quality of the speech, 4-bit is not very intelligible - I tried.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Mon Mar 19, 2007 8:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Thought I'd just throw this out because I've never really understood (the elaborateness of) other assembler's banking/segment schemes:
<br />
<br />My scheme creates a virtual 16bit address space for each bank(segment/whatever). I have a file output directive that lets you dump whatever banks to file(s) at the end of assembly. The banks are This allows me to have make generic banks/segments for RAM allocation, ROM or whatever but only output the ROM banks. The first instance of the bank directive dynamically creates it, the second instance just puts the location into the bank's address space which makes AOROM style banking really simple.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>1</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>