<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - irq question, why do sprites cause irq to shake/flucuate?</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">irq question, why do sprites cause irq to shake/flucuate?</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11104">http://forums.nesdev.com/viewtopic.php?f=10&amp;t=11104</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Sun Mar 16, 2014 1:43 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>irq question, why do sprites cause irq to shake/flucuate?</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm trying to learn about setting up irq's yet again with my MMC5 Zelda hack.<br /><br />I read this site, <!-- m --><a class="postlink" href="http://bobrost.com/nes/files/mmc3irqs.txt">http://bobrost.com/nes/files/mmc3irqs.txt</a><!-- m --> on learning about setting 40 to 4017 &amp; setting CLI.<br /><br />So what I did was I loaded/stored 40 into $4017 at the beginning of my reset vector, i set the CLI at the end of my reset vector, just before the infinite jmp loop.<br /><br />Then at the beginning of my NMI, I loaded/stored 80 into $5204<br /><br />Now with all of that done, I rebooted my rom, and watched $FFFE-$FFFF, and it was firing up, I had it point to just an RTI, to see if this was actualy getting logged.<br /><br />So now that I actually have the IRQ register being recognized, I started inserting asm for the irq scanline, to perform a split screen.<br /><br />Now this is where I cant for the life of me figure this out. <br /><br />In a lot of the Megaman games, you can have the split start allllllmost at the top of the screen without a lot of fluctuation/hiccups. Like I can have the scanline for those games at about 38, meaning the split is 3 quarters up the screen with no hiccups.<br /><br />Now, with my Zelda game, the sprite 0 does not kick on unless there is an active scroll taking place, keeping the info bar stationary at the top of the screen. But during regular game play, the entire screen can be moved horizontaly/verticaly. Anyways..<br /><br />Why is it that I cant have my irq split that far up the screen? Here are some issues<br /><br />1. If only Link is on the screen, and no other sprites, I can have a pretty decent still irq split, but it has to be waaayyy past the center of the screen downwards.<br /><br />2. If there are multiple sprites on the screen, the irq split goes absolute haywire! (however, this does not happen in the megaman games, and that's with the irq so far up the screen!)<br /><br />So what I would like to know, is am I missing a specific routine to write to the nes, to stop the sprites from causing the irq going haywire? Is there a way for me to have total freedom in where I want the split to occur???<br /><br />I appreciate any help on this, this time around has been the closest I've gotten to installing a custom irq engine, in a game that never had one.<br /><br />Thank You!<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">lda #$20<br />ldy #$00<br />sty $2006<br />sta $2006<br />lda $FF<br />ORA #$01<br />sta $2000<br />lda #$00<br />sta $2005<br />sta $2005<br />lda #$B0<br />sta $5203<br />rti<br /></div><br /><br />Below is a video of it in action<br /><br /><!-- m --><a class="postlink" href="http://www.youtube.com/watch?v=ZeIk-yo_XYk">http://www.youtube.com/watch?v=ZeIk-yo_XYk</a><!-- m -->

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Mon Mar 17, 2014 10:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Ok since no one has an answer to that, how about this.<br /><br />How can you alter the frames per second of a rom? Im thinking my issue is, is that too much is going on for the irq to appear/remain stationary correctly.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Mar 17, 2014 10:24 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you construct your IRQ and other rendering code carefully it should be able to render reliably whether or not your gameplay code has occasional lag frames.<br /><br />I can't tell you what's wrong based on your description or video alone. Posting a ROM might help, posting your entire IRQ routine might help, etc. Here's some ideas:<br /><br />1. I presume you're not using sprite 0 hit for anything, right?<br />2. Check to make sure your IRQ is initialized and enabled with consistent timing (i.e. do it in your NMI before any branching).<br />3. Check to make sure subsequent splits are also initialized with consistent timing in the IRQ routine.<br />4. Check the &quot;thread safety&quot; of variables used by the IRQ routine. Are you depending on variables that code outside the IRQ routine can alter? Can the timing of when those variables updated cause a problem for the IRQ routine trying to use them?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Mon Mar 17, 2014 11:00 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Everything that im about to write here, is everything i have that has an irq firing up. Again i'm new to inserting a custom irq engine in a game that does not originaly have one, *like the Megaman 3-6 games* I'm really just going by the seat of my pants with all of this, tried looking online, studying, and this is the first time that i'm actualy getting results, good results, but if i can figure out/learn, how to make this tighter/better, be able to have the split anywhere i want verticaly, then i'll be in fantastic shape!<br /><br />And to answer to one of your questions, since the others I'm not sure on cause I'm new to irq's from scratch, there is no sprite 0's going on during my irq usage, the only time a sprite 0 kicks on, is during a scroll.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">End of Reset Vector<br />------------------------<br />CLI<br />JMP $E563&nbsp; &nbsp;;infinite jmp loop<br /><br />Start of NMI<br />---------------<br />PHA<br />TXA<br />PHA<br />TYA<br />PHA<br />JMP $FFF0<br /><br />$FFF0<br />-------<br />LDA #$80<br />STA $5204&nbsp; &nbsp; &nbsp;;Acknowledge mmc5 to enable irq<br />JMP $FF7F&nbsp; &nbsp;;JMP to continuing the start of NMI<br /><br />End of NMI<br />--------------<br />PLA<br />TAY<br />PLA<br />TAX<br />PLA<br />RTI<br /><br />Start of IRQ<br />--------------<br />LDA $5204<br />LDA #$20<br />LDY #$00<br />STY $2006<br />STA $2006<br />LDA $FF<br />ORA #$01<br />STA $2000<br />LDA #$00&nbsp; &nbsp;;X position of split<br />STA $2005<br />STA $2005<br />LDA #$B0&nbsp; &nbsp;;Y position of split<br />STA $5203<br />RTI<br /></div>

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 17, 2014 11:25 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I'm not 100% sure, but IIRC, NMIs set the I flag when they fire. This means that as long as the NMI handler is running, IRQs will not fire. Since you have the game logic running inside the NMI, more processing increases the time IRQs are ignored, causing the glitches you're seeing. You could try adding a CLI to the beginning of the NMI handler as a quick fix.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tepples</b> [ Mon Mar 17, 2014 11:27 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Or at least add the CLI after rendering is turned back on, so that an IRQ is delayed only until the end of vblank processing.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 17, 2014 11:40 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">tepples wrote:</div><div class="quotecontent">Or at least add the CLI after rendering is turned back on, so that an IRQ is delayed only until the end of vblank processing.</div><br />Or that, but since well programmed IRQs won't fire during VBlank, I guess it wouldn't hurt to run the CLI before rendering starts.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Mon Mar 17, 2014 11:53 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />In Zelda, $2001 has 1E constantly being stored to it during game play, which I believe is rendering turned on. <br /><br />When I put a CLI after $2001, im able to have the irq split anywhere! BUT, the game horrificly glitches/crashes in seconds.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Mar 17, 2014 2:03 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />$2001 is not relevant to an IRQ problem. It merely controls whether graphics make it to the screen. The relevant thing is the NMI, which is controlled by $2000.<br /><br />When an IRQ or NMI is running <a href="http://wiki.nesdev.com/w/index.php/CPU_status_flag_behavior" class="postlink">there is an implicit SEI</a> but also remember that the status register is also restored when you RTI. This means that NMI will suspend the triggering of an IRQ until you RTI from it, normally.<br /><br />You don't want the vblank portion of your NMI to be interrupted by an IRQ because the timing is critical here. Also, it's offscreen, so you're not going to want an IRQ during vblank anyway. That's fine. What tokumaru was suggesting is that if your NMI is still running some ways into the screen, it will block your IRQ, normally. Here's one way you can structure your NMI routine:<br /><br />1. NMI begins at start of vblank (implicit SEI)<br />2. Start your IRQ timer (consistent starting point for timer)<br />3. upload sprites, nametable, palette, and any other PPU data<br />4. CLI to allow your IRQ to fire any time after this point (we should still be offscreen in vblank at this point)<br />5. rest of NMI, non-rendering related stuff (music, gameplay, whatever you want here)<br />6. RTI to end NMI (implicit CLI, if I was clear before NMI entered)<br /><br />If you put your gameplay inside your NMI routine, you should create a flag that exits the NMI routine immediately if there is already an NMI in progress, i.e. prevent re-entrant NMI. This is to prevent the next frame's NMI from interrupting the current one (and probably causing chaos) if you have a lag frame that takes too long to process.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Drag</b> [ Mon Mar 17, 2014 2:48 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />You should really move your main game logic outside of NMI. What I do is, at the very end of my NMI routine, I set a flag in memory, so I'll do something like write $01 to $000F. Then, I have a &quot;wait for vblank&quot; subroutine that reads $000F over and over again in a loop until it finally reads as $01. Then the routine sets it back to $00 and returns.<br /><br />So basically, you have your main game code run, and at the very end, you JSR to the wait-for-vblank subroutine, so the CPU will get stuck in there until the NMI happens, which is where you set $000F to $01. Once NMI exits, the CPU returns to that wait-for-vblank subroutine, but $000F is now $01, so the routine sets it back to $00 and returns. After that, you JMP back to the beginning of your main game logic loop.<br /><br />The advantage of doing it this way is, if your main loop has a LOT of processing to do, to where it takes more than one frame to do it, the NMI and other IRQs will still happen like usual, and once their respective routines finish, control returns to the main game loop where it left off. If your game logic is running inside an interrupt, you can't interrupt an interrupt, so IRQs won't work the way you want them to.<br /><br />It's hard to explain this because it explains a different mentality to design code with.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Mon Mar 17, 2014 3:51 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Im confused on what you all mean by (outside the nmi)<br /><br />I dont understand how I do that? I thought the main game is through $FFFA-$FFFB, and the reset vector is through $FFFC-$FFFD, while the irq/brk is at $FFFE-$FFFF?<br /><br />So im confused as to how this is supposed to work.<br /><br />And what is an implicit sei? Is that just a fancy term for using a regular SEI (78) ?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>tokumaru</b> [ Mon Mar 17, 2014 4:11 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">infidelity wrote:</div><div class="quotecontent">Im confused on what you all mean by (outside the nmi)</div><br />Some old games and some NES programming tutorials place the game logic inside the NMI handler. This is fine in some cases, but it's not ideal. There are complications that may happen when the game logic takes too long to complete. In short, another NMI will fire before the previous one finishes, interrupting it. If you're not prepared to handle this, all sorts of bad things can happen, like glitched graphics and even crashes.<br /><br />A better, more versatile way to organize your code is to put the game logic outside of the NMI, in the main loop (instead of just having a JMP there), and use the NMI only for PPU/APU updates. NMI can still fire before the previous frame is finished, but it's a little easier to manage since the video and audio are separated from the game logic.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I dont understand how I do that? I thought the main game is through $FFFA-$FFFB, and the reset vector is through $FFFC-$FFFD, while the irq/brk is at $FFFE-$FFFF?</div><br />That's an oversimplification of how things really are. In reality, the CPU has these 3 addresses it jumps to at certain times, but the way you divide the tasks you need to perform across these addresses is up to you. There are many possibilities, each with their pros and cons.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">And what is an implicit sei? Is that just a fancy term for using a regular SEI (78) ?</div><br />No, if it was regular he wouldn't have said &quot;implicit&quot;! =)<br /><br />What he meant is that when the NMI fires, the I flag gets set. So even if you CLI in your reset code, a &quot;hidden&quot; (i.e. implicit) SEI happens and sets the I flag when the NMI fires. This means you have to clear it again if you expect IRQs to happen before the NMI handler is finished (RTI).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Mon Mar 17, 2014 6:06 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />If you are running your game logic in your NMI, it is very important to prevent re-entry. This is one way to do it:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />nmi_running: .res 1<br /><br />.segment &quot;CODE&quot;<br />nmi:<br />&nbsp; &nbsp; ... push registers<br />&nbsp; &nbsp; lda nmi_running ; use flag to prevent beginning second NMI if first one is not finished<br />&nbsp; &nbsp; beq :+<br />&nbsp; &nbsp; ... pop registers<br />&nbsp; &nbsp; rti<br />:<br />&nbsp; &nbsp; lda #1<br />&nbsp; &nbsp; sta nmi_running<br />&nbsp; &nbsp; ... rest of NMI code<br />&nbsp; &nbsp; lda #0<br />&nbsp; &nbsp; sta nmi_running<br />&nbsp; &nbsp; ... pop registers<br />&nbsp; &nbsp; rti</div><br />If you do not prevent re-entry, your game will almost certainly crash, or at least behave very strangely whenever your game logic takes longer than a frame to complete.<br /><br />Now, a lot of people are suggesting not to do your game logic in the NMI. This is because when your game logic runs too slow it will break your required rendering IRQs as well as causing the music to slow down too. This is not good! Here is one way to structure your code to do the gameplay logic outside the NMI:<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">.segment &quot;ZEROPAGE&quot;<br />nmi_counter: .res 1<br />nmi_running: .res 1<br /><br />.segment &quot;CODE&quot;<br />nmi:<br />&nbsp; &nbsp; ... push registers<br />&nbsp; &nbsp; ... prevent re-entry<br />&nbsp; &nbsp; ... set your first IRQ timer<br />&nbsp; &nbsp; ... upload OAM<br />&nbsp; &nbsp; ... upload palette and nametable changes<br />&nbsp; &nbsp; ... set scroll<br />&nbsp; &nbsp; cli ; allow IRQ scroll splits while NMI is still running<br />&nbsp; &nbsp; ... run music routine<br />&nbsp; &nbsp; inc nmi_counter ; increment frame to tell the game it can now execute gameplay for a new frame<br />&nbsp; &nbsp; ... clear re-entry variable (nmi_running)<br />&nbsp; &nbsp; ... pop registers<br />&nbsp; &nbsp; rti<br /><br />reset:<br />&nbsp; &nbsp; ... standard reset stuff<br />&nbsp; &nbsp; ... setup game<br />&nbsp; &nbsp; cli<br />&nbsp; &nbsp; ... turn on NMI (set high bit of $2000)<br />@game_loop:<br />&nbsp; &nbsp; lda nmi_counter<br />:<br />&nbsp; &nbsp; cmp nmi_counter<br />&nbsp; &nbsp; beq :- ; wait until nmi_counter is changed by NMI routine<br />&nbsp; &nbsp; ... run game&nbsp; logic here<br />&nbsp; &nbsp; jmp @game_loop<br /><br />irq:<br />&nbsp; &nbsp;... irq routine<br />&nbsp; &nbsp; rti</div><br />There's more details to this, of course, but this should get you started. If you structure your code like this, the gameplay logic will no longer interfere with music or your IRQ splits, since these will now happen every frame reliably. If your gameplay logic runs too long, only gameplay will slow down and nothing else will be affected.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>infidelity</b> [ Tue Mar 18, 2014 7:36 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I appreciate all the help and time you are all putting into this, but these code pastes are way over my head. Ive tried pasting them into online assemblers, to see if I can view the binary versions of them, but they will not compile.<br /><br />Its one thing if I coded this game from scratch, but its not, all I've been doing is modifying a game from 1986, which back then wasn't properly written since the nes was fairly new at the time.<br /><br />If I had some sort of template to work with, I think that would be helpful.<br /><br />There some other issues im having trouble with.<br /><br />1. What is an irq timer? I don't see anything about a timer in the 005 notes for the mmc5 irq engine, just stuff on how to enable/disable. Am I supposed to simply read a 'frame counter' register as a timer for the irq?<br /><br />2. I apologize but I'm still lost on the whole 'outside the nmi' Does the game logic still take place within &quot;$FFFC-$FFFD? Or does the game logic need to somehow be within the reset vector loop?<br /><br />Again I'm sorry for all of this, I thought this would be a simple solution, but again I'm in uncharted waters here, I'm willing to learn but this stuff is pretty advanced even for me. Everything you all have been saying on this issue, has got me thinking this could even fix my sprite limitation issues I've had to limit myself with, cause horrific slowdown with my sound engine would kick in.<br /><br /><strong>edit</strong><br /><br />This is what I have new for my NMI so far, is this correct? The game continues to run the same however.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">Start of NMI<br />---------------<br />PHA<br />TXA<br />PHA<br />TYA<br />PHA<br />LDA $F2<br />BEQ&nbsp; &nbsp; &nbsp;;to LDA #$01<br />PLA<br />TAY<br />PLA<br />TAX<br />PLA<br />RTI<br /><br />BEQ'd Branch<br />---------------<br />LDA #$01<br />STA $F2<br />4C####&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;start entire NMI routine<br /><br />End of NMI<br />------------<br />PLA<br />TAY<br />PLA<br />TAX<br />PLA<br />LDA #$00<br />STA $F2<br />RTI<br /></div><br /><br />Does the usage of commands and everything appear correct? Do I have this atleast correct? Thank you.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>rainwarrior</b> [ Tue Mar 18, 2014 8:12 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b>Re: irq question, why do sprites cause irq to shake/flucuate</b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Sorry, I made a mistake with the re-entry flag. That last LDA needs to happen before the last PLA before the RTI. The PLA is there to restore the state of A before returning, so:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">End of NMI<br />------------<br />LDA #$00<br />STA $F2<br />PLA<br />TAY<br />PLA<br />TAX<br />PLA<br />RTI</div><br /><br />The second thing you need to do is place that CLI at the end of your vblank PPU update.<br /><br />The IRQ from the MMC3 is connected to a timer that works by counting scanlines. This is what I meant by &quot;IRQ timer&quot;, sorry if the terminology was unexpected.

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>1</strong> of <strong>3</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>