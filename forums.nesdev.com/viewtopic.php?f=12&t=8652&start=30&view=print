<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html dir="ltr" lang="en-gb">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Language" content="en-gb">
<title>nesdev.com :: View topic - fullsnes - new SNES hardware specs</title>

<style type="text/css">
<!--

body {
	font-family: Verdana,serif;
	font-size: 10pt;
}

img {
	border: 0;
}

td {
	font-family: Verdana,serif;
	font-size: 10pt;
	line-height: 150%;
}

.code, .codecontent, 
.quote, .quotecontent {
	margin: 0 5px 0 5px;
	padding: 5px;
	font-size: smaller;
	border: black solid 1px;
}

.quotetitle {
	color: black;
	display : block;
	font-weight: bold;
}

.forum {
	font-family: Arial,Helvetica,sans-serif;
	font-weight: bold;
	font-size: 18pt;
}

.topic {
	font-family: Arial,Helvetica,sans-serif;
	font-size: 14pt;
	font-weight: bold;
}

.gensmall {
	font-size: 8pt;
}

hr {
	color: #888;
	height: 3px;
	border-style: solid;
}

hr.sep {
	color: #aaa;
	height: 1px;
	border-style: dashed;
}
//-->
</style>

</head>
<body>

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td colspan="2" align="center"><span class="Forum">nesdev.com</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/">http://forums.nesdev.com/</a></span></td>
</tr>
<tr>
	<td colspan="2"><br /></td>
</tr>
<tr>
	<td><span class="topic">fullsnes - new SNES hardware specs</span><br /><span class="gensmall"><a href="http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8652">http://forums.nesdev.com/viewtopic.php?f=12&amp;t=8652</a></span></td>
	<td align="right" valign="bottom"><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
</tr>
</table>



	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>kyuusaku</b> [ Sat Mar 03, 2012 11:13 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />PAL16L8 outputs commonly implement S/R and transparent latches, not like the latch in the wiki talk page, but as a multiplexer with feedback since it's more efficient to SOP. You may build a true M-S flip flop from two latches (thus 2 outputs), but it's expensive to implement and isn't sure to work on all chips because of variable propagation so it's not common. If every output in the design drives an external signal, it's unlikely there is any internal state by conventional means.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>d4s</b> [ Sun Mar 04, 2012 4:28 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><a href="http://dforce3000.de/pub/pcb.sfbox.tar.bz2" class="postlink">Super Famicom Box pcb pictures</a>
<br />
<br />Regarding Satellaview information:
<br />This data was gathered by using a memory viewer running on the SNES.
<br />I'm unable to find my Satellaview modem at the moment, so all of the following is from memory:
<br />
<br /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">&gt; reg  (r/w): def description<br />"def" means initial value on Power-Up (and/or on Reset)?</div><br /><br />Default values / values after cold boot, yes.<br /><br /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">&gt; 2188 (r/w): ... 14 bits wide ... reading back $aa,$55.<br />How can it read-back 55AAh if it's only 14bit wide? Which bits are used/unused? And what are the unused bits, open-bus, or always 0, always 1?</div><br /><br />The games I've seen test these values in succession, i.e first $aa, then $55.<br /><br /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">&gt; 2194 (r/w): $00 (4bit) <br />&gt; bit0 affects bit0 of 2196<br />&gt; bit2 switches satellaview access light on<br />&gt; 2196 (r)  : $02 bit0 alternates fast if bit 1 of 2194 is set<br />Okay, with 4bit you mean bit0-3? (existing software uses only that bits), so bit4-7 are always zero, not read/write-able?<br />Ehhhhm, which bit affects 2196.bit0? "bit0" of 2194 or "bit 1" of 2194?<br />LED is ON or OFF when setting 2194.bit2?<br />Software always writes same value to bit2+bit3 of 2196, so my guess was that both are LED related (like givining it more power when both bits set, or switching it from Red to Green on certain values or so). But now, after reading your doc, the Access-LED is solely controlled by bit2? And, just to be sure, the Power-LED isn't software controlled?<br />&gt; 2195 (r)  : $00<br />That one isn't used by existing software. On hardware it's just always reading zero?[<br /></div><br /><br />Don't remember the details.<br />Will have to check again when I locate my modem.<br />I was unable to toggle the power-LED, so yes, my assumption is that it's not software controlled.<br /><br /><div class="quotetitle">whicker wrote:</div><div class="quotecontent">9 - Service Mode (Install mode)<br /><br />0 - Play any game, no restrictions. There is no option 5 after selecting the game.<br /><br />1 - Giant Japanese yellow text on blue background saying the equivalent of THE KEY IS ON, please turn the key OFF. (kii ga ON ni natte imasu. kii o OFF ni shite kudasai). It looks like the Super Famicom is generating this text.<br /><br />2 - After selecting a game, you can now pick option 5 to Try a game (for free) for 2 minutes. Onscreen text counts down time. Warns one minute left, then when almost out of time counts down the seconds. Resets back to the menu. You can still pick option 1 and play freely, but onscreen text does not go away.<br /><br />3 - Self Check. White text on a blue screen like 1.Controller....Ok, 8.RTC.....OK. Just continues to loop.<br /><br />4 - Power OFF, Scared me the first time because a relay clicks. If the unit has the optional power outlet (mine does not), I think this is intended to shut off the television set.</div>
<br />
<br />Not relevant to emulation, but I thought this might fit here, anywhere:
<br />It appears that there are different keys for different purposes.
<br />For example, the key that came with my machine says "visitor", and the only possible positions you can select with this key are "ON" and "OFF".
<br />Explains why I never got that Kirby intro...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Charles MacDonald</b> [ Sun Mar 04, 2012 7:53 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">I am not familar with PALs, but I think the NOR-gate-flipflop idea should work (see above Talk page). Don't know if it's possible to program that PAL so that the flipflop acts like a "hidden" internal variable. Otherwise, one could program it so that the flipflop state shows up on one of the output pins (and from there it could be fed back into the chip).</div>
<br />
<br />You are right that it is possible to make a flip-flop on an unregistered PAL like the 16L8, and this was done on devices like the PLS153 before the registered PAL parts (16R4 series and up) became popular. 
<br />
<br />However the Tribal Tap PAL isn't programmed to implement the logic needed to make a flip-flop. And, being a 16L8 device we know it doesn't have any internal flip-flops. 
<br />
<br />So it really has no internal state -- it simply was not programmed in a way to implement any kind of storage.
<br />
<br />Maybe there's other versions of the device that are different (just theorizing, not saying that's the case), but at least between the models that guy and I tested our findings were identical.
<br />
<br />BTW nocash, it is really great to see you back in the emulation world after so long. Glad all is well! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Mar 05, 2012 3:11 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Okay, then there's no internal state in the tribal tap's PAL. Thanks kyuusaku &amp; charles for explaining.
<br />
<br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">The games I've seen test these values in succession, i.e first $aa, then $55.</div><br />Sorry, my fault. Thought one of them would go to MSB.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">the key that came with my machine says "visitor", and the only possible positions you can select with this key are "ON" and "OFF".</div><br />Nice detail, good to know.<br /><br />I am looking at the sfc-box at the moment. Already reversed most of the I/O ports, though without having the real hardware, it's hard to be sure about the meaning of some bits.<br />The KROM is nasty: Most of the 64Kbytes are filled with compiled HLL-code; very ugly &amp; inefficient. It looks even worse than the old C64-ports that used compiled 6502-code on home computers with Z80 CPUs.<br /><br />The major missing detail is the part number of the OSD video controller (should be the huge 28pin SMD chip in rear section of mainboard). The thing is apparently accessed via the HD640's CSI/O serial port, the software seems to be writing character numbers, screen coordinates, and maybe color attributes &amp; other info to it. For the latter stuff, it'd be REALLY nice to know the chip's part number (hoping that there's a datasheet for it).<br />NB. the KROM doesn't contain a character set, so the charset ROM is probably in the OSD chip, another undumped ROM.<br />EDIT: Since it's accessed via serial bus... maybe the OSD thing is another smaller chip, not the 28pin one.<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">4 - Power OFF, Scared me the first time because a relay clicks. If the unit has the optional power outlet (mine does not), I think this is intended to shut off the television set.</div>
<br />By "power outlet" you mean the 4-pin AC OUT 200W MAX connector on rear-side of the power supply? If yes... from what I've seen on photos, there seem to be no signals going from mainboard to power supply - so I'd bet that it isn't possible to control the AC OUT socket by software.
<br />Another idea, maybe the relay is controlling some accept/eject coin mechanics?

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>d4s</b> [ Mon Mar 05, 2012 2:10 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">The major missing detail is the part number of the OSD video controller (should be the huge 28pin SMD chip in rear section of mainboard). The thing is apparently accessed via the HD640's CSI/O serial port, the software seems to be writing character numbers, screen coordinates, and maybe color attributes &amp; other info to it. For the latter stuff, it'd be REALLY nice to know the chip's part number (hoping that there's a datasheet for it).<br />NB. the KROM doesn't contain a character set, so the charset ROM is probably in the OSD chip, another undumped ROM.<br /></div>
<br />
<br />Are you unable to make out the package part number in the pictures I provided?
<br />It's a Fujitsu MB90082-001.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Mon Mar 05, 2012 5:30 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Are you unable to make out the package part number in the pictures I provided?</div>
<br />Ahhh, sorts of... I couldn't make out the pictures. Because... nobody told me to click on "Super Famicom Box pcb pictures" (now I've found it).
<br />Wow, nice pictures! Until today, I did have found 60 sfcbox pictures that didn't show any interesting details. Now there are 3 pics with about all details - thanks!
<br />
<br />Haven't found a MB90082 datasheet, but some others
<br /> MB90050 - 48pin, 35x16 chars, out of 512 chars
<br /> MB90075 - 28pin, 24x12 chars, out of 256 chars
<br /> MB90089 - 28pin, 24x12 chars, out of 256 chars
<br />the sfcbox uses 24x12 chars (and of course a 28pin chip), so the latter two datasheets should be useful, except, they don't include pictures of the 256 characters. As far as I understand, the chips can be manufactured with different charsets... though the "-001" suffix does probably indicate that it contains the standard charset; whatever those chars may look like.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>d4s</b> [ Tue Mar 06, 2012 2:42 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Dumping the charset would be nice.
<br />I saw a pin labeled test in one of the datasheets.
<br />Surely there's some way to dump/verify the ROM.
<br />No idea if it's worth the effort, though.
<br />
<br />If everything else fails, we could resort to hacking KROM1 to display all chars at once and take a picture of that...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Wed Mar 07, 2012 11:57 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">we could resort to hacking KROM1 to display all chars at once and take a picture of that...</div>
<br />Should be best way. And probably easier than to figure out what the /TEST pin does. Seeing a picture of the complete charset would be great. And if the quality isn't good enough to spot pixels... one could enable the double-size mode... or even extract pixels in sync with dotclock from the 3bit-color TTL outputs.
<br />
<br />Accessing the OSD chip via a KROM-replacement should work like so (with upper 8bit of all I/O addresses all zero):
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">OSD_INIT<br />&nbsp; OUT&#91;81h&#93;=00h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;osd chip deselect<br />&nbsp; OUT&#91;0Ah&#93;=00h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;init CSIO<br />&nbsp; for i=1 to 4,OUT&#91;81H&#93;=80h,OUT&#91;81H&#93;=00h,next&nbsp; ;osd wake-up from reset-state<br /><br />OSD_SEND_BYTE<br />&nbsp; set OUT&#91;81H&#93;=80h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;osd chip select &#40;before EVERY byte&#41;<br />&nbsp; set OUT&#91;0BH&#93;=data&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;;prepare TX data &#40;8bit, transferred LSB first&#41;<br />&nbsp; set OUT&#91;0AH&#93;=10h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;start TX<br />&nbsp; wait until &#40;IN&#91;0Ah&#93; AND 10h&#41;=0&nbsp; ;wait until TX ready<br />&nbsp; set OUT&#91;81h&#93;,00h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;osd chip deselect &#40;after EVERY byte&#41;<br /></div><br />Are you familar with Z80 programming &amp; have time to play with the OSD chip?<br /><br />The KROM1 code uses the commands described in MB90075 datasheet, plus some of the new MB90089 functions (which are more or less undocumented), it doesn't use the three "sprite" commands, but does use one "reserved" command (0Bh). Oh, and I just read that dotclock can be 6-8 MHz, so the horizontal resolution could be anything.<br /><br />PS. Also important to enable WRAM (else you have ROM in whole 64K address space).<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; OUT&#91;3Ah&#93;=C8h, OUT&#91;38h&#93;=18h, OUT&#91;39h&#93;=18h</div>
<br />That sequence maps 32K ROM at 0-7FFFh, and 32K WRAM at 8000h-FFFFh. Of which, C000h-FFFFh can be used as WRAM (the portion at 8000h-BFFFh is a "save area" with a read/write-protection feature, so accessing that memory may need further I/O).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>bearmon2010</b> [ Wed Mar 07, 2012 12:38 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />@nocash,
<br />
<br />I am so loving it. It makes the emulator look great I must say. Congratulations and keep up the good work. One more thing I would like to ask a question:
<br />
<br />Are you continuing to work on No$gba as well as no$sns ? Again, good job and welcome back! <img src="./images/smilies/icon_smile.gif" alt=":)" title="Smile" />

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>d4s</b> [ Sat Mar 10, 2012 2:03 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">nocash wrote:</div><div class="quotecontent">Are you familar with Z80 programming &amp; have time to play with the OSD chip?<br /></div>
<br />
<br />Would like to, but I am unfortunately seriously lacking time these days...

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sat Mar 24, 2012 12:29 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />I was recently splitting the core opcodes from the SNES register interfaces for the Cx4, so I took a peek at your notes.
<br />
<br />It's a shame everyone who works on the chip has to make up their own mnemonics for it. Overload had his own as well. The chip itself is part of the HG51BS family, but Hitachi won't give us the technical manual for the chip to get the official names.
<br />
<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 7F48h&nbsp; &nbsp; &nbsp; &nbsp; ?/W&nbsp; Unknown &quot;toggle&quot; &#40;set to 00h/01h, maybe cache load/on/off?&#41;</div><br /><br />This register is "secondary ROM enable". At power-on, it's set to #$00.<br />For MMX2, there is an 8mbit+4mbit ROM. So at power-on, the last 4mbit returns open bus.<br />Set it to #$01, and now you can read out the last 4mbit.<br />It appears to be a very crude anti-dumping trick.<br /><br />The reason it's not emulated is because of MMX3: MMX3 only has one 16mbit ROM, and this register has no effect on it.<br /><br />I don't know what the other unknown registers are for.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 612Eh&nbsp; &nbsp;movb&nbsp; &nbsp;ext_dta,&#91;ext_ptr&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;\these 3 opcodes are used to<br />&nbsp; 4000h&nbsp; &nbsp;inc&nbsp; &nbsp; ext_ptr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; read one byte from &#91;ext_ptr&#93;,<br />&nbsp; 1C00h&nbsp; &nbsp;finish ext_dta&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;/and to increment ext_ptr by 1</div>
<br />
<br />It really doesn't matter how we emulate this to get MMX2/3 running, but I'm fairly confident that 0x4000 is the opcode that reads from the external bus. An inc bus address instruction is inconsistent with the rest of the architecture.
<br />
<br />It is an interesting theory to presume the $2e is a reference to one of the built-in special registers. But this requires a further assumption that x1xx in LD references yet another external data register.
<br />
<br />The 0x1c00 is confusing no matter how you look at it. I believe it's some sort of HALT-style opcode that waits for the 0x4000 rdbus instruction to complete.
<br />
<br />Either way, there's a lot of opcodes MMX2/3 never used.
<br />We have limited ability to execute "new" opcodes by finding 0xfc00 HALT instructions in other locations in the ROM (aside from 208000-range.)
<br />Eg basically execute code/data at 2+ bytes before we see 0x00 0xfc in the ROM, and examine the results on the GPRs.
<br />
<br />We can examine time in a bit of a vacuum, eg "how far does Vcounter:Hcounter advance after executing function NN?", but it's too coarse to really get the timing right.
<br />
<br />The most troubling behavior is that from the decap, we see there are two 256x16-bit ROM pages. There's some definite caching going on that'll make the chip much slower than the 20MIPS we currently emulate it at.
<br />
<br />What I really want is to find someone who can replace the second ROM chip on Rockman X2 with a RAM chip. If anyone can do this, I'm willing to pay at least $100 for the trouble.
<br />
<br />Overload apparently made such a cart, but I haven't seen him online in a while.
<br />
<br /><strong>EDIT:</strong> if you ever get bored and want to take a look, Cydrak and I found what appears to be a timer in the ST018, but we can't figure out how and if the game actually uses it. It seems fully playable without it, but maybe you could find something by disassembling the game as only you seem to be best at? :/

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>nocash</b> [ Sun Apr 01, 2012 8:54 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">7F48h ... This register is "secondary ROM enable".</div><br />That's an unexpected feature. Aside from the anti-dumping effect, it might be intended to R/W-protect SRAM (when using ROM+SRAM instead 2xROM), or to switch addressing for boards with 1 or 2 ROMs.<br />Are you sure it's controlled by 7F48h? The way how 7F48h is used in software looks entirely different than what you described. For example, in the ROM checksum calculation (at 13FAE0h in Megaman X2), 7F48h is toggled after checksumming every 800h byte block. And, after writing 7F48h, the software seems to wait for a busy-flag.<br />My conclusion was that it loads the cache (source in program counter register, and destination 0 or 1 in 7F48h (in case of checksumming stuff that wouldn't make too much sense though)). Whereas... cache-loading may in fact temporarily "disable" the ROMs.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; 612Eh&nbsp; &nbsp;movb&nbsp; &nbsp;ext_dta,&#91;ext_ptr&#93;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;\these 3 opcodes are used to <br />&nbsp; 4000h&nbsp; &nbsp;inc&nbsp; &nbsp; ext_ptr&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; read one byte from &#91;ext_ptr&#93;, <br />&nbsp; 1C00h&nbsp; &nbsp;finish ext_dta&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ;/and to increment ext_ptr by 1<br /></div><br />I can only guess there, too. Doing (or invoking) the memory access in 1st opcode makes most sense to me. Yup, the 3rd opcode may be a "wait", or just forwarding the result in case the memory access can be finished within the 3 opcodes without waiting. And the 2nd opcode, maybe it's doing some memory-access stuff, too, the only thing that is sure is that it does increment ext_ptr (inconsistent with the architecture or not).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">What I really want is to find someone who can replace the second ROM chip on Rockman X2 with a RAM chip.</div><br />Would be nice. And not very complicated: Basically a 32pin SRAM mounted with 1:1 connection on top of the 32pin ROM, plus a switch to select between ROM and SRAM, and finding a /WR write signal from the CX4 chip (or if the thing doesn't have a /WR signal, then it'd be easiest to use a EPROM or FLASH chip instead of SRAM).<br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">if you ever get bored and want to take a look, Cydrak and I found what appears to be a timer in the ST018</div>
<br />When I've time. At the moment I've focused on bugfixes, and SFC-Box...
<br />
<br /><strong>Super Famicom Box:</strong>
<br />
<br />Here's a new KROM1 replacement with diagnostics functions: <!-- m --><a class="postlink" href="http://nocash.emubase.de/kromtest.zip">http://nocash.emubase.de/kromtest.zip</a><!-- m --> Would be great if somebody could burn it into EPROM (27C512), and then replace the KROM1 by that chip.
<br />
<br />It's showing the full OSD character set, different character sizes, mono and color palettes, background "bordering" styles, etc. Plus I/O port dumps, some CPU invalid-opcode TRAP tests, button/switch test, and some "pulse" and "toggle" functions for unknown outputs (some that might blink the LEDs... or possibly produce BEEP sounds in case there's an external audio source).
<br />
<br />Best would be taking JPG screenshots of all test screens with some video grabbing hardware (should be better quality than photos). Though picture quality doesn't matter too much for now, at the moment I'd be just happy to see if/how it's working on real hardware.
<br />
<br />So far, I've tested it only in no$sns (where it's working fine). Real hardware seems to include a watchdog, but that should be handled, so I hope the program won't crash or hang!
<br />
<br />Oh, and some general questions: That GAME/TV button... does that have any visible effect on video input or output? Or maybe pauses the game while in TV mode? Ah, and is it a "normal" push-button, closed when/while pushed, or is it closed when pushed once, and opened when pushed another time? And same for the RESET button?
<br />
<br />The right-most switch setting... is it possible that the relay does switch-off the SFC-Box (rather than switching-off the TV-Set)?
<br />
<br />Some (maybe only newer) MBxxxxx OSD chips seem to have a Blink-feature, is there such a thing used in the SFC-Box, too? (If yes, it might appear in the "OSD STYLES" test).
<br />
<br />And are there any "external" non-APU sound effects? The menu is using the APU, but maybe there are in-game sounds, prompting for new-coin, or confirming coin-insertion. (If there's such a feature, then it's probably merely a BEEP sound, and sould be heard in the "PULSE" tests).

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>byuu</b> [ Sun Apr 01, 2012 5:29 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Very interested and happy about your interest in the SFC Box.
<br />Even for me, I just can't get excited about the system at all :/
<br />If not for you, this one would probably be lost to time.
<br />
<br />&gt; Are you sure it's controlled by 7F48h?
<br />
<br />My understanding of it is that anyone who tries to dump MMX2 gets open bus on the last 4MB. uCON (a misc. copier tool that can dump games) dumps MMX2 by writing to this register first.
<br />So indeed, it may not be its -only- function, but rather a side-effect of the bit being clear. Interestingly enough, it has no effect on reading out the last 8MB of MMX3 (MMX3 is 4MB larger, and on one single ROM chip.)
<br />
<br />&gt; 7F48h is toggled after checksumming every 800h byte block. And, after writing 7F48h, the software seems to wait for a busy-flag.
<br />
<br />Ah, should have known that you'd have a better understanding than I do, heh.
<br />That does indeed make sense what you're saying. I guess we'll have to wait and see with some hardware test code =)
<br />
<br />&gt; I can only guess there, too. Doing (or invoking) the memory access in 1st opcode makes most sense to me.
<br />
<br />That is true, but the pattern matches better for 4000 being the read. Again, only one surefire way to get this correct :D
<br />It's going to be a fun little treat to emulate regardless. Especially getting the failures right when one of the three opcodes are missing.
<br />
<br />&gt; When I've time. At the moment I've focused on bugfixes, and SFC-Box...
<br />
<br />Alright, sounds good. I'm in no big hurry.
<br />FWIW, if you hook up your ARM7TDMI GBA core, it'll work fine with ~2KB of glue code for the MMIO ports. I'm sure you are fully aware, but this game relies on unaligned memory reads rotating data to work. Also, Jonas Quinn discovered that the difficulty flag is stored in 07bf, and is written as a parameter to a function at PC e7b8. Possible the timer comes into play when making complex moves in different difficulty modes.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>KungFuFurby</b> [ Wed Apr 25, 2012 12:36 pm ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" />Hey nocash... I can fill in the blank for some of these multi-tap games for number of players through your documentation.
<br />
<br />Bakukyuu Renpatsu!! Super B-Daman: 4 players (via "Battle Mode")
<br />Bakutou Dochers: 4 players (via the bottom option, "Battle Mode")
<br />Battle Jockey: 4 players
<br />Dream Basketball - Dunk and Hoop: 5 players (six could have been possible, but the multi-tap only supports five)
<br />Dynamic Stadium: 4 players
<br />ESPN National Hockey Night: 5 players
<br />FIFA 97: 5 players
<br />FIFA 98 - Road to World Cup: 5 players
<br />Finalset: 4 players
<br />Go! Go! Dodge League: 4 players
<br />Hat Trick Hero 2: 4 players
<br />Human Grand Prix 3 and 4: Both appear to support 3 players
<br />Hebereke no Oishii Puzzle wa Irimasenka: 5 players
<br />J.League Excite Stage '95 and '96: 4 players for both games
<br />J.League Super Soccer '95: 4 players
<br />Jikkyou Power Pro Wrestling '96 - Max Voltage: 4 players (It could have supported five, but I determined it only supported four.)
<br />Jimmy Connors Pro Tennis Tour: 4 players (Japanese version only!?)
<br />JWP Joshi Pro Wrestling - Pure Wrestle Queens: 4 players
<br />Kunio-kun no Dodgeball: 4 players
<br />Madden NFL '98: 5 players
<br />Mizuki Shigeru no Youkai Hyakkiyakou: 4 players
<br />Multi Play Volleyball: 4 players
<br />NBA Hang Time: 4 players
<br />NFL Quarterback Club: 5 players
<br />NFL Quarterback Club '96: 5 players
<br />NHL '98: 5 players
<br />Shin Nihon Pro Wrestling - Chou Senshi in Tokyo Dome: 4 players
<br />Shin Nihon Pro Wrestling Kounin '94: 4 players
<br />Shin Nihon Pro Wrestling Kounin '95: 4 players
<br />Sugoi Hebereke: 4 players
<br />(TODO: rest of the games on your list)
<br />Yuujin no Furi Furi Girls: 4 players
<br />
<br />And... you missed at least one:
<br />Bomberman B-Daman: 4 players (via Battle)
<br />Kiteretsu Daihyakka - Choujikuu Sugoroku: 5 players
<br />J.League '96 Dream Stadium: 4 players
<br />
<br />Corrections:
<br />Elite Soccer/World Cup Striker: 5 players (Using the "Multiple Players" option while setting up for a game, you can assign different people to different controllers.)
<br />FIFA International Soccer: 5 players
<br />FIFA Soccer 96: This actually supports 5 players, not four. Pause the game and access the controllers with a multi-tap connected... up to five can join in.
<br />Madden NFL '94: 5 players
<br />Madden NFL '95: 5 players
<br />Madden NFL '97: 5 players
<br />
<br />Does this really support the multi-tap? (A quick check came up... as a big question mark. Not sure how the multi-tap would have been used for now.):
<br />Dino Dini's Soccer
<br />J.League Soccer Prime Goal
<br />NHL '95 through '97 (Didn't detect additional players through the one emulator I used them on... could be a hiccup on my end.)
<br />
<br />Lemmings 2 supports the super scope for shooting lemmings, but it does not appear to have software calibration.

		

		</td>
	</tr>
	</table>


	<hr width="85%" />

	<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
	<tr>
		<td width="10%" nowrap="nowrap">Author:&nbsp;</td>
		<td><b>Hamtaro126</b> [ Thu Apr 26, 2012 1:02 am ]</td>
	</tr>
	<tr>
		<td width="10%" nowrap="nowrap">Post subject:&nbsp;</td>
		<td><b></b></td>
	</tr>
	<tr>
		<td colspan="2"><hr class="sep" /><div class="quotetitle">KungFuFurby wrote:</div><div class="quotecontent">Hey nocash... I can fill in the blank for some of these multi-tap games for number of players through your documentation.</div>
<br />
<br />Appearently NOCASH is down, just a notice

		

		</td>
	</tr>
	</table>


<hr width="85%" />

<table width="85%" cellspacing="3" cellpadding="0" border="0" align="center">
<tr>
	<td><span class="gensmall">Page <strong>3</strong> of <strong>5</strong></span></td>
	<td align="right"><span class="gensmall">All times are UTC - 7 hours </span></td>
</tr>
<tr>
	<td colspan="2" align="center"><span class="gensmall">Powered by phpBB&reg; Forum Software &copy; phpBB Group<br />http://www.phpbb.com/</span></td>
</tr>
</table>

</body>
</html>