<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forums.nesdev.com/feed.php?f=3&amp;t=8491" />

<title>nesdev.com</title>
<subtitle>NES Development and Strangulation Records message boards</subtitle>
<link href="http://forums.nesdev.com/index.php" />
<updated>2012-01-11T16:15:17-07:00</updated>

<author><name><![CDATA[nesdev.com]]></name></author>
<id>http://forums.nesdev.com/feed.php?f=3&amp;t=8491</id>
<entry>
<author><name><![CDATA[Xampf]]></name></author>
<updated>2012-01-11T16:15:17-07:00</updated>
<published>2012-01-11T16:15:17-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88753#p88753</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88753#p88753"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88753#p88753"><![CDATA[
Ok, thanks for your quick reply, i think i understood the part with the resampling.<br /><br />But  another questions arises:<br />Do you mean by energy the amplitude of the signal?<br /><br />Ehm i started off with trying to produce a trianglewave at a certain frequency.<br />I managed to get the signal changing from 0-$f and back  at the probably correct frequency. I used the formula from <!-- m --><a class="postlink" href="http://nesdev.com/apu_ref.txt">http://nesdev.com/apu_ref.txt</a><!-- m --> at the DAC output section. I directly take the computed amplitude from this formla ( and scale it to get it hearable). Now i try to playback that trianglwave at 200hz and it sounds like ehm.. ah machinegun or so compared to that <!-- m --><a class="postlink" href="http://en.wikipedia.org/wiki/Triangle_wave">http://en.wikipedia.org/wiki/Triangle_wave</a><!-- m --> <br /><br />the sampling part looks like this, i think i got that correct, currently im taking directly the value the triangle channel currently holds ( so no averaging which you described yet)<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      triangleChannel.updateProgrammableTimer&#40;cycles, 253&#41;;<br /><br />      sampleTimer += cycles;<br />      if &#40;sampleTimer &gt;= sampleDelay&#41; &#123;//sample Delay is around 40<br />         sampleTimer -= sampleDelay;<br />         sample&#40;&#41;;<br />      &#125;<br /></div><br />eh here is the sample() method<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">      float tndOut = 159.79f / &#40;&#40;1f / &#40;triangleChannel.out&#41; / 8227f&#41; + 100f&#41; + 95.88f / 100; //formula from apu_ref.txt, others channels are simply 0<br />      int ampl = &#40;int&#41; &#40;tndOut * 20000&#41;;<br />      sampleBuffer&#91;sampleOffset++&#93; = &#40;byte&#41; &#40;ampl &amp; 0xff&#41;;//little endian<br />      sampleBuffer&#91;sampleOffset++&#93; = &#40;byte&#41; &#40;ampl &gt;&gt;&gt; 8&#41;;</div><br /><br />then i simply write the buffers into the sourceDataLine (signed, 16bit, mono,44.1khz)<br /><br />Edit 2: i managed to find out the problem...<br />figured out that signed means that the "lower half" of the wave has to be negative. so i subtracted -0.5 from tndOut and this did it.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5150">Xampf</a> — Wed Jan 11, 2012 4:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[cpow]]></name></author>
<updated>2012-01-11T15:15:22-07:00</updated>
<published>2012-01-11T15:15:22-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88751#p88751</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88751#p88751"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88751#p88751"><![CDATA[
<div class="quotetitle">Xampf wrote:</div><div class="quotecontent"><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent">Well, you must find an algorithm to resample the generated NES sound. The most simple that I've found &amp; use is adding the samples and divide by the number of updates.<br /></div><br /><br />Hello i am new to emulation..<br /><br />I dont undesrstand that one. E.g. trianglaoutput ranges from 0-15 and square too? how is that wdoes that with the divison work exatly...</div><br /><br />Resampling is referring to the frequency domain.  In this case, going from an audio signal with a sample rate of 1,789,772 samples-per-second to an audio signal with a sample rate of 44,100 samples-per-second.  That's where you need to add together the 40 or 41 samples you'll get from the 1,789,772 samples-per-second signal and divide that value by that number-of-samples to get the 'average' sample value for the resampled 44,100 samples-per-second signal.<br /><br />The ranges you're referring to [0-15 for the square, triangle, and noise DACs, 0-127 for the DMC DAC] are the energy that each channel contributes to the overal signal strength at any given sample in the original signal.  The square, triangle, and noise channels can contribute 0 [no energy] to 15 [full energy] to the signal strength.  No dividing here.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3705">cpow</a> — Wed Jan 11, 2012 3:15 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Xampf]]></name></author>
<updated>2012-01-11T14:20:29-07:00</updated>
<published>2012-01-11T14:20:29-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88747#p88747</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88747#p88747"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88747#p88747"><![CDATA[
<div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Well, you must find an algorithm to resample the generated NES sound. The most simple that I've found &amp; use is adding the samples and divide by the number of updates.<br /></div><br /><br />Hello i am new to emulation..<br /><br />I dont undesrstand that one. E.g. trianglaoutput ranges from 0-15 and square too? how is that wdoes that with the divison work exatly...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5150">Xampf</a> — Wed Jan 11, 2012 2:20 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2012-01-05T14:52:02-07:00</updated>
<published>2012-01-05T14:52:02-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88480#p88480</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88480#p88480"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88480#p88480"><![CDATA[
You just misunderstood me, is all Zepper. <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />By channel update logic, I meant what the channel does to actually render it's waveforms (Taking steps through a duty cycle, shifting the noise register, etc). And by component update logic, I mean what each individual part of a channel does on the APU's "half" and "quarter" frame counter clocks.<br /><br />It's a very important distinction to make, and I called you "incorrect" as to not confuse MottZilla and other people in the future. I meant no harm by it <img src="http://forums.nesdev.com/images/smilies/icon_smile.gif" alt=":)" title="Smile" /><br /><br />And yes, you have to re-sample for whatever audio rendering API you're using, and most people do so using the 44.1kHz sample rate. Those calculations weren't included in my first post because it comes later, and MottZilla wanted to know about emulation, not so much playback at present.<br /><br />But, now that we're on the topic, the amount of cycles in between samples is simply:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sample delay = cpu frequency / sample frequency</div><br /><br />In the case of the NES, with 44.1kHz sample rate:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sample delay = 1789772.72 / 44100</div><br /><br />and the following logic (simplified) is executed:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">sample timer += cycles since last update;<br /><br />if &#40;sample timer &gt;= sample delay&#41;<br />&#123;<br />    sample timer -= sample delay;<br />    render sample&#40;&#41;;<br />&#125;</div><p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Thu Jan 05, 2012 2:52 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2012-01-05T13:43:00-07:00</updated>
<published>2012-01-05T13:43:00-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88476#p88476</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88476#p88476"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88476#p88476"><![CDATA[
<div class="quotetitle">beannaich wrote:</div><div class="quotecontent"><br /><div class="quotetitle">Zepper wrote:</div><div class="quotecontent">This is part of the APU, the "quarter" and "half" frames.<br /></div><br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />Incorrect, the "quarter" and "half" frames, are where the components are updated (Sweep, Envelope, Linear Counter, etc).<br /></div></div><br /><br />Absolutely, but don't call me "incorrect". That's EXACTLY what I mean... and what I understood from you: <em>The way I picture it in my head, is that each channel has a certain "Update" logic, <strong>that is executed every x input cycles</strong></em>. <br /><br /><div class="quotetitle"><b>Quote:</b></div><div class="quotecontent"><br />The channel's output is constantly updating. With every CPU cycle<br /></div><br /><br />Yes, but you need to resample it to the PC sample rate.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Thu Jan 05, 2012 1:43 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2012-01-04T23:25:34-07:00</updated>
<published>2012-01-04T23:25:34-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88436#p88436</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88436#p88436"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88436#p88436"><![CDATA[
<div class="quotetitle">Zepper wrote:</div><div class="quotecontent"><br />This is part of the APU, the "quarter" and "half" frames.<br /></div><br /><br />Incorrect, the "quarter" and "half" frames, are where the components are updated (Sweep, Envelope, Linear Counter, etc). The channel's output is constantly updating. With every CPU cycle<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Wed Jan 04, 2012 11:25 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2012-01-04T19:23:52-07:00</updated>
<published>2012-01-04T19:23:52-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88420#p88420</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88420#p88420"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88420#p88420"><![CDATA[
<div class="quotetitle">beannaich wrote:</div><div class="quotecontent"><br />The way I picture it in my head, is that each channel has a certain "Update" logic, that is executed every x input cycles.<br /></div><br /><br />This is part of the APU, the "quarter" and "half" frames.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Jan 04, 2012 7:23 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[beannaich]]></name></author>
<updated>2012-01-04T15:29:32-07:00</updated>
<published>2012-01-04T15:29:32-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88409#p88409</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88409#p88409"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88409#p88409"><![CDATA[
The way I picture it in my head, is that each channel has a certain "Update" logic, that is executed every x input cycles. Where x is the frequency value. For triangle, the update logic is that another step is taken through the pyramid:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">timer += cycles since last update<br /><br />if &#40;timer &gt;= frequency value&#41;<br />&#123;<br />    timer -= frequency value; // do NOT set to 0, otherwise you will lose cycles<br />    step = &#40;step + 1&#41; % 32;<br />&#125;</div><br /><br />Channels also have a configurable way to disable output (register 4015h), as well as internal ways to disable output. For instance, the square channel's duty cycles can disable output while in a low cycle, or the LFSR in the noise channel can disable output when bit 0 is set.<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">if &#40;channel can output&#41;<br />&#123;<br />    return amplitude;<br />&#125;<br />else<br />&#123;<br />    return 0;<br />&#125;</div><br /><br />One thing to note, is that not all channels output 0 when silenced. Triangle for instance always outputs it's current amplitude, but when it stops counting, there is no more sound wave being generated and the channel flat lines.<br /><br />Each channel is made up of a few different 'primitive' components (Envelope, Sweep, Duty, etc). For my purposes, I found it easier to code the individual components, and reference them as objects in my channel classes. This keeps the logic for those components static between all channels you make. These components also have an update logic, but their logic is invoked depending on the APU's "frame" sequencer.<br /><br />I hope that wasn't convoluted or confusing, and I also hope it helped. Audio was the biggest problem for me, and it sounds like many others had issues with it as well.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4320">beannaich</a> — Wed Jan 04, 2012 3:29 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2012-01-04T10:15:26-07:00</updated>
<published>2012-01-04T10:15:26-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88399#p88399</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88399#p88399"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88399#p88399"><![CDATA[
Thank you everyone who's contributed so far and in the future. And please add more if you can. I'll be looking this over as I work on learning this.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Wed Jan 04, 2012 10:15 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Zepper]]></name></author>
<updated>2012-01-04T07:55:18-07:00</updated>
<published>2012-01-04T07:55:18-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88390#p88390</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88390#p88390"/>
<title type="html"><![CDATA[Re: Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88390#p88390"><![CDATA[
<div class="quotetitle">MottZilla wrote:</div><div class="quotecontent"><br />(...)but it doesn't seem like there is a whole lot of help aimed at emulating that explains some of the basics, mainly just alot of technical documents that assume you know things about sound that you don't.<br /></div><br /><br />There are three units: <br />1. the emulated APU generating sound samples,<br />2. the audio output, usually SDL, DirectX or... Allegro, and<br />3. the resample unit.<br /><br />Generating samples is pretty easy. I use a downcounter set with the frequency value. Such value represents the number of CPU cycles for the next sample.<br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">chan-&gt;freq--;<br />if&#40;0 == chan-&gt;freq&#41;<br />&#123;<br />   //do stuff<br />   //...<br />   chan-&gt;output = data; //sound sample<br />   chan-&gt;freq = chan-&gt;freq_cache; //value written to freq registers<br />&#125;</div><br /><br />Well, you must find an algorithm to resample the generated NES sound. The most simple that I've found &amp; use is <em>adding the samples and divide by the number of updates</em>.<br /><br />I'll write more later.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=39">Zepper</a> — Wed Jan 04, 2012 7:55 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Kasumi]]></name></author>
<updated>2012-01-04T04:10:47-07:00</updated>
<published>2012-01-04T04:10:47-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88387#p88387</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88387#p88387"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88387#p88387"><![CDATA[
Thanks for that post, Bisqwit. I'm not an emulator developer, but I have been in need of a basic intro to audio and that was it. Now I feel like I have a good starting point for whenever I do decide to do some audio programming. (I have been avoiding it in every program I've ever written.)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=3504">Kasumi</a> — Wed Jan 04, 2012 4:10 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Bisqwit]]></name></author>
<updated>2012-01-04T04:17:20-07:00</updated>
<published>2012-01-04T02:57:50-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88384#p88384</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88384#p88384"/>
<title type="html"><![CDATA[Basics]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88384#p88384"><![CDATA[
Here is my attempt at conveying the basics, beginning from fundamentals, in a short but organized manner. There are other tutorials, but I wanted to write one just for the exercise of it :-)<br /><br />In order to produce sound, you have to generate "PCM sound".<br />"PCM sound" is a type of signal.<br />A signal means anything that changes over time.<br />In case of sound, the signal is the elevation of the diaphragram of the loudspeaker (which reproduces air pressure waves by pushing and pulling the air in front of it).<br /><br />Sampling rate is how often it is measured (and emitted).<br /><br />For example, a PCM signal at 8000 Hz sampling rate is a numeric value that is emitted 8000 times in a second.<br />If you have an array of 40000 integers, and you know the sampling rate is 8000, you have 5 seconds of signal. (5*8000=40000). If the sampling rate is 22050, you have there about 1.8 seconds of signal.<br /><br />Signal has two fundamental properties: Frequency and amplitude.<br />Amplitude is how large the differences are between values. Frequency is how fast the value changes from small to large and back.<br /><br />For example, a PCM signal, sampled at 22050 Hz rate, that happens to have the amplitude of 20000 and a frequency of 2205 hertz, could look like this:<br />　　  -10000 -6000 -2000 4000 7000 10000 6000 1000 -4000 -7000<br />　　  -10000 -6000 -2000 4000 7000 10000 6000 1000 -4000 -7000<br />　　  -10000 -6000 -2000 4000 7000 10000 6000 1000 -4000 -7000<br />　　  (repeated for thousands of times).<br />Within 22050 samples (which represents 1.0 seconds of audio, because of the sampling rate of 22050), it oscillates 2205 times between -10000 and 10000, hence an amplitude of 20000 and frequency of 2205 Hz. The wave length is 10 samples (sampling rate divided by frequency).<br />If the amplitude was smaller, it would be quieter (the diaphragram moves very little); if it were larger, it would be louder (the diaphragram moves a lot).<br />If the frequency was lower, the pitch would be lower (the diaphragram moves slowly). The intervals between the extremes (wave length) would be greater.<br />If the frequency was higher, the pitch would be higher (the diaphragram moves rapidly). The intervals between the extremes (wave length) would be shorter.<br /><br />When the signal samples are plotted in a graph, it forms a shape. The shape is called a wave. Different waves are called with different names.<br />There is the square wave, which goes from maximum value to minimum value and back in an abrupt manner, with no intermediates. For example, 100 100 100 100 100 20 20 20 20 20 100 100 100 100 100 20 20 20 20 20.<br />There is the triangle wave, which goes from maximum to minimum, and back, in a linear fashion. For example, 100 90 80 70 60 50 40 30 20 30 40 50 60 70 80 90 100.<br />There is the sine wave, which is a smooth wave that is generated with the mathematical sin() function.<br />Unlimited number of different wavetypes exist and can be devised.<br /><br />Here is example C code that generates ten seconds of 8000 hertz PCM signal, consisting of a 440 hertz sinewave that has the amplitude of 60:<div class="codetitle"><b>Code:</b></div><div class="codecontent">for&#40;int pos=0; pos&lt;80000; pos++&#41;   putchar&#40; 60*sin&#40;440*pos*2*M_PI/8000&#41; &#41;;</div><br /><br />To mix different signals together, you usually simply add them. For example, this code outputs a 440 hertz sinewave and a 300 hertz sinewave together: <div class="codetitle"><b>Code:</b></div><div class="codecontent">for&#40;int pos=0; pos&lt;80000; pos++&#41;   putchar&#40; 60*sin&#40;440*pos*2*M_PI/8000&#41;  +   60*sin&#40;300*pos*2*M_PI/8000&#41;&#41;;</div><br /><br />This covers the basics; the rest is extrapolation. :-)<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=5043">Bisqwit</a> — Wed Jan 04, 2012 2:57 am</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[miker00lz]]></name></author>
<updated>2012-01-03T23:26:58-07:00</updated>
<published>2012-01-03T23:26:58-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88380#p88380</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88380#p88380"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88380#p88380"><![CDATA[
the audio stuff confused me at first, too. Dwedit's post is a good simple example of generating a digital square wave based on a frequency. when emulating the NES audio unit, determining what each sample byte should be is actually just derived from the duty cycle loop and timer period, so you don't actually need to know the frequency of any notes being played.<br /><br />basically, on every square wave clock, if the channel is enabled then it's period value is decremented. the current position in the duty cycle loop is stepped if the square channel's period has reached zero. if that happens, then the period value is also reset so the countdown begins again. that is highly oversimplifying it, other variables are involved, but that is the gist of it.<br /><br />the square channels have four possible duty cycles that could be used. this is what my duty cycle array looks like:<br /><br /><div class="codetitle"><b>Code:</b></div><div class="codecontent">uint8_t square_duty&#91;4&#93;&#91;8&#93; = &#123;<br />   &#123; 0, 1, 0, 0, 0, 0, 0, 0 &#125;,<br />   &#123; 0, 1, 1, 0, 0, 0, 0, 0 &#125;,<br />   &#123; 0, 1, 1, 1, 1, 0, 0, 0 &#125;,<br />   &#123; 1, 0, 0, 1, 1, 1, 1, 1 &#125;<br />&#125;;<br /></div><br /><br />if the current array value for a square channel is 1, then the channel's sample output is equal to that channel's current envelope value. otherwise, silence.<br /><br />i'm not good at explaining this, and maybe i got some details wrong. i hope it makes a little sense. i can provide more code if you want. my APU is not entirely complete, it doesn't handle the sweeping yet but otherwise sounds pretty good, and i think it's easy to follow when reading.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=4572">miker00lz</a> — Tue Jan 03, 2012 11:26 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[Dwedit]]></name></author>
<updated>2012-01-03T23:33:31-07:00</updated>
<published>2012-01-03T22:27:45-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88378#p88378</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88378#p88378"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88378#p88378"><![CDATA[
Start with a C program that plays a simple song with square waves, I usually use Twinkle Twinkle Little Star for this purpose.<br /><br />You know the frequencies of the notes, because the A note after middle C is 440Hz.<br /><br />Formula for frequency of any note: F = f0 * 2^((n-n0)/12)<br />where f0 is the reference frequency (440 hz)<br />n0 is your reference note number (note "A3", 3*12+9 = 45)<br />n is your note number (12 * octave + note number within octave), 0 = C, 1 = C#, 2 = D, 3 = D#, 4 = E..., 12 = C on next octave<br />Frequency of middle C (C3) is the frequency of note number 3*12 + 0<br />Which is ~261.625... Hz.<br /><br />You have your sampling rate. (Let's make it 44100Hz)<br />From the sampling rate and frequency, comes the period measured in Samples.  So the C3 note is ~168.561... samples for a full period.<br />We're making a square wave, so half of the time is max level, and half of the time is min level.<br /><br />Anyway, let's output 1/60s of audio, middle C note.<br />1/60s of audio is 735 samples long.  With our Middle C note, that's ~4.36 periods long.<br /><br />Make 84 samples of VolHigh, a fractional sample, then 84 samples of VolLow, and another fractional sample.  Repeat 4.36 times.<br /><br />more to come...<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=53">Dwedit</a> — Tue Jan 03, 2012 10:27 pm</p><hr />
]]></content>
</entry>
<entry>
<author><name><![CDATA[MottZilla]]></name></author>
<updated>2012-01-03T21:58:36-07:00</updated>
<published>2012-01-03T21:58:36-07:00</published>
<id>http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88377#p88377</id>
<link href="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88377#p88377"/>
<title type="html"><![CDATA[Sound Emulation, Resources, Tips, Etc?]]></title>

<content type="html" xml:base="http://forums.nesdev.com/viewtopic.php?t=8491&amp;p=88377#p88377"><![CDATA[
Certain terminology was not explained so well in the information you linked as in regards to the NES. I'm been talking to someone though to try to get a better idea as to what is going on. I haven't looked at a huge assortment of APU documents but the Brad Taylor and Blargg documents seemed quite technical but didn't really help with certain basic aspects I did not understand yet. Makes me wish I'd have taken on writing my own APU when Blargg was still around.<p>Statistics: Posted by <a href="http://forums.nesdev.com/memberlist.php?mode=viewprofile&amp;u=1726">MottZilla</a> — Tue Jan 03, 2012 9:58 pm</p><hr />
]]></content>
</entry>
</feed>